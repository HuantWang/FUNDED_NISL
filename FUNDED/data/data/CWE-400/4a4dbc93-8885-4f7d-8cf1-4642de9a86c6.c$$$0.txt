-----label-----
0
-----code-----
static void goodG2B2()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
59,61
60,61
61,62
63,64
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,48,49,50,54,57,58,62,64
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,4,0)
(13,23,0)
(8,18,0)
(6,10,0)
(15,2,0)
(10,0,0)
(4,18,0)
(20,21,0)
(18,11,0)
(21,19,0)
(11,13,0)
(13,19,0)
(3,0,0)
(20,2,0)
(21,20,0)
(14,0,0)
(5,0,0)
(11,18,0)
(7,4,0)
(17,10,0)
(22,19,0)
(19,2,0)
(13,11,0)
(9,21,0)
(24,21,0)
(23,13,0)
(19,13,0)
(20,21,1)
(7,8,1)
(22,1,1)
(12,1,1)
(13,11,1)
(6,17,1)
(13,23,1)
(1,10,1)
(19,13,1)
(12,20,1)
(11,18,1)
(21,9,1)
(16,12,1)
(10,6,1)
(8,22,1)
(4,7,1)
(24,15,1)
(9,24,1)
(15,19,1)
(18,4,1)
(21,19,1)
(24,1,2)
(11,1,2)
(13,23,2)
(20,21,2)
(8,1,2)
(9,1,2)
(18,4,2)
(21,1,2)
(18,1,2)
(20,1,2)
(13,1,2)
(19,13,2)
(13,11,2)
(11,18,2)
(22,1,2)
(21,19,2)
(4,1,2)
(19,1,2)
(7,1,2)
(15,1,2)
-----------------------------------
(0,)
(1,globalReturnsTrue()
(2,)
(3,if(globalReturnsTrue()
(4,sizeof(int64_t)
(5,if(globalReturnsTrue()
(6,NULL)
(7,int64_t)
(8,100)
(9,0)
(10,data = NULL)
(11,ALLOCA(100*sizeof(int64_t)
(12,globalReturnsTrue()
(13,(int64_t *)
(14,data)
(15,L)
(16,RET)
(17,data)
(18,100*sizeof(int64_t)
(19,data = (int64_t *)
(20,printLongLongLine(data[0])
(21,data[0])
(22,data)
(23,int64_t *)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^