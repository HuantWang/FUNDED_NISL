-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
31,34
32,33
34,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
41,44
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
63,64
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,38,39,45,46,49,50,55,57,61,62,67,68
-----computeFrom-----
12,13
12,14
42,43
42,44
43,44
43,45
47,48
47,49
-----guardedBy-----
49,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(13,34,0)
(21,11,0)
(24,25,0)
(31,24,0)
(6,8,0)
(17,24,0)
(23,7,0)
(18,19,0)
(33,14,0)
(30,21,0)
(16,21,0)
(34,30,0)
(34,11,0)
(1,11,0)
(19,12,0)
(15,3,0)
(11,3,0)
(5,33,0)
(29,3,0)
(20,24,0)
(2,9,0)
(33,11,0)
(21,30,0)
(11,7,0)
(30,34,0)
(7,11,0)
(9,0,0)
(4,21,0)
(8,14,0)
(24,17,0)
(32,3,0)
(17,11,0)
(35,27,0)
(36,17,0)
(26,34,0)
(22,24,1)
(9,2,1)
(16,4,1)
(8,6,1)
(18,22,1)
(28,11,1)
(33,5,1)
(22,28,1)
(31,20,1)
(26,22,1)
(30,21,1)
(6,33,1)
(34,13,1)
(5,30,1)
(19,18,1)
(33,11,1)
(20,28,1)
(30,34,1)
(4,34,1)
(21,11,1)
(17,36,1)
(23,1,1)
(21,16,1)
(24,17,1)
(10,19,1)
(17,11,1)
(10,9,1)
(36,31,1)
(10,8,1)
(13,26,1)
(2,30,1)
(11,7,1)
(34,11,1)
(7,23,1)
(34,22,2)
(21,34,2)
(11,7,2)
(21,11,2)
(24,17,2)
(5,30,2)
(18,22,2)
(4,34,2)
(8,30,2)
(2,30,2)
(33,11,2)
(33,30,2)
(30,22,2)
(20,28,2)
(26,22,2)
(16,34,2)
(6,30,2)
(30,34,2)
(17,11,2)
(30,21,2)
(24,28,2)
(36,28,2)
(31,28,2)
(34,11,2)
(9,30,2)
(17,28,2)
(13,22,2)
(19,22,2)
-----------------------------------
(0,)
(1,count)
(2,"Sleep time too long")
(3,)
(4,count)
(5,count)
(6,"Sleep time OK")
(7,-1)
(8,printLine("Sleep time OK")
(9,printLine("Sleep time too long")
(10,RET)
(11,count = -1)
(12,)
(13,0)
(14,)
(15,if(staticTrue)
(16,2000)
(17,&count)
(18,"Benign, fixed string")
(19,printLine("Benign, fixed string")
(20,stdin)
(21,count <= 2000)
(22,staticFalse)
(23,1)
(24,fscanf(stdin, "%d", &count)
(25,)
(26,count)
(27,)
(28,staticTrue)
(29,count)
(30,count > 0 && count <= 2000)
(31,"%d")
(32,if(staticFalse)
(33,SLEEP(count)
(34,count > 0)
(35,if (count > 0 && count <= 2000)
(36,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^