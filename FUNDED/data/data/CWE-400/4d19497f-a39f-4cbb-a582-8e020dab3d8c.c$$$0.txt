-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
78,79
79,80
79,81
80,81
83,84
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,75,76,81,82,87,89
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(32,46,0)
(18,42,0)
(16,22,0)
(15,20,0)
(36,35,0)
(29,26,0)
(46,37,0)
(38,20,0)
(43,35,0)
(0,30,0)
(8,4,0)
(4,20,0)
(47,22,0)
(21,28,0)
(14,46,0)
(29,15,0)
(41,23,0)
(25,23,0)
(42,18,0)
(44,5,0)
(46,4,0)
(46,15,0)
(43,18,0)
(17,29,0)
(9,27,0)
(25,11,0)
(37,46,0)
(43,27,0)
(22,15,0)
(34,19,0)
(33,15,0)
(10,43,0)
(29,35,0)
(1,28,0)
(40,5,0)
(35,5,0)
(27,9,0)
(27,15,0)
(13,30,0)
(24,31,0)
(18,43,0)
(15,27,0)
(27,43,0)
(6,18,0)
(22,4,0)
(37,20,0)
(7,42,0)
(3,35,0)
(12,31,0)
(45,5,0)
(23,25,0)
(30,15,0)
(2,34,0)
(13,15,1)
(33,31,1)
(36,3,1)
(21,31,1)
(46,4,1)
(29,15,1)
(16,30,1)
(39,34,1)
(29,35,1)
(43,35,1)
(27,9,1)
(2,28,1)
(31,24,1)
(15,27,1)
(4,8,1)
(42,7,1)
(10,33,1)
(28,1,1)
(47,16,1)
(43,18,1)
(29,17,1)
(27,43,1)
(22,47,1)
(12,35,1)
(39,29,1)
(17,28,1)
(46,32,1)
(8,22,1)
(23,41,1)
(0,13,1)
(41,30,1)
(35,36,1)
(32,14,1)
(34,2,1)
(6,10,1)
(24,12,1)
(1,21,1)
(21,37,1)
(7,6,1)
(25,23,1)
(16,25,1)
(37,46,1)
(14,4,1)
(22,15,1)
(30,0,1)
(46,15,1)
(18,42,1)
(30,15,1)
(32,31,2)
(22,15,2)
(42,31,2)
(29,35,2)
(16,31,2)
(46,4,2)
(46,15,2)
(27,9,2)
(14,31,2)
(46,31,2)
(15,31,2)
(43,31,2)
(18,42,2)
(4,31,2)
(47,31,2)
(27,43,2)
(30,15,2)
(43,18,2)
(23,30,2)
(25,30,2)
(6,31,2)
(27,31,2)
(7,31,2)
(34,28,2)
(43,35,2)
(0,31,2)
(13,31,2)
(18,31,2)
(29,28,2)
(8,31,2)
(33,31,2)
(10,31,2)
(30,31,2)
(25,23,2)
(15,27,2)
(17,28,2)
(41,30,2)
(2,28,2)
(29,15,2)
(22,31,2)
(37,31,2)
(37,46,2)
-----------------------------------
(0,NULL)
(1,5)
(2,"Benign, fixed string")
(3,data)
(4,data[0] = 5)
(5,)
(6,100)
(7,int)
(8,5)
(9,int *)
(10,data)
(11,)
(12,GLOBAL_CONST_FIVE)
(13,data)
(14,data)
(15,data = (int *)
(16,data)
(17,data)
(18,100*sizeof(int)
(19,)
(20,)
(21,GLOBAL_CONST_FIVE)
(22,data[0])
(23,-1)
(24,5)
(25,exit(-1)
(26,)
(27,(int *)
(28,GLOBAL_CONST_FIVE!=5)
(29,free(data)
(30,data == NULL)
(31,GLOBAL_CONST_FIVE==5)
(32,0)
(33,data)
(34,printLine("Benign, fixed string")
(35,data = NULL)
(36,NULL)
(37,printIntLine(data[0])
(38,if (data == NULL)
(39,RET)
(40,data)
(41,1)
(42,sizeof(int)
(43,realloc(data, 100*sizeof(int)
(44,if(GLOBAL_CONST_FIVE==5)
(45,if(GLOBAL_CONST_FIVE!=5)
(46,data[0])
(47,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^