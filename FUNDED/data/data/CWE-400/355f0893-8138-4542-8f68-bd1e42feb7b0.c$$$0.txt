-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
48,49
50,51
50,52
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
71,72
71,73
72,73
74,75
74,76
75,76
75,77
76,77
79,80
81,82
82,83
84,85
85,86
86,87
86,88
87,88
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,41,44,49,51,53,58,59,62,63,69,70,73,77,78,80,83,88,89,90,91,95,96,97
-----computeFrom-----
12,13
12,14
55,56
55,57
56,57
56,58
60,61
60,62
67,68
67,69
71,72
71,73
-----guardedBy-----
62,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(44,2,0)
(17,57,0)
(18,48,0)
(21,4,0)
(30,50,0)
(15,5,0)
(56,4,0)
(14,50,0)
(48,20,0)
(10,4,0)
(55,30,0)
(44,54,0)
(3,2,0)
(29,20,0)
(16,38,0)
(6,57,0)
(37,55,0)
(5,19,0)
(25,48,0)
(22,26,0)
(52,9,0)
(38,9,0)
(40,54,0)
(42,49,0)
(32,38,0)
(31,29,0)
(46,36,0)
(47,55,0)
(57,6,0)
(43,9,0)
(35,50,0)
(45,9,0)
(13,29,0)
(51,30,0)
(2,44,0)
(27,54,0)
(49,9,0)
(28,10,0)
(11,50,0)
(8,54,0)
(33,11,0)
(34,44,0)
(23,9,0)
(24,26,0)
(53,4,0)
(0,4,0)
(55,37,0)
(20,48,0)
(41,6,0)
(29,44,0)
(30,55,0)
(55,44,0)
(20,29,0)
(48,44,0)
(12,57,0)
(57,4,0)
(26,38,0)
(6,44,0)
(28,39,1)
(30,50,1)
(15,30,1)
(25,29,1)
(14,20,1)
(33,5,1)
(1,53,1)
(53,10,1)
(48,18,1)
(51,11,1)
(7,23,1)
(29,44,1)
(6,41,1)
(11,50,1)
(51,50,1)
(24,1,1)
(23,20,1)
(47,51,1)
(20,48,1)
(30,55,1)
(17,39,1)
(29,13,1)
(18,25,1)
(55,44,1)
(57,6,1)
(35,14,1)
(48,44,1)
(22,24,1)
(55,47,1)
(49,42,1)
(3,34,1)
(12,17,1)
(2,3,1)
(41,12,1)
(10,28,1)
(1,21,1)
(23,30,1)
(43,49,1)
(42,1,1)
(20,29,1)
(6,44,1)
(31,26,1)
(11,33,1)
(39,44,1)
(26,22,1)
(7,43,1)
(5,15,1)
(44,2,1)
(55,37,1)
(50,35,1)
(21,57,1)
(13,31,1)
(13,1,2)
(21,39,2)
(55,37,2)
(24,1,2)
(11,30,2)
(33,30,2)
(25,29,2)
(22,1,2)
(26,1,2)
(14,20,2)
(48,44,2)
(28,39,2)
(42,1,2)
(31,1,2)
(23,1,2)
(55,44,2)
(48,29,2)
(50,20,2)
(47,30,2)
(47,20,2)
(51,20,2)
(15,30,2)
(49,1,2)
(55,20,2)
(6,39,2)
(30,30,2)
(30,20,2)
(44,2,2)
(53,39,2)
(10,39,2)
(20,48,2)
(29,1,2)
(20,29,2)
(57,6,2)
(57,39,2)
(20,1,2)
(30,55,2)
(11,50,2)
(18,29,2)
(35,20,2)
(17,39,2)
(29,44,2)
(43,1,2)
(5,30,2)
(41,39,2)
(12,39,2)
(55,30,2)
(6,44,2)
(30,50,2)
(51,30,2)
-----------------------------------
(0,default:)
(1,7)
(2,-1)
(3,1)
(4,)
(5,printLine("Hello")
(6,&count)
(7,RET)
(8,count)
(9,)
(10,printLine("Benign, fixed string")
(11,i++)
(12,"%d")
(13,0)
(14,i)
(15,"Hello")
(16,i)
(17,stdin)
(18,20)
(19,)
(20,count > 0 && count <= 20)
(21,break;)
(22,0)
(23,break;)
(24,i)
(25,count)
(26,i = 0)
(27,switch(6)
(28,"Benign, fixed string")
(29,count > 0)
(30,i < (size_t)
(31,count)
(32,if (count > 0 && count <= 20)
(33,i)
(34,count)
(35,0)
(36,)
(37,size_t)
(38,)
(39,6)
(40,switch(7)
(41,count)
(42,"Benign, fixed string")
(43,break;)
(44,count = -1)
(45,case 7:)
(46,for (i = 0; i < (size_t)
(47,count)
(48,count <= 20)
(49,printLine("Benign, fixed string")
(50,i = 0)
(51,i)
(52,default:)
(53,break;)
(54,)
(55,(size_t)
(56,case 6:)
(57,fscanf(stdin, "%d", &count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^