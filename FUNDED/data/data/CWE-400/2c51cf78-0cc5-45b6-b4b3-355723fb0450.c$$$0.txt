-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_goodG2BSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_goodG2BSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_goodG2BSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68b_goodG2BSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(0,28,0)
(32,5,0)
(30,10,0)
(18,35,0)
(31,37,0)
(37,9,0)
(23,6,0)
(39,32,0)
(2,5,0)
(5,26,0)
(13,14,0)
(10,9,0)
(22,7,0)
(28,0,0)
(8,14,0)
(37,31,0)
(10,6,0)
(5,37,0)
(2,26,0)
(14,6,0)
(34,28,0)
(32,26,0)
(37,5,0)
(10,30,0)
(14,13,0)
(25,6,0)
(9,37,0)
(40,26,0)
(4,7,0)
(12,30,0)
(0,15,0)
(40,5,0)
(20,18,0)
(38,5,0)
(33,10,0)
(27,40,0)
(7,24,0)
(29,1,0)
(11,13,0)
(1,5,0)
(6,24,0)
(3,26,0)
(17,2,0)
(36,24,0)
(19,2,0)
(16,1,0)
(9,10,0)
(32,5,1)
(6,25,1)
(20,14,1)
(25,23,1)
(21,40,1)
(32,39,1)
(37,31,1)
(21,18,1)
(33,38,1)
(39,2,1)
(18,20,1)
(14,13,1)
(11,8,1)
(40,27,1)
(30,12,1)
(17,19,1)
(2,17,1)
(38,14,1)
(37,9,1)
(40,5,1)
(10,6,1)
(34,1,1)
(19,1,1)
(8,6,1)
(19,0,1)
(14,6,1)
(29,5,1)
(13,11,1)
(2,5,1)
(5,37,1)
(28,34,1)
(10,30,1)
(1,16,1)
(12,33,1)
(1,5,1)
(16,29,1)
(9,10,1)
(0,28,1)
(27,32,1)
(40,14,2)
(33,14,2)
(10,6,2)
(2,5,2)
(1,5,2)
(16,14,2)
(29,14,2)
(0,1,2)
(0,28,2)
(40,5,2)
(5,14,2)
(37,9,2)
(14,6,2)
(9,14,2)
(38,14,2)
(37,14,2)
(28,1,2)
(14,13,2)
(5,37,2)
(30,14,2)
(18,14,2)
(27,14,2)
(20,14,2)
(19,14,2)
(39,14,2)
(10,14,2)
(32,14,2)
(17,14,2)
(32,5,2)
(9,10,2)
(12,14,2)
(37,31,2)
(34,1,2)
(10,30,2)
(2,14,2)
(1,14,2)
-----------------------------------
(0,exit(-1)
(1,myString == NULL)
(2,wcscpy(myString, HELLO_STRING)
(3,if (myString == NULL)
(4,myString)
(5,myString = (wchar_t *)
(6,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData)
(7,)
(8,data)
(9,malloc(data*sizeof(wchar_t)
(10,data*sizeof(wchar_t)
(11,HELLO_STRING)
(12,wchar_t)
(13,wcslen(HELLO_STRING)
(14,data > wcslen(HELLO_STRING)
(15,)
(16,NULL)
(17,HELLO_STRING)
(18,printLine("Input is less than the length of the source string")
(19,myString)
(20,"Input is less than the length of the source string")
(21,RET)
(22,if (data > wcslen(HELLO_STRING)
(23,data)
(24,)
(25,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_68_goodG2BData)
(26,)
(27,myString)
(28,-1)
(29,myString)
(30,sizeof(wchar_t)
(31,wchar_t *)
(32,printWLine(myString)
(33,data)
(34,1)
(35,)
(36,data)
(37,(wchar_t *)
(38,myString)
(39,myString)
(40,free(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^