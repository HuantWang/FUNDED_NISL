-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(13,48,0)
(46,27,0)
(37,49,0)
(44,31,0)
(23,45,0)
(35,46,0)
(38,32,0)
(15,11,0)
(36,49,0)
(6,12,0)
(11,30,0)
(47,0,0)
(22,44,0)
(29,31,0)
(9,23,0)
(26,32,0)
(4,1,0)
(31,40,0)
(18,49,0)
(5,9,0)
(12,1,0)
(23,9,0)
(32,2,0)
(34,2,0)
(14,36,0)
(42,11,0)
(25,34,0)
(20,48,0)
(12,2,0)
(31,43,0)
(36,40,0)
(41,14,0)
(49,48,0)
(43,31,0)
(43,1,0)
(0,2,0)
(1,12,0)
(16,36,0)
(32,12,0)
(34,12,0)
(7,2,0)
(39,21,0)
(1,43,0)
(0,12,0)
(3,48,0)
(8,40,0)
(21,12,0)
(31,49,0)
(17,21,0)
(24,40,0)
(1,4,0)
(36,14,0)
(31,44,0)
(40,10,0)
(44,22,1)
(1,43,1)
(0,12,1)
(34,12,1)
(22,29,1)
(28,19,1)
(41,16,1)
(46,35,1)
(36,49,1)
(5,21,1)
(19,49,1)
(38,26,1)
(21,17,1)
(36,14,1)
(21,12,1)
(31,49,1)
(31,40,1)
(28,40,1)
(6,36,1)
(24,8,1)
(8,19,1)
(26,23,1)
(39,12,1)
(14,41,1)
(31,44,1)
(18,37,1)
(25,32,1)
(40,24,1)
(26,21,1)
(33,0,1)
(35,36,1)
(33,28,1)
(47,34,1)
(16,28,1)
(49,18,1)
(9,5,1)
(1,4,1)
(12,1,1)
(34,25,1)
(33,46,1)
(23,9,1)
(32,12,1)
(36,40,1)
(29,6,1)
(32,38,1)
(43,31,1)
(17,39,1)
(0,47,1)
(46,36,2)
(12,1,2)
(36,28,2)
(36,49,2)
(44,36,2)
(31,36,2)
(38,36,2)
(40,19,2)
(21,12,2)
(32,36,2)
(24,19,2)
(41,28,2)
(23,9,2)
(34,36,2)
(5,21,2)
(14,28,2)
(22,36,2)
(34,12,2)
(31,44,2)
(43,36,2)
(25,36,2)
(21,36,2)
(47,36,2)
(9,21,2)
(1,4,2)
(1,43,2)
(29,36,2)
(36,14,2)
(32,12,2)
(16,28,2)
(23,21,2)
(6,36,2)
(35,36,2)
(12,36,2)
(31,49,2)
(0,12,2)
(26,36,2)
(1,36,2)
(8,19,2)
(39,36,2)
(31,40,2)
(43,31,2)
(17,36,2)
(36,40,2)
(0,36,2)
-----------------------------------
(0,free(myString)
(1,(char *)
(2,)
(3,if(GLOBAL_CONST_TRUE)
(4,char *)
(5,1)
(6,myString)
(7,if (myString == NULL)
(8,data)
(9,-1)
(10,)
(11,)
(12,myString = (char *)
(13,if(GLOBAL_CONST_TRUE)
(14,strlen(HELLO_STRING)
(15,if (data > strlen(HELLO_STRING)
(16,data)
(17,NULL)
(18,0)
(19,GLOBAL_CONST_TRUE)
(20,data)
(21,myString == NULL)
(22,char)
(23,exit(-1)
(24,20)
(25,myString)
(26,myString)
(27,)
(28,GLOBAL_CONST_TRUE)
(29,data)
(30,)
(31,data*sizeof(char)
(32,strcpy(myString, HELLO_STRING)
(33,RET)
(34,printLine(myString)
(35,"Input is less than the length of the source string")
(36,data > strlen(HELLO_STRING)
(37,data)
(38,HELLO_STRING)
(39,myString)
(40,data = 20)
(41,HELLO_STRING)
(42,myString)
(43,malloc(data*sizeof(char)
(44,sizeof(char)
(45,)
(46,printLine("Input is less than the length of the source string")
(47,myString)
(48,)
(49,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^