-----label-----
0
-----code-----
static int __packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
{
	struct sock *sk = &po->sk;
	int ret = ROOM_NONE;

	if (po->prot_hook.func != tpacket_rcv) {
		int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)
					  - (skb ? skb->truesize : 0);
		if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))
			return ROOM_NORMAL;
		else if (avail > 0)
			return ROOM_LOW;
		else
			return ROOM_NONE;
	}

	if (po->tp_version == TPACKET_V3) {
		if (__tpacket_v3_has_room(po, ROOM_POW_OFF))
			ret = ROOM_NORMAL;
		else if (__tpacket_v3_has_room(po, 0))
			ret = ROOM_LOW;
	} else {
		if (__tpacket_has_room(po, ROOM_POW_OFF))
			ret = ROOM_NORMAL;
		else if (__tpacket_has_room(po, 0))
			ret = ROOM_LOW;
	}

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
27,28
27,29
28,29
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
41,43
42,43
42,44
43,44
47,48
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
65,66
66,67
66,68
67,68
70,71
71,72
71,73
71,74
72,73
74,75
74,76
75,76
79,80
79,81
79,82
80,81
80,82
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
94,95
94,96
94,97
95,96
95,97
96,97
99,100
100,101
102,103
103,104
105,106
105,107
105,108
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
114,117
115,116
115,117
115,118
116,117
118,119
120,121
122,123
123,124
123,125
124,125
126,127
128,129
128,130
129,130
129,131
129,132
130,131
132,133
135,136
136,137
136,138
137,138
139,140
141,142
142,143
142,144
142,145
143,144
143,145
143,146
144,145
146,147
148,149
150,151
151,152
151,153
152,153
154,155
156,157
156,158
157,158
157,159
157,160
158,159
160,161
163,164
164,165
164,166
165,166
167,168
169,170
170,171
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,29,30,33,35,38,44,45,46,48,52,54,60,61,64,68,69,73,76,77,78,82,87,88,90,93,97,98,101,104,109,110,112,117,119,121,125,127,131,133,134,138,140,145,147,149,153,155,159,161,162,166,168,171
-----computeFrom-----
40,41
40,42
56,57
56,58
57,58
57,59
80,81
80,82
84,85
84,86
95,96
95,97
106,107
106,108
123,124
123,125
136,137
136,138
151,152
151,153
164,165
164,166
-----guardedBy-----
109,133
-----guardedByNegation-----
82,97
109,161
-----lastLexicalUse-----
109,161
-----jump-----
109,161
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int __packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb){	struct sock *sk = &po->sk;	int ret = ROOM_NONE;	if (po->prot_hook.func != tpacket_rcv) {		int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0);		if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))			return ROOM_NORMAL;		else if (avail > 0)			return ROOM_LOW;		else			return ROOM_NONE;	}	if (po->tp_version == TPACKET_V3) {		if (__tpacket_v3_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_v3_has_room(po, 0))			ret = ROOM_LOW;	} else {		if (__tpacket_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_has_room(po, 0))			ret = ROOM_LOW;	}	return ret;}
static int
__packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
__packet_rcv_has_room
struct packet_sock *po
struct packet_sock
packet_sock
*po
*
po
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
{	struct sock *sk = &po->sk;	int ret = ROOM_NONE;	if (po->prot_hook.func != tpacket_rcv) {		int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0);		if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))			return ROOM_NORMAL;		else if (avail > 0)			return ROOM_LOW;		else			return ROOM_NONE;	}	if (po->tp_version == TPACKET_V3) {		if (__tpacket_v3_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_v3_has_room(po, 0))			ret = ROOM_LOW;	} else {		if (__tpacket_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_has_room(po, 0))			ret = ROOM_LOW;	}	return ret;}
struct sock *sk = &po->sk;
struct sock *sk = &po->sk;
struct sock
sock
*sk = &po->sk
*
sk
= &po->sk
&po->sk
po->sk
po
po
sk
int ret = ROOM_NONE;
int ret = ROOM_NONE;
int
ret = ROOM_NONE
ret
= ROOM_NONE
ROOM_NONE
ROOM_NONE
if (po->prot_hook.func != tpacket_rcv) {		int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0);		if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))			return ROOM_NORMAL;		else if (avail > 0)			return ROOM_LOW;		else			return ROOM_NONE;	}
po->prot_hook.func != tpacket_rcv
po->prot_hook.func
po->prot_hook
po
po
prot_hook
func
tpacket_rcv
tpacket_rcv
{		int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0);		if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))			return ROOM_NORMAL;		else if (avail > 0)			return ROOM_LOW;		else			return ROOM_NONE;	}
int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0);
int avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0);
int
avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0)
avail
= sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0)
sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)					  - (skb ? skb->truesize : 0)
sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)
sk->sk_rcvbuf
sk
sk
sk_rcvbuf
atomic_read(&sk->sk_rmem_alloc)
atomic_read
atomic_read
&sk->sk_rmem_alloc
sk->sk_rmem_alloc
sk
sk
sk_rmem_alloc
(skb ? skb->truesize : 0)
skb ? skb->truesize : 0
skb
skb
skb->truesize
skb
skb
truesize
0
if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF))			return ROOM_NORMAL;		else if (avail > 0)			return ROOM_LOW;		else			return ROOM_NONE;
avail > (sk->sk_rcvbuf >> ROOM_POW_OFF)
avail
avail
(sk->sk_rcvbuf >> ROOM_POW_OFF)
sk->sk_rcvbuf >> ROOM_POW_OFF
sk->sk_rcvbuf
sk
sk
sk_rcvbuf
ROOM_POW_OFF
ROOM_POW_OFF
return ROOM_NORMAL;
ROOM_NORMAL
ROOM_NORMAL
if (avail > 0)			return ROOM_LOW;		else			return ROOM_NONE;
avail > 0
avail
avail
0
return ROOM_LOW;
ROOM_LOW
ROOM_LOW
return ROOM_NONE;
ROOM_NONE
ROOM_NONE
if (po->tp_version == TPACKET_V3) {		if (__tpacket_v3_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_v3_has_room(po, 0))			ret = ROOM_LOW;	} else {		if (__tpacket_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_has_room(po, 0))			ret = ROOM_LOW;	}
po->tp_version == TPACKET_V3
po->tp_version
po
po
tp_version
TPACKET_V3
TPACKET_V3
{		if (__tpacket_v3_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_v3_has_room(po, 0))			ret = ROOM_LOW;	}
if (__tpacket_v3_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_v3_has_room(po, 0))			ret = ROOM_LOW;
__tpacket_v3_has_room(po, ROOM_POW_OFF)
__tpacket_v3_has_room
__tpacket_v3_has_room
po
po
ROOM_POW_OFF
ROOM_POW_OFF
ret = ROOM_NORMAL;
ret = ROOM_NORMAL
ret
ret
ROOM_NORMAL
ROOM_NORMAL
if (__tpacket_v3_has_room(po, 0))			ret = ROOM_LOW;
__tpacket_v3_has_room(po, 0)
__tpacket_v3_has_room
__tpacket_v3_has_room
po
po
0
ret = ROOM_LOW;
ret = ROOM_LOW
ret
ret
ROOM_LOW
ROOM_LOW
{		if (__tpacket_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_has_room(po, 0))			ret = ROOM_LOW;	}
if (__tpacket_has_room(po, ROOM_POW_OFF))			ret = ROOM_NORMAL;		else if (__tpacket_has_room(po, 0))			ret = ROOM_LOW;
__tpacket_has_room(po, ROOM_POW_OFF)
__tpacket_has_room
__tpacket_has_room
po
po
ROOM_POW_OFF
ROOM_POW_OFF
ret = ROOM_NORMAL;
ret = ROOM_NORMAL
ret
ret
ROOM_NORMAL
ROOM_NORMAL
if (__tpacket_has_room(po, 0))			ret = ROOM_LOW;
__tpacket_has_room(po, 0)
__tpacket_has_room
__tpacket_has_room
po
po
0
ret = ROOM_LOW;
ret = ROOM_LOW
ret
ret
ROOM_LOW
ROOM_LOW
return ret;
ret
ret
-----joern-----
(75,83,0)
(60,62,0)
(17,5,0)
(92,50,0)
(36,52,0)
(6,40,0)
(33,85,0)
(70,15,0)
(16,8,0)
(92,9,0)
(7,59,0)
(31,66,0)
(5,89,0)
(69,45,0)
(77,6,0)
(81,7,0)
(51,62,0)
(34,16,0)
(10,89,0)
(38,50,0)
(90,67,0)
(47,59,0)
(54,42,0)
(14,84,0)
(0,77,0)
(13,0,0)
(76,16,0)
(44,76,0)
(0,41,0)
(3,68,0)
(45,66,0)
(45,40,0)
(95,20,0)
(1,53,0)
(40,90,0)
(8,16,0)
(35,59,0)
(45,31,0)
(79,83,0)
(6,77,0)
(42,89,0)
(80,45,0)
(48,77,0)
(46,34,0)
(91,32,0)
(93,16,0)
(28,15,0)
(18,73,0)
(86,56,0)
(68,59,0)
(24,7,0)
(85,41,0)
(64,78,0)
(42,59,0)
(30,29,0)
(90,40,0)
(8,73,0)
(76,67,0)
(37,77,0)
(74,50,0)
(43,56,0)
(30,92,0)
(30,53,0)
(4,20,0)
(89,5,0)
(40,6,0)
(77,56,0)
(88,29,0)
(72,31,0)
(68,78,0)
(30,84,0)
(63,62,0)
(94,35,0)
(73,8,0)
(71,48,0)
(78,68,0)
(92,62,0)
(9,62,0)
(83,59,0)
(67,76,0)
(22,85,0)
(40,45,0)
(55,9,0)
(87,42,0)
(58,47,0)
(65,57,0)
(39,68,0)
(82,76,0)
(49,9,0)
(41,0,0)
(19,73,0)
(92,15,0)
(85,16,0)
(23,32,0)
(61,35,0)
(11,92,0)
(92,32,0)
(2,47,0)
(6,34,0)
(41,85,0)
(21,41,0)
(31,45,0)
(34,6,0)
(25,48,0)
(73,59,0)
(26,62,0)
(16,62,0)
(92,20,0)
(89,42,0)
(12,34,0)
(27,31,0)
(67,90,0)
(35,59,1)
(78,64,1)
(11,35,1)
(69,80,1)
(24,78,1)
(22,13,1)
(91,35,1)
(31,27,1)
(95,4,1)
(6,34,1)
(76,82,1)
(73,18,1)
(85,16,1)
(46,37,1)
(48,25,1)
(31,66,1)
(44,34,1)
(11,50,1)
(87,54,1)
(13,77,1)
(25,71,1)
(3,5,1)
(53,1,1)
(92,50,1)
(92,15,1)
(27,72,1)
(89,42,1)
(30,53,1)
(2,7,1)
(16,8,1)
(30,84,1)
(71,0,1)
(68,39,1)
(83,59,1)
(81,24,1)
(73,59,1)
(89,10,1)
(47,58,1)
(0,41,1)
(92,20,1)
(6,40,1)
(37,5,1)
(29,88,1)
(54,9,1)
(5,17,1)
(84,14,1)
(18,19,1)
(14,0,1)
(33,22,1)
(45,31,1)
(11,32,1)
(20,95,1)
(0,77,1)
(39,3,1)
(78,68,1)
(41,85,1)
(34,12,1)
(74,47,1)
(9,49,1)
(92,9,1)
(11,15,1)
(55,16,1)
(17,89,1)
(88,48,1)
(32,23,1)
(50,38,1)
(11,47,1)
(41,21,1)
(47,59,1)
(21,85,1)
(83,75,1)
(45,69,1)
(79,78,1)
(70,28,1)
(90,67,1)
(94,83,1)
(7,59,1)
(64,68,1)
(38,74,1)
(85,33,1)
(49,55,1)
(12,46,1)
(77,6,1)
(1,48,1)
(58,2,1)
(76,16,1)
(82,44,1)
(92,32,1)
(8,73,1)
(42,59,1)
(48,77,1)
(30,92,1)
(30,29,1)
(61,94,1)
(92,11,1)
(45,66,1)
(40,45,1)
(28,83,1)
(7,81,1)
(11,20,1)
(75,79,1)
(68,59,1)
(19,93,1)
(4,7,1)
(5,89,1)
(72,80,1)
(23,91,1)
(42,87,1)
(40,90,1)
(15,70,1)
(67,76,1)
(10,42,1)
(34,16,1)
(80,90,1)
(35,61,1)
(0,5,2)
(68,5,2)
(44,5,2)
(14,0,2)
(34,16,2)
(6,40,2)
(85,16,2)
(22,5,2)
(2,7,2)
(82,5,2)
(90,67,2)
(31,80,2)
(1,48,2)
(89,42,2)
(45,66,2)
(4,7,2)
(46,5,2)
(80,5,2)
(70,83,2)
(41,5,2)
(71,0,2)
(40,5,2)
(8,73,2)
(6,5,2)
(91,35,2)
(85,5,2)
(34,5,2)
(47,7,2)
(92,15,2)
(5,89,2)
(40,90,2)
(0,41,2)
(3,5,2)
(13,5,2)
(30,29,2)
(12,5,2)
(42,59,2)
(92,9,2)
(32,35,2)
(16,8,2)
(30,92,2)
(67,76,2)
(88,48,2)
(78,5,2)
(92,20,2)
(35,59,2)
(6,34,2)
(7,59,2)
(81,78,2)
(24,78,2)
(45,31,2)
(41,85,2)
(73,59,2)
(95,7,2)
(48,77,2)
(21,5,2)
(53,48,2)
(61,83,2)
(67,5,2)
(75,78,2)
(92,32,2)
(47,59,2)
(64,5,2)
(15,83,2)
(30,84,2)
(37,5,2)
(83,78,2)
(78,68,2)
(90,5,2)
(20,7,2)
(83,59,2)
(25,0,2)
(33,5,2)
(79,78,2)
(76,16,2)
(68,59,2)
(77,5,2)
(69,80,2)
(94,83,2)
(27,80,2)
(74,47,2)
(31,66,2)
(40,45,2)
(0,77,2)
(92,5,2)
(77,6,2)
(58,7,2)
(92,50,2)
(35,83,2)
(45,5,2)
(84,0,2)
(48,0,2)
(29,48,2)
(50,47,2)
(23,35,2)
(72,80,2)
(28,83,2)
(38,47,2)
(11,5,2)
(30,53,2)
(7,78,2)
(39,5,2)
(76,5,2)
-----------------------------------
(0,avail > (sk->sk_rcvbuf >> ROOM_POW_OFF)
(1,ROOM_LOW)
(2,po)
(3,po)
(4,ret)
(5,po->prot_hook.func != tpacket_rcv)
(6,sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)
(7,__tpacket_has_room(po, ROOM_POW_OFF)
(8,&po->sk)
(9,ret = ROOM_NONE)
(10,func)
(11,ret)
(12,sk_rcvbuf)
(13,avail)
(14,ROOM_NORMAL)
(15,ret = ROOM_NORMAL)
(16,*sk = &po->sk)
(17,tpacket_rcv)
(18,sk)
(19,po)
(20,ret = ROOM_NORMAL)
(21,ROOM_POW_OFF)
(22,sk)
(23,ROOM_LOW)
(24,po)
(25,0)
(26,if (po->tp_version == TPACKET_V3)
(27,truesize)
(28,ret)
(29,return ROOM_NONE;)
(30,RET)
(31,skb->truesize)
(32,ret = ROOM_LOW)
(33,sk_rcvbuf)
(34,sk->sk_rcvbuf)
(35,__tpacket_v3_has_room(po, 0)
(36,if (__tpacket_v3_has_room(po, ROOM_POW_OFF)
(37,avail)
(38,ROOM_LOW)
(39,tp_version)
(40,atomic_read(&sk->sk_rmem_alloc)
(41,sk->sk_rcvbuf >> ROOM_POW_OFF)
(42,po->prot_hook)
(43,avail)
(44,sk)
(45,skb ? skb->truesize : 0)
(46,sk)
(47,__tpacket_has_room(po, 0)
(48,avail > 0)
(49,ROOM_NONE)
(50,ret = ROOM_LOW)
(51,if (po->prot_hook.func != tpacket_rcv)
(52,)
(53,return ROOM_LOW;)
(54,po)
(55,ret)
(56,)
(57,)
(58,0)
(59,struct packet_sock *po)
(60,sk)
(61,0)
(62,)
(63,ret)
(64,TPACKET_V3)
(65,if (__tpacket_has_room(po, ROOM_POW_OFF)
(66,struct sk_buff *skb)
(67,&sk->sk_rmem_alloc)
(68,po->tp_version)
(69,0)
(70,ROOM_NORMAL)
(71,avail)
(72,skb)
(73,po->sk)
(74,ret)
(75,ROOM_POW_OFF)
(76,sk->sk_rmem_alloc)
(77,avail = sk->sk_rcvbuf - atomic_read(&sk->sk_rmem_alloc)
(78,po->tp_version == TPACKET_V3)
(79,po)
(80,skb)
(81,ROOM_POW_OFF)
(82,sk_rmem_alloc)
(83,__tpacket_v3_has_room(po, ROOM_POW_OFF)
(84,return ROOM_NORMAL;)
(85,sk->sk_rcvbuf)
(86,if (avail > (sk->sk_rcvbuf >> ROOM_POW_OFF)
(87,prot_hook)
(88,ROOM_NONE)
(89,po->prot_hook.func)
(90,atomic_read(&sk->sk_rmem_alloc)
(91,ret)
(92,return ret;)
(93,sk)
(94,po)
(95,ROOM_NORMAL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^