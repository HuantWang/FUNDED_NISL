-----label-----
1
-----code-----
int peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message) {
        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;
        Peer *receiver;
        Address addr;
        int r;

        address_from_string(&addr, destination);
        if (addr.type != ADDRESS_TYPE_ID)
                return PEER_E_UNEXPECTED_REPLY;

        slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);
        if (!slot)
                return PEER_E_UNEXPECTED_REPLY;

        receiver = c_container_of(slot->owner, Peer, owned_replies);

        r = connection_queue(&receiver->connection, NULL, message);
        if (r) {
                if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {
                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);

                        connection_shutdown(&receiver->connection);

                        log_append_here(receiver->bus->log, LOG_WARNING, 0);
                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,
                                                   sender->policy->seclabel, receiver->policy->seclabel, message);
                        if (r == CONNECTION_E_QUOTA)
                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",
                                                receiver->id);
                        else
                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",
                                                receiver->id);

                        if (r)
                                return error_fold(r);
                } else {
                        return error_fold(r);
                }
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
28,29
29,30
29,31
30,31
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
65,68
66,67
68,69
69,70
71,72
73,74
73,75
74,75
74,76
75,76
75,77
76,77
79,80
81,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
89,90
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
102,103
102,104
103,104
104,105
106,107
107,108
109,110
110,111
110,112
111,112
113,114
113,115
113,116
113,117
114,115
116,117
116,118
117,118
120,121
122,123
124,125
125,126
125,127
126,127
128,129
128,130
128,131
128,132
129,130
131,132
132,133
132,134
133,134
136,137
138,139
140,141
140,142
141,142
143,144
144,145
144,146
144,147
145,146
145,147
146,147
146,148
147,148
149,150
151,152
151,153
152,153
154,155
156,157
156,158
156,159
156,160
156,161
156,162
156,163
157,158
158,159
158,160
159,160
161,162
161,163
163,164
164,165
164,166
165,166
167,168
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
176,178
178,179
179,180
179,181
180,181
182,183
183,184
183,185
184,185
187,188
188,189
188,190
189,190
191,192
192,193
192,194
193,194
196,197
197,198
197,199
197,200
197,201
198,199
200,201
200,202
201,202
201,203
202,203
206,207
209,210
210,211
210,212
210,213
210,214
210,215
210,216
210,217
210,218
210,219
211,212
213,214
213,215
214,215
217,218
217,219
218,219
221,222
221,223
222,223
225,226
226,227
228,229
229,230
231,232
231,233
232,233
232,234
233,234
237,238
237,239
238,239
238,240
239,240
243,244
245,246
245,247
245,248
246,247
246,248
247,248
249,250
251,252
252,253
252,254
253,254
255,256
255,257
255,258
255,259
256,257
258,259
258,260
259,260
259,261
260,261
265,266
265,267
266,267
269,270
270,271
270,272
271,272
273,274
273,275
273,276
273,277
274,275
276,277
276,278
277,278
277,279
278,279
283,284
283,285
284,285
287,288
287,289
288,289
290,291
291,292
291,293
292,293
294,295
296,297
297,298
298,299
298,300
299,300
301,302
303,304
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,23,25,26,31,34,39,41,42,45,49,51,52,56,58,61,63,67,70,72,77,78,80,83,87,90,94,95,98,99,101,105,108,112,115,118,119,121,123,127,130,134,135,137,139,142,148,150,153,155,160,162,166,170,171,175,177,181,185,186,190,194,195,199,203,204,205,207,208,212,215,216,219,220,223,224,227,230,234,235,236,240,241,242,244,248,250,254,257,261,262,263,264,267,268,272,275,279,280,281,282,285,286,289,293,295,300,302,304
-----computeFrom-----
74,75
74,76
85,86
85,87
110,111
110,112
125,126
125,127
145,146
145,147
146,147
146,148
151,152
151,153
246,247
246,248
252,253
252,254
270,271
270,272
-----guardedBy-----
153,295
150,250
248,254
-----guardedByNegation-----
153,302
248,272
-----lastLexicalUse-----
153,302
248,272
-----jump-----
153,302
248,272
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message) {        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        Peer *receiver;        Address addr;        int r;        address_from_string(&addr, destination);        if (addr.type != ADDRESS_TYPE_ID)                return PEER_E_UNEXPECTED_REPLY;        slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);        if (!slot)                return PEER_E_UNEXPECTED_REPLY;        receiver = c_container_of(slot->owner, Peer, owned_replies);        r = connection_queue(&receiver->connection, NULL, message);        if (r) {                if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }        return 0;}
int
peer_queue_reply(Peer *sender, const char *destination, uint32_t reply_serial, Message *message)
peer_queue_reply
Peer *sender
Peer
Peer
*sender
*
sender
const char *destination
const char
*destination
*
destination
uint32_t reply_serial
uint32_t
uint32_t
reply_serial
reply_serial
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(reply_slot_freep) ReplySlot *slot = NULL;        Peer *receiver;        Address addr;        int r;        address_from_string(&addr, destination);        if (addr.type != ADDRESS_TYPE_ID)                return PEER_E_UNEXPECTED_REPLY;        slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);        if (!slot)                return PEER_E_UNEXPECTED_REPLY;        receiver = c_container_of(slot->owner, Peer, owned_replies);        r = connection_queue(&receiver->connection, NULL, message);        if (r) {                if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }        return 0;}
_c_cleanup_(reply_slot_freep)
_c_cleanup_(reply_slot_freep)
_c_cleanup_
_c_cleanup_
(reply_slot_freep)
reply_slot_freep
reply_slot_freep
)
ReplySlot *slot = NULL;
ReplySlot *slot = NULL;
ReplySlot
ReplySlot
*slot = NULL
*
slot
= NULL
NULL
NULL
Peer *receiver;
Peer *receiver;
Peer
Peer
*receiver
*
receiver
Address addr;
Address addr;
Address
Address
addr
addr
int r;
int r;
int
r
r
address_from_string(&addr, destination);
address_from_string(&addr, destination)
address_from_string
address_from_string
&addr
addr
addr
destination
destination
if (addr.type != ADDRESS_TYPE_ID)                return PEER_E_UNEXPECTED_REPLY;
addr.type != ADDRESS_TYPE_ID
addr.type
addr
addr
type
ADDRESS_TYPE_ID
ADDRESS_TYPE_ID
return PEER_E_UNEXPECTED_REPLY;
PEER_E_UNEXPECTED_REPLY
PEER_E_UNEXPECTED_REPLY
slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial);
slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
slot
slot
reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
reply_slot_get_by_id
reply_slot_get_by_id
&sender->replies
sender->replies
sender
sender
replies
addr.id
addr
addr
id
reply_serial
reply_serial
if (!slot)                return PEER_E_UNEXPECTED_REPLY;
!slot
slot
slot
return PEER_E_UNEXPECTED_REPLY;
PEER_E_UNEXPECTED_REPLY
PEER_E_UNEXPECTED_REPLY
receiver = c_container_of(slot->owner, Peer, owned_replies);
receiver = c_container_of(slot->owner, Peer, owned_replies)
receiver
receiver
c_container_of(slot->owner, Peer, owned_replies)
c_container_of
c_container_of
slot->owner
slot
slot
owner
Peer
Peer
owned_replies
owned_replies
r = connection_queue(&receiver->connection, NULL, message);
r = connection_queue(&receiver->connection, NULL, message)
r
r
connection_queue(&receiver->connection, NULL, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
NULL
NULL
message
message
if (r) {                if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }
r
r
{                if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }        }
if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS) {                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);                        if (r)                                return error_fold(r);                } else {                        return error_fold(r);                }
r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
r == CONNECTION_E_UNEXPECTED_FDS
r
r
CONNECTION_E_UNEXPECTED_FDS
CONNECTION_E_UNEXPECTED_FDS
{                        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);                        NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                        connection_shutdown(&receiver->connection);                        log_append_here(receiver->bus->log, LOG_WARNING, 0);                        bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);                        if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);                        if (r)                                return error_fold(r);                }
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
sender_names
= NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&sender->owned_names
sender->owned_names
sender
sender
owned_names
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet
NameSet
receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
receiver_names
= NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&receiver->owned_names
receiver->owned_names
receiver
receiver
owned_names
connection_shutdown(&receiver->connection);
connection_shutdown(&receiver->connection)
connection_shutdown
connection_shutdown
&receiver->connection
receiver->connection
receiver
receiver
connection
log_append_here(receiver->bus->log, LOG_WARNING, 0);
log_append_here(receiver->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message);
bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                   sender->policy->seclabel, receiver->policy->seclabel, message)
bus_log_append_transaction
bus_log_append_transaction
receiver->bus
receiver
receiver
bus
sender->id
sender
sender
id
receiver->id
receiver
receiver
id
&sender_names
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
sender->policy->seclabel
sender->policy
sender
sender
policy
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
if (r == CONNECTION_E_QUOTA)                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);                        else                                r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id);
r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id)
r
r
log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",                                                receiver->id)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested."
receiver->id
receiver
receiver
id
r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id);
r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id)
r
r
log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",                                                receiver->id)
log_commitf
log_commitf
receiver->bus->log
receiver->bus
receiver
receiver
bus
log
"Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested."
receiver->id
receiver
receiver
id
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
{                        return error_fold(r);                }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(86,149,0)
(165,32,0)
(114,36,0)
(160,40,0)
(34,159,0)
(135,80,0)
(132,113,0)
(88,39,0)
(107,2,0)
(9,119,0)
(27,15,0)
(153,129,0)
(100,97,0)
(6,89,0)
(8,148,0)
(130,113,0)
(154,101,0)
(86,151,0)
(26,35,0)
(101,122,0)
(129,138,0)
(40,138,0)
(133,126,0)
(148,80,0)
(25,32,0)
(122,131,0)
(43,131,0)
(0,63,0)
(74,118,0)
(24,165,0)
(46,142,0)
(89,127,0)
(127,89,0)
(70,100,0)
(72,64,0)
(149,14,0)
(122,67,0)
(23,43,0)
(165,60,0)
(69,115,0)
(127,52,0)
(97,57,0)
(61,159,0)
(142,58,0)
(48,135,0)
(52,92,0)
(104,38,0)
(112,72,0)
(71,49,0)
(40,51,0)
(129,94,0)
(81,161,0)
(64,148,0)
(159,113,0)
(28,64,0)
(123,158,0)
(77,10,0)
(82,13,0)
(47,58,0)
(113,90,0)
(163,34,0)
(88,54,0)
(108,27,0)
(103,54,0)
(122,94,0)
(42,100,0)
(54,131,0)
(53,94,0)
(124,131,0)
(128,148,0)
(38,58,0)
(58,38,0)
(29,34,0)
(22,81,0)
(79,21,0)
(43,27,0)
(161,81,0)
(75,161,0)
(52,127,0)
(18,100,0)
(11,35,0)
(150,92,0)
(33,131,0)
(139,34,0)
(73,135,0)
(1,162,0)
(18,14,0)
(140,131,0)
(39,88,0)
(4,36,0)
(151,100,0)
(90,113,0)
(3,118,0)
(111,123,0)
(151,141,0)
(122,101,0)
(125,40,0)
(50,49,0)
(16,87,0)
(60,165,0)
(98,80,0)
(91,146,0)
(65,31,0)
(95,118,0)
(18,118,0)
(21,148,0)
(128,91,0)
(36,139,0)
(39,78,0)
(116,18,0)
(15,148,0)
(92,52,0)
(89,138,0)
(45,128,0)
(149,100,0)
(57,97,0)
(86,42,0)
(37,78,0)
(78,39,0)
(2,118,0)
(106,8,0)
(119,122,0)
(146,91,0)
(162,138,0)
(86,63,0)
(14,118,0)
(13,159,0)
(142,32,0)
(96,3,0)
(10,123,0)
(21,31,0)
(35,148,0)
(51,123,0)
(12,13,0)
(49,122,0)
(119,148,0)
(137,128,0)
(85,43,0)
(139,36,0)
(38,104,0)
(14,123,0)
(35,104,0)
(91,128,0)
(92,131,0)
(94,122,0)
(113,159,0)
(122,76,0)
(122,72,0)
(80,148,0)
(109,129,0)
(152,131,0)
(62,60,0)
(72,122,0)
(31,165,0)
(84,159,0)
(157,118,0)
(83,15,0)
(44,38,0)
(115,148,0)
(143,60,0)
(117,104,0)
(55,89,0)
(2,87,0)
(87,2,0)
(19,80,0)
(115,90,0)
(76,92,0)
(20,21,0)
(94,129,0)
(86,18,0)
(38,8,0)
(134,155,0)
(123,10,0)
(7,161,0)
(162,122,0)
(17,122,0)
(76,122,0)
(151,14,0)
(165,31,0)
(156,42,0)
(54,88,0)
(8,38,0)
(147,162,0)
(136,118,0)
(122,162,0)
(100,3,0)
(105,97,0)
(104,35,0)
(113,67,0)
(121,78,0)
(101,54,0)
(41,8,0)
(15,27,0)
(51,40,0)
(64,72,0)
(123,51,0)
(164,14,0)
(148,118,0)
(27,43,0)
(63,100,0)
(144,76,0)
(159,118,0)
(60,148,0)
(42,14,0)
(122,49,0)
(122,119,0)
(31,21,0)
(49,148,0)
(99,15,0)
(97,100,0)
(123,14,0)
(2,30,0)
(93,10,0)
(59,118,0)
(80,135,0)
(68,64,0)
(61,151,0)
(5,148,0)
(36,159,0)
(90,115,0)
(142,149,0)
(145,115,0)
(146,131,0)
(66,118,0)
(78,148,0)
(110,119,0)
(32,165,0)
(34,139,0)
(102,61,0)
(88,39,1)
(4,114,1)
(36,159,1)
(100,70,1)
(120,58,1)
(9,110,1)
(112,64,1)
(60,62,1)
(132,130,1)
(35,148,1)
(10,77,1)
(54,88,1)
(37,103,1)
(0,81,1)
(75,2,1)
(86,42,1)
(47,13,1)
(129,138,1)
(42,14,1)
(69,84,1)
(36,4,1)
(162,138,1)
(41,44,1)
(24,31,1)
(27,108,1)
(32,165,1)
(122,76,1)
(60,148,1)
(155,134,1)
(97,57,1)
(122,49,1)
(79,25,1)
(80,135,1)
(101,154,1)
(18,100,1)
(19,98,1)
(100,97,1)
(23,85,1)
(122,162,1)
(109,101,1)
(139,36,1)
(139,34,1)
(163,29,1)
(52,127,1)
(122,17,1)
(77,93,1)
(38,104,1)
(113,132,1)
(149,142,1)
(71,162,1)
(142,58,1)
(129,153,1)
(26,47,1)
(2,30,1)
(96,100,1)
(21,148,1)
(49,148,1)
(5,155,1)
(22,161,1)
(29,36,1)
(44,104,1)
(7,75,1)
(48,73,1)
(92,52,1)
(31,65,1)
(6,150,1)
(159,113,1)
(146,91,1)
(135,48,1)
(145,69,1)
(143,24,1)
(58,38,1)
(114,56,1)
(107,87,1)
(8,148,1)
(160,125,1)
(144,49,1)
(21,20,1)
(18,14,1)
(104,35,1)
(87,16,1)
(61,102,1)
(147,119,1)
(121,37,1)
(123,10,1)
(115,145,1)
(43,23,1)
(42,156,1)
(130,90,1)
(39,78,1)
(154,76,1)
(1,147,1)
(122,119,1)
(156,155,1)
(18,116,1)
(73,5,1)
(40,138,1)
(165,31,1)
(103,92,1)
(68,94,1)
(137,45,1)
(94,129,1)
(117,35,1)
(149,100,1)
(115,148,1)
(64,28,1)
(50,71,1)
(35,11,1)
(101,54,1)
(13,82,1)
(81,161,1)
(128,148,1)
(64,148,1)
(86,149,1)
(27,15,1)
(113,90,1)
(123,111,1)
(15,148,1)
(108,15,1)
(90,115,1)
(123,51,1)
(72,64,1)
(53,129,1)
(165,60,1)
(104,117,1)
(38,8,1)
(45,54,1)
(78,148,1)
(151,61,1)
(93,51,1)
(78,121,1)
(55,6,1)
(2,107,1)
(123,158,1)
(11,26,1)
(122,72,1)
(119,148,1)
(149,14,1)
(153,109,1)
(42,100,1)
(113,67,1)
(94,53,1)
(76,144,1)
(89,55,1)
(80,19,1)
(31,21,1)
(40,160,1)
(120,32,1)
(89,138,1)
(84,148,1)
(142,46,1)
(91,128,1)
(61,159,1)
(85,27,1)
(2,87,1)
(13,159,1)
(43,27,1)
(128,137,1)
(125,164,1)
(148,80,1)
(70,97,1)
(122,101,1)
(76,92,1)
(150,139,1)
(86,151,1)
(16,3,1)
(14,123,1)
(98,135,1)
(65,21,1)
(82,12,1)
(62,143,1)
(81,22,1)
(116,120,1)
(127,89,1)
(8,106,1)
(72,112,1)
(56,159,1)
(20,79,1)
(51,40,1)
(86,18,1)
(161,7,1)
(86,63,1)
(25,13,1)
(28,68,1)
(106,41,1)
(110,43,1)
(116,56,1)
(97,105,1)
(63,100,1)
(49,50,1)
(46,120,1)
(34,163,1)
(122,94,1)
(17,72,1)
(134,14,1)
(122,67,1)
(83,99,1)
(162,1,1)
(34,159,1)
(63,0,1)
(142,32,1)
(119,9,1)
(151,100,1)
(102,139,1)
(3,96,1)
(99,146,1)
(151,14,1)
(15,83,1)
(111,10,1)
(164,81,1)
(12,122,1)
(49,148,2)
(90,155,2)
(51,81,2)
(165,60,2)
(134,81,2)
(60,148,2)
(113,67,2)
(64,139,2)
(32,13,2)
(39,78,2)
(122,139,2)
(149,120,2)
(122,162,2)
(5,155,2)
(116,56,2)
(159,155,2)
(78,148,2)
(113,155,2)
(153,139,2)
(165,13,2)
(122,119,2)
(45,139,2)
(10,81,2)
(77,81,2)
(18,56,2)
(147,139,2)
(121,139,2)
(52,127,2)
(144,139,2)
(148,80,2)
(84,155,2)
(42,155,2)
(76,139,2)
(11,13,2)
(61,159,2)
(91,128,2)
(85,139,2)
(42,100,2)
(65,13,2)
(61,139,2)
(64,148,2)
(37,139,2)
(122,94,2)
(52,139,2)
(27,139,2)
(149,100,2)
(119,148,2)
(6,139,2)
(120,139,2)
(23,139,2)
(9,139,2)
(146,139,2)
(15,148,2)
(51,40,2)
(44,13,2)
(43,27,2)
(122,67,2)
(20,13,2)
(63,100,2)
(122,76,2)
(86,42,2)
(21,148,2)
(164,81,2)
(122,72,2)
(47,13,2)
(36,159,2)
(135,155,2)
(15,139,2)
(97,57,2)
(62,13,2)
(43,139,2)
(109,139,2)
(4,56,2)
(72,139,2)
(55,139,2)
(89,139,2)
(111,81,2)
(71,139,2)
(48,155,2)
(2,30,2)
(123,158,2)
(41,13,2)
(56,155,2)
(104,35,2)
(110,139,2)
(86,149,2)
(29,36,2)
(28,139,2)
(31,21,2)
(39,139,2)
(76,92,2)
(104,13,2)
(122,101,2)
(14,123,2)
(113,90,2)
(14,81,2)
(49,139,2)
(1,139,2)
(115,148,2)
(46,120,2)
(159,113,2)
(42,14,2)
(130,155,2)
(127,89,2)
(27,15,2)
(122,49,2)
(93,81,2)
(132,155,2)
(160,81,2)
(146,91,2)
(2,87,2)
(150,139,2)
(137,139,2)
(83,139,2)
(154,139,2)
(34,36,2)
(103,139,2)
(94,129,2)
(149,14,2)
(38,104,2)
(89,138,2)
(80,155,2)
(81,161,2)
(12,139,2)
(142,120,2)
(73,155,2)
(18,14,2)
(13,159,2)
(40,138,2)
(139,36,2)
(162,138,2)
(82,139,2)
(163,36,2)
(112,139,2)
(156,155,2)
(8,148,2)
(18,100,2)
(127,139,2)
(108,139,2)
(143,13,2)
(13,139,2)
(98,155,2)
(139,56,2)
(35,148,2)
(142,32,2)
(151,14,2)
(31,13,2)
(25,13,2)
(17,139,2)
(129,138,2)
(86,151,2)
(68,139,2)
(145,155,2)
(151,100,2)
(88,39,2)
(165,31,2)
(102,139,2)
(38,13,2)
(78,139,2)
(117,13,2)
(115,155,2)
(18,120,2)
(101,54,2)
(92,52,2)
(8,13,2)
(125,81,2)
(53,139,2)
(151,139,2)
(123,51,2)
(38,8,2)
(123,10,2)
(58,13,2)
(86,18,2)
(54,139,2)
(128,139,2)
(36,56,2)
(99,139,2)
(60,13,2)
(88,139,2)
(116,120,2)
(155,81,2)
(21,13,2)
(148,155,2)
(54,88,2)
(129,139,2)
(106,13,2)
(92,139,2)
(19,155,2)
(91,139,2)
(86,63,2)
(32,165,2)
(80,135,2)
(69,155,2)
(119,139,2)
(114,56,2)
(139,34,2)
(123,81,2)
(79,13,2)
(50,139,2)
(162,139,2)
(0,81,2)
(72,64,2)
(142,58,2)
(90,115,2)
(101,139,2)
(128,148,2)
(100,97,2)
(94,139,2)
(58,38,2)
(34,159,2)
(26,13,2)
(24,13,2)
(40,81,2)
(63,81,2)
(35,13,2)
-----------------------------------
(0,PEER_E_UNEXPECTED_REPLY)
(1,id)
(2,address_from_string(&addr, destination)
(3,(reply_slot_freep)
(4,CONNECTION_E_QUOTA)
(5,receiver)
(6,sender)
(7,type)
(8,receiver->id)
(9,bus)
(10,addr.id)
(11,bus)
(12,r)
(13,r == CONNECTION_E_QUOTA)
(14,slot = reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
(15,receiver->bus)
(16,addr)
(17,message)
(18,return 0;)
(19,owned_replies)
(20,bus)
(21,receiver->bus)
(22,ADDRESS_TYPE_ID)
(23,0)
(24,"Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.")
(25,r)
(26,receiver)
(27,receiver->bus->log)
(28,policy)
(29,r)
(30,const char *destination)
(31,receiver->bus->log)
(32,r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",\n\\n                                                receiver->id)
(33,sender_names)
(34,r == CONNECTION_E_UNEXPECTED_FDS)
(35,receiver->bus)
(36,r == CONNECTION_E_QUOTA)
(37,receiver)
(38,log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",\n\\n                                                receiver->id)
(39,&receiver->owned_names)
(40,sender->replies)
(41,receiver)
(42,return PEER_E_UNEXPECTED_REPLY;)
(43,log_append_here(receiver->bus->log, LOG_WARNING, 0)
(44,"Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.")
(45,receiver)
(46,r)
(47,r)
(48,owner)
(49,receiver->id)
(50,id)
(51,&sender->replies)
(52,NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(53,seclabel)
(54,receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(55,owned_names)
(56,r)
(57,reply_slot_freep)
(58,r = log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a reply it requested.",\n\\n                                                receiver->id)
(59,r)
(60,receiver->id)
(61,error_fold(r)
(62,id)
(63,return PEER_E_UNEXPECTED_REPLY;)
(64,receiver->policy)
(65,log)
(66,if (addr.type != ADDRESS_TYPE_ID)
(67,Message *message)
(68,receiver)
(69,receiver)
(70,slot)
(71,receiver)
(72,receiver->policy->seclabel)
(73,slot)
(74,if (!slot)
(75,addr)
(76,&sender_names)
(77,id)
(78,receiver->owned_names)
(79,receiver)
(80,c_container_of(slot->owner, Peer, owned_replies)
(81,addr.type != ADDRESS_TYPE_ID)
(82,CONNECTION_E_QUOTA)
(83,bus)
(84,r)
(85,LOG_WARNING)
(86,RET)
(87,&addr)
(88,NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(89,sender->owned_names)
(90,&receiver->connection)
(91,&receiver->connection)
(92,sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(93,addr)
(94,sender->policy->seclabel)
(95,addr)
(96,NULL)
(97,(reply_slot_freep)
(98,Peer)
(99,receiver)
(100,(reply_slot_freep)
(101,&receiver_names)
(102,r)
(103,receiver_names)
(104,receiver->bus->log)
(105,ReplySlot)
(106,id)
(107,destination)
(108,log)
(109,sender)
(110,receiver)
(111,reply_serial)
(112,seclabel)
(113,connection_queue(&receiver->connection, NULL, message)
(114,r)
(115,receiver->connection)
(116,0)
(117,log)
(118,)
(119,receiver->bus)
(120,r)
(121,owned_names)
(122,bus_log_append_transaction(receiver->bus, sender->id, receiver->id, &sender_names, &receiver_names,\n\\n                                                   sender->policy->seclabel, receiver->policy->seclabel, message)
(123,reply_slot_get_by_id(&sender->replies, addr.id, reply_serial)
(124,if (r)
(125,sender)
(126,)
(127,&sender->owned_names)
(128,receiver->connection)
(129,sender->policy)
(130,NULL)
(131,)
(132,message)
(133,if (r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS)
(134,slot)
(135,slot->owner)
(136,if (r)
(137,connection)
(138,Peer *sender)
(139,r == CONNECTION_E_QUOTA || r == CONNECTION_E_UNEXPECTED_FDS)
(140,receiver_names)
(141,)
(142,error_fold(r)
(143,receiver)
(144,sender_names)
(145,connection)
(146,connection_shutdown(&receiver->connection)
(147,sender)
(148,receiver = c_container_of(slot->owner, Peer, owned_replies)
(149,return error_fold(r)
(150,sender_names)
(151,return error_fold(r)
(152,if (r == CONNECTION_E_QUOTA)
(153,policy)
(154,receiver_names)
(155,!slot)
(156,PEER_E_UNEXPECTED_REPLY)
(157,receiver)
(158,uint32_t reply_serial)
(159,r = connection_queue(&receiver->connection, NULL, message)
(160,replies)
(161,addr.type)
(162,sender->id)
(163,CONNECTION_E_UNEXPECTED_FDS)
(164,slot)
(165,log_commitf(receiver->bus->log, "Peer :1.%llu is being disconnected as it does not support receiving file descriptors it requested.",\n\\n                                                receiver->id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^