-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
76,77
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,61,63,65,70,71,74,75,81,82,85,89,90,92,95,100,101
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
67,68
67,69
68,69
68,70
72,73
72,74
79,80
79,81
83,84
83,85
-----guardedBy-----
34,50
74,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(51,54,0)
(38,43,0)
(43,32,0)
(31,35,0)
(9,14,0)
(26,6,0)
(48,9,0)
(44,37,0)
(22,54,0)
(32,47,0)
(50,17,0)
(37,32,0)
(4,46,0)
(3,37,0)
(34,39,0)
(7,15,0)
(16,1,0)
(14,9,0)
(30,34,0)
(53,1,0)
(18,14,0)
(14,39,0)
(46,40,0)
(49,42,0)
(24,32,0)
(43,14,0)
(33,1,0)
(20,34,0)
(13,28,0)
(23,39,0)
(37,14,0)
(25,14,0)
(28,39,0)
(12,18,0)
(37,36,0)
(5,54,0)
(54,51,0)
(54,35,0)
(18,32,0)
(17,34,0)
(36,37,0)
(19,17,0)
(18,16,0)
(29,31,0)
(45,16,0)
(27,54,0)
(18,12,0)
(11,51,0)
(21,35,0)
(43,36,0)
(16,18,0)
(15,1,0)
(10,18,0)
(32,31,0)
(31,32,0)
(35,28,0)
(52,28,0)
(36,43,0)
(8,26,0)
(0,35,0)
(41,43,0)
(2,16,1)
(48,25,1)
(18,32,1)
(45,1,1)
(36,37,1)
(33,53,1)
(44,3,1)
(9,48,1)
(10,45,1)
(24,51,1)
(18,12,1)
(54,27,1)
(18,10,1)
(38,17,1)
(41,38,1)
(51,54,1)
(43,41,1)
(26,8,1)
(17,50,1)
(36,43,1)
(19,32,1)
(3,43,1)
(11,54,1)
(51,11,1)
(43,14,1)
(0,21,1)
(50,19,1)
(8,51,1)
(4,16,1)
(37,44,1)
(22,5,1)
(27,22,1)
(7,46,1)
(53,36,1)
(19,26,1)
(15,1,1)
(32,31,1)
(46,4,1)
(16,18,1)
(54,35,1)
(1,33,1)
(43,32,1)
(2,36,1)
(31,29,1)
(45,15,1)
(35,0,1)
(21,14,1)
(18,14,1)
(14,9,1)
(31,35,1)
(29,24,1)
(16,1,1)
(5,35,1)
(37,32,1)
(37,14,1)
(15,7,1)
(43,32,2)
(16,36,2)
(18,12,2)
(18,32,2)
(51,54,2)
(36,43,2)
(32,31,2)
(1,36,2)
(18,16,2)
(37,14,2)
(16,16,2)
(37,43,2)
(7,16,2)
(29,51,2)
(31,35,2)
(18,36,2)
(44,43,2)
(18,14,2)
(15,16,2)
(33,36,2)
(45,36,2)
(46,16,2)
(10,36,2)
(24,51,2)
(36,37,2)
(53,36,2)
(4,16,2)
(37,32,2)
(43,14,2)
(45,16,2)
(31,51,2)
(16,1,2)
(16,18,2)
(26,51,2)
(54,35,2)
(10,16,2)
(32,51,2)
(3,43,2)
(8,51,2)
(15,1,2)
(14,9,2)
-----------------------------------
(0,"")
(1,i = 0)
(2,RET)
(3,count)
(4,"Hello")
(5,inputBuffer)
(6,)
(7,i)
(8,"fgets()
(9,-1)
(10,count)
(11,NULL)
(12,size_t)
(13,inputBuffer)
(14,count = -1)
(15,i++)
(16,i < (size_t)
(17,i = 0)
(18,(size_t)
(19,i)
(20,i)
(21,inputBuffer)
(22,CHAR_ARRAY_SIZE)
(23,count)
(24,count)
(25,count)
(26,printLine("fgets()
(27,stdin)
(28,)
(29,inputBuffer)
(30,if (count > 0 && count <= 20)
(31,atoi(inputBuffer)
(32,count = atoi(inputBuffer)
(33,0)
(34,)
(35,inputBuffer[CHAR_ARRAY_SIZE] = "")
(36,count > 0 && count <= 20)
(37,count <= 20)
(38,count)
(39,)
(40,)
(41,0)
(42,)
(43,count > 0)
(44,20)
(45,i)
(46,printLine("Hello")
(47,)
(48,1)
(49,for (i = 0; i < (size_t)
(50,0)
(51,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(52,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,i)
(54,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^