-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
30,33
31,32
31,33
32,33
35,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
51,52
51,53
52,53
52,54
53,54
53,55
54,55
57,58
57,59
58,59
61,62
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
76,77
78,79
79,80
81,82
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,39,40,46,48,50,55,56,59,60,66,67,70,74,75,77,80,85,86
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
52,53
52,54
53,54
53,55
57,58
57,59
64,65
64,66
68,69
68,70
-----guardedBy-----
59,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(49,44,0)
(14,10,0)
(7,28,0)
(3,7,0)
(3,5,0)
(44,49,0)
(31,19,0)
(4,17,0)
(6,23,0)
(45,5,0)
(24,5,0)
(17,16,0)
(38,19,0)
(13,17,0)
(7,3,0)
(25,13,0)
(48,14,0)
(28,15,0)
(41,33,0)
(39,23,0)
(46,9,0)
(49,14,0)
(30,19,0)
(11,35,0)
(5,14,0)
(10,14,0)
(27,17,0)
(33,40,0)
(18,37,0)
(5,28,0)
(28,19,0)
(5,3,0)
(32,49,0)
(0,28,0)
(15,28,0)
(9,8,0)
(22,2,0)
(50,26,0)
(49,28,0)
(20,7,0)
(35,2,0)
(36,37,0)
(7,14,0)
(1,44,0)
(14,42,0)
(43,49,0)
(44,2,0)
(49,43,0)
(21,7,0)
(47,15,0)
(12,13,0)
(29,2,0)
(6,28,1)
(29,3,1)
(7,21,1)
(36,18,1)
(41,37,1)
(28,15,1)
(3,5,1)
(2,22,1)
(49,14,1)
(37,36,1)
(21,20,1)
(49,32,1)
(18,14,1)
(1,35,1)
(18,23,1)
(24,45,1)
(34,3,1)
(48,23,1)
(49,43,1)
(33,41,1)
(11,9,1)
(49,28,1)
(9,46,1)
(12,25,1)
(23,39,1)
(7,14,1)
(5,14,1)
(3,7,1)
(5,28,1)
(22,29,1)
(14,10,1)
(20,5,1)
(25,37,1)
(32,1,1)
(44,49,1)
(7,28,1)
(15,47,1)
(44,2,1)
(1,2,1)
(35,2,1)
(34,33,1)
(46,44,1)
(13,12,1)
(47,0,1)
(34,44,1)
(10,48,1)
(45,13,1)
(5,24,1)
(39,6,1)
(35,11,1)
(28,15,2)
(49,44,2)
(32,44,2)
(41,37,2)
(49,3,2)
(13,37,2)
(3,5,2)
(5,14,2)
(29,3,2)
(20,5,2)
(33,37,2)
(48,23,2)
(5,37,2)
(44,2,2)
(7,14,2)
(22,3,2)
(10,23,2)
(12,37,2)
(7,28,2)
(44,3,2)
(35,2,2)
(9,44,2)
(25,37,2)
(3,37,2)
(32,3,2)
(2,3,2)
(3,7,2)
(24,37,2)
(7,5,2)
(49,43,2)
(44,49,2)
(11,44,2)
(1,3,2)
(5,28,2)
(45,37,2)
(1,44,2)
(46,44,2)
(49,14,2)
(44,44,2)
(14,10,2)
(21,5,2)
(14,23,2)
(35,44,2)
(49,28,2)
-----------------------------------
(0,count)
(1,i)
(2,i = 0)
(3,count > 0 && count <= 20)
(4,if (count > 0 && count <= 20)
(5,count > 0)
(6,globalFive)
(7,count <= 20)
(8,)
(9,printLine("Hello")
(10,RAND32()
(11,i)
(12,0)
(13,i = 0)
(14,count = RAND32()
(15,-1)
(16,)
(17,)
(18,globalFive)
(19,)
(20,count)
(21,20)
(22,0)
(23,globalFive==5)
(24,0)
(25,i)
(26,)
(27,i)
(28,count = -1)
(29,i)
(30,if(globalFive==5)
(31,count)
(32,count)
(33,printLine("Benign, fixed string")
(34,RET)
(35,i++)
(36,5)
(37,globalFive!=5)
(38,if(globalFive!=5)
(39,5)
(40,)
(41,"Benign, fixed string")
(42,)
(43,size_t)
(44,i < (size_t)
(45,count)
(46,"Hello")
(47,1)
(48,count)
(49,(size_t)
(50,for (i = 0; i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^