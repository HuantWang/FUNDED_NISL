-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
37,38
37,39
37,40
38,39
40,41
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
66,67
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,42,46,48,52,54,55,58,61,63,64,67,68
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(9,25,0)
(25,13,0)
(2,0,0)
(14,2,0)
(1,13,0)
(15,0,0)
(0,11,0)
(7,8,0)
(24,21,0)
(19,20,0)
(17,5,0)
(2,1,0)
(20,5,0)
(8,13,0)
(20,19,0)
(11,13,0)
(11,19,0)
(6,19,0)
(19,11,0)
(25,11,0)
(10,11,0)
(19,6,0)
(21,5,0)
(12,2,0)
(3,13,0)
(22,1,0)
(4,0,0)
(18,8,0)
(5,21,0)
(5,20,0)
(23,1,0)
(0,1,0)
(19,6,1)
(21,24,1)
(25,11,1)
(18,7,1)
(12,0,1)
(15,25,1)
(2,14,1)
(10,8,1)
(5,21,1)
(2,0,1)
(8,18,1)
(0,4,1)
(0,11,1)
(16,2,1)
(19,20,1)
(14,12,1)
(24,17,1)
(20,5,1)
(17,10,1)
(9,11,1)
(11,19,1)
(4,15,1)
(25,9,1)
(19,20,2)
(2,0,2)
(11,19,2)
(25,11,2)
(19,6,2)
(0,11,2)
(20,5,2)
(5,21,2)
-----------------------------------
(0,* dataCopy = data)
(1,)
(2,* data = dataCopy)
(3,data)
(4,data)
(5,100*sizeof(wchar_t)
(6,wchar_t *)
(7,data)
(8,data = NULL)
(9,data)
(10,data)
(11,data = (wchar_t *)
(12,data)
(13,)
(14,dataCopy)
(15,dataCopy)
(16,RET)
(17,100)
(18,NULL)
(19,(wchar_t *)
(20,ALLOCA(100*sizeof(wchar_t)
(21,sizeof(wchar_t)
(22,data)
(23,dataCopy)
(24,wchar_t)
(25,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^