-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_01_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
28,29
29,30
29,31
30,31
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
59,60
61,62
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
76,77
76,78
76,79
76,80
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
101,102
103,104
103,105
103,106
103,107
103,108
104,105
106,107
108,109
109,110
109,111
112,113
112,114
113,114
115,116
117,118
119,120
120,121
121,122
121,123
122,123
125,126
125,127
126,127
128,129
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,31,33,35,39,41,42,45,48,50,51,53,57,60,62,63,67,69,74,75,80,81,84,88,89,91,94,100,102,105,107,110,111,114,116,118,123,124,127,132,134
-----computeFrom-----
12,13
12,14
55,56
55,57
65,66
65,67
78,79
78,80
82,83
82,84
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_01_bad(){    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_01_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_01_bad
{    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(33,5,0)
(66,18,0)
(22,19,0)
(4,38,0)
(4,42,0)
(49,66,0)
(52,54,0)
(16,18,0)
(43,64,0)
(57,50,0)
(12,3,0)
(38,5,0)
(36,20,0)
(8,2,0)
(65,5,0)
(44,38,0)
(18,66,0)
(1,5,0)
(35,17,0)
(67,5,0)
(11,58,0)
(19,52,0)
(29,62,0)
(27,5,0)
(42,4,0)
(40,42,0)
(62,10,0)
(12,42,0)
(66,7,0)
(15,65,0)
(60,5,0)
(52,10,0)
(41,50,0)
(10,62,0)
(14,58,0)
(28,25,0)
(7,25,0)
(46,6,0)
(58,42,0)
(25,7,0)
(55,36,0)
(37,24,0)
(19,17,0)
(31,4,0)
(6,17,0)
(21,66,0)
(66,2,0)
(7,66,0)
(50,5,0)
(13,47,0)
(24,37,0)
(52,19,0)
(64,32,0)
(54,52,0)
(59,4,0)
(23,10,0)
(5,53,0)
(10,53,0)
(48,65,0)
(0,37,0)
(61,17,0)
(63,52,0)
(37,10,0)
(34,12,0)
(2,66,0)
(66,42,0)
(39,38,0)
(51,24,0)
(45,5,0)
(42,5,0)
(9,53,0)
(30,24,0)
(24,53,0)
(19,52,1)
(62,29,1)
(28,19,1)
(17,35,1)
(50,41,1)
(58,42,1)
(49,2,1)
(34,56,1)
(8,18,1)
(51,30,1)
(40,38,1)
(26,56,1)
(64,43,1)
(41,57,1)
(57,65,1)
(52,10,1)
(4,31,1)
(65,15,1)
(48,24,1)
(46,64,1)
(26,12,1)
(6,17,1)
(66,42,1)
(11,14,1)
(22,17,1)
(42,4,1)
(56,19,1)
(52,54,1)
(66,2,1)
(36,55,1)
(55,58,1)
(59,40,1)
(63,22,1)
(22,6,1)
(39,50,1)
(4,38,1)
(66,18,1)
(12,34,1)
(58,11,1)
(10,62,1)
(37,10,1)
(21,25,1)
(43,7,1)
(29,23,1)
(24,37,1)
(19,17,1)
(31,59,1)
(2,8,1)
(7,25,1)
(30,10,1)
(14,42,1)
(25,28,1)
(15,48,1)
(0,51,1)
(61,36,1)
(7,66,1)
(16,21,1)
(52,63,1)
(35,61,1)
(38,44,1)
(12,42,1)
(44,39,1)
(37,0,1)
(6,46,1)
(18,16,1)
(46,7,1)
(66,49,1)
(61,58,1)
(66,19,2)
(66,42,2)
(16,19,2)
(42,4,2)
(52,54,2)
(6,19,2)
(2,19,2)
(12,56,2)
(43,7,2)
(7,66,2)
(25,19,2)
(55,58,2)
(66,18,2)
(36,58,2)
(21,19,2)
(63,19,2)
(7,19,2)
(8,19,2)
(18,19,2)
(66,2,2)
(58,42,2)
(12,42,2)
(34,56,2)
(24,37,2)
(19,17,2)
(52,19,2)
(7,25,2)
(4,38,2)
(52,10,2)
(64,7,2)
(19,19,2)
(10,62,2)
(22,19,2)
(49,19,2)
(46,19,2)
(6,17,2)
(19,52,2)
(28,19,2)
(37,10,2)
-----------------------------------
(0,count)
(1,for (i = 0; i < (size_t)
(2,strlen(SENTENCE)
(3,)
(4,fopen(filename, "w+")
(5,)
(6,i++)
(7,strlen(SENTENCE)
(8,SENTENCE)
(9,count)
(10,count = -1)
(11,NULL)
(12,fclose(pFile)
(13,if (strlen(SENTENCE)
(14,pFile)
(15,0)
(16,char)
(17,i = 0)
(18,sizeof(char)
(19,i < (size_t)
(20,)
(21,SENTENCE)
(22,i)
(23,count)
(24,fscanf(stdin, "%d", &count)
(25,strlen(SENTENCE)
(26,RET)
(27,filename)
(28,SENTENCE)
(29,1)
(30,stdin)
(31,"w+")
(32,)
(33,i)
(34,pFile)
(35,0)
(36,exit(1)
(37,&count)
(38,*filename = "output_bad.txt")
(39,filename)
(40,pFile)
(41,NULL)
(42,pFile = fopen(filename, "w+")
(43,1)
(44,"output_bad.txt")
(45,if (pFile)
(46,i)
(47,)
(48,i)
(49,pFile)
(50,*pFile = NULL)
(51,"%d")
(52,(size_t)
(53,)
(54,size_t)
(55,1)
(56,pFile)
(57,pFile)
(58,pFile == NULL)
(59,filename)
(60,pFile)
(61,i)
(62,-1)
(63,count)
(64,exit(1)
(65,i = 0)
(66,fwrite(SENTENCE, sizeof(char)
(67,if (pFile == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^