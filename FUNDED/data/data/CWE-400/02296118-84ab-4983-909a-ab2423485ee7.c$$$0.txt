-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_11_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
74,75
76,77
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,61,62,63,67,70,71,75,77
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_11_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_11_bad()
CWE401_Memory_Leak__int64_t_malloc_11_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,27,0)
(27,6,0)
(14,0,0)
(30,25,0)
(8,9,0)
(20,19,0)
(23,4,0)
(30,13,0)
(15,0,0)
(24,5,0)
(25,30,0)
(4,6,0)
(29,24,0)
(10,5,0)
(18,4,0)
(6,27,0)
(27,29,0)
(1,9,0)
(24,29,0)
(12,25,0)
(32,6,0)
(29,27,0)
(31,2,0)
(4,7,0)
(5,24,0)
(28,24,0)
(27,22,0)
(21,2,0)
(19,9,0)
(7,4,0)
(2,6,0)
(7,0,0)
(6,0,0)
(17,19,0)
(3,9,0)
(29,24,1)
(30,25,1)
(27,22,1)
(26,16,1)
(12,2,1)
(5,10,1)
(2,21,1)
(4,23,1)
(21,31,1)
(18,15,1)
(23,18,1)
(25,12,1)
(10,28,1)
(27,29,1)
(17,20,1)
(31,6,1)
(6,27,1)
(4,6,1)
(16,19,1)
(32,16,1)
(15,2,1)
(2,6,1)
(7,4,1)
(11,26,1)
(26,7,1)
(28,32,1)
(19,17,1)
(24,5,1)
(15,30,1)
(24,16,2)
(7,16,2)
(12,2,2)
(2,16,2)
(21,16,2)
(4,6,2)
(30,2,2)
(4,16,2)
(32,16,2)
(27,29,2)
(7,4,2)
(6,27,2)
(6,16,2)
(29,16,2)
(25,2,2)
(28,16,2)
(18,16,2)
(10,16,2)
(24,5,2)
(5,16,2)
(15,16,2)
(30,25,2)
(29,24,2)
(23,16,2)
(31,16,2)
(27,22,2)
(27,16,2)
(2,6,2)
-----------------------------------
(0,)
(1,if(globalReturnsTrue()
(2,data == NULL)
(3,data)
(4,data[0])
(5,sizeof(int64_t)
(6,data = (int64_t *)
(7,printLongLongLine(data[0])
(8,if(globalReturnsTrue()
(9,)
(10,int64_t)
(11,RET)
(12,1)
(13,)
(14,if (data == NULL)
(15,L)
(16,globalReturnsTrue()
(17,NULL)
(18,data)
(19,data = NULL)
(20,data)
(21,NULL)
(22,int64_t *)
(23,0)
(24,100*sizeof(int64_t)
(25,-1)
(26,globalReturnsTrue()
(27,(int64_t *)
(28,100)
(29,malloc(100*sizeof(int64_t)
(30,exit(-1)
(31,data)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^