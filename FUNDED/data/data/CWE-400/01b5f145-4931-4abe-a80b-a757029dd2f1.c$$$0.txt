-----label-----
1
-----code-----
int exec_file(char *command, struct pseudo_dev *dev)
{
	int child, res;
	static pid_t pid = -1;
	int pipefd[2];
#ifdef USE_TMP_FILE
	char *filename;
	int status;
	static int number = 0;
#endif

	if(pid == -1)
		pid = getpid();

#ifdef USE_TMP_FILE
	res = asprintf(&filename, "/tmp/squashfs_pseudo_%d_%d", pid, number ++);
	if(res == -1) {
		ERROR("asprint failed in exec_file()\n");
		return -1;
	}
	pipefd[1] = open(filename, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU);
	if(pipefd[1] == -1) {
		ERROR("Executing dynamic pseudo file, open failed\n");
		free(filename);
		return -1;
	}
#else
	res = pipe(pipefd);
	if(res == -1) {
		ERROR("Executing dynamic pseudo file, pipe failed\n");
		return -1;
	}
#endif

	child = fork();
	if(child == -1) {
		ERROR("Executing dynamic pseudo file, fork failed\n");
		goto failed;
	}

	if(child == 0) {
		close(STDOUT_FILENO);
		res = dup(pipefd[1]);
		if(res == -1)
			exit(EXIT_FAILURE);

		execl("/bin/sh", "sh", "-c", command, (char *) NULL);
		exit(EXIT_FAILURE);
	}

#ifdef USE_TMP_FILE
	res = waitpid(child, &status, 0);
	close(pipefd[1]);
	if(res != -1 && WIFEXITED(status) && WEXITSTATUS(status) == 0) {
		dev->filename = filename;
		return 0;
	}
failed:
	unlink(filename);
	free(filename);
	return -1;
#else
	close(pipefd[1]);
	dev->fd = pipefd[0];
	dev->child = child;
	return 0;
failed:
	return -1;
#endif
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
17,18
18,19
18,20
18,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
70,72
71,72
74,75
75,76
77,78
78,79
78,80
79,80
81,82
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
96,97
98,99
98,100
99,100
99,101
100,101
103,104
103,105
103,106
103,107
103,108
104,105
105,106
105,107
106,107
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
118,120
119,120
122,123
122,124
123,124
123,125
124,125
126,127
128,129
129,130
129,131
130,131
132,133
133,134
135,136
136,137
136,138
136,139
136,140
136,141
136,142
137,138
142,143
144,145
144,146
145,146
145,147
147,148
149,150
151,152
152,153
152,154
153,154
155,156
156,157
158,159
159,160
159,161
160,161
162,163
162,164
163,164
166,167
167,168
167,169
168,169
168,170
169,170
172,173
172,174
173,174
176,177
177,178
177,179
178,179
178,180
179,180
182,183
184,185
186,187
186,188
188,189
189,190
-----nextToken-----
2,4,6,8,9,12,14,15,19,21,23,27,29,32,35,37,39,43,45,49,52,56,59,61,65,67,72,73,76,80,83,87,89,94,95,97,101,102,107,110,114,117,120,121,125,127,131,134,138,139,140,141,143,146,148,150,154,157,161,164,165,170,171,174,175,180,181,183,185,187,190
-----computeFrom-----
41,42
41,43
47,48
47,49
54,55
54,56
63,64
63,65
78,79
78,80
85,86
85,87
99,100
99,101
112,113
112,114
123,124
123,125
167,168
167,169
177,178
177,179
-----guardedBy-----
43,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int exec_file(char *command, struct pseudo_dev *dev){	int child, res;	static pid_t pid = -1;	int pipefd[2];#ifdef USE_TMP_FILE	char *filename;	int status;	static int number = 0;#endif	if(pid == -1)		pid = getpid();#ifdef USE_TMP_FILE	res = asprintf(&filename, "/tmp/squashfs_pseudo_%d_%d", pid, number ++);	if(res == -1) {		ERROR("asprint failed in exec_file()\n");		return -1;	}	pipefd[1] = open(filename, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU);	if(pipefd[1] == -1) {		ERROR("Executing dynamic pseudo file, open failed\n");		free(filename);		return -1;	}#else	res = pipe(pipefd);	if(res == -1) {		ERROR("Executing dynamic pseudo file, pipe failed\n");		return -1;	}#endif	child = fork();	if(child == -1) {		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}	if(child == 0) {		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", command, (char *) NULL);		exit(EXIT_FAILURE);	}#ifdef USE_TMP_FILE	res = waitpid(child, &status, 0);	close(pipefd[1]);	if(res != -1 && WIFEXITED(status) && WEXITSTATUS(status) == 0) {		dev->filename = filename;		return 0;	}failed:	unlink(filename);	free(filename);	return -1;#else	close(pipefd[1]);	dev->fd = pipefd[0];	dev->child = child;	return 0;failed:	return -1;#endif}
int
exec_file(char *command, struct pseudo_dev *dev)
exec_file
char *command
char
*command
*
command
struct pseudo_dev *dev
struct pseudo_dev
pseudo_dev
*dev
*
dev
{	int child, res;	static pid_t pid = -1;	int pipefd[2];#ifdef USE_TMP_FILE	char *filename;	int status;	static int number = 0;#endif	if(pid == -1)		pid = getpid();#ifdef USE_TMP_FILE	res = asprintf(&filename, "/tmp/squashfs_pseudo_%d_%d", pid, number ++);	if(res == -1) {		ERROR("asprint failed in exec_file()\n");		return -1;	}	pipefd[1] = open(filename, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU);	if(pipefd[1] == -1) {		ERROR("Executing dynamic pseudo file, open failed\n");		free(filename);		return -1;	}#else	res = pipe(pipefd);	if(res == -1) {		ERROR("Executing dynamic pseudo file, pipe failed\n");		return -1;	}#endif	child = fork();	if(child == -1) {		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}	if(child == 0) {		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", command, (char *) NULL);		exit(EXIT_FAILURE);	}#ifdef USE_TMP_FILE	res = waitpid(child, &status, 0);	close(pipefd[1]);	if(res != -1 && WIFEXITED(status) && WEXITSTATUS(status) == 0) {		dev->filename = filename;		return 0;	}failed:	unlink(filename);	free(filename);	return -1;#else	close(pipefd[1]);	dev->fd = pipefd[0];	dev->child = child;	return 0;failed:	return -1;#endif}
int child, res;
int child, res;
int
child
child
res
res
static pid_t pid = -1;
static pid_t pid = -1;
static pid_t
pid_t
pid = -1
pid
= -1
-1
1
int pipefd[2];
int pipefd[2];
int
pipefd[2]
pipefd
[2]
2
if(pid == -1)		pid = getpid();
pid == -1
pid
pid
-1
1
pid = getpid();
pid = getpid()
pid
pid
getpid()
getpid
getpid
res = pipe(pipefd);
res = pipe(pipefd)
res
res
pipe(pipefd)
pipe
pipe
pipefd
pipefd
if(res == -1) {		ERROR("Executing dynamic pseudo file, pipe failed\n");		return -1;	}
res == -1
res
res
-1
1
{		ERROR("Executing dynamic pseudo file, pipe failed\n");		return -1;	}
ERROR("Executing dynamic pseudo file, pipe failed\n");
ERROR("Executing dynamic pseudo file, pipe failed\n")
ERROR
ERROR
"Executing dynamic pseudo file, pipe failed\n"
return -1;
-1
1
child = fork();
child = fork()
child
child
fork()
fork
fork
if(child == -1) {		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}
child == -1
child
child
-1
1
{		ERROR("Executing dynamic pseudo file, fork failed\n");		goto failed;	}
ERROR("Executing dynamic pseudo file, fork failed\n");
ERROR("Executing dynamic pseudo file, fork failed\n")
ERROR
ERROR
"Executing dynamic pseudo file, fork failed\n"
goto failed;
failed
if(child == 0) {		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", command, (char *) NULL);		exit(EXIT_FAILURE);	}
child == 0
child
child
0
{		close(STDOUT_FILENO);		res = dup(pipefd[1]);		if(res == -1)			exit(EXIT_FAILURE);		execl("/bin/sh", "sh", "-c", command, (char *) NULL);		exit(EXIT_FAILURE);	}
close(STDOUT_FILENO);
close(STDOUT_FILENO);
close
close
(STDOUT_FILENO)
STDOUT_FILENO
STDOUT_FILENO
res = dup(pipefd[1]);
res = dup(pipefd[1])
res
res
dup(pipefd[1])
dup
dup
pipefd[1]
pipefd
pipefd
1
if(res == -1)			exit(EXIT_FAILURE);
res == -1
res
res
-1
1
exit(EXIT_FAILURE);
exit(EXIT_FAILURE);
exit
exit
(EXIT_FAILURE)
EXIT_FAILURE
EXIT_FAILURE
execl("/bin/sh", "sh", "-c", command, (char *) NULL);
execl("/bin/sh", "sh", "-c", command, (char *) NULL)
execl
execl
"/bin/sh"
"sh"
"-c"
command
command
(char *) NULL
char *
char
*
*
NULL
NULL
exit(EXIT_FAILURE);
exit(EXIT_FAILURE);
exit
exit
(EXIT_FAILURE)
EXIT_FAILURE
EXIT_FAILURE
close(pipefd[1]);
close(pipefd[1])
close
close
pipefd[1]
pipefd
pipefd
1
dev->fd = pipefd[0];
dev->fd = pipefd[0]
dev->fd
dev
dev
fd
pipefd[0]
pipefd
pipefd
0
dev->child = child;
dev->child = child
dev->child
dev
dev
child
child
child
return 0;
0
failed:	return -1;
failed
return -1;
-1
1
-----joern-----
(34,52,0)
(128,103,0)
(49,97,0)
(115,120,0)
(35,134,0)
(29,78,0)
(88,12,0)
(95,0,0)
(31,39,0)
(28,148,0)
(53,113,0)
(62,149,0)
(140,61,0)
(4,148,0)
(131,103,0)
(117,57,0)
(78,36,0)
(55,110,0)
(80,120,0)
(19,110,0)
(146,103,0)
(119,29,0)
(66,47,0)
(84,6,0)
(47,66,0)
(93,103,0)
(28,82,0)
(60,48,0)
(76,87,0)
(51,16,0)
(139,78,0)
(99,139,0)
(150,27,0)
(127,78,0)
(147,51,0)
(116,144,0)
(19,31,0)
(31,103,0)
(48,25,0)
(100,81,0)
(101,78,0)
(136,39,0)
(142,125,0)
(121,87,0)
(78,139,0)
(117,149,0)
(118,48,0)
(2,14,0)
(138,136,0)
(46,61,0)
(68,103,0)
(6,97,0)
(141,37,0)
(106,47,0)
(17,61,0)
(144,21,0)
(97,6,0)
(113,4,0)
(95,15,0)
(13,20,0)
(78,27,0)
(145,151,0)
(102,73,0)
(98,3,0)
(42,4,0)
(78,29,0)
(105,88,0)
(25,8,0)
(58,97,0)
(25,103,0)
(36,132,0)
(77,132,0)
(125,14,0)
(124,12,0)
(50,57,0)
(92,103,0)
(123,37,0)
(17,39,0)
(11,41,0)
(54,64,0)
(4,113,0)
(14,125,0)
(0,103,0)
(37,12,0)
(148,4,0)
(70,24,0)
(132,103,0)
(69,115,0)
(115,1,0)
(52,28,0)
(133,81,0)
(22,103,0)
(122,115,0)
(83,125,0)
(108,103,0)
(126,79,0)
(66,134,0)
(44,17,0)
(148,28,0)
(51,115,0)
(27,150,0)
(71,95,0)
(26,82,0)
(135,103,0)
(107,103,0)
(129,117,0)
(117,0,0)
(8,6,0)
(74,8,0)
(86,121,0)
(118,103,0)
(134,66,0)
(57,117,0)
(18,153,0)
(64,82,0)
(15,95,0)
(65,80,0)
(20,45,0)
(104,120,0)
(67,39,0)
(2,120,0)
(153,0,0)
(7,70,0)
(82,28,0)
(43,44,0)
(82,64,0)
(114,117,0)
(89,0,0)
(154,107,0)
(137,132,0)
(23,115,0)
(21,144,0)
(28,52,0)
(4,149,0)
(136,45,0)
(149,103,0)
(8,25,0)
(149,117,0)
(38,36,0)
(144,139,0)
(12,88,0)
(12,103,0)
(130,39,0)
(110,24,0)
(72,47,0)
(143,103,0)
(75,103,0)
(19,136,0)
(30,145,0)
(87,2,0)
(91,103,0)
(90,151,0)
(96,21,0)
(10,153,0)
(85,140,0)
(9,115,0)
(78,12,0)
(40,0,0)
(136,81,0)
(112,103,0)
(14,2,0)
(39,25,0)
(152,48,0)
(19,17,0)
(111,55,0)
(56,103,0)
(3,31,0)
(125,25,0)
(37,141,0)
(33,46,0)
(5,15,0)
(94,2,0)
(0,40,0)
(6,8,0)
(139,103,0)
(16,51,0)
(81,109,0)
(59,27,0)
(87,121,0)
(48,118,0)
(73,103,0)
(115,51,0)
(63,8,0)
(47,25,0)
(81,20,0)
(79,120,0)
(32,141,0)
(36,78,0)
(20,13,1)
(73,102,1)
(10,95,1)
(116,139,1)
(53,42,1)
(136,81,1)
(49,58,1)
(43,140,1)
(4,149,1)
(139,78,1)
(114,57,1)
(48,152,1)
(96,116,1)
(82,26,1)
(32,123,1)
(121,86,1)
(5,71,1)
(18,10,1)
(6,97,1)
(28,52,1)
(47,106,1)
(21,96,1)
(88,105,1)
(44,43,1)
(17,39,1)
(132,77,1)
(64,54,1)
(153,18,1)
(70,7,1)
(41,11,1)
(152,60,1)
(130,67,1)
(99,37,1)
(4,113,1)
(51,147,1)
(62,153,1)
(137,12,1)
(40,89,1)
(144,139,1)
(145,30,1)
(78,12,1)
(50,129,1)
(82,64,1)
(23,41,1)
(101,127,1)
(71,0,1)
(148,28,1)
(59,37,1)
(95,0,1)
(25,8,1)
(87,2,1)
(154,148,1)
(113,53,1)
(78,36,1)
(147,69,1)
(102,107,1)
(19,136,1)
(9,23,1)
(111,70,1)
(67,144,1)
(12,88,1)
(136,39,1)
(117,114,1)
(47,25,1)
(136,138,1)
(35,47,1)
(140,85,1)
(105,124,1)
(37,12,1)
(119,99,1)
(17,44,1)
(69,122,1)
(15,5,1)
(141,32,1)
(72,25,1)
(36,132,1)
(42,118,1)
(78,27,1)
(126,115,1)
(76,2,1)
(30,95,1)
(62,79,1)
(129,62,1)
(19,110,1)
(46,33,1)
(148,4,1)
(83,94,1)
(33,66,1)
(31,3,1)
(81,109,1)
(77,137,1)
(57,50,1)
(106,72,1)
(55,111,1)
(7,144,1)
(107,154,1)
(79,126,1)
(117,57,1)
(36,38,1)
(31,39,1)
(150,59,1)
(99,27,1)
(34,4,1)
(144,21,1)
(27,150,1)
(23,87,1)
(138,20,1)
(154,90,1)
(122,9,1)
(149,117,1)
(133,148,1)
(26,64,1)
(39,130,1)
(90,145,1)
(153,0,1)
(86,76,1)
(125,25,1)
(29,119,1)
(19,17,1)
(115,1,1)
(142,83,1)
(54,52,1)
(2,14,1)
(19,31,1)
(51,16,1)
(48,25,1)
(37,141,1)
(52,34,1)
(134,35,1)
(11,87,1)
(58,84,1)
(65,153,1)
(85,46,1)
(127,29,1)
(14,125,1)
(0,40,1)
(3,98,1)
(80,65,1)
(115,51,1)
(118,48,1)
(125,142,1)
(60,149,1)
(95,15,1)
(87,121,1)
(66,134,1)
(94,80,1)
(89,66,1)
(63,39,1)
(110,55,1)
(28,82,1)
(74,6,1)
(84,63,1)
(97,49,1)
(78,29,1)
(8,74,1)
(8,6,1)
(13,81,1)
(100,133,1)
(117,0,1)
(81,100,1)
(123,132,1)
(38,101,1)
(66,47,1)
(98,73,1)
(133,148,2)
(114,95,2)
(82,52,2)
(18,95,2)
(139,78,2)
(81,148,2)
(115,153,2)
(118,48,2)
(89,66,2)
(66,47,2)
(126,153,2)
(14,153,2)
(136,81,2)
(140,66,2)
(134,144,2)
(115,51,2)
(78,36,2)
(73,148,2)
(83,153,2)
(150,37,2)
(6,144,2)
(46,66,2)
(19,31,2)
(147,153,2)
(149,95,2)
(71,66,2)
(31,95,2)
(117,57,2)
(144,139,2)
(154,148,2)
(17,39,2)
(142,153,2)
(27,37,2)
(154,95,2)
(153,95,2)
(4,95,2)
(19,110,2)
(27,150,2)
(153,0,2)
(33,66,2)
(86,153,2)
(42,95,2)
(12,88,2)
(110,144,2)
(125,153,2)
(23,153,2)
(97,144,2)
(14,125,2)
(152,95,2)
(63,144,2)
(111,144,2)
(95,15,2)
(8,6,2)
(138,148,2)
(50,95,2)
(85,66,2)
(43,66,2)
(60,95,2)
(36,132,2)
(51,153,2)
(48,95,2)
(35,144,2)
(25,8,2)
(106,144,2)
(8,144,2)
(0,40,2)
(15,66,2)
(52,4,2)
(107,95,2)
(34,4,2)
(74,144,2)
(3,148,2)
(70,144,2)
(57,95,2)
(87,2,2)
(19,17,2)
(26,52,2)
(117,95,2)
(3,95,2)
(115,1,2)
(122,153,2)
(5,66,2)
(95,66,2)
(37,12,2)
(10,95,2)
(149,117,2)
(47,25,2)
(9,153,2)
(78,12,2)
(102,148,2)
(80,153,2)
(25,144,2)
(65,153,2)
(117,0,2)
(136,148,2)
(2,14,2)
(37,141,2)
(79,153,2)
(51,16,2)
(31,39,2)
(98,148,2)
(28,4,2)
(2,153,2)
(87,121,2)
(20,148,2)
(6,97,2)
(4,149,2)
(40,66,2)
(73,95,2)
(148,4,2)
(94,153,2)
(54,52,2)
(81,109,2)
(17,66,2)
(13,148,2)
(100,148,2)
(53,95,2)
(118,95,2)
(19,136,2)
(76,153,2)
(41,87,2)
(66,134,2)
(90,95,2)
(0,66,2)
(113,95,2)
(30,95,2)
(125,25,2)
(31,148,2)
(59,37,2)
(136,39,2)
(148,28,2)
(69,153,2)
(148,95,2)
(62,95,2)
(121,153,2)
(82,64,2)
(44,66,2)
(130,144,2)
(129,95,2)
(64,52,2)
(98,95,2)
(47,144,2)
(55,144,2)
(102,95,2)
(58,144,2)
(87,153,2)
(107,148,2)
(67,144,2)
(72,144,2)
(39,144,2)
(11,87,2)
(48,25,2)
(28,82,2)
(49,144,2)
(78,29,2)
(95,0,2)
(78,27,2)
(7,144,2)
(4,113,2)
(66,144,2)
(28,52,2)
(145,95,2)
(84,144,2)
(144,21,2)
-----------------------------------
(0,child = fork()
(1,char *command)
(2,res = dup(pipefd[1])
(3,-1)
(4,res != -1)
(5,1)
(6,O_CREAT | O_TRUNC | O_RDWR)
(7,"asprint failed in exec_file()
(8,open(filename, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU)
(9,"sh")
(10,child)
(11,EXIT_FAILURE)
(12,pid = -1)
(13,filename)
(14,dup(pipefd[1])
(15,-1)
(16,char *)
(17,return -1;)
(18,0)
(19,RET)
(20,dev->filename = filename)
(21,-1)
(22,if(pipefd[1] == -1)
(23,"/bin/sh")
(24,)
(25,pipefd[1] = open(filename, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU)
(26,0)
(27,pid = getpid()
(28,WIFEXITED(status)
(29,&filename)
(30,"Executing dynamic pseudo file, fork failed\\n")
(31,return -1;)
(32,1)
(33,"Executing dynamic pseudo file, open failed\\n")
(34,status)
(35,1)
(36,number ++)
(37,pid == -1)
(38,number)
(39,pipefd[1])
(40,fork()
(41,exit(EXIT_FAILURE)
(42,res)
(43,1)
(44,-1)
(45,)
(46,ERROR("Executing dynamic pseudo file, open failed\\n")
(47,pipefd[1])
(48,pipefd[1])
(49,O_RDWR)
(50,status)
(51,(char *)
(52,WIFEXITED(status)
(53,1)
(54,status)
(55,-1)
(56,number)
(57,&status)
(58,O_TRUNC)
(59,pid)
(60,pipefd)
(61,)
(62,res)
(63,filename)
(64,WEXITSTATUS(status)
(65,STDOUT_FILENO)
(66,pipefd[1] == -1)
(67,pipefd)
(68,if(child == 0)
(69,command)
(70,ERROR("asprint failed in exec_file()
(71,child)
(72,pipefd)
(73,free(filename)
(74,S_IRWXU)
(75,res)
(76,res)
(77,0)
(78,asprintf(&filename, "/tmp/squashfs_pseudo_%d_%d", pid, number ++)
(79,exit(EXIT_FAILURE)
(80,close(STDOUT_FILENO)
(81,dev->filename)
(82,WEXITSTATUS(status)
(83,pipefd)
(84,O_CREAT)
(85,filename)
(86,1)
(87,res == -1)
(88,-1)
(89,child)
(90,goto failed;)
(91,pipefd)
(92,if(res == -1)
(93,if(res != -1 && WIFEXITED(status)
(94,res)
(95,child == -1)
(96,1)
(97,O_TRUNC | O_RDWR)
(98,1)
(99,res)
(100,filename)
(101,pid)
(102,filename)
(103,)
(104,if(res == -1)
(105,1)
(106,1)
(107,unlink(filename)
(108,filename)
(109,struct pseudo_dev *dev)
(110,return -1;)
(111,1)
(112,child)
(113,-1)
(114,0)
(115,execl("/bin/sh", "sh", "-c", command, (char *)
(116,res)
(117,waitpid(child, &status, 0)
(118,close(pipefd[1])
(119,filename)
(120,)
(121,-1)
(122,"-c")
(123,pid)
(124,pid)
(125,pipefd[1])
(126,EXIT_FAILURE)
(127,"/tmp/squashfs_pseudo_%d_%d")
(128,if(pid == -1)
(129,child)
(130,1)
(131,status)
(132,number = 0)
(133,dev)
(134,-1)
(135,if(child == -1)
(136,return 0;)
(137,number)
(138,0)
(139,res = asprintf(&filename, "/tmp/squashfs_pseudo_%d_%d", pid, number ++)
(140,free(filename)
(141,-1)
(142,1)
(143,failed:)
(144,res == -1)
(145,ERROR("Executing dynamic pseudo file, fork failed\\n")
(146,pid)
(147,NULL)
(148,res != -1 && WIFEXITED(status)
(149,res = waitpid(child, &status, 0)
(150,getpid()
(151,)
(152,1)
(153,child == 0)
(154,filename)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^