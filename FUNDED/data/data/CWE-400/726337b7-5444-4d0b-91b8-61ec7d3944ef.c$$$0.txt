-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_04_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_04_bad(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_04_bad()
CWE401_Memory_Leak__char_malloc_04_bad
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(31,22,0)
(0,32,0)
(7,17,0)
(19,29,0)
(1,29,0)
(10,22,0)
(16,22,0)
(26,17,0)
(6,9,0)
(8,24,0)
(16,27,0)
(13,5,0)
(27,32,0)
(11,28,0)
(32,9,0)
(5,17,0)
(4,17,0)
(24,3,0)
(3,24,0)
(3,18,0)
(32,27,0)
(27,15,0)
(29,32,0)
(15,27,0)
(22,16,0)
(25,5,0)
(12,28,0)
(28,32,0)
(27,16,0)
(21,6,0)
(6,32,0)
(14,10,0)
(28,9,0)
(20,9,0)
(22,10,0)
(19,32,1)
(11,12,1)
(10,14,1)
(30,2,1)
(12,29,1)
(22,10,1)
(1,19,1)
(8,29,1)
(24,8,1)
(6,32,1)
(0,23,1)
(2,6,1)
(21,28,1)
(29,1,1)
(23,5,1)
(5,13,1)
(27,15,1)
(28,11,1)
(16,22,1)
(3,24,1)
(32,27,1)
(2,23,1)
(28,32,1)
(27,16,1)
(29,32,1)
(31,0,1)
(14,31,1)
(12,3,1)
(6,21,1)
(13,25,1)
(31,23,2)
(29,32,2)
(6,23,2)
(29,23,2)
(3,29,2)
(11,23,2)
(32,27,2)
(14,23,2)
(10,23,2)
(22,23,2)
(0,23,2)
(1,23,2)
(16,23,2)
(32,23,2)
(6,32,2)
(27,15,2)
(24,29,2)
(27,23,2)
(22,10,2)
(3,24,2)
(19,23,2)
(28,32,2)
(12,23,2)
(16,22,2)
(27,16,2)
(21,23,2)
(28,23,2)
(8,29,2)
-----------------------------------
(0,data)
(1,NULL)
(2,STATIC_CONST_TRUE)
(3,exit(-1)
(4,if(STATIC_CONST_TRUE)
(5,data = NULL)
(6,printLine(data)
(7,if(STATIC_CONST_TRUE)
(8,1)
(9,)
(10,sizeof(char)
(11,"A String")
(12,data)
(13,NULL)
(14,char)
(15,char *)
(16,malloc(100*sizeof(char)
(17,)
(18,)
(19,data)
(20,if (data == NULL)
(21,data)
(22,100*sizeof(char)
(23,STATIC_CONST_TRUE)
(24,-1)
(25,data)
(26,data)
(27,(char *)
(28,strcpy(data, "A String")
(29,data == NULL)
(30,RET)
(31,100)
(32,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^