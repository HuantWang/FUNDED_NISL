-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,69,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_03_bad()
CWE401_Memory_Leak__wchar_t_malloc_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(25,3,0)
(26,30,0)
(29,22,0)
(30,6,0)
(26,14,0)
(3,2,0)
(14,26,0)
(33,14,0)
(20,2,0)
(14,10,0)
(8,25,0)
(23,0,0)
(30,26,0)
(5,1,0)
(9,20,0)
(11,32,0)
(27,25,0)
(18,0,0)
(16,32,0)
(7,3,0)
(31,2,0)
(20,3,0)
(15,10,0)
(13,22,0)
(1,5,0)
(3,30,0)
(17,32,0)
(30,3,0)
(6,30,0)
(5,24,0)
(10,14,0)
(12,28,0)
(21,1,0)
(22,32,0)
(19,28,0)
(13,29,1)
(20,9,1)
(25,8,1)
(15,33,1)
(22,13,1)
(18,23,1)
(33,7,1)
(12,22,1)
(0,18,1)
(4,0,1)
(28,19,1)
(23,28,1)
(30,26,1)
(20,3,1)
(27,3,1)
(9,25,1)
(1,21,1)
(8,27,1)
(19,12,1)
(30,6,1)
(9,5,1)
(23,20,1)
(7,28,1)
(26,14,1)
(14,10,1)
(10,15,1)
(3,30,1)
(25,3,1)
(21,25,1)
(5,1,1)
(26,28,2)
(25,28,2)
(3,28,2)
(14,10,2)
(30,26,2)
(20,3,2)
(30,28,2)
(15,28,2)
(27,28,2)
(25,3,2)
(7,28,2)
(10,28,2)
(20,28,2)
(26,14,2)
(14,28,2)
(9,28,2)
(3,30,2)
(33,28,2)
(8,28,2)
(21,25,2)
(5,25,2)
(1,25,2)
(5,1,2)
(30,6,2)
-----------------------------------
(0,5==5)
(1,-1)
(2,)
(3,data = (wchar_t *)
(4,RET)
(5,exit(-1)
(6,wchar_t *)
(7,data)
(8,NULL)
(9,data)
(10,sizeof(wchar_t)
(11,data)
(12,5)
(13,NULL)
(14,100*sizeof(wchar_t)
(15,wchar_t)
(16,if(5==5)
(17,if(5==5)
(18,5)
(19,5)
(20,printWLine(data)
(21,1)
(22,data = NULL)
(23,5)
(24,)
(25,data == NULL)
(26,malloc(100*sizeof(wchar_t)
(27,data)
(28,5==5)
(29,data)
(30,(wchar_t *)
(31,if (data == NULL)
(32,)
(33,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^