-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
98,99
100,101
102,103
102,104
103,104
104,105
104,106
106,107
106,108
106,109
109,110
110,111
111,112
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,85,87,88,92,94,99,101,105,107,108,112,113
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_32_bad()
CWE401_Memory_Leak__char_malloc_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(49,28,0)
(1,52,0)
(1,3,0)
(36,20,0)
(45,52,0)
(13,16,0)
(5,29,0)
(42,20,0)
(30,4,0)
(28,49,0)
(36,33,0)
(29,53,0)
(45,8,0)
(18,8,0)
(37,45,0)
(0,15,0)
(20,15,0)
(52,8,0)
(41,32,0)
(39,27,0)
(33,36,0)
(48,1,0)
(43,45,0)
(28,3,0)
(11,8,0)
(51,0,0)
(27,8,0)
(3,28,0)
(4,8,0)
(16,52,0)
(21,29,0)
(33,10,0)
(12,20,0)
(2,52,0)
(17,0,0)
(20,12,0)
(27,21,0)
(53,29,0)
(38,29,0)
(6,10,0)
(32,8,0)
(32,52,0)
(31,9,0)
(52,1,0)
(46,36,0)
(9,31,0)
(10,15,0)
(38,32,0)
(26,53,0)
(21,27,0)
(14,15,0)
(29,15,0)
(50,9,0)
(47,33,0)
(8,15,0)
(22,21,0)
(19,15,0)
(40,16,0)
(25,15,0)
(35,38,0)
(3,1,0)
(7,12,0)
(23,28,0)
(24,49,0)
(1,48,0)
(31,34,0)
(4,52,0)
(21,29,1)
(51,17,1)
(16,52,1)
(49,24,1)
(1,3,1)
(40,13,1)
(45,52,1)
(47,32,1)
(28,49,1)
(35,4,1)
(38,35,1)
(21,22,1)
(2,27,1)
(31,9,1)
(39,0,1)
(42,29,1)
(17,20,1)
(43,31,1)
(0,51,1)
(44,33,1)
(23,2,1)
(20,12,1)
(33,36,1)
(4,52,1)
(37,43,1)
(26,5,1)
(12,7,1)
(52,1,1)
(38,29,1)
(29,53,1)
(3,28,1)
(30,45,1)
(50,16,1)
(22,39,1)
(45,37,1)
(24,23,1)
(53,26,1)
(43,16,1)
(1,48,1)
(7,42,1)
(16,40,1)
(13,52,1)
(32,52,1)
(32,41,1)
(36,46,1)
(27,21,1)
(41,38,1)
(46,47,1)
(36,20,1)
(9,50,1)
(4,30,1)
(45,52,2)
(1,3,2)
(3,28,2)
(31,9,2)
(21,29,2)
(50,16,2)
(28,49,2)
(4,52,2)
(33,36,2)
(36,20,2)
(9,16,2)
(32,52,2)
(31,16,2)
(38,29,2)
(52,1,2)
(1,48,2)
(16,52,2)
(20,12,2)
(27,21,2)
(29,53,2)
-----------------------------------
(0,data = NULL)
(1,(char *)
(2,data)
(3,malloc(100*sizeof(char)
(4,printLine(data)
(5,dataPtr1)
(6,data)
(7,data)
(8,)
(9,-1)
(10,)
(11,data)
(12,&data)
(13,data)
(14,dataPtr1)
(15,)
(16,data == NULL)
(17,data)
(18,if (data == NULL)
(19,data)
(20,* *dataPtr2 = &data)
(21,*dataPtr1)
(22,dataPtr1)
(23,100)
(24,char)
(25,dataPtr2)
(26,data)
(27,* data = *dataPtr1)
(28,100*sizeof(char)
(29,* *dataPtr1 = &data)
(30,data)
(31,exit(-1)
(32,*dataPtr1 = data)
(33,* data = *dataPtr2)
(34,)
(35,dataPtr1)
(36,*dataPtr2)
(37,"A String")
(38,*dataPtr1)
(39,data)
(40,NULL)
(41,data)
(42,dataPtr2)
(43,data)
(44,RET)
(45,strcpy(data, "A String")
(46,dataPtr2)
(47,data)
(48,char *)
(49,sizeof(char)
(50,1)
(51,NULL)
(52,data = (char *)
(53,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^