-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(26,3,0)
(0,30,0)
(17,19,0)
(38,10,0)
(7,33,0)
(30,1,0)
(12,34,0)
(11,25,0)
(14,39,0)
(5,1,0)
(32,6,0)
(35,10,0)
(19,12,0)
(1,30,0)
(2,12,0)
(36,2,0)
(33,6,0)
(6,25,0)
(21,27,0)
(2,24,0)
(29,6,0)
(9,25,0)
(30,34,0)
(4,26,0)
(39,24,0)
(33,12,0)
(3,28,0)
(37,24,0)
(34,30,0)
(13,2,0)
(34,12,0)
(31,25,0)
(3,26,0)
(34,15,0)
(22,12,0)
(18,27,0)
(39,12,0)
(33,23,0)
(20,19,0)
(12,24,0)
(15,34,0)
(18,21,1)
(1,5,1)
(22,10,1)
(26,4,1)
(17,20,1)
(21,10,1)
(36,3,1)
(14,2,1)
(39,12,1)
(33,12,1)
(2,13,1)
(21,39,1)
(2,12,1)
(29,32,1)
(19,17,1)
(13,36,1)
(35,6,1)
(3,26,1)
(30,1,1)
(7,27,1)
(33,7,1)
(36,19,1)
(34,15,1)
(0,22,1)
(19,12,1)
(8,33,1)
(8,27,1)
(34,30,1)
(4,19,1)
(27,18,1)
(39,14,1)
(12,34,1)
(20,12,1)
(10,38,1)
(5,0,1)
(33,6,1)
(6,29,1)
(38,35,1)
(33,6,2)
(30,1,2)
(0,10,2)
(1,10,2)
(36,10,2)
(14,10,2)
(33,27,2)
(2,12,2)
(5,10,2)
(3,26,2)
(13,10,2)
(33,12,2)
(26,19,2)
(20,10,2)
(4,19,2)
(12,34,2)
(34,30,2)
(7,27,2)
(34,10,2)
(2,10,2)
(39,12,2)
(19,10,2)
(12,10,2)
(22,10,2)
(30,10,2)
(3,19,2)
(17,10,2)
(19,12,2)
(34,15,2)
(39,10,2)
-----------------------------------
(0,100)
(1,sizeof(char)
(2,strcpy(data, "A String")
(3,exit(-1)
(4,1)
(5,char)
(6,data = NULL)
(7,data)
(8,RET)
(9,data)
(10,GLOBAL_CONST_FIVE==5)
(11,if(GLOBAL_CONST_FIVE==5)
(12,data = (char *)
(13,"A String")
(14,data)
(15,char *)
(16, sizeof(char)
(17,NULL)
(18,5)
(19,data == NULL)
(20,data)
(21,GLOBAL_CONST_FIVE)
(22,data)
(23,)
(24,)
(25,)
(26,-1)
(27,GLOBAL_CONST_FIVE==5)
(28,)
(29,NULL)
(30,calloc(100, sizeof(char)
(31,if(GLOBAL_CONST_FIVE==5)
(32,data)
(33,free(data)
(34,(char *)
(35,GLOBAL_CONST_FIVE)
(36,data)
(37,if (data == NULL)
(38,5)
(39,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^