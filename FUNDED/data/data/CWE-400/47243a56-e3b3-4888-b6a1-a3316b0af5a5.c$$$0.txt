-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
92,93
94,95
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,98,100
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(23,12,0)
(29,8,0)
(16,51,0)
(27,31,0)
(24,30,0)
(45,51,0)
(42,37,0)
(2,8,0)
(26,5,0)
(0,47,0)
(22,29,0)
(40,36,0)
(8,50,0)
(1,51,0)
(18,33,0)
(29,22,0)
(12,28,0)
(30,24,0)
(21,7,0)
(50,8,0)
(8,2,0)
(47,50,0)
(20,30,0)
(30,16,0)
(31,7,0)
(33,22,0)
(3,7,0)
(11,23,0)
(50,51,0)
(4,45,0)
(19,38,0)
(37,35,0)
(5,25,0)
(16,30,0)
(48,42,0)
(37,42,0)
(15,31,0)
(36,50,0)
(47,24,0)
(33,18,0)
(9,22,0)
(38,50,0)
(10,36,0)
(35,51,0)
(30,20,0)
(5,31,0)
(36,39,0)
(39,36,0)
(32,50,0)
(42,50,0)
(49,39,0)
(5,50,0)
(6,37,0)
(22,33,0)
(13,47,0)
(44,42,0)
(17,35,0)
(41,7,0)
(43,38,0)
(24,47,0)
(39,45,0)
(12,23,0)
(8,29,0)
(34,14,1)
(15,27,1)
(30,20,1)
(26,34,1)
(48,38,1)
(31,15,1)
(23,11,1)
(46,5,1)
(16,30,1)
(5,31,1)
(19,50,1)
(38,50,1)
(32,14,1)
(30,24,1)
(12,23,1)
(22,33,1)
(50,8,1)
(43,19,1)
(6,42,1)
(48,12,1)
(33,9,1)
(37,6,1)
(10,40,1)
(46,34,1)
(47,0,1)
(5,50,1)
(44,48,1)
(29,22,1)
(39,49,1)
(9,32,1)
(5,26,1)
(45,4,1)
(33,18,1)
(17,37,1)
(47,50,1)
(35,17,1)
(24,47,1)
(49,36,1)
(11,38,1)
(14,31,1)
(4,39,1)
(39,36,1)
(0,13,1)
(40,35,1)
(38,43,1)
(8,29,1)
(36,10,1)
(36,50,1)
(8,2,1)
(42,44,1)
(42,50,1)
(37,42,1)
(34,16,1)
(13,45,1)
(16,14,2)
(45,14,2)
(37,42,2)
(38,50,2)
(8,29,2)
(22,14,2)
(50,8,2)
(5,31,2)
(19,14,2)
(43,14,2)
(16,30,2)
(50,14,2)
(39,14,2)
(29,14,2)
(39,36,2)
(0,14,2)
(30,24,2)
(11,38,2)
(44,14,2)
(8,2,2)
(32,14,2)
(30,14,2)
(49,14,2)
(23,38,2)
(26,34,2)
(48,14,2)
(5,34,2)
(33,14,2)
(37,14,2)
(38,14,2)
(24,14,2)
(12,38,2)
(40,14,2)
(47,50,2)
(30,20,2)
(42,50,2)
(6,14,2)
(17,14,2)
(22,33,2)
(47,14,2)
(5,50,2)
(13,14,2)
(10,14,2)
(36,14,2)
(36,50,2)
(29,22,2)
(8,14,2)
(42,14,2)
(4,14,2)
(12,23,2)
(33,18,2)
(9,14,2)
(35,14,2)
(24,47,2)
-----------------------------------
(0,0)
(1,if (data == NULL)
(2,struct _twoIntsStruct *)
(3,data)
(4,0)
(5,free(data)
(6,intOne)
(7,)
(8,(struct _twoIntsStruct *)
(9,100)
(10,0)
(11,1)
(12,exit(-1)
(13,data)
(14,staticReturnsTrue()
(15,NULL)
(16,printStructLine((twoIntsStruct *)
(17,0)
(18,struct _twoIntsStruct)
(19,data)
(20,twoIntsStruct *)
(21,if(staticReturnsTrue()
(22,100*sizeof(struct _twoIntsStruct)
(23,-1)
(24,&data[0])
(25,)
(26,data)
(27,data)
(28,)
(29,malloc(100*sizeof(struct _twoIntsStruct)
(30,(twoIntsStruct *)
(31,data = NULL)
(32,data)
(33,sizeof(struct _twoIntsStruct)
(34,staticReturnsTrue()
(35,data[0].intOne = 0)
(36,data[0])
(37,data[0].intOne)
(38,data == NULL)
(39,data[0].intTwo)
(40,data)
(41,if(staticReturnsTrue()
(42,data[0])
(43,NULL)
(44,0)
(45,data[0].intTwo = 0)
(46,RET)
(47,data[0])
(48,data)
(49,intTwo)
(50,data = (struct _twoIntsStruct *)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^