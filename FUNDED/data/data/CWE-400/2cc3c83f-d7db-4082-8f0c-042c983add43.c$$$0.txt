-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
45,46
47,48
50,51
51,52
51,53
52,53
54,55
56,57
57,58
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,53,55,58
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(18,8,0)
(10,0,0)
(13,11,0)
(4,16,0)
(23,0,0)
(9,3,0)
(21,3,0)
(3,17,0)
(12,15,0)
(4,24,0)
(2,9,0)
(26,17,0)
(3,8,0)
(0,3,0)
(11,3,0)
(0,8,0)
(20,4,0)
(14,26,0)
(26,3,0)
(0,17,0)
(11,8,0)
(15,7,0)
(16,4,0)
(3,9,0)
(7,15,0)
(1,11,0)
(19,16,0)
(5,25,0)
(25,17,0)
(26,8,0)
(25,3,0)
(9,2,0)
(11,17,0)
(9,24,0)
(7,22,0)
(24,9,0)
(6,25,0)
(24,4,0)
(10,0,1)
(25,5,1)
(26,14,1)
(11,3,1)
(9,24,1)
(13,7,1)
(26,17,1)
(9,2,1)
(12,25,1)
(11,17,1)
(3,9,1)
(25,3,1)
(0,17,1)
(23,26,1)
(4,16,1)
(26,3,1)
(6,3,1)
(0,3,1)
(25,17,1)
(0,23,1)
(19,20,1)
(5,6,1)
(20,21,1)
(11,1,1)
(24,4,1)
(15,12,1)
(1,13,1)
(7,15,1)
(14,11,1)
(16,19,1)
(3,17,1)
(13,25,1)
(9,2,2)
(7,25,2)
(11,3,2)
(3,17,2)
(7,15,2)
(25,3,2)
(10,0,2)
(26,3,2)
(3,9,2)
(12,25,2)
(0,3,2)
(11,17,2)
(24,4,2)
(25,17,2)
(4,16,2)
(9,24,2)
(15,25,2)
(26,17,2)
(0,17,2)
-----------------------------------
(0,return data;)
(1,"A String")
(2,char *)
(3,data = (char *)
(4,100*sizeof(char)
(5,NULL)
(6,data)
(7,exit(-1)
(8,)
(9,(char *)
(10,RET)
(11,strcpy(data, "A String")
(12,1)
(13,data)
(14,data)
(15,-1)
(16,sizeof(char)
(17,char * data)
(18,if (data == NULL)
(19,char)
(20,100)
(21,data)
(22,)
(23,data)
(24,malloc(100*sizeof(char)
(25,data == NULL)
(26,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^