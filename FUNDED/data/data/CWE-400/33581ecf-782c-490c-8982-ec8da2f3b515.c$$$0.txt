-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,19,24,27,30,35,37,38,43,46,48,51,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
22,23
22,24
40,41
40,42
41,42
41,43
49,50
49,51
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
48,93
51,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_TRUE)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_TRUE)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(STATIC_CONST_TRUE)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(6,1,0)
(3,52,0)
(53,7,0)
(33,51,0)
(9,5,0)
(47,21,0)
(26,52,0)
(11,34,0)
(41,43,0)
(19,1,0)
(25,50,0)
(30,52,0)
(43,41,0)
(40,26,0)
(21,1,0)
(30,0,0)
(13,1,0)
(42,50,0)
(45,43,0)
(20,12,0)
(49,47,0)
(7,53,0)
(12,0,0)
(52,0,0)
(34,11,0)
(12,52,0)
(36,52,0)
(39,9,0)
(26,0,0)
(50,25,0)
(24,44,0)
(50,11,0)
(31,21,0)
(47,49,0)
(5,9,0)
(2,21,0)
(16,7,0)
(8,51,0)
(43,52,0)
(25,53,0)
(32,36,0)
(52,43,0)
(28,50,0)
(35,47,0)
(41,47,0)
(15,0,0)
(5,23,0)
(27,36,0)
(17,53,0)
(44,37,0)
(51,18,0)
(50,21,0)
(53,11,0)
(29,30,0)
(14,49,0)
(47,11,0)
(48,26,0)
(53,21,0)
(43,45,0)
(38,11,0)
(53,25,0)
(11,22,0)
(47,41,0)
(27,52,1)
(10,44,1)
(50,21,1)
(4,11,1)
(36,32,1)
(38,46,1)
(39,36,1)
(12,20,1)
(47,49,1)
(35,3,1)
(47,11,1)
(30,52,1)
(48,36,1)
(53,21,1)
(10,4,1)
(49,14,1)
(34,38,1)
(21,31,1)
(44,24,1)
(26,52,1)
(40,48,1)
(24,25,1)
(7,16,1)
(31,2,1)
(4,46,1)
(42,53,1)
(30,29,1)
(52,43,1)
(9,39,1)
(10,12,1)
(25,53,1)
(12,52,1)
(36,52,1)
(20,30,1)
(48,5,1)
(50,28,1)
(53,7,1)
(41,47,1)
(3,25,1)
(29,26,1)
(17,4,1)
(43,41,1)
(5,9,1)
(32,27,1)
(14,35,1)
(11,34,1)
(26,40,1)
(46,21,1)
(25,50,1)
(47,21,1)
(28,42,1)
(50,11,1)
(43,45,1)
(16,17,1)
(53,11,1)
(43,25,2)
(30,25,2)
(38,46,2)
(47,21,2)
(11,46,2)
(25,53,2)
(47,49,2)
(49,25,2)
(35,25,2)
(47,11,2)
(53,4,2)
(26,52,2)
(53,7,2)
(12,25,2)
(27,25,2)
(50,53,2)
(52,43,2)
(32,25,2)
(36,52,2)
(14,25,2)
(52,25,2)
(29,25,2)
(39,36,2)
(20,25,2)
(5,36,2)
(16,4,2)
(34,46,2)
(48,25,2)
(7,4,2)
(40,25,2)
(50,11,2)
(12,52,2)
(43,45,2)
(24,25,2)
(17,4,2)
(3,25,2)
(9,36,2)
(36,25,2)
(43,41,2)
(53,11,2)
(25,4,2)
(41,25,2)
(30,52,2)
(44,25,2)
(5,9,2)
(25,50,2)
(50,21,2)
(53,21,2)
(42,53,2)
(41,47,2)
(47,25,2)
(11,34,2)
(26,25,2)
(28,53,2)
-----------------------------------
(0,)
(1,)
(2,data)
(3,myString)
(4,STATIC_CONST_TRUE)
(5,exit(-1)
(6,if(STATIC_CONST_TRUE)
(7,strlen(HELLO_STRING)
(8,myString)
(9,-1)
(10,RET)
(11,data = rand()
(12,free(myString)
(13,data)
(14,char)
(15,if (myString == NULL)
(16,HELLO_STRING)
(17,data)
(18,)
(19,if(STATIC_CONST_TRUE)
(20,myString)
(21,data = 0)
(22,)
(23,)
(24,"Input is less than the length of the source string or too large")
(25,data > strlen(HELLO_STRING)
(26,strcpy(myString, HELLO_STRING)
(27,myString)
(28,100)
(29,myString)
(30,printLine(myString)
(31,0)
(32,NULL)
(33,if (data > strlen(HELLO_STRING)
(34,rand()
(35,data)
(36,myString == NULL)
(37,)
(38,data)
(39,1)
(40,HELLO_STRING)
(41,malloc(data*sizeof(char)
(42,data)
(43,(char *)
(44,printLine("Input is less than the length of the source string or too large")
(45,char *)
(46,STATIC_CONST_TRUE)
(47,data*sizeof(char)
(48,myString)
(49,sizeof(char)
(50,data < 100)
(51,)
(52,myString = (char *)
(53,data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^