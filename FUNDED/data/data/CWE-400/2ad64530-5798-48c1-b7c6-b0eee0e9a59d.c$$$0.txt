-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_03_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
66,67
66,68
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,64,65,70,72,76,77
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
48,49
48,50
63,64
63,65
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_03_bad(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_03_bad()
CWE400_Resource_Exhaustion__fgets_sleep_03_bad
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(5==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
5==5
5
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(17,21,0)
(33,7,0)
(9,18,0)
(25,35,0)
(15,26,0)
(7,12,0)
(9,7,0)
(18,9,0)
(31,6,0)
(3,4,0)
(35,25,0)
(2,9,0)
(26,6,0)
(26,15,0)
(16,38,0)
(35,7,0)
(14,13,0)
(21,29,0)
(39,19,0)
(24,6,0)
(28,12,0)
(11,12,0)
(23,18,0)
(25,20,0)
(13,1,0)
(19,29,0)
(27,7,0)
(19,25,0)
(40,9,0)
(36,26,0)
(22,15,0)
(30,9,0)
(5,6,0)
(10,38,0)
(0,35,0)
(12,37,0)
(19,26,0)
(34,25,0)
(32,4,0)
(16,4,1)
(25,35,1)
(27,4,1)
(8,38,1)
(40,7,1)
(14,18,1)
(19,39,1)
(17,19,1)
(16,25,1)
(26,15,1)
(16,13,1)
(35,0,1)
(35,7,1)
(7,33,1)
(34,18,1)
(38,10,1)
(19,25,1)
(3,26,1)
(13,14,1)
(33,27,1)
(18,9,1)
(4,32,1)
(18,23,1)
(10,16,1)
(23,9,1)
(21,17,1)
(0,34,1)
(15,22,1)
(9,2,1)
(9,7,1)
(19,26,1)
(2,30,1)
(22,36,1)
(8,21,1)
(32,3,1)
(30,40,1)
(39,38,1)
(33,4,2)
(9,7,2)
(18,4,2)
(34,18,2)
(19,26,2)
(17,38,2)
(2,4,2)
(19,38,2)
(39,38,2)
(25,18,2)
(35,18,2)
(19,25,2)
(30,4,2)
(0,18,2)
(18,9,2)
(40,4,2)
(13,18,2)
(27,4,2)
(23,4,2)
(14,18,2)
(9,4,2)
(35,7,2)
(7,4,2)
(26,15,2)
(25,35,2)
(21,38,2)
-----------------------------------
(0,inputBuffer)
(1,)
(2,stdin)
(3,5)
(4,5==5)
(5,count)
(6,)
(7,inputBuffer[CHAR_ARRAY_SIZE] = "")
(8,RET)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,5)
(11,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,)
(13,printLine("fgets()
(14,"fgets()
(15,-1)
(16,5)
(17,"Sleep time possibly too long")
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,SLEEP(count)
(20,)
(21,printLine("Sleep time possibly too long")
(22,1)
(23,NULL)
(24,if(5==5)
(25,count = atoi(inputBuffer)
(26,count = -1)
(27,inputBuffer)
(28,inputBuffer)
(29,)
(30,CHAR_ARRAY_SIZE)
(31,if(5==5)
(32,5)
(33,"")
(34,count)
(35,atoi(inputBuffer)
(36,count)
(37,)
(38,5==5)
(39,count)
(40,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^