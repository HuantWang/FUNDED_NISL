-----label-----
0
-----code-----
void
_gdp_req_free(gdp_req_t **reqp)
{
	gdp_req_t *req = *reqp;

	if (req == NULL)
		return;

	// make sure the original pointer is invalid
	*reqp = NULL;

	ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",
			req, req->state, req->gcl);

	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
	if (req->state == GDP_REQ_FREE)
	{
		// req was freed after a reference was taken
		return;
	}

	// remove the request from the channel subscription list
	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))
	{
		ep_thr_mutex_lock(&req->chan->mutex);
		LIST_REMOVE(req, chanlist);
		req->flags &= ~GDP_REQ_ON_CHAN_LIST;
		ep_thr_mutex_unlock(&req->chan->mutex);
	}

	// remove the request from the GCL list
	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))
	{
		EP_ASSERT_ELSE(req->gcl != NULL, return);
		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);
		LIST_REMOVE(req, gcllist);
		req->flags &= ~GDP_REQ_ON_GCL_LIST;
	}
	req->gcl = NULL;

	// remove any pending events from the request
	{
		gdp_event_t *gev;
		while ((gev = STAILQ_FIRST(&req->events)) != NULL)
			STAILQ_REMOVE_HEAD(&req->events, queue);
	}

	// free the associated PDU(s)
	if (req->rpdu != NULL && req->rpdu != req->cpdu)
		_gdp_pdu_free(req->rpdu);
	if (req->cpdu != NULL)
		_gdp_pdu_free(req->cpdu);
	req->rpdu = req->cpdu = NULL;

	// dereference the gcl
	// (refcnt may be zero if called from _gdp_gcl_freehandle)
	if (req->gcl != NULL && req->gcl->refcnt > 0)
	{
		_gdp_gcl_decref(&req->gcl);
	}

	req->state = GDP_REQ_FREE;
	req->flags = 0;
	req->md = NULL;
	req->udata = NULL;

	// add the empty request to the free list
	ep_thr_mutex_lock(&ReqFreeListMutex);
	LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);
	NReqsAllocated--;
	ep_thr_mutex_unlock(&ReqFreeListMutex);

	_gdp_req_unlock(req);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
8,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
12,25
12,26
12,27
12,28
12,29
12,30
12,31
12,32
12,33
12,34
12,35
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
22,23
24,25
24,26
25,26
25,27
26,27
28,29
31,32
32,33
32,34
33,34
34,35
36,37
38,39
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
42,43
46,47
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
67,69
68,69
71,72
73,74
75,76
75,77
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
98,101
99,100
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
112,113
114,115
115,116
115,117
116,117
118,119
119,120
119,121
120,121
120,122
121,122
125,126
125,127
126,127
126,128
126,129
127,128
129,130
131,132
131,133
132,133
135,136
135,137
135,138
135,139
136,137
137,138
138,139
138,140
139,140
141,142
142,143
142,144
143,144
143,145
144,145
148,149
149,150
149,151
149,152
150,151
152,153
154,155
156,157
157,158
157,159
158,159
158,160
159,160
162,163
163,164
165,166
166,167
166,168
167,168
167,169
168,169
171,172
173,174
173,175
174,175
175,176
175,177
176,177
178,179
178,180
181,182
181,183
182,183
182,184
183,184
184,185
184,186
185,186
187,188
187,189
188,189
190,191
191,192
191,193
192,193
195,196
197,198
198,199
198,200
198,201
199,200
201,202
202,203
202,204
203,204
206,207
208,209
208,210
209,210
209,211
210,211
210,212
211,212
211,213
212,213
215,216
217,218
217,219
218,219
218,220
219,220
222,223
222,224
223,224
226,227
227,228
227,229
228,229
230,231
230,232
231,232
234,235
234,236
235,236
235,237
236,237
236,238
237,238
240,241
242,243
243,244
243,245
244,245
246,247
246,248
247,248
250,251
251,252
251,253
252,253
252,254
253,254
256,257
256,258
257,258
257,259
258,259
261,262
263,264
263,265
264,265
264,266
265,266
265,267
266,267
266,268
267,268
270,271
272,273
272,274
273,274
273,275
274,275
274,276
275,276
280,281
281,282
282,283
282,284
283,284
285,286
286,287
286,288
287,288
290,291
291,292
291,293
292,293
292,294
293,294
296,297
298,299
299,300
299,301
300,301
300,302
301,302
305,306
306,307
306,308
307,308
307,309
308,309
311,312
313,314
314,315
314,316
315,316
315,317
316,317
319,320
321,322
322,323
322,324
323,324
325,326
326,327
326,328
329,330
330,331
330,332
330,333
330,334
331,332
333,334
334,335
336,337
338,339
340,341
341,342
342,343
344,345
345,346
345,347
346,347
348,349
349,350
351,352
352,353
352,354
353,354
355,356
-----nextToken-----
2,4,7,9,10,11,16,18,19,23,27,29,30,35,37,41,43,44,45,47,50,51,54,55,59,63,64,69,70,72,74,78,80,83,84,89,94,95,96,100,102,104,109,110,113,117,122,123,124,128,130,133,134,140,145,146,147,151,153,155,160,161,164,169,170,172,177,179,180,186,189,193,194,196,200,204,205,207,213,214,216,220,221,224,225,229,232,233,238,239,241,245,248,249,254,255,259,260,262,268,269,271,276,277,278,279,284,288,289,294,295,297,302,303,304,309,310,312,317,318,320,324,327,328,332,335,337,339,343,347,350,354,356
-----computeFrom-----
25,26
25,27
32,33
32,34
66,67
66,68
106,107
106,108
157,158
157,159
166,167
166,168
182,183
182,184
184,185
184,186
209,210
209,211
210,211
210,212
217,218
217,219
235,236
235,237
251,252
251,253
256,257
256,258
264,265
264,266
265,266
265,267
272,273
272,274
291,292
291,293
299,300
299,301
306,307
306,308
314,315
314,316
-----guardedBy-----
221,233
224,232
239,249
238,248
277,289
276,288
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void_gdp_req_free(gdp_req_t **reqp){	gdp_req_t *req = *reqp;	if (req == NULL)		return;	// make sure the original pointer is invalid	*reqp = NULL;	ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl);	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);	if (req->state == GDP_REQ_FREE)	{		// req was freed after a reference was taken		return;	}	// remove the request from the channel subscription list	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))	{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}	// remove the request from the GCL list	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))	{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}	req->gcl = NULL;	// remove any pending events from the request	{		gdp_event_t *gev;		while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);	}	// free the associated PDU(s)	if (req->rpdu != NULL && req->rpdu != req->cpdu)		_gdp_pdu_free(req->rpdu);	if (req->cpdu != NULL)		_gdp_pdu_free(req->cpdu);	req->rpdu = req->cpdu = NULL;	// dereference the gcl	// (refcnt may be zero if called from _gdp_gcl_freehandle)	if (req->gcl != NULL && req->gcl->refcnt > 0)	{		_gdp_gcl_decref(&req->gcl);	}	req->state = GDP_REQ_FREE;	req->flags = 0;	req->md = NULL;	req->udata = NULL;	// add the empty request to the free list	ep_thr_mutex_lock(&ReqFreeListMutex);	LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);	NReqsAllocated--;	ep_thr_mutex_unlock(&ReqFreeListMutex);	_gdp_req_unlock(req);}
void
_gdp_req_free(gdp_req_t **reqp)
_gdp_req_free
gdp_req_t **reqp
gdp_req_t
gdp_req_t
**reqp
*
*
reqp
{	gdp_req_t *req = *reqp;	if (req == NULL)		return;	// make sure the original pointer is invalid	*reqp = NULL;	ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl);	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);	if (req->state == GDP_REQ_FREE)	{		// req was freed after a reference was taken		return;	}	// remove the request from the channel subscription list	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))	{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}	// remove the request from the GCL list	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))	{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}	req->gcl = NULL;	// remove any pending events from the request	{		gdp_event_t *gev;		while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);	}	// free the associated PDU(s)	if (req->rpdu != NULL && req->rpdu != req->cpdu)		_gdp_pdu_free(req->rpdu);	if (req->cpdu != NULL)		_gdp_pdu_free(req->cpdu);	req->rpdu = req->cpdu = NULL;	// dereference the gcl	// (refcnt may be zero if called from _gdp_gcl_freehandle)	if (req->gcl != NULL && req->gcl->refcnt > 0)	{		_gdp_gcl_decref(&req->gcl);	}	req->state = GDP_REQ_FREE;	req->flags = 0;	req->md = NULL;	req->udata = NULL;	// add the empty request to the free list	ep_thr_mutex_lock(&ReqFreeListMutex);	LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);	NReqsAllocated--;	ep_thr_mutex_unlock(&ReqFreeListMutex);	_gdp_req_unlock(req);}
gdp_req_t *req = *reqp;
gdp_req_t *req = *reqp;
gdp_req_t
gdp_req_t
*req = *reqp
*
req
= *reqp
*reqp
reqp
reqp
if (req == NULL)		return;
req == NULL
req
req
NULL
NULL
return;
*reqp = NULL;
*reqp = NULL
*reqp
reqp
reqp
NULL
NULL
ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl);
ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl)
ep_dbg_cprintf
ep_dbg_cprintf
Dbg
Dbg
48
"_gdp_req_free(%p)  state=%d, gcl=%p\n"
req
req
req->state
req
req
state
req->gcl
req
req
gcl
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex)
EP_THR_MUTEX_ASSERT_ISLOCKED
EP_THR_MUTEX_ASSERT_ISLOCKED
&req->mutex
req->mutex
req
req
mutex
if (req->state == GDP_REQ_FREE)	{		// req was freed after a reference was taken		return;	}
req->state == GDP_REQ_FREE
req->state
req
req
state
GDP_REQ_FREE
GDP_REQ_FREE
{		// req was freed after a reference was taken		return;	}
return;
if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))	{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}
EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)
EP_UT_BITSET
EP_UT_BITSET
GDP_REQ_ON_CHAN_LIST
GDP_REQ_ON_CHAN_LIST
req->flags
req
req
flags
{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}
ep_thr_mutex_lock(&req->chan->mutex);
ep_thr_mutex_lock(&req->chan->mutex)
ep_thr_mutex_lock
ep_thr_mutex_lock
&req->chan->mutex
req->chan->mutex
req->chan
req
req
chan
mutex
LIST_REMOVE(req, chanlist);
LIST_REMOVE(req, chanlist)
LIST_REMOVE
LIST_REMOVE
req
req
chanlist
chanlist
req->flags &= ~GDP_REQ_ON_CHAN_LIST;
req->flags &= ~GDP_REQ_ON_CHAN_LIST
req->flags
req
req
flags
~GDP_REQ_ON_CHAN_LIST
GDP_REQ_ON_CHAN_LIST
GDP_REQ_ON_CHAN_LIST
ep_thr_mutex_unlock(&req->chan->mutex);
ep_thr_mutex_unlock(&req->chan->mutex)
ep_thr_mutex_unlock
ep_thr_mutex_unlock
&req->chan->mutex
req->chan->mutex
req->chan
req
req
chan
mutex
if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))	{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}
EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)
EP_UT_BITSET
EP_UT_BITSET
GDP_REQ_ON_GCL_LIST
GDP_REQ_ON_GCL_LIST
req->flags
req
req
flags
{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}
EP_ASSERT_ELSE(req->gcl != NULL, return);
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex)
EP_THR_MUTEX_ASSERT_ISLOCKED
EP_THR_MUTEX_ASSERT_ISLOCKED
&req->gcl->mutex
req->gcl->mutex
req->gcl
req
req
gcl
mutex
LIST_REMOVE(req, gcllist);
LIST_REMOVE(req, gcllist)
LIST_REMOVE
LIST_REMOVE
req
req
gcllist
gcllist
req->flags &= ~GDP_REQ_ON_GCL_LIST;
req->flags &= ~GDP_REQ_ON_GCL_LIST
req->flags
req
req
flags
~GDP_REQ_ON_GCL_LIST
GDP_REQ_ON_GCL_LIST
GDP_REQ_ON_GCL_LIST
req->gcl = NULL;
req->gcl = NULL
req->gcl
req
req
gcl
NULL
NULL
{		gdp_event_t *gev;		while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);	}
gdp_event_t *gev;
gdp_event_t *gev;
gdp_event_t
gdp_event_t
*gev
*
gev
while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);
(gev = STAILQ_FIRST(&req->events)) != NULL
(gev = STAILQ_FIRST(&req->events))
gev = STAILQ_FIRST(&req->events)
gev
gev
STAILQ_FIRST(&req->events)
STAILQ_FIRST
STAILQ_FIRST
&req->events
req->events
req
req
events
NULL
NULL
STAILQ_REMOVE_HEAD(&req->events, queue);
STAILQ_REMOVE_HEAD(&req->events, queue)
STAILQ_REMOVE_HEAD
STAILQ_REMOVE_HEAD
&req->events
req->events
req
req
events
queue
queue
if (req->rpdu != NULL && req->rpdu != req->cpdu)		_gdp_pdu_free(req->rpdu);
req->rpdu != NULL && req->rpdu != req->cpdu
req->rpdu != NULL
req->rpdu
req
req
rpdu
NULL
NULL
req->rpdu != req->cpdu
req->rpdu
req
req
rpdu
req->cpdu
req
req
cpdu
_gdp_pdu_free(req->rpdu);
_gdp_pdu_free(req->rpdu)
_gdp_pdu_free
_gdp_pdu_free
req->rpdu
req
req
rpdu
if (req->cpdu != NULL)		_gdp_pdu_free(req->cpdu);
req->cpdu != NULL
req->cpdu
req
req
cpdu
NULL
NULL
_gdp_pdu_free(req->cpdu);
_gdp_pdu_free(req->cpdu)
_gdp_pdu_free
_gdp_pdu_free
req->cpdu
req
req
cpdu
req->rpdu = req->cpdu = NULL;
req->rpdu = req->cpdu = NULL
req->rpdu
req
req
rpdu
req->cpdu = NULL
req->cpdu
req
req
cpdu
NULL
NULL
if (req->gcl != NULL && req->gcl->refcnt > 0)	{		_gdp_gcl_decref(&req->gcl);	}
req->gcl != NULL && req->gcl->refcnt > 0
req->gcl != NULL
req->gcl
req
req
gcl
NULL
NULL
req->gcl->refcnt > 0
req->gcl->refcnt
req->gcl
req
req
gcl
refcnt
0
{		_gdp_gcl_decref(&req->gcl);	}
_gdp_gcl_decref(&req->gcl);
_gdp_gcl_decref(&req->gcl)
_gdp_gcl_decref
_gdp_gcl_decref
&req->gcl
req->gcl
req
req
gcl
req->state = GDP_REQ_FREE;
req->state = GDP_REQ_FREE
req->state
req
req
state
GDP_REQ_FREE
GDP_REQ_FREE
req->flags = 0;
req->flags = 0
req->flags
req
req
flags
0
req->md = NULL;
req->md = NULL
req->md
req
req
md
NULL
NULL
req->udata = NULL;
req->udata = NULL
req->udata
req
req
udata
NULL
NULL
ep_thr_mutex_lock(&ReqFreeListMutex);
ep_thr_mutex_lock(&ReqFreeListMutex);
ep_thr_mutex_lock
ep_thr_mutex_lock
(&ReqFreeListMutex)
&ReqFreeListMutex
&
ReqFreeListMutex
LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);
LIST_INSERT_HEAD(&ReqFreeList, req, gcllist)
LIST_INSERT_HEAD
LIST_INSERT_HEAD
&ReqFreeList
ReqFreeList
ReqFreeList
req
req
gcllist
gcllist
NReqsAllocated--;
NReqsAllocated--
NReqsAllocated
NReqsAllocated
ep_thr_mutex_unlock(&ReqFreeListMutex);
ep_thr_mutex_unlock(&ReqFreeListMutex)
ep_thr_mutex_unlock
ep_thr_mutex_unlock
&ReqFreeListMutex
ReqFreeListMutex
ReqFreeListMutex
_gdp_req_unlock(req);
_gdp_req_unlock(req)
_gdp_req_unlock
_gdp_req_unlock
req
req
-----joern-----
(189,35,0)
(139,117,0)
(19,7,0)
(177,85,0)
(20,171,0)
(172,43,0)
(180,94,0)
(91,117,0)
(14,70,0)
(118,149,0)
(158,36,0)
(73,35,0)
(125,199,0)
(80,194,0)
(63,202,0)
(23,21,0)
(105,35,0)
(131,37,0)
(42,176,0)
(75,170,0)
(138,199,0)
(156,16,0)
(77,187,0)
(159,100,0)
(102,36,0)
(135,35,0)
(171,199,0)
(53,35,0)
(179,199,0)
(24,55,0)
(201,174,0)
(94,199,0)
(96,72,0)
(54,36,0)
(123,86,0)
(162,72,0)
(187,199,0)
(95,146,0)
(170,35,0)
(60,122,0)
(53,199,0)
(165,124,0)
(174,199,0)
(28,35,0)
(66,3,0)
(15,28,0)
(202,175,0)
(36,199,0)
(38,55,0)
(181,35,0)
(107,185,0)
(204,24,0)
(74,187,0)
(4,9,0)
(183,199,0)
(166,171,0)
(51,123,0)
(148,173,0)
(176,199,0)
(38,98,0)
(22,23,0)
(164,181,0)
(192,199,0)
(78,145,0)
(137,169,0)
(101,46,0)
(157,54,0)
(103,79,0)
(106,179,0)
(151,30,0)
(202,199,0)
(160,16,0)
(85,35,0)
(183,35,0)
(97,146,0)
(196,53,0)
(206,185,0)
(134,69,0)
(198,85,0)
(154,75,0)
(25,173,0)
(173,25,0)
(100,62,0)
(11,46,0)
(64,104,0)
(94,48,0)
(3,91,0)
(79,35,0)
(98,38,0)
(88,25,0)
(32,198,0)
(101,199,0)
(31,80,0)
(71,110,0)
(178,173,0)
(24,199,0)
(112,187,0)
(169,110,0)
(152,165,0)
(187,74,0)
(67,23,0)
(86,123,0)
(75,199,0)
(203,138,0)
(115,202,0)
(153,119,0)
(90,190,0)
(195,35,0)
(60,110,0)
(136,141,0)
(69,199,0)
(122,175,0)
(16,160,0)
(190,199,0)
(19,191,0)
(155,175,0)
(62,100,0)
(156,199,0)
(40,37,0)
(121,101,0)
(176,30,0)
(41,24,0)
(142,35,0)
(65,198,0)
(119,35,0)
(81,124,0)
(194,80,0)
(118,54,0)
(70,137,0)
(133,183,0)
(3,66,0)
(56,123,0)
(55,24,0)
(181,199,0)
(16,156,0)
(82,48,0)
(12,125,0)
(96,11,0)
(108,62,0)
(197,190,0)
(61,53,0)
(33,71,0)
(104,64,0)
(7,19,0)
(129,160,0)
(147,141,0)
(54,118,0)
(163,6,0)
(123,199,0)
(179,85,0)
(26,43,0)
(185,206,0)
(100,199,0)
(168,81,0)
(10,156,0)
(21,35,0)
(34,44,0)
(43,199,0)
(130,35,0)
(15,192,0)
(29,192,0)
(192,15,0)
(46,101,0)
(53,61,0)
(43,110,0)
(45,138,0)
(57,117,0)
(161,183,0)
(21,30,0)
(184,133,0)
(46,11,0)
(59,111,0)
(117,91,0)
(188,95,0)
(149,146,0)
(37,35,0)
(175,122,0)
(52,120,0)
(140,97,0)
(120,125,0)
(33,199,0)
(127,75,0)
(173,199,0)
(111,97,0)
(58,98,0)
(48,35,0)
(199,81,0)
(0,35,0)
(144,100,0)
(87,35,0)
(17,197,0)
(34,163,0)
(175,202,0)
(39,79,0)
(91,3,0)
(149,118,0)
(199,35,0)
(137,70,0)
(165,105,0)
(183,174,0)
(205,176,0)
(113,40,0)
(193,192,0)
(116,156,0)
(206,35,0)
(99,174,0)
(71,33,0)
(64,199,0)
(72,96,0)
(174,183,0)
(198,199,0)
(91,141,0)
(55,38,0)
(145,35,0)
(27,111,0)
(200,33,0)
(117,199,0)
(47,170,0)
(132,179,0)
(109,125,0)
(50,105,0)
(23,199,0)
(9,199,0)
(126,9,0)
(182,53,0)
(97,111,0)
(150,199,0)
(111,199,0)
(141,91,0)
(114,66,0)
(81,199,0)
(18,104,0)
(171,66,0)
(138,119,0)
(122,60,0)
(28,15,0)
(7,179,0)
(76,71,0)
(128,64,0)
(84,183,0)
(93,55,0)
(194,35,0)
(66,171,0)
(190,197,0)
(183,133,0)
(133,199,0)
(169,137,0)
(125,120,0)
(179,7,0)
(62,98,0)
(100,85,0)
(40,199,0)
(68,69,0)
(98,62,0)
(92,61,0)
(5,101,0)
(30,21,0)
(83,40,0)
(11,96,0)
(49,133,0)
(95,199,0)
(24,85,0)
(2,64,0)
(167,94,0)
(89,183,0)
(8,96,0)
(36,54,0)
(141,199,0)
(69,70,0)
(186,190,0)
(143,95,0)
(13,183,0)
(70,69,0)
(1,33,0)
(138,45,1)
(175,202,1)
(31,145,1)
(36,199,1)
(85,177,1)
(121,8,1)
(167,180,1)
(28,15,1)
(15,192,1)
(176,199,1)
(117,57,1)
(205,23,1)
(7,179,1)
(192,193,1)
(94,199,1)
(12,109,1)
(202,199,1)
(57,139,1)
(99,133,1)
(97,140,1)
(120,125,1)
(174,201,1)
(48,82,1)
(123,199,1)
(89,84,1)
(105,50,1)
(193,29,1)
(155,202,1)
(45,203,1)
(42,205,1)
(118,54,1)
(9,199,1)
(25,173,1)
(64,199,1)
(43,199,1)
(71,76,1)
(24,85,1)
(21,30,1)
(70,69,1)
(64,2,1)
(169,137,1)
(186,17,1)
(55,24,1)
(173,148,1)
(69,68,1)
(197,190,1)
(54,36,1)
(184,49,1)
(97,111,1)
(83,113,1)
(86,123,1)
(23,67,1)
(59,95,1)
(69,199,1)
(179,106,1)
(75,199,1)
(171,166,1)
(50,165,1)
(47,75,1)
(154,38,1)
(165,152,1)
(91,141,1)
(33,200,1)
(96,11,1)
(125,199,1)
(4,199,1)
(141,147,1)
(140,111,1)
(185,107,1)
(53,196,1)
(2,128,1)
(80,31,1)
(133,184,1)
(168,150,1)
(160,16,1)
(104,64,1)
(66,114,1)
(81,168,1)
(37,131,1)
(109,3,1)
(201,99,1)
(10,116,1)
(11,46,1)
(8,85,1)
(171,199,1)
(134,197,1)
(24,41,1)
(44,9,1)
(81,124,1)
(194,80,1)
(22,74,1)
(95,188,1)
(1,43,1)
(27,59,1)
(115,63,1)
(136,66,1)
(137,70,1)
(94,167,1)
(71,33,1)
(51,56,1)
(100,144,1)
(152,9,1)
(192,199,1)
(181,164,1)
(153,138,1)
(116,72,1)
(164,194,1)
(128,28,1)
(32,97,1)
(8,160,1)
(183,199,1)
(183,174,1)
(163,104,1)
(108,100,1)
(14,69,1)
(70,14,1)
(170,47,1)
(179,85,1)
(188,143,1)
(72,96,1)
(175,155,1)
(113,119,1)
(92,206,1)
(36,102,1)
(123,51,1)
(190,199,1)
(202,115,1)
(88,60,1)
(100,199,1)
(133,199,1)
(119,153,1)
(196,182,1)
(154,19,1)
(148,178,1)
(3,66,1)
(84,161,1)
(132,38,1)
(158,25,1)
(144,159,1)
(9,126,1)
(200,1,1)
(38,98,1)
(126,4,1)
(16,156,1)
(131,40,1)
(76,33,1)
(98,62,1)
(143,149,1)
(43,172,1)
(166,20,1)
(62,108,1)
(199,81,1)
(3,91,1)
(66,171,1)
(40,83,1)
(104,18,1)
(90,186,1)
(23,199,1)
(176,42,1)
(180,37,1)
(141,199,1)
(162,96,1)
(75,127,1)
(20,72,1)
(139,141,1)
(18,64,1)
(182,61,1)
(178,88,1)
(177,198,1)
(187,199,1)
(52,125,1)
(190,90,1)
(19,7,1)
(82,94,1)
(41,204,1)
(160,129,1)
(34,163,1)
(24,199,1)
(101,199,1)
(203,170,1)
(34,181,1)
(179,199,1)
(26,169,1)
(34,44,1)
(33,199,1)
(172,26,1)
(183,133,1)
(149,118,1)
(5,121,1)
(40,199,1)
(174,199,1)
(101,5,1)
(78,53,1)
(98,58,1)
(17,104,1)
(125,12,1)
(151,176,1)
(181,199,1)
(68,134,1)
(63,71,1)
(129,16,1)
(187,77,1)
(165,124,1)
(56,3,1)
(60,122,1)
(62,100,1)
(102,158,1)
(120,52,1)
(100,85,1)
(22,120,1)
(49,89,1)
(112,120,1)
(156,199,1)
(30,151,1)
(114,171,1)
(74,187,1)
(117,199,1)
(54,157,1)
(95,199,1)
(88,197,1)
(13,105,1)
(161,13,1)
(127,154,1)
(156,10,1)
(61,92,1)
(67,22,1)
(53,199,1)
(138,199,1)
(65,32,1)
(77,112,1)
(32,25,1)
(122,175,1)
(93,24,1)
(107,48,1)
(173,199,1)
(204,21,1)
(109,86,1)
(72,162,1)
(157,36,1)
(111,27,1)
(206,185,1)
(91,117,1)
(198,65,1)
(145,78,1)
(29,183,1)
(46,101,1)
(147,136,1)
(38,55,1)
(58,62,1)
(198,199,1)
(53,61,1)
(111,199,1)
(106,132,1)
(55,93,1)
(159,55,1)
(82,104,2)
(59,25,2)
(129,72,2)
(122,197,2)
(21,104,2)
(34,44,2)
(93,104,2)
(78,104,2)
(77,120,2)
(91,117,2)
(166,104,2)
(177,104,2)
(187,199,2)
(106,38,2)
(181,104,2)
(152,9,2)
(86,3,2)
(45,104,2)
(36,199,2)
(11,104,2)
(68,197,2)
(95,199,2)
(108,55,2)
(197,104,2)
(179,199,2)
(30,104,2)
(141,66,2)
(3,91,2)
(62,55,2)
(54,25,2)
(70,197,2)
(29,9,2)
(180,104,2)
(5,104,2)
(99,9,2)
(179,38,2)
(194,80,2)
(46,101,2)
(187,120,2)
(8,104,2)
(33,199,2)
(138,104,2)
(197,190,2)
(192,9,2)
(204,104,2)
(165,9,2)
(19,7,2)
(147,66,2)
(91,66,2)
(7,179,2)
(132,38,2)
(145,104,2)
(169,197,2)
(60,122,2)
(137,197,2)
(89,9,2)
(170,104,2)
(183,174,2)
(143,25,2)
(102,25,2)
(96,104,2)
(123,199,2)
(12,104,2)
(88,104,2)
(125,199,2)
(32,104,2)
(65,104,2)
(151,104,2)
(120,104,2)
(36,25,2)
(144,55,2)
(46,72,2)
(17,104,2)
(173,199,2)
(55,104,2)
(86,123,2)
(8,72,2)
(28,15,2)
(1,197,2)
(16,72,2)
(91,141,2)
(13,9,2)
(198,199,2)
(125,104,2)
(139,66,2)
(53,199,2)
(165,124,2)
(100,85,2)
(61,104,2)
(188,25,2)
(10,72,2)
(172,197,2)
(24,199,2)
(26,197,2)
(160,16,2)
(119,104,2)
(50,9,2)
(137,70,2)
(175,202,2)
(54,36,2)
(202,199,2)
(162,104,2)
(154,104,2)
(206,185,2)
(95,25,2)
(27,25,2)
(34,163,2)
(148,104,2)
(101,199,2)
(23,104,2)
(178,104,2)
(62,100,2)
(97,111,2)
(190,199,2)
(193,9,2)
(49,9,2)
(175,197,2)
(183,133,2)
(3,66,2)
(31,104,2)
(111,25,2)
(71,33,2)
(37,104,2)
(133,199,2)
(21,30,2)
(138,199,2)
(9,199,2)
(140,25,2)
(44,9,2)
(111,199,2)
(47,104,2)
(5,72,2)
(117,66,2)
(202,197,2)
(141,199,2)
(43,197,2)
(122,175,2)
(131,104,2)
(192,199,2)
(156,72,2)
(11,46,2)
(183,199,2)
(22,104,2)
(55,24,2)
(40,199,2)
(160,72,2)
(182,104,2)
(25,173,2)
(53,104,2)
(56,3,2)
(173,104,2)
(163,104,2)
(96,11,2)
(15,9,2)
(115,197,2)
(203,104,2)
(98,62,2)
(66,171,2)
(174,9,2)
(53,61,2)
(134,197,2)
(183,9,2)
(159,55,2)
(57,66,2)
(52,104,2)
(185,104,2)
(190,104,2)
(84,9,2)
(64,9,2)
(18,9,2)
(60,197,2)
(176,199,2)
(186,104,2)
(157,25,2)
(16,156,2)
(76,197,2)
(194,104,2)
(85,104,2)
(101,104,2)
(33,197,2)
(74,120,2)
(63,197,2)
(24,85,2)
(2,9,2)
(113,104,2)
(101,72,2)
(169,137,2)
(105,9,2)
(205,104,2)
(28,9,2)
(83,104,2)
(184,9,2)
(94,199,2)
(162,72,2)
(98,55,2)
(121,72,2)
(198,104,2)
(75,199,2)
(121,104,2)
(116,72,2)
(199,81,2)
(25,104,2)
(70,69,2)
(72,96,2)
(24,104,2)
(90,104,2)
(41,104,2)
(64,199,2)
(92,104,2)
(201,9,2)
(153,104,2)
(117,199,2)
(38,98,2)
(46,104,2)
(128,9,2)
(200,197,2)
(136,66,2)
(97,25,2)
(100,199,2)
(94,104,2)
(69,199,2)
(66,104,2)
(72,72,2)
(114,104,2)
(3,104,2)
(23,199,2)
(96,72,2)
(19,38,2)
(69,197,2)
(80,104,2)
(38,55,2)
(104,9,2)
(171,104,2)
(174,199,2)
(72,104,2)
(133,9,2)
(15,192,2)
(109,104,2)
(20,104,2)
(149,25,2)
(179,85,2)
(104,64,2)
(74,187,2)
(7,38,2)
(81,124,2)
(100,55,2)
(38,104,2)
(107,104,2)
(196,104,2)
(75,104,2)
(112,120,2)
(43,199,2)
(123,3,2)
(155,197,2)
(71,197,2)
(118,54,2)
(51,3,2)
(127,104,2)
(42,104,2)
(149,118,2)
(14,197,2)
(164,104,2)
(120,125,2)
(181,199,2)
(161,9,2)
(206,104,2)
(176,104,2)
(11,72,2)
(48,104,2)
(158,25,2)
(58,55,2)
(171,199,2)
(40,104,2)
(118,25,2)
(156,199,2)
(167,104,2)
(67,104,2)
-----------------------------------
(0,if (req->state == GDP_REQ_FREE)
(1,req)
(2,state)
(3,req->rpdu != NULL && req->rpdu != req->cpdu)
(4,req)
(5,events)
(6,)
(7,&req->gcl)
(8,gev)
(9,req == NULL)
(10,events)
(11,STAILQ_FIRST(&req->events)
(12,cpdu)
(13,Dbg)
(14,mutex)
(15,&req->mutex)
(16,&req->events)
(17,GDP_REQ_ON_CHAN_LIST)
(18,GDP_REQ_FREE)
(19,_gdp_gcl_decref(&req->gcl)
(20,req)
(21,req->rpdu = req->cpdu = NULL)
(22,req)
(23,req->rpdu)
(24,req->gcl)
(25,EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)
(26,req)
(27,flags)
(28,EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex)
(29,req)
(30,req->cpdu = NULL)
(31,ReqFreeListMutex)
(32,req)
(33,req->flags)
(34,RET)
(35,)
(36,req->gcl)
(37,req->md = NULL)
(38,req->gcl != NULL && req->gcl->refcnt > 0)
(39,while ((gev = STAILQ_FIRST(&req->events)
(40,req->md)
(41,gcl)
(42,cpdu)
(43,LIST_REMOVE(req, chanlist)
(44,return;)
(45,flags)
(46,&req->events)
(47,GDP_REQ_FREE)
(48,req->udata = NULL)
(49,req)
(50,NULL)
(51,rpdu)
(52,NULL)
(53,LIST_INSERT_HEAD(&ReqFreeList, req, gcllist)
(54,req->gcl->mutex)
(55,req->gcl != NULL)
(56,req)
(57,cpdu)
(58,0)
(59,req)
(60,ep_thr_mutex_unlock(&req->chan->mutex)
(61,&ReqFreeList)
(62,req->gcl->refcnt)
(63,req)
(64,req->state)
(65,gcl)
(66,req->rpdu != NULL)
(67,rpdu)
(68,chan)
(69,req->chan)
(70,req->chan->mutex)
(71,req->flags &= ~GDP_REQ_ON_CHAN_LIST)
(72,(gev = STAILQ_FIRST(&req->events)
(73,if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)
(74,_gdp_pdu_free(req->cpdu)
(75,req->state)
(76,~GDP_REQ_ON_CHAN_LIST)
(77,cpdu)
(78,NReqsAllocated)
(79,)
(80,&ReqFreeListMutex)
(81,*reqp)
(82,NULL)
(83,md)
(84,"_gdp_req_free(%p)
(85,req->gcl = NULL)
(86,_gdp_pdu_free(req->rpdu)
(87,if (req->rpdu != NULL && req->rpdu != req->cpdu)
(88,GDP_REQ_ON_GCL_LIST)
(89,req)
(90,flags)
(91,req->rpdu != req->cpdu)
(92,ReqFreeList)
(93,NULL)
(94,req->udata)
(95,LIST_REMOVE(req, gcllist)
(96,gev = STAILQ_FIRST(&req->events)
(97,req->flags &= ~GDP_REQ_ON_GCL_LIST)
(98,req->gcl->refcnt > 0)
(99,req)
(100,req->gcl)
(101,req->events)
(102,gcl)
(103,gev)
(104,req->state == GDP_REQ_FREE)
(105,*reqp = NULL)
(106,gcl)
(107,ReqFreeListMutex)
(108,refcnt)
(109,req)
(110,)
(111,req->flags)
(112,req)
(113,req)
(114,NULL)
(115,chan)
(116,req)
(117,req->cpdu)
(118,&req->gcl->mutex)
(119,req->flags = 0)
(120,req->cpdu != NULL)
(121,req)
(122,&req->chan->mutex)
(123,req->rpdu)
(124,gdp_req_t **reqp)
(125,req->cpdu)
(126,NULL)
(127,state)
(128,req)
(129,queue)
(130,if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)
(131,NULL)
(132,req)
(133,req->state)
(134,req)
(135,req)
(136,req)
(137,&req->chan->mutex)
(138,req->flags)
(139,req)
(140,~GDP_REQ_ON_GCL_LIST)
(141,req->rpdu)
(142,if (req->gcl != NULL && req->gcl->refcnt > 0)
(143,req)
(144,gcl)
(145,NReqsAllocated--)
(146,)
(147,rpdu)
(148,flags)
(149,EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex)
(150,req)
(151,NULL)
(152,reqp)
(153,0)
(154,req)
(155,mutex)
(156,req->events)
(157,mutex)
(158,req)
(159,req)
(160,STAILQ_REMOVE_HEAD(&req->events, queue)
(161,48)
(162,NULL)
(163,return;)
(164,req)
(165,*reqp)
(166,rpdu)
(167,udata)
(168,reqp)
(169,ep_thr_mutex_lock(&req->chan->mutex)
(170,req->state = GDP_REQ_FREE)
(171,req->rpdu)
(172,chanlist)
(173,req->flags)
(174,req->gcl)
(175,req->chan->mutex)
(176,req->cpdu)
(177,NULL)
(178,req)
(179,req->gcl)
(180,req)
(181,_gdp_req_unlock(req)
(182,req)
(183,ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)
(184,state)
(185,&ReqFreeListMutex)
(186,req)
(187,req->cpdu)
(188,gcllist)
(189,if (req->cpdu != NULL)
(190,req->flags)
(191,)
(192,req->mutex)
(193,mutex)
(194,ep_thr_mutex_unlock(&ReqFreeListMutex)
(195,if (req == NULL)
(196,gcllist)
(197,EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)
(198,req->gcl)
(199,*req = *reqp)
(200,flags)
(201,gcl)
(202,req->chan)
(203,req)
(204,req)
(205,req)
(206,ep_thr_mutex_lock(&ReqFreeListMutex)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^