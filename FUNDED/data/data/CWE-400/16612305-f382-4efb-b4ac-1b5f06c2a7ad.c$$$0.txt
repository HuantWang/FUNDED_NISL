-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticFive==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,32,33,37,38,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
35,36
35,37
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(32,44,0)
(3,6,0)
(2,55,0)
(36,28,0)
(32,9,0)
(54,50,0)
(6,4,0)
(44,22,0)
(25,6,0)
(14,22,0)
(32,55,0)
(10,32,0)
(0,45,0)
(45,0,0)
(56,37,0)
(7,16,0)
(29,4,0)
(37,56,0)
(32,15,0)
(8,46,0)
(45,55,0)
(42,33,0)
(29,6,0)
(25,4,0)
(11,0,0)
(23,49,0)
(53,54,0)
(55,12,0)
(30,15,0)
(45,44,0)
(9,32,0)
(56,6,0)
(1,21,0)
(41,55,0)
(13,44,0)
(52,22,0)
(27,38,0)
(28,6,0)
(33,6,0)
(17,16,0)
(9,56,0)
(49,35,0)
(56,9,0)
(48,25,0)
(46,26,0)
(15,32,0)
(19,4,0)
(47,33,0)
(6,56,0)
(31,22,0)
(21,1,0)
(5,28,0)
(24,45,0)
(51,54,0)
(43,44,0)
(21,39,0)
(33,4,0)
(20,38,0)
(40,1,0)
(18,29,0)
(10,3,1)
(45,0,1)
(7,17,1)
(34,16,1)
(33,42,1)
(47,28,1)
(45,44,1)
(36,6,1)
(6,56,1)
(34,29,1)
(30,10,1)
(25,48,1)
(43,13,1)
(49,23,1)
(5,36,1)
(47,21,1)
(44,43,1)
(46,8,1)
(29,6,1)
(29,18,1)
(38,27,1)
(28,6,1)
(0,11,1)
(42,47,1)
(25,6,1)
(33,6,1)
(56,9,1)
(21,1,1)
(20,44,1)
(45,55,1)
(15,30,1)
(27,20,1)
(17,46,1)
(28,5,1)
(23,45,1)
(8,38,1)
(41,2,1)
(48,33,1)
(9,32,1)
(24,16,1)
(34,49,1)
(16,7,1)
(1,40,1)
(11,24,1)
(56,37,1)
(32,44,1)
(55,41,1)
(18,25,1)
(32,15,1)
(40,28,1)
(3,45,1)
(17,55,1)
(2,38,1)
(32,55,1)
(18,45,2)
(8,38,2)
(3,45,2)
(6,56,2)
(45,0,2)
(21,1,2)
(1,28,2)
(28,6,2)
(11,16,2)
(56,37,2)
(33,6,2)
(6,45,2)
(28,45,2)
(56,45,2)
(0,16,2)
(32,45,2)
(32,44,2)
(40,28,2)
(9,32,2)
(56,9,2)
(29,6,2)
(36,45,2)
(48,45,2)
(2,38,2)
(21,28,2)
(55,38,2)
(15,45,2)
(29,45,2)
(9,45,2)
(23,45,2)
(45,44,2)
(46,38,2)
(32,15,2)
(47,45,2)
(42,45,2)
(33,45,2)
(45,16,2)
(45,55,2)
(25,45,2)
(30,45,2)
(32,55,2)
(25,6,2)
(41,38,2)
(10,45,2)
(49,45,2)
(5,45,2)
(24,16,2)
-----------------------------------
(0,wcslen(HELLO_STRING)
(1,-1)
(2,data)
(3,myString)
(4,)
(5,NULL)
(6,myString = (wchar_t *)
(7,5)
(8,"Benign, fixed string")
(9,malloc(data*sizeof(wchar_t)
(10,data)
(11,HELLO_STRING)
(12,)
(13,data)
(14,data)
(15,sizeof(wchar_t)
(16,staticFive==5)
(17,staticFive)
(18,myString)
(19,if (myString == NULL)
(20,staticFive)
(21,exit(-1)
(22,)
(23,"Input is less than the length of the source string")
(24,data)
(25,printWLine(myString)
(26,)
(27,5)
(28,myString == NULL)
(29,free(myString)
(30,wchar_t)
(31,if(staticFive!=5)
(32,data*sizeof(wchar_t)
(33,wcscpy(myString, HELLO_STRING)
(34,RET)
(35,)
(36,myString)
(37,wchar_t *)
(38,staticFive!=5)
(39,)
(40,1)
(41,20)
(42,HELLO_STRING)
(43,0)
(44,data = 0)
(45,data > wcslen(HELLO_STRING)
(46,printLine("Benign, fixed string")
(47,myString)
(48,myString)
(49,printLine("Input is less than the length of the source string")
(50,)
(51,myString)
(52,if(staticFive==5)
(53,if (data > wcslen(HELLO_STRING)
(54,)
(55,data = 20)
(56,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^