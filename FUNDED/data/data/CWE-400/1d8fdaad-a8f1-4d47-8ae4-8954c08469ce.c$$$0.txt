-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    data = NULL;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
20,21
21,22
22,23
22,24
23,24
26,27
26,28
26,29
27,28
28,29
28,30
29,30
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
58,60
60,61
-----nextToken-----
2,4,8,10,11,15,17,19,24,25,30,33,35,38,40,43,44,48,50,51,55,57,59,61
-----computeFrom-----
13,14
13,15
28,29
28,30
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    char * data;    data = NULL;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    char * data;    data = NULL;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,10,0)
(3,5,0)
(16,6,0)
(6,10,0)
(14,8,0)
(5,22,0)
(4,22,0)
(19,10,0)
(10,6,0)
(11,20,0)
(0,8,0)
(26,8,0)
(20,18,0)
(23,19,0)
(17,14,0)
(19,23,0)
(13,4,0)
(23,9,0)
(9,23,0)
(10,19,0)
(25,8,0)
(7,9,0)
(6,22,0)
(15,5,0)
(2,14,0)
(10,1,0)
(4,6,0)
(5,6,0)
(12,23,0)
(2,17,1)
(3,15,1)
(20,11,1)
(5,3,1)
(15,6,1)
(4,13,1)
(16,21,1)
(24,4,1)
(10,19,1)
(10,1,1)
(13,5,1)
(23,9,1)
(27,24,1)
(9,7,1)
(6,10,1)
(7,12,1)
(14,2,1)
(21,14,1)
(19,23,1)
(5,6,1)
(4,6,1)
(12,16,1)
(11,21,1)
(24,20,1)
(13,21,2)
(4,6,2)
(9,21,2)
(12,21,2)
(23,21,2)
(7,21,2)
(16,21,2)
(5,6,2)
(5,21,2)
(6,21,2)
(20,21,2)
(11,21,2)
(19,21,2)
(10,19,2)
(10,21,2)
(10,1,2)
(19,23,2)
(15,21,2)
(6,10,2)
(23,9,2)
(4,21,2)
(3,21,2)
-----------------------------------
(0,if(0)
(1,char *)
(2,NULL)
(3,"A String")
(4,printLine(data)
(5,strcpy(data, "A String")
(6,data = (char *)
(7,char)
(8,)
(9,sizeof(char)
(10,(char *)
(11,"Benign, fixed string")
(12,100)
(13,data)
(14,data = NULL)
(15,data)
(16,data)
(17,data)
(18,)
(19,ALLOCA(100*sizeof(char)
(20,printLine("Benign, fixed string")
(21,0)
(22,)
(23,100*sizeof(char)
(24,1)
(25,data)
(26,if(1)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^