-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink(size_t * dataPtr){    size_t data = *dataPtr;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(16,35,0)
(26,22,0)
(11,2,0)
(1,11,0)
(36,22,0)
(27,15,0)
(15,10,0)
(18,32,0)
(28,36,0)
(42,30,0)
(8,26,0)
(24,4,0)
(10,2,0)
(35,31,0)
(10,15,0)
(16,17,0)
(15,22,0)
(0,18,0)
(42,19,0)
(2,11,0)
(18,22,0)
(14,4,0)
(6,32,0)
(4,24,0)
(33,26,0)
(4,16,0)
(2,10,0)
(35,16,0)
(7,6,0)
(2,16,0)
(5,35,0)
(37,36,0)
(13,32,0)
(23,21,0)
(15,27,0)
(19,42,0)
(29,16,0)
(41,22,0)
(36,32,0)
(40,2,0)
(6,22,0)
(22,15,0)
(3,19,0)
(38,12,0)
(25,23,0)
(22,32,0)
(20,17,0)
(12,17,0)
(34,12,0)
(9,24,0)
(2,11,1)
(40,41,1)
(22,15,1)
(35,5,1)
(6,22,1)
(18,0,1)
(36,22,1)
(2,16,1)
(28,37,1)
(36,28,1)
(25,4,1)
(9,14,1)
(8,22,1)
(4,16,1)
(1,40,1)
(15,10,1)
(39,6,1)
(15,27,1)
(4,24,1)
(35,31,1)
(26,33,1)
(0,36,1)
(5,29,1)
(37,26,1)
(18,22,1)
(37,42,1)
(26,22,1)
(16,35,1)
(19,3,1)
(33,8,1)
(42,19,1)
(23,25,1)
(24,9,1)
(7,18,1)
(11,1,1)
(41,4,1)
(14,16,1)
(6,7,1)
(10,2,1)
(39,23,1)
(3,26,1)
(42,26,2)
(6,22,2)
(15,10,2)
(35,31,2)
(19,26,2)
(22,4,2)
(26,22,2)
(36,4,2)
(33,4,2)
(6,4,2)
(40,4,2)
(8,4,2)
(4,16,2)
(0,4,2)
(41,4,2)
(2,11,2)
(15,4,2)
(3,26,2)
(37,4,2)
(42,19,2)
(2,4,2)
(36,22,2)
(25,4,2)
(10,2,2)
(18,22,2)
(11,4,2)
(23,4,2)
(15,27,2)
(4,24,2)
(22,15,2)
(16,35,2)
(26,4,2)
(28,4,2)
(18,4,2)
(1,4,2)
(2,16,2)
(7,4,2)
(10,4,2)
-----------------------------------
(0,myString)
(1,char)
(2,data*sizeof(char)
(3,1)
(4,data > strlen(HELLO_STRING)
(5,dataPtr)
(6,free(myString)
(7,myString)
(8,myString)
(9,HELLO_STRING)
(10,malloc(data*sizeof(char)
(11,sizeof(char)
(12,)
(13,if (myString == NULL)
(14,data)
(15,(char *)
(16,data = *dataPtr)
(17,)
(18,printLine(myString)
(19,-1)
(20,data)
(21,)
(22,myString = (char *)
(23,printLine("Input is less than the length of the source string")
(24,strlen(HELLO_STRING)
(25,"Input is less than the length of the source string")
(26,myString == NULL)
(27,char *)
(28,HELLO_STRING)
(29,data)
(30,)
(31,size_t * dataPtr)
(32,)
(33,NULL)
(34,myString)
(35,*dataPtr)
(36,strcpy(myString, HELLO_STRING)
(37,myString)
(38,if (data > strlen(HELLO_STRING)
(39,RET)
(40,data)
(41,myString)
(42,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^