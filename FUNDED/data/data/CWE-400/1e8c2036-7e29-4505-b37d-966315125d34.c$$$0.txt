-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,73,75
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(16,17,0)
(10,21,0)
(19,32,0)
(27,7,0)
(26,32,0)
(35,5,0)
(31,22,0)
(18,12,0)
(9,32,0)
(24,18,0)
(34,23,0)
(35,0,0)
(13,5,0)
(5,18,0)
(8,11,0)
(23,17,0)
(23,5,0)
(2,6,0)
(25,1,0)
(21,32,0)
(12,14,0)
(14,12,0)
(12,18,0)
(22,5,0)
(5,17,0)
(2,11,0)
(7,5,0)
(18,24,0)
(20,21,0)
(35,21,0)
(7,17,0)
(29,14,0)
(15,22,0)
(18,5,0)
(14,1,0)
(30,35,0)
(11,2,0)
(28,23,0)
(1,14,0)
(13,33,1)
(21,10,1)
(11,8,1)
(33,21,1)
(7,27,1)
(29,13,1)
(22,5,1)
(27,23,1)
(23,34,1)
(18,12,1)
(1,25,1)
(14,1,1)
(28,22,1)
(5,18,1)
(18,24,1)
(22,15,1)
(30,3,1)
(35,30,1)
(10,20,1)
(35,21,1)
(25,29,1)
(3,33,1)
(3,7,1)
(34,28,1)
(28,2,1)
(4,35,1)
(4,3,1)
(2,11,1)
(35,5,1)
(15,31,1)
(8,22,1)
(7,5,1)
(12,14,1)
(31,5,1)
(23,5,1)
(18,33,2)
(35,3,2)
(28,33,2)
(18,24,2)
(34,33,2)
(23,33,2)
(18,12,2)
(7,5,2)
(11,22,2)
(13,33,2)
(7,33,2)
(5,33,2)
(12,33,2)
(2,11,2)
(27,33,2)
(22,33,2)
(35,5,2)
(12,14,2)
(30,3,2)
(8,22,2)
(5,18,2)
(15,33,2)
(2,22,2)
(25,33,2)
(1,33,2)
(35,21,2)
(23,5,2)
(14,1,2)
(22,5,2)
(29,33,2)
(31,33,2)
(14,33,2)
-----------------------------------
(0,)
(1,sizeof(char)
(2,exit(-1)
(3,STATIC_CONST_TRUE)
(4,RET)
(5,data = (char *)
(6,)
(7,printLine(data)
(8,1)
(9,data)
(10,NULL)
(11,-1)
(12,malloc(100*sizeof(char)
(13,data)
(14,100*sizeof(char)
(15,NULL)
(16,if (data == NULL)
(17,)
(18,(char *)
(19,if(STATIC_CONST_TRUE)
(20,data)
(21,data = NULL)
(22,data == NULL)
(23,strcpy(data, "A String")
(24,char *)
(25,char)
(26,if(STATIC_CONST_TRUE)
(27,data)
(28,data)
(29,100)
(30,data)
(31,data)
(32,)
(33,STATIC_CONST_TRUE)
(34,"A String")
(35,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^