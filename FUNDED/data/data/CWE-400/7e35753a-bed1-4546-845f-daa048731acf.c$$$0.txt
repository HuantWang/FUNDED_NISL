-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_67b_badSink(CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType myStruct)
{
    int count = myStruct.structFirst;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
97,102
98,99
100,101
102,103
103,104
103,105
106,107
106,108
107,108
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
119,121
120,121
122,123
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,7,9,13,15,19,20,25,27,29,33,35,36,39,42,44,45,47,51,54,56,57,61,63,68,69,74,75,78,82,83,85,88,94,96,99,101,104,105,108,110,112,117,118,121,126,128
-----computeFrom-----
49,50
49,51
59,60
59,61
72,73
72,74
76,77
76,78
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_67b_badSink(CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType myStruct){    int count = myStruct.structFirst;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_67b_badSink(CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType myStruct)
CWE400_Resource_Exhaustion__connect_socket_fwrite_67b_badSink
CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType myStruct
CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType
CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType
myStruct
myStruct
{    int count = myStruct.structFirst;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = myStruct.structFirst;
int count = myStruct.structFirst;
int
count = myStruct.structFirst
count
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(47,59,0)
(3,59,0)
(10,47,0)
(60,21,0)
(42,2,0)
(50,21,0)
(35,56,0)
(8,16,0)
(21,59,0)
(37,55,0)
(52,36,0)
(46,16,0)
(15,25,0)
(38,14,0)
(29,43,0)
(45,21,0)
(13,57,0)
(55,16,0)
(63,43,0)
(7,8,0)
(61,45,0)
(52,2,0)
(8,13,0)
(19,54,0)
(60,32,0)
(43,21,0)
(39,59,0)
(43,12,0)
(57,13,0)
(22,59,0)
(24,59,0)
(1,45,0)
(2,25,0)
(12,43,0)
(54,62,0)
(45,47,0)
(30,59,0)
(13,2,0)
(40,31,0)
(58,47,0)
(33,18,0)
(26,60,0)
(23,30,0)
(28,30,0)
(27,16,0)
(6,59,0)
(4,13,0)
(41,43,0)
(31,21,0)
(18,48,0)
(9,38,0)
(56,59,0)
(34,31,0)
(14,38,0)
(64,56,0)
(17,52,0)
(59,25,0)
(53,63,0)
(14,43,0)
(20,5,0)
(0,52,0)
(43,63,0)
(13,8,0)
(2,52,0)
(21,45,0)
(49,59,0)
(43,14,0)
(44,12,0)
(60,21,1)
(38,9,1)
(21,45,1)
(55,37,1)
(43,21,1)
(31,21,1)
(34,40,1)
(19,31,1)
(30,28,1)
(13,2,1)
(28,23,1)
(60,26,1)
(37,18,1)
(31,34,1)
(52,36,1)
(10,58,1)
(46,31,1)
(37,14,1)
(54,19,1)
(4,7,1)
(14,38,1)
(35,2,1)
(45,47,1)
(2,52,1)
(12,44,1)
(9,8,1)
(47,10,1)
(63,53,1)
(51,60,1)
(55,16,1)
(43,12,1)
(18,33,1)
(45,1,1)
(52,17,1)
(13,57,1)
(26,11,1)
(16,27,1)
(61,50,1)
(50,47,1)
(43,41,1)
(33,14,1)
(46,54,1)
(51,11,1)
(14,43,1)
(23,56,1)
(0,42,1)
(43,63,1)
(29,38,1)
(8,16,1)
(27,46,1)
(56,64,1)
(7,55,1)
(13,4,1)
(58,30,1)
(17,0,1)
(8,13,1)
(41,63,1)
(40,21,1)
(1,61,1)
(7,16,1)
(64,35,1)
(44,29,1)
(11,8,1)
(53,12,1)
(4,8,2)
(8,16,2)
(63,8,2)
(19,31,2)
(44,8,2)
(9,8,2)
(7,8,2)
(31,21,2)
(13,57,2)
(37,8,2)
(14,8,2)
(43,12,2)
(45,47,2)
(14,38,2)
(29,8,2)
(60,21,2)
(54,31,2)
(55,16,2)
(43,21,2)
(43,8,2)
(60,11,2)
(13,2,2)
(12,8,2)
(52,36,2)
(13,8,2)
(26,11,2)
(18,14,2)
(21,45,2)
(14,43,2)
(8,8,2)
(38,8,2)
(55,8,2)
(43,63,2)
(8,13,2)
(41,8,2)
(53,8,2)
(2,52,2)
(33,14,2)
-----------------------------------
(0,myStruct)
(1,"w+")
(2,count = myStruct.structFirst)
(3,filename)
(4,count)
(5,)
(6,if (pFile == NULL)
(7,i)
(8,i < (size_t)
(9,SENTENCE)
(10,"output_bad.txt")
(11,pFile)
(12,sizeof(char)
(13,(size_t)
(14,strlen(SENTENCE)
(15,count)
(16,i = 0)
(17,structFirst)
(18,exit(1)
(19,1)
(20,if (strlen(SENTENCE)
(21,pFile = fopen(filename, "w+")
(22,for (i = 0; i < (size_t)
(23,pFile)
(24,i)
(25,)
(26,pFile)
(27,0)
(28,NULL)
(29,SENTENCE)
(30,*pFile = NULL)
(31,pFile == NULL)
(32,)
(33,1)
(34,NULL)
(35,i)
(36,CWE400_Resource_Exhaustion__connect_socket_fwrite_67_structType myStruct)
(37,i)
(38,strlen(SENTENCE)
(39,if (pFile)
(40,pFile)
(41,pFile)
(42,count)
(43,fwrite(SENTENCE, sizeof(char)
(44,char)
(45,fopen(filename, "w+")
(46,i)
(47,*filename = "output_bad.txt")
(48,)
(49,pFile)
(50,pFile)
(51,RET)
(52,myStruct.structFirst)
(53,SENTENCE)
(54,exit(1)
(55,i++)
(56,i = 0)
(57,size_t)
(58,filename)
(59,)
(60,fclose(pFile)
(61,filename)
(62,)
(63,strlen(SENTENCE)
(64,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^