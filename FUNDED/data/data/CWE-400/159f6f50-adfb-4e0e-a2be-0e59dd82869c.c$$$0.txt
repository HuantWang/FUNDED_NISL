-----label-----
0
-----code-----
static void handler(int sig)
{
	if (__pthread_self()->tid != target_tid) return;

	int old_errno = errno;

	/* Inform caller we have received signal and wait for
	 * the caller to let us make the callback. */
	sem_post(&caller_sem);
	sem_wait(&target_sem);

	callback(context);

	/* Inform caller we've complered the callback and wait
	 * for the caller to release us to return. */
	sem_post(&caller_sem);
	sem_wait(&target_sem);

	/* Inform caller we are returning and state is destroyable. */
	sem_post(&caller_sem);

	errno = old_errno;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
10,12
11,12
11,13
12,13
12,14
13,14
14,15
17,18
20,21
21,22
21,23
23,24
23,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
33,34
33,35
36,37
37,38
37,39
38,39
40,41
41,42
41,43
44,45
45,46
45,47
46,47
48,49
49,50
51,52
52,53
52,54
53,54
55,56
56,57
58,59
59,60
59,61
60,61
62,63
63,64
65,66
66,67
66,68
67,68
69,70
70,71
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,6,8,15,16,18,19,22,24,27,31,34,35,39,42,43,47,50,54,57,61,64,68,71,75,77
-----computeFrom-----
11,12
11,13
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void handler(int sig){	if (__pthread_self()->tid != target_tid) return;	int old_errno = errno;	/* Inform caller we have received signal and wait for	 * the caller to let us make the callback. */	sem_post(&caller_sem);	sem_wait(&target_sem);	callback(context);	/* Inform caller we've complered the callback and wait	 * for the caller to release us to return. */	sem_post(&caller_sem);	sem_wait(&target_sem);	/* Inform caller we are returning and state is destroyable. */	sem_post(&caller_sem);	errno = old_errno;}
static void
handler(int sig)
handler
int sig
int
sig
sig
{	if (__pthread_self()->tid != target_tid) return;	int old_errno = errno;	/* Inform caller we have received signal and wait for	 * the caller to let us make the callback. */	sem_post(&caller_sem);	sem_wait(&target_sem);	callback(context);	/* Inform caller we've complered the callback and wait	 * for the caller to release us to return. */	sem_post(&caller_sem);	sem_wait(&target_sem);	/* Inform caller we are returning and state is destroyable. */	sem_post(&caller_sem);	errno = old_errno;}
if (__pthread_self()->tid != target_tid) return;
__pthread_self()->tid != target_tid
__pthread_self()->tid
__pthread_self()
__pthread_self
__pthread_self
tid
target_tid
target_tid
return;
int old_errno = errno;
int old_errno = errno;
int
old_errno = errno
old_errno
= errno
errno
errno
sem_post(&caller_sem);
sem_post(&caller_sem);
sem_post
sem_post
(&caller_sem)
&caller_sem
&
caller_sem
sem_wait(&target_sem);
sem_wait(&target_sem);
sem_wait
sem_wait
(&target_sem)
&target_sem
&
target_sem
callback(context);
callback(context);
callback
callback
(context)
context
context
sem_post(&caller_sem);
sem_post(&caller_sem)
sem_post
sem_post
&caller_sem
caller_sem
caller_sem
sem_wait(&target_sem);
sem_wait(&target_sem)
sem_wait
sem_wait
&target_sem
target_sem
target_sem
sem_post(&caller_sem);
sem_post(&caller_sem)
sem_post
sem_post
&caller_sem
caller_sem
caller_sem
errno = old_errno;
errno = old_errno
errno
errno
old_errno
old_errno
-----joern-----
(0,21,0)
(20,6,0)
(13,25,0)
(3,8,0)
(28,14,0)
(26,31,0)
(32,31,0)
(7,14,0)
(2,31,0)
(25,13,0)
(29,31,0)
(6,31,0)
(16,14,0)
(19,9,0)
(17,2,0)
(11,29,0)
(14,7,0)
(21,31,0)
(21,9,0)
(18,1,0)
(13,31,0)
(1,31,0)
(14,28,0)
(22,25,0)
(10,31,0)
(1,18,0)
(9,31,0)
(27,21,0)
(24,18,0)
(23,28,0)
(5,4,0)
(30,17,0)
(2,17,0)
(29,11,0)
(4,26,0)
(26,4,0)
(15,11,0)
(12,9,0)
(21,27,1)
(27,0,1)
(29,11,1)
(30,9,1)
(21,9,1)
(24,2,1)
(8,28,1)
(6,20,1)
(3,8,1)
(28,14,1)
(20,1,1)
(28,23,1)
(3,21,1)
(2,17,1)
(4,5,1)
(11,15,1)
(19,28,1)
(25,22,1)
(23,14,1)
(26,4,1)
(9,12,1)
(1,18,1)
(14,7,1)
(16,7,1)
(13,25,1)
(12,19,1)
(0,13,1)
(18,24,1)
(5,29,1)
(22,26,1)
(17,30,1)
(14,16,1)
(15,6,1)
(19,28,2)
(21,28,2)
(9,28,2)
(22,28,2)
(27,28,2)
(5,28,2)
(20,28,2)
(14,7,2)
(29,11,2)
(15,28,2)
(28,14,2)
(0,28,2)
(12,28,2)
(8,28,2)
(1,18,2)
(30,28,2)
(26,28,2)
(4,28,2)
(13,28,2)
(24,28,2)
(26,4,2)
(17,28,2)
(11,28,2)
(2,17,2)
(1,28,2)
(2,28,2)
(25,28,2)
(3,8,2)
(21,9,2)
(13,25,2)
(6,28,2)
(18,28,2)
(29,28,2)
-----------------------------------
(0,errno)
(1,sem_wait(&target_sem)
(2,sem_post(&caller_sem)
(3,RET)
(4,&target_sem)
(5,target_sem)
(6,callback(context)
(7,__pthread_self()
(8,return;)
(9,old_errno = errno)
(10,if (__pthread_self()
(11,&caller_sem)
(12,errno)
(13,sem_post(&caller_sem)
(14,__pthread_self()
(15,caller_sem)
(16,tid)
(17,&caller_sem)
(18,&target_sem)
(19,old_errno)
(20,context)
(21,errno = old_errno)
(22,caller_sem)
(23,target_tid)
(24,target_sem)
(25,&caller_sem)
(26,sem_wait(&target_sem)
(27,old_errno)
(28,__pthread_self()
(29,sem_post(&caller_sem)
(30,caller_sem)
(31,)
(32,old_errno)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^