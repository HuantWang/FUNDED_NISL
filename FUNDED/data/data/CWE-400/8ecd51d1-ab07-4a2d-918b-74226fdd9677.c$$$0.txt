-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
57,58
57,59
57,60
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
-----nextToken-----
2,4,9,11,15,17,21,22,26,29,34,35,37,42,44,48,49,53,55,56,60,63,65,70,73,75,78,81,84,85,89,91,96,98,102,104,106,110,112,116,118,123,124
-----computeFrom-----
19,20
19,21
24,25
24,26
31,32
31,33
58,59
58,60
68,69
68,70
79,80
79,81
87,88
87,89
-----guardedBy-----
65,106
60,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(34,41,0)
(9,2,0)
(1,4,0)
(56,20,0)
(32,11,0)
(16,42,0)
(23,11,0)
(13,33,0)
(20,46,0)
(35,2,0)
(48,34,0)
(40,52,0)
(7,34,0)
(30,25,0)
(38,47,0)
(27,10,0)
(42,41,0)
(33,54,0)
(50,22,0)
(11,32,0)
(22,32,0)
(10,27,0)
(19,53,0)
(2,12,0)
(53,46,0)
(25,41,0)
(18,11,0)
(53,17,0)
(24,39,0)
(12,10,0)
(34,35,0)
(24,6,0)
(2,35,0)
(45,54,0)
(44,39,0)
(3,35,0)
(4,22,0)
(55,38,0)
(12,2,0)
(35,41,0)
(2,9,0)
(21,20,0)
(17,53,0)
(37,46,0)
(52,46,0)
(25,35,0)
(5,3,0)
(39,24,0)
(0,35,0)
(32,54,0)
(52,53,0)
(42,35,0)
(29,32,0)
(14,52,0)
(28,3,0)
(8,33,0)
(36,40,0)
(49,10,0)
(31,40,0)
(54,46,0)
(51,27,0)
(26,41,0)
(10,12,0)
(22,4,0)
(15,46,0)
(10,32,0)
(49,0,1)
(10,27,1)
(38,55,1)
(24,39,1)
(2,12,1)
(39,44,1)
(7,3,1)
(36,31,1)
(16,34,1)
(55,22,1)
(34,35,1)
(1,50,1)
(14,40,1)
(10,32,1)
(31,53,1)
(53,17,1)
(23,29,1)
(51,49,1)
(28,35,1)
(12,10,1)
(25,35,1)
(44,3,1)
(17,19,1)
(7,24,1)
(22,4,1)
(48,7,1)
(50,32,1)
(4,1,1)
(32,11,1)
(43,38,1)
(19,20,1)
(2,9,1)
(11,18,1)
(20,56,1)
(52,14,1)
(29,52,1)
(25,30,1)
(27,51,1)
(42,35,1)
(42,16,1)
(5,28,1)
(56,21,1)
(30,42,1)
(18,23,1)
(34,48,1)
(40,36,1)
(0,22,1)
(52,53,1)
(43,25,1)
(3,5,1)
(3,35,1)
(35,2,1)
(22,32,1)
(2,22,2)
(16,22,2)
(30,22,2)
(12,10,2)
(25,22,2)
(34,35,2)
(34,22,2)
(48,22,2)
(10,27,2)
(35,2,2)
(12,22,2)
(22,32,2)
(55,22,2)
(27,22,2)
(44,3,2)
(3,22,2)
(2,9,2)
(10,22,2)
(49,22,2)
(35,22,2)
(22,4,2)
(38,22,2)
(39,3,2)
(0,22,2)
(42,22,2)
(52,53,2)
(5,22,2)
(32,11,2)
(24,39,2)
(10,32,2)
(2,12,2)
(51,22,2)
(53,17,2)
(25,35,2)
(28,22,2)
(42,35,2)
(24,3,2)
(3,35,2)
(7,22,2)
-----------------------------------
(0,myString)
(1,HELLO_STRING)
(2,(wchar_t *)
(3,myString == NULL)
(4,wcslen(HELLO_STRING)
(5,NULL)
(6,)
(7,myString)
(8,myString)
(9,wchar_t *)
(10,data*sizeof(wchar_t)
(11,myUnion.unionSecond)
(12,malloc(data*sizeof(wchar_t)
(13,if (data > wcslen(HELLO_STRING)
(14,data)
(15,data)
(16,myString)
(17,rand()
(18,unionSecond)
(19,data)
(20,data = 0)
(21,data)
(22,data > wcslen(HELLO_STRING)
(23,myUnion)
(24,exit(-1)
(25,free(myString)
(26,if (myString == NULL)
(27,sizeof(wchar_t)
(28,myString)
(29,data)
(30,myString)
(31,myUnion)
(32,data = myUnion.unionSecond)
(33,)
(34,wcscpy(myString, HELLO_STRING)
(35,myString = (wchar_t *)
(36,unionFirst)
(37,myUnion)
(38,printLine("Input is less than the length of the source string")
(39,-1)
(40,myUnion.unionFirst)
(41,)
(42,printWLine(myString)
(43,RET)
(44,1)
(45,data)
(46,)
(47,)
(48,HELLO_STRING)
(49,data)
(50,data)
(51,wchar_t)
(52,myUnion.unionFirst = data)
(53,data = rand()
(54,)
(55,"Input is less than the length of the source string")
(56,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^