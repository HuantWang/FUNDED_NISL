-----label-----
0
-----code-----
static int bus_broadcast_to_matches(MatchRegistry *matches, MatchFilter *filter, uint64_t transaction_id, Message *message) {
        MatchRule *rule;
        int r;

        for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {
                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);

                /* exclude the destination from broadcasts */
                if (filter->destination == peer->id)
                        continue;

                r = connection_queue(&peer->connection, transaction_id, message);
                if (r)
                        return error_fold(r);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
53,54
55,56
57,58
57,59
58,59
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
74,75
74,76
74,77
77,78
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
85,86
87,88
89,90
89,91
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
104,106
104,107
104,108
105,106
107,108
108,109
108,110
109,110
112,113
114,115
116,117
116,118
117,118
119,120
120,121
120,122
121,122
123,124
125,126
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,27,32,34,35,38,40,45,48,50,52,54,56,59,62,64,66,68,73,75,76,80,83,84,86,88,93,94,97,98,99,103,106,110,111,113,115,118,122,124,126
-----computeFrom-----
43,44
43,45
57,58
57,59
90,91
90,92
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int bus_broadcast_to_matches(MatchRegistry *matches, MatchFilter *filter, uint64_t transaction_id, Message *message) {        MatchRule *rule;        int r;        for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, transaction_id, message);                if (r)                        return error_fold(r);        }        return 0;}
static int
bus_broadcast_to_matches(MatchRegistry *matches, MatchFilter *filter, uint64_t transaction_id, Message *message)
bus_broadcast_to_matches
MatchRegistry *matches
MatchRegistry
MatchRegistry
*matches
*
matches
MatchFilter *filter
MatchFilter
MatchFilter
*filter
*
filter
uint64_t transaction_id
uint64_t
uint64_t
transaction_id
transaction_id
Message *message
Message
Message
*message
*
message
{        MatchRule *rule;        int r;        for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, transaction_id, message);                if (r)                        return error_fold(r);        }        return 0;}
MatchRule *rule;
MatchRule *rule;
MatchRule
MatchRule
*rule
*
rule
int r;
int r;
int
r
r
for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, transaction_id, message);                if (r)                        return error_fold(r);        }
rule = match_rule_next_match(matches, NULL, filter);
rule = match_rule_next_match(matches, NULL, filter)
rule
rule
match_rule_next_match(matches, NULL, filter)
match_rule_next_match
match_rule_next_match
matches
matches
NULL
NULL
filter
filter
rule
rule
rule = match_rule_next_match(matches, rule, filter)
rule
rule
match_rule_next_match(matches, rule, filter)
match_rule_next_match
match_rule_next_match
matches
matches
rule
rule
filter
filter
{                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, transaction_id, message);                if (r)                        return error_fold(r);        }
Peer *peer = c_container_of(rule->owner, Peer, owned_matches);
Peer *peer = c_container_of(rule->owner, Peer, owned_matches);
Peer
Peer
*peer = c_container_of(rule->owner, Peer, owned_matches)
*
peer
= c_container_of(rule->owner, Peer, owned_matches)
c_container_of(rule->owner, Peer, owned_matches)
c_container_of
c_container_of
rule->owner
rule
rule
owner
Peer
Peer
owned_matches
owned_matches
if (filter->destination == peer->id)                        continue;
filter->destination == peer->id
filter->destination
filter
filter
destination
peer->id
peer
peer
id
continue;
r = connection_queue(&peer->connection, transaction_id, message);
r = connection_queue(&peer->connection, transaction_id, message)
r
r
connection_queue(&peer->connection, transaction_id, message)
connection_queue
connection_queue
&peer->connection
peer->connection
peer
peer
connection
transaction_id
transaction_id
message
message
if (r)                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(46,16,0)
(27,43,0)
(16,12,0)
(19,10,0)
(44,32,0)
(34,17,0)
(2,5,0)
(10,56,0)
(1,52,0)
(26,41,0)
(42,56,0)
(43,53,0)
(14,4,0)
(37,1,0)
(4,56,0)
(6,25,0)
(9,20,0)
(52,1,0)
(55,52,0)
(20,54,0)
(52,47,0)
(0,16,0)
(20,12,0)
(24,25,0)
(3,54,0)
(17,27,0)
(27,17,0)
(10,5,0)
(16,53,0)
(30,20,0)
(51,20,0)
(37,10,0)
(25,52,0)
(21,41,0)
(17,10,0)
(45,20,0)
(54,16,0)
(24,7,0)
(8,16,0)
(52,23,0)
(13,30,0)
(15,43,0)
(41,32,0)
(1,37,0)
(29,32,0)
(18,32,0)
(36,5,0)
(56,10,0)
(4,30,0)
(11,5,0)
(20,53,0)
(56,4,0)
(4,54,0)
(49,37,0)
(28,17,0)
(38,56,0)
(50,43,0)
(25,5,0)
(21,7,0)
(40,4,0)
(43,27,0)
(20,30,0)
(16,54,0)
(33,52,0)
(48,24,0)
(22,37,0)
(52,25,0)
(33,55,1)
(41,26,1)
(25,52,1)
(17,28,1)
(24,25,1)
(9,45,1)
(31,25,1)
(37,49,1)
(43,53,1)
(39,27,1)
(34,43,1)
(0,3,1)
(21,7,1)
(52,33,1)
(16,53,1)
(22,6,1)
(49,22,1)
(6,27,1)
(51,9,1)
(20,51,1)
(30,20,1)
(35,30,1)
(14,19,1)
(16,12,1)
(52,1,1)
(43,50,1)
(37,10,1)
(40,14,1)
(20,12,1)
(35,54,1)
(20,53,1)
(7,24,1)
(1,37,1)
(13,31,1)
(42,4,1)
(56,38,1)
(15,10,1)
(10,56,1)
(17,10,1)
(16,8,1)
(55,1,1)
(4,40,1)
(45,13,1)
(13,39,1)
(50,15,1)
(26,35,1)
(24,48,1)
(4,30,1)
(38,42,1)
(21,41,1)
(28,34,1)
(20,54,1)
(54,16,1)
(27,43,1)
(8,46,1)
(4,54,1)
(48,31,1)
(52,23,1)
(56,4,1)
(19,35,1)
(46,0,1)
(20,30,1)
(27,17,1)
(52,47,1)
(20,27,2)
(39,27,2)
(7,31,2)
(16,53,2)
(50,35,2)
(4,35,2)
(27,35,2)
(43,53,2)
(55,27,2)
(56,35,2)
(20,12,2)
(40,35,2)
(51,27,2)
(30,27,2)
(30,31,2)
(35,27,2)
(20,53,2)
(42,35,2)
(10,56,2)
(1,27,2)
(30,20,2)
(20,31,2)
(54,16,2)
(9,27,2)
(17,35,2)
(1,37,2)
(56,4,2)
(33,27,2)
(21,41,2)
(24,25,2)
(27,17,2)
(6,27,2)
(45,27,2)
(22,27,2)
(16,12,2)
(15,35,2)
(48,31,2)
(28,35,2)
(21,7,2)
(17,10,2)
(4,54,2)
(52,23,2)
(24,31,2)
(14,35,2)
(9,31,2)
(20,30,2)
(31,27,2)
(52,27,2)
(25,27,2)
(37,27,2)
(27,43,2)
(49,27,2)
(10,35,2)
(26,35,2)
(52,47,2)
(20,54,2)
(35,31,2)
(52,1,2)
(51,31,2)
(38,35,2)
(13,31,2)
(25,52,2)
(37,10,2)
(19,35,2)
(43,35,2)
(45,31,2)
(34,35,2)
(41,35,2)
(4,30,2)
(13,27,2)
-----------------------------------
(0,matches)
(1,&peer->connection)
(2,if (r)
(3,rule)
(4,rule->owner)
(5,)
(6,r)
(7,return error_fold(r)
(8,filter)
(9,rule)
(10,*peer = c_container_of(rule->owner, Peer, owned_matches)
(11,if (filter->destination == peer->id)
(12,MatchRegistry *matches)
(13,rule)
(14,rule)
(15,filter)
(16,match_rule_next_match(matches, NULL, filter)
(17,peer->id)
(18,r)
(19,peer)
(20,match_rule_next_match(matches, rule, filter)
(21,RET)
(22,peer)
(23,Message *message)
(24,error_fold(r)
(25,r = connection_queue(&peer->connection, transaction_id, message)
(26,0)
(27,filter->destination == peer->id)
(28,id)
(29,rule)
(30,rule = match_rule_next_match(matches, rule, filter)
(31,r)
(32,)
(33,message)
(34,peer)
(35,rule)
(36,peer)
(37,peer->connection)
(38,owned_matches)
(39,continue;)
(40,owner)
(41,return 0;)
(42,Peer)
(43,filter->destination)
(44,for (rule = match_rule_next_match(matches, NULL, filter)
(45,matches)
(46,NULL)
(47,uint64_t transaction_id)
(48,r)
(49,connection)
(50,destination)
(51,filter)
(52,connection_queue(&peer->connection, transaction_id, message)
(53,MatchFilter *filter)
(54,rule = match_rule_next_match(matches, NULL, filter)
(55,transaction_id)
(56,c_container_of(rule->owner, Peer, owned_matches)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^