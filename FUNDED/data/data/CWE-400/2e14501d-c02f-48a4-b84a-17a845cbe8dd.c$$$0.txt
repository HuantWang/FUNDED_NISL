-----label-----
1
-----code-----
OMX_ERRORTYPE omx_volume_component_Constructor(OMX_COMPONENTTYPE *openmaxStandComp, OMX_STRING cComponentName) {
  OMX_ERRORTYPE err = OMX_ErrorNone;
  omx_volume_component_PrivateType* omx_volume_component_Private;
  OMX_U32 i;

  if (!openmaxStandComp->pComponentPrivate) {
    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__);
    openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));
    if(openmaxStandComp->pComponentPrivate == NULL) {
      return OMX_ErrorInsufficientResources;
    }
  } else {
    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);
  }

  omx_volume_component_Private = openmaxStandComp->pComponentPrivate;
  omx_volume_component_Private->ports = NULL;

  /** Calling base filter constructor */
  err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);

  omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;
  omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;

  /** Allocate Ports and call port constructor. */
  if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {
    omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));
    if (!omx_volume_component_Private->ports) {
      return OMX_ErrorInsufficientResources;
    }
    for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {
      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));
      if (!omx_volume_component_Private->ports[i]) {
        return OMX_ErrorInsufficientResources;
      }
    }
  }

  base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);
  base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);

  /** Domain specific section for the ports. */
  omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;
  omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;

  omx_volume_component_Private->gain = GAIN_VALUE; //100.0f; // default gain
  omx_volume_component_Private->destructor = omx_volume_component_Destructor;
  openmaxStandComp->SetParameter = omx_volume_component_SetParameter;
  openmaxStandComp->GetParameter = omx_volume_component_GetParameter;
  openmaxStandComp->GetConfig = omx_volume_component_GetConfig;
  openmaxStandComp->SetConfig = omx_volume_component_SetConfig;
  omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;

  noVolumeCompInstance++;
  if(noVolumeCompInstance > MAX_COMPONENT_VOLUME) {
    return OMX_ErrorInsufficientResources;
  }

  return err;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
18,19
19,20
19,21
20,21
22,23
22,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
43,44
46,47
46,48
46,49
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
62,65
63,64
66,67
67,68
67,69
68,69
71,72
71,73
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
81,82
83,84
84,85
85,86
85,87
85,88
85,89
85,90
86,87
88,89
91,92
93,94
93,95
94,95
94,96
97,98
97,99
98,99
101,102
102,103
102,104
103,104
105,106
105,107
106,107
109,110
110,111
110,112
111,112
111,113
112,113
115,116
117,118
118,119
118,120
119,120
121,122
121,123
121,124
122,123
124,125
126,127
128,129
129,130
129,131
130,131
130,132
131,132
131,133
132,133
132,134
133,134
136,137
140,141
141,142
141,143
142,143
142,144
143,144
143,145
144,145
144,146
145,146
148,149
152,153
152,154
153,154
153,155
154,155
154,156
155,156
155,157
156,157
156,158
157,158
160,161
163,164
164,165
164,166
165,166
168,169
168,170
168,171
169,170
170,171
170,172
171,172
171,173
172,173
175,176
175,177
175,178
176,177
178,179
178,180
179,180
179,181
180,181
180,182
181,182
184,185
187,188
188,189
188,190
189,190
191,192
193,194
193,195
194,195
195,196
195,197
196,197
199,200
200,201
201,202
203,204
203,205
203,206
203,207
204,205
205,206
205,207
206,207
209,210
209,211
210,211
212,213
212,214
213,214
213,215
214,215
214,216
215,216
218,219
221,222
222,223
224,225
224,226
225,226
226,227
226,228
227,228
227,229
228,229
228,230
229,230
232,233
234,235
234,236
234,237
235,236
238,239
239,240
239,241
240,241
243,244
243,245
244,245
245,246
245,247
246,247
246,248
247,248
250,251
252,253
253,254
254,255
256,257
257,258
257,259
257,260
257,261
257,262
258,259
260,261
262,263
263,264
263,265
264,265
264,266
265,266
270,271
272,273
273,274
273,275
273,276
273,277
273,278
274,275
276,277
278,279
279,280
279,281
280,281
280,282
281,282
286,287
288,289
289,290
289,291
290,291
290,292
291,292
291,293
292,293
292,294
293,294
293,295
294,295
297,298
301,302
303,304
304,305
304,306
305,306
305,307
306,307
306,308
307,308
307,309
308,309
308,310
309,310
312,313
316,317
318,319
319,320
319,321
320,321
320,322
321,322
324,325
326,327
327,328
327,329
328,329
328,330
329,330
332,333
334,335
335,336
335,337
336,337
336,338
337,338
340,341
342,343
343,344
343,345
344,345
344,346
345,346
348,349
350,351
351,352
351,353
352,353
352,354
353,354
356,357
358,359
359,360
359,361
360,361
360,362
361,362
364,365
366,367
367,368
367,369
368,369
368,370
369,370
372,373
374,375
375,376
376,377
378,379
378,380
379,380
379,381
380,381
382,383
384,385
385,386
386,387
388,389
389,390
-----nextToken-----
3,5,8,10,11,14,16,21,23,26,30,32,33,37,39,44,45,50,52,53,55,60,61,64,65,69,70,75,76,78,82,87,89,90,92,95,96,99,100,104,107,108,113,114,116,120,123,125,127,134,135,137,138,139,146,147,149,150,151,158,159,161,162,166,167,173,174,177,182,183,185,186,190,192,197,198,202,207,208,211,216,217,219,220,223,230,231,233,236,237,241,242,248,249,251,255,259,261,266,267,268,269,271,275,277,282,283,284,285,287,295,296,298,299,300,302,310,311,313,314,315,317,322,323,325,330,331,333,338,339,341,346,347,349,354,355,357,362,363,365,370,371,373,377,381,383,387,390
-----computeFrom-----
57,58
57,59
72,73
72,74
102,103
102,104
110,111
110,112
118,119
118,120
129,130
129,131
141,142
141,143
153,154
153,155
170,171
170,172
205,206
205,207
209,210
209,211
226,227
226,228
289,290
289,291
304,305
304,306
319,320
319,321
327,328
327,329
335,336
335,337
343,344
343,345
351,352
351,353
359,360
359,361
367,368
367,369
379,380
379,381
-----guardedBy-----
166,248
159,217
162,220
161,219
167,249
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
OMX_ERRORTYPE omx_volume_component_Constructor(OMX_COMPONENTTYPE *openmaxStandComp, OMX_STRING cComponentName) {  OMX_ERRORTYPE err = OMX_ErrorNone;  omx_volume_component_PrivateType* omx_volume_component_Private;  OMX_U32 i;  if (!openmaxStandComp->pComponentPrivate) {    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__);    openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));    if(openmaxStandComp->pComponentPrivate == NULL) {      return OMX_ErrorInsufficientResources;    }  } else {    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);  }  omx_volume_component_Private = openmaxStandComp->pComponentPrivate;  omx_volume_component_Private->ports = NULL;  /** Calling base filter constructor */  err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);  omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;  omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;  /** Allocate Ports and call port constructor. */  if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {    omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));    if (!omx_volume_component_Private->ports) {      return OMX_ErrorInsufficientResources;    }    for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));      if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }    }  }  base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);  base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);  /** Domain specific section for the ports. */  omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;  omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;  omx_volume_component_Private->gain = GAIN_VALUE; //100.0f; // default gain  omx_volume_component_Private->destructor = omx_volume_component_Destructor;  openmaxStandComp->SetParameter = omx_volume_component_SetParameter;  openmaxStandComp->GetParameter = omx_volume_component_GetParameter;  openmaxStandComp->GetConfig = omx_volume_component_GetConfig;  openmaxStandComp->SetConfig = omx_volume_component_SetConfig;  omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;  noVolumeCompInstance++;  if(noVolumeCompInstance > MAX_COMPONENT_VOLUME) {    return OMX_ErrorInsufficientResources;  }  return err;}
OMX_ERRORTYPE
OMX_ERRORTYPE
omx_volume_component_Constructor(OMX_COMPONENTTYPE *openmaxStandComp, OMX_STRING cComponentName)
omx_volume_component_Constructor
OMX_COMPONENTTYPE *openmaxStandComp
OMX_COMPONENTTYPE
OMX_COMPONENTTYPE
*openmaxStandComp
*
openmaxStandComp
OMX_STRING cComponentName
OMX_STRING
OMX_STRING
cComponentName
cComponentName
{  OMX_ERRORTYPE err = OMX_ErrorNone;  omx_volume_component_PrivateType* omx_volume_component_Private;  OMX_U32 i;  if (!openmaxStandComp->pComponentPrivate) {    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__);    openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));    if(openmaxStandComp->pComponentPrivate == NULL) {      return OMX_ErrorInsufficientResources;    }  } else {    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);  }  omx_volume_component_Private = openmaxStandComp->pComponentPrivate;  omx_volume_component_Private->ports = NULL;  /** Calling base filter constructor */  err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);  omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;  omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;  /** Allocate Ports and call port constructor. */  if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {    omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));    if (!omx_volume_component_Private->ports) {      return OMX_ErrorInsufficientResources;    }    for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));      if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }    }  }  base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);  base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);  /** Domain specific section for the ports. */  omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;  omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;  omx_volume_component_Private->gain = GAIN_VALUE; //100.0f; // default gain  omx_volume_component_Private->destructor = omx_volume_component_Destructor;  openmaxStandComp->SetParameter = omx_volume_component_SetParameter;  openmaxStandComp->GetParameter = omx_volume_component_GetParameter;  openmaxStandComp->GetConfig = omx_volume_component_GetConfig;  openmaxStandComp->SetConfig = omx_volume_component_SetConfig;  omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;  noVolumeCompInstance++;  if(noVolumeCompInstance > MAX_COMPONENT_VOLUME) {    return OMX_ErrorInsufficientResources;  }  return err;}
OMX_ERRORTYPE err = OMX_ErrorNone;
OMX_ERRORTYPE err = OMX_ErrorNone;
OMX_ERRORTYPE
OMX_ERRORTYPE
err = OMX_ErrorNone
err
= OMX_ErrorNone
OMX_ErrorNone
OMX_ErrorNone
omx_volume_component_PrivateType* omx_volume_component_Private;
omx_volume_component_PrivateType* omx_volume_component_Private;
omx_volume_component_PrivateType
omx_volume_component_PrivateType
* omx_volume_component_Private
*
omx_volume_component_Private
OMX_U32 i;
OMX_U32 i;
OMX_U32
OMX_U32
i
i
if (!openmaxStandComp->pComponentPrivate) {    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__);    openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));    if(openmaxStandComp->pComponentPrivate == NULL) {      return OMX_ErrorInsufficientResources;    }  } else {    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);  }
!openmaxStandComp->pComponentPrivate
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
{    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__);    openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));    if(openmaxStandComp->pComponentPrivate == NULL) {      return OMX_ErrorInsufficientResources;    }  }
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__);
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\n",__func__)
DEBUG
DEBUG
DEB_LEV_FUNCTION_NAME
DEB_LEV_FUNCTION_NAME
"In %s, allocating component\n"
__func__
__func__
openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));
openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType))
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
calloc(1, sizeof(omx_volume_component_PrivateType))
calloc
calloc
1
sizeof(omx_volume_component_PrivateType)
omx_volume_component_PrivateType
omx_volume_component_PrivateType
omx_volume_component_PrivateType

if(openmaxStandComp->pComponentPrivate == NULL) {      return OMX_ErrorInsufficientResources;    }
openmaxStandComp->pComponentPrivate == NULL
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
NULL
NULL
{      return OMX_ErrorInsufficientResources;    }
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
{    DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);  }
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate)
DEBUG
DEBUG
DEB_LEV_FUNCTION_NAME
DEB_LEV_FUNCTION_NAME
"In %s, Error Component %x Already Allocated\n"
__func__
__func__
(int)openmaxStandComp->pComponentPrivate
int
int

openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
omx_volume_component_Private = openmaxStandComp->pComponentPrivate;
omx_volume_component_Private = openmaxStandComp->pComponentPrivate
omx_volume_component_Private
omx_volume_component_Private
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
omx_volume_component_Private->ports = NULL;
omx_volume_component_Private->ports = NULL
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
NULL
NULL
err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);
err = omx_base_filter_Constructor(openmaxStandComp, cComponentName)
err
err
omx_base_filter_Constructor(openmaxStandComp, cComponentName)
omx_base_filter_Constructor
omx_base_filter_Constructor
openmaxStandComp
openmaxStandComp
cComponentName
cComponentName
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nStartPortNumber
0
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
2
if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {    omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));    if (!omx_volume_component_Private->ports) {      return OMX_ErrorInsufficientResources;    }    for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));      if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }    }  }
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
!omx_volume_component_Private->ports
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
{    omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));    if (!omx_volume_component_Private->ports) {      return OMX_ErrorInsufficientResources;    }    for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));      if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }    }  }
omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));
omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *))
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *))
calloc
calloc
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
sizeof(omx_base_PortType *)
omx_base_PortType *
omx_base_PortType
omx_base_PortType
*
*
if (!omx_volume_component_Private->ports) {      return OMX_ErrorInsufficientResources;    }
!omx_volume_component_Private->ports
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
{      return OMX_ErrorInsufficientResources;    }
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));      if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }    }
i=0;
i=0
i
i
0
i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
i
i
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
i++
i
i
{      omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));      if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }    }
omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));
omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType))
omx_volume_component_Private->ports[i]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
i
i
calloc(1, sizeof(omx_base_audio_PortType))
calloc
calloc
1
sizeof(omx_base_audio_PortType)
omx_base_audio_PortType
omx_base_audio_PortType
omx_base_audio_PortType

if (!omx_volume_component_Private->ports[i]) {        return OMX_ErrorInsufficientResources;      }
!omx_volume_component_Private->ports[i]
omx_volume_component_Private->ports[i]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
i
i
{        return OMX_ErrorInsufficientResources;      }
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);
base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE)
base_audio_port_Constructor
base_audio_port_Constructor
openmaxStandComp
openmaxStandComp
&omx_volume_component_Private->ports[0]
omx_volume_component_Private->ports[0]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
0
0
OMX_TRUE
OMX_TRUE
base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);
base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE)
base_audio_port_Constructor
base_audio_port_Constructor
openmaxStandComp
openmaxStandComp
&omx_volume_component_Private->ports[1]
omx_volume_component_Private->ports[1]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
1
1
OMX_FALSE
OMX_FALSE
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
OMX_BASE_FILTER_INPUTPORT_INDEX
OMX_BASE_FILTER_INPUTPORT_INDEX
sPortParam
nBufferSize
DEFAULT_OUT_BUFFER_SIZE
DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
OMX_BASE_FILTER_OUTPUTPORT_INDEX
OMX_BASE_FILTER_OUTPUTPORT_INDEX
sPortParam
nBufferSize
DEFAULT_OUT_BUFFER_SIZE
DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->gain = GAIN_VALUE;
omx_volume_component_Private->gain = GAIN_VALUE
omx_volume_component_Private->gain
omx_volume_component_Private
omx_volume_component_Private
gain
GAIN_VALUE
GAIN_VALUE
omx_volume_component_Private->destructor = omx_volume_component_Destructor;
omx_volume_component_Private->destructor = omx_volume_component_Destructor
omx_volume_component_Private->destructor
omx_volume_component_Private
omx_volume_component_Private
destructor
omx_volume_component_Destructor
omx_volume_component_Destructor
openmaxStandComp->SetParameter = omx_volume_component_SetParameter;
openmaxStandComp->SetParameter = omx_volume_component_SetParameter
openmaxStandComp->SetParameter
openmaxStandComp
openmaxStandComp
SetParameter
omx_volume_component_SetParameter
omx_volume_component_SetParameter
openmaxStandComp->GetParameter = omx_volume_component_GetParameter;
openmaxStandComp->GetParameter = omx_volume_component_GetParameter
openmaxStandComp->GetParameter
openmaxStandComp
openmaxStandComp
GetParameter
omx_volume_component_GetParameter
omx_volume_component_GetParameter
openmaxStandComp->GetConfig = omx_volume_component_GetConfig;
openmaxStandComp->GetConfig = omx_volume_component_GetConfig
openmaxStandComp->GetConfig
openmaxStandComp
openmaxStandComp
GetConfig
omx_volume_component_GetConfig
omx_volume_component_GetConfig
openmaxStandComp->SetConfig = omx_volume_component_SetConfig;
openmaxStandComp->SetConfig = omx_volume_component_SetConfig
openmaxStandComp->SetConfig
openmaxStandComp
openmaxStandComp
SetConfig
omx_volume_component_SetConfig
omx_volume_component_SetConfig
omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;
omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback
omx_volume_component_Private->BufferMgmtCallback
omx_volume_component_Private
omx_volume_component_Private
BufferMgmtCallback
omx_volume_component_BufferMgmtCallback
omx_volume_component_BufferMgmtCallback
noVolumeCompInstance++;
noVolumeCompInstance++
noVolumeCompInstance
noVolumeCompInstance
if(noVolumeCompInstance > MAX_COMPONENT_VOLUME) {    return OMX_ErrorInsufficientResources;  }
noVolumeCompInstance > MAX_COMPONENT_VOLUME
noVolumeCompInstance
noVolumeCompInstance
MAX_COMPONENT_VOLUME
MAX_COMPONENT_VOLUME
{    return OMX_ErrorInsufficientResources;  }
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
return err;
err
err
-----joern-----
(181,227,0)
(122,134,0)
(124,19,0)
(27,19,0)
(149,10,0)
(6,122,0)
(234,12,0)
(183,103,0)
(4,228,0)
(189,124,0)
(56,92,0)
(186,171,0)
(154,34,0)
(237,121,0)
(106,103,0)
(74,64,0)
(185,83,0)
(159,208,0)
(20,183,0)
(77,25,0)
(158,104,0)
(135,103,0)
(236,1,0)
(160,188,0)
(37,5,0)
(202,83,0)
(194,83,0)
(210,180,0)
(200,184,0)
(207,170,0)
(158,1,0)
(161,80,0)
(237,12,0)
(28,104,0)
(118,56,0)
(236,83,0)
(89,83,0)
(180,182,0)
(156,188,0)
(2,55,0)
(222,18,0)
(142,216,0)
(221,43,0)
(181,197,0)
(136,103,0)
(98,46,0)
(119,101,0)
(36,103,0)
(140,16,0)
(0,138,0)
(238,171,0)
(188,221,0)
(61,89,0)
(220,83,0)
(71,83,0)
(46,103,0)
(204,166,0)
(72,114,0)
(204,172,0)
(88,97,0)
(171,238,0)
(58,62,0)
(130,205,0)
(224,38,0)
(62,187,0)
(185,182,0)
(178,103,0)
(111,138,0)
(128,144,0)
(229,182,0)
(85,214,0)
(97,129,0)
(86,4,0)
(207,12,0)
(9,235,0)
(140,216,0)
(187,221,0)
(203,83,0)
(228,234,0)
(110,53,0)
(63,236,0)
(34,124,0)
(102,5,0)
(1,204,0)
(197,188,0)
(82,203,0)
(62,184,0)
(192,134,0)
(97,184,0)
(129,114,0)
(18,7,0)
(217,114,0)
(218,220,0)
(202,12,0)
(225,221,0)
(167,158,0)
(157,207,0)
(114,103,0)
(79,121,0)
(13,74,0)
(199,92,0)
(35,225,0)
(188,83,0)
(206,24,0)
(126,207,0)
(194,19,0)
(5,102,0)
(180,152,0)
(113,64,0)
(99,103,0)
(56,40,0)
(83,202,0)
(121,230,0)
(3,219,0)
(158,216,0)
(176,93,0)
(147,102,0)
(201,158,0)
(56,10,0)
(227,181,0)
(169,203,0)
(170,207,0)
(187,83,0)
(5,217,0)
(208,159,0)
(226,43,0)
(158,128,0)
(31,138,0)
(216,221,0)
(165,26,0)
(223,138,0)
(151,191,0)
(225,182,0)
(56,162,0)
(78,135,0)
(84,12,0)
(10,183,0)
(134,182,0)
(168,103,0)
(121,79,0)
(219,217,0)
(4,103,0)
(42,129,0)
(138,103,0)
(152,196,0)
(196,152,0)
(220,25,0)
(79,139,0)
(67,150,0)
(188,197,0)
(59,171,0)
(17,194,0)
(227,12,0)
(45,84,0)
(34,154,0)
(52,227,0)
(112,103,0)
(26,128,0)
(92,182,0)
(40,168,0)
(56,108,0)
(234,231,0)
(56,128,0)
(209,79,0)
(62,109,0)
(175,108,0)
(179,24,0)
(107,51,0)
(134,221,0)
(15,40,0)
(230,121,0)
(109,62,0)
(180,83,0)
(105,194,0)
(25,153,0)
(55,184,0)
(193,18,0)
(48,185,0)
(68,227,0)
(190,187,0)
(104,12,0)
(197,181,0)
(25,220,0)
(26,203,0)
(133,196,0)
(23,180,0)
(104,208,0)
(141,148,0)
(203,26,0)
(225,53,0)
(44,1,0)
(158,95,0)
(111,53,0)
(56,153,0)
(150,12,0)
(195,79,0)
(56,18,0)
(233,185,0)
(127,236,0)
(56,84,0)
(128,26,0)
(53,111,0)
(29,170,0)
(213,148,0)
(158,153,0)
(123,214,0)
(129,97,0)
(69,153,0)
(191,91,0)
(60,128,0)
(140,92,0)
(227,103,0)
(217,219,0)
(70,185,0)
(146,166,0)
(219,3,0)
(193,122,0)
(166,204,0)
(143,166,0)
(187,62,0)
(239,92,0)
(167,140,0)
(187,182,0)
(116,187,0)
(108,135,0)
(96,202,0)
(140,153,0)
(41,197,0)
(185,221,0)
(34,221,0)
(124,34,0)
(101,159,0)
(93,83,0)
(56,74,0)
(80,103,0)
(185,233,0)
(236,182,0)
(235,49,0)
(3,24,0)
(39,227,0)
(56,104,0)
(225,83,0)
(145,93,0)
(235,104,0)
(140,104,0)
(89,51,0)
(108,12,0)
(129,238,0)
(18,193,0)
(8,102,0)
(24,83,0)
(138,12,0)
(115,216,0)
(132,237,0)
(221,34,0)
(153,114,0)
(19,124,0)
(90,234,0)
(124,114,0)
(92,83,0)
(65,43,0)
(208,38,0)
(14,193,0)
(131,168,0)
(182,103,0)
(100,136,0)
(24,182,0)
(140,128,0)
(215,148,0)
(163,220,0)
(188,182,0)
(202,208,0)
(56,1,0)
(216,83,0)
(21,238,0)
(144,103,0)
(1,184,0)
(164,172,0)
(211,134,0)
(138,111,0)
(236,221,0)
(57,40,0)
(152,180,0)
(121,237,0)
(76,228,0)
(10,12,0)
(1,236,0)
(191,83,0)
(134,83,0)
(117,46,0)
(212,89,0)
(173,143,0)
(7,103,0)
(75,7,0)
(24,3,0)
(56,93,0)
(148,38,0)
(64,103,0)
(19,194,0)
(81,202,0)
(167,56,0)
(94,91,0)
(166,143,0)
(137,237,0)
(51,103,0)
(74,196,0)
(22,217,0)
(167,4,0)
(167,235,0)
(174,191,0)
(50,103,0)
(171,83,0)
(83,103,0)
(125,152,0)
(159,101,0)
(177,150,0)
(91,103,0)
(84,136,0)
(102,83,0)
(234,228,0)
(30,108,0)
(205,103,0)
(238,129,0)
(158,92,0)
(62,204,0)
(56,191,0)
(155,154,0)
(122,193,0)
(47,10,0)
(120,140,0)
(32,79,0)
(33,84,0)
(53,225,0)
(228,103,0)
(198,150,0)
(11,184,0)
(93,80,0)
(56,89,0)
(56,216,0)
(150,198,0)
(153,25,0)
(87,225,0)
(180,221,0)
(66,104,0)
(232,234,0)
(196,74,0)
(154,155,0)
(134,122,0)
(73,144,0)
(54,159,0)
(217,5,0)
(207,208,0)
(40,12,0)
(6,134,1)
(48,221,1)
(13,196,1)
(66,28,1)
(207,126,1)
(71,79,1)
(30,91,1)
(160,68,1)
(225,221,1)
(134,211,1)
(134,83,1)
(237,12,1)
(26,165,1)
(175,30,1)
(149,47,1)
(129,238,1)
(56,1,1)
(140,153,1)
(150,12,1)
(69,25,1)
(218,163,1)
(122,134,1)
(142,219,1)
(93,176,1)
(168,131,1)
(197,188,1)
(39,52,1)
(87,35,1)
(181,197,1)
(215,213,1)
(20,10,1)
(55,2,1)
(158,92,1)
(21,171,1)
(167,56,1)
(83,202,1)
(161,93,1)
(234,231,1)
(207,12,1)
(190,116,1)
(71,170,1)
(234,12,1)
(25,77,1)
(186,88,1)
(15,183,1)
(140,216,1)
(67,46,1)
(180,182,1)
(166,143,1)
(97,184,1)
(143,173,1)
(236,127,1)
(188,83,1)
(225,87,1)
(77,220,1)
(62,187,1)
(222,193,1)
(141,215,1)
(158,201,1)
(217,5,1)
(70,48,1)
(133,152,1)
(167,158,1)
(127,63,1)
(185,182,1)
(144,73,1)
(56,191,1)
(62,58,1)
(227,39,1)
(131,40,1)
(132,137,1)
(122,6,1)
(24,83,1)
(56,118,1)
(219,217,1)
(196,133,1)
(0,227,1)
(232,76,1)
(182,229,1)
(140,120,1)
(10,149,1)
(56,216,1)
(158,216,1)
(187,190,1)
(173,146,1)
(24,182,1)
(64,113,1)
(235,104,1)
(56,92,1)
(97,129,1)
(179,206,1)
(31,111,1)
(188,156,1)
(129,42,1)
(76,182,1)
(91,94,1)
(193,122,1)
(56,10,1)
(167,140,1)
(158,104,1)
(187,182,1)
(74,196,1)
(110,225,1)
(24,179,1)
(23,210,1)
(104,66,1)
(220,218,1)
(117,98,1)
(89,61,1)
(90,232,1)
(174,51,1)
(55,184,1)
(59,186,1)
(188,221,1)
(217,114,1)
(1,184,1)
(5,102,1)
(93,83,1)
(221,34,1)
(225,83,1)
(4,86,1)
(11,233,1)
(19,27,1)
(205,130,1)
(185,83,1)
(41,188,1)
(239,199,1)
(94,191,1)
(138,12,1)
(163,144,1)
(148,141,1)
(78,108,1)
(184,200,1)
(214,85,1)
(92,83,1)
(238,171,1)
(56,84,1)
(5,37,1)
(56,93,1)
(146,1,1)
(124,114,1)
(80,161,1)
(86,214,1)
(116,204,1)
(228,234,1)
(34,124,1)
(238,21,1)
(204,166,1)
(25,220,1)
(102,8,1)
(119,54,1)
(79,121,1)
(125,180,1)
(34,154,1)
(62,184,1)
(81,71,1)
(191,83,1)
(56,18,1)
(82,169,1)
(236,83,1)
(109,62,1)
(74,13,1)
(152,125,1)
(123,205,1)
(56,104,1)
(115,142,1)
(32,195,1)
(56,153,1)
(56,74,1)
(84,45,1)
(189,19,1)
(187,83,1)
(229,92,1)
(180,221,1)
(202,96,1)
(216,115,1)
(159,101,1)
(54,104,1)
(120,233,1)
(18,222,1)
(216,83,1)
(199,83,1)
(192,138,1)
(92,239,1)
(27,194,1)
(113,74,1)
(171,59,1)
(227,181,1)
(225,182,1)
(153,25,1)
(170,207,1)
(63,97,1)
(128,60,1)
(136,100,1)
(107,89,1)
(2,109,1)
(169,228,1)
(147,114,1)
(124,189,1)
(145,168,1)
(183,20,1)
(84,12,1)
(180,23,1)
(135,78,1)
(140,128,1)
(40,12,1)
(100,84,1)
(200,11,1)
(85,123,1)
(73,128,1)
(195,209,1)
(108,12,1)
(53,225,1)
(104,12,1)
(56,128,1)
(44,236,1)
(4,228,1)
(121,237,1)
(137,32,1)
(213,198,1)
(18,193,1)
(134,182,1)
(185,221,1)
(102,83,1)
(96,81,1)
(121,230,1)
(29,207,1)
(128,26,1)
(33,135,1)
(154,155,1)
(140,104,1)
(234,90,1)
(75,18,1)
(235,9,1)
(101,119,1)
(105,216,1)
(26,203,1)
(57,15,1)
(108,175,1)
(53,110,1)
(56,89,1)
(167,235,1)
(217,22,1)
(185,70,1)
(134,221,1)
(212,64,1)
(203,83,1)
(198,150,1)
(223,31,1)
(154,124,1)
(211,192,1)
(47,136,1)
(19,194,1)
(7,75,1)
(227,12,1)
(124,19,1)
(165,203,1)
(58,187,1)
(68,97,1)
(188,182,1)
(167,4,1)
(158,153,1)
(37,102,1)
(111,53,1)
(202,12,1)
(126,157,1)
(61,212,1)
(237,132,1)
(140,92,1)
(56,108,1)
(176,145,1)
(17,105,1)
(35,0,1)
(153,69,1)
(118,214,1)
(236,221,1)
(194,17,1)
(1,236,1)
(196,152,1)
(42,238,1)
(22,5,1)
(193,14,1)
(187,221,1)
(56,40,1)
(208,159,1)
(114,72,1)
(210,7,1)
(194,83,1)
(171,83,1)
(191,151,1)
(72,153,1)
(8,147,1)
(62,204,1)
(88,184,1)
(180,83,1)
(220,83,1)
(170,29,1)
(138,223,1)
(209,198,1)
(197,41,1)
(138,111,1)
(157,208,1)
(236,182,1)
(207,208,1)
(40,57,1)
(177,67,1)
(151,174,1)
(233,185,1)
(60,26,1)
(156,160,1)
(28,148,1)
(88,55,1)
(45,33,1)
(201,109,1)
(51,107,1)
(203,82,1)
(46,117,1)
(3,24,1)
(129,114,1)
(219,3,1)
(10,12,1)
(206,217,1)
(150,177,1)
(152,180,1)
(52,181,1)
(68,219,1)
(1,44,1)
(158,1,1)
(9,170,1)
(14,122,1)
(89,83,1)
(158,128,1)
(202,208,1)
(130,80,1)
(56,92,2)
(128,26,2)
(128,198,2)
(167,235,2)
(26,203,2)
(110,97,2)
(108,12,2)
(81,198,2)
(87,97,2)
(5,102,2)
(225,182,2)
(235,104,2)
(60,170,2)
(187,182,2)
(228,170,2)
(94,219,2)
(130,97,2)
(152,219,2)
(158,92,2)
(4,228,2)
(163,198,2)
(193,122,2)
(140,128,2)
(220,83,2)
(82,198,2)
(87,219,2)
(124,219,2)
(110,219,2)
(152,180,2)
(66,198,2)
(201,109,2)
(90,198,2)
(29,198,2)
(10,219,2)
(22,198,2)
(85,219,2)
(153,25,2)
(64,97,2)
(218,198,2)
(109,97,2)
(56,93,2)
(188,219,2)
(58,97,2)
(72,170,2)
(76,198,2)
(196,97,2)
(202,12,2)
(122,219,2)
(39,97,2)
(123,97,2)
(97,184,2)
(62,97,2)
(97,109,2)
(127,97,2)
(33,97,2)
(194,219,2)
(6,97,2)
(192,97,2)
(169,198,2)
(26,198,2)
(180,97,2)
(147,198,2)
(91,97,2)
(119,198,2)
(41,219,2)
(202,198,2)
(138,12,2)
(18,97,2)
(56,1,2)
(124,19,2)
(61,219,2)
(171,83,2)
(176,219,2)
(210,219,2)
(89,97,2)
(13,97,2)
(93,83,2)
(134,219,2)
(90,170,2)
(0,97,2)
(1,236,2)
(140,233,2)
(88,109,2)
(37,198,2)
(137,198,2)
(188,83,2)
(144,170,2)
(135,97,2)
(183,97,2)
(196,219,2)
(125,97,2)
(221,219,2)
(118,214,2)
(225,219,2)
(145,97,2)
(19,194,2)
(79,121,2)
(68,219,2)
(140,92,2)
(3,217,2)
(93,97,2)
(53,225,2)
(216,83,2)
(237,198,2)
(13,219,2)
(232,198,2)
(52,219,2)
(62,204,2)
(76,170,2)
(121,230,2)
(14,97,2)
(32,198,2)
(25,170,2)
(196,152,2)
(217,114,2)
(234,198,2)
(202,170,2)
(10,97,2)
(64,219,2)
(185,182,2)
(34,154,2)
(120,233,2)
(10,12,2)
(113,97,2)
(42,109,2)
(202,208,2)
(56,153,2)
(52,97,2)
(62,184,2)
(113,219,2)
(237,12,2)
(69,170,2)
(159,101,2)
(116,97,2)
(227,181,2)
(20,219,2)
(181,197,2)
(45,97,2)
(40,97,2)
(25,198,2)
(5,198,2)
(159,198,2)
(111,219,2)
(56,10,2)
(219,198,2)
(214,219,2)
(125,219,2)
(56,108,2)
(170,207,2)
(8,198,2)
(236,182,2)
(239,198,2)
(167,56,2)
(235,170,2)
(80,97,2)
(55,109,2)
(191,97,2)
(56,74,2)
(129,114,2)
(7,97,2)
(53,219,2)
(102,198,2)
(185,219,2)
(209,198,2)
(203,198,2)
(34,219,2)
(96,170,2)
(168,219,2)
(89,83,2)
(59,233,2)
(223,219,2)
(238,109,2)
(185,221,2)
(161,97,2)
(40,219,2)
(157,198,2)
(236,83,2)
(158,104,2)
(88,233,2)
(219,217,2)
(34,124,2)
(108,219,2)
(134,182,2)
(151,219,2)
(171,109,2)
(94,97,2)
(145,219,2)
(56,191,2)
(153,170,2)
(233,219,2)
(200,233,2)
(82,170,2)
(56,40,2)
(136,219,2)
(56,89,2)
(234,170,2)
(93,219,2)
(21,109,2)
(180,219,2)
(54,198,2)
(180,221,2)
(229,170,2)
(56,216,2)
(197,97,2)
(167,4,2)
(56,104,2)
(151,97,2)
(14,219,2)
(204,166,2)
(80,219,2)
(191,83,2)
(197,188,2)
(225,83,2)
(222,97,2)
(168,97,2)
(190,97,2)
(19,219,2)
(97,233,2)
(187,97,2)
(158,128,2)
(51,97,2)
(163,170,2)
(203,170,2)
(69,198,2)
(179,217,2)
(101,198,2)
(44,97,2)
(97,129,2)
(83,198,2)
(153,198,2)
(222,219,2)
(75,219,2)
(181,97,2)
(167,140,2)
(111,97,2)
(175,97,2)
(214,97,2)
(21,233,2)
(228,234,2)
(78,97,2)
(102,83,2)
(17,219,2)
(140,104,2)
(74,196,2)
(1,184,2)
(186,109,2)
(227,12,2)
(187,83,2)
(234,231,2)
(56,84,2)
(182,198,2)
(165,198,2)
(238,171,2)
(169,170,2)
(18,193,2)
(128,170,2)
(166,143,2)
(25,220,2)
(193,219,2)
(146,97,2)
(225,97,2)
(165,170,2)
(129,238,2)
(185,83,2)
(68,97,2)
(83,170,2)
(48,219,2)
(129,109,2)
(210,97,2)
(104,12,2)
(227,97,2)
(182,170,2)
(229,198,2)
(197,219,2)
(105,219,2)
(188,221,2)
(100,97,2)
(57,97,2)
(199,170,2)
(7,219,2)
(92,170,2)
(53,97,2)
(40,12,2)
(75,97,2)
(195,198,2)
(56,214,2)
(211,219,2)
(79,198,2)
(30,219,2)
(174,97,2)
(15,97,2)
(176,97,2)
(217,170,2)
(194,83,2)
(129,233,2)
(27,219,2)
(217,5,2)
(24,217,2)
(121,237,2)
(131,97,2)
(15,219,2)
(161,219,2)
(173,97,2)
(183,219,2)
(72,198,2)
(18,219,2)
(122,97,2)
(78,219,2)
(167,158,2)
(4,214,2)
(134,221,2)
(77,170,2)
(24,83,2)
(152,97,2)
(216,219,2)
(156,219,2)
(150,12,2)
(208,198,2)
(234,12,2)
(212,97,2)
(122,134,2)
(207,198,2)
(57,219,2)
(211,97,2)
(203,83,2)
(206,217,2)
(85,97,2)
(59,109,2)
(31,219,2)
(219,3,2)
(22,170,2)
(220,198,2)
(233,185,2)
(11,233,2)
(51,219,2)
(215,198,2)
(130,219,2)
(104,198,2)
(20,97,2)
(171,233,2)
(217,198,2)
(205,219,2)
(42,233,2)
(175,219,2)
(84,219,2)
(188,97,2)
(24,182,2)
(91,219,2)
(74,97,2)
(158,216,2)
(186,233,2)
(193,97,2)
(70,219,2)
(73,198,2)
(102,170,2)
(100,219,2)
(207,208,2)
(56,18,2)
(180,83,2)
(138,97,2)
(47,219,2)
(83,202,2)
(133,97,2)
(23,219,2)
(208,159,2)
(180,182,2)
(223,97,2)
(86,214,2)
(74,219,2)
(47,97,2)
(92,83,2)
(154,155,2)
(135,219,2)
(192,219,2)
(205,97,2)
(238,233,2)
(114,170,2)
(31,97,2)
(133,219,2)
(37,170,2)
(142,219,2)
(73,170,2)
(236,221,2)
(188,182,2)
(221,34,2)
(35,97,2)
(166,97,2)
(109,62,2)
(236,97,2)
(189,219,2)
(111,53,2)
(123,219,2)
(136,97,2)
(107,97,2)
(63,97,2)
(81,170,2)
(158,153,2)
(115,219,2)
(219,170,2)
(3,24,2)
(108,97,2)
(160,219,2)
(140,216,2)
(184,233,2)
(92,198,2)
(60,198,2)
(33,219,2)
(228,198,2)
(5,170,2)
(35,219,2)
(84,12,2)
(89,219,2)
(23,97,2)
(39,219,2)
(220,170,2)
(198,150,2)
(149,219,2)
(121,198,2)
(170,198,2)
(149,97,2)
(212,219,2)
(160,97,2)
(41,97,2)
(62,187,2)
(138,111,2)
(124,114,2)
(84,97,2)
(55,184,2)
(9,170,2)
(207,12,2)
(2,109,2)
(30,97,2)
(232,170,2)
(144,198,2)
(239,170,2)
(131,219,2)
(141,198,2)
(147,170,2)
(225,221,2)
(28,198,2)
(148,198,2)
(56,128,2)
(96,198,2)
(191,219,2)
(61,97,2)
(45,219,2)
(8,170,2)
(181,219,2)
(71,170,2)
(132,198,2)
(0,219,2)
(114,198,2)
(143,97,2)
(138,219,2)
(204,97,2)
(154,219,2)
(77,198,2)
(218,170,2)
(26,170,2)
(140,153,2)
(107,219,2)
(1,97,2)
(158,109,2)
(213,198,2)
(134,83,2)
(158,1,2)
(187,221,2)
(199,198,2)
(227,219,2)
(126,198,2)
(6,219,2)
(156,97,2)
(71,198,2)
(174,219,2)
(134,97,2)
-----------------------------------
(0,openmaxStandComp)
(1,omx_volume_component_Private->ports[i])
(2,i)
(3,!omx_volume_component_Private->ports)
(4,return err;)
(5,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(6,OMX_BASE_FILTER_INPUTPORT_INDEX)
(7,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE)
(8,sPortTypesParam)
(9,OMX_ErrorInsufficientResources)
(10,openmaxStandComp->GetConfig)
(11,i)
(12,OMX_COMPONENTTYPE *openmaxStandComp)
(13,nBufferSize)
(14,sPortParam)
(15,openmaxStandComp)
(16,)
(17,sPortTypesParam)
(18,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize)
(19,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(20,omx_volume_component_GetConfig)
(21,OMX_PortDomainAudio)
(22,nPorts)
(23,ports)
(24,omx_volume_component_Private->ports)
(25,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(26,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(27,OMX_PortDomainAudio)
(28,openmaxStandComp)
(29,NULL)
(30,openmaxStandComp)
(31,1)
(32,__func__)
(33,openmaxStandComp)
(34,calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *)
(35,omx_volume_component_Private)
(36,omx_volume_component_Private)
(37,OMX_PortDomainAudio)
(38,)
(39,OMX_TRUE)
(40,openmaxStandComp->SetConfig)
(41,0)
(42,nPorts)
(43,)
(44,i)
(45,GetParameter)
(46,err = OMX_ErrorNone)
(47,openmaxStandComp)
(48,omx_volume_component_Private)
(49,)
(50,err)
(51,omx_volume_component_Private->gain = GAIN_VALUE)
(52,0)
(53,omx_volume_component_Private->ports[1])
(54,1)
(55,i++)
(56,return OMX_ErrorInsufficientResources;)
(57,SetConfig)
(58,i)
(59,sPortTypesParam)
(60,nStartPortNumber)
(61,gain)
(62,omx_volume_component_Private->ports[i])
(63,omx_volume_component_Private)
(64,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE)
(65,if (!omx_volume_component_Private->ports)
(66,pComponentPrivate)
(67,openmaxStandComp)
(68,openmaxStandComp)
(69,nPorts)
(70,ports)
(71,omx_volume_component_Private)
(72,2)
(73,0)
(74,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize)
(75,DEFAULT_OUT_BUFFER_SIZE)
(76,err)
(77,OMX_PortDomainAudio)
(78,omx_volume_component_SetParameter)
(79,DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, Error Component %x Already Allocated\\n", __func__, (int)
(80,omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback)
(81,openmaxStandComp)
(82,sPortTypesParam)
(83,omx_volume_component_Private = openmaxStandComp->pComponentPrivate)
(84,openmaxStandComp->GetParameter)
(85,MAX_COMPONENT_VOLUME)
(86,err)
(87,ports)
(88,i)
(89,omx_volume_component_Private->gain)
(90,cComponentName)
(91,omx_volume_component_Private->destructor = omx_volume_component_Destructor)
(92,omx_volume_component_Private->ports)
(93,omx_volume_component_Private->BufferMgmtCallback)
(94,omx_volume_component_Destructor)
(95,)
(96,pComponentPrivate)
(97,i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(98,err)
(99,if(noVolumeCompInstance > MAX_COMPONENT_VOLUME)
(100,omx_volume_component_GetParameter)
(101,sizeof(omx_volume_component_PrivateType)
(102,omx_volume_component_Private->sPortTypesParam)
(103,)
(104,openmaxStandComp->pComponentPrivate)
(105,omx_volume_component_Private)
(106,if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports)
(107,GAIN_VALUE)
(108,openmaxStandComp->SetParameter)
(109,!omx_volume_component_Private->ports[i])
(110,1)
(111,&omx_volume_component_Private->ports[1])
(112,if (!openmaxStandComp->pComponentPrivate)
(113,DEFAULT_OUT_BUFFER_SIZE)
(114,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2)
(115,ports)
(116,omx_volume_component_Private)
(117,OMX_ErrorNone)
(118,OMX_ErrorInsufficientResources)
(119,omx_volume_component_PrivateType)
(120,OMX_ErrorInsufficientResources)
(121,(int)
(122,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX])
(123,noVolumeCompInstance)
(124,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(125,OMX_BASE_FILTER_OUTPUTPORT_INDEX)
(126,pComponentPrivate)
(127,ports)
(128,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber)
(129,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(130,noVolumeCompInstance)
(131,omx_volume_component_SetConfig)
(132,pComponentPrivate)
(133,sPortParam)
(134,omx_volume_component_Private->ports)
(135,openmaxStandComp->SetParameter = omx_volume_component_SetParameter)
(136,openmaxStandComp->GetParameter = omx_volume_component_GetParameter)
(137,openmaxStandComp)
(138,base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE)
(139,)
(140,return OMX_ErrorInsufficientResources;)
(141,__func__)
(142,omx_volume_component_Private)
(143,sizeof(omx_base_audio_PortType)
(144,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0)
(145,omx_volume_component_Private)
(146,1)
(147,omx_volume_component_Private)
(148,DEBUG(DEB_LEV_FUNCTION_NAME, "In %s, allocating component\\n",__func__)
(149,GetConfig)
(150,openmaxStandComp->pComponentPrivate)
(151,destructor)
(152,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX])
(153,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(154,sizeof(omx_base_PortType *)
(155,omx_base_PortType *)
(156,ports)
(157,openmaxStandComp)
(158,return OMX_ErrorInsufficientResources;)
(159,calloc(1, sizeof(omx_volume_component_PrivateType)
(160,omx_volume_component_Private)
(161,omx_volume_component_BufferMgmtCallback)
(162,)
(163,omx_volume_component_Private)
(164,if (!omx_volume_component_Private->ports[i])
(165,OMX_PortDomainAudio)
(166,calloc(1, sizeof(omx_base_audio_PortType)
(167,RET)
(168,openmaxStandComp->SetConfig = omx_volume_component_SetConfig)
(169,omx_volume_component_Private)
(170,openmaxStandComp->pComponentPrivate == NULL)
(171,omx_volume_component_Private->sPortTypesParam)
(172,)
(173,omx_base_audio_PortType)
(174,omx_volume_component_Private)
(175,SetParameter)
(176,BufferMgmtCallback)
(177,pComponentPrivate)
(178,i)
(179,ports)
(180,omx_volume_component_Private->ports)
(181,&omx_volume_component_Private->ports[0])
(182,omx_volume_component_Private->ports = NULL)
(183,openmaxStandComp->GetConfig = omx_volume_component_GetConfig)
(184,i=0)
(185,omx_volume_component_Private->ports)
(186,omx_volume_component_Private)
(187,omx_volume_component_Private->ports)
(188,omx_volume_component_Private->ports)
(189,nPorts)
(190,ports)
(191,omx_volume_component_Private->destructor)
(192,omx_volume_component_Private)
(193,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam)
(194,omx_volume_component_Private->sPortTypesParam)
(195,"In %s, Error Component %x Already Allocated\\n")
(196,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam)
(197,omx_volume_component_Private->ports[0])
(198,!openmaxStandComp->pComponentPrivate)
(199,omx_volume_component_Private)
(200,0)
(201,OMX_ErrorInsufficientResources)
(202,openmaxStandComp->pComponentPrivate)
(203,omx_volume_component_Private->sPortTypesParam)
(204,omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType)
(205,noVolumeCompInstance++)
(206,omx_volume_component_Private)
(207,openmaxStandComp->pComponentPrivate)
(208,openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType)
(209,DEB_LEV_FUNCTION_NAME)
(210,omx_volume_component_Private)
(211,ports)
(212,omx_volume_component_Private)
(213,DEB_LEV_FUNCTION_NAME)
(214,noVolumeCompInstance > MAX_COMPONENT_VOLUME)
(215,"In %s, allocating component\\n")
(216,omx_volume_component_Private->ports)
(217,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(218,sPortTypesParam)
(219,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports)
(220,omx_volume_component_Private->sPortTypesParam)
(221,omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *)
(222,nBufferSize)
(223,OMX_FALSE)
(224,if(openmaxStandComp->pComponentPrivate == NULL)
(225,omx_volume_component_Private->ports)
(226,for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++)
(227,base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE)
(228,err = omx_base_filter_Constructor(openmaxStandComp, cComponentName)
(229,NULL)
(230,int)
(231,OMX_STRING cComponentName)
(232,openmaxStandComp)
(233,!omx_volume_component_Private->ports)
(234,omx_base_filter_Constructor(openmaxStandComp, cComponentName)
(235,return OMX_ErrorInsufficientResources;)
(236,omx_volume_component_Private->ports)
(237,openmaxStandComp->pComponentPrivate)
(238,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(239,ports)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^