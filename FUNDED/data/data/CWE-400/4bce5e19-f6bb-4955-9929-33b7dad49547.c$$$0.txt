-----label-----
0
-----code-----
static void goodG2B()
{
    twoIntsStruct * data;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    goodG2BSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
41,43
42,43
42,44
43,44
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
59,60
61,62
62,63
62,64
63,64
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,44,45,46,47,53,54,55,56,60,64,65,69,71
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    twoIntsStruct * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    goodG2BSink(data);}
static void
goodG2B()
goodG2B
{    twoIntsStruct * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    goodG2BSink(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
goodG2BSink(data);
goodG2BSink(data)
goodG2BSink
goodG2BSink
data
data
-----joern-----
(12,6,0)
(29,20,0)
(6,30,0)
(4,26,0)
(20,29,0)
(26,32,0)
(27,4,0)
(4,27,0)
(2,12,0)
(18,29,0)
(27,6,0)
(11,33,0)
(3,30,0)
(33,30,0)
(0,15,0)
(7,35,0)
(25,12,0)
(8,27,0)
(31,30,0)
(20,33,0)
(17,26,0)
(28,31,0)
(26,4,0)
(5,6,0)
(35,7,0)
(6,27,0)
(34,29,0)
(27,8,0)
(24,5,0)
(9,31,0)
(13,3,0)
(16,32,0)
(19,5,0)
(32,26,0)
(5,7,0)
(35,30,0)
(15,30,0)
(7,5,0)
(23,20,0)
(2,3,0)
(29,6,0)
(12,2,0)
(15,6,0)
(22,12,0)
(10,30,0)
(14,6,0)
(21,2,0)
(20,23,1)
(12,25,1)
(17,14,1)
(4,26,1)
(26,32,1)
(5,6,1)
(15,6,1)
(12,6,1)
(22,6,1)
(14,31,1)
(33,11,1)
(5,19,1)
(2,12,1)
(23,29,1)
(32,16,1)
(29,6,1)
(19,24,1)
(25,22,1)
(13,2,1)
(29,18,1)
(15,0,1)
(21,12,1)
(11,20,1)
(6,27,1)
(7,5,1)
(35,7,1)
(3,13,1)
(27,8,1)
(16,17,1)
(24,33,1)
(0,35,1)
(1,15,1)
(20,29,1)
(9,28,1)
(27,4,1)
(31,9,1)
(18,34,1)
(34,3,1)
(2,21,1)
(5,6,2)
(15,6,2)
(27,4,2)
(7,5,2)
(20,29,2)
(29,6,2)
(35,7,2)
(6,27,2)
(12,6,2)
(26,32,2)
(2,12,2)
(4,26,2)
(27,8,2)
-----------------------------------
(0,data)
(1,RET)
(2,data[0].intOne)
(3,data[0].intOne = 0)
(4,ALLOCA(100*sizeof(twoIntsStruct)
(5,data[0])
(6,data = (twoIntsStruct *)
(7,&data[0])
(8,twoIntsStruct *)
(9,NULL)
(10,data)
(11,0)
(12,data[0])
(13,0)
(14,data)
(15,goodG2BSink(data)
(16,twoIntsStruct)
(17,100)
(18,0)
(19,0)
(20,data[0].intTwo)
(21,intOne)
(22,data)
(23,intTwo)
(24,data)
(25,0)
(26,100*sizeof(twoIntsStruct)
(27,(twoIntsStruct *)
(28,data)
(29,data[0])
(30,)
(31,data = NULL)
(32,sizeof(twoIntsStruct)
(33,data[0].intTwo = 0)
(34,data)
(35,printStructLine(&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^