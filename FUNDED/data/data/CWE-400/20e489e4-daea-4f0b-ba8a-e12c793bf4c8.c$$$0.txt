-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_18_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    /* POTENTIAL FLAW: Set count to a random value */
    count = RAND32();
    goto sink;
sink:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
30,31
30,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
50,52
51,52
51,53
52,53
55,56
57,58
58,59
60,61
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,16,18,20,24,27,29,31,36,38,40,45,46,49,53,54,56,59,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
43,44
43,45
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_18_bad(){    int count;    /* Initialize count */    count = -1;    goto source;source:    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_18_bad()
CWE400_Resource_Exhaustion__rand_for_loop_18_bad
{    int count;    /* Initialize count */    count = -1;    goto source;source:    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();
source
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
goto sink;
sink
sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
sink
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(5,4,0)
(23,2,0)
(13,2,0)
(17,4,0)
(18,3,0)
(12,14,0)
(14,12,0)
(31,24,0)
(21,28,0)
(23,24,0)
(10,2,0)
(27,4,0)
(20,24,0)
(1,7,0)
(26,8,0)
(8,0,0)
(22,13,0)
(16,12,0)
(6,3,0)
(12,4,0)
(15,7,0)
(0,8,0)
(32,2,0)
(28,25,0)
(19,0,0)
(7,4,0)
(29,23,0)
(11,4,0)
(3,7,0)
(30,4,0)
(24,12,0)
(8,4,0)
(24,23,0)
(24,20,0)
(16,11,1)
(8,0,1)
(24,31,1)
(21,23,1)
(28,21,1)
(29,13,1)
(17,12,1)
(23,2,1)
(31,29,1)
(23,24,1)
(29,2,1)
(13,2,1)
(10,3,1)
(9,23,1)
(2,32,1)
(0,19,1)
(12,14,1)
(3,6,1)
(22,28,1)
(11,8,1)
(14,16,1)
(18,17,1)
(24,20,1)
(13,22,1)
(19,26,1)
(6,18,1)
(24,12,1)
(32,10,1)
(22,23,2)
(13,2,2)
(21,23,2)
(23,2,2)
(24,12,2)
(31,23,2)
(12,14,2)
(23,24,2)
(13,23,2)
(24,23,2)
(29,23,2)
(28,23,2)
(23,23,2)
(8,0,2)
(24,20,2)
-----------------------------------
(0,-1)
(1,for (i = 0; i < (size_t)
(2,i = 0)
(3,i = 0)
(4,)
(5,count)
(6,0)
(7,)
(8,count = -1)
(9,RET)
(10,i)
(11,goto source;)
(12,count = RAND32()
(13,i++)
(14,RAND32()
(15,i)
(16,count)
(17,goto sink;)
(18,i)
(19,1)
(20,size_t)
(21,"Hello")
(22,i)
(23,i < (size_t)
(24,(size_t)
(25,)
(26,count)
(27,source:)
(28,printLine("Hello")
(29,i)
(30,sink:)
(31,count)
(32,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^