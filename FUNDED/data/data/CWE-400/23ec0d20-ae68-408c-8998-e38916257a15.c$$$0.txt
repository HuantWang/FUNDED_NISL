-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
70,71
72,73
73,74
75,76
76,77
77,78
77,79
78,79
-----nextToken-----
2,4,8,10,14,16,20,22,26,27,32,33,35,39,41,45,46,51,53,55,60,61,64,68,69,71,74,79,80
-----computeFrom-----
18,19
18,20
24,25
24,26
29,30
29,31
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B()
goodG2B
{    int count;    CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(32,40,0)
(34,31,0)
(3,40,0)
(13,40,0)
(19,0,0)
(12,31,0)
(23,9,0)
(1,40,0)
(21,12,0)
(38,7,0)
(24,27,0)
(5,6,0)
(27,25,0)
(41,28,0)
(8,13,0)
(2,31,0)
(2,20,0)
(18,34,0)
(10,32,0)
(14,28,0)
(33,29,0)
(15,29,0)
(7,22,0)
(26,0,0)
(11,22,0)
(17,31,0)
(22,9,0)
(34,0,0)
(36,9,0)
(9,22,0)
(7,13,0)
(30,2,0)
(6,29,0)
(7,38,0)
(37,20,0)
(4,6,0)
(20,2,0)
(35,31,0)
(29,12,0)
(13,7,0)
(0,31,0)
(28,34,0)
(22,12,0)
(39,7,0)
(3,1,1)
(6,4,1)
(34,0,1)
(1,6,1)
(11,34,1)
(4,5,1)
(16,13,1)
(18,28,1)
(39,8,1)
(9,36,1)
(7,22,1)
(28,14,1)
(23,11,1)
(34,18,1)
(13,40,1)
(8,40,1)
(26,2,1)
(2,20,1)
(5,22,1)
(8,32,1)
(19,26,1)
(7,38,1)
(0,19,1)
(37,30,1)
(36,23,1)
(14,41,1)
(13,7,1)
(41,0,1)
(32,10,1)
(32,40,1)
(40,3,1)
(22,9,1)
(10,27,1)
(20,37,1)
(27,24,1)
(7,39,1)
(24,13,1)
(13,40,2)
(13,13,2)
(7,38,2)
(32,13,2)
(2,20,2)
(10,13,2)
(34,0,2)
(22,9,2)
(13,7,2)
(39,13,2)
(7,13,2)
(27,13,2)
(7,22,2)
(8,13,2)
(24,13,2)
(32,40,2)
-----------------------------------
(0,count = 20)
(1,i)
(2,count = -1)
(3,0)
(4,0)
(5,i)
(6,i = 0)
(7,(size_t)
(8,i)
(9,myUnion.unionSecond)
(10,i)
(11,count)
(12,)
(13,i < (size_t)
(14,unionFirst)
(15,for (i = 0; i < (size_t)
(16,RET)
(17,myUnion)
(18,count)
(19,20)
(20,-1)
(21,count)
(22,count = myUnion.unionSecond)
(23,myUnion)
(24,"Hello")
(25,)
(26,count)
(27,printLine("Hello")
(28,myUnion.unionFirst)
(29,)
(30,count)
(31,)
(32,i++)
(33,i)
(34,myUnion.unionFirst = count)
(35,count)
(36,unionSecond)
(37,1)
(38,size_t)
(39,count)
(40,i = 0)
(41,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^