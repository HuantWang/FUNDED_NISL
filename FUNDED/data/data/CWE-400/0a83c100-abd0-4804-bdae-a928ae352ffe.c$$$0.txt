-----label-----
0
-----code-----
static void good1()
{
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            wchar_t * tmpData;
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
9,10
10,11
11,12
11,13
12,13
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
17,18
18,19
18,20
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
54,55
54,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
79,82
80,81
82,83
84,85
84,86
85,86
87,88
88,89
88,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
105,108
106,107
108,109
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,13,14,19,21,22,26,28,31,33,36,37,41,43,48,50,53,55,56,60,62,63,67,69,73,76,78,81,83,86,89,90,94,96,101,103,107,109,110,114,116,120,122
-----computeFrom-----
32,33
32,34
39,40
39,41
71,72
71,73
84,85
84,86
92,93
92,94
99,100
99,101
-----guardedBy-----
94,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }}
static void
good1()
good1
{    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }}
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wchar_t * tmpData;
wchar_t * tmpData;
wchar_t
* tmpData
*
tmpData
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
tmpData
tmpData
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(40,21,0)
(27,32,0)
(2,23,0)
(31,33,0)
(39,44,0)
(37,7,0)
(29,24,0)
(16,5,0)
(36,31,0)
(0,33,0)
(19,35,0)
(21,4,0)
(48,29,0)
(4,51,0)
(51,24,0)
(5,4,0)
(27,4,0)
(43,25,0)
(21,12,0)
(3,12,0)
(51,4,0)
(23,2,0)
(42,46,0)
(22,36,0)
(27,43,0)
(28,51,0)
(24,29,0)
(15,12,0)
(1,32,0)
(7,29,0)
(29,7,0)
(43,33,0)
(41,12,0)
(33,43,0)
(18,31,0)
(20,44,0)
(46,26,0)
(32,27,0)
(30,2,0)
(23,45,0)
(44,33,0)
(24,51,0)
(35,50,0)
(12,9,0)
(34,12,0)
(36,12,0)
(43,27,0)
(33,12,0)
(6,38,0)
(32,1,0)
(14,32,0)
(11,1,0)
(4,12,0)
(47,4,0)
(46,31,0)
(8,5,0)
(51,28,0)
(17,31,0)
(25,43,0)
(31,26,0)
(36,4,0)
(10,27,0)
(44,39,1)
(31,18,1)
(10,0,1)
(40,5,1)
(18,17,1)
(40,23,1)
(8,16,1)
(5,8,1)
(23,2,1)
(46,31,1)
(4,51,1)
(43,27,1)
(11,14,1)
(39,20,1)
(37,48,1)
(36,4,1)
(33,43,1)
(30,5,1)
(27,32,1)
(36,31,1)
(29,7,1)
(31,33,1)
(19,49,1)
(21,40,1)
(21,4,1)
(20,33,1)
(22,46,1)
(46,42,1)
(17,44,1)
(14,10,1)
(0,21,1)
(7,37,1)
(43,25,1)
(51,28,1)
(1,11,1)
(2,30,1)
(22,44,1)
(42,31,1)
(48,47,1)
(36,22,1)
(13,36,1)
(5,4,1)
(13,35,1)
(51,24,1)
(32,1,1)
(27,4,1)
(47,49,1)
(16,4,1)
(44,33,1)
(24,29,1)
(35,19,1)
(35,49,2)
(14,49,2)
(1,49,2)
(36,4,2)
(19,49,2)
(0,49,2)
(51,49,2)
(37,49,2)
(21,4,2)
(29,49,2)
(17,44,2)
(29,7,2)
(51,28,2)
(5,49,2)
(36,31,2)
(43,25,2)
(23,5,2)
(27,49,2)
(31,33,2)
(32,1,2)
(30,5,2)
(24,49,2)
(33,49,2)
(33,43,2)
(44,33,2)
(24,29,2)
(42,44,2)
(21,49,2)
(4,51,2)
(47,49,2)
(8,49,2)
(39,49,2)
(31,44,2)
(22,49,2)
(46,44,2)
(46,31,2)
(5,4,2)
(32,49,2)
(16,49,2)
(43,27,2)
(40,49,2)
(43,49,2)
(10,49,2)
(51,24,2)
(4,49,2)
(20,49,2)
(23,2,2)
(18,44,2)
(11,49,2)
(7,49,2)
(48,49,2)
(27,4,2)
(2,5,2)
(36,49,2)
(27,32,2)
(44,49,2)
-----------------------------------
(0,tmpData)
(1,sizeof(wchar_t)
(2,-1)
(3,tmpData)
(4,* data = (wchar_t *)
(5,data == NULL)
(6,if(GLOBAL_CONST_FALSE)
(7,sizeof(wchar_t)
(8,NULL)
(9,)
(10,data)
(11,wchar_t)
(12,)
(13,RET)
(14,130000)
(15,if (data == NULL)
(16,data)
(17,data)
(18,tmpData)
(19,"Benign, fixed string")
(20,tmpData)
(21,printWLine(data)
(22,data)
(23,exit(-1)
(24,malloc(100*sizeof(wchar_t)
(25,wchar_t *)
(26,)
(27,realloc(data, (130000)
(28,wchar_t *)
(29,100*sizeof(wchar_t)
(30,1)
(31,data = tmpData)
(32,(130000)
(33,tmpData = (wchar_t *)
(34,if (tmpData != NULL)
(35,printLine("Benign, fixed string")
(36,free(data)
(37,wchar_t)
(38,)
(39,NULL)
(40,data)
(41,data)
(42,data)
(43,(wchar_t *)
(44,tmpData != NULL)
(45,)
(46,printWLine(data)
(47,data)
(48,100)
(49,GLOBAL_CONST_FALSE)
(50,)
(51,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^