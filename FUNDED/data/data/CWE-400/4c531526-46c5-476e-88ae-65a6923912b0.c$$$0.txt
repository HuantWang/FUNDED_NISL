-----label-----
0
-----code-----
static void good1()
{
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
96,97
97,98
97,99
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
106,109
107,108
109,110
111,112
111,113
112,113
114,115
115,116
115,117
116,117
119,120
119,121
120,121
120,122
121,122
123,124
125,126
125,127
125,128
125,129
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
141,142
142,143
142,144
143,144
143,145
144,145
144,146
145,146
150,151
151,152
151,153
152,153
154,155
154,156
155,156
155,157
156,157
158,159
160,161
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
-----nextToken-----
2,4,9,10,15,16,22,24,25,30,32,35,37,41,42,46,48,53,55,59,61,62,68,69,70,71,77,78,79,80,84,88,90,94,95,99,103,105,108,110,113,117,118,122,124,129,131,137,138,139,140,146,147,148,149,153,157,159,163,164,168,170
-----computeFrom-----
7,8
7,9
36,37
36,38
44,45
44,46
64,65
64,66
73,74
73,75
97,98
97,99
111,112
111,113
120,121
120,122
127,128
127,129
133,134
133,135
142,143
142,144
-----guardedBy-----
122,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(38,76,0)
(89,8,0)
(8,44,0)
(68,3,0)
(12,50,0)
(73,77,0)
(65,13,0)
(35,8,0)
(66,8,0)
(58,14,0)
(29,76,0)
(15,63,0)
(25,32,0)
(31,77,0)
(42,59,0)
(1,33,0)
(57,16,0)
(68,62,0)
(32,52,0)
(87,64,0)
(55,66,0)
(40,8,0)
(45,0,0)
(86,23,0)
(50,76,0)
(59,23,0)
(43,64,0)
(21,7,0)
(76,28,0)
(21,13,0)
(62,13,0)
(26,11,0)
(13,8,0)
(42,9,0)
(3,2,0)
(47,65,0)
(58,50,0)
(78,73,0)
(41,58,0)
(56,76,0)
(7,21,0)
(77,0,0)
(69,16,0)
(88,23,0)
(59,42,0)
(85,71,0)
(39,80,0)
(22,71,0)
(62,68,0)
(20,79,0)
(49,48,0)
(61,79,0)
(11,33,0)
(79,87,0)
(23,76,0)
(60,18,0)
(76,77,0)
(77,8,0)
(33,8,0)
(72,20,0)
(30,83,0)
(20,72,0)
(0,45,0)
(83,48,0)
(6,73,0)
(27,13,0)
(67,8,0)
(9,42,0)
(65,57,0)
(13,64,0)
(27,8,0)
(5,21,0)
(16,69,0)
(34,50,0)
(37,42,0)
(18,60,0)
(51,63,0)
(62,0,0)
(19,29,0)
(7,66,0)
(87,79,0)
(24,21,0)
(64,87,0)
(14,28,0)
(46,14,0)
(27,76,0)
(23,59,0)
(82,65,0)
(3,68,0)
(17,68,0)
(57,65,0)
(71,13,0)
(11,74,0)
(74,13,0)
(50,58,0)
(89,16,0)
(91,74,0)
(54,13,0)
(64,43,0)
(37,28,0)
(81,27,0)
(74,11,0)
(0,77,0)
(60,84,0)
(0,62,0)
(64,13,0)
(53,7,0)
(70,18,0)
(36,29,0)
(10,74,0)
(29,83,0)
(2,3,0)
(4,62,0)
(48,28,0)
(83,29,0)
(16,57,0)
(90,8,0)
(79,20,0)
(42,37,0)
(16,89,0)
(22,85,1)
(30,29,1)
(23,86,1)
(85,13,1)
(54,63,1)
(21,13,1)
(3,17,1)
(7,21,1)
(83,30,1)
(77,0,1)
(58,50,1)
(86,88,1)
(75,32,1)
(12,48,1)
(62,13,1)
(31,89,1)
(27,81,1)
(87,79,1)
(56,73,1)
(20,72,1)
(0,62,1)
(38,56,1)
(91,10,1)
(58,41,1)
(24,5,1)
(74,13,1)
(76,77,1)
(16,69,1)
(73,6,1)
(47,82,1)
(74,91,1)
(65,47,1)
(59,23,1)
(17,4,1)
(42,9,1)
(34,12,1)
(63,15,1)
(21,24,1)
(61,54,1)
(60,18,1)
(64,87,1)
(57,65,1)
(82,33,1)
(20,61,1)
(14,46,1)
(37,42,1)
(83,29,1)
(41,50,1)
(32,25,1)
(70,71,1)
(65,13,1)
(27,13,1)
(16,57,1)
(50,34,1)
(71,22,1)
(81,73,1)
(48,49,1)
(36,19,1)
(1,11,1)
(23,76,1)
(46,58,1)
(75,27,1)
(18,70,1)
(3,2,1)
(15,51,1)
(5,71,1)
(55,7,1)
(19,76,1)
(11,74,1)
(62,68,1)
(78,77,1)
(64,43,1)
(11,26,1)
(13,64,1)
(4,31,1)
(33,1,1)
(79,20,1)
(0,45,1)
(66,55,1)
(88,14,1)
(89,16,1)
(5,60,1)
(42,59,1)
(73,77,1)
(7,53,1)
(76,38,1)
(6,78,1)
(29,76,1)
(81,37,1)
(26,74,1)
(25,63,1)
(27,76,1)
(71,13,1)
(53,21,1)
(50,76,1)
(68,3,1)
(29,36,1)
(10,66,1)
(49,83,1)
(4,63,2)
(30,73,2)
(50,76,2)
(46,73,2)
(27,63,2)
(23,73,2)
(79,63,2)
(47,63,2)
(26,63,2)
(59,73,2)
(16,63,2)
(87,79,2)
(87,63,2)
(62,68,2)
(5,63,2)
(13,64,2)
(57,63,2)
(23,76,2)
(6,63,2)
(53,63,2)
(19,73,2)
(65,63,2)
(89,16,2)
(60,18,2)
(54,63,2)
(58,50,2)
(83,73,2)
(83,29,2)
(64,43,2)
(74,13,2)
(7,21,2)
(0,62,2)
(91,63,2)
(25,63,2)
(13,63,2)
(55,63,2)
(65,13,2)
(11,63,2)
(37,42,2)
(12,73,2)
(68,63,2)
(70,71,2)
(79,20,2)
(20,72,2)
(64,63,2)
(3,63,2)
(73,63,2)
(33,63,2)
(77,63,2)
(82,63,2)
(0,63,2)
(56,73,2)
(38,73,2)
(32,63,2)
(41,73,2)
(64,87,2)
(16,57,2)
(7,63,2)
(48,73,2)
(88,73,2)
(68,3,2)
(61,63,2)
(3,2,2)
(37,73,2)
(34,73,2)
(57,65,2)
(78,63,2)
(21,63,2)
(24,63,2)
(60,71,2)
(62,63,2)
(62,13,2)
(89,63,2)
(58,73,2)
(29,73,2)
(20,63,2)
(81,63,2)
(27,13,2)
(66,63,2)
(74,63,2)
(10,63,2)
(29,76,2)
(85,63,2)
(42,59,2)
(42,9,2)
(14,73,2)
(21,13,2)
(1,63,2)
(18,71,2)
(22,63,2)
(27,76,2)
(71,63,2)
(50,73,2)
(76,73,2)
(11,74,2)
(49,73,2)
(36,73,2)
(31,63,2)
(86,73,2)
(17,63,2)
(0,45,2)
(76,77,2)
(71,13,2)
(42,73,2)
(59,23,2)
(16,69,2)
(77,0,2)
(73,77,2)
-----------------------------------
(0,(struct _twoIntsStruct *)
(1,0)
(2,struct _twoIntsStruct)
(3,sizeof(struct _twoIntsStruct)
(4,data)
(5,data)
(6,NULL)
(7,data[0].intOne)
(8,)
(9,twoIntsStruct *)
(10,data)
(11,data[0].intTwo)
(12,data)
(13,* data = (struct _twoIntsStruct *)
(14,data[0].intTwo = 1)
(15,5)
(16,(twoIntsStruct *)
(17,130000)
(18,-1)
(19,data)
(20,sizeof(struct _twoIntsStruct)
(21,data[0])
(22,NULL)
(23,data[0])
(24,0)
(25,"Benign, fixed string")
(26,intTwo)
(27,free(data)
(28,)
(29,data[0])
(30,intOne)
(31,tmpData)
(32,printLine("Benign, fixed string")
(33,data[0].intTwo = 0)
(34,0)
(35,tmpData)
(36,0)
(37,printStructLine((twoIntsStruct *)
(38,tmpData)
(39,if(STATIC_CONST_FIVE!=5)
(40,if (data == NULL)
(41,intTwo)
(42,(twoIntsStruct *)
(43,struct _twoIntsStruct *)
(44,)
(45,struct _twoIntsStruct *)
(46,1)
(47,0)
(48,data[0].intOne = 1)
(49,1)
(50,data[0])
(51,STATIC_CONST_FIVE)
(52,)
(53,intOne)
(54,data)
(55,0)
(56,data)
(57,&data[0])
(58,data[0].intTwo)
(59,&data[0])
(60,exit(-1)
(61,100)
(62,realloc(data, (130000)
(63,STATIC_CONST_FIVE!=5)
(64,(struct _twoIntsStruct *)
(65,data[0])
(66,data[0].intOne = 0)
(67,if (tmpData != NULL)
(68,(130000)
(69,twoIntsStruct *)
(70,1)
(71,data == NULL)
(72,struct _twoIntsStruct)
(73,tmpData != NULL)
(74,data[0])
(75,RET)
(76,data = tmpData)
(77,tmpData = (struct _twoIntsStruct *)
(78,tmpData)
(79,100*sizeof(struct _twoIntsStruct)
(80,)
(81,data)
(82,data)
(83,data[0].intOne)
(84,)
(85,data)
(86,0)
(87,malloc(100*sizeof(struct _twoIntsStruct)
(88,data)
(89,printStructLine((twoIntsStruct *)
(90,data)
(91,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^