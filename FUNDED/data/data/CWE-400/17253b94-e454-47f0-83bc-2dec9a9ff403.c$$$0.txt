-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
73,74
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,71,72,77,79
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }
5==5
5
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(19,40,0)
(2,23,0)
(42,37,0)
(12,15,0)
(20,7,0)
(10,36,0)
(24,12,0)
(29,30,0)
(12,41,0)
(30,14,0)
(18,14,0)
(0,37,0)
(33,36,0)
(25,41,0)
(22,1,0)
(23,2,0)
(17,42,0)
(27,5,0)
(15,2,0)
(38,42,0)
(22,42,0)
(39,5,0)
(31,38,0)
(39,35,0)
(4,10,0)
(9,37,0)
(2,42,0)
(36,37,0)
(3,10,0)
(43,38,0)
(38,36,0)
(5,39,0)
(2,15,0)
(15,12,0)
(0,10,0)
(8,14,0)
(26,22,0)
(42,2,0)
(10,0,0)
(34,11,0)
(32,11,0)
(28,14,0)
(13,40,0)
(41,12,0)
(22,30,0)
(10,42,0)
(16,30,0)
(6,7,0)
(40,42,0)
(32,34,1)
(2,23,1)
(10,4,1)
(38,43,1)
(22,30,1)
(5,27,1)
(10,42,1)
(13,42,1)
(40,19,1)
(6,11,1)
(27,40,1)
(43,31,1)
(30,16,1)
(41,25,1)
(7,20,1)
(10,36,1)
(4,3,1)
(21,22,1)
(40,42,1)
(2,15,1)
(38,42,1)
(36,33,1)
(11,32,1)
(21,7,1)
(31,40,1)
(26,7,1)
(42,2,1)
(19,13,1)
(24,17,1)
(16,29,1)
(33,38,1)
(0,10,1)
(17,11,1)
(20,6,1)
(15,12,1)
(34,30,1)
(25,24,1)
(22,26,1)
(39,5,1)
(3,36,1)
(12,41,1)
(22,42,1)
(6,0,1)
(31,39,1)
(0,11,2)
(25,11,2)
(15,12,2)
(43,11,2)
(10,36,2)
(15,11,2)
(42,2,2)
(10,11,2)
(19,11,2)
(41,11,2)
(36,11,2)
(12,41,2)
(26,7,2)
(13,11,2)
(33,11,2)
(3,11,2)
(42,11,2)
(2,23,2)
(24,11,2)
(4,11,2)
(38,11,2)
(22,7,2)
(31,11,2)
(39,40,2)
(0,10,2)
(27,40,2)
(10,42,2)
(22,30,2)
(40,11,2)
(22,42,2)
(38,42,2)
(40,42,2)
(39,5,2)
(2,15,2)
(2,11,2)
(12,11,2)
(17,11,2)
(5,40,2)
-----------------------------------
(0,printIntLine(data[0])
(1,)
(2,(int *)
(3,data)
(4,0)
(5,-1)
(6,5)
(7,5==5)
(8,if(5==5)
(9,if (data == NULL)
(10,data[0])
(11,5==5)
(12,100*sizeof(int)
(13,data)
(14,)
(15,malloc(100*sizeof(int)
(16,NULL)
(17,data)
(18,if(5==5)
(19,NULL)
(20,5)
(21,RET)
(22,free(data)
(23,int *)
(24,100)
(25,int)
(26,data)
(27,1)
(28,data)
(29,data)
(30,data = NULL)
(31,data)
(32,5)
(33,5)
(34,5)
(35,)
(36,data[0] = 5)
(37,)
(38,data[0])
(39,exit(-1)
(40,data == NULL)
(41,sizeof(int)
(42,data = (int *)
(43,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^