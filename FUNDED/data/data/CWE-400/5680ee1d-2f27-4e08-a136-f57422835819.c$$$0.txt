-----label-----
1
-----code-----
static int conf_run(struct ast_channel *chan, struct ast_conference *conf, struct ast_flags64 *confflags, char *optargs[])
{
	struct ast_conf_user *user = NULL;
	int fd;
	struct dahdi_confinfo dahdic, dahdic_empty;
	struct ast_frame *f;
	struct ast_channel *c;
	struct ast_frame fr;
	int outfd;
	int ms;
	int nfds;
	int res;
	int retrydahdi;
	int origfd;
	int musiconhold = 0, mohtempstopped = 0;
	int firstpass = 0;
	int lastmarked = 0;
	int currentmarked = 0;
	int ret = -1;
	int x;
	int menu_active = 0;
	int menu8_active = 0;
	int talkreq_manager = 0;
	int using_pseudo = 0;
	int duration = 20;
	int sent_event = 0;
	int checked = 0;
	int announcement_played = 0;
	struct timeval now;
	struct ast_dsp *dsp = NULL;
	struct ast_app *agi_app;
	char *agifile, *mod_speex;
	const char *agifiledefault = "conf-background.agi", *tmpvar;
	char meetmesecs[30] = "";
	char exitcontext[AST_MAX_CONTEXT] = "";
	char recordingtmp[AST_MAX_EXTENSION] = "";
	char members[10] = "";
	int dtmf, opt_waitmarked_timeout = 0;
	time_t timeout = 0;
	struct dahdi_bufferinfo bi;
	char __buf[CONF_SIZE + AST_FRIENDLY_OFFSET];
	char *buf = __buf + AST_FRIENDLY_OFFSET;
	char *exitkeys = NULL;
	unsigned int calldurationlimit = 0;
	long timelimit = 0;
	long play_warning = 0;
	long warning_freq = 0;
	const char *warning_sound = NULL;
	const char *end_sound = NULL;
	char *parse;
	long time_left_ms = 0;
	struct timeval nexteventts = { 0, };
	int to;
	int setusercount = 0;
	int confsilence = 0, totalsilence = 0;
	char *mailbox, *context;
	struct ast_format_cap *cap_slin = ast_format_cap_alloc_nolock();
	struct ast_format tmpfmt;

	if (!cap_slin) {
		goto conf_run_cleanup;
	}
	ast_format_cap_add(cap_slin, ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0));

	if (!(user = ao2_alloc(sizeof(*user), NULL))) {
		goto conf_run_cleanup;
	}

	/* Possible timeout waiting for marked user */
	if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&
		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&
		(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1) &&
		(opt_waitmarked_timeout > 0)) {
		timeout = time(NULL) + opt_waitmarked_timeout;
	}

	if (ast_test_flag64(confflags, CONFFLAG_DURATION_STOP) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])) {
		calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP]);
		ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit);
	}

	if (ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])) {
		char *limit_str, *warning_str, *warnfreq_str;
		const char *var;

		parse = optargs[OPT_ARG_DURATION_LIMIT];
		limit_str = strsep(&parse, ":");
		warning_str = strsep(&parse, ":");
		warnfreq_str = parse;

		timelimit = atol(limit_str);
		if (warning_str)
			play_warning = atol(warning_str);
		if (warnfreq_str)
			warning_freq = atol(warnfreq_str);

		if (!timelimit) {
			timelimit = play_warning = warning_freq = 0;
			warning_sound = NULL;
		} else if (play_warning > timelimit) {
			if (!warning_freq) {
				play_warning = 0;
			} else {
				while (play_warning > timelimit)
					play_warning -= warning_freq;
				if (play_warning < 1)
					play_warning = warning_freq = 0;
			}
		}

		ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit);
		if (play_warning) {
			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);
		}
		if (warning_freq) {
			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);
		}

		ast_channel_lock(chan);
		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))) {
			var = ast_strdupa(var);
		}
		ast_channel_unlock(chan);

		warning_sound = var ? var : "timeleft";

		ast_channel_lock(chan);
		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))) {
			var = ast_strdupa(var);
		}
		ast_channel_unlock(chan);

		end_sound = var ? var : NULL;

		/* undo effect of S(x) in case they are both used */
		calldurationlimit = 0;
		/* more efficient do it like S(x) does since no advanced opts */
		if (!play_warning && !end_sound && timelimit) {
			calldurationlimit = timelimit / 1000;
			timelimit = play_warning = warning_freq = 0;
		} else {
			ast_debug(2, "Limit Data for this call:\n");
			ast_debug(2, "- timelimit     = %ld\n", timelimit);
			ast_debug(2, "- play_warning  = %ld\n", play_warning);
			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);
			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");
			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");
		}
	}

	/* Get exit keys */
	if (ast_test_flag64(confflags, CONFFLAG_KEYEXIT)) {
		if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS]))
			exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);
		else
			exitkeys = ast_strdupa("#"); /* Default */
	}

	if (ast_test_flag64(confflags, CONFFLAG_RECORDCONF)) {
		if (!conf->recordingfilename) {
			const char *var;
			ast_channel_lock(chan);
			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {
				conf->recordingfilename = ast_strdup(var);
			}
			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {
				conf->recordingformat = ast_strdup(var);
			}
			ast_channel_unlock(chan);
			if (!conf->recordingfilename) {
				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));
				conf->recordingfilename = ast_strdup(recordingtmp);
			}
			if (!conf->recordingformat) {
				conf->recordingformat = ast_strdup("wav");
			}
			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",
				    conf->confno, conf->recordingfilename, conf->recordingformat);
		}
	}

	ast_mutex_lock(&conf->recordthreadlock);
	if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) &&
		((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {
		ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
		ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
		dahdic.chan = 0;
		dahdic.confno = conf->dahdiconf;
		dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;
		if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {
			ast_log(LOG_WARNING, "Error starting listen channel\n");
			ast_hangup(conf->lchan);
			conf->lchan = NULL;
		} else {
			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);
		}
	}
	ast_mutex_unlock(&conf->recordthreadlock);

	ast_mutex_lock(&conf->announcethreadlock);
	if ((conf->announcethread == AST_PTHREADT_NULL) && !ast_test_flag64(confflags, CONFFLAG_QUIET) &&
		ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)) {
		ast_mutex_init(&conf->announcelistlock);
		AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist);
		ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf);
	}
	ast_mutex_unlock(&conf->announcethreadlock);

	time(&user->jointime);

	user->timelimit = timelimit;
	user->play_warning = play_warning;
	user->warning_freq = warning_freq;
	user->warning_sound = warning_sound;
	user->end_sound = end_sound;

	if (calldurationlimit > 0) {
		time(&user->kicktime);
		user->kicktime = user->kicktime + calldurationlimit;
	}

	if (ast_tvzero(user->start_time))
		user->start_time = ast_tvnow();
	time_left_ms = user->timelimit;

	if (user->timelimit) {
		nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));
		nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000));
	}

	if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))) {
		/* Sorry, but this conference is locked! */
		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))
			ast_waitstream(chan, "");
		goto outrun;
	}

   	ast_mutex_lock(&conf->playlock);

	if (rt_schedule && conf->maxusers) {
		if (conf->users >= conf->maxusers) {
			/* Sorry, but this confernce has reached the participant limit! */
			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))
				ast_waitstream(chan, "");
			ast_mutex_unlock(&conf->playlock);
			goto outrun;
		}
	}

	ao2_lock(conf->usercontainer);
	ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &user->user_no);
	user->user_no++;
	ao2_link(conf->usercontainer, user);
	ao2_unlock(conf->usercontainer);

	user->chan = chan;
	user->userflags = *confflags;
	user->adminflags = ast_test_flag64(confflags, CONFFLAG_STARTMUTED) ? ADMINFLAG_SELFMUTED : 0;
	user->adminflags |= (conf->gmuted) ? ADMINFLAG_MUTED : 0;
	user->talking = -1;

	ast_mutex_unlock(&conf->playlock);

	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC))) {
		char destdir[PATH_MAX];

		snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR);

		if (ast_mkdir(destdir, 0777) != 0) {
			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));
			goto outrun;
		}

		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){
			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);
			mailbox = strsep(&context, "@");

			if (ast_strlen_zero(mailbox)) {
				/* invalid input, clear the v flag*/
				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);
				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");
			} else {
				if (ast_strlen_zero(context)) {
				    context = "default";
				}
				/* if there is no mailbox we don't need to do this logic  */
				snprintf(user->namerecloc, sizeof(user->namerecloc),
					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);

				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */
				if (!ast_fileexists(user->namerecloc, NULL, NULL)){
					snprintf(user->namerecloc, sizeof(user->namerecloc),
						 "%s/meetme-username-%s-%d", destdir,
						 conf->confno, user->user_no);
					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);
				}
			}
		} else {
			snprintf(user->namerecloc, sizeof(user->namerecloc),
				 "%s/meetme-username-%s-%d", destdir,
				 conf->confno, user->user_no);
		}

		res = 0;
		if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL))
			res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);
		else if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))
			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);
		if (res == -1)
			goto outrun;

	}

	ast_mutex_lock(&conf->playlock);

	if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER))
		conf->markedusers++;
	conf->users++;
	if (rt_log_members) {
		/* Update table */
		snprintf(members, sizeof(members), "%d", conf->users);
		ast_realtime_require_field("meetme",
			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),
			"members", RQ_UINTEGER1, strlen(members),
			NULL);
		ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);
	}
	setusercount = 1;

	/* This device changed state now - if this is the first user */
	if (conf->users == 1)
		ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno);

	ast_mutex_unlock(&conf->playlock);

	/* return the unique ID of the conference */
	pbx_builtin_setvar_helper(chan, "MEETMEUNIQUEID", conf->uniqueid);

	if (ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)) {
		ast_channel_lock(chan);
		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))) {
			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));
		} else if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {
			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));
		} else {
			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));
		}
		ast_channel_unlock(chan);
	}

	/* Play an arbitrary intro message */
	if (ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&
			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])) {
		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {
			ast_waitstream(chan, "");
		}
	}

	if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))) {
		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))
			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))
				ast_waitstream(chan, "");
		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)
			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))
				ast_waitstream(chan, "");
	}

	if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {
		int keepplaying = 1;

		if (conf->users == 2) {
			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
				res = ast_waitstream(chan, AST_DIGIT_ANY);
				ast_stopstream(chan);
				if (res > 0)
					keepplaying = 0;
				else if (res == -1)
					goto outrun;
			}
		} else {
			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
				res = ast_waitstream(chan, AST_DIGIT_ANY);
				ast_stopstream(chan);
				if (res > 0)
					keepplaying = 0;
				else if (res == -1)
					goto outrun;
			}
			if (keepplaying) {
				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
				if (res > 0)
					keepplaying = 0;
				else if (res == -1)
					goto outrun;
			}
			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
				res = ast_waitstream(chan, AST_DIGIT_ANY);
				ast_stopstream(chan);
				if (res > 0)
					keepplaying = 0;
				else if (res == -1)
					goto outrun;
			}
		}
	}

	if (!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)) {
		/* We're leaving this alone until the state gets changed to up */
		ast_indicate(chan, -1);
	}

	if (ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {
		ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan));
		goto outrun;
	}

	if (ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {
		ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan));
		goto outrun;
	}

	/* Reduce background noise from each participant */
	if ((mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0))) {
		ast_free(mod_speex);
		ast_func_write(chan, "DENOISE(rx)", "on");
	}

	retrydahdi = (strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0);
	user->dahdichannel = !retrydahdi;

 dahdiretry:
	origfd = ast_channel_fd(chan, 0);
	if (retrydahdi) {
		/* open pseudo in non-blocking mode */
		fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK);
		if (fd < 0) {
			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));
			goto outrun;
		}
		using_pseudo = 1;
		/* Setup buffering information */
		memset(&bi, 0, sizeof(bi));
		bi.bufsize = CONF_SIZE / 2;
		bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE;
		bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE;
		bi.numbufs = audio_buffers;
		if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)) {
			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));
			close(fd);
			goto outrun;
		}
		x = 1;
		if (ioctl(fd, DAHDI_SETLINEAR, &x)) {
			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));
			close(fd);
			goto outrun;
		}
		nfds = 1;
	} else {
		/* XXX Make sure we're not running on a pseudo channel XXX */
		fd = ast_channel_fd(chan, 0);
		nfds = 0;
	}
	memset(&dahdic, 0, sizeof(dahdic));
	memset(&dahdic_empty, 0, sizeof(dahdic_empty));
	/* Check to see if we're in a conference... */
	dahdic.chan = 0;
	if (ioctl(fd, DAHDI_GETCONF, &dahdic)) {
		ast_log(LOG_WARNING, "Error getting conference\n");
		close(fd);
		goto outrun;
	}
	if (dahdic.confmode) {
		/* Whoa, already in a conference...  Retry... */
		if (!retrydahdi) {
			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");
			retrydahdi = 1;
			goto dahdiretry;
		}
	}
	memset(&dahdic, 0, sizeof(dahdic));
	/* Add us to the conference */
	dahdic.chan = 0;
	dahdic.confno = conf->dahdiconf;

	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||
			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)) && conf->users > 1) {
		struct announce_listitem *item;
		if (!(item = ao2_alloc(sizeof(*item), NULL)))
			goto outrun;
		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));
		item->confchan = conf->chan;
		item->confusers = conf->users;
		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){
			item->vmrec = 1;
		}
		item->announcetype = CONF_HASJOIN;
		ast_mutex_lock(&conf->announcelistlock);
		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */
		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
		ast_cond_signal(&conf->announcelist_addition);
		ast_mutex_unlock(&conf->announcelistlock);

		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {
			;
		}
		ao2_ref(item, -1);
	}

	if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && !conf->markedusers)
		dahdic.confmode = DAHDI_CONF_CONF;
	else if (ast_test_flag64(confflags, CONFFLAG_MONITOR))
		dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;
	else if (ast_test_flag64(confflags, CONFFLAG_TALKER))
		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;
	else
		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;

	if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
		ast_log(LOG_WARNING, "Error setting conference\n");
		close(fd);
		goto outrun;
	}
	ast_debug(1, "Placed channel %s in DAHDI conf %d\n", ast_channel_name(chan), conf->dahdiconf);

	if (!sent_event) {
		/*** DOCUMENTATION
			<managerEventInstance>
				<synopsis>Raised when a user joins a MeetMe conference.</synopsis>
				<syntax>
					<parameter name="Meetme">
						<para>The identifier for the MeetMe conference.</para>
					</parameter>
					<parameter name="Usernum">
						<para>The identifier of the MeetMe user who joined.</para>
					</parameter>
				</syntax>
				<see-also>
					<ref type="managerEvent">MeetmeLeave</ref>
					<ref type="application">MeetMe</ref>
				</see-also>
			</managerEventInstance>
		***/
		ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",
			"Channel: %s\r\n"
			"Uniqueid: %s\r\n"
			"Meetme: %s\r\n"
			"Usernum: %d\r\n"
			"CallerIDnum: %s\r\n"
			"CallerIDname: %s\r\n"
			"ConnectedLineNum: %s\r\n"
			"ConnectedLineName: %s\r\n",
			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,
			user->user_no,
			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),
			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),
			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),
			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")
			);
		sent_event = 1;
	}

	if (!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&
		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {
		firstpass = 1;
		if (!ast_test_flag64(confflags, CONFFLAG_QUIET))
			if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&
				(conf->markedusers >= 1))) {
				conf_play(chan, conf, ENTER);
			}
	}

	conf_flush(fd, chan);

	if (dsp)
		ast_dsp_free(dsp);

	if (!(dsp = ast_dsp_new())) {
		ast_log(LOG_WARNING, "Unable to allocate DSP!\n");
		res = -1;
	}

	if (ast_test_flag64(confflags, CONFFLAG_AGI)) {
		/* Get name of AGI file to run from $(MEETME_AGI_BACKGROUND)
		   or use default filename of conf-background.agi */

		ast_channel_lock(chan);
		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))) {
			agifile = ast_strdupa(tmpvar);
		} else {
			agifile = ast_strdupa(agifiledefault);
		}
		ast_channel_unlock(chan);

		if (user->dahdichannel) {
			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */
			x = 1;
			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);
		}
		/* Find a pointer to the agi app and execute the script */
		agi_app = pbx_findapp("agi");
		if (agi_app) {
			ret = pbx_exec(chan, agi_app, agifile);
		} else {
			ast_log(LOG_WARNING, "Could not find application (agi)\n");
			ret = -2;
		}
		if (user->dahdichannel) {
			/*  Remove CONFMUTE mode on DAHDI channel */
			x = 0;
			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);
		}
	} else {
		int lastusers = conf->users;
		if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)) {
			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */
			x = 1;
			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);
		}
		for (;;) {
			int menu_was_active = 0;

			outfd = -1;
			ms = -1;
			now = ast_tvnow();

			if (rt_schedule && conf->endtime) {
				char currenttime[32];
				long localendtime = 0;
				int extended = 0;
				struct ast_tm tm;
				struct ast_variable *var, *origvar;
				struct timeval tmp;

				if (now.tv_sec % 60 == 0) {
					if (!checked) {
						ast_localtime(&now, &tm, NULL);
						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);
						var = origvar = ast_load_realtime("meetme", "confno",
							conf->confno, "starttime <=", currenttime,
							 "endtime >=", currenttime, NULL);

						for ( ; var; var = var->next) {
							if (!strcasecmp(var->name, "endtime")) {
								struct ast_tm endtime_tm;
								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);
								tmp = ast_mktime(&endtime_tm, NULL);
								localendtime = tmp.tv_sec;
							}
						}
						ast_variables_destroy(origvar);

						/* A conference can be extended from the
						   Admin/User menu or by an external source */
						if (localendtime > conf->endtime){
							conf->endtime = localendtime;
							extended = 1;
						}

						if (conf->endtime && (now.tv_sec >= conf->endtime)) {
							ast_verbose("Quitting time...\n");
							goto outrun;
						}

						if (!announcement_played && conf->endalert) {
							if (now.tv_sec + conf->endalert >= conf->endtime) {
								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))
									ast_waitstream(chan, "");
								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));
								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))
									ast_waitstream(chan, "");
								if (musiconhold) {
									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
								}
								announcement_played = 1;
							}
						}

						if (extended) {
							announcement_played = 0;
						}

						checked = 1;
					}
				} else {
					checked = 0;
				}
			}

 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {
				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
					ret = 0;
				} else {
					ret = -1;
				}
				break;
			}

 			to = -1;
 			if (user->timelimit) {
				int minutes = 0, seconds = 0, remain = 0;

 				to = ast_tvdiff_ms(nexteventts, now);
 				if (to < 0) {
 					to = 0;
				}
 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time);
 				if (time_left_ms < to) {
 					to = time_left_ms;
				}

 				if (time_left_ms <= 0) {
 					if (user->end_sound) {
 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan));
 						res = ast_waitstream(chan, "");
 					}
					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
						ret = 0;
					} else {
						ret = -1;
					}
 					break;
 				}

 				if (!to) {
 					if (time_left_ms >= 5000) {

 						remain = (time_left_ms + 500) / 1000;
 						if (remain / 60 >= 1) {
 							minutes = remain / 60;
 							seconds = remain % 60;
 						} else {
 							seconds = remain;
 						}

 						/* force the time left to round up if appropriate */
 						if (user->warning_sound && user->play_warning) {
 							if (!strcmp(user->warning_sound, "timeleft")) {

 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan));
 								res = ast_waitstream(chan, "");
 								if (minutes) {
 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan));
 									res = ast_waitstream(chan, "");
 								}
 								if (seconds) {
 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan));
 									res = ast_waitstream(chan, "");
 								}
 							} else {
 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan));
 								res = ast_waitstream(chan, "");
 							}
							if (musiconhold) {
								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
							}
 						}
 					}
 					if (user->warning_freq) {
 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000));
 					} else {
 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));
					}
 				}
 			}

			now = ast_tvnow();
			if (timeout && now.tv_sec >= timeout) {
				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
					ret = 0;
				} else {
					ret = -1;
				}
				break;
			}

			/* if we have just exited from the menu, and the user had a channel-driver
			   volume adjustment, restore it
			*/
			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {
				set_talk_volume(user, user->listen.desired);
			}

			menu_was_active = menu_active;

			currentmarked = conf->markedusers;
			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&
			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&
			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&
			    lastmarked == 0) {
				if (currentmarked == 1 && conf->users > 1) {
					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
					if (conf->users - 1 == 1) {
						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {
							ast_waitstream(chan, "");
						}
					} else {
						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {
							ast_waitstream(chan, "");
						}
					}
				}
				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
						ast_waitstream(chan, "");
					}
				}
			}

			/* Update the struct with the actual confflags */
			user->userflags = *confflags;

			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {
				if (currentmarked == 0) {
					if (lastmarked != 0) {
						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {
							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {
								ast_waitstream(chan, "");
							}
						}
						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {
							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
								ret = 0;
							}
							break;
						} else {
							dahdic.confmode = DAHDI_CONF_CONF;
							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
								ast_log(LOG_WARNING, "Error setting conference\n");
								close(fd);
								goto outrun;
							}
						}
					}
					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {
						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
						musiconhold = 1;
					}
				} else if (currentmarked >= 1 && lastmarked == 0) {
					/* Marked user entered, so cancel timeout */
					timeout = 0;
					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {
						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;
					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {
						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;
					} else {
						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
					}
					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
						ast_log(LOG_WARNING, "Error setting conference\n");
						close(fd);
						goto outrun;
					}
					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {
						ast_moh_stop(chan);
						musiconhold = 0;
					}
					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&
						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {
							ast_waitstream(chan, "");
						}
						conf_play(chan, conf, ENTER);
					}
				}
			}

			/* trying to add moh for single person conf */
			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {
				if (conf->users == 1) {
					if (!musiconhold) {
						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
						musiconhold = 1;
					}
				} else {
					if (musiconhold) {
						ast_moh_stop(chan);
						musiconhold = 0;
					}
				}
			}

			/* Leave if the last marked user left */
			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {
				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
					ret = 0;
				} else {
					ret = -1;
				}
				break;
			}

			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */
			if (conf->users != lastusers) {
				if (conf->users < lastusers) {
					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);
				}
				lastusers = conf->users;
			}

			/* Check if my modes have changed */

			/* If I should be muted but am still talker, mute me */
			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {
				dahdic.confmode ^= DAHDI_CONF_TALKER;
				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");
					ret = -1;
					break;
				}

				/* Indicate user is not talking anymore - change him to unmonitored state */
				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {
					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));
				}
				/*** DOCUMENTATION
				<managerEventInstance>
					<synopsis>Raised when a MeetMe user is muted.</synopsis>
					<syntax>
						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />
						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />
						<parameter name="Status">
							<enumlist>
								<enum name="on"/>
								<enum name="off"/>
							</enumlist>
						</parameter>
					</syntax>
				</managerEventInstance>
				***/
				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",
					"Channel: %s\r\n"
					"Uniqueid: %s\r\n"
					"Meetme: %s\r\n"
					"Usernum: %d\r\n"
					"Status: on\r\n",
					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
			}

			/* If I should be un-muted but am not talker, un-mute me */
			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {
				dahdic.confmode |= DAHDI_CONF_TALKER;
				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");
					ret = -1;
					break;
				}
				/*** DOCUMENTATION
				<managerEventInstance>
					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>
				</managerEventInstance>
				***/
				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",
					"Channel: %s\r\n"
					"Uniqueid: %s\r\n"
					"Meetme: %s\r\n"
					"Usernum: %d\r\n"
					"Status: off\r\n",
					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
			}

			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&
				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {
				talkreq_manager = 1;

				/*** DOCUMENTATION
				<managerEventInstance>
					<synopsis>Raised when a MeetMe user has started talking.</synopsis>
					<syntax>
						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />
						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />
						<parameter name="Status">
							<enumlist>
								<enum name="on"/>
								<enum name="off"/>
							</enumlist>
						</parameter>
					</syntax>
				</managerEventInstance>
				***/
				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",
					"Channel: %s\r\n"
					"Uniqueid: %s\r\n"
					"Meetme: %s\r\n"
					"Usernum: %d\r\n"
					"Status: on\r\n",
					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
			}

			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&
				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {
				talkreq_manager = 0;
				/*** DOCUMENTATION
				<managerEventInstance>
					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>
				</managerEventInstance>
				***/
				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",
					"Channel: %s\r\n"
					"Uniqueid: %s\r\n"
					"Meetme: %s\r\n"
					"Usernum: %d\r\n"
					"Status: off\r\n",
					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
			}

			/* If user have been hung up, exit the conference */
			if (user->adminflags & ADMINFLAG_HANGUP) {
				ret = 0;
				break;
			}

			/* If I have been kicked, exit the conference */
			if (user->adminflags & ADMINFLAG_KICKME) {
				/* You have been kicked. */
				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&
					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {
					ast_waitstream(chan, "");
				}
				ret = 0;
				break;
			}

			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */
			if (ast_check_hangup(chan)) {
				break;
			}

			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);

			if (c) {
				char dtmfstr[2] = "";

				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {
					if (using_pseudo) {
						/* Kill old pseudo */
						close(fd);
						using_pseudo = 0;
					}
					ast_debug(1, "Ooh, something swapped out under us, starting over\n");
					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);
					user->dahdichannel = !retrydahdi;
					goto dahdiretry;
				}
				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
					f = ast_read_noaudio(c);
				} else {
					f = ast_read(c);
				}
				if (!f) {
					break;
				}
				if (f->frametype == AST_FRAME_DTMF) {
					dtmfstr[0] = f->subclass.integer;
					dtmfstr[1] = '\0';
				}

				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {
					if (user->talk.actual) {
						ast_frame_adjust_volume(f, user->talk.actual);
					}

					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {
						if (user->talking == -1) {
							user->talking = 0;
						}

						res = ast_dsp_silence(dsp, f, &totalsilence);
						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {
							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));
						}

						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {
							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));
						}
					}
					if (using_pseudo) {
						/* Absolutely do _not_ use careful_write here...
						   it is important that we read data from the channel
						   as fast as it arrives, and feed it into the conference.
						   The buffering in the pseudo channel will take care of any
						   timing differences, unless they are so drastic as to lose
						   audio frames (in which case carefully writing would only
						   have delayed the audio even further).
						*/
						/* As it turns out, we do want to use careful write.  We just
						   don't want to block, but we do want to at least *try*
						   to write out all the samples.
						 */
						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {
							careful_write(fd, f->data.ptr, f->datalen, 0);
						}
					}
				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {
					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {
						conf_queue_dtmf(conf, user, f);
					}
					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {
						ast_log(LOG_WARNING, "Error setting conference\n");
						close(fd);
						ast_frfree(f);
						goto outrun;
					}

					/* if we are entering the menu, and the user has a channel-driver
					   volume adjustment, clear it
					*/
					if (!menu_active && user->talk.desired && !user->talk.actual) {
						set_talk_volume(user, 0);
					}

					if (musiconhold) {
						ast_moh_stop(chan);
					}
					if (menu8_active) {
						/* *8 Submenu */
						dtmf = f->subclass.integer;
						if (dtmf > 0) {
							int keepplaying;
							int playednamerec;
							struct ao2_iterator user_iter;
							struct ast_conf_user *usr = NULL;
							switch(dtmf) {
							case '1': /* *81 Roll call */
								keepplaying = 1;
								playednamerec = 0;
								if (conf->users == 1) {
									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
										res = ast_waitstream(chan, AST_DIGIT_ANY);
										ast_stopstream(chan);
										if (res > 0)
											keepplaying = 0;
									}
								} else if (conf->users == 2) {
									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
										res = ast_waitstream(chan, AST_DIGIT_ANY);
										ast_stopstream(chan);
										if (res > 0)
											keepplaying = 0;
									}
								} else {
									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
										res = ast_waitstream(chan, AST_DIGIT_ANY);
										ast_stopstream(chan);
										if (res > 0)
											keepplaying = 0;
									}
									if (keepplaying) {
										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
										if (res > 0)
											keepplaying = 0;
									}
									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
										res = ast_waitstream(chan, AST_DIGIT_ANY);
										ast_stopstream(chan);
										if (res > 0)
											keepplaying = 0;
									}
								}
								user_iter = ao2_iterator_init(conf->usercontainer, 0);
								while((usr = ao2_iterator_next(&user_iter))) {
									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {
										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {
											res = ast_waitstream(chan, AST_DIGIT_ANY);
											ast_stopstream(chan);
											if (res > 0)
												keepplaying = 0;
										}
										playednamerec = 1;
									}
									ao2_ref(usr, -1);
								}
								ao2_iterator_destroy(&user_iter);
								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {
									res = ast_waitstream(chan, AST_DIGIT_ANY);
									ast_stopstream(chan);
									if (res > 0)
										keepplaying = 0;
								}
								break;
							case '2': /* *82 Eject all non-admins */
								if (conf->users == 1) {
									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))
										ast_waitstream(chan, "");
								} else {
									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);
								}
								ast_stopstream(chan);
								break;
							case '3': /* *83 (Admin) mute/unmute all non-admins */
								if(conf->gmuted) {
									conf->gmuted = 0;
									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);
									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))
										ast_waitstream(chan, "");
								} else {
									conf->gmuted = 1;
									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);
									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))
										ast_waitstream(chan, "");
								}
								ast_stopstream(chan);
								break;
							case '4': /* *84 Record conference */
								if (conf->recording != MEETME_RECORD_ACTIVE) {
									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);

									if (!conf->recordingfilename) {
										const char *var;
										ast_channel_lock(chan);
										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {
											conf->recordingfilename = ast_strdup(var);
										}
										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {
											conf->recordingformat = ast_strdup(var);
										}
										ast_channel_unlock(chan);
										if (!conf->recordingfilename) {
											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));
											conf->recordingfilename = ast_strdup(recordingtmp);
										}
										if (!conf->recordingformat) {
											conf->recordingformat = ast_strdup("wav");
										}
										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",
				    							conf->confno, conf->recordingfilename, conf->recordingformat);
									}

									ast_mutex_lock(&conf->recordthreadlock);
									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {
										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
										dahdic.chan = 0;
										dahdic.confno = conf->dahdiconf;
										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;
										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {
											ast_log(LOG_WARNING, "Error starting listen channel\n");
											ast_hangup(conf->lchan);
											conf->lchan = NULL;
										} else {
											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);
										}
									}
									ast_mutex_unlock(&conf->recordthreadlock);

									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))
										ast_waitstream(chan, "");

								}

								ast_stopstream(chan);
								break;
							default:
								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))
									ast_waitstream(chan, "");
								ast_stopstream(chan);
								break;
							}
						}

						menu8_active = 0;
						menu_active = 0;
					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {
						/* Admin menu */
						if (!menu_active) {
							menu_active = 1;
							/* Record this sound! */
							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {
								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
								ast_stopstream(chan);
							} else {
								dtmf = 0;
							}
						} else {
							dtmf = f->subclass.integer;
						}
						if (dtmf > 0) {
							switch(dtmf) {
							case '1': /* Un/Mute */
								menu_active = 0;

								/* for admin, change both admin and use flags */
								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {
									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);
								} else {
									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);
								}

								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								} else {
									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								}
								break;
							case '2': /* Un/Lock the Conference */
								menu_active = 0;
								if (conf->locked) {
									conf->locked = 0;
									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								} else {
									conf->locked = 1;
									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								}
								break;
							case '3': /* Eject last user */
							{
								struct ast_conf_user *usr = NULL;
								int max_no = 0;
								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);
								menu_active = 0;
								usr = ao2_find(conf->usercontainer, &max_no, 0);
								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {
									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								} else {
									usr->adminflags |= ADMINFLAG_KICKME;
								}
								ao2_ref(usr, -1);
								ast_stopstream(chan);
								break;
							}
							case '4':
								tweak_listen_volume(user, VOL_DOWN);
								break;
							case '5':
								/* Extend RT conference */
								if (rt_schedule) {
									if (!rt_extend_conf(conf->confno)) {
										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {
											ast_waitstream(chan, "");
										}
									} else {
										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {
											ast_waitstream(chan, "");
										}
									}
									ast_stopstream(chan);
								}
								menu_active = 0;
								break;
							case '6':
								tweak_listen_volume(user, VOL_UP);
								break;
							case '7':
								tweak_talk_volume(user, VOL_DOWN);
								break;
							case '8':
								menu8_active = 1;
								break;
							case '9':
								tweak_talk_volume(user, VOL_UP);
								break;
							default:
								menu_active = 0;
								/* Play an error message! */
								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
									ast_waitstream(chan, "");
								}
								break;
							}
						}
					} else {
						/* User menu */
						if (!menu_active) {
							menu_active = 1;
							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {
								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
								ast_stopstream(chan);
							} else {
								dtmf = 0;
							}
						} else {
							dtmf = f->subclass.integer;
						}
						if (dtmf > 0) {
							switch (dtmf) {
							case '1': /* Un/Mute */
								menu_active = 0;

								/* user can only toggle the self-muted state */
								user->adminflags ^= ADMINFLAG_SELFMUTED;

								/* they can't override the admin mute state */
								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								} else {
									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								}
								break;
							case '2':
								menu_active = 0;
								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {
									user->adminflags |= ADMINFLAG_T_REQUEST;
								}

								if (user->adminflags & ADMINFLAG_T_REQUEST) {
									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {
										ast_waitstream(chan, "");
									}
								}
								break;
							case '4':
								tweak_listen_volume(user, VOL_DOWN);
								break;
							case '5':
								/* Extend RT conference */
								if (rt_schedule) {
									rt_extend_conf(conf->confno);
								}
								menu_active = 0;
								break;
							case '6':
								tweak_listen_volume(user, VOL_UP);
								break;
							case '7':
								tweak_talk_volume(user, VOL_DOWN);
								break;
							case '8':
								menu_active = 0;
								break;
							case '9':
								tweak_talk_volume(user, VOL_UP);
								break;
							default:
								menu_active = 0;
								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
									ast_waitstream(chan, "");
								}
								break;
							}
						}
					}
					if (musiconhold && !menu_active) {
						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
					}

					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
						ast_log(LOG_WARNING, "Error setting conference\n");
						close(fd);
						ast_frfree(f);
						goto outrun;
					}

					conf_flush(fd, chan);
				/*
				 * Since options using DTMF could absorb DTMF meant for the
				 * conference menu, we have to check them after the menu.
				 */
				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {
					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {
						conf_queue_dtmf(conf, user, f);
					}

					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {
						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);
						ret = 0;
						ast_frfree(f);
						break;
					} else {
						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);
					}
				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&
					(strchr(exitkeys, f->subclass.integer))) {
					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);

					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {
						conf_queue_dtmf(conf, user, f);
					}
					ret = 0;
					ast_frfree(f);
					break;
				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)
					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {
					conf_queue_dtmf(conf, user, f);
				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {
					switch (f->subclass.integer) {
					case AST_CONTROL_HOLD:
						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);
						break;
					default:
						break;
					}
				} else if (f->frametype == AST_FRAME_NULL) {
					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */
				} else if (f->frametype == AST_FRAME_CONTROL) {
					switch (f->subclass.integer) {
					case AST_CONTROL_BUSY:
					case AST_CONTROL_CONGESTION:
						ast_frfree(f);
						goto outrun;
						break;
					default:
						ast_debug(1,
							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",
							ast_channel_name(chan), f->frametype, f->subclass.integer);
					}
				} else {
					ast_debug(1,
						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",
						ast_channel_name(chan), f->frametype, f->subclass.integer);
				}
				ast_frfree(f);
			} else if (outfd > -1) {
				res = read(outfd, buf, CONF_SIZE);
				if (res > 0) {
					memset(&fr, 0, sizeof(fr));
					fr.frametype = AST_FRAME_VOICE;
					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);
					fr.datalen = res;
					fr.samples = res / 2;
					fr.data.ptr = buf;
					fr.offset = AST_FRIENDLY_OFFSET;
					if (!user->listen.actual &&
						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||
						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||
						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))
						 )) {
						int idx;
						for (idx = 0; idx < AST_FRAME_BITS; idx++) {
							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {
								break;
							}
						}
						if (idx >= AST_FRAME_BITS) {
							goto bailoutandtrynormal;
						}
						ast_mutex_lock(&conf->listenlock);
						if (!conf->transframe[idx]) {
							if (conf->origframe) {
								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {
									ast_moh_stop(chan);
									mohtempstopped = 1;
								}
								if (!conf->transpath[idx]) {
									struct ast_format src;
									struct ast_format dst;
									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);
									ast_format_from_old_bitfield(&dst, (1 << idx));
									conf->transpath[idx] = ast_translator_build_path(&dst, &src);
								}
								if (conf->transpath[idx]) {
									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);
									if (!conf->transframe[idx]) {
										conf->transframe[idx] = &ast_null_frame;
									}
								}
							}
						}
						if (conf->transframe[idx]) {
 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&
							    can_write(chan, confflags)) {
								struct ast_frame *cur;
								/* the translator may have returned a list of frames, so
								   write each one onto the channel
								*/
								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {
									if (ast_write(chan, cur)) {
										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));
										break;
									}
								}
								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {
									mohtempstopped = 0;
									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
								}
							}
						} else {
							ast_mutex_unlock(&conf->listenlock);
							goto bailoutandtrynormal;
						}
						ast_mutex_unlock(&conf->listenlock);
					} else {
bailoutandtrynormal:
						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {
							ast_moh_stop(chan);
							mohtempstopped = 1;
						}
						if (user->listen.actual) {
							ast_frame_adjust_volume(&fr, user->listen.actual);
						}
						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {
							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));
						}
						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {
							mohtempstopped = 0;
							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
						}
					}
				} else {
					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));
				}
			}
			lastmarked = currentmarked;
		}
	}

	if (musiconhold) {
		ast_moh_stop(chan);
	}

	if (using_pseudo) {
		close(fd);
	} else {
		/* Take out of conference */
		dahdic.chan = 0;
		dahdic.confno = 0;
		dahdic.confmode = 0;
		if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {
			ast_log(LOG_WARNING, "Error setting conference\n");
		}
	}

	reset_volumes(user);

	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&
		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {
		conf_play(chan, conf, LEAVE);
	}

	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC) && conf->users > 1) {
		struct announce_listitem *item;
		if (!(item = ao2_alloc(sizeof(*item), NULL)))
			goto outrun;
		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));
		item->confchan = conf->chan;
		item->confusers = conf->users;
		item->announcetype = CONF_HASLEFT;
		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){
			item->vmrec = 1;
		}
		ast_mutex_lock(&conf->announcelistlock);
		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
		ast_cond_signal(&conf->announcelist_addition);
		ast_mutex_unlock(&conf->announcelistlock);
	} else if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC) && conf->users == 1) {
		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */
		ast_filedelete(user->namerecloc, NULL);
	}

 outrun:
	AST_LIST_LOCK(&confs);

	if (dsp) {
		ast_dsp_free(dsp);
	}

	if (user->user_no) {
		/* Only cleanup users who really joined! */
		now = ast_tvnow();

		if (sent_event) {
			/*** DOCUMENTATION
			<managerEventInstance>
				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>
				<syntax>
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />
					<parameter name="Duration">
						<para>The length of time in seconds that the Meetme user was in the conference.</para>
					</parameter>
				</syntax>
				<see-also>
					<ref type="managerEvent">MeetmeJoin</ref>
				</see-also>
			</managerEventInstance>
			***/
			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",
				"Channel: %s\r\n"
				"Uniqueid: %s\r\n"
				"Meetme: %s\r\n"
				"Usernum: %d\r\n"
				"CallerIDNum: %s\r\n"
				"CallerIDName: %s\r\n"
				"ConnectedLineNum: %s\r\n"
				"ConnectedLineName: %s\r\n"
				"Duration: %ld\r\n",
				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,
				user->user_no,
				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),
				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),
				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),
				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),
				(long)(now.tv_sec - user->jointime));
		}

		if (setusercount) {
			conf->users--;
			if (rt_log_members) {
				/* Update table */
				snprintf(members, sizeof(members), "%d", conf->users);
				ast_realtime_require_field("meetme",
					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),
					"members", RQ_UINTEGER1, strlen(members),
					NULL);
				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);
			}
			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
				conf->markedusers--;
			}
		}
		/* Remove ourselves from the container */
		ao2_unlink(conf->usercontainer, user);

		/* Change any states */
		if (!conf->users) {
			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);
		}

 		/* This flag is meant to kill a conference with only one participant remaining.  */
		if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)) {
 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL);
 		}

		/* Return the number of seconds the user was in the conf */
		snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime));
		pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs);

		/* Return the RealTime bookid for CDR linking */
		if (rt_schedule) {
			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);
		}
	}
	ao2_ref(user, -1);
	AST_LIST_UNLOCK(&confs);


conf_run_cleanup:
	cap_slin = ast_format_cap_destroy(cap_slin);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
25,26
25,27
25,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
29,38
29,39
29,40
29,41
29,42
29,43
29,44
29,45
29,46
29,47
29,48
29,49
29,50
29,51
29,52
29,53
29,54
29,55
29,56
29,57
29,58
29,59
29,60
29,61
29,62
29,63
29,64
29,65
29,66
29,67
29,68
29,69
29,70
29,71
29,72
29,73
29,74
29,75
29,76
29,77
29,78
29,79
29,80
29,81
29,82
29,83
29,84
29,85
29,86
29,87
29,88
29,89
29,90
29,91
29,92
29,93
29,94
29,95
29,96
29,97
29,98
29,99
29,100
29,101
29,102
29,103
29,104
29,105
29,106
29,107
29,108
29,109
29,110
29,111
29,112
29,113
29,114
29,115
29,116
29,117
29,118
29,119
29,120
29,121
29,122
29,123
29,124
29,125
29,126
29,127
29,128
29,129
29,130
29,131
29,132
29,133
29,134
29,135
29,136
29,137
29,138
29,139
29,140
29,141
29,142
29,143
29,144
29,145
29,146
29,147
29,148
29,149
29,150
29,151
29,152
29,153
29,154
29,155
29,156
29,157
29,158
29,159
29,160
29,161
29,162
29,163
29,164
29,165
29,166
29,167
29,168
29,169
29,170
29,171
29,172
29,173
29,174
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
45,46
46,47
46,48
46,49
47,48
49,50
51,52
53,54
54,55
54,56
55,56
57,58
57,59
60,61
61,62
61,63
62,63
64,65
64,66
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
76,77
78,79
79,80
79,81
81,82
83,84
84,85
84,86
86,87
88,89
89,90
89,91
91,92
93,94
94,95
94,96
96,97
98,99
99,100
99,101
101,102
103,104
104,105
104,106
104,107
106,107
106,108
108,109
110,111
110,112
112,113
114,115
115,116
115,117
117,118
117,119
119,120
121,122
122,123
122,124
124,125
124,126
126,127
128,129
129,130
129,131
131,132
131,133
133,134
135,136
136,137
136,138
138,139
138,140
140,141
141,142
143,144
144,145
144,146
146,147
148,149
149,150
149,151
151,152
151,153
153,154
155,156
156,157
156,158
158,159
158,160
160,161
162,163
163,164
163,165
165,166
165,167
167,168
169,170
170,171
170,172
172,173
172,174
174,175
176,177
177,178
177,179
179,180
179,181
181,182
183,184
184,185
184,186
186,187
186,188
188,189
190,191
191,192
191,193
193,194
193,195
195,196
197,198
198,199
198,200
200,201
200,202
202,203
204,205
205,206
205,207
206,207
208,209
210,211
211,212
211,213
212,213
214,215
214,216
214,217
217,218
218,219
220,221
221,222
221,223
222,223
224,225
224,226
227,228
228,229
228,230
228,231
230,231
230,232
233,234
233,235
236,237
237,238
237,239
237,240
239,240
239,241
239,242
242,243
244,245
244,246
247,248
248,249
248,250
250,251
250,252
250,253
252,253
254,255
256,257
257,258
257,259
259,260
259,261
259,262
261,262
262,263
264,265
266,267
267,268
267,269
269,270
269,271
269,272
271,272
272,273
274,275
276,277
277,278
277,279
279,280
279,281
279,282
281,282
283,284
285,286
286,287
286,288
286,289
288,289
290,291
290,292
292,293
294,295
295,296
295,297
296,297
298,299
298,300
300,301
302,303
303,304
303,305
304,305
306,307
308,309
309,310
309,311
311,312
311,313
313,314
314,315
314,316
315,316
317,318
319,320
320,321
320,322
322,323
322,324
322,325
325,326
326,327
326,328
327,328
329,330
331,332
332,333
332,334
334,335
334,336
334,337
337,338
338,339
340,341
341,342
341,343
343,344
343,345
345,346
347,348
348,349
348,350
350,351
350,352
352,353
354,355
355,356
355,357
357,358
357,359
359,360
361,362
362,363
362,364
364,365
364,366
366,367
368,369
369,370
369,371
371,372
371,373
371,374
374,375
375,376
377,378
378,379
378,380
380,381
380,382
380,383
383,384
384,385
386,387
387,388
387,389
389,390
389,391
392,393
393,394
393,395
395,396
395,397
397,398
399,400
400,401
400,402
401,402
403,404
403,405
405,406
406,407
408,409
409,410
409,411
411,412
413,414
414,415
414,416
416,417
416,418
418,419
420,421
421,422
421,423
421,424
423,424
423,425
425,426
427,428
427,429
429,430
431,432
432,433
432,434
432,435
434,435
434,436
437,438
437,439
440,441
441,442
441,443
442,443
444,445
444,446
444,447
447,448
448,449
449,450
451,452
452,453
452,454
453,454
455,456
457,458
457,459
458,459
459,460
461,462
462,463
464,465
465,466
465,467
465,468
466,467
468,469
470,471
470,472
470,473
470,474
471,472
473,474
474,475
476,477
479,480
479,481
480,481
481,482
482,483
482,484
483,484
485,486
485,487
485,488
486,487
488,489
489,490
490,491
491,492
493,494
495,496
496,497
498,499
498,500
499,500
499,501
500,501
500,502
501,502
501,503
502,503
502,504
502,505
503,504
505,506
507,508
509,510
510,511
510,512
511,512
513,514
513,515
514,515
516,517
518,519
519,520
519,521
520,521
520,522
520,523
520,524
521,522
523,524
523,525
524,525
526,527
529,530
530,531
533,534
534,535
534,536
535,536
538,539
539,540
540,541
540,542
541,542
543,544
543,545
544,545
544,546
545,546
547,548
549,550
551,552
551,553
552,553
552,554
553,554
553,555
553,556
554,555
556,557
558,559
560,561
561,562
561,563
562,563
564,565
564,566
565,566
567,568
569,570
569,571
570,571
571,572
571,573
572,573
574,575
574,576
575,576
577,578
577,579
578,579
580,581
582,583
583,584
583,585
583,586
583,587
584,585
588,589
590,591
590,592
591,592
591,593
592,593
592,594
592,595
593,594
595,596
597,598
599,600
600,601
600,602
601,602
603,604
603,605
604,605
606,607
608,609
608,610
608,611
608,612
608,613
608,614
608,615
608,616
608,617
608,618
608,619
608,620
608,621
608,622
608,623
608,624
608,625
608,626
608,627
608,628
608,629
608,630
608,631
609,610
610,611
610,612
610,613
610,614
612,613
612,614
615,616
615,617
618,619
618,620
621,622
622,623
622,624
624,625
624,626
627,628
628,629
628,630
629,630
631,632
631,633
632,633
634,635
636,637
637,638
637,639
638,639
640,641
640,642
640,643
641,642
643,644
644,645
647,648
648,649
648,650
649,650
651,652
651,653
651,654
652,653
654,655
655,656
658,659
659,660
659,661
660,661
662,663
664,665
665,666
665,667
666,667
668,669
668,670
669,670
671,672
673,674
673,675
674,675
676,677
677,678
677,679
678,679
680,681
680,682
681,682
683,684
685,686
685,687
686,687
688,689
689,690
689,691
690,691
692,693
692,694
693,694
695,696
697,698
697,699
697,700
698,699
699,700
701,702
701,703
702,703
703,704
703,705
704,705
706,707
706,708
707,708
709,710
709,711
710,711
713,714
714,715
714,716
715,716
717,718
719,720
719,721
720,721
720,722
721,722
723,724
725,726
726,727
726,728
726,729
727,728
728,729
730,731
731,732
732,733
732,734
733,734
736,737
736,738
737,738
737,739
738,739
738,740
739,740
741,742
743,744
744,745
744,746
745,746
747,748
749,750
749,751
750,751
750,752
751,752
754,755
755,756
755,757
756,757
758,759
758,760
759,760
762,763
763,764
763,765
763,766
763,767
764,765
768,769
770,771
770,772
771,772
773,774
774,775
775,776
775,777
775,778
775,779
776,777
780,781
782,783
782,784
783,784
785,786
786,787
787,788
787,789
787,790
787,791
788,789
792,793
794,795
795,796
795,797
796,797
798,799
800,801
800,802
801,802
802,803
802,804
803,804
805,806
805,807
805,808
806,807
808,809
811,812
812,813
813,814
813,815
814,815
816,817
816,818
817,818
819,820
821,822
822,823
822,824
823,824
825,826
827,828
828,829
828,830
829,830
831,832
831,833
831,834
832,833
834,835
837,838
838,839
838,840
839,840
841,842
843,844
843,845
844,845
845,846
845,847
846,847
848,849
848,850
848,851
849,850
851,852
854,855
855,856
856,857
856,858
857,858
859,860
859,861
860,861
862,863
864,865
865,866
865,867
866,867
868,869
870,871
871,872
871,873
872,873
874,875
874,876
874,877
875,876
877,878
879,880
881,882
882,883
882,884
883,884
886,887
886,888
886,889
887,888
887,889
888,889
888,890
889,890
890,891
892,893
893,894
895,896
897,898
897,899
898,899
899,900
899,901
900,901
902,903
902,904
903,904
906,907
907,908
907,909
908,909
910,911
910,912
911,912
913,914
913,915
914,915
917,918
917,919
917,920
917,921
917,922
917,923
918,919
919,920
919,921
919,922
920,921
924,925
925,926
925,927
925,928
925,929
926,927
930,931
932,933
933,934
933,935
933,936
933,937
934,935
938,939
940,941
941,942
941,943
941,944
941,945
942,943
946,947
948,949
949,950
949,951
949,952
949,953
950,951
954,955
954,956
954,957
955,956
957,958
960,961
961,962
961,963
961,964
961,965
962,963
966,967
966,968
966,969
967,968
969,970
972,973
972,974
973,974
973,975
973,976
974,975
976,977
978,979
980,981
981,982
981,983
981,984
982,983
983,984
983,985
984,985
986,987
986,988
987,988
989,990
991,992
992,993
992,994
993,994
995,996
995,997
996,997
998,999
998,1000
999,1000
1001,1002
1003,1004
1004,1005
1004,1006
1005,1006
1007,1008
1007,1009
1008,1009
1011,1012
1011,1013
1012,1013
1012,1014
1012,1015
1013,1014
1015,1016
1017,1018
1019,1020
1020,1021
1020,1022
1021,1022
1022,1023
1022,1024
1023,1024
1026,1027
1026,1028
1026,1029
1026,1030
1026,1031
1026,1032
1026,1033
1026,1034
1027,1028
1028,1029
1028,1030
1030,1031
1030,1032
1033,1034
1034,1035
1034,1036
1035,1036
1037,1038
1039,1040
1039,1041
1040,1041
1041,1042
1041,1043
1042,1043
1044,1045
1044,1046
1044,1047
1045,1046
1047,1048
1050,1051
1051,1052
1052,1053
1052,1054
1053,1054
1053,1055
1054,1055
1057,1058
1057,1059
1058,1059
1060,1061
1062,1063
1062,1064
1063,1064
1064,1065
1064,1066
1065,1066
1067,1068
1067,1069
1067,1070
1068,1069
1070,1071
1073,1074
1074,1075
1075,1076
1075,1077
1076,1077
1076,1078
1077,1078
1080,1081
1080,1082
1081,1082
1083,1084
1085,1086
1086,1087
1086,1088
1087,1088
1089,1090
1091,1092
1091,1093
1092,1093
1093,1094
1093,1095
1094,1095
1097,1098
1097,1099
1098,1099
1099,1100
1099,1101
1099,1102
1099,1103
1099,1104
1099,1105
1100,1101
1102,1103
1104,1105
1105,1106
1106,1107
1109,1110
1109,1111
1110,1111
1113,1114
1113,1115
1114,1115
1116,1117
1118,1119
1119,1120
1119,1121
1120,1121
1120,1122
1121,1122
1124,1125
1124,1126
1125,1126
1127,1128
1129,1130
1129,1131
1130,1131
1131,1132
1131,1133
1132,1133
1135,1136
1136,1137
1137,1138
1137,1139
1138,1139
1138,1140
1139,1140
1142,1143
1142,1144
1143,1144
1146,1147
1147,1148
1147,1149
1147,1150
1147,1151
1147,1152
1147,1153
1148,1149
1152,1153
1152,1154
1153,1154
1156,1157
1156,1158
1157,1158
1160,1161
1160,1162
1161,1162
1164,1165
1165,1166
1165,1167
1166,1167
1168,1169
1169,1170
1169,1171
1170,1171
1173,1174
1173,1175
1174,1175
1174,1176
1175,1176
1175,1177
1176,1177
1177,1178
1177,1179
1178,1179
1178,1180
1179,1180
1182,1183
1184,1185
1184,1186
1184,1187
1185,1186
1187,1188
1189,1190
1191,1192
1192,1193
1193,1194
1193,1195
1194,1195
1194,1196
1195,1196
1198,1199
1198,1200
1198,1201
1198,1202
1198,1203
1198,1204
1199,1200
1202,1203
1204,1205
1207,1208
1209,1210
1209,1211
1209,1212
1209,1213
1209,1214
1209,1215
1210,1211
1211,1212
1211,1213
1211,1214
1212,1213
1214,1215
1214,1216
1215,1216
1218,1219
1220,1221
1221,1222
1221,1223
1221,1224
1222,1223
1224,1225
1224,1226
1225,1226
1228,1229
1230,1231
1231,1232
1231,1233
1232,1233
1232,1234
1233,1234
1237,1238
1238,1239
1238,1240
1239,1240
1239,1241
1240,1241
1243,1244
1243,1245
1244,1245
1247,1248
1248,1249
1248,1250
1249,1250
1249,1251
1250,1251
1253,1254
1253,1255
1254,1255
1256,1257
1258,1259
1258,1260
1258,1261
1259,1260
1259,1261
1259,1262
1259,1263
1260,1261
1262,1263
1262,1264
1262,1265
1263,1264
1265,1266
1265,1267
1266,1267
1270,1271
1272,1273
1273,1274
1275,1276
1275,1277
1275,1278
1276,1277
1277,1278
1277,1279
1277,1280
1278,1279
1280,1281
1283,1284
1284,1285
1284,1286
1285,1286
1287,1288
1287,1289
1288,1289
1291,1292
1292,1293
1292,1294
1293,1294
1293,1295
1294,1295
1297,1298
1299,1300
1300,1301
1301,1302
1301,1303
1301,1304
1301,1305
1301,1306
1302,1303
1304,1305
1305,1306
1305,1307
1306,1307
1309,1310
1311,1312
1313,1314
1315,1316
1316,1317
1316,1318
1317,1318
1319,1320
1320,1321
1320,1322
1321,1322
1324,1325
1325,1326
1325,1327
1326,1327
1328,1329
1329,1330
1329,1331
1330,1331
1333,1334
1333,1335
1334,1335
1334,1336
1335,1336
1335,1337
1336,1337
1337,1338
1337,1339
1338,1339
1338,1340
1339,1340
1342,1343
1344,1345
1345,1346
1345,1347
1345,1348
1346,1347
1348,1349
1350,1351
1352,1353
1352,1354
1352,1355
1353,1354
1355,1356
1357,1358
1357,1359
1358,1359
1358,1360
1359,1360
1361,1362
1363,1364
1365,1366
1365,1367
1365,1368
1366,1367
1367,1368
1367,1369
1368,1369
1370,1371
1371,1372
1371,1373
1372,1373
1375,1376
1376,1377
1376,1378
1377,1378
1379,1380
1380,1381
1380,1382
1381,1382
1384,1385
1385,1386
1385,1387
1385,1388
1385,1389
1385,1390
1386,1387
1388,1389
1389,1390
1389,1391
1390,1391
1393,1394
1395,1396
1397,1398
1399,1400
1400,1401
1400,1402
1401,1402
1403,1404
1404,1405
1404,1406
1405,1406
1408,1409
1409,1410
1409,1411
1410,1411
1412,1413
1413,1414
1413,1415
1414,1415
1417,1418
1418,1419
1418,1420
1419,1420
1419,1421
1420,1421
1423,1424
1425,1426
1426,1427
1426,1428
1427,1428
1427,1429
1428,1429
1431,1432
1433,1434
1434,1435
1434,1436
1435,1436
1435,1437
1436,1437
1439,1440
1441,1442
1442,1443
1442,1444
1443,1444
1443,1445
1444,1445
1447,1448
1449,1450
1450,1451
1450,1452
1451,1452
1451,1453
1452,1453
1455,1456
1457,1458
1457,1459
1458,1459
1458,1460
1459,1460
1462,1463
1462,1464
1463,1464
1464,1465
1464,1466
1465,1466
1467,1468
1468,1469
1468,1470
1469,1470
1472,1473
1473,1474
1473,1475
1474,1475
1474,1476
1475,1476
1478,1479
1478,1480
1479,1480
1479,1481
1480,1481
1483,1484
1485,1486
1485,1487
1486,1487
1486,1488
1487,1488
1489,1490
1489,1491
1490,1491
1493,1494
1494,1495
1494,1496
1495,1496
1495,1497
1496,1497
1499,1500
1500,1501
1502,1503
1503,1504
1503,1505
1504,1505
1506,1507
1506,1508
1507,1508
1510,1511
1510,1512
1511,1512
1511,1513
1512,1513
1515,1516
1515,1517
1516,1517
1517,1518
1517,1519
1518,1519
1520,1521
1520,1522
1520,1523
1521,1522
1523,1524
1523,1525
1524,1525
1527,1528
1527,1529
1527,1530
1528,1529
1530,1531
1530,1532
1531,1532
1535,1536
1536,1537
1536,1538
1537,1538
1539,1540
1539,1541
1539,1542
1540,1541
1542,1543
1544,1545
1544,1546
1544,1547
1545,1546
1547,1548
1547,1549
1548,1549
1552,1553
1552,1554
1553,1554
1553,1555
1554,1555
1554,1556
1555,1556
1558,1559
1559,1560
1560,1561
1560,1562
1560,1563
1561,1562
1563,1564
1565,1566
1567,1568
1567,1569
1568,1569
1568,1570
1569,1570
1570,1571
1570,1572
1570,1573
1570,1574
1571,1572
1573,1574
1576,1577
1576,1578
1577,1578
1579,1580
1581,1582
1582,1583
1582,1584
1582,1585
1583,1584
1585,1586
1588,1589
1590,1591
1591,1592
1591,1593
1592,1593
1594,1595
1595,1596
1595,1597
1596,1597
1599,1600
1599,1601
1600,1601
1600,1602
1601,1602
1603,1604
1603,1605
1604,1605
1607,1608
1608,1609
1608,1610
1609,1610
1609,1611
1610,1611
1610,1612
1611,1612
1614,1615
1614,1616
1615,1616
1618,1619
1618,1620
1618,1621
1619,1620
1619,1621
1620,1621
1621,1622
1621,1623
1621,1624
1621,1625
1622,1623
1624,1625
1627,1628
1627,1629
1628,1629
1630,1631
1632,1633
1633,1634
1633,1635
1633,1636
1634,1635
1636,1637
1639,1640
1640,1641
1640,1642
1641,1642
1643,1644
1644,1645
1644,1646
1645,1646
1648,1649
1650,1651
1651,1652
1651,1653
1652,1653
1654,1655
1654,1656
1655,1656
1658,1659
1659,1660
1659,1661
1659,1662
1659,1663
1659,1664
1660,1661
1662,1663
1662,1664
1663,1664
1666,1667
1668,1669
1670,1671
1671,1672
1671,1673
1672,1673
1675,1676
1676,1677
1677,1678
1677,1679
1678,1679
1681,1682
1682,1683
1682,1684
1682,1685
1683,1684
1685,1686
1685,1687
1686,1687
1689,1690
1691,1692
1692,1693
1692,1694
1693,1694
1695,1696
1695,1697
1696,1697
1699,1700
1700,1701
1700,1702
1701,1702
1701,1703
1702,1703
1705,1706
1707,1708
1708,1709
1708,1710
1709,1710
1709,1711
1710,1711
1713,1714
1714,1715
1716,1717
1717,1718
1717,1719
1718,1719
1718,1720
1719,1720
1722,1723
1722,1724
1722,1725
1723,1724
1723,1725
1723,1726
1724,1725
1726,1727
1728,1729
1730,1731
1733,1734
1734,1735
1734,1736
1735,1736
1735,1737
1736,1737
1739,1740
1739,1741
1739,1742
1740,1741
1741,1742
1741,1743
1742,1743
1745,1746
1748,1749
1749,1750
1749,1751
1750,1751
1750,1752
1751,1752
1754,1755
1756,1757
1757,1758
1757,1759
1758,1759
1760,1761
1761,1762
1761,1763
1762,1763
1765,1766
1765,1767
1766,1767
1766,1768
1767,1768
1768,1769
1768,1770
1768,1771
1769,1770
1771,1772
1773,1774
1775,1776
1776,1777
1776,1778
1776,1779
1777,1778
1779,1780
1781,1782
1781,1783
1782,1783
1782,1784
1783,1784
1785,1786
1787,1788
1789,1790
1789,1791
1789,1792
1789,1793
1789,1794
1789,1795
1789,1796
1790,1791
1791,1792
1791,1793
1793,1794
1793,1795
1795,1796
1796,1797
1798,1799
1799,1800
1799,1801
1799,1802
1799,1803
1799,1804
1800,1801
1802,1803
1804,1805
1805,1806
1806,1807
1809,1810
1811,1812
1811,1813
1812,1813
1812,1814
1813,1814
1813,1815
1813,1816
1814,1815
1816,1817
1820,1821
1820,1822
1821,1822
1822,1823
1822,1824
1822,1825
1822,1826
1822,1827
1823,1824
1825,1826
1828,1829
1830,1831
1830,1832
1831,1832
1833,1834
1835,1836
1837,1838
1837,1839
1837,1840
1838,1839
1838,1840
1838,1841
1839,1840
1841,1842
1843,1844
1845,1846
1845,1847
1845,1848
1846,1847
1847,1848
1847,1849
1848,1849
1850,1851
1850,1852
1851,1852
1853,1854
1853,1855
1854,1855
1856,1857
1858,1859
1859,1860
1859,1861
1860,1861
1862,1863
1862,1864
1862,1865
1863,1864
1865,1866
1866,1867
1869,1870
1869,1871
1869,1872
1870,1871
1870,1872
1871,1872
1873,1874
1875,1876
1875,1877
1876,1877
1877,1878
1877,1879
1877,1880
1878,1879
1880,1881
1882,1883
1884,1885
1885,1886
1885,1887
1885,1888
1886,1887
1888,1889
1891,1892
1891,1893
1891,1894
1892,1893
1892,1894
1893,1894
1893,1895
1894,1895
1896,1897
1898,1899
1899,1900
1900,1901
1900,1902
1901,1902
1904,1905
1905,1906
1905,1907
1905,1908
1905,1909
1905,1910
1905,1911
1905,1912
1906,1907
1908,1909
1908,1910
1909,1910
1912,1913
1913,1914
1914,1915
1914,1916
1915,1916
1919,1920
1921,1922
1923,1924
1925,1926
1925,1927
1926,1927
1927,1928
1927,1929
1927,1930
1927,1931
1928,1929
1930,1931
1930,1932
1931,1932
1934,1935
1936,1937
1938,1939
1938,1940
1939,1940
1940,1941
1940,1942
1940,1943
1940,1944
1940,1945
1940,1946
1940,1947
1941,1942
1943,1944
1943,1945
1944,1945
1947,1948
1948,1949
1949,1950
1949,1951
1950,1951
1954,1955
1956,1957
1956,1958
1957,1958
1960,1961
1960,1962
1961,1962
1964,1965
1965,1966
1965,1967
1965,1968
1966,1967
1968,1969
1970,1971
1972,1973
1973,1974
1974,1975
1974,1976
1974,1977
1974,1978
1974,1979
1974,1980
1974,1981
1975,1976
1977,1978
1977,1979
1978,1979
1981,1982
1982,1983
1983,1984
1983,1985
1984,1985
1988,1989
1990,1991
1990,1992
1991,1992
1994,1995
1994,1996
1995,1996
1998,1999
1999,2000
1999,2001
2000,2001
2003,2004
2003,2005
2003,2006
2004,2005
2004,2006
2005,2006
2005,2007
2005,2008
2006,2007
2008,2009
2010,2011
2012,2013
2013,2014
2013,2015
2013,2016
2013,2017
2014,2015
2016,2017
2016,2018
2017,2018
2020,2021
2022,2023
2024,2025
2025,2026
2025,2027
2026,2027
2028,2029
2028,2030
2028,2031
2028,2032
2028,2033
2028,2034
2028,2035
2028,2036
2028,2037
2028,2038
2028,2039
2029,2030
2031,2032
2034,2035
2034,2036
2035,2036
2040,2041
2041,2042
2043,2044
2045,2046
2045,2047
2046,2047
2048,2049
2051,2052
2053,2054
2053,2055
2054,2055
2054,2056
2055,2056
2055,2057
2055,2058
2056,2057
2058,2059
2060,2061
2062,2063
2063,2064
2063,2065
2063,2066
2063,2067
2064,2065
2066,2067
2066,2068
2067,2068
2070,2071
2072,2073
2074,2075
2075,2076
2075,2077
2076,2077
2078,2079
2078,2080
2078,2081
2078,2082
2078,2083
2078,2084
2078,2085
2078,2086
2079,2080
2081,2082
2084,2085
2084,2086
2085,2086
2090,2091
2091,2092
2093,2094
2095,2096
2095,2097
2096,2097
2096,2098
2097,2098
2099,2100
2101,2102
2103,2104
2104,2105
2104,2106
2105,2106
2107,2108
2108,2109
2108,2110
2109,2110
2112,2113
2112,2114
2113,2114
2113,2115
2113,2116
2114,2115
2116,2117
2118,2119
2120,2121
2121,2122
2122,2123
2122,2124
2123,2124
2126,2127
2127,2128
2128,2129
2128,2130
2129,2130
2132,2133
2132,2134
2133,2134
2135,2136
2135,2137
2135,2138
2136,2137
2137,2138
2137,2139
2137,2140
2137,2141
2137,2142
2138,2139
2140,2141
2142,2143
2143,2144
2144,2145
2147,2148
2147,2149
2148,2149
2151,2152
2152,2153
2152,2154
2152,2155
2152,2156
2152,2157
2152,2158
2152,2159
2152,2160
2152,2161
2153,2154
2157,2158
2157,2159
2157,2160
2158,2159
2158,2160
2159,2160
2159,2161
2160,2161
2162,2163
2162,2164
2163,2164
2167,2168
2169,2170
2169,2171
2169,2172
2170,2171
2170,2172
2171,2172
2171,2173
2172,2173
2174,2175
2174,2176
2175,2176
2179,2180
2181,2182
2183,2184
2183,2185
2184,2185
2186,2187
2186,2188
2187,2188
2191,2192
2193,2194
2193,2195
2194,2195
2196,2197
2198,2199
2200,2201
2201,2202
2201,2203
2201,2204
2201,2205
2201,2206
2201,2207
2201,2208
2202,2203
2206,2207
2206,2208
2207,2208
2211,2212
2213,2214
2215,2216
2216,2217
2216,2218
2217,2218
2220,2221
2220,2222
2221,2222
2221,2223
2222,2223
2222,2224
2223,2224
2227,2228
2228,2229
2228,2230
2228,2231
2228,2232
2229,2230
2231,2232
2234,2235
2234,2236
2235,2236
2238,2239
2239,2240
2239,2241
2240,2241
2242,2243
2243,2244
2243,2245
2244,2245
2247,2248
2248,2249
2248,2250
2248,2251
2248,2252
2249,2250
2251,2252
2254,2255
2254,2256
2255,2256
2258,2259
2258,2260
2259,2260
2259,2261
2259,2262
2260,2261
2262,2263
2264,2265
2266,2267
2266,2268
2266,2269
2267,2268
2268,2269
2268,2270
2269,2270
2271,2272
2273,2274
2273,2275
2273,2276
2274,2275
2275,2276
2275,2277
2276,2277
2278,2279
2278,2280
2278,2281
2279,2280
2281,2282
2284,2285
2285,2286
2286,2287
2286,2288
2286,2289
2286,2290
2287,2288
2289,2290
2291,2292
2293,2294
2294,2295
2295,2296
2297,2298
2297,2299
2297,2300
2298,2299
2299,2300
2299,2301
2300,2301
2302,2303
2302,2304
2303,2304
2305,2306
2307,2308
2308,2309
2309,2310
2309,2311
2309,2312
2309,2313
2310,2311
2312,2313
2314,2315
2314,2316
2315,2316
2317,2318
2319,2320
2320,2321
2321,2322
2323,2324
2324,2325
2325,2326
2325,2327
2325,2328
2325,2329
2326,2327
2328,2329
2330,2331
2330,2332
2331,2332
2333,2334
2335,2336
2336,2337
2337,2338
2339,2340
2340,2341
2340,2342
2341,2342
2343,2344
2345,2346
2345,2347
2346,2347
2346,2348
2347,2348
2347,2349
2347,2350
2348,2349
2350,2351
2352,2353
2354,2355
2355,2356
2355,2357
2356,2357
2358,2359
2358,2360
2359,2360
2361,2362
2363,2364
2364,2365
2364,2366
2365,2366
2366,2367
2366,2368
2366,2369
2366,2370
2367,2368
2369,2370
2371,2372
2371,2373
2372,2373
2374,2375
2376,2377
2376,2378
2377,2378
2379,2380
2381,2382
2382,2383
2383,2384
2383,2385
2383,2386
2384,2385
2386,2387
2389,2390
2389,2391
2390,2391
2391,2392
2391,2393
2391,2394
2392,2393
2394,2395
2396,2397
2397,2398
2397,2399
2398,2399
2400,2401
2402,2403
2402,2404
2403,2404
2403,2405
2404,2405
2404,2406
2405,2406
2405,2407
2406,2407
2406,2408
2407,2408
2411,2412
2412,2413
2412,2414
2412,2415
2413,2414
2415,2416
2417,2418
2419,2420
2419,2421
2420,2421
2421,2422
2421,2423
2421,2424
2421,2425
2422,2423
2424,2425
2427,2428
2427,2429
2428,2429
2430,2431
2432,2433
2433,2434
2433,2435
2433,2436
2434,2435
2436,2437
2439,2440
2439,2441
2440,2441
2440,2442
2441,2442
2441,2443
2441,2444
2442,2443
2444,2445
2446,2447
2448,2449
2448,2450
2449,2450
2449,2451
2450,2451
2454,2455
2454,2456
2455,2456
2456,2457
2456,2458
2456,2459
2456,2460
2457,2458
2459,2460
2462,2463
2462,2464
2463,2464
2465,2466
2467,2468
2468,2469
2468,2470
2468,2471
2469,2470
2471,2472
2474,2475
2474,2476
2475,2476
2475,2477
2476,2477
2476,2478
2476,2479
2477,2478
2479,2480
2481,2482
2483,2484
2483,2485
2484,2485
2484,2486
2485,2486
2489,2490
2489,2491
2490,2491
2491,2492
2491,2493
2493,2494
2493,2495
2495,2496
2497,2498
2497,2499
2497,2500
2498,2499
2498,2500
2499,2500
2499,2501
2500,2501
2504,2505
2505,2506
2505,2507
2506,2507
2507,2508
2507,2509
2507,2510
2507,2511
2508,2509
2510,2511
2513,2514
2513,2515
2514,2515
2516,2517
2518,2519
2518,2520
2518,2521
2519,2520
2520,2521
2520,2522
2521,2522
2523,2524
2523,2525
2523,2526
2524,2525
2526,2527
2528,2529
2530,2531
2531,2532
2531,2533
2532,2533
2534,2535
2536,2537
2536,2538
2536,2539
2537,2538
2537,2539
2538,2539
2541,2542
2542,2543
2542,2544
2543,2544
2546,2547
2546,2548
2547,2548
2547,2549
2548,2549
2550,2551
2552,2553
2554,2555
2554,2556
2554,2557
2555,2556
2555,2557
2556,2557
2557,2558
2557,2559
2557,2560
2557,2561
2558,2559
2560,2561
2563,2564
2563,2565
2564,2565
2566,2567
2568,2569
2568,2570
2568,2571
2569,2570
2570,2571
2570,2572
2571,2572
2573,2574
2573,2575
2573,2576
2574,2575
2576,2577
2578,2579
2580,2581
2581,2582
2581,2583
2582,2583
2584,2585
2586,2587
2586,2588
2586,2589
2587,2588
2587,2589
2588,2589
2591,2592
2592,2593
2592,2594
2593,2594
2596,2597
2596,2598
2597,2598
2597,2599
2598,2599
2600,2601
2602,2603
2604,2605
2604,2606
2605,2606
2607,2608
2607,2609
2608,2609
2609,2610
2609,2611
2610,2611
2612,2613
2612,2614
2612,2615
2612,2616
2612,2617
2612,2618
2613,2614
2615,2616
2617,2618
2617,2619
2618,2619
2618,2620
2619,2620
2623,2624
2625,2626
2625,2627
2626,2627
2628,2629
2630,2631
2630,2632
2631,2632
2631,2633
2633,2634
2635,2636
2637,2638
2637,2639
2637,2640
2638,2639
2638,2640
2639,2640
2642,2643
2643,2644
2643,2645
2644,2645
2647,2648
2647,2649
2648,2649
2648,2650
2649,2650
2651,2652
2653,2654
2655,2656
2655,2657
2656,2657
2656,2658
2657,2658
2659,2660
2660,2661
2660,2662
2660,2663
2660,2664
2661,2662
2663,2664
2666,2667
2666,2668
2667,2668
2669,2670
2671,2672
2671,2673
2671,2674
2672,2673
2673,2674
2673,2675
2674,2675
2676,2677
2676,2678
2676,2679
2677,2678
2679,2680
2681,2682
2683,2684
2684,2685
2684,2686
2685,2686
2687,2688
2689,2690
2689,2691
2689,2692
2690,2691
2690,2692
2691,2692
2694,2695
2695,2696
2695,2697
2696,2697
2699,2700
2699,2701
2700,2701
2700,2702
2701,2702
2703,2704
2705,2706
2707,2708
2707,2709
2708,2709
2709,2710
2709,2711
2709,2712
2710,2711
2712,2713
2714,2715
2716,2717
2717,2718
2718,2719
2718,2720
2718,2721
2719,2720
2721,2722
2723,2724
2725,2726
2725,2727
2726,2727
2726,2728
2727,2728
2727,2729
2727,2730
2728,2729
2730,2731
2732,2733
2735,2736
2735,2737
2736,2737
2737,2738
2737,2739
2737,2740
2737,2741
2738,2739
2740,2741
2743,2744
2743,2745
2744,2745
2746,2747
2748,2749
2750,2751
2750,2752
2751,2752
2751,2753
2752,2753
2752,2754
2752,2755
2753,2754
2755,2756
2757,2758
2760,2761
2760,2762
2761,2762
2762,2763
2762,2764
2762,2765
2762,2766
2763,2764
2765,2766
2768,2769
2768,2770
2769,2770
2771,2772
2773,2774
2775,2776
2775,2777
2776,2777
2777,2778
2777,2779
2778,2779
2780,2781
2780,2782
2780,2783
2780,2784
2780,2785
2780,2786
2780,2787
2781,2782
2789,2790
2789,2791
2790,2791
2791,2792
2791,2793
2792,2793
2794,2795
2796,2797
2797,2798
2797,2799
2797,2800
2797,2801
2798,2799
2800,2801
2804,2805
2805,2806
2805,2807
2806,2807
2808,2809
2809,2810
2809,2811
2809,2812
2810,2811
2810,2812
2811,2812
2811,2813
2811,2814
2812,2813
2814,2815
2814,2816
2815,2816
2815,2817
2816,2817
2818,2819
2822,2823
2823,2824
2823,2825
2824,2825
2824,2826
2825,2826
2827,2828
2829,2830
2829,2831
2830,2831
2832,2833
2836,2837
2837,2838
2837,2839
2838,2839
2838,2840
2839,2840
2842,2843
2843,2844
2845,2846
2845,2847
2847,2848
2848,2849
2848,2850
2849,2850
2851,2852
2851,2853
2851,2854
2852,2853
2854,2855
2857,2858
2857,2859
2857,2860
2858,2859
2860,2861
2860,2862
2860,2863
2860,2864
2860,2865
2860,2866
2860,2867
2860,2868
2860,2869
2860,2870
2860,2871
2860,2872
2861,2862
2862,2863
2862,2864
2863,2864
2865,2866
2865,2867
2865,2868
2866,2867
2869,2870
2869,2871
2870,2871
2872,2873
2874,2875
2874,2876
2875,2876
2875,2877
2876,2877
2879,2880
2879,2881
2880,2881
2881,2882
2881,2883
2881,2884
2881,2885
2882,2883
2884,2885
2887,2888
2887,2889
2888,2889
2890,2891
2892,2893
2894,2895
2895,2896
2895,2897
2896,2897
2899,2900
2900,2901
2900,2902
2900,2903
2900,2904
2901,2902
2903,2904
2904,2905
2907,2908
2908,2909
2909,2910
2911,2912
2912,2913
2912,2914
2913,2914
2913,2915
2914,2915
2917,2918
2917,2919
2918,2919
2921,2922
2922,2923
2922,2924
2923,2924
2923,2925
2924,2925
2927,2928
2929,2930
2930,2931
2930,2932
2931,2932
2931,2933
2932,2933
2935,2936
2937,2938
2938,2939
2938,2940
2939,2940
2939,2941
2940,2941
2943,2944
2945,2946
2945,2947
2946,2947
2946,2948
2946,2949
2946,2950
2947,2948
2949,2950
2951,2952
2953,2954
2954,2955
2956,2957
2956,2958
2956,2959
2957,2958
2958,2959
2958,2960
2958,2961
2958,2962
2959,2960
2961,2962
2964,2965
2964,2966
2965,2966
2967,2968
2969,2970
2970,2971
2970,2972
2971,2972
2973,2974
2975,2976
2977,2978
2978,2979
2978,2980
2979,2980
2982,2983
2982,2984
2983,2984
2983,2985
2983,2986
2983,2987
2984,2985
2986,2987
2988,2989
2990,2991
2991,2992
2993,2994
2993,2995
2993,2996
2994,2995
2995,2996
2995,2997
2995,2998
2995,2999
2996,2997
2998,2999
3001,3002
3001,3003
3002,3003
3004,3005
3006,3007
3007,3008
3007,3009
3008,3009
3010,3011
3012,3013
3014,3015
3015,3016
3015,3017
3016,3017
3019,3020
3019,3021
3020,3021
3021,3022
3021,3023
3022,3023
3024,3025
3024,3026
3024,3027
3025,3026
3027,3028
3030,3031
3031,3032
3031,3033
3032,3033
3035,3036
3036,3037
3036,3038
3036,3039
3036,3040
3037,3038
3039,3040
3040,3041
3043,3044
3044,3045
3045,3046
3047,3048
3048,3049
3048,3050
3048,3051
3048,3052
3049,3050
3051,3052
3052,3053
3055,3056
3056,3057
3057,3058
3059,3060
3060,3061
3060,3062
3061,3062
3061,3063
3062,3063
3066,3067
3066,3068
3067,3068
3067,3069
3067,3070
3067,3071
3068,3069
3070,3071
3072,3073
3074,3075
3075,3076
3077,3078
3077,3079
3077,3080
3078,3079
3079,3080
3079,3081
3079,3082
3080,3081
3082,3083
3085,3086
3086,3087
3086,3088
3087,3088
3089,3090
3091,3092
3093,3094
3093,3095
3094,3095
3094,3096
3095,3096
3098,3099
3099,3100
3099,3101
3100,3101
3101,3102
3103,3104
3103,3105
3103,3106
3104,3105
3105,3106
3105,3107
3105,3108
3106,3107
3110,3111
3111,3112
3111,3113
3112,3113
3115,3116
3117,3118
3118,3119
3118,3120
3118,3121
3118,3122
3119,3120
3121,3122
3122,3123
3125,3126
3126,3127
3127,3128
3129,3130
3130,3131
3130,3132
3131,3132
3131,3133
3132,3133
3136,3137
3137,3138
3137,3139
3138,3139
3138,3140
3139,3140
3142,3143
3142,3144
3143,3144
3146,3147
3146,3148
3147,3148
3147,3149
3148,3149
3148,3150
3149,3150
3150,3151
3150,3152
3150,3153
3151,3152
3153,3154
3155,3156
3157,3158
3158,3159
3158,3160
3159,3160
3159,3161
3160,3161
3160,3162
3160,3163
3161,3162
3163,3164
3165,3166
3167,3168
3167,3169
3167,3170
3168,3169
3170,3171
3172,3173
3174,3175
3174,3176
3174,3177
3175,3176
3177,3178
3179,3180
3181,3182
3181,3183
3182,3183
3182,3184
3183,3184
3187,3188
3187,3189
3187,3190
3187,3191
3187,3192
3187,3193
3187,3194
3187,3195
3187,3196
3187,3197
3187,3198
3187,3199
3187,3200
3187,3201
3187,3202
3188,3189
3189,3190
3189,3191
3190,3191
3192,3193
3192,3194
3195,3196
3195,3197
3196,3197
3197,3198
3198,3199
3198,3200
3199,3200
3201,3202
3201,3203
3201,3204
3202,3203
3204,3205
3205,3206
3206,3207
3207,3208
3209,3210
3211,3212
3213,3214
3214,3215
3214,3216
3214,3217
3214,3218
3215,3216
3217,3218
3217,3219
3218,3219
3221,3222
3221,3223
3222,3223
3225,3226
3226,3227
3227,3228
3227,3229
3228,3229
3231,3232
3232,3233
3232,3234
3232,3235
3232,3236
3233,3234
3235,3236
3235,3237
3236,3237
3239,3240
3239,3241
3240,3241
3242,3243
3244,3245
3245,3246
3246,3247
3246,3248
3247,3248
3250,3251
3251,3252
3251,3253
3252,3253
3252,3254
3253,3254
3256,3257
3256,3258
3257,3258
3260,3261
3261,3262
3261,3263
3262,3263
3262,3264
3263,3264
3266,3267
3266,3268
3267,3268
3270,3271
3270,3272
3271,3272
3271,3273
3271,3274
3272,3273
3274,3275
3276,3277
3278,3279
3279,3280
3280,3281
3280,3282
3281,3282
3281,3283
3282,3283
3286,3287
3287,3288
3287,3289
3288,3289
3288,3290
3289,3290
3292,3293
3294,3295
3295,3296
3295,3297
3296,3297
3298,3299
3299,3300
3299,3301
3300,3301
3303,3304
3304,3305
3304,3306
3304,3307
3305,3306
3307,3308
3309,3310
3311,3312
3312,3313
3312,3314
3312,3315
3312,3316
3313,3314
3315,3316
3316,3317
3316,3318
3317,3318
3320,3321
3322,3323
3324,3325
3325,3326
3325,3327
3326,3327
3328,3329
3329,3330
3329,3331
3330,3331
3333,3334
3334,3335
3334,3336
3335,3336
3337,3338
3338,3339
3338,3340
3339,3340
3342,3343
3342,3344
3343,3344
3343,3345
3344,3345
3344,3346
3345,3346
3346,3347
3346,3348
3347,3348
3349,3350
3349,3351
3350,3351
3353,3354
3353,3355
3354,3355
3354,3356
3354,3357
3355,3356
3357,3358
3361,3362
3362,3363
3362,3364
3362,3365
3363,3364
3365,3366
3368,3369
3370,3371
3371,3372
3371,3373
3371,3374
3372,3373
3374,3375
3376,3377
3378,3379
3378,3380
3378,3381
3379,3380
3379,3381
3380,3381
3380,3382
3380,3383
3381,3382
3383,3384
3385,3386
3387,3388
3388,3389
3388,3390
3389,3390
3392,3393
3393,3394
3393,3395
3394,3395
3394,3396
3395,3396
3398,3399
3400,3401
3400,3402
3400,3403
3401,3402
3401,3403
3401,3404
3402,3403
3404,3405
3406,3407
3408,3409
3409,3410
3409,3411
3410,3411
3410,3412
3411,3412
3414,3415
3414,3416
3415,3416
3417,3418
3419,3420
3419,3421
3419,3422
3420,3421
3420,3422
3420,3423
3421,3422
3423,3424
3425,3426
3427,3428
3428,3429
3428,3430
3429,3430
3429,3431
3430,3431
3433,3434
3433,3435
3434,3435
3436,3437
3438,3439
3439,3440
3439,3441
3440,3441
3440,3442
3441,3442
3444,3445
3444,3446
3445,3446
3445,3447
3446,3447
3448,3449
3450,3451
3452,3453
3452,3454
3453,3454
3453,3455
3453,3456
3453,3457
3454,3455
3456,3457
3458,3459
3460,3461
3461,3462
3463,3464
3463,3465
3463,3466
3464,3465
3465,3466
3465,3467
3465,3468
3466,3467
3468,3469
3471,3472
3472,3473
3472,3474
3473,3474
3475,3476
3477,3478
3479,3480
3480,3481
3480,3482
3480,3483
3480,3484
3480,3485
3481,3482
3485,3486
3485,3487
3486,3487
3488,3489
3490,3491
3490,3492
3491,3492
3494,3495
3494,3496
3495,3496
3496,3497
3498,3499
3498,3500
3499,3500
3500,3501
3500,3502
3500,3503
3500,3504
3500,3505
3500,3506
3500,3507
3500,3508
3500,3509
3500,3510
3500,3511
3500,3512
3500,3513
3501,3502
3503,3504
3505,3506
3509,3510
3509,3511
3510,3511
3512,3513
3514,3515
3514,3516
3515,3516
3517,3518
3519,3520
3519,3521
3520,3521
3523,3524
3523,3525
3524,3525
3527,3528
3527,3529
3527,3530
3527,3531
3528,3529
3530,3531
3530,3532
3531,3532
3531,3533
3532,3533
3532,3534
3533,3534
3533,3535
3534,3535
3536,3537
3536,3538
3537,3538
3543,3544
3543,3545
3544,3545
3544,3546
3545,3546
3545,3547
3546,3547
3546,3548
3547,3548
3549,3550
3549,3551
3550,3551
3557,3558
3557,3559
3557,3560
3557,3561
3558,3559
3560,3561
3560,3562
3561,3562
3561,3563
3562,3563
3562,3564
3563,3564
3563,3565
3564,3565
3566,3567
3566,3568
3567,3568
3573,3574
3573,3575
3574,3575
3574,3576
3575,3576
3575,3577
3576,3577
3576,3578
3577,3578
3579,3580
3579,3581
3580,3581
3587,3588
3587,3589
3587,3590
3587,3591
3588,3589
3590,3591
3590,3592
3591,3592
3591,3593
3592,3593
3592,3594
3593,3594
3593,3595
3594,3595
3596,3597
3596,3598
3597,3598
3603,3604
3603,3605
3604,3605
3604,3606
3605,3606
3605,3607
3606,3607
3606,3608
3607,3608
3609,3610
3609,3611
3610,3611
3617,3618
3617,3619
3617,3620
3617,3621
3618,3619
3620,3621
3620,3622
3621,3622
3621,3623
3622,3623
3622,3624
3623,3624
3623,3625
3624,3625
3626,3627
3626,3628
3627,3628
3633,3634
3633,3635
3634,3635
3634,3636
3635,3636
3635,3637
3636,3637
3636,3638
3637,3638
3639,3640
3639,3641
3640,3641
3647,3648
3648,3649
3648,3650
3649,3650
3652,3653
3652,3654
3653,3654
3653,3655
3654,3655
3654,3656
3655,3656
3656,3657
3658,3659
3659,3660
3659,3661
3659,3662
3660,3661
3662,3663
3664,3665
3666,3667
3667,3668
3667,3669
3667,3670
3668,3669
3670,3671
3672,3673
3674,3675
3674,3676
3675,3676
3676,3677
3676,3678
3677,3678
3680,3681
3680,3682
3681,3682
3682,3683
3682,3684
3682,3685
3683,3684
3685,3686
3687,3688
3689,3690
3689,3691
3690,3691
3690,3692
3691,3692
3692,3693
3692,3694
3692,3695
3693,3694
3695,3696
3697,3698
3699,3700
3700,3701
3700,3702
3701,3702
3701,3703
3701,3704
3702,3703
3704,3705
3706,3707
3708,3709
3709,3710
3709,3711
3710,3711
3710,3712
3711,3712
3715,3716
3716,3717
3717,3718
3717,3719
3717,3720
3717,3721
3718,3719
3720,3721
3722,3723
3724,3725
3726,3727
3727,3728
3727,3729
3727,3730
3728,3729
3730,3731
3732,3733
3734,3735
3734,3736
3735,3736
3737,3738
3738,3739
3738,3740
3739,3740
3741,3742
3743,3744
3743,3745
3744,3745
3745,3746
3746,3747
3746,3748
3747,3748
3749,3750
3750,3751
3752,3753
3752,3754
3753,3754
3754,3755
3754,3756
3754,3757
3755,3756
3757,3758
3760,3761
3761,3762
3761,3763
3762,3763
3764,3765
3766,3767
3766,3768
3766,3769
3767,3768
3767,3769
3767,3770
3768,3769
3770,3771
3772,3773
3774,3775
3774,3776
3774,3777
3774,3778
3774,3779
3774,3780
3774,3781
3775,3776
3776,3777
3776,3778
3777,3778
3779,3780
3781,3782
3781,3783
3781,3784
3782,3783
3783,3784
3783,3785
3784,3785
3786,3787
3786,3788
3786,3789
3787,3788
3789,3790
3792,3793
3793,3794
3794,3795
3794,3796
3795,3796
3797,3798
3797,3799
3798,3799
3800,3801
3802,3803
3803,3804
3804,3805
3804,3806
3805,3806
3807,3808
3807,3809
3808,3809
3810,3811
3812,3813
3813,3814
3813,3815
3814,3815
3816,3817
3818,3819
3818,3820
3819,3820
3819,3821
3820,3821
3823,3824
3823,3825
3824,3825
3825,3826
3825,3827
3826,3827
3829,3830
3830,3831
3830,3832
3830,3833
3830,3834
3830,3835
3830,3836
3831,3832
3833,3834
3835,3836
3837,3838
3838,3839
3840,3841
3841,3842
3841,3843
3845,3846
3846,3847
3846,3848
3847,3848
3849,3850
3849,3851
3850,3851
3853,3854
3853,3855
3853,3856
3854,3855
3856,3857
3857,3858
3858,3859
3858,3860
3859,3860
3861,3862
3861,3863
3861,3864
3861,3865
3862,3863
3864,3865
3866,3867
3868,3869
3870,3871
3870,3872
3871,3872
3872,3873
3872,3874
3872,3875
3873,3874
3875,3876
3878,3879
3879,3880
3879,3881
3880,3881
3882,3883
3884,3885
3884,3886
3885,3886
3885,3887
3886,3887
3889,3890
3889,3891
3890,3891
3891,3892
3891,3893
3892,3893
3895,3896
3896,3897
3896,3898
3896,3899
3896,3900
3896,3901
3896,3902
3897,3898
3899,3900
3901,3902
3903,3904
3904,3905
3906,3907
3907,3908
3907,3909
3911,3912
3911,3913
3911,3914
3912,3913
3913,3914
3913,3915
3915,3916
3915,3917
3917,3918
3918,3919
3918,3920
3919,3920
3922,3923
3922,3924
3923,3924
3923,3925
3924,3925
3924,3926
3925,3926
3928,3929
3928,3930
3928,3931
3929,3930
3931,3932
3933,3934
3935,3936
3935,3937
3936,3937
3937,3938
3937,3939
3938,3939
3941,3942
3942,3943
3942,3944
3942,3945
3942,3946
3942,3947
3942,3948
3943,3944
3945,3946
3947,3948
3949,3950
3950,3951
3952,3953
3953,3954
3953,3955
3957,3958
3957,3959
3959,3960
3959,3961
3959,3962
3959,3963
3959,3964
3959,3965
3959,3966
3959,3967
3959,3968
3959,3969
3959,3970
3959,3971
3959,3972
3959,3973
3959,3974
3959,3975
3959,3976
3959,3977
3959,3978
3959,3979
3959,3980
3959,3981
3959,3982
3959,3983
3959,3984
3959,3985
3959,3986
3959,3987
3959,3988
3960,3961
3961,3962
3961,3963
3963,3964
3963,3965
3965,3966
3967,3968
3968,3969
3968,3970
3969,3970
3971,3972
3973,3974
3974,3975
3974,3976
3975,3976
3977,3978
3979,3980
3980,3981
3980,3982
3981,3982
3983,3984
3984,3985
3986,3987
3986,3988
3987,3988
3987,3989
3988,3989
3990,3991
3990,3992
3991,3992
3994,3995
3994,3996
3994,3997
3994,3998
3994,3999
3994,4000
3994,4001
3995,3996
3996,3997
3996,3998
3998,3999
3998,4000
4000,4001
4002,4003
4003,4004
4003,4005
4005,4006
4005,4007
4007,4008
4009,4010
4010,4011
4010,4012
4012,4013
4012,4014
4014,4015
4016,4017
4017,4018
4017,4019
4018,4019
4020,4021
4022,4023
4023,4024
4023,4025
4023,4026
4024,4025
4026,4027
4026,4028
4029,4030
4029,4031
4032,4033
4033,4034
4033,4035
4034,4035
4036,4037
4038,4039
4038,4040
4038,4041
4039,4040
4039,4041
4040,4041
4040,4042
4041,4042
4041,4043
4042,4043
4047,4048
4048,4049
4048,4050
4049,4050
4050,4051
4052,4053
4052,4054
4052,4055
4052,4056
4052,4057
4052,4058
4052,4059
4052,4060
4052,4061
4052,4062
4053,4054
4054,4055
4054,4056
4054,4057
4054,4058
4055,4056
4057,4058
4058,4059
4060,4061
4061,4062
4063,4064
4065,4066
4066,4067
4066,4068
4066,4069
4066,4070
4066,4071
4067,4068
4069,4070
4071,4072
4072,4073
4073,4074
4075,4076
4077,4078
4078,4079
4080,4081
4081,4082
4081,4083
4082,4083
4084,4085
4084,4086
4085,4086
4087,4088
4087,4089
4087,4090
4087,4091
4087,4092
4087,4093
4087,4094
4087,4095
4087,4096
4088,4089
4092,4093
4092,4094
4093,4094
4097,4098
4100,4101
4102,4103
4104,4105
4104,4106
4104,4107
4104,4108
4106,4107
4108,4109
4108,4110
4109,4110
4111,4112
4111,4113
4112,4113
4115,4116
4116,4117
4116,4118
4117,4118
4118,4119
4118,4120
4118,4121
4119,4120
4121,4122
4121,4123
4122,4123
4126,4127
4126,4128
4126,4129
4126,4130
4127,4128
4128,4129
4128,4130
4129,4130
4131,4132
4133,4134
4134,4135
4134,4136
4134,4137
4134,4138
4135,4136
4137,4138
4137,4139
4138,4139
4142,4143
4143,4144
4145,4146
4146,4147
4146,4148
4147,4148
4149,4150
4149,4151
4149,4152
4150,4151
4152,4153
4153,4154
4155,4156
4157,4158
4158,4159
4158,4160
4159,4160
4161,4162
4161,4163
4162,4163
4165,4166
4166,4167
4166,4168
4167,4168
4169,4170
4171,4172
4171,4173
4172,4173
4172,4174
4173,4174
4175,4176
4175,4177
4176,4177
4179,4180
4179,4181
4180,4181
4181,4182
4181,4183
4182,4183
4182,4184
4183,4184
4186,4187
4188,4189
4189,4190
4189,4191
4190,4191
4193,4194
4193,4195
4194,4195
4194,4196
4195,4196
4195,4197
4196,4197
4199,4200
4200,4201
4200,4202
4201,4202
4201,4203
4202,4203
4205,4206
4205,4207
4206,4207
4209,4210
4209,4211
4210,4211
4211,4212
4211,4213
4212,4213
4215,4216
4217,4218
4217,4219
4218,4219
4218,4220
4219,4220
4220,4221
4222,4223
4222,4224
4223,4224
4226,4227
4227,4228
4227,4229
4228,4229
4228,4230
4229,4230
4229,4231
4230,4231
4230,4232
4231,4232
4234,4235
4234,4236
4235,4236
4238,4239
4238,4240
4239,4240
4242,4243
4242,4244
4242,4245
4242,4246
4242,4247
4243,4244
4243,4245
4244,4245
4245,4246
4245,4247
4245,4248
4245,4249
4246,4247
4248,4249
4251,4252
4251,4253
4252,4253
4254,4255
4256,4257
4257,4258
4257,4259
4257,4260
4258,4259
4260,4261
4263,4264
4264,4265
4264,4266
4264,4267
4264,4268
4264,4269
4265,4266
4267,4268
4269,4270
4269,4271
4270,4271
4271,4272
4271,4273
4272,4273
4272,4274
4273,4274
4276,4277
4276,4278
4277,4278
4282,4283
4282,4284
4283,4284
4285,4286
4287,4288
4287,4289
4288,4289
4289,4290
4289,4291
4289,4292
4289,4293
4290,4291
4292,4293
4295,4296
4295,4297
4296,4297
4298,4299
4300,4301
4301,4302
4301,4303
4301,4304
4302,4303
4304,4305
4307,4308
4307,4309
4308,4309
4310,4311
4311,4312
4312,4313
4312,4314
4312,4315
4313,4314
4315,4316
4317,4318
4317,4319
4318,4319
4320,4321
4322,4323
4323,4324
4323,4325
4324,4325
4327,4328
4327,4329
4328,4329
4330,4331
4331,4332
4332,4333
4332,4334
4333,4334
4336,4337
4337,4338
4337,4339
4338,4339
4341,4342
4342,4343
4343,4344
4343,4345
4344,4345
4347,4348
4347,4349
4348,4349
4348,4350
4349,4350
4349,4351
4350,4351
4353,4354
4354,4355
4354,4356
4355,4356
4355,4357
4356,4357
4359,4360
4359,4361
4360,4361
4363,4364
4363,4365
4364,4365
4364,4366
4364,4367
4365,4366
4365,4367
4365,4368
4366,4367
4368,4369
4370,4371
4372,4373
4373,4374
4374,4375
4374,4376
4375,4376
4378,4379
4379,4380
4380,4381
4380,4382
4381,4382
4383,4384
4386,4387
4387,4388
4387,4389
4388,4389
4390,4391
4392,4393
4392,4394
4393,4394
4393,4395
4394,4395
4397,4398
4397,4399
4397,4400
4397,4401
4397,4402
4397,4403
4397,4404
4398,4399
4399,4400
4399,4401
4399,4402
4399,4403
4401,4402
4401,4403
4403,4404
4405,4406
4405,4407
4407,4408
4409,4410
4409,4411
4411,4412
4413,4414
4414,4415
4414,4416
4415,4416
4417,4418
4417,4419
4417,4420
4418,4419
4420,4421
4422,4423
4424,4425
4424,4426
4425,4426
4425,4427
4426,4427
4429,4430
4430,4431
4431,4432
4431,4433
4432,4433
4435,4436
4436,4437
4436,4438
4437,4438
4439,4440
4439,4441
4440,4441
4440,4442
4441,4442
4444,4445
4444,4446
4444,4447
4445,4446
4447,4448
4449,4450
4449,4451
4450,4451
4453,4454
4453,4455
4454,4455
4454,4456
4455,4456
4457,4458
4459,4460
4460,4461
4461,4462
4461,4463
4462,4463
4464,4465
4466,4467
4466,4468
4467,4468
4467,4469
4468,4469
4471,4472
4471,4473
4471,4474
4472,4473
4472,4474
4473,4474
4473,4475
4474,4475
4477,4478
4477,4479
4478,4479
4479,4480
4479,4481
4480,4481
4482,4483
4482,4484
4482,4485
4482,4486
4483,4484
4485,4486
4487,4488
4487,4489
4488,4489
4491,4492
4491,4493
4492,4493
4494,4495
4496,4497
4497,4498
4497,4499
4498,4499
4500,4501
4500,4502
4500,4503
4501,4502
4503,4504
4506,4507
4506,4508
4506,4509
4507,4508
4507,4509
4507,4510
4508,4509
4510,4511
4512,4513
4514,4515
4515,4516
4516,4517
4516,4518
4517,4518
4520,4521
4521,4522
4522,4523
4522,4524
4523,4524
4525,4526
4528,4529
4528,4530
4529,4530
4530,4531
4532,4533
4532,4534
4533,4534
4533,4535
4534,4535
4534,4536
4535,4536
4538,4539
4538,4540
4538,4541
4539,4540
4540,4541
4540,4542
4541,4542
4543,4544
4543,4545
4544,4545
4545,4546
4545,4547
4546,4547
4550,4551
4550,4552
4550,4553
4551,4552
4551,4553
4552,4553
4552,4554
4553,4554
4557,4558
4557,4559
4558,4559
4559,4560
4559,4561
4560,4561
4562,4563
4562,4564
4563,4564
4566,4567
4567,4568
4567,4569
4568,4569
4570,4571
4570,4572
4571,4572
4574,4575
4575,4576
4576,4577
4576,4578
4577,4578
4579,4580
4581,4582
4581,4583
4582,4583
4582,4584
4583,4584
4583,4585
4584,4585
4587,4588
4587,4589
4588,4589
4591,4592
4591,4593
4592,4593
4592,4594
4592,4595
4593,4594
4594,4595
4594,4596
4594,4597
4595,4596
4597,4598
4597,4599
4598,4599
4602,4603
4602,4604
4602,4605
4602,4606
4603,4604
4604,4605
4604,4606
4605,4606
4607,4608
4607,4609
4607,4610
4607,4611
4608,4609
4610,4611
4613,4614
4613,4615
4614,4615
4616,4617
4618,4619
4619,4620
4619,4621
4620,4621
4622,4623
4622,4624
4622,4625
4623,4624
4625,4626
4628,4629
4628,4630
4629,4630
4631,4632
4631,4633
4631,4634
4632,4633
4633,4634
4633,4635
4634,4635
4636,4637
4636,4638
4636,4639
4636,4640
4636,4641
4636,4642
4637,4638
4639,4640
4641,4642
4643,4644
4645,4646
4645,4647
4646,4647
4648,4649
4650,4651
4650,4652
4651,4652
4651,4653
4653,4654
4655,4656
4657,4658
4658,4659
4658,4660
4659,4660
4661,4662
4661,4663
4661,4664
4661,4665
4662,4663
4664,4665
4667,4668
4667,4669
4668,4669
4670,4671
4672,4673
4673,4674
4673,4675
4674,4675
4676,4677
4676,4678
4676,4679
4677,4678
4679,4680
4682,4683
4682,4684
4683,4684
4685,4686
4685,4687
4685,4688
4686,4687
4687,4688
4687,4689
4688,4689
4690,4691
4690,4692
4690,4693
4690,4694
4690,4695
4690,4696
4691,4692
4693,4694
4695,4696
4697,4698
4699,4700
4699,4701
4700,4701
4702,4703
4704,4705
4704,4706
4705,4706
4705,4707
4707,4708
4709,4710
4711,4712
4712,4713
4712,4714
4713,4714
4715,4716
4715,4717
4715,4718
4715,4719
4716,4717
4718,4719
4721,4722
4721,4723
4722,4723
4724,4725
4726,4727
4727,4728
4727,4729
4728,4729
4730,4731
4730,4732
4730,4733
4731,4732
4733,4734
4736,4737
4736,4738
4737,4738
4738,4739
4738,4740
4739,4740
4741,4742
4741,4743
4741,4744
4741,4745
4742,4743
4744,4745
4746,4747
4746,4748
4747,4748
4750,4751
4750,4752
4751,4752
4753,4754
4755,4756
4756,4757
4756,4758
4757,4758
4759,4760
4759,4761
4759,4762
4760,4761
4762,4763
4765,4766
4765,4767
4766,4767
4768,4769
4769,4770
4770,4771
4770,4772
4770,4773
4771,4772
4773,4774
4775,4776
4775,4777
4776,4777
4778,4779
4780,4781
4780,4782
4780,4783
4781,4782
4781,4783
4782,4783
4785,4786
4786,4787
4787,4788
4787,4789
4788,4789
4790,4791
4790,4792
4790,4793
4791,4792
4793,4794
4795,4796
4795,4797
4795,4798
4796,4797
4798,4799
4798,4800
4799,4800
4803,4804
4804,4805
4805,4806
4805,4807
4806,4807
4808,4809
4808,4810
4808,4811
4809,4810
4811,4812
4811,4813
4812,4813
4815,4816
4815,4817
4815,4818
4816,4817
4818,4819
4818,4820
4819,4820
4823,4824
4824,4825
4824,4826
4825,4826
4827,4828
4828,4829
4830,4831
4830,4832
4831,4832
4831,4833
4832,4833
4834,4835
4834,4836
4835,4836
4835,4837
4836,4837
4839,4840
4841,4842
4841,4843
4842,4843
4842,4844
4842,4845
4843,4844
4843,4845
4843,4846
4844,4845
4846,4847
4848,4849
4850,4851
4851,4852
4852,4853
4852,4854
4853,4854
4856,4857
4857,4858
4858,4859
4858,4860
4859,4860
4861,4862
4864,4865
4864,4866
4865,4866
4865,4867
4866,4867
4866,4868
4867,4868
4867,4869
4868,4869
4869,4870
4871,4872
4873,4874
4873,4875
4874,4875
4874,4876
4875,4876
4879,4880
4880,4881
4880,4882
4881,4882
4881,4883
4882,4883
4886,4887
4887,4888
4888,4889
4888,4890
4888,4891
4889,4890
4891,4892
4893,4894
4893,4895
4894,4895
4894,4896
4895,4896
4899,4900
4900,4901
4900,4902
4901,4902
4903,4904
4905,4906
4906,4907
4906,4908
4907,4908
4909,4910
4909,4911
4910,4911
4913,4914
4913,4915
4914,4915
4914,4916
4915,4916
4915,4917
4916,4917
4916,4918
4917,4918
4918,4919
4918,4920
4918,4921
4919,4920
4921,4922
4923,4924
4925,4926
4925,4927
4925,4928
4926,4927
4928,4929
4930,4931
4932,4933
4932,4934
4932,4935
4933,4934
4935,4936
4937,4938
4939,4940
4939,4941
4940,4941
4943,4944
4943,4945
4944,4945
4944,4946
4945,4946
4945,4947
4946,4947
4946,4948
4947,4948
4950,4951
4950,4952
4951,4952
4951,4953
4952,4953
4956,4957
4956,4958
4957,4958
4958,4959
4958,4960
4958,4961
4958,4962
4958,4963
4958,4964
4959,4960
4961,4962
4963,4964
4963,4965
4964,4965
4964,4966
4965,4966
4969,4970
4971,4972
4971,4973
4972,4973
4974,4975
4976,4977
4976,4978
4977,4978
4977,4979
4979,4980
4981,4982
4983,4984
4983,4985
4983,4986
4984,4985
4984,4986
4985,4986
4985,4987
4986,4987
4986,4988
4987,4988
4992,4993
4993,4994
4993,4995
4994,4995
4995,4996
4995,4997
4995,4998
4995,4999
4996,4997
4998,4999
5001,5002
5001,5003
5002,5003
5004,5005
5006,5007
5007,5008
5008,5009
5008,5010
5008,5011
5009,5010
5011,5012
5014,5015
5015,5016
5015,5017
5016,5017
5017,5018
5017,5019
5017,5020
5017,5021
5018,5019
5020,5021
5023,5024
5023,5025
5024,5025
5026,5027
5028,5029
5029,5030
5030,5031
5030,5032
5030,5033
5031,5032
5033,5034
5036,5037
5036,5038
5037,5038
5037,5039
5038,5039
5038,5040
5039,5040
5039,5041
5040,5041
5044,5045
5045,5046
5045,5047
5045,5048
5046,5047
5048,5049
5050,5051
5052,5053
5053,5054
5053,5055
5054,5055
5055,5056
5055,5057
5055,5058
5055,5059
5056,5057
5058,5059
5061,5062
5061,5063
5062,5063
5064,5065
5066,5067
5067,5068
5068,5069
5068,5070
5068,5071
5069,5070
5071,5072
5074,5075
5075,5076
5075,5077
5076,5077
5076,5078
5077,5078
5080,5081
5081,5082
5083,5084
5083,5085
5084,5085
5084,5086
5084,5087
5085,5086
5087,5088
5089,5090
5091,5092
5092,5093
5092,5094
5092,5095
5093,5094
5093,5095
5094,5095
5097,5098
5097,5099
5098,5099
5098,5100
5099,5100
5099,5101
5100,5101
5103,5104
5103,5105
5104,5105
5104,5106
5105,5106
5106,5107
5106,5108
5106,5109
5107,5108
5109,5110
5111,5112
5113,5114
5114,5115
5114,5116
5115,5116
5116,5117
5116,5118
5116,5119
5116,5120
5117,5118
5119,5120
5122,5123
5122,5124
5123,5124
5125,5126
5127,5128
5128,5129
5129,5130
5129,5131
5129,5132
5130,5131
5132,5133
5135,5136
5135,5137
5135,5138
5136,5137
5136,5138
5136,5139
5137,5138
5139,5140
5141,5142
5143,5144
5143,5145
5144,5145
5144,5146
5145,5146
5145,5147
5145,5148
5146,5147
5148,5149
5150,5151
5152,5153
5153,5154
5154,5155
5154,5156
5155,5156
5159,5160
5159,5161
5160,5161
5161,5162
5161,5163
5162,5163
5162,5164
5163,5164
5166,5167
5168,5169
5168,5170
5169,5170
5169,5171
5169,5172
5169,5173
5170,5171
5172,5173
5174,5175
5176,5177
5177,5178
5179,5180
5179,5181
5179,5182
5180,5181
5181,5182
5181,5183
5181,5184
5182,5183
5184,5185
5187,5188
5188,5189
5188,5190
5189,5190
5191,5192
5193,5194
5195,5196
5195,5197
5196,5197
5196,5198
5197,5198
5198,5199
5200,5201
5201,5202
5201,5203
5201,5204
5202,5203
5204,5205
5206,5207
5208,5209
5208,5210
5209,5210
5210,5211
5210,5212
5210,5213
5211,5212
5213,5214
5215,5216
5215,5217
5216,5217
5218,5219
5220,5221
5221,5222
5221,5223
5222,5223
5225,5226
5225,5227
5226,5227
5226,5228
5227,5228
5227,5229
5228,5229
5231,5232
5231,5233
5232,5233
5235,5236
5235,5237
5235,5238
5235,5239
5235,5240
5236,5237
5237,5238
5237,5239
5238,5239
5241,5242
5241,5243
5241,5244
5242,5243
5242,5244
5242,5245
5243,5244
5245,5246
5247,5248
5249,5250
5250,5251
5251,5252
5251,5253
5252,5253
5252,5254
5253,5254
5256,5257
5256,5258
5257,5258
5259,5260
5261,5262
5261,5263
5261,5264
5262,5263
5262,5264
5262,5265
5263,5264
5265,5266
5267,5268
5269,5270
5270,5271
5271,5272
5271,5273
5272,5273
5272,5274
5273,5274
5276,5277
5276,5278
5277,5278
5279,5280
5281,5282
5282,5283
5283,5284
5283,5285
5284,5285
5284,5286
5285,5286
5288,5289
5288,5290
5289,5290
5289,5291
5290,5291
5292,5293
5294,5295
5296,5297
5296,5298
5297,5298
5297,5299
5297,5300
5297,5301
5298,5299
5300,5301
5302,5303
5304,5305
5305,5306
5307,5308
5307,5309
5307,5310
5308,5309
5309,5310
5309,5311
5309,5312
5310,5311
5312,5313
5315,5316
5316,5317
5316,5318
5317,5318
5319,5320
5321,5322
5323,5324
5323,5325
5324,5325
5324,5326
5325,5326
5327,5328
5328,5329
5328,5330
5328,5331
5329,5330
5331,5332
5333,5334
5335,5336
5335,5337
5336,5337
5337,5338
5337,5339
5338,5339
5340,5341
5342,5343
5343,5344
5343,5345
5344,5345
5347,5348
5347,5349
5348,5349
5348,5350
5349,5350
5350,5351
5350,5352
5350,5353
5351,5352
5353,5354
5355,5356
5357,5358
5358,5359
5358,5360
5358,5361
5359,5360
5361,5362
5363,5364
5365,5366
5365,5367
5366,5367
5366,5368
5367,5368
5368,5369
5368,5370
5368,5371
5368,5372
5369,5370
5371,5372
5374,5375
5374,5376
5375,5376
5377,5378
5379,5380
5380,5381
5381,5382
5381,5383
5381,5384
5382,5383
5384,5385
5387,5388
5388,5389
5388,5390
5388,5391
5388,5392
5389,5390
5391,5392
5393,5394
5395,5396
5397,5398
5397,5399
5398,5399
5398,5400
5399,5400
5399,5401
5399,5402
5400,5401
5402,5403
5404,5405
5406,5407
5407,5408
5407,5409
5407,5410
5408,5409
5410,5411
5412,5413
5414,5415
5415,5416
5415,5417
5415,5418
5416,5417
5416,5418
5417,5418
5417,5419
5418,5419
5422,5423
5423,5424
5423,5425
5424,5425
5425,5426
5427,5428
5427,5429
5428,5429
5429,5430
5429,5431
5429,5432
5430,5431
5432,5433
5434,5435
5434,5436
5435,5436
5437,5438
5439,5440
5440,5441
5440,5442
5441,5442
5444,5445
5445,5446
5445,5447
5446,5447
5448,5449
5448,5450
5449,5450
5450,5451
5450,5452
5451,5452
5453,5454
5455,5456
5456,5457
5456,5458
5457,5458
5460,5461
5460,5462
5461,5462
5461,5463
5462,5463
5462,5464
5463,5464
5463,5465
5464,5465
5467,5468
5467,5469
5468,5469
5471,5472
5471,5473
5471,5474
5472,5473
5474,5475
5476,5477
5478,5479
5478,5480
5479,5480
5479,5481
5479,5482
5480,5481
5480,5482
5480,5483
5481,5482
5483,5484
5485,5486
5487,5488
5488,5489
5489,5490
5489,5491
5490,5491
5493,5494
5494,5495
5495,5496
5495,5497
5496,5497
5498,5499
5501,5502
5501,5503
5502,5503
5502,5504
5503,5504
5503,5505
5504,5505
5507,5508
5509,5510
5509,5511
5510,5511
5510,5512
5511,5512
5511,5513
5512,5513
5512,5514
5513,5514
5516,5517
5518,5519
5519,5520
5520,5521
5520,5522
5520,5523
5520,5524
5520,5525
5521,5522
5525,5526
5527,5528
5527,5529
5528,5529
5531,5532
5532,5533
5532,5534
5533,5534
5535,5536
5535,5537
5536,5537
5539,5540
5539,5541
5540,5541
5540,5542
5541,5542
5542,5543
5542,5544
5543,5544
5543,5545
5544,5545
5547,5548
5548,5549
5548,5550
5549,5550
5551,5552
5553,5554
5554,5555
5554,5556
5555,5556
5555,5557
5556,5557
5559,5560
5561,5562
5561,5563
5561,5564
5561,5565
5562,5563
5563,5564
5563,5565
5564,5565
5564,5566
5565,5566
5568,5569
5570,5571
5570,5572
5571,5572
5571,5573
5571,5574
5571,5575
5572,5573
5574,5575
5576,5577
5578,5579
5579,5580
5581,5582
5581,5583
5581,5584
5582,5583
5583,5584
5583,5585
5583,5586
5584,5585
5586,5587
5589,5590
5590,5591
5590,5592
5591,5592
5593,5594
5596,5597
5596,5598
5597,5598
5597,5599
5597,5600
5598,5599
5600,5601
5602,5603
5603,5604
5603,5605
5604,5605
5606,5607
5608,5609
5609,5610
5610,5611
5610,5612
5610,5613
5610,5614
5610,5615
5610,5616
5611,5612
5613,5614
5615,5616
5617,5618
5619,5620
5621,5622
5621,5623
5621,5624
5622,5623
5624,5625
5626,5627
5628,5629
5629,5630
5629,5631
5629,5632
5629,5633
5629,5634
5629,5635
5629,5636
5629,5637
5629,5638
5630,5631
5632,5633
5634,5635
5638,5639
5638,5640
5639,5640
5641,5642
5643,5644
5643,5645
5644,5645
5646,5647
5648,5649
5648,5650
5649,5650
5652,5653
5652,5654
5653,5654
5656,5657
5656,5658
5657,5658
5657,5659
5658,5659
5658,5660
5659,5660
5660,5661
5661,5662
5661,5663
5662,5663
5662,5664
5663,5664
5666,5667
5667,5668
5667,5669
5668,5669
5670,5671
5672,5673
5673,5674
5673,5675
5673,5676
5674,5675
5676,5677
5678,5679
5680,5681
5681,5682
5682,5683
5682,5684
5683,5684
5683,5685
5684,5685
5687,5688
5689,5690
5689,5691
5689,5692
5690,5691
5691,5692
5691,5693
5692,5693
5692,5694
5693,5694
5696,5697
5698,5699
5698,5700
5699,5700
5699,5701
5699,5702
5699,5703
5700,5701
5702,5703
5704,5705
5706,5707
5707,5708
5709,5710
5709,5711
5709,5712
5710,5711
5711,5712
5711,5713
5711,5714
5712,5713
5714,5715
5717,5718
5718,5719
5718,5720
5719,5720
5721,5722
5724,5725
5725,5726
5725,5727
5725,5728
5725,5729
5725,5730
5725,5731
5725,5732
5725,5733
5725,5734
5726,5727
5728,5729
5730,5731
5734,5735
5734,5736
5735,5736
5737,5738
5739,5740
5739,5741
5740,5741
5742,5743
5744,5745
5744,5746
5745,5746
5748,5749
5748,5750
5749,5750
5752,5753
5752,5754
5753,5754
5753,5755
5754,5755
5754,5756
5755,5756
5756,5757
5756,5758
5757,5758
5757,5759
5758,5759
5761,5762
5762,5763
5762,5764
5763,5764
5765,5766
5767,5768
5768,5769
5768,5770
5769,5770
5769,5771
5770,5771
5773,5774
5775,5776
5776,5777
5777,5778
5779,5780
5779,5781
5780,5781
5781,5782
5781,5783
5782,5783
5785,5786
5786,5787
5786,5788
5786,5789
5786,5790
5786,5791
5786,5792
5786,5793
5786,5794
5786,5795
5787,5788
5789,5790
5791,5792
5795,5796
5795,5797
5796,5797
5798,5799
5800,5801
5800,5802
5801,5802
5803,5804
5805,5806
5805,5807
5806,5807
5809,5810
5809,5811
5810,5811
5813,5814
5813,5815
5814,5815
5814,5816
5815,5816
5815,5817
5816,5817
5817,5818
5818,5819
5818,5820
5819,5820
5819,5821
5820,5821
5823,5824
5824,5825
5824,5826
5825,5826
5827,5828
5829,5830
5830,5831
5831,5832
5831,5833
5832,5833
5832,5834
5833,5834
5836,5837
5838,5839
5839,5840
5841,5842
5841,5843
5842,5843
5843,5844
5843,5845
5844,5845
5847,5848
5848,5849
5848,5850
5848,5851
5848,5852
5848,5853
5848,5854
5848,5855
5848,5856
5848,5857
5849,5850
5851,5852
5853,5854
5857,5858
5857,5859
5858,5859
5860,5861
5862,5863
5862,5864
5863,5864
5865,5866
5867,5868
5867,5869
5868,5869
5871,5872
5871,5873
5872,5873
5875,5876
5875,5877
5876,5877
5876,5878
5877,5878
5877,5879
5878,5879
5881,5882
5883,5884
5883,5885
5884,5885
5885,5886
5885,5887
5886,5887
5890,5891
5890,5892
5891,5892
5891,5893
5892,5893
5892,5894
5893,5894
5896,5897
5898,5899
5898,5900
5898,5901
5899,5900
5899,5901
5900,5901
5900,5902
5901,5902
5902,5903
5902,5904
5902,5905
5903,5904
5905,5906
5907,5908
5909,5910
5910,5911
5910,5912
5910,5913
5910,5914
5911,5912
5913,5914
5916,5917
5916,5918
5917,5918
5919,5920
5921,5922
5922,5923
5923,5924
5923,5925
5923,5926
5924,5925
5926,5927
5929,5930
5930,5931
5930,5932
5931,5932
5935,5936
5935,5937
5936,5937
5936,5938
5937,5938
5939,5940
5941,5942
5943,5944
5944,5945
5944,5946
5945,5946
5947,5948
5947,5949
5947,5950
5947,5951
5947,5952
5947,5953
5947,5954
5947,5955
5948,5949
5950,5951
5951,5952
5954,5955
5955,5956
5957,5958
5959,5960
5961,5962
5962,5963
5964,5965
5965,5966
5967,5968
5967,5969
5967,5970
5968,5969
5970,5971
5970,5972
5970,5973
5970,5974
5970,5975
5970,5976
5970,5977
5971,5972
5972,5973
5972,5974
5974,5975
5974,5976
5974,5977
5976,5977
5978,5979
5980,5981
5980,5982
5981,5982
5981,5983
5982,5983
5982,5984
5983,5984
5983,5985
5983,5986
5984,5985
5986,5987
5989,5990
5991,5992
5992,5993
5992,5994
5993,5994
5993,5995
5994,5995
5997,5998
5998,5999
5998,6000
5999,6000
5999,6001
6000,6001
6002,6003
6004,6005
6004,6006
6005,6006
6007,6008
6009,6010
6009,6011
6009,6012
6009,6013
6009,6014
6010,6011
6010,6012
6011,6012
6013,6014
6013,6015
6014,6015
6015,6016
6015,6017
6016,6017
6018,6019
6020,6021
6021,6022
6021,6023
6022,6023
6025,6026
6026,6027
6026,6028
6026,6029
6027,6028
6031,6032
6032,6033
6032,6034
6033,6034
6035,6036
6036,6037
6036,6038
6036,6039
6037,6038
6037,6039
6038,6039
6038,6040
6038,6041
6039,6040
6041,6042
6041,6043
6042,6043
6042,6044
6043,6044
6045,6046
6049,6050
6050,6051
6050,6052
6051,6052
6051,6053
6052,6053
6054,6055
6056,6057
6056,6058
6057,6058
6059,6060
6063,6064
6064,6065
6064,6066
6065,6066
6065,6067
6066,6067
6069,6070
6070,6071
6072,6073
6074,6075
6074,6076
6074,6077
6075,6076
6075,6077
6076,6077
6076,6078
6076,6079
6077,6078
6079,6080
6081,6082
6083,6084
6084,6085
6084,6086
6085,6086
6085,6087
6086,6087
6089,6090
6090,6091
6090,6092
6091,6092
6093,6094
6095,6096
6096,6097
6097,6098
6097,6099
6098,6099
6100,6101
6100,6102
6101,6102
6103,6104
6105,6106
6106,6107
6107,6108
6107,6109
6108,6109
6110,6111
6110,6112
6111,6112
6113,6114
6115,6116
6115,6117
6116,6117
6117,6118
6119,6120
6121,6122
6121,6123
6122,6123
6122,6124
6123,6124
6123,6125
6124,6125
6127,6128
6129,6130
6129,6131
6130,6131
6131,6132
6131,6133
6132,6133
6132,6134
6133,6134
6136,6137
6136,6138
6137,6138
6137,6139
6138,6139
6142,6143
6143,6144
6143,6145
6144,6145
6144,6146
6145,6146
6149,6150
6149,6151
6149,6152
6150,6151
6150,6152
6151,6152
6152,6153
6152,6154
6153,6154
6153,6155
6154,6155
6157,6158
6159,6160
6160,6161
6160,6162
6161,6162
6161,6163
6162,6163
6162,6164
6163,6164
6163,6165
6164,6165
6169,6170
6171,6172
6171,6173
6171,6174
6172,6173
6172,6174
6173,6174
6173,6175
6174,6175
6174,6176
6175,6176
6179,6180
6180,6181
6181,6182
6181,6183
6181,6184
6182,6183
6184,6185
6186,6187
6186,6188
6187,6188
6187,6189
6188,6189
6192,6193
6192,6194
6193,6194
6193,6195
6193,6196
6194,6195
6196,6197
6198,6199
6199,6200
6199,6201
6200,6201
6202,6203
6204,6205
6204,6206
6204,6207
6204,6208
6205,6206
6205,6207
6206,6207
6206,6208
6207,6208
6207,6209
6208,6209
6211,6212
6213,6214
6214,6215
6215,6216
6215,6217
6216,6217
6216,6218
6217,6218
6221,6222
6222,6223
6222,6224
6223,6224
6225,6226
6225,6227
6225,6228
6225,6229
6226,6227
6228,6229
6230,6231
6232,6233
6233,6234
6235,6236
6235,6237
6236,6237
6236,6238
6237,6238
6238,6239
6238,6240
6239,6240
6242,6243
6242,6244
6243,6244
6245,6246
6247,6248
6248,6249
6249,6250
6249,6251
6249,6252
6249,6253
6249,6254
6249,6255
6250,6251
6252,6253
6254,6255
6256,6257
6259,6260
6259,6261
6259,6262
6260,6261
6262,6263
6264,6265
6266,6267
6266,6268
6267,6268
6267,6269
6268,6269
6268,6270
6269,6270
6272,6273
6272,6274
6273,6274
6275,6276
6277,6278
6278,6279
6279,6280
6279,6281
6279,6282
6279,6283
6279,6284
6279,6285
6280,6281
6282,6283
6284,6285
6286,6287
6289,6290
6289,6291
6289,6292
6290,6291
6292,6293
6294,6295
6296,6297
6296,6298
6297,6298
6299,6300
6300,6301
6300,6302
6301,6302
6301,6303
6302,6303
6302,6304
6303,6304
6306,6307
6307,6308
6307,6309
6307,6310
6308,6309
6310,6311
6312,6313
6314,6315
6315,6316
6316,6317
6316,6318
6316,6319
6316,6320
6316,6321
6317,6318
6319,6320
6321,6322
6321,6323
6322,6323
6322,6324
6323,6324
6327,6328
6327,6329
6328,6329
6332,6333
6332,6334
6332,6335
6333,6334
6333,6335
6334,6335
6335,6336
6335,6337
6336,6337
6336,6338
6337,6338
6338,6339
6338,6340
6339,6340
6339,6341
6340,6341
6343,6344
6345,6346
6346,6347
6346,6348
6347,6348
6347,6349
6348,6349
6348,6350
6349,6350
6354,6355
6354,6356
6354,6357
6355,6356
6357,6358
6359,6360
6361,6362
6362,6363
6362,6364
6363,6364
6364,6365
6364,6366
6365,6366
6365,6367
6366,6367
6369,6370
6371,6372
6373,6374
6373,6375
6373,6376
6373,6377
6373,6378
6373,6379
6373,6380
6373,6381
6374,6375
6374,6376
6375,6376
6375,6377
6375,6378
6376,6377
6378,6379
6380,6381
6382,6383
6383,6384
6384,6385
6384,6386
6384,6387
6384,6388
6385,6386
6387,6388
6389,6390
6391,6392
6393,6394
6393,6395
6394,6395
6394,6396
6394,6397
6394,6398
6395,6396
6397,6398
6399,6400
6401,6402
6402,6403
6404,6405
6404,6406
6404,6407
6404,6408
6405,6406
6406,6407
6406,6408
6406,6409
6407,6408
6409,6410
6412,6413
6413,6414
6413,6415
6414,6415
6416,6417
6418,6419
6419,6420
6419,6421
6420,6421
6422,6423
6424,6425
6426,6427
6426,6428
6427,6428
6427,6429
6428,6429
6428,6430
6429,6430
6430,6431
6432,6433
6432,6434
6433,6434
6433,6435
6434,6435
6438,6439
6439,6440
6439,6441
6440,6441
6440,6442
6441,6442
6445,6446
6446,6447
6447,6448
6447,6449
6447,6450
6448,6449
6450,6451
6453,6454
6453,6455
6454,6455
6456,6457
6457,6458
6458,6459
6458,6460
6459,6460
6461,6462
6463,6464
6463,6465
6463,6466
6464,6465
6466,6467
6466,6468
6466,6469
6466,6470
6467,6468
6468,6469
6468,6470
6469,6470
6471,6472
6471,6473
6472,6473
6472,6474
6473,6474
6477,6478
6477,6479
6478,6479
6478,6480
6479,6480
6482,6483
6482,6484
6482,6485
6482,6486
6482,6487
6483,6484
6484,6485
6484,6486
6486,6487
6488,6489
6489,6490
6489,6491
6491,6492
6493,6494
6494,6495
6494,6496
6495,6496
6497,6498
6499,6500
6500,6501
6500,6502
6501,6502
6503,6504
6503,6505
6503,6506
6506,6507
6507,6508
6509,6510
6509,6511
6510,6511
6512,6513
6512,6514
6512,6515
6512,6516
6512,6517
6512,6518
6512,6519
6512,6520
6512,6521
6512,6522
6512,6523
6512,6524
6512,6525
6512,6526
6512,6527
6512,6528
6512,6529
6512,6530
6512,6531
6512,6532
6512,6533
6512,6534
6512,6535
6512,6536
6512,6537
6513,6514
6515,6516
6516,6517
6516,6518
6517,6518
6520,6521
6521,6522
6521,6523
6522,6523
6525,6526
6525,6527
6525,6528
6526,6527
6526,6528
6527,6528
6527,6529
6528,6529
6532,6533
6533,6534
6533,6535
6534,6535
6534,6536
6535,6536
6537,6538
6538,6539
6538,6540
6538,6541
6538,6542
6539,6540
6541,6542
6544,6545
6544,6546
6545,6546
6547,6548
6549,6550
6549,6551
6549,6552
6550,6551
6551,6552
6551,6553
6552,6553
6554,6555
6554,6556
6554,6557
6555,6556
6557,6558
6559,6560
6561,6562
6562,6563
6562,6564
6563,6564
6565,6566
6567,6568
6567,6569
6568,6569
6568,6570
6569,6570
6572,6573
6573,6574
6573,6575
6574,6575
6577,6578
6577,6579
6577,6580
6578,6579
6578,6580
6579,6580
6579,6581
6580,6581
6584,6585
6585,6586
6585,6587
6586,6587
6586,6588
6587,6588
6589,6590
6590,6591
6590,6592
6590,6593
6590,6594
6591,6592
6593,6594
6596,6597
6596,6598
6597,6598
6599,6600
6601,6602
6601,6603
6601,6604
6602,6603
6603,6604
6603,6605
6604,6605
6606,6607
6606,6608
6606,6609
6607,6608
6609,6610
6611,6612
6613,6614
6614,6615
6614,6616
6615,6616
6617,6618
6619,6620
6619,6621
6620,6621
6620,6622
6621,6622
6624,6625
6625,6626
6625,6627
6626,6627
6629,6630
6629,6631
6629,6632
6630,6631
6630,6632
6631,6632
6631,6633
6632,6633
6634,6635
6635,6636
6635,6637
6635,6638
6635,6639
6636,6637
6638,6639
6641,6642
6641,6643
6642,6643
6644,6645
6646,6647
6646,6648
6646,6649
6647,6648
6648,6649
6648,6650
6649,6650
6651,6652
6651,6653
6651,6654
6652,6653
6654,6655
6656,6657
6658,6659
6659,6660
6659,6661
6660,6661
6662,6663
6664,6665
6664,6666
6665,6666
6665,6667
6666,6667
6669,6670
6670,6671
6670,6672
6671,6672
6674,6675
6674,6676
6675,6676
6677,6678
6677,6679
6678,6679
6679,6680
6679,6681
6680,6681
6682,6683
6682,6684
6682,6685
6682,6686
6682,6687
6682,6688
6683,6684
6685,6686
6687,6688
6687,6689
6688,6689
6688,6690
6689,6690
6693,6694
6695,6696
6695,6697
6696,6697
6698,6699
6700,6701
6700,6702
6701,6702
6701,6703
6703,6704
6705,6706
6707,6708
6707,6709
6708,6709
6708,6710
6709,6710
6712,6713
6713,6714
6713,6715
6714,6715
6717,6718
6717,6719
6718,6719
6718,6720
6719,6720
6721,6722
6722,6723
6722,6724
6722,6725
6722,6726
6723,6724
6725,6726
6728,6729
6728,6730
6729,6730
6731,6732
6733,6734
6733,6735
6733,6736
6734,6735
6735,6736
6735,6737
6736,6737
6738,6739
6738,6740
6738,6741
6739,6740
6741,6742
6743,6744
6745,6746
6746,6747
6746,6748
6747,6748
6749,6750
6751,6752
6751,6753
6752,6753
6752,6754
6753,6754
6756,6757
6757,6758
6757,6759
6758,6759
6761,6762
6762,6763
6762,6764
6763,6764
6765,6766
6765,6767
6765,6768
6766,6767
6768,6769
6768,6770
6769,6770
6773,6774
6773,6775
6774,6775
6775,6776
6775,6777
6776,6777
6778,6779
6778,6780
6779,6780
6781,6782
6782,6783
6784,6785
6784,6786
6785,6786
6785,6787
6786,6787
6786,6788
6786,6789
6786,6790
6787,6788
6789,6790
6789,6791
6790,6791
6793,6794
6795,6796
6797,6798
6797,6799
6798,6799
6798,6800
6799,6800
6799,6801
6800,6801
6802,6803
6803,6804
6803,6805
6803,6806
6803,6807
6804,6805
6806,6807
6808,6809
6808,6810
6809,6810
6812,6813
6812,6814
6813,6814
6815,6816
6817,6818
6817,6819
6817,6820
6818,6819
6819,6820
6819,6821
6820,6821
6822,6823
6822,6824
6822,6825
6823,6824
6825,6826
6827,6828
6829,6830
6830,6831
6830,6832
6831,6832
6833,6834
6835,6836
6835,6837
6836,6837
6836,6838
6837,6838
6840,6841
6841,6842
6841,6843
6842,6843
6845,6846
6846,6847
6846,6848
6847,6848
6850,6851
6851,6852
6851,6853
6851,6854
6852,6853
6854,6855
6856,6857
6858,6859
6859,6860
6859,6861
6860,6861
6862,6863
6863,6864
6865,6866
6865,6867
6866,6867
6866,6868
6867,6868
6867,6869
6868,6869
6870,6871
6872,6873
6873,6874
6873,6875
6873,6876
6873,6877
6874,6875
6876,6877
6879,6880
6879,6881
6880,6881
6882,6883
6884,6885
6884,6886
6884,6887
6885,6886
6886,6887
6886,6888
6887,6888
6889,6890
6889,6891
6889,6892
6890,6891
6892,6893
6894,6895
6896,6897
6897,6898
6897,6899
6898,6899
6900,6901
6902,6903
6902,6904
6903,6904
6903,6905
6904,6905
6907,6908
6908,6909
6908,6910
6909,6910
6913,6914
6915,6916
6915,6917
6915,6918
6916,6917
6916,6918
6917,6918
6917,6919
6918,6919
6922,6923
6923,6924
6923,6925
6924,6925
6925,6926
6925,6927
6925,6928
6925,6929
6926,6927
6928,6929
6931,6932
6931,6933
6932,6933
6934,6935
6936,6937
6937,6938
6937,6939
6937,6940
6938,6939
6940,6941
6943,6944
6944,6945
6945,6946
6945,6947
6945,6948
6945,6949
6945,6950
6946,6947
6948,6949
6948,6950
6949,6950
6952,6953
6954,6955
6956,6957
6957,6958
6959,6960
6960,6961
6960,6962
6961,6962
6963,6964
6966,6967
6968,6969
6968,6970
6968,6971
6969,6970
6969,6971
6970,6971
6973,6974
6973,6975
6973,6976
6974,6975
6975,6976
6975,6977
6976,6977
6976,6978
6977,6978
6981,6982
6982,6983
6982,6984
6982,6985
6982,6986
6982,6987
6983,6984
6985,6986
6985,6987
6986,6987
6989,6990
6991,6992
6993,6994
6994,6995
6996,6997
6996,6998
6997,6998
6998,6999
6998,7000
6998,7001
6998,7002
6999,7000
7001,7002
7004,7005
7004,7006
7005,7006
7007,7008
7009,7010
7010,7011
7010,7012
7010,7013
7011,7012
7013,7014
7016,7017
7016,7018
7016,7019
7017,7018
7018,7019
7018,7020
7019,7020
7019,7021
7020,7021
7024,7025
7025,7026
7025,7027
7025,7028
7025,7029
7025,7030
7026,7027
7028,7029
7028,7030
7029,7030
7032,7033
7034,7035
7036,7037
7037,7038
7039,7040
7039,7041
7040,7041
7041,7042
7041,7043
7041,7044
7041,7045
7042,7043
7044,7045
7047,7048
7047,7049
7048,7049
7050,7051
7052,7053
7053,7054
7053,7055
7053,7056
7054,7055
7056,7057
7059,7060
7060,7061
7060,7062
7061,7062
7063,7064
7066,7067
7068,7069
7068,7070
7069,7070
7069,7071
7070,7071
7070,7072
7071,7072
7074,7075
7076,7077
7076,7078
7076,7079
7076,7080
7076,7081
7076,7082
7077,7078
7078,7079
7078,7080
7078,7081
7079,7080
7081,7082
7083,7084
7085,7086
7085,7087
7086,7087
7087,7088
7087,7089
7088,7089
7091,7092
7091,7093
7091,7094
7091,7095
7091,7096
7091,7097
7091,7098
7091,7099
7092,7093
7093,7094
7093,7095
7095,7096
7095,7097
7098,7099
7099,7100
7099,7101
7100,7101
7102,7103
7104,7105
7104,7106
7105,7106
7106,7107
7106,7108
7107,7108
7109,7110
7109,7111
7109,7112
7110,7111
7112,7113
7115,7116
7116,7117
7117,7118
7117,7119
7118,7119
7118,7120
7119,7120
7122,7123
7122,7124
7123,7124
7125,7126
7127,7128
7127,7129
7128,7129
7129,7130
7129,7131
7130,7131
7132,7133
7132,7134
7132,7135
7133,7134
7135,7136
7138,7139
7139,7140
7140,7141
7140,7142
7141,7142
7141,7143
7142,7143
7145,7146
7145,7147
7146,7147
7148,7149
7150,7151
7151,7152
7151,7153
7152,7153
7154,7155
7156,7157
7156,7158
7157,7158
7158,7159
7158,7160
7159,7160
7162,7163
7162,7164
7163,7164
7164,7165
7164,7166
7164,7167
7164,7168
7164,7169
7164,7170
7165,7166
7167,7168
7169,7170
7170,7171
7171,7172
7174,7175
7174,7176
7175,7176
7178,7179
7178,7180
7179,7180
7181,7182
7183,7184
7184,7185
7184,7186
7185,7186
7185,7187
7186,7187
7189,7190
7189,7191
7190,7191
7192,7193
7194,7195
7194,7196
7195,7196
7196,7197
7196,7198
7197,7198
7200,7201
7201,7202
7202,7203
7202,7204
7203,7204
7203,7205
7204,7205
7207,7208
7207,7209
7208,7209
7211,7212
7212,7213
7212,7214
7212,7215
7212,7216
7212,7217
7212,7218
7213,7214
7217,7218
7217,7219
7218,7219
7221,7222
7221,7223
7222,7223
7225,7226
7225,7227
7226,7227
7229,7230
7230,7231
7230,7232
7231,7232
7233,7234
7234,7235
7234,7236
7235,7236
7238,7239
7238,7240
7239,7240
7239,7241
7240,7241
7240,7242
7241,7242
7242,7243
7242,7244
7243,7244
7243,7245
7244,7245
7247,7248
7249,7250
7249,7251
7249,7252
7250,7251
7252,7253
7254,7255
7256,7257
7257,7258
7258,7259
7258,7260
7259,7260
7259,7261
7260,7261
7263,7264
7263,7265
7263,7266
7263,7267
7263,7268
7263,7269
7264,7265
7267,7268
7269,7270
7272,7273
7274,7275
7274,7276
7274,7277
7274,7278
7274,7279
7274,7280
7275,7276
7276,7277
7276,7278
7276,7279
7277,7278
7279,7280
7279,7281
7280,7281
7283,7284
7285,7286
7286,7287
7286,7288
7286,7289
7287,7288
7289,7290
7289,7291
7290,7291
7293,7294
7295,7296
7296,7297
7296,7298
7297,7298
7297,7299
7298,7299
7302,7303
7303,7304
7303,7305
7304,7305
7304,7306
7305,7306
7308,7309
7308,7310
7309,7310
7312,7313
7313,7314
7313,7315
7314,7315
7314,7316
7315,7316
7318,7319
7318,7320
7319,7320
7321,7322
7323,7324
7323,7325
7323,7326
7324,7325
7324,7326
7324,7327
7324,7328
7325,7326
7327,7328
7327,7329
7327,7330
7328,7329
7330,7331
7330,7332
7331,7332
7335,7336
7337,7338
7338,7339
7340,7341
7340,7342
7340,7343
7341,7342
7342,7343
7342,7344
7342,7345
7343,7344
7345,7346
7348,7349
7349,7350
7349,7351
7350,7351
7352,7353
7352,7354
7353,7354
7356,7357
7357,7358
7357,7359
7358,7359
7358,7360
7359,7360
7362,7363
7364,7365
7365,7366
7366,7367
7366,7368
7366,7369
7366,7370
7366,7371
7367,7368
7369,7370
7370,7371
7370,7372
7371,7372
7374,7375
7376,7377
7378,7379
7380,7381
7381,7382
7381,7383
7382,7383
7384,7385
7385,7386
7385,7387
7386,7387
7389,7390
7389,7391
7390,7391
7391,7392
7391,7393
7391,7394
7391,7395
7392,7393
7394,7395
7397,7398
7397,7399
7398,7399
7400,7401
7402,7403
7403,7404
7403,7405
7403,7406
7404,7405
7406,7407
7409,7410
7410,7411
7410,7412
7411,7412
7413,7414
7417,7418
7417,7419
7418,7419
7419,7420
7419,7421
7419,7422
7419,7423
7420,7421
7422,7423
7425,7426
7425,7427
7426,7427
7428,7429
7430,7431
7431,7432
7431,7433
7431,7434
7432,7433
7434,7435
7437,7438
7438,7439
7438,7440
7439,7440
7441,7442
7444,7445
7445,7446
7445,7447
7446,7447
7449,7450
7450,7451
7450,7452
7451,7452
7454,7455
7454,7456
7454,7457
7455,7456
7455,7457
7455,7458
7456,7457
7458,7459
7460,7461
7462,7463
7462,7464
7463,7464
7463,7465
7463,7466
7464,7465
7465,7466
7467,7468
7467,7469
7468,7469
7469,7470
7469,7471
7470,7471
7473,7474
7473,7475
7473,7476
7474,7475
7475,7476
7475,7477
7475,7478
7475,7479
7476,7477
7478,7479
7481,7482
7481,7483
7482,7483
7484,7485
7486,7487
7486,7488
7487,7488
7488,7489
7488,7490
7489,7490
7491,7492
7491,7493
7491,7494
7492,7493
7494,7495
7496,7497
7498,7499
7499,7500
7499,7501
7500,7501
7502,7503
7504,7505
7505,7506
7506,7507
7506,7508
7507,7508
7510,7511
7511,7512
7512,7513
7512,7514
7513,7514
7515,7516
7515,7517
7516,7517
7516,7518
7517,7518
7521,7522
7521,7523
7522,7523
7522,7524
7523,7524
7526,7527
7527,7528
7527,7529
7528,7529
7530,7531
7530,7532
7530,7533
7530,7534
7530,7535
7530,7536
7530,7537
7530,7538
7530,7539
7530,7540
7530,7541
7530,7542
7530,7543
7530,7544
7530,7545
7530,7546
7530,7547
7530,7548
7530,7549
7530,7550
7530,7551
7530,7552
7530,7553
7530,7554
7530,7555
7530,7556
7530,7557
7530,7558
7530,7559
7530,7560
7530,7561
7530,7562
7530,7563
7530,7564
7531,7532
7533,7534
7534,7535
7534,7536
7535,7536
7538,7539
7538,7540
7538,7541
7539,7540
7539,7541
7540,7541
7540,7542
7541,7542
7544,7545
7545,7546
7545,7547
7546,7547
7548,7549
7550,7551
7551,7552
7552,7553
7552,7554
7553,7554
7553,7555
7554,7555
7557,7558
7558,7559
7559,7560
7559,7561
7560,7561
7562,7563
7564,7565
7565,7566
7566,7567
7566,7568
7567,7568
7567,7569
7568,7569
7571,7572
7572,7573
7572,7574
7573,7574
7575,7576
7577,7578
7577,7579
7577,7580
7578,7579
7578,7580
7579,7580
7579,7581
7579,7582
7580,7581
7582,7583
7584,7585
7586,7587
7587,7588
7587,7589
7588,7589
7588,7590
7589,7590
7592,7593
7593,7594
7593,7595
7594,7595
7596,7597
7598,7599
7599,7600
7599,7601
7600,7601
7601,7602
7601,7603
7601,7604
7601,7605
7602,7603
7604,7605
7607,7608
7607,7609
7608,7609
7610,7611
7612,7613
7613,7614
7614,7615
7614,7616
7614,7617
7615,7616
7617,7618
7620,7621
7621,7622
7621,7623
7622,7623
7623,7624
7623,7625
7623,7626
7623,7627
7624,7625
7626,7627
7629,7630
7629,7631
7630,7631
7632,7633
7634,7635
7635,7636
7636,7637
7636,7638
7636,7639
7637,7638
7639,7640
7643,7644
7645,7646
7646,7647
7646,7648
7647,7648
7650,7651
7650,7652
7650,7653
7651,7652
7651,7653
7652,7653
7655,7656
7655,7657
7656,7657
7657,7658
7657,7659
7658,7659
7658,7660
7659,7660
7663,7664
7663,7665
7664,7665
7665,7666
7665,7667
7665,7668
7665,7669
7666,7667
7668,7669
7671,7672
7671,7673
7672,7673
7674,7675
7676,7677
7677,7678
7678,7679
7678,7680
7678,7681
7679,7680
7681,7682
7684,7685
7684,7686
7685,7686
7686,7687
7686,7688
7687,7688
7687,7689
7688,7689
7692,7693
7692,7694
7693,7694
7694,7695
7694,7696
7694,7697
7694,7698
7695,7696
7697,7698
7700,7701
7700,7702
7701,7702
7703,7704
7705,7706
7706,7707
7707,7708
7707,7709
7707,7710
7708,7709
7710,7711
7714,7715
7716,7717
7716,7718
7716,7719
7716,7720
7716,7721
7716,7722
7716,7723
7716,7724
7716,7725
7717,7718
7718,7719
7718,7720
7719,7720
7721,7722
7721,7723
7721,7724
7724,7725
7725,7726
7727,7728
7728,7729
7728,7730
7730,7731
7730,7732
7732,7733
7734,7735
7735,7736
7735,7737
7735,7738
7735,7739
7735,7740
7736,7737
7738,7739
7738,7740
7739,7740
7742,7743
7744,7745
7746,7747
7747,7748
7749,7750
7750,7751
7750,7752
7751,7752
7754,7755
7755,7756
7755,7757
7756,7757
7758,7759
7758,7760
7758,7761
7758,7762
7759,7760
7761,7762
7761,7763
7762,7763
7765,7766
7766,7767
7769,7770
7769,7771
7769,7772
7770,7771
7770,7772
7771,7772
7772,7773
7772,7774
7773,7774
7773,7775
7774,7775
7776,7777
7776,7778
7777,7778
7780,7781
7780,7782
7781,7782
7783,7784
7785,7786
7785,7787
7785,7788
7786,7787
7788,7789
7789,7790
7789,7791
7790,7791
7793,7794
7795,7796
7796,7797
7796,7798
7797,7798
7798,7799
7798,7800
7798,7801
7798,7802
7799,7800
7801,7802
7804,7805
7804,7806
7805,7806
7807,7808
7809,7810
7810,7811
7811,7812
7811,7813
7811,7814
7812,7813
7814,7815
7817,7818
7818,7819
7819,7820
7819,7821
7820,7821
7820,7822
7821,7822
7824,7825
7826,7827
7827,7828
7827,7829
7827,7830
7828,7829
7830,7831
7832,7833
7834,7835
7835,7836
7835,7837
7836,7837
7838,7839
7841,7842
7843,7844
7844,7845
7844,7846
7844,7847
7845,7846
7847,7848
7849,7850
7852,7853
7854,7855
7854,7856
7855,7856
7857,7858
7857,7859
7858,7859
7858,7860
7858,7861
7859,7860
7860,7861
7860,7862
7861,7862
7863,7864
7863,7865
7864,7865
7867,7868
7868,7869
7868,7870
7869,7870
7870,7871
7870,7872
7870,7873
7870,7874
7871,7872
7873,7874
7876,7877
7876,7878
7877,7878
7879,7880
7881,7882
7882,7883
7883,7884
7883,7885
7883,7886
7884,7885
7886,7887
7889,7890
7890,7891
7890,7892
7891,7892
7892,7893
7892,7894
7892,7895
7892,7896
7893,7894
7895,7896
7898,7899
7898,7900
7899,7900
7901,7902
7903,7904
7904,7905
7905,7906
7905,7907
7905,7908
7906,7907
7908,7909
7911,7912
7912,7913
7912,7914
7913,7914
7915,7916
7917,7918
7918,7919
7918,7920
7919,7920
7923,7924
7925,7926
7926,7927
7926,7928
7926,7929
7927,7928
7929,7930
7931,7932
7934,7935
7936,7937
7937,7938
7937,7939
7937,7940
7938,7939
7940,7941
7942,7943
7945,7946
7947,7948
7948,7949
7948,7950
7949,7950
7953,7954
7955,7956
7956,7957
7956,7958
7956,7959
7957,7958
7959,7960
7961,7962
7965,7966
7966,7967
7966,7968
7967,7968
7970,7971
7970,7972
7971,7972
7972,7973
7972,7974
7972,7975
7972,7976
7973,7974
7975,7976
7978,7979
7978,7980
7979,7980
7981,7982
7983,7984
7984,7985
7985,7986
7985,7987
7985,7988
7986,7987
7988,7989
7992,7993
7992,7994
7993,7994
7993,7995
7993,7996
7994,7995
7995,7996
7997,7998
7997,7999
7998,7999
7999,8000
7999,8001
8000,8001
8003,8004
8003,8005
8003,8006
8004,8005
8005,8006
8005,8007
8005,8008
8005,8009
8006,8007
8008,8009
8011,8012
8011,8013
8012,8013
8014,8015
8016,8017
8016,8018
8017,8018
8018,8019
8018,8020
8019,8020
8021,8022
8021,8023
8021,8024
8022,8023
8024,8025
8026,8027
8028,8029
8029,8030
8029,8031
8030,8031
8032,8033
8034,8035
8035,8036
8036,8037
8036,8038
8037,8038
8040,8041
8041,8042
8042,8043
8042,8044
8043,8044
8045,8046
8045,8047
8046,8047
8046,8048
8047,8048
8051,8052
8051,8053
8052,8053
8052,8054
8053,8054
8056,8057
8057,8058
8057,8059
8058,8059
8060,8061
8060,8062
8060,8063
8060,8064
8060,8065
8060,8066
8060,8067
8060,8068
8060,8069
8060,8070
8060,8071
8060,8072
8060,8073
8060,8074
8060,8075
8060,8076
8060,8077
8060,8078
8060,8079
8060,8080
8060,8081
8060,8082
8060,8083
8060,8084
8060,8085
8060,8086
8060,8087
8060,8088
8060,8089
8060,8090
8060,8091
8060,8092
8060,8093
8061,8062
8063,8064
8064,8065
8064,8066
8065,8066
8068,8069
8069,8070
8069,8071
8070,8071
8070,8072
8071,8072
8074,8075
8076,8077
8076,8078
8076,8079
8077,8078
8077,8079
8078,8079
8078,8080
8078,8081
8079,8080
8081,8082
8083,8084
8085,8086
8086,8087
8086,8088
8087,8088
8087,8089
8088,8089
8091,8092
8092,8093
8092,8094
8093,8094
8095,8096
8097,8098
8098,8099
8098,8100
8099,8100
8100,8101
8100,8102
8100,8103
8100,8104
8101,8102
8103,8104
8106,8107
8106,8108
8107,8108
8109,8110
8111,8112
8112,8113
8113,8114
8113,8115
8113,8116
8114,8115
8116,8117
8119,8120
8120,8121
8120,8122
8121,8122
8122,8123
8122,8124
8122,8125
8122,8126
8123,8124
8125,8126
8128,8129
8128,8130
8129,8130
8131,8132
8133,8134
8134,8135
8135,8136
8135,8137
8135,8138
8136,8137
8138,8139
8142,8143
8144,8145
8145,8146
8145,8147
8146,8147
8149,8150
8149,8151
8150,8151
8150,8152
8151,8152
8151,8153
8152,8153
8155,8156
8156,8157
8156,8158
8157,8158
8159,8160
8161,8162
8162,8163
8163,8164
8163,8165
8164,8165
8164,8166
8165,8166
8168,8169
8170,8171
8170,8172
8171,8172
8171,8173
8172,8173
8172,8174
8173,8174
8176,8177
8178,8179
8179,8180
8179,8181
8180,8181
8181,8182
8181,8183
8181,8184
8181,8185
8182,8183
8184,8185
8187,8188
8187,8189
8188,8189
8190,8191
8192,8193
8193,8194
8194,8195
8194,8196
8194,8197
8195,8196
8197,8198
8201,8202
8203,8204
8204,8205
8204,8206
8204,8207
8205,8206
8207,8208
8209,8210
8212,8213
8214,8215
8214,8216
8215,8216
8217,8218
8218,8219
8219,8220
8219,8221
8220,8221
8222,8223
8222,8224
8223,8224
8226,8227
8227,8228
8227,8229
8228,8229
8232,8233
8234,8235
8235,8236
8235,8237
8235,8238
8236,8237
8238,8239
8240,8241
8243,8244
8245,8246
8246,8247
8246,8248
8246,8249
8247,8248
8249,8250
8251,8252
8254,8255
8256,8257
8257,8258
8257,8259
8258,8259
8262,8263
8264,8265
8265,8266
8265,8267
8265,8268
8266,8267
8268,8269
8270,8271
8274,8275
8275,8276
8275,8277
8276,8277
8279,8280
8279,8281
8280,8281
8281,8282
8281,8283
8281,8284
8281,8285
8282,8283
8284,8285
8287,8288
8287,8289
8288,8289
8290,8291
8292,8293
8293,8294
8294,8295
8294,8296
8294,8297
8295,8296
8297,8298
8301,8302
8301,8303
8302,8303
8302,8304
8303,8304
8305,8306
8306,8307
8308,8309
8309,8310
8310,8311
8310,8312
8310,8313
8311,8312
8313,8314
8315,8316
8315,8317
8316,8317
8318,8319
8320,8321
8320,8322
8321,8322
8321,8323
8321,8324
8321,8325
8322,8323
8324,8325
8326,8327
8328,8329
8329,8330
8331,8332
8331,8333
8331,8334
8331,8335
8332,8333
8333,8334
8333,8335
8333,8336
8334,8335
8336,8337
8339,8340
8340,8341
8340,8342
8341,8342
8343,8344
8345,8346
8346,8347
8346,8348
8347,8348
8349,8350
8351,8352
8353,8354
8354,8355
8354,8356
8354,8357
8355,8356
8357,8358
8359,8360
8361,8362
8361,8363
8361,8364
8362,8363
8362,8364
8363,8364
8363,8365
8364,8365
8365,8366
8365,8367
8366,8367
8366,8368
8367,8368
8370,8371
8372,8373
8372,8374
8372,8375
8373,8374
8375,8376
8377,8378
8379,8380
8379,8381
8379,8382
8379,8383
8379,8384
8379,8385
8380,8381
8382,8383
8384,8385
8386,8387
8390,8391
8390,8392
8391,8392
8391,8393
8392,8393
8392,8394
8392,8395
8393,8394
8395,8396
8397,8398
8399,8400
8400,8401
8401,8402
8401,8403
8401,8404
8401,8405
8402,8403
8404,8405
8406,8407
8408,8409
8410,8411
8410,8412
8410,8413
8411,8412
8412,8413
8412,8414
8412,8415
8412,8416
8412,8417
8413,8414
8415,8416
8417,8418
8419,8420
8422,8423
8422,8424
8422,8425
8422,8426
8423,8424
8424,8425
8424,8426
8424,8427
8424,8428
8424,8429
8425,8426
8429,8430
8429,8431
8430,8431
8433,8434
8435,8436
8436,8437
8436,8438
8437,8438
8440,8441
8441,8442
8441,8443
8442,8443
8444,8445
8447,8448
8448,8449
8449,8450
8449,8451
8449,8452
8449,8453
8449,8454
8450,8451
8454,8455
8456,8457
8458,8459
8458,8460
8458,8461
8459,8460
8459,8461
8460,8461
8460,8462
8461,8462
8462,8463
8462,8464
8463,8464
8463,8465
8464,8465
8467,8468
8469,8470
8469,8471
8469,8472
8470,8471
8472,8473
8474,8475
8476,8477
8477,8478
8477,8479
8477,8480
8478,8479
8480,8481
8482,8483
8482,8484
8483,8484
8483,8485
8484,8485
8488,8489
8488,8490
8488,8491
8488,8492
8488,8493
8489,8490
8490,8491
8490,8492
8490,8493
8490,8494
8491,8492
8493,8494
8496,8497
8498,8499
8498,8500
8499,8500
8499,8501
8499,8502
8500,8501
8502,8503
8504,8505
8506,8507
8507,8508
8508,8509
8508,8510
8508,8511
8508,8512
8509,8510
8511,8512
8513,8514
8515,8516
8517,8518
8518,8519
8518,8520
8519,8520
8522,8523
8523,8524
8523,8525
8524,8525
8526,8527
8529,8530
8529,8531
8529,8532
8530,8531
8530,8532
8531,8532
8532,8533
8532,8534
8533,8534
8533,8535
8534,8535
8534,8536
8535,8536
8538,8539
8540,8541
8540,8542
8541,8542
8541,8543
8542,8543
8545,8546
8547,8548
8547,8549
8547,8550
8548,8549
8550,8551
8552,8553
8554,8555
8555,8556
8556,8557
8556,8558
8556,8559
8556,8560
8557,8558
8559,8560
8561,8562
8563,8564
8565,8566
8565,8567
8565,8568
8566,8567
8566,8568
8567,8568
8567,8569
8567,8570
8568,8569
8570,8571
8572,8573
8574,8575
8574,8576
8575,8576
8575,8577
8576,8577
8579,8580
8581,8582
8582,8583
8582,8584
8583,8584
8583,8585
8584,8585
8584,8586
8585,8586
8589,8590
8589,8591
8589,8592
8589,8593
8589,8594
8590,8591
8591,8592
8593,8594
8594,8595
8594,8596
8594,8597
8594,8598
8595,8596
8597,8598
8599,8600
8601,8602
8606,8607
8606,8608
8606,8609
8607,8608
8607,8609
8608,8609
8608,8610
8609,8610
8612,8613
8615,8616
8615,8617
8615,8618
8616,8617
8616,8618
8617,8618
8617,8619
8618,8619
8621,8622
8623,8624
8624,8625
8624,8626
8625,8626
8625,8627
8626,8627
8626,8628
8627,8628
8631,8632
8631,8633
8631,8634
8631,8635
8631,8636
8631,8637
8631,8638
8632,8633
8633,8634
8635,8636
8636,8637
8638,8639
8639,8640
8639,8641
8640,8641
8642,8643
8644,8645
8648,8649
8649,8650
8649,8651
8649,8652
8649,8653
8649,8654
8649,8655
8650,8651
8654,8655
8654,8656
8655,8656
8657,8658
8659,8660
8659,8661
8660,8661
8663,8664
8663,8665
8664,8665
8664,8666
8665,8666
8669,8670
8670,8671
8671,8672
8671,8673
8671,8674
8671,8675
8671,8676
8671,8677
8672,8673
8676,8677
8676,8678
8677,8678
8679,8680
8681,8682
8681,8683
8682,8683
8685,8686
8685,8687
8686,8687
8686,8688
8687,8688
8691,8692
8692,8693
8692,8694
8693,8694
8695,8696
8697,8698
8697,8699
8698,8699
8698,8700
8699,8700
8701,8702
8703,8704
8703,8705
8704,8705
8705,8706
8705,8707
8706,8707
8708,8709
8708,8710
8708,8711
8708,8712
8709,8710
8711,8712
8713,8714
8715,8716
8717,8718
8717,8719
8717,8720
8718,8719
8718,8720
8719,8720
8722,8723
8722,8724
8722,8725
8722,8726
8722,8727
8722,8728
8722,8729
8722,8730
8723,8724
8724,8725
8724,8726
8724,8727
8724,8728
8725,8726
8727,8728
8728,8729
8731,8732
8732,8733
8733,8734
8735,8736
8736,8737
8736,8738
8737,8738
8737,8739
8738,8739
8741,8742
8743,8744
8744,8745
8744,8746
8744,8747
8744,8748
8745,8746
8747,8748
8748,8749
8748,8750
8749,8750
8749,8751
8750,8751
8754,8755
8757,8758
8758,8759
8758,8760
8759,8760
8759,8761
8760,8761
8763,8764
8765,8766
8766,8767
8766,8768
8767,8768
8767,8769
8768,8769
8771,8772
8771,8773
8772,8773
8775,8776
8776,8777
8776,8778
8777,8778
8777,8779
8778,8779
8778,8780
8779,8780
8783,8784
8785,8786
8786,8787
8786,8788
8787,8788
8787,8789
8788,8789
8791,8792
8793,8794
8793,8795
8793,8796
8794,8795
8794,8796
8795,8796
8796,8797
8796,8798
8797,8798
8797,8799
8798,8799
8802,8803
8803,8804
8803,8805
8804,8805
8804,8806
8805,8806
8805,8807
8805,8808
8806,8807
8808,8809
8810,8811
8812,8813
8813,8814
8813,8815
8814,8815
8814,8816
8815,8816
8818,8819
8819,8820
8819,8821
8820,8821
8822,8823
8824,8825
8825,8826
8825,8827
8826,8827
8827,8828
8827,8829
8828,8829
8831,8832
8831,8833
8831,8834
8832,8833
8834,8835
8836,8837
8838,8839
8838,8840
8838,8841
8838,8842
8838,8843
8838,8844
8838,8845
8839,8840
8840,8841
8840,8842
8842,8843
8844,8845
8844,8846
8844,8847
8844,8848
8845,8846
8846,8847
8846,8848
8847,8848
8850,8851
8850,8852
8851,8852
8853,8854
8855,8856
8856,8857
8858,8859
8859,8860
8859,8861
8860,8861
8860,8862
8861,8862
8861,8863
8862,8863
8864,8865
8864,8866
8865,8866
8867,8868
8869,8870
8870,8871
8870,8872
8872,8873
8874,8875
8876,8877
8876,8878
8877,8878
8877,8879
8878,8879
8880,8881
8882,8883
8883,8884
8885,8886
8886,8887
8886,8888
8887,8888
8889,8890
8890,8891
8890,8892
8891,8892
8894,8895
8894,8896
8895,8896
8896,8897
8896,8898
8897,8898
8897,8899
8898,8899
8901,8902
8903,8904
8904,8905
8904,8906
8905,8906
8905,8907
8906,8907
8909,8910
8909,8911
8909,8912
8910,8911
8910,8912
8911,8912
8911,8913
8912,8913
8912,8914
8913,8914
8915,8916
8916,8917
8916,8918
8916,8919
8916,8920
8917,8918
8919,8920
8921,8922
8921,8923
8922,8923
8925,8926
8926,8927
8928,8929
8928,8930
8929,8930
8931,8932
8933,8934
8933,8935
8934,8935
8935,8936
8935,8937
8936,8937
8938,8939
8940,8941
8941,8942
8941,8943
8942,8943
8945,8946
8945,8947
8946,8947
8947,8948
8947,8949
8948,8949
8948,8950
8949,8950
8952,8953
8954,8955
8954,8956
8954,8957
8954,8958
8954,8959
8955,8956
8956,8957
8956,8958
8957,8958
8959,8960
8961,8962
8962,8963
8962,8964
8963,8964
8965,8966
8967,8968
8968,8969
8968,8970
8968,8971
8968,8972
8969,8970
8971,8972
8972,8973
8974,8975
8977,8978
8978,8979
8978,8980
8978,8981
8979,8980
8981,8982
8982,8983
8984,8985
8985,8986
8985,8987
8987,8988
8989,8990
8990,8991
8990,8992
8991,8992
8991,8993
8992,8993
8992,8994
8993,8994
8996,8997
8998,8999
8998,9000
8998,9001
8999,9000
9001,9002
9002,9003
9004,9005
9005,9006
9007,9008
9007,9009
9008,9009
9008,9010
9009,9010
9009,9011
9010,9011
9013,9014
9015,9016
9015,9017
9016,9017
9017,9018
9017,9019
9018,9019
9018,9020
9019,9020
9019,9021
9020,9021
9023,9024
9025,9026
9025,9027
9025,9028
9025,9029
9026,9027
9028,9029
9028,9030
9029,9030
9029,9031
9030,9031
9033,9034
9035,9036
9035,9037
9036,9037
9040,9041
9040,9042
9041,9042
9042,9043
9042,9044
9043,9044
9043,9045
9044,9045
9047,9048
9049,9050
9050,9051
9051,9052
9051,9053
9052,9053
9052,9054
9053,9054
9053,9055
9054,9055
9057,9058
9059,9060
9060,9061
9062,9063
9062,9064
9062,9065
9063,9064
9063,9065
9064,9065
9064,9066
9065,9066
9068,9069
9070,9071
9071,9072
9071,9073
9072,9073
9072,9074
9073,9074
9074,9075
9074,9076
9075,9076
9075,9077
9076,9077
9076,9078
9077,9078
9077,9079
9078,9079
9081,9082
9084,9085
9086,9087
9086,9088
9086,9089
9087,9088
9089,9090
9091,9092
9093,9094
9093,9095
9093,9096
9094,9095
9095,9096
9095,9097
9096,9097
9098,9099
9098,9100
9101,9102
9101,9103
9101,9104
9101,9105
9102,9103
9103,9104
9103,9105
9104,9105
9106,9107
9106,9108
9107,9108
9107,9109
9108,9109
9111,9112
9113,9114
9115,9116
9115,9117
9116,9117
9118,9119
9118,9120
9118,9121
9119,9120
9121,9122
9123,9124
9125,9126
9126,9127
9126,9128
9127,9128
9127,9129
9127,9130
9128,9129
9130,9131
9132,9133
9134,9135
9134,9136
9135,9136
9136,9137
9136,9138
9136,9139
9136,9140
9137,9138
9139,9140
9142,9143
9142,9144
9143,9144
9145,9146
9148,9149
9148,9150
9149,9150
9149,9151
9150,9151
9150,9152
9151,9152
9153,9154
9155,9156
9155,9157
9156,9157
9158,9159
9160,9161
9160,9162
9161,9162
9162,9163
9162,9164
9163,9164
9166,9167
9167,9168
9167,9169
9167,9170
9168,9169
9170,9171
9172,9173
9172,9174
9173,9174
9175,9176
9177,9178
9177,9179
9178,9179
9179,9180
9179,9181
9180,9181
9182,9183
9183,9184
9183,9185
9184,9185
9187,9188
9189,9190
9190,9191
9190,9192
9191,9192
9193,9194
9194,9195
9194,9196
9195,9196
9198,9199
9198,9200
9198,9201
9198,9202
9199,9200
9199,9201
9201,9202
9201,9203
9202,9203
9202,9204
9203,9204
9203,9205
9204,9205
9206,9207
9207,9208
9207,9209
9207,9210
9207,9211
9208,9209
9210,9211
9212,9213
9213,9214
9215,9216
9216,9217
9218,9219
9218,9220
9219,9220
9221,9222
9223,9224
9223,9225
9224,9225
9225,9226
9225,9227
9226,9227
9228,9229
9230,9231
9231,9232
9231,9233
9232,9233
9235,9236
9235,9237
9236,9237
9236,9238
9237,9238
9237,9239
9238,9239
9242,9243
9243,9244
9244,9245
9244,9246
9244,9247
9245,9246
9247,9248
9248,9249
9250,9251
9250,9252
9251,9252
9251,9253
9252,9253
9256,9257
9256,9258
9257,9258
9257,9259
9258,9259
9258,9260
9258,9261
9259,9260
9261,9262
9263,9264
9265,9266
9265,9267
9266,9267
9266,9268
9266,9269
9267,9268
9269,9270
9271,9272
9272,9273
9275,9276
9276,9277
9277,9278
9277,9279
9277,9280
9277,9281
9278,9279
9280,9281
9283,9284
9283,9285
9284,9285
9286,9287
9288,9289
9288,9290
9289,9290
9289,9291
9290,9291
9290,9292
9291,9292
9293,9294
9295,9296
9295,9297
9296,9297
9298,9299
9300,9301
9300,9302
9301,9302
9302,9303
9302,9304
9303,9304
9306,9307
9307,9308
9307,9309
9307,9310
9308,9309
9310,9311
9312,9313
9312,9314
9313,9314
9315,9316
9317,9318
9318,9319
9319,9320
9319,9321
9319,9322
9319,9323
9320,9321
9322,9323
9325,9326
9325,9327
9326,9327
9328,9329
9330,9331
9331,9332
9331,9333
9332,9333
9334,9335
9336,9337
9336,9338
9337,9338
9339,9340
9340,9341
9341,9342
9341,9343
9342,9343
9344,9345
9346,9347
9346,9348
9346,9349
9347,9348
9349,9350
9350,9351
9351,9352
9351,9353
9352,9353
9354,9355
9356,9357
9356,9358
9356,9359
9356,9360
9357,9358
9358,9359
9358,9360
9359,9360
9359,9361
9360,9361
9364,9365
9365,9366
9365,9367
9366,9367
9366,9368
9367,9368
9371,9372
9372,9373
9372,9374
9373,9374
9373,9375
9374,9375
9378,9379
9378,9380
9379,9380
9379,9381
9379,9382
9379,9383
9380,9381
9382,9383
9384,9385
9386,9387
9387,9388
9389,9390
9390,9391
9391,9392
9391,9393
9391,9394
9392,9393
9394,9395
9397,9398
9398,9399
9398,9400
9399,9400
9401,9402
9403,9404
9403,9405
9404,9405
9404,9406
9405,9406
9405,9407
9406,9407
9407,9408
9407,9409
9407,9410
9408,9409
9410,9411
9412,9413
9414,9415
9415,9416
9415,9417
9415,9418
9416,9417
9418,9419
9420,9421
9422,9423
9423,9424
9423,9425
9423,9426
9424,9425
9426,9427
9428,9429
9430,9431
9431,9432
9432,9433
9432,9434
9432,9435
9432,9436
9433,9434
9435,9436
9437,9438
9439,9440
9441,9442
9441,9443
9441,9444
9442,9443
9442,9444
9443,9444
9443,9445
9444,9445
9445,9446
9445,9447
9445,9448
9446,9447
9448,9449
9450,9451
9452,9453
9452,9454
9452,9455
9453,9454
9455,9456
9457,9458
9457,9459
9458,9459
9458,9460
9459,9460
9461,9462
9463,9464
9465,9466
9465,9467
9466,9467
9466,9468
9467,9468
9471,9472
9471,9473
9471,9474
9471,9475
9471,9476
9471,9477
9471,9478
9471,9479
9471,9480
9471,9481
9471,9482
9471,9483
9472,9473
9473,9474
9473,9475
9474,9475
9476,9477
9476,9478
9479,9480
9479,9481
9480,9481
9481,9482
9482,9483
9482,9484
9483,9484
9485,9486
9485,9487
9485,9488
9486,9487
9488,9489
9489,9490
9490,9491
9491,9492
9493,9494
9495,9496
9497,9498
9498,9499
9498,9500
9498,9501
9498,9502
9499,9500
9501,9502
9501,9503
9502,9503
9505,9506
9505,9507
9506,9507
9509,9510
9510,9511
9511,9512
9511,9513
9512,9513
9515,9516
9516,9517
9516,9518
9516,9519
9516,9520
9517,9518
9519,9520
9519,9521
9520,9521
9523,9524
9523,9525
9524,9525
9526,9527
9528,9529
9529,9530
9530,9531
9530,9532
9531,9532
9534,9535
9535,9536
9535,9537
9536,9537
9536,9538
9537,9538
9540,9541
9540,9542
9541,9542
9544,9545
9545,9546
9545,9547
9546,9547
9546,9548
9547,9548
9550,9551
9550,9552
9551,9552
9554,9555
9555,9556
9555,9557
9556,9557
9556,9558
9557,9558
9560,9561
9562,9563
9562,9564
9563,9564
9563,9565
9563,9566
9564,9565
9566,9567
9568,9569
9570,9571
9571,9572
9572,9573
9572,9574
9573,9574
9573,9575
9574,9575
9578,9579
9579,9580
9579,9581
9580,9581
9582,9583
9583,9584
9583,9585
9584,9585
9587,9588
9588,9589
9588,9590
9588,9591
9588,9592
9589,9590
9591,9592
9592,9593
9592,9594
9593,9594
9596,9597
9598,9599
9600,9601
9601,9602
9601,9603
9602,9603
9604,9605
9605,9606
9605,9607
9606,9607
9609,9610
9610,9611
9610,9612
9611,9612
9613,9614
9614,9615
9614,9616
9615,9616
9618,9619
9618,9620
9619,9620
9619,9621
9620,9621
9620,9622
9621,9622
9621,9623
9622,9623
9623,9624
9623,9625
9623,9626
9624,9625
9626,9627
9628,9629
9630,9631
9630,9632
9630,9633
9631,9632
9633,9634
9635,9636
9635,9637
9636,9637
9638,9639
9640,9641
9641,9642
9641,9643
9641,9644
9642,9643
9644,9645
9646,9647
9648,9649
9648,9650
9649,9650
9649,9651
9650,9651
9654,9655
9655,9656
9656,9657
9656,9658
9656,9659
9657,9658
9659,9660
9659,9661
9660,9661
9663,9664
9665,9666
9665,9667
9667,9668
9668,9669
9668,9670
9669,9670
9671,9672
9672,9673
9672,9674
9675,9676
9675,9677
9676,9677
9678,9679
9679,9680
9680,9681
9680,9682
9681,9682
9683,9684
9685,9686
9685,9687
9686,9687
9686,9688
9687,9688
9690,9691
9690,9692
9690,9693
9690,9694
9690,9695
9690,9696
9690,9697
9690,9698
9690,9699
9691,9692
9692,9693
9692,9694
9693,9694
9695,9696
9696,9697
9698,9699
9698,9700
9699,9700
9701,9702
9702,9703
9703,9704
9703,9705
9703,9706
9703,9707
9703,9708
9703,9709
9703,9710
9703,9711
9703,9712
9703,9713
9703,9714
9703,9715
9703,9716
9703,9717
9704,9705
9706,9707
9708,9709
9712,9713
9712,9714
9713,9714
9715,9716
9717,9718
9717,9719
9718,9719
9720,9721
9722,9723
9722,9724
9723,9724
9726,9727
9726,9728
9727,9728
9730,9731
9730,9732
9730,9733
9730,9734
9731,9732
9733,9734
9733,9735
9734,9735
9734,9736
9735,9736
9735,9737
9736,9737
9736,9738
9737,9738
9739,9740
9739,9741
9740,9741
9746,9747
9746,9748
9747,9748
9747,9749
9748,9749
9748,9750
9749,9750
9749,9751
9750,9751
9752,9753
9752,9754
9753,9754
9760,9761
9760,9762
9760,9763
9760,9764
9761,9762
9763,9764
9763,9765
9764,9765
9764,9766
9765,9766
9765,9767
9766,9767
9766,9768
9767,9768
9769,9770
9769,9771
9770,9771
9776,9777
9776,9778
9777,9778
9777,9779
9778,9779
9778,9780
9779,9780
9779,9781
9780,9781
9782,9783
9782,9784
9783,9784
9790,9791
9790,9792
9790,9793
9790,9794
9791,9792
9793,9794
9793,9795
9794,9795
9794,9796
9795,9796
9795,9797
9796,9797
9796,9798
9797,9798
9799,9800
9799,9801
9800,9801
9806,9807
9806,9808
9807,9808
9807,9809
9808,9809
9808,9810
9809,9810
9809,9811
9810,9811
9812,9813
9812,9814
9813,9814
9820,9821
9820,9822
9820,9823
9820,9824
9821,9822
9823,9824
9823,9825
9824,9825
9824,9826
9825,9826
9825,9827
9826,9827
9826,9828
9827,9828
9829,9830
9829,9831
9830,9831
9836,9837
9836,9838
9837,9838
9837,9839
9838,9839
9838,9840
9839,9840
9839,9841
9840,9841
9842,9843
9842,9844
9843,9844
9850,9851
9850,9852
9851,9852
9851,9853
9854,9855
9855,9856
9855,9857
9856,9857
9856,9858
9857,9858
9860,9861
9860,9862
9861,9862
9864,9865
9864,9866
9865,9866
9867,9868
9867,9869
9867,9870
9868,9869
9869,9870
9870,9871
9870,9872
9871,9872
9874,9875
9874,9876
9875,9876
9877,9878
9877,9879
9877,9880
9878,9879
9879,9880
9879,9881
9879,9882
9879,9883
9879,9884
9880,9881
9882,9883
9884,9885
9885,9886
9886,9887
9889,9890
9889,9891
9890,9891
9893,9894
9894,9895
9894,9896
9894,9897
9894,9898
9894,9899
9894,9900
9894,9901
9894,9902
9894,9903
9895,9896
9899,9900
9899,9901
9899,9902
9900,9901
9900,9902
9901,9902
9901,9903
9902,9903
9904,9905
9904,9906
9905,9906
9909,9910
9911,9912
9911,9913
9911,9914
9912,9913
9912,9914
9913,9914
9913,9915
9914,9915
9916,9917
9916,9918
9917,9918
9921,9922
9923,9924
9925,9926
9925,9927
9926,9927
9928,9929
9928,9930
9929,9930
9933,9934
9935,9936
9935,9937
9936,9937
9938,9939
9940,9941
9942,9943
9943,9944
9943,9945
9943,9946
9943,9947
9943,9948
9943,9949
9943,9950
9944,9945
9948,9949
9948,9950
9949,9950
9953,9954
9955,9956
9957,9958
9957,9959
9958,9959
9958,9960
9958,9961
9959,9960
9961,9962
9963,9964
9965,9966
9966,9967
9967,9968
9968,9969
9968,9970
9969,9970
9972,9973
9973,9974
9973,9975
9973,9976
9974,9975
9976,9977
9976,9978
9977,9978
9980,9981
9982,9983
9982,9984
9983,9984
9984,9985
9984,9986
9985,9986
9988,9989
9989,9990
9990,9991
9990,9992
9990,9993
9990,9994
9991,9992
9993,9994
9996,9997
9996,9998
9997,9998
10000,10001
10000,10002
10001,10002
10001,10003
10002,10003
10002,10004
10003,10004
10003,10005
10004,10005
10008,10009
10008,10010
10008,10011
10009,10010
10011,10012
10013,10014
10015,10016
10016,10017
10017,10018
10017,10019
10017,10020
10017,10021
10017,10022
10018,10019
10020,10021
10020,10022
10021,10022
10025,10026
10027,10028
10029,10030
10030,10031
10030,10032
10030,10033
10030,10034
10030,10035
10031,10032
10033,10034
10035,10036
10036,10037
10037,10038
10040,10041
10040,10042
10041,10042
10041,10043
10044,10045
10045,10046
10045,10047
10046,10047
10046,10048
10047,10048
10049,10050
10051,10052
10051,10053
10052,10053
10055,10056
10056,10057
10056,10058
10056,10059
10056,10060
10057,10058
10059,10060
10062,10063
10064,10065
10064,10066
10065,10066
10067,10068
10068,10069
10069,10070
10069,10071
10069,10072
10069,10073
10070,10071
10072,10073
10075,10076
10075,10077
10076,10077
10079,10080
10080,10081
10080,10082
10080,10083
10081,10082
10083,10084
10085,10086
10087,10088
10088,10089
10088,10090
10089,10090
10091,10092
10092,10093
10094,10095
10094,10096
10096,10097
10097,10098
10097,10099
10098,10099
10100,10101
10100,10102
10101,10102
10103,10104
10105,10106
10106,10107
-----nextToken-----

-----computeFrom-----
314,315
314,316
326,327
326,328
482,483
482,484
499,500
499,501
500,501
500,502
501,502
501,503
519,520
519,521
534,535
534,536
540,541
540,542
543,544
543,545
552,553
552,554
571,572
571,573
591,592
591,593
628,629
628,630
637,638
637,639
648,649
648,650
659,660
659,661
665,666
665,667
677,678
677,679
689,690
689,691
703,704
703,705
706,707
706,708
709,710
709,711
714,715
714,716
720,721
720,722
732,733
732,734
738,739
738,740
744,745
744,746
750,751
750,752
755,756
755,757
758,759
758,760
802,803
802,804
813,814
813,815
828,829
828,830
845,846
845,847
856,857
856,858
871,872
871,873
882,883
882,884
887,888
887,889
888,889
888,890
899,900
899,901
902,903
902,904
907,908
907,909
910,911
910,912
913,914
913,915
992,993
992,994
1004,1005
1004,1006
1041,1042
1041,1043
1052,1053
1052,1054
1064,1065
1064,1066
1075,1076
1075,1077
1119,1120
1119,1121
1137,1138
1137,1139
1174,1175
1174,1176
1175,1176
1175,1177
1177,1178
1177,1179
1193,1194
1193,1195
1231,1232
1231,1233
1238,1239
1238,1240
1248,1249
1248,1250
1253,1254
1253,1255
1292,1293
1292,1294
1334,1335
1334,1336
1335,1336
1335,1337
1337,1338
1337,1339
1357,1358
1357,1359
1358,1359
1358,1360
1418,1419
1418,1420
1426,1427
1426,1428
1434,1435
1434,1436
1442,1443
1442,1444
1450,1451
1450,1452
1458,1459
1458,1460
1473,1474
1473,1475
1478,1479
1478,1480
1494,1495
1494,1496
1503,1504
1503,1505
1517,1518
1517,1519
1536,1537
1536,1538
1553,1554
1553,1555
1600,1601
1600,1602
1609,1610
1609,1611
1700,1701
1700,1702
1708,1709
1708,1710
1717,1718
1717,1719
1734,1735
1734,1736
1749,1750
1749,1751
1766,1767
1766,1768
1781,1782
1781,1783
1782,1783
1782,1784
1812,1813
1812,1814
1847,1848
1847,1849
1859,1860
1859,1861
1900,1901
1900,1902
1999,2000
1999,2001
2004,2005
2004,2006
2025,2026
2025,2027
2054,2055
2054,2056
2075,2076
2075,2077
2096,2097
2096,2098
2158,2159
2158,2160
2170,2171
2170,2172
2216,2217
2216,2218
2221,2222
2221,2223
2275,2276
2275,2277
2346,2347
2346,2348
2397,2398
2397,2399
2404,2405
2404,2406
2405,2406
2405,2407
2440,2441
2440,2442
2448,2449
2448,2450
2475,2476
2475,2477
2483,2484
2483,2485
2498,2499
2498,2500
2520,2521
2520,2522
2537,2538
2537,2539
2542,2543
2542,2544
2547,2548
2547,2549
2570,2571
2570,2572
2587,2588
2587,2589
2592,2593
2592,2594
2597,2598
2597,2599
2609,2610
2609,2611
2617,2618
2617,2619
2638,2639
2638,2640
2643,2644
2643,2645
2648,2649
2648,2650
2656,2657
2656,2658
2673,2674
2673,2675
2690,2691
2690,2692
2695,2696
2695,2697
2700,2701
2700,2702
2726,2727
2726,2728
2751,2752
2751,2753
2777,2778
2777,2779
2805,2806
2805,2807
2810,2811
2810,2812
2823,2824
2823,2825
2837,2838
2837,2839
2848,2849
2848,2850
2862,2863
2862,2864
2869,2870
2869,2871
2875,2876
2875,2877
2895,2896
2895,2897
2912,2913
2912,2914
2917,2918
2917,2919
2922,2923
2922,2924
2930,2931
2930,2932
2938,2939
2938,2940
2978,2979
2978,2980
3015,3016
3015,3017
3021,3022
3021,3023
3031,3032
3031,3033
3060,3061
3060,3062
3111,3112
3111,3113
3130,3131
3130,3132
3137,3138
3137,3139
3147,3148
3147,3149
3148,3149
3148,3150
3158,3159
3158,3160
3159,3160
3159,3161
3181,3182
3181,3183
3198,3199
3198,3200
3251,3252
3251,3253
3261,3262
3261,3263
3280,3281
3280,3282
3287,3288
3287,3289
3343,3344
3343,3345
3344,3345
3344,3346
3353,3354
3353,3355
3379,3380
3379,3381
3393,3394
3393,3395
3409,3410
3409,3411
3414,3415
3414,3416
3428,3429
3428,3430
3433,3434
3433,3435
3439,3440
3439,3441
3444,3445
3444,3446
3445,3446
3445,3447
3648,3649
3648,3650
3653,3654
3653,3655
3654,3655
3654,3656
3676,3677
3676,3678
3690,3691
3690,3692
3700,3701
3700,3702
3709,3710
3709,3711
3746,3747
3746,3748
3761,3762
3761,3763
3783,3784
3783,3785
3794,3795
3794,3796
3804,3805
3804,3806
3825,3826
3825,3827
3846,3847
3846,3848
3858,3859
3858,3860
3879,3880
3879,3881
3891,3892
3891,3893
3923,3924
3923,3925
3937,3938
3937,3939
3968,3969
3968,3970
3974,3975
3974,3976
3980,3981
3980,3982
3987,3988
3987,3989
4039,4040
4039,4041
4040,4041
4040,4042
4081,4082
4081,4083
4084,4085
4084,4086
4108,4109
4108,4110
4146,4147
4146,4148
4158,4159
4158,4160
4172,4173
4172,4174
4181,4182
4181,4183
4189,4190
4189,4191
4194,4195
4194,4196
4200,4201
4200,4202
4218,4219
4218,4220
4228,4229
4228,4230
4229,4230
4229,4231
4269,4270
4269,4271
4271,4272
4271,4273
4323,4324
4323,4325
4332,4333
4332,4334
4337,4338
4337,4339
4343,4344
4343,4345
4348,4349
4348,4350
4354,4355
4354,4356
4374,4375
4374,4376
4380,4381
4380,4382
4387,4388
4387,4389
4414,4415
4414,4416
4425,4426
4425,4427
4431,4432
4431,4433
4436,4437
4436,4438
4439,4440
4439,4441
4454,4455
4454,4456
4461,4462
4461,4463
4467,4468
4467,4469
4479,4480
4479,4481
4497,4498
4497,4499
4516,4517
4516,4518
4522,4523
4522,4524
4534,4535
4534,4536
4540,4541
4540,4542
4543,4544
4543,4545
4545,4546
4545,4547
4551,4552
4551,4553
4552,4553
4552,4554
4559,4560
4559,4561
4562,4563
4562,4564
4567,4568
4567,4569
4570,4571
4570,4572
4576,4577
4576,4578
4582,4583
4582,4584
4604,4605
4604,4606
4619,4620
4619,4621
4633,4634
4633,4635
4658,4659
4658,4660
4673,4674
4673,4675
4687,4688
4687,4689
4712,4713
4712,4714
4727,4728
4727,4729
4738,4739
4738,4740
4756,4757
4756,4758
4787,4788
4787,4789
4805,4806
4805,4807
4824,4825
4824,4826
4831,4832
4831,4833
4834,4835
4834,4836
4852,4853
4852,4854
4858,4859
4858,4860
4865,4866
4865,4867
4866,4867
4866,4868
4867,4868
4867,4869
4900,4901
4900,4902
4906,4907
4906,4908
4914,4915
4914,4916
4915,4916
4915,4917
4916,4917
4916,4918
4939,4940
4939,4941
4945,4946
4945,4947
4946,4947
4946,4948
4950,4951
4950,4952
4963,4964
4963,4965
4984,4985
4984,4986
4985,4986
4985,4987
5037,5038
5037,5039
5038,5039
5038,5040
5075,5076
5075,5077
5093,5094
5093,5095
5099,5100
5099,5101
5154,5155
5154,5156
5161,5162
5161,5163
5196,5197
5196,5198
5221,5222
5221,5223
5226,5227
5226,5228
5227,5228
5227,5229
5231,5232
5231,5233
5237,5238
5237,5239
5251,5252
5251,5253
5256,5257
5256,5258
5271,5272
5271,5273
5276,5277
5276,5278
5283,5284
5283,5285
5288,5289
5288,5290
5289,5290
5289,5291
5324,5325
5324,5326
5343,5344
5343,5345
5348,5349
5348,5350
5398,5399
5398,5400
5416,5417
5416,5418
5440,5441
5440,5442
5456,5457
5456,5458
5461,5462
5461,5463
5462,5463
5462,5464
5463,5464
5463,5465
5467,5468
5467,5469
5489,5490
5489,5491
5495,5496
5495,5497
5502,5503
5502,5504
5511,5512
5511,5513
5532,5533
5532,5534
5540,5541
5540,5542
5542,5543
5542,5544
5548,5549
5548,5550
5554,5555
5554,5556
5563,5564
5563,5565
5590,5591
5590,5592
5603,5604
5603,5605
5657,5658
5657,5659
5658,5659
5658,5660
5661,5662
5661,5663
5667,5668
5667,5669
5682,5683
5682,5684
5691,5692
5691,5693
5718,5719
5718,5720
5753,5754
5753,5755
5754,5755
5754,5756
5756,5757
5756,5758
5762,5763
5762,5764
5768,5769
5768,5770
5781,5782
5781,5783
5814,5815
5814,5816
5815,5816
5815,5817
5818,5819
5818,5820
5824,5825
5824,5826
5831,5832
5831,5833
5843,5844
5843,5845
5876,5877
5876,5878
5885,5886
5885,5887
5891,5892
5891,5893
5900,5901
5900,5902
5930,5931
5930,5932
5944,5945
5944,5946
5981,5982
5981,5983
5982,5983
5982,5984
5992,5993
5992,5994
5998,5999
5998,6000
6021,6022
6021,6023
6032,6033
6032,6034
6037,6038
6037,6039
6050,6051
6050,6052
6064,6065
6064,6066
6075,6076
6075,6077
6084,6085
6084,6086
6090,6091
6090,6092
6097,6098
6097,6099
6107,6108
6107,6109
6122,6123
6122,6124
6131,6132
6131,6133
6143,6144
6143,6145
6150,6151
6150,6152
6152,6153
6152,6154
6160,6161
6160,6162
6199,6200
6199,6201
6206,6207
6206,6208
6215,6216
6215,6217
6222,6223
6222,6224
6236,6237
6236,6238
6242,6243
6242,6244
6267,6268
6267,6269
6272,6273
6272,6274
6301,6302
6301,6303
6333,6334
6333,6335
6335,6336
6335,6337
6336,6337
6336,6338
6338,6339
6338,6340
6346,6347
6346,6348
6362,6363
6362,6364
6364,6365
6364,6366
6427,6428
6427,6429
6428,6429
6428,6430
6468,6469
6468,6470
6478,6479
6478,6480
6516,6517
6516,6518
6521,6522
6521,6523
6526,6527
6526,6528
6534,6535
6534,6536
6551,6552
6551,6553
6568,6569
6568,6570
6573,6574
6573,6575
6578,6579
6578,6580
6586,6587
6586,6588
6603,6604
6603,6605
6620,6621
6620,6622
6625,6626
6625,6627
6631,6632
6631,6633
6648,6649
6648,6650
6665,6666
6665,6667
6670,6671
6670,6672
6679,6680
6679,6681
6687,6688
6687,6689
6708,6709
6708,6710
6713,6714
6713,6715
6718,6719
6718,6720
6735,6736
6735,6737
6752,6753
6752,6754
6757,6758
6757,6759
6762,6763
6762,6764
6775,6776
6775,6777
6799,6800
6799,6801
6819,6820
6819,6821
6836,6837
6836,6838
6841,6842
6841,6843
6846,6847
6846,6848
6866,6867
6866,6868
6867,6868
6867,6869
6886,6887
6886,6888
6903,6904
6903,6905
6908,6909
6908,6910
6916,6917
6916,6918
6975,6976
6975,6977
7018,7019
7018,7020
7069,7070
7069,7071
7106,7107
7106,7108
7117,7118
7117,7119
7129,7130
7129,7131
7140,7141
7140,7142
7184,7185
7184,7186
7202,7203
7202,7204
7239,7240
7239,7241
7240,7241
7240,7242
7242,7243
7242,7244
7258,7259
7258,7260
7296,7297
7296,7298
7303,7304
7303,7305
7313,7314
7313,7315
7318,7319
7318,7320
7357,7358
7357,7359
7445,7446
7445,7447
7450,7451
7450,7452
7469,7470
7469,7471
7488,7489
7488,7490
7506,7507
7506,7508
7512,7513
7512,7514
7522,7523
7522,7524
7534,7535
7534,7536
7539,7540
7539,7541
7545,7546
7545,7547
7552,7553
7552,7554
7559,7560
7559,7561
7566,7567
7566,7568
7572,7573
7572,7574
7578,7579
7578,7580
7587,7588
7587,7589
7593,7594
7593,7595
7646,7647
7646,7648
7657,7658
7657,7659
7686,7687
7686,7688
7750,7751
7750,7752
7755,7756
7755,7757
7770,7771
7770,7772
7772,7773
7772,7774
7819,7820
7819,7821
7918,7919
7918,7920
7948,7949
7948,7950
7966,7967
7966,7968
7999,8000
7999,8001
8018,8019
8018,8020
8036,8037
8036,8038
8042,8043
8042,8044
8052,8053
8052,8054
8064,8065
8064,8066
8069,8070
8069,8071
8077,8078
8077,8079
8086,8087
8086,8088
8092,8093
8092,8094
8145,8146
8145,8147
8150,8151
8150,8152
8156,8157
8156,8158
8163,8164
8163,8165
8171,8172
8171,8173
8227,8228
8227,8229
8257,8258
8257,8259
8275,8276
8275,8277
8302,8303
8302,8304
8362,8363
8362,8364
8363,8364
8363,8365
8365,8366
8365,8367
8436,8437
8436,8438
8459,8460
8459,8461
8460,8461
8460,8462
8462,8463
8462,8464
8518,8519
8518,8520
8530,8531
8530,8532
8532,8533
8532,8534
8533,8534
8533,8535
8540,8541
8540,8542
8566,8567
8566,8568
8574,8575
8574,8576
8607,8608
8607,8609
8616,8617
8616,8618
8698,8699
8698,8700
8705,8706
8705,8707
8718,8719
8718,8720
8736,8737
8736,8738
8758,8759
8758,8760
8766,8767
8766,8768
8771,8772
8771,8773
8776,8777
8776,8778
8786,8787
8786,8788
8794,8795
8794,8796
8803,8804
8803,8805
8804,8805
8804,8806
8813,8814
8813,8815
8819,8820
8819,8821
8825,8826
8825,8827
8846,8847
8846,8848
8850,8851
8850,8852
8860,8861
8860,8862
8870,8871
8870,8872
8877,8878
8877,8879
8911,8912
8911,8913
8912,8913
8912,8914
8928,8929
8928,8930
8941,8942
8941,8943
8985,8986
8985,8987
8990,8991
8990,8992
9017,9018
9017,9019
9051,9052
9051,9053
9072,9073
9072,9074
9074,9075
9074,9076
9103,9104
9103,9105
9115,9116
9115,9117
9149,9150
9149,9151
9150,9151
9150,9152
9155,9156
9155,9157
9162,9163
9162,9164
9202,9203
9202,9204
9203,9204
9203,9205
9218,9219
9218,9220
9231,9232
9231,9233
9257,9258
9257,9259
9265,9266
9265,9267
9289,9290
9289,9291
9290,9291
9290,9292
9295,9296
9295,9297
9302,9303
9302,9304
9331,9332
9331,9333
9358,9359
9358,9360
9365,9366
9365,9367
9372,9373
9372,9374
9404,9405
9404,9406
9405,9406
9405,9407
9442,9443
9442,9444
9443,9444
9443,9445
9457,9458
9457,9459
9458,9459
9458,9460
9465,9466
9465,9467
9482,9483
9482,9484
9535,9536
9535,9537
9545,9546
9545,9547
9555,9556
9555,9557
9572,9573
9572,9574
9619,9620
9619,9621
9620,9621
9620,9622
9621,9622
9621,9623
9635,9636
9635,9637
9648,9649
9648,9650
9692,9693
9692,9694
9855,9856
9855,9857
9900,9901
9900,9902
9912,9913
9912,9914
10001,10002
10001,10003
10002,10003
10002,10004
10045,10046
10045,10047
10097,10098
10097,10099
-----guardedBy-----
536,550
566,579
568,581
605,633
607,635
722,757
724,742
752,757
891,912
896,909
1208,1310
1181,1312
1196,1314
1205,1235
1197,1296
1341,1392
1340,1398
1460,1484
1605,1646
1606,1617
1616,1646
1784,2061
1788,1971
1778,2057
1786,2011
1780,2059
1817,1829
2019,2037
2023,2052
2018,2036
2069,2087
2073,2094
2068,2086
2224,2236
2360,2373
2362,2375
2486,2620
2487,2621
2658,2697
2670,2688
2731,2747
2756,2772
3180,3277
3176,3273
3178,3275
3184,3351
3185,3269
3669,3703
3671,3705
3657,3678
3712,3723
3993,4275
3992,4274
4043,4278
4044,4279
4178,4185
4177,4184
4174,4187
4221,4325
4225,4237
4224,4274
4232,4278
4233,4279
4241,4275
4240,4274
4427,4433
4456,4465
4458,4463
4536,4547
4554,4572
4586,4749
4589,4748
4878,4898
4883,4896
4884,4897
4934,5047
4936,5049
4931,5051
4953,4988
4954,4989
5199,5223
5326,5345
5473,5482
5475,5484
5508,5534
5505,5537
5506,5538
5517,5526
5514,5529
5515,5530
5560,5569
5558,5567
5545,5654
5557,5580
5688,5697
5686,5695
5664,5750
5685,5708
5778,5783
5771,5811
5840,5845
5834,5873
5920,5927
6008,6060
5996,6068
6001,6053
6006,6058
5995,6067
6125,6139
6165,6329
6210,6219
6209,6218
6240,6257
6270,6287
6356,8080
6367,8350
6358,8082
6351,8049
6352,8050
6372,8307
6442,6451
6480,6511
6536,6575
6548,6566
6588,6627
6600,6618
6633,6672
6645,6663
6720,6759
6732,6750
6801,6843
6816,6834
6869,6910
6883,6901
7072,7387
7273,7375
7246,7377
7261,7379
7270,7300
7262,7361
7524,7529
7543,7556
7547,7561
7542,7555
7549,7563
7784,7815
8054,8059
8154,8167
8153,8166
8374,8394
8368,8445
8376,8396
8385,8457
8387,8455
8383,8416
8471,8501
8485,8527
8473,8503
8543,8564
8577,8586
8619,8666
8620,8662
8700,8712
8720,8773
8835,9092
9080,9110
9079,9109
9082,9112
9090,9171
9154,9164
9270,9287
9294,9304
9464,9569
9454,9565
9456,9567
9468,9616
9469,9553
10005,10022
-----guardedByNegation-----
891,939
894,970
896,931
2019,2087
2023,2094
2007,2057
2015,2065
2009,2059
2018,2086
2501,2620
2502,2621
2539,2549
2589,2599
2640,2650
2692,2702
3382,3422
3384,3424
4554,4580
5095,5229
6165,8688
6166,8689
6170,7294
6156,8684
6370,8468
6356,8569
6367,8688
6358,8571
6351,8689
6368,8684
6352,8690
6529,6690
6530,6691
6581,6690
6582,6691
6919,6958
7543,7570
7547,7574
7542,7569
7549,7576
7791,7822
8371,8468
8374,8569
8368,8688
8376,8571
8387,8497
8369,8684
8383,8680
8471,8569
8485,8688
8473,8571
8486,8689
8466,8684
8487,8690
8549,8569
8543,8688
8551,8571
8544,8684
8577,8688
8578,8684
8580,8622
8610,8688
8611,8684
8619,8688
8620,8684
8801,9255
8835,9264
8829,9253
8800,9254
9460,9637
9464,9647
9454,9643
9462,9639
9456,9645
9468,9651
9469,9652
9451,9629
-----lastLexicalUse-----
891,939
896,931
2019,2087
2023,2094
2018,2086
4554,4580
6165,8688
6358,8571
6356,8569
6367,8688
6351,8689
6352,8690
7543,7570
7547,7574
7542,7569
7549,7576
8376,8571
8368,8688
8374,8569
8387,8497
8383,8680
8471,8569
8473,8571
8485,8688
8543,8688
8577,8688
8619,8688
8620,8684
8835,9264
9464,9647
9456,9645
9468,9651
9469,9652
9454,9643
-----jump-----
891,939
896,931
2019,2087
2023,2094
2018,2086
4554,4580
6165,8688
6358,8571
6356,8569
6367,8688
6351,8689
6352,8690
7543,7570
7547,7574
7542,7569
7549,7576
8376,8571
8368,8688
8374,8569
8387,8497
8383,8680
8471,8569
8473,8571
8485,8688
8543,8688
8577,8688
8619,8688
8620,8684
8835,9264
9464,9647
9456,9645
9468,9651
9469,9652
9454,9643
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ForStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;LabelStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int conf_run(struct ast_channel *chan, struct ast_conference *conf, struct ast_flags64 *confflags, char *optargs[]){	struct ast_conf_user *user = NULL;	int fd;	struct dahdi_confinfo dahdic, dahdic_empty;	struct ast_frame *f;	struct ast_channel *c;	struct ast_frame fr;	int outfd;	int ms;	int nfds;	int res;	int retrydahdi;	int origfd;	int musiconhold = 0, mohtempstopped = 0;	int firstpass = 0;	int lastmarked = 0;	int currentmarked = 0;	int ret = -1;	int x;	int menu_active = 0;	int menu8_active = 0;	int talkreq_manager = 0;	int using_pseudo = 0;	int duration = 20;	int sent_event = 0;	int checked = 0;	int announcement_played = 0;	struct timeval now;	struct ast_dsp *dsp = NULL;	struct ast_app *agi_app;	char *agifile, *mod_speex;	const char *agifiledefault = "conf-background.agi", *tmpvar;	char meetmesecs[30] = "";	char exitcontext[AST_MAX_CONTEXT] = "";	char recordingtmp[AST_MAX_EXTENSION] = "";	char members[10] = "";	int dtmf, opt_waitmarked_timeout = 0;	time_t timeout = 0;	struct dahdi_bufferinfo bi;	char __buf[CONF_SIZE + AST_FRIENDLY_OFFSET];	char *buf = __buf + AST_FRIENDLY_OFFSET;	char *exitkeys = NULL;	unsigned int calldurationlimit = 0;	long timelimit = 0;	long play_warning = 0;	long warning_freq = 0;	const char *warning_sound = NULL;	const char *end_sound = NULL;	char *parse;	long time_left_ms = 0;	struct timeval nexteventts = { 0, };	int to;	int setusercount = 0;	int confsilence = 0, totalsilence = 0;	char *mailbox, *context;	struct ast_format_cap *cap_slin = ast_format_cap_alloc_nolock();	struct ast_format tmpfmt;	if (!cap_slin) {		goto conf_run_cleanup;	}	ast_format_cap_add(cap_slin, ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0));	if (!(user = ao2_alloc(sizeof(*user), NULL))) {		goto conf_run_cleanup;	}	/* Possible timeout waiting for marked user */	if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&		(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1) &&		(opt_waitmarked_timeout > 0)) {		timeout = time(NULL) + opt_waitmarked_timeout;	}	if (ast_test_flag64(confflags, CONFFLAG_DURATION_STOP) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])) {		calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP]);		ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit);	}	if (ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])) {		char *limit_str, *warning_str, *warnfreq_str;		const char *var;		parse = optargs[OPT_ARG_DURATION_LIMIT];		limit_str = strsep(&parse, ":");		warning_str = strsep(&parse, ":");		warnfreq_str = parse;		timelimit = atol(limit_str);		if (warning_str)			play_warning = atol(warning_str);		if (warnfreq_str)			warning_freq = atol(warnfreq_str);		if (!timelimit) {			timelimit = play_warning = warning_freq = 0;			warning_sound = NULL;		} else if (play_warning > timelimit) {			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}		ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit);		if (play_warning) {			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);		}		if (warning_freq) {			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);		}		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		warning_sound = var ? var : "timeleft";		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		end_sound = var ? var : NULL;		/* undo effect of S(x) in case they are both used */		calldurationlimit = 0;		/* more efficient do it like S(x) does since no advanced opts */		if (!play_warning && !end_sound && timelimit) {			calldurationlimit = timelimit / 1000;			timelimit = play_warning = warning_freq = 0;		} else {			ast_debug(2, "Limit Data for this call:\n");			ast_debug(2, "- timelimit     = %ld\n", timelimit);			ast_debug(2, "- play_warning  = %ld\n", play_warning);			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");		}	}	/* Get exit keys */	if (ast_test_flag64(confflags, CONFFLAG_KEYEXIT)) {		if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS]))			exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);		else			exitkeys = ast_strdupa("#"); /* Default */	}	if (ast_test_flag64(confflags, CONFFLAG_RECORDCONF)) {		if (!conf->recordingfilename) {			const char *var;			ast_channel_lock(chan);			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}			ast_channel_unlock(chan);			if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}			if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);		}	}	ast_mutex_lock(&conf->recordthreadlock);	if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) &&		((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {		ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		dahdic.chan = 0;		dahdic.confno = conf->dahdiconf;		dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;		if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error starting listen channel\n");			ast_hangup(conf->lchan);			conf->lchan = NULL;		} else {			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);		}	}	ast_mutex_unlock(&conf->recordthreadlock);	ast_mutex_lock(&conf->announcethreadlock);	if ((conf->announcethread == AST_PTHREADT_NULL) && !ast_test_flag64(confflags, CONFFLAG_QUIET) &&		ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)) {		ast_mutex_init(&conf->announcelistlock);		AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist);		ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf);	}	ast_mutex_unlock(&conf->announcethreadlock);	time(&user->jointime);	user->timelimit = timelimit;	user->play_warning = play_warning;	user->warning_freq = warning_freq;	user->warning_sound = warning_sound;	user->end_sound = end_sound;	if (calldurationlimit > 0) {		time(&user->kicktime);		user->kicktime = user->kicktime + calldurationlimit;	}	if (ast_tvzero(user->start_time))		user->start_time = ast_tvnow();	time_left_ms = user->timelimit;	if (user->timelimit) {		nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));		nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000));	}	if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))) {		/* Sorry, but this conference is locked! */		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))			ast_waitstream(chan, "");		goto outrun;	}   	ast_mutex_lock(&conf->playlock);	if (rt_schedule && conf->maxusers) {		if (conf->users >= conf->maxusers) {			/* Sorry, but this confernce has reached the participant limit! */			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");			ast_mutex_unlock(&conf->playlock);			goto outrun;		}	}	ao2_lock(conf->usercontainer);	ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &user->user_no);	user->user_no++;	ao2_link(conf->usercontainer, user);	ao2_unlock(conf->usercontainer);	user->chan = chan;	user->userflags = *confflags;	user->adminflags = ast_test_flag64(confflags, CONFFLAG_STARTMUTED) ? ADMINFLAG_SELFMUTED : 0;	user->adminflags |= (conf->gmuted) ? ADMINFLAG_MUTED : 0;	user->talking = -1;	ast_mutex_unlock(&conf->playlock);	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC))) {		char destdir[PATH_MAX];		snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR);		if (ast_mkdir(destdir, 0777) != 0) {			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));			goto outrun;		}		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);			mailbox = strsep(&context, "@");			if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}		} else {			snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);		}		res = 0;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);		else if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);		if (res == -1)			goto outrun;	}	ast_mutex_lock(&conf->playlock);	if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER))		conf->markedusers++;	conf->users++;	if (rt_log_members) {		/* Update table */		snprintf(members, sizeof(members), "%d", conf->users);		ast_realtime_require_field("meetme",			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),			"members", RQ_UINTEGER1, strlen(members),			NULL);		ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);	}	setusercount = 1;	/* This device changed state now - if this is the first user */	if (conf->users == 1)		ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno);	ast_mutex_unlock(&conf->playlock);	/* return the unique ID of the conference */	pbx_builtin_setvar_helper(chan, "MEETMEUNIQUEID", conf->uniqueid);	if (ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)) {		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))) {			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));		} else if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		} else {			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}		ast_channel_unlock(chan);	}	/* Play an arbitrary intro message */	if (ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])) {		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {			ast_waitstream(chan, "");		}	}	if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))) {		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))				ast_waitstream(chan, "");		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))				ast_waitstream(chan, "");	}	if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {		int keepplaying = 1;		if (conf->users == 2) {			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		} else {			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}	}	if (!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)) {		/* We're leaving this alone until the state gets changed to up */		ast_indicate(chan, -1);	}	if (ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {		ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan));		goto outrun;	}	if (ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {		ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan));		goto outrun;	}	/* Reduce background noise from each participant */	if ((mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0))) {		ast_free(mod_speex);		ast_func_write(chan, "DENOISE(rx)", "on");	}	retrydahdi = (strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0);	user->dahdichannel = !retrydahdi; dahdiretry:	origfd = ast_channel_fd(chan, 0);	if (retrydahdi) {		/* open pseudo in non-blocking mode */		fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK);		if (fd < 0) {			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));			goto outrun;		}		using_pseudo = 1;		/* Setup buffering information */		memset(&bi, 0, sizeof(bi));		bi.bufsize = CONF_SIZE / 2;		bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.numbufs = audio_buffers;		if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)) {			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));			close(fd);			goto outrun;		}		x = 1;		if (ioctl(fd, DAHDI_SETLINEAR, &x)) {			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));			close(fd);			goto outrun;		}		nfds = 1;	} else {		/* XXX Make sure we're not running on a pseudo channel XXX */		fd = ast_channel_fd(chan, 0);		nfds = 0;	}	memset(&dahdic, 0, sizeof(dahdic));	memset(&dahdic_empty, 0, sizeof(dahdic_empty));	/* Check to see if we're in a conference... */	dahdic.chan = 0;	if (ioctl(fd, DAHDI_GETCONF, &dahdic)) {		ast_log(LOG_WARNING, "Error getting conference\n");		close(fd);		goto outrun;	}	if (dahdic.confmode) {		/* Whoa, already in a conference...  Retry... */		if (!retrydahdi) {			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");			retrydahdi = 1;			goto dahdiretry;		}	}	memset(&dahdic, 0, sizeof(dahdic));	/* Add us to the conference */	dahdic.chan = 0;	dahdic.confno = conf->dahdiconf;	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)) && conf->users > 1) {		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		item->announcetype = CONF_HASJOIN;		ast_mutex_lock(&conf->announcelistlock);		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {			;		}		ao2_ref(item, -1);	}	if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && !conf->markedusers)		dahdic.confmode = DAHDI_CONF_CONF;	else if (ast_test_flag64(confflags, CONFFLAG_MONITOR))		dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;	else if (ast_test_flag64(confflags, CONFFLAG_TALKER))		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;	else		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;	if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {		ast_log(LOG_WARNING, "Error setting conference\n");		close(fd);		goto outrun;	}	ast_debug(1, "Placed channel %s in DAHDI conf %d\n", ast_channel_name(chan), conf->dahdiconf);	if (!sent_event) {		/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user joins a MeetMe conference.</synopsis>				<syntax>					<parameter name="Meetme">						<para>The identifier for the MeetMe conference.</para>					</parameter>					<parameter name="Usernum">						<para>The identifier of the MeetMe user who joined.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeLeave</ref>					<ref type="application">MeetMe</ref>				</see-also>			</managerEventInstance>		***/		ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",			"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n",			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,			user->user_no,			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")			);		sent_event = 1;	}	if (!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {		firstpass = 1;		if (!ast_test_flag64(confflags, CONFFLAG_QUIET))			if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))) {				conf_play(chan, conf, ENTER);			}	}	conf_flush(fd, chan);	if (dsp)		ast_dsp_free(dsp);	if (!(dsp = ast_dsp_new())) {		ast_log(LOG_WARNING, "Unable to allocate DSP!\n");		res = -1;	}	if (ast_test_flag64(confflags, CONFFLAG_AGI)) {		/* Get name of AGI file to run from $(MEETME_AGI_BACKGROUND)		   or use default filename of conf-background.agi */		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))) {			agifile = ast_strdupa(tmpvar);		} else {			agifile = ast_strdupa(agifiledefault);		}		ast_channel_unlock(chan);		if (user->dahdichannel) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		/* Find a pointer to the agi app and execute the script */		agi_app = pbx_findapp("agi");		if (agi_app) {			ret = pbx_exec(chan, agi_app, agifile);		} else {			ast_log(LOG_WARNING, "Could not find application (agi)\n");			ret = -2;		}		if (user->dahdichannel) {			/*  Remove CONFMUTE mode on DAHDI channel */			x = 0;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}	} else {		int lastusers = conf->users;		if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		for (;;) {			int menu_was_active = 0;			outfd = -1;			ms = -1;			now = ast_tvnow();			if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			} 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			} 			to = -1; 			if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}			now = ast_tvnow();			if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* if we have just exited from the menu, and the user had a channel-driver			   volume adjustment, restore it			*/			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}			menu_was_active = menu_active;			currentmarked = conf->markedusers;			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}			/* Update the struct with the actual confflags */			user->userflags = *confflags;			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}			/* trying to add moh for single person conf */			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}			/* Leave if the last marked user left */			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */			if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}			/* Check if my modes have changed */			/* If I should be muted but am still talker, mute me */			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If I should be un-muted but am not talker, un-mute me */			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If user have been hung up, exit the conference */			if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}			/* If I have been kicked, exit the conference */			if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */			if (ast_check_hangup(chan)) {				break;			}			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);			if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}			lastmarked = currentmarked;		}	}	if (musiconhold) {		ast_moh_stop(chan);	}	if (using_pseudo) {		close(fd);	} else {		/* Take out of conference */		dahdic.chan = 0;		dahdic.confno = 0;		dahdic.confmode = 0;		if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error setting conference\n");		}	}	reset_volumes(user);	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {		conf_play(chan, conf, LEAVE);	}	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC) && conf->users > 1) {		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		item->announcetype = CONF_HASLEFT;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		ast_mutex_lock(&conf->announcelistlock);		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);	} else if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC) && conf->users == 1) {		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */		ast_filedelete(user->namerecloc, NULL);	} outrun:	AST_LIST_LOCK(&confs);	if (dsp) {		ast_dsp_free(dsp);	}	if (user->user_no) {		/* Only cleanup users who really joined! */		now = ast_tvnow();		if (sent_event) {			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />					<parameter name="Duration">						<para>The length of time in seconds that the Meetme user was in the conference.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeJoin</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));		}		if (setusercount) {			conf->users--;			if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}		}		/* Remove ourselves from the container */		ao2_unlink(conf->usercontainer, user);		/* Change any states */		if (!conf->users) {			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);		} 		/* This flag is meant to kill a conference with only one participant remaining.  */		if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)) { 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL); 		}		/* Return the number of seconds the user was in the conf */		snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime));		pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs);		/* Return the RealTime bookid for CDR linking */		if (rt_schedule) {			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);		}	}	ao2_ref(user, -1);	AST_LIST_UNLOCK(&confs);conf_run_cleanup:	cap_slin = ast_format_cap_destroy(cap_slin);	return ret;}
static int
conf_run(struct ast_channel *chan, struct ast_conference *conf, struct ast_flags64 *confflags, char *optargs[])
conf_run
struct ast_channel *chan
struct ast_channel
ast_channel
*chan
*
chan
struct ast_conference *conf
struct ast_conference
ast_conference
*conf
*
conf
struct ast_flags64 *confflags
struct ast_flags64
ast_flags64
*confflags
*
confflags
char *optargs[]
char
*optargs[]
*
optargs
[]
{	struct ast_conf_user *user = NULL;	int fd;	struct dahdi_confinfo dahdic, dahdic_empty;	struct ast_frame *f;	struct ast_channel *c;	struct ast_frame fr;	int outfd;	int ms;	int nfds;	int res;	int retrydahdi;	int origfd;	int musiconhold = 0, mohtempstopped = 0;	int firstpass = 0;	int lastmarked = 0;	int currentmarked = 0;	int ret = -1;	int x;	int menu_active = 0;	int menu8_active = 0;	int talkreq_manager = 0;	int using_pseudo = 0;	int duration = 20;	int sent_event = 0;	int checked = 0;	int announcement_played = 0;	struct timeval now;	struct ast_dsp *dsp = NULL;	struct ast_app *agi_app;	char *agifile, *mod_speex;	const char *agifiledefault = "conf-background.agi", *tmpvar;	char meetmesecs[30] = "";	char exitcontext[AST_MAX_CONTEXT] = "";	char recordingtmp[AST_MAX_EXTENSION] = "";	char members[10] = "";	int dtmf, opt_waitmarked_timeout = 0;	time_t timeout = 0;	struct dahdi_bufferinfo bi;	char __buf[CONF_SIZE + AST_FRIENDLY_OFFSET];	char *buf = __buf + AST_FRIENDLY_OFFSET;	char *exitkeys = NULL;	unsigned int calldurationlimit = 0;	long timelimit = 0;	long play_warning = 0;	long warning_freq = 0;	const char *warning_sound = NULL;	const char *end_sound = NULL;	char *parse;	long time_left_ms = 0;	struct timeval nexteventts = { 0, };	int to;	int setusercount = 0;	int confsilence = 0, totalsilence = 0;	char *mailbox, *context;	struct ast_format_cap *cap_slin = ast_format_cap_alloc_nolock();	struct ast_format tmpfmt;	if (!cap_slin) {		goto conf_run_cleanup;	}	ast_format_cap_add(cap_slin, ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0));	if (!(user = ao2_alloc(sizeof(*user), NULL))) {		goto conf_run_cleanup;	}	/* Possible timeout waiting for marked user */	if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&		(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1) &&		(opt_waitmarked_timeout > 0)) {		timeout = time(NULL) + opt_waitmarked_timeout;	}	if (ast_test_flag64(confflags, CONFFLAG_DURATION_STOP) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])) {		calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP]);		ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit);	}	if (ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])) {		char *limit_str, *warning_str, *warnfreq_str;		const char *var;		parse = optargs[OPT_ARG_DURATION_LIMIT];		limit_str = strsep(&parse, ":");		warning_str = strsep(&parse, ":");		warnfreq_str = parse;		timelimit = atol(limit_str);		if (warning_str)			play_warning = atol(warning_str);		if (warnfreq_str)			warning_freq = atol(warnfreq_str);		if (!timelimit) {			timelimit = play_warning = warning_freq = 0;			warning_sound = NULL;		} else if (play_warning > timelimit) {			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}		ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit);		if (play_warning) {			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);		}		if (warning_freq) {			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);		}		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		warning_sound = var ? var : "timeleft";		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		end_sound = var ? var : NULL;		/* undo effect of S(x) in case they are both used */		calldurationlimit = 0;		/* more efficient do it like S(x) does since no advanced opts */		if (!play_warning && !end_sound && timelimit) {			calldurationlimit = timelimit / 1000;			timelimit = play_warning = warning_freq = 0;		} else {			ast_debug(2, "Limit Data for this call:\n");			ast_debug(2, "- timelimit     = %ld\n", timelimit);			ast_debug(2, "- play_warning  = %ld\n", play_warning);			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");		}	}	/* Get exit keys */	if (ast_test_flag64(confflags, CONFFLAG_KEYEXIT)) {		if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS]))			exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);		else			exitkeys = ast_strdupa("#"); /* Default */	}	if (ast_test_flag64(confflags, CONFFLAG_RECORDCONF)) {		if (!conf->recordingfilename) {			const char *var;			ast_channel_lock(chan);			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}			ast_channel_unlock(chan);			if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}			if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);		}	}	ast_mutex_lock(&conf->recordthreadlock);	if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) &&		((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {		ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		dahdic.chan = 0;		dahdic.confno = conf->dahdiconf;		dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;		if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error starting listen channel\n");			ast_hangup(conf->lchan);			conf->lchan = NULL;		} else {			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);		}	}	ast_mutex_unlock(&conf->recordthreadlock);	ast_mutex_lock(&conf->announcethreadlock);	if ((conf->announcethread == AST_PTHREADT_NULL) && !ast_test_flag64(confflags, CONFFLAG_QUIET) &&		ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)) {		ast_mutex_init(&conf->announcelistlock);		AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist);		ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf);	}	ast_mutex_unlock(&conf->announcethreadlock);	time(&user->jointime);	user->timelimit = timelimit;	user->play_warning = play_warning;	user->warning_freq = warning_freq;	user->warning_sound = warning_sound;	user->end_sound = end_sound;	if (calldurationlimit > 0) {		time(&user->kicktime);		user->kicktime = user->kicktime + calldurationlimit;	}	if (ast_tvzero(user->start_time))		user->start_time = ast_tvnow();	time_left_ms = user->timelimit;	if (user->timelimit) {		nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));		nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000));	}	if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))) {		/* Sorry, but this conference is locked! */		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))			ast_waitstream(chan, "");		goto outrun;	}   	ast_mutex_lock(&conf->playlock);	if (rt_schedule && conf->maxusers) {		if (conf->users >= conf->maxusers) {			/* Sorry, but this confernce has reached the participant limit! */			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");			ast_mutex_unlock(&conf->playlock);			goto outrun;		}	}	ao2_lock(conf->usercontainer);	ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &user->user_no);	user->user_no++;	ao2_link(conf->usercontainer, user);	ao2_unlock(conf->usercontainer);	user->chan = chan;	user->userflags = *confflags;	user->adminflags = ast_test_flag64(confflags, CONFFLAG_STARTMUTED) ? ADMINFLAG_SELFMUTED : 0;	user->adminflags |= (conf->gmuted) ? ADMINFLAG_MUTED : 0;	user->talking = -1;	ast_mutex_unlock(&conf->playlock);	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC))) {		char destdir[PATH_MAX];		snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR);		if (ast_mkdir(destdir, 0777) != 0) {			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));			goto outrun;		}		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);			mailbox = strsep(&context, "@");			if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}		} else {			snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);		}		res = 0;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);		else if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);		if (res == -1)			goto outrun;	}	ast_mutex_lock(&conf->playlock);	if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER))		conf->markedusers++;	conf->users++;	if (rt_log_members) {		/* Update table */		snprintf(members, sizeof(members), "%d", conf->users);		ast_realtime_require_field("meetme",			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),			"members", RQ_UINTEGER1, strlen(members),			NULL);		ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);	}	setusercount = 1;	/* This device changed state now - if this is the first user */	if (conf->users == 1)		ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno);	ast_mutex_unlock(&conf->playlock);	/* return the unique ID of the conference */	pbx_builtin_setvar_helper(chan, "MEETMEUNIQUEID", conf->uniqueid);	if (ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)) {		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))) {			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));		} else if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		} else {			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}		ast_channel_unlock(chan);	}	/* Play an arbitrary intro message */	if (ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])) {		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {			ast_waitstream(chan, "");		}	}	if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))) {		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))				ast_waitstream(chan, "");		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))				ast_waitstream(chan, "");	}	if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {		int keepplaying = 1;		if (conf->users == 2) {			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		} else {			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}	}	if (!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)) {		/* We're leaving this alone until the state gets changed to up */		ast_indicate(chan, -1);	}	if (ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {		ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan));		goto outrun;	}	if (ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {		ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan));		goto outrun;	}	/* Reduce background noise from each participant */	if ((mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0))) {		ast_free(mod_speex);		ast_func_write(chan, "DENOISE(rx)", "on");	}	retrydahdi = (strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0);	user->dahdichannel = !retrydahdi; dahdiretry:	origfd = ast_channel_fd(chan, 0);	if (retrydahdi) {		/* open pseudo in non-blocking mode */		fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK);		if (fd < 0) {			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));			goto outrun;		}		using_pseudo = 1;		/* Setup buffering information */		memset(&bi, 0, sizeof(bi));		bi.bufsize = CONF_SIZE / 2;		bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.numbufs = audio_buffers;		if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)) {			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));			close(fd);			goto outrun;		}		x = 1;		if (ioctl(fd, DAHDI_SETLINEAR, &x)) {			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));			close(fd);			goto outrun;		}		nfds = 1;	} else {		/* XXX Make sure we're not running on a pseudo channel XXX */		fd = ast_channel_fd(chan, 0);		nfds = 0;	}	memset(&dahdic, 0, sizeof(dahdic));	memset(&dahdic_empty, 0, sizeof(dahdic_empty));	/* Check to see if we're in a conference... */	dahdic.chan = 0;	if (ioctl(fd, DAHDI_GETCONF, &dahdic)) {		ast_log(LOG_WARNING, "Error getting conference\n");		close(fd);		goto outrun;	}	if (dahdic.confmode) {		/* Whoa, already in a conference...  Retry... */		if (!retrydahdi) {			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");			retrydahdi = 1;			goto dahdiretry;		}	}	memset(&dahdic, 0, sizeof(dahdic));	/* Add us to the conference */	dahdic.chan = 0;	dahdic.confno = conf->dahdiconf;	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)) && conf->users > 1) {		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		item->announcetype = CONF_HASJOIN;		ast_mutex_lock(&conf->announcelistlock);		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {			;		}		ao2_ref(item, -1);	}	if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && !conf->markedusers)		dahdic.confmode = DAHDI_CONF_CONF;	else if (ast_test_flag64(confflags, CONFFLAG_MONITOR))		dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;	else if (ast_test_flag64(confflags, CONFFLAG_TALKER))		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;	else		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;	if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {		ast_log(LOG_WARNING, "Error setting conference\n");		close(fd);		goto outrun;	}	ast_debug(1, "Placed channel %s in DAHDI conf %d\n", ast_channel_name(chan), conf->dahdiconf);	if (!sent_event) {		/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user joins a MeetMe conference.</synopsis>				<syntax>					<parameter name="Meetme">						<para>The identifier for the MeetMe conference.</para>					</parameter>					<parameter name="Usernum">						<para>The identifier of the MeetMe user who joined.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeLeave</ref>					<ref type="application">MeetMe</ref>				</see-also>			</managerEventInstance>		***/		ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",			"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n",			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,			user->user_no,			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")			);		sent_event = 1;	}	if (!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {		firstpass = 1;		if (!ast_test_flag64(confflags, CONFFLAG_QUIET))			if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))) {				conf_play(chan, conf, ENTER);			}	}	conf_flush(fd, chan);	if (dsp)		ast_dsp_free(dsp);	if (!(dsp = ast_dsp_new())) {		ast_log(LOG_WARNING, "Unable to allocate DSP!\n");		res = -1;	}	if (ast_test_flag64(confflags, CONFFLAG_AGI)) {		/* Get name of AGI file to run from $(MEETME_AGI_BACKGROUND)		   or use default filename of conf-background.agi */		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))) {			agifile = ast_strdupa(tmpvar);		} else {			agifile = ast_strdupa(agifiledefault);		}		ast_channel_unlock(chan);		if (user->dahdichannel) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		/* Find a pointer to the agi app and execute the script */		agi_app = pbx_findapp("agi");		if (agi_app) {			ret = pbx_exec(chan, agi_app, agifile);		} else {			ast_log(LOG_WARNING, "Could not find application (agi)\n");			ret = -2;		}		if (user->dahdichannel) {			/*  Remove CONFMUTE mode on DAHDI channel */			x = 0;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}	} else {		int lastusers = conf->users;		if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		for (;;) {			int menu_was_active = 0;			outfd = -1;			ms = -1;			now = ast_tvnow();			if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			} 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			} 			to = -1; 			if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}			now = ast_tvnow();			if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* if we have just exited from the menu, and the user had a channel-driver			   volume adjustment, restore it			*/			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}			menu_was_active = menu_active;			currentmarked = conf->markedusers;			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}			/* Update the struct with the actual confflags */			user->userflags = *confflags;			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}			/* trying to add moh for single person conf */			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}			/* Leave if the last marked user left */			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */			if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}			/* Check if my modes have changed */			/* If I should be muted but am still talker, mute me */			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If I should be un-muted but am not talker, un-mute me */			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If user have been hung up, exit the conference */			if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}			/* If I have been kicked, exit the conference */			if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */			if (ast_check_hangup(chan)) {				break;			}			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);			if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}			lastmarked = currentmarked;		}	}	if (musiconhold) {		ast_moh_stop(chan);	}	if (using_pseudo) {		close(fd);	} else {		/* Take out of conference */		dahdic.chan = 0;		dahdic.confno = 0;		dahdic.confmode = 0;		if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error setting conference\n");		}	}	reset_volumes(user);	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {		conf_play(chan, conf, LEAVE);	}	if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC) && conf->users > 1) {		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		item->announcetype = CONF_HASLEFT;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		ast_mutex_lock(&conf->announcelistlock);		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);	} else if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC) && conf->users == 1) {		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */		ast_filedelete(user->namerecloc, NULL);	} outrun:	AST_LIST_LOCK(&confs);	if (dsp) {		ast_dsp_free(dsp);	}	if (user->user_no) {		/* Only cleanup users who really joined! */		now = ast_tvnow();		if (sent_event) {			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />					<parameter name="Duration">						<para>The length of time in seconds that the Meetme user was in the conference.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeJoin</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));		}		if (setusercount) {			conf->users--;			if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}		}		/* Remove ourselves from the container */		ao2_unlink(conf->usercontainer, user);		/* Change any states */		if (!conf->users) {			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);		} 		/* This flag is meant to kill a conference with only one participant remaining.  */		if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)) { 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL); 		}		/* Return the number of seconds the user was in the conf */		snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime));		pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs);		/* Return the RealTime bookid for CDR linking */		if (rt_schedule) {			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);		}	}	ao2_ref(user, -1);	AST_LIST_UNLOCK(&confs);conf_run_cleanup:	cap_slin = ast_format_cap_destroy(cap_slin);	return ret;}
struct ast_conf_user *user = NULL;
struct ast_conf_user *user = NULL;
struct ast_conf_user
ast_conf_user
*user = NULL
*
user
= NULL
NULL
NULL
int fd;
int fd;
int
fd
fd
struct dahdi_confinfo dahdic, dahdic_empty;
struct dahdi_confinfo dahdic, dahdic_empty;
struct dahdi_confinfo
dahdi_confinfo
dahdic
dahdic
dahdic_empty
dahdic_empty
struct ast_frame *f;
struct ast_frame *f;
struct ast_frame
ast_frame
*f
*
f
struct ast_channel *c;
struct ast_channel *c;
struct ast_channel
ast_channel
*c
*
c
struct ast_frame fr;
struct ast_frame fr;
struct ast_frame
ast_frame
fr
fr
int outfd;
int outfd;
int
outfd
outfd
int ms;
int ms;
int
ms
ms
int nfds;
int nfds;
int
nfds
nfds
int res;
int res;
int
res
res
int retrydahdi;
int retrydahdi;
int
retrydahdi
retrydahdi
int origfd;
int origfd;
int
origfd
origfd
int musiconhold = 0, mohtempstopped = 0;
int musiconhold = 0, mohtempstopped = 0;
int
musiconhold = 0
musiconhold
= 0
0
mohtempstopped = 0
mohtempstopped
= 0
0
int firstpass = 0;
int firstpass = 0;
int
firstpass = 0
firstpass
= 0
0
int lastmarked = 0;
int lastmarked = 0;
int
lastmarked = 0
lastmarked
= 0
0
int currentmarked = 0;
int currentmarked = 0;
int
currentmarked = 0
currentmarked
= 0
0
int ret = -1;
int ret = -1;
int
ret = -1
ret
= -1
-1
1
int x;
int x;
int
x
x
int menu_active = 0;
int menu_active = 0;
int
menu_active = 0
menu_active
= 0
0
int menu8_active = 0;
int menu8_active = 0;
int
menu8_active = 0
menu8_active
= 0
0
int talkreq_manager = 0;
int talkreq_manager = 0;
int
talkreq_manager = 0
talkreq_manager
= 0
0
int using_pseudo = 0;
int using_pseudo = 0;
int
using_pseudo = 0
using_pseudo
= 0
0
int duration = 20;
int duration = 20;
int
duration = 20
duration
= 20
20
int sent_event = 0;
int sent_event = 0;
int
sent_event = 0
sent_event
= 0
0
int checked = 0;
int checked = 0;
int
checked = 0
checked
= 0
0
int announcement_played = 0;
int announcement_played = 0;
int
announcement_played = 0
announcement_played
= 0
0
struct timeval now;
struct timeval now;
struct timeval
timeval
now
now
struct ast_dsp *dsp = NULL;
struct ast_dsp *dsp = NULL;
struct ast_dsp
ast_dsp
*dsp = NULL
*
dsp
= NULL
NULL
NULL
struct ast_app *agi_app;
struct ast_app *agi_app;
struct ast_app
ast_app
*agi_app
*
agi_app
char *agifile, *mod_speex;
char *agifile, *mod_speex;
char
*agifile
*
agifile
*mod_speex
*
mod_speex
const char *agifiledefault = "conf-background.agi", *tmpvar;
const char *agifiledefault = "conf-background.agi", *tmpvar;
const char
*agifiledefault = "conf-background.agi"
*
agifiledefault
= "conf-background.agi"
"conf-background.agi"
*tmpvar
*
tmpvar
char meetmesecs[30] = "";
char meetmesecs[30] = "";
char
meetmesecs[30] = ""
meetmesecs
[30]
30
= ""
""
char exitcontext[AST_MAX_CONTEXT] = "";
char exitcontext[AST_MAX_CONTEXT] = "";
char
exitcontext[AST_MAX_CONTEXT] = ""
exitcontext
[AST_MAX_CONTEXT]
AST_MAX_CONTEXT
AST_MAX_CONTEXT
= ""
""
char recordingtmp[AST_MAX_EXTENSION] = "";
char recordingtmp[AST_MAX_EXTENSION] = "";
char
recordingtmp[AST_MAX_EXTENSION] = ""
recordingtmp
[AST_MAX_EXTENSION]
AST_MAX_EXTENSION
AST_MAX_EXTENSION
= ""
""
char members[10] = "";
char members[10] = "";
char
members[10] = ""
members
[10]
10
= ""
""
int dtmf, opt_waitmarked_timeout = 0;
int dtmf, opt_waitmarked_timeout = 0;
int
dtmf
dtmf
opt_waitmarked_timeout = 0
opt_waitmarked_timeout
= 0
0
time_t timeout = 0;
time_t timeout = 0;
time_t
time_t
timeout = 0
timeout
= 0
0
struct dahdi_bufferinfo bi;
struct dahdi_bufferinfo bi;
struct dahdi_bufferinfo
dahdi_bufferinfo
bi
bi
char __buf[CONF_SIZE + AST_FRIENDLY_OFFSET];
char __buf[CONF_SIZE + AST_FRIENDLY_OFFSET];
char
__buf[CONF_SIZE + AST_FRIENDLY_OFFSET]
__buf
[CONF_SIZE + AST_FRIENDLY_OFFSET]
CONF_SIZE + AST_FRIENDLY_OFFSET
CONF_SIZE
CONF_SIZE
AST_FRIENDLY_OFFSET
AST_FRIENDLY_OFFSET
char *buf = __buf + AST_FRIENDLY_OFFSET;
char *buf = __buf + AST_FRIENDLY_OFFSET;
char
*buf = __buf + AST_FRIENDLY_OFFSET
*
buf
= __buf + AST_FRIENDLY_OFFSET
__buf + AST_FRIENDLY_OFFSET
__buf
__buf
AST_FRIENDLY_OFFSET
AST_FRIENDLY_OFFSET
char *exitkeys = NULL;
char *exitkeys = NULL;
char
*exitkeys = NULL
*
exitkeys
= NULL
NULL
NULL
unsigned int calldurationlimit = 0;
unsigned int calldurationlimit = 0;
unsigned int
calldurationlimit = 0
calldurationlimit
= 0
0
long timelimit = 0;
long timelimit = 0;
long
timelimit = 0
timelimit
= 0
0
long play_warning = 0;
long play_warning = 0;
long
play_warning = 0
play_warning
= 0
0
long warning_freq = 0;
long warning_freq = 0;
long
warning_freq = 0
warning_freq
= 0
0
const char *warning_sound = NULL;
const char *warning_sound = NULL;
const char
*warning_sound = NULL
*
warning_sound
= NULL
NULL
NULL
const char *end_sound = NULL;
const char *end_sound = NULL;
const char
*end_sound = NULL
*
end_sound
= NULL
NULL
NULL
char *parse;
char *parse;
char
*parse
*
parse
long time_left_ms = 0;
long time_left_ms = 0;
long
time_left_ms = 0
time_left_ms
= 0
0
struct timeval nexteventts = { 0, };
struct timeval nexteventts = { 0, };
struct timeval
timeval
nexteventts = { 0, }
nexteventts
= { 0, }
{ 0, }
0
int to;
int to;
int
to
to
int setusercount = 0;
int setusercount = 0;
int
setusercount = 0
setusercount
= 0
0
int confsilence = 0, totalsilence = 0;
int confsilence = 0, totalsilence = 0;
int
confsilence = 0
confsilence
= 0
0
totalsilence = 0
totalsilence
= 0
0
char *mailbox, *context;
char *mailbox, *context;
char
*mailbox
*
mailbox
*context
*
context
struct ast_format_cap *cap_slin = ast_format_cap_alloc_nolock();
struct ast_format_cap *cap_slin = ast_format_cap_alloc_nolock();
struct ast_format_cap
ast_format_cap
*cap_slin = ast_format_cap_alloc_nolock()
*
cap_slin
= ast_format_cap_alloc_nolock()
ast_format_cap_alloc_nolock()
ast_format_cap_alloc_nolock
ast_format_cap_alloc_nolock
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
if (!cap_slin) {		goto conf_run_cleanup;	}
!cap_slin
cap_slin
cap_slin
{		goto conf_run_cleanup;	}
goto conf_run_cleanup;
conf_run_cleanup
ast_format_cap_add(cap_slin, ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0));
ast_format_cap_add(cap_slin, ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0))
ast_format_cap_add
ast_format_cap_add
cap_slin
cap_slin
ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0)
ast_format_set
ast_format_set
&tmpfmt
tmpfmt
tmpfmt
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
0
if (!(user = ao2_alloc(sizeof(*user), NULL))) {		goto conf_run_cleanup;	}
!(user = ao2_alloc(sizeof(*user), NULL))
(user = ao2_alloc(sizeof(*user), NULL))
user = ao2_alloc(sizeof(*user), NULL)
user
user
ao2_alloc(sizeof(*user), NULL)
ao2_alloc
ao2_alloc
sizeof(*user)
(*user)
*user
user
user
NULL
NULL
{		goto conf_run_cleanup;	}
goto conf_run_cleanup;
conf_run_cleanup
if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&		(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1) &&		(opt_waitmarked_timeout > 0)) {		timeout = time(NULL) + opt_waitmarked_timeout;	}
ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&		(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1) &&		(opt_waitmarked_timeout > 0)
ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&		(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1)
ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED])
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED])
ast_strlen_zero(optargs[OPT_ARG_WAITMARKED])
ast_strlen_zero
ast_strlen_zero
optargs[OPT_ARG_WAITMARKED]
optargs
optargs
OPT_ARG_WAITMARKED
OPT_ARG_WAITMARKED
(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1)
sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout) == 1
sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout)
sscanf
sscanf
optargs[OPT_ARG_WAITMARKED]
optargs
optargs
OPT_ARG_WAITMARKED
OPT_ARG_WAITMARKED
"%30d"
&opt_waitmarked_timeout
opt_waitmarked_timeout
opt_waitmarked_timeout
1
(opt_waitmarked_timeout > 0)
opt_waitmarked_timeout > 0
opt_waitmarked_timeout
opt_waitmarked_timeout
0
{		timeout = time(NULL) + opt_waitmarked_timeout;	}
timeout = time(NULL) + opt_waitmarked_timeout;
timeout = time(NULL) + opt_waitmarked_timeout
timeout
timeout
time(NULL) + opt_waitmarked_timeout
time(NULL)
time
time
NULL
NULL
opt_waitmarked_timeout
opt_waitmarked_timeout
if (ast_test_flag64(confflags, CONFFLAG_DURATION_STOP) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])) {		calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP]);		ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit);	}
ast_test_flag64(confflags, CONFFLAG_DURATION_STOP) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])
ast_test_flag64(confflags, CONFFLAG_DURATION_STOP)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_DURATION_STOP
CONFFLAG_DURATION_STOP
!ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])
ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])
ast_strlen_zero
ast_strlen_zero
optargs[OPT_ARG_DURATION_STOP]
optargs
optargs
OPT_ARG_DURATION_STOP
OPT_ARG_DURATION_STOP
{		calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP]);		ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit);	}
calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP]);
calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP])
calldurationlimit
calldurationlimit
atoi(optargs[OPT_ARG_DURATION_STOP])
atoi
atoi
optargs[OPT_ARG_DURATION_STOP]
optargs
optargs
OPT_ARG_DURATION_STOP
OPT_ARG_DURATION_STOP
ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit);
ast_verb(3, "Setting call duration limit to %d seconds.\n", calldurationlimit)
ast_verb
ast_verb
3
"Setting call duration limit to %d seconds.\n"
calldurationlimit
calldurationlimit
if (ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])) {		char *limit_str, *warning_str, *warnfreq_str;		const char *var;		parse = optargs[OPT_ARG_DURATION_LIMIT];		limit_str = strsep(&parse, ":");		warning_str = strsep(&parse, ":");		warnfreq_str = parse;		timelimit = atol(limit_str);		if (warning_str)			play_warning = atol(warning_str);		if (warnfreq_str)			warning_freq = atol(warnfreq_str);		if (!timelimit) {			timelimit = play_warning = warning_freq = 0;			warning_sound = NULL;		} else if (play_warning > timelimit) {			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}		ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit);		if (play_warning) {			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);		}		if (warning_freq) {			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);		}		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		warning_sound = var ? var : "timeleft";		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		end_sound = var ? var : NULL;		/* undo effect of S(x) in case they are both used */		calldurationlimit = 0;		/* more efficient do it like S(x) does since no advanced opts */		if (!play_warning && !end_sound && timelimit) {			calldurationlimit = timelimit / 1000;			timelimit = play_warning = warning_freq = 0;		} else {			ast_debug(2, "Limit Data for this call:\n");			ast_debug(2, "- timelimit     = %ld\n", timelimit);			ast_debug(2, "- play_warning  = %ld\n", play_warning);			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");		}	}
ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT) && !ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])
ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_DURATION_LIMIT
CONFFLAG_DURATION_LIMIT
!ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])
ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])
ast_strlen_zero
ast_strlen_zero
optargs[OPT_ARG_DURATION_LIMIT]
optargs
optargs
OPT_ARG_DURATION_LIMIT
OPT_ARG_DURATION_LIMIT
{		char *limit_str, *warning_str, *warnfreq_str;		const char *var;		parse = optargs[OPT_ARG_DURATION_LIMIT];		limit_str = strsep(&parse, ":");		warning_str = strsep(&parse, ":");		warnfreq_str = parse;		timelimit = atol(limit_str);		if (warning_str)			play_warning = atol(warning_str);		if (warnfreq_str)			warning_freq = atol(warnfreq_str);		if (!timelimit) {			timelimit = play_warning = warning_freq = 0;			warning_sound = NULL;		} else if (play_warning > timelimit) {			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}		ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit);		if (play_warning) {			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);		}		if (warning_freq) {			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);		}		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		warning_sound = var ? var : "timeleft";		ast_channel_lock(chan);		if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))) {			var = ast_strdupa(var);		}		ast_channel_unlock(chan);		end_sound = var ? var : NULL;		/* undo effect of S(x) in case they are both used */		calldurationlimit = 0;		/* more efficient do it like S(x) does since no advanced opts */		if (!play_warning && !end_sound && timelimit) {			calldurationlimit = timelimit / 1000;			timelimit = play_warning = warning_freq = 0;		} else {			ast_debug(2, "Limit Data for this call:\n");			ast_debug(2, "- timelimit     = %ld\n", timelimit);			ast_debug(2, "- play_warning  = %ld\n", play_warning);			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");		}	}
char *limit_str, *warning_str, *warnfreq_str;
char *limit_str, *warning_str, *warnfreq_str;
char
*limit_str
*
limit_str
*warning_str
*
warning_str
*warnfreq_str
*
warnfreq_str
const char *var;
const char *var;
const char
*var
*
var
parse = optargs[OPT_ARG_DURATION_LIMIT];
parse = optargs[OPT_ARG_DURATION_LIMIT]
parse
parse
optargs[OPT_ARG_DURATION_LIMIT]
optargs
optargs
OPT_ARG_DURATION_LIMIT
OPT_ARG_DURATION_LIMIT
limit_str = strsep(&parse, ":");
limit_str = strsep(&parse, ":")
limit_str
limit_str
strsep(&parse, ":")
strsep
strsep
&parse
parse
parse
":"
warning_str = strsep(&parse, ":");
warning_str = strsep(&parse, ":")
warning_str
warning_str
strsep(&parse, ":")
strsep
strsep
&parse
parse
parse
":"
warnfreq_str = parse;
warnfreq_str = parse
warnfreq_str
warnfreq_str
parse
parse
timelimit = atol(limit_str);
timelimit = atol(limit_str)
timelimit
timelimit
atol(limit_str)
atol
atol
limit_str
limit_str
if (warning_str)			play_warning = atol(warning_str);
warning_str
warning_str
play_warning = atol(warning_str);
play_warning = atol(warning_str)
play_warning
play_warning
atol(warning_str)
atol
atol
warning_str
warning_str
if (warnfreq_str)			warning_freq = atol(warnfreq_str);
warnfreq_str
warnfreq_str
warning_freq = atol(warnfreq_str);
warning_freq = atol(warnfreq_str)
warning_freq
warning_freq
atol(warnfreq_str)
atol
atol
warnfreq_str
warnfreq_str
if (!timelimit) {			timelimit = play_warning = warning_freq = 0;			warning_sound = NULL;		} else if (play_warning > timelimit) {			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}
!timelimit
timelimit
timelimit
{			timelimit = play_warning = warning_freq = 0;			warning_sound = NULL;		}
timelimit = play_warning = warning_freq = 0;
timelimit = play_warning = warning_freq = 0
timelimit
timelimit
play_warning = warning_freq = 0
play_warning
play_warning
warning_freq = 0
warning_freq
warning_freq
0
warning_sound = NULL;
warning_sound = NULL
warning_sound
warning_sound
NULL
NULL
if (play_warning > timelimit) {			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}
play_warning > timelimit
play_warning
play_warning
timelimit
timelimit
{			if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}		}
if (!warning_freq) {				play_warning = 0;			} else {				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}
!warning_freq
warning_freq
warning_freq
{				play_warning = 0;			}
play_warning = 0;
play_warning = 0
play_warning
play_warning
0
{				while (play_warning > timelimit)					play_warning -= warning_freq;				if (play_warning < 1)					play_warning = warning_freq = 0;			}
while (play_warning > timelimit)					play_warning -= warning_freq;
play_warning > timelimit
play_warning
play_warning
timelimit
timelimit
play_warning -= warning_freq;
play_warning -= warning_freq
play_warning
play_warning
warning_freq
warning_freq
if (play_warning < 1)					play_warning = warning_freq = 0;
play_warning < 1
play_warning
play_warning
1
play_warning = warning_freq = 0;
play_warning = warning_freq = 0
play_warning
play_warning
warning_freq = 0
warning_freq
warning_freq
0
ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit);
ast_verb(3, "Setting conference duration limit to: %ldms.\n", timelimit)
ast_verb
ast_verb
3
"Setting conference duration limit to: %ldms.\n"
timelimit
timelimit
if (play_warning) {			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);		}
play_warning
play_warning
{			ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);		}
ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning);
ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\n", play_warning)
ast_verb
ast_verb
3
"Setting warning time to %ldms from the conference duration limit.\n"
play_warning
play_warning
if (warning_freq) {			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);		}
warning_freq
warning_freq
{			ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);		}
ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq);
ast_verb(3, "Setting warning frequency to %ldms.\n", warning_freq)
ast_verb
ast_verb
3
"Setting warning frequency to %ldms.\n"
warning_freq
warning_freq
ast_channel_lock(chan);
ast_channel_lock(chan)
ast_channel_lock
ast_channel_lock
chan
chan
if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))) {			var = ast_strdupa(var);		}
(var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE"))
var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE")
var
var
pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"CONF_LIMIT_WARNING_FILE"
{			var = ast_strdupa(var);		}
var = ast_strdupa(var);
var = ast_strdupa(var)
var
var
ast_strdupa(var)
ast_strdupa
ast_strdupa
var
var
ast_channel_unlock(chan);
ast_channel_unlock(chan)
ast_channel_unlock
ast_channel_unlock
chan
chan
warning_sound = var ? var : "timeleft";
warning_sound = var ? var : "timeleft"
warning_sound
warning_sound
var ? var : "timeleft"
var
var
var
var
"timeleft"
ast_channel_lock(chan);
ast_channel_lock(chan)
ast_channel_lock
ast_channel_lock
chan
chan
if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))) {			var = ast_strdupa(var);		}
(var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE"))
var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE")
var
var
pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"CONF_LIMIT_TIMEOUT_FILE"
{			var = ast_strdupa(var);		}
var = ast_strdupa(var);
var = ast_strdupa(var)
var
var
ast_strdupa(var)
ast_strdupa
ast_strdupa
var
var
ast_channel_unlock(chan);
ast_channel_unlock(chan)
ast_channel_unlock
ast_channel_unlock
chan
chan
end_sound = var ? var : NULL;
end_sound = var ? var : NULL
end_sound
end_sound
var ? var : NULL
var
var
var
var
NULL
NULL
calldurationlimit = 0;
calldurationlimit = 0
calldurationlimit
calldurationlimit
0
if (!play_warning && !end_sound && timelimit) {			calldurationlimit = timelimit / 1000;			timelimit = play_warning = warning_freq = 0;		} else {			ast_debug(2, "Limit Data for this call:\n");			ast_debug(2, "- timelimit     = %ld\n", timelimit);			ast_debug(2, "- play_warning  = %ld\n", play_warning);			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");		}
!play_warning && !end_sound && timelimit
!play_warning && !end_sound
!play_warning
play_warning
play_warning
!end_sound
end_sound
end_sound
timelimit
timelimit
{			calldurationlimit = timelimit / 1000;			timelimit = play_warning = warning_freq = 0;		}
calldurationlimit = timelimit / 1000;
calldurationlimit = timelimit / 1000
calldurationlimit
calldurationlimit
timelimit / 1000
timelimit
timelimit
1000
timelimit = play_warning = warning_freq = 0;
timelimit = play_warning = warning_freq = 0
timelimit
timelimit
play_warning = warning_freq = 0
play_warning
play_warning
warning_freq = 0
warning_freq
warning_freq
0
{			ast_debug(2, "Limit Data for this call:\n");			ast_debug(2, "- timelimit     = %ld\n", timelimit);			ast_debug(2, "- play_warning  = %ld\n", play_warning);			ast_debug(2, "- warning_freq  = %ld\n", warning_freq);			ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");			ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");		}
ast_debug(2, "Limit Data for this call:\n");
ast_debug(2, "Limit Data for this call:\n")
ast_debug
ast_debug
2
"Limit Data for this call:\n"
ast_debug(2, "- timelimit     = %ld\n", timelimit);
ast_debug(2, "- timelimit     = %ld\n", timelimit)
ast_debug
ast_debug
2
"- timelimit     = %ld\n"
timelimit
timelimit
ast_debug(2, "- play_warning  = %ld\n", play_warning);
ast_debug(2, "- play_warning  = %ld\n", play_warning)
ast_debug
ast_debug
2
"- play_warning  = %ld\n"
play_warning
play_warning
ast_debug(2, "- warning_freq  = %ld\n", warning_freq);
ast_debug(2, "- warning_freq  = %ld\n", warning_freq)
ast_debug
ast_debug
2
"- warning_freq  = %ld\n"
warning_freq
warning_freq
ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF");
ast_debug(2, "- warning_sound = %s\n", warning_sound ? warning_sound : "UNDEF")
ast_debug
ast_debug
2
"- warning_sound = %s\n"
warning_sound ? warning_sound : "UNDEF"
warning_sound
warning_sound
warning_sound
warning_sound
"UNDEF"
ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF");
ast_debug(2, "- end_sound     = %s\n", end_sound ? end_sound : "UNDEF")
ast_debug
ast_debug
2
"- end_sound     = %s\n"
end_sound ? end_sound : "UNDEF"
end_sound
end_sound
end_sound
end_sound
"UNDEF"
if (ast_test_flag64(confflags, CONFFLAG_KEYEXIT)) {		if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS]))			exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);		else			exitkeys = ast_strdupa("#"); /* Default */	}
ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KEYEXIT
CONFFLAG_KEYEXIT
{		if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS]))			exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);		else			exitkeys = ast_strdupa("#"); /* Default */	}
if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS]))			exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);		else			exitkeys = ast_strdupa("#");
!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS])
ast_strlen_zero(optargs[OPT_ARG_EXITKEYS])
ast_strlen_zero
ast_strlen_zero
optargs[OPT_ARG_EXITKEYS]
optargs
optargs
OPT_ARG_EXITKEYS
OPT_ARG_EXITKEYS
exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS]);
exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS])
exitkeys
exitkeys
ast_strdupa(optargs[OPT_ARG_EXITKEYS])
ast_strdupa
ast_strdupa
optargs[OPT_ARG_EXITKEYS]
optargs
optargs
OPT_ARG_EXITKEYS
OPT_ARG_EXITKEYS
exitkeys = ast_strdupa("#");
exitkeys = ast_strdupa("#")
exitkeys
exitkeys
ast_strdupa("#")
ast_strdupa
ast_strdupa
"#"
if (ast_test_flag64(confflags, CONFFLAG_RECORDCONF)) {		if (!conf->recordingfilename) {			const char *var;			ast_channel_lock(chan);			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}			ast_channel_unlock(chan);			if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}			if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);		}	}
ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_RECORDCONF
CONFFLAG_RECORDCONF
{		if (!conf->recordingfilename) {			const char *var;			ast_channel_lock(chan);			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}			ast_channel_unlock(chan);			if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}			if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);		}	}
if (!conf->recordingfilename) {			const char *var;			ast_channel_lock(chan);			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}			ast_channel_unlock(chan);			if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}			if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);		}
!conf->recordingfilename
conf->recordingfilename
conf
conf
recordingfilename
{			const char *var;			ast_channel_lock(chan);			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}			if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}			ast_channel_unlock(chan);			if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}			if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}			ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);		}
const char *var;
const char *var;
const char
*var
*
var
ast_channel_lock(chan);
ast_channel_lock(chan)
ast_channel_lock
ast_channel_lock
chan
chan
if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {				conf->recordingfilename = ast_strdup(var);			}
(var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))
var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
var
var
pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"MEETME_RECORDINGFILE"
{				conf->recordingfilename = ast_strdup(var);			}
conf->recordingfilename = ast_strdup(var);
conf->recordingfilename = ast_strdup(var)
conf->recordingfilename
conf
conf
recordingfilename
ast_strdup(var)
ast_strdup
ast_strdup
var
var
if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {				conf->recordingformat = ast_strdup(var);			}
(var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))
var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
var
var
pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"MEETME_RECORDINGFORMAT"
{				conf->recordingformat = ast_strdup(var);			}
conf->recordingformat = ast_strdup(var);
conf->recordingformat = ast_strdup(var)
conf->recordingformat
conf
conf
recordingformat
ast_strdup(var)
ast_strdup
ast_strdup
var
var
ast_channel_unlock(chan);
ast_channel_unlock(chan)
ast_channel_unlock
ast_channel_unlock
chan
chan
if (!conf->recordingfilename) {				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}
!conf->recordingfilename
conf->recordingfilename
conf
conf
recordingfilename
{				snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));				conf->recordingfilename = ast_strdup(recordingtmp);			}
snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));
snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan))
snprintf
snprintf
recordingtmp
recordingtmp
sizeof(recordingtmp)
(recordingtmp)
recordingtmp
recordingtmp
"meetme-conf-rec-%s-%s"
conf->confno
conf
conf
confno
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->recordingfilename = ast_strdup(recordingtmp);
conf->recordingfilename = ast_strdup(recordingtmp)
conf->recordingfilename
conf
conf
recordingfilename
ast_strdup(recordingtmp)
ast_strdup
ast_strdup
recordingtmp
recordingtmp
if (!conf->recordingformat) {				conf->recordingformat = ast_strdup("wav");			}
!conf->recordingformat
conf->recordingformat
conf
conf
recordingformat
{				conf->recordingformat = ast_strdup("wav");			}
conf->recordingformat = ast_strdup("wav");
conf->recordingformat = ast_strdup("wav")
conf->recordingformat
conf
conf
recordingformat
ast_strdup("wav")
ast_strdup
ast_strdup
"wav"
ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat);
ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    conf->confno, conf->recordingfilename, conf->recordingformat)
ast_verb
ast_verb
4
"Starting recording of MeetMe Conference %s into file %s.%s.\n"
conf->confno
conf
conf
confno
conf->recordingfilename
conf
conf
recordingfilename
conf->recordingformat
conf
conf
recordingformat
ast_mutex_lock(&conf->recordthreadlock);
ast_mutex_lock(&conf->recordthreadlock)
ast_mutex_lock
ast_mutex_lock
&conf->recordthreadlock
conf->recordthreadlock
conf
conf
recordthreadlock
if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) &&		((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {		ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		dahdic.chan = 0;		dahdic.confno = conf->dahdiconf;		dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;		if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error starting listen channel\n");			ast_hangup(conf->lchan);			conf->lchan = NULL;		} else {			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);		}	}
(conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) &&		((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))
(conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(conf->recordthread == AST_PTHREADT_NULL)
conf->recordthread == AST_PTHREADT_NULL
conf->recordthread
conf
conf
recordthread
AST_PTHREADT_NULL
AST_PTHREADT_NULL
ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_RECORDCONF
CONFFLAG_RECORDCONF
((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))
(conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL))
conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
conf->lchan
conf
conf
lchan
ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
ast_request
ast_request
"DAHDI"
cap_slin
cap_slin
chan
chan
"pseudo"
NULL
NULL
{		ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);		dahdic.chan = 0;		dahdic.confno = conf->dahdiconf;		dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;		if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error starting listen channel\n");			ast_hangup(conf->lchan);			conf->lchan = NULL;		} else {			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);		}	}
ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
ast_set_read_format_by_id
ast_set_read_format_by_id
conf->lchan
conf
conf
lchan
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
ast_set_write_format_by_id
ast_set_write_format_by_id
conf->lchan
conf
conf
lchan
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
dahdic.chan = 0;
dahdic.chan = 0
dahdic.chan
dahdic
dahdic
chan
0
dahdic.confno = conf->dahdiconf;
dahdic.confno = conf->dahdiconf
dahdic.confno
dahdic
dahdic
confno
conf->dahdiconf
conf
conf
dahdiconf
dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;
dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON
DAHDI_CONF_CONFANN
DAHDI_CONF_CONFANN
DAHDI_CONF_CONFANNMON
DAHDI_CONF_CONFANNMON
if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error starting listen channel\n");			ast_hangup(conf->lchan);			conf->lchan = NULL;		} else {			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);		}
ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)
ioctl
ioctl
ast_channel_fd(conf->lchan, 0)
ast_channel_fd
ast_channel_fd
conf->lchan
conf
conf
lchan
0
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{			ast_log(LOG_WARNING, "Error starting listen channel\n");			ast_hangup(conf->lchan);			conf->lchan = NULL;		}
ast_log(LOG_WARNING, "Error starting listen channel\n");
ast_log(LOG_WARNING, "Error starting listen channel\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error starting listen channel\n"
ast_hangup(conf->lchan);
ast_hangup(conf->lchan)
ast_hangup
ast_hangup
conf->lchan
conf
conf
lchan
conf->lchan = NULL;
conf->lchan = NULL
conf->lchan
conf
conf
lchan
NULL
NULL
{			ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);		}
ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);
ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf)
ast_pthread_create_detached_background
ast_pthread_create_detached_background
&conf->recordthread
conf->recordthread
conf
conf
recordthread
NULL
NULL
recordthread
recordthread
conf
conf
ast_mutex_unlock(&conf->recordthreadlock);
ast_mutex_unlock(&conf->recordthreadlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->recordthreadlock
conf->recordthreadlock
conf
conf
recordthreadlock
ast_mutex_lock(&conf->announcethreadlock);
ast_mutex_lock(&conf->announcethreadlock)
ast_mutex_lock
ast_mutex_lock
&conf->announcethreadlock
conf->announcethreadlock
conf
conf
announcethreadlock
if ((conf->announcethread == AST_PTHREADT_NULL) && !ast_test_flag64(confflags, CONFFLAG_QUIET) &&		ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)) {		ast_mutex_init(&conf->announcelistlock);		AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist);		ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf);	}
(conf->announcethread == AST_PTHREADT_NULL) && !ast_test_flag64(confflags, CONFFLAG_QUIET) &&		ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(conf->announcethread == AST_PTHREADT_NULL) && !ast_test_flag64(confflags, CONFFLAG_QUIET)
(conf->announcethread == AST_PTHREADT_NULL)
conf->announcethread == AST_PTHREADT_NULL
conf->announcethread
conf
conf
announcethread
AST_PTHREADT_NULL
AST_PTHREADT_NULL
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER
CONFFLAG_INTROUSER
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
{		ast_mutex_init(&conf->announcelistlock);		AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist);		ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf);	}
ast_mutex_init(&conf->announcelistlock);
ast_mutex_init(&conf->announcelistlock)
ast_mutex_init
ast_mutex_init
&conf->announcelistlock
conf->announcelistlock
conf
conf
announcelistlock
AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist);
AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist)
AST_LIST_HEAD_INIT_NOLOCK
AST_LIST_HEAD_INIT_NOLOCK
&conf->announcelist
conf->announcelist
conf
conf
announcelist
ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf);
ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf)
ast_pthread_create_background
ast_pthread_create_background
&conf->announcethread
conf->announcethread
conf
conf
announcethread
NULL
NULL
announce_thread
announce_thread
conf
conf
ast_mutex_unlock(&conf->announcethreadlock);
ast_mutex_unlock(&conf->announcethreadlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->announcethreadlock
conf->announcethreadlock
conf
conf
announcethreadlock
time(&user->jointime);
time(&user->jointime)
time
time
&user->jointime
user->jointime
user
user
jointime
user->timelimit = timelimit;
user->timelimit = timelimit
user->timelimit
user
user
timelimit
timelimit
timelimit
user->play_warning = play_warning;
user->play_warning = play_warning
user->play_warning
user
user
play_warning
play_warning
play_warning
user->warning_freq = warning_freq;
user->warning_freq = warning_freq
user->warning_freq
user
user
warning_freq
warning_freq
warning_freq
user->warning_sound = warning_sound;
user->warning_sound = warning_sound
user->warning_sound
user
user
warning_sound
warning_sound
warning_sound
user->end_sound = end_sound;
user->end_sound = end_sound
user->end_sound
user
user
end_sound
end_sound
end_sound
if (calldurationlimit > 0) {		time(&user->kicktime);		user->kicktime = user->kicktime + calldurationlimit;	}
calldurationlimit > 0
calldurationlimit
calldurationlimit
0
{		time(&user->kicktime);		user->kicktime = user->kicktime + calldurationlimit;	}
time(&user->kicktime);
time(&user->kicktime)
time
time
&user->kicktime
user->kicktime
user
user
kicktime
user->kicktime = user->kicktime + calldurationlimit;
user->kicktime = user->kicktime + calldurationlimit
user->kicktime
user
user
kicktime
user->kicktime + calldurationlimit
user->kicktime
user
user
kicktime
calldurationlimit
calldurationlimit
if (ast_tvzero(user->start_time))		user->start_time = ast_tvnow();
ast_tvzero(user->start_time)
ast_tvzero
ast_tvzero
user->start_time
user
user
start_time
user->start_time = ast_tvnow();
user->start_time = ast_tvnow()
user->start_time
user
user
start_time
ast_tvnow()
ast_tvnow
ast_tvnow
time_left_ms = user->timelimit;
time_left_ms = user->timelimit
time_left_ms
time_left_ms
user->timelimit
user
user
timelimit
if (user->timelimit) {		nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));		nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000));	}
user->timelimit
user
user
timelimit
{		nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));		nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000));	}
nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));
nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000))
nexteventts
nexteventts
ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000))
ast_tvadd
ast_tvadd
user->start_time
user
user
start_time
ast_samp2tv(user->timelimit, 1000)
ast_samp2tv
ast_samp2tv
user->timelimit
user
user
timelimit
1000
nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000));
nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000))
nexteventts
nexteventts
ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000))
ast_tvsub
ast_tvsub
nexteventts
nexteventts
ast_samp2tv(user->play_warning, 1000)
ast_samp2tv
ast_samp2tv
user->play_warning
user
user
play_warning
1000
if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))) {		/* Sorry, but this conference is locked! */		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))			ast_waitstream(chan, "");		goto outrun;	}
conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))
conf->locked
conf
conf
locked
(!ast_test_flag64(confflags, CONFFLAG_ADMIN))
!ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_ADMIN
CONFFLAG_ADMIN
{		/* Sorry, but this conference is locked! */		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))			ast_waitstream(chan, "");		goto outrun;	}
if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))			ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-locked", ast_channel_language(chan))
ast_streamfile(chan, "conf-locked", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-locked"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
goto outrun;
outrun
ast_mutex_lock(&conf->playlock);
ast_mutex_lock(&conf->playlock)
ast_mutex_lock
ast_mutex_lock
&conf->playlock
conf->playlock
conf
conf
playlock
if (rt_schedule && conf->maxusers) {		if (conf->users >= conf->maxusers) {			/* Sorry, but this confernce has reached the participant limit! */			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");			ast_mutex_unlock(&conf->playlock);			goto outrun;		}	}
rt_schedule && conf->maxusers
rt_schedule
rt_schedule
conf->maxusers
conf
conf
maxusers
{		if (conf->users >= conf->maxusers) {			/* Sorry, but this confernce has reached the participant limit! */			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");			ast_mutex_unlock(&conf->playlock);			goto outrun;		}	}
if (conf->users >= conf->maxusers) {			/* Sorry, but this confernce has reached the participant limit! */			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");			ast_mutex_unlock(&conf->playlock);			goto outrun;		}
conf->users >= conf->maxusers
conf->users
conf
conf
users
conf->maxusers
conf
conf
maxusers
{			/* Sorry, but this confernce has reached the participant limit! */			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");			ast_mutex_unlock(&conf->playlock);			goto outrun;		}
if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))				ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-full", ast_channel_language(chan))
ast_streamfile(chan, "conf-full", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-full"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_mutex_unlock(&conf->playlock);
ast_mutex_unlock(&conf->playlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->playlock
conf->playlock
conf
conf
playlock
goto outrun;
outrun
ao2_lock(conf->usercontainer);
ao2_lock(conf->usercontainer)
ao2_lock
ao2_lock
conf->usercontainer
conf
conf
usercontainer
ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &user->user_no);
ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &user->user_no)
ao2_callback
ao2_callback
conf->usercontainer
conf
conf
usercontainer
OBJ_NODATA
OBJ_NODATA
user_max_cmp
user_max_cmp
&user->user_no
user->user_no
user
user
user_no
user->user_no++;
user->user_no++
user->user_no
user
user
user_no
ao2_link(conf->usercontainer, user);
ao2_link(conf->usercontainer, user)
ao2_link
ao2_link
conf->usercontainer
conf
conf
usercontainer
user
user
ao2_unlock(conf->usercontainer);
ao2_unlock(conf->usercontainer)
ao2_unlock
ao2_unlock
conf->usercontainer
conf
conf
usercontainer
user->chan = chan;
user->chan = chan
user->chan
user
user
chan
chan
chan
user->userflags = *confflags;
user->userflags = *confflags
user->userflags
user
user
userflags
*confflags
confflags
confflags
user->adminflags = ast_test_flag64(confflags, CONFFLAG_STARTMUTED) ? ADMINFLAG_SELFMUTED : 0;
user->adminflags = ast_test_flag64(confflags, CONFFLAG_STARTMUTED) ? ADMINFLAG_SELFMUTED : 0
user->adminflags
user
user
adminflags
ast_test_flag64(confflags, CONFFLAG_STARTMUTED) ? ADMINFLAG_SELFMUTED : 0
ast_test_flag64(confflags, CONFFLAG_STARTMUTED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_STARTMUTED
CONFFLAG_STARTMUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
0
user->adminflags |= (conf->gmuted) ? ADMINFLAG_MUTED : 0;
user->adminflags |= (conf->gmuted) ? ADMINFLAG_MUTED : 0
user->adminflags
user
user
adminflags
(conf->gmuted) ? ADMINFLAG_MUTED : 0
(conf->gmuted)
conf->gmuted
conf
conf
gmuted
ADMINFLAG_MUTED
ADMINFLAG_MUTED
0
user->talking = -1;
user->talking = -1
user->talking
user
user
talking
-1
1
ast_mutex_unlock(&conf->playlock);
ast_mutex_unlock(&conf->playlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->playlock
conf->playlock
conf
conf
playlock
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC))) {		char destdir[PATH_MAX];		snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR);		if (ast_mkdir(destdir, 0777) != 0) {			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));			goto outrun;		}		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);			mailbox = strsep(&context, "@");			if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}		} else {			snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);		}		res = 0;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);		else if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);		if (res == -1)			goto outrun;	}
!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC))
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
(ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC))
ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER
CONFFLAG_INTROUSER
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
{		char destdir[PATH_MAX];		snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR);		if (ast_mkdir(destdir, 0777) != 0) {			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));			goto outrun;		}		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);			mailbox = strsep(&context, "@");			if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}		} else {			snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);		}		res = 0;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);		else if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);		if (res == -1)			goto outrun;	}
char destdir[PATH_MAX];
char destdir[PATH_MAX];
char
destdir[PATH_MAX]
destdir
[PATH_MAX]
PATH_MAX
PATH_MAX
snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR);
snprintf(destdir, sizeof(destdir), "%s/meetme", ast_config_AST_SPOOL_DIR)
snprintf
snprintf
destdir
destdir
sizeof(destdir)
(destdir)
destdir
destdir
"%s/meetme"
ast_config_AST_SPOOL_DIR
ast_config_AST_SPOOL_DIR
if (ast_mkdir(destdir, 0777) != 0) {			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));			goto outrun;		}
ast_mkdir(destdir, 0777) != 0
ast_mkdir(destdir, 0777)
ast_mkdir
ast_mkdir
destdir
destdir
0777
0
{			ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));			goto outrun;		}
ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno));
ast_log(LOG_WARNING, "mkdir '%s' failed: %s\n", destdir, strerror(errno))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"mkdir '%s' failed: %s\n"
destdir
destdir
strerror(errno)
strerror
strerror
errno
errno
goto outrun;
outrun
if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);			mailbox = strsep(&context, "@");			if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}		} else {			snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);		}
ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
{			context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);			mailbox = strsep(&context, "@");			if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}		}
context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC]);
context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC])
context
context
ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC])
ast_strdupa
ast_strdupa
optargs[OPT_ARG_INTROUSER_VMREC]
optargs
optargs
OPT_ARG_INTROUSER_VMREC
OPT_ARG_INTROUSER_VMREC
mailbox = strsep(&context, "@");
mailbox = strsep(&context, "@")
mailbox
mailbox
strsep(&context, "@")
strsep
strsep
&context
context
context
"@"
if (ast_strlen_zero(mailbox)) {				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			} else {				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}
ast_strlen_zero(mailbox)
ast_strlen_zero
ast_strlen_zero
mailbox
mailbox
{				/* invalid input, clear the v flag*/				ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);				ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");			}
ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC);
ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC)
ast_clear_flag64
ast_clear_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n");
ast_log(LOG_WARNING,"You must specify a mailbox in the v() option\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"You must specify a mailbox in the v() option\n"
{				if (ast_strlen_zero(context)) {				    context = "default";				}				/* if there is no mailbox we don't need to do this logic  */				snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);				/* if the greeting doesn't exist then use the temp file method instead, clear flag v */				if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}			}
if (ast_strlen_zero(context)) {				    context = "default";				}
ast_strlen_zero(context)
ast_strlen_zero
ast_strlen_zero
context
context
{				    context = "default";				}
context = "default";
context = "default"
context
context
"default"
snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox);
snprintf(user->namerecloc, sizeof(user->namerecloc),					 "%s/voicemail/%s/%s/greet",ast_config_AST_SPOOL_DIR,context,mailbox)
snprintf
snprintf
user->namerecloc
user
user
namerecloc
sizeof(user->namerecloc)
(user->namerecloc)
user->namerecloc
user
user
namerecloc
"%s/voicemail/%s/%s/greet"
ast_config_AST_SPOOL_DIR
ast_config_AST_SPOOL_DIR
context
context
mailbox
mailbox
if (!ast_fileexists(user->namerecloc, NULL, NULL)){					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}
!ast_fileexists(user->namerecloc, NULL, NULL)
ast_fileexists(user->namerecloc, NULL, NULL)
ast_fileexists
ast_fileexists
user->namerecloc
user
user
namerecloc
NULL
NULL
NULL
NULL
{					snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);					ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);				}
snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no);
snprintf(user->namerecloc, sizeof(user->namerecloc),						 "%s/meetme-username-%s-%d", destdir,						 conf->confno, user->user_no)
snprintf
snprintf
user->namerecloc
user
user
namerecloc
sizeof(user->namerecloc)
(user->namerecloc)
user->namerecloc
user
user
namerecloc
"%s/meetme-username-%s-%d"
destdir
destdir
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC);
ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_clear_flag64
ast_clear_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
{			snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);		}
snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no);
snprintf(user->namerecloc, sizeof(user->namerecloc),				 "%s/meetme-username-%s-%d", destdir,				 conf->confno, user->user_no)
snprintf
snprintf
user->namerecloc
user
user
namerecloc
sizeof(user->namerecloc)
(user->namerecloc)
user->namerecloc
user
user
namerecloc
"%s/meetme-username-%s-%d"
destdir
destdir
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
res = 0;
res = 0
res
res
0
if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);		else if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);
ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) && !ast_fileexists(user->namerecloc, NULL, NULL)
ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSERNOREVIEW
!ast_fileexists(user->namerecloc, NULL, NULL)
ast_fileexists(user->namerecloc, NULL, NULL)
ast_fileexists
ast_fileexists
user->namerecloc
user
user
namerecloc
NULL
NULL
NULL
NULL
res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL);
res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL)
res
res
ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE), 0, NULL)
ast_play_and_record
ast_play_and_record
chan
chan
"vm-rec-name"
user->namerecloc
user
user
namerecloc
10
"sln"
&duration
duration
duration
NULL
NULL
ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE)
ast_dsp_get_threshold_from_settings
ast_dsp_get_threshold_from_settings
THRESHOLD_SILENCE
THRESHOLD_SILENCE
0
NULL
NULL
if (ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL))			res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);
ast_test_flag64(confflags, CONFFLAG_INTROUSER) && !ast_fileexists(user->namerecloc, NULL, NULL)
ast_test_flag64(confflags, CONFFLAG_INTROUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER
CONFFLAG_INTROUSER
!ast_fileexists(user->namerecloc, NULL, NULL)
ast_fileexists(user->namerecloc, NULL, NULL)
ast_fileexists
ast_fileexists
user->namerecloc
user
user
namerecloc
NULL
NULL
NULL
NULL
res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL);
res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL)
res
res
ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL)
ast_record_review
ast_record_review
chan
chan
"vm-rec-name"
user->namerecloc
user
user
namerecloc
10
"sln"
&duration
duration
duration
NULL
NULL
if (res == -1)			goto outrun;
res == -1
res
res
-1
1
goto outrun;
outrun
ast_mutex_lock(&conf->playlock);
ast_mutex_lock(&conf->playlock)
ast_mutex_lock
ast_mutex_lock
&conf->playlock
conf->playlock
conf
conf
playlock
if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER))		conf->markedusers++;
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDUSER
CONFFLAG_MARKEDUSER
conf->markedusers++;
conf->markedusers++
conf->markedusers
conf
conf
markedusers
conf->users++;
conf->users++
conf->users
conf
conf
users
if (rt_log_members) {		/* Update table */		snprintf(members, sizeof(members), "%d", conf->users);		ast_realtime_require_field("meetme",			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),			"members", RQ_UINTEGER1, strlen(members),			NULL);		ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);	}
rt_log_members
rt_log_members
{		/* Update table */		snprintf(members, sizeof(members), "%d", conf->users);		ast_realtime_require_field("meetme",			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),			"members", RQ_UINTEGER1, strlen(members),			NULL);		ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);	}
snprintf(members, sizeof(members), "%d", conf->users);
snprintf(members, sizeof(members), "%d", conf->users)
snprintf
snprintf
members
members
sizeof(members)
(members)
members
members
"%d"
conf->users
conf
conf
users
ast_realtime_require_field("meetme",			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),			"members", RQ_UINTEGER1, strlen(members),			NULL);
ast_realtime_require_field("meetme",			"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),			"members", RQ_UINTEGER1, strlen(members),			NULL)
ast_realtime_require_field
ast_realtime_require_field
"meetme"
"confno"
strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2
strlen(conf->confno) > 7
strlen(conf->confno)
strlen
strlen
conf->confno
conf
conf
confno
7
RQ_UINTEGER4
RQ_UINTEGER4
strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2
strlen(conf->confno) > 4
strlen(conf->confno)
strlen
strlen
conf->confno
conf
conf
confno
4
RQ_UINTEGER3
RQ_UINTEGER3
RQ_UINTEGER2
RQ_UINTEGER2
strlen(conf->confno)
strlen
strlen
conf->confno
conf
conf
confno
"members"
RQ_UINTEGER1
RQ_UINTEGER1
strlen(members)
strlen
strlen
members
members
NULL
NULL
ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);
ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL)
ast_update_realtime
ast_update_realtime
"meetme"
"confno"
conf->confno
conf
conf
confno
"members"
members
members
NULL
NULL
setusercount = 1;
setusercount = 1
setusercount
setusercount
1
if (conf->users == 1)		ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno);
conf->users == 1
conf->users
conf
conf
users
1
ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno);
ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_INUSE
AST_DEVICE_INUSE
"meetme:%s"
conf->confno
conf
conf
confno
ast_mutex_unlock(&conf->playlock);
ast_mutex_unlock(&conf->playlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->playlock
conf->playlock
conf
conf
playlock
pbx_builtin_setvar_helper(chan, "MEETMEUNIQUEID", conf->uniqueid);
pbx_builtin_setvar_helper(chan, "MEETMEUNIQUEID", conf->uniqueid)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
chan
chan
"MEETMEUNIQUEID"
conf->uniqueid
conf
conf
uniqueid
if (ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)) {		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))) {			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));		} else if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		} else {			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}		ast_channel_unlock(chan);	}
ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_EXIT_CONTEXT
CONFFLAG_EXIT_CONTEXT
{		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))) {			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));		} else if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		} else {			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}		ast_channel_unlock(chan);	}
ast_channel_lock(chan);
ast_channel_lock(chan)
ast_channel_lock
ast_channel_lock
chan
chan
if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))) {			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));		} else if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		} else {			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}
(tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT"))
tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT")
tmpvar
tmpvar
pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"MEETME_EXIT_CONTEXT"
{			ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));		}
ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext));
ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext))
ast_copy_string
ast_copy_string
exitcontext
exitcontext
tmpvar
tmpvar
sizeof(exitcontext)
(exitcontext)
exitcontext
exitcontext
if (!ast_strlen_zero(ast_channel_macrocontext(chan))) {			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		} else {			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}
!ast_strlen_zero(ast_channel_macrocontext(chan))
ast_strlen_zero(ast_channel_macrocontext(chan))
ast_strlen_zero
ast_strlen_zero
ast_channel_macrocontext(chan)
ast_channel_macrocontext
ast_channel_macrocontext
chan
chan
{			ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));		}
ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext));
ast_copy_string(exitcontext, ast_channel_macrocontext(chan), sizeof(exitcontext))
ast_copy_string
ast_copy_string
exitcontext
exitcontext
ast_channel_macrocontext(chan)
ast_channel_macrocontext
ast_channel_macrocontext
chan
chan
sizeof(exitcontext)
(exitcontext)
exitcontext
exitcontext
{			ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));		}
ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext));
ast_copy_string(exitcontext, ast_channel_context(chan), sizeof(exitcontext))
ast_copy_string
ast_copy_string
exitcontext
exitcontext
ast_channel_context(chan)
ast_channel_context
ast_channel_context
chan
chan
sizeof(exitcontext)
(exitcontext)
exitcontext
exitcontext
ast_channel_unlock(chan);
ast_channel_unlock(chan)
ast_channel_unlock
ast_channel_unlock
chan
chan
if (ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])) {		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {			ast_waitstream(chan, "");		}	}
ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])
ast_test_flag64(confflags, CONFFLAG_INTROMSG)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROMSG
CONFFLAG_INTROMSG
!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])
ast_strlen_zero(optargs[OPT_ARG_INTROMSG])
ast_strlen_zero
ast_strlen_zero
optargs[OPT_ARG_INTROMSG]
optargs
optargs
OPT_ARG_INTROMSG
OPT_ARG_INTROMSG
{		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {			ast_waitstream(chan, "");		}	}
if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {			ast_waitstream(chan, "");		}
!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))
ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
optargs[OPT_ARG_INTROMSG]
optargs
optargs
OPT_ARG_INTROMSG
OPT_ARG_INTROMSG
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{			ast_waitstream(chan, "");		}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))) {		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))				ast_waitstream(chan, "");		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))				ast_waitstream(chan, "");	}
!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))
ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))
ast_test_flag64
ast_test_flag64
confflags
confflags
(CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON)
CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON
CONFFLAG_QUIET
CONFFLAG_QUIET
CONFFLAG_NOONLYPERSON
CONFFLAG_NOONLYPERSON
{		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))				ast_waitstream(chan, "");		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))				ast_waitstream(chan, "");	}
if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))				ast_waitstream(chan, "");
conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
conf->users == 1
conf->users
conf
conf
users
1
!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))				ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-onlyperson"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))				ast_waitstream(chan, "");
ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
conf->markedusers == 0
conf->markedusers
conf
conf
markedusers
0
if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))				ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan))
ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-waitforleader"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {		int keepplaying = 1;		if (conf->users == 2) {			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		} else {			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}	}
ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1
ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_ANNOUNCEUSERCOUNT
CONFFLAG_ANNOUNCEUSERCOUNT
conf->users > 1
conf->users
conf
conf
users
1
{		int keepplaying = 1;		if (conf->users == 2) {			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		} else {			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}	}
int keepplaying = 1;
int keepplaying = 1;
int
keepplaying = 1
keepplaying
= 1
1
if (conf->users == 2) {			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		} else {			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}
conf->users == 2
conf->users
conf
conf
users
2
{			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}
if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))
ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-onlyone"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (res == -1)					goto outrun;
res == -1
res
res
-1
1
goto outrun;
outrun
{			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}		}
if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))
ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-thereare"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (res == -1)					goto outrun;
res == -1
res
res
-1
1
goto outrun;
outrun
if (keepplaying) {				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
keepplaying
keepplaying
{				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
res
res
ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
ast_say_number
ast_say_number
chan
chan
conf->users - 1
conf->users
conf
conf
users
1
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
(char *) NULL
char *
char
*
*
NULL
NULL
if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (res == -1)					goto outrun;
res == -1
res
res
-1
1
goto outrun;
outrun
if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))
keepplaying
keepplaying
!ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))
ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-otherinparty"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{				res = ast_waitstream(chan, AST_DIGIT_ANY);				ast_stopstream(chan);				if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;			}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)					keepplaying = 0;				else if (res == -1)					goto outrun;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (res == -1)					goto outrun;
res == -1
res
res
-1
1
goto outrun;
outrun
if (!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)) {		/* We're leaving this alone until the state gets changed to up */		ast_indicate(chan, -1);	}
!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)
ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_NO_AUDIO_UNTIL_UP
CONFFLAG_NO_AUDIO_UNTIL_UP
{		/* We're leaving this alone until the state gets changed to up */		ast_indicate(chan, -1);	}
ast_indicate(chan, -1);
ast_indicate(chan, -1)
ast_indicate
ast_indicate
chan
chan
-1
1
if (ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {		ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan));		goto outrun;	}
ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR) < 0
ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR)
ast_set_write_format_by_id
ast_set_write_format_by_id
chan
chan
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
0
{		ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan));		goto outrun;	}
ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan));
ast_log(LOG_WARNING, "Unable to set '%s' to write linear mode\n", ast_channel_name(chan))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to set '%s' to write linear mode\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
goto outrun;
outrun
if (ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR) < 0) {		ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan));		goto outrun;	}
ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR) < 0
ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR)
ast_set_read_format_by_id
ast_set_read_format_by_id
chan
chan
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
0
{		ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan));		goto outrun;	}
ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan));
ast_log(LOG_WARNING, "Unable to set '%s' to read linear mode\n", ast_channel_name(chan))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to set '%s' to read linear mode\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
goto outrun;
outrun
if ((mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0))) {		ast_free(mod_speex);		ast_func_write(chan, "DENOISE(rx)", "on");	}
(mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0))
mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0)
mod_speex
mod_speex
ast_module_helper("", "codec_speex", 0, 0, 0, 0)
ast_module_helper
ast_module_helper
""
"codec_speex"
0
0
0
0
{		ast_free(mod_speex);		ast_func_write(chan, "DENOISE(rx)", "on");	}
ast_free(mod_speex);
ast_free(mod_speex)
ast_free
ast_free
mod_speex
mod_speex
ast_func_write(chan, "DENOISE(rx)", "on");
ast_func_write(chan, "DENOISE(rx)", "on")
ast_func_write
ast_func_write
chan
chan
"DENOISE(rx)"
"on"
retrydahdi = (strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0);
retrydahdi = (strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0)
retrydahdi
retrydahdi
(strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0)
strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan)) ? 1 : 0
strcasecmp(ast_channel_tech(chan)->type, "DAHDI") || (ast_channel_audiohooks(chan) || ast_channel_monitor(chan))
strcasecmp(ast_channel_tech(chan)->type, "DAHDI")
strcasecmp
strcasecmp
ast_channel_tech(chan)->type
ast_channel_tech(chan)
ast_channel_tech
ast_channel_tech
chan
chan
type
"DAHDI"
(ast_channel_audiohooks(chan) || ast_channel_monitor(chan))
ast_channel_audiohooks(chan) || ast_channel_monitor(chan)
ast_channel_audiohooks(chan)
ast_channel_audiohooks
ast_channel_audiohooks
chan
chan
ast_channel_monitor(chan)
ast_channel_monitor
ast_channel_monitor
chan
chan
1
0
user->dahdichannel = !retrydahdi;
user->dahdichannel = !retrydahdi
user->dahdichannel
user
user
dahdichannel
!retrydahdi
retrydahdi
retrydahdi
dahdiretry:	origfd = ast_channel_fd(chan, 0);
dahdiretry
origfd = ast_channel_fd(chan, 0);
origfd = ast_channel_fd(chan, 0)
origfd
origfd
ast_channel_fd(chan, 0)
ast_channel_fd
ast_channel_fd
chan
chan
0
if (retrydahdi) {		/* open pseudo in non-blocking mode */		fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK);		if (fd < 0) {			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));			goto outrun;		}		using_pseudo = 1;		/* Setup buffering information */		memset(&bi, 0, sizeof(bi));		bi.bufsize = CONF_SIZE / 2;		bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.numbufs = audio_buffers;		if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)) {			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));			close(fd);			goto outrun;		}		x = 1;		if (ioctl(fd, DAHDI_SETLINEAR, &x)) {			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));			close(fd);			goto outrun;		}		nfds = 1;	} else {		/* XXX Make sure we're not running on a pseudo channel XXX */		fd = ast_channel_fd(chan, 0);		nfds = 0;	}
retrydahdi
retrydahdi
{		/* open pseudo in non-blocking mode */		fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK);		if (fd < 0) {			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));			goto outrun;		}		using_pseudo = 1;		/* Setup buffering information */		memset(&bi, 0, sizeof(bi));		bi.bufsize = CONF_SIZE / 2;		bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE;		bi.numbufs = audio_buffers;		if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)) {			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));			close(fd);			goto outrun;		}		x = 1;		if (ioctl(fd, DAHDI_SETLINEAR, &x)) {			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));			close(fd);			goto outrun;		}		nfds = 1;	}
fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK);
fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK)
fd
fd
open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK)
open
open
"/dev/dahdi/pseudo"
O_RDWR | O_NONBLOCK
O_RDWR
O_RDWR
O_NONBLOCK
O_NONBLOCK
if (fd < 0) {			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));			goto outrun;		}
fd < 0
fd
fd
0
{			ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));			goto outrun;		}
ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno));
ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\n", strerror(errno))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to open DAHDI pseudo channel: %s\n"
strerror(errno)
strerror
strerror
errno
errno
goto outrun;
outrun
using_pseudo = 1;
using_pseudo = 1
using_pseudo
using_pseudo
1
memset(&bi, 0, sizeof(bi));
memset(&bi, 0, sizeof(bi))
memset
memset
&bi
bi
bi
0
sizeof(bi)
(bi)
bi
bi
bi.bufsize = CONF_SIZE / 2;
bi.bufsize = CONF_SIZE / 2
bi.bufsize
bi
bi
bufsize
CONF_SIZE / 2
CONF_SIZE
CONF_SIZE
2
bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE;
bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE
bi.txbufpolicy
bi
bi
txbufpolicy
DAHDI_POLICY_IMMEDIATE
DAHDI_POLICY_IMMEDIATE
bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE;
bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE
bi.rxbufpolicy
bi
bi
rxbufpolicy
DAHDI_POLICY_IMMEDIATE
DAHDI_POLICY_IMMEDIATE
bi.numbufs = audio_buffers;
bi.numbufs = audio_buffers
bi.numbufs
bi
bi
numbufs
audio_buffers
audio_buffers
if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)) {			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));			close(fd);			goto outrun;		}
ioctl(fd, DAHDI_SET_BUFINFO, &bi)
ioctl
ioctl
fd
fd
DAHDI_SET_BUFINFO
DAHDI_SET_BUFINFO
&bi
bi
bi
{			ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));			close(fd);			goto outrun;		}
ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno));
ast_log(LOG_WARNING, "Unable to set buffering information: %s\n", strerror(errno))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to set buffering information: %s\n"
strerror(errno)
strerror
strerror
errno
errno
close(fd);
close(fd)
close
close
fd
fd
goto outrun;
outrun
x = 1;
x = 1
x
x
1
if (ioctl(fd, DAHDI_SETLINEAR, &x)) {			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));			close(fd);			goto outrun;		}
ioctl(fd, DAHDI_SETLINEAR, &x)
ioctl
ioctl
fd
fd
DAHDI_SETLINEAR
DAHDI_SETLINEAR
&x
x
x
{			ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));			close(fd);			goto outrun;		}
ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno));
ast_log(LOG_WARNING, "Unable to set linear mode: %s\n", strerror(errno))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to set linear mode: %s\n"
strerror(errno)
strerror
strerror
errno
errno
close(fd);
close(fd)
close
close
fd
fd
goto outrun;
outrun
nfds = 1;
nfds = 1
nfds
nfds
1
{		/* XXX Make sure we're not running on a pseudo channel XXX */		fd = ast_channel_fd(chan, 0);		nfds = 0;	}
fd = ast_channel_fd(chan, 0);
fd = ast_channel_fd(chan, 0)
fd
fd
ast_channel_fd(chan, 0)
ast_channel_fd
ast_channel_fd
chan
chan
0
nfds = 0;
nfds = 0
nfds
nfds
0
memset(&dahdic, 0, sizeof(dahdic));
memset(&dahdic, 0, sizeof(dahdic))
memset
memset
&dahdic
dahdic
dahdic
0
sizeof(dahdic)
(dahdic)
dahdic
dahdic
memset(&dahdic_empty, 0, sizeof(dahdic_empty));
memset(&dahdic_empty, 0, sizeof(dahdic_empty))
memset
memset
&dahdic_empty
dahdic_empty
dahdic_empty
0
sizeof(dahdic_empty)
(dahdic_empty)
dahdic_empty
dahdic_empty
dahdic.chan = 0;
dahdic.chan = 0
dahdic.chan
dahdic
dahdic
chan
0
if (ioctl(fd, DAHDI_GETCONF, &dahdic)) {		ast_log(LOG_WARNING, "Error getting conference\n");		close(fd);		goto outrun;	}
ioctl(fd, DAHDI_GETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_GETCONF
DAHDI_GETCONF
&dahdic
dahdic
dahdic
{		ast_log(LOG_WARNING, "Error getting conference\n");		close(fd);		goto outrun;	}
ast_log(LOG_WARNING, "Error getting conference\n");
ast_log(LOG_WARNING, "Error getting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error getting conference\n"
close(fd);
close(fd)
close
close
fd
fd
goto outrun;
outrun
if (dahdic.confmode) {		/* Whoa, already in a conference...  Retry... */		if (!retrydahdi) {			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");			retrydahdi = 1;			goto dahdiretry;		}	}
dahdic.confmode
dahdic
dahdic
confmode
{		/* Whoa, already in a conference...  Retry... */		if (!retrydahdi) {			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");			retrydahdi = 1;			goto dahdiretry;		}	}
if (!retrydahdi) {			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");			retrydahdi = 1;			goto dahdiretry;		}
!retrydahdi
retrydahdi
retrydahdi
{			ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");			retrydahdi = 1;			goto dahdiretry;		}
ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n");
ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\n")
ast_debug
ast_debug
1
"DAHDI channel is in a conference already, retrying with pseudo\n"
retrydahdi = 1;
retrydahdi = 1
retrydahdi
retrydahdi
1
goto dahdiretry;
dahdiretry
memset(&dahdic, 0, sizeof(dahdic));
memset(&dahdic, 0, sizeof(dahdic))
memset
memset
&dahdic
dahdic
dahdic
0
sizeof(dahdic)
(dahdic)
dahdic
dahdic
dahdic.chan = 0;
dahdic.chan = 0
dahdic.chan
dahdic
dahdic
chan
0
dahdic.confno = conf->dahdiconf;
dahdic.confno = conf->dahdiconf
dahdic.confno
dahdic
dahdic
confno
conf->dahdiconf
conf
conf
dahdiconf
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)) && conf->users > 1) {		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		item->announcetype = CONF_HASJOIN;		ast_mutex_lock(&conf->announcelistlock);		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {			;		}		ao2_ref(item, -1);	}
!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)) && conf->users > 1
!ast_test_flag64(confflags, CONFFLAG_QUIET) && (ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC))
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
(ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC))
ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW) || ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64(confflags, CONFFLAG_INTROUSER) ||			ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
ast_test_flag64(confflags, CONFFLAG_INTROUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER
CONFFLAG_INTROUSER
ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSERNOREVIEW
ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
conf->users > 1
conf->users
conf
conf
users
1
{		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		item->announcetype = CONF_HASJOIN;		ast_mutex_lock(&conf->announcelistlock);		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {			;		}		ao2_ref(item, -1);	}
struct announce_listitem *item;
struct announce_listitem *item;
struct announce_listitem
announce_listitem
*item
*
item
if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;
!(item = ao2_alloc(sizeof(*item), NULL))
(item = ao2_alloc(sizeof(*item), NULL))
item = ao2_alloc(sizeof(*item), NULL)
item
item
ao2_alloc(sizeof(*item), NULL)
ao2_alloc
ao2_alloc
sizeof(*item)
(*item)
*item
item
item
NULL
NULL
goto outrun;
outrun
ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc))
ast_copy_string
ast_copy_string
item->namerecloc
item
item
namerecloc
user->namerecloc
user
user
namerecloc
sizeof(item->namerecloc)
(item->namerecloc)
item->namerecloc
item
item
namerecloc
ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));
ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language))
ast_copy_string
ast_copy_string
item->language
item
item
language
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
sizeof(item->language)
(item->language)
item->language
item
item
language
item->confchan = conf->chan;
item->confchan = conf->chan
item->confchan
item
item
confchan
conf->chan
conf
conf
chan
item->confusers = conf->users;
item->confusers = conf->users
item->confusers
item
item
confusers
conf->users
conf
conf
users
if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}
ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
{			item->vmrec = 1;		}
item->vmrec = 1;
item->vmrec = 1
item->vmrec
item
item
vmrec
1
item->announcetype = CONF_HASJOIN;
item->announcetype = CONF_HASJOIN
item->announcetype
item
item
announcetype
CONF_HASJOIN
CONF_HASJOIN
ast_mutex_lock(&conf->announcelistlock);
ast_mutex_lock(&conf->announcelistlock)
ast_mutex_lock
ast_mutex_lock
&conf->announcelistlock
conf->announcelistlock
conf
conf
announcelistlock
ao2_ref(item, +1);
ao2_ref(item, +1)
ao2_ref
ao2_ref
item
item
+1
1
AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry)
AST_LIST_INSERT_TAIL
AST_LIST_INSERT_TAIL
&conf->announcelist
conf->announcelist
conf
conf
announcelist
item
item
entry
entry
ast_cond_signal(&conf->announcelist_addition);
ast_cond_signal(&conf->announcelist_addition)
ast_cond_signal
ast_cond_signal
&conf->announcelist_addition
conf->announcelist_addition
conf
conf
announcelist_addition
ast_mutex_unlock(&conf->announcelistlock);
ast_mutex_unlock(&conf->announcelistlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->announcelistlock
conf->announcelistlock
conf
conf
announcelistlock
while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {			;		}
!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)
!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2
!ast_check_hangup(conf->chan)
ast_check_hangup(conf->chan)
ast_check_hangup
ast_check_hangup
conf->chan
conf
conf
chan
ao2_ref(item, 0) == 2
ao2_ref(item, 0)
ao2_ref
ao2_ref
item
item
0
2
!ast_safe_sleep(chan, 1000)
ast_safe_sleep(chan, 1000)
ast_safe_sleep
ast_safe_sleep
chan
chan
1000
{			;		}
;
ao2_ref(item, -1);
ao2_ref(item, -1)
ao2_ref
ao2_ref
item
item
-1
1
if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && !conf->markedusers)		dahdic.confmode = DAHDI_CONF_CONF;	else if (ast_test_flag64(confflags, CONFFLAG_MONITOR))		dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;	else if (ast_test_flag64(confflags, CONFFLAG_TALKER))		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;	else		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && !conf->markedusers
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
!conf->markedusers
conf->markedusers
conf
conf
markedusers
dahdic.confmode = DAHDI_CONF_CONF;
dahdic.confmode = DAHDI_CONF_CONF
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONF
DAHDI_CONF_CONF
if (ast_test_flag64(confflags, CONFFLAG_MONITOR))		dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;	else if (ast_test_flag64(confflags, CONFFLAG_TALKER))		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;	else		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;
dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER
DAHDI_CONF_CONFMON
DAHDI_CONF_CONFMON
DAHDI_CONF_LISTENER
DAHDI_CONF_LISTENER
if (ast_test_flag64(confflags, CONFFLAG_TALKER))		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;	else		dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
ast_test_flag64(confflags, CONFFLAG_TALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_TALKER
CONFFLAG_TALKER
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONF | DAHDI_CONF_TALKER
DAHDI_CONF_CONF
DAHDI_CONF_CONF
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER
DAHDI_CONF_CONF | DAHDI_CONF_TALKER
DAHDI_CONF_CONF
DAHDI_CONF_CONF
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
DAHDI_CONF_LISTENER
DAHDI_CONF_LISTENER
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {		ast_log(LOG_WARNING, "Error setting conference\n");		close(fd);		goto outrun;	}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{		ast_log(LOG_WARNING, "Error setting conference\n");		close(fd);		goto outrun;	}
ast_log(LOG_WARNING, "Error setting conference\n");
ast_log(LOG_WARNING, "Error setting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference\n"
close(fd);
close(fd)
close
close
fd
fd
goto outrun;
outrun
ast_debug(1, "Placed channel %s in DAHDI conf %d\n", ast_channel_name(chan), conf->dahdiconf);
ast_debug(1, "Placed channel %s in DAHDI conf %d\n", ast_channel_name(chan), conf->dahdiconf)
ast_debug
ast_debug
1
"Placed channel %s in DAHDI conf %d\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
conf->dahdiconf
conf
conf
dahdiconf
if (!sent_event) {		/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user joins a MeetMe conference.</synopsis>				<syntax>					<parameter name="Meetme">						<para>The identifier for the MeetMe conference.</para>					</parameter>					<parameter name="Usernum">						<para>The identifier of the MeetMe user who joined.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeLeave</ref>					<ref type="application">MeetMe</ref>				</see-also>			</managerEventInstance>		***/		ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",			"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n",			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,			user->user_no,			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")			);		sent_event = 1;	}
!sent_event
sent_event
sent_event
{		/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user joins a MeetMe conference.</synopsis>				<syntax>					<parameter name="Meetme">						<para>The identifier for the MeetMe conference.</para>					</parameter>					<parameter name="Usernum">						<para>The identifier of the MeetMe user who joined.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeLeave</ref>					<ref type="application">MeetMe</ref>				</see-also>			</managerEventInstance>		***/		ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",			"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n",			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,			user->user_no,			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")			);		sent_event = 1;	}
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",			"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n",			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,			user->user_no,			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")			);
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",			"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n",			ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,			user->user_no,			S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),			S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")			)
ast_manager_event
ast_manager_event
chan
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"MeetmeJoin"
"Channel: %s\r\n"			"Uniqueid: %s\r\n"			"Meetme: %s\r\n"			"Usernum: %d\r\n"			"CallerIDnum: %s\r\n"			"CallerIDname: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>")
S_COR
S_COR
ast_channel_caller(user->chan)->id.number.valid
ast_channel_caller(user->chan)->id.number
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
number
valid
ast_channel_caller(user->chan)->id.number.str
ast_channel_caller(user->chan)->id.number
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
number
str
"<unknown>"
S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>")
S_COR
S_COR
ast_channel_caller(user->chan)->id.name.valid
ast_channel_caller(user->chan)->id.name
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
name
valid
ast_channel_caller(user->chan)->id.name.str
ast_channel_caller(user->chan)->id.name
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
name
str
"<unknown>"
S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>")
S_COR
S_COR
ast_channel_connected(user->chan)->id.number.valid
ast_channel_connected(user->chan)->id.number
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
number
valid
ast_channel_connected(user->chan)->id.number.str
ast_channel_connected(user->chan)->id.number
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
number
str
"<unknown>"
S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")
S_COR
S_COR
ast_channel_connected(user->chan)->id.name.valid
ast_channel_connected(user->chan)->id.name
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
name
valid
ast_channel_connected(user->chan)->id.name.str
ast_channel_connected(user->chan)->id.name
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
name
str
"<unknown>"
sent_event = 1;
sent_event = 1
sent_event
sent_event
1
if (!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {		firstpass = 1;		if (!ast_test_flag64(confflags, CONFFLAG_QUIET))			if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))) {				conf_play(chan, conf, ENTER);			}	}
!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)
!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR)
!firstpass
firstpass
firstpass
!ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
!ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_ADMIN
CONFFLAG_ADMIN
{		firstpass = 1;		if (!ast_test_flag64(confflags, CONFFLAG_QUIET))			if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))) {				conf_play(chan, conf, ENTER);			}	}
firstpass = 1;
firstpass = 1
firstpass
firstpass
1
if (!ast_test_flag64(confflags, CONFFLAG_QUIET))			if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))) {				conf_play(chan, conf, ENTER);			}
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
if (!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))) {				conf_play(chan, conf, ENTER);			}
!ast_test_flag64(confflags, CONFFLAG_WAITMARKED) || (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))
!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
(ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1))
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&				(conf->markedusers >= 1)
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDUSER
CONFFLAG_MARKEDUSER
(conf->markedusers >= 1)
conf->markedusers >= 1
conf->markedusers
conf
conf
markedusers
1
{				conf_play(chan, conf, ENTER);			}
conf_play(chan, conf, ENTER);
conf_play(chan, conf, ENTER)
conf_play
conf_play
chan
chan
conf
conf
ENTER
ENTER
conf_flush(fd, chan);
conf_flush(fd, chan)
conf_flush
conf_flush
fd
fd
chan
chan
if (dsp)		ast_dsp_free(dsp);
dsp
dsp
ast_dsp_free(dsp);
ast_dsp_free(dsp)
ast_dsp_free
ast_dsp_free
dsp
dsp
if (!(dsp = ast_dsp_new())) {		ast_log(LOG_WARNING, "Unable to allocate DSP!\n");		res = -1;	}
!(dsp = ast_dsp_new())
(dsp = ast_dsp_new())
dsp = ast_dsp_new()
dsp
dsp
ast_dsp_new()
ast_dsp_new
ast_dsp_new
{		ast_log(LOG_WARNING, "Unable to allocate DSP!\n");		res = -1;	}
ast_log(LOG_WARNING, "Unable to allocate DSP!\n");
ast_log(LOG_WARNING, "Unable to allocate DSP!\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to allocate DSP!\n"
res = -1;
res = -1
res
res
-1
1
if (ast_test_flag64(confflags, CONFFLAG_AGI)) {		/* Get name of AGI file to run from $(MEETME_AGI_BACKGROUND)		   or use default filename of conf-background.agi */		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))) {			agifile = ast_strdupa(tmpvar);		} else {			agifile = ast_strdupa(agifiledefault);		}		ast_channel_unlock(chan);		if (user->dahdichannel) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		/* Find a pointer to the agi app and execute the script */		agi_app = pbx_findapp("agi");		if (agi_app) {			ret = pbx_exec(chan, agi_app, agifile);		} else {			ast_log(LOG_WARNING, "Could not find application (agi)\n");			ret = -2;		}		if (user->dahdichannel) {			/*  Remove CONFMUTE mode on DAHDI channel */			x = 0;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}	} else {		int lastusers = conf->users;		if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		for (;;) {			int menu_was_active = 0;			outfd = -1;			ms = -1;			now = ast_tvnow();			if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			} 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			} 			to = -1; 			if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}			now = ast_tvnow();			if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* if we have just exited from the menu, and the user had a channel-driver			   volume adjustment, restore it			*/			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}			menu_was_active = menu_active;			currentmarked = conf->markedusers;			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}			/* Update the struct with the actual confflags */			user->userflags = *confflags;			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}			/* trying to add moh for single person conf */			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}			/* Leave if the last marked user left */			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */			if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}			/* Check if my modes have changed */			/* If I should be muted but am still talker, mute me */			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If I should be un-muted but am not talker, un-mute me */			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If user have been hung up, exit the conference */			if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}			/* If I have been kicked, exit the conference */			if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */			if (ast_check_hangup(chan)) {				break;			}			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);			if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}			lastmarked = currentmarked;		}	}
ast_test_flag64(confflags, CONFFLAG_AGI)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_AGI
CONFFLAG_AGI
{		/* Get name of AGI file to run from $(MEETME_AGI_BACKGROUND)		   or use default filename of conf-background.agi */		ast_channel_lock(chan);		if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))) {			agifile = ast_strdupa(tmpvar);		} else {			agifile = ast_strdupa(agifiledefault);		}		ast_channel_unlock(chan);		if (user->dahdichannel) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		/* Find a pointer to the agi app and execute the script */		agi_app = pbx_findapp("agi");		if (agi_app) {			ret = pbx_exec(chan, agi_app, agifile);		} else {			ast_log(LOG_WARNING, "Could not find application (agi)\n");			ret = -2;		}		if (user->dahdichannel) {			/*  Remove CONFMUTE mode on DAHDI channel */			x = 0;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}	}
ast_channel_lock(chan);
ast_channel_lock(chan)
ast_channel_lock
ast_channel_lock
chan
chan
if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))) {			agifile = ast_strdupa(tmpvar);		} else {			agifile = ast_strdupa(agifiledefault);		}
(tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND"))
tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND")
tmpvar
tmpvar
pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"MEETME_AGI_BACKGROUND"
{			agifile = ast_strdupa(tmpvar);		}
agifile = ast_strdupa(tmpvar);
agifile = ast_strdupa(tmpvar)
agifile
agifile
ast_strdupa(tmpvar)
ast_strdupa
ast_strdupa
tmpvar
tmpvar
{			agifile = ast_strdupa(agifiledefault);		}
agifile = ast_strdupa(agifiledefault);
agifile = ast_strdupa(agifiledefault)
agifile
agifile
ast_strdupa(agifiledefault)
ast_strdupa
ast_strdupa
agifiledefault
agifiledefault
ast_channel_unlock(chan);
ast_channel_unlock(chan)
ast_channel_unlock
ast_channel_unlock
chan
chan
if (user->dahdichannel) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}
user->dahdichannel
user
user
dahdichannel
{			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}
x = 1;
x = 1
x
x
1
ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);
ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0)
ast_channel_setoption
ast_channel_setoption
chan
chan
AST_OPTION_TONE_VERIFY
AST_OPTION_TONE_VERIFY
&x
x
x
sizeof(char)
char
char

0
agi_app = pbx_findapp("agi");
agi_app = pbx_findapp("agi")
agi_app
agi_app
pbx_findapp("agi")
pbx_findapp
pbx_findapp
"agi"
if (agi_app) {			ret = pbx_exec(chan, agi_app, agifile);		} else {			ast_log(LOG_WARNING, "Could not find application (agi)\n");			ret = -2;		}
agi_app
agi_app
{			ret = pbx_exec(chan, agi_app, agifile);		}
ret = pbx_exec(chan, agi_app, agifile);
ret = pbx_exec(chan, agi_app, agifile)
ret
ret
pbx_exec(chan, agi_app, agifile)
pbx_exec
pbx_exec
chan
chan
agi_app
agi_app
agifile
agifile
{			ast_log(LOG_WARNING, "Could not find application (agi)\n");			ret = -2;		}
ast_log(LOG_WARNING, "Could not find application (agi)\n");
ast_log(LOG_WARNING, "Could not find application (agi)\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Could not find application (agi)\n"
ret = -2;
ret = -2
ret
ret
-2
2
if (user->dahdichannel) {			/*  Remove CONFMUTE mode on DAHDI channel */			x = 0;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}
user->dahdichannel
user
user
dahdichannel
{			/*  Remove CONFMUTE mode on DAHDI channel */			x = 0;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}
x = 0;
x = 0
x
x
0
ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);
ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0)
ast_channel_setoption
ast_channel_setoption
chan
chan
AST_OPTION_TONE_VERIFY
AST_OPTION_TONE_VERIFY
&x
x
x
sizeof(char)
char
char

0
{		int lastusers = conf->users;		if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}		for (;;) {			int menu_was_active = 0;			outfd = -1;			ms = -1;			now = ast_tvnow();			if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			} 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			} 			to = -1; 			if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}			now = ast_tvnow();			if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* if we have just exited from the menu, and the user had a channel-driver			   volume adjustment, restore it			*/			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}			menu_was_active = menu_active;			currentmarked = conf->markedusers;			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}			/* Update the struct with the actual confflags */			user->userflags = *confflags;			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}			/* trying to add moh for single person conf */			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}			/* Leave if the last marked user left */			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */			if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}			/* Check if my modes have changed */			/* If I should be muted but am still talker, mute me */			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If I should be un-muted but am not talker, un-mute me */			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If user have been hung up, exit the conference */			if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}			/* If I have been kicked, exit the conference */			if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */			if (ast_check_hangup(chan)) {				break;			}			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);			if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}			lastmarked = currentmarked;		}	}
int lastusers = conf->users;
int lastusers = conf->users;
int
lastusers = conf->users
lastusers
= conf->users
conf->users
conf
conf
users
if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)) {			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}
user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)
user->dahdichannel
user
user
dahdichannel
ast_test_flag64(confflags, CONFFLAG_STARMENU)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_STARMENU
CONFFLAG_STARMENU
{			/*  Set CONFMUTE mode on DAHDI channel to mute DTMF tones when the menu is enabled */			x = 1;			ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);		}
x = 1;
x = 1
x
x
1
ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0);
ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char), 0)
ast_channel_setoption
ast_channel_setoption
chan
chan
AST_OPTION_TONE_VERIFY
AST_OPTION_TONE_VERIFY
&x
x
x
sizeof(char)
char
char

0
for (;;) {			int menu_was_active = 0;			outfd = -1;			ms = -1;			now = ast_tvnow();			if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			} 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			} 			to = -1; 			if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}			now = ast_tvnow();			if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* if we have just exited from the menu, and the user had a channel-driver			   volume adjustment, restore it			*/			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}			menu_was_active = menu_active;			currentmarked = conf->markedusers;			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}			/* Update the struct with the actual confflags */			user->userflags = *confflags;			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}			/* trying to add moh for single person conf */			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}			/* Leave if the last marked user left */			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */			if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}			/* Check if my modes have changed */			/* If I should be muted but am still talker, mute me */			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If I should be un-muted but am not talker, un-mute me */			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If user have been hung up, exit the conference */			if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}			/* If I have been kicked, exit the conference */			if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */			if (ast_check_hangup(chan)) {				break;			}			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);			if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}			lastmarked = currentmarked;		}
;
{			int menu_was_active = 0;			outfd = -1;			ms = -1;			now = ast_tvnow();			if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			} 			if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			} 			to = -1; 			if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}			now = ast_tvnow();			if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* if we have just exited from the menu, and the user had a channel-driver			   volume adjustment, restore it			*/			if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}			menu_was_active = menu_active;			currentmarked = conf->markedusers;			if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}			/* Update the struct with the actual confflags */			user->userflags = *confflags;			if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}			/* trying to add moh for single person conf */			if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}			/* Leave if the last marked user left */			if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}			/* Throw a TestEvent if a user exit did not cause this user to leave the conference */			if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}			/* Check if my modes have changed */			/* If I should be muted but am still talker, mute me */			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If I should be un-muted but am not talker, un-mute me */			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}			/* If user have been hung up, exit the conference */			if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}			/* If I have been kicked, exit the conference */			if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}			/* Perform a hangup check here since ast_waitfor_nandfds will not always be able to get a channel after a hangup has occurred */			if (ast_check_hangup(chan)) {				break;			}			c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);			if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}			lastmarked = currentmarked;		}
int menu_was_active = 0;
int menu_was_active = 0;
int
menu_was_active = 0
menu_was_active
= 0
0
outfd = -1;
outfd = -1
outfd
outfd
-1
1
ms = -1;
ms = -1
ms
ms
-1
1
now = ast_tvnow();
now = ast_tvnow()
now
now
ast_tvnow()
ast_tvnow
ast_tvnow
if (rt_schedule && conf->endtime) {				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			}
rt_schedule && conf->endtime
rt_schedule
rt_schedule
conf->endtime
conf
conf
endtime
{				char currenttime[32];				long localendtime = 0;				int extended = 0;				struct ast_tm tm;				struct ast_variable *var, *origvar;				struct timeval tmp;				if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}			}
char currenttime[32];
char currenttime[32];
char
currenttime[32]
currenttime
[32]
32
long localendtime = 0;
long localendtime = 0;
long
localendtime = 0
localendtime
= 0
0
int extended = 0;
int extended = 0;
int
extended = 0
extended
= 0
0
struct ast_tm tm;
struct ast_tm tm;
struct ast_tm
ast_tm
tm
tm
struct ast_variable *var, *origvar;
struct ast_variable *var, *origvar;
struct ast_variable
ast_variable
*var
*
var
*origvar
*
origvar
struct timeval tmp;
struct timeval tmp;
struct timeval
timeval
tmp
tmp
if (now.tv_sec % 60 == 0) {					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				} else {					checked = 0;				}
now.tv_sec % 60 == 0
now.tv_sec % 60
now.tv_sec
now
now
tv_sec
60
0
{					if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}				}
if (!checked) {						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}
!checked
checked
checked
{						ast_localtime(&now, &tm, NULL);						ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);						var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);						for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}						ast_variables_destroy(origvar);						/* A conference can be extended from the						   Admin/User menu or by an external source */						if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}						if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}						if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}						if (extended) {							announcement_played = 0;						}						checked = 1;					}
ast_localtime(&now, &tm, NULL);
ast_localtime(&now, &tm, NULL)
ast_localtime
ast_localtime
&now
now
now
&tm
tm
tm
NULL
NULL
ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm);
ast_strftime(currenttime, sizeof(currenttime), DATE_FORMAT, &tm)
ast_strftime
ast_strftime
currenttime
currenttime
sizeof(currenttime)
(currenttime)
currenttime
currenttime
DATE_FORMAT
DATE_FORMAT
&tm
tm
tm
var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL);
var = origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL)
var
var
origvar = ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL)
origvar
origvar
ast_load_realtime("meetme", "confno",							conf->confno, "starttime <=", currenttime,							 "endtime >=", currenttime, NULL)
ast_load_realtime
ast_load_realtime
"meetme"
"confno"
conf->confno
conf
conf
confno
"starttime <="
currenttime
currenttime
"endtime >="
currenttime
currenttime
NULL
NULL
for ( ; var; var = var->next) {							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}
;
var
var
var = var->next
var
var
var->next
var
var
next
{							if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}						}
if (!strcasecmp(var->name, "endtime")) {								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}
!strcasecmp(var->name, "endtime")
strcasecmp(var->name, "endtime")
strcasecmp
strcasecmp
var->name
var
var
name
"endtime"
{								struct ast_tm endtime_tm;								ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);								tmp = ast_mktime(&endtime_tm, NULL);								localendtime = tmp.tv_sec;							}
struct ast_tm endtime_tm;
struct ast_tm endtime_tm;
struct ast_tm
ast_tm
endtime_tm
endtime_tm
ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm);
ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm)
ast_strptime
ast_strptime
var->value
var
var
value
"%Y-%m-%d %H:%M:%S"
&endtime_tm
endtime_tm
endtime_tm
tmp = ast_mktime(&endtime_tm, NULL);
tmp = ast_mktime(&endtime_tm, NULL)
tmp
tmp
ast_mktime(&endtime_tm, NULL)
ast_mktime
ast_mktime
&endtime_tm
endtime_tm
endtime_tm
NULL
NULL
localendtime = tmp.tv_sec;
localendtime = tmp.tv_sec
localendtime
localendtime
tmp.tv_sec
tmp
tmp
tv_sec
ast_variables_destroy(origvar);
ast_variables_destroy(origvar)
ast_variables_destroy
ast_variables_destroy
origvar
origvar
if (localendtime > conf->endtime){							conf->endtime = localendtime;							extended = 1;						}
localendtime > conf->endtime
localendtime
localendtime
conf->endtime
conf
conf
endtime
{							conf->endtime = localendtime;							extended = 1;						}
conf->endtime = localendtime;
conf->endtime = localendtime
conf->endtime
conf
conf
endtime
localendtime
localendtime
extended = 1;
extended = 1
extended
extended
1
if (conf->endtime && (now.tv_sec >= conf->endtime)) {							ast_verbose("Quitting time...\n");							goto outrun;						}
conf->endtime && (now.tv_sec >= conf->endtime)
conf->endtime
conf
conf
endtime
(now.tv_sec >= conf->endtime)
now.tv_sec >= conf->endtime
now.tv_sec
now
now
tv_sec
conf->endtime
conf
conf
endtime
{							ast_verbose("Quitting time...\n");							goto outrun;						}
ast_verbose("Quitting time...\n");
ast_verbose("Quitting time...\n")
ast_verbose
ast_verbose
"Quitting time...\n"
goto outrun;
outrun
if (!announcement_played && conf->endalert) {							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}
!announcement_played && conf->endalert
!announcement_played
announcement_played
announcement_played
conf->endalert
conf
conf
endalert
{							if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}						}
if (now.tv_sec + conf->endalert >= conf->endtime) {								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}
now.tv_sec + conf->endalert >= conf->endtime
now.tv_sec + conf->endalert
now.tv_sec
now
now
tv_sec
conf->endalert
conf
conf
endalert
conf->endtime
conf
conf
endtime
{								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");								if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}								announcement_played = 1;							}
if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))									ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan))
ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-will-end-in"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));
ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan))
ast_say_digits
ast_say_digits
chan
chan
(conf->endtime - now.tv_sec) / 60
(conf->endtime - now.tv_sec)
conf->endtime - now.tv_sec
conf->endtime
conf
conf
endtime
now.tv_sec
now
now
tv_sec
60
""
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))									ast_waitstream(chan, "");
!ast_streamfile(chan, "minutes", ast_channel_language(chan))
ast_streamfile(chan, "minutes", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"minutes"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (musiconhold) {									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}
musiconhold
musiconhold
{									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
announcement_played = 1;
announcement_played = 1
announcement_played
announcement_played
1
if (extended) {							announcement_played = 0;						}
extended
extended
{							announcement_played = 0;						}
announcement_played = 0;
announcement_played = 0
announcement_played
announcement_played
0
checked = 1;
checked = 1
checked
checked
1
{					checked = 0;				}
checked = 0;
checked = 0
checked
checked
0
if (user->kicktime && (user->kicktime <= now.tv_sec)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}
user->kicktime && (user->kicktime <= now.tv_sec)
user->kicktime
user
user
kicktime
(user->kicktime <= now.tv_sec)
user->kicktime <= now.tv_sec
user->kicktime
user
user
kicktime
now.tv_sec
now
now
tv_sec
{				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}
if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}
ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KICK_CONTINUE
CONFFLAG_KICK_CONTINUE
{					ret = 0;				}
ret = 0;
ret = 0
ret
ret
0
{					ret = -1;				}
ret = -1;
ret = -1
ret
ret
-1
1
break;
to = -1;
to = -1
to
to
-1
1
if (user->timelimit) {				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}
user->timelimit
user
user
timelimit
{				int minutes = 0, seconds = 0, remain = 0; 				to = ast_tvdiff_ms(nexteventts, now); 				if (to < 0) { 					to = 0;				} 				time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time); 				if (time_left_ms < to) { 					to = time_left_ms;				} 				if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				} 				if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				} 			}
int minutes = 0, seconds = 0, remain = 0;
int minutes = 0, seconds = 0, remain = 0;
int
minutes = 0
minutes
= 0
0
seconds = 0
seconds
= 0
0
remain = 0
remain
= 0
0
to = ast_tvdiff_ms(nexteventts, now);
to = ast_tvdiff_ms(nexteventts, now)
to
to
ast_tvdiff_ms(nexteventts, now)
ast_tvdiff_ms
ast_tvdiff_ms
nexteventts
nexteventts
now
now
if (to < 0) { 					to = 0;				}
to < 0
to
to
0
{ 					to = 0;				}
to = 0;
to = 0
to
to
0
time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time);
time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time)
time_left_ms
time_left_ms
user->timelimit - ast_tvdiff_ms(now, user->start_time)
user->timelimit
user
user
timelimit
ast_tvdiff_ms(now, user->start_time)
ast_tvdiff_ms
ast_tvdiff_ms
now
now
user->start_time
user
user
start_time
if (time_left_ms < to) { 					to = time_left_ms;				}
time_left_ms < to
time_left_ms
time_left_ms
to
to
{ 					to = time_left_ms;				}
to = time_left_ms;
to = time_left_ms
to
to
time_left_ms
time_left_ms
if (time_left_ms <= 0) { 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				}
time_left_ms <= 0
time_left_ms
time_left_ms
0
{ 					if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					} 					break; 				}
if (user->end_sound) { 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}
user->end_sound
user
user
end_sound
{ 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)); 						res = ast_waitstream(chan, ""); 					}
res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan));
res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan))
res
res
ast_streamfile(chan, user->end_sound, ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
user->end_sound
user
user
end_sound
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
res = ast_waitstream(chan, "");
res = ast_waitstream(chan, "")
res
res
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {						ret = 0;					} else {						ret = -1;					}
ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KICK_CONTINUE
CONFFLAG_KICK_CONTINUE
{						ret = 0;					}
ret = 0;
ret = 0
ret
ret
0
{						ret = -1;					}
ret = -1;
ret = -1
ret
ret
-1
1
break;
if (!to) { 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				}
!to
to
to
{ 					if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					} 					if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					} 				}
if (time_left_ms >= 5000) { 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					}
time_left_ms >= 5000
time_left_ms
time_left_ms
5000
{ 						remain = (time_left_ms + 500) / 1000; 						if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						} 						/* force the time left to round up if appropriate */ 						if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						} 					}
remain = (time_left_ms + 500) / 1000;
remain = (time_left_ms + 500) / 1000
remain
remain
(time_left_ms + 500) / 1000
(time_left_ms + 500)
time_left_ms + 500
time_left_ms
time_left_ms
500
1000
if (remain / 60 >= 1) { 							minutes = remain / 60; 							seconds = remain % 60; 						} else { 							seconds = remain; 						}
remain / 60 >= 1
remain / 60
remain
remain
60
1
{ 							minutes = remain / 60; 							seconds = remain % 60; 						}
minutes = remain / 60;
minutes = remain / 60
minutes
minutes
remain / 60
remain
remain
60
seconds = remain % 60;
seconds = remain % 60
seconds
seconds
remain % 60
remain
remain
60
{ 							seconds = remain; 						}
seconds = remain;
seconds = remain
seconds
seconds
remain
remain
if (user->warning_sound && user->play_warning) { 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						}
user->warning_sound && user->play_warning
user->warning_sound
user
user
warning_sound
user->play_warning
user
user
play_warning
{ 							if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}							if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							} 						}
if (!strcmp(user->warning_sound, "timeleft")) { 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							} else { 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}
!strcmp(user->warning_sound, "timeleft")
strcmp(user->warning_sound, "timeleft")
strcmp
strcmp
user->warning_sound
user
user
warning_sound
"timeleft"
{ 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 								if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 								if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								} 							}
res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan));
res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan))
res
res
ast_streamfile(chan, "vm-youhave", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"vm-youhave"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
res = ast_waitstream(chan, "");
res = ast_waitstream(chan, "")
res
res
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (minutes) { 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								}
minutes
minutes
{ 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								}
res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
res
res
ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
ast_say_number
ast_say_number
chan
chan
minutes
minutes
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
(char *) NULL
char *
char
*
*
NULL
NULL
res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan));
res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan))
res
res
ast_streamfile(chan, "queue-minutes", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"queue-minutes"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
res = ast_waitstream(chan, "");
res = ast_waitstream(chan, "")
res
res
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (seconds) { 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								}
seconds
seconds
{ 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL); 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)); 									res = ast_waitstream(chan, ""); 								}
res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
res
res
ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
ast_say_number
ast_say_number
chan
chan
seconds
seconds
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
(char *) NULL
char *
char
*
*
NULL
NULL
res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan));
res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan))
res
res
ast_streamfile(chan, "queue-seconds", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"queue-seconds"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
res = ast_waitstream(chan, "");
res = ast_waitstream(chan, "")
res
res
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{ 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)); 								res = ast_waitstream(chan, ""); 							}
res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan));
res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan))
res
res
ast_streamfile(chan, user->warning_sound, ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
user->warning_sound
user
user
warning_sound
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
res = ast_waitstream(chan, "");
res = ast_waitstream(chan, "")
res
res
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (musiconhold) {								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							}
musiconhold
musiconhold
{								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);							}
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
if (user->warning_freq) { 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					} else { 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					}
user->warning_freq
user
user
warning_freq
{ 						nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)); 					}
nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000));
nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000))
nexteventts
nexteventts
ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000))
ast_tvadd
ast_tvadd
nexteventts
nexteventts
ast_samp2tv(user->warning_freq, 1000)
ast_samp2tv
ast_samp2tv
user->warning_freq
user
user
warning_freq
1000
{ 						nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));					}
nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000));
nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000))
nexteventts
nexteventts
ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000))
ast_tvadd
ast_tvadd
user->start_time
user
user
start_time
ast_samp2tv(user->timelimit, 1000)
ast_samp2tv
ast_samp2tv
user->timelimit
user
user
timelimit
1000
now = ast_tvnow();
now = ast_tvnow()
now
now
ast_tvnow()
ast_tvnow
ast_tvnow
if (timeout && now.tv_sec >= timeout) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}
timeout && now.tv_sec >= timeout
timeout
timeout
now.tv_sec >= timeout
now.tv_sec
now
now
tv_sec
timeout
timeout
{				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}
if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}
ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KICK_CONTINUE
CONFFLAG_KICK_CONTINUE
{					ret = 0;				}
ret = 0;
ret = 0
ret
ret
0
{					ret = -1;				}
ret = -1;
ret = -1
ret
ret
-1
1
break;
if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual) {				set_talk_volume(user, user->listen.desired);			}
!menu_active && menu_was_active && user->listen.desired && !user->listen.actual
!menu_active && menu_was_active && user->listen.desired
!menu_active && menu_was_active
!menu_active
menu_active
menu_active
menu_was_active
menu_was_active
user->listen.desired
user->listen
user
user
listen
desired
!user->listen.actual
user->listen.actual
user->listen
user
user
listen
actual
{				set_talk_volume(user, user->listen.desired);			}
set_talk_volume(user, user->listen.desired);
set_talk_volume(user, user->listen.desired)
set_talk_volume
set_talk_volume
user
user
user->listen.desired
user->listen
user
user
listen
desired
menu_was_active = menu_active;
menu_was_active = menu_active
menu_was_active
menu_was_active
menu_active
menu_active
currentmarked = conf->markedusers;
currentmarked = conf->markedusers
currentmarked
currentmarked
conf->markedusers
conf
conf
markedusers
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0) {				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}
!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&			    lastmarked == 0
!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER) &&			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
!ast_test_flag64(confflags, CONFFLAG_QUIET) &&			    ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDUSER
CONFFLAG_MARKEDUSER
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
lastmarked == 0
lastmarked
lastmarked
0
{				if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}			}
if (currentmarked == 1 && conf->users > 1) {					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}
currentmarked == 1 && conf->users > 1
currentmarked == 1
currentmarked
currentmarked
1
conf->users > 1
conf->users
conf
conf
users
1
{					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);					if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}				}
ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
ast_say_number
ast_say_number
chan
chan
conf->users - 1
conf->users
conf
conf
users
1
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
(char *) NULL
char *
char
*
*
NULL
NULL
if (conf->users - 1 == 1) {						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					} else {						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}
conf->users - 1 == 1
conf->users - 1
conf->users
conf
conf
users
1
1
{						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}
if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}
!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))
ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-userwilljoin"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{							ast_waitstream(chan, "");						}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}					}
if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}
!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))
ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-userswilljoin"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{							ast_waitstream(chan, "");						}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}
conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
conf->users == 1
conf->users
conf
conf
users
1
!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDUSER
CONFFLAG_MARKEDUSER
{					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}				}
if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {						ast_waitstream(chan, "");					}
!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-onlyperson"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{						ast_waitstream(chan, "");					}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
user->userflags = *confflags;
user->userflags = *confflags
user->userflags
user
user
userflags
*confflags
confflags
confflags
if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
{				if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}			}
if (currentmarked == 0) {					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}
currentmarked == 0
currentmarked
currentmarked
0
{					if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}					if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				}
if (lastmarked != 0) {						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}
lastmarked != 0
lastmarked
lastmarked
0
{						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}					}
if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
{							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}						}
if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {								ast_waitstream(chan, "");							}
!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))
ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-leaderhasleft"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{								ast_waitstream(chan, "");							}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						} else {							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}
ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDEXIT
CONFFLAG_MARKEDEXIT
{							if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}							break;						}
if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {								ret = 0;							}
ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KICK_CONTINUE
CONFFLAG_KICK_CONTINUE
{								ret = 0;							}
ret = 0;
ret = 0
ret
ret
0
break;
{							dahdic.confmode = DAHDI_CONF_CONF;							if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}						}
dahdic.confmode = DAHDI_CONF_CONF;
dahdic.confmode = DAHDI_CONF_CONF
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONF
DAHDI_CONF_CONF
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{								ast_log(LOG_WARNING, "Error setting conference\n");								close(fd);								goto outrun;							}
ast_log(LOG_WARNING, "Error setting conference\n");
ast_log(LOG_WARNING, "Error setting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference\n"
close(fd);
close(fd)
close
close
fd
fd
goto outrun;
outrun
if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}
!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))
!musiconhold
musiconhold
musiconhold
(ast_test_flag64(confflags, CONFFLAG_MOH))
ast_test_flag64(confflags, CONFFLAG_MOH)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MOH
CONFFLAG_MOH
{						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
musiconhold = 1;
musiconhold = 1
musiconhold
musiconhold
1
if (currentmarked >= 1 && lastmarked == 0) {					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}
currentmarked >= 1 && lastmarked == 0
currentmarked >= 1
currentmarked
currentmarked
1
lastmarked == 0
lastmarked
lastmarked
0
{					/* Marked user entered, so cancel timeout */					timeout = 0;					if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}					if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}				}
timeout = 0;
timeout = 0
timeout
timeout
0
if (ast_test_flag64(confflags, CONFFLAG_MONITOR)) {						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					} else if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
{						dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;					}
dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;
dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER
DAHDI_CONF_CONFMON
DAHDI_CONF_CONFMON
DAHDI_CONF_LISTENER
DAHDI_CONF_LISTENER
if (ast_test_flag64(confflags, CONFFLAG_TALKER)) {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					} else {						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}
ast_test_flag64(confflags, CONFFLAG_TALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_TALKER
CONFFLAG_TALKER
{						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;					}
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER;
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONF | DAHDI_CONF_TALKER
DAHDI_CONF_CONF
DAHDI_CONF_CONF
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
{						dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;					}
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER
DAHDI_CONF_CONF | DAHDI_CONF_TALKER
DAHDI_CONF_CONF
DAHDI_CONF_CONF
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
DAHDI_CONF_LISTENER
DAHDI_CONF_LISTENER
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						goto outrun;					}
ast_log(LOG_WARNING, "Error setting conference\n");
ast_log(LOG_WARNING, "Error setting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference\n"
close(fd);
close(fd)
close
close
fd
fd
goto outrun;
outrun
if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))) {						ast_moh_stop(chan);						musiconhold = 0;					}
musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH))
musiconhold
musiconhold
(ast_test_flag64(confflags, CONFFLAG_MOH))
ast_test_flag64(confflags, CONFFLAG_MOH)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MOH
CONFFLAG_MOH
{						ast_moh_stop(chan);						musiconhold = 0;					}
ast_moh_stop(chan);
ast_moh_stop(chan)
ast_moh_stop
ast_moh_stop
chan
chan
musiconhold = 0;
musiconhold = 0
musiconhold
musiconhold
0
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}
!ast_test_flag64(confflags, CONFFLAG_QUIET) &&						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDUSER
CONFFLAG_MARKEDUSER
{						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}						conf_play(chan, conf, ENTER);					}
if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {							ast_waitstream(chan, "");						}
!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))
ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-placeintoconf"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{							ast_waitstream(chan, "");						}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
conf_play(chan, conf, ENTER);
conf_play(chan, conf, ENTER)
conf_play
conf_play
chan
chan
conf
conf
ENTER
ENTER
if (ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}
ast_test_flag64(confflags, CONFFLAG_MOH) && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64(confflags, CONFFLAG_MOH)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MOH
CONFFLAG_MOH
!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_WAITMARKED
CONFFLAG_WAITMARKED
{				if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}			}
if (conf->users == 1) {					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				} else {					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}
conf->users == 1
conf->users
conf
conf
users
1
{					if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}				}
if (!musiconhold) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}
!musiconhold
musiconhold
musiconhold
{						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						musiconhold = 1;					}
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
musiconhold = 1;
musiconhold = 1
musiconhold
musiconhold
1
{					if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}				}
if (musiconhold) {						ast_moh_stop(chan);						musiconhold = 0;					}
musiconhold
musiconhold
{						ast_moh_stop(chan);						musiconhold = 0;					}
ast_moh_stop(chan);
ast_moh_stop(chan)
ast_moh_stop
ast_moh_stop
chan
chan
musiconhold = 0;
musiconhold = 0
musiconhold
musiconhold
0
if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}
currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
currentmarked == 0 && lastmarked != 0
currentmarked == 0
currentmarked
currentmarked
0
lastmarked != 0
lastmarked
lastmarked
0
ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDEXIT
CONFFLAG_MARKEDEXIT
{				if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}				break;			}
if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {					ret = 0;				} else {					ret = -1;				}
ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KICK_CONTINUE
CONFFLAG_KICK_CONTINUE
{					ret = 0;				}
ret = 0;
ret = 0
ret
ret
0
{					ret = -1;				}
ret = -1;
ret = -1
ret
ret
-1
1
break;
if (conf->users != lastusers) {				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}
conf->users != lastusers
conf->users
conf
conf
users
lastusers
lastusers
{				if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}				lastusers = conf->users;			}
if (conf->users < lastusers) {					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}
conf->users < lastusers
conf->users
conf
conf
users
lastusers
lastusers
{					ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);				}
ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users);
ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d", lastusers, conf->users)
ast_test_suite_event_notify
ast_test_suite_event_notify
"NOEXIT"
"Message: CONFFLAG_MARKEDEXIT\r\nLastUsers: %d\r\nUsers: %d"
lastusers
lastusers
conf->users
conf
conf
users
lastusers = conf->users;
lastusers = conf->users
lastusers
lastusers
conf->users
conf
conf
users
if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && (dahdic.confmode & DAHDI_CONF_TALKER)
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
(dahdic.confmode & DAHDI_CONF_TALKER)
dahdic.confmode & DAHDI_CONF_TALKER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
{				dahdic.confmode ^= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/* Indicate user is not talking anymore - change him to unmonitored state */				if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is muted.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
dahdic.confmode ^= DAHDI_CONF_TALKER;
dahdic.confmode ^= DAHDI_CONF_TALKER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}
ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");
ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference - Un/Mute \n"
ret = -1;
ret = -1
ret
ret
-1
1
break;
if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))) {					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}
ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER))
ast_test_flag64
ast_test_flag64
confflags
confflags
(CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER)
CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER
CONFFLAG_MONITORTALKER
CONFFLAG_MONITORTALKER
CONFFLAG_OPTIMIZETALKER
CONFFLAG_OPTIMIZETALKER
{					set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));				}
set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));
set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER))
set_user_talking
set_user_talking
chan
chan
conf
conf
user
user
-1
1
ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITORTALKER
CONFFLAG_MONITORTALKER
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no)
ast_manager_event
ast_manager_event
chan
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"MeetmeMute"
"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)) {				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) && !(dahdic.confmode & DAHDI_CONF_TALKER)
!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !ast_test_flag64(confflags, CONFFLAG_MONITOR)
!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
!ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
!(dahdic.confmode & DAHDI_CONF_TALKER)
(dahdic.confmode & DAHDI_CONF_TALKER)
dahdic.confmode & DAHDI_CONF_TALKER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
{				dahdic.confmode |= DAHDI_CONF_TALKER;				if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user is unmuted.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
dahdic.confmode |= DAHDI_CONF_TALKER;
dahdic.confmode |= DAHDI_CONF_TALKER
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_TALKER
DAHDI_CONF_TALKER
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");					ret = -1;					break;				}
ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");
ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference - Un/Mute \n"
ret = -1;
ret = -1
ret
ret
-1
1
break;
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no)
ast_manager_event
ast_manager_event
chan
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"MeetmeMute"
"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)) {				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST) && !(talkreq_manager)
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				(user->adminflags & ADMINFLAG_T_REQUEST)
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
(user->adminflags & ADMINFLAG_T_REQUEST)
user->adminflags & ADMINFLAG_T_REQUEST
user->adminflags
user
user
adminflags
ADMINFLAG_T_REQUEST
ADMINFLAG_T_REQUEST
!(talkreq_manager)
(talkreq_manager)
talkreq_manager
talkreq_manager
{				talkreq_manager = 1;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has started talking.</synopsis>					<syntax>						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />						<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />						<parameter name="Status">							<enumlist>								<enum name="on"/>								<enum name="off"/>							</enumlist>						</parameter>					</syntax>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
talkreq_manager = 1;
talkreq_manager = 1
talkreq_manager
talkreq_manager
1
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no)
ast_manager_event
ast_manager_event
chan
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"MeetmeTalkRequest"
"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: on\r\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)) {				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST) && (talkreq_manager)
!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) &&				!(user->adminflags & ADMINFLAG_T_REQUEST)
!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
!(user->adminflags & ADMINFLAG_T_REQUEST)
(user->adminflags & ADMINFLAG_T_REQUEST)
user->adminflags & ADMINFLAG_T_REQUEST
user->adminflags
user
user
adminflags
ADMINFLAG_T_REQUEST
ADMINFLAG_T_REQUEST
(talkreq_manager)
talkreq_manager
talkreq_manager
{				talkreq_manager = 0;				/*** DOCUMENTATION				<managerEventInstance>					<synopsis>Raised when a MeetMe user has finished talking.</synopsis>				</managerEventInstance>				***/				ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);			}
talkreq_manager = 0;
talkreq_manager = 0
talkreq_manager
talkreq_manager
0
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no);
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",					"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n",					ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno, user->user_no)
ast_manager_event
ast_manager_event
chan
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"MeetmeTalkRequest"
"Channel: %s\r\n"					"Uniqueid: %s\r\n"					"Meetme: %s\r\n"					"Usernum: %d\r\n"					"Status: off\r\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
if (user->adminflags & ADMINFLAG_HANGUP) {				ret = 0;				break;			}
user->adminflags & ADMINFLAG_HANGUP
user->adminflags
user
user
adminflags
ADMINFLAG_HANGUP
ADMINFLAG_HANGUP
{				ret = 0;				break;			}
ret = 0;
ret = 0
ret
ret
0
break;
if (user->adminflags & ADMINFLAG_KICKME) {				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}
user->adminflags & ADMINFLAG_KICKME
user->adminflags
user
user
adminflags
ADMINFLAG_KICKME
ADMINFLAG_KICKME
{				/* You have been kicked. */				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}				ret = 0;				break;			}
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {					ast_waitstream(chan, "");				}
!ast_test_flag64(confflags, CONFFLAG_QUIET) &&					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))
ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-kicked"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{					ast_waitstream(chan, "");				}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ret = 0;
ret = 0
ret
ret
0
break;
if (ast_check_hangup(chan)) {				break;			}
ast_check_hangup(chan)
ast_check_hangup
ast_check_hangup
chan
chan
{				break;			}
break;
c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms);
c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms)
c
c
ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms)
ast_waitfor_nandfds
ast_waitfor_nandfds
&chan
chan
chan
1
&fd
fd
fd
nfds
nfds
NULL
NULL
&outfd
outfd
outfd
&ms
ms
ms
if (c) {				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			} else if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}
c
c
{				char dtmfstr[2] = "";				if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}				if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}				if (!f) {					break;				}				if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}				if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}				ast_frfree(f);			}
char dtmfstr[2] = "";
char dtmfstr[2] = "";
char
dtmfstr[2] = ""
dtmfstr
[2]
2
= ""
""
if (ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))) {					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}
ast_channel_fd(c, 0) != origfd || (user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))
ast_channel_fd(c, 0) != origfd
ast_channel_fd(c, 0)
ast_channel_fd
ast_channel_fd
c
c
0
origfd
origfd
(user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c)))
user->dahdichannel && (ast_channel_audiohooks(c) || ast_channel_monitor(c))
user->dahdichannel
user
user
dahdichannel
(ast_channel_audiohooks(c) || ast_channel_monitor(c))
ast_channel_audiohooks(c) || ast_channel_monitor(c)
ast_channel_audiohooks(c)
ast_channel_audiohooks
ast_channel_audiohooks
c
c
ast_channel_monitor(c)
ast_channel_monitor
ast_channel_monitor
c
c
{					if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}					ast_debug(1, "Ooh, something swapped out under us, starting over\n");					retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);					user->dahdichannel = !retrydahdi;					goto dahdiretry;				}
if (using_pseudo) {						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}
using_pseudo
using_pseudo
{						/* Kill old pseudo */						close(fd);						using_pseudo = 0;					}
close(fd);
close(fd)
close
close
fd
fd
using_pseudo = 0;
using_pseudo = 0
using_pseudo
using_pseudo
0
ast_debug(1, "Ooh, something swapped out under us, starting over\n");
ast_debug(1, "Ooh, something swapped out under us, starting over\n")
ast_debug
ast_debug
1
"Ooh, something swapped out under us, starting over\n"
retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0);
retrydahdi = (strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0)
retrydahdi
retrydahdi
(strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0)
strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c)) ? 1 : 0
strcasecmp(ast_channel_tech(c)->type, "DAHDI") || (ast_channel_audiohooks(c) || ast_channel_monitor(c))
strcasecmp(ast_channel_tech(c)->type, "DAHDI")
strcasecmp
strcasecmp
ast_channel_tech(c)->type
ast_channel_tech(c)
ast_channel_tech
ast_channel_tech
c
c
type
"DAHDI"
(ast_channel_audiohooks(c) || ast_channel_monitor(c))
ast_channel_audiohooks(c) || ast_channel_monitor(c)
ast_channel_audiohooks(c)
ast_channel_audiohooks
ast_channel_audiohooks
c
c
ast_channel_monitor(c)
ast_channel_monitor
ast_channel_monitor
c
c
1
0
user->dahdichannel = !retrydahdi;
user->dahdichannel = !retrydahdi
user->dahdichannel
user
user
dahdichannel
!retrydahdi
retrydahdi
retrydahdi
goto dahdiretry;
dahdiretry
if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {					f = ast_read_noaudio(c);				} else {					f = ast_read(c);				}
ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
{					f = ast_read_noaudio(c);				}
f = ast_read_noaudio(c);
f = ast_read_noaudio(c)
f
f
ast_read_noaudio(c)
ast_read_noaudio
ast_read_noaudio
c
c
{					f = ast_read(c);				}
f = ast_read(c);
f = ast_read(c)
f
f
ast_read(c)
ast_read
ast_read
c
c
if (!f) {					break;				}
!f
f
f
{					break;				}
break;
if (f->frametype == AST_FRAME_DTMF) {					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}
f->frametype == AST_FRAME_DTMF
f->frametype
f
f
frametype
AST_FRAME_DTMF
AST_FRAME_DTMF
{					dtmfstr[0] = f->subclass.integer;					dtmfstr[1] = '\0';				}
dtmfstr[0] = f->subclass.integer;
dtmfstr[0] = f->subclass.integer
dtmfstr[0]
dtmfstr
dtmfstr
0
f->subclass.integer
f->subclass
f
f
subclass
integer
dtmfstr[1] = '\0';
dtmfstr[1] = '\0'
dtmfstr[1]
dtmfstr
dtmfstr
1
'\0'
if ((f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)) {					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				} else if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
(f->frametype == AST_FRAME_VOICE) && (f->subclass.format.id == AST_FORMAT_SLINEAR)
(f->frametype == AST_FRAME_VOICE)
f->frametype == AST_FRAME_VOICE
f->frametype
f
f
frametype
AST_FRAME_VOICE
AST_FRAME_VOICE
(f->subclass.format.id == AST_FORMAT_SLINEAR)
f->subclass.format.id == AST_FORMAT_SLINEAR
f->subclass.format.id
f->subclass.format
f->subclass
f
f
subclass
format
id
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
{					if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}					if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}					if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}				}
if (user->talk.actual) {						ast_frame_adjust_volume(f, user->talk.actual);					}
user->talk.actual
user->talk
user
user
talk
actual
{						ast_frame_adjust_volume(f, user->talk.actual);					}
ast_frame_adjust_volume(f, user->talk.actual);
ast_frame_adjust_volume(f, user->talk.actual)
ast_frame_adjust_volume
ast_frame_adjust_volume
f
f
user->talk.actual
user->talk
user
user
talk
actual
if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))) {						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}
ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER))
ast_test_flag64
ast_test_flag64
confflags
confflags
(CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER)
CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER
CONFFLAG_OPTIMIZETALKER
CONFFLAG_OPTIMIZETALKER
CONFFLAG_MONITORTALKER
CONFFLAG_MONITORTALKER
{						if (user->talking == -1) {							user->talking = 0;						}						res = ast_dsp_silence(dsp, f, &totalsilence);						if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}						if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}					}
if (user->talking == -1) {							user->talking = 0;						}
user->talking == -1
user->talking
user
user
talking
-1
1
{							user->talking = 0;						}
user->talking = 0;
user->talking = 0
user->talking
user
user
talking
0
res = ast_dsp_silence(dsp, f, &totalsilence);
res = ast_dsp_silence(dsp, f, &totalsilence)
res
res
ast_dsp_silence(dsp, f, &totalsilence)
ast_dsp_silence
ast_dsp_silence
dsp
dsp
f
f
&totalsilence
totalsilence
totalsilence
if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK) {							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}
!user->talking && totalsilence < MEETME_DELAYDETECTTALK
!user->talking
user->talking
user
user
talking
totalsilence < MEETME_DELAYDETECTTALK
totalsilence
totalsilence
MEETME_DELAYDETECTTALK
MEETME_DELAYDETECTTALK
{							set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}
set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));
set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER))
set_user_talking
set_user_talking
chan
chan
conf
conf
user
user
1
ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITORTALKER
CONFFLAG_MONITORTALKER
if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK) {							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}
user->talking && totalsilence > MEETME_DELAYDETECTENDTALK
user->talking
user
user
talking
totalsilence > MEETME_DELAYDETECTENDTALK
totalsilence
totalsilence
MEETME_DELAYDETECTENDTALK
MEETME_DELAYDETECTENDTALK
{							set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));						}
set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER));
set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER))
set_user_talking
set_user_talking
chan
chan
conf
conf
user
user
0
ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITORTALKER
CONFFLAG_MONITORTALKER
if (using_pseudo) {						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}
using_pseudo
using_pseudo
{						/* Absolutely do _not_ use careful_write here...						   it is important that we read data from the channel						   as fast as it arrives, and feed it into the conference.						   The buffering in the pseudo channel will take care of any						   timing differences, unless they are so drastic as to lose						   audio frames (in which case carefully writing would only						   have delayed the audio even further).						*/						/* As it turns out, we do want to use careful write.  We just						   don't want to block, but we do want to at least *try*						   to write out all the samples.						 */						if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}					}
if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)) {							careful_write(fd, f->data.ptr, f->datalen, 0);						}
user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
user->talking
user
user
talking
!ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_OPTIMIZETALKER
CONFFLAG_OPTIMIZETALKER
{							careful_write(fd, f->data.ptr, f->datalen, 0);						}
careful_write(fd, f->data.ptr, f->datalen, 0);
careful_write(fd, f->data.ptr, f->datalen, 0)
careful_write
careful_write
fd
fd
f->data.ptr
f->data
f
f
data
ptr
f->datalen
f
f
datalen
0
if (((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)) || ((f->frametype == AST_FRAME_DTMF) && menu_active)
((f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU))
(f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*') && ast_test_flag64(confflags, CONFFLAG_STARMENU)
(f->frametype == AST_FRAME_DTMF) && (f->subclass.integer == '*')
(f->frametype == AST_FRAME_DTMF)
f->frametype == AST_FRAME_DTMF
f->frametype
f
f
frametype
AST_FRAME_DTMF
AST_FRAME_DTMF
(f->subclass.integer == '*')
f->subclass.integer == '*'
f->subclass.integer
f->subclass
f
f
subclass
integer
'*'
ast_test_flag64(confflags, CONFFLAG_STARMENU)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_STARMENU
CONFFLAG_STARMENU
((f->frametype == AST_FRAME_DTMF) && menu_active)
(f->frametype == AST_FRAME_DTMF) && menu_active
(f->frametype == AST_FRAME_DTMF)
f->frametype == AST_FRAME_DTMF
f->frametype
f
f
frametype
AST_FRAME_DTMF
AST_FRAME_DTMF
menu_active
menu_active
{					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					/* if we are entering the menu, and the user has a channel-driver					   volume adjustment, clear it					*/					if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}					if (musiconhold) {						ast_moh_stop(chan);					}					if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}					if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}					if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}					conf_flush(fd, chan);				/*				 * Since options using DTMF could absorb DTMF meant for the				 * conference menu, we have to check them after the menu.				 */				}
if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}
ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_PASS_DTMF
CONFFLAG_PASS_DTMF
{						conf_queue_dtmf(conf, user, f);					}
conf_queue_dtmf(conf, user, f);
conf_queue_dtmf(conf, user, f)
conf_queue_dtmf
conf_queue_dtmf
conf
conf
user
user
f
f
if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}
ioctl(fd, DAHDI_SETCONF, &dahdic_empty)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic_empty
dahdic_empty
dahdic_empty
{						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}
ast_log(LOG_WARNING, "Error setting conference\n");
ast_log(LOG_WARNING, "Error setting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference\n"
close(fd);
close(fd)
close
close
fd
fd
ast_frfree(f);
ast_frfree(f)
ast_frfree
ast_frfree
f
f
goto outrun;
outrun
if (!menu_active && user->talk.desired && !user->talk.actual) {						set_talk_volume(user, 0);					}
!menu_active && user->talk.desired && !user->talk.actual
!menu_active && user->talk.desired
!menu_active
menu_active
menu_active
user->talk.desired
user->talk
user
user
talk
desired
!user->talk.actual
user->talk.actual
user->talk
user
user
talk
actual
{						set_talk_volume(user, 0);					}
set_talk_volume(user, 0);
set_talk_volume(user, 0)
set_talk_volume
set_talk_volume
user
user
0
if (musiconhold) {						ast_moh_stop(chan);					}
musiconhold
musiconhold
{						ast_moh_stop(chan);					}
ast_moh_stop(chan);
ast_moh_stop(chan)
ast_moh_stop
ast_moh_stop
chan
chan
if (menu8_active) {						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					} else if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}
menu8_active
menu8_active
{						/* *8 Submenu */						dtmf = f->subclass.integer;						if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}						menu8_active = 0;						menu_active = 0;					}
dtmf = f->subclass.integer;
dtmf = f->subclass.integer
dtmf
dtmf
f->subclass.integer
f->subclass
f
f
subclass
integer
if (dtmf > 0) {							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}
dtmf > 0
dtmf
dtmf
0
{							int keepplaying;							int playednamerec;							struct ao2_iterator user_iter;							struct ast_conf_user *usr = NULL;							switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}						}
int keepplaying;
int keepplaying;
int
keepplaying
keepplaying
int playednamerec;
int playednamerec;
int
playednamerec
playednamerec
struct ao2_iterator user_iter;
struct ao2_iterator user_iter;
struct ao2_iterator
ao2_iterator
user_iter
user_iter
struct ast_conf_user *usr = NULL;
struct ast_conf_user *usr = NULL;
struct ast_conf_user
ast_conf_user
*usr = NULL
*
usr
= NULL
NULL
NULL
switch(dtmf) {							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}
dtmf
dtmf
{							case '1': /* *81 Roll call */								keepplaying = 1;								playednamerec = 0;								if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}								user_iter = ao2_iterator_init(conf->usercontainer, 0);								while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}								ao2_iterator_destroy(&user_iter);								if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}								break;							case '2': /* *82 Eject all non-admins */								if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}								ast_stopstream(chan);								break;							case '3': /* *83 (Admin) mute/unmute all non-admins */								if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							case '4': /* *84 Record conference */								if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}								ast_stopstream(chan);								break;							default:								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");								ast_stopstream(chan);								break;							}
case '1':
'1'
keepplaying = 1;
keepplaying = 1
keepplaying
keepplaying
1
playednamerec = 0;
playednamerec = 0
playednamerec
playednamerec
0
if (conf->users == 1) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}
conf->users == 1
conf->users
conf
conf
users
1
{									if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}
if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
keepplaying
keepplaying
!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-onlyperson"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)											keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (conf->users == 2) {									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								} else {									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}
conf->users == 2
conf->users
conf
conf
users
2
{									if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}
if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))
keepplaying
keepplaying
!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))
ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-onlyone"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)											keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
{									if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}									if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}									if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}								}
if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))
keepplaying
keepplaying
!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))
ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-thereare"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)											keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (keepplaying) {										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}
keepplaying
keepplaying
{										res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);										if (res > 0)											keepplaying = 0;									}
res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
res
res
ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL)
ast_say_number
ast_say_number
chan
chan
conf->users - 1
conf->users
conf
conf
users
1
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
(char *) NULL
char *
char
*
*
NULL
NULL
if (res > 0)											keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))
keepplaying
keepplaying
!ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))
ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-otherinparty"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										res = ast_waitstream(chan, AST_DIGIT_ANY);										ast_stopstream(chan);										if (res > 0)											keepplaying = 0;									}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)											keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
user_iter = ao2_iterator_init(conf->usercontainer, 0);
user_iter = ao2_iterator_init(conf->usercontainer, 0)
user_iter
user_iter
ao2_iterator_init(conf->usercontainer, 0)
ao2_iterator_init
ao2_iterator_init
conf->usercontainer
conf
conf
usercontainer
0
while((usr = ao2_iterator_next(&user_iter))) {									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}
(usr = ao2_iterator_next(&user_iter))
usr = ao2_iterator_next(&user_iter)
usr
usr
ao2_iterator_next(&user_iter)
ao2_iterator_next
ao2_iterator_next
&user_iter
user_iter
user_iter
{									if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}									ao2_ref(usr, -1);								}
if (ast_fileexists(usr->namerecloc, NULL, NULL)) {										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}
ast_fileexists(usr->namerecloc, NULL, NULL)
ast_fileexists
ast_fileexists
usr->namerecloc
usr
usr
namerecloc
NULL
NULL
NULL
NULL
{										if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}										playednamerec = 1;									}
if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}
keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))
keepplaying
keepplaying
!ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))
ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
usr->namerecloc
usr
usr
namerecloc
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{											res = ast_waitstream(chan, AST_DIGIT_ANY);											ast_stopstream(chan);											if (res > 0)												keepplaying = 0;										}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)												keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
playednamerec = 1;
playednamerec = 1
playednamerec
playednamerec
1
ao2_ref(usr, -1);
ao2_ref(usr, -1)
ao2_ref
ao2_ref
usr
usr
-1
1
ao2_iterator_destroy(&user_iter);
ao2_iterator_destroy(&user_iter)
ao2_iterator_destroy
ao2_iterator_destroy
&user_iter
user_iter
user_iter
if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}
keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))
keepplaying && playednamerec
keepplaying
keepplaying
playednamerec
playednamerec
!ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))
ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-roll-callcomplete"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{									res = ast_waitstream(chan, AST_DIGIT_ANY);									ast_stopstream(chan);									if (res > 0)										keepplaying = 0;								}
res = ast_waitstream(chan, AST_DIGIT_ANY);
res = ast_waitstream(chan, AST_DIGIT_ANY)
res
res
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
if (res > 0)										keepplaying = 0;
res > 0
res
res
0
keepplaying = 0;
keepplaying = 0
keepplaying
keepplaying
0
break;
case '2':
'2'
if (conf->users == 1) {									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}
conf->users == 1
conf->users
conf
conf
users
1
{									if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");								}
if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))										ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-errormenu"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);								}
ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);
ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf)
ao2_callback
ao2_callback
conf->usercontainer
conf
conf
usercontainer
OBJ_NODATA
OBJ_NODATA
user_set_kickme_cb
user_set_kickme_cb
&conf
conf
conf
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
break;
case '3':
'3'
if(conf->gmuted) {									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								} else {									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}
conf->gmuted
conf
conf
gmuted
{									conf->gmuted = 0;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}
conf->gmuted = 0;
conf->gmuted = 0
conf->gmuted
conf
conf
gmuted
0
ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);
ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf)
ao2_callback
ao2_callback
conf->usercontainer
conf
conf
usercontainer
OBJ_NODATA
OBJ_NODATA
user_set_unmuted_cb
user_set_unmuted_cb
&conf
conf
conf
if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)))										ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan))
ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-now-unmuted"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{									conf->gmuted = 1;									ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);									if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");								}
conf->gmuted = 1;
conf->gmuted = 1
conf->gmuted
conf
conf
gmuted
1
ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);
ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf)
ao2_callback
ao2_callback
conf->usercontainer
conf
conf
usercontainer
OBJ_NODATA
OBJ_NODATA
user_set_muted_cb
user_set_muted_cb
&conf
conf
conf
if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)))										ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan))
ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-now-muted"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
break;
case '4':
'4'
if (conf->recording != MEETME_RECORD_ACTIVE) {									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}
conf->recording != MEETME_RECORD_ACTIVE
conf->recording
conf
conf
recording
MEETME_RECORD_ACTIVE
MEETME_RECORD_ACTIVE
{									ast_set_flag64(confflags, CONFFLAG_RECORDCONF);									if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}									ast_mutex_lock(&conf->recordthreadlock);									if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}									ast_mutex_unlock(&conf->recordthreadlock);									if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");								}
ast_set_flag64(confflags, CONFFLAG_RECORDCONF);
ast_set_flag64(confflags, CONFFLAG_RECORDCONF)
ast_set_flag64
ast_set_flag64
confflags
confflags
CONFFLAG_RECORDCONF
CONFFLAG_RECORDCONF
if (!conf->recordingfilename) {										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}
!conf->recordingfilename
conf->recordingfilename
conf
conf
recordingfilename
{										const char *var;										ast_channel_lock(chan);										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}										if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}										ast_channel_unlock(chan);										if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}										if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}										ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);									}
const char *var;
const char *var;
const char
*var
*
var
ast_channel_lock(chan);
ast_channel_lock(chan)
ast_channel_lock
ast_channel_lock
chan
chan
if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))) {											conf->recordingfilename = ast_strdup(var);										}
(var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE"))
var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
var
var
pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"MEETME_RECORDINGFILE"
{											conf->recordingfilename = ast_strdup(var);										}
conf->recordingfilename = ast_strdup(var);
conf->recordingfilename = ast_strdup(var)
conf->recordingfilename
conf
conf
recordingfilename
ast_strdup(var)
ast_strdup
ast_strdup
var
var
if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))) {											conf->recordingformat = ast_strdup(var);										}
(var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT"))
var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
var
var
pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
chan
chan
"MEETME_RECORDINGFORMAT"
{											conf->recordingformat = ast_strdup(var);										}
conf->recordingformat = ast_strdup(var);
conf->recordingformat = ast_strdup(var)
conf->recordingformat
conf
conf
recordingformat
ast_strdup(var)
ast_strdup
ast_strdup
var
var
ast_channel_unlock(chan);
ast_channel_unlock(chan)
ast_channel_unlock
ast_channel_unlock
chan
chan
if (!conf->recordingfilename) {											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}
!conf->recordingfilename
conf->recordingfilename
conf
conf
recordingfilename
{											snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));											conf->recordingfilename = ast_strdup(recordingtmp);										}
snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan));
snprintf(recordingtmp, sizeof(recordingtmp), "meetme-conf-rec-%s-%s", conf->confno, ast_channel_uniqueid(chan))
snprintf
snprintf
recordingtmp
recordingtmp
sizeof(recordingtmp)
(recordingtmp)
recordingtmp
recordingtmp
"meetme-conf-rec-%s-%s"
conf->confno
conf
conf
confno
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->recordingfilename = ast_strdup(recordingtmp);
conf->recordingfilename = ast_strdup(recordingtmp)
conf->recordingfilename
conf
conf
recordingfilename
ast_strdup(recordingtmp)
ast_strdup
ast_strdup
recordingtmp
recordingtmp
if (!conf->recordingformat) {											conf->recordingformat = ast_strdup("wav");										}
!conf->recordingformat
conf->recordingformat
conf
conf
recordingformat
{											conf->recordingformat = ast_strdup("wav");										}
conf->recordingformat = ast_strdup("wav");
conf->recordingformat = ast_strdup("wav")
conf->recordingformat
conf
conf
recordingformat
ast_strdup("wav")
ast_strdup
ast_strdup
"wav"
ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat);
ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\n",				    							conf->confno, conf->recordingfilename, conf->recordingformat)
ast_verb
ast_verb
4
"Starting recording of MeetMe Conference %s into file %s.%s.\n"
conf->confno
conf
conf
confno
conf->recordingfilename
conf
conf
recordingfilename
conf->recordingformat
conf
conf
recordingformat
ast_mutex_lock(&conf->recordthreadlock);
ast_mutex_lock(&conf->recordthreadlock)
ast_mutex_lock
ast_mutex_lock
&conf->recordthreadlock
conf->recordthreadlock
conf
conf
recordthreadlock
if ((conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))) {										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}
(conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF) && ((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))
(conf->recordthread == AST_PTHREADT_NULL) && ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(conf->recordthread == AST_PTHREADT_NULL)
conf->recordthread == AST_PTHREADT_NULL
conf->recordthread
conf
conf
recordthread
AST_PTHREADT_NULL
AST_PTHREADT_NULL
ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_RECORDCONF
CONFFLAG_RECORDCONF
((conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)))
(conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL))
conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
conf->lchan
conf
conf
lchan
ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
ast_request
ast_request
"DAHDI"
cap_slin
cap_slin
chan
chan
"pseudo"
NULL
NULL
{										ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);										dahdic.chan = 0;										dahdic.confno = conf->dahdiconf;										dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;										if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}									}
ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
ast_set_read_format_by_id
ast_set_read_format_by_id
conf->lchan
conf
conf
lchan
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR);
ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
ast_set_write_format_by_id
ast_set_write_format_by_id
conf->lchan
conf
conf
lchan
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
dahdic.chan = 0;
dahdic.chan = 0
dahdic.chan
dahdic
dahdic
chan
0
dahdic.confno = conf->dahdiconf;
dahdic.confno = conf->dahdiconf
dahdic.confno
dahdic
dahdic
confno
conf->dahdiconf
conf
conf
dahdiconf
dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON;
dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON
dahdic.confmode
dahdic
dahdic
confmode
DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON
DAHDI_CONF_CONFANN
DAHDI_CONF_CONFANN
DAHDI_CONF_CONFANNMON
DAHDI_CONF_CONFANNMON
if (ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)) {											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										} else {											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}
ioctl(ast_channel_fd(conf->lchan, 0), DAHDI_SETCONF, &dahdic)
ioctl
ioctl
ast_channel_fd(conf->lchan, 0)
ast_channel_fd
ast_channel_fd
conf->lchan
conf
conf
lchan
0
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{											ast_log(LOG_WARNING, "Error starting listen channel\n");											ast_hangup(conf->lchan);											conf->lchan = NULL;										}
ast_log(LOG_WARNING, "Error starting listen channel\n");
ast_log(LOG_WARNING, "Error starting listen channel\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error starting listen channel\n"
ast_hangup(conf->lchan);
ast_hangup(conf->lchan)
ast_hangup
ast_hangup
conf->lchan
conf
conf
lchan
conf->lchan = NULL;
conf->lchan = NULL
conf->lchan
conf
conf
lchan
NULL
NULL
{											ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);										}
ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf);
ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf)
ast_pthread_create_detached_background
ast_pthread_create_detached_background
&conf->recordthread
conf->recordthread
conf
conf
recordthread
NULL
NULL
recordthread
recordthread
conf
conf
ast_mutex_unlock(&conf->recordthreadlock);
ast_mutex_unlock(&conf->recordthreadlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->recordthreadlock
conf->recordthreadlock
conf
conf
recordthreadlock
if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)))										ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan))
ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-now-recording"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
break;
default:
if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)))									ast_waitstream(chan, "");
!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-errormenu"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
break;
menu8_active = 0;
menu8_active = 0
menu8_active
menu8_active
0
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					} else {						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}
ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_ADMIN
CONFFLAG_ADMIN
{						/* Admin menu */						if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}
if (!menu_active) {							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}
!menu_active
menu_active
menu_active
{							menu_active = 1;							/* Record this sound! */							if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						}
menu_active = 1;
menu_active = 1
menu_active
menu_active
1
if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}
!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))
ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-adminmenu-162"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							}
dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
dtmf = ast_waitstream(chan, AST_DIGIT_ANY)
dtmf
dtmf
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
{								dtmf = 0;							}
dtmf = 0;
dtmf = 0
dtmf
dtmf
0
{							dtmf = f->subclass.integer;						}
dtmf = f->subclass.integer;
dtmf = f->subclass.integer
dtmf
dtmf
f->subclass.integer
f->subclass
f
f
subclass
integer
if (dtmf > 0) {							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}
dtmf > 0
dtmf
dtmf
0
{							switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}
switch(dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}
dtmf
dtmf
{							case '1': /* Un/Mute */								menu_active = 0;								/* for admin, change both admin and use flags */								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2': /* Un/Lock the Conference */								menu_active = 0;								if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '3': /* Eject last user */							{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu8_active = 1;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								/* Play an error message! */								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}
case '1':
'1'
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								} else {									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
{									user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}
user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);
user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
{									user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);								}
user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED);
user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
{									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))
ast_streamfile(chan, "conf-muted", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-muted"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))
ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-unmuted"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
break;
case '2':
'2'
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
if (conf->locked) {									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
conf->locked
conf
conf
locked
{									conf->locked = 0;									if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
conf->locked = 0;
conf->locked = 0
conf->locked
conf
conf
locked
0
if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))
ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-unlockednow"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{									conf->locked = 1;									if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
conf->locked = 1;
conf->locked = 1
conf->locked
conf
conf
locked
1
if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))
ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-lockednow"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
break;
case '3':
'3'
{								struct ast_conf_user *usr = NULL;								int max_no = 0;								ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);								menu_active = 0;								usr = ao2_find(conf->usercontainer, &max_no, 0);								if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}								ao2_ref(usr, -1);								ast_stopstream(chan);								break;							}
struct ast_conf_user *usr = NULL;
struct ast_conf_user *usr = NULL;
struct ast_conf_user
ast_conf_user
*usr = NULL
*
usr
= NULL
NULL
NULL
int max_no = 0;
int max_no = 0;
int
max_no = 0
max_no
= 0
0
ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no);
ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no)
ao2_callback
ao2_callback
conf->usercontainer
conf
conf
usercontainer
OBJ_NODATA
OBJ_NODATA
user_max_cmp
user_max_cmp
&max_no
max_no
max_no
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
usr = ao2_find(conf->usercontainer, &max_no, 0);
usr = ao2_find(conf->usercontainer, &max_no, 0)
usr
usr
ao2_find(conf->usercontainer, &max_no, 0)
ao2_find
ao2_find
conf->usercontainer
conf
conf
usercontainer
&max_no
max_no
max_no
0
if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									usr->adminflags |= ADMINFLAG_KICKME;								}
(ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)
(ast_channel_name(usr->chan) == ast_channel_name(chan))
ast_channel_name(usr->chan) == ast_channel_name(chan)
ast_channel_name(usr->chan)
ast_channel_name
ast_channel_name
usr->chan
usr
usr
chan
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)
ast_test_flag64
ast_test_flag64
&usr->userflags
usr->userflags
usr
usr
userflags
CONFFLAG_ADMIN
CONFFLAG_ADMIN
{									if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-errormenu"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{									usr->adminflags |= ADMINFLAG_KICKME;								}
usr->adminflags |= ADMINFLAG_KICKME;
usr->adminflags |= ADMINFLAG_KICKME
usr->adminflags
usr
usr
adminflags
ADMINFLAG_KICKME
ADMINFLAG_KICKME
ao2_ref(usr, -1);
ao2_ref(usr, -1)
ao2_ref
ao2_ref
usr
usr
-1
1
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
break;
case '4':
'4'
tweak_listen_volume(user, VOL_DOWN);
tweak_listen_volume(user, VOL_DOWN)
tweak_listen_volume
tweak_listen_volume
user
user
VOL_DOWN
VOL_DOWN
break;
case '5':
'5'
if (rt_schedule) {									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}
rt_schedule
rt_schedule
{									if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}									ast_stopstream(chan);								}
if (!rt_extend_conf(conf->confno)) {										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									} else {										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}
!rt_extend_conf(conf->confno)
rt_extend_conf(conf->confno)
rt_extend_conf
rt_extend_conf
conf->confno
conf
conf
confno
{										if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}
if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}
!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))
ast_streamfile(chan, "conf-extended", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-extended"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{											ast_waitstream(chan, "");										}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{										if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}									}
if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {											ast_waitstream(chan, "");										}
!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))
ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-nonextended"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{											ast_waitstream(chan, "");										}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
break;
case '6':
'6'
tweak_listen_volume(user, VOL_UP);
tweak_listen_volume(user, VOL_UP)
tweak_listen_volume
tweak_listen_volume
user
user
VOL_UP
VOL_UP
break;
case '7':
'7'
tweak_talk_volume(user, VOL_DOWN);
tweak_talk_volume(user, VOL_DOWN)
tweak_talk_volume
tweak_talk_volume
user
user
VOL_DOWN
VOL_DOWN
break;
case '8':
'8'
menu8_active = 1;
menu8_active = 1
menu8_active
menu8_active
1
break;
case '9':
'9'
tweak_talk_volume(user, VOL_UP);
tweak_talk_volume(user, VOL_UP)
tweak_talk_volume
tweak_talk_volume
user
user
VOL_UP
VOL_UP
break;
default:
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}
!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-errormenu"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{									ast_waitstream(chan, "");								}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
break;
{						/* User menu */						if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}						if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}					}
if (!menu_active) {							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						} else {							dtmf = f->subclass.integer;						}
!menu_active
menu_active
menu_active
{							menu_active = 1;							if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}						}
menu_active = 1;
menu_active = 1
menu_active
menu_active
1
if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))) {								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							} else {								dtmf = 0;							}
!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))
ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-usermenu-162"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);								ast_stopstream(chan);							}
dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
dtmf = ast_waitstream(chan, AST_DIGIT_ANY)
dtmf
dtmf
ast_waitstream(chan, AST_DIGIT_ANY)
ast_waitstream
ast_waitstream
chan
chan
AST_DIGIT_ANY
AST_DIGIT_ANY
ast_stopstream(chan);
ast_stopstream(chan)
ast_stopstream
ast_stopstream
chan
chan
{								dtmf = 0;							}
dtmf = 0;
dtmf = 0
dtmf
dtmf
0
{							dtmf = f->subclass.integer;						}
dtmf = f->subclass.integer;
dtmf = f->subclass.integer
dtmf
dtmf
f->subclass.integer
f->subclass
f
f
subclass
integer
if (dtmf > 0) {							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}
dtmf > 0
dtmf
dtmf
0
{							switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}						}
switch (dtmf) {							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}
dtmf
dtmf
{							case '1': /* Un/Mute */								menu_active = 0;								/* user can only toggle the self-muted state */								user->adminflags ^= ADMINFLAG_SELFMUTED;								/* they can't override the admin mute state */								if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '2':								menu_active = 0;								if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}								if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}								break;							case '4':								tweak_listen_volume(user, VOL_DOWN);								break;							case '5':								/* Extend RT conference */								if (rt_schedule) {									rt_extend_conf(conf->confno);								}								menu_active = 0;								break;							case '6':								tweak_listen_volume(user, VOL_UP);								break;							case '7':								tweak_talk_volume(user, VOL_DOWN);								break;							case '8':								menu_active = 0;								break;							case '9':								tweak_talk_volume(user, VOL_UP);								break;							default:								menu_active = 0;								if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}								break;							}
case '1':
'1'
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
user->adminflags ^= ADMINFLAG_SELFMUTED;
user->adminflags ^= ADMINFLAG_SELFMUTED
user->adminflags
user
user
adminflags
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								} else {									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
{									if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))
ast_streamfile(chan, "conf-muted", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-muted"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
{									if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))
ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-unmuted"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
break;
case '2':
'2'
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) {									user->adminflags |= ADMINFLAG_T_REQUEST;								}
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
{									user->adminflags |= ADMINFLAG_T_REQUEST;								}
user->adminflags |= ADMINFLAG_T_REQUEST;
user->adminflags |= ADMINFLAG_T_REQUEST
user->adminflags
user
user
adminflags
ADMINFLAG_T_REQUEST
ADMINFLAG_T_REQUEST
if (user->adminflags & ADMINFLAG_T_REQUEST) {									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
user->adminflags & ADMINFLAG_T_REQUEST
user->adminflags
user
user
adminflags
ADMINFLAG_T_REQUEST
ADMINFLAG_T_REQUEST
{									if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}								}
if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {										ast_waitstream(chan, "");									}
!ast_streamfile(chan, "beep", ast_channel_language(chan))
ast_streamfile(chan, "beep", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"beep"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{										ast_waitstream(chan, "");									}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
break;
case '4':
'4'
tweak_listen_volume(user, VOL_DOWN);
tweak_listen_volume(user, VOL_DOWN)
tweak_listen_volume
tweak_listen_volume
user
user
VOL_DOWN
VOL_DOWN
break;
case '5':
'5'
if (rt_schedule) {									rt_extend_conf(conf->confno);								}
rt_schedule
rt_schedule
{									rt_extend_conf(conf->confno);								}
rt_extend_conf(conf->confno);
rt_extend_conf(conf->confno)
rt_extend_conf
rt_extend_conf
conf->confno
conf
conf
confno
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
break;
case '6':
'6'
tweak_listen_volume(user, VOL_UP);
tweak_listen_volume(user, VOL_UP)
tweak_listen_volume
tweak_listen_volume
user
user
VOL_UP
VOL_UP
break;
case '7':
'7'
tweak_talk_volume(user, VOL_DOWN);
tweak_talk_volume(user, VOL_DOWN)
tweak_talk_volume
tweak_talk_volume
user
user
VOL_DOWN
VOL_DOWN
break;
case '8':
'8'
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
break;
case '9':
'9'
tweak_talk_volume(user, VOL_UP);
tweak_talk_volume(user, VOL_UP)
tweak_talk_volume
tweak_talk_volume
user
user
VOL_UP
VOL_UP
break;
default:
menu_active = 0;
menu_active = 0
menu_active
menu_active
0
if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {									ast_waitstream(chan, "");								}
!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))
ast_streamfile
ast_streamfile
chan
chan
"conf-errormenu"
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
{									ast_waitstream(chan, "");								}
ast_waitstream(chan, "");
ast_waitstream(chan, "")
ast_waitstream
ast_waitstream
chan
chan
""
break;
if (musiconhold && !menu_active) {						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}
musiconhold && !menu_active
musiconhold
musiconhold
!menu_active
menu_active
menu_active
{						conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);					}
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{						ast_log(LOG_WARNING, "Error setting conference\n");						close(fd);						ast_frfree(f);						goto outrun;					}
ast_log(LOG_WARNING, "Error setting conference\n");
ast_log(LOG_WARNING, "Error setting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference\n"
close(fd);
close(fd)
close
close
fd
fd
ast_frfree(f);
ast_frfree(f)
ast_frfree
ast_frfree
f
f
goto outrun;
outrun
conf_flush(fd, chan);
conf_flush(fd, chan)
conf_flush
conf_flush
fd
fd
chan
chan
if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")) {					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				} else if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
(f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT) && ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")
(f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
(f->frametype == AST_FRAME_DTMF)
f->frametype == AST_FRAME_DTMF
f->frametype
f
f
frametype
AST_FRAME_DTMF
AST_FRAME_DTMF
ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_EXIT_CONTEXT
CONFFLAG_EXIT_CONTEXT
ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")
ast_exists_extension
ast_exists_extension
chan
chan
exitcontext
exitcontext
dtmfstr
dtmfstr
1
""
{					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}				}
if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}
ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_PASS_DTMF
CONFFLAG_PASS_DTMF
{						conf_queue_dtmf(conf, user, f);					}
conf_queue_dtmf(conf, user, f);
conf_queue_dtmf(conf, user, f)
conf_queue_dtmf
conf_queue_dtmf
conf
conf
user
user
f
f
if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)) {						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					} else {						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}
!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)
ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)
ast_goto_if_exists
ast_goto_if_exists
chan
chan
exitcontext
exitcontext
dtmfstr
dtmfstr
1
{						ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);						ret = 0;						ast_frfree(f);						break;					}
ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext);
ast_debug(1, "Got DTMF %c, goto context %s\n", dtmfstr[0], exitcontext)
ast_debug
ast_debug
1
"Got DTMF %c, goto context %s\n"
dtmfstr[0]
dtmfstr
dtmfstr
0
exitcontext
exitcontext
ret = 0;
ret = 0
ret
ret
0
ast_frfree(f);
ast_frfree(f)
ast_frfree
ast_frfree
f
f
break;
{						ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);					}
ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext);
ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n", dtmfstr, exitcontext)
ast_debug
ast_debug
2
"Exit by single digit did not work in meetme. Extension %s does not exist in context %s\n"
dtmfstr
dtmfstr
exitcontext
exitcontext
if ((f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))) {					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				} else if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
(f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT) &&					(strchr(exitkeys, f->subclass.integer))
(f->frametype == AST_FRAME_DTMF) && ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
(f->frametype == AST_FRAME_DTMF)
f->frametype == AST_FRAME_DTMF
f->frametype
f
f
frametype
AST_FRAME_DTMF
AST_FRAME_DTMF
ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KEYEXIT
CONFFLAG_KEYEXIT
(strchr(exitkeys, f->subclass.integer))
strchr(exitkeys, f->subclass.integer)
strchr
strchr
exitkeys
exitkeys
f->subclass.integer
f->subclass
f
f
subclass
integer
{					pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);					if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}					ret = 0;					ast_frfree(f);					break;				}
pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr);
pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
chan
chan
"MEETME_EXIT_KEY"
dtmfstr
dtmfstr
if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {						conf_queue_dtmf(conf, user, f);					}
ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_PASS_DTMF
CONFFLAG_PASS_DTMF
{						conf_queue_dtmf(conf, user, f);					}
conf_queue_dtmf(conf, user, f);
conf_queue_dtmf(conf, user, f)
conf_queue_dtmf
conf_queue_dtmf
conf
conf
user
user
f
f
ret = 0;
ret = 0
ret
ret
0
ast_frfree(f);
ast_frfree(f)
ast_frfree
ast_frfree
f
f
break;
if ((f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)) {					conf_queue_dtmf(conf, user, f);				} else if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
(f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)					&& ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)
f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END
f->frametype == AST_FRAME_DTMF_BEGIN
f->frametype
f
f
frametype
AST_FRAME_DTMF_BEGIN
AST_FRAME_DTMF_BEGIN
f->frametype == AST_FRAME_DTMF_END
f->frametype
f
f
frametype
AST_FRAME_DTMF_END
AST_FRAME_DTMF_END
ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_PASS_DTMF
CONFFLAG_PASS_DTMF
{					conf_queue_dtmf(conf, user, f);				}
conf_queue_dtmf(conf, user, f);
conf_queue_dtmf(conf, user, f)
conf_queue_dtmf
conf_queue_dtmf
conf
conf
user
user
f
f
if (ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				} else if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
ast_test_flag64(confflags, CONFFLAG_SLA_STATION) && f->frametype == AST_FRAME_CONTROL
ast_test_flag64(confflags, CONFFLAG_SLA_STATION)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_SLA_STATION
CONFFLAG_SLA_STATION
f->frametype == AST_FRAME_CONTROL
f->frametype
f
f
frametype
AST_FRAME_CONTROL
AST_FRAME_CONTROL
{					switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}				}
switch (f->subclass.integer) {					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}
f->subclass.integer
f->subclass
f
f
subclass
integer
{					case AST_CONTROL_HOLD:						sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);						break;					default:						break;					}
case AST_CONTROL_HOLD:
AST_CONTROL_HOLD
AST_CONTROL_HOLD
sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf);
sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf)
sla_queue_event_conf
sla_queue_event_conf
SLA_EVENT_HOLD
SLA_EVENT_HOLD
chan
chan
conf
conf
break;
default:
break;
if (f->frametype == AST_FRAME_NULL) {					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				} else if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
f->frametype == AST_FRAME_NULL
f->frametype
f
f
frametype
AST_FRAME_NULL
AST_FRAME_NULL
{					/* Ignore NULL frames. It is perfectly normal to get these if the person is muted. */				}
if (f->frametype == AST_FRAME_CONTROL) {					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				} else {					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
f->frametype == AST_FRAME_CONTROL
f->frametype
f
f
frametype
AST_FRAME_CONTROL
AST_FRAME_CONTROL
{					switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}				}
switch (f->subclass.integer) {					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}
f->subclass.integer
f->subclass
f
f
subclass
integer
{					case AST_CONTROL_BUSY:					case AST_CONTROL_CONGESTION:						ast_frfree(f);						goto outrun;						break;					default:						ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);					}
case AST_CONTROL_BUSY:
AST_CONTROL_BUSY
AST_CONTROL_BUSY
case AST_CONTROL_CONGESTION:
AST_CONTROL_CONGESTION
AST_CONTROL_CONGESTION
ast_frfree(f);
ast_frfree(f)
ast_frfree
ast_frfree
f
f
goto outrun;
outrun
break;
default:
ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer);
ast_debug(1,							"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n",							ast_channel_name(chan), f->frametype, f->subclass.integer)
ast_debug
ast_debug
1
"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
f->frametype
f
f
frametype
f->subclass.integer
f->subclass
f
f
subclass
integer
{					ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);				}
ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer);
ast_debug(1,						"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n",						ast_channel_name(chan), f->frametype, f->subclass.integer)
ast_debug
ast_debug
1
"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
f->frametype
f
f
frametype
f->subclass.integer
f->subclass
f
f
subclass
integer
ast_frfree(f);
ast_frfree(f)
ast_frfree
ast_frfree
f
f
if (outfd > -1) {				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}
outfd > -1
outfd
outfd
-1
1
{				res = read(outfd, buf, CONF_SIZE);				if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}			}
res = read(outfd, buf, CONF_SIZE);
res = read(outfd, buf, CONF_SIZE)
res
res
read(outfd, buf, CONF_SIZE)
read
read
outfd
outfd
buf
buf
CONF_SIZE
CONF_SIZE
if (res > 0) {					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				} else {					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}
res > 0
res
res
0
{					memset(&fr, 0, sizeof(fr));					fr.frametype = AST_FRAME_VOICE;					ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);					fr.datalen = res;					fr.samples = res / 2;					fr.data.ptr = buf;					fr.offset = AST_FRIENDLY_OFFSET;					if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}				}
memset(&fr, 0, sizeof(fr));
memset(&fr, 0, sizeof(fr))
memset
memset
&fr
fr
fr
0
sizeof(fr)
(fr)
fr
fr
fr.frametype = AST_FRAME_VOICE;
fr.frametype = AST_FRAME_VOICE
fr.frametype
fr
fr
frametype
AST_FRAME_VOICE
AST_FRAME_VOICE
ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0);
ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0)
ast_format_set
ast_format_set
&fr.subclass.format
fr.subclass.format
fr.subclass
fr
fr
subclass
format
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
0
fr.datalen = res;
fr.datalen = res
fr.datalen
fr
fr
datalen
res
res
fr.samples = res / 2;
fr.samples = res / 2
fr.samples
fr
fr
samples
res / 2
res
res
2
fr.data.ptr = buf;
fr.data.ptr = buf
fr.data.ptr
fr.data
fr
fr
data
ptr
buf
buf
fr.offset = AST_FRIENDLY_OFFSET;
fr.offset = AST_FRIENDLY_OFFSET
fr.offset
fr
fr
offset
AST_FRIENDLY_OFFSET
AST_FRIENDLY_OFFSET
if (!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )) {						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					} else {bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}
!user->listen.actual &&						(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )
!user->listen.actual
user->listen.actual
user->listen
user
user
listen
actual
(ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))						 )
ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) ||						 (!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))
ast_test_flag64(confflags, CONFFLAG_MONITOR) ||						 (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))
user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
user->adminflags
user
user
adminflags
(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED
ADMINFLAG_MUTED
ADMINFLAG_MUTED
ADMINFLAG_SELFMUTED
ADMINFLAG_SELFMUTED
(!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER))
!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
!user->talking
user->talking
user
user
talking
ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_OPTIMIZETALKER
CONFFLAG_OPTIMIZETALKER
{						int idx;						for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}						if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}						ast_mutex_lock(&conf->listenlock);						if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}						if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}						ast_mutex_unlock(&conf->listenlock);					}
int idx;
int idx;
int
idx
idx
for (idx = 0; idx < AST_FRAME_BITS; idx++) {							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}
idx = 0;
idx = 0
idx
idx
0
idx < AST_FRAME_BITS
idx
idx
AST_FRAME_BITS
AST_FRAME_BITS
idx++
idx
idx
{							if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}						}
if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)) {								break;							}
ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)) & (1 << idx)
ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan))
ast_format_to_old_bitfield
ast_format_to_old_bitfield
ast_channel_rawwriteformat(chan)
ast_channel_rawwriteformat
ast_channel_rawwriteformat
chan
chan
(1 << idx)
1 << idx
1
idx
idx
{								break;							}
break;
if (idx >= AST_FRAME_BITS) {							goto bailoutandtrynormal;						}
idx >= AST_FRAME_BITS
idx
idx
AST_FRAME_BITS
AST_FRAME_BITS
{							goto bailoutandtrynormal;						}
goto bailoutandtrynormal;
bailoutandtrynormal
ast_mutex_lock(&conf->listenlock);
ast_mutex_lock(&conf->listenlock)
ast_mutex_lock
ast_mutex_lock
&conf->listenlock
conf->listenlock
conf
conf
listenlock
if (!conf->transframe[idx]) {							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}
!conf->transframe[idx]
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
{							if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}						}
if (conf->origframe) {								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}
conf->origframe
conf
conf
origframe
{								if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}								if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}								if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}							}
if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {									ast_moh_stop(chan);									mohtempstopped = 1;								}
musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence) && confsilence < MEETME_DELAYDETECTTALK
musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence)
musiconhold
musiconhold
!ast_dsp_silence(dsp, conf->origframe, &confsilence)
ast_dsp_silence(dsp, conf->origframe, &confsilence)
ast_dsp_silence
ast_dsp_silence
dsp
dsp
conf->origframe
conf
conf
origframe
&confsilence
confsilence
confsilence
confsilence < MEETME_DELAYDETECTTALK
confsilence
confsilence
MEETME_DELAYDETECTTALK
MEETME_DELAYDETECTTALK
{									ast_moh_stop(chan);									mohtempstopped = 1;								}
ast_moh_stop(chan);
ast_moh_stop(chan)
ast_moh_stop
ast_moh_stop
chan
chan
mohtempstopped = 1;
mohtempstopped = 1
mohtempstopped
mohtempstopped
1
if (!conf->transpath[idx]) {									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}
!conf->transpath[idx]
conf->transpath[idx]
conf->transpath
conf
conf
transpath
idx
idx
{									struct ast_format src;									struct ast_format dst;									ast_format_set(&src, AST_FORMAT_SLINEAR, 0);									ast_format_from_old_bitfield(&dst, (1 << idx));									conf->transpath[idx] = ast_translator_build_path(&dst, &src);								}
struct ast_format src;
struct ast_format src;
struct ast_format
ast_format
src
src
struct ast_format dst;
struct ast_format dst;
struct ast_format
ast_format
dst
dst
ast_format_set(&src, AST_FORMAT_SLINEAR, 0);
ast_format_set(&src, AST_FORMAT_SLINEAR, 0)
ast_format_set
ast_format_set
&src
src
src
AST_FORMAT_SLINEAR
AST_FORMAT_SLINEAR
0
ast_format_from_old_bitfield(&dst, (1 << idx));
ast_format_from_old_bitfield(&dst, (1 << idx))
ast_format_from_old_bitfield
ast_format_from_old_bitfield
&dst
dst
dst
(1 << idx)
1 << idx
1
idx
idx
conf->transpath[idx] = ast_translator_build_path(&dst, &src);
conf->transpath[idx] = ast_translator_build_path(&dst, &src)
conf->transpath[idx]
conf->transpath
conf
conf
transpath
idx
idx
ast_translator_build_path(&dst, &src)
ast_translator_build_path
ast_translator_build_path
&dst
dst
dst
&src
src
src
if (conf->transpath[idx]) {									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}
conf->transpath[idx]
conf->transpath
conf
conf
transpath
idx
idx
{									conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);									if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}								}
conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0);
conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0)
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
ast_translate(conf->transpath[idx], conf->origframe, 0)
ast_translate
ast_translate
conf->transpath[idx]
conf->transpath
conf
conf
transpath
idx
idx
conf->origframe
conf
conf
origframe
0
if (!conf->transframe[idx]) {										conf->transframe[idx] = &ast_null_frame;									}
!conf->transframe[idx]
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
{										conf->transframe[idx] = &ast_null_frame;									}
conf->transframe[idx] = &ast_null_frame;
conf->transframe[idx] = &ast_null_frame
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
&ast_null_frame
ast_null_frame
ast_null_frame
if (conf->transframe[idx]) { 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						} else {							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
{ 							if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}						}
if ((conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)) {								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}
(conf->transframe[idx]->frametype != AST_FRAME_NULL) &&							    can_write(chan, confflags)
(conf->transframe[idx]->frametype != AST_FRAME_NULL)
conf->transframe[idx]->frametype != AST_FRAME_NULL
conf->transframe[idx]->frametype
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
frametype
AST_FRAME_NULL
AST_FRAME_NULL
can_write(chan, confflags)
can_write
can_write
chan
chan
confflags
confflags
{								struct ast_frame *cur;								/* the translator may have returned a list of frames, so								   write each one onto the channel								*/								for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}								if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}							}
struct ast_frame *cur;
struct ast_frame *cur;
struct ast_frame
ast_frame
*cur
*
cur
for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)) {									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}
cur = conf->transframe[idx];
cur = conf->transframe[idx]
cur
cur
conf->transframe[idx]
conf->transframe
conf
conf
transframe
idx
idx
cur
cur
cur = AST_LIST_NEXT(cur, frame_list)
cur
cur
AST_LIST_NEXT(cur, frame_list)
AST_LIST_NEXT
AST_LIST_NEXT
cur
cur
frame_list
frame_list
{									if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}								}
if (ast_write(chan, cur)) {										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}
ast_write(chan, cur)
ast_write
ast_write
chan
chan
cur
cur
{										ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));										break;									}
ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));
ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to write frame to channel %s\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
break;
if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}
musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK
musiconhold && mohtempstopped
musiconhold
musiconhold
mohtempstopped
mohtempstopped
confsilence > MEETME_DELAYDETECTENDTALK
confsilence
confsilence
MEETME_DELAYDETECTENDTALK
MEETME_DELAYDETECTENDTALK
{									mohtempstopped = 0;									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);								}
mohtempstopped = 0;
mohtempstopped = 0
mohtempstopped
mohtempstopped
0
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
{							ast_mutex_unlock(&conf->listenlock);							goto bailoutandtrynormal;						}
ast_mutex_unlock(&conf->listenlock);
ast_mutex_unlock(&conf->listenlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->listenlock
conf->listenlock
conf
conf
listenlock
goto bailoutandtrynormal;
bailoutandtrynormal
ast_mutex_unlock(&conf->listenlock);
ast_mutex_unlock(&conf->listenlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->listenlock
conf->listenlock
conf
conf
listenlock
{bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}						if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}						if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}						if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}					}
bailoutandtrynormal:						if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}
bailoutandtrynormal
if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK) {							ast_moh_stop(chan);							mohtempstopped = 1;						}
musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence) && confsilence < MEETME_DELAYDETECTTALK
musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence)
musiconhold
musiconhold
!ast_dsp_silence(dsp, &fr, &confsilence)
ast_dsp_silence(dsp, &fr, &confsilence)
ast_dsp_silence
ast_dsp_silence
dsp
dsp
&fr
fr
fr
&confsilence
confsilence
confsilence
confsilence < MEETME_DELAYDETECTTALK
confsilence
confsilence
MEETME_DELAYDETECTTALK
MEETME_DELAYDETECTTALK
{							ast_moh_stop(chan);							mohtempstopped = 1;						}
ast_moh_stop(chan);
ast_moh_stop(chan)
ast_moh_stop
ast_moh_stop
chan
chan
mohtempstopped = 1;
mohtempstopped = 1
mohtempstopped
mohtempstopped
1
if (user->listen.actual) {							ast_frame_adjust_volume(&fr, user->listen.actual);						}
user->listen.actual
user->listen
user
user
listen
actual
{							ast_frame_adjust_volume(&fr, user->listen.actual);						}
ast_frame_adjust_volume(&fr, user->listen.actual);
ast_frame_adjust_volume(&fr, user->listen.actual)
ast_frame_adjust_volume
ast_frame_adjust_volume
&fr
fr
fr
user->listen.actual
user->listen
user
user
listen
actual
if (can_write(chan, confflags) && ast_write(chan, &fr) < 0) {							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}
can_write(chan, confflags) && ast_write(chan, &fr) < 0
can_write(chan, confflags)
can_write
can_write
chan
chan
confflags
confflags
ast_write(chan, &fr) < 0
ast_write(chan, &fr)
ast_write
ast_write
chan
chan
&fr
fr
fr
0
{							ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));						}
ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan));
ast_log(LOG_WARNING, "Unable to write frame to channel %s\n", ast_channel_name(chan))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to write frame to channel %s\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK) {							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}
musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK
musiconhold && mohtempstopped
musiconhold
musiconhold
mohtempstopped
mohtempstopped
confsilence > MEETME_DELAYDETECTENDTALK
confsilence
confsilence
MEETME_DELAYDETECTENDTALK
MEETME_DELAYDETECTENDTALK
{							mohtempstopped = 0;							conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);						}
mohtempstopped = 0;
mohtempstopped = 0
mohtempstopped
mohtempstopped
0
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
conf_start_moh
conf_start_moh
chan
chan
optargs[OPT_ARG_MOH_CLASS]
optargs
optargs
OPT_ARG_MOH_CLASS
OPT_ARG_MOH_CLASS
{					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));				}
ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));
ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Failed to read frame: %s\n"
strerror(errno)
strerror
strerror
errno
errno
lastmarked = currentmarked;
lastmarked = currentmarked
lastmarked
lastmarked
currentmarked
currentmarked
if (musiconhold) {		ast_moh_stop(chan);	}
musiconhold
musiconhold
{		ast_moh_stop(chan);	}
ast_moh_stop(chan);
ast_moh_stop(chan)
ast_moh_stop
ast_moh_stop
chan
chan
if (using_pseudo) {		close(fd);	} else {		/* Take out of conference */		dahdic.chan = 0;		dahdic.confno = 0;		dahdic.confmode = 0;		if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error setting conference\n");		}	}
using_pseudo
using_pseudo
{		close(fd);	}
close(fd);
close(fd)
close
close
fd
fd
{		/* Take out of conference */		dahdic.chan = 0;		dahdic.confno = 0;		dahdic.confmode = 0;		if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error setting conference\n");		}	}
dahdic.chan = 0;
dahdic.chan = 0
dahdic.chan
dahdic
dahdic
chan
0
dahdic.confno = 0;
dahdic.confno = 0
dahdic.confno
dahdic
dahdic
confno
0
dahdic.confmode = 0;
dahdic.confmode = 0
dahdic.confmode
dahdic
dahdic
confmode
0
if (ioctl(fd, DAHDI_SETCONF, &dahdic)) {			ast_log(LOG_WARNING, "Error setting conference\n");		}
ioctl(fd, DAHDI_SETCONF, &dahdic)
ioctl
ioctl
fd
fd
DAHDI_SETCONF
DAHDI_SETCONF
&dahdic
dahdic
dahdic
{			ast_log(LOG_WARNING, "Error setting conference\n");		}
ast_log(LOG_WARNING, "Error setting conference\n");
ast_log(LOG_WARNING, "Error setting conference\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Error setting conference\n"
reset_volumes(user);
reset_volumes(user)
reset_volumes
reset_volumes
user
user
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)) {		conf_play(chan, conf, LEAVE);	}
!ast_test_flag64(confflags, CONFFLAG_QUIET) && !ast_test_flag64(confflags, CONFFLAG_MONITOR) &&		!ast_test_flag64(confflags, CONFFLAG_ADMIN)
!ast_test_flag64(confflags, CONFFLAG_QUIET) && !ast_test_flag64(confflags, CONFFLAG_MONITOR)
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
!ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64(confflags, CONFFLAG_MONITOR)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MONITOR
CONFFLAG_MONITOR
!ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64(confflags, CONFFLAG_ADMIN)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_ADMIN
CONFFLAG_ADMIN
{		conf_play(chan, conf, LEAVE);	}
conf_play(chan, conf, LEAVE);
conf_play(chan, conf, LEAVE)
conf_play
conf_play
chan
chan
conf
conf
LEAVE
LEAVE
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC) && conf->users > 1) {		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		item->announcetype = CONF_HASLEFT;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		ast_mutex_lock(&conf->announcelistlock);		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);	} else if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC) && conf->users == 1) {		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */		ast_filedelete(user->namerecloc, NULL);	}
!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC) && conf->users > 1
!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER
CONFFLAG_INTROUSER
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
conf->users > 1
conf->users
conf
conf
users
1
{		struct announce_listitem *item;		if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));		ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));		item->confchan = conf->chan;		item->confusers = conf->users;		item->announcetype = CONF_HASLEFT;		if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}		ast_mutex_lock(&conf->announcelistlock);		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);		ast_cond_signal(&conf->announcelist_addition);		ast_mutex_unlock(&conf->announcelistlock);	}
struct announce_listitem *item;
struct announce_listitem *item;
struct announce_listitem
announce_listitem
*item
*
item
if (!(item = ao2_alloc(sizeof(*item), NULL)))			goto outrun;
!(item = ao2_alloc(sizeof(*item), NULL))
(item = ao2_alloc(sizeof(*item), NULL))
item = ao2_alloc(sizeof(*item), NULL)
item
item
ao2_alloc(sizeof(*item), NULL)
ao2_alloc
ao2_alloc
sizeof(*item)
(*item)
*item
item
item
NULL
NULL
goto outrun;
outrun
ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc))
ast_copy_string
ast_copy_string
item->namerecloc
item
item
namerecloc
user->namerecloc
user
user
namerecloc
sizeof(item->namerecloc)
(item->namerecloc)
item->namerecloc
item
item
namerecloc
ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language));
ast_copy_string(item->language, ast_channel_language(chan), sizeof(item->language))
ast_copy_string
ast_copy_string
item->language
item
item
language
ast_channel_language(chan)
ast_channel_language
ast_channel_language
chan
chan
sizeof(item->language)
(item->language)
item->language
item
item
language
item->confchan = conf->chan;
item->confchan = conf->chan
item->confchan
item
item
confchan
conf->chan
conf
conf
chan
item->confusers = conf->users;
item->confusers = conf->users
item->confusers
item
item
confusers
conf->users
conf
conf
users
item->announcetype = CONF_HASLEFT;
item->announcetype = CONF_HASLEFT
item->announcetype
item
item
announcetype
CONF_HASLEFT
CONF_HASLEFT
if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)){			item->vmrec = 1;		}
ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
{			item->vmrec = 1;		}
item->vmrec = 1;
item->vmrec = 1
item->vmrec
item
item
vmrec
1
ast_mutex_lock(&conf->announcelistlock);
ast_mutex_lock(&conf->announcelistlock)
ast_mutex_lock
ast_mutex_lock
&conf->announcelistlock
conf->announcelistlock
conf
conf
announcelistlock
AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry)
AST_LIST_INSERT_TAIL
AST_LIST_INSERT_TAIL
&conf->announcelist
conf->announcelist
conf
conf
announcelist
item
item
entry
entry
ast_cond_signal(&conf->announcelist_addition);
ast_cond_signal(&conf->announcelist_addition)
ast_cond_signal
ast_cond_signal
&conf->announcelist_addition
conf->announcelist_addition
conf
conf
announcelist_addition
ast_mutex_unlock(&conf->announcelistlock);
ast_mutex_unlock(&conf->announcelistlock)
ast_mutex_unlock
ast_mutex_unlock
&conf->announcelistlock
conf->announcelistlock
conf
conf
announcelistlock
if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC) && conf->users == 1) {		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */		ast_filedelete(user->namerecloc, NULL);	}
!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC) && conf->users == 1
!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW) && !ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
!ast_test_flag64(confflags, CONFFLAG_QUIET) && ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW)
!ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64(confflags, CONFFLAG_QUIET)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_QUIET
CONFFLAG_QUIET
ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSER
CONFFLAG_INTROUSER
CONFFLAG_INTROUSERNOREVIEW
CONFFLAG_INTROUSERNOREVIEW
!ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_INTROUSER_VMREC
CONFFLAG_INTROUSER_VMREC
conf->users == 1
conf->users
conf
conf
users
1
{		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */		ast_filedelete(user->namerecloc, NULL);	}
ast_filedelete(user->namerecloc, NULL);
ast_filedelete(user->namerecloc, NULL)
ast_filedelete
ast_filedelete
user->namerecloc
user
user
namerecloc
NULL
NULL
outrun:	AST_LIST_LOCK(&confs);
outrun
AST_LIST_LOCK(&confs);
AST_LIST_LOCK(&confs);
AST_LIST_LOCK
AST_LIST_LOCK
(&confs)
&confs
&
confs
if (dsp) {		ast_dsp_free(dsp);	}
dsp
dsp
{		ast_dsp_free(dsp);	}
ast_dsp_free(dsp);
ast_dsp_free(dsp)
ast_dsp_free
ast_dsp_free
dsp
dsp
if (user->user_no) {		/* Only cleanup users who really joined! */		now = ast_tvnow();		if (sent_event) {			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />					<parameter name="Duration">						<para>The length of time in seconds that the Meetme user was in the conference.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeJoin</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));		}		if (setusercount) {			conf->users--;			if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}		}		/* Remove ourselves from the container */		ao2_unlink(conf->usercontainer, user);		/* Change any states */		if (!conf->users) {			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);		} 		/* This flag is meant to kill a conference with only one participant remaining.  */		if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)) { 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL); 		}		/* Return the number of seconds the user was in the conf */		snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime));		pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs);		/* Return the RealTime bookid for CDR linking */		if (rt_schedule) {			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);		}	}
user->user_no
user
user
user_no
{		/* Only cleanup users who really joined! */		now = ast_tvnow();		if (sent_event) {			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />					<parameter name="Duration">						<para>The length of time in seconds that the Meetme user was in the conference.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeJoin</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));		}		if (setusercount) {			conf->users--;			if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}		}		/* Remove ourselves from the container */		ao2_unlink(conf->usercontainer, user);		/* Change any states */		if (!conf->users) {			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);		} 		/* This flag is meant to kill a conference with only one participant remaining.  */		if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)) { 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL); 		}		/* Return the number of seconds the user was in the conf */		snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime));		pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs);		/* Return the RealTime bookid for CDR linking */		if (rt_schedule) {			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);		}	}
now = ast_tvnow();
now = ast_tvnow()
now
now
ast_tvnow()
ast_tvnow
ast_tvnow
if (sent_event) {			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />					<parameter name="Duration">						<para>The length of time in seconds that the Meetme user was in the conference.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeJoin</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));		}
sent_event
sent_event
{			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a user leaves a MeetMe conference.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Meetme'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='MeetmeJoin']/managerEventInstance/syntax/parameter[@name='Usernum'])" />					<parameter name="Duration">						<para>The length of time in seconds that the Meetme user was in the conference.</para>					</parameter>				</syntax>				<see-also>					<ref type="managerEvent">MeetmeJoin</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));		}
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime));
ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",				"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n",				ast_channel_name(chan), ast_channel_uniqueid(chan), conf->confno,				user->user_no,				S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>"),				S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>"),				(long)(now.tv_sec - user->jointime))
ast_manager_event
ast_manager_event
chan
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"MeetmeLeave"
"Channel: %s\r\n"				"Uniqueid: %s\r\n"				"Meetme: %s\r\n"				"Usernum: %d\r\n"				"CallerIDNum: %s\r\n"				"CallerIDName: %s\r\n"				"ConnectedLineNum: %s\r\n"				"ConnectedLineName: %s\r\n"				"Duration: %ld\r\n"
ast_channel_name(chan)
ast_channel_name
ast_channel_name
chan
chan
ast_channel_uniqueid(chan)
ast_channel_uniqueid
ast_channel_uniqueid
chan
chan
conf->confno
conf
conf
confno
user->user_no
user
user
user_no
S_COR(ast_channel_caller(user->chan)->id.number.valid, ast_channel_caller(user->chan)->id.number.str, "<unknown>")
S_COR
S_COR
ast_channel_caller(user->chan)->id.number.valid
ast_channel_caller(user->chan)->id.number
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
number
valid
ast_channel_caller(user->chan)->id.number.str
ast_channel_caller(user->chan)->id.number
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
number
str
"<unknown>"
S_COR(ast_channel_caller(user->chan)->id.name.valid, ast_channel_caller(user->chan)->id.name.str, "<unknown>")
S_COR
S_COR
ast_channel_caller(user->chan)->id.name.valid
ast_channel_caller(user->chan)->id.name
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
name
valid
ast_channel_caller(user->chan)->id.name.str
ast_channel_caller(user->chan)->id.name
ast_channel_caller(user->chan)->id
ast_channel_caller(user->chan)
ast_channel_caller
ast_channel_caller
user->chan
user
user
chan
id
name
str
"<unknown>"
S_COR(ast_channel_connected(user->chan)->id.number.valid, ast_channel_connected(user->chan)->id.number.str, "<unknown>")
S_COR
S_COR
ast_channel_connected(user->chan)->id.number.valid
ast_channel_connected(user->chan)->id.number
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
number
valid
ast_channel_connected(user->chan)->id.number.str
ast_channel_connected(user->chan)->id.number
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
number
str
"<unknown>"
S_COR(ast_channel_connected(user->chan)->id.name.valid, ast_channel_connected(user->chan)->id.name.str, "<unknown>")
S_COR
S_COR
ast_channel_connected(user->chan)->id.name.valid
ast_channel_connected(user->chan)->id.name
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
name
valid
ast_channel_connected(user->chan)->id.name.str
ast_channel_connected(user->chan)->id.name
ast_channel_connected(user->chan)->id
ast_channel_connected(user->chan)
ast_channel_connected
ast_channel_connected
user->chan
user
user
chan
id
name
str
"<unknown>"
(long)(now.tv_sec - user->jointime)
long
long

(now.tv_sec - user->jointime)
now.tv_sec - user->jointime
now.tv_sec
now
now
tv_sec
user->jointime
user
user
jointime
if (setusercount) {			conf->users--;			if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}		}
setusercount
setusercount
{			conf->users--;			if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}			if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}		}
conf->users--;
conf->users--
conf->users
conf
conf
users
if (rt_log_members) {				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}
rt_log_members
rt_log_members
{				/* Update table */				snprintf(members, sizeof(members), "%d", conf->users);				ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);				ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);			}
snprintf(members, sizeof(members), "%d", conf->users);
snprintf(members, sizeof(members), "%d", conf->users)
snprintf
snprintf
members
members
sizeof(members)
(members)
members
members
"%d"
conf->users
conf
conf
users
ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL);
ast_realtime_require_field("meetme",					"confno", strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2, strlen(conf->confno),					"members", RQ_UINTEGER1, strlen(members),					NULL)
ast_realtime_require_field
ast_realtime_require_field
"meetme"
"confno"
strlen(conf->confno) > 7 ? RQ_UINTEGER4 : strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2
strlen(conf->confno) > 7
strlen(conf->confno)
strlen
strlen
conf->confno
conf
conf
confno
7
RQ_UINTEGER4
RQ_UINTEGER4
strlen(conf->confno) > 4 ? RQ_UINTEGER3 : RQ_UINTEGER2
strlen(conf->confno) > 4
strlen(conf->confno)
strlen
strlen
conf->confno
conf
conf
confno
4
RQ_UINTEGER3
RQ_UINTEGER3
RQ_UINTEGER2
RQ_UINTEGER2
strlen(conf->confno)
strlen
strlen
conf->confno
conf
conf
confno
"members"
RQ_UINTEGER1
RQ_UINTEGER1
strlen(members)
strlen
strlen
members
members
NULL
NULL
ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);
ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL)
ast_update_realtime
ast_update_realtime
"meetme"
"confno"
conf->confno
conf
conf
confno
"members"
members
members
NULL
NULL
if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {				conf->markedusers--;			}
ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_MARKEDUSER
CONFFLAG_MARKEDUSER
{				conf->markedusers--;			}
conf->markedusers--;
conf->markedusers--
conf->markedusers
conf
conf
markedusers
ao2_unlink(conf->usercontainer, user);
ao2_unlink(conf->usercontainer, user)
ao2_unlink
ao2_unlink
conf->usercontainer
conf
conf
usercontainer
user
user
if (!conf->users) {			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);		}
!conf->users
conf->users
conf
conf
users
{			ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);		}
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno);
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
"meetme:%s"
conf->confno
conf
conf
confno
if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)) { 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL); 		}
conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)
conf->users == 1
conf->users
conf
conf
users
1
ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)
ast_test_flag64
ast_test_flag64
confflags
confflags
CONFFLAG_KILL_LAST_MAN_STANDING
CONFFLAG_KILL_LAST_MAN_STANDING
{ 			ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL); 		}
ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL);
ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL)
ao2_callback
ao2_callback
conf->usercontainer
conf
conf
usercontainer
0
user_set_hangup_cb
user_set_hangup_cb
NULL
NULL
snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime));
snprintf(meetmesecs, sizeof(meetmesecs), "%d", (int) (time(NULL) - user->jointime))
snprintf
snprintf
meetmesecs
meetmesecs
sizeof(meetmesecs)
(meetmesecs)
meetmesecs
meetmesecs
"%d"
(int) (time(NULL) - user->jointime)
int
int

(time(NULL) - user->jointime)
time(NULL) - user->jointime
time(NULL)
time
time
NULL
NULL
user->jointime
user
user
jointime
pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs);
pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
chan
chan
"MEETMESECS"
meetmesecs
meetmesecs
if (rt_schedule) {			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);		}
rt_schedule
rt_schedule
{			pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);		}
pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid);
pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
chan
chan
"MEETMEBOOKID"
conf->bookid
conf
conf
bookid
ao2_ref(user, -1);
ao2_ref(user, -1)
ao2_ref
ao2_ref
user
user
-1
1
AST_LIST_UNLOCK(&confs);
AST_LIST_UNLOCK(&confs)
AST_LIST_UNLOCK
AST_LIST_UNLOCK
&confs
confs
confs
conf_run_cleanup:	cap_slin = ast_format_cap_destroy(cap_slin);
conf_run_cleanup
cap_slin = ast_format_cap_destroy(cap_slin);
cap_slin = ast_format_cap_destroy(cap_slin)
cap_slin
cap_slin
ast_format_cap_destroy(cap_slin)
ast_format_cap_destroy
ast_format_cap_destroy
cap_slin
cap_slin
return ret;
ret
ret
-----joern-----
(5230,4167,0)
(378,4721,0)
(2326,754,0)
(4292,1798,0)
(4274,4894,0)
(1773,5089,0)
(942,5059,0)
(832,1942,0)
(125,3497,0)
(505,3095,0)
(2147,4196,0)
(4154,1321,0)
(2744,4346,0)
(102,5150,0)
(3543,3097,0)
(399,4097,0)
(360,1917,0)
(256,5378,0)
(568,1620,0)
(4450,5127,0)
(3992,2190,0)
(4825,2678,0)
(553,2307,0)
(2429,2190,0)
(337,191,0)
(190,941,0)
(3043,5686,0)
(2449,2330,0)
(1188,267,0)
(205,4056,0)
(5529,2629,0)
(2841,4877,0)
(2454,4736,0)
(5552,3635,0)
(3316,1912,0)
(4864,573,0)
(5267,441,0)
(3191,926,0)
(2438,4688,0)
(5450,3676,0)
(5642,2971,0)
(4068,4736,0)
(457,977,0)
(3337,2380,0)
(4210,4469,0)
(4695,500,0)
(5694,1507,0)
(2508,1996,0)
(188,2241,0)
(2326,5093,0)
(4794,2902,0)
(3403,3942,0)
(4379,1844,0)
(5067,5675,0)
(5174,3292,0)
(1012,3984,0)
(3433,3582,0)
(1196,591,0)
(1168,29,0)
(5682,3150,0)
(4437,611,0)
(3064,1752,0)
(5654,1238,0)
(2082,2190,0)
(3140,1844,0)
(4327,1406,0)
(4115,3844,0)
(856,3693,0)
(3325,58,0)
(1399,627,0)
(5398,627,0)
(1315,1844,0)
(2777,4636,0)
(5210,3355,0)
(2983,5524,0)
(2437,4255,0)
(1129,3942,0)
(5617,2810,0)
(1919,24,0)
(4387,3292,0)
(4787,5682,0)
(5454,3292,0)
(4663,4084,0)
(2121,5049,0)
(3391,5553,0)
(3506,2983,0)
(3416,1015,0)
(2626,4170,0)
(3687,2837,0)
(2790,3289,0)
(4055,170,0)
(221,2706,0)
(983,2251,0)
(3679,4194,0)
(594,5055,0)
(288,1565,0)
(3780,637,0)
(535,4676,0)
(3812,1844,0)
(409,1284,0)
(110,329,0)
(823,3064,0)
(2477,5479,0)
(4182,2256,0)
(2405,3824,0)
(2512,1551,0)
(2873,2015,0)
(3811,2671,0)
(933,611,0)
(3726,3204,0)
(860,3582,0)
(4663,4412,0)
(4943,171,0)
(2381,2706,0)
(3144,2179,0)
(3139,4174,0)
(4352,1503,0)
(5019,4549,0)
(2028,703,0)
(2365,1844,0)
(3185,2603,0)
(4313,2026,0)
(4998,3165,0)
(2922,5086,0)
(1553,4338,0)
(1305,1571,0)
(1863,378,0)
(5228,1788,0)
(5061,5075,0)
(1387,855,0)
(2873,1945,0)
(3588,2811,0)
(503,627,0)
(1791,2391,0)
(5137,2590,0)
(246,307,0)
(1717,796,0)
(1081,2710,0)
(5301,2072,0)
(5704,5539,0)
(2945,1764,0)
(1401,5138,0)
(1434,3765,0)
(2048,4851,0)
(1110,133,0)
(5550,2190,0)
(159,521,0)
(89,4275,0)
(3201,308,0)
(1811,4161,0)
(3273,2544,0)
(4958,4977,0)
(5475,2061,0)
(4153,4901,0)
(856,81,0)
(2855,4190,0)
(5376,739,0)
(131,2322,0)
(1131,2724,0)
(2123,1701,0)
(3949,28,0)
(4565,1844,0)
(4470,2088,0)
(5696,5059,0)
(332,667,0)
(1881,5370,0)
(4489,1701,0)
(1460,593,0)
(5683,1321,0)
(3581,1907,0)
(640,3442,0)
(5093,4663,0)
(4146,549,0)
(136,1396,0)
(5720,5630,0)
(2593,1844,0)
(4399,3240,0)
(4913,2496,0)
(1603,2314,0)
(25,3045,0)
(4530,939,0)
(4342,1663,0)
(3957,1798,0)
(1379,627,0)
(498,3292,0)
(3990,3636,0)
(2046,2577,0)
(4457,2504,0)
(4735,609,0)
(4044,1915,0)
(792,2630,0)
(836,1129,0)
(3119,3888,0)
(994,2330,0)
(518,3292,0)
(2887,58,0)
(4088,267,0)
(2301,5504,0)
(4432,5073,0)
(1310,5517,0)
(5382,2693,0)
(4149,3010,0)
(3328,1917,0)
(4151,5704,0)
(1702,1275,0)
(4485,1414,0)
(280,2340,0)
(1443,2228,0)
(3979,2997,0)
(3196,3252,0)
(3657,1844,0)
(2918,5713,0)
(702,3273,0)
(1218,2916,0)
(4745,1698,0)
(1904,1646,0)
(508,1671,0)
(2326,1230,0)
(2768,1211,0)
(3234,4578,0)
(4577,4499,0)
(2880,709,0)
(5532,4964,0)
(5682,4084,0)
(3198,1963,0)
(4896,3608,0)
(4229,3408,0)
(5637,1997,0)
(4815,498,0)
(4415,555,0)
(3208,777,0)
(40,1524,0)
(4806,720,0)
(2571,154,0)
(5159,825,0)
(2252,809,0)
(3505,1509,0)
(2978,2449,0)
(1059,195,0)
(1257,3847,0)
(3101,3151,0)
(2565,2525,0)
(1749,952,0)
(3892,4473,0)
(5120,5149,0)
(2562,5048,0)
(3874,4566,0)
(296,5372,0)
(100,4563,0)
(4184,5106,0)
(874,5486,0)
(2316,4068,0)
(3328,331,0)
(843,5488,0)
(5370,5697,0)
(3978,1844,0)
(4564,2959,0)
(4095,5075,0)
(292,3607,0)
(3197,5266,0)
(4543,639,0)
(5682,3197,0)
(3442,640,0)
(839,1721,0)
(1250,1745,0)
(3979,2325,0)
(1402,3853,0)
(3208,1844,0)
(3818,1263,0)
(3159,1389,0)
(3888,4516,0)
(3155,5059,0)
(4145,627,0)
(3703,5604,0)
(5643,1844,0)
(3015,5247,0)
(4900,2902,0)
(1966,4055,0)
(2507,4668,0)
(707,2129,0)
(4939,104,0)
(5057,1844,0)
(1263,4738,0)
(2890,273,0)
(2634,2570,0)
(5546,1915,0)
(3530,2111,0)
(3064,4807,0)
(4064,4161,0)
(3397,1625,0)
(1744,958,0)
(5349,4366,0)
(534,4161,0)
(2340,280,0)
(4405,5444,0)
(1215,3292,0)
(4758,4642,0)
(3088,2809,0)
(5392,4450,0)
(3064,3676,0)
(5070,3582,0)
(44,5077,0)
(4095,533,0)
(4789,2899,0)
(1492,50,0)
(54,4033,0)
(2514,5707,0)
(2326,2540,0)
(5071,5415,0)
(5100,44,0)
(3875,3727,0)
(4663,5203,0)
(1129,1082,0)
(3923,2264,0)
(1912,4040,0)
(1698,4745,0)
(4731,5059,0)
(402,2123,0)
(2712,2040,0)
(393,4496,0)
(2969,44,0)
(1191,2596,0)
(11,5621,0)
(1322,2187,0)
(5187,1368,0)
(1011,4071,0)
(385,5044,0)
(368,1844,0)
(4799,4531,0)
(5411,2687,0)
(2326,3676,0)
(3637,1857,0)
(5208,4918,0)
(4425,4457,0)
(5464,674,0)
(5093,3681,0)
(1996,2508,0)
(3064,4102,0)
(2204,4159,0)
(4863,2803,0)
(3227,5633,0)
(2271,3824,0)
(3781,164,0)
(834,2059,0)
(788,5029,0)
(5124,1313,0)
(1771,4888,0)
(3262,1648,0)
(2500,1575,0)
(3042,2640,0)
(1115,334,0)
(2902,3292,0)
(4241,2494,0)
(1055,2706,0)
(5637,1844,0)
(2046,1844,0)
(1545,1012,0)
(5260,3713,0)
(4686,1242,0)
(4527,4724,0)
(1860,3097,0)
(3509,4394,0)
(3197,2072,0)
(2520,1101,0)
(2104,2213,0)
(5560,50,0)
(1477,2721,0)
(1092,5117,0)
(2700,5059,0)
(3869,2403,0)
(1248,1844,0)
(4855,622,0)
(3979,4848,0)
(2915,3402,0)
(1414,3783,0)
(2475,1613,0)
(2124,4804,0)
(4220,5194,0)
(5475,4299,0)
(3871,1892,0)
(4193,3764,0)
(5242,1844,0)
(4600,1611,0)
(3280,2190,0)
(1747,4216,0)
(1711,4680,0)
(4929,5102,0)
(4889,1051,0)
(5520,4854,0)
(2784,5162,0)
(4244,2190,0)
(4676,5731,0)
(4876,5059,0)
(1860,2723,0)
(3336,1035,0)
(4289,90,0)
(3480,464,0)
(787,4396,0)
(5343,5456,0)
(3497,5210,0)
(2736,4553,0)
(3741,2149,0)
(3979,3093,0)
(41,627,0)
(4513,778,0)
(4349,1193,0)
(5287,2537,0)
(1138,2869,0)
(2303,4130,0)
(1172,5120,0)
(1779,4872,0)
(2918,4241,0)
(5482,1834,0)
(4321,3863,0)
(270,128,0)
(0,4964,0)
(5364,1788,0)
(5419,44,0)
(2967,3724,0)
(1000,5535,0)
(4650,2678,0)
(1611,2942,0)
(1007,1442,0)
(873,2050,0)
(2387,3506,0)
(235,5542,0)
(622,5059,0)
(1873,1687,0)
(1778,627,0)
(3593,584,0)
(792,343,0)
(5432,2190,0)
(2656,2015,0)
(2239,2762,0)
(5449,1348,0)
(3838,5756,0)
(5078,2673,0)
(2002,1099,0)
(2685,1844,0)
(2609,5379,0)
(896,4971,0)
(4051,931,0)
(5384,3204,0)
(4687,3452,0)
(5370,1534,0)
(5718,2036,0)
(918,1862,0)
(703,3292,0)
(2099,2522,0)
(1522,2497,0)
(3512,473,0)
(4305,1274,0)
(726,2251,0)
(4429,2126,0)
(191,337,0)
(2777,4058,0)
(5696,1937,0)
(2575,2477,0)
(318,1263,0)
(2203,369,0)
(4663,2325,0)
(1816,3119,0)
(103,1630,0)
(736,3679,0)
(3987,2595,0)
(4316,3763,0)
(1891,2864,0)
(4006,3685,0)
(1183,3681,0)
(2099,1844,0)
(1081,883,0)
(3392,5528,0)
(4800,1752,0)
(4658,4979,0)
(3843,1847,0)
(5334,1663,0)
(2908,2800,0)
(4515,5196,0)
(4663,4632,0)
(3745,2868,0)
(4326,4728,0)
(1423,1844,0)
(5474,4037,0)
(303,4208,0)
(1530,164,0)
(5136,1767,0)
(1526,2755,0)
(5064,5146,0)
(5682,4736,0)
(3555,5573,0)
(1513,2639,0)
(2797,1802,0)
(716,1507,0)
(5683,4124,0)
(2434,1737,0)
(5441,1844,0)
(4701,10,0)
(4918,2145,0)
(3609,4170,0)
(4252,2111,0)
(2474,4970,0)
(1779,3895,0)
(3705,4535,0)
(5639,2708,0)
(859,1241,0)
(3630,242,0)
(3287,2322,0)
(2151,1844,0)
(2146,3992,0)
(5453,1889,0)
(1027,4864,0)
(3454,2508,0)
(2110,5073,0)
(834,1844,0)
(1672,2327,0)
(1083,3764,0)
(5307,1851,0)
(1995,2144,0)
(4269,1844,0)
(2675,1214,0)
(4714,3397,0)
(4357,136,0)
(3511,581,0)
(3185,1915,0)
(2013,4927,0)
(1660,3960,0)
(4920,976,0)
(2316,3979,0)
(4519,3906,0)
(2487,5093,0)
(5544,1265,0)
(3186,5629,0)
(5299,1421,0)
(1313,5124,0)
(2918,2758,0)
(143,5244,0)
(2770,3066,0)
(3844,1026,0)
(405,5020,0)
(4525,4022,0)
(3815,5249,0)
(2419,3625,0)
(4330,1130,0)
(3979,2030,0)
(5570,1009,0)
(28,3949,0)
(3051,2059,0)
(1079,627,0)
(4451,3790,0)
(4818,329,0)
(5129,1146,0)
(4946,5458,0)
(1093,1638,0)
(823,2902,0)
(1662,3713,0)
(3177,5287,0)
(3951,4620,0)
(2316,919,0)
(5699,3734,0)
(2328,4666,0)
(1542,3333,0)
(2472,3216,0)
(5026,4828,0)
(5073,1132,0)
(3464,4294,0)
(2973,5383,0)
(3092,2850,0)
(5682,4102,0)
(2503,4645,0)
(3450,2034,0)
(4216,1747,0)
(2326,4905,0)
(4676,627,0)
(4524,3439,0)
(126,5532,0)
(14,4726,0)
(4465,1314,0)
(735,627,0)
(4250,724,0)
(916,627,0)
(4378,4161,0)
(330,5449,0)
(4680,1579,0)
(2627,808,0)
(4991,511,0)
(1264,4632,0)
(2326,281,0)
(541,1052,0)
(529,3802,0)
(3627,3238,0)
(5696,3685,0)
(158,2190,0)
(1453,3907,0)
(1843,77,0)
(2307,1844,0)
(713,4328,0)
(2352,4497,0)
(644,511,0)
(3722,202,0)
(4177,1240,0)
(5522,2145,0)
(1949,3292,0)
(3445,3216,0)
(3766,2540,0)
(317,3441,0)
(1301,3341,0)
(1059,4107,0)
(129,5311,0)
(1864,5059,0)
(39,1917,0)
(2918,3676,0)
(746,4324,0)
(2380,2190,0)
(1815,627,0)
(2457,1075,0)
(1195,2914,0)
(5682,5099,0)
(2111,4257,0)
(1015,2563,0)
(5340,3988,0)
(5066,4804,0)
(5672,678,0)
(3586,355,0)
(4092,2473,0)
(688,4104,0)
(1466,3185,0)
(5334,370,0)
(2699,2759,0)
(3888,4982,0)
(5048,4621,0)
(2482,1778,0)
(425,2424,0)
(3079,627,0)
(3699,2285,0)
(2993,291,0)
(4975,4385,0)
(4734,4183,0)
(2050,3116,0)
(2759,144,0)
(4597,774,0)
(5131,2392,0)
(4529,3664,0)
(3248,627,0)
(1646,1844,0)
(4544,3280,0)
(5682,4449,0)
(3655,2553,0)
(4627,615,0)
(5601,4991,0)
(3993,4346,0)
(430,2796,0)
(1123,3744,0)
(2522,2921,0)
(778,1844,0)
(3171,4267,0)
(5735,4239,0)
(2708,1361,0)
(1400,4391,0)
(5621,922,0)
(5595,5720,0)
(5067,3039,0)
(1534,5370,0)
(5647,4328,0)
(2776,3614,0)
(690,627,0)
(4734,3635,0)
(2708,5639,0)
(4158,2513,0)
(955,193,0)
(3383,4383,0)
(4851,1737,0)
(5419,1025,0)
(4924,1613,0)
(1555,3921,0)
(2508,2159,0)
(5067,1917,0)
(1558,5027,0)
(2998,4259,0)
(1681,296,0)
(1593,1825,0)
(670,1539,0)
(3983,3292,0)
(4928,2676,0)
(4120,453,0)
(3681,511,0)
(4203,2292,0)
(5224,4721,0)
(792,3347,0)
(2480,5059,0)
(4766,5176,0)
(5593,3186,0)
(3817,549,0)
(3845,4673,0)
(3407,2477,0)
(5469,5059,0)
(1720,1179,0)
(4457,4425,0)
(4895,4990,0)
(5249,2898,0)
(3064,808,0)
(2458,2262,0)
(4178,5574,0)
(2404,122,0)
(3107,3420,0)
(3328,370,0)
(3408,3188,0)
(3563,3979,0)
(2326,1802,0)
(2903,3551,0)
(1226,1079,0)
(4376,4104,0)
(1136,2677,0)
(374,4138,0)
(3891,3669,0)
(4111,3292,0)
(307,3064,0)
(5050,3816,0)
(5599,2488,0)
(3623,773,0)
(2326,1456,0)
(5387,4205,0)
(3335,918,0)
(2939,3473,0)
(2976,5655,0)
(2091,4851,0)
(4663,4916,0)
(2812,3418,0)
(67,2706,0)
(4334,3846,0)
(967,291,0)
(3782,3011,0)
(1496,4195,0)
(5550,3176,0)
(5301,154,0)
(5061,2032,0)
(1516,3406,0)
(1230,4141,0)
(919,2316,0)
(3961,3292,0)
(1874,2242,0)
(1863,5059,0)
(3641,627,0)
(1438,4578,0)
(2475,5059,0)
(1104,3197,0)
(4327,519,0)
(5325,3414,0)
(5057,511,0)
(3760,5658,0)
(17,4048,0)
(649,1844,0)
(1558,1511,0)
(470,3923,0)
(1691,16,0)
(3298,667,0)
(2134,4195,0)
(4740,12,0)
(4401,44,0)
(3857,1844,0)
(1032,1827,0)
(4280,5075,0)
(1657,5563,0)
(1422,1387,0)
(799,91,0)
(1847,3843,0)
(967,1844,0)
(89,3741,0)
(792,3422,0)
(2376,667,0)
(3130,1478,0)
(1765,2043,0)
(1976,599,0)
(4717,1844,0)
(4034,4352,0)
(4774,2205,0)
(552,2664,0)
(531,4777,0)
(950,627,0)
(3300,2225,0)
(3450,588,0)
(5264,1631,0)
(1028,2464,0)
(721,4255,0)
(2834,1659,0)
(1911,1844,0)
(4902,389,0)
(5415,2109,0)
(2791,3582,0)
(5502,125,0)
(5682,2392,0)
(271,4383,0)
(3106,1582,0)
(991,5059,0)
(4294,3464,0)
(2326,1778,0)
(1098,5139,0)
(1804,979,0)
(1822,4642,0)
(2745,3292,0)
(3114,1677,0)
(5020,405,0)
(4840,3311,0)
(1694,511,0)
(448,2687,0)
(2326,2255,0)
(1075,1737,0)
(4033,3204,0)
(1647,2925,0)
(910,4365,0)
(2193,1877,0)
(5486,2190,0)
(1413,4933,0)
(4663,2255,0)
(3158,1414,0)
(3344,1396,0)
(2898,3510,0)
(3401,1388,0)
(2202,1009,0)
(2502,1600,0)
(4037,1049,0)
(4126,5174,0)
(2500,1663,0)
(2287,1369,0)
(546,1957,0)
(5275,1844,0)
(5187,1441,0)
(2043,1275,0)
(3348,3956,0)
(5333,5536,0)
(5749,2918,0)
(351,2344,0)
(88,4122,0)
(2542,2190,0)
(773,4766,0)
(1600,2190,0)
(1863,698,0)
(935,3370,0)
(2555,627,0)
(5669,4002,0)
(1077,4851,0)
(4663,5036,0)
(2344,3635,0)
(3393,3292,0)
(1040,514,0)
(2476,627,0)
(3133,4270,0)
(3755,3678,0)
(2317,5493,0)
(2918,4731,0)
(1987,2596,0)
(4970,608,0)
(375,4701,0)
(3751,1960,0)
(5682,4632,0)
(1392,182,0)
(3671,4786,0)
(5282,5682,0)
(5159,5629,0)
(2601,5716,0)
(429,2475,0)
(800,5317,0)
(4204,749,0)
(3982,938,0)
(5396,2818,0)
(730,1852,0)
(4150,2099,0)
(1559,5441,0)
(3829,259,0)
(3671,4636,0)
(5201,171,0)
(1767,3582,0)
(4,3328,0)
(2201,4933,0)
(4347,4365,0)
(5116,4334,0)
(3282,3713,0)
(4022,195,0)
(1993,5116,0)
(5399,1427,0)
(2326,2480,0)
(4531,3292,0)
(3618,3161,0)
(4766,627,0)
(53,4632,0)
(3807,3311,0)
(98,2228,0)
(136,4357,0)
(3979,3821,0)
(1924,2425,0)
(1464,1321,0)
(904,1651,0)
(5703,1844,0)
(3706,1911,0)
(1342,2190,0)
(3979,5036,0)
(211,5741,0)
(1459,128,0)
(2428,1698,0)
(5300,1090,0)
(5523,100,0)
(1773,627,0)
(216,3283,0)
(4069,662,0)
(4925,528,0)
(3314,3292,0)
(1889,4611,0)
(5399,5055,0)
(4341,5059,0)
(2209,2017,0)
(5235,2327,0)
(1113,3452,0)
(3720,627,0)
(4207,3734,0)
(2791,587,0)
(1167,415,0)
(3848,3115,0)
(4965,627,0)
(1268,2190,0)
(2918,4628,0)
(4416,4318,0)
(533,5075,0)
(2839,3030,0)
(4102,1396,0)
(237,4933,0)
(4051,5574,0)
(1199,226,0)
(169,4497,0)
(3064,565,0)
(1095,3292,0)
(310,1166,0)
(369,627,0)
(1661,2399,0)
(3250,762,0)
(1175,627,0)
(5306,639,0)
(2593,1056,0)
(2917,430,0)
(969,3292,0)
(1211,2691,0)
(3032,334,0)
(5438,1571,0)
(5080,2520,0)
(642,133,0)
(3998,881,0)
(4690,1412,0)
(3590,1574,0)
(5182,1487,0)
(3035,1068,0)
(4827,3292,0)
(4413,2553,0)
(875,4775,0)
(1826,1772,0)
(3422,4168,0)
(4190,2855,0)
(982,3678,0)
(711,4815,0)
(1502,5766,0)
(1582,3292,0)
(1349,1460,0)
(408,5622,0)
(3082,1752,0)
(3428,1618,0)
(5644,4939,0)
(427,2365,0)
(125,5502,0)
(4112,5100,0)
(5634,195,0)
(3761,2190,0)
(1616,1235,0)
(4390,489,0)
(4046,1018,0)
(2075,3847,0)
(3711,3887,0)
(183,3726,0)
(2069,146,0)
(1523,2190,0)
(5682,4628,0)
(176,484,0)
(667,1844,0)
(658,5148,0)
(4154,5683,0)
(4725,1785,0)
(5426,1076,0)
(3458,920,0)
(1450,2902,0)
(4412,3605,0)
(2422,4638,0)
(593,1460,0)
(674,153,0)
(4391,596,0)
(3328,4637,0)
(1393,243,0)
(1441,5187,0)
(1768,501,0)
(2573,145,0)
(254,343,0)
(2328,4621,0)
(2255,1449,0)
(938,2902,0)
(3721,940,0)
(2326,208,0)
(2827,487,0)
(5363,3603,0)
(5027,1558,0)
(1128,4161,0)
(5682,5469,0)
(4140,4102,0)
(2004,4955,0)
(2326,3197,0)
(3472,1259,0)
(1441,1844,0)
(2292,4391,0)
(4381,2964,0)
(4546,2190,0)
(5485,734,0)
(3076,2884,0)
(2707,5061,0)
(3328,5149,0)
(410,1396,0)
(3270,2483,0)
(5069,2923,0)
(4639,3483,0)
(4932,3610,0)
(2392,627,0)
(2918,5036,0)
(4491,4112,0)
(3253,2015,0)
(2597,4407,0)
(5369,1067,0)
(2918,1910,0)
(101,4802,0)
(424,4267,0)
(5011,2328,0)
(2326,1910,0)
(4970,2474,0)
(5056,4019,0)
(1541,5015,0)
(4902,868,0)
(997,4346,0)
(2051,2306,0)
(1805,1844,0)
(5067,1101,0)
(2711,5442,0)
(1584,1844,0)
(2777,2025,0)
(212,5055,0)
(961,627,0)
(4663,2317,0)
(1790,2716,0)
(5655,4648,0)
(5265,1571,0)
(2486,5702,0)
(2636,599,0)
(4249,1651,0)
(1717,4845,0)
(1470,4258,0)
(399,2745,0)
(3016,3428,0)
(2621,3816,0)
(4192,1737,0)
(4318,1961,0)
(3837,501,0)
(2833,3582,0)
(4719,3402,0)
(5659,4515,0)
(4430,883,0)
(1072,1844,0)
(2912,938,0)
(3010,492,0)
(2314,2190,0)
(3299,3252,0)
(58,2887,0)
(932,3902,0)
(4663,1775,0)
(1527,758,0)
(4703,5469,0)
(144,2759,0)
(2796,2187,0)
(95,2545,0)
(4848,1286,0)
(1426,2190,0)
(5681,1844,0)
(1166,4929,0)
(5448,1215,0)
(2889,1649,0)
(2326,3669,0)
(73,4652,0)
(4062,5283,0)
(898,1857,0)
(2677,2753,0)
(2327,5235,0)
(147,5562,0)
(1783,2030,0)
(4068,4300,0)
(3816,2606,0)
(5306,2393,0)
(2603,2926,0)
(5517,3257,0)
(781,3292,0)
(46,5226,0)
(5127,4087,0)
(2872,5059,0)
(4977,1844,0)
(1127,5515,0)
(635,5028,0)
(4944,271,0)
(1292,1797,0)
(582,1701,0)
(2348,2906,0)
(1920,4565,0)
(4379,2521,0)
(2617,4964,0)
(5199,2922,0)
(3386,2422,0)
(1820,4831,0)
(5434,5350,0)
(3064,3273,0)
(723,611,0)
(3417,1798,0)
(4854,4321,0)
(2529,4068,0)
(1295,5157,0)
(1111,1844,0)
(1042,627,0)
(5682,281,0)
(1974,1564,0)
(2184,3037,0)
(5468,2624,0)
(2756,3473,0)
(2822,706,0)
(3311,627,0)
(5404,3884,0)
(3143,4908,0)
(4698,751,0)
(2430,3907,0)
(338,1175,0)
(1534,1202,0)
(4078,5504,0)
(1096,4773,0)
(3893,296,0)
(138,1960,0)
(4289,1415,0)
(1651,4002,0)
(4382,265,0)
(4174,3202,0)
(2747,627,0)
(823,3247,0)
(2833,1486,0)
(750,2481,0)
(1347,5420,0)
(1994,1369,0)
(4645,2277,0)
(555,4415,0)
(41,271,0)
(5605,3748,0)
(3690,2614,0)
(4973,1411,0)
(789,5603,0)
(1973,1103,0)
(2099,673,0)
(5404,2422,0)
(3960,4243,0)
(4049,604,0)
(34,3292,0)
(2918,4736,0)
(383,958,0)
(4350,5515,0)
(362,595,0)
(3064,4848,0)
(5087,1824,0)
(4508,584,0)
(4516,2826,0)
(4595,1596,0)
(3439,2808,0)
(3997,3475,0)
(3775,101,0)
(3372,1844,0)
(1666,5139,0)
(2397,3204,0)
(974,5561,0)
(1315,533,0)
(294,1215,0)
(2581,2141,0)
(1037,4473,0)
(3170,2563,0)
(609,4735,0)
(4725,627,0)
(2687,3996,0)
(4900,5059,0)
(4077,5025,0)
(4194,3679,0)
(4722,943,0)
(4231,2190,0)
(2921,2522,0)
(891,2179,0)
(3805,1844,0)
(822,2168,0)
(943,5055,0)
(523,4341,0)
(5567,1235,0)
(4168,3422,0)
(1301,2207,0)
(1234,3578,0)
(384,1887,0)
(4791,5392,0)
(1849,1505,0)
(1893,2476,0)
(5481,5633,0)
(5256,2801,0)
(2918,3646,0)
(2326,209,0)
(4908,3143,0)
(2856,2805,0)
(2918,1831,0)
(4872,1779,0)
(4671,627,0)
(4271,3015,0)
(2387,3393,0)
(2678,2741,0)
(4118,3093,0)
(3739,4059,0)
(3971,5536,0)
(4947,5287,0)
(1685,1716,0)
(4495,4374,0)
(3328,1575,0)
(3180,831,0)
(2377,273,0)
(5366,3907,0)
(3770,3253,0)
(4030,5355,0)
(4931,2700,0)
(5705,3960,0)
(915,2143,0)
(2372,5350,0)
(2139,4243,0)
(389,3184,0)
(309,2393,0)
(1151,1319,0)
(1140,930,0)
(3172,2809,0)
(4663,4807,0)
(3969,5701,0)
(4587,1710,0)
(1008,4542,0)
(5682,4412,0)
(5051,1379,0)
(5292,5126,0)
(146,627,0)
(4611,4817,0)
(4908,1844,0)
(3879,674,0)
(4079,1274,0)
(1239,3875,0)
(5071,5608,0)
(2964,3028,0)
(31,394,0)
(2370,1806,0)
(519,1368,0)
(488,5079,0)
(1208,5621,0)
(5385,973,0)
(3999,3110,0)
(3071,3600,0)
(606,4391,0)
(4348,4824,0)
(4663,1647,0)
(1533,3571,0)
(1494,4877,0)
(81,856,0)
(5682,2152,0)
(3619,41,0)
(5634,2907,0)
(4154,3440,0)
(3851,3292,0)
(5682,2821,0)
(3763,5041,0)
(1171,1844,0)
(5729,5059,0)
(4875,3459,0)
(5261,369,0)
(5445,2075,0)
(739,5757,0)
(5030,4924,0)
(3726,1574,0)
(2758,5176,0)
(3411,3650,0)
(2520,4991,0)
(4170,4724,0)
(3897,4472,0)
(5757,224,0)
(5484,1893,0)
(3824,2271,0)
(4661,881,0)
(5392,2416,0)
(2603,3185,0)
(3734,4207,0)
(4786,1648,0)
(3612,4598,0)
(4023,1426,0)
(4280,1844,0)
(5682,3821,0)
(1364,5427,0)
(5296,2959,0)
(5761,1492,0)
(2246,5510,0)
(1890,4844,0)
(5184,3353,0)
(4697,5077,0)
(1075,5059,0)
(902,2976,0)
(960,4249,0)
(4575,609,0)
(128,270,0)
(1487,4551,0)
(5670,34,0)
(1964,164,0)
(2016,4411,0)
(1282,1230,0)
(947,1613,0)
(5425,2633,0)
(4794,3979,0)
(4626,5372,0)
(2704,2540,0)
(6,4569,0)
(1645,3552,0)
(5740,3559,0)
(996,2552,0)
(2040,4065,0)
(3053,5298,0)
(3774,224,0)
(2593,1133,0)
(1189,2274,0)
(3469,5755,0)
(4823,1798,0)
(3091,3709,0)
(1615,2557,0)
(3354,3292,0)
(52,1721,0)
(5323,791,0)
(792,1629,0)
(2225,195,0)
(993,3292,0)
(3248,537,0)
(5120,3406,0)
(2579,803,0)
(2926,5059,0)
(514,4157,0)
(3202,4174,0)
(4457,1844,0)
(1237,4112,0)
(2632,1817,0)
(4659,3680,0)
(5061,1083,0)
(2448,3292,0)
(5464,1844,0)
(3625,3631,0)
(4060,4221,0)
(731,4054,0)
(4884,2716,0)
(5752,777,0)
(3064,1910,0)
(876,5645,0)
(384,3113,0)
(26,3846,0)
(4947,1574,0)
(2481,442,0)
(1034,692,0)
(5217,2075,0)
(5067,3417,0)
(758,3706,0)
(5500,4527,0)
(862,5143,0)
(2409,3392,0)
(2701,4786,0)
(5675,5756,0)
(3966,2434,0)
(5360,1613,0)
(1369,2070,0)
(3730,4961,0)
(3463,2637,0)
(1146,627,0)
(2554,1330,0)
(121,4844,0)
(2954,3478,0)
(4616,3569,0)
(4324,1844,0)
(4663,1456,0)
(2463,4641,0)
(5098,3292,0)
(1710,617,0)
(4092,1042,0)
(1629,5029,0)
(3900,5422,0)
(240,5187,0)
(5244,143,0)
(4663,1864,0)
(3877,4764,0)
(1128,1215,0)
(792,1942,0)
(4542,4018,0)
(2944,5059,0)
(709,2880,0)
(1195,49,0)
(3397,1844,0)
(4694,3884,0)
(4746,3979,0)
(5680,4971,0)
(1096,3540,0)
(4688,1396,0)
(1962,4145,0)
(3064,2392,0)
(4369,3292,0)
(2758,627,0)
(2304,3799,0)
(4663,1031,0)
(5421,3224,0)
(3189,3640,0)
(3247,823,0)
(5721,2845,0)
(1630,1702,0)
(3979,4807,0)
(2773,4492,0)
(4090,2390,0)
(2413,318,0)
(1835,1799,0)
(5682,2413,0)
(4796,5113,0)
(2599,1411,0)
(2652,1818,0)
(3904,1099,0)
(378,3510,0)
(3562,5159,0)
(639,4742,0)
(1103,593,0)
(5114,931,0)
(5236,5266,0)
(2497,1522,0)
(273,5055,0)
(2235,627,0)
(4663,3093,0)
(4225,5456,0)
(4926,195,0)
(1847,1389,0)
(3849,321,0)
(1876,3292,0)
(4103,5365,0)
(4350,2338,0)
(1884,5139,0)
(2220,2149,0)
(3932,1798,0)
(604,3236,0)
(3064,2821,0)
(724,1313,0)
(4887,5298,0)
(1913,4933,0)
(3159,2190,0)
(5720,5059,0)
(913,3713,0)
(2642,1401,0)
(5430,5059,0)
(3239,4884,0)
(2350,3171,0)
(1639,2640,0)
(1617,1844,0)
(335,5593,0)
(4380,5187,0)
(2717,4341,0)
(771,940,0)
(313,1650,0)
(4816,3079,0)
(1971,3632,0)
(2710,627,0)
(3790,5055,0)
(4572,198,0)
(2532,672,0)
(1803,5406,0)
(3795,1844,0)
(1862,1844,0)
(2180,1859,0)
(4967,1828,0)
(5401,2402,0)
(5623,3713,0)
(442,2481,0)
(1684,4350,0)
(4447,5753,0)
(2434,5685,0)
(4122,4379,0)
(3610,4411,0)
(4068,1864,0)
(5120,1575,0)
(471,1613,0)
(4054,731,0)
(5460,1815,0)
(482,4030,0)
(2291,1215,0)
(5270,3253,0)
(5190,1344,0)
(4392,1242,0)
(678,5059,0)
(3753,2065,0)
(5077,44,0)
(2109,5415,0)
(3177,3204,0)
(1931,3239,0)
(389,4902,0)
(167,2190,0)
(4535,12,0)
(2478,2792,0)
(572,2483,0)
(1273,5334,0)
(3794,3478,0)
(4767,2299,0)
(1997,5637,0)
(5536,2156,0)
(2875,3292,0)
(3014,2030,0)
(4285,2893,0)
(1891,5059,0)
(4173,689,0)
(1980,4457,0)
(3915,4728,0)
(5157,1295,0)
(2641,5689,0)
(3064,4731,0)
(3979,1230,0)
(251,4385,0)
(5207,3204,0)
(865,3706,0)
(2007,5438,0)
(5577,3292,0)
(5102,1737,0)
(5506,2304,0)
(5272,2406,0)
(653,350,0)
(5573,2538,0)
(1716,3582,0)
(5397,2190,0)
(4869,1,0)
(259,3952,0)
(355,3586,0)
(5685,2434,0)
(5075,3292,0)
(4176,627,0)
(2221,3646,0)
(3331,3647,0)
(3273,627,0)
(858,4948,0)
(2227,1844,0)
(3498,5431,0)
(792,2399,0)
(868,4902,0)
(4505,1798,0)
(5629,3021,0)
(4939,3037,0)
(2885,4743,0)
(1072,4727,0)
(3211,3521,0)
(4925,143,0)
(5282,3488,0)
(2749,2583,0)
(1887,5100,0)
(3565,4676,0)
(3496,722,0)
(3342,503,0)
(3709,2087,0)
(2100,4714,0)
(2957,4352,0)
(394,5702,0)
(1380,984,0)
(3060,2283,0)
(5155,2826,0)
(1646,231,0)
(3821,5059,0)
(1183,345,0)
(2762,1387,0)
(2086,2483,0)
(3142,5648,0)
(4249,627,0)
(3304,2870,0)
(2714,4068,0)
(5414,3174,0)
(4786,4668,0)
(5489,1779,0)
(3716,880,0)
(3046,2338,0)
(2831,4775,0)
(2928,2885,0)
(2494,2553,0)
(2094,5494,0)
(5682,2406,0)
(4663,2997,0)
(3142,627,0)
(3847,200,0)
(2637,195,0)
(1281,796,0)
(3008,1870,0)
(164,1964,0)
(743,3897,0)
(85,1272,0)
(2187,2286,0)
(5682,1775,0)
(4458,4254,0)
(3097,1860,0)
(3064,5099,0)
(3199,133,0)
(5641,3026,0)
(1978,5550,0)
(3428,4068,0)
(546,5343,0)
(1467,129,0)
(1573,4534,0)
(3493,5264,0)
(4482,3632,0)
(4731,2159,0)
(5341,81,0)
(3064,754,0)
(1731,698,0)
(1244,2583,0)
(4787,1367,0)
(3827,4411,0)
(5384,1574,0)
(4803,5313,0)
(2242,4339,0)
(3430,2271,0)
(656,5373,0)
(3351,2898,0)
(5751,337,0)
(5744,3638,0)
(4421,1891,0)
(641,1110,0)
(507,1659,0)
(2610,1559,0)
(1330,249,0)
(3979,2317,0)
(56,678,0)
(3877,4195,0)
(4691,4914,0)
(4971,725,0)
(1818,4896,0)
(3207,1946,0)
(74,1077,0)
(1568,2973,0)
(5682,808,0)
(900,1301,0)
(2942,1611,0)
(2918,1752,0)
(1750,3292,0)
(5647,2256,0)
(2918,1647,0)
(4966,851,0)
(1829,5468,0)
(4154,3169,0)
(566,1884,0)
(2073,1268,0)
(1106,1844,0)
(3787,2072,0)
(2958,2314,0)
(1686,4766,0)
(4663,732,0)
(5483,1503,0)
(4068,5469,0)
(3192,2055,0)
(1889,1844,0)
(4940,3090,0)
(2853,627,0)
(3929,1714,0)
(3328,977,0)
(4282,4231,0)
(4926,608,0)
(2379,3587,0)
(611,3799,0)
(109,4050,0)
(3787,4869,0)
(4307,2241,0)
(3216,627,0)
(3064,4736,0)
(1149,3000,0)
(2112,1009,0)
(669,345,0)
(1621,1388,0)
(3899,3442,0)
(351,3655,0)
(38,2685,0)
(1111,4208,0)
(12,1411,0)
(3049,5275,0)
(1870,1844,0)
(4971,1371,0)
(5283,939,0)
(3610,4732,0)
(1107,28,0)
(670,1396,0)
(109,1844,0)
(2792,108,0)
(4780,1311,0)
(808,5059,0)
(4789,1807,0)
(5564,4183,0)
(987,5682,0)
(4213,627,0)
(2291,2422,0)
(1320,3286,0)
(1730,1841,0)
(1157,627,0)
(3349,4563,0)
(4521,415,0)
(1130,4969,0)
(5179,1144,0)
(3489,5639,0)
(5120,3417,0)
(5240,3292,0)
(4301,2725,0)
(2326,732,0)
(2905,3840,0)
(5733,2577,0)
(3079,580,0)
(3529,2229,0)
(5380,3440,0)
(629,1844,0)
(106,1316,0)
(1833,3805,0)
(4545,3090,0)
(3067,2899,0)
(737,904,0)
(4346,1844,0)
(3979,4628,0)
(5138,1401,0)
(2760,2872,0)
(841,3351,0)
(5764,5766,0)
(3615,2336,0)
(4440,1798,0)
(2794,950,0)
(4789,2403,0)
(624,2562,0)
(786,3285,0)
(3975,3573,0)
(2326,3093,0)
(3854,5306,0)
(4751,627,0)
(2135,5158,0)
(5545,4979,0)
(5074,1844,0)
(959,3707,0)
(771,4566,0)
(2918,2030,0)
(4663,1015,0)
(44,2945,0)
(692,5017,0)
(3826,4033,0)
(3717,4300,0)
(2867,3286,0)
(5067,3406,0)
(5047,1183,0)
(3470,1354,0)
(3926,816,0)
(2163,605,0)
(2965,5282,0)
(2113,2853,0)
(2902,938,0)
(3979,5707,0)
(2326,4807,0)
(4129,3582,0)
(1253,2229,0)
(5071,3986,0)
(3641,2109,0)
(3685,3611,0)
(337,5751,0)
(4906,2190,0)
(3867,5438,0)
(2405,5429,0)
(4915,1844,0)
(883,1081,0)
(2156,5536,0)
(3778,44,0)
(4831,1844,0)
(3253,5270,0)
(2567,1141,0)
(97,627,0)
(204,1996,0)
(4098,3753,0)
(3473,1915,0)
(1431,4269,0)
(4903,2190,0)
(3283,1844,0)
(5306,3399,0)
(4068,2997,0)
(3726,2743,0)
(189,2563,0)
(1851,868,0)
(3757,1524,0)
(2123,1954,0)
(2088,5493,0)
(3563,4068,0)
(4215,449,0)
(646,5170,0)
(5537,2388,0)
(3172,1148,0)
(3428,2902,0)
(593,193,0)
(4950,45,0)
(2925,3090,0)
(4530,2190,0)
(3100,1719,0)
(3877,1492,0)
(157,1651,0)
(3972,2010,0)
(4512,3161,0)
(1903,1456,0)
(2496,109,0)
(2564,4051,0)
(3520,1777,0)
(3065,4807,0)
(1202,1534,0)
(2580,5212,0)
(637,1844,0)
(5682,987,0)
(5150,4970,0)
(4868,5055,0)
(1700,4920,0)
(573,4864,0)
(3979,1568,0)
(2273,1844,0)
(5293,911,0)
(3668,2264,0)
(4787,5059,0)
(2143,2873,0)
(2668,2380,0)
(5283,4469,0)
(5695,3695,0)
(3605,1897,0)
(3378,5373,0)
(5507,3713,0)
(1834,1844,0)
(922,5232,0)
(4208,4128,0)
(3131,2710,0)
(4534,2190,0)
(537,1306,0)
(2391,1791,0)
(2604,2893,0)
(939,4530,0)
(1076,192,0)
(1784,2336,0)
(989,3592,0)
(3207,441,0)
(647,906,0)
(2787,318,0)
(1342,3173,0)
(506,3676,0)
(462,4780,0)
(3887,2190,0)
(2538,182,0)
(4067,5603,0)
(394,4104,0)
(2997,1737,0)
(3146,3713,0)
(3064,3669,0)
(1084,5433,0)
(5459,3042,0)
(4253,5552,0)
(259,3473,0)
(3993,746,0)
(3757,456,0)
(2410,1142,0)
(718,5139,0)
(4669,133,0)
(724,884,0)
(1859,3292,0)
(2087,3709,0)
(610,3592,0)
(4130,2303,0)
(2796,204,0)
(299,4259,0)
(5119,627,0)
(3482,3484,0)
(587,2791,0)
(5664,1629,0)
(4128,4208,0)
(5073,998,0)
(5457,4019,0)
(5561,2775,0)
(2006,4578,0)
(2493,1961,0)
(625,2633,0)
(5238,2051,0)
(5005,5227,0)
(3439,3431,0)
(5270,1844,0)
(4176,1564,0)
(2382,5304,0)
(36,627,0)
(1586,2120,0)
(1942,2650,0)
(3643,1565,0)
(4812,1392,0)
(5547,835,0)
(4341,523,0)
(2500,3039,0)
(4122,1844,0)
(2137,2190,0)
(737,133,0)
(5510,2962,0)
(2392,4070,0)
(197,1622,0)
(5251,5224,0)
(108,1595,0)
(2463,1844,0)
(4077,1173,0)
(1108,2725,0)
(4457,2735,0)
(2020,3292,0)
(2447,807,0)
(4831,5176,0)
(19,511,0)
(3902,2483,0)
(3764,2190,0)
(3161,3618,0)
(4665,5262,0)
(2450,3143,0)
(2529,1532,0)
(640,3160,0)
(2128,4591,0)
(752,3292,0)
(784,5059,0)
(3328,1101,0)
(1505,627,0)
(5370,2326,0)
(5542,1844,0)
(4232,832,0)
(4900,3869,0)
(1896,3399,0)
(1951,5106,0)
(2747,164,0)
(92,3292,0)
(5682,4916,0)
(1529,3515,0)
(815,352,0)
(3040,4279,0)
(2011,2123,0)
(3064,1778,0)
(2200,5432,0)
(4169,4379,0)
(271,1844,0)
(4858,1802,0)
(4562,2063,0)
(4393,624,0)
(2159,1570,0)
(1919,5459,0)
(1502,3424,0)
(1632,3919,0)
(3574,3280,0)
(4180,1710,0)
(5324,369,0)
(5254,2336,0)
(3249,4889,0)
(3625,2419,0)
(2726,1490,0)
(2435,1807,0)
(3977,5242,0)
(1775,5263,0)
(629,4718,0)
(3119,4644,0)
(3064,93,0)
(4681,3682,0)
(3490,2234,0)
(5177,1844,0)
(5059,1326,0)
(1052,541,0)
(4985,5317,0)
(2714,5059,0)
(2924,202,0)
(2639,2190,0)
(4258,627,0)
(5282,4068,0)
(1532,4988,0)
(3110,3292,0)
(4725,5176,0)
(4139,3582,0)
(2363,3523,0)
(2671,4102,0)
(1886,128,0)
(5243,1390,0)
(3631,3625,0)
(2361,3204,0)
(4576,5681,0)
(1060,3658,0)
(2869,5518,0)
(1474,3965,0)
(5585,5524,0)
(1759,961,0)
(739,697,0)
(3668,2918,0)
(4614,726,0)
(2586,4000,0)
(4143,5264,0)
(1191,3265,0)
(5011,4269,0)
(3573,834,0)
(735,44,0)
(44,3283,0)
(1130,2802,0)
(4397,3113,0)
(3090,2925,0)
(348,4654,0)
(2922,627,0)
(4916,4808,0)
(5469,5629,0)
(1260,5143,0)
(4391,1400,0)
(588,3450,0)
(253,2752,0)
(2123,1584,0)
(4663,208,0)
(3683,4500,0)
(4789,909,0)
(4971,2718,0)
(3412,4382,0)
(189,2787,0)
(199,4763,0)
(239,3625,0)
(3230,1564,0)
(2401,134,0)
(4426,1941,0)
(5120,4991,0)
(419,1945,0)
(5706,5059,0)
(3595,4727,0)
(3473,2756,0)
(5682,4120,0)
(4663,2406,0)
(1275,1702,0)
(854,159,0)
(5334,1101,0)
(1777,3888,0)
(725,5059,0)
(2336,3615,0)
(5631,3478,0)
(2411,1648,0)
(2632,3919,0)
(634,3292,0)
(163,294,0)
(1976,627,0)
(726,104,0)
(2788,2521,0)
(5032,4243,0)
(4206,4438,0)
(3979,3114,0)
(2215,680,0)
(5177,357,0)
(834,3573,0)
(1802,2031,0)
(4015,665,0)
(3797,4317,0)
(5537,1844,0)
(4116,1852,0)
(718,5059,0)
(3064,4449,0)
(4830,239,0)
(4472,3171,0)
(3134,5171,0)
(1331,4655,0)
(3916,720,0)
(1644,467,0)
(1240,1844,0)
(1415,4289,0)
(2061,5475,0)
(4096,929,0)
(3628,2183,0)
(3222,3345,0)
(3370,627,0)
(2051,2273,0)
(2186,1204,0)
(4794,3064,0)
(1573,5003,0)
(4048,2889,0)
(4325,896,0)
(2560,1568,0)
(1491,154,0)
(831,3180,0)
(4237,4738,0)
(4442,4693,0)
(4479,1719,0)
(1181,2915,0)
(4403,3216,0)
(1946,3207,0)
(847,5500,0)
(4132,2173,0)
(4018,3582,0)
(606,1062,0)
(5571,4407,0)
(2326,4241,0)
(3169,4154,0)
(1767,4216,0)
(3760,627,0)
(1894,3600,0)
(3224,1844,0)
(74,1237,0)
(968,4994,0)
(5415,5345,0)
(5188,164,0)
(353,5059,0)
(3236,4190,0)
(1043,5560,0)
(3762,3289,0)
(2476,1893,0)
(3225,2890,0)
(5212,5688,0)
(4914,4691,0)
(1800,3397,0)
(5122,2538,0)
(1911,3706,0)
(2879,4416,0)
(3376,1436,0)
(2787,189,0)
(859,1844,0)
(880,4920,0)
(1902,2996,0)
(1515,1427,0)
(3658,5075,0)
(4688,16,0)
(4236,4360,0)
(1351,3064,0)
(4693,2190,0)
(2529,3979,0)
(2846,93,0)
(3399,1844,0)
(97,4743,0)
(4018,4542,0)
(4195,3877,0)
(1114,4110,0)
(1137,1638,0)
(1487,2531,0)
(3465,3325,0)
(940,771,0)
(3254,565,0)
(2331,3259,0)
(1871,2190,0)
(694,200,0)
(1627,1191,0)
(382,1427,0)
(1628,3518,0)
(5196,5429,0)
(2780,5301,0)
(1698,2428,0)
(4233,3011,0)
(5686,3601,0)
(5146,5064,0)
(5649,1613,0)
(796,1717,0)
(257,295,0)
(3747,2339,0)
(2665,1951,0)
(3318,2082,0)
(4531,4799,0)
(532,3103,0)
(101,627,0)
(4145,1139,0)
(3924,2837,0)
(2260,473,0)
(5266,5236,0)
(2320,36,0)
(5539,5704,0)
(1034,500,0)
(5115,2326,0)
(5152,2629,0)
(5642,5703,0)
(66,1778,0)
(3550,611,0)
(5181,763,0)
(2168,3635,0)
(4663,3923,0)
(3979,93,0)
(1789,1445,0)
(4205,5158,0)
(3275,1267,0)
(2613,2821,0)
(5406,2271,0)
(2918,2317,0)
(562,5706,0)
(737,2424,0)
(4056,4400,0)
(2789,521,0)
(5682,2540,0)
(5497,2447,0)
(44,2969,0)
(4001,860,0)
(1386,2695,0)
(1329,619,0)
(4537,5641,0)
(4139,195,0)
(39,3406,0)
(2488,1964,0)
(3395,4735,0)
(793,4636,0)
(2678,1844,0)
(2724,3582,0)
(2554,1286,0)
(1729,1070,0)
(4518,1503,0)
(4354,309,0)
(3064,1775,0)
(5334,1273,0)
(2533,514,0)
(1231,1426,0)
(3471,3299,0)
(4024,1017,0)
(4593,5687,0)
(2393,5306,0)
(20,4797,0)
(2520,1575,0)
(1363,5284,0)
(2500,5675,0)
(2500,4924,0)
(5359,2716,0)
(5414,5059,0)
(1770,4784,0)
(1638,3713,0)
(696,4266,0)
(4986,3713,0)
(1677,3601,0)
(2413,5059,0)
(1517,445,0)
(517,5399,0)
(2817,5736,0)
(2820,1450,0)
(5410,4787,0)
(2228,1443,0)
(2267,796,0)
(2544,762,0)
(1578,1798,0)
(4436,1361,0)
(5618,1098,0)
(3205,5215,0)
(2781,5370,0)
(5334,3406,0)
(212,3635,0)
(3332,3184,0)
(4411,4786,0)
(3693,856,0)
(3474,5070,0)
(1179,5059,0)
(1091,2512,0)
(3109,4194,0)
(4915,5250,0)
(1996,489,0)
(4965,1844,0)
(2985,5753,0)
(1101,3292,0)
(2326,2486,0)
(4699,967,0)
(2033,1844,0)
(4988,1532,0)
(1493,2589,0)
(3701,5349,0)
(3714,5459,0)
(1725,1416,0)
(3952,30,0)
(5107,4648,0)
(4367,991,0)
(1799,2330,0)
(1450,5682,0)
(2471,1166,0)
(3408,2962,0)
(4553,4243,0)
(1432,5343,0)
(792,2040,0)
(3064,3821,0)
(776,3713,0)
(515,1330,0)
(3979,208,0)
(5334,3039,0)
(4097,2904,0)
(2874,4659,0)
(3367,2330,0)
(3062,2914,0)
(3737,5063,0)
(1757,5706,0)
(2750,1330,0)
(5671,1670,0)
(3328,4924,0)
(4315,3274,0)
(849,1111,0)
(670,5415,0)
(519,4327,0)
(1078,3229,0)
(3064,5093,0)
(1590,1241,0)
(5067,4991,0)
(3064,2997,0)
(3563,2902,0)
(971,5468,0)
(3979,2758,0)
(912,3742,0)
(655,1009,0)
(4715,270,0)
(1379,5059,0)
(1997,4500,0)
(923,2452,0)
(2918,5099,0)
(920,2022,0)
(4135,4548,0)
(3452,1113,0)
(511,1798,0)
(3604,47,0)
(3726,3103,0)
(5073,627,0)
(1033,1863,0)
(5559,3338,0)
(4300,4639,0)
(2920,1583,0)
(2035,3307,0)
(2986,2382,0)
(3797,627,0)
(3064,3150,0)
(2870,1737,0)
(2136,3668,0)
(5406,2232,0)
(5416,1812,0)
(4259,2998,0)
(5024,1976,0)
(574,5125,0)
(4587,2390,0)
(3700,2497,0)
(1351,3979,0)
(4334,5407,0)
(3640,1330,0)
(1361,4436,0)
(5164,673,0)
(5502,195,0)
(2473,4092,0)
(4268,4512,0)
(378,2898,0)
(4663,4120,0)
(502,5210,0)
(5108,3848,0)
(3338,4665,0)
(1039,2265,0)
(3847,1257,0)
(3707,335,0)
(4042,2000,0)
(709,1687,0)
(3884,5321,0)
(5222,500,0)
(2809,4068,0)
(5682,5115,0)
(4843,4324,0)
(5312,952,0)
(485,2190,0)
(4102,2671,0)
(2178,2930,0)
(201,4730,0)
(2615,485,0)
(533,1315,0)
(2918,808,0)
(614,5442,0)
(151,2393,0)
(4744,1692,0)
(2990,5585,0)
(3793,570,0)
(4400,2646,0)
(1591,1511,0)
(4963,4327,0)
(4131,1579,0)
(2581,627,0)
(5003,1573,0)
(3638,5027,0)
(869,5379,0)
(1776,3005,0)
(344,4759,0)
(893,2042,0)
(4587,389,0)
(3064,4628,0)
(7,5470,0)
(2546,3917,0)
(261,2822,0)
(9,3982,0)
(4936,4327,0)
(2950,2711,0)
(4170,2190,0)
(495,1558,0)
(632,1417,0)
(238,3341,0)
(726,3825,0)
(3074,1963,0)
(3958,5524,0)
(3765,3459,0)
(1451,4905,0)
(5207,2426,0)
(682,2190,0)
(2692,859,0)
(1714,2036,0)
(2083,542,0)
(2241,4307,0)
(271,41,0)
(1738,569,0)
(5342,759,0)
(4479,4898,0)
(3663,198,0)
(5120,977,0)
(271,4190,0)
(1295,3759,0)
(4462,4780,0)
(3141,3187,0)
(1142,1844,0)
(4134,2455,0)
(4663,5707,0)
(4664,4906,0)
(3054,1649,0)
(5645,876,0)
(2326,1647,0)
(2343,3724,0)
(2469,4278,0)
(4377,2923,0)
(1243,4804,0)
(5467,4965,0)
(1610,2190,0)
(2047,3479,0)
(3263,485,0)
(286,3658,0)
(2290,2447,0)
(3302,4889,0)
(1503,4352,0)
(2518,179,0)
(4879,2277,0)
(1085,4535,0)
(3725,5287,0)
(5569,5430,0)
(4663,3821,0)
(318,3418,0)
(3979,4731,0)
(739,3845,0)
(1346,4649,0)
(3885,588,0)
(911,627,0)
(415,627,0)
(3055,2190,0)
(3436,5068,0)
(141,3132,0)
(2826,4516,0)
(2733,1612,0)
(3243,1014,0)
(5067,5149,0)
(3662,3204,0)
(986,4901,0)
(4388,4965,0)
(2265,3276,0)
(3150,2135,0)
(4797,20,0)
(4784,2051,0)
(4738,5433,0)
(2162,2786,0)
(2390,4129,0)
(1585,2695,0)
(3861,3644,0)
(919,3495,0)
(3000,271,0)
(1098,193,0)
(485,3263,0)
(3044,5487,0)
(1450,4068,0)
(1826,627,0)
(5508,4620,0)
(68,4049,0)
(5242,1648,0)
(5224,4058,0)
(5100,4112,0)
(4223,3534,0)
(2520,3417,0)
(3478,2954,0)
(962,3185,0)
(3877,5384,0)
(5511,3187,0)
(1499,4917,0)
(2932,4499,0)
(4141,715,0)
(1069,1613,0)
(3428,5682,0)
(1601,1844,0)
(5180,920,0)
(2918,1031,0)
(4787,2902,0)
(5682,209,0)
(4663,5373,0)
(1149,2097,0)
(2728,793,0)
(1857,3637,0)
(5555,3897,0)
(1809,2475,0)
(4766,1772,0)
(3876,4108,0)
(5436,2034,0)
(5728,2391,0)
(5215,2160,0)
(2816,749,0)
(1395,627,0)
(191,2190,0)
(227,2934,0)
(2015,2873,0)
(1870,3008,0)
(1670,2190,0)
(3996,2959,0)
(4795,3795,0)
(2607,2328,0)
(4287,5585,0)
(5028,635,0)
(1562,2616,0)
(3832,5059,0)
(2294,4831,0)
(4486,1798,0)
(5456,627,0)
(5346,644,0)
(1742,3610,0)
(2638,1009,0)
(4733,1042,0)
(667,2376,0)
(2977,5369,0)
(1752,4627,0)
(1377,5059,0)
(1288,817,0)
(5244,5059,0)
(3528,4870,0)
(1304,2307,0)
(2364,1302,0)
(2666,503,0)
(3523,5235,0)
(4783,1211,0)
(1572,4671,0)
(3844,627,0)
(2326,4412,0)
(3979,1775,0)
(3979,3646,0)
(1604,5099,0)
(2219,109,0)
(3476,1178,0)
(1397,2179,0)
(2628,4765,0)
(998,5378,0)
(3566,3514,0)
(726,1859,0)
(271,5313,0)
(51,3364,0)
(403,2422,0)
(3486,627,0)
(203,2758,0)
(2501,4324,0)
(2803,4863,0)
(5355,4030,0)
(5273,3969,0)
(2237,611,0)
(2341,2226,0)
(5528,4138,0)
(2486,1396,0)
(267,3979,0)
(16,2205,0)
(3729,2880,0)
(4457,627,0)
(2899,3067,0)
(302,4295,0)
(931,2022,0)
(5404,3578,0)
(3293,3381,0)
(5103,3292,0)
(2326,3707,0)
(1747,749,0)
(1921,2596,0)
(5175,4948,0)
(4181,3252,0)
(1735,2677,0)
(3979,4916,0)
(137,3486,0)
(5370,2264,0)
(1581,1866,0)
(5140,4469,0)
(823,5059,0)
(3831,4018,0)
(3163,2678,0)
(4585,3214,0)
(4935,5246,0)
(1905,2099,0)
(1939,4456,0)
(1817,1889,0)
(1538,2334,0)
(3857,1240,0)
(539,4408,0)
(3064,3093,0)
(4163,1123,0)
(2918,5469,0)
(3822,4391,0)
(243,4870,0)
(3594,1675,0)
(2611,1740,0)
(290,1792,0)
(1866,1491,0)
(3979,3197,0)
(579,1972,0)
(2315,4456,0)
(4628,1949,0)
(5567,2109,0)
(5394,881,0)
(4137,1883,0)
(4994,968,0)
(5264,4143,0)
(3632,5055,0)
(792,1951,0)
(1300,1275,0)
(3495,919,0)
(2447,5075,0)
(4876,1737,0)
(5682,1910,0)
(4663,1778,0)
(4012,3292,0)
(392,4267,0)
(3064,1826,0)
(4407,1798,0)
(2689,3763,0)
(4802,101,0)
(5628,24,0)
(1788,1884,0)
(619,2190,0)
(2583,2695,0)
(2635,1009,0)
(1902,5089,0)
(1802,2032,0)
(2621,998,0)
(2938,3671,0)
(4821,5335,0)
(3313,4457,0)
(2777,4786,0)
(654,2599,0)
(3879,3019,0)
(2296,19,0)
(1428,485,0)
(4997,594,0)
(1481,385,0)
(115,1831,0)
(2062,154,0)
(5121,3996,0)
(4035,106,0)
(3880,1911,0)
(1307,3627,0)
(3343,4067,0)
(792,958,0)
(2388,5059,0)
(2071,22,0)
(2326,4736,0)
(1782,326,0)
(4246,3440,0)
(5494,1844,0)
(1831,1603,0)
(1531,627,0)
(4053,3518,0)
(5379,2609,0)
(230,3469,0)
(1295,1316,0)
(2923,4377,0)
(513,384,0)
(967,4427,0)
(879,550,0)
(5682,5707,0)
(5210,3497,0)
(1610,2773,0)
(662,4338,0)
(4584,368,0)
(2991,90,0)
(2563,1015,0)
(1403,1450,0)
(922,3812,0)
(4989,4721,0)
(273,3635,0)
(4243,3960,0)
(584,2190,0)
(1565,5429,0)
(2044,1791,0)
(701,430,0)
(4941,4130,0)
(2909,1827,0)
(1433,195,0)
(44,3778,0)
(3898,4777,0)
(4541,2374,0)
(2987,5282,0)
(77,4331,0)
(2277,4645,0)
(3174,3292,0)
(1330,3239,0)
(5218,1844,0)
(4500,226,0)
(3172,1624,0)
(2453,157,0)
(823,4068,0)
(3634,502,0)
(3357,667,0)
(4361,2141,0)
(3424,2190,0)
(3078,3376,0)
(4891,102,0)
(283,2292,0)
(295,5055,0)
(5126,372,0)
(5630,4042,0)
(4091,4649,0)
(601,4912,0)
(3763,2072,0)
(3183,4714,0)
(5001,2664,0)
(3050,5542,0)
(3093,2072,0)
(4234,3888,0)
(4463,986,0)
(751,2190,0)
(2686,382,0)
(2548,2416,0)
(2618,399,0)
(4490,5432,0)
(2918,2997,0)
(3953,2422,0)
(4980,3636,0)
(2842,4553,0)
(2549,4244,0)
(3989,3292,0)
(46,3507,0)
(84,2906,0)
(307,5059,0)
(4663,2392,0)
(5714,1775,0)
(378,3739,0)
(4379,3762,0)
(2916,1737,0)
(166,916,0)
(4381,1453,0)
(1266,1505,0)
(1359,942,0)
(4876,2014,0)
(1746,4374,0)
(4780,627,0)
(4864,3713,0)
(564,1248,0)
(4340,4280,0)
(3366,981,0)
(5384,3877,0)
(2218,5647,0)
(3064,1613,0)
(5745,1141,0)
(2326,1826,0)
(5378,1721,0)
(4143,3582,0)
(3274,1893,0)
(4579,2768,0)
(2433,4673,0)
(2863,2190,0)
(4707,3734,0)
(995,1215,0)
(1116,5441,0)
(1907,3388,0)
(1425,4366,0)
(70,1280,0)
(3907,1453,0)
(5442,2711,0)
(3532,2286,0)
(2012,909,0)
(5682,4249,0)
(356,5139,0)
(2222,1648,0)
(5390,4549,0)
(1379,5051,0)
(157,5658,0)
(1793,5267,0)
(3679,5429,0)
(3162,3757,0)
(1889,1817,0)
(4653,249,0)
(624,3956,0)
(381,5743,0)
(1177,4139,0)
(4500,3514,0)
(4729,3569,0)
(3187,4468,0)
(1536,4709,0)
(2326,5707,0)
(4216,1767,0)
(2326,3150,0)
(2839,1844,0)
(3507,4418,0)
(1797,3635,0)
(3979,1910,0)
(431,991,0)
(592,4438,0)
(2595,627,0)
(5154,4154,0)
(2416,5392,0)
(2473,4897,0)
(5439,1370,0)
(3252,1844,0)
(1080,1490,0)
(1603,3713,0)
(957,5398,0)
(4441,5445,0)
(5682,208,0)
(786,1844,0)
(2819,107,0)
(4771,1255,0)
(2103,5100,0)
(2823,4120,0)
(4987,4202,0)
(341,2358,0)
(5524,5585,0)
(2063,3691,0)
(2624,463,0)
(3026,973,0)
(5350,3657,0)
(3935,488,0)
(622,2871,0)
(2247,2033,0)
(661,1379,0)
(5437,2882,0)
(1786,1844,0)
(2695,2583,0)
(3790,3635,0)
(2335,3292,0)
(1318,1702,0)
(3979,565,0)
(2297,627,0)
(3034,3492,0)
(2520,3406,0)
(5044,385,0)
(5424,428,0)
(4449,1972,0)
(2918,4120,0)
(5281,5543,0)
(2326,5373,0)
(4093,2065,0)
(4949,2691,0)
(4129,195,0)
(3036,4448,0)
(2499,4066,0)
(5685,1080,0)
(2918,3197,0)
(4086,363,0)
(1074,1080,0)
(2918,4449,0)
(3741,89,0)
(1261,2331,0)
(3955,3753,0)
(272,622,0)
(545,2612,0)
(4582,2486,0)
(3068,4006,0)
(372,5126,0)
(3979,4120,0)
(2183,3628,0)
(2736,2222,0)
(223,5445,0)
(2918,281,0)
(2108,794,0)
(4898,3292,0)
(2914,1737,0)
(4663,5115,0)
(2930,2042,0)
(3639,5397,0)
(5764,763,0)
(1090,3129,0)
(3399,5306,0)
(748,1815,0)
(4328,1009,0)
(3219,1148,0)
(3484,627,0)
(3202,1173,0)
(5478,1648,0)
(4415,706,0)
(2529,2902,0)
(2522,2099,0)
(3630,1566,0)
(1025,2471,0)
(1390,2678,0)
(5409,2936,0)
(4068,4120,0)
(5328,579,0)
(2676,4928,0)
(5297,2283,0)
(3991,4130,0)
(4984,5546,0)
(3404,5643,0)
(1410,1906,0)
(1129,4621,0)
(5146,2596,0)
(1996,204,0)
(4450,5392,0)
(3551,1844,0)
(984,2190,0)
(1227,1096,0)
(4278,2469,0)
(5213,3223,0)
(4068,2406,0)
(1762,1530,0)
(168,5637,0)
(5633,3582,0)
(370,1798,0)
(3719,2701,0)
(3223,619,0)
(3571,1566,0)
(884,724,0)
(5530,4213,0)
(4631,3066,0)
(5150,102,0)
(3592,610,0)
(4359,2595,0)
(2357,1478,0)
(5370,3928,0)
(5539,3292,0)
(5379,957,0)
(3169,1916,0)
(5248,2063,0)
(1056,1844,0)
(4923,2954,0)
(5536,1844,0)
(2092,1583,0)
(3942,3403,0)
(3602,751,0)
(1713,2399,0)
(1367,4787,0)
(3368,4727,0)
(1599,3913,0)
(2262,1844,0)
(3734,627,0)
(3848,627,0)
(1934,4447,0)
(5309,3832,0)
(4473,5059,0)
(4110,2190,0)
(2385,1009,0)
(3552,1586,0)
(5092,666,0)
(2374,5427,0)
(3979,4249,0)
(106,2190,0)
(3351,3510,0)
(946,3116,0)
(1014,1248,0)
(4369,4157,0)
(2906,5059,0)
(3918,4859,0)
(4499,1109,0)
(4339,627,0)
(2711,4530,0)
(3221,158,0)
(601,3350,0)
(948,831,0)
(5370,3605,0)
(3979,2392,0)
(3420,3292,0)
(2918,1775,0)
(2528,5050,0)
(2566,34,0)
(2724,195,0)
(3443,5073,0)
(2888,1877,0)
(5430,1181,0)
(2581,2355,0)
(3161,3625,0)
(2197,355,0)
(5490,1864,0)
(4594,5348,0)
(1895,39,0)
(1141,1992,0)
(2904,4097,0)
(671,1358,0)
(1866,1581,0)
(2773,1610,0)
(2326,4632,0)
(5206,5059,0)
(5620,3685,0)
(5067,331,0)
(5127,4450,0)
(4586,1579,0)
(716,1622,0)
(5025,4077,0)
(4554,4794,0)
(1986,2839,0)
(44,3452,0)
(3274,5059,0)
(4683,4436,0)
(597,4924,0)
(3628,1844,0)
(2612,627,0)
(5090,2486,0)
(1624,3086,0)
(3094,451,0)
(5730,2930,0)
(1551,2582,0)
(725,4971,0)
(906,617,0)
(3064,5707,0)
(3286,2867,0)
(3799,2022,0)
(2469,4379,0)
(5245,5270,0)
(1848,1893,0)
(5682,2060,0)
(1584,2123,0)
(1141,5055,0)
(5470,5178,0)
(4645,1878,0)
(686,627,0)
(5370,2803,0)
(918,3335,0)
(2459,370,0)
(273,2890,0)
(3478,4472,0)
(5658,5447,0)
(2521,1915,0)
(5161,1915,0)
(4455,2270,0)
(2285,3292,0)
(3903,1387,0)
(2633,1844,0)
(4607,98,0)
(4612,573,0)
(3852,4868,0)
(3995,134,0)
(957,5379,0)
(3112,747,0)
(1113,242,0)
(4637,3328,0)
(5314,1486,0)
(5560,451,0)
(2188,1009,0)
(3303,756,0)
(4763,1648,0)
(3973,154,0)
(3086,1624,0)
(1916,3713,0)
(939,5283,0)
(4617,2343,0)
(3143,3017,0)
(509,853,0)
(777,5752,0)
(2918,732,0)
(1991,466,0)
(4424,1535,0)
(4230,3588,0)
(4298,1379,0)
(2316,5682,0)
(5588,4471,0)
(1126,1445,0)
(3085,5713,0)
(4231,2632,0)
(2265,3635,0)
(301,2907,0)
(2730,5206,0)
(3140,341,0)
(5367,741,0)
(5275,5264,0)
(4641,3012,0)
(3615,1289,0)
(2279,5647,0)
(5473,1059,0)
(4356,4406,0)
(3240,3292,0)
(3755,563,0)
(2952,5449,0)
(1175,1234,0)
(590,1871,0)
(1963,2347,0)
(4663,5099,0)
(3120,3130,0)
(3232,3992,0)
(845,2932,0)
(5582,2483,0)
(4904,2973,0)
(1309,599,0)
(430,2614,0)
(594,1844,0)
(23,737,0)
(2585,2120,0)
(1019,4070,0)
(3765,3741,0)
(1620,1728,0)
(4727,1844,0)
(887,4379,0)
(1597,1844,0)
(3524,3928,0)
(3266,914,0)
(1450,3979,0)
(3533,3635,0)
(1319,3374,0)
(1968,1792,0)
(3064,4241,0)
(2907,1703,0)
(3741,3765,0)
(1066,2969,0)
(193,3292,0)
(1022,3185,0)
(4689,627,0)
(2321,952,0)
(1337,2752,0)
(1922,5354,0)
(578,5036,0)
(3398,3292,0)
(2818,1912,0)
(5017,1565,0)
(322,4926,0)
(4753,1841,0)
(704,3483,0)
(1272,4563,0)
(2687,4196,0)
(1321,4778,0)
(3790,2525,0)
(2160,5215,0)
(1967,5703,0)
(5610,335,0)
(164,1530,0)
(942,1359,0)
(5290,662,0)
(4967,3292,0)
(830,1891,0)
(4434,731,0)
(3064,208,0)
(2561,3536,0)
(3769,2179,0)
(3011,3027,0)
(1932,1844,0)
(818,4848,0)
(1,154,0)
(581,3511,0)
(5598,199,0)
(5306,467,0)
(977,5271,0)
(1821,981,0)
(1617,3608,0)
(3203,4006,0)
(5063,1555,0)
(2066,1524,0)
(1371,1844,0)
(52,537,0)
(4663,4894,0)
(1407,5267,0)
(4831,4611,0)
(5303,4873,0)
(4696,5612,0)
(5065,1413,0)
(5413,3582,0)
(2622,132,0)
(3045,5059,0)
(1709,3761,0)
(2714,4360,0)
(3855,2777,0)
(869,2303,0)
(2027,4933,0)
(3582,3069,0)
(2600,5049,0)
(2696,1399,0)
(1029,3790,0)
(3371,950,0)
(3986,5071,0)
(4711,4818,0)
(4052,2687,0)
(1596,4595,0)
(4854,1844,0)
(4880,3607,0)
(169,1844,0)
(3526,5059,0)
(2123,3385,0)
(985,2687,0)
(1500,2535,0)
(378,793,0)
(3553,3397,0)
(490,4888,0)
(2893,3681,0)
(958,3165,0)
(5336,2796,0)
(5125,5754,0)
(2,4363,0)
(672,5059,0)
(4256,3102,0)
(4139,5059,0)
(267,5475,0)
(563,3755,0)
(4932,1675,0)
(3452,4687,0)
(218,2152,0)
(4951,3893,0)
(1285,2004,0)
(2173,1761,0)
(244,5059,0)
(3080,3515,0)
(3920,2508,0)
(2946,5658,0)
(5682,2486,0)
(2098,2863,0)
(342,4569,0)
(2033,729,0)
(4457,5059,0)
(1933,716,0)
(1736,3393,0)
(771,1836,0)
(2925,244,0)
(1274,4305,0)
(5402,20,0)
(4239,1721,0)
(5096,1852,0)
(4329,4192,0)
(3296,1534,0)
(3848,195,0)
(4156,1142,0)
(2095,3376,0)
(5257,4394,0)
(5466,4901,0)
(2962,3408,0)
(4595,914,0)
(2326,4848,0)
(1650,5698,0)
(526,3242,0)
(4765,627,0)
(880,627,0)
(2918,4102,0)
(4148,816,0)
(4339,2242,0)
(4804,4019,0)
(4932,3229,0)
(1551,2428,0)
(4223,2969,0)
(1943,5420,0)
(3095,1844,0)
(4025,813,0)
(903,4124,0)
(3017,3143,0)
(4929,1166,0)
(4570,378,0)
(783,3072,0)
(884,2520,0)
(2467,355,0)
(1797,3853,0)
(2809,3979,0)
(1505,4273,0)
(3156,2123,0)
(4481,4546,0)
(4110,2535,0)
(5682,4905,0)
(4620,1844,0)
(5124,695,0)
(2326,4120,0)
(4507,581,0)
(4459,4205,0)
(3149,1798,0)
(1507,4159,0)
(5334,1575,0)
(2008,4618,0)
(5679,3908,0)
(2428,5316,0)
(1003,3743,0)
(4066,4391,0)
(5660,463,0)
(3704,3764,0)
(1144,3484,0)
(5627,1575,0)
(936,1202,0)
(3070,2904,0)
(62,604,0)
(5187,1844,0)
(1579,4680,0)
(2725,2072,0)
(3846,1844,0)
(2929,3207,0)
(479,2490,0)
(3600,3292,0)
(1203,5716,0)
(206,3292,0)
(3319,1844,0)
(2275,2837,0)
(5524,2983,0)
(1235,5567,0)
(2621,627,0)
(3585,4321,0)
(217,3319,0)
(107,4550,0)
(2500,3406,0)
(239,195,0)
(3814,4267,0)
(2143,915,0)
(3122,3345,0)
(4032,3582,0)
(4852,1265,0)
(749,1747,0)
(5073,4432,0)
(2525,3790,0)
(2168,2063,0)
(2464,5059,0)
(4859,3582,0)
(4837,2808,0)
(2417,4882,0)
(2741,2678,0)
(1622,1945,0)
(4641,2463,0)
(3130,2974,0)
(3178,4742,0)
(4896,1818,0)
(1385,1125,0)
(2983,3506,0)
(3260,243,0)
(204,2796,0)
(3268,5642,0)
(295,3635,0)
(1057,1648,0)
(4297,1806,0)
(3537,4267,0)
(5526,2291,0)
(4766,1817,0)
(2870,4773,0)
(2861,5074,0)
(1476,3486,0)
(82,774,0)
(4058,5224,0)
(3848,3582,0)
(3979,281,0)
(250,1717,0)
(918,1844,0)
(3280,4544,0)
(3497,125,0)
(1606,3351,0)
(4467,5070,0)
(1280,1648,0)
(2720,4426,0)
(3186,5059,0)
(2224,162,0)
(3248,1132,0)
(5207,1574,0)
(2342,3949,0)
(1491,1866,0)
(3036,1892,0)
(1389,5214,0)
(1088,3510,0)
(4068,2821,0)
(1411,3467,0)
(5682,3273,0)
(1942,832,0)
(746,3993,0)
(5178,5470,0)
(4068,209,0)
(4360,4236,0)
(3002,3551,0)
(1016,393,0)
(5171,3042,0)
(2785,2129,0)
(3979,2413,0)
(3050,2959,0)
(2822,1844,0)
(4332,5311,0)
(2918,2392,0)
(2326,2821,0)
(4497,4297,0)
(737,2621,0)
(209,5059,0)
(4663,1802,0)
(282,2884,0)
(5682,3707,0)
(4788,191,0)
(1357,3563,0)
(5023,3292,0)
(2326,5115,0)
(2479,786,0)
(4705,2750,0)
(2076,4339,0)
(4104,627,0)
(4727,1072,0)
(793,104,0)
(4641,3151,0)
(5074,4620,0)
(2695,452,0)
(1953,2123,0)
(63,2107,0)
(4663,2030,0)
(4558,3292,0)
(1845,122,0)
(4228,683,0)
(39,5675,0)
(2465,271,0)
(4030,2875,0)
(4500,1997,0)
(5610,844,0)
(2810,3605,0)
(2678,4825,0)
(4474,686,0)
(5120,1663,0)
(138,1786,0)
(722,4109,0)
(5750,1237,0)
(820,3668,0)
(643,3155,0)
(1535,2410,0)
(2772,4003,0)
(4373,4641,0)
(613,3034,0)
(4113,2426,0)
(4447,627,0)
(2051,4784,0)
(4022,4055,0)
(2245,5422,0)
(2074,3511,0)
(4059,2222,0)
(534,334,0)
(4511,5119,0)
(763,5764,0)
(3607,2190,0)
(2550,2678,0)
(4976,3664,0)
(4971,3805,0)
(5682,4241,0)
(2918,1864,0)
(5123,1130,0)
(3881,133,0)
(3064,4120,0)
(2270,627,0)
(4756,3292,0)
(3000,3518,0)
(610,2989,0)
(5067,370,0)
(3004,4295,0)
(4275,2614,0)
(3796,1135,0)
(3195,2430,0)
(4974,686,0)
(1006,343,0)
(3005,627,0)
(2500,370,0)
(5682,754,0)
(1570,2159,0)
(5284,1363,0)
(2520,884,0)
(1288,2072,0)
(1179,164,0)
(4442,1453,0)
(4222,2387,0)
(3135,2724,0)
(878,5456,0)
(5068,2664,0)
(4953,2996,0)
(3522,5681,0)
(3860,763,0)
(4940,5629,0)
(2075,5445,0)
(1479,4425,0)
(2120,1586,0)
(3943,938,0)
(3551,3756,0)
(805,1466,0)
(5765,1019,0)
(2330,1799,0)
(4874,4235,0)
(1258,3292,0)
(5099,4928,0)
(196,4267,0)
(390,4606,0)
(3328,3039,0)
(877,3403,0)
(5324,1396,0)
(3979,209,0)
(4112,1237,0)
(1286,5158,0)
(2562,624,0)
(547,1906,0)
(1851,195,0)
(4947,3984,0)
(1524,3757,0)
(2316,3064,0)
(692,1034,0)
(3245,1178,0)
(5378,998,0)
(5608,5071,0)
(463,4357,0)
(3677,4213,0)
(501,5059,0)
(3511,2074,0)
(5753,1844,0)
(5629,3292,0)
(1907,3581,0)
(4532,5406,0)
(2644,2759,0)
(2878,319,0)
(3658,5040,0)
(576,3799,0)
(144,1197,0)
(2326,1015,0)
(3933,5049,0)
(2934,1844,0)
(4719,239,0)
(1912,3292,0)
(5384,5287,0)
(1940,5226,0)
(3042,3292,0)
(4469,627,0)
(2791,195,0)
(2551,3180,0)
(5120,4924,0)
(2072,484,0)
(5263,1649,0)
(2099,2790,0)
(791,4844,0)
(2326,565,0)
(4017,3678,0)
(3180,5463,0)
(4668,4786,0)
(4265,4730,0)
(5604,3703,0)
(3322,244,0)
(2126,5424,0)
(4084,5059,0)
(113,1009,0)
(5583,725,0)
(4502,987,0)
(1079,611,0)
(4286,4032,0)
(2728,3510,0)
(5509,3043,0)
(1129,5562,0)
(5377,2687,0)
(1327,1844,0)
(5741,665,0)
(2119,3821,0)
(4947,2426,0)
(1693,3875,0)
(4293,557,0)
(4798,734,0)
(2131,2429,0)
(2620,627,0)
(2155,2225,0)
(2926,5629,0)
(1170,5709,0)
(3340,4731,0)
(2801,5424,0)
(5306,1844,0)
(239,5170,0)
(3239,3636,0)
(5262,3292,0)
(2492,1671,0)
(2761,1613,0)
(1822,1844,0)
(2323,1719,0)
(3937,2456,0)
(3985,3353,0)
(1912,2818,0)
(5430,3685,0)
(2326,2413,0)
(4947,3204,0)
(3064,5469,0)
(5025,5589,0)
(3870,4247,0)
(5420,1632,0)
(4471,984,0)
(4649,2786,0)
(3258,3487,0)
(3518,3000,0)
(4663,93,0)
(742,4013,0)
(4971,896,0)
(484,2072,0)
(5119,4511,0)
(3252,2693,0)
(2573,1844,0)
(760,1126,0)
(4243,1648,0)
(2520,1917,0)
(1511,627,0)
(608,4926,0)
(1563,2498,0)
(2982,3848,0)
(5079,488,0)
(5682,816,0)
(2191,3272,0)
(2273,2051,0)
(4007,4999,0)
(4374,1482,0)
(2496,1844,0)
(1893,263,0)
(2662,4333,0)
(4406,466,0)
(593,5139,0)
(1794,767,0)
(3538,2031,0)
(1636,834,0)
(5249,3739,0)
(3802,3095,0)
(2599,3403,0)
(1588,5090,0)
(4663,3646,0)
(5686,3043,0)
(681,5696,0)
(2326,2997,0)
(3784,4529,0)
(5689,1844,0)
(919,3173,0)
(1989,1844,0)
(4860,3582,0)
(3800,3161,0)
(2918,4848,0)
(673,243,0)
(5361,4598,0)
(4528,4048,0)
(2045,136,0)
(2072,4567,0)
(3028,2964,0)
(3177,2429,0)
(2084,178,0)
(5567,1396,0)
(1663,4127,0)
(2026,718,0)
(5614,3635,0)
(4295,3635,0)
(3083,5043,0)
(4417,1826,0)
(307,5682,0)
(2799,4824,0)
(2157,2786,0)
(3577,126,0)
(4021,5384,0)
(1571,848,0)
(1718,4873,0)
(68,3832,0)
(3507,46,0)
(2703,5686,0)
(952,2321,0)
(5274,1798,0)
(266,3292,0)
(4642,5429,0)
(3636,838,0)
(5388,2655,0)
(5200,2087,0)
(2732,1214,0)
(2684,3514,0)
(442,5078,0)
(4552,5287,0)
(2423,1315,0)
(3614,1273,0)
(964,153,0)
(3406,1798,0)
(4663,4705,0)
(4363,5250,0)
(1284,311,0)
(2422,2472,0)
(2171,2474,0)
(3231,627,0)
(4010,252,0)
(4195,3393,0)
(2278,1946,0)
(3893,4951,0)
(1445,3559,0)
(4540,2747,0)
(2337,5608,0)
(1703,5055,0)
(2914,5059,0)
(3315,5149,0)
(2609,2190,0)
(3441,2190,0)
(4068,601,0)
(1719,4479,0)
(2210,1612,0)
(4627,690,0)
(4142,3320,0)
(1642,3364,0)
(4038,1122,0)
(2428,1551,0)
(851,4759,0)
(2042,2930,0)
(1166,2471,0)
(2386,5247,0)
(2512,4338,0)
(1358,1844,0)
(4255,2437,0)
(777,3208,0)
(1727,682,0)
(473,3693,0)
(4790,2827,0)
(5630,5720,0)
(293,5106,0)
(2017,4916,0)
(3536,5654,0)
(5301,2780,0)
(1372,2490,0)
(441,5267,0)
(3695,3772,0)
(4689,5176,0)
(3334,3760,0)
(178,507,0)
(4254,2776,0)
(1552,3502,0)
(3410,2875,0)
(3635,5552,0)
(1316,106,0)
(4934,329,0)
(1714,5055,0)
(1544,541,0)
(2044,4016,0)
(12,4535,0)
(4663,3707,0)
(3064,2325,0)
(5682,4731,0)
(4618,2008,0)
(3979,2480,0)
(1701,2123,0)
(1560,1363,0)
(1063,3671,0)
(4251,4789,0)
(341,3140,0)
(2843,4916,0)
(2835,593,0)
(1622,3292,0)
(1026,2996,0)
(5317,1844,0)
(2998,5504,0)
(1362,3760,0)
(1854,3292,0)
(1324,3292,0)
(527,4241,0)
(3306,2974,0)
(1275,2043,0)
(2951,3641,0)
(2368,581,0)
(3036,793,0)
(569,3292,0)
(2868,3745,0)
(2268,1056,0)
(3760,1651,0)
(608,4970,0)
(4930,1274,0)
(4520,1009,0)
(3779,909,0)
(2063,684,0)
(4242,5059,0)
(386,728,0)
(103,5059,0)
(4663,816,0)
(4639,727,0)
(1755,1255,0)
(4903,5214,0)
(4829,2813,0)
(1548,5610,0)
(3767,252,0)
(1019,4618,0)
(4608,1945,0)
(5177,1932,0)
(160,3982,0)
(1815,4318,0)
(2326,93,0)
(5330,3292,0)
(4154,4124,0)
(4377,5298,0)
(2910,3292,0)
(315,4735,0)
(3645,4918,0)
(3328,4991,0)
(1044,1248,0)
(5600,5713,0)
(5055,4081,0)
(1252,5504,0)
(3984,2285,0)
(5211,1098,0)
(1692,3748,0)
(1958,5397,0)
(4496,393,0)
(2049,3500,0)
(4134,3292,0)
(2326,3821,0)
(3441,170,0)
(5682,1778,0)
(4070,1019,0)
(105,5057,0)
(3928,3524,0)
(5427,2374,0)
(200,694,0)
(2631,1650,0)
(2286,2187,0)
(3841,3848,0)
(3845,2669,0)
(336,4955,0)
(2324,1041,0)
(4027,627,0)
(4480,570,0)
(1026,3844,0)
(3887,149,0)
(434,1798,0)
(5259,3936,0)
(5348,3816,0)
(324,5115,0)
(3424,1502,0)
(2326,1568,0)
(331,1613,0)
(3636,3713,0)
(4867,2380,0)
(3517,3045,0)
(680,3248,0)
(2999,3077,0)
(2402,627,0)
(3263,1527,0)
(2918,1826,0)
(4338,2512,0)
(3760,4070,0)
(2074,1067,0)
(187,1826,0)
(1429,4040,0)
(4375,5264,0)
(1916,2754,0)
(501,4928,0)
(5594,1214,0)
(2164,3372,0)
(2490,1372,0)
(3031,5059,0)
(5170,4730,0)
(1086,593,0)
(2918,3273,0)
(1853,1844,0)
(2581,1772,0)
(5395,3879,0)
(319,1844,0)
(5626,4620,0)
(1963,1844,0)
(3905,1992,0)
(3374,2427,0)
(208,4068,0)
(2637,3582,0)
(3255,627,0)
(5369,5429,0)
(1339,2926,0)
(2735,4457,0)
(1743,2996,0)
(2054,4007,0)
(689,1844,0)
(3798,5051,0)
(2264,1728,0)
(1992,1141,0)
(2688,5071,0)
(1280,1844,0)
(3151,4641,0)
(2039,2620,0)
(5207,5287,0)
(2132,2745,0)
(1668,97,0)
(4411,3610,0)
(323,3004,0)
(291,967,0)
(3785,2663,0)
(5169,2898,0)
(3647,3587,0)
(4346,3993,0)
(4992,3022,0)
(2243,4794,0)
(1957,546,0)
(2911,4860,0)
(2728,3037,0)
(5495,2671,0)
(3212,2173,0)
(3364,51,0)
(2021,5641,0)
(3614,2776,0)
(1448,2072,0)
(1240,3857,0)
(2435,926,0)
(1824,271,0)
(2756,1406,0)
(2552,1844,0)
(3668,3928,0)
(3295,5668,0)
(3777,3292,0)
(5682,565,0)
(3576,1009,0)
(2955,636,0)
(1205,792,0)
(3256,838,0)
(2498,5687,0)
(5041,4301,0)
(3055,2329,0)
(1739,2529,0)
(3008,2648,0)
(2892,1117,0)
(5682,2402,0)
(2322,2190,0)
(4161,3895,0)
(307,3979,0)
(1699,154,0)
(4422,1714,0)
(1460,1349,0)
(3064,1864,0)
(2211,2138,0)
(5533,5687,0)
(3824,2405,0)
(2185,1632,0)
(5192,3223,0)
(3660,2529,0)
(3379,2500,0)
(2956,2343,0)
(4181,371,0)
(3034,1844,0)
(2687,4473,0)
(4026,979,0)
(422,3897,0)
(766,337,0)
(3361,950,0)
(4606,2055,0)
(2746,943,0)
(5224,2898,0)
(2576,2477,0)
(5666,4176,0)
(616,4611,0)
(5166,1798,0)
(3064,4705,0)
(49,2097,0)
(2240,5226,0)
(3127,4701,0)
(4926,3582,0)
(3654,4027,0)
(5502,3582,0)
(16,4688,0)
(4456,2315,0)
(4303,2545,0)
(5130,2714,0)
(5071,1396,0)
(5349,2553,0)
(2303,869,0)
(3307,1319,0)
(1716,195,0)
(171,627,0)
(281,5059,0)
(2498,1844,0)
(2298,3664,0)
(5757,3305,0)
(3539,2614,0)
(1837,4129,0)
(1117,3005,0)
(697,3547,0)
(307,4068,0)
(629,728,0)
(1418,368,0)
(3962,199,0)
(4939,2251,0)
(1054,3292,0)
(2489,3582,0)
(838,3636,0)
(826,690,0)
(5625,3257,0)
(5375,5150,0)
(2754,1916,0)
(2974,627,0)
(1017,4267,0)
(1058,754,0)
(1740,308,0)
(5320,2097,0)
(3437,1870,0)
(5668,1613,0)
(3676,4073,0)
(3493,1433,0)
(4101,1242,0)
(1732,330,0)
(2250,1844,0)
(4492,2773,0)
(2424,627,0)
(5249,3510,0)
(4221,4774,0)
(4374,1746,0)
(39,4991,0)
(458,5119,0)
(5027,3638,0)
(2845,3720,0)
(1503,213,0)
(5491,5349,0)
(4964,2190,0)
(1025,5419,0)
(3801,476,0)
(2041,2922,0)
(4275,89,0)
(2805,4977,0)
(1856,5400,0)
(5083,2845,0)
(757,511,0)
(3605,2810,0)
(3908,5059,0)
(1741,4728,0)
(507,178,0)
(5325,3635,0)
(3027,22,0)
(5542,3050,0)
(754,5007,0)
(4596,5512,0)
(5050,627,0)
(1822,3834,0)
(3012,195,0)
(2697,2609,0)
(4104,394,0)
(2213,3292,0)
(1463,5007,0)
(5334,4924,0)
(4517,5418,0)
(135,2297,0)
(3238,3627,0)
(2326,4449,0)
(346,3292,0)
(2515,1248,0)
(2523,2338,0)
(2206,3273,0)
(1375,1113,0)
(1612,1844,0)
(3864,5502,0)
(3715,5301,0)
(2968,4965,0)
(2685,2099,0)
(1317,1737,0)
(4433,1353,0)
(5361,4066,0)
(1405,2184,0)
(5176,4831,0)
(1867,2555,0)
(5008,1764,0)
(3668,3605,0)
(1241,1590,0)
(3264,2904,0)
(1658,967,0)
(2918,2325,0)
(2414,541,0)
(379,281,0)
(158,3826,0)
(5334,331,0)
(1509,4492,0)
(2495,2213,0)
(4763,1535,0)
(2130,2589,0)
(2838,2158,0)
(3363,896,0)
(5682,5036,0)
(4006,5059,0)
(4539,4768,0)
(2741,1844,0)
(1601,1370,0)
(81,2190,0)
(3883,4717,0)
(3776,4059,0)
(1763,4269,0)
(4068,3821,0)
(396,1530,0)
(4445,4868,0)
(3979,1802,0)
(395,3422,0)
(3979,5099,0)
(306,2664,0)
(2435,909,0)
(3927,5051,0)
(2603,659,0)
(3381,4382,0)
(577,2593,0)
(3064,5036,0)
(2762,667,0)
(5465,5028,0)
(4742,639,0)
(5515,5143,0)
(18,4291,0)
(3132,1662,0)
(484,176,0)
(4644,3119,0)
(5277,551,0)
(2740,1466,0)
(2623,154,0)
(5762,4063,0)
(4663,2821,0)
(355,1844,0)
(4224,3433,0)
(150,4138,0)
(3539,89,0)
(624,1844,0)
(5614,5055,0)
(5431,670,0)
(152,4161,0)
(2139,1648,0)
(4718,629,0)
(3668,4591,0)
(4242,2123,0)
(1181,5430,0)
(4056,1737,0)
(4341,453,0)
(5682,1031,0)
(4999,4007,0)
(3664,4529,0)
(1716,4637,0)
(368,3052,0)
(3946,58,0)
(5581,1807,0)
(4884,3292,0)
(790,1723,0)
(2435,5127,0)
(2855,3468,0)
(3218,1433,0)
(4937,695,0)
(689,627,0)
(4061,3656,0)
(3984,1012,0)
(5682,732,0)
(1791,2044,0)
(4262,3103,0)
(4175,2489,0)
(1918,4815,0)
(3979,2152,0)
(2497,5059,0)
(186,4267,0)
(1129,4549,0)
(5151,823,0)
(1923,4979,0)
(380,3990,0)
(4815,627,0)
(3979,4894,0)
(330,2156,0)
(4058,2777,0)
(3616,732,0)
(813,3838,0)
(934,5116,0)
(3451,2706,0)
(4383,271,0)
(2918,3114,0)
(1886,1725,0)
(2824,2870,0)
(876,2044,0)
(3420,2077,0)
(2582,1551,0)
(733,906,0)
(2559,3559,0)
(146,4799,0)
(3209,2939,0)
(4515,1844,0)
(308,3333,0)
(5663,3186,0)
(5120,3039,0)
(4138,5528,0)
(1827,2998,0)
(2326,5414,0)
(2460,4905,0)
(3563,5682,0)
(5759,4734,0)
(4308,5692,0)
(676,4723,0)
(4745,3569,0)
(4324,2190,0)
(1228,1926,0)
(3748,2179,0)
(4851,5059,0)
(4089,1860,0)
(1688,5158,0)
(1430,1288,0)
(28,5043,0)
(3906,3759,0)
(4663,281,0)
(5331,4098,0)
(1543,3791,0)
(4652,5059,0)
(3229,5059,0)
(1891,627,0)
(3614,5286,0)
(4701,1844,0)
(4336,4926,0)
(439,3713,0)
(3043,627,0)
(2826,1443,0)
(662,5429,0)
(4105,1601,0)
(2108,195,0)
(2933,4759,0)
(2456,2072,0)
(3064,5414,0)
(2801,5429,0)
(978,3247,0)
(149,3887,0)
(3581,5059,0)
(1587,3186,0)
(5060,1449,0)
(3064,4412,0)
(4760,742,0)
(1458,5754,0)
(5579,1402,0)
(2918,4705,0)
(731,2589,0)
(378,4738,0)
(1683,1106,0)
(5120,5675,0)
(5178,1653,0)
(255,2326,0)
(3748,747,0)
(3970,1070,0)
(2125,3748,0)
(1861,3292,0)
(2402,4472,0)
(2582,1671,0)
(4509,3292,0)
(4498,5634,0)
(4068,599,0)
(1,4869,0)
(3181,3292,0)
(1134,1893,0)
(1174,157,0)
(226,4270,0)
(2995,1535,0)
(1806,4621,0)
(5224,3739,0)
(764,5365,0)
(5682,2758,0)
(1365,3292,0)
(5682,1864,0)
(1930,1892,0)
(2332,4574,0)
(4522,5634,0)
(1884,566,0)
(626,1798,0)
(464,5084,0)
(445,3635,0)
(4320,4408,0)
(3182,2621,0)
(1690,4730,0)
(4314,191,0)
(271,2066,0)
(1509,2190,0)
(4775,2190,0)
(2870,5059,0)
(3288,3292,0)
(1242,4686,0)
(3752,2744,0)
(4663,3676,0)
(986,627,0)
(4663,3114,0)
(5645,751,0)
(4068,1910,0)
(4947,3103,0)
(3877,2285,0)
(36,2523,0)
(2682,2480,0)
(1576,294,0)
(3540,1096,0)
(5088,4472,0)
(5400,3816,0)
(4305,1648,0)
(3956,1844,0)
(4129,2390,0)
(3629,777,0)
(1769,4289,0)
(1139,1531,0)
(741,2059,0)
(4886,2275,0)
(514,627,0)
(4263,5720,0)
(882,1171,0)
(2105,3993,0)
(1142,2410,0)
(2184,4636,0)
(631,3280,0)
(5128,4363,0)
(4663,4911,0)
(5100,1887,0)
(1224,3952,0)
(610,3582,0)
(972,3231,0)
(3064,209,0)
(3284,5464,0)
(1005,4390,0)
(4398,3140,0)
(5499,3292,0)
(2966,1009,0)
(1669,1677,0)
(5633,195,0)
(4652,5542,0)
(4580,5149,0)
(1012,3393,0)
(1065,4018,0)
(4006,2340,0)
(5391,3292,0)
(1667,2775,0)
(326,3305,0)
(241,697,0)
(1787,5388,0)
(1758,4497,0)
(4662,1629,0)
(817,2595,0)
(4005,2721,0)
(411,442,0)
(500,1034,0)
(1373,3252,0)
(1535,4763,0)
(3516,3713,0)
(4689,1817,0)
(792,3875,0)
(1885,4338,0)
(3931,2235,0)
(1841,5463,0)
(3484,1144,0)
(3941,5655,0)
(3328,5675,0)
(5717,5612,0)
(5445,2072,0)
(4276,703,0)
(19,759,0)
(3674,2639,0)
(565,627,0)
(2214,134,0)
(334,534,0)
(4318,4416,0)
(307,2902,0)
(2840,844,0)
(942,1737,0)
(732,627,0)
(5727,5355,0)
(3403,1327,0)
(2538,3713,0)
(4684,1441,0)
(3670,3036,0)
(2022,3799,0)
(5112,5430,0)
(1601,4105,0)
(1872,2752,0)
(51,3181,0)
(2025,2777,0)
(2238,5389,0)
(271,1886,0)
(1204,4689,0)
(3113,2014,0)
(825,5159,0)
(353,659,0)
(1830,1342,0)
(27,926,0)
(3000,1149,0)
(2880,4472,0)
(3155,1798,0)
(2925,1647,0)
(1153,4460,0)
(5196,4515,0)
(4663,209,0)
(2258,3392,0)
(812,2232,0)
(5332,1747,0)
(3706,758,0)
(3064,3197,0)
(2489,195,0)
(1703,2165,0)
(2326,2325,0)
(5204,619,0)
(1827,1844,0)
(1651,304,0)
(3328,1663,0)
(2248,1582,0)
(489,3003,0)
(2232,3292,0)
(5163,1610,0)
(3214,4585,0)
(4016,2044,0)
(2630,1984,0)
(4646,3021,0)
(2695,5515,0)
(4930,4243,0)
(1246,5561,0)
(5597,4645,0)
(5573,188,0)
(2795,476,0)
(4056,5059,0)
(992,104,0)
(3006,967,0)
(598,102,0)
(1489,1859,0)
(4708,1581,0)
(297,2065,0)
(3064,2785,0)
(4307,182,0)
(2723,4205,0)
(3042,5528,0)
(3081,1415,0)
(1132,3325,0)
(475,5090,0)
(4663,1752,0)
(3242,967,0)
(4245,3003,0)
(1412,4427,0)
(1340,224,0)
(5637,2552,0)
(3224,2253,0)
(4629,2544,0)
(3568,3646,0)
(4162,2756,0)
(5468,1844,0)
(233,193,0)
(3907,2430,0)
(2189,3400,0)
(5682,1831,0)
(4688,5415,0)
(4385,2743,0)
(2885,5068,0)
(2099,1905,0)
(3908,1,0)
(5476,1785,0)
(5682,2030,0)
(104,793,0)
(1446,4098,0)
(2167,3192,0)
(477,1717,0)
(2183,3102,0)
(4192,4667,0)
(2362,1412,0)
(585,3536,0)
(1817,2632,0)
(1415,1844,0)
(4364,2936,0)
(4165,2317,0)
(2338,3742,0)
(3718,3231,0)
(892,1123,0)
(2900,1009,0)
(4886,2706,0)
(5226,46,0)
(1893,1134,0)
(1851,3582,0)
(3979,4705,0)
(3036,3510,0)
(4981,558,0)
(2889,4048,0)
(2918,4911,0)
(4978,1648,0)
(1626,2190,0)
(474,294,0)
(2481,5059,0)
(927,592,0)
(852,580,0)
(4841,1379,0)
(1414,4802,0)
(4019,627,0)
(124,3407,0)
(3211,2218,0)
(1724,4341,0)
(182,2270,0)
(2580,627,0)
(5120,331,0)
(1394,3510,0)
(5427,5419,0)
(555,5587,0)
(4258,5686,0)
(965,4192,0)
(1944,2588,0)
(4663,1826,0)
(1760,1773,0)
(4621,1009,0)
(5050,1132,0)
(1839,134,0)
(1406,1045,0)
(3466,1844,0)
(4389,3043,0)
(4602,2869,0)
(3428,3064,0)
(904,737,0)
(4138,296,0)
(4565,368,0)
(262,3376,0)
(588,3681,0)
(5370,5493,0)
(5634,3582,0)
(330,1203,0)
(1406,3713,0)
(794,2108,0)
(4747,3846,0)
(502,2190,0)
(4444,3906,0)
(5722,4888,0)
(2355,4772,0)
(2852,2580,0)
(4036,1082,0)
(3148,2040,0)
(5639,1396,0)
(2353,1522,0)
(821,586,0)
(5755,596,0)
(3694,3292,0)
(2259,1613,0)
(4469,5283,0)
(1059,627,0)
(423,1608,0)
(1064,4449,0)
(314,1089,0)
(4409,2341,0)
(1042,4092,0)
(1998,1946,0)
(4890,1932,0)
(3635,2553,0)
(1145,4806,0)
(3650,4741,0)
(1917,1613,0)
(2887,1844,0)
(2523,5515,0)
(5157,1937,0)
(2326,2758,0)
(3662,3103,0)
(2918,4916,0)
(2935,1294,0)
(2940,3031,0)
(75,410,0)
(1132,2305,0)
(3945,3391,0)
(4568,3887,0)
(345,1183,0)
(915,1844,0)
(398,96,0)
(1737,3292,0)
(3939,2538,0)
(318,1859,0)
(5397,1958,0)
(1209,3292,0)
(600,834,0)
(1994,5535,0)
(2281,1442,0)
(1232,1613,0)
(1682,5741,0)
(3220,4084,0)
(778,1648,0)
(5052,4765,0)
(2001,1046,0)
(1213,5388,0)
(2429,3177,0)
(157,1174,0)
(5063,627,0)
(525,1423,0)
(5456,1817,0)
(4794,4068,0)
(4476,1555,0)
(999,3292,0)
(4663,565,0)
(3691,2553,0)
(2176,1716,0)
(1598,3292,0)
(3549,4785,0)
(3027,4294,0)
(5223,5567,0)
(5,883,0)
(5248,4864,0)
(3184,2190,0)
(504,5751,0)
(868,1851,0)
(1540,309,0)
(5194,1396,0)
(2398,603,0)
(4679,22,0)
(5703,5642,0)
(2154,1859,0)
(5020,5692,0)
(5682,2317,0)
(5266,154,0)
(3613,3952,0)
(1489,2251,0)
(5653,3319,0)
(5565,1779,0)
(583,316,0)
(3773,3628,0)
(406,4826,0)
(2531,1844,0)
(5444,2088,0)
(2809,5682,0)
(4033,2426,0)
(1314,5552,0)
(5488,4777,0)
(5044,885,0)
(489,4390,0)
(1192,3761,0)
(1182,41,0)
(3525,1297,0)
(3689,3239,0)
(501,3685,0)
(637,153,0)
(599,1976,0)
(4813,3292,0)
(2081,5329,0)
(967,3242,0)
(3969,1844,0)
(4917,4772,0)
(3934,2853,0)
(5010,3012,0)
(5365,243,0)
(1456,1817,0)
(5548,4236,0)
(710,4321,0)
(973,5385,0)
(2174,167,0)
(267,3064,0)
(4704,1613,0)
(4301,649,0)
(3271,294,0)
(2654,1649,0)
(4219,2022,0)
(5690,2614,0)
(486,601,0)
(180,244,0)
(2324,5311,0)
(1566,3571,0)
(3355,1842,0)
(1958,213,0)
(1662,3132,0)
(2898,3739,0)
(2727,217,0)
(2873,2143,0)
(1880,3292,0)
(4418,3507,0)
(3321,4228,0)
(1287,44,0)
(1360,3494,0)
(1296,5075,0)
(4999,2113,0)
(4820,5049,0)
(2034,3450,0)
(5321,3884,0)
(524,4257,0)
(1377,2234,0)
(1891,1844,0)
(2316,5059,0)
(4087,1450,0)
(10,4701,0)
(170,3441,0)
(3638,2190,0)
(3982,2190,0)
(5748,5306,0)
(173,5244,0)
(1056,2593,0)
(5592,4334,0)
(4878,916,0)
(3884,5404,0)
(3216,2472,0)
(5656,5075,0)
(3187,5511,0)
(5326,3978,0)
(4878,154,0)
(4691,1844,0)
(823,3979,0)
(1193,355,0)
(5148,2324,0)
(2547,1354,0)
(4526,1531,0)
(3119,5729,0)
(3352,4534,0)
(3728,1109,0)
(2369,893,0)
(2535,4110,0)
(1982,2893,0)
(2767,2915,0)
(2595,817,0)
(3802,3409,0)
(1704,2137,0)
(2485,3319,0)
(5258,735,0)
(3372,4961,0)
(3872,5119,0)
(2850,5429,0)
(1094,253,0)
(5763,4087,0)
(5540,1987,0)
(4706,158,0)
(3335,476,0)
(3669,1146,0)
(4295,3004,0)
(2270,182,0)
(3064,1568,0)
(4420,4860,0)
(3444,2687,0)
(39,1101,0)
(2970,341,0)
(1222,2481,0)
(4585,5059,0)
(1532,2529,0)
(414,1917,0)
(5269,209,0)
(2367,2190,0)
(5348,1741,0)
(2596,1009,0)
(2918,209,0)
(171,3054,0)
(5688,5212,0)
(3603,145,0)
(2408,1390,0)
(2853,2113,0)
(1466,3260,0)
(44,1844,0)
(5747,2424,0)
(3461,3682,0)
(4550,3507,0)
(5277,3292,0)
(4587,2490,0)
(3521,3211,0)
(1788,4223,0)
(1478,3130,0)
(1283,4305,0)
(3668,5493,0)
(3242,1412,0)
(4677,2258,0)
(4794,3759,0)
(1602,3208,0)
(4031,2139,0)
(4407,5059,0)
(1419,2388,0)
(3979,1864,0)
(2725,4301,0)
(3448,1844,0)
(5329,1416,0)
(3233,860,0)
(5652,4141,0)
(881,1844,0)
(664,5400,0)
(5470,627,0)
(4766,773,0)
(4754,2376,0)
(4663,4300,0)
(2449,3292,0)
(667,2762,0)
(3297,2108,0)
(5650,5546,0)
(325,5709,0)
(352,1844,0)
(1383,1179,0)
(3278,4914,0)
(1891,3761,0)
(494,5444,0)
(4194,1844,0)
(4735,627,0)
(1345,1775,0)
(1325,3692,0)
(888,3374,0)
(1539,670,0)
(4663,808,0)
(1605,741,0)
(1700,627,0)
(3160,1406,0)
(825,3292,0)
(4762,4801,0)
(1786,3448,0)
(3740,1703,0)
(5682,1802,0)
(3244,2599,0)
(3702,5279,0)
(4630,3353,0)
(1211,2768,0)
(848,587,0)
(1846,697,0)
(2326,1752,0)
(3286,5655,0)
(2063,2168,0)
(3965,3103,0)
(4742,627,0)
(784,3685,0)
(491,3713,0)
(3478,627,0)
(3508,1183,0)
(5231,5675,0)
(810,4168,0)
(4977,2805,0)
(3138,1438,0)
(2918,3093,0)
(3419,3720,0)
(5012,2750,0)
(248,3292,0)
(4037,5474,0)
(3803,4859,0)
(5234,3486,0)
(1960,4621,0)
(3324,2205,0)
(4725,1772,0)
(493,3292,0)
(4671,5515,0)
(4663,5093,0)
(860,195,0)
(13,3857,0)
(2326,1831,0)
(3979,4736,0)
(1035,5059,0)
(5089,1773,0)
(4871,907,0)
(1097,1009,0)
(4625,4095,0)
(3802,1844,0)
(1832,558,0)
(2422,2291,0)
(4761,1611,0)
(2709,3292,0)
(3351,3739,0)
(4670,1377,0)
(2314,1603,0)
(5715,4951,0)
(1389,1847,0)
(2872,3042,0)
(182,3713,0)
(2014,4876,0)
(5682,5373,0)
(123,3787,0)
(1637,2827,0)
(792,2811,0)
(792,3703,0)
(134,4638,0)
(1813,627,0)
(1557,2447,0)
(5665,350,0)
(4548,2786,0)
(3826,158,0)
(2149,4548,0)
(3405,3473,0)
(5334,5149,0)
(5000,4242,0)
(5689,5173,0)
(1237,74,0)
(2472,2422,0)
(3333,308,0)
(1120,2629,0)
(4603,3884,0)
(24,1844,0)
(4960,1523,0)
(5392,4791,0)
(3560,1553,0)
(3901,2554,0)
(4161,3361,0)
(3832,1737,0)
(2331,4655,0)
(5711,2464,0)
(3877,3603,0)
(1570,1622,0)
(4443,5528,0)
(2647,382,0)
(1960,138,0)
(2678,1390,0)
(2053,1844,0)
(3979,1831,0)
(96,615,0)
(2114,4717,0)
(1988,2996,0)
(1892,2106,0)
(4826,3272,0)
(3064,2030,0)
(5399,3635,0)
(605,2553,0)
(5120,1101,0)
(4264,5049,0)
(749,2816,0)
(39,3039,0)
(420,3571,0)
(2629,5152,0)
(4041,2785,0)
(4777,3292,0)
(541,1844,0)
(5117,2143,0)
(5554,2522,0)
(1703,2907,0)
(4416,1844,0)
(4506,28,0)
(1185,4933,0)
(1141,3635,0)
(2670,3192,0)
(2612,5003,0)
(5268,5097,0)
(378,3292,0)
(3281,1122,0)
(4832,3347,0)
(2520,331,0)
(1102,3570,0)
(33,2334,0)
(195,3548,0)
(64,1613,0)
(1460,122,0)
(467,5306,0)
(2882,199,0)
(2474,2171,0)
(1580,2046,0)
(3237,4818,0)
(39,331,0)
(2857,3635,0)
(4196,2687,0)
(2326,4705,0)
(4084,2802,0)
(3583,5707,0)
(2581,5176,0)
(650,2405,0)
(177,2367,0)
(5574,4051,0)
(4969,1130,0)
(3984,3730,0)
(2193,3292,0)
(1510,4849,0)
(2248,4803,0)
(745,1721,0)
(1600,2502,0)
(3979,5093,0)
(3179,2725,0)
(1204,717,0)
(4589,1417,0)
(2339,1844,0)
(5162,453,0)
(1335,3169,0)
(804,5102,0)
(1478,2357,0)
(5198,5236,0)
(3759,4794,0)
(3347,3724,0)
(387,2056,0)
(2230,1617,0)
(1932,5177,0)
(2312,1584,0)
(570,2190,0)
(1024,3292,0)
(2811,3588,0)
(510,4934,0)
(2280,3188,0)
(3823,1368,0)
(4534,1573,0)
(2806,2962,0)
(5612,328,0)
(3542,2741,0)
(1581,627,0)
(2442,2578,0)
(4634,250,0)
(3732,4139,0)
(1368,5187,0)
(596,4391,0)
(1945,1622,0)
(65,3031,0)
(3113,384,0)
(3947,1648,0)
(5436,636,0)
(4321,1844,0)
(1273,3614,0)
(1333,5063,0)
(3400,5059,0)
(2256,4666,0)
(2851,5637,0)
(530,4379,0)
(5070,3474,0)
(5054,4071,0)
(1391,3021,0)
(3813,2276,0)
(3859,5134,0)
(2109,5567,0)
(4826,1844,0)
(3167,2581,0)
(2068,1786,0)
(4922,606,0)
(3606,4022,0)
(3791,2491,0)
(2918,3821,0)
(5379,869,0)
(1858,3533,0)
(1652,3308,0)
(469,3473,0)
(47,627,0)
(464,834,0)
(1679,3713,0)
(4757,2855,0)
(3064,4300,0)
(3154,4621,0)
(4318,1306,0)
(44,5100,0)
(1444,19,0)
(618,1259,0)
(2590,4271,0)
(3075,565,0)
(4667,5329,0)
(817,1288,0)
(2415,4863,0)
(2329,3055,0)
(2527,3129,0)
(759,1792,0)
(3571,1737,0)
(1363,627,0)
(853,509,0)
(3599,5474,0)
(705,5059,0)
(5334,977,0)
(55,1886,0)
(5754,5125,0)
(319,4439,0)
(709,743,0)
(4279,5487,0)
(3620,2934,0)
(393,627,0)
(2393,3494,0)
(2304,2179,0)
(756,920,0)
(907,2190,0)
(5078,442,0)
(2199,1613,0)
(889,65,0)
(4515,5586,0)
(4857,1613,0)
(4656,3681,0)
(1882,5608,0)
(4979,1923,0)
(3731,3832,0)
(2529,3064,0)
(239,4719,0)
(5037,3713,0)
(509,3837,0)
(450,4357,0)
(5002,2997,0)
(4959,3857,0)
(1564,4176,0)
(5524,1926,0)
(4850,555,0)
(5487,2715,0)
(2776,4254,0)
(1395,1723,0)
(936,149,0)
(4889,1844,0)
(943,1408,0)
(2589,5059,0)
(4197,3077,0)
(2809,5059,0)
(2621,737,0)
(1210,922,0)
(1979,4920,0)
(5658,2946,0)
(3339,159,0)
(904,4639,0)
(5017,692,0)
(2326,1775,0)
(1925,1083,0)
(4898,4479,0)
(2182,4187,0)
(2520,4924,0)
(706,2822,0)
(2724,3151,0)
(4601,2248,0)
(931,756,0)
(451,5429,0)
(542,1844,0)
(1020,5753,0)
(3979,4412,0)
(3506,5207,0)
(689,1525,0)
(2299,3037,0)
(4726,14,0)
(126,2190,0)
(2326,5469,0)
(3067,4360,0)
(1469,4766,0)
(401,2447,0)
(3819,5542,0)
(5076,2581,0)
(5356,1255,0)
(3967,3797,0)
(883,627,0)
(699,3119,0)
(5496,5139,0)
(2434,5059,0)
(2195,2542,0)
(5384,2426,0)
(5704,627,0)
(4068,4249,0)
(2246,580,0)
(129,1844,0)
(4317,4847,0)
(4828,5059,0)
(269,931,0)
(5338,1813,0)
(267,2902,0)
(4663,3669,0)
(3979,601,0)
(3460,5712,0)
(438,4901,0)
(2351,2480,0)
(5162,5059,0)
(3382,484,0)
(1370,1844,0)
(3720,2845,0)
(1628,4726,0)
(4865,4318,0)
(5288,1613,0)
(5528,1648,0)
(174,3292,0)
(3345,3122,0)
(4080,154,0)
(5094,2148,0)
(4211,1371,0)
(1424,1828,0)
(2148,2190,0)
(722,1844,0)
(2439,2953,0)
(4755,1650,0)
(984,4471,0)
(5362,4724,0)
(287,5704,0)
(2085,146,0)
(1862,918,0)
(1121,5553,0)
(5034,2787,0)
(2063,2614,0)
(2171,2190,0)
(367,4845,0)
(3,3292,0)
(24,1919,0)
(3652,3177,0)
(1456,627,0)
(1388,1621,0)
(953,1798,0)
(2963,2452,0)
(5214,1583,0)
(3546,4896,0)
(2904,182,0)
(589,5321,0)
(914,4595,0)
(1389,3159,0)
(2355,2581,0)
(4689,1204,0)
(4068,3292,0)
(3022,1396,0)
(1130,5059,0)
(2540,4591,0)
(2583,627,0)
(2403,4789,0)
(1589,3349,0)
(21,1798,0)
(3848,5059,0)
(267,5682,0)
(1450,4087,0)
(5541,4971,0)
(4916,2017,0)
(4464,3452,0)
(267,5059,0)
(1518,2149,0)
(5318,4911,0)
(4016,466,0)
(1485,4606,0)
(3023,4787,0)
(5459,5059,0)
(2779,5215,0)
(4682,1648,0)
(3556,813,0)
(3846,4334,0)
(5742,4915,0)
(5451,4569,0)
(1813,519,0)
(4663,4628,0)
(2687,4052,0)
(329,4818,0)
(2667,3292,0)
(1112,5511,0)
(5682,4848,0)
(2918,2402,0)
(1969,3292,0)
(378,1892,0)
(371,4181,0)
(556,3468,0)
(5539,5059,0)
(4611,3292,0)
(5350,1844,0)
(2175,208,0)
(4737,3292,0)
(5250,1721,0)
(4640,1341,0)
(4363,627,0)
(1994,3240,0)
(3387,5335,0)
(2256,3644,0)
(4045,4073,0)
(5558,3238,0)
(5183,2440,0)
(2418,2364,0)
(3979,1752,0)
(1719,627,0)
(3582,43,0)
(4590,1844,0)
(3394,4181,0)
(5616,1613,0)
(3572,2646,0)
(1183,3508,0)
(780,2405,0)
(3359,3657,0)
(4533,1825,0)
(2008,1844,0)
(2212,5504,0)
(5134,5157,0)
(284,3662,0)
(4774,4221,0)
(2140,2413,0)
(2949,5394,0)
(5355,738,0)
(5051,2190,0)
(4574,243,0)
(2738,1568,0)
(1520,907,0)
(3010,4781,0)
(1013,835,0)
(2315,2579,0)
(668,793,0)
(2424,737,0)
(835,1844,0)
(5141,2344,0)
(3364,5059,0)
(4057,134,0)
(4352,5059,0)
(497,1075,0)
(3533,5055,0)
(3523,4391,0)
(5353,1852,0)
(449,1844,0)
(1928,3292,0)
(5055,594,0)
(2057,5202,0)
(5479,2477,0)
(3669,1396,0)
(3569,4745,0)
(1100,2193,0)
(4751,4688,0)
(4351,3292,0)
(827,3601,0)
(4452,3320,0)
(4008,2801,0)
(59,689,0)
(4957,2033,0)
(5643,1388,0)
(2396,4939,0)
(2032,5049,0)
(4068,1456,0)
(472,1746,0)
(622,627,0)
(4396,4052,0)
(3027,3011,0)
(451,5560,0)
(3698,1582,0)
(685,2961,0)
(2728,4721,0)
(2242,1874,0)
(2937,2173,0)
(4256,1919,0)
(930,3559,0)
(2089,4273,0)
(3054,171,0)
(1490,1080,0)
(3491,2557,0)
(3978,2032,0)
(4080,3567,0)
(1551,2512,0)
(4227,98,0)
(408,939,0)
(623,5398,0)
(2975,5125,0)
(5753,5310,0)
(1139,762,0)
(1564,5448,0)
(4396,4785,0)
(521,159,0)
(3979,4905,0)
(2898,1859,0)
(4668,4305,0)
(5133,49,0)
(609,3171,0)
(3396,3607,0)
(2064,984,0)
(213,1958,0)
(4663,2402,0)
(4590,592,0)
(628,5629,0)
(5264,5275,0)
(5614,550,0)
(136,2297,0)
(5615,5539,0)
(3093,4878,0)
(2289,1444,0)
(3283,44,0)
(1105,1241,0)
(236,569,0)
(5521,5542,0)
(3376,2271,0)
(2357,5176,0)
(2705,103,0)
(503,2666,0)
(3177,3103,0)
(4776,672,0)
(155,4776,0)
(47,3397,0)
(3325,1132,0)
(3323,2728,0)
(242,1113,0)
(5370,2321,0)
(5633,3227,0)
(792,3420,0)
(2508,2802,0)
(149,936,0)
(3745,782,0)
(3425,5061,0)
(3217,182,0)
(2969,4223,0)
(5588,4776,0)
(872,1648,0)
(4040,1912,0)
(3632,3635,0)
(4932,2232,0)
(784,3122,0)
(5608,627,0)
(3858,1648,0)
(1612,4604,0)
(5557,542,0)
(4446,1818,0)
(3433,195,0)
(1245,488,0)
(926,3292,0)
(5206,695,0)
(835,3649,0)
(165,3747,0)
(2695,2338,0)
(2651,726,0)
(1850,5400,0)
(3759,3906,0)
(5542,4652,0)
(3028,2190,0)
(2500,5149,0)
(465,4705,0)
(2750,5158,0)
(3177,2426,0)
(4311,5683,0)
(2373,3978,0)
(2918,4905,0)
(2948,2714,0)
(4235,4644,0)
(1160,4425,0)
(3064,4084,0)
(2412,3292,0)
(139,4456,0)
(5455,4267,0)
(3597,792,0)
(3761,1891,0)
(2426,3292,0)
(3064,2406,0)
(1119,2324,0)
(2302,3388,0)
(5135,1725,0)
(4512,3393,0)
(5264,3493,0)
(1526,1844,0)
(5501,3406,0)
(1134,3682,0)
(2196,1157,0)
(2152,96,0)
(5629,5433,0)
(1129,3644,0)
(4788,3176,0)
(3409,3802,0)
(3675,44,0)
(2505,3840,0)
(3438,100,0)
(3349,2307,0)
(1139,4145,0)
(1265,627,0)
(2129,2553,0)
(3307,2848,0)
(1311,837,0)
(2739,5675,0)
(4499,2179,0)
(4990,294,0)
(792,3292,0)
(1413,195,0)
(3578,1234,0)
(1937,5696,0)
(3836,5102,0)
(407,1398,0)
(3911,739,0)
(3064,1802,0)
(2959,3292,0)
(3384,1844,0)
(2899,4789,0)
(2808,3439,0)
(3346,5015,0)
(4018,195,0)
(2443,133,0)
(2716,4884,0)
(3064,4632,0)
(5386,2848,0)
(4331,1844,0)
(4642,1822,0)
(4647,1473,0)
(3673,4947,0)
(102,3582,0)
(3090,4940,0)
(3979,4449,0)
(2722,1773,0)
(2541,97,0)
(2930,2190,0)
(3338,627,0)
(1110,1844,0)
(4033,5287,0)
(5731,3255,0)
(4914,1844,0)
(4027,3567,0)
(779,684,0)
(3979,754,0)
(1367,1883,0)
(4834,2190,0)
(732,2141,0)
(1279,3913,0)
(3979,1031,0)
(5202,3292,0)
(2645,5448,0)
(5218,5687,0)
(5286,65,0)
(3668,1972,0)
(43,3582,0)
(5716,4032,0)
(2918,2486,0)
(2918,3150,0)
(140,5422,0)
(4868,3292,0)
(3483,217,0)
(1733,2367,0)
(2517,2214,0)
(2972,2410,0)
(3508,627,0)
(3843,3992,0)
(4734,5055,0)
(604,4049,0)
(3214,5171,0)
(4940,5059,0)
(4185,331,0)
(3531,2402,0)
(3145,3844,0)
(2326,601,0)
(684,1844,0)
(2821,5059,0)
(3123,4641,0)
(2226,2341,0)
(563,4428,0)
(3116,3582,0)
(3656,1844,0)
(1675,1648,0)
(3592,2464,0)
(2484,803,0)
(1041,1844,0)
(2714,3979,0)
(3294,3917,0)
(4497,1844,0)
(924,5050,0)
(2683,3202,0)
(2918,1230,0)
(3667,5171,0)
(687,4280,0)
(4777,5488,0)
(122,1460,0)
(1721,3292,0)
(1947,4334,0)
(2569,3292,0)
(1550,3778,0)
(847,627,0)
(1697,1487,0)
(3213,5438,0)
(4288,4279,0)
(3190,3114,0)
(4938,2222,0)
(834,5655,0)
(5319,3402,0)
(117,4912,0)
(4792,3064,0)
(1795,5206,0)
(2326,2152,0)
(467,1644,0)
(3226,1648,0)
(2316,2902,0)
(5537,2991,0)
(3064,2413,0)
(4119,4569,0)
(792,1284,0)
(1571,2032,0)
(3617,5249,0)
(2690,2706,0)
(5282,2902,0)
(1888,3260,0)
(5120,1917,0)
(5109,189,0)
(1426,4897,0)
(3589,2821,0)
(542,1269,0)
(157,627,0)
(2141,3744,0)
(3591,3143,0)
(2630,1827,0)
(3964,2521,0)
(3696,957,0)
(2596,5146,0)
(3910,1388,0)
(5370,2918,0)
(2437,3320,0)
(2927,5025,0)
(4423,1910,0)
(1366,2790,0)
(4859,1842,0)
(1259,3635,0)
(5514,3240,0)
(4578,1438,0)
(1221,3644,0)
(684,2063,0)
(2080,3441,0)
(4174,1844,0)
(1150,1625,0)
(3063,2255,0)
(1840,1807,0)
(437,5486,0)
(2751,4108,0)
(638,1601,0)
(2681,5086,0)
(5682,1826,0)
(2600,195,0)
(352,4386,0)
(1640,3438,0)
(4599,4831,0)
(5459,1919,0)
(3095,3802,0)
(3341,1301,0)
(4725,2141,0)
(4955,3292,0)
(5702,5020,0)
(4066,5361,0)
(1695,2640,0)
(4068,1775,0)
(5255,87,0)
(4097,399,0)
(3552,534,0)
(3018,2555,0)
(5567,5702,0)
(2388,5537,0)
(2455,4134,0)
(1449,154,0)
(445,1844,0)
(4883,3160,0)
(3563,3064,0)
(2145,4918,0)
(690,4627,0)
(4130,2190,0)
(1523,2357,0)
(1290,3292,0)
(2896,2687,0)
(1488,4803,0)
(548,1507,0)
(4835,167,0)
(5641,5429,0)
(3064,5115,0)
(2883,3563,0)
(4514,4717,0)
(188,5573,0)
(4787,3064,0)
(1753,2488,0)
(142,492,0)
(823,5682,0)
(2763,2747,0)
(2751,2553,0)
(2918,4084,0)
(792,3180,0)
(2066,2792,0)
(5015,4896,0)
(1202,936,0)
(4824,2338,0)
(118,1241,0)
(777,1844,0)
(4353,3523,0)
(1241,859,0)
(1592,4903,0)
(5682,3114,0)
(2907,5634,0)
(3114,627,0)
(3656,2633,0)
(2898,2251,0)
(3693,307,0)
(1565,5017,0)
(3326,2609,0)
(373,4917,0)
(2256,5647,0)
(3064,2486,0)
(5519,3655,0)
(3418,4721,0)
(181,2793,0)
(3659,3248,0)
(1194,4167,0)
(3464,4391,0)
(2536,2553,0)
(630,3292,0)
(5250,4915,0)
(2816,3300,0)
(4002,1651,0)
(1900,4845,0)
(4461,2494,0)
(3979,2406,0)
(3015,4271,0)
(2093,1314,0)
(1965,511,0)
(4483,1834,0)
(3758,4689,0)
(3954,415,0)
(5440,190,0)
(2416,3064,0)
(5661,2915,0)
(1297,2614,0)
(5438,5075,0)
(5064,627,0)
(2657,106,0)
(5568,2600,0)
(4223,1788,0)
(1351,2813,0)
(2365,1009,0)
(2945,44,0)
(2918,93,0)
(1623,4000,0)
(5105,3400,0)
(645,1293,0)
(4504,1175,0)
(755,4940,0)
(4291,674,0)
(305,5516,0)
(4808,4884,0)
(4888,2190,0)
(2233,2250,0)
(4862,3384,0)
(3810,77,0)
(3978,3165,0)
(2360,1813,0)
(939,408,0)
(4759,851,0)
(1225,2416,0)
(2884,5059,0)
(2327,627,0)
(1908,2916,0)
(2578,756,0)
(212,4257,0)
(1229,2923,0)
(3925,1012,0)
(3990,2063,0)
(443,3540,0)
(3186,5593,0)
(3300,2816,0)
(2272,3292,0)
(5667,2056,0)
(5050,998,0)
(5446,3292,0)
(5282,3979,0)
(364,3255,0)
(2798,742,0)
(5472,2404,0)
(1125,5138,0)
(3328,2038,0)
(3979,2402,0)
(5385,4000,0)
(3052,368,0)
(914,3362,0)
(5209,4256,0)
(2059,741,0)
(718,2026,0)
(619,3223,0)
(2714,3064,0)
(2663,2802,0)
(4750,3274,0)
(1977,659,0)
(2077,3420,0)
(3025,4391,0)
(2026,627,0)
(3045,1798,0)
(3099,2542,0)
(4280,4583,0)
(454,4447,0)
(5176,2357,0)
(1308,942,0)
(1728,1620,0)
(2947,363,0)
(3389,3632,0)
(5709,627,0)
(100,3438,0)
(4226,5372,0)
(2923,627,0)
(592,4590,0)
(4207,3744,0)
(3152,4807,0)
(2452,923,0)
(5160,4412,0)
(1442,5059,0)
(2500,331,0)
(3248,3816,0)
(5189,3787,0)
(943,3635,0)
(5503,2429,0)
(3930,4216,0)
(1944,3913,0)
(1259,618,0)
(4382,3381,0)
(5420,627,0)
(94,4705,0)
(4714,5059,0)
(1075,14,0)
(639,5306,0)
(2127,74,0)
(3914,3679,0)
(207,689,0)
(5516,5622,0)
(466,4016,0)
(2430,627,0)
(2038,3328,0)
(2326,4894,0)
(4418,4834,0)
(1408,943,0)
(4663,1568,0)
(4725,1817,0)
(2172,2455,0)
(4294,3027,0)
(2266,3713,0)
(2764,2214,0)
(294,4990,0)
(3124,252,0)
(4419,2435,0)
(4280,2032,0)
(1399,5339,0)
(44,735,0)
(2123,1844,0)
(717,1018,0)
(4578,627,0)
(3922,4628,0)
(3668,4428,0)
(4736,627,0)
(5461,4383,0)
(4735,4472,0)
(2811,258,0)
(4606,2190,0)
(5321,5284,0)
(1409,5264,0)
(945,4569,0)
(5456,5343,0)
(229,1255,0)
(2395,2463,0)
(522,732,0)
(2187,3292,0)
(116,5070,0)
(3979,3669,0)
(3291,5512,0)
(4939,3418,0)
(3438,1844,0)
(5635,629,0)
(5186,4828,0)
(3816,5348,0)
(3734,1817,0)
(1905,1173,0)
(5210,502,0)
(29,1779,0)
(1498,2509,0)
(2227,5537,0)
(1440,983,0)
(3921,1555,0)
(2530,2471,0)
(1311,4780,0)
(853,2190,0)
(120,2316,0)
(5428,3391,0)
(5566,394,0)
(5622,408,0)
(554,2998,0)
(4067,627,0)
(2918,2255,0)
(1831,5059,0)
(5556,1976,0)
(1806,4297,0)
(674,5464,0)
(867,2976,0)
(2660,2745,0)
(2133,1864,0)
(3760,4639,0)
(3668,2326,0)
(4014,5431,0)
(1778,1132,0)
(5221,1351,0)
(635,3292,0)
(4660,4561,0)
(5061,1844,0)
(2579,2315,0)
(2486,5090,0)
(4269,5011,0)
(3897,627,0)
(3682,1134,0)
(4073,3487,0)
(76,5196,0)
(5424,2126,0)
(2249,4727,0)
(4928,3292,0)
(5170,239,0)
(5700,1579,0)
(2123,4242,0)
(2015,3253,0)
(2149,3741,0)
(1611,1844,0)
(4659,1844,0)
(3157,4280,0)
(4860,195,0)
(5723,1122,0)
(78,977,0)
(3077,627,0)
(4676,300,0)
(1990,3292,0)
(453,4932,0)
(5280,1101,0)
(4071,5054,0)
(4190,271,0)
(2971,5642,0)
(784,4928,0)
(3777,2235,0)
(1472,2872,0)
(1553,1671,0)
(5279,4266,0)
(2406,627,0)
(2158,1844,0)
(228,717,0)
(3279,904,0)
(3541,20,0)
(3573,1844,0)
(759,19,0)
(4921,4990,0)
(4737,91,0)
(5682,1456,0)
(5197,4127,0)
(5118,1613,0)
(433,4236,0)
(3692,2678,0)
(1211,1411,0)
(2150,281,0)
(4663,3150,0)
(428,5424,0)
(2333,5525,0)
(2774,2974,0)
(3912,3036,0)
(2014,3113,0)
(5347,2286,0)
(4235,5059,0)
(5573,2745,0)
(4663,2413,0)
(5682,2325,0)
(2470,328,0)
(4900,4068,0)
(2808,1844,0)
(444,1798,0)
(3429,5573,0)
(2326,1625,0)
(1823,330,0)
(2326,4300,0)
(128,1886,0)
(4503,1511,0)
(954,87,0)
(1242,1406,0)
(164,3058,0)
(2173,1844,0)
(5510,2246,0)
(4048,627,0)
(5317,5229,0)
(5072,5177,0)
(2078,2497,0)
(3839,2810,0)
(2325,5682,0)
(3319,217,0)
(5651,1845,0)
(3428,3979,0)
(99,2582,0)
(3483,4639,0)
(3760,680,0)
(1271,4179,0)
(5033,1203,0)
(3012,4641,0)
(1152,1379,0)
(694,1844,0)
(540,1613,0)
(3979,1778,0)
(1906,5602,0)
(500,2190,0)
(5682,3093,0)
(5298,1406,0)
(49,1195,0)
(4516,3888,0)
(3678,3755,0)
(3913,5429,0)
(4404,3381,0)
(1728,2264,0)
(1659,507,0)
(2090,3762,0)
(2399,1046,0)
(3980,1098,0)
(1883,1367,0)
(3181,51,0)
(32,5345,0)
(3431,3439,0)
(2338,4824,0)
(4900,3979,0)
(4484,4659,0)
(4368,5603,0)
(3948,4530,0)
(4201,823,0)
(5212,2580,0)
(1274,4930,0)
(242,3630,0)
(222,1831,0)
(4920,880,0)
(2805,4247,0)
(2225,3300,0)
(3979,2486,0)
(1766,1989,0)
(3684,2887,0)
(198,2124,0)
(3833,1009,0)
(4687,3540,0)
(774,2190,0)
(1047,622,0)
(3533,328,0)
(1614,1031,0)
(5058,2555,0)
(244,2925,0)
(908,4013,0)
(5709,325,0)
(798,3224,0)
(5610,5059,0)
(4217,273,0)
(172,1900,0)
(2326,3923,0)
(112,917,0)
(4301,5041,0)
(5165,1891,0)
(2483,3902,0)
(4063,3488,0)
(940,1396,0)
(5224,3510,0)
(5016,1822,0)
(1537,4618,0)
(4033,3826,0)
(512,4764,0)
(1865,2648,0)
(3307,1844,0)
(4379,2469,0)
(483,1263,0)
(2506,3292,0)
(4358,5689,0)
(2581,1817,0)
(132,4611,0)
(5007,3292,0)
(2578,1857,0)
(159,627,0)
(4748,2542,0)
(2063,3990,0)
(4716,3802,0)
(4932,2271,0)
(3312,2179,0)
(5492,1392,0)
(1461,3165,0)
(5716,1203,0)
(3873,5419,0)
(4011,4100,0)
(3772,3695,0)
(4269,2250,0)
(3116,195,0)
(4892,3414,0)
(5370,1972,0)
(3400,2960,0)
(3963,3655,0)
(5629,4636,0)
(278,1613,0)
(5682,2997,0)
(5110,5428,0)
(1193,1844,0)
(2326,2392,0)
(2115,5250,0)
(1772,4772,0)
(2737,3292,0)
(2193,5059,0)
(5036,2918,0)
(5048,2562,0)
(3077,2999,0)
(751,5645,0)
(2325,5059,0)
(3118,3097,0)
(4297,4497,0)
(4598,5361,0)
(4882,1844,0)
(5219,3292,0)
(3693,473,0)
(2653,3397,0)
(1155,4724,0)
(4511,3451,0)
(1946,627,0)
(1146,3669,0)
(1297,3459,0)
(5286,3614,0)
(5423,4595,0)
(983,2139,0)
(3064,281,0)
(2592,3292,0)
(4811,1395,0)
(916,4878,0)
(4108,2751,0)
(1476,3973,0)
(281,3685,0)
(2714,5682,0)
(3136,2025,0)
(307,3693,0)
(1435,4971,0)
(3830,579,0)
(459,1079,0)
(4615,1741,0)
(1294,4081,0)
(1583,2538,0)
(1818,1844,0)
(4801,3402,0)
(4362,3159,0)
(2192,5143,0)
(167,1073,0)
(326,1844,0)
(4379,4122,0)
(234,3524,0)
(1607,202,0)
(4787,4068,0)
(3979,4749,0)
(1893,2906,0)
(4295,5055,0)
(3994,2226,0)
(3536,627,0)
(3388,1907,0)
(4333,1076,0)
(3949,1844,0)
(5702,1836,0)
(3064,4905,0)
(1780,2388,0)
(5351,226,0)
(1267,1613,0)
(1559,5429,0)
(516,2339,0)
(3657,5350,0)
(507,3292,0)
(3238,511,0)
(5418,3447,0)
(5104,3969,0)
(2042,893,0)
(4171,3739,0)
(5081,911,0)
(990,4652,0)
(3979,816,0)
(4028,3526,0)
(533,3206,0)
(1571,5438,0)
(5276,5673,0)
(610,195,0)
(185,3292,0)
(4736,998,0)
(2456,176,0)
(5018,3475,0)
(941,190,0)
(1708,2469,0)
(1707,2273,0)
(1813,4472,0)
(3894,469,0)
(1332,1993,0)
(1277,5139,0)
(904,627,0)
(5132,3119,0)
(5054,1844,0)
(2743,4385,0)
(2918,2480,0)
(2981,3116,0)
(2918,601,0)
(3762,5365,0)
(19,1444,0)
(3126,1082,0)
(1376,2426,0)
(4157,514,0)
(2441,1059,0)
(4799,146,0)
(247,3292,0)
(1506,5159,0)
(1656,1581,0)
(2918,4632,0)
(3137,2850,0)
(2519,725,0)
(4907,307,0)
(3981,2945,0)
(795,5067,0)
(5373,2321,0)
(1756,294,0)
(950,3361,0)
(1827,5355,0)
(1238,5698,0)
(2769,3110,0)
(39,3713,0)
(2661,4908,0)
(2416,4068,0)
(1808,2244,0)
(2939,5335,0)
(1336,1828,0)
(5584,1687,0)
(5357,352,0)
(3239,1330,0)
(2256,5562,0)
(1233,2752,0)
(2328,5011,0)
(4003,1844,0)
(1388,1844,0)
(3979,4632,0)
(4641,4933,0)
(3176,4788,0)
(2616,3582,0)
(1486,2833,0)
(2918,208,0)
(245,4027,0)
(5448,1564,0)
(3690,195,0)
(782,3292,0)
(4567,2072,0)
(4466,3713,0)
(5712,5553,0)
(2326,816,0)
(4605,4849,0)
(4560,5550,0)
(267,4068,0)
(1981,2889,0)
(1206,3640,0)
(5766,5764,0)
(3558,4642,0)
(5073,3816,0)
(5738,5494,0)
(1148,3172,0)
(5736,2190,0)
(1354,3185,0)
(2918,2413,0)
(2288,5207,0)
(2862,670,0)
(636,2604,0)
(2804,1791,0)
(4979,195,0)
(3184,389,0)
(4993,3292,0)
(4273,2089,0)
(3518,1628,0)
(3842,2630,0)
(2384,586,0)
(1910,5059,0)
(819,731,0)
(824,918,0)
(4728,1741,0)
(4255,2374,0)
(8,4719,0)
(2261,4693,0)
(5350,5434,0)
(271,3000,0)
(1936,5614,0)
(5250,4239,0)
(890,3292,0)
(3255,5731,0)
(445,4569,0)
(837,1311,0)
(3563,3755,0)
(4202,3902,0)
(3882,3984,0)
(4538,4295,0)
(2124,198,0)
(1323,4159,0)
(769,2251,0)
(5419,5427,0)
(2897,4174,0)
(2679,5474,0)
(1433,3582,0)
(3064,3646,0)
(3485,1601,0)
(432,1423,0)
(1696,3385,0)
(5252,5325,0)
(2918,4894,0)
(2988,4569,0)
(4009,5244,0)
(107,3647,0)
(4372,5477,0)
(4068,1647,0)
(3499,5246,0)
(560,3417,0)
(557,1844,0)
(5682,1230,0)
(1251,1559,0)
(4872,627,0)
(1595,108,0)
(2369,2753,0)
(1147,624,0)
(2915,1181,0)
(1511,1558,0)
(4338,1553,0)
(3661,2325,0)
(1291,1416,0)
(2918,3669,0)
(4598,3612,0)
(3311,1608,0)
(3626,3292,0)
(5334,3417,0)
(1076,4333,0)
(2997,5059,0)
(5613,4932,0)
(4919,4120,0)
(4996,2404,0)
(3369,318,0)
(340,5055,0)
(2169,3791,0)
(3642,5697,0)
(3564,3647,0)
(5078,1909,0)
(4894,3054,0)
(4636,895,0)
(4102,5415,0)
(5316,2428,0)
(2557,2190,0)
(4693,4442,0)
(2420,253,0)
(1956,3292,0)
(1161,399,0)
(2868,627,0)
(5624,3307,0)
(3534,5059,0)
(5086,2922,0)
(1109,4499,0)
(5406,3610,0)
(5648,3142,0)
(1443,4982,0)
(5282,5059,0)
(1319,3307,0)
(5458,1844,0)
(2030,3743,0)
(69,252,0)
(5731,4676,0)
(4637,1716,0)
(1774,1139,0)
(921,4663,0)
(157,4070,0)
(4501,3988,0)
(4083,4939,0)
(2742,1148,0)
(1532,1073,0)
(5609,2648,0)
(4738,1263,0)
(1785,615,0)
(4983,1851,0)
(394,31,0)
(2214,627,0)
(767,1844,0)
(5682,3676,0)
(2257,4751,0)
(651,4143,0)
(3959,4982,0)
(1358,2577,0)
(4471,5588,0)
(4042,5630,0)
(1453,4442,0)
(1650,627,0)
(5549,1662,0)
(860,4673,0)
(162,4396,0)
(143,4925,0)
(285,2554,0)
(3235,331,0)
(3038,3034,0)
(277,3028,0)
(4585,378,0)
(1874,2996,0)
(2500,1101,0)
(4338,662,0)
(4527,5500,0)
(4059,3739,0)
(4402,4244,0)
(797,4125,0)
(1267,5059,0)
(2523,36,0)
(1705,410,0)
(4335,2997,0)
(2228,98,0)
(743,709,0)
(4910,1663,0)
(3064,2540,0)
(2309,2735,0)
(394,1396,0)
(282,456,0)
(1959,2863,0)
(111,3055,0)
(619,1329,0)
(538,3508,0)
(5214,1389,0)
(4906,3058,0)
(712,3292,0)
(864,1443,0)
(1355,4671,0)
(2743,3618,0)
(5041,3763,0)
(3257,3636,0)
(3211,1844,0)
(2326,4102,0)
(5162,4686,0)
(1413,3582,0)
(1983,1844,0)
(5013,3853,0)
(2346,4039,0)
(580,2246,0)
(4239,5250,0)
(3320,5059,0)
(5334,1917,0)
(1103,193,0)
(5475,267,0)
(4136,3259,0)
(3658,5656,0)
(1156,3292,0)
(1417,2061,0)
(4794,5682,0)
(39,3417,0)
(1382,327,0)
(4209,4900,0)
(714,4726,0)
(461,5709,0)
(4497,169,0)
(3837,509,0)
(4132,1844,0)
(4410,1294,0)
(2445,2946,0)
(5352,502,0)
(4477,4882,0)
(2844,3438,0)
(2336,627,0)
(2629,3635,0)
(4818,627,0)
(636,5436,0)
(2326,5099,0)
(5298,4377,0)
(1080,5685,0)
(3428,5059,0)
(2120,627,0)
(4860,1703,0)
(4665,3338,0)
(1454,4270,0)
(4456,627,0)
(2088,5444,0)
(741,627,0)
(2932,1406,0)
(5560,1844,0)
(621,3521,0)
(3607,292,0)
(385,627,0)
(3477,4988,0)
(5585,627,0)
(1203,1262,0)
(2477,3407,0)
(5116,1993,0)
(5062,3019,0)
(3979,4084,0)
(4068,4894,0)
(3449,674,0)
(1241,1844,0)
(3193,2032,0)
(275,2926,0)
(3979,732,0)
(4885,3778,0)
(1566,3630,0)
(5250,3624,0)
(2632,4231,0)
(2198,2128,0)
(4785,5542,0)
(866,2678,0)
(1497,2882,0)
(4385,3393,0)
(4673,860,0)
(4277,1648,0)
(4768,4561,0)
(5424,2801,0)
(2356,4689,0)
(3571,5059,0)
(4663,1230,0)
(2918,5707,0)
(2326,2406,0)
(5693,4994,0)
(4918,2513,0)
(1371,4971,0)
(5500,847,0)
(5708,1041,0)
(2034,2158,0)
(5531,2676,0)
(1368,519,0)
(3057,2914,0)
(5071,941,0)
(77,686,0)
(1023,2791,0)
(3385,2123,0)
(871,341,0)
(5167,3730,0)
(5145,3077,0)
(3708,4307,0)
(4663,601,0)
(1556,3338,0)
(3089,1798,0)
(1838,103,0)
(3672,5036,0)
(2256,4621,0)
(1671,3292,0)
(3455,5409,0)
(2326,4731,0)
(5171,3214,0)
(1390,5059,0)
(2809,3172,0)
(1404,1372,0)
(4979,3582,0)
(1351,5059,0)
(1689,640,0)
(2416,2902,0)
(3504,4870,0)
(4155,1915,0)
(4016,3099,0)
(3108,1618,0)
(3664,627,0)
(3979,3273,0)
(5409,1844,0)
(5085,4872,0)
(1786,138,0)
(175,5218,0)
(541,1106,0)
(698,1863,0)
(1018,717,0)
(5619,3608,0)
(3210,3402,0)
(1634,610,0)
(3241,3581,0)
(523,4686,0)
(5443,2109,0)
(4279,4391,0)
(2205,16,0)
(753,1468,0)
(551,5277,0)
(3036,3739,0)
(2113,4999,0)
(2250,4269,0)
(329,4934,0)
(2663,4548,0)
(436,1772,0)
(1433,3493,0)
(4807,3928,0)
(5603,4067,0)
(2568,5134,0)
(1665,1220,0)
(3668,4141,0)
(4187,2623,0)
(308,1740,0)
(2065,3753,0)
(334,2089,0)
(2313,3392,0)
(5576,3690,0)
(5668,5059,0)
(5185,4876,0)
(1486,1925,0)
(1927,940,0)
(5304,3292,0)
(2787,5059,0)
(2117,1535,0)
(280,4801,0)
(2942,1844,0)
(3021,3292,0)
(4164,1473,0)
(2639,4969,0)
(5267,182,0)
(1687,1406,0)
(3459,3765,0)
(2031,5452,0)
(4663,4249,0)
(5551,501,0)
(1379,1577,0)
(4849,1915,0)
(1399,1844,0)
(1014,1844,0)
(2275,4886,0)
(5322,5409,0)
(3671,1648,0)
(3519,794,0)
(421,4132,0)
(2000,4042,0)
(2066,271,0)
(4939,1859,0)
(4494,1915,0)
(4808,5158,0)
(3064,2255,0)
(4301,154,0)
(347,5407,0)
(3257,5517,0)
(5329,4667,0)
(3119,1443,0)
(2828,2559,0)
(5678,5398,0)
(4581,4914,0)
(3347,2440,0)
(719,3211,0)
(3748,1692,0)
(5117,1844,0)
(195,3690,0)
(4553,2736,0)
(2025,4763,0)
(1985,3248,0)
(3632,3389,0)
(4383,5059,0)
(4723,895,0)
(1955,2546,0)
(5682,3646,0)
(5629,4786,0)
(2598,4831,0)
(399,2538,0)
(3681,1183,0)
(3104,1620,0)
(3116,2050,0)
(2462,1786,0)
(2552,5637,0)
(3261,1728,0)
(1468,3503,0)
(1887,384,0)
(3771,1613,0)
(5335,4123,0)
(4777,1844,0)
(5344,2695,0)
(2468,608,0)
(5622,5516,0)
(5291,2875,0)
(5039,5177,0)
(770,3630,0)
(5512,930,0)
(2251,983,0)
(3749,5758,0)
(4321,4854,0)
(4192,5059,0)
(2284,2736,0)
(1450,3064,0)
(5009,2108,0)
(4266,5247,0)
(1186,4955,0)
(2572,1041,0)
(4186,3628,0)
(1361,2708,0)
(720,4806,0)
(620,904,0)
(2466,2573,0)
(4068,2413,0)
(1950,1149,0)
(2594,3292,0)
(5493,2088,0)
(478,4991,0)
(5424,1844,0)
(3355,2038,0)
(1070,3292,0)
(2623,2072,0)
(4006,4928,0)
(4114,5648,0)
(4844,791,0)
(2885,549,0)
(5725,2916,0)
(3506,2387,0)
(5471,3276,0)
(2614,3713,0)
(1935,4235,0)
(2882,3037,0)
(670,941,0)
(2918,1778,0)
(136,5415,0)
(2177,3036,0)
(3753,3272,0)
(728,629,0)
(4897,1426,0)
(973,3026,0)
(3138,3292,0)
(808,3064,0)
(2984,3603,0)
(4893,5013,0)
(5365,3762,0)
(1352,2387,0)
(114,1408,0)
(2771,4331,0)
(43,2614,0)
(765,3397,0)
(975,847,0)
(1652,1844,0)
(2307,3349,0)
(1071,1949,0)
(4782,847,0)
(5262,4665,0)
(2044,876,0)
(4623,3292,0)
(3979,3707,0)
(2520,977,0)
(591,1844,0)
(2702,2265,0)
(1004,126,0)
(2608,2083,0)
(5647,5561,0)
(4428,563,0)
(4029,1492,0)
(1810,2137,0)
(2334,2745,0)
(2431,3000,0)
(844,2840,0)
(466,4406,0)
(2359,3155,0)
(1379,1844,0)
(2694,3908,0)
(3238,3681,0)
(5120,370,0)
(1703,3635,0)
(2241,188,0)
(575,4763,0)
(4739,3789,0)
(4208,1111,0)
(4350,4213,0)
(3003,489,0)
(956,4903,0)
(1530,5059,0)
(2792,2066,0)
(1725,1886,0)
(2678,5713,0)
(2563,189,0)
(3788,5250,0)
(208,5059,0)
(599,4068,0)
(2832,467,0)
(3580,108,0)
(2918,4300,0)
(22,5059,0)
(3024,1406,0)
(4004,1268,0)
(3036,4721,0)
(3392,2258,0)
(1827,555,0)
(3019,3879,0)
(468,4834,0)
(1482,4374,0)
(2753,2369,0)
(5676,3292,0)
(2321,615,0)
(938,3982,0)
(4853,1421,0)
(5125,5285,0)
(274,3524,0)
(3341,5059,0)
(1059,5059,0)
(675,2898,0)
(4144,1798,0)
(4218,81,0)
(1316,1295,0)
(4431,3822,0)
(449,5504,0)
(5462,1798,0)
(4688,4751,0)
(4644,4235,0)
(4700,2128,0)
(1781,3413,0)
(1630,103,0)
(1045,1406,0)
(941,1609,0)
(2489,3165,0)
(1402,3582,0)
(1925,1486,0)
(415,1167,0)
(1061,3797,0)
(3928,4613,0)
(2009,3042,0)
(5682,1568,0)
(4488,673,0)
(1398,1359,0)
(134,2214,0)
(5372,1844,0)
(4003,271,0)
(2655,5388,0)
(4675,2138,0)
(4365,4183,0)
(4377,5058,0)
(5403,2756,0)
(2863,3921,0)
(3865,5686,0)
(1929,3197,0)
(87,1844,0)
(1579,1844,0)
(3921,2863,0)
(294,3895,0)
(388,2523,0)
(796,1844,0)
(5315,445,0)
(3676,627,0)
(2151,3397,0)
(5067,4924,0)
(3507,4550,0)
(4769,808,0)
(2809,2902,0)
(3147,5630,0)
(4856,3534,0)
(5515,4671,0)
(1163,1399,0)
(4191,672,0)
(534,3552,0)
(5688,3292,0)
(3119,2953,0)
(3651,2868,0)
(3365,3495,0)
(565,1382,0)
(3039,1613,0)
(4794,5059,0)
(1987,3467,0)
(3084,4249,0)
(4720,3239,0)
(5513,962,0)
(3979,2255,0)
(3111,2151,0)
(2340,4006,0)
(659,1406,0)
(5734,5324,0)
(3862,1870,0)
(3164,5061,0)
(3328,3406,0)
(3356,3292,0)
(3269,1288,0)
(5468,4357,0)
(225,1863,0)
(1201,3072,0)
(4075,252,0)
(5207,3103,0)
(4281,5642,0)
(2292,1026,0)
(83,5068,0)
(2918,3707,0)
(3866,1717,0)
(2067,3142,0)
(358,125,0)
(4261,199,0)
(2680,1798,0)
(4797,2190,0)
(717,1204,0)
(4686,5162,0)
(1374,1342,0)
(39,977,0)
(4663,3197,0)
(2649,1836,0)
(4632,2032,0)
(4068,732,0)
(4789,926,0)
(3064,2480,0)
(4550,107,0)
(1421,4125,0)
(259,3185,0)
(870,3292,0)
(5755,3469,0)
(695,5206,0)
(1416,1725,0)
(3621,1862,0)
(666,2190,0)
(3682,5059,0)
(2765,1351,0)
(2623,4187,0)
(5278,4863,0)
(3027,2996,0)
(5662,918,0)
(3979,2785,0)
(5316,2322,0)
(2814,1509,0)
(3979,1647,0)
(3746,2811,0)
(4472,3047,0)
(5431,627,0)
(5205,19,0)
(2406,3816,0)
(5371,3341,0)
(2539,961,0)
(2600,3582,0)
(4425,2190,0)
(2558,3292,0)
(1270,680,0)
(744,1569,0)
(1937,5157,0)
(1519,4190,0)
(3435,1915,0)
(667,855,0)
(4200,1700,0)
(2633,3656,0)
(2421,4834,0)
(2674,3093,0)
(4117,4415,0)
(622,3582,0)
(5073,537,0)
(3973,1476,0)
(1447,3464,0)
(3098,1610,0)
(2783,3227,0)
(5532,126,0)
(2326,2317,0)
(1819,4254,0)
(4869,3787,0)
(2646,3468,0)
(4990,627,0)
(2508,5059,0)
(3979,1015,0)
(1535,3187,0)
(4172,2316,0)
(4752,1805,0)
(3979,3923,0)
(3407,1844,0)
(1855,4496,0)
(963,649,0)
(5572,2144,0)
(415,4639,0)
(4051,5247,0)
(1568,2072,0)
(3868,4412,0)
(828,3821,0)
(5488,627,0)
(5542,4785,0)
(3808,2171,0)
(691,4271,0)
(4454,2785,0)
(1785,4725,0)
(3397,4714,0)
(4952,5061,0)
(5682,2785,0)
(2422,5404,0)
(3662,1574,0)
(1624,3172,0)
(3886,1433,0)
(4779,5639,0)
(1216,4039,0)
(4663,4241,0)
(886,1915,0)
(3427,5609,0)
(885,5044,0)
(3064,1031,0)
(680,3840,0)
(1961,4318,0)
(5682,93,0)
(2677,2190,0)
(2757,629,0)
(3658,3747,0)
(4810,3495,0)
(2918,5414,0)
(3650,1844,0)
(3194,1101,0)
(1868,1798,0)
(2122,1633,0)
(3177,1574,0)
(4793,3277,0)
(2101,1259,0)
(672,4776,0)
(2108,3582,0)
(318,104,0)
(3662,5287,0)
(5710,3508,0)
(2886,2053,0)
(3426,3292,0)
(734,2190,0)
(3174,4763,0)
(4370,3978,0)
(4442,5532,0)
(4555,961,0)
(3175,2578,0)
(4121,1125,0)
(5050,924,0)
(363,418,0)
(2614,2063,0)
(5686,4258,0)
(3466,2307,0)
(4962,4724,0)
(4360,2714,0)
(1402,195,0)
(3805,4971,0)
(5025,1844,0)
(2837,2275,0)
(5743,2559,0)
(3301,2822,0)
(5021,3292,0)
(3979,3150,0)
(3646,5658,0)
(814,3730,0)
(3380,5354,0)
(5726,3392,0)
(5127,2435,0)
(220,3474,0)
(3260,1466,0)
(596,5755,0)
(5153,169,0)
(2520,370,0)
(3540,4687,0)
(4087,5127,0)
(3267,3091,0)
(3919,1632,0)
(4082,5049,0)
(2354,1363,0)
(1073,1532,0)
(1875,2066,0)
(2731,3534,0)
(2534,3160,0)
(354,2620,0)
(198,5059,0)
(3033,2582,0)
(611,1079,0)
(492,3010,0)
(2918,4412,0)
(4194,2537,0)
(4663,2486,0)
(3712,3713,0)
(1087,1235,0)
(4561,3308,0)
(5474,627,0)
(2778,4723,0)
(792,2827,0)
(4331,77,0)
(440,3439,0)
(3622,2434,0)
(2964,4381,0)
(5505,3255,0)
(5226,2190,0)
(1797,5055,0)
(4663,2785,0)
(2980,4825,0)
(3840,627,0)
(4394,1844,0)
(2926,2603,0)
(2063,1294,0)
(1501,4534,0)
(1031,2803,0)
(3064,732,0)
(1901,1650,0)
(2037,4693,0)
(3869,4900,0)
(909,2718,0)
(2931,1089,0)
(3820,5537,0)
(2144,550,0)
(3799,611,0)
(5020,5702,0)
(4726,1628,0)
(5370,4141,0)
(5097,1313,0)
(4685,451,0)
(1176,393,0)
(5335,3185,0)
(3251,4988,0)
(5294,5414,0)
(2793,3161,0)
(210,1947,0)
(1970,154,0)
(905,1626,0)
(4022,3582,0)
(5172,2895,0)
(2829,5048,0)
(15,1072,0)
(2024,1327,0)
(1611,4761,0)
(98,5429,0)
(489,1996,0)
(2671,627,0)
(5053,5633,0)
(1420,2152,0)
(3403,2599,0)
(2848,3307,0)
(239,3582,0)
(5498,1670,0)
(5682,4300,0)
(4032,5716,0)
(680,3760,0)
(122,2404,0)
(148,2063,0)
(4759,243,0)
(3457,4300,0)
(3422,4125,0)
(2004,3625,0)
(5737,5459,0)
(1401,627,0)
(3633,3845,0)
(1483,962,0)
(2022,2179,0)
(214,715,0)
(343,5657,0)
(3358,1341,0)
(4557,2553,0)
(2326,808,0)
(2885,1906,0)
(1327,3403,0)
(5147,1323,0)
(559,5729,0)
(1701,627,0)
(2994,596,0)
(4221,1844,0)
(3228,3292,0)
(4784,5075,0)
(1825,4561,0)
(4395,1526,0)
(4663,4731,0)
(1583,2745,0)
(2277,1844,0)
(609,4266,0)
(5381,4291,0)
(3501,1798,0)
(4888,490,0)
(742,627,0)
(213,1503,0)
(1038,4546,0)
(4379,1272,0)
(2357,1523,0)
(308,5158,0)
(5237,3625,0)
(345,1792,0)
(3523,2996,0)
(4453,694,0)
(1089,1844,0)
(1490,1764,0)
(3277,3231,0)
(1159,2184,0)
(4007,2190,0)
(580,3079,0)
(4663,1910,0)
(2589,731,0)
(3373,3389,0)
(393,1817,0)
(3048,2232,0)
(224,5757,0)
(1597,1648,0)
(3754,3701,0)
(4819,754,0)
(1293,1798,0)
(3976,4231,0)
(3440,1852,0)
(3979,5414,0)
(2673,5078,0)
(3375,657,0)
(4317,3797,0)
(2416,5682,0)
(3117,3791,0)
(2244,1844,0)
(244,844,0)
(4214,4587,0)
(4663,5414,0)
(2884,282,0)
(5142,1646,0)
(3726,2426,0)
(5138,2996,0)
(2374,4255,0)
(3835,4637,0)
(2307,3466,0)
(2059,834,0)
(3942,1129,0)
(4070,2510,0)
(144,1844,0)
(1321,3917,0)
(1633,5241,0)
(2943,1596,0)
(1265,2631,0)
(3459,1297,0)
(4651,987,0)
(4801,280,0)
(5003,2612,0)
(2407,2063,0)
(3662,5067,0)
(3735,4801,0)
(157,4639,0)
(1257,1049,0)
(4972,2392,0)
(4496,1649,0)
(1807,1954,0)
(2231,1255,0)
(2719,1157,0)
(3668,2321,0)
(499,4687,0)
(5144,5604,0)
(2153,4176,0)
(3439,1844,0)
(3385,1844,0)
(3064,5373,0)
(480,3853,0)
(846,4221,0)
(3064,2152,0)
(4643,507,0)
(1437,4797,0)
(2511,4406,0)
(2918,565,0)
(447,1128,0)
(5304,2382,0)
(2766,91,0)
(4995,2297,0)
(2728,2898,0)
(44,1303,0)
(5284,5321,0)
(665,5741,0)
(4655,2331,0)
(2714,2902,0)
(209,378,0)
(698,4912,0)
(1062,2996,0)
(2326,2785,0)
(2440,3347,0)
(5441,1559,0)
(1828,4967,0)
(435,1648,0)
(1779,1215,0)
(194,4242,0)
(4460,2190,0)
(4106,5126,0)
(4897,2473,0)
(5308,1068,0)
(3161,4512,0)
(4544,265,0)
(1910,2502,0)
(5682,1752,0)
(4309,2895,0)
(3847,2075,0)
(1687,709,0)
(1703,4860,0)
(164,1179,0)
(1999,4328,0)
(4306,3709,0)
(397,2758,0)
(119,43,0)
(4861,5736,0)
(893,292,0)
(5682,2255,0)
(2058,4077,0)
(5282,3064,0)
(4773,2870,0)
(2939,3952,0)
(3578,5404,0)
(3468,2646,0)
(649,4301,0)
(2184,4786,0)
(3996,2687,0)
(1764,1490,0)
(4809,4808,0)
(2637,328,0)
(1414,627,0)
(1067,5369,0)
(4202,3756,0)
(5215,2190,0)
(5511,2410,0)
(3857,13,0)
(5193,2422,0)
(3434,2082,0)
(1,3502,0)
(4663,3273,0)
(1453,4381,0)
(3878,2944,0)
(2918,2540,0)
(863,5743,0)
(4138,4951,0)
(4587,3600,0)
(77,3292,0)
(1351,4068,0)
(2500,977,0)
(5611,5610,0)
(3119,2869,0)
(2447,2032,0)
(496,4307,0)
(3327,2880,0)
(359,405,0)
(3822,4598,0)
(353,844,0)
(1457,3424,0)
(1002,2868,0)
(3896,1289,0)
(5458,1009,0)
(2156,4109,0)
(3125,4844,0)
(4510,786,0)
(1059,3582,0)
(2574,5271,0)
(3236,604,0)
(2833,195,0)
(761,1613,0)
(3462,3417,0)
(3173,1342,0)
(1328,3695,0)
(4013,908,0)
(5477,250,0)
(5224,1892,0)
(91,4737,0)
(4076,1401,0)
(1791,2190,0)
(2619,1652,0)
(2018,2317,0)
(1334,2120,0)
(136,941,0)
(829,5263,0)
(5059,3581,0)
(1198,4585,0)
(460,239,0)
(4663,4102,0)
(2142,1613,0)
(1748,2833,0)
(4911,537,0)
(5441,3390,0)
(2265,5055,0)
(4160,44,0)
(4678,4776,0)
(1077,74,0)
(1238,5654,0)
(1256,2953,0)
(3965,5287,0)
(4205,2723,0)
(700,1009,0)
(2500,3417,0)
(5532,4442,0)
(1564,4638,0)
(2753,2677,0)
(3804,1575,0)
(3545,4052,0)
(2416,5059,0)
(2713,5196,0)
(4074,1142,0)
(2349,1910,0)
(1554,2623,0)
(4049,68,0)
(188,4877,0)
(4436,1844,0)
(2345,2258,0)
(2256,4549,0)
(3231,3277,0)
(4273,1505,0)
(2326,3114,0)
(5235,3523,0)
(4806,1836,0)
(2918,5093,0)
(2979,3497,0)
(4043,2535,0)
(5187,2664,0)
(617,1710,0)
(4619,39,0)
(3612,1844,0)
(1805,1009,0)
(571,4241,0)
(4657,3671,0)
(4680,1844,0)
(3502,2072,0)
(39,370,0)
(5086,3252,0)
(4899,2331,0)
(1169,5115,0)
(998,3624,0)
(5101,4066,0)
(1761,2173,0)
(224,1844,0)
(2941,3114,0)
(1814,1889,0)
(2918,1456,0)
(4161,1128,0)
(593,1103,0)
(2168,5055,0)
(5510,2329,0)
(4561,1825,0)
(295,1302,0)
(2264,5191,0)
(3370,3791,0)
(2262,4371,0)
(3003,2614,0)
(3653,5232,0)
(4956,1884,0)
(2339,3747,0)
(4050,109,0)
(2205,4774,0)
(2880,627,0)
(3355,5210,0)
(5058,4377,0)
(1236,212,0)
(4400,4056,0)
(3979,5115,0)
(2029,1009,0)
(4620,5074,0)
(3856,3502,0)
(1524,2066,0)
(4701,767,0)
(481,2406,0)
(2109,3641,0)
(4147,3612,0)
(1049,4037,0)
(5253,4751,0)
(108,2792,0)
(4971,1844,0)
(2235,3777,0)
(5405,157,0)
(4804,2124,0)
(1219,588,0)
(2999,5079,0)
(4198,463,0)
(663,1414,0)
(5724,1596,0)
(3764,1083,0)
(1207,2687,0)
(2432,1025,0)
(1886,271,0)
(2529,5682,0)
(3979,4102,0)
(1893,3274,0)
(1824,1844,0)
(1125,4391,0)
(363,1844,0)
(2945,2043,0)
(1989,5232,0)
(4000,2190,0)
(4842,785,0)
(2584,3691,0)
(3726,5287,0)
(686,77,0)
(5398,957,0)
(5014,611,0)
(2065,1844,0)
(1480,4736,0)
(3086,936,0)
(4390,2614,0)
(5739,1059,0)
(1914,1923,0)
(5433,4738,0)
(412,986,0)
(2891,4569,0)
(2451,3292,0)
(400,4920,0)
(2918,2406,0)
(881,5394,0)
(1899,4161,0)
(693,1628,0)
(498,4815,0)
(3706,1844,0)
(1106,541,0)
(5134,2190,0)
(5305,2099,0)
(4406,627,0)
(4663,2152,0)
(5090,627,0)
(1673,2089,0)
(2918,1802,0)
(4478,5248,0)
(5111,3292,0)
(1313,5097,0)
(1124,644,0)
(4019,4804,0)
(3143,1844,0)
(581,2190,0)
(4839,3292,0)
(3806,3691,0)
(519,1813,0)
(708,3706,0)
(5067,977,0)
(3759,1295,0)
(4622,1675,0)
(2524,1611,0)
(5607,1377,0)
(5591,3292,0)
(3984,4947,0)
(2913,1595,0)
(5070,195,0)
(3246,737,0)
(5433,4732,0)
(3832,68,0)
(4663,4848,0)
(2516,1396,0)
(3960,5429,0)
(86,1798,0)
(2166,208,0)
(270,1398,0)
(2444,4803,0)
(4598,2996,0)
(4970,5150,0)
(2591,351,0)
(2825,2887,0)
(3265,1191,0)
(3809,533,0)
(659,353,0)
(1531,1139,0)
(1398,270,0)
(2218,3211,0)
(3066,5059,0)
(1468,4955,0)
(1468,3625,0)
(1278,1915,0)
(792,3010,0)
(1676,2612,0)
(4598,3822,0)
(1722,3424,0)
(4290,3292,0)
(1381,1853,0)
(4663,1831,0)
(5295,5064,0)
(1370,1601,0)
(857,1889,0)
(3513,3539,0)
(3488,5282,0)
(695,5124,0)
(4260,4901,0)
(3488,4063,0)
(936,3086,0)
(4663,2480,0)
(834,464,0)
(2520,3039,0)
(961,2539,0)
(3020,5696,0)
(3161,2793,0)
(2520,1663,0)
(3248,680,0)
(1259,5055,0)
(3361,4161,0)
(3073,2476,0)
(3064,2402,0)
(5099,5059,0)
(4266,5279,0)
(5580,1139,0)
(4954,1523,0)
(1702,1630,0)
(5236,627,0)
(2918,1015,0)
(2000,1316,0)
(2531,1487,0)
(3432,2867,0)
(4039,192,0)
(102,195,0)
(5543,1443,0)
(488,2190,0)
(2500,4991,0)
(4551,1487,0)
(3397,2151,0)
(2400,3484,0)
(5682,4911,0)
(2620,551,0)
(5050,537,0)
(2802,2663,0)
(2918,5115,0)
(3036,2898,0)
(1546,47,0)
(1674,3015,0)
(2263,2944,0)
(4355,327,0)
(3468,2855,0)
(4844,1255,0)
(2380,4867,0)
(5220,4428,0)
(2318,477,0)
(3248,998,0)
(3979,5373,0)
(1596,5059,0)
(39,4924,0)
(3168,735,0)
(3736,3713,0)
(1444,627,0)
(199,2882,0)
(3919,2632,0)
(3064,1647,0)
(3160,640,0)
(5246,1844,0)
(5084,464,0)
(60,3307,0)
(1504,1942,0)
(2326,4911,0)
(1737,1844,0)
(3103,5586,0)
(4945,144,0)
(5046,3292,0)
(5537,2227,0)
(1900,1844,0)
(2390,4587,0)
(2236,3039,0)
(4188,5504,0)
(61,4374,0)
(3007,2339,0)
(3064,1456,0)
(3481,853,0)
(413,4139,0)
(1130,2159,0)
(4152,4768,0)
(1734,2483,0)
(5102,4929,0)
(4212,942,0)
(1359,1398,0)
(1036,4449,0)
(3056,4786,0)
(3064,3707,0)
(3500,2190,0)
(2464,3592,0)
(4825,1844,0)
(2308,4621,0)
(659,2603,0)
(2256,1082,0)
(4221,2190,0)
(3950,271,0)
(2488,5059,0)
(2729,3638,0)
(4055,4022,0)
(1792,511,0)
(2293,5470,0)
(5578,52,0)
(542,2083,0)
(966,5593,0)
(2255,2072,0)
(3174,1070,0)
(1555,5063,0)
(2005,718,0)
(5430,4928,0)
(2916,5725,0)
(1678,3159,0)
(4802,1414,0)
(2790,4574,0)
(89,3539,0)
(811,5334,0)
(3979,1456,0)
(3456,880,0)
(4900,3064,0)
(3979,2540,0)
(3317,271,0)
(4566,771,0)
(3889,4585,0)
(3618,2743,0)
(1877,2193,0)
(4384,2391,0)
(3668,5697,0)
(22,3027,0)
(2471,1025,0)
(602,3292,0)
(951,4848,0)
(4284,4666,0)
(4838,2553,0)
(2918,5373,0)
(1462,5064,0)
(2520,5675,0)
(2326,4249,0)
(2858,242,0)
(4571,1919,0)
(5766,1502,0)
(3792,2593,0)
(5719,923,0)
(4994,3292,0)
(4000,5385,0)
(3320,2437,0)
(2329,5510,0)
(842,3772,0)
(417,4032,0)
(2901,4138,0)
(949,101,0)
(5725,1595,0)
(3064,1831,0)
(2678,3692,0)
(2097,49,0)
(2297,136,0)
(988,4092,0)
(271,1824,0)
(1299,2026,0)
(716,4548,0)
(3064,3114,0)
(1779,29,0)
(4248,4574,0)
(4300,627,0)
(4920,1700,0)
(2837,627,0)
(4868,1844,0)
(416,4228,0)
(4033,3103,0)
(3153,2787,0)
(4426,1844,0)
(4912,698,0)
(3812,922,0)
(5609,1844,0)
(2208,5502,0)
(5674,477,0)
(4689,1772,0)
(3252,3299,0)
(1632,5420,0)
(1475,456,0)
(4078,1844,0)
(2906,1893,0)
(5067,1663,0)
(456,282,0)
(2173,4132,0)
(5358,511,0)
(4814,1597,0)
(57,5025,0)
(3913,1944,0)
(2126,1844,0)
(4213,4350,0)
(3535,4056,0)
(2723,1860,0)
(1276,385,0)
(3276,2265,0)
(39,1575,0)
(1664,4318,0)
(2543,2008,0)
(1438,3138,0)
(5334,5675,0)
(1316,2000,0)
(3451,4511,0)
(260,2139,0)
(3890,1284,0)
(3064,4894,0)
(3467,1411,0)
(1338,5279,0)
(3979,3676,0)
(3984,4764,0)
(4804,3292,0)
(4743,97,0)
(4318,1815,0)
(2158,2034,0)
(3979,1826,0)
(622,195,0)
(2728,3739,0)
(833,4049,0)
(4033,1574,0)
(134,1215,0)
(4663,5469,0)
(2918,1568,0)
(5638,2114,0)
(2295,2991,0)
(4559,4676,0)
(2872,2283,0)
(1723,1395,0)
(1248,564,0)
(3059,3877,0)
(1619,594,0)
(4712,1035,0)
(2687,1844,0)
(2107,3047,0)
(1594,682,0)
(1972,1649,0)
(2809,3064,0)
(4473,2687,0)
(5400,627,0)
(773,615,0)
(2836,1905,0)
(1416,5329,0)
(1796,615,0)
(1068,3292,0)
(3011,4391,0)
(2604,636,0)
(4312,3464,0)
(5516,2190,0)
(2371,1126,0)
(2876,4930,0)
(4632,848,0)
(2500,1917,0)
(3755,3563,0)
(2052,2839,0)
(2796,430,0)
(4805,5146,0)
(1633,5055,0)
(3173,919,0)
(3452,44,0)
(1184,2183,0)
(4667,4192,0)
(335,3707,0)
(4346,2744,0)
(4770,5148,0)
(1048,1146,0)
(3446,4911,0)
(501,3837,0)
(42,5113,0)
(4428,3668,0)
(5004,1215,0)
(5682,1015,0)
(2036,1714,0)
(1217,2325,0)
(5647,2218,0)
(2326,4916,0)
(549,3292,0)
(2283,2872,0)
(2254,4884,0)
(2529,5059,0)
(2633,625,0)
(2877,690,0)
(368,4565,0)
(5097,1442,0)
(4068,4449,0)
(925,3692,0)
(122,1845,0)
(4620,3951,0)
(376,1323,0)
(2520,5149,0)
(4609,195,0)
(1388,5643,0)
(1180,1887,0)
(1,3908,0)
(2286,1844,0)
(265,4382,0)
(2394,2156,0)
(355,1193,0)
(3648,2413,0)
(3290,2225,0)
(1952,3050,0)
(678,1798,0)
(71,4791,0)
(2034,5436,0)
(4139,627,0)
(3005,1117,0)
(2865,4108,0)
(2962,2190,0)
(2625,2999,0)
(3001,3466,0)
(1133,2593,0)
(4822,1613,0)
(4272,3822,0)
(4635,2728,0)
(1961,1721,0)
(4663,4449,0)
(2631,1265,0)
(740,2344,0)
(1575,1613,0)
(2282,1574,0)
(1351,2902,0)
(4324,746,0)
(3733,109,0)
(4824,627,0)
(3723,3292,0)
(2216,534,0)
(1919,4256,0)
(130,3370,0)
(3768,3713,0)
(1647,3350,0)
(4692,4078,0)
(2894,5049,0)
(4866,3055,0)
(4710,2752,0)
(1343,3292,0)
(2918,4807,0)
(3215,3292,0)
(3567,4027,0)
(3151,2724,0)
(1326,5059,0)
(4689,2141,0)
(2043,2945,0)
(5418,1844,0)
(1527,3263,0)
(3979,2821,0)
(366,5414,0)
(3121,1871,0)
(2382,5059,0)
(1083,5061,0)
(4542,3838,0)
(5091,3292,0)
(1442,5097,0)
(1579,4586,0)
(3665,785,0)
(1171,5407,0)
(5374,4275,0)
(3388,703,0)
(4591,2128,0)
(561,2809,0)
(2099,2685,0)
(5683,4154,0)
(456,3757,0)
(3307,2427,0)
(1608,3311,0)
(1450,5059,0)
(3750,4894,0)
(1825,1844,0)
(2916,5059,0)
(289,2805,0)
(1521,2849,0)
(1117,2892,0)
(2403,3869,0)
(2895,5756,0)
(5195,1647,0)
(3521,1844,0)
(4114,3988,0)
(4414,209,0)
(5279,3015,0)
(1635,2099,0)
(5067,1575,0)
(2217,3150,0)
(607,2673,0)
(2830,3174,0)
(2847,4067,0)
(4411,4636,0)
(4374,1844,0)
(3709,3292,0)
(4968,5516,0)
(5035,3578,0)
(1248,1014,0)
(1512,5236,0)
(920,756,0)
(5589,1844,0)
(37,1293,0)
(1564,1215,0)
(3567,4080,0)
(2118,1444,0)
(1528,4084,0)
(365,3211,0)
(3467,1987,0)
(4396,162,0)
(3944,4145,0)
(1158,4666,0)
(389,4587,0)
(3252,5086,0)
(39,5149,0)
(4492,1509,0)
(4764,4371,0)
(901,2734,0)
(1118,4100,0)
(894,1703,0)
(48,5757,0)
(5343,546,0)
(2256,4167,0)
(4240,4007,0)
(673,404,0)
(2436,4129,0)
(1351,5682,0)
(3974,2171,0)
(906,5429,0)
(357,5177,0)
(5216,4831,0)
(5031,2327,0)
(3710,5013,0)
(4911,627,0)
(1926,3393,0)
(2138,1255,0)
(5603,2378,0)
(5590,3923,0)
(914,5059,0)
(648,1951,0)
(1641,784,0)
(335,5610,0)
(1828,627,0)
(2326,3273,0)
(1235,627,0)
(4254,5059,0)
(3897,743,0)
(1561,5339,0)
(4674,1600,0)
(1746,1844,0)
(3965,1574,0)
(5393,5535,0)
(1864,2902,0)
(1751,546,0)
(2918,4249,0)
(2366,1853,0)
(5535,2179,0)
(3066,1613,0)
(3979,5469,0)
(93,2536,0)
(2326,2402,0)
(2326,5036,0)
(1067,2074,0)
(3979,4300,0)
(3791,3370,0)
(5682,3669,0)
(4787,3979,0)
(3176,5550,0)
(5079,2999,0)
(5095,3812,0)
(848,5452,0)
(2461,2430,0)
(5045,3119,0)
(2079,1230,0)
(2258,3037,0)
(5707,5697,0)
(2330,2449,0)
(4020,333,0)
(4673,3845,0)
(2884,1737,0)
(2159,3292,0)
(4663,4905,0)
(2311,4516,0)
(5682,4894,0)
(2322,5316,0)
(1567,1883,0)
(4964,5532,0)
(928,2184,0)
(543,3079,0)
(3510,3292,0)
(3099,4016,0)
(3575,1017,0)
(1312,4339,0)
(4396,2138,0)
(3087,4426,0)
(5126,5059,0)
(896,627,0)
(2502,3292,0)
(441,3207,0)
(3229,4932,0)
(2918,3923,0)
(2721,3635,0)
(4013,742,0)
(2223,3236,0)
(79,3448,0)
(341,1844,0)
(4556,12,0)
(1212,4791,0)
(350,4786,0)
(4071,1011,0)
(292,893,0)
(1726,2032,0)
(2658,3031,0)
(5225,979,0)
(1162,3308,0)
(5435,134,0)
(5729,3119,0)
(3646,627,0)
(2480,3979,0)
(4139,1247,0)
(5372,296,0)
(5480,1613,0)
(5527,1957,0)
(2344,351,0)
(4271,2590,0)
(127,3551,0)
(2114,476,0)
(2326,4084,0)
(2194,5054,0)
(3453,605,0)
(5682,5093,0)
(4743,2885,0)
(2334,2538,0)
(3064,601,0)
(2244,3397,0)
(5646,3008,0)
(3204,3447,0)
(3956,624,0)
(2992,5449,0)
(2578,2022,0)
(1514,5350,0)
(279,606,0)
(679,5542,0)
(2881,4124,0)
(2319,3005,0)
(4859,195,0)
(1384,2107,0)
(1234,1175,0)
(4133,2285,0)
(2477,1844,0)
(3397,47,0)
(2262,2850,0)
(3695,3414,0)
(2813,1351,0)
(837,2996,0)
(763,2190,0)
(3557,5152,0)
(4663,2540,0)
(1030,726,0)
(3979,4911,0)
(5334,4991,0)
(801,5488,0)
(5642,1844,0)
(5406,1675,0)
(2269,2148,0)
(72,592,0)
(4157,4369,0)
(557,1009,0)
(4766,2141,0)
(1465,2655,0)
(5746,5202,0)
(463,2624,0)
(5596,353,0)
(4048,1817,0)
(3703,806,0)
(520,5729,0)
(1083,1925,0)
(369,5324,0)
(1050,4691,0)
(4776,5588,0)
(5168,3150,0)
(1547,666,0)
(1272,4379,0)
(1945,2873,0)
(3064,2317,0)
(4238,2422,0)
(3669,941,0)
(3877,3730,0)
(1010,2728,0)
(3329,5404,0)
(3064,1015,0)
(1714,3635,0)
(2802,2786,0)
(2143,5117,0)
(35,1395,0)
(3330,5442,0)
(4199,1898,0)
(1754,5075,0)
(3838,4542,0)
(3965,3204,0)
(5682,4807,0)
(5349,3701,0)
(3320,1737,0)
(4094,1489,0)
(4472,4266,0)
(4728,1844,0)
(4124,3292,0)
(445,5055,0)
(5400,1850,0)
(3968,3142,0)
(4310,1267,0)
(1254,3650,0)
(2234,1377,0)
(5682,601,0)
(4047,2833,0)
(1049,1257,0)
(107,1068,0)
(2542,3099,0)
(2181,5139,0)
(391,1994,0)
(1827,2630,0)
(5648,4114,0)
(4360,3067,0)
(2743,3726,0)
(612,3169,0)
(14,1075,0)
(4877,188,0)
(3598,3292,0)
(5102,5059,0)
(5302,915,0)
(2850,2262,0)
(5682,3923,0)
(747,3748,0)
(1356,5093,0)
(2974,3130,0)
(5683,3440,0)
(1964,2488,0)
(5067,3662,0)
(1706,2270,0)
(3064,816,0)
(377,4876,0)
(2283,3060,0)
(3105,3641,0)
(4877,2190,0)
(2089,334,0)
(1378,5656,0)
(4344,3869,0)
(3012,3582,0)
(4846,2884,0)
(4085,4900,0)
(1975,5542,0)
(3309,3500,0)
(3486,1476,0)
(3668,2803,0)
(2096,1382,0)
(4588,706,0)
(3992,3843,0)
(2821,844,0)
(1919,1844,0)
(1313,724,0)
(3381,627,0)
(937,1842,0)
(5682,1647,0)
(2326,3646,0)
(5370,4591,0)
(1129,4167,0)
(893,2369,0)
(1857,2578,0)
(265,4544,0)
(2449,4611,0)
(2728,1892,0)
(5741,627,0)
(103,1737,0)
(3743,5158,0)
(1164,2476,0)
(1089,3061,0)
(1249,3292,0)
(5712,3635,0)
(3917,1671,0)
(339,2341,0)
(4143,195,0)
(4881,5687,0)
(3064,4249,0)
(5368,853,0)
(2918,754,0)
(2866,923,0)
(544,968,0)
(219,3188,0)
(4909,2853,0)
(2116,825,0)
(5042,2483,0)
(1583,5214,0)
(1680,1031,0)
(2936,5409,0)
(39,1663,0)
(4721,3418,0)
(2659,3493,0)
(5233,1827,0)
(758,1527,0)
(3415,5050,0)
(4099,1353,0)
(3984,3603,0)
(3502,1,0)
(318,3292,0)
(29,1215,0)
(3662,2426,0)
(2918,2821,0)
(1650,2631,0)
(772,4725,0)
(2588,1944,0)
(551,2620,0)
(4574,2790,0)
(5593,335,0)
(775,1456,0)
(4583,4280,0)
(3596,587,0)
(3786,3012,0)
(3475,3292,0)
(4068,5414,0)
(2898,2898,0)
(2860,868,0)
(1298,1399,0)
(536,2700,0)
(5677,3364,0)
(1712,5369,0)
(4296,5469,0)
(1098,1844,0)
(350,3739,0)
(2555,4472,0)
(4190,3236,0)
(652,2364,0)
(5632,93,0)
(3402,3292,0)
(4592,1889,0)
(1926,5524,0)
(3828,1289,0)
(4727,3368,0)
(4304,4906,0)
(3840,680,0)
(3738,2919,0)
(980,2382,0)
(1154,3428,0)
(1286,2554,0)
(968,4611,0)
(3563,5059,0)
(3979,808,0)
(1165,5687,0)
(3778,5059,0)
(3009,353,0)
(3026,5641,0)
(3252,4181,0)
(161,5194,0)
(3064,1230,0)
(3850,1042,0)
(3917,1321,0)
(5682,4705,0)
(350,3510,0)
(3709,3091,0)
(1972,579,0)
(4663,2758,0)
(2918,816,0)
(5760,4742,0)
(1767,195,0)
(4487,4971,0)
(4914,3278,0)
(5691,3812,0)
(1190,1798,0)
(2962,5510,0)
(80,3292,0)
(2918,2785,0)
(1842,4859,0)
(3360,2621,0)
(3200,1626,0)
(3554,2135,0)
(4610,2633,0)
(4283,3393,0)
(4951,1643,0)
(1200,5756,0)
(1618,3428,0)
(4530,2711,0)
(537,52,0)
(2038,3355,0)
(899,1062,0)
(5753,4447,0)
(5077,1844,0)
(250,5477,0)
(2326,1031,0)
(4851,1077,0)
(5174,5059,0)
(156,2077,0)
(5682,5414,0)
(2061,1417,0)
(3984,1492,0)
(4523,3292,0)
(5214,4903,0)
(1484,1415,0)
(2672,2017,0)
(2602,4628,0)
(1223,2624,0)
(3569,5429,0)
(184,1613,0)
(2328,3644,0)
(3527,3374,0)
(3863,4321,0)
(5656,3658,0)
(1455,4208,0)
(1801,469,0)
(312,5397,0)
(2053,603,0)
(802,4457,0)
(176,2456,0)
(861,4493,0)
(5082,4872,0)
(2003,986,0)
(3064,2758,0)
(3013,259,0)
(4435,1369,0)
(4633,2791,0)
(3686,5687,0)
(5224,793,0)
(767,4701,0)
(109,2496,0)
(2358,341,0)
(660,4590,0)
(318,2251,0)
(2161,3526,0)
(1471,3857,0)
(2914,1195,0)
(2023,4280,0)
(1021,3292,0)
(4932,453,0)
(4773,1096,0)
(567,3292,0)
(1487,1844,0)
(3979,4241,0)
(2646,4400,0)
(3697,104,0)
(5149,1798,0)
(677,3300,0)
(3029,5562,0)
(4836,3171,0)
(4475,1916,0)
(2859,4764,0)
(5438,1046,0)
(2102,3391,0)
(2326,1864,0)
(4834,4418,0)
(4166,5751,0)
(5412,5061,0)
(2807,3229,0)
(3188,3408,0)
(4161,534,0)
(3377,3838,0)
(2310,3893,0)
(2404,5059,0)
(2063,5248,0)
(2225,3582,0)
(4548,2149,0)
(587,848,0)
(3448,1786,0)
(4536,503,0)
(4547,2942,0)
(320,2235,0)
(2710,1081,0)
(5408,3335,0)
(782,3745,0)
(4663,4736,0)
(4833,784,0)
(5089,1902,0)
(2388,3174,0)
(970,1570,0)
(1654,618,0)
(931,4051,0)
(4072,4725,0)
(768,1836,0)
(2698,3028,0)
(4120,5059,0)
(726,3418,0)
(4942,5424,0)
(268,3184,0)
(4636,793,0)
(453,528,0)
(1073,167,0)
(44,5419,0)
(670,5431,0)
(3821,3042,0)
(3096,1891,0)
(4208,1844,0)
(2991,5537,0)
(5388,627,0)
(3265,1009,0)
(3328,3417,0)
(1938,2389,0)
(1574,4439,0)
(3384,133,0)
(5682,2480,0)
(2383,2227,0)
(5534,3795,0)
(665,1396,0)
(243,3260,0)
(5696,4928,0)
(3423,4914,0)
(4189,777,0)
(2815,2536,0)
(3938,3713,0)
(4905,4737,0)
(1764,2945,0)
(2222,2736,0)
(361,2776,0)
(4686,523,0)
(2616,195,0)
(5732,1767,0)
(4717,2114,0)
(986,1844,0)
(4948,3008,0)
(4969,2639,0)
(4965,2375,0)
(4688,941,0)
(2097,1149,0)
(1495,2710,0)
(2854,4143,0)
(2605,5668,0)
(2526,4636,0)
(1143,2531,0)
(5589,5025,0)
(885,4724,0)
(3688,5099,0)
(816,2751,0)
(3122,784,0)
(1595,5725,0)
(4817,4611,0)
(4663,754,0)
(5655,834,0)
(1633,3635,0)
(2326,4628,0)
(4500,1473,0)
(2326,2030,0)
(2556,4940,0)
(724,1638,0)
(2892,5698,0)
(533,4095,0)
(5654,3536,0)
(3166,1947,0)
(5250,4363,0)
(2170,36,0)
(1129,4666,0)
(5159,5059,0)
(232,4927,0)
(3692,627,0)
(2782,3720,0)
(4323,4918,0)
(840,611,0)
(2019,1889,0)
(3534,4223,0)
(4032,195,0)
(170,4055,0)
(264,3039,0)
(5157,5134,0)
(3433,1046,0)
(4302,694,0)
(633,2008,0)
(1041,2324,0)
(2759,5429,0)
(3064,4916,0)
(2893,2604,0)
(1842,3355,0)
(3351,4786,0)
(191,4788,0)
(2640,3292,0)
(5684,4731,0)
(5384,3103,0)
(3397,2244,0)
(4868,3635,0)
(2416,3979,0)
(1288,154,0)
(680,5687,0)
(3064,3923,0)
(1001,370,0)
(2271,1436,0)
(349,2580,0)
(65,5286,0)
(271,4003,0)
(5207,3506,0)
(2446,2299,0)
(4900,5682,0)
(4499,2932,0)
(1015,2587,0)
(3299,1844,0)
(4912,601,0)
(5538,4267,0)
(3917,2546,0)
(4318,1721,0)
(617,906,0)
(2555,5058,0)
(4366,5349,0)
(5692,5020,0)
(4672,5589,0)
(4713,4460,0)
(3391,5428,0)
(2051,5075,0)
(3561,916,0)
(164,2747,0)
(1869,3292,0)
(3128,5464,0)
(5552,1314,0)
(3064,4911,0)
(3403,1844,0)
(2969,1066,0)
(3965,2426,0)
(2918,2152,0)
(3031,65,0)
(728,1844,0)
(923,627,0)
(4573,2752,0)
(5636,2255,0)
(200,3847,0)
(4345,1983,0)
(4702,3418,0)
(5038,2780,0)
(5524,3625,0)
(3707,1053,0)
(1586,3552,0)
(4322,5162,0)
(5327,3703,0)
(1439,4063,0)
(5171,5059,0)
(591,5337,0)
(91,627,0)
(3310,4806,0)
(4154,1321,1)
(1499,373,1)
(564,1248,1)
(2235,320,1)
(2542,2190,1)
(5315,4295,1)
(54,2265,1)
(3609,2452,1)
(4414,5629,1)
(2200,523,1)
(4859,195,1)
(4828,5059,1)
(3140,4398,1)
(2108,3297,1)
(5215,2190,1)
(4663,2030,1)
(3917,2546,1)
(3328,3417,1)
(942,1308,1)
(4932,2271,1)
(3338,627,1)
(771,940,1)
(3997,1070,1)
(5187,1844,1)
(1565,5429,1)
(3096,5165,1)
(5763,1450,1)
(2918,1568,1)
(3551,2903,1)
(2494,4461,1)
(3038,613,1)
(1926,1228,1)
(3934,4909,1)
(39,3417,1)
(3028,277,1)
(5216,2294,1)
(946,2981,1)
(2529,4068,1)
(1713,5438,1)
(3064,1802,1)
(4725,1772,1)
(4447,627,1)
(1960,3751,1)
(1764,5008,1)
(5282,4068,1)
(1943,1347,1)
(302,3662,1)
(5334,811,1)
(864,1626,1)
(923,2866,1)
(4274,3750,1)
(3979,1831,1)
(3280,2190,1)
(2529,5059,1)
(968,4611,1)
(4985,800,1)
(4831,1844,1)
(1221,309,1)
(3064,2785,1)
(2196,2719,1)
(3183,2100,1)
(893,292,1)
(2928,743,1)
(5596,1977,1)
(4876,5059,1)
(2663,3785,1)
(2522,2921,1)
(792,2827,1)
(2695,2583,1)
(4030,482,1)
(938,3943,1)
(5169,675,1)
(1712,2977,1)
(3227,2783,1)
(2901,374,1)
(3231,627,1)
(5341,4218,1)
(3428,3979,1)
(2607,309,1)
(2797,848,1)
(1629,4662,1)
(4787,2902,1)
(1512,3197,1)
(5302,2015,1)
(5316,2428,1)
(667,2762,1)
(3770,5270,1)
(3328,331,1)
(3748,747,1)
(514,2533,1)
(4068,599,1)
(1721,839,1)
(792,1951,1)
(5727,706,1)
(1489,1859,1)
(3323,1010,1)
(965,128,1)
(2980,866,1)
(4136,2331,1)
(109,2496,1)
(4501,4114,1)
(3992,2146,1)
(1624,3172,1)
(3404,3910,1)
(1425,5491,1)
(5334,1663,1)
(2281,1007,1)
(1216,3631,1)
(1762,2747,1)
(1801,3473,1)
(4882,2417,1)
(5236,5198,1)
(4722,2746,1)
(488,2190,1)
(2277,1844,1)
(2492,1215,1)
(291,2993,1)
(1511,627,1)
(4641,3151,1)
(4213,5530,1)
(2887,1844,1)
(5083,1723,1)
(436,1826,1)
(4280,1844,1)
(810,395,1)
(5249,3739,1)
(1853,1844,1)
(5073,3443,1)
(4934,510,1)
(5121,2896,1)
(3110,3999,1)
(5224,1892,1)
(307,3064,1)
(1222,2673,1)
(3574,631,1)
(3507,4418,1)
(1827,1844,1)
(363,2947,1)
(4089,3097,1)
(1254,3411,1)
(3563,5682,1)
(3064,4120,1)
(448,3444,1)
(345,1792,1)
(4663,3114,1)
(5061,3425,1)
(4541,4255,1)
(640,3160,1)
(5363,2984,1)
(2206,702,1)
(3436,4343,1)
(4830,460,1)
(4092,988,1)
(3710,4893,1)
(5493,2088,1)
(284,4486,1)
(215,2001,1)
(3877,4195,1)
(2784,4341,1)
(4478,3990,1)
(3859,2568,1)
(1850,5400,1)
(1999,713,1)
(610,3582,1)
(5633,195,1)
(3100,2323,1)
(335,5610,1)
(84,2476,1)
(1094,813,1)
(4507,5316,1)
(1321,3917,1)
(1833,1435,1)
(167,2174,1)
(95,1942,1)
(4560,4898,1)
(198,4572,1)
(2646,3572,1)
(2898,3510,1)
(413,3732,1)
(405,359,1)
(737,2424,1)
(3064,3114,1)
(2741,3542,1)
(3029,4948,1)
(2969,1066,1)
(3677,2523,1)
(1784,5254,1)
(1847,3843,1)
(212,5055,1)
(4319,2183,1)
(2725,1108,1)
(3417,3462,1)
(1543,3370,1)
(5306,1844,1)
(256,4736,1)
(2326,4102,1)
(4321,1844,1)
(4801,3735,1)
(2326,1230,1)
(5607,4670,1)
(581,2190,1)
(5016,4343,1)
(5282,2965,1)
(1276,1481,1)
(4964,2190,1)
(3734,1817,1)
(3053,4743,1)
(2918,3093,1)
(2723,1860,1)
(1921,2328,1)
(2282,319,1)
(4534,3352,1)
(2124,198,1)
(4794,4068,1)
(1889,4611,1)
(5321,589,1)
(4678,155,1)
(889,3031,1)
(1339,275,1)
(36,2170,1)
(1176,2889,1)
(3213,4583,1)
(2708,1361,1)
(1985,3659,1)
(792,343,1)
(4480,1034,1)
(3967,1061,1)
(244,844,1)
(85,5289,1)
(2046,1844,1)
(4580,3579,1)
(4349,2467,1)
(2809,2902,1)
(2355,2581,1)
(3577,1004,1)
(3523,4391,1)
(2137,2190,1)
(2088,5444,1)
(2018,734,1)
(4728,4326,1)
(670,5431,1)
(1351,3064,1)
(3431,3439,1)
(2780,5038,1)
(4939,3418,1)
(4554,2243,1)
(1797,3635,1)
(2904,3070,1)
(2116,372,1)
(936,1202,1)
(5682,1775,1)
(1481,4676,1)
(1251,2610,1)
(1746,1844,1)
(1298,2696,1)
(2671,3811,1)
(2679,3599,1)
(3438,1640,1)
(1827,5355,1)
(3787,2072,1)
(4572,3663,1)
(3480,3573,1)
(4872,627,1)
(3119,1443,1)
(3927,3798,1)
(2796,2187,1)
(3605,2810,1)
(2256,3644,1)
(1802,2032,1)
(2350,4836,1)
(3346,1617,1)
(2441,5473,1)
(485,1428,1)
(2400,3482,1)
(5120,331,1)
(2172,5575,1)
(526,4699,1)
(812,3048,1)
(3569,4616,1)
(330,1823,1)
(2662,5426,1)
(4423,1737,1)
(1074,5685,1)
(4453,4302,1)
(3590,2282,1)
(2985,1020,1)
(1297,3525,1)
(4989,5249,1)
(584,2190,1)
(469,3473,1)
(3157,774,1)
(3064,2997,1)
(4036,3126,1)
(190,5440,1)
(3597,4994,1)
(5682,3676,1)
(3701,3754,1)
(2738,2560,1)
(1992,3905,1)
(3374,3527,1)
(2394,10,1)
(1446,5331,1)
(408,5622,1)
(3760,1651,1)
(4091,2364,1)
(2918,281,1)
(4535,12,1)
(1004,4964,1)
(2936,4364,1)
(2033,4957,1)
(1646,1844,1)
(3224,5421,1)
(1825,1844,1)
(3221,4033,1)
(1511,1591,1)
(2819,2248,1)
(374,4443,1)
(1976,5024,1)
(674,5464,1)
(2346,1216,1)
(4017,3563,1)
(2000,1316,1)
(5126,5059,1)
(3848,3582,1)
(3008,1870,1)
(1063,2938,1)
(270,4715,1)
(772,773,1)
(3752,997,1)
(4398,871,1)
(5426,4039,1)
(2182,1554,1)
(834,3573,1)
(2886,5317,1)
(284,184,1)
(5682,5707,1)
(3661,3488,1)
(5178,5470,1)
(3313,4110,1)
(397,1523,1)
(2747,627,1)
(2005,2026,1)
(5292,4106,1)
(5569,280,1)
(390,1485,1)
(2148,2269,1)
(5593,3186,1)
(4360,2714,1)
(4215,584,1)
(2413,3648,1)
(1862,3621,1)
(557,1844,1)
(1274,4930,1)
(2918,816,1)
(5558,4551,1)
(4173,59,1)
(4104,688,1)
(3064,4807,1)
(1424,1336,1)
(844,2840,1)
(3937,1448,1)
(244,5059,1)
(5290,4069,1)
(2601,4032,1)
(4382,3412,1)
(1359,942,1)
(1527,3263,1)
(2098,2934,1)
(1363,1560,1)
(164,1964,1)
(309,2393,1)
(1790,5359,1)
(3982,160,1)
(777,1844,1)
(3578,5035,1)
(15,2249,1)
(5554,2685,1)
(2898,2251,1)
(928,1159,1)
(5277,551,1)
(1285,298,1)
(3916,31,1)
(5370,3605,1)
(1204,2186,1)
(38,4150,1)
(2498,1563,1)
(5664,3247,1)
(4487,909,1)
(4671,627,1)
(2388,5059,1)
(3046,2695,1)
(3965,2426,1)
(471,3034,1)
(2678,4825,1)
(1779,4872,1)
(4713,2038,1)
(554,3307,1)
(880,3456,1)
(5018,3997,1)
(2728,3739,1)
(1253,3529,1)
(2416,4068,1)
(4679,2071,1)
(1022,3952,1)
(5334,4991,1)
(1416,1291,1)
(5150,5375,1)
(5453,1456,1)
(899,606,1)
(5682,93,1)
(3948,5622,1)
(690,826,1)
(4537,2021,1)
(4668,2507,1)
(5282,3064,1)
(3064,5093,1)
(5560,451,1)
(1377,5607,1)
(5519,3963,1)
(1415,1484,1)
(4595,5423,1)
(2328,2607,1)
(5741,1682,1)
(904,627,1)
(4133,2426,1)
(2197,2813,1)
(3428,5682,1)
(1098,193,1)
(1558,495,1)
(4818,627,1)
(2839,1986,1)
(4181,371,1)
(759,5342,1)
(4719,8,1)
(2388,1780,1)
(4121,1385,1)
(4663,1230,1)
(3519,2108,1)
(3253,5270,1)
(4130,4941,1)
(3459,1297,1)
(4676,5731,1)
(4469,627,1)
(1806,4297,1)
(4037,5474,1)
(2501,4843,1)
(4973,1211,1)
(3596,2791,1)
(4078,1844,1)
(5414,5059,1)
(3979,754,1)
(5100,4112,1)
(5703,1844,1)
(4924,597,1)
(3872,458,1)
(215,293,1)
(271,4003,1)
(4126,3632,1)
(112,1326,1)
(2807,1078,1)
(378,4738,1)
(3585,710,1)
(1851,5307,1)
(1268,2190,1)
(2958,1831,1)
(4149,5736,1)
(458,5194,1)
(5296,569,1)
(4517,3177,1)
(5350,1844,1)
(3572,4400,1)
(5609,1844,1)
(5532,4964,1)
(2886,3863,1)
(4033,3103,1)
(3351,841,1)
(2918,2997,1)
(3175,2442,1)
(5751,4166,1)
(3662,5067,1)
(5100,2103,1)
(2383,2388,1)
(4419,4087,1)
(4802,101,1)
(3086,1624,1)
(1633,5055,1)
(5384,3103,1)
(1591,4503,1)
(4405,494,1)
(2351,2682,1)
(1369,4435,1)
(2753,2677,1)
(3464,4391,1)
(3830,4449,1)
(5387,4459,1)
(1579,4680,1)
(754,4819,1)
(3668,2264,1)
(4129,195,1)
(3511,581,1)
(4892,5325,1)
(3632,5055,1)
(1527,758,1)
(3484,2400,1)
(2974,627,1)
(5639,1396,1)
(1234,1175,1)
(4052,2687,1)
(3055,111,1)
(4738,1263,1)
(1540,4354,1)
(5626,2473,1)
(3438,1844,1)
(156,3107,1)
(3580,1595,1)
(2869,1138,1)
(4826,1844,1)
(284,4823,1)
(4787,4068,1)
(3860,3204,1)
(4030,2875,1)
(2104,2495,1)
(161,4220,1)
(1307,5558,1)
(5682,601,1)
(5629,628,1)
(1541,3346,1)
(3962,4261,1)
(2380,2668,1)
(265,4544,1)
(5746,3475,1)
(3944,2544,1)
(3064,2317,1)
(4991,5601,1)
(181,3800,1)
(4185,2748,1)
(5067,4924,1)
(3757,3162,1)
(2255,2072,1)
(1371,1844,1)
(2257,5324,1)
(5760,3178,1)
(3636,838,1)
(4345,1618,1)
(5487,3044,1)
(2576,5766,1)
(5100,1887,1)
(2539,961,1)
(4608,2873,1)
(3156,2011,1)
(4542,1008,1)
(617,906,1)
(4379,2521,1)
(79,2462,1)
(3011,4233,1)
(5406,2271,1)
(2405,5429,1)
(1059,5059,1)
(3419,5721,1)
(5761,5384,1)
(2334,2745,1)
(668,2526,1)
(3045,5059,1)
(2767,5430,1)
(3751,3277,1)
(5637,2552,1)
(4609,1073,1)
(4085,3067,1)
(1703,3635,1)
(957,3696,1)
(506,5450,1)
(546,5343,1)
(469,3894,1)
(2264,1728,1)
(3216,627,1)
(1215,995,1)
(1330,3239,1)
(188,5573,1)
(4689,5176,1)
(3081,1769,1)
(4819,1058,1)
(4622,3594,1)
(2019,1814,1)
(5682,808,1)
(2326,4632,1)
(3807,4840,1)
(393,1817,1)
(4823,3278,1)
(1086,1103,1)
(585,2561,1)
(1246,4768,1)
(2918,4120,1)
(1332,934,1)
(307,4068,1)
(3645,2226,1)
(2623,4187,1)
(3787,5189,1)
(411,2481,1)
(2538,182,1)
(3328,1575,1)
(2326,209,1)
(2105,4346,1)
(2256,5647,1)
(5151,2123,1)
(5238,1011,1)
(4027,3654,1)
(3132,141,1)
(273,5055,1)
(3984,3603,1)
(5589,4672,1)
(4166,504,1)
(2862,5431,1)
(495,1511,1)
(2934,3620,1)
(3071,4884,1)
(1522,2497,1)
(3335,918,1)
(853,2190,1)
(2004,4955,1)
(2290,4583,1)
(2326,1826,1)
(4704,5668,1)
(2678,3692,1)
(3641,2951,1)
(3804,2748,1)
(4132,421,1)
(3433,3582,1)
(4904,1568,1)
(759,1792,1)
(211,5702,1)
(2452,2963,1)
(2533,1040,1)
(5671,5498,1)
(5734,369,1)
(2369,893,1)
(3274,4750,1)
(707,2785,1)
(3979,3923,1)
(4239,5735,1)
(3176,5550,1)
(5599,1753,1)
(2918,4102,1)
(1515,5399,1)
(5610,1548,1)
(571,527,1)
(4755,313,1)
(3074,3586,1)
(1994,3240,1)
(1590,1241,1)
(2878,1655,1)
(936,149,1)
(4310,3275,1)
(1751,5343,1)
(1089,314,1)
(4204,1747,1)
(1692,4744,1)
(4875,1297,1)
(4161,534,1)
(4174,1844,1)
(3819,1975,1)
(2184,1405,1)
(5307,4983,1)
(4164,477,1)
(1825,4533,1)
(5682,732,1)
(4129,3582,1)
(1231,4023,1)
(3003,4245,1)
(4810,2316,1)
(5081,5293,1)
(4006,4928,1)
(2374,4541,1)
(1921,5048,1)
(2075,5445,1)
(3365,4810,1)
(961,1759,1)
(4029,5761,1)
(1703,4860,1)
(5448,2645,1)
(2809,5682,1)
(5336,430,1)
(4051,931,1)
(961,627,1)
(1661,1713,1)
(1422,3903,1)
(1651,4002,1)
(4596,455,1)
(2937,1608,1)
(5736,4861,1)
(758,3706,1)
(1467,2324,1)
(290,1968,1)
(1864,2133,1)
(5047,345,1)
(5537,1844,1)
(2326,1910,1)
(1703,3740,1)
(122,2404,1)
(950,3371,1)
(19,1444,1)
(2520,370,1)
(5283,4062,1)
(1181,5430,1)
(2424,5747,1)
(5170,239,1)
(998,5378,1)
(3212,2937,1)
(3843,3992,1)
(31,394,1)
(2086,3270,1)
(4393,1147,1)
(3571,1737,1)
(3698,3106,1)
(500,2190,1)
(115,4128,1)
(4489,1584,1)
(39,3039,1)
(1921,4167,1)
(124,2575,1)
(5294,3042,1)
(1696,3156,1)
(74,1077,1)
(2926,5059,1)
(3220,1528,1)
(5179,3484,1)
(5559,2845,1)
(1829,1452,1)
(220,5070,1)
(4789,1807,1)
(644,1124,1)
(4663,4894,1)
(3979,5115,1)
(4460,1153,1)
(102,3582,1)
(3193,1726,1)
(756,920,1)
(4295,5055,1)
(3077,4197,1)
(987,4502,1)
(548,1323,1)
(4614,1030,1)
(4816,4531,1)
(4422,2803,1)
(3810,1843,1)
(4366,1425,1)
(3890,409,1)
(2918,3676,1)
(1994,1369,1)
(4108,3876,1)
(3043,627,1)
(4388,2369,1)
(3960,1660,1)
(4431,4272,1)
(2893,3681,1)
(4330,5123,1)
(2529,3064,1)
(3022,1396,1)
(3095,505,1)
(3646,627,1)
(267,4088,1)
(2447,5075,1)
(1223,5468,1)
(2465,4944,1)
(1768,1879,1)
(462,2367,1)
(4097,399,1)
(215,1665,1)
(3721,4566,1)
(5505,364,1)
(1492,4029,1)
(1963,3198,1)
(3922,507,1)
(1464,5316,1)
(4461,4241,1)
(678,5059,1)
(3337,2056,1)
(441,3207,1)
(904,4639,1)
(3050,2959,1)
(1299,907,1)
(1316,1295,1)
(5140,4210,1)
(3722,3703,1)
(3177,5287,1)
(563,3755,1)
(4326,3915,1)
(796,1844,1)
(4284,4098,1)
(3066,2770,1)
(2376,4754,1)
(3672,578,1)
(5067,1575,1)
(4068,4449,1)
(3347,2440,1)
(3954,4521,1)
(5686,4258,1)
(4434,819,1)
(687,4340,1)
(5683,1321,1)
(4670,3726,1)
(5055,594,1)
(39,4991,1)
(2452,923,1)
(4040,1429,1)
(128,270,1)
(5027,1558,1)
(4787,3979,1)
(5485,682,1)
(2808,4837,1)
(1921,4948,1)
(2555,4472,1)
(4663,4102,1)
(284,5462,1)
(136,1396,1)
(2203,1539,1)
(379,2150,1)
(4689,3758,1)
(4631,2748,1)
(2225,2155,1)
(2326,4705,1)
(4637,1716,1)
(1866,1581,1)
(1364,2374,1)
(2575,2576,1)
(4093,3955,1)
(2875,5291,1)
(1766,922,1)
(2791,195,1)
(5656,1378,1)
(5163,4097,1)
(3703,5604,1)
(3979,2413,1)
(3616,4207,1)
(2262,2850,1)
(1581,627,1)
(3448,1844,1)
(464,5084,1)
(4663,3923,1)
(236,926,1)
(1900,1844,1)
(3418,2812,1)
(1650,4755,1)
(4139,627,1)
(1115,2089,1)
(4390,2614,1)
(5120,5675,1)
(3247,978,1)
(5474,2679,1)
(3064,5469,1)
(3236,2223,1)
(1075,2457,1)
(1083,3764,1)
(1301,900,1)
(2809,4068,1)
(5436,636,1)
(3238,3627,1)
(4837,440,1)
(4210,4530,1)
(1448,4381,1)
(1114,3790,1)
(4663,209,1)
(5430,5059,1)
(2867,3432,1)
(4411,4786,1)
(146,2069,1)
(3893,2310,1)
(1957,5527,1)
(65,3031,1)
(667,1844,1)
(2741,1844,1)
(4694,5321,1)
(2445,3646,1)
(1383,4054,1)
(1632,5420,1)
(1389,3159,1)
(3465,1778,1)
(1327,2024,1)
(1191,2596,1)
(4335,5002,1)
(5176,4831,1)
(4035,4042,1)
(4698,408,1)
(2526,2701,1)
(2724,3582,1)
(2714,5682,1)
(3747,2339,1)
(3668,2326,1)
(4948,3008,1)
(3979,281,1)
(5253,2257,1)
(4169,887,1)
(3979,4632,1)
(865,3263,1)
(1184,4256,1)
(4782,4432,1)
(4379,4122,1)
(4963,4936,1)
(5003,2612,1)
(856,81,1)
(2905,1270,1)
(4663,3821,1)
(2914,1737,1)
(4663,3676,1)
(5120,4991,1)
(3286,2867,1)
(1886,55,1)
(636,2955,1)
(4374,1746,1)
(395,1421,1)
(3018,1867,1)
(2422,5404,1)
(4825,2980,1)
(2992,2952,1)
(3040,4288,1)
(665,5741,1)
(5512,3291,1)
(2226,2341,1)
(4598,3822,1)
(1908,1218,1)
(784,1641,1)
(1322,2204,1)
(3450,588,1)
(3897,627,1)
(4794,3064,1)
(1617,2230,1)
(4863,5278,1)
(720,3916,1)
(3563,2883,1)
(3662,284,1)
(1490,2726,1)
(2473,4092,1)
(1280,1844,1)
(2915,5661,1)
(44,2945,1)
(4470,2317,1)
(4354,2393,1)
(5682,208,1)
(4170,2626,1)
(5249,3510,1)
(796,2267,1)
(2416,3979,1)
(3066,5059,1)
(4972,5131,1)
(60,5624,1)
(850,591,1)
(3064,2392,1)
(2172,446,1)
(2432,2471,1)
(3064,281,1)
(1652,1844,1)
(1300,1702,1)
(834,464,1)
(5470,7,1)
(5511,2410,1)
(1299,5178,1)
(2348,84,1)
(4900,3064,1)
(2393,5306,1)
(4032,4286,1)
(580,3079,1)
(465,4205,1)
(117,486,1)
(3979,4848,1)
(2962,2190,1)
(3996,5121,1)
(3978,5326,1)
(3705,1085,1)
(2171,3974,1)
(3655,5519,1)
(4750,4315,1)
(4882,1844,1)
(3034,3038,1)
(4521,1850,1)
(2586,5486,1)
(5372,1844,1)
(2581,1817,1)
(5550,1978,1)
(3248,998,1)
(2710,3131,1)
(4382,3381,1)
(107,1068,1)
(3840,627,1)
(2428,1698,1)
(1502,3424,1)
(2075,5217,1)
(3671,4786,1)
(4279,4391,1)
(5682,1015,1)
(1139,4145,1)
(3802,3095,1)
(4900,3979,1)
(2482,66,1)
(445,1844,1)
(2758,627,1)
(251,3618,1)
(974,1246,1)
(4663,3093,1)
(3331,4550,1)
(2728,4721,1)
(2326,4731,1)
(2326,4905,1)
(4893,4295,1)
(2945,2043,1)
(5438,5075,1)
(4245,4390,1)
(3351,3739,1)
(412,4463,1)
(2614,2063,1)
(17,3919,1)
(3604,2244,1)
(985,4196,1)
(243,3260,1)
(3583,2514,1)
(4337,1273,1)
(3397,1844,1)
(3535,3236,1)
(1211,1411,1)
(2495,5022,1)
(3430,3511,1)
(437,4777,1)
(4831,4599,1)
(3968,2067,1)
(3720,627,1)
(770,1566,1)
(1807,5581,1)
(56,3579,1)
(1476,3486,1)
(3082,4800,1)
(5568,1879,1)
(260,4031,1)
(5245,197,1)
(4205,5387,1)
(2286,5347,1)
(445,1517,1)
(5430,4928,1)
(3322,180,1)
(5502,2208,1)
(2851,3683,1)
(4496,1855,1)
(4114,5648,1)
(646,3685,1)
(2288,4765,1)
(3422,4168,1)
(3214,4585,1)
(2892,1117,1)
(5394,2949,1)
(5764,763,1)
(5545,4658,1)
(70,296,1)
(4379,3762,1)
(3161,2793,1)
(77,4331,1)
(2099,673,1)
(5643,3404,1)
(718,5059,1)
(4056,205,1)
(859,1844,1)
(3186,5059,1)
(2503,5597,1)
(5590,1268,1)
(1967,4281,1)
(1377,5059,1)
(5573,3555,1)
(4620,1844,1)
(2593,1844,1)
(5264,3493,1)
(3979,4102,1)
(1040,3919,1)
(199,4763,1)
(1614,734,1)
(1129,4666,1)
(1441,4684,1)
(2918,5036,1)
(4731,5059,1)
(3779,4450,1)
(2918,93,1)
(4272,3027,1)
(325,5709,1)
(2326,93,1)
(679,3050,1)
(3057,3518,1)
(1830,1374,1)
(3105,5567,1)
(1308,4212,1)
(4913,3733,1)
(455,1526,1)
(2472,3216,1)
(93,5632,1)
(5542,4652,1)
(2352,2370,1)
(3186,5629,1)
(4667,4192,1)
(2440,5183,1)
(183,2484,1)
(2220,3741,1)
(4363,2,1)
(3634,5352,1)
(1174,157,1)
(5334,1917,1)
(1920,4584,1)
(4018,1065,1)
(3567,4027,1)
(1606,2898,1)
(547,1410,1)
(2326,3669,1)
(5682,2402,1)
(431,4367,1)
(164,1179,1)
(215,1922,1)
(1989,1844,1)
(3170,3416,1)
(3369,2413,1)
(216,1287,1)
(2541,1668,1)
(656,4627,1)
(1514,856,1)
(3790,3635,1)
(4161,152,1)
(297,4093,1)
(525,432,1)
(3064,1778,1)
(1870,3862,1)
(4068,1864,1)
(1112,3141,1)
(2433,860,1)
(3012,3582,1)
(2583,2749,1)
(5200,3691,1)
(137,1491,1)
(2334,2538,1)
(1229,5069,1)
(3284,3128,1)
(2269,5094,1)
(641,4639,1)
(1901,2631,1)
(3410,4955,1)
(3668,3928,1)
(3979,3114,1)
(4192,1737,1)
(4115,3145,1)
(1586,2120,1)
(670,5415,1)
(2668,3337,1)
(2532,4191,1)
(73,5521,1)
(934,1947,1)
(1248,1844,1)
(2796,5336,1)
(4416,1844,1)
(1899,3361,1)
(5120,1663,1)
(1261,2721,1)
(2331,4655,1)
(5322,3455,1)
(732,522,1)
(3523,2363,1)
(751,2190,1)
(1386,1585,1)
(4804,2124,1)
(2403,3869,1)
(3177,3652,1)
(4498,4522,1)
(2151,3111,1)
(5642,5703,1)
(956,3159,1)
(2759,5429,1)
(2244,1844,1)
(3979,4807,1)
(1497,5437,1)
(455,215,1)
(284,1965,1)
(2056,5667,1)
(4684,4380,1)
(1617,1844,1)
(3481,5368,1)
(3666,3036,1)
(2327,627,1)
(5320,49,1)
(5008,1490,1)
(2396,2728,1)
(3119,2869,1)
(5077,1844,1)
(1955,1464,1)
(421,3212,1)
(4663,565,1)
(1788,1884,1)
(4759,2933,1)
(4663,3273,1)
(3689,515,1)
(3338,1556,1)
(318,1859,1)
(3650,1254,1)
(2798,4760,1)
(4516,2826,1)
(868,2860,1)
(3310,720,1)
(5122,2262,1)
(4663,4911,1)
(4406,2511,1)
(5180,3458,1)
(3613,469,1)
(5398,5678,1)
(1950,2097,1)
(360,2300,1)
(5682,4102,1)
(2746,2264,1)
(240,3017,1)
(3536,627,1)
(4500,1473,1)
(4777,1844,1)
(4952,5412,1)
(5741,627,1)
(3093,2072,1)
(3870,2805,1)
(931,756,1)
(2330,3367,1)
(4218,5475,1)
(653,5665,1)
(1886,1725,1)
(2496,4913,1)
(5002,3777,1)
(4533,1593,1)
(1047,4855,1)
(377,5185,1)
(3112,2125,1)
(1444,627,1)
(2193,1877,1)
(1566,3571,1)
(1000,1906,1)
(1338,696,1)
(660,72,1)
(745,5075,1)
(4291,674,1)
(4699,3006,1)
(939,4530,1)
(2918,4911,1)
(4008,4942,1)
(4642,4758,1)
(3704,4193,1)
(787,4052,1)
(159,854,1)
(5244,5059,1)
(4932,3229,1)
(4632,1264,1)
(1283,4243,1)
(2428,1551,1)
(4651,2325,1)
(4790,1637,1)
(3673,4645,1)
(942,1737,1)
(1141,1992,1)
(4956,4828,1)
(610,195,1)
(3328,370,1)
(2418,295,1)
(2205,16,1)
(2672,2209,1)
(4590,660,1)
(532,4515,1)
(3060,2283,1)
(1035,5059,1)
(1946,627,1)
(1160,2735,1)
(3150,5168,1)
(767,1794,1)
(5532,126,1)
(2583,627,1)
(4971,896,1)
(3287,131,1)
(2172,1301,1)
(2110,4170,1)
(690,627,1)
(3367,994,1)
(3979,4120,1)
(3001,1304,1)
(4633,4632,1)
(5508,5626,1)
(881,1844,1)
(3042,2640,1)
(5738,2094,1)
(5289,2114,1)
(5074,2861,1)
(4280,687,1)
(44,3283,1)
(447,1811,1)
(556,2646,1)
(5115,1169,1)
(3424,2190,1)
(1599,1279,1)
(800,3863,1)
(792,3010,1)
(183,3813,1)
(2500,1101,1)
(3114,3190,1)
(4225,1972,1)
(2185,5420,1)
(3979,808,1)
(4650,2550,1)
(2838,3450,1)
(103,5059,1)
(3855,2025,1)
(4028,4078,1)
(2316,5682,1)
(2453,5405,1)
(4595,1596,1)
(2520,1575,1)
(665,4015,1)
(2092,2920,1)
(2416,2548,1)
(3064,754,1)
(1117,3005,1)
(44,5100,1)
(737,2621,1)
(786,1844,1)
(3564,3331,1)
(2850,5429,1)
(2918,3150,1)
(5269,4414,1)
(5476,4725,1)
(4112,1237,1)
(3536,585,1)
(4663,2785,1)
(4338,1553,1)
(2918,2758,1)
(608,2468,1)
(748,5460,1)
(1723,790,1)
(1310,5625,1)
(4918,2145,1)
(2762,2239,1)
(5539,5615,1)
(2534,1017,1)
(1889,4592,1)
(3157,622,1)
(4586,1579,1)
(2812,4702,1)
(2268,577,1)
(4477,1761,1)
(1392,4812,1)
(1893,1134,1)
(2328,5011,1)
(378,2898,1)
(3403,1327,1)
(3395,4575,1)
(3848,2982,1)
(4744,5605,1)
(5524,5585,1)
(5032,1034,1)
(5025,1844,1)
(4550,107,1)
(4734,5055,1)
(698,1863,1)
(4990,627,1)
(3877,3730,1)
(3975,1636,1)
(4867,2380,1)
(3741,89,1)
(5490,2502,1)
(68,3832,1)
(4091,2643,1)
(5090,1588,1)
(1862,1844,1)
(2098,1621,1)
(2717,5535,1)
(2645,3230,1)
(5117,1844,1)
(554,3526,1)
(2918,5115,1)
(3352,1501,1)
(5333,2394,1)
(2687,5377,1)
(2899,3067,1)
(4212,2066,1)
(2429,5503,1)
(1571,848,1)
(1382,2096,1)
(5440,3669,1)
(3409,3802,1)
(1900,172,1)
(1626,2190,1)
(2172,4640,1)
(3064,1456,1)
(4295,3635,1)
(1388,1844,1)
(4947,2426,1)
(500,5222,1)
(2357,1523,1)
(1113,1375,1)
(5469,4703,1)
(1120,5529,1)
(1171,1844,1)
(209,5059,1)
(4774,2205,1)
(4968,2369,1)
(2918,208,1)
(5459,3042,1)
(4069,1698,1)
(5456,1817,1)
(677,2225,1)
(2758,203,1)
(3945,2102,1)
(2860,1851,1)
(2918,4632,1)
(215,783,1)
(1468,4955,1)
(4969,1130,1)
(2633,3656,1)
(3987,4359,1)
(2918,754,1)
(3907,2430,1)
(105,3238,1)
(2172,3544,1)
(3979,565,1)
(2984,2573,1)
(743,709,1)
(5630,5720,1)
(4449,1064,1)
(3877,2285,1)
(52,5578,1)
(1193,4349,1)
(4472,4266,1)
(2993,3242,1)
(4378,4064,1)
(4663,4705,1)
(1627,1411,1)
(2907,5634,1)
(4369,4157,1)
(2512,1091,1)
(1942,832,1)
(5028,5465,1)
(3790,2525,1)
(3351,4786,1)
(2918,5469,1)
(1133,2593,1)
(126,2190,1)
(4346,1844,1)
(2125,1692,1)
(77,686,1)
(559,2869,1)
(608,4926,1)
(4177,4959,1)
(144,2759,1)
(4996,1845,1)
(2521,3964,1)
(3087,2720,1)
(2872,5059,1)
(5482,564,1)
(4415,4117,1)
(1477,3635,1)
(5682,4241,1)
(5633,3582,1)
(5039,885,1)
(1563,4070,1)
(5069,5298,1)
(4305,1274,1)
(2326,4084,1)
(846,2205,1)
(783,2811,1)
(4979,5545,1)
(4031,2222,1)
(1846,1590,1)
(1929,4878,1)
(1818,1844,1)
(919,3495,1)
(11,1208,1)
(2782,3419,1)
(3915,4615,1)
(2918,2413,1)
(1105,1663,1)
(1130,2802,1)
(2038,3328,1)
(2976,867,1)
(4262,532,1)
(104,992,1)
(5072,5039,1)
(3999,2769,1)
(574,3640,1)
(2477,3407,1)
(2326,5707,1)
(2956,4617,1)
(5627,3804,1)
(684,779,1)
(2415,1031,1)
(4987,3902,1)
(39,1663,1)
(2566,2745,1)
(4385,4975,1)
(2628,5052,1)
(507,178,1)
(2616,3582,1)
(4784,1770,1)
(1129,836,1)
(5682,987,1)
(5126,5292,1)
(2072,484,1)
(3821,828,1)
(4102,1396,1)
(2876,1283,1)
(2489,4175,1)
(1704,2490,1)
(914,4595,1)
(5572,1714,1)
(3013,3185,1)
(2316,4068,1)
(2326,2486,1)
(4761,1611,1)
(3269,1430,1)
(2227,2383,1)
(2034,2158,1)
(3979,5373,1)
(834,1844,1)
(3252,4181,1)
(3614,5286,1)
(5666,2153,1)
(1259,5055,1)
(3036,4721,1)
(725,2519,1)
(4663,4905,1)
(2484,2579,1)
(3207,1946,1)
(2714,2902,1)
(873,3116,1)
(2012,3779,1)
(2748,739,1)
(4203,5138,1)
(430,701,1)
(5250,1721,1)
(350,3739,1)
(2857,1508,1)
(2468,4926,1)
(2796,430,1)
(2609,3326,1)
(3914,3109,1)
(4300,627,1)
(3573,1844,1)
(1333,3737,1)
(4480,5433,1)
(949,3775,1)
(5210,3497,1)
(215,788,1)
(700,2229,1)
(5187,1441,1)
(5082,5085,1)
(4835,204,1)
(4725,1817,1)
(2172,4892,1)
(1137,2538,1)
(5744,3951,1)
(594,1844,1)
(2449,4611,1)
(5644,2396,1)
(5231,2895,1)
(5497,401,1)
(1628,693,1)
(3571,5059,1)
(2426,1376,1)
(5423,1596,1)
(3688,1604,1)
(5207,2426,1)
(2172,2527,1)
(1748,2038,1)
(2099,2685,1)
(1767,3582,1)
(2120,627,1)
(2172,876,1)
(5188,3781,1)
(5162,4322,1)
(4269,2250,1)
(2449,2330,1)
(3993,4346,1)
(4342,4910,1)
(2109,3641,1)
(3483,704,1)
(1077,4851,1)
(2256,4182,1)
(1245,2999,1)
(1813,4472,1)
(3697,668,1)
(1351,5682,1)
(51,3364,1)
(2256,5562,1)
(336,549,1)
(4735,4472,1)
(4053,1628,1)
(5568,445,1)
(1466,3185,1)
(823,3979,1)
(689,1844,1)
(3130,3120,1)
(5338,2360,1)
(4309,700,1)
(4391,596,1)
(2320,2241,1)
(670,2862,1)
(2962,3408,1)
(5634,3582,1)
(4370,2373,1)
(1423,525,1)
(1469,1686,1)
(2048,2091,1)
(5120,3417,1)
(1457,5764,1)
(897,5289,1)
(479,2588,1)
(2520,977,1)
(4018,195,1)
(2836,897,1)
(4441,1049,1)
(2918,2392,1)
(1889,1844,1)
(2326,1752,1)
(394,1396,1)
(1885,662,1)
(4745,3569,1)
(2083,2608,1)
(5427,1364,1)
(2189,1273,1)
(1837,2436,1)
(621,719,1)
(5456,878,1)
(581,2368,1)
(3372,1844,1)
(4562,684,1)
(2728,3323,1)
(618,1654,1)
(2123,1701,1)
(271,4190,1)
(1257,3847,1)
(1100,944,1)
(4876,377,1)
(5371,238,1)
(4930,4243,1)
(1007,4250,1)
(1158,4284,1)
(303,265,1)
(471,2971,1)
(3630,770,1)
(3143,4908,1)
(284,330,1)
(4797,2190,1)
(2580,627,1)
(4022,4525,1)
(1336,325,1)
(443,1096,1)
(2195,1791,1)
(3326,2697,1)
(2529,3660,1)
(44,1844,1)
(1734,932,1)
(5246,1844,1)
(3894,1801,1)
(2250,2233,1)
(467,2832,1)
(5682,5115,1)
(5142,1904,1)
(3949,2342,1)
(3654,245,1)
(2616,1562,1)
(1857,898,1)
(2941,1157,1)
(1294,2935,1)
(1453,4442,1)
(1758,2352,1)
(5530,3677,1)
(2172,524,1)
(2096,565,1)
(5592,4105,1)
(1620,568,1)
(2671,627,1)
(2298,2773,1)
(906,5429,1)
(75,3022,1)
(4676,3565,1)
(4718,629,1)
(1593,4660,1)
(5696,3685,1)
(2964,3028,1)
(5076,3167,1)
(3064,2402,1)
(1243,4019,1)
(3866,2358,1)
(5562,147,1)
(3979,93,1)
(4006,5059,1)
(219,4229,1)
(3489,4779,1)
(2686,2265,1)
(4499,1109,1)
(3134,3667,1)
(3926,4148,1)
(1486,5314,1)
(477,5674,1)
(624,1844,1)
(1842,4859,1)
(5381,18,1)
(5323,3125,1)
(4794,2902,1)
(4688,5415,1)
(652,2418,1)
(4406,627,1)
(130,5079,1)
(3260,1466,1)
(3106,2959,1)
(3502,2072,1)
(4712,3336,1)
(1893,2476,1)
(2186,4689,1)
(2326,754,1)
(3416,2700,1)
(2886,1052,1)
(2918,2480,1)
(2286,1844,1)
(3539,2614,1)
(2568,1937,1)
(3179,1,1)
(5682,2255,1)
(1998,5267,1)
(2678,1390,1)
(171,5201,1)
(125,358,1)
(3484,627,1)
(3979,3273,1)
(4161,3361,1)
(3664,4976,1)
(2326,208,1)
(5408,3060,1)
(5435,1839,1)
(5059,3581,1)
(2251,983,1)
(2804,5645,1)
(4539,1652,1)
(5705,5032,1)
(784,5059,1)
(5641,5429,1)
(385,1276,1)
(3979,3821,1)
(992,3697,1)
(5488,801,1)
(279,4922,1)
(1083,5061,1)
(2434,3622,1)
(600,3941,1)
(740,5141,1)
(5714,4496,1)
(3979,3197,1)
(3822,4431,1)
(2430,2461,1)
(5343,5456,1)
(241,1846,1)
(3432,1320,1)
(1608,423,1)
(3695,3772,1)
(4249,627,1)
(1110,1844,1)
(2455,2172,1)
(1597,1844,1)
(2326,2392,1)
(3055,2190,1)
(771,4566,1)
(3979,2486,1)
(1089,1844,1)
(4049,833,1)
(1374,3064,1)
(2326,2152,1)
(1433,3582,1)
(1987,2596,1)
(5409,1844,1)
(5163,3826,1)
(989,2464,1)
(940,1396,1)
(876,5645,1)
(5481,2616,1)
(5514,1582,1)
(5304,2382,1)
(3452,4687,1)
(2754,4475,1)
(3464,1447,1)
(74,2127,1)
(5584,3897,1)
(2139,260,1)
(2004,1285,1)
(1828,1424,1)
(451,3094,1)
(3223,5192,1)
(4513,726,1)
(4663,2325,1)
(3442,640,1)
(529,4716,1)
(4665,3338,1)
(4804,4019,1)
(3403,2599,1)
(3266,884,1)
(3735,4762,1)
(5175,5609,1)
(3319,1844,1)
(2235,627,1)
(2002,2148,1)
(2997,5059,1)
(4196,2147,1)
(1370,5439,1)
(3879,674,1)
(1564,4176,1)
(2687,3996,1)
(778,1844,1)
(779,5690,1)
(3474,5070,1)
(5647,4328,1)
(5214,1583,1)
(4606,2190,1)
(2918,3273,1)
(489,4390,1)
(1858,5612,1)
(3377,850,1)
(2746,3928,1)
(5535,5393,1)
(3607,2190,1)
(1272,4379,1)
(726,104,1)
(797,3422,1)
(1011,4071,1)
(5757,224,1)
(918,1862,1)
(2089,1673,1)
(2159,1570,1)
(3829,3013,1)
(2987,3417,1)
(3630,1566,1)
(2623,2072,1)
(199,5598,1)
(175,4432,1)
(5273,5752,1)
(97,627,1)
(551,2620,1)
(4663,4736,1)
(5682,3093,1)
(4626,1681,1)
(1991,4406,1)
(2932,845,1)
(5567,1396,1)
(3376,3078,1)
(1505,627,1)
(792,3347,1)
(2629,3635,1)
(4288,2367,1)
(1708,4122,1)
(2340,4006,1)
(4612,1027,1)
(3632,3635,1)
(3192,2670,1)
(2063,3691,1)
(4663,732,1)
(1320,2976,1)
(1380,2064,1)
(4266,5279,1)
(919,2316,1)
(604,62,1)
(5682,4705,1)
(2874,4586,1)
(941,190,1)
(3709,3091,1)
(1594,1727,1)
(4729,2322,1)
(3683,3514,1)
(4471,984,1)
(2476,627,1)
(5682,2997,1)
(5233,3842,1)
(501,3685,1)
(3932,3406,1)
(3542,4825,1)
(4943,4894,1)
(4652,5059,1)
(4538,302,1)
(3760,3334,1)
(354,2039,1)
(3151,3101,1)
(87,954,1)
(2256,4549,1)
(5365,243,1)
(5568,1703,1)
(2816,3300,1)
(2773,1610,1)
(3113,2014,1)
(1788,5228,1)
(4677,4939,1)
(2326,732,1)
(3848,5059,1)
(4942,5385,1)
(2180,3510,1)
(1588,475,1)
(3064,808,1)
(4689,627,1)
(555,4415,1)
(239,195,1)
(496,5287,1)
(716,4548,1)
(905,3200,1)
(131,1326,1)
(1655,4529,1)
(3924,5384,1)
(3979,3669,1)
(1776,2246,1)
(2215,5658,1)
(1923,1914,1)
(5500,847,1)
(1237,5750,1)
(2942,4547,1)
(4628,2602,1)
(1769,2991,1)
(5716,2601,1)
(3909,250,1)
(3791,3370,1)
(3998,4661,1)
(2866,5719,1)
(3095,1844,1)
(4566,3874,1)
(3224,1844,1)
(3722,2827,1)
(695,4937,1)
(2926,5629,1)
(5171,3134,1)
(5156,4666,1)
(1871,3121,1)
(2966,2365,1)
(5092,2944,1)
(1384,4472,1)
(4855,272,1)
(102,598,1)
(1016,1176,1)
(5305,2836,1)
(5281,1777,1)
(2267,1281,1)
(4725,4072,1)
(3517,25,1)
(381,863,1)
(3786,5010,1)
(3979,4241,1)
(1417,632,1)
(5438,1571,1)
(5647,5561,1)
(4659,1844,1)
(2388,3174,1)
(2024,2599,1)
(3433,4224,1)
(1242,1406,1)
(2173,1844,1)
(284,5166,1)
(2370,3277,1)
(326,1844,1)
(2326,4412,1)
(4256,1919,1)
(3184,3332,1)
(2508,2159,1)
(5270,5245,1)
(711,2655,1)
(2183,3628,1)
(1481,1772,1)
(496,1574,1)
(717,1018,1)
(604,4049,1)
(3875,1239,1)
(275,1022,1)
(2808,1844,1)
(2791,3582,1)
(501,4928,1)
(1363,627,1)
(4585,5059,1)
(4400,4056,1)
(536,4319,1)
(3064,2030,1)
(4428,5220,1)
(2880,627,1)
(2646,4400,1)
(2296,1444,1)
(5682,4120,1)
(1982,4285,1)
(268,868,1)
(2918,2317,1)
(2026,627,1)
(1849,3552,1)
(4324,1844,1)
(2233,1431,1)
(1437,1522,1)
(1428,2615,1)
(2918,3646,1)
(2681,2922,1)
(98,5429,1)
(5606,3286,1)
(2787,318,1)
(3791,2169,1)
(3869,4344,1)
(5443,3641,1)
(1378,286,1)
(2036,5718,1)
(1548,5611,1)
(622,195,1)
(3664,627,1)
(3020,3759,1)
(3227,5633,1)
(4735,627,1)
(4663,2413,1)
(1921,5621,1)
(706,2822,1)
(951,818,1)
(2326,3707,1)
(2522,5554,1)
(2172,4136,1)
(4068,601,1)
(5682,4736,1)
(4611,4817,1)
(5067,977,1)
(1366,3762,1)
(1729,3970,1)
(3648,2140,1)
(1575,5627,1)
(4687,499,1)
(1641,4833,1)
(916,3561,1)
(2326,2997,1)
(1859,2154,1)
(2666,503,1)
(5206,1795,1)
(1626,905,1)
(2695,5515,1)
(2579,2315,1)
(87,1844,1)
(3321,416,1)
(837,1311,1)
(5681,3522,1)
(3136,5224,1)
(1402,5579,1)
(2777,2025,1)
(2548,1225,1)
(5199,1373,1)
(4195,3393,1)
(2098,5027,1)
(5661,2767,1)
(5682,4848,1)
(792,2399,1)
(1972,579,1)
(2001,3433,1)
(4530,2711,1)
(2067,4050,1)
(1129,5562,1)
(501,5551,1)
(3707,335,1)
(1963,1844,1)
(3491,1615,1)
(5141,3655,1)
(3692,1325,1)
(1471,2160,1)
(2538,3939,1)
(3381,627,1)
(2210,5434,1)
(39,1917,1)
(3668,3605,1)
(3795,1844,1)
(2123,1844,1)
(415,3954,1)
(927,5394,1)
(415,4639,1)
(2896,1207,1)
(5682,4628,1)
(39,1575,1)
(1000,5006,1)
(2409,5726,1)
(432,625,1)
(1299,5417,1)
(1879,1181,1)
(774,2190,1)
(5706,5059,1)
(5682,2152,1)
(5050,537,1)
(3010,492,1)
(4663,808,1)
(1392,182,1)
(3307,1319,1)
(5325,5252,1)
(2154,2180,1)
(2520,1917,1)
(5120,5149,1)
(4930,2876,1)
(2791,1023,1)
(5099,3688,1)
(1140,5512,1)
(5352,3497,1)
(1450,5059,1)
(4809,4916,1)
(1596,5724,1)
(5536,1844,1)
(3319,2485,1)
(375,3127,1)
(353,3009,1)
(4190,3236,1)
(900,3341,1)
(5682,3273,1)
(4926,322,1)
(1037,3892,1)
(5629,5433,1)
(4960,3130,1)
(1036,3054,1)
(2177,3912,1)
(5034,3153,1)
(4787,3064,1)
(673,243,1)
(4374,1844,1)
(662,5429,1)
(2523,36,1)
(813,3556,1)
(4376,5207,1)
(672,2532,1)
(4025,3838,1)
(2520,3406,1)
(4556,4740,1)
(62,4049,1)
(1398,407,1)
(2102,2629,1)
(5349,4366,1)
(5682,2540,1)
(5135,1416,1)
(5134,3859,1)
(4663,601,1)
(3427,3008,1)
(2218,3211,1)
(1602,3629,1)
(633,2543,1)
(4663,4412,1)
(1129,4167,1)
(724,1638,1)
(5326,4370,1)
(4006,3685,1)
(2918,4905,1)
(5349,3701,1)
(3760,5658,1)
(5662,5408,1)
(1414,627,1)
(4877,1494,1)
(331,3235,1)
(4243,3960,1)
(3328,977,1)
(3799,611,1)
(3562,2116,1)
(233,2875,1)
(2581,5176,1)
(3452,1113,1)
(671,3658,1)
(5067,4991,1)
(5755,3469,1)
(4294,3464,1)
(5006,5068,1)
(5517,1310,1)
(5765,2392,1)
(697,241,1)
(5329,4667,1)
(5369,1712,1)
(592,4590,1)
(4711,3237,1)
(3550,1079,1)
(5468,4357,1)
(184,1267,1)
(5617,4412,1)
(242,2858,1)
(3064,4241,1)
(4945,4319,1)
(4789,909,1)
(5682,5093,1)
(906,647,1)
(4311,1916,1)
(842,1328,1)
(1785,5476,1)
(2326,4736,1)
(2360,240,1)
(1891,5059,1)
(2880,3327,1)
(2387,3393,1)
(4592,2019,1)
(3392,2409,1)
(2325,1217,1)
(3114,627,1)
(2508,3454,1)
(183,2000,1)
(5208,3645,1)
(2923,1229,1)
(1379,1844,1)
(1404,479,1)
(2489,3582,1)
(323,4538,1)
(1782,5757,1)
(5334,5149,1)
(1578,4659,1)
(2774,4527,1)
(3531,5401,1)
(778,4513,1)
(2536,2815,1)
(4785,5542,1)
(2487,1356,1)
(284,1578,1)
(4925,143,1)
(3656,1844,1)
(3168,5077,1)
(4252,1259,1)
(4014,5415,1)
(3546,2328,1)
(3568,1174,1)
(4443,1280,1)
(5317,4985,1)
(5127,4087,1)
(4780,4462,1)
(2683,4077,1)
(591,1196,1)
(1237,74,1)
(5145,5603,1)
(107,3647,1)
(1756,163,1)
(4062,4469,1)
(1700,4200,1)
(1450,3979,1)
(4384,5728,1)
(2172,5640,1)
(5267,182,1)
(3950,2465,1)
(3662,3204,1)
(5147,716,1)
(1240,1844,1)
(4368,2539,1)
(4291,5381,1)
(5249,3815,1)
(4436,1844,1)
(4280,5075,1)
(2633,1844,1)
(3924,4774,1)
(2799,3046,1)
(1060,3747,1)
(1578,4586,1)
(4868,1844,1)
(1789,1126,1)
(2550,4457,1)
(3726,2426,1)
(3676,506,1)
(3717,217,1)
(1406,1045,1)
(4663,5414,1)
(4686,1242,1)
(3845,4673,1)
(1973,2835,1)
(5418,1844,1)
(4663,1456,1)
(3107,34,1)
(2278,1998,1)
(88,530,1)
(5071,5415,1)
(1637,666,1)
(5057,105,1)
(3685,5620,1)
(4693,2190,1)
(1606,1489,1)
(5608,2337,1)
(2342,1107,1)
(1273,3614,1)
(144,1844,1)
(4467,116,1)
(1823,1732,1)
(2367,1733,1)
(5573,2745,1)
(3850,4733,1)
(3726,3204,1)
(2785,4454,1)
(507,1659,1)
(4150,1635,1)
(3556,4025,1)
(42,4796,1)
(1565,3643,1)
(3235,4185,1)
(4658,170,1)
(4715,1398,1)
(2300,2748,1)
(963,2725,1)
(4640,1423,1)
(4194,3679,1)
(3049,1409,1)
(5682,2317,1)
(5,2710,1)
(2120,1334,1)
(2108,195,1)
(850,4337,1)
(5683,4154,1)
(4915,1844,1)
(2158,1844,1)
(1803,3174,1)
(3943,3982,1)
(3901,285,1)
(2025,4763,1)
(1129,3942,1)
(2935,4410,1)
(4920,880,1)
(749,4204,1)
(5682,5036,1)
(3276,5471,1)
(3031,5059,1)
(1450,2902,1)
(3873,1025,1)
(1831,222,1)
(4348,2799,1)
(3211,3521,1)
(2983,5524,1)
(4098,3753,1)
(384,513,1)
(2099,2522,1)
(2250,1844,1)
(4316,2689,1)
(1049,4037,1)
(883,627,1)
(1783,3014,1)
(2295,2944,1)
(44,3778,1)
(731,2589,1)
(3384,1844,1)
(502,3634,1)
(4156,2972,1)
(700,5148,1)
(5128,2115,1)
(1921,4549,1)
(4208,1844,1)
(792,2811,1)
(1319,1151,1)
(3498,4014,1)
(3024,4864,1)
(3476,3245,1)
(2639,2190,1)
(442,411,1)
(1199,3921,1)
(1911,3880,1)
(4605,1510,1)
(578,563,1)
(4404,3052,1)
(764,4103,1)
(4154,5154,1)
(3718,972,1)
(1113,242,1)
(4584,1418,1)
(4775,875,1)
(1033,117,1)
(4575,2304,1)
(5438,2007,1)
(4516,2311,1)
(5026,5239,1)
(4974,4474,1)
(2674,4301,1)
(2041,5199,1)
(4488,5164,1)
(2172,1913,1)
(4995,450,1)
(2918,3923,1)
(5384,3877,1)
(1081,2710,1)
(4970,5150,1)
(2600,195,1)
(4547,4600,1)
(4675,4054,1)
(1098,3980,1)
(5228,5364,1)
(782,3745,1)
(1204,4689,1)
(332,3357,1)
(284,64,1)
(3602,4698,1)
(2481,750,1)
(3486,5234,1)
(3027,3011,1)
(2424,627,1)
(1227,4773,1)
(3940,2998,1)
(3296,5370,1)
(4811,35,1)
(1079,459,1)
(449,1844,1)
(2918,3669,1)
(4087,5763,1)
(2434,5059,1)
(4908,2661,1)
(2760,3214,1)
(3920,2796,1)
(1470,2703,1)
(4033,2426,1)
(3852,4445,1)
(3045,3517,1)
(2833,3582,1)
(1535,2410,1)
(3064,4905,1)
(4798,5485,1)
(5392,2416,1)
(3511,2074,1)
(4932,5613,1)
(2803,4863,1)
(4762,2340,1)
(1198,5171,1)
(61,4495,1)
(2918,5373,1)
(2931,4761,1)
(4909,5706,1)
(4879,2503,1)
(5334,977,1)
(3036,1892,1)
(4663,5036,1)
(239,3582,1)
(2160,5215,1)
(4450,5392,1)
(2918,4628,1)
(1144,3484,1)
(94,465,1)
(3979,5469,1)
(402,1953,1)
(4350,2338,1)
(4312,22,1)
(4304,164,1)
(2500,3379,1)
(393,627,1)
(743,3897,1)
(576,4219,1)
(2044,1791,1)
(2938,4721,1)
(1883,1567,1)
(4236,5548,1)
(1282,2079,1)
(261,3301,1)
(107,2819,1)
(438,794,1)
(3455,542,1)
(462,5487,1)
(2517,2764,1)
(3628,1844,1)
(3907,5366,1)
(784,4928,1)
(4397,2014,1)
(721,2437,1)
(622,3582,1)
(3544,250,1)
(4145,1962,1)
(2502,1600,1)
(2598,2758,1)
(24,1844,1)
(4822,1575,1)
(3837,509,1)
(5511,1112,1)
(2925,244,1)
(5220,3668,1)
(3324,16,1)
(5682,1031,1)
(3788,1850,1)
(2833,4047,1)
(4424,2117,1)
(1864,5059,1)
(1948,4786,1)
(3913,1599,1)
(378,1892,1)
(4912,698,1)
(4058,5224,1)
(4068,3821,1)
(4260,986,1)
(378,4721,1)
(1319,3374,1)
(2363,4353,1)
(5062,5395,1)
(4858,2797,1)
(3847,2075,1)
(2942,1844,1)
(4770,129,1)
(2986,980,1)
(244,3322,1)
(3668,2136,1)
(1342,1830,1)
(688,4376,1)
(3198,3074,1)
(5074,1844,1)
(3300,2225,1)
(3034,1844,1)
(1031,1680,1)
(1552,4567,1)
(3277,3231,1)
(2720,3052,1)
(670,1396,1)
(823,4201,1)
(1430,817,1)
(1385,4598,1)
(2326,5093,1)
(5385,973,1)
(2657,4035,1)
(986,412,1)
(2270,1706,1)
(4663,1826,1)
(3979,4731,1)
(3979,4894,1)
(1034,500,1)
(1405,928,1)
(1701,627,1)
(5433,4738,1)
(4883,2534,1)
(5073,627,1)
(852,3079,1)
(5558,2839,1)
(4415,706,1)
(3397,2244,1)
(5335,3387,1)
(4916,2017,1)
(136,5415,1)
(4807,3065,1)
(2730,5097,1)
(1093,1137,1)
(2478,108,1)
(4800,96,1)
(5630,3147,1)
(5649,1089,1)
(1518,3741,1)
(217,3319,1)
(1496,3059,1)
(4269,1844,1)
(3297,5009,1)
(5299,4853,1)
(5702,5020,1)
(5246,3499,1)
(5149,3315,1)
(3086,936,1)
(5428,5110,1)
(3551,1844,1)
(1450,1403,1)
(3123,3474,1)
(4797,20,1)
(4736,1480,1)
(2952,10,1)
(1142,1844,1)
(1912,4040,1)
(5376,3845,1)
(3762,5365,1)
(2865,816,1)
(5567,5223,1)
(5325,3635,1)
(3162,456,1)
(388,36,1)
(3142,627,1)
(4851,5059,1)
(4616,4729,1)
(1456,627,1)
(5682,2325,1)
(5653,2727,1)
(967,3242,1)
(2416,5682,1)
(100,3438,1)
(5615,5704,1)
(975,4782,1)
(4663,2255,1)
(916,627,1)
(5071,941,1)
(2211,4675,1)
(482,5727,1)
(1601,1844,1)
(155,672,1)
(1910,5059,1)
(4380,1368,1)
(2933,344,1)
(4234,1443,1)
(4900,5059,1)
(5637,1844,1)
(454,1934,1)
(2918,1775,1)
(391,3442,1)
(2321,952,1)
(1681,778,1)
(4480,2882,1)
(3816,5348,1)
(2008,1844,1)
(1438,4578,1)
(1887,384,1)
(1945,419,1)
(3563,4068,1)
(5682,1802,1)
(4632,2032,1)
(5434,5350,1)
(904,1651,1)
(3812,5691,1)
(91,799,1)
(1128,447,1)
(364,717,1)
(2969,4223,1)
(841,1606,1)
(4511,5119,1)
(1703,5055,1)
(4241,571,1)
(4417,2355,1)
(387,1947,1)
(265,4382,1)
(5690,1983,1)
(1391,2232,1)
(3064,732,1)
(3078,262,1)
(5524,3625,1)
(5682,5469,1)
(5682,1778,1)
(3643,288,1)
(4105,1601,1)
(2963,923,1)
(3293,4404,1)
(2750,1330,1)
(4333,2662,1)
(1610,3098,1)
(5202,2057,1)
(4663,4300,1)
(1186,336,1)
(4172,120,1)
(2918,4449,1)
(3757,456,1)
(2485,5653,1)
(2135,3554,1)
(324,3086,1)
(5430,5112,1)
(4752,1834,1)
(35,2213,1)
(2326,2030,1)
(682,2190,1)
(4868,3635,1)
(366,5294,1)
(5398,627,1)
(4663,3197,1)
(3733,2219,1)
(3979,1015,1)
(3540,443,1)
(5417,44,1)
(605,3453,1)
(4194,1844,1)
(2828,5743,1)
(2256,4167,1)
(37,645,1)
(2708,5639,1)
(5373,3378,1)
(3622,3966,1)
(3984,3882,1)
(3138,1438,1)
(5663,5610,1)
(815,5357,1)
(5471,2702,1)
(2593,1056,1)
(280,4801,1)
(2890,3225,1)
(1739,167,1)
(1444,2289,1)
(3345,3222,1)
(1563,4618,1)
(1395,4811,1)
(3889,1198,1)
(4346,2744,1)
(2362,4690,1)
(2054,2853,1)
(2605,2748,1)
(2951,3105,1)
(2578,3175,1)
(410,1705,1)
(894,3837,1)
(3328,4637,1)
(3328,3406,1)
(544,5693,1)
(3841,5108,1)
(4023,4092,1)
(4237,1084,1)
(3309,850,1)
(3979,732,1)
(4059,2222,1)
(2067,5246,1)
(2918,2486,1)
(3461,4681,1)
(5157,5134,1)
(449,4215,1)
(4491,1237,1)
(2809,3064,1)
(5682,1831,1)
(5334,370,1)
(4101,5162,1)
(5030,2748,1)
(3316,4040,1)
(5568,5264,1)
(2968,4388,1)
(1355,1127,1)
(4784,5075,1)
(344,243,1)
(2258,3392,1)
(4220,410,1)
(2744,3752,1)
(1949,1071,1)
(2380,2190,1)
(3668,4591,1)
(1722,1457,1)
(3781,1964,1)
(3337,3879,1)
(369,5261,1)
(361,4254,1)
(3064,816,1)
(2602,3922,1)
(5513,2939,1)
(4896,1818,1)
(2727,3816,1)
(659,1406,1)
(204,1996,1)
(624,3956,1)
(5747,425,1)
(5119,3872,1)
(4686,5162,1)
(4396,2138,1)
(2750,5012,1)
(666,1547,1)
(4258,627,1)
(1040,1414,1)
(3924,5560,1)
(5127,2435,1)
(1570,970,1)
(3607,4880,1)
(2299,4767,1)
(1401,4076,1)
(3719,426,1)
(5067,3406,1)
(5282,5059,1)
(191,2190,1)
(1375,242,1)
(3064,4300,1)
(4685,1043,1)
(4416,2879,1)
(2572,5708,1)
(5609,3427,1)
(3389,3373,1)
(2918,4916,1)
(3084,960,1)
(5226,2240,1)
(4514,5638,1)
(4900,2902,1)
(5510,2329,1)
(3174,4763,1)
(3813,5194,1)
(496,1655,1)
(5306,467,1)
(5589,1844,1)
(4852,5544,1)
(5655,834,1)
(678,5672,1)
(4663,208,1)
(3534,4856,1)
(4597,1925,1)
(3460,3391,1)
(4120,5059,1)
(2918,1230,1)
(1059,627,1)
(3979,1775,1)
(4766,2141,1)
(5064,5295,1)
(722,1844,1)
(2655,5388,1)
(2138,2211,1)
(3588,4230,1)
(2868,627,1)
(401,1557,1)
(5268,1442,1)
(3632,3389,1)
(1895,4619,1)
(3615,2336,1)
(2326,808,1)
(2313,5726,1)
(5237,2004,1)
(5524,1926,1)
(294,1215,1)
(4407,5059,1)
(398,2152,1)
(4043,1500,1)
(1008,4018,1)
(616,3402,1)
(2777,3855,1)
(2556,244,1)
(3062,3057,1)
(3027,22,1)
(1891,1844,1)
(1516,2053,1)
(5436,2034,1)
(4146,3240,1)
(334,1115,1)
(1676,545,1)
(2038,3355,1)
(4472,3171,1)
(4192,4329,1)
(5399,5055,1)
(2550,4110,1)
(1701,582,1)
(3396,2042,1)
(433,2714,1)
(4078,4692,1)
(3202,4174,1)
(2826,5155,1)
(329,4818,1)
(320,3931,1)
(3177,1574,1)
(3036,3739,1)
(497,1886,1)
(3589,2613,1)
(3794,4923,1)
(322,4336,1)
(5050,3415,1)
(3979,4412,1)
(259,3185,1)
(4095,5075,1)
(2172,1515,1)
(2406,5272,1)
(4216,3930,1)
(4796,1259,1)
(1419,3820,1)
(399,1161,1)
(2261,2037,1)
(1314,2093,1)
(2147,5411,1)
(3764,2190,1)
(1730,3940,1)
(2126,1844,1)
(1945,2873,1)
(2168,5055,1)
(284,3501,1)
(277,2698,1)
(409,5736,1)
(5668,3295,1)
(3979,2392,1)
(4323,5208,1)
(318,2251,1)
(612,4311,1)
(1394,1088,1)
(4671,1572,1)
(3965,5287,1)
(4178,2564,1)
(5470,627,1)
(2326,3273,1)
(5346,3579,1)
(157,5658,1)
(13,3857,1)
(959,2700,1)
(1056,2268,1)
(2580,349,1)
(3979,1778,1)
(2853,627,1)
(1484,3081,1)
(2930,2190,1)
(3109,3965,1)
(2759,2699,1)
(1913,1413,1)
(1759,4555,1)
(4238,2291,1)
(4719,3402,1)
(4692,5355,1)
(1809,2748,1)
(4859,3582,1)
(4154,4124,1)
(4531,4799,1)
(5400,627,1)
(5506,3584,1)
(4880,3396,1)
(273,2890,1)
(1923,4979,1)
(2358,341,1)
(3244,877,1)
(4932,2232,1)
(2246,5510,1)
(4004,4775,1)
(1206,1330,1)
(3234,2137,1)
(4411,4636,1)
(1452,4357,1)
(3884,4603,1)
(2687,4196,1)
(2762,1387,1)
(1050,4581,1)
(1744,2557,1)
(3798,4298,1)
(2930,5730,1)
(4663,2152,1)
(909,2012,1)
(533,4095,1)
(2644,4945,1)
(2477,1844,1)
(224,1844,1)
(39,1101,1)
(2328,4666,1)
(590,5277,1)
(5762,5282,1)
(5120,3406,1)
(1313,5124,1)
(3726,1574,1)
(1974,5448,1)
(1939,139,1)
(2326,281,1)
(1741,4728,1)
(3257,5517,1)
(157,627,1)
(5282,3979,1)
(2724,195,1)
(2326,816,1)
(330,5449,1)
(2242,4339,1)
(1447,4312,1)
(2872,3042,1)
(1240,4177,1)
(5753,1844,1)
(4675,3192,1)
(3155,5059,1)
(5395,4291,1)
(1153,4713,1)
(1465,5688,1)
(1683,1544,1)
(4644,4235,1)
(1235,627,1)
(3909,1473,1)
(2339,3007,1)
(3064,2406,1)
(3077,627,1)
(3386,5193,1)
(2459,1001,1)
(3509,3951,1)
(271,41,1)
(4403,3445,1)
(1827,2909,1)
(2948,5130,1)
(597,5030,1)
(5647,2279,1)
(4955,1186,1)
(4139,195,1)
(4934,329,1)
(4365,4347,1)
(3373,4482,1)
(3593,4508,1)
(146,627,1)
(2833,195,1)
(3976,1632,1)
(3428,3064,1)
(4002,5669,1)
(3387,4821,1)
(2273,1707,1)
(1399,627,1)
(3966,2043,1)
(1996,2508,1)
(2336,1784,1)
(378,4570,1)
(5206,5059,1)
(794,2108,1)
(4911,3446,1)
(3021,4646,1)
(5567,1235,1)
(4725,2141,1)
(1161,2618,1)
(3527,888,1)
(4190,1519,1)
(4663,4084,1)
(22,5059,1)
(3098,5163,1)
(2637,3463,1)
(5573,2538,1)
(4860,4420,1)
(4885,735,1)
(789,4368,1)
(2176,3355,1)
(1779,1215,1)
(2030,1783,1)
(3028,2190,1)
(5159,5059,1)
(2023,3157,1)
(3897,4472,1)
(5104,5273,1)
(2326,2317,1)
(1265,627,1)
(2489,195,1)
(858,5175,1)
(2977,581,1)
(2918,1831,1)
(5187,1368,1)
(1980,802,1)
(3113,4397,1)
(3984,3730,1)
(4663,1864,1)
(1040,2141,1)
(4068,2821,1)
(5700,856,1)
(1793,1847,1)
(3119,699,1)
(4959,1471,1)
(2066,2792,1)
(330,1203,1)
(5344,4350,1)
(3671,4657,1)
(164,2747,1)
(3478,5631,1)
(4823,4718,1)
(3667,673,1)
(4536,2137,1)
(845,1994,1)
(5682,1826,1)
(39,977,1)
(4309,5570,1)
(3979,4905,1)
(1138,4602,1)
(5555,609,1)
(3240,4399,1)
(5682,3821,1)
(20,5402,1)
(5186,5026,1)
(4399,5514,1)
(1934,2985,1)
(848,587,1)
(3693,307,1)
(4430,5,1)
(335,5593,1)
(3340,1622,1)
(716,1933,1)
(3761,1709,1)
(351,3655,1)
(3143,1844,1)
(5523,3349,1)
(728,386,1)
(2918,2255,1)
(5581,1840,1)
(2161,4028,1)
(3238,3681,1)
(5020,5692,1)
(3036,2898,1)
(4570,209,1)
(2103,4112,1)
(4230,3746,1)
(2326,1568,1)
(1266,1849,1)
(3820,2295,1)
(2621,627,1)
(1474,4529,1)
(1388,5643,1)
(2419,5237,1)
(739,3911,1)
(2256,1082,1)
(2480,5059,1)
(3693,473,1)
(4714,5059,1)
(2843,2017,1)
(1431,1763,1)
(471,1133,1)
(4754,2762,1)
(3363,4325,1)
(2916,1908,1)
(3979,3676,1)
(427,2452,1)
(5681,1844,1)
(4161,1128,1)
(4131,5700,1)
(983,2139,1)
(5682,4916,1)
(2304,5506,1)
(3734,627,1)
(282,2884,1)
(1230,1282,1)
(10,4701,1)
(3760,4639,1)
(5568,3848,1)
(5017,1565,1)
(5154,3169,1)
(2600,5568,1)
(792,3875,1)
(3979,2317,1)
(3759,3906,1)
(2198,4700,1)
(4574,2332,1)
(1905,2099,1)
(1635,5305,1)
(4163,546,1)
(5541,5680,1)
(2976,5655,1)
(212,3635,1)
(667,2376,1)
(5404,3578,1)
(606,279,1)
(3064,4632,1)
(968,544,1)
(3161,4512,1)
(3871,1489,1)
(5682,4084,1)
(345,669,1)
(4231,2190,1)
(5766,1502,1)
(3320,5059,1)
(5717,4696,1)
(2203,665,1)
(2172,879,1)
(2547,5335,1)
(4341,5059,1)
(986,1844,1)
(1706,4455,1)
(2464,5059,1)
(3679,5429,1)
(3912,4624,1)
(4792,808,1)
(755,2556,1)
(1183,345,1)
(5014,2237,1)
(3758,2356,1)
(1659,2834,1)
(1027,3636,1)
(2500,3039,1)
(521,2789,1)
(673,4488,1)
(5441,1844,1)
(1426,1231,1)
(4221,4060,1)
(2714,2948,1)
(2954,4923,1)
(1532,4988,1)
(5750,74,1)
(530,4169,1)
(3681,1183,1)
(1442,5059,1)
(823,5682,1)
(5635,1382,1)
(1892,1930,1)
(2178,2753,1)
(1225,3086,1)
(4359,2623,1)
(5720,5059,1)
(1129,4621,1)
(5369,5429,1)
(427,357,1)
(4087,1450,1)
(3173,1342,1)
(1571,2032,1)
(896,3363,1)
(1678,4362,1)
(5682,2413,1)
(83,3436,1)
(3669,1396,1)
(4066,5101,1)
(4167,5230,1)
(4746,2480,1)
(3561,166,1)
(76,2713,1)
(466,1991,1)
(2520,4924,1)
(2768,4579,1)
(3526,5059,1)
(5390,5015,1)
(1976,627,1)
(428,5424,1)
(4877,2190,1)
(3177,3204,1)
(5682,5414,1)
(5283,4469,1)
(2584,3806,1)
(2751,4108,1)
(1168,5489,1)
(5543,1443,1)
(3079,543,1)
(3919,2632,1)
(3586,355,1)
(2122,455,1)
(230,3025,1)
(1818,2652,1)
(1334,2585,1)
(3755,3678,1)
(4068,2406,1)
(1451,5007,1)
(4032,3582,1)
(2722,1760,1)
(2292,283,1)
(4783,4535,1)
(2302,705,1)
(3647,3564,1)
(2230,4896,1)
(1822,4642,1)
(2095,2271,1)
(1831,5059,1)
(4033,1574,1)
(1489,2251,1)
(2329,3055,1)
(1439,5762,1)
(1542,3640,1)
(3877,3603,1)
(5120,1101,1)
(2144,1995,1)
(3337,5116,1)
(4490,2200,1)
(1778,2482,1)
(253,2420,1)
(1148,3219,1)
(4436,4683,1)
(1926,3393,1)
(2589,5059,1)
(5745,2567,1)
(3428,2902,1)
(339,4844,1)
(5108,2474,1)
(2022,3799,1)
(636,2604,1)
(5682,2785,1)
(2326,3197,1)
(2057,5746,1)
(3555,3429,1)
(4851,1737,1)
(4147,3822,1)
(1811,1899,1)
(4170,2190,1)
(4049,68,1)
(1959,2098,1)
(3716,1608,1)
(5625,276,1)
(2259,1917,1)
(4815,627,1)
(264,2748,1)
(1664,1961,1)
(2739,5231,1)
(5242,1844,1)
(3194,3420,1)
(3508,538,1)
(4500,3514,1)
(1127,584,1)
(4286,417,1)
(3159,1678,1)
(250,1717,1)
(5748,639,1)
(4663,4249,1)
(2716,1790,1)
(5174,4126,1)
(2026,4313,1)
(2700,5059,1)
(2884,4846,1)
(4752,5494,1)
(805,2740,1)
(2343,2956,1)
(1002,1650,1)
(4769,4924,1)
(977,78,1)
(284,2259,1)
(1962,3944,1)
(394,5566,1)
(4876,1737,1)
(4048,4528,1)
(1680,1614,1)
(3012,195,1)
(4663,5115,1)
(4019,5457,1)
(5279,3702,1)
(5542,3050,1)
(4946,1761,1)
(4205,2723,1)
(1791,2190,1)
(5265,1305,1)
(3458,3303,1)
(119,5413,1)
(3103,4262,1)
(938,2912,1)
(3891,1146,1)
(2970,521,1)
(1890,791,1)
(1358,1844,1)
(3064,2325,1)
(496,2773,1)
(5650,2521,1)
(3173,919,1)
(3186,1587,1)
(1523,4954,1)
(2567,1059,1)
(4766,627,1)
(2011,402,1)
(1933,5113,1)
(4003,2772,1)
(3253,3770,1)
(5270,1844,1)
(5384,2426,1)
(1853,1381,1)
(594,1619,1)
(3979,3707,1)
(353,844,1)
(5280,3194,1)
(1517,5315,1)
(4865,924,1)
(5078,2673,1)
(5204,3650,1)
(2130,3119,1)
(4317,3797,1)
(1660,5705,1)
(1179,5059,1)
(48,1590,1)
(4068,4736,1)
(3070,3264,1)
(1091,4338,1)
(2596,5146,1)
(3330,2950,1)
(3457,3717,1)
(3984,2285,1)
(1725,5135,1)
(5394,881,1)
(1871,2190,1)
(4747,26,1)
(96,398,1)
(3397,2151,1)
(3700,2078,1)
(1142,4074,1)
(4621,2308,1)
(2906,5059,1)
(3530,4252,1)
(2879,1815,1)
(2835,5079,1)
(4598,3612,1)
(4663,1647,1)
(1714,3635,1)
(2810,3839,1)
(1006,254,1)
(1187,3579,1)
(920,756,1)
(2063,684,1)
(5204,5385,1)
(2552,1844,1)
(1203,5716,1)
(620,2621,1)
(2462,2068,1)
(543,4816,1)
(5071,5608,1)
(2885,5068,1)
(2582,99,1)
(1399,1298,1)
(735,627,1)
(737,904,1)
(2620,354,1)
(2523,2338,1)
(5011,4269,1)
(2172,4158,1)
(2927,2058,1)
(115,363,1)
(3974,3808,1)
(383,1744,1)
(4309,3576,1)
(5601,478,1)
(5503,2131,1)
(3140,1844,1)
(2053,1844,1)
(208,2166,1)
(4721,3418,1)
(4475,2939,1)
(4117,4850,1)
(3332,268,1)
(1420,218,1)
(284,3932,1)
(496,3965,1)
(3979,4705,1)
(2959,4564,1)
(5468,2624,1)
(1507,5694,1)
(5145,2539,1)
(3946,5218,1)
(4469,5140,1)
(536,3214,1)
(3992,2190,1)
(3299,3471,1)
(5224,3510,1)
(1884,566,1)
(2172,4206,1)
(2326,1015,1)
(14,1075,1)
(2520,5675,1)
(1413,5065,1)
(2450,5058,1)
(4352,5059,1)
(1478,3130,1)
(4495,1715,1)
(4325,1371,1)
(1080,1074,1)
(319,2878,1)
(5468,971,1)
(2260,307,1)
(378,3510,1)
(4748,2195,1)
(4618,2008,1)
(2316,4172,1)
(5494,5738,1)
(5123,5515,1)
(3230,3421,1)
(701,2917,1)
(672,5059,1)
(396,1762,1)
(385,627,1)
(2907,301,1)
(3668,5697,1)
(5431,627,1)
(926,3191,1)
(1656,4708,1)
(2889,1981,1)
(1516,1187,1)
(5406,4532,1)
(3379,3500,1)
(1228,5585,1)
(541,1844,1)
(2457,497,1)
(4084,3220,1)
(1429,716,1)
(5370,4141,1)
(4776,4678,1)
(4726,714,1)
(1600,4674,1)
(4998,2489,1)
(2525,2565,1)
(923,627,1)
(3064,3646,1)
(5449,2992,1)
(5125,5754,1)
(3270,572,1)
(5475,2061,1)
(3278,4914,1)
(2395,4373,1)
(4854,5520,1)
(4571,5209,1)
(1652,2619,1)
(874,437,1)
(307,246,1)
(3668,2918,1)
(1350,1884,1)
(4663,2758,1)
(794,3519,1)
(2999,2625,1)
(2858,3630,1)
(3885,3681,1)
(2792,2478,1)
(5708,1119,1)
(1535,2995,1)
(3116,946,1)
(4898,4479,1)
(4361,732,1)
(4090,4129,1)
(4175,958,1)
(666,2190,1)
(3822,4391,1)
(2520,3417,1)
(353,5059,1)
(4588,449,1)
(3956,1844,1)
(5691,5095,1)
(4056,1737,1)
(2677,1136,1)
(5725,2916,1)
(5148,658,1)
(4039,2346,1)
(3815,3617,1)
(170,3441,1)
(5682,4894,1)
(59,869,1)
(2914,5059,1)
(5392,4791,1)
(2595,627,1)
(622,627,1)
(3056,2139,1)
(43,119,1)
(2326,3114,1)
(2789,159,1)
(4352,2957,1)
(5686,3043,1)
(5171,5059,1)
(5477,4372,1)
(292,3607,1)
(2825,3684,1)
(2557,3491,1)
(271,1824,1)
(1510,5546,1)
(2945,3981,1)
(1435,5541,1)
(1824,1844,1)
(4833,4797,1)
(3485,521,1)
(5067,795,1)
(4629,3273,1)
(5730,2178,1)
(5397,2190,1)
(5286,65,1)
(302,5441,1)
(3252,3299,1)
(4976,2298,1)
(3581,1907,1)
(3440,5380,1)
(2631,1265,1)
(1559,5429,1)
(4663,3150,1)
(570,3793,1)
(3405,4849,1)
(2543,1537,1)
(338,403,1)
(4015,5741,1)
(5060,2255,1)
(5122,3257,1)
(4138,150,1)
(792,1284,1)
(3979,1568,1)
(5467,2968,1)
(3979,1031,1)
(1806,4621,1)
(5092,4289,1)
(3348,4393,1)
(4663,5093,1)
(2582,1671,1)
(1501,4381,1)
(1994,391,1)
(4138,2901,1)
(5515,4671,1)
(463,4357,1)
(2059,3051,1)
(1930,3871,1)
(4464,1113,1)
(3584,756,1)
(5045,5132,1)
(3766,2704,1)
(2113,4999,1)
(609,3171,1)
(3493,2659,1)
(839,745,1)
(4910,2500,1)
(4289,1415,1)
(1106,1683,1)
(1742,4058,1)
(5122,4886,1)
(5622,5516,1)
(3397,4714,1)
(3760,627,1)
(5706,562,1)
(1096,1227,1)
(2938,1892,1)
(269,3637,1)
(2407,148,1)
(4462,462,1)
(5155,4234,1)
(955,233,1)
(5067,370,1)
(3360,2424,1)
(3557,1120,1)
(5489,5022,1)
(1732,5449,1)
(3740,4860,1)
(1045,3024,1)
(3658,5075,1)
(5629,3021,1)
(1409,4375,1)
(2307,1844,1)
(4862,2666,1)
(818,2750,1)
(1925,1486,1)
(3328,4991,1)
(1183,3508,1)
(3488,5282,1)
(2971,5642,1)
(3867,3213,1)
(1121,5712,1)
(3039,2236,1)
(2527,1090,1)
(4106,453,1)
(5415,2109,1)
(2316,2902,1)
(4528,17,1)
(5067,1917,1)
(2309,1980,1)
(5393,1000,1)
(4358,2641,1)
(563,4428,1)
(5735,3788,1)
(2689,649,1)
(4176,627,1)
(1585,5344,1)
(1381,2366,1)
(2107,63,1)
(860,3582,1)
(747,3112,1)
(4445,4550,1)
(2417,4477,1)
(1137,667,1)
(5194,161,1)
(5568,438,1)
(2458,4764,1)
(12,4556,1)
(3033,2512,1)
(557,4293,1)
(1732,1203,1)
(3351,3510,1)
(1555,5063,1)
(5659,3826,1)
(5061,5075,1)
(5621,11,1)
(4768,4152,1)
(5207,1574,1)
(2557,2190,1)
(4683,410,1)
(1654,2101,1)
(5319,3393,1)
(2429,2190,1)
(1134,3682,1)
(2303,4130,1)
(982,4017,1)
(938,3982,1)
(4500,1997,1)
(777,3208,1)
(2815,93,1)
(5224,4721,1)
(2788,991,1)
(3929,4422,1)
(2717,2954,1)
(1124,5346,1)
(3453,2163,1)
(2155,3290,1)
(2872,1472,1)
(1433,195,1)
(2573,2466,1)
(2318,1900,1)
(1455,303,1)
(682,1594,1)
(4339,627,1)
(1371,4211,1)
(4607,864,1)
(4812,5492,1)
(2549,13,1)
(5668,5059,1)
(2520,5080,1)
(3255,627,1)
(3656,4061,1)
(3506,2387,1)
(4280,2032,1)
(3256,4980,1)
(713,4621,1)
(4525,3606,1)
(1400,4391,1)
(4130,2190,1)
(4120,4919,1)
(3372,2164,1)
(2770,4631,1)
(393,1016,1)
(4861,2817,1)
(127,4202,1)
(4244,2190,1)
(4853,3790,1)
(5743,381,1)
(5484,1134,1)
(619,3223,1)
(4220,583,1)
(1749,5312,1)
(4181,3394,1)
(897,100,1)
(3468,2646,1)
(1087,4102,1)
(4663,2997,1)
(4848,951,1)
(2918,2152,1)
(4947,3204,1)
(5656,5075,1)
(47,1546,1)
(5254,5417,1)
(583,2708,1)
(3172,1148,1)
(1630,103,1)
(3171,2350,1)
(4675,4906,1)
(4789,4251,1)
(5317,1844,1)
(939,5283,1)
(3121,590,1)
(2483,2086,1)
(3022,4992,1)
(3307,2848,1)
(2016,1742,1)
(3222,784,1)
(1668,2885,1)
(2371,930,1)
(4946,4882,1)
(5633,5053,1)
(4176,5666,1)
(223,4441,1)
(5258,3168,1)
(1987,5540,1)
(2314,2190,1)
(4824,627,1)
(1879,1891,1)
(4296,3181,1)
(3090,4940,1)
(2914,3062,1)
(403,3953,1)
(1530,396,1)
(2471,2530,1)
(3117,1543,1)
(125,5502,1)
(2131,3652,1)
(5025,5589,1)
(380,2407,1)
(792,958,1)
(4302,2075,1)
(2682,1367,1)
(1169,324,1)
(3337,4105,1)
(505,529,1)
(5334,331,1)
(562,1757,1)
(3174,2830,1)
(1815,748,1)
(1085,12,1)
(1537,1132,1)
(120,1342,1)
(4795,3431,1)
(318,104,1)
(4561,1825,1)
(3471,3196,1)
(5654,3536,1)
(542,2083,1)
(4308,405,1)
(3482,4328,1)
(2848,5386,1)
(2148,2190,1)
(5122,2600,1)
(2500,3406,1)
(892,4163,1)
(3446,5318,1)
(22,4679,1)
(468,2421,1)
(2500,1663,1)
(4726,14,1)
(2390,4090,1)
(4138,296,1)
(5406,2232,1)
(2776,361,1)
(5366,2430,1)
(2790,4574,1)
(3473,2756,1)
(3666,4624,1)
(838,3256,1)
(1407,1793,1)
(3743,1003,1)
(4027,627,1)
(5739,4460,1)
(2508,5059,1)
(1925,1083,1)
(2327,1672,1)
(4457,627,1)
(2153,1974,1)
(577,3792,1)
(2918,1802,1)
(3591,2450,1)
(606,4391,1)
(1944,3913,1)
(4214,3184,1)
(5063,1333,1)
(3456,3716,1)
(5102,1737,1)
(4675,1893,1)
(2922,2041,1)
(3888,4516,1)
(2877,1752,1)
(1716,1685,1)
(1724,2717,1)
(2065,297,1)
(726,3418,1)
(5301,2780,1)
(5414,366,1)
(2621,998,1)
(1393,962,1)
(2416,2902,1)
(281,379,1)
(5456,627,1)
(2006,3234,1)
(3659,3840,1)
(1331,4899,1)
(4659,4484,1)
(1917,414,1)
(370,2459,1)
(599,1309,1)
(2639,1513,1)
(2068,3751,1)
(1236,2111,1)
(1786,3448,1)
(1707,5238,1)
(734,2190,1)
(2480,2351,1)
(4362,3843,1)
(4886,2275,1)
(788,1629,1)
(1642,5677,1)
(1346,4091,1)
(2158,2838,1)
(1937,5696,1)
(4000,1623,1)
(5217,5445,1)
(881,3998,1)
(5642,1844,1)
(1015,2563,1)
(2500,370,1)
(2063,5248,1)
(5297,2872,1)
(4703,4296,1)
(3687,3924,1)
(2999,3077,1)
(5614,3635,1)
(1564,5448,1)
(1288,3269,1)
(5348,4594,1)
(826,2877,1)
(5421,798,1)
(166,3093,1)
(5166,4407,1)
(4751,627,1)
(3311,3807,1)
(804,3836,1)
(3979,2030,1)
(3817,4146,1)
(4874,1935,1)
(2939,5335,1)
(553,1589,1)
(3399,1844,1)
(4095,4625,1)
(1452,2624,1)
(3874,4806,1)
(5731,3255,1)
(1164,3073,1)
(2397,2361,1)
(2655,1465,1)
(1268,2073,1)
(3809,1011,1)
(5576,4609,1)
(259,3952,1)
(1088,3021,1)
(355,1844,1)
(5696,4928,1)
(2861,5508,1)
(4113,703,1)
(2832,3399,1)
(2328,4621,1)
(2714,4068,1)
(3254,3075,1)
(4228,3321,1)
(4645,2277,1)
(4396,4052,1)
(2519,5583,1)
(875,2831,1)
(5692,4308,1)
(1146,1048,1)
(2454,5250,1)
(2514,1573,1)
(1922,3010,1)
(3005,627,1)
(2899,4789,1)
(4347,910,1)
(1090,5300,1)
(3979,5036,1)
(769,426,1)
(3204,2397,1)
(4407,5571,1)
(3337,3921,1)
(4705,94,1)
(4343,3431,1)
(5132,1816,1)
(5189,123,1)
(4937,5206,1)
(631,4382,1)
(4471,5588,1)
(3044,4279,1)
(593,193,1)
(3128,3449,1)
(118,1105,1)
(2918,1910,1)
(4334,3846,1)
(5682,1456,1)
(2918,601,1)
(5332,4216,1)
(128,1459,1)
(5384,5287,1)
(2847,3343,1)
(4902,389,1)
(517,382,1)
(3683,3909,1)
(4971,1371,1)
(4122,1844,1)
(2326,5099,1)
(1387,1422,1)
(2676,5531,1)
(2997,4335,1)
(1014,1844,1)
(3239,3636,1)
(694,4453,1)
(267,5059,1)
(3137,2458,1)
(4836,2954,1)
(501,5059,1)
(1073,1532,1)
(1453,3907,1)
(4187,2182,1)
(1450,3064,1)
(4663,5099,1)
(5660,4198,1)
(1075,1737,1)
(1508,2187,1)
(4817,616,1)
(3290,2031,1)
(3965,1474,1)
(5282,5682,1)
(3088,2678,1)
(44,5419,1)
(5638,3335,1)
(3831,3377,1)
(427,87,1)
(98,4227,1)
(2247,4718,1)
(4564,5296,1)
(5293,370,1)
(2413,5059,1)
(484,3382,1)
(5334,3406,1)
(4542,4018,1)
(534,334,1)
(3860,3177,1)
(3119,3888,1)
(4657,1063,1)
(4475,3707,1)
(4327,4963,1)
(3064,4736,1)
(3979,2406,1)
(2918,732,1)
(4535,3705,1)
(2326,2480,1)
(2116,844,1)
(5370,2803,1)
(3979,1864,1)
(765,1800,1)
(3154,1715,1)
(888,3526,1)
(4072,772,1)
(384,3113,1)
(5150,102,1)
(3191,27,1)
(2837,3687,1)
(2051,4784,1)
(1716,195,1)
(2315,4456,1)
(4939,104,1)
(1815,627,1)
(632,4589,1)
(2078,2816,1)
(3052,368,1)
(4619,884,1)
(4389,1677,1)
(4977,4958,1)
(5570,1805,1)
(4546,2190,1)
(4926,3582,1)
(775,4231,1)
(2926,1339,1)
(1994,5535,1)
(4947,5287,1)
(5495,665,1)
(3118,2135,1)
(3064,3923,1)
(5400,664,1)
(198,5059,1)
(1286,2554,1)
(5347,3532,1)
(1526,1844,1)
(2099,2790,1)
(3623,4766,1)
(5193,2472,1)
(2359,643,1)
(5715,296,1)
(2437,3320,1)
(2279,4182,1)
(4666,1158,1)
(719,365,1)
(1562,3582,1)
(2918,1015,1)
(1737,1317,1)
(3984,1492,1)
(1547,5092,1)
(2039,4396,1)
(5054,2194,1)
(1351,3979,1)
(3247,823,1)
(2523,388,1)
(2507,3056,1)
(1733,177,1)
(5122,5125,1)
(5374,3539,1)
(3854,151,1)
(5501,1516,1)
(5610,5059,1)
(2918,5093,1)
(2698,4737,1)
(4022,195,1)
(2887,2825,1)
(750,1222,1)
(417,5033,1)
(1166,4929,1)
(2911,2907,1)
(1737,1844,1)
(3847,200,1)
(1968,644,1)
(950,627,1)
(2285,3699,1)
(524,212,1)
(1842,937,1)
(792,3597,1)
(5534,4795,1)
(1583,2092,1)
(802,3313,1)
(4919,2823,1)
(3668,1972,1)
(254,4546,1)
(3188,2280,1)
(817,2595,1)
(1212,2416,1)
(3197,1104,1)
(5221,1367,1)
(792,2040,1)
(5683,3440,1)
(4663,1752,1)
(3182,3360,1)
(5613,3229,1)
(3500,2049,1)
(3629,4189,1)
(3005,2319,1)
(2294,1820,1)
(3027,4294,1)
(3190,2941,1)
(2607,3644,1)
(2922,627,1)
(1012,1545,1)
(1735,5174,1)
(2898,2898,1)
(692,5017,1)
(5067,3417,1)
(1573,5003,1)
(5645,751,1)
(3763,2072,1)
(410,1396,1)
(4954,4960,1)
(5458,1844,1)
(693,4726,1)
(215,967,1)
(5556,208,1)
(4275,2614,1)
(1263,3818,1)
(2736,2284,1)
(2696,1163,1)
(1241,859,1)
(4656,4991,1)
(5516,2190,1)
(499,3540,1)
(2032,3193,1)
(1111,1844,1)
(5163,1399,1)
(313,1901,1)
(931,2022,1)
(1116,3662,1)
(3662,3103,1)
(4610,5425,1)
(4327,1406,1)
(4663,1831,1)
(1761,2173,1)
(5557,4867,1)
(663,3158,1)
(4760,1187,1)
(2883,1357,1)
(2447,5497,1)
(1684,4213,1)
(2240,1940,1)
(3399,1896,1)
(134,2214,1)
(4660,1129,1)
(2834,4643,1)
(3879,3019,1)
(3563,5059,1)
(4519,4444,1)
(1494,2841,1)
(4977,1844,1)
(3877,4764,1)
(790,1395,1)
(215,2002,1)
(3302,3368,1)
(5148,2324,1)
(4458,1819,1)
(4152,4539,1)
(478,19,1)
(5324,369,1)
(3320,4142,1)
(2463,2395,1)
(5065,3474,1)
(851,4966,1)
(4454,4041,1)
(2293,907,1)
(3754,605,1)
(1316,106,1)
(5703,1967,1)
(1618,3428,1)
(1061,2300,1)
(3357,1387,1)
(2326,3676,1)
(1490,1080,1)
(2647,2686,1)
(1379,5059,1)
(40,3757,1)
(4843,5078,1)
(5250,4363,1)
(1084,3610,1)
(1562,195,1)
(2777,4636,1)
(725,5059,1)
(3897,422,1)
(3657,1844,1)
(5632,2846,1)
(2265,5055,1)
(4727,1072,1)
(5682,4807,1)
(2701,3719,1)
(2604,2893,1)
(5582,1734,1)
(648,1527,1)
(3523,5235,1)
(191,337,1)
(1687,1406,1)
(798,1052,1)
(4515,5196,1)
(3979,4300,1)
(3553,273,1)
(3148,5432,1)
(3935,1245,1)
(4668,4305,1)
(686,4974,1)
(5239,4134,1)
(5680,4487,1)
(4271,691,1)
(3477,3251,1)
(579,5328,1)
(1893,2906,1)
(4182,3265,1)
(5177,1932,1)
(2326,5036,1)
(1357,2338,1)
(3633,2500,1)
(4783,5561,1)
(5007,1463,1)
(3273,627,1)
(746,4324,1)
(2814,3505,1)
(3429,4307,1)
(157,4070,1)
(2520,1101,1)
(430,2614,1)
(832,4232,1)
(2918,4300,1)
(4211,3805,1)
(193,955,1)
(4764,512,1)
(329,110,1)
(3949,1844,1)
(2213,2104,1)
(1395,627,1)
(932,5394,1)
(4442,5532,1)
(2326,4894,1)
(2711,5442,1)
(4806,1145,1)
(4973,2596,1)
(4751,5253,1)
(5546,4984,1)
(4587,3600,1)
(2090,851,1)
(751,3602,1)
(549,3817,1)
(1441,1844,1)
(1951,2665,1)
(352,1844,1)
(4445,490,1)
(3054,171,1)
(3454,3920,1)
(3064,1015,1)
(4221,2190,1)
(911,627,1)
(5693,112,1)
(5682,3197,1)
(3325,58,1)
(1686,1478,1)
(4377,5298,1)
(2965,2987,1)
(2000,4042,1)
(5618,593,1)
(159,627,1)
(4401,1350,1)
(1207,4473,1)
(1443,2228,1)
(2382,2986,1)
(3541,1437,1)
(4701,767,1)
(2059,741,1)
(2884,5059,1)
(1673,4273,1)
(1106,1844,1)
(3468,556,1)
(3341,5371,1)
(3341,5059,1)
(5568,2027,1)
(1322,2159,1)
(1978,4560,1)
(2499,3612,1)
(5568,4641,1)
(2714,3064,1)
(1297,2614,1)
(5192,5213,1)
(5318,4318,1)
(1459,270,1)
(1918,711,1)
(3865,3043,1)
(5342,5205,1)
(3522,4576,1)
(3773,1184,1)
(4473,5059,1)
(1145,3310,1)
(1914,4979,1)
(295,5055,1)
(4663,2480,1)
(1568,2072,1)
(4021,3870,1)
(2802,2663,1)
(3064,1775,1)
(3990,380,1)
(5230,1194,1)
(3393,1736,1)
(5641,4537,1)
(103,1737,1)
(172,1717,1)
(3524,234,1)
(5167,814,1)
(1275,1702,1)
(694,1844,1)
(5334,1575,1)
(143,5244,1)
(5682,4911,1)
(4067,2847,1)
(3846,4747,1)
(1171,882,1)
(2051,2273,1)
(3832,1737,1)
(2356,2321,1)
(460,646,1)
(147,3029,1)
(5146,4805,1)
(1058,1912,1)
(4050,109,1)
(4794,5682,1)
(44,3452,1)
(5223,1235,1)
(4208,1111,1)
(4788,3176,1)
(1995,5572,1)
(4687,3540,1)
(5327,666,1)
(3434,3318,1)
(2244,1808,1)
(239,4719,1)
(3868,5160,1)
(2703,3865,1)
(4663,1910,1)
(4377,2923,1)
(2249,3595,1)
(5050,627,1)
(234,274,1)
(4158,4918,1)
(2069,2085,1)
(2713,5659,1)
(5610,844,1)
(4868,3852,1)
(2486,5090,1)
(5331,4826,1)
(1003,2030,1)
(215,797,1)
(368,4565,1)
(2827,4790,1)
(5067,5149,1)
(3169,1335,1)
(400,1979,1)
(3064,3093,1)
(4787,5410,1)
(5665,2701,1)
(4409,339,1)
(149,3887,1)
(4110,2190,1)
(4244,4402,1)
(2349,4423,1)
(52,1721,1)
(1163,5479,1)
(4844,121,1)
(2721,4005,1)
(2729,5744,1)
(4663,1778,1)
(4518,5483,1)
(4485,4802,1)
(3064,4848,1)
(3965,3204,1)
(813,3838,1)
(150,374,1)
(3554,3150,1)
(1553,3560,1)
(1632,2185,1)
(457,5120,1)
(2512,4338,1)
(95,2040,1)
(5445,223,1)
(4544,3280,1)
(3682,3461,1)
(2618,2904,1)
(5759,4365,1)
(222,115,1)
(5113,42,1)
(180,5195,1)
(211,31,1)
(4576,1482,1)
(1689,3160,1)
(116,2050,1)
(1044,1139,1)
(2368,4507,1)
(3064,4102,1)
(472,61,1)
(2168,3635,1)
(3566,2976,1)
(887,85,1)
(5406,3610,1)
(1752,3082,1)
(1663,4342,1)
(3159,2190,1)
(834,2059,1)
(3294,2546,1)
(2793,181,1)
(972,1144,1)
(3490,1377,1)
(3906,4519,1)
(255,5115,1)
(1403,2820,1)
(1141,3635,1)
(1946,2278,1)
(5682,565,1)
(3205,2334,1)
(5709,627,1)
(5399,517,1)
(1347,3138,1)
(1810,1704,1)
(3111,765,1)
(5213,5204,1)
(3273,2206,1)
(5256,4008,1)
(2402,3531,1)
(2700,4931,1)
(1639,1695,1)
(5009,170,1)
(5048,2829,1)
(808,5059,1)
(1936,2144,1)
(3361,950,1)
(5051,3927,1)
(4258,1470,1)
(3229,5059,1)
(2169,3117,1)
(4207,3734,1)
(1778,627,1)
(1265,4852,1)
(3579,330,1)
(3827,2016,1)
(2317,4165,1)
(29,1215,1)
(203,397,1)
(5185,3778,1)
(2009,3821,1)
(2438,4751,1)
(176,2456,1)
(2021,4000,1)
(2772,1824,1)
(5636,2082,1)
(2918,3114,1)
(509,853,1)
(2312,3385,1)
(5729,520,1)
(2255,3063,1)
(3145,2292,1)
(3696,5398,1)
(1110,641,1)
(4232,1504,1)
(3164,2707,1)
(967,291,1)
(207,4173,1)
(5334,5675,1)
(561,3088,1)
(5117,1092,1)
(2471,1166,1)
(2826,1443,1)
(4543,4742,1)
(4909,601,1)
(4209,4085,1)
(1488,2444,1)
(4080,3567,1)
(3472,1949,1)
(2912,3982,1)
(1098,1844,1)
(2214,627,1)
(194,5000,1)
(2529,2902,1)
(3483,217,1)
(2046,1580,1)
(3846,1844,1)
(3283,216,1)
(25,3579,1)
(5379,957,1)
(2659,1433,1)
(1368,3823,1)
(4395,215,1)
(4018,3582,1)
(4273,1505,1)
(1018,4046,1)
(1958,5397,1)
(3329,3578,1)
(2520,5149,1)
(4725,627,1)
(4357,136,1)
(49,5133,1)
(3120,2974,1)
(103,2705,1)
(766,4314,1)
(2227,1844,1)
(343,1006,1)
(4680,1844,1)
(4663,1031,1)
(5720,4263,1)
(5061,2032,1)
(3408,3188,1)
(2081,4667,1)
(911,5081,1)
(4691,1050,1)
(4059,3776,1)
(3979,2480,1)
(5430,3685,1)
(463,2624,1)
(2918,4731,1)
(2613,372,1)
(1352,4222,1)
(5420,627,1)
(2280,219,1)
(2369,2753,1)
(3172,2809,1)
(3032,2089,1)
(2168,822,1)
(4206,592,1)
(1012,3393,1)
(123,3908,1)
(1259,618,1)
(2578,756,1)
(2728,2898,1)
(3520,3888,1)
(1795,2730,1)
(295,257,1)
(523,4341,1)
(2172,5564,1)
(318,3418,1)
(1244,1386,1)
(4283,5202,1)
(4689,2141,1)
(5067,5675,1)
(3778,1550,1)
(1288,817,1)
(474,3271,1)
(2508,2802,1)
(3839,5617,1)
(99,3033,1)
(4068,5414,1)
(4674,1910,1)
(3902,2483,1)
(4774,4221,1)
(3019,5062,1)
(1177,2557,1)
(4641,2463,1)
(2326,2406,1)
(537,52,1)
(4103,2090,1)
(1891,627,1)
(709,1687,1)
(3344,2516,1)
(5372,4226,1)
(3064,4731,1)
(4396,4785,1)
(1175,4504,1)
(3299,1844,1)
(648,352,1)
(5682,1910,1)
(2918,4894,1)
(1412,2362,1)
(5752,777,1)
(4823,2033,1)
(5211,5618,1)
(722,3496,1)
(1466,805,1)
(284,5649,1)
(5726,2345,1)
(2143,5117,1)
(4083,5644,1)
(4753,1730,1)
(46,5226,1)
(1152,280,1)
(3994,2341,1)
(4444,4794,1)
(1440,769,1)
(3383,5461,1)
(2888,1100,1)
(4500,226,1)
(5102,804,1)
(3268,3173,1)
(2554,3901,1)
(5207,3506,1)
(575,1597,1)
(591,1844,1)
(2422,4238,1)
(4527,5500,1)
(1101,5280,1)
(4673,860,1)
(2823,4925,1)
(1732,722,1)
(942,5059,1)
(4484,2874,1)
(3400,5105,1)
(4752,3409,1)
(3064,4628,1)
(3064,3707,1)
(5174,5059,1)
(5682,3114,1)
(4984,5650,1)
(3952,1224,1)
(4104,627,1)
(1519,2855,1)
(218,1785,1)
(4250,2520,1)
(3662,5287,1)
(5736,2190,1)
(746,3993,1)
(2051,5075,1)
(3178,3854,1)
(514,627,1)
(4663,2392,1)
(5707,3583,1)
(5380,4246,1)
(742,627,1)
(1437,610,1)
(4341,1724,1)
(1030,2651,1)
(3792,3173,1)
(880,627,1)
(5400,3816,1)
(1379,627,1)
(3502,3856,1)
(1802,4858,1)
(1622,1945,1)
(126,3577,1)
(625,2633,1)
(5488,627,1)
(4309,813,1)
(423,3311,1)
(3248,1132,1)
(3518,4053,1)
(1841,4753,1)
(3797,627,1)
(3059,4021,1)
(5051,2190,1)
(5262,4665,1)
(4935,4050,1)
(1267,4310,1)
(1702,1318,1)
(4620,5074,1)
(4067,627,1)
(2588,1944,1)
(4437,933,1)
(5218,175,1)
(1323,376,1)
(1553,1671,1)
(5384,4021,1)
(5450,911,1)
(4551,1487,1)
(3139,2683,1)
(3905,5745,1)
(2918,2821,1)
(4,4637,1)
(2422,2291,1)
(41,627,1)
(3233,3633,1)
(1052,541,1)
(2982,3841,1)
(2065,1844,1)
(4168,810,1)
(270,1398,1)
(1416,5329,1)
(0,2617,1)
(3370,627,1)
(4663,93,1)
(3658,3747,1)
(5682,3150,1)
(1634,1522,1)
(2164,5207,1)
(4143,651,1)
(4148,5349,1)
(1589,1272,1)
(1326,5059,1)
(4983,1925,1)
(4192,5059,1)
(422,5555,1)
(2470,2637,1)
(1367,1883,1)
(2829,1144,1)
(4663,2540,1)
(3131,1495,1)
(4054,731,1)
(2763,5188,1)
(4394,1844,1)
(5075,1754,1)
(1491,1866,1)
(5593,966,1)
(450,4774,1)
(1947,3166,1)
(651,2854,1)
(157,4639,1)
(4766,1772,1)
(169,1844,1)
(2918,4084,1)
(1600,2190,1)
(4553,2842,1)
(2490,1372,1)
(3533,3635,1)
(4860,195,1)
(1273,5334,1)
(5086,2681,1)
(65,889,1)
(4907,81,1)
(2431,1149,1)
(1170,461,1)
(1578,5434,1)
(1028,5711,1)
(4583,4280,1)
(3795,5534,1)
(5688,5212,1)
(3337,4500,1)
(4279,3040,1)
(728,1844,1)
(373,717,1)
(2486,4582,1)
(1434,3459,1)
(1144,5179,1)
(534,2216,1)
(136,2045,1)
(3064,2821,1)
(386,2757,1)
(1662,3132,1)
(1610,2190,1)
(4856,2731,1)
(2852,2113,1)
(2756,4162,1)
(3436,1822,1)
(1595,2913,1)
(966,3186,1)
(3466,1844,1)
(4353,5235,1)
(2166,2175,1)
(534,3552,1)
(445,5055,1)
(4636,793,1)
(2108,3582,1)
(1888,1466,1)
(5207,2288,1)
(3628,4186,1)
(1218,4383,1)
(2559,2828,1)
(4217,2377,1)
(1442,2281,1)
(4815,1918,1)
(2726,1080,1)
(2809,3979,1)
(5424,2801,1)
(2463,1844,1)
(1727,1573,1)
(2140,378,1)
(5361,4066,1)
(3690,5576,1)
(2203,941,1)
(1315,2423,1)
(4226,4626,1)
(44,2969,1)
(3690,2614,1)
(1104,1929,1)
(5048,4621,1)
(5087,3317,1)
(4693,2261,1)
(643,3579,1)
(5492,1670,1)
(2225,195,1)
(2947,4086,1)
(2820,5392,1)
(4457,1844,1)
(2733,2210,1)
(587,2791,1)
(5070,195,1)
(535,4559,1)
(3826,158,1)
(2544,4629,1)
(2564,931,1)
(4506,2936,1)
(1572,1355,1)
(4779,1361,1)
(516,165,1)
(1429,5113,1)
(3939,5122,1)
(3063,5636,1)
(5159,1506,1)
(1835,2978,1)
(684,1844,1)
(209,5269,1)
(2214,2517,1)
(2505,2905,1)
(1414,4802,1)
(904,3279,1)
(4412,3868,1)
(2377,2326,1)
(5196,76,1)
(1119,2256,1)
(2661,3591,1)
(4073,4045,1)
(3898,5262,1)
(4301,5041,1)
(1839,2214,1)
(2529,5682,1)
(3979,4449,1)
(3909,2358,1)
(792,1629,1)
(5257,3509,1)
(3469,230,1)
(3844,4115,1)
(2044,4016,1)
(2939,3952,1)
(5719,1715,1)
(1786,1844,1)
(4737,91,1)
(3135,1131,1)
(3644,3861,1)
(5261,2203,1)
(2813,4829,1)
(5370,1972,1)
(1038,5683,1)
(4339,1312,1)
(3560,1885,1)
(5209,3060,1)
(368,1844,1)
(792,3422,1)
(4663,4916,1)
(915,5302,1)
(2241,4307,1)
(296,5372,1)
(3076,2792,1)
(1601,1370,1)
(44,5077,1)
(3397,47,1)
(3211,1844,1)
(819,2589,1)
(898,2578,1)
(5548,433,1)
(1139,1531,1)
(152,1128,1)
(4821,259,1)
(2498,1844,1)
(5579,1797,1)
(1535,3187,1)
(3328,1663,1)
(4102,2671,1)
(2918,4848,1)
(2909,1032,1)
(1157,627,1)
(318,3369,1)
(628,5469,1)
(2586,1358,1)
(359,2486,1)
(5682,4412,1)
(1979,880,1)
(4794,4554,1)
(1848,5484,1)
(2612,1676,1)
(3748,1692,1)
(4897,1426,1)
(689,207,1)
(4578,627,1)
(4381,2964,1)
(3064,3669,1)
(3122,784,1)
(4068,732,1)
(4134,2455,1)
(4814,3187,1)
(3581,3241,1)
(271,1844,1)
(1079,627,1)
(2151,1844,1)
(1130,5059,1)
(676,2778,1)
(4663,754,1)
(4787,5682,1)
(4846,3076,1)
(4482,1971,1)
(376,5147,1)
(2743,3618,1)
(1178,3476,1)
(2670,2167,1)
(5459,5737,1)
(5684,3340,1)
(5248,4478,1)
(3364,1642,1)
(1558,1511,1)
(2152,1420,1)
(1981,4048,1)
(3260,1888,1)
(3376,2271,1)
(4663,1802,1)
(4968,4965,1)
(4663,2402,1)
(1370,1844,1)
(3919,1632,1)
(2064,1958,1)
(4402,2549,1)
(399,2538,1)
(5539,5059,1)
(3558,5016,1)
(4455,3217,1)
(4428,3668,1)
(943,3635,1)
(689,627,1)
(3763,4316,1)
(3301,4588,1)
(2284,4553,1)
(4255,2437,1)
(4463,2003,1)
(5462,3045,1)
(2641,3278,1)
(2616,195,1)
(1034,692,1)
(3064,1230,1)
(2469,1708,1)
(4823,5689,1)
(4975,251,1)
(2256,4621,1)
(1702,1630,1)
(4673,2433,1)
(5078,442,1)
(1081,883,1)
(2171,2190,1)
(2692,118,1)
(587,3596,1)
(1486,2833,1)
(4859,3803,1)
(2839,1844,1)
(477,1717,1)
(2058,1905,1)
(1208,1989,1)
(3042,5528,1)
(5649,4761,1)
(4499,4577,1)
(4118,2674,1)
(699,5045,1)
(3984,1012,1)
(2589,1493,1)
(3993,2105,1)
(3708,496,1)
(793,104,1)
(3167,4917,1)
(4213,627,1)
(988,1042,1)
(3880,708,1)
(4688,4751,1)
(3508,627,1)
(4980,1638,1)
(3371,2794,1)
(1767,5136,1)
(1986,2052,1)
(3407,124,1)
(3207,2929,1)
(5156,4098,1)
(4271,2590,1)
(1042,627,1)
(5070,3582,1)
(4068,2997,1)
(3478,627,1)
(2084,3709,1)
(3979,4911,1)
(227,1621,1)
(4486,3155,1)
(2172,3083,1)
(4512,3393,1)
(3451,4511,1)
(4727,1844,1)
(650,3430,1)
(1503,4352,1)
(2642,1125,1)
(3493,1433,1)
(5370,2326,1)
(1041,1844,1)
(629,728,1)
(2073,4004,1)
(2520,1663,1)
(164,1530,1)
(305,4968,1)
(78,457,1)
(3064,4084,1)
(414,360,1)
(4297,4497,1)
(3746,4546,1)
(4479,1719,1)
(4331,1844,1)
(3918,2816,1)
(4364,5409,1)
(5614,5055,1)
(2326,1647,1)
(3064,4249,1)
(2435,4419,1)
(5370,5493,1)
(1340,3774,1)
(2787,5059,1)
(2326,2413,1)
(1329,619,1)
(1808,2151,1)
(4202,3902,1)
(4318,1721,1)
(284,5480,1)
(2326,3923,1)
(2304,3799,1)
(2080,2474,1)
(2554,1330,1)
(372,5126,1)
(2123,4242,1)
(4922,1026,1)
(4965,1844,1)
(3303,4266,1)
(3130,2974,1)
(3160,1406,1)
(3979,5414,1)
(5682,2406,1)
(4046,228,1)
(2326,2540,1)
(3741,3765,1)
(2511,4356,1)
(2326,4848,1)
(341,1844,1)
(1032,5233,1)
(5634,4498,1)
(3619,1182,1)
(2824,3304,1)
(5683,4311,1)
(2830,5414,1)
(1919,24,1)
(2632,4231,1)
(1205,792,1)
(5224,3739,1)
(5544,1238,1)
(2717,1994,1)
(3394,3299,1)
(4971,1844,1)
(824,5662,1)
(5694,548,1)
(879,5614,1)
(2325,5059,1)
(4060,846,1)
(5445,2072,1)
(2004,3625,1)
(3652,943,1)
(5682,4449,1)
(5682,4731,1)
(2846,2129,1)
(3979,3646,1)
(3592,2464,1)
(4473,1037,1)
(3726,5287,1)
(5651,1086,1)
(5542,1844,1)
(1458,2975,1)
(5036,3672,1)
(2076,3523,1)
(4191,984,1)
(5370,2781,1)
(1351,2902,1)
(3991,490,1)
(5130,4971,1)
(2486,1396,1)
(893,2042,1)
(2794,534,1)
(1977,2926,1)
(1078,4120,1)
(28,3949,1)
(545,4534,1)
(4242,5059,1)
(2050,3116,1)
(3543,3118,1)
(5120,4924,1)
(352,815,1)
(299,554,1)
(4048,1817,1)
(5528,4138,1)
(5144,5327,1)
(2934,1844,1)
(1693,2148,1)
(4967,1828,1)
(1281,3866,1)
(1544,2414,1)
(4888,2190,1)
(4202,4987,1)
(3328,4,1)
(1785,4725,1)
(5237,298,1)
(739,3845,1)
(2547,259,1)
(1587,5663,1)
(736,3914,1)
(536,144,1)
(4914,4691,1)
(4307,182,1)
(5431,3498,1)
(4939,2251,1)
(3245,4291,1)
(4293,1482,1)
(3606,3441,1)
(3064,209,1)
(3392,2313,1)
(3208,1844,1)
(1916,2754,1)
(2139,4243,1)
(3488,4063,1)
(182,2270,1)
(2694,5679,1)
(102,195,1)
(1932,1844,1)
(2704,682,1)
(1919,5459,1)
(3737,2863,1)
(1531,627,1)
(1671,508,1)
(3064,1864,1)
(2932,1406,1)
(4307,3708,1)
(3336,3180,1)
(2821,5059,1)
(1773,2722,1)
(475,771,1)
(4890,5072,1)
(1736,4283,1)
(39,3406,1)
(4068,4249,1)
(3563,2902,1)
(3210,5319,1)
(284,739,1)
(1313,5097,1)
(1840,2899,1)
(3518,1628,1)
(991,5059,1)
(3986,5071,1)
(4791,71,1)
(2595,3987,1)
(2175,2902,1)
(5480,3586,1)
(3064,1831,1)
(3675,4160,1)
(39,5149,1)
(4143,195,1)
(1700,627,1)
(2619,4561,1)
(4481,1038,1)
(1411,3467,1)
(2707,4952,1)
(5058,2555,1)
(3242,526,1)
(5427,2374,1)
(3337,1178,1)
(1571,5265,1)
(5120,1575,1)
(5224,2898,1)
(4663,1015,1)
(2241,188,1)
(2736,4553,1)
(1559,1251,1)
(389,4587,1)
(986,627,1)
(860,195,1)
(5564,4734,1)
(3403,1844,1)
(753,5239,1)
(5386,1319,1)
(2156,5536,1)
(4513,3666,1)
(2256,4666,1)
(816,3926,1)
(5027,3638,1)
(1062,899,1)
(2855,4757,1)
(4670,3603,1)
(2475,429,1)
(294,1756,1)
(849,1455,1)
(2873,2015,1)
(1922,1284,1)
(2410,1142,1)
(1274,4079,1)
(3147,5720,1)
(732,627,1)
(2066,1875,1)
(4803,1488,1)
(2226,3994,1)
(4731,5684,1)
(1181,2915,1)
(2817,2241,1)
(4689,1817,1)
(835,1844,1)
(242,3630,1)
(3971,5333,1)
(2549,835,1)
(5131,4618,1)
(3328,1917,1)
(2918,4412,1)
(1605,600,1)
(5101,2499,1)
(4321,4854,1)
(3621,824,1)
(944,1098,1)
(3127,977,1)
(4589,267,1)
(4000,2190,1)
(4005,1477,1)
(5119,627,1)
(4663,3669,1)
(3534,5059,1)
(2326,3150,1)
(5312,5373,1)
(5071,1396,1)
(2809,561,1)
(1932,4890,1)
(5682,1752,1)
(215,1250,1)
(2326,601,1)
(1633,3635,1)
(1219,3885,1)
(2918,1752,1)
(2097,5320,1)
(3676,627,1)
(3349,2307,1)
(2776,4254,1)
(5578,4911,1)
(4905,2460,1)
(3181,51,1)
(5677,782,1)
(4425,1479,1)
(1389,5214,1)
(3155,2359,1)
(5424,2126,1)
(4635,2184,1)
(2111,3530,1)
(3064,4911,1)
(4540,2763,1)
(997,4324,1)
(3252,5086,1)
(3921,2863,1)
(3979,2402,1)
(5531,5099,1)
(71,1212,1)
(5264,4143,1)
(2617,4693,1)
(2787,5034,1)
(2555,3018,1)
(3532,1322,1)
(2326,1456,1)
(2040,2712,1)
(4151,287,1)
(4565,1844,1)
(3979,2758,1)
(3255,5505,1)
(4582,5090,1)
(1612,2733,1)
(3775,546,1)
(670,941,1)
(4706,3221,1)
(5248,4864,1)
(4692,555,1)
(425,3246,1)
(5343,1432,1)
(2118,1792,1)
(3239,4884,1)
(2585,4378,1)
(4295,3004,1)
(3064,1826,1)
(4643,178,1)
(868,1851,1)
(2663,4548,1)
(4663,3646,1)
(3116,3582,1)
(1557,2290,1)
(2972,5242,1)
(4033,3204,1)
(1716,3582,1)
(4219,3748,1)
(2326,2758,1)
(2467,2197,1)
(2217,308,1)
(308,3333,1)
(2855,3468,1)
(4447,454,1)
(611,4437,1)
(2918,4241,1)
(5298,1406,1)
(319,1844,1)
(716,1622,1)
(5048,2562,1)
(4765,2628,1)
(1773,627,1)
(4276,2028,1)
(129,1844,1)
(1487,1844,1)
(3576,5458,1)
(4717,3883,1)
(820,3755,1)
(3592,989,1)
(132,4611,1)
(314,2931,1)
(2085,4369,1)
(2017,2672,1)
(1966,4022,1)
(2705,1838,1)
(570,2190,1)
(1691,4688,1)
(741,627,1)
(2123,3385,1)
(784,3685,1)
(2372,1514,1)
(3513,3765,1)
(1797,1292,1)
(1921,5562,1)
(1958,213,1)
(4663,1775,1)
(5050,998,1)
(2326,2402,1)
(3232,182,1)
(3064,5707,1)
(1747,4216,1)
(2620,627,1)
(4926,195,1)
(935,130,1)
(3064,4412,1)
(4139,3582,1)
(4766,1817,1)
(1179,1720,1)
(1092,915,1)
(3996,2959,1)
(5744,4394,1)
(2938,4723,1)
(2742,2809,1)
(2885,2928,1)
(2420,1094,1)
(2581,1772,1)
(4411,3827,1)
(4350,5515,1)
(5697,3642,1)
(307,5059,1)
(1800,2653,1)
(39,1895,1)
(3877,3059,1)
(1472,2760,1)
(1595,5725,1)
(4110,2535,1)
(5053,5481,1)
(173,4009,1)
(3512,2260,1)
(971,1829,1)
(3821,5059,1)
(3521,621,1)
(1064,1036,1)
(1538,33,1)
(2859,4947,1)
(3979,1647,1)
(5442,614,1)
(2310,5715,1)
(2870,1737,1)
(4246,4097,1)
(3467,1987,1)
(1584,1844,1)
(2184,4636,1)
(4048,627,1)
(4688,941,1)
(4805,5064,1)
(5019,5390,1)
(5067,1101,1)
(2853,3934,1)
(3668,2321,1)
(5057,1844,1)
(3806,2344,1)
(4456,627,1)
(1129,3644,1)
(5006,5058,1)
(4887,3053,1)
(5198,1512,1)
(990,73,1)
(5156,1806,1)
(1685,2176,1)
(5682,4905,1)
(4600,2524,1)
(783,343,1)
(2918,3197,1)
(4966,4759,1)
(284,5675,1)
(2114,4717,1)
(1196,4337,1)
(3000,3518,1)
(2328,3644,1)
(5044,385,1)
(259,3473,1)
(4759,243,1)
(4197,5145,1)
(3035,5308,1)
(4565,1920,1)
(3964,2788,1)
(3428,4068,1)
(3979,1910,1)
(81,2190,1)
(2903,3002,1)
(2756,1406,1)
(2326,4249,1)
(5696,681,1)
(2430,627,1)
(831,948,1)
(4186,3773,1)
(3764,3704,1)
(5061,1844,1)
(5105,2189,1)
(5218,1844,1)
(4282,3976,1)
(2115,4239,1)
(4696,1141,1)
(5004,1721,1)
(5670,2566,1)
(5682,2821,1)
(2446,4058,1)
(1881,149,1)
(4652,990,1)
(4864,573,1)
(284,953,1)
(4938,4305,1)
(4647,4164,1)
(1665,2616,1)
(4826,406,1)
(2946,2445,1)
(3625,2419,1)
(2893,1982,1)
(4318,1961,1)
(2323,4928,1)
(3995,2401,1)
(1065,3831,1)
(5432,2190,1)
(3584,2022,1)
(2442,3584,1)
(4690,1035,1)
(3101,2724,1)
(3678,982,1)
(5682,2480,1)
(1361,4436,1)
(4999,4007,1)
(7,2293,1)
(640,1689,1)
(4057,5435,1)
(2500,3417,1)
(224,1340,1)
(4734,5759,1)
(1533,420,1)
(235,3549,1)
(4174,2897,1)
(3064,3197,1)
(2562,624,1)
(5334,3039,1)
(281,5059,1)
(1582,3698,1)
(3663,5066,1)
(3241,1907,1)
(3370,935,1)
(3317,3950,1)
(1468,3625,1)
(3826,4033,1)
(681,3020,1)
(4591,2128,1)
(2918,1826,1)
(2974,3306,1)
(467,1644,1)
(733,4180,1)
(3125,4788,1)
(5275,3049,1)
(1828,627,1)
(1246,1129,1)
(3884,4694,1)
(3200,2226,1)
(1650,627,1)
(1305,3867,1)
(1695,1859,1)
(700,2256,1)
(5375,102,1)
(1143,5182,1)
(5015,4896,1)
(4971,725,1)
(3823,519,1)
(2863,2190,1)
(141,5549,1)
(1822,1844,1)
(1130,2159,1)
(171,627,1)
(240,1853,1)
(3832,3731,1)
(3857,1240,1)
(2341,4409,1)
(4663,1568,1)
(2423,3809,1)
(5086,2922,1)
(1413,3582,1)
(101,627,1)
(2474,2171,1)
(4789,926,1)
(3857,1844,1)
(5678,623,1)
(1579,1844,1)
(2339,1844,1)
(3921,1555,1)
(5683,4124,1)
(3642,5707,1)
(4465,4253,1)
(16,1691,1)
(151,5156,1)
(703,4276,1)
(3274,5059,1)
(2747,4540,1)
(5152,3557,1)
(2496,1844,1)
(2316,5059,1)
(1520,134,1)
(1704,570,1)
(5603,4067,1)
(1636,2059,1)
(4602,5543,1)
(5402,3541,1)
(5073,537,1)
(483,4237,1)
(792,3180,1)
(1952,3819,1)
(4889,3249,1)
(5194,1396,1)
(238,876,1)
(4079,4930,1)
(1568,2738,1)
(2053,2886,1)
(2632,1817,1)
(3466,3001,1)
(859,2692,1)
(1328,5695,1)
(5569,1379,1)
(3252,1844,1)
(641,217,1)
(246,4907,1)
(5439,638,1)
(134,1215,1)
(3311,627,1)
(882,4334,1)
(599,2636,1)
(2170,2320,1)
(129,1467,1)
(2234,3490,1)
(2326,4916,1)
(4969,2639,1)
(1791,2391,1)
(5624,3374,1)
(5754,1458,1)
(4552,3725,1)
(851,4759,1)
(4235,4874,1)
(5067,3039,1)
(2607,5156,1)
(5376,697,1)
(1560,2354,1)
(33,1392,1)
(2943,3266,1)
(4567,2072,1)
(5309,3000,1)
(4619,914,1)
(1555,4476,1)
(2392,4972,1)
(64,3066,1)
(1772,436,1)
(1777,3888,1)
(863,1445,1)
(5163,1670,1)
(2126,4429,1)
(309,1540,1)
(2326,4241,1)
(2015,3253,1)
(1907,3388,1)
(2918,565,1)
(445,3635,1)
(2973,4904,1)
(3730,5167,1)
(2725,2072,1)
(4337,3400,1)
(5555,2107,1)
(4689,1772,1)
(1225,3397,1)
(5094,4244,1)
(4587,1710,1)
(2391,4384,1)
(4512,4268,1)
(363,1844,1)
(4112,4491,1)
(5120,977,1)
(3382,176,1)
(111,4866,1)
(5370,5697,1)
(2326,4120,1)
(2868,3651,1)
(3771,2475,1)
(489,3003,1)
(4507,1321,1)
(9,1864,1)
(3540,1096,1)
(1618,3108,1)
(5157,1937,1)
(2228,98,1)
(471,786,1)
(4936,1813,1)
(580,852,1)
(1906,547,1)
(2920,4903,1)
(57,2927,1)
(3887,2190,1)
(1646,5142,1)
(1711,4131,1)
(4634,477,1)
(984,1380,1)
(1149,2097,1)
(3174,1070,1)
(2626,3609,1)
(2399,1661,1)
(2685,38,1)
(3980,5211,1)
(39,331,1)
(2781,1881,1)
(226,5351,1)
(1468,753,1)
(3965,3103,1)
(5437,2258,1)
(560,3579,1)
(5200,1294,1)
(2326,4807,1)
(2101,3472,1)
(2184,4786,1)
(924,5050,1)
(3177,2429,1)
(2193,5059,1)
(5404,3329,1)
(502,2190,1)
(2918,1031,1)
(3673,746,1)
(773,4766,1)
(2678,2741,1)
(4627,690,1)
(3658,5656,1)
(3499,4935,1)
(5272,481,1)
(2658,2940,1)
(3295,2605,1)
(3525,4135,1)
(5171,3042,1)
(2530,1166,1)
(4851,2048,1)
(197,3902,1)
(330,2156,1)
(857,5453,1)
(1108,3179,1)
(5527,1751,1)
(4379,2469,1)
(4124,903,1)
(5710,4656,1)
(3651,1002,1)
(4840,1715,1)
(5295,1462,1)
(4135,4649,1)
(5712,3635,1)
(4446,3546,1)
(1886,128,1)
(1257,1049,1)
(5089,1773,1)
(4068,4300,1)
(5595,3743,1)
(2660,2132,1)
(5682,2486,1)
(2265,3635,1)
(2940,2776,1)
(369,627,1)
(3421,3615,1)
(4138,4951,1)
(2603,2926,1)
(1013,13,1)
(2243,106,1)
(3521,1844,1)
(5571,2597,1)
(4300,3457,1)
(3248,1985,1)
(295,3635,1)
(3818,483,1)
(1534,5370,1)
(3811,5495,1)
(1495,2655,1)
(1002,2246,1)
(3388,703,1)
(2936,5409,1)
(2209,1286,1)
(519,4327,1)
(2434,1737,1)
(1239,1693,1)
(5461,41,1)
(4404,4426,1)
(5038,3715,1)
(3977,5528,1)
(1687,1873,1)
(5377,985,1)
(3951,4620,1)
(639,4742,1)
(286,1060,1)
(2205,3324,1)
(2234,1377,1)
(3979,2325,1)
(1556,5559,1)
(3739,4059,1)
(4418,4834,1)
(168,2851,1)
(3328,3039,1)
(2162,2802,1)
(3237,3252,1)
(4568,3711,1)
(786,2479,1)
(4216,1767,1)
(5542,679,1)
(2573,1844,1)
(3979,601,1)
(3420,2077,1)
(2109,5567,1)
(488,3935,1)
(1073,167,1)
(4957,2247,1)
(5529,2494,1)
(5682,2758,1)
(271,4383,1)
(3412,3381,1)
(1010,4635,1)
(3486,627,1)
(4385,3393,1)
(5537,2227,1)
(1103,1973,1)
(3981,1764,1)
(645,3579,1)
(1697,5436,1)
(2531,1143,1)
(1549,3879,1)
(2500,331,1)
(3729,1687,1)
(5236,627,1)
(1564,1215,1)
(2456,3937,1)
(3612,4147,1)
(2150,3122,1)
(3307,2035,1)
(2624,463,1)
(2063,1294,1)
(1248,1014,1)
(709,2880,1)
(542,1844,1)
(3631,3625,1)
(3196,5086,1)
(3669,3891,1)
(5077,4697,1)
(4766,5176,1)
(3411,428,1)
(2701,4786,1)
(2225,3582,1)
(5520,3585,1)
(5682,5373,1)
(4140,2671,1)
(5368,501,1)
(3203,5170,1)
(4850,706,1)
(3538,1802,1)
(1863,378,1)
(4338,662,1)
(3064,4449,1)
(162,2224,1)
(4068,2413,1)
(5041,3763,1)
(4033,54,1)
(884,724,1)
(4396,162,1)
(3025,408,1)
(918,1844,1)
(2918,1778,1)
(1132,3325,1)
(1747,5332,1)
(1080,5685,1)
(4868,5055,1)
(1520,3421,1)
(5405,537,1)
(4404,4889,1)
(3275,2748,1)
(1267,5059,1)
(2653,3553,1)
(1295,3759,1)
(2898,1859,1)
(3776,4171,1)
(1670,2190,1)
(1532,2529,1)
(1738,236,1)
(2167,4606,1)
(4789,2403,1)
(521,159,1)
(5097,1442,1)
(1997,5637,1)
(869,5379,1)
(1845,5651,1)
(2117,575,1)
(5177,1844,1)
(1188,3488,1)
(1129,1082,1)
(4007,2190,1)
(5364,5419,1)
(2497,3700,1)
(1717,796,1)
(461,1871,1)
(4939,1859,1)
(3683,3286,1)
(1623,2586,1)
(3187,5511,1)
(360,4317,1)
(2239,332,1)
(284,4704,1)
(3545,1958,1)
(5552,1314,1)
(2082,3434,1)
(2743,4385,1)
(2297,135,1)
(4499,2932,1)
(763,5181,1)
(4917,1499,1)
(2678,1844,1)
(1714,5055,1)
(1677,1669,1)
(3970,2640,1)
(456,282,1)
(4201,5151,1)
(4097,2904,1)
(2476,1164,1)
(108,3580,1)
(5682,3669,1)
(4637,3835,1)
(5682,4249,1)
(4047,1748,1)
(1356,5436,1)
(2850,3092,1)
(2757,5635,1)
(5559,1723,1)
(3385,1844,1)
(4829,1351,1)
(5172,4309,1)
(225,1033,1)
(669,3508,1)
(1287,3675,1)
(407,1359,1)
(3265,1191,1)
(4129,1837,1)
(2578,2022,1)
(1076,4333,1)
(3036,3510,1)
(3956,3348,1)
(1903,775,1)
(2870,2824,1)
(3064,2413,1)
(3876,2865,1)
(2885,1906,1)
(3510,1394,1)
(2500,1575,1)
(53,3227,1)
(2735,2309,1)
(2938,5249,1)
(3093,4118,1)
(394,4104,1)
(1638,1093,1)
(5162,453,1)
(1960,4621,1)
(3797,3967,1)
(4045,3676,1)
(4007,4240,1)
(876,2044,1)
(3041,4396,1)
(2717,1369,1)
(3750,5263,1)
(1432,5456,1)
(2113,2853,1)
(3315,4580,1)
(565,3254,1)
(1813,5338,1)
(406,3753,1)
(1022,469,1)
(463,5660,1)
(5329,2081,1)
(3501,678,1)
(4549,5019,1)
(5549,523,1)
(81,5341,1)
(4064,1779,1)
(2,5128,1)
(828,2119,1)
(5370,3928,1)
(1744,4139,1)
(3507,46,1)
(4068,4120,1)
(4603,5321,1)
(4190,2855,1)
(2366,3017,1)
(5689,4358,1)
(82,4597,1)
(4128,4208,1)
(2975,574,1)
(2050,873,1)
(2773,4492,1)
(2277,4879,1)
(2918,2402,1)
(2326,2821,1)
(1904,5479,1)
(3249,3302,1)
(4009,5406,1)
(4003,1844,1)
(2326,1831,1)
(1921,1960,1)
(1481,1478,1)
(3442,3899,1)
(1358,671,1)
(3208,1602,1)
(5621,922,1)
(2326,2325,1)
(1612,1844,1)
(5120,370,1)
(5058,4377,1)
(4457,2735,1)
(3391,5428,1)
(446,4567,1)
(3423,4073,1)
(5486,2190,1)
(5682,3646,1)
(3298,2376,1)
(1715,253,1)
(2822,1844,1)
(822,4562,1)
(4932,3610,1)
(825,5159,1)
(2546,1955,1)
(3064,3273,1)
(2421,46,1)
(3263,485,1)
(3158,4485,1)
(4360,4236,1)
(2567,4460,1)
(2967,3347,1)
(1501,5301,1)
(2326,5469,1)
(2194,3747,1)
(1100,4828,1)
(3731,5309,1)
(4970,608,1)
(1816,4644,1)
(142,4149,1)
(843,531,1)
(922,3812,1)
(5419,5427,1)
(637,1844,1)
(3978,2032,1)
(39,4924,1)
(1931,4720,1)
(860,4001,1)
(3612,1844,1)
(2728,1892,1)
(5063,627,1)
(2149,2220,1)
(5695,2344,1)
(301,5634,1)
(1740,2611,1)
(5404,3884,1)
(2270,627,1)
(4843,2234,1)
(527,2536,1)
(3670,2177,1)
(3242,1412,1)
(5652,1230,1)
(2778,4636,1)
(903,2881,1)
(1136,1735,1)
(2416,5059,1)
(1523,2190,1)
(791,5323,1)
(456,1475,1)
(3674,1130,1)
(4680,1711,1)
(4979,195,1)
(420,4687,1)
(4251,2403,1)
(3930,1767,1)
(1317,2997,1)
(3886,4143,1)
(4508,1076,1)
(2515,1044,1)
(4992,2708,1)
(3425,3164,1)
(2136,820,1)
(4931,536,1)
(1757,825,1)
(3910,3401,1)
(4640,625,1)
(274,4807,1)
(4367,1662,1)
(2995,2117,1)
(1039,4141,1)
(2034,3450,1)
(1414,663,1)
(4871,1520,1)
(3236,604,1)
(2811,3588,1)
(5226,2190,1)
(2077,156,1)
(3790,5055,1)
(3869,4900,1)
(1780,1419,1)
(4947,1574,1)
(5088,2402,1)
(2881,1671,1)
(5444,4405,1)
(3336,2630,1)
(3108,3428,1)
(2500,977,1)
(2435,1807,1)
(1159,2299,1)
(4086,4128,1)
(1396,3344,1)
(1182,4003,1)
(1647,2925,1)
(1275,1300,1)
(596,5755,1)
(3772,842,1)
(2630,1827,1)
(4546,4481,1)
(5704,4151,1)
(470,5590,1)
(1137,4969,1)
(5480,2813,1)
(34,5670,1)
(3702,1338,1)
(1777,3520,1)
(1,4869,1)
(3046,4350,1)
(3217,39,1)
(717,1204,1)
(799,2766,1)
(1067,5369,1)
(5679,3502,1)
(5543,5281,1)
(5580,1774,1)
(5146,5064,1)
(2561,2892,1)
(4979,3582,1)
(915,1844,1)
(3333,1542,1)
(110,4818,1)
(4958,289,1)
(3406,5501,1)
(2129,707,1)
(659,353,1)
(1325,925,1)
(157,1651,1)
(3036,793,1)
(4319,3202,1)
(139,5324,1)
(596,2994,1)
(3595,4934,1)
(5704,627,1)
(3392,5528,1)
(1362,3248,1)
(1799,1835,1)
(419,2873,1)
(2916,5059,1)
(3805,1844,1)
(609,4735,1)
(2460,1451,1)
(4997,340,1)
(3359,2372,1)
(5056,498,1)
(3142,3968,1)
(5558,4663,1)
(3979,2785,1)
(2895,5172,1)
(1910,2349,1)
(2316,3064,1)
(5031,837,1)
(5709,1170,1)
(2061,1417,1)
(4521,998,1)
(4594,2406,1)
(2880,4472,1)
(5474,627,1)
(3428,3016,1)
(2766,4905,1)
(883,4430,1)
(3141,2410,1)
(2611,3201,1)
(1020,944,1)
(1650,2631,1)
(4794,5059,1)
(3650,1844,1)
(1154,3247,1)
(3979,2821,1)
(829,1775,1)
(2033,1844,1)
(3824,2405,1)
(5234,137,1)
(1554,4080,1)
(3979,1802,1)
(4324,2190,1)
(5753,4447,1)
(5350,3657,1)
(582,4489,1)
(1315,1844,1)
(66,58,1)
(3832,5059,1)
(726,4614,1)
(1855,393,1)
(5412,3764,1)
(896,627,1)
(2637,195,1)
(1311,4780,1)
(4287,2990,1)
(2805,4977,1)
(1123,892,1)
(4122,88,1)
(4663,4632,1)
(4160,4401,1)
(2326,565,1)
(350,3510,1)
(5133,1195,1)
(2337,1882,1)
(1705,75,1)
(4421,3096,1)
(5510,2962,1)
(3500,2190,1)
(429,1809,1)
(2039,4788,1)
(823,4068,1)
(4429,2801,1)
(3064,4894,1)
(2091,1887,1)
(3667,2790,1)
(2002,3875,1)
(1797,5055,1)
(3755,3563,1)
(940,1927,1)
(4328,1999,1)
(91,627,1)
(1608,3311,1)
(3064,93,1)
(1128,1215,1)
(4189,5149,1)
(3893,296,1)
(4301,649,1)
(1014,3243,1)
(1288,2072,1)
(513,3113,1)
(5298,4887,1)
(2435,926,1)
(4331,2771,1)
(5160,1268,1)
(4106,5406,1)
(2357,5176,1)
(2365,1844,1)
(3050,1952,1)
(523,4686,1)
(3660,1739,1)
(2889,4048,1)
(2555,627,1)
(4222,2983,1)
(847,627,1)
(742,2798,1)
(267,4068,1)
(5376,326,1)
(1390,2408,1)
(4275,5374,1)
(1335,612,1)
(4581,3423,1)
(1570,1622,1)
(726,2251,1)
(5129,1539,1)
(3090,4545,1)
(5722,1771,1)
(1071,4628,1)
(5464,1844,1)
(1550,4885,1)
(2025,3136,1)
(4375,2050,1)
(2944,5059,1)
(1583,2745,1)
(2918,5414,1)
(5411,3996,1)
(2710,627,1)
(228,1204,1)
(1775,1345,1)
(836,4535,1)
(4042,5630,1)
(2615,1618,1)
(2049,3309,1)
(106,2190,1)
(3979,1230,1)
(4324,2501,1)
(2745,2660,1)
(4849,4605,1)
(2326,1031,1)
(1149,1950,1)
(4758,3558,1)
(1070,1729,1)
(4971,3805,1)
(5417,1350,1)
(5287,4552,1)
(5010,2463,1)
(4281,3268,1)
(3119,5729,1)
(259,3829,1)
(4313,1299,1)
(5682,3707,1)
(288,500,1)
(2291,5526,1)
(1301,3341,1)
(2528,2498,1)
(647,733,1)
(2685,1844,1)
(2326,5414,1)
(272,774,1)
(3291,4596,1)
(97,2541,1)
(5682,2030,1)
(3635,5552,1)
(760,2371,1)
(1573,4534,1)
(533,5075,1)
(2938,350,1)
(4920,1700,1)
(2098,1329,1)
(2481,5059,1)
(5396,3316,1)
(2344,3635,1)
(1445,1789,1)
(4767,2446,1)
(3725,4194,1)
(3942,3403,1)
(1746,472,1)
(3669,1146,1)
(4534,2190,1)
(5316,2322,1)
(2163,2721,1)
(830,4421,1)
(4899,1261,1)
(307,5682,1)
(2392,627,1)
(3594,4763,1)
(3355,5210,1)
(4139,5059,1)
(741,5367,1)
(3271,4161,1)
(1166,310,1)
(5137,1674,1)
(2287,3442,1)
(3079,627,1)
(1103,193,1)
(639,4543,1)
(24,5628,1)
(3526,2161,1)
(5465,2193,1)
(1567,4137,1)
(3234,737,1)
(4828,5186,1)
(2326,1864,1)
(3618,3161,1)
(877,836,1)
(735,5258,1)
(1911,1844,1)
(3153,3170,1)
(5162,5059,1)
(3064,1647,1)
(378,3739,1)
(2918,808,1)
(930,1140,1)
(1996,489,1)
(1193,1844,1)
(2143,915,1)
(3444,3545,1)
(1628,4726,1)
(5015,1541,1)
(4529,3784,1)
(3928,3524,1)
(2401,2422,1)
(5102,5059,1)
(3640,1330,1)
(4869,3787,1)
(1945,4608,1)
(3064,2486,1)
(350,653,1)
(5403,3405,1)
(287,5304,1)
(4497,1844,1)
(4504,338,1)
(5134,2190,1)
(4157,514,1)
(520,559,1)
(5153,1758,1)
(3917,1671,1)
(1291,5329,1)
(1703,2907,1)
(1415,1844,1)
(308,1740,1)
(1456,1903,1)
(2902,938,1)
(5674,2318,1)
(1774,4145,1)
(55,1725,1)
(1125,4121,1)
(5054,1844,1)
(3692,627,1)
(106,2657,1)
(3709,2087,1)
(4814,2410,1)
(1965,5057,1)
(1940,107,1)
(655,557,1)
(5050,1132,1)
(5182,1697,1)
(953,1293,1)
(5255,357,1)
(3760,4070,1)
(4742,627,1)
(4801,3402,1)
(5682,1647,1)
(3979,5707,1)
(2326,1778,1)
(4866,580,1)
(1023,4633,1)
(957,5398,1)
(1953,1807,1)
(3166,210,1)
(5585,4287,1)
(654,3244,1)
(36,627,1)
(2405,780,1)
(1351,2765,1)
(4154,3440,1)
(4143,3582,1)
(5114,269,1)
(4051,5574,1)
(2172,480,1)
(5682,209,1)
(4460,2190,1)
(1989,1766,1)
(866,3163,1)
(310,4929,1)
(4717,1844,1)
(1887,1180,1)
(2246,580,1)
(2816,749,1)
(5629,4786,1)
(4944,2248,1)
(215,95,1)
(4777,5488,1)
(4032,195,1)
(188,4877,1)
(1191,1627,1)
(3441,317,1)
(3318,5266,1)
(4475,1015,1)
(5252,3695,1)
(167,2190,1)
(3662,1574,1)
(2590,5137,1)
(607,2234,1)
(4068,5469,1)
(2769,1101,1)
(4921,474,1)
(2627,4769,1)
(5620,281,1)
(3065,3152,1)
(1674,4051,1)
(3449,4500,1)
(2007,1571,1)
(967,1658,1)
(4248,1366,1)
(134,4057,1)
(2338,4824,1)
(5405,924,1)
(5418,4517,1)
(58,2887,1)
(943,5055,1)
(1863,225,1)
(5561,974,1)
(158,4706,1)
(4255,721,1)
(2265,3276,1)
(349,2852,1)
(5026,1468,1)
(3780,674,1)
(4198,1223,1)
(215,3722,1)
(1896,5748,1)
(1531,4526,1)
(2203,4765,1)
(3533,5055,1)
(1509,2190,1)
(3753,2065,1)
(4681,3274,1)
(3835,1716,1)
(5282,2902,1)
(5682,5099,1)
(5521,235,1)
(2422,2472,1)
(5205,2296,1)
(593,1460,1)
(5116,1993,1)
(1754,1296,1)
(4137,4787,1)
(711,1081,1)
(3064,4705,1)
(2687,4473,1)
(3184,2190,1)
(2326,3646,1)
(3441,2190,1)
(3097,3543,1)
(5685,2434,1)
(5568,3837,1)
(4923,1406,1)
(4373,3123,1)
(3960,5429,1)
(2801,5429,1)
(801,843,1)
(5699,1123,1)
(2074,1067,1)
(5565,29,1)
(3978,1844,1)
(5097,5268,1)
(262,2095,1)
(3923,470,1)
(3218,3886,1)
(3679,736,1)
(622,5059,1)
(2087,5200,1)
(3979,1752,1)
(2307,3466,1)
(4350,4213,1)
(2906,2348,1)
(5568,4260,1)
(1157,2196,1)
(1241,1844,1)
(1551,2582,1)
(3848,627,1)
(4394,5257,1)
(136,2297,1)
(3400,5059,1)
(508,2492,1)
(4990,4895,1)
(4617,273,1)
(1450,4068,1)
(5073,3816,1)
(5334,3417,1)
(3036,3670,1)
(665,1396,1)
(5215,2779,1)
(3979,209,1)
(3064,565,1)
(1202,1534,1)
(200,694,1)
(5365,764,1)
(1834,1844,1)
(4832,2343,1)
(3031,2658,1)
(4450,5127,1)
(1792,290,1)
(89,3539,1)
(4702,4989,1)
(5583,896,1)
(1503,4518,1)
(4900,5682,1)
(4410,5055,1)
(3012,3786,1)
(2801,5256,1)
(1318,1630,1)
(1526,4395,1)
(492,142,1)
(4503,3638,1)
(1879,4797,1)
(2831,3440,1)
(2149,3741,1)
(5646,5048,1)
(2643,204,1)
(4058,2777,1)
(4860,3582,1)
(1604,4068,1)
(4697,3283,1)
(4988,3477,1)
(4655,1331,1)
(808,2627,1)
(4094,350,1)
(2688,5608,1)
(4193,1486,1)
(4587,2390,1)
(3599,3973,1)
(2724,3135,1)
(4695,3376,1)
(1479,1160,1)
(1834,4483,1)
(1210,1960,1)
(2636,1976,1)
(5575,1400,1)
(2500,1917,1)
(1019,5765,1)
(4639,3483,1)
(718,2005,1)
(3248,627,1)
(5682,4300,1)
(2141,4361,1)
(3614,2776,1)
(2474,4970,1)
(510,329,1)
(4344,4900,1)
(440,4524,1)
(5120,3039,1)
(213,1503,1)
(3201,3333,1)
(4254,4458,1)
(2336,627,1)
(2542,4748,1)
(298,4868,1)
(3023,331,1)
(5210,502,1)
(2979,125,1)
(572,5042,1)
(3539,3513,1)
(5388,1213,1)
(5242,3977,1)
(2746,3605,1)
(996,168,1)
(2806,2329,1)
(5033,5120,1)
(1669,3114,1)
(2416,3064,1)
(5224,793,1)
(2254,4124,1)
(19,759,1)
(2204,1507,1)
(4425,2190,1)
(5328,3830,1)
(5079,2999,1)
(3064,208,1)
(5716,4032,1)
(178,2084,1)
(1763,2607,1)
(3475,5018,1)
(2625,3077,1)
(5737,3714,1)
(680,3760,1)
(5669,4249,1)
(3415,2528,1)
(4180,2588,1)
(2043,1765,1)
(4994,968,1)
(622,1047,1)
(5163,3103,1)
(215,2967,1)
(5348,1741,1)
(4825,1844,1)
(4068,1775,1)
(1753,1179,1)
(5566,4104,1)
(5536,3971,1)
(5460,1664,1)
(4834,2190,1)
(3195,4442,1)
(840,723,1)
(3745,2868,1)
(1584,2312,1)
(4752,564,1)
(2918,2785,1)
(350,4786,1)
(3443,2110,1)
(3339,226,1)
(3277,4793,1)
(2898,5169,1)
(284,4822,1)
(3177,3103,1)
(4720,3689,1)
(3307,1844,1)
(2109,5443,1)
(1327,1844,1)
(5064,627,1)
(5667,387,1)
(5370,4591,1)
(1927,3721,1)
(3064,1568,1)
(3732,1177,1)
(3719,2251,1)
(3979,2255,1)
(122,1845,1)
(671,533,1)
(5013,3710,1)
(1764,1490,1)
(5424,1844,1)
(718,2026,1)
(2297,627,1)
(1827,2998,1)
(23,1167,1)
(5124,695,1)
(2551,1841,1)
(4663,4241,1)
(4734,3635,1)
(3433,195,1)
(1463,754,1)
(4911,627,1)
(271,3000,1)
(2500,4924,1)
(2721,3635,1)
(4475,991,1)
(3219,2742,1)
(1129,4549,1)
(257,2643,1)
(189,2787,1)
(5070,4467,1)
(2008,633,1)
(4916,2843,1)
(1710,617,1)
(5419,1025,1)
(3209,1354,1)
(4227,4607,1)
(2014,4876,1)
(2913,5725,1)
(5301,2072,1)
(629,1844,1)
(1504,5432,1)
(4831,4611,1)
(5264,5275,1)
(3445,5404,1)
(1826,187,1)
(4422,5493,1)
(3325,3465,1)
(1224,3613,1)
(3662,2426,1)
(1041,2572,1)
(4788,191,1)
(1704,1710,1)
(3343,789,1)
(4794,3979,1)
(5195,5706,1)
(4476,5063,1)
(739,5757,1)
(1826,627,1)
(716,1507,1)
(294,4990,1)
(3064,1752,1)
(4903,2190,1)
(3497,2979,1)
(4404,3368,1)
(2003,794,1)
(4585,378,1)
(2677,2190,1)
(5682,1230,1)
(3836,5427,1)
(980,4804,1)
(3051,741,1)
(2042,2930,1)
(4579,4783,1)
(3812,1844,1)
(5516,305,1)
(4780,627,1)
(1851,3582,1)
(823,5059,1)
(3863,4321,1)
(2145,5522,1)
(1882,3451,1)
(3239,1931,1)
(538,5710,1)
(2610,1116,1)
(212,1236,1)
(3578,1234,1)
(1,3502,1)
(2469,4278,1)
(970,4731,1)
(2918,4736,1)
(2497,5059,1)
(4022,3582,1)
(2208,3864,1)
(289,2856,1)
(2172,1121,1)
(4646,1391,1)
(646,3122,1)
(601,4912,1)
(4472,5088,1)
(2581,5076,1)
(609,4266,1)
(4965,5467,1)
(1827,555,1)
(4126,1633,1)
(1947,4334,1)
(588,3681,1)
(1059,2441,1)
(2918,4807,1)
(4947,3673,1)
(3671,4636,1)
(5321,5284,1)
(3152,4775,1)
(1,3908,1)
(1851,195,1)
(1675,4622,1)
(1726,276,1)
(3378,656,1)
(4445,689,1)
(4688,2438,1)
(2387,1352,1)
(3474,220,1)
(1912,2818,1)
(2094,3409,1)
(5547,1013,1)
(3979,816,1)
(4223,3534,1)
(5249,2898,1)
(4259,299,1)
(1226,5014,1)
(2128,2198,1)
(1043,1492,1)
(307,2902,1)
(2435,909,1)
(4141,5652,1)
(3048,3600,1)
(3640,3189,1)
(4452,3452,1)
(3424,1722,1)
(5324,5734,1)
(2656,3253,1)
(4908,1844,1)
(4550,3507,1)
(4663,2821,1)
(72,927,1)
(481,1741,1)
(2248,4601,1)
(2500,4991,1)
(4376,3730,1)
(5568,2447,1)
(4126,4228,1)
(4306,2087,1)
(3711,1624,1)
(5612,5717,1)
(2119,318,1)
(2549,2160,1)
(565,627,1)
(4426,1844,1)
(3161,3625,1)
(2326,4628,1)
(1351,5059,1)
(4383,5059,1)
(5300,743,1)
(2918,3707,1)
(5585,627,1)
(3573,3975,1)
(1506,3562,1)
(2777,4786,1)
(675,3351,1)
(1402,195,1)
(5116,4334,1)
(4261,1497,1)
(2765,5221,1)
(205,3535,1)
(4928,2676,1)
(5221,3979,1)
(5093,2487,1)
(4606,390,1)
(3000,2431,1)
(1399,1844,1)
(5721,5083,1)
(2406,627,1)
(4906,4664,1)
(4063,1439,1)
(4708,1288,1)
(3283,1844,1)
(4318,4416,1)
(3699,4133,1)
(3334,1362,1)
(2599,1411,1)
(5385,4000,1)
(5163,5766,1)
(5378,1721,1)
(5024,5556,1)
(1141,5055,1)
(4946,4920,1)
(4322,2784,1)
(1042,3850,1)
(962,3185,1)
(2273,1844,1)
(4757,3468,1)
(787,4785,1)
(16,4688,1)
(148,2168,1)
(4293,5681,1)
(5732,3300,1)
(920,5180,1)
(2495,294,1)
(3251,2529,1)
(3514,2684,1)
(3969,1844,1)
(5631,3794,1)
(2015,2656,1)
(158,2190,1)
(3600,1894,1)
(5263,829,1)
(340,1508,1)
(1723,1395,1)
(2326,4300,1)
(4066,4391,1)
(2373,4902,1)
(3067,4360,1)
(4068,1910,1)
(114,4722,1)
(3075,911,1)
(3437,5646,1)
(3979,4249,1)
(5235,2327,1)
(2809,5059,1)
(2994,5755,1)
(1194,5621,1)
(3899,640,1)
(4068,1456,1)
(4500,3683,1)
(2326,4911,1)
(2945,1764,1)
(2699,2644,1)
(3497,125,1)
(1583,2538,1)
(5355,4030,1)
(1029,2918,1)
(160,9,1)
(3459,4875,1)
(593,1103,1)
(416,3632,1)
(2652,4446,1)
(3759,4794,1)
(948,2551,1)
(453,4932,1)
(4553,4243,1)
(614,3330,1)
(2146,3232,1)
(3979,2540,1)
(2172,2470,1)
(3169,1916,1)
(3064,2255,1)
(3126,4768,1)
(4340,2023,1)
(3990,3636,1)
(3064,1910,1)
(5693,901,1)
(1500,1114,1)
(2488,5059,1)
(3163,4650,1)
(2221,3568,1)
(5334,1101,1)
(3903,4969,1)
(4574,243,1)
(2714,3979,1)
(1357,2523,1)
(4947,3103,1)
(943,1408,1)
(3007,516,1)
(3177,2426,1)
(3533,1858,1)
(3883,4514,1)
(2361,5418,1)
(921,5093,1)
(4903,1592,1)
(2981,1923,1)
(3691,2584,1)
(5472,4996,1)
(459,1226,1)
(907,2190,1)
(5308,2285,1)
(250,5477,1)
(2475,5059,1)
(5110,3945,1)
(2292,4391,1)
(3452,4464,1)
(4055,4022,1)
(3979,2152,1)
(5324,1396,1)
(2779,3205,1)
(4664,4304,1)
(680,3248,1)
(1640,2844,1)
(4074,4156,1)
(1026,3844,1)
(1413,195,1)
(3646,2221,1)
(293,1951,1)
(2461,3195,1)
(2687,1844,1)
(4555,718,1)
(4663,921,1)
(4231,4282,1)
(2314,2958,1)
(5432,4490,1)
(1513,3674,1)
(4844,791,1)
(1131,3012,1)
(4013,742,1)
(39,370,1)
(2326,255,1)
(70,4951,1)
(2563,189,1)
(3280,3574,1)
(2237,576,1)
(2599,654,1)
(2957,4034,1)
(2404,5472,1)
(3064,2758,1)
(2071,3011,1)
(1025,2432,1)
(5306,639,1)
(710,908,1)
(5012,4705,1)
(3979,4084,1)
(2845,3720,1)
(5729,5059,1)
(2367,2190,1)
(23,1651,1)
(3229,2807,1)
(5420,1943,1)
(4102,4140,1)
(2863,1959,1)
(1493,2130,1)
(5693,635,1)
(3002,127,1)
(4786,4668,1)
(271,2066,1)
(2841,5573,1)
(1376,4113,1)
(2500,5149,1)
(63,1384,1)
(3006,1412,1)
(464,3480,1)
(4799,146,1)
(1619,4997,1)
(2939,3209,1)
(2283,5297,1)
(5212,2580,1)
(5090,627,1)
(1264,53,1)
(466,4406,1)
(4808,4809,1)
(4084,5059,1)
(1545,3925,1)
(4162,5403,1)
(3979,3150,1)
(2308,3154,1)
(5611,959,1)
(704,4300,1)
(1596,5059,1)
(3011,4391,1)
(1130,4330,1)
(5749,5036,1)
(2728,793,1)
(1354,3185,1)
(4071,5054,1)
(4649,1346,1)
(2854,5275,1)
(3116,195,1)
(1779,29,1)
(4372,4634,1)
(767,1844,1)
(3381,3293,1)
(3803,3918,1)
(3856,1552,1)
(2219,1081,1)
(2172,1549,1)
(2637,3582,1)
(4599,5216,1)
(4529,3664,1)
(4502,4651,1)
(5682,3923,1)
(2918,1864,1)
(2603,659,1)
(787,4471,1)
(5165,1181,1)
(4329,965,1)
(1894,3071,1)
(5640,5116,1)
(1111,849,1)
(3364,5059,1)
(2918,4249,1)
(1770,2273,1)
(4915,5742,1)
(2326,4449,1)
(623,2609,1)
(4379,1844,1)
(5526,3386,1)
(4456,1939,1)
(5479,2477,1)
(1983,4345,1)
(4315,1626,1)
(5164,851,1)
(4787,5059,1)
(4239,1721,1)
(3064,4792,1)
(1860,4089,1)
(3320,1737,1)
(5151,2899,1)
(5201,4943,1)
(2731,1788,1)
(2223,604,1)
(4457,5059,1)
(1616,1087,1)
(5085,5565,1)
(5567,5702,1)
(2334,1538,1)
(5367,1605,1)
(5052,3986,1)
(2835,3791,1)
(3064,5036,1)
(4559,5731,1)
(3064,601,1)
(5357,1527,1)
(267,2902,1)
(3257,3636,1)
(5168,2217,1)
(5397,312,1)
(3862,3437,1)
(1217,3661,1)
(267,3979,1)
(2552,996,1)
(599,1976,1)
(5766,5764,1)
(2918,209,1)
(3304,2945,1)
(4895,4921,1)
(5672,56,1)
(2712,3148,1)
(3565,535,1)
(1597,4814,1)
(3720,2782,1)
(3668,2803,1)
(3428,5059,1)
(4056,5059,1)
(4132,1844,1)
(937,4859,1)
(1082,4036,1)
(5468,1844,1)
(498,4815,1)
(5388,627,1)
(4891,608,1)
(3638,2190,1)
(1814,857,1)
(2493,4865,1)
(12,1411,1)
(2063,2168,1)
(1961,2493,1)
(1983,1844,1)
(4240,2054,1)
(792,3420,1)
(658,4770,1)
(566,4956,1)
(3064,2480,1)
(3009,5596,1)
(4510,2971,1)
(2978,132,1)
(5457,5056,1)
(4016,3099,1)
(4776,672,1)
(1354,3470,1)
(3505,1610,1)
(2535,4043,1)
(2749,1244,1)
(5079,488,1)
(5643,1844,1)
(731,4434,1)
(3563,3979,1)
(3878,2263,1)
(739,697,1)
(3620,227,1)
(4336,4902,1)
(1296,193,1)
(215,4998,1)
(3462,560,1)
(41,3619,1)
(189,5109,1)
(195,3690,1)
(4940,5059,1)
(4483,5482,1)
(5306,3399,1)
(4663,2406,1)
(811,1141,1)
(994,1799,1)
(695,5206,1)
(315,3395,1)
(2216,3552,1)
(2608,5557,1)
(3261,3923,1)
(2783,5633,1)
(2884,1737,1)
(5475,267,1)
(4806,720,1)
(5080,5683,1)
(2326,1775,1)
(5370,2264,1)
(3355,1842,1)
(18,637,1)
(3160,4883,1)
(5073,1132,1)
(1235,1616,1)
(480,1402,1)
(5138,1401,1)
(210,1171,1)
(4728,1844,1)
(307,3979,1)
(399,2745,1)
(867,902,1)
(1760,1874,1)
(2597,3579,1)
(2612,627,1)
(705,2449,1)
(199,3962,1)
(4530,2190,1)
(2326,5373,1)
(5274,5752,1)
(708,865,1)
(3941,3909,1)
(4055,1966,1)
(5130,4450,1)
(1242,4392,1)
(2082,2190,1)
(5459,5059,1)
(5682,754,1)
(5551,1768,1)
(4041,2751,1)
(2915,3402,1)
(1902,5089,1)
(2524,3039,1)
(4381,1453,1)
(3979,4628,1)
(5498,1603,1)
(3805,1833,1)
(4641,3012,1)
(3549,4471,1)
(2621,3816,1)
(4024,3171,1)
(4392,4101,1)
(902,5655,1)
(4782,680,1)
(5410,3023,1)
(2819,4803,1)
(5370,2918,1)
(5222,4695,1)
(4775,2190,1)
(1284,3890,1)
(3328,4924,1)
(239,3625,1)
(5120,1917,1)
(1211,2768,1)
(4676,627,1)
(1794,375,1)
(5068,83,1)
(3151,2724,1)
(4068,209,1)
(4736,627,1)
(2324,1041,1)
(1379,5051,1)
(4363,627,1)
(1473,4647,1)
(2813,1351,1)
(5648,3142,1)
(1072,15,1)
(4965,627,1)
(318,1263,1)
(1813,627,1)
(2316,3979,1)
(2840,2821,1)
(885,5044,1)
(3385,1696,1)
(2332,4248,1)
(5250,4239,1)
(1167,415,1)
(4235,5059,1)
(4941,3991,1)
(515,3257,1)
(995,5004,1)
(187,4417,1)
(4524,5187,1)
(3842,3940,1)
(4714,3183,1)
(4808,4884,1)
(2203,3986,1)
(389,3184,1)
(2466,3726,1)
(1843,1714,1)
(285,4848,1)
(4740,1411,1)
(2600,3582,1)
(1175,627,1)
(473,3512,1)
(4088,1188,1)
(3979,2997,1)
(3300,677,1)
(1460,1349,1)
(2262,1844,1)
(2500,5675,1)
(4587,2490,1)
(4733,1329,1)
(2311,2826,1)
(2523,5515,1)
(4457,4425,1)
(1059,3582,1)
(2326,2785,1)
(4459,2723,1)
(4663,2317,1)
(3706,1911,1)
(4508,3631,1)
(138,1786,1)
(4947,3984,1)
(1725,1416,1)
(2187,2286,1)
(1860,3097,1)
(4691,1844,1)
(4663,4449,1)
(426,1948,1)
(2137,1810,1)
(4233,3782,1)
(4515,1844,1)
(2123,1584,1)
(4590,1844,1)
(5682,1568,1)
(2066,1524,1)
(1919,1844,1)
(3068,3203,1)
(4763,1535,1)
(27,3110,1)
(5183,4832,1)
(2172,4501,1)
(1450,5682,1)
(3582,43,1)
(3800,183,1)
(3091,3267,1)
(5711,1634,1)
(3003,2614,1)
(4070,1019,1)
(3571,1533,1)
(1993,1332,1)
(1482,4374,1)
(4139,413,1)
(3092,3137,1)
(4766,1469,1)
(43,2614,1)
(3892,448,1)
(4242,194,1)
(4615,3384,1)
(2842,4938,1)
(4765,627,1)
(1163,1646,1)
(485,2190,1)
(3004,323,1)
(3979,3093,1)
(1017,3575,1)
(4725,5176,1)
(920,2022,1)
(2873,2143,1)
(5384,3204,1)
(5509,4389,1)
(1603,2314,1)
(1100,5753,1)
(4824,4348,1)
(2100,47,1)
(1856,1110,1)
(3931,5539,1)
(4578,2006,1)
(3837,501,1)
(2326,3093,1)
(3785,4084,1)
(2560,2082,1)
(3478,4472,1)
(4601,77,1)
(635,5028,1)
(2344,351,1)
(2581,2141,1)
(691,2590,1)
(3603,5363,1)
(1292,5013,1)
(1005,2508,1)
(4318,1815,1)
(2898,3739,1)
(3761,2190,1)
(3913,5429,1)
(2531,1844,1)
(4939,4083,1)
(4663,5469,1)
(4940,755,1)
(5425,2113,1)
(3225,4217,1)
(1151,60,1)
(215,1035,1)
(4900,4068,1)
(2904,182,1)
(47,627,1)
(4445,869,1)
(823,3064,1)
(4061,4610,1)
(4932,1675,1)
(2684,3566,1)
(1820,2598,1)
(3342,4536,1)
(5120,1172,1)
(4906,2190,1)
(4077,5025,1)
(1068,3035,1)
(5244,173,1)
(984,2190,1)
(5540,4973,1)
(3015,4271,1)
(337,5751,1)
(3765,1434,1)
(5370,2321,1)
(589,5284,1)
(3099,2542,1)
(2740,1393,1)
(4663,5373,1)
(115,265,1)
(486,1647,1)
(3765,3459,1)
(5597,746,1)
(536,962,1)
(3455,4867,1)
(1304,553,1)
(1645,1586,1)
(2916,1737,1)
(2326,1802,1)
(3384,4862,1)
(2771,3810,1)
(2052,4551,1)
(2520,331,1)
(1719,3100,1)
(4496,393,1)
(1857,2578,1)
(3848,195,1)
(1418,4934,1)
(1935,5729,1)
(519,1813,1)
(3439,2808,1)
(3784,3664,1)
(5020,405,1)
(1390,5059,1)
(3064,4916,1)
(2444,271,1)
(365,2279,1)
(795,284,1)
(3306,2774,1)
(3657,3359,1)
(1485,1777,1)
(598,4891,1)
(136,941,1)
(2925,3090,1)
(914,5059,1)
(4663,4848,1)
(394,5702,1)
(662,5290,1)
(4001,3233,1)
(3303,3637,1)
(1408,114,1)
(1528,4548,1)
(4929,5102,1)
(1580,5486,1)
(3189,1206,1)
(3884,5321,1)
(1720,1383,1)
(1875,1524,1)
(3122,3345,1)
(698,1731,1)
(967,1844,1)
(1592,956,1)
(89,4275,1)
(4422,5697,1)
(5359,2254,1)
(3506,2983,1)
(5682,1864,1)
(3955,1806,1)
(5608,627,1)
(4663,4731,1)
(3328,5149,1)
(39,5675,1)
(2886,3224,1)
(2229,1253,1)
(559,5543,1)
(3637,1857,1)
(2918,1456,1)
(2622,4611,1)
(5588,4776,1)
(276,2614,1)
(3119,4644,1)
(960,1167,1)
(1578,1612,1)
(4625,1315,1)
(4672,57,1)
(3682,5059,1)
(1279,570,1)
(5675,2739,1)
(1524,40,1)
(3979,5093,1)
(3290,3227,1)
(5266,5236,1)
(451,5429,1)
(1295,5157,1)
(2031,3538,1)
(3963,2629,1)
(1714,2036,1)
(3064,3676,1)
(4663,2486,1)
(1342,2190,1)
(4585,3889,1)
(2456,2072,1)
(4661,2936,1)
(1146,627,1)
(1574,3590,1)
(3887,4568,1)
(2621,3182,1)
(4695,3511,1)
(3104,3261,1)
(3979,4736,1)
(4019,627,1)
(2436,4214,1)
(5073,998,1)
(490,4888,1)
(4076,2642,1)
(3401,5027,1)
(2390,4129,1)
(3064,5115,1)
(273,3635,1)
(504,766,1)
(4309,655,1)
(5550,2190,1)
(978,823,1)
(2727,1741,1)
(2345,4677,1)
(4006,3068,1)
(1731,1863,1)
(2609,2190,1)
(334,2089,1)
(773,3623,1)
(3351,2898,1)
(5279,3015,1)
(2354,3578,1)
(1462,1921,1)
(3774,48,1)
(3569,5429,1)
(3214,5171,1)
(5568,1923,1)
(907,4871,1)
(4723,676,1)
(4253,2857,1)
(4319,897,1)
(1576,4990,1)
(973,3026,1)
(856,3693,1)
(503,3342,1)
(5682,281,1)
(4068,4894,1)
(933,840,1)
(2045,2297,1)
(3802,1844,1)
(5494,1844,1)
(1838,5100,1)
(5598,4261,1)
(49,1195,1)
(3248,537,1)
(3726,3103,1)
(1172,3500,1)
(3668,5493,1)
(3617,3351,1)
(5658,2946,1)
(3715,1257,1)
(4700,2540,1)
(5522,4323,1)
(4522,894,1)
(2222,2736,1)
(2540,3766,1)
(2520,3039,1)
(3734,4707,1)
(1867,4377,1)
(3864,1842,1)
(3064,5373,1)
(5682,816,1)
(5689,1844,1)
(1250,1983,1)
(1180,384,1)
(958,383,1)
(1372,1404,1)
(4914,1844,1)
(358,5502,1)
(991,431,1)
(5112,5569,1)
(4142,4452,1)
(1633,2122,1)
(3911,5376,1)
(1460,122,1)
(531,3898,1)
(2408,5243,1)
(3180,831,1)
(3267,4306,1)
(2837,627,1)
(3840,2505,1)
(3844,627,1)
(5243,3692,1)
(2955,2604,1)
(714,14,1)
(2035,2848,1)
(2172,1902,1)
(3979,4746,1)
(1709,1192,1)
(5682,2392,1)
(1546,3604,1)
(5042,5582,1)
(4662,5664,1)
(5628,5459,1)
(854,3339,1)
(3638,2729,1)
(5406,1675,1)
(5639,3489,1)
(5022,4967,1)
(1025,2471,1)
(1480,2454,1)
(1682,211,1)
(1056,1844,1)
(408,939,1)
(4268,2793,1)
(3641,627,1)
(4435,2287,1)
(1322,2162,1)
(1270,2215,1)
(3064,3821,1)
(4663,3707,1)
(3064,2540,1)
(724,4250,1)
(884,2520,1)
(4624,3671,1)
(3984,4764,1)
(5401,609,1)
(54,2334,1)
(2326,2255,1)
(2702,1039,1)
(3327,3729,1)
(1615,3978,1)
(2918,2030,1)
(4165,2018,1)
(1698,4745,1)
(2063,3990,1)
(4872,5082,1)
(686,627,1)
(2991,5537,1)
(4888,5722,1)
(5718,3929,1)
(1524,3757,1)
(3639,2138,1)
(833,68,1)
(5647,2218,1)
(3979,5099,1)
(2591,740,1)
(871,2970,1)
(5196,5429,1)
(3388,2302,1)
(901,132,1)
(1964,2488,1)
(1581,1656,1)
(163,1576,1)
(2172,3041,1)
(4171,1948,1)
(3777,2235,1)
(1873,5584,1)
(5224,5251,1)
(925,2741,1)
(1489,4094,1)
(3982,2190,1)
(4200,400,1)
(5491,3701,1)
(4285,2034,1)
(5634,195,1)
(4768,4561,1)
(442,2481,1)
(1767,195,1)
(2856,5468,1)
(2629,5152,1)
(5413,1073,1)
(4341,453,1)
(4598,5361,1)
(3969,5104,1)
(132,2622,1)
(4854,1844,1)
(2728,3510,1)
(1806,2370,1)
(109,1844,1)
(5605,4499,1)
(4545,4940,1)
(5604,5144,1)
(952,1749,1)
(1312,2076,1)
(4254,5059,1)
(4526,5580,1)
(3328,5675,1)
(4642,5429,1)
(5744,2473,1)
(3083,28,1)
(4889,1844,1)
(2929,1946,1)
(4900,4209,1)
(2089,4273,1)
(910,943,1)
(426,3739,1)
(3286,5655,1)
(2897,3139,1)
(541,1106,1)
(4314,3176,1)
(1877,2888,1)
(3953,1564,1)
(814,3372,1)
(1246,1082,1)
(267,3064,1)
(2275,2837,1)
(3043,5509,1)
(5560,1844,1)
(2447,2032,1)
(835,5547,1)
(696,3015,1)
(637,3780,1)
(2818,5396,1)
(2043,1275,1)
(2949,881,1)
(4221,1844,1)
(3495,3365,1)
(4092,1042,1)
(1670,5671,1)
(2665,648,1)
(5067,1663,1)
(610,3592,1)
(3246,23,1)
(5502,195,1)
(5629,4636,1)
(983,1440,1)
(5539,5704,1)
(2998,4259,1)
(2640,1639,1)
(1765,1275,1)
(169,5153,1)
(5469,5059,1)
(4948,858,1)
(441,5267,1)
(1345,5714,1)
(1259,3635,1)
(5742,4363,1)
(197,3551,1)
(494,4470,1)
(3064,1031,1)
(664,1856,1)
(2473,4897,1)
(4841,1152,1)
(5250,4915,1)
(2127,1077,1)
(2520,4991,1)
(5537,2388,1)
(2079,4244,1)
(3234,2666,1)
(1960,138,1)
(3328,1101,1)
(5335,3185,1)
(4940,5629,1)
(680,3840,1)
(284,5274,1)
(4834,468,1)
(3463,3533,1)
(4298,661,1)
(4224,2399,1)
(3448,79,1)
(1059,195,1)
(3216,4403,1)
(611,1079,1)
(3094,4685,1)
(3908,5059,1)
(5159,5629,1)
(2918,5749,1)
(2918,3821,1)
(2918,1647,1)
(3979,1456,1)
(1478,2357,1)
(75,1396,1)
(1019,4618,1)
(2215,1174,1)
(4249,3084,1)
(2402,627,1)
(5351,1199,1)
(2248,4803,1)
(533,1315,1)
(5378,256,1)
(1539,670,1)
(723,3550,1)
(2885,549,1)
(726,1859,1)
(4098,1446,1)
(2271,3824,1)
(5502,3582,1)
(326,1782,1)
(1971,2559,1)
(3439,1844,1)
(4309,2966,1)
(3231,3718,1)
(5409,5322,1)
(3575,4024,1)
(1522,2353,1)
(1891,3761,1)
(5093,3681,1)
(157,2453,1)
(1125,4391,1)
(5207,3103,1)
(3088,563,1)
(2516,2000,1)
(3965,1574,1)
(2291,1215,1)
(204,2796,1)
(5066,1243,1)
(1147,2829,1)
(2882,199,1)
(2990,3958,1)
(1336,1871,1)
(3248,3816,1)
(355,1193,1)
(2404,5059,1)
(4707,5699,1)
(382,2647,1)
(1402,3582,1)
(4033,5287,1)
(1410,5006,1)
(2283,2872,1)
(667,3298,1)
(3778,5059,1)
(5483,4352,1)
(671,2051,1)
(5275,1844,1)
(2950,3948,1)
(1351,4068,1)
(5728,2804,1)
(792,1942,1)
(3407,1844,1)
(5136,5732,1)
(5314,2833,1)
(1487,2531,1)
(5095,1210,1)
(853,3481,1)
(5251,1675,1)
(5486,874,1)
(3552,1645,1)
(1847,1389,1)
(3185,2603,1)
(1658,291,1)
(847,975,1)
(5636,2973,1)
(1109,3728,1)
(3610,4411,1)
(638,3485,1)
(3402,3210,1)
(2488,5599,1)
(3017,3143,1)
(2918,5707,1)
(573,4612,1)
(1787,1465,1)
(763,2190,1)
(2764,3995,1)
(4663,4807,1)
(4218,5682,1)
(26,5592,1)
(135,4995,1)
(2133,5490,1)
(1870,1844,1)
(3726,2743,1)
(2132,1068,1)
(702,1157,1)
(3197,2072,1)
(357,5177,1)
(4743,2885,1)
(334,3032,1)
(2232,812,1)
(2322,3287,1)
(5419,3873,1)
(5682,4632,1)
(1426,2190,1)
(4426,3087,1)
(3279,620,1)
(5614,1936,1)
(3706,1844,1)
(2173,4132,1)
(4742,5760,1)
(280,2340,1)
(3728,2932,1)
(2353,2497,1)
(2414,908,1)
(584,3593,1)
(2870,5059,1)
(2917,2032,1)
(5399,3635,1)
(4145,627,1)
(4034,5397,1)
(4350,1684,1)
(5035,1234,1)
(3908,2694,1)
(170,4055,1)
(2464,1028,1)
(503,627,1)
(4404,441,1)
(2697,2303,1)
(4548,2149,1)
(3726,183,1)
(3782,1400,1)
(780,650,1)
(4474,4331,1)
(2224,787,1)
(954,5255,1)
(2479,4510,1)
(3368,4727,1)
(3925,3882,1)
(661,4841,1)
(4016,466,1)
(3552,1586,1)
(108,1595,1)
(2364,652,1)
(2248,1582,1)
(4223,1788,1)
(1534,3296,1)
(2939,3473,1)
(1805,4752,1)
(908,4013,1)
(1874,2242,1)
(4432,5073,1)
(569,1738,1)
(2099,1844,1)
(5574,4178,1)
(2037,2964,1)
(5480,1963,1)
(5207,5287,1)
(4663,816,1)
(5458,4946,1)
(5379,2609,1)
(4716,5686,1)
(962,1483,1)
(1423,1844,1)
(568,3104,1)
(3838,4542,1)
(4451,1029,1)
(3979,4916,1)
(1001,3579,1)
(4884,2716,1)
(3064,5099,1)
(1863,5059,1)
(4663,4628,1)
(4743,97,1)
(4420,2911,1)
(4263,5595,1)
(3026,5641,1)
(3064,5414,1)
(3243,2515,1)
(1535,4424,1)
(1449,5060,1)
(5464,3284,1)
(4964,0,1)
(588,1219,1)
(2174,4835,1)
(4422,4591,1)
(2651,3666,1)
(613,1133,1)
(177,1062,1)
(5696,5059,1)
(1048,5129,1)
(2821,3589,1)
(5278,2415,1)
(2134,1496,1)
(3979,1826,1)
(2581,627,1)
(5181,3860,1)
(3042,2009,1)
(4793,3231,1)
(1728,1620,1)
(5267,1407,1)
(2149,1518,1)
(3979,208,1)
(3877,1492,1)
(1398,1359,1)
(2263,1354,1)
(3808,4970,1)
(4951,3893,1)
(1719,627,1)
(1368,519,1)
(484,176,1)
(1433,3218,1)
(1483,5513,1)
(312,3639,1)
(1505,1266,1)
(792,2630,1)
(2289,2118,1)
(5214,4903,1)
(4497,169,1)
(4383,3383,1)
(3073,1848,1)
(2330,1799,1)
(522,3616,1)
(1509,2814,1)
(3529,5148,1)
(5000,1701,1)
(4663,5707,1)
(1611,1844,1)
(2844,5523,1)
(2673,607,1)
(1530,5059,1)
(44,735,1)
(2093,4465,1)
(2918,2540,1)
(869,2303,1)
(1096,4773,1)
(5473,5739,1)
(619,2190,1)
(3064,3150,1)
(2326,5115,1)
(3668,4141,1)
(3917,3294,1)
(5067,331,1)
(4154,3169,1)
(5291,3410,1)
(2322,2190,1)
(1238,5654,1)
(4492,1509,1)
(4878,916,1)
(2565,4451,1)
(1107,4506,1)
(5207,3204,1)
(5724,2943,1)
(1817,1889,1)
(1961,1721,1)
(512,2859,1)
(3684,3946,1)
(5006,4743,1)
(649,963,1)
(2918,4705,1)
(5050,3816,1)
(4195,2134,1)
(2097,49,1)
(4390,1005,1)
(5334,4924,1)
(5441,1559,1)
(5109,2787,1)
(1126,760,1)
(5274,3969,1)
(29,1168,1)
(3064,2152,1)
(4688,1396,1)
(415,627,1)
(3014,4808,1)
(101,949,1)
(1921,5015,1)
(878,4225,1)
(1475,282,1)
(5099,5059,1)
(1280,70,1)
(5284,1363,1)
(8,4830,1)
(121,1890,1)
(3000,1149,1)
(165,2046,1)
(267,5682,1)
(4442,4693,1)
(1805,1844,1)
(724,1313,1)
(1367,4787,1)
(1621,1388,1)
(2365,427,1)
(2172,5606,1)
(4818,4711,1)
(1195,2914,1)
(4773,2870,1)
(1551,2512,1)
(649,1844,1)
(1072,1844,1)
(378,793,1)
(4301,2725,1)
(734,4798,1)
(2382,5059,1)
(3496,2156,1)
(749,1747,1)
(2236,264,1)
(546,1957,1)
(351,2591,1)
(2822,261,1)
(1192,830,1)
(4068,1647,1)
(5204,428,1)
(283,4203,1)
(2923,627,1)
(4701,1844,1)
(1611,2942,1)
(1401,627,1)
(792,3703,1)
(115,1847,1)
(2918,5099,1)
(1672,5031,1)
(1309,1976,1)
(341,3140,1)
(1771,3647,1)
(3958,2288,1)
(4663,281,1)
(1213,1787,1)
(4343,3795,1)
(5712,3460,1)
(3470,2547,1)
(1824,5087,1)
(4229,2806,1)
(3882,3673,1)
(271,1886,1)
(245,1449,1)
(3627,1307,1)
(2792,108,1)
(1293,37,1)
(774,82,1)
(823,2902,1)
(1075,5059,1)
(208,5059,1)
(4902,868,1)
(5122,4947,1)
(2918,2406,1)
(4577,1109,1)
(3599,1257,1)
(5384,1574,1)
(2374,4255,1)
(2695,2338,1)
(2319,1776,1)
(1373,441,1)
(1537,58,1)
(4735,315,1)
(2954,3478,1)
(317,2080,1)
(1183,5047,1)
(1035,4712,1)
(1975,4652,1)
(931,5114,1)
(4021,1452,1)
(1819,5334,1)
(284,471,1)
(3264,1392,1)
(2918,2325,1)
(4532,1803,1)
(1421,5299,1)
(3861,1221,1)
(5448,1215,1)
(2719,1715,1)
(4663,4120,1)
(4894,4274,1)
(2714,5059,1)
(1893,3274,1)
(3563,3064,1)
(2326,3821,1)
(4356,3099,1)
(2529,3979,1)
(3714,4571,1)
(3793,4480,1)
(284,3771,1)
(3973,1476,1)
(5071,2688,1)
(2944,3878,1)
(3016,1154,1)
(4068,1647,2)
(2707,3764,2)
(5753,4447,2)
(3328,1101,2)
(2754,1354,2)
(5741,627,2)
(3178,5156,2)
(2969,1066,2)
(2204,716,2)
(5370,149,2)
(786,1844,2)
(3060,2283,2)
(4497,1844,2)
(3818,4058,2)
(83,5058,2)
(2969,1350,2)
(143,5406,2)
(448,1958,2)
(960,1167,2)
(5109,2700,2)
(4422,4381,2)
(2717,743,2)
(3668,5697,2)
(1089,1844,2)
(584,2190,2)
(3552,5022,2)
(724,1313,2)
(5282,2902,2)
(4215,584,2)
(378,3510,2)
(2539,4828,2)
(1098,1844,2)
(1416,5329,2)
(4868,1844,2)
(2354,3578,2)
(265,4544,2)
(5131,4618,2)
(2759,4319,2)
(3986,5194,2)
(4226,1034,2)
(1719,627,2)
(5242,1844,2)
(4405,734,2)
(2416,5059,2)
(1386,4350,2)
(2449,4611,2)
(3455,1947,2)
(3064,4412,2)
(375,5120,2)
(2600,4295,2)
(5100,1350,2)
(565,627,2)
(2084,2344,2)
(4114,1081,2)
(4897,1426,2)
(3011,1400,2)
(513,1350,2)
(1077,1350,2)
(5682,2406,2)
(4517,3177,2)
(4033,2265,2)
(5067,5675,2)
(2435,4087,2)
(4867,2380,2)
(4400,2248,2)
(1717,796,2)
(4280,1844,2)
(5599,4054,2)
(3064,1456,2)
(5394,2936,2)
(2523,36,2)
(4622,1034,2)
(1926,2288,2)
(1320,2976,2)
(2619,1129,2)
(4849,991,2)
(1937,3759,2)
(906,2588,2)
(3596,3227,2)
(3706,1844,2)
(5536,10,2)
(2273,1011,2)
(1139,1157,2)
(1645,5022,2)
(5483,5397,2)
(4244,2190,2)
(1141,2038,2)
(2004,298,2)
(3913,570,2)
(1866,1581,2)
(4855,774,2)
(1367,1883,2)
(5583,4450,2)
(3636,2816,2)
(2042,2930,2)
(5424,2801,2)
(2419,1714,2)
(3563,2241,2)
(1325,3790,2)
(3265,1191,2)
(3636,4295,2)
(5071,5608,2)
(1840,2899,2)
(4560,2655,2)
(2088,734,2)
(4148,2721,2)
(2416,3064,2)
(2240,107,2)
(378,4738,2)
(4140,665,2)
(2084,1508,2)
(2294,1523,2)
(2917,276,2)
(1972,3919,2)
(4032,195,2)
(2882,199,2)
(598,608,2)
(5335,259,2)
(2582,2512,2)
(1830,2748,2)
(3039,2748,2)
(455,3790,2)
(2878,1655,2)
(3328,5149,2)
(142,5736,2)
(5067,3417,2)
(5262,4665,2)
(4056,5059,2)
(2826,1626,2)
(3967,2300,2)
(3171,2954,2)
(718,5059,2)
(3532,716,2)
(9,2655,2)
(4126,1354,2)
(4478,1983,2)
(1668,2885,2)
(5633,195,2)
(5052,3986,2)
(5720,5059,2)
(3269,4567,2)
(3304,1350,2)
(3007,5486,2)
(2326,4084,2)
(1110,1844,2)
(5208,2226,2)
(3979,4102,2)
(3762,5365,2)
(65,3031,2)
(5017,1565,2)
(859,2500,2)
(4059,1948,2)
(4637,3355,2)
(3064,4300,2)
(1921,1715,2)
(4239,1850,2)
(5448,3421,2)
(2957,5397,2)
(3979,4705,2)
(5205,3579,2)
(2685,897,2)
(2617,4693,2)
(1067,581,2)
(158,2190,2)
(4418,4834,2)
(5162,4341,2)
(844,372,2)
(2197,2813,2)
(5459,3060,2)
(724,2520,2)
(1871,4788,2)
(3636,276,2)
(4948,5048,2)
(115,5683,2)
(880,627,2)
(749,3300,2)
(3459,1297,2)
(3831,850,2)
(5348,1741,2)
(5475,3488,2)
(542,2083,2)
(5272,1741,2)
(108,1595,2)
(936,1624,2)
(5682,4731,2)
(4093,1806,2)
(4015,4765,2)
(2517,3421,2)
(1999,1715,2)
(3586,2813,2)
(3051,3909,2)
(2926,5629,2)
(4426,1844,2)
(3521,2279,2)
(4120,5406,2)
(4958,5468,2)
(670,5415,2)
(4722,4097,2)
(2808,1844,2)
(1478,2452,2)
(5148,2256,2)
(2884,2248,2)
(942,5059,2)
(5081,3579,2)
(1555,5063,2)
(5469,1326,2)
(892,546,2)
(4980,2050,2)
(3488,3579,2)
(4761,2748,2)
(1294,1508,2)
(2770,2748,2)
(3573,3909,2)
(3956,2829,2)
(522,546,2)
(212,3635,2)
(2196,1715,2)
(941,190,2)
(2259,2748,2)
(3428,2902,2)
(2463,3474,2)
(1047,774,2)
(4496,3919,2)
(4341,2954,2)
(5370,3928,2)
(1723,4396,2)
(2639,1130,2)
(3064,2785,2)
(3638,2190,2)
(5433,4738,2)
(1961,924,2)
(3868,1268,2)
(1073,204,2)
(2174,204,2)
(2065,1806,2)
(1195,2248,2)
(1735,4902,2)
(2657,4042,2)
(3187,2410,2)
(2467,2813,2)
(1767,3582,2)
(1129,4167,2)
(5651,4828,2)
(5068,5058,2)
(3176,5550,2)
(3979,4905,2)
(1167,2666,2)
(3668,4141,2)
(4000,2190,2)
(500,2190,2)
(3253,5270,2)
(4815,2655,2)
(2918,3821,2)
(1523,2190,2)
(3843,3992,2)
(5322,3879,2)
(706,2822,2)
(3703,5604,2)
(1948,1034,2)
(619,2190,2)
(1959,4788,2)
(4624,1034,2)
(1811,5022,2)
(4055,3441,2)
(673,243,2)
(81,3579,2)
(3662,5287,2)
(5694,716,2)
(637,4500,2)
(3843,5683,2)
(3662,1141,2)
(23,2666,2)
(740,2629,2)
(3455,4291,2)
(3500,2190,2)
(2500,1663,2)
(1268,4775,2)
(5174,1983,2)
(1735,273,2)
(833,2248,2)
(1368,5058,2)
(702,1157,2)
(5322,1947,2)
(3202,897,2)
(5122,4583,2)
(5077,1844,2)
(42,1259,2)
(5622,3790,2)
(5448,1215,2)
(2885,743,2)
(566,4828,2)
(3640,1330,2)
(2772,2248,2)
(4760,1187,2)
(5540,1411,2)
(4255,1350,2)
(4971,1844,2)
(4022,195,2)
(2123,2899,2)
(4036,4768,2)
(3979,2255,2)
(4411,4786,2)
(5180,3584,2)
(4590,1844,2)
(4894,3919,2)
(3213,4583,2)
(4511,5194,2)
(4900,3979,2)
(5477,477,2)
(5437,4058,2)
(4627,1478,2)
(3400,1273,2)
(4738,1263,2)
(4381,2964,2)
(5286,2776,2)
(5633,3582,2)
(2222,2736,2)
(1719,2655,2)
(1714,4567,2)
(2177,4624,2)
(4321,4854,2)
(5056,2655,2)
(5534,3431,2)
(5108,2474,2)
(3790,563,2)
(3064,1230,2)
(1137,1923,2)
(3003,4390,2)
(3609,2452,2)
(5458,1844,2)
(1624,563,2)
(5384,4774,2)
(1801,991,2)
(3159,2190,2)
(5682,808,2)
(1011,4071,2)
(4686,1242,2)
(1946,627,2)
(2156,5536,2)
(3036,3739,2)
(5,2655,2)
(4230,4546,2)
(3064,4632,2)
(5682,4241,2)
(3161,4512,2)
(1913,3474,2)
(3691,2344,2)
(972,1144,2)
(3982,2190,2)
(2380,4500,2)
(4979,3582,2)
(2980,3790,2)
(4235,1777,2)
(1632,1326,2)
(1194,5621,2)
(1817,4231,2)
(3255,627,2)
(91,5113,2)
(2316,2902,2)
(1515,2265,2)
(2926,991,2)
(3979,754,2)
(3505,1610,2)
(3902,2483,2)
(1806,4297,2)
(4151,1081,2)
(3090,4940,2)
(5112,4797,2)
(97,627,2)
(801,4396,2)
(5584,3897,2)
(5565,5022,2)
(4776,984,2)
(2061,1417,2)
(2678,1844,2)
(537,52,2)
(1411,1411,2)
(5593,2700,2)
(4900,4068,2)
(1617,1844,2)
(3064,93,2)
(2004,4955,2)
(2902,1081,2)
(2522,897,2)
(3161,2793,2)
(2050,1923,2)
(5200,1508,2)
(5622,584,2)
(763,2190,2)
(1237,74,2)
(841,1489,2)
(836,4535,2)
(1301,3341,2)
(147,4948,2)
(2108,195,2)
(5036,563,2)
(3948,5622,2)
(4898,2655,2)
(1450,5392,2)
(305,584,2)
(3381,627,2)
(3764,2190,2)
(3242,1412,2)
(1026,3844,2)
(1350,4828,2)
(1179,4054,2)
(2943,884,2)
(2184,4636,2)
(4236,273,2)
(3859,1937,2)
(1400,408,2)
(3464,4391,2)
(5736,2241,2)
(2520,1663,2)
(3861,309,2)
(4937,5097,2)
(1385,1400,2)
(2923,627,2)
(2326,4449,2)
(1330,3239,2)
(2326,93,2)
(2710,2655,2)
(2431,2248,2)
(1480,1850,2)
(2964,3028,2)
(3238,3627,2)
(5516,4902,2)
(239,3582,2)
(4980,584,2)
(2283,3214,2)
(4633,3227,2)
(3795,1844,2)
(5638,3060,2)
(5474,627,2)
(3979,2406,2)
(2918,4916,2)
(3784,2773,2)
(3424,5764,2)
(5542,4471,2)
(4642,5429,2)
(1403,5392,2)
(574,3640,2)
(3777,2235,2)
(1016,3919,2)
(3067,273,2)
(1638,4295,2)
(3428,3247,2)
(3196,441,2)
(3877,4195,2)
(5047,3579,2)
(2318,2358,2)
(4964,2190,2)
(2918,601,2)
(3806,2344,2)
(4787,3064,2)
(3693,81,2)
(4864,573,2)
(463,5468,2)
(2918,209,2)
(4598,3612,2)
(1003,3640,2)
(3064,1778,2)
(1710,617,2)
(2954,2050,2)
(3091,2344,2)
(3376,2271,2)
(1027,584,2)
(2663,204,2)
(4191,984,2)
(1141,3635,2)
(755,5706,2)
(3979,4632,2)
(5682,1802,2)
(2674,4567,2)
(3543,3640,2)
(2369,4902,2)
(3877,1492,2)
(3420,2077,2)
(5539,5704,2)
(2221,1174,2)
(2557,4902,2)
(2044,1791,2)
(1248,1844,2)
(3619,2248,2)
(2462,3751,2)
(3167,717,2)
(4575,1994,2)
(1604,2655,2)
(924,5050,2)
(4852,2246,2)
(2723,3640,2)
(2278,5267,2)
(662,1698,2)
(500,1326,2)
(5058,4743,2)
(2630,1827,2)
(5130,3086,2)
(4132,1844,2)
(341,1844,2)
(1174,4432,2)
(1593,1129,2)
(2541,2885,2)
(3118,3640,2)
(1093,2474,2)
(308,3333,2)
(2326,3273,2)
(1137,276,2)
(109,1844,2)
(4663,4911,2)
(2241,4097,2)
(1997,5637,2)
(4611,4817,2)
(4663,3150,2)
(4437,1994,2)
(3673,5324,2)
(4662,3247,2)
(588,3681,2)
(994,132,2)
(1725,2248,2)
(5363,3726,2)
(3421,5417,2)
(2326,281,2)
(5716,5120,2)
(5741,4765,2)
(2164,5207,2)
(3917,5316,2)
(5264,5275,2)
(5401,609,2)
(5127,2435,2)
(4374,1746,2)
(2099,1844,2)
(2269,4244,2)
(5212,2580,2)
(2205,16,2)
(3399,1844,2)
(474,5022,2)
(2831,4097,2)
(944,4828,2)
(5212,2113,2)
(1428,1618,2)
(1045,2816,2)
(1586,2120,2)
(353,5059,2)
(368,4565,2)
(290,3579,2)
(2945,1764,2)
(5273,5752,2)
(3497,125,2)
(4126,1618,2)
(378,2898,2)
(4546,5683,2)
(3979,3273,2)
(5113,1259,2)
(2042,2753,2)
(2867,2976,2)
(1559,5429,2)
(4481,5683,2)
(4476,2863,2)
(5248,1983,2)
(1181,5430,2)
(5471,4244,2)
(4220,2000,2)
(784,4797,2)
(5133,2248,2)
(3844,627,2)
(3663,1081,2)
(1933,5113,2)
(1531,627,2)
(4524,5058,2)
(3848,2474,2)
(4840,1715,2)
(2933,962,2)
(4663,2785,2)
(3979,4894,2)
(3662,5067,2)
(5682,1568,2)
(4721,5249,2)
(4663,4736,2)
(2925,5706,2)
(152,5022,2)
(3635,1508,2)
(3668,5493,2)
(1957,3919,2)
(1050,911,2)
(578,563,2)
(484,176,2)
(3186,5059,2)
(3669,1396,2)
(1573,4534,2)
(4047,2038,2)
(2205,5324,2)
(1412,1035,2)
(1129,4549,2)
(3173,1342,2)
(2539,961,2)
(4530,2190,2)
(4554,106,2)
(1773,627,2)
(2523,2241,2)
(2326,2486,2)
(5509,1157,2)
(4876,1350,2)
(5497,4583,2)
(3049,2050,2)
(2632,1817,2)
(4365,943,2)
(2954,170,2)
(4807,4775,2)
(2480,5059,2)
(1634,1522,2)
(4416,924,2)
(1103,4828,2)
(593,1103,2)
(853,2190,2)
(2006,1326,2)
(3351,2898,2)
(105,3579,2)
(3268,3173,2)
(215,4583,2)
(1638,170,2)
(636,2604,2)
(2429,2190,2)
(4284,4098,2)
(1184,3060,2)
(501,3685,2)
(5609,5048,2)
(3408,2329,2)
(4740,1411,2)
(4040,5113,2)
(4068,1775,2)
(2979,1842,2)
(4425,2190,2)
(5224,4721,2)
(2821,372,2)
(4768,1129,2)
(1357,2241,2)
(490,4550,2)
(2326,4736,2)
(46,5226,2)
(4734,3635,2)
(5397,2226,2)
(4968,4583,2)
(3625,1714,2)
(5516,1983,2)
(5532,4693,2)
(1204,4689,2)
(3378,1478,2)
(2330,132,2)
(2682,1367,2)
(4160,1350,2)
(3960,5429,2)
(2974,627,2)
(1557,4583,2)
(3531,609,2)
(628,1326,2)
(408,3247,2)
(4990,5022,2)
(408,2241,2)
(2178,2753,2)
(4854,1844,2)
(2113,2853,2)
(3916,31,2)
(893,2753,2)
(1535,1034,2)
(678,3579,2)
(2123,1701,2)
(4989,5249,2)
(4742,5156,2)
(5042,5394,2)
(674,5464,2)
(931,756,2)
(5392,4791,2)
(871,521,2)
(5505,717,2)
(3391,2629,2)
(1701,627,2)
(742,1187,2)
(4877,5573,2)
(2918,5099,2)
(3277,1144,2)
(4381,5113,2)
(711,1081,2)
(4249,627,2)
(1965,3579,2)
(2143,915,2)
(2326,3114,2)
(869,490,2)
(2158,1844,2)
(1254,428,2)
(4377,4743,2)
(1501,4381,2)
(2160,2334,2)
(1902,1400,2)
(2128,682,2)
(4663,4905,2)
(329,4818,2)
(3978,2032,2)
(4138,4951,2)
(2918,4705,2)
(1316,4042,2)
(4578,1326,2)
(257,2643,2)
(1379,1844,2)
(4688,941,2)
(2394,10,2)
(3550,1994,2)
(1478,2357,2)
(2098,4788,2)
(1610,1670,2)
(5536,1844,2)
(2068,3751,2)
(2430,4442,2)
(2326,5373,2)
(4236,3086,2)
(4590,5394,2)
(4971,1371,2)
(5445,1049,2)
(3539,3765,2)
(2771,1714,2)
(3176,2655,2)
(4626,1034,2)
(1735,1354,2)
(3797,2300,2)
(4238,3421,2)
(4337,1141,2)
(4929,5102,2)
(4246,4097,2)
(2643,204,2)
(3888,4516,2)
(5516,4244,2)
(3748,1994,2)
(5547,13,2)
(5682,2413,2)
(980,2655,2)
(4309,850,2)
(4968,4902,2)
(1746,1844,2)
(521,3921,2)
(559,1777,2)
(589,3578,2)
(386,911,2)
(1136,584,2)
(2326,5036,2)
(2214,627,2)
(5368,501,2)
(3979,2152,2)
(4428,3755,2)
(1244,4350,2)
(961,4828,2)
(3852,1714,2)
(1967,3173,2)
(4819,716,2)
(4864,170,2)
(4545,5706,2)
(408,584,2)
(851,4759,2)
(3395,1994,2)
(4318,4416,2)
(5683,4154,2)
(794,170,2)
(5752,777,2)
(1987,1715,2)
(965,2248,2)
(2046,5486,2)
(3364,1326,2)
(3607,2042,2)
(5119,627,2)
(3979,2402,2)
(3488,5282,2)
(3064,2748,2)
(2982,2474,2)
(3242,1035,2)
(1405,4058,2)
(1795,5097,2)
(2074,581,2)
(2168,1983,2)
(5120,3039,2)
(2753,2241,2)
(5643,1844,2)
(5286,65,2)
(2975,3640,2)
(2717,1994,2)
(250,477,2)
(2899,273,2)
(2256,4167,2)
(2215,4432,2)
(5585,2288,2)
(4666,4098,2)
(2578,756,2)
(2962,3408,2)
(2008,1844,2)
(2997,5059,2)
(5669,1167,2)
(4868,1714,2)
(2246,1326,2)
(2058,897,2)
(3169,4311,2)
(692,5017,2)
(1411,3467,2)
(823,4068,2)
(2520,3417,2)
(2512,4338,2)
(3064,5414,2)
(625,2633,2)
(260,1034,2)
(3953,3421,2)
(5682,1831,2)
(4331,1714,2)
(848,587,2)
(2326,1831,2)
(35,4788,2)
(3374,3526,2)
(3423,911,2)
(905,2226,2)
(2717,3442,2)
(2641,3278,2)
(415,627,2)
(4005,1508,2)
(2362,1035,2)
(4743,2885,2)
(3748,1692,2)
(3064,5469,2)
(4601,1714,2)
(3679,3965,2)
(943,5055,2)
(681,3759,2)
(458,5194,2)
(4947,5194,2)
(1953,2899,2)
(3301,584,2)
(4947,5287,2)
(3323,4058,2)
(4456,627,2)
(2102,2629,2)
(4652,4471,2)
(2834,1508,2)
(5757,224,2)
(1132,58,2)
(3774,1590,2)
(3474,2050,2)
(410,2000,2)
(1771,4550,2)
(4067,2539,2)
(1089,4761,2)
(1905,2099,2)
(2445,1174,2)
(1382,911,2)
(3506,2387,2)
(2872,5059,2)
(4401,1350,2)
(407,2248,2)
(1858,1141,2)
(2435,909,2)
(5282,3579,2)
(334,3552,2)
(2229,5148,2)
(3278,911,2)
(885,2452,2)
(2802,204,2)
(3260,962,2)
(3463,1141,2)
(136,5415,2)
(159,3921,2)
(2148,2190,2)
(4092,1329,2)
(182,5683,2)
(4018,195,2)
(81,2190,2)
(4314,3176,2)
(3064,4916,2)
(5230,5621,2)
(2436,3184,2)
(962,3185,2)
(5033,5120,2)
(3119,4644,2)
(3979,1802,2)
(2844,5289,2)
(4928,2655,2)
(4670,5324,2)
(3871,1489,2)
(1669,1157,2)
(1042,627,2)
(3083,2936,2)
(3765,3459,2)
(2828,455,2)
(541,1106,2)
(3566,2976,2)
(4102,665,2)
(3050,4471,2)
(5196,3826,2)
(3224,1052,2)
(4431,1400,2)
(4725,1817,2)
(3837,501,2)
(124,5766,2)
(3513,3765,2)
(1518,3741,2)
(4641,2463,2)
(1791,5645,2)
(3169,1916,2)
(4663,2255,2)
(3986,5071,2)
(4279,2367,2)
(4663,4632,2)
(4551,5436,2)
(4419,4087,2)
(2370,3277,2)
(1100,1326,2)
(916,627,2)
(3064,754,2)
(3411,428,2)
(2918,1775,2)
(2897,897,2)
(469,991,2)
(1994,3442,2)
(158,4033,2)
(305,4902,2)
(5159,5629,2)
(4681,1626,2)
(1964,2488,2)
(4311,991,2)
(4534,4381,2)
(5262,4396,2)
(151,5156,2)
(5622,3247,2)
(1539,670,2)
(332,4969,2)
(5025,897,2)
(2033,4718,2)
(3848,3582,2)
(4341,743,2)
(4794,2902,2)
(5576,1073,2)
(3490,5194,2)
(239,3625,2)
(4810,1342,2)
(503,627,2)
(3563,3979,2)
(601,5706,2)
(5622,1354,2)
(5127,4087,2)
(5550,1081,2)
(4743,97,2)
(1093,4295,2)
(1045,1923,2)
(4825,3790,2)
(3141,2410,2)
(1027,4583,2)
(2809,3064,2)
(215,4902,2)
(2633,1844,2)
(220,2050,2)
(1940,107,2)
(4699,1035,2)
(3425,3764,2)
(4235,5059,2)
(5682,601,2)
(1558,1511,2)
(4843,5324,2)
(2109,665,2)
(3122,4797,2)
(4,4637,2)
(1874,1400,2)
(845,1994,2)
(2556,5706,2)
(1638,1923,2)
(4049,68,2)
(2984,3726,2)
(3458,3584,2)
(351,3655,2)
(3701,2721,2)
(4544,4382,2)
(405,31,2)
(4068,599,2)
(3012,3582,2)
(244,5059,2)
(5338,5058,2)
(4174,897,2)
(5634,195,2)
(2326,3923,2)
(4194,3965,2)
(4195,3393,2)
(3979,5099,2)
(5765,4618,2)
(5550,2190,2)
(5438,5075,2)
(1712,581,2)
(5249,2898,2)
(5122,170,2)
(419,2873,2)
(5024,2655,2)
(4208,265,2)
(1522,2816,2)
(1550,1350,2)
(1526,215,2)
(1288,2072,2)
(3847,2075,2)
(5622,2616,2)
(2947,4128,2)
(2631,1265,2)
(3898,4788,2)
(2801,5429,2)
(5015,4896,2)
(587,3227,2)
(2753,2677,2)
(5682,4102,2)
(5464,1844,2)
(2604,2034,2)
(911,3579,2)
(3357,4969,2)
(5718,4381,2)
(1388,5643,2)
(3722,1354,2)
(1942,832,2)
(5622,2241,2)
(56,3579,2)
(3188,2329,2)
(3212,1608,2)
(1257,4567,2)
(5412,3764,2)
(5421,1052,2)
(2206,1157,2)
(2666,2137,2)
(5653,2666,2)
(167,204,2)
(4786,4668,2)
(2817,2241,2)
(5675,850,2)
(5427,2374,2)
(4542,850,2)
(1014,1844,2)
(1655,4529,2)
(3024,4583,2)
(4939,2251,2)
(4864,276,2)
(3973,4567,2)
(5137,3637,2)
(1426,2190,2)
(3428,5682,2)
(265,4382,2)
(590,4396,2)
(4201,3086,2)
(1566,1350,2)
(1241,859,2)
(1673,3552,2)
(2219,1081,2)
(5392,3086,2)
(2326,4807,2)
(2562,624,2)
(3761,1181,2)
(4475,1354,2)
(2200,523,2)
(2904,182,2)
(5120,4991,2)
(3361,5022,2)
(5117,1844,2)
(2500,1101,2)
(1136,2241,2)
(724,1638,2)
(2369,893,2)
(4802,101,2)
(3369,1326,2)
(1573,5003,2)
(2678,3790,2)
(3152,4775,2)
(1378,3747,2)
(4663,1831,2)
(3958,2288,2)
(4345,1618,2)
(2774,2452,2)
(1435,4450,2)
(2107,609,2)
(294,1215,2)
(1434,204,2)
(4794,5682,2)
(2811,3588,2)
(726,1859,2)
(2113,4999,2)
(5387,3640,2)
(239,4797,2)
(2948,3086,2)
(4016,466,2)
(251,3618,2)
(3571,1737,2)
(2326,4731,2)
(3064,4120,2)
(223,1049,2)
(1663,2500,2)
(2236,2748,2)
(4973,1411,2)
(1785,1478,2)
(573,3474,2)
(403,3421,2)
(3034,1844,2)
(5528,4138,2)
(1963,1844,2)
(4411,4058,2)
(3207,1946,2)
(1373,441,2)
(797,3790,2)
(345,3579,2)
(2477,1844,2)
(4177,2160,2)
(5372,1844,2)
(3533,3635,2)
(5410,2748,2)
(2105,4324,2)
(3158,546,2)
(4799,146,2)
(3894,991,2)
(4553,1034,2)
(3125,4788,2)
(4535,1411,2)
(449,1844,2)
(3578,1234,2)
(2328,4621,2)
(2099,2790,2)
(4324,2190,2)
(919,3495,2)
(5488,4788,2)
(697,1590,2)
(360,2748,2)
(276,1983,2)
(5378,1850,2)
(1884,4828,2)
(5282,3064,2)
(2323,1081,2)
(1533,1350,2)
(2870,1737,2)
(5519,2629,2)
(1421,3790,2)
(2520,1101,2)
(3261,1268,2)
(5695,2344,2)
(2477,3407,2)
(1853,3017,2)
(4902,1925,2)
(2211,2226,2)
(4357,136,2)
(3873,1350,2)
(4379,2469,2)
(2421,46,2)
(4591,2128,2)
(1802,2032,2)
(1218,2248,2)
(3628,3060,2)
(5661,5430,2)
(3523,5235,2)
(41,627,2)
(2583,4350,2)
(4313,4828,2)
(4318,1721,2)
(696,3637,2)
(5074,2473,2)
(44,5419,2)
(122,1845,2)
(5193,3421,2)
(5250,4239,2)
(3351,3510,2)
(5682,1778,2)
(4905,5113,2)
(5630,3640,2)
(4636,793,2)
(1628,2248,2)
(2964,716,2)
(1107,2936,2)
(674,4500,2)
(4205,3640,2)
(210,4105,2)
(1424,4788,2)
(1886,128,2)
(3315,3579,2)
(239,4719,2)
(856,3579,2)
(1011,3747,2)
(4667,4192,2)
(5537,1844,2)
(3468,2248,2)
(2701,4786,2)
(102,195,2)
(4980,276,2)
(2595,627,2)
(556,2248,2)
(4068,1864,2)
(1565,500,2)
(3688,2655,2)
(5157,3759,2)
(4078,1844,2)
(2673,2234,2)
(3632,3389,2)
(2500,1575,2)
(1791,2391,2)
(408,2616,2)
(4407,3579,2)
(1451,716,2)
(4254,5334,2)
(2406,1741,2)
(4197,4828,2)
(5423,884,2)
(5645,751,2)
(3979,2821,2)
(1139,1531,2)
(1098,4828,2)
(1311,1400,2)
(1920,4934,2)
(1652,1129,2)
(3182,2666,2)
(5284,3578,2)
(3045,3579,2)
(3879,674,2)
(5682,3273,2)
(5224,793,2)
(1072,4934,2)
(5682,987,2)
(4216,1767,2)
(3074,3586,2)
(5682,4736,2)
(555,706,2)
(2555,627,2)
(3637,3584,2)
(2399,4583,2)
(593,4828,2)
(4323,2226,2)
(1509,1610,2)
(2856,5468,2)
(1091,1698,2)
(408,4583,2)
(1749,1478,2)
(4169,5289,2)
(1116,3662,2)
(455,523,2)
(5002,1081,2)
(4233,1400,2)
(2907,5634,2)
(3805,4450,2)
(1268,2190,2)
(3662,1574,2)
(3979,2758,2)
(5174,5683,2)
(3695,3772,2)
(796,2358,2)
(122,2404,2)
(1222,2234,2)
(2802,2663,2)
(2723,1860,2)
(3036,3510,2)
(4923,2816,2)
(510,441,2)
(1106,1844,2)
(197,5394,2)
(318,2251,2)
(4136,2721,2)
(2637,195,2)
(5226,107,2)
(5677,1326,2)
(2918,5115,2)
(5467,2369,2)
(1923,170,2)
(5334,4924,2)
(4663,209,2)
(5486,4788,2)
(2857,1508,2)
(35,4396,2)
(63,609,2)
(39,3039,2)
(1813,5058,2)
(733,2588,2)
(4683,410,2)
(3973,1476,2)
(4885,1350,2)
(3791,5079,2)
(3883,3060,2)
(2209,3640,2)
(5127,5392,2)
(5120,3406,2)
(1523,3130,2)
(3683,3286,2)
(889,2776,2)
(5682,2317,2)
(1910,2655,2)
(2579,5324,2)
(1328,2344,2)
(782,3745,2)
(1203,5120,2)
(466,4406,2)
(297,1806,2)
(5355,706,2)
(2906,1626,2)
(4587,3600,2)
(2698,716,2)
(4944,2248,2)
(117,5706,2)
(3714,3060,2)
(1996,2508,2)
(1958,5397,2)
(2696,5766,2)
(3263,1618,2)
(5347,5394,2)
(1575,2748,2)
(2918,3093,2)
(3880,3263,2)
(3056,1034,2)
(4037,4567,2)
(3671,1034,2)
(939,4530,2)
(2889,3919,2)
(4068,2655,2)
(4349,2813,2)
(1130,2159,2)
(2936,4291,2)
(2391,5645,2)
(3296,149,2)
(4906,2190,2)
(4451,563,2)
(5548,273,2)
(4286,5120,2)
(3979,281,2)
(1453,3907,2)
(621,2279,2)
(885,5044,2)
(2213,4788,2)
(3064,4628,2)
(950,627,2)
(5668,5059,2)
(4507,1326,2)
(4187,4567,2)
(2736,4553,2)
(1463,716,2)
(4390,2614,2)
(4867,3879,2)
(838,170,2)
(2906,5059,2)
(267,5682,2)
(3695,2344,2)
(4018,850,2)
(5162,453,2)
(2326,4628,2)
(5365,243,2)
(2117,1034,2)
(1275,1702,2)
(4279,4391,2)
(1493,1777,2)
(272,774,2)
(5174,2241,2)
(1846,1590,2)
(4389,1157,2)
(3710,4295,2)
(4287,2288,2)
(2406,627,2)
(4196,1958,2)
(5424,2126,2)
(2402,627,2)
(2753,523,2)
(2753,2616,2)
(74,1350,2)
(3979,4084,2)
(3270,5394,2)
(1986,4551,2)
(3067,3086,2)
(2326,1568,2)
(2633,3656,2)
(3839,1268,2)
(987,3488,2)
(3263,485,2)
(4746,1367,2)
(1182,2248,2)
(4641,3151,2)
(465,3640,2)
(457,5120,2)
(2529,167,2)
(4577,1994,2)
(1871,2190,2)
(2777,4636,2)
(2873,2015,2)
(2143,2015,2)
(3142,627,2)
(1430,4567,2)
(931,2022,2)
(2613,372,2)
(2349,2655,2)
(739,3845,2)
(4117,706,2)
(4306,2344,2)
(5207,3204,2)
(1326,5059,2)
(1505,3552,2)
(3635,5552,2)
(3790,5055,2)
(4170,2190,2)
(2870,5059,2)
(1331,2721,2)
(3064,4911,2)
(3284,4500,2)
(195,1073,2)
(4369,1326,2)
(3683,3909,2)
(5682,1752,2)
(2016,4058,2)
(3079,1326,2)
(1166,4929,2)
(2113,1326,2)
(2741,3790,2)
(5174,523,2)
(1822,1844,2)
(5566,4765,2)
(2974,2452,2)
(3949,2936,2)
(490,4888,2)
(3224,1844,2)
(127,3902,2)
(605,2721,2)
(2515,1157,2)
(2286,204,2)
(1841,3940,2)
(5528,1034,2)
(3396,2042,2)
(573,276,2)
(1935,1777,2)
(2019,4231,2)
(1797,3635,2)
(4050,109,2)
(2326,4102,2)
(3064,3646,2)
(2940,2776,2)
(3765,204,2)
(2787,318,2)
(3884,3578,2)
(3428,3979,2)
(4379,2521,2)
(5087,2248,2)
(3721,31,2)
(4674,1081,2)
(5138,1400,2)
(2676,2655,2)
(813,850,2)
(1037,1958,2)
(4206,5394,2)
(1477,1508,2)
(4149,5736,2)
(2437,1350,2)
(2114,3060,2)
(617,906,2)
(2918,5469,2)
(2355,2581,2)
(734,682,2)
(5748,5156,2)
(4663,2030,2)
(2580,627,2)
(5160,1268,2)
(4719,3402,2)
(4190,3236,2)
(2929,5267,2)
(4808,4884,2)
(3443,2452,2)
(679,4471,2)
(1125,4391,2)
(5277,551,2)
(2753,3247,2)
(3668,2326,2)
(5702,5020,2)
(4872,5022,2)
(340,1508,2)
(2326,1647,2)
(3745,1326,2)
(3848,627,2)
(4223,3534,2)
(4583,1925,2)
(305,523,2)
(3208,3579,2)
(2834,2344,2)
(4029,5384,2)
(3937,4381,2)
(1474,4529,2)
(1035,584,2)
(3524,4775,2)
(307,3979,2)
(4105,1601,2)
(2235,2655,2)
(1724,2954,2)
(3752,4324,2)
(2325,3488,2)
(4087,1450,2)
(4562,1983,2)
(5192,4788,2)
(2500,5149,2)
(2082,4567,2)
(4971,4450,2)
(3300,2616,2)
(1311,4780,2)
(3664,2773,2)
(122,4828,2)
(4060,2205,2)
(2258,4058,2)
(3760,627,2)
(5456,1817,2)
(2258,3392,2)
(4145,627,2)
(3668,3928,2)
(4062,4530,2)
(184,2748,2)
(1978,1081,2)
(2918,4628,2)
(3012,195,2)
(4954,3130,2)
(4910,2500,2)
(4968,584,2)
(2684,2976,2)
(2435,926,2)
(5543,1777,2)
(3459,204,2)
(3984,3730,2)
(5622,5683,2)
(5494,1844,2)
(1295,3759,2)
(2954,276,2)
(5549,523,2)
(2911,3837,2)
(1191,1715,2)
(2554,1330,2)
(1045,584,2)
(2064,1958,2)
(682,2190,2)
(4516,1626,2)
(330,2156,2)
(2499,1400,2)
(2916,1737,2)
(967,1035,2)
(1573,4567,2)
(1000,743,2)
(5682,2392,2)
(4054,1777,2)
(4346,4324,2)
(4168,3790,2)
(4308,31,2)
(4348,2523,2)
(609,1994,2)
(5645,408,2)
(852,1326,2)
(1061,2300,2)
(766,3176,2)
(3466,1844,2)
(2187,716,2)
(2271,3511,2)
(4968,4244,2)
(3717,217,2)
(3490,2000,2)
(2315,4456,2)
(4126,273,2)
(2621,627,2)
(470,1268,2)
(4097,2904,2)
(5629,1326,2)
(3247,3086,2)
(3687,5324,2)
(5165,1181,2)
(3581,1907,2)
(3952,469,2)
(3979,1752,2)
(1489,1859,2)
(4364,4105,2)
(4800,1478,2)
(5264,2050,2)
(652,2643,2)
(2393,5156,2)
(1450,5059,2)
(3939,1923,2)
(1117,2246,2)
(2041,441,2)
(2931,4761,2)
(3088,563,2)
(256,1850,2)
(4471,984,2)
(5642,3173,2)
(1716,195,2)
(4280,5075,2)
(1681,1034,2)
(312,2226,2)
(4752,1715,2)
(4668,1034,2)
(1362,4432,2)
(3254,911,2)
(2753,584,2)
(5613,5406,2)
(2326,4916,2)
(4919,5406,2)
(1221,309,2)
(3636,1923,2)
(1782,1590,2)
(288,500,2)
(3996,2959,2)
(1910,5059,2)
(2551,3940,2)
(5420,627,2)
(1918,2655,2)
(2820,5392,2)
(5224,3510,2)
(698,5706,2)
(2672,3640,2)
(3099,2542,2)
(2623,2072,2)
(2334,2745,2)
(1509,2190,2)
(5077,1350,2)
(613,1133,2)
(3984,2285,2)
(4137,2748,2)
(2963,1715,2)
(5377,1958,2)
(5622,1618,2)
(1129,3644,2)
(5682,816,2)
(2275,5324,2)
(2901,374,2)
(1012,3393,2)
(1387,4969,2)
(2600,1923,2)
(1730,3940,2)
(5502,3582,2)
(1322,716,2)
(4068,4120,2)
(4006,5059,2)
(2670,1777,2)
(24,1844,2)
(5050,4432,2)
(102,608,2)
(3693,473,2)
(2796,2187,2)
(5095,1960,2)
(1272,4379,2)
(3884,5321,2)
(2796,430,2)
(4632,3227,2)
(488,2190,2)
(1368,519,2)
(3064,3114,2)
(5067,370,2)
(123,4567,2)
(267,3064,2)
(3641,627,2)
(2728,4721,2)
(4534,2190,2)
(5561,4535,2)
(5163,4097,2)
(689,627,2)
(2097,49,2)
(865,3263,2)
(823,273,2)
(1737,1844,2)
(676,2701,2)
(5366,4442,2)
(3096,1181,2)
(1807,2899,2)
(2017,3640,2)
(3642,1573,2)
(4154,4311,2)
(5682,2402,2)
(3673,5194,2)
(1709,1181,2)
(5573,4307,2)
(483,4058,2)
(1359,942,2)
(711,2655,2)
(3540,1096,2)
(3614,5286,2)
(3787,4567,2)
(3777,1081,2)
(4429,5385,2)
(5692,31,2)
(4056,1737,2)
(2687,3996,2)
(5320,2248,2)
(2729,1329,2)
(5682,3197,2)
(505,1157,2)
(307,3064,2)
(899,1400,2)
(2532,984,2)
(3650,428,2)
(3855,2025,2)
(4161,3361,2)
(2700,5059,2)
(3012,3474,2)
(2753,4902,2)
(350,3739,2)
(242,3630,2)
(1351,3979,2)
(4050,1081,2)
(834,2059,2)
(4900,5682,2)
(2326,2406,2)
(4773,1350,2)
(1964,4054,2)
(659,1406,2)
(44,1844,2)
(5682,3821,2)
(4947,5324,2)
(5357,1527,2)
(1677,1157,2)
(2790,4574,2)
(3026,5641,2)
(5116,1993,2)
(358,1842,2)
(1183,3508,2)
(5370,2264,2)
(5647,5561,2)
(1891,1181,2)
(2434,5059,2)
(1083,1486,2)
(2688,5194,2)
(1308,2248,2)
(1597,1034,2)
(1040,1326,2)
(291,1035,2)
(5537,2227,2)
(3239,3636,2)
(2918,4911,2)
(2744,4324,2)
(3189,3257,2)
(4804,1081,2)
(2416,2902,2)
(455,1354,2)
(784,4928,2)
(5306,639,2)
(1025,1350,2)
(4297,4497,2)
(1633,5055,2)
(5414,1326,2)
(1098,193,2)
(1581,627,2)
(4837,5058,2)
(1549,3879,2)
(4497,169,2)
(2302,132,2)
(2173,1844,2)
(1369,3442,2)
(2404,4828,2)
(3979,3093,2)
(2851,3683,2)
(725,4450,2)
(1379,5059,2)
(5541,4450,2)
(4755,2246,2)
(4068,2413,2)
(4121,1400,2)
(1342,2190,2)
(4000,4396,2)
(3979,4911,2)
(4794,3979,2)
(4374,1844,2)
(3625,2419,2)
(534,334,2)
(2918,1647,2)
(5220,3755,2)
(1761,1608,2)
(4550,107,2)
(4474,1714,2)
(2942,2748,2)
(3064,4905,2)
(3646,627,2)
(1579,1844,2)
(2337,5194,2)
(5067,977,2)
(5120,331,2)
(2380,3879,2)
(3148,5432,2)
(3898,4396,2)
(5626,2473,2)
(408,1618,2)
(3781,4054,2)
(2471,1350,2)
(96,1478,2)
(3002,3902,2)
(1146,1539,2)
(4229,2329,2)
(2076,1400,2)
(4581,911,2)
(2126,1844,2)
(4338,1553,2)
(4721,3418,2)
(496,943,2)
(3031,5059,2)
(5516,2190,2)
(1767,195,2)
(1572,584,2)
(795,284,2)
(2609,2303,2)
(2090,851,2)
(2173,1608,2)
(5400,627,2)
(430,276,2)
(4823,3579,2)
(5051,280,2)
(1234,3421,2)
(1619,1508,2)
(1049,4037,2)
(5485,682,2)
(3928,3524,2)
(3534,1350,2)
(3772,2344,2)
(4331,1844,2)
(3306,2452,2)
(629,911,2)
(3438,5289,2)
(3799,1994,2)
(25,3579,2)
(639,4742,2)
(1359,2248,2)
(4134,2455,2)
(4092,1042,2)
(5682,5469,2)
(475,31,2)
(2265,5055,2)
(4898,4479,2)
(4923,170,2)
(5207,5287,2)
(5384,1574,2)
(2275,2837,2)
(70,1034,2)
(1544,908,2)
(329,441,2)
(849,265,2)
(1379,280,2)
(1751,3919,2)
(5682,754,2)
(1735,3247,2)
(2544,1157,2)
(3036,4721,2)
(3489,410,2)
(3482,1715,2)
(3225,3086,2)
(935,5079,2)
(4695,1326,2)
(501,1879,2)
(3979,1864,2)
(84,1626,2)
(4194,1844,2)
(1502,5764,2)
(4785,4471,2)
(3283,1350,2)
(78,5120,2)
(782,1326,2)
(610,3582,2)
(4003,2248,2)
(2034,2158,2)
(5270,5394,2)
(3979,2785,2)
(3637,1857,2)
(4254,5059,2)
(3731,2248,2)
(5754,3640,2)
(4984,991,2)
(1725,1416,2)
(1027,2816,2)
(5662,3060,2)
(2600,195,2)
(44,2945,2)
(1757,1326,2)
(170,2474,2)
(4457,4425,2)
(778,1034,2)
(3628,1844,2)
(2655,5388,2)
(2341,4788,2)
(2160,5215,2)
(39,3417,2)
(1467,2256,2)
(3086,936,2)
(823,3979,2)
(940,1396,2)
(3064,2152,2)
(43,2614,2)
(1776,2246,2)
(97,2885,2)
(3708,943,2)
(2377,3086,2)
(134,3421,2)
(1856,2666,2)
(2842,1034,2)
(3979,4449,2)
(5334,4991,2)
(653,2701,2)
(4472,3171,2)
(2316,5682,2)
(3064,2406,2)
(3045,5059,2)
(2484,5324,2)
(2292,4391,2)
(5554,897,2)
(1282,4244,2)
(1267,5059,2)
(668,2701,2)
(2520,1575,2)
(5070,3582,2)
(1827,3940,2)
(647,2588,2)
(387,1947,2)
(2685,1844,2)
(4459,3640,2)
(2290,4583,2)
(5500,2452,2)
(51,3364,2)
(5708,2256,2)
(5531,2655,2)
(4834,46,2)
(4490,523,2)
(4499,2932,2)
(546,5343,2)
(2914,1737,2)
(110,441,2)
(2251,983,2)
(5057,1844,2)
(44,3283,2)
(4903,3159,2)
(271,2248,2)
(2832,5156,2)
(4909,1326,2)
(5282,5682,2)
(5228,1350,2)
(3446,924,2)
(3616,546,2)
(4834,2190,2)
(5688,2113,2)
(1203,5716,2)
(2548,3086,2)
(3064,565,2)
(254,4546,2)
(5333,10,2)
(1772,717,2)
(2124,198,2)
(1408,4097,2)
(1562,204,2)
(5500,847,2)
(2369,1618,2)
(2743,3618,2)
(319,1655,2)
(2452,1715,2)
(4500,2976,2)
(915,2015,2)
(4098,3753,2)
(2762,4969,2)
(4789,909,2)
(4003,1844,2)
(4701,767,2)
(1603,2314,2)
(4808,3640,2)
(2811,4546,2)
(3979,1831,2)
(2742,563,2)
(5682,2785,2)
(2246,5510,2)
(1887,1350,2)
(4033,2334,2)
(3460,2629,2)
(4128,265,2)
(5140,4530,2)
(1893,2906,2)
(716,5113,2)
(497,2248,2)
(5753,944,2)
(2187,5394,2)
(1717,2358,2)
(4660,1129,2)
(3328,977,2)
(3334,4432,2)
(4663,3707,2)
(1141,5055,2)
(3216,3421,2)
(14,2248,2)
(1520,5417,2)
(2469,4278,2)
(3837,509,2)
(538,3579,2)
(2701,1034,2)
(2507,1034,2)
(2918,5707,2)
(4051,931,2)
(164,4054,2)
(1123,546,2)
(3468,2646,2)
(282,2248,2)
(1511,627,2)
(18,4500,2)
(2637,3582,2)
(1406,170,2)
(5629,4636,2)
(269,3637,2)
(4670,2000,2)
(3172,563,2)
(2059,741,2)
(571,2721,2)
(1702,1630,2)
(3252,5086,2)
(5475,267,2)
(4951,3893,2)
(1174,157,2)
(1978,2655,2)
(2321,952,2)
(4379,3762,2)
(671,5486,2)
(4208,1111,2)
(4411,4636,2)
(5457,2655,2)
(1049,4567,2)
(1075,1737,2)
(996,3683,2)
(1510,991,2)
(2124,1081,2)
(3179,4567,2)
(1929,4567,2)
(1676,4534,2)
(5603,2539,2)
(2887,1844,2)
(3753,2065,2)
(1786,3448,2)
(4663,2413,2)
(5334,1101,2)
(5090,31,2)
(2175,1081,2)
(963,4567,2)
(4946,1715,2)
(2316,5059,2)
(2677,5683,2)
(876,408,2)
(3138,1438,2)
(5508,2473,2)
(2542,2190,2)
(473,81,2)
(5384,3877,2)
(1546,273,2)
(2361,3177,2)
(5078,2234,2)
(1092,915,2)
(3032,2089,2)
(3582,1073,2)
(378,3739,2)
(5369,5429,2)
(305,5683,2)
(4126,4583,2)
(5704,627,2)
(4242,5059,2)
(5470,627,2)
(3980,4828,2)
(635,1326,2)
(3930,3300,2)
(3143,4908,2)
(4787,2748,2)
(908,4013,2)
(3217,5683,2)
(580,3079,2)
(4789,926,2)
(102,3582,2)
(4767,4058,2)
(489,3003,2)
(1063,1034,2)
(1169,3086,2)
(2945,2043,2)
(2714,273,2)
(5430,5059,2)
(1994,1369,2)
(5020,405,2)
(4777,4396,2)
(823,5059,2)
(5682,5414,2)
(1936,1714,2)
(5409,5116,2)
(1482,4374,2)
(3797,627,2)
(4340,1925,2)
(3725,3965,2)
(1259,2344,2)
(2868,1326,2)
(3803,2816,2)
(3064,1831,2)
(4824,627,2)
(2714,5682,2)
(2320,2241,2)
(3979,1775,2)
(3024,3474,2)
(3568,1174,2)
(721,1350,2)
(904,4639,2)
(3092,4947,2)
(2101,1508,2)
(1680,734,2)
(5709,1871,2)
(106,2190,2)
(1911,1844,2)
(5116,1947,2)
(2471,1166,2)
(3370,627,2)
(5163,2265,2)
(3173,919,2)
(2687,4196,2)
(5438,4583,2)
(5000,2899,2)
(4663,4731,2)
(16,5324,2)
(2918,2413,2)
(1670,5683,2)
(5221,2748,2)
(1315,1844,2)
(4396,4785,2)
(4360,273,2)
(4663,2997,2)
(4788,3176,2)
(2677,1354,2)
(3890,5736,2)
(4886,2275,2)
(1240,1844,2)
(1512,4567,2)
(4039,3631,2)
(2264,1268,2)
(1175,627,2)
(2040,5432,2)
(2328,4666,2)
(4914,4691,2)
(1036,3919,2)
(5306,1844,2)
(4764,4947,2)
(612,4311,2)
(3181,51,2)
(737,2424,2)
(416,3632,2)
(2233,2607,2)
(2885,5068,2)
(1076,3631,2)
(1181,2915,2)
(1682,4765,2)
(1600,1081,2)
(2496,1844,2)
(2282,1655,2)
(5122,3474,2)
(656,1478,2)
(4416,1844,2)
(3662,3204,2)
(4037,1257,2)
(2472,3421,2)
(4102,1396,2)
(3397,1844,2)
(4968,5683,2)
(191,3176,2)
(1524,3757,2)
(2091,1350,2)
(5120,370,2)
(4031,1034,2)
(3150,3640,2)
(1997,3683,2)
(3704,1486,2)
(1773,1400,2)
(3135,3474,2)
(3942,3403,2)
(39,3406,2)
(3779,4450,2)
(3227,5633,2)
(4495,1715,2)
(4821,259,2)
(5682,2480,2)
(4285,2034,2)
(5516,5683,2)
(4663,4412,2)
(2326,1910,2)
(1363,3578,2)
(3979,1367,2)
(1196,4337,2)
(4295,3635,2)
(881,1844,2)
(3647,4550,2)
(394,4765,2)
(1384,609,2)
(2554,3640,2)
(3679,5429,2)
(3824,3511,2)
(3064,2758,2)
(4663,2402,2)
(2845,1723,2)
(4256,1919,2)
(2326,2821,2)
(4774,2205,2)
(5513,2939,2)
(4705,3640,2)
(920,756,2)
(5409,3879,2)
(985,1958,2)
(1949,1508,2)
(3441,2190,2)
(4831,4611,2)
(4301,4567,2)
(4007,2853,2)
(3979,1456,2)
(1259,5055,2)
(44,3778,2)
(281,5059,2)
(2326,2317,2)
(3431,5058,2)
(255,3086,2)
(3467,1715,2)
(2256,5647,2)
(5516,2241,2)
(2564,3637,2)
(3979,816,2)
(136,941,2)
(4346,2744,2)
(777,1844,2)
(5334,3406,2)
(3617,1489,2)
(2369,2241,2)
(5314,2038,2)
(4068,3821,2)
(4996,4828,2)
(3490,5324,2)
(1136,3247,2)
(2756,1406,2)
(1127,584,2)
(4484,4586,2)
(1081,2710,2)
(3975,3909,2)
(5089,1773,2)
(5607,5324,2)
(2277,1844,2)
(137,4567,2)
(4224,4583,2)
(3006,1035,2)
(4033,2426,2)
(5516,1354,2)
(3024,170,2)
(5711,1522,2)
(1486,2833,2)
(3840,4432,2)
(1746,1715,2)
(4122,5289,2)
(5524,3625,2)
(1401,627,2)
(2314,5683,2)
(4663,4628,2)
(4510,2971,2)
(1414,4802,2)
(2809,5682,2)
(171,3919,2)
(1991,3099,2)
(1388,5027,2)
(198,2655,2)
(1142,1034,2)
(5488,627,2)
(909,4450,2)
(5105,1273,2)
(5648,3142,2)
(4990,627,2)
(2529,4068,2)
(5475,2061,2)
(215,2616,2)
(5567,1396,2)
(4775,2190,2)
(1788,1350,2)
(2085,1326,2)
(5622,1983,2)
(5194,2000,2)
(1714,5055,2)
(5682,5099,2)
(2441,4460,2)
(1179,5059,2)
(5236,627,2)
(2773,1670,2)
(3064,4102,2)
(3351,3739,2)
(834,3573,2)
(3977,1034,2)
(3590,1655,2)
(3812,1960,2)
(98,1626,2)
(3345,4797,2)
(4089,3640,2)
(3776,1948,2)
(4166,3176,2)
(2599,1411,2)
(5216,1523,2)
(1724,743,2)
(1145,31,2)
(3004,1141,2)
(5116,4334,2)
(4150,897,2)
(363,4128,2)
(1889,4611,2)
(322,4902,2)
(5187,5058,2)
(3949,1844,2)
(3432,2976,2)
(408,273,2)
(2349,1081,2)
(4841,280,2)
(5465,1326,2)
(4804,2124,2)
(3507,4418,2)
(2520,3406,2)
(10,4701,2)
(5409,3921,2)
(243,962,2)
(3064,2486,2)
(4341,453,2)
(1766,1960,2)
(4234,1626,2)
(5070,195,2)
(857,4231,2)
(4295,3004,2)
(1398,2248,2)
(4914,911,2)
(5396,5113,2)
(4584,4934,2)
(4470,734,2)
(975,2452,2)
(5648,1081,2)
(1503,5397,2)
(1779,4872,2)
(525,625,2)
(2241,188,2)
(4156,1034,2)
(5766,5764,2)
(799,5113,2)
(2843,3640,2)
(267,5059,2)
(1137,584,2)
(4737,5113,2)
(2646,2248,2)
(4422,4567,2)
(2898,2251,2)
(3984,3673,2)
(4641,3012,2)
(4400,4056,2)
(471,2748,2)
(1225,273,2)
(1351,2748,2)
(338,3421,2)
(4266,5279,2)
(853,501,2)
(3064,1826,2)
(5283,4469,2)
(5269,1326,2)
(1112,2410,2)
(629,1844,2)
(3942,836,2)
(295,2643,2)
(3891,1539,2)
(2765,2748,2)
(318,1326,2)
(2600,170,2)
(3790,3635,2)
(5163,2334,2)
(1137,170,2)
(2039,4788,2)
(496,4097,2)
(936,149,2)
(4266,3637,2)
(4687,3540,2)
(394,4104,2)
(5625,276,2)
(1049,1257,2)
(3778,5059,2)
(1192,1181,2)
(295,5055,2)
(5403,991,2)
(503,2137,2)
(4794,3064,2)
(3371,5022,2)
(4596,455,2)
(3438,1844,2)
(1080,1350,2)
(3018,4743,2)
(1257,3847,2)
(940,31,2)
(4908,1844,2)
(2725,2072,2)
(4346,1844,2)
(4860,195,2)
(1912,2818,2)
(2365,1844,2)
(1842,4859,2)
(4130,2190,2)
(1958,213,2)
(777,3579,2)
(203,1523,2)
(5135,2248,2)
(5430,4928,2)
(592,4590,2)
(3747,2339,2)
(4352,5397,2)
(3979,2030,2)
(3529,5148,2)
(2934,1844,2)
(5279,3015,2)
(1177,2557,2)
(5067,284,2)
(2565,563,2)
(5397,2190,2)
(2297,4774,2)
(998,5378,2)
(1661,4583,2)
(2166,2655,2)
(4794,4068,2)
(830,1181,2)
(3636,838,2)
(38,897,2)
(2022,1994,2)
(3648,1326,2)
(4647,477,2)
(3286,2867,2)
(5647,2218,2)
(4043,3790,2)
(344,962,2)
(89,4275,2)
(240,5058,2)
(1093,2816,2)
(176,2456,2)
(149,3887,2)
(2118,3579,2)
(3741,3765,2)
(301,3837,2)
(5069,4743,2)
(5428,2629,2)
(3094,5384,2)
(1354,991,2)
(1206,3257,2)
(3455,3879,2)
(5122,1923,2)
(1236,1259,2)
(5017,500,2)
(4185,2748,2)
(1823,3500,2)
(3122,3345,2)
(2918,1015,2)
(2428,1551,2)
(3610,4411,2)
(3672,563,2)
(1583,4903,2)
(4477,1761,2)
(5459,5059,2)
(3442,2954,2)
(4663,2821,2)
(4856,1350,2)
(391,3442,2)
(22,1400,2)
(2444,2248,2)
(2395,3474,2)
(2501,2000,2)
(1826,717,2)
(4135,204,2)
(2926,5059,2)
(5187,1368,2)
(1193,2813,2)
(5559,4788,2)
(3990,3636,2)
(1706,5683,2)
(5622,273,2)
(1093,4583,2)
(5122,4295,2)
(494,734,2)
(4491,1350,2)
(2360,5058,2)
(2986,1081,2)
(4330,584,2)
(5370,2803,2)
(5548,3086,2)
(823,5682,2)
(5742,1850,2)
(200,2075,2)
(2150,3122,2)
(4369,4157,2)
(3147,3640,2)
(4366,2721,2)
(1459,2248,2)
(5032,1034,2)
(2071,1400,2)
(1392,1670,2)
(4784,1011,2)
(5174,3247,2)
(4625,1011,2)
(4182,1715,2)
(1931,3257,2)
(2151,1844,2)
(2584,2344,2)
(2502,2655,2)
(5582,5394,2)
(739,697,2)
(5174,4583,2)
(5552,1314,2)
(4706,4033,2)
(7,907,2)
(2538,3474,2)
(925,3790,2)
(4619,5683,2)
(4645,746,2)
(3474,5070,2)
(4443,1034,2)
(4496,393,2)
(2700,2939,2)
(4879,746,2)
(4663,5469,2)
(3560,1698,2)
(548,716,2)
(2918,4412,2)
(1710,2588,2)
(914,5059,2)
(5132,1777,2)
(875,4097,2)
(5434,5350,2)
(1,3908,2)
(2045,4774,2)
(3802,3095,2)
(1728,1268,2)
(3388,703,2)
(3569,2322,2)
(1300,1350,2)
(4384,5645,2)
(3794,4923,2)
(9,1081,2)
(5510,2329,2)
(3120,2452,2)
(1354,3185,2)
(4289,1415,2)
(234,4775,2)
(2600,2816,2)
(3838,850,2)
(3979,3669,2)
(4976,2773,2)
(2666,503,2)
(4250,2520,2)
(2015,3253,2)
(4239,1721,2)
(2743,183,2)
(3368,4727,2)
(1017,2954,2)
(3246,2666,2)
(3627,3579,2)
(489,2508,2)
(2791,3227,2)
(2268,3173,2)
(763,943,2)
(3428,3064,2)
(2352,2370,2)
(2848,3526,2)
(2326,3669,2)
(3823,5058,2)
(2600,2474,2)
(5611,2700,2)
(2589,1777,2)
(5658,2946,2)
(3536,2246,2)
(611,1079,2)
(2315,5324,2)
(176,4381,2)
(1723,4788,2)
(2477,5766,2)
(1445,455,2)
(5709,627,2)
(3181,1326,2)
(4392,4341,2)
(564,1157,2)
(4673,2500,2)
(455,4244,2)
(1157,1715,2)
(1338,3637,2)
(1336,4396,2)
(1893,1626,2)
(1045,276,2)
(5185,1350,2)
(1638,3474,2)
(1834,1844,2)
(3064,2997,2)
(292,2042,2)
(5120,1101,2)
(2344,3635,2)
(3979,1015,2)
(396,4054,2)
(4531,4799,2)
(1650,2246,2)
(5150,608,2)
(3339,3921,2)
(825,5159,2)
(2951,665,2)
(2514,1573,2)
(1765,1350,2)
(1318,1350,2)
(166,4567,2)
(5045,1777,2)
(3743,3640,2)
(4360,4236,2)
(2939,1354,2)
(5686,4258,2)
(1432,3919,2)
(5614,1714,2)
(4380,5058,2)
(5655,834,2)
(3397,2244,2)
(644,3579,2)
(1564,1215,2)
(1925,1486,2)
(77,4331,2)
(3706,1911,2)
(3705,1411,2)
(884,724,2)
(455,4583,2)
(319,1844,2)
(4759,962,2)
(1714,3635,2)
(3879,4291,2)
(2631,2246,2)
(3996,1958,2)
(1327,836,2)
(3684,4432,2)
(3436,5058,2)
(1532,167,2)
(523,743,2)
(3211,3521,2)
(858,5048,2)
(2342,2936,2)
(3905,2038,2)
(2936,1947,2)
(1594,1573,2)
(1288,4567,2)
(1904,5479,2)
(2002,4244,2)
(2764,3421,2)
(5490,2655,2)
(3038,1133,2)
(1096,1350,2)
(2304,3799,2)
(433,3086,2)
(4707,546,2)
(1839,3421,2)
(5642,5703,2)
(3015,4271,2)
(1309,1976,2)
(5006,743,2)
(3584,1994,2)
(292,3607,2)
(3180,3940,2)
(2051,5075,2)
(3755,2241,2)
(5371,876,2)
(2242,1400,2)
(3872,5194,2)
(1406,4583,2)
(5683,1354,2)
(767,1844,2)
(2887,4432,2)
(4489,2899,2)
(1404,2588,2)
(2621,3816,2)
(4923,2474,2)
(1093,3474,2)
(5214,4903,2)
(619,4396,2)
(422,1994,2)
(5464,4500,2)
(1111,265,2)
(3591,5058,2)
(3197,2072,2)
(4034,5397,2)
(1873,3897,2)
(4318,924,2)
(5264,4143,2)
(3130,2452,2)
(294,5022,2)
(4574,851,2)
(1293,3579,2)
(4612,2816,2)
(5609,1844,2)
(2555,4743,2)
(339,4788,2)
(3544,250,2)
(1919,5459,2)
(4307,2265,2)
(5696,5059,2)
(4341,1994,2)
(2930,2753,2)
(959,2700,2)
(438,794,2)
(1333,2863,2)
(305,1983,2)
(2863,4396,2)
(4143,195,2)
(3372,5207,2)
(4735,1994,2)
(208,5059,2)
(523,3442,2)
(1389,3159,2)
(690,627,2)
(2369,1354,2)
(1763,2607,2)
(2380,4105,2)
(4916,3640,2)
(4138,1034,2)
(2529,5059,2)
(5468,4357,2)
(1579,4680,2)
(2410,1034,2)
(2424,2666,2)
(79,3751,2)
(5542,3050,2)
(2496,1081,2)
(5457,1081,2)
(2724,195,2)
(4104,4765,2)
(1160,4110,2)
(1429,716,2)
(4465,1508,2)
(5615,2655,2)
(4334,4105,2)
(604,4049,2)
(2326,1752,2)
(4926,4902,2)
(5188,4054,2)
(3826,4033,2)
(1596,5059,2)
(2647,2265,2)
(2326,4705,2)
(4364,1947,2)
(1045,4583,2)
(831,3940,2)
(1433,2050,2)
(3027,1400,2)
(1828,4788,2)
(800,3863,2)
(2287,3442,2)
(4469,627,2)
(2623,4187,2)
(3969,5752,2)
(4436,1844,2)
(215,1354,2)
(2826,1443,2)
(5597,746,2)
(5393,743,2)
(1857,2578,2)
(4052,2687,2)
(4054,731,2)
(4364,5116,2)
(3572,2248,2)
(3951,4620,2)
(250,1717,2)
(129,2256,2)
(819,1777,2)
(2822,1844,2)
(2369,584,2)
(3969,1844,2)
(2447,5075,2)
(3671,4636,2)
(4788,1081,2)
(1452,4774,2)
(3979,4736,2)
(15,4934,2)
(3177,1574,2)
(4447,627,2)
(4725,1478,2)
(4157,1326,2)
(5488,4396,2)
(3101,3474,2)
(3659,4432,2)
(2501,5324,2)
(489,4390,2)
(3785,204,2)
(273,3635,2)
(1149,2097,2)
(2886,1187,2)
(5434,856,2)
(3009,991,2)
(5472,4828,2)
(4087,5392,2)
(4143,2050,2)
(5540,1715,2)
(1927,31,2)
(2603,659,2)
(5588,984,2)
(2074,1067,2)
(896,627,2)
(592,5394,2)
(3775,546,2)
(4139,5059,2)
(4814,1034,2)
(2297,627,2)
(177,1400,2)
(4023,4092,2)
(2918,1568,2)
(4703,1326,2)
(5559,4396,2)
(4828,1326,2)
(4893,4295,2)
(680,3840,2)
(5088,609,2)
(2581,1772,2)
(2668,1947,2)
(4606,2190,2)
(2089,3552,2)
(2228,1626,2)
(3093,4567,2)
(5487,2367,2)
(4663,2152,2)
(2056,1947,2)
(4441,1049,2)
(4298,280,2)
(5099,2655,2)
(3692,627,2)
(2140,1326,2)
(1637,666,2)
(1847,3843,2)
(874,4396,2)
(3979,5036,2)
(3979,209,2)
(4436,410,2)
(1818,1844,2)
(3114,1157,2)
(3324,5324,2)
(456,282,2)
(2762,1387,2)
(3826,158,2)
(5301,2780,2)
(4231,1632,2)
(1849,3552,2)
(748,924,2)
(3433,195,2)
(4968,1618,2)
(5649,2748,2)
(1274,4930,2)
(455,584,2)
(5254,5417,2)
(68,3832,2)
(3976,1632,2)
(1411,1715,2)
(3545,1958,2)
(5629,4786,2)
(3748,747,2)
(5305,897,2)
(315,1994,2)
(4549,5015,2)
(2262,4947,2)
(5705,1034,2)
(4017,2241,2)
(2603,991,2)
(3847,200,2)
(285,3640,2)
(5325,3635,2)
(4396,2226,2)
(3397,2151,2)
(2039,4396,2)
(5120,5675,2)
(1248,1014,2)
(2187,2286,2)
(1490,1350,2)
(1462,1715,2)
(2916,5059,2)
(4104,627,2)
(5378,1721,2)
(3652,943,2)
(2661,5058,2)
(509,853,2)
(4190,2248,2)
(1705,2000,2)
(4388,2369,2)
(3244,836,2)
(3064,1802,2)
(1584,2899,2)
(3456,1608,2)
(1551,2582,2)
(5050,627,2)
(2402,609,2)
(2555,4472,2)
(318,1859,2)
(1141,1992,2)
(5712,3635,2)
(1624,3790,2)
(112,1326,2)
(1429,5113,2)
(3763,2072,2)
(5381,4500,2)
(4527,5500,2)
(1554,4567,2)
(1901,2246,2)
(1659,1508,2)
(146,1326,2)
(5334,977,2)
(2865,2721,2)
(2161,584,2)
(1647,5706,2)
(2677,2616,2)
(5210,1842,2)
(3155,5059,2)
(1026,1400,2)
(1968,3579,2)
(4718,629,2)
(1442,5059,2)
(3733,1081,2)
(4892,2344,2)
(2018,734,2)
(1626,2226,2)
(4237,4058,2)
(876,5645,2)
(2593,1844,2)
(2695,5515,2)
(1713,4583,2)
(4691,1844,2)
(3612,1400,2)
(2969,4223,2)
(792,1284,2)
(3819,4471,2)
(4614,3666,2)
(1955,5316,2)
(659,991,2)
(1602,3579,2)
(4500,3514,2)
(820,3755,2)
(2380,1947,2)
(5102,5059,2)
(4965,1844,2)
(5321,3578,2)
(2954,2474,2)
(5671,5683,2)
(1762,4054,2)
(3558,4343,2)
(4088,3488,2)
(378,793,2)
(4864,584,2)
(4631,2748,2)
(5573,2745,2)
(594,1508,2)
(4108,2721,2)
(1163,5766,2)
(3439,1844,2)
(3279,2666,2)
(309,5156,2)
(3782,1400,2)
(3984,1012,2)
(4926,195,2)
(5022,4396,2)
(3689,3257,2)
(720,31,2)
(3130,2974,2)
(215,584,2)
(389,868,2)
(3029,4948,2)
(4006,4797,2)
(4342,2500,2)
(2009,1326,2)
(3979,4807,2)
(5267,182,2)
(4033,3103,2)
(5578,924,2)
(1919,1844,2)
(1416,2248,2)
(1361,410,2)
(296,1034,2)
(408,5683,2)
(5432,2190,2)
(732,546,2)
(1538,1392,2)
(2299,4058,2)
(2598,1523,2)
(1406,2474,2)
(1618,3428,2)
(2703,1157,2)
(2835,4828,2)
(4970,4902,2)
(2728,4058,2)
(1136,1354,2)
(2538,182,2)
(1113,242,2)
(4317,3797,2)
(364,717,2)
(5686,3043,2)
(1700,1608,2)
(1152,280,2)
(5682,4911,2)
(3602,408,2)
(689,1844,2)
(2689,4567,2)
(5163,943,2)
(5238,1011,2)
(1879,2816,2)
(4252,1259,2)
(1142,1844,2)
(4269,2607,2)
(2479,2971,2)
(2063,684,2)
(4663,2392,2)
(1019,4618,2)
(1415,2944,2)
(3636,584,2)
(2985,944,2)
(3668,3755,2)
(2234,5194,2)
(2283,2872,2)
(2546,5316,2)
(1735,3790,2)
(1330,3257,2)
(1187,3579,2)
(5102,1350,2)
(5067,1101,2)
(2326,2392,2)
(4802,546,2)
(4725,5176,2)
(4612,4583,2)
(2166,1081,2)
(3005,627,2)
(3280,4382,2)
(1439,3579,2)
(2369,2616,2)
(3027,4294,2)
(4908,5058,2)
(1407,1847,2)
(4460,2038,2)
(5050,537,2)
(3192,1777,2)
(4659,4586,2)
(368,4934,2)
(2816,2616,2)
(1847,1389,2)
(4271,3637,2)
(1136,3790,2)
(879,1714,2)
(2454,1850,2)
(818,3640,2)
(1027,170,2)
(2681,441,2)
(3409,1157,2)
(2753,4583,2)
(4704,2748,2)
(3709,3091,2)
(1925,1083,2)
(834,464,2)
(3682,5059,2)
(5171,5059,2)
(1917,2748,2)
(2923,4743,2)
(5101,1400,2)
(277,716,2)
(5370,1972,2)
(1136,5683,2)
(1367,2748,2)
(4591,682,2)
(4396,2138,2)
(1257,1049,2)
(678,5059,2)
(2226,4788,2)
(2533,1326,2)
(509,501,2)
(5370,3605,2)
(3337,4105,2)
(3427,5048,2)
(5268,4250,2)
(1783,3640,2)
(17,3919,2)
(1379,627,2)
(2033,1844,2)
(4671,584,2)
(3932,3579,2)
(3605,2810,2)
(1591,3638,2)
(2743,4385,2)
(860,195,2)
(1889,4231,2)
(686,1714,2)
(2404,5059,2)
(1815,924,2)
(5647,4328,2)
(5119,5194,2)
(3939,170,2)
(146,627,2)
(2766,5113,2)
(2092,4903,2)
(323,1141,2)
(3874,31,2)
(2904,1392,2)
(982,2241,2)
(5134,2190,2)
(4568,1624,2)
(2500,4991,2)
(4876,1737,2)
(3256,1923,2)
(4385,3618,2)
(3908,4567,2)
(1157,627,2)
(3869,4900,2)
(2863,2190,2)
(4979,195,2)
(2971,3173,2)
(4139,627,2)
(2994,408,2)
(4934,329,2)
(793,104,2)
(5409,1947,2)
(3863,908,2)
(4697,1350,2)
(3879,3019,2)
(5061,3764,2)
(581,1326,2)
(4811,4396,2)
(2610,3662,2)
(4920,880,2)
(5575,1400,2)
(3422,4168,2)
(3715,4567,2)
(5065,3474,2)
(2780,4567,2)
(2773,2334,2)
(2485,2666,2)
(2331,2721,2)
(5511,2410,2)
(1596,884,2)
(4867,4291,2)
(3764,1486,2)
(1863,5706,2)
(2918,3923,2)
(2087,1508,2)
(5207,4765,2)
(1491,4567,2)
(2637,1141,2)
(5682,5093,2)
(749,1747,2)
(4735,4472,2)
(1288,817,2)
(562,1326,2)
(2922,441,2)
(5629,3021,2)
(2918,1831,2)
(3500,850,2)
(1266,3552,2)
(1919,3060,2)
(4208,1844,2)
(302,1141,2)
(1672,1400,2)
(3480,3909,2)
(3979,4241,2)
(2721,1508,2)
(2241,1670,2)
(2616,204,2)
(2146,5683,2)
(957,5398,2)
(2778,2701,2)
(682,1573,2)
(4663,1864,2)
(53,3227,2)
(313,2246,2)
(743,1994,2)
(2021,4000,2)
(4911,627,2)
(4663,93,2)
(3567,4027,2)
(1919,24,2)
(1641,4797,2)
(1137,2474,2)
(2066,2792,2)
(1963,3586,2)
(2326,2152,2)
(3632,5055,2)
(2110,2452,2)
(5334,5675,2)
(4373,3474,2)
(619,3223,2)
(662,5429,2)
(1944,570,2)
(352,1844,2)
(1650,627,2)
(1329,619,2)
(5682,3093,2)
(5408,3060,2)
(1665,2616,2)
(1818,2328,2)
(514,627,2)
(4291,674,2)
(2888,1326,2)
(5092,1354,2)
(4940,5059,2)
(3909,250,2)
(1399,1844,2)
(1888,962,2)
(2170,2241,2)
(5682,1456,2)
(3472,2344,2)
(2109,3641,2)
(2902,938,2)
(5061,1844,2)
(47,273,2)
(5239,1326,2)
(1638,2816,2)
(5266,5236,2)
(868,1851,2)
(101,627,2)
(4008,5385,2)
(3575,2954,2)
(2001,4583,2)
(4485,546,2)
(2889,4048,2)
(649,4567,2)
(4068,1456,2)
(1058,716,2)
(4057,3421,2)
(1238,5654,2)
(670,1396,2)
(4200,1608,2)
(4301,5041,2)
(2262,2850,2)
(784,3685,2)
(2699,4319,2)
(743,709,2)
(2512,1698,2)
(2343,273,2)
(2356,1478,2)
(3267,2344,2)
(3979,4916,2)
(593,193,2)
(4032,5120,2)
(3202,4174,2)
(4663,2486,2)
(4527,2452,2)
(432,625,2)
(3682,1626,2)
(2388,3174,2)
(978,273,2)
(2446,4058,2)
(5634,3837,2)
(792,3875,2)
(2303,490,2)
(4644,1777,2)
(4615,2666,2)
(718,2026,2)
(3979,5414,2)
(2717,2954,2)
(2400,1715,2)
(1121,2629,2)
(5334,1663,2)
(3368,4934,2)
(1675,1034,2)
(337,3176,2)
(3439,2808,2)
(60,3526,2)
(157,1651,2)
(1537,4432,2)
(5120,1575,2)
(3645,2226,2)
(4534,4567,2)
(2326,808,2)
(2326,2480,2)
(1621,1388,2)
(2052,4551,2)
(2430,627,2)
(2486,5090,2)
(4900,2902,2)
(3577,4964,2)
(4302,2075,2)
(431,523,2)
(326,1590,2)
(4663,4249,2)
(2902,2655,2)
(4605,991,2)
(3481,501,2)
(2495,4396,2)
(4326,2666,2)
(4628,1508,2)
(4932,2232,2)
(1659,2344,2)
(3527,3526,2)
(876,2044,2)
(2120,5022,2)
(814,5207,2)
(1183,345,2)
(2833,3582,2)
(1905,897,2)
(2833,2038,2)
(1835,132,2)
(4260,794,2)
(1390,3790,2)
(3840,627,2)
(4363,1850,2)
(3917,2546,2)
(3335,3060,2)
(2936,4500,2)
(1134,1626,2)
(1678,3843,2)
(5067,3406,2)
(4307,2334,2)
(2668,4105,2)
(3111,273,2)
(919,1342,2)
(717,1018,2)
(5752,3579,2)
(1857,3584,2)
(4461,2721,2)
(5706,1326,2)
(162,2226,2)
(792,3347,2)
(2999,4828,2)
(2087,2344,2)
(3204,3177,2)
(4787,5682,2)
(3720,1723,2)
(3219,3790,2)
(4999,2853,2)
(5418,1844,2)
(2803,734,2)
(5003,4534,2)
(2474,4902,2)
(5682,2758,2)
(3636,4583,2)
(46,107,2)
(2187,204,2)
(5532,126,2)
(1808,273,2)
(1890,4788,2)
(565,911,2)
(5100,4112,2)
(99,2512,2)
(5267,1847,2)
(3921,1555,2)
(411,2234,2)
(670,941,2)
(4663,3273,2)
(4553,4243,2)
(3841,2474,2)
(3979,3646,2)
(5682,1864,2)
(2023,1925,2)
(4663,3676,2)
(4858,3227,2)
(3832,2248,2)
(3832,5059,2)
(1490,1080,2)
(5595,3640,2)
(2184,4058,2)
(2183,3060,2)
(3231,627,2)
(3098,2334,2)
(1375,1350,2)
(4383,5059,2)
(1219,3579,2)
(191,337,2)
(305,1618,2)
(2508,2796,2)
(2918,732,2)
(4251,2403,2)
(2580,2113,2)
(3979,3923,2)
(5122,2050,2)
(1006,4546,2)
(317,2474,2)
(2724,3474,2)
(2782,1723,2)
(5369,581,2)
(5516,273,2)
(2369,523,2)
(1908,2248,2)
(3692,3790,2)
(1703,4860,2)
(3760,5658,2)
(5176,1523,2)
(719,2279,2)
(2228,98,2)
(3186,2700,2)
(3607,2190,2)
(1188,3488,2)
(2038,2816,2)
(2578,3584,2)
(1741,2666,2)
(3720,627,2)
(1864,1081,2)
(907,2190,2)
(2159,1570,2)
(3476,4291,2)
(640,2954,2)
(4833,4797,2)
(2336,5417,2)
(390,1777,2)
(3760,1651,2)
(4066,1400,2)
(2937,1608,2)
(2806,2329,2)
(1911,3263,2)
(5242,1034,2)
(5627,2748,2)
(3525,204,2)
(134,2214,2)
(1171,1844,2)
(533,4095,2)
(3434,4567,2)
(3445,3421,2)
(1882,5194,2)
(4916,2017,2)
(1962,1157,2)
(2424,627,2)
(188,4877,2)
(4903,2190,2)
(138,3751,2)
(3174,1070,2)
(4362,3843,2)
(2581,5176,2)
(1052,908,2)
(215,4244,2)
(235,4471,2)
(1073,1532,2)
(5696,3685,2)
(4410,1508,2)
(2809,2902,2)
(5441,3662,2)
(529,1157,2)
(3385,2899,2)
(2941,1157,2)
(4538,1141,2)
(5494,3409,2)
(4889,3368,2)
(4663,754,2)
(5011,2607,2)
(3798,280,2)
(2520,977,2)
(2550,3790,2)
(2748,739,2)
(279,1400,2)
(2498,1844,2)
(1377,2000,2)
(4324,5194,2)
(4831,1523,2)
(3793,1326,2)
(2824,1350,2)
(3931,1081,2)
(2217,3640,2)
(2944,5059,2)
(4737,716,2)
(4832,273,2)
(28,3949,2)
(5615,1081,2)
(901,132,2)
(1147,2829,2)
(2918,2317,2)
(5430,4797,2)
(335,5610,2)
(144,2759,2)
(5473,4460,2)
(1008,850,2)
(4680,856,2)
(2032,276,2)
(4430,2655,2)
(3929,4381,2)
(1819,5334,2)
(3631,3625,2)
(274,4775,2)
(3328,3417,2)
(3095,1844,2)
(4917,717,2)
(2145,2226,2)
(4825,1844,2)
(3658,5656,2)
(2668,3921,2)
(977,5120,2)
(3939,3474,2)
(1208,1960,2)
(5044,385,2)
(1307,3579,2)
(8,4797,2)
(1326,132,2)
(4884,2716,2)
(1450,4068,2)
(1443,1626,2)
(3815,1489,2)
(1715,813,2)
(695,5097,2)
(927,5394,2)
(4377,2923,2)
(455,2616,2)
(3472,1508,2)
(5385,4396,2)
(449,584,2)
(5757,1590,2)
(3939,4295,2)
(3651,1326,2)
(2326,3646,2)
(1136,4244,2)
(2307,3466,2)
(13,2160,2)
(44,5100,2)
(4370,4902,2)
(1363,627,2)
(2520,4991,2)
(103,1737,2)
(1484,2944,2)
(131,1326,2)
(2671,665,2)
(2728,3510,2)
(271,4383,2)
(4925,5406,2)
(5074,1844,2)
(5347,716,2)
(2326,1456,2)
(2993,1035,2)
(5323,4788,2)
(148,1983,2)
(5055,1508,2)
(2374,4255,2)
(4243,1034,2)
(2392,4618,2)
(756,3584,2)
(1125,1400,2)
(580,1326,2)
(4193,1486,2)
(786,2971,2)
(2644,4319,2)
(877,836,2)
(3979,4848,2)
(4809,3640,2)
(1418,4934,2)
(2141,546,2)
(2747,4054,2)
(1085,1411,2)
(2633,2113,2)
(1466,3185,2)
(1827,1844,2)
(1595,2248,2)
(789,2539,2)
(2872,3214,2)
(1248,1157,2)
(1939,5324,2)
(2575,5766,2)
(5048,1144,2)
(5491,2721,2)
(1389,5214,2)
(4898,1081,2)
(5048,4621,2)
(5725,2248,2)
(680,3760,2)
(5551,1879,2)
(3979,2997,2)
(359,31,2)
(4934,441,2)
(4372,477,2)
(5707,1573,2)
(1087,665,2)
(1708,5289,2)
(2913,2248,2)
(5134,1937,2)
(2326,5093,2)
(4216,3300,2)
(2925,244,2)
(4663,2325,2)
(1032,3940,2)
(3740,3837,2)
(361,5334,2)
(3521,1844,2)
(3155,3579,2)
(1406,3474,2)
(3639,2226,2)
(4694,5321,2)
(1364,1350,2)
(1166,1350,2)
(1398,1359,2)
(3454,2796,2)
(5555,1994,2)
(5402,2816,2)
(2952,10,2)
(1299,4828,2)
(5622,4902,2)
(5398,2609,2)
(3377,850,2)
(608,4926,2)
(280,2340,2)
(2945,1350,2)
(4112,1237,2)
(352,1527,2)
(5057,3579,2)
(2997,1081,2)
(4947,3984,2)
(5682,281,2)
(2153,3421,2)
(2646,4400,2)
(3612,1844,2)
(4940,5706,2)
(3347,273,2)
(2069,1326,2)
(305,3790,2)
(1530,4054,2)
(5442,5622,2)
(2579,2315,2)
(3802,1157,2)
(3241,132,2)
(3918,2816,2)
(3939,276,2)
(596,408,2)
(1827,2998,2)
(1630,103,2)
(591,1844,2)
(1410,5006,2)
(5178,5470,2)
(3256,2816,2)
(3461,1626,2)
(3979,4731,2)
(4172,1342,2)
(2350,2954,2)
(4689,2141,2)
(3064,816,2)
(4221,2190,2)
(2031,3227,2)
(5067,1575,2)
(2244,273,2)
(5682,4412,2)
(4994,968,2)
(4711,441,2)
(2321,1478,2)
(498,1081,2)
(4589,3488,2)
(2408,3790,2)
(5120,977,2)
(2264,1728,2)
(707,2721,2)
(4301,2725,2)
(5214,1583,2)
(2340,4006,2)
(2099,2685,2)
(4733,1329,2)
(3979,1647,2)
(1724,1994,2)
(2595,4567,2)
(190,1539,2)
(837,1400,2)
(3690,2614,2)
(4988,167,2)
(3022,2708,2)
(2803,4863,2)
(5432,523,2)
(846,2205,2)
(265,1847,2)
(1204,1478,2)
(3979,5707,2)
(1732,3500,2)
(2405,3511,2)
(5590,1268,2)
(1959,4396,2)
(2918,2402,2)
(5059,132,2)
(4071,3747,2)
(2918,3150,2)
(3965,5287,2)
(5350,856,2)
(2403,3067,2)
(144,4319,2)
(1971,455,2)
(4079,1034,2)
(5486,2190,2)
(5013,4295,2)
(3257,3636,2)
(2658,2776,2)
(2896,1958,2)
(2520,5683,2)
(5058,4377,2)
(737,2666,2)
(2918,2406,2)
(1094,813,2)
(2326,4894,2)
(1860,3097,2)
(4677,4058,2)
(1400,4391,2)
(4848,3640,2)
(1223,5468,2)
(2695,2583,2)
(1886,1725,2)
(495,3638,2)
(5682,3150,2)
(5682,4628,2)
(1822,4642,2)
(3077,627,2)
(991,5059,2)
(4700,682,2)
(817,2595,2)
(2324,2256,2)
(126,4964,2)
(2326,3086,2)
(775,4231,2)
(4068,209,2)
(1541,2328,2)
(3064,5036,2)
(1388,1844,2)
(2078,2816,2)
(3239,4884,2)
(1611,2942,2)
(4671,627,2)
(2636,1976,2)
(716,1622,2)
(2338,2523,2)
(3351,4786,2)
(268,868,2)
(2403,3869,2)
(2936,5409,2)
(1788,1884,2)
(3100,2655,2)
(1809,2748,2)
(2493,924,2)
(5636,4567,2)
(2326,1775,2)
(2687,1958,2)
(3556,850,2)
(666,1354,2)
(3310,31,2)
(1406,1045,2)
(4791,3086,2)
(451,5384,2)
(4045,911,2)
(2799,2523,2)
(2193,1877,2)
(3273,1157,2)
(4529,3664,2)
(834,3909,2)
(5214,3159,2)
(2326,209,2)
(3571,1350,2)
(3576,1715,2)
(5256,5385,2)
(2529,2902,2)
(4393,2829,2)
(4329,2248,2)
(2855,3468,2)
(1452,5468,2)
(318,104,2)
(3429,4307,2)
(4407,5059,2)
(4364,3879,2)
(884,2520,2)
(3428,5059,2)
(4566,31,2)
(5361,1400,2)
(2326,1864,2)
(4543,5156,2)
(2481,5059,2)
(1734,5394,2)
(389,3184,2)
(4895,5022,2)
(3897,1994,2)
(4288,2367,2)
(1683,908,2)
(4968,3247,2)
(1542,3640,2)
(5067,1663,2)
(3119,2869,2)
(2753,4244,2)
(1228,2288,2)
(3979,732,2)
(2612,627,2)
(1720,4054,2)
(4864,2474,2)
(1674,3637,2)
(3404,5027,2)
(1292,4295,2)
(4572,2655,2)
(3620,1621,2)
(2063,3691,2)
(3641,665,2)
(5206,5097,2)
(2081,2248,2)
(1041,2256,2)
(4528,3919,2)
(4995,4774,2)
(1652,1844,2)
(5144,666,2)
(2918,4894,2)
(5079,488,2)
(4939,3418,2)
(5750,1350,2)
(385,2452,2)
(4672,897,2)
(1034,692,2)
(3622,1350,2)
(1552,4567,2)
(2072,4381,2)
(4663,1802,2)
(164,1179,2)
(4999,4007,2)
(2015,5394,2)
(307,5059,2)
(2072,484,2)
(3086,563,2)
(1780,2944,2)
(4253,1508,2)
(164,1964,2)
(4070,1019,2)
(1393,962,2)
(3286,5655,2)
(5719,1715,2)
(914,884,2)
(5298,4743,2)
(2829,1144,2)
(4812,1670,2)
(851,962,2)
(726,3418,2)
(5034,2700,2)
(2331,4655,2)
(1013,13,2)
(5680,4450,2)
(3126,4768,2)
(2525,563,2)
(3177,3103,2)
(2476,1626,2)
(2312,2899,2)
(3407,5766,2)
(3854,5156,2)
(5419,1350,2)
(2167,1777,2)
(5277,4396,2)
(3328,3039,2)
(5755,408,2)
(1259,618,2)
(4209,3067,2)
(39,1917,2)
(5568,3474,2)
(2918,3669,2)
(1528,204,2)
(1115,2089,2)
(1183,3579,2)
(3877,4764,2)
(4222,2983,2)
(461,1871,2)
(2390,3184,2)
(4515,3826,2)
(3064,4249,2)
(2918,1752,2)
(3064,1031,2)
(2034,3450,2)
(3064,4731,2)
(3177,3204,2)
(3064,2540,2)
(5441,1844,2)
(531,4396,2)
(4040,716,2)
(746,5324,2)
(3290,2616,2)
(5668,2748,2)
(5385,4788,2)
(4248,851,2)
(2291,3421,2)
(1806,4621,2)
(2767,5430,2)
(2089,4273,2)
(3278,4914,2)
(3143,1844,2)
(2735,4110,2)
(4645,2277,2)
(5187,1844,2)
(5365,851,2)
(618,1508,2)
(445,1844,2)
(2918,4241,2)
(4537,4000,2)
(5157,5134,2)
(5249,3510,2)
(4795,3431,2)
(5011,4269,2)
(1356,5436,2)
(2796,276,2)
(194,2899,2)
(2147,1958,2)
(2475,5059,2)
(2314,2190,2)
(3024,2474,2)
(5419,1025,2)
(3878,1354,2)
(4126,2241,2)
(3826,2265,2)
(3248,1132,2)
(1096,4773,2)
(4967,1828,2)
(399,2538,2)
(2500,977,2)
(1571,2032,2)
(4115,1400,2)
(4525,3441,2)
(1825,1844,2)
(663,546,2)
(554,584,2)
(1433,3582,2)
(5129,1539,2)
(2918,563,2)
(774,2190,2)
(2785,2721,2)
(3708,2334,2)
(3229,5059,2)
(1129,1082,2)
(1423,1844,2)
(2750,1330,2)
(2435,1807,2)
(4414,1326,2)
(5078,442,2)
(4663,565,2)
(3903,4969,2)
(1632,5420,2)
(3636,170,2)
(2552,3683,2)
(731,1777,2)
(1651,4002,2)
(723,1994,2)
(1716,3355,2)
(792,3180,2)
(2918,5414,2)
(3008,5048,2)
(2336,627,2)
(2997,2655,2)
(4663,4102,2)
(3668,2803,2)
(716,1507,2)
(1372,2588,2)
(36,2241,2)
(2548,273,2)
(5253,5324,2)
(551,4788,2)
(1045,2474,2)
(5688,5212,2)
(5142,5479,2)
(2977,581,2)
(1347,1326,2)
(1588,31,2)
(3364,5059,2)
(3174,1326,2)
(4502,3488,2)
(3010,492,2)
(4350,5515,2)
(4890,2452,2)
(4258,1157,2)
(2588,570,2)
(5682,2821,2)
(4968,273,2)
(4486,3579,2)
(3247,273,2)
(2248,4803,2)
(1316,1295,2)
(5539,5059,2)
(4853,3790,2)
(5156,3277,2)
(3579,330,2)
(1126,455,2)
(2853,1326,2)
(2135,3640,2)
(2307,5289,2)
(5411,1958,2)
(1251,3662,2)
(372,5126,2)
(109,2496,2)
(2845,3720,2)
(2728,793,2)
(5159,5059,2)
(5071,5194,2)
(244,844,2)
(1864,5059,2)
(4883,2954,2)
(2163,2721,2)
(3974,4970,2)
(506,911,2)
(4305,1274,2)
(5644,4058,2)
(2124,2655,2)
(64,2748,2)
(3442,640,2)
(1210,1960,2)
(3921,4396,2)
(3646,1174,2)
(2918,2540,2)
(2967,273,2)
(4609,1073,2)
(961,627,2)
(5174,273,2)
(5206,5059,2)
(4663,5099,2)
(4663,816,2)
(2369,1983,2)
(5067,1917,2)
(3276,4244,2)
(618,2344,2)
(1496,3059,2)
(2473,1329,2)
(5409,4105,2)
(4737,91,2)
(3709,1508,2)
(2686,2265,2)
(430,2614,2)
(1620,1268,2)
(134,1215,2)
(2962,2190,2)
(4774,4221,2)
(5502,1842,2)
(5539,2655,2)
(39,1575,2)
(281,3122,2)
(5406,2271,2)
(573,2050,2)
(1056,3173,2)
(5370,5493,2)
(2918,3273,2)
(3897,627,2)
(198,5059,2)
(1286,2554,2)
(4608,2873,2)
(5274,3579,2)
(5304,1081,2)
(485,1618,2)
(1310,276,2)
(5516,1618,2)
(2714,4068,2)
(3361,950,2)
(208,1081,2)
(3610,4058,2)
(4727,1072,2)
(5258,1350,2)
(3462,3579,2)
(4822,2748,2)
(4068,732,2)
(3864,1842,2)
(3470,991,2)
(2798,1187,2)
(5516,3247,2)
(4663,208,2)
(2416,3086,2)
(2051,1011,2)
(992,2701,2)
(902,3909,2)
(4639,3483,2)
(1264,3227,2)
(5682,4249,2)
(72,5394,2)
(4051,3637,2)
(3160,2954,2)
(5703,1844,2)
(4110,2190,2)
(5682,3676,2)
(5443,665,2)
(4269,2250,2)
(717,1204,2)
(706,584,2)
(507,2344,2)
(4097,1392,2)
(4141,4244,2)
(4663,4894,2)
(2296,3579,2)
(496,1670,2)
(1170,1871,2)
(139,5324,2)
(665,5741,2)
(1226,1994,2)
(2918,816,2)
(3709,2087,2)
(417,5120,2)
(3320,1350,2)
(2792,2248,2)
(3979,3114,2)
(3328,4637,2)
(714,2248,2)
(716,4548,2)
(3877,4021,2)
(4512,183,2)
(4218,3579,2)
(5174,5059,2)
(5537,2388,2)
(4790,666,2)
(3630,1350,2)
(2711,5442,2)
(157,4639,2)
(894,3837,2)
(5493,734,2)
(1327,1844,2)
(4068,4300,2)
(2214,3421,2)
(735,627,2)
(2841,5573,2)
(689,869,2)
(667,1844,2)
(5278,734,2)
(694,2075,2)
(1989,1960,2)
(4843,5194,2)
(2547,991,2)
(3563,4068,2)
(3599,1257,2)
(5322,4291,2)
(3471,441,2)
(2918,2152,2)
(273,5055,2)
(2527,743,2)
(1576,5022,2)
(4620,5074,2)
(4902,868,2)
(5567,1235,2)
(39,4991,2)
(4327,1406,2)
(3551,1844,2)
(199,4058,2)
(5404,3884,2)
(5322,4105,2)
(5460,924,2)
(2573,1844,2)
(5635,911,2)
(760,455,2)
(1566,3571,2)
(5704,2655,2)
(5097,1442,2)
(4519,106,2)
(1587,2700,2)
(5282,4068,2)
(922,1960,2)
(1778,627,2)
(527,2721,2)
(5014,1994,2)
(3156,2899,2)
(1285,298,2)
(1079,1994,2)
(672,5059,2)
(199,4763,2)
(5396,716,2)
(3759,4794,2)
(2256,4621,2)
(873,1923,2)
(792,343,2)
(3397,4714,2)
(737,904,2)
(593,1460,2)
(1961,1721,2)
(1413,3582,2)
(3319,1844,2)
(900,876,2)
(2351,1367,2)
(4750,1626,2)
(406,1806,2)
(533,1011,2)
(4016,3099,2)
(3739,1948,2)
(3915,2666,2)
(1703,3837,2)
(4859,195,2)
(2678,2741,2)
(4670,5194,2)
(76,3826,2)
(369,627,2)
(973,3026,2)
(1696,2899,2)
(2066,1524,2)
(1227,1350,2)
(3028,716,2)
(1937,5696,2)
(3979,3707,2)
(3328,1917,2)
(4322,4341,2)
(3734,1817,2)
(5607,5194,2)
(1274,1034,2)
(2022,3799,2)
(5569,4797,2)
(4363,627,2)
(2728,3739,2)
(3355,1842,2)
(3618,3161,2)
(2241,4307,2)
(3614,2776,2)
(4559,717,2)
(3449,4500,2)
(5302,2015,2)
(691,3637,2)
(1067,5369,2)
(2918,1826,2)
(3036,4624,2)
(5245,5394,2)
(2918,1910,2)
(4397,1350,2)
(149,1624,2)
(2973,2082,2)
(5372,1034,2)
(5716,4032,2)
(708,3263,2)
(2129,2721,2)
(4126,2616,2)
(5431,665,2)
(3078,3511,2)
(5598,4261,2)
(1805,1715,2)
(3552,1586,2)
(2758,627,2)
(2242,4339,2)
(2719,1715,2)
(3452,1350,2)
(3233,2500,2)
(1530,5059,2)
(1224,469,2)
(4968,2241,2)
(5637,2552,2)
(77,1714,2)
(5445,2072,2)
(2326,4848,2)
(5141,2629,2)
(1280,1844,2)
(5531,1081,2)
(560,3579,2)
(2615,1618,2)
(5596,991,2)
(3563,5682,2)
(5667,1947,2)
(5195,5706,2)
(4122,1844,2)
(3064,4736,2)
(2109,5567,2)
(2313,5726,2)
(5760,5156,2)
(2948,273,2)
(1527,3263,2)
(2711,5622,2)
(3520,1626,2)
(2149,204,2)
(2859,4947,2)
(2449,132,2)
(5414,5059,2)
(2127,1350,2)
(2523,5515,2)
(2422,3421,2)
(4775,4097,2)
(378,1326,2)
(2918,2821,2)
(2540,682,2)
(380,1983,2)
(2559,455,2)
(3732,2557,2)
(2322,1326,2)
(3888,1626,2)
(515,3257,2)
(837,1311,2)
(2936,3921,2)
(3309,850,2)
(2836,897,2)
(610,195,2)
(1826,627,2)
(2538,2474,2)
(4013,742,2)
(953,3579,2)
(3830,3919,2)
(5062,4291,2)
(2883,2241,2)
(2854,2050,2)
(4305,1034,2)
(4585,5059,2)
(3064,732,2)
(4500,1997,2)
(2531,1844,2)
(5730,2753,2)
(1907,3388,2)
(2928,743,2)
(1059,5059,2)
(3791,3370,2)
(1723,1395,2)
(5732,3300,2)
(2918,3676,2)
(3810,1714,2)
(5622,4244,2)
(2324,1041,2)
(2676,1081,2)
(2794,5022,2)
(3799,611,2)
(1158,4098,2)
(4663,5115,2)
(3588,4546,2)
(1862,3060,2)
(622,3582,2)
(3965,3204,2)
(5624,3526,2)
(1966,3441,2)
(305,3247,2)
(5682,93,2)
(4142,1350,2)
(3865,1157,2)
(4097,399,2)
(4663,4300,2)
(293,1618,2)
(320,1081,2)
(4689,1478,2)
(2237,1994,2)
(3583,1573,2)
(2520,370,2)
(4918,2145,2)
(2053,1844,2)
(244,5706,2)
(5762,3579,2)
(2096,911,2)
(4932,5406,2)
(2357,1523,2)
(2679,4567,2)
(1137,4583,2)
(3925,3882,2)
(2422,2291,2)
(217,3319,2)
(887,5289,2)
(1949,2344,2)
(3325,58,2)
(1862,1844,2)
(39,4924,2)
(2326,4300,2)
(1148,3790,2)
(3726,2743,2)
(1124,3579,2)
(36,627,2)
(1313,5124,2)
(3944,1157,2)
(4835,204,2)
(585,2246,2)
(848,3227,2)
(4748,1791,2)
(1822,4343,2)
(1301,876,2)
(1417,3488,2)
(4766,627,2)
(1785,4725,2)
(519,4327,2)
(2721,3635,2)
(5355,4030,2)
(2280,2329,2)
(4887,4743,2)
(5306,3399,2)
(584,1714,2)
(284,1141,2)
(408,5622,2)
(4462,1400,2)
(798,1052,2)
(650,3511,2)
(2898,3510,2)
(4882,1761,2)
(3668,2264,2)
(686,627,2)
(4717,3060,2)
(1747,3300,2)
(5174,4244,2)
(838,276,2)
(695,5206,2)
(5067,331,2)
(3340,5394,2)
(2882,4058,2)
(5492,1670,2)
(1035,5059,2)
(1610,2265,2)
(1705,2708,2)
(2359,3579,2)
(1647,2925,2)
(1875,2248,2)
(4729,2322,2)
(4639,217,2)
(383,4902,2)
(5722,4550,2)
(1472,3214,2)
(307,2902,2)
(2839,1844,2)
(1451,5113,2)
(1866,4567,2)
(4693,2190,2)
(4325,4450,2)
(4786,1034,2)
(2918,2486,2)
(2464,1522,2)
(4868,3635,2)
(2158,3579,2)
(1689,2954,2)
(3842,3940,2)
(98,5429,2)
(910,943,2)
(207,869,2)
(3221,4033,2)
(2326,1802,2)
(2326,5707,2)
(4667,2248,2)
(456,2248,2)
(59,869,2)
(4442,2964,2)
(1914,170,2)
(5503,3652,2)
(4402,2334,2)
(3681,1183,2)
(536,2939,2)
(2241,943,2)
(863,455,2)
(1406,1923,2)
(5684,5394,2)
(1351,5682,2)
(914,4595,2)
(3994,4788,2)
(614,5622,2)
(4077,897,2)
(165,5486,2)
(3467,1411,2)
(920,3584,2)
(3564,4550,2)
(2679,1257,2)
(3668,1972,2)
(5234,4567,2)
(4014,665,2)
(514,1326,2)
(4896,1818,2)
(1973,4828,2)
(3636,3474,2)
(2186,1478,2)
(2326,2402,2)
(298,1714,2)
(5682,732,2)
(4508,1714,2)
(637,1844,2)
(3424,2190,2)
(596,5755,2)
(1329,4396,2)
(3064,3923,2)
(2137,2190,2)
(455,3247,2)
(3064,2325,2)
(2014,4876,2)
(4668,4305,2)
(5086,441,2)
(3359,856,2)
(1193,1844,2)
(2614,1983,2)
(1205,792,2)
(4777,1844,2)
(5544,2246,2)
(2423,1011,2)
(866,3790,2)
(2916,2248,2)
(5682,4120,2)
(2814,1610,2)
(1571,4583,2)
(2273,1844,2)
(792,2040,2)
(1871,4396,2)
(2326,4249,2)
(2954,4295,2)
(1034,500,2)
(4688,4751,2)
(4977,5468,2)
(4487,4450,2)
(1367,4787,2)
(3599,4567,2)
(4463,794,2)
(1556,4396,2)
(200,694,2)
(5621,1960,2)
(4642,4343,2)
(2502,1081,2)
(2026,4828,2)
(2839,4551,2)
(1137,3474,2)
(3294,5316,2)
(3093,2072,2)
(2827,666,2)
(5164,851,2)
(4394,1844,2)
(4689,1817,2)
(3495,1342,2)
(75,2000,2)
(1903,4231,2)
(4018,3582,2)
(2939,3952,2)
(2433,2500,2)
(3064,2402,2)
(2390,4129,2)
(1117,3005,2)
(39,977,2)
(3184,868,2)
(4965,627,2)
(2624,463,2)
(1573,4381,2)
(1004,4964,2)
(5066,1081,2)
(5568,170,2)
(4126,1983,2)
(5539,1081,2)
(3491,4902,2)
(4603,5321,2)
(5682,4449,2)
(772,1478,2)
(2123,1844,2)
(2608,4867,2)
(3557,2721,2)
(4688,1396,2)
(305,2616,2)
(5480,2748,2)
(4689,1772,2)
(4780,1400,2)
(4364,4500,2)
(1816,1777,2)
(3979,3197,2)
(687,1925,2)
(4335,2655,2)
(4586,856,2)
(3913,5429,2)
(1517,4295,2)
(3452,4687,2)
(4889,1844,2)
(4417,717,2)
(3655,2629,2)
(1617,2328,2)
(1654,2344,2)
(4587,2390,2)
(4535,12,2)
(4689,627,2)
(3283,1844,2)
(4797,20,2)
(5678,2609,2)
(3676,627,2)
(5427,1350,2)
(3982,2655,2)
(5099,5059,2)
(5384,5287,2)
(5186,1326,2)
(2535,3790,2)
(1265,627,2)
(765,273,2)
(5370,5697,2)
(3387,259,2)
(916,4567,2)
(5335,3185,2)
(897,3060,2)
(1558,3638,2)
(4685,5384,2)
(2223,2248,2)
(2043,1275,2)
(4518,5397,2)
(3064,4848,2)
(2954,584,2)
(3909,477,2)
(4863,734,2)
(118,2500,2)
(5639,410,2)
(2168,5055,2)
(2520,1917,2)
(4850,706,2)
(3086,3790,2)
(372,1326,2)
(722,10,2)
(4072,1478,2)
(3010,5736,2)
(3019,4291,2)
(3064,4705,2)
(3023,2748,2)
(4207,3734,2)
(4249,1167,2)
(3615,2336,2)
(5510,2962,2)
(1945,5394,2)
(573,1923,2)
(4663,3669,2)
(5696,3759,2)
(5316,1326,2)
(4598,3822,2)
(4460,2190,2)
(4804,2655,2)
(1912,4040,2)
(3632,3635,2)
(4450,273,2)
(4192,2248,2)
(44,1350,2)
(555,4415,2)
(2225,2616,2)
(2620,4788,2)
(5294,1326,2)
(670,5431,2)
(4663,2480,2)
(5163,1670,2)
(2868,627,2)
(52,924,2)
(5157,1937,2)
(29,1215,2)
(103,1350,2)
(1605,3909,2)
(2368,1326,2)
(3036,2898,2)
(2418,2643,2)
(4367,523,2)
(4979,170,2)
(2498,4432,2)
(667,2762,2)
(3329,3578,2)
(3103,3826,2)
(4627,690,2)
(4939,1859,2)
(2358,341,2)
(1693,2148,2)
(4070,4618,2)
(271,1886,2)
(170,4055,2)
(1726,276,2)
(893,292,2)
(4776,672,2)
(4312,1400,2)
(3632,455,2)
(3040,2367,2)
(4203,1400,2)
(305,1354,2)
(1951,1618,2)
(5316,2428,2)
(1507,716,2)
(967,291,2)
(1025,2471,2)
(271,2066,2)
(4725,627,2)
(1633,455,2)
(3790,2525,2)
(3016,3247,2)
(2409,5726,2)
(3563,2902,2)
(4588,584,2)
(5266,4567,2)
(3964,991,2)
(1469,1478,2)
(3046,2523,2)
(1012,3882,2)
(688,4765,2)
(3064,1910,2)
(5628,3060,2)
(2838,3579,2)
(4335,1081,2)
(111,580,2)
(2893,3681,2)
(1636,3909,2)
(5682,1910,2)
(4792,2748,2)
(1071,1508,2)
(1934,944,2)
(4663,5036,2)
(1761,2173,2)
(3248,537,2)
(161,2000,2)
(532,3826,2)
(2442,3584,2)
(581,2190,2)
(5647,4182,2)
(2367,2190,2)
(2753,5683,2)
(4789,3067,2)
(4663,3821,2)
(3256,2474,2)
(1191,2596,2)
(58,4432,2)
(3433,3582,2)
(792,3010,2)
(3455,3921,2)
(4612,170,2)
(1952,4471,2)
(5564,943,2)
(501,5059,2)
(5489,5022,2)
(5322,4500,2)
(5261,5194,2)
(2942,1844,2)
(1735,4583,2)
(294,4990,2)
(3979,3676,2)
(3760,4070,2)
(4061,2113,2)
(3370,5079,2)
(2309,4110,2)
(144,1844,2)
(3236,2248,2)
(1779,29,2)
(3979,2392,2)
(655,1715,2)
(3629,3579,2)
(3251,167,2)
(2998,4259,2)
(2073,4775,2)
(622,627,2)
(2773,943,2)
(3911,3500,2)
(1887,384,2)
(116,2050,2)
(4801,3402,2)
(3091,1508,2)
(1130,5059,2)
(2668,3879,2)
(2303,4130,2)
(5622,523,2)
(4464,1350,2)
(2938,1034,2)
(1623,4788,2)
(4967,4788,2)
(1129,3942,2)
(943,1408,2)
(273,2890,2)
(5262,4788,2)
(5341,3579,2)
(4503,3638,2)
(1072,1844,2)
(2583,627,2)
(1568,2072,2)
(5031,1400,2)
(1551,1698,2)
(4912,698,2)
(3922,1508,2)
(3422,3790,2)
(4456,5324,2)
(543,1326,2)
(1134,3682,2)
(5642,1844,2)
(3430,3511,2)
(4869,4567,2)
(1662,3132,2)
(4886,5324,2)
(4773,2870,2)
(3508,3579,2)
(3331,4550,2)
(4985,3863,2)
(4766,1478,2)
(3316,5113,2)
(4824,2523,2)
(5436,3579,2)
(4980,170,2)
(5352,3497,2)
(1335,4311,2)
(3979,1910,2)
(3399,5156,2)
(2861,2473,2)
(1030,3666,2)
(5654,3536,2)
(3502,4567,2)
(624,1844,2)
(5436,636,2)
(1597,1844,2)
(4663,2540,2)
(3837,1879,2)
(477,2358,2)
(3231,1144,2)
(3064,3669,2)
(455,1983,2)
(5177,2452,2)
(2736,1034,2)
(2918,3646,2)
(4904,2082,2)
(2893,2034,2)
(4854,908,2)
(305,4583,2)
(5406,1326,2)
(2939,5335,2)
(2038,3328,2)
(4533,1129,2)
(3180,831,2)
(1133,2593,2)
(420,1350,2)
(860,3582,2)
(189,2700,2)
(3064,1752,2)
(1614,734,2)
(2833,195,2)
(5334,1575,2)
(3382,4381,2)
(1409,2050,2)
(3198,3586,2)
(3508,627,2)
(4472,4266,2)
(3668,2918,2)
(2380,4291,2)
(1399,5766,2)
(5682,4916,2)
(273,3086,2)
(3024,1923,2)
(1075,5059,2)
(3759,3906,2)
(5682,3923,2)
(1638,4583,2)
(271,4190,2)
(2914,2248,2)
(5516,2616,2)
(3116,1923,2)
(5425,2113,2)
(4851,1350,2)
(856,81,2)
(4923,1923,2)
(2823,5406,2)
(3031,2776,2)
(546,1957,2)
(3064,1015,2)
(3795,3431,2)
(1422,4969,2)
(2714,3979,2)
(3728,1994,2)
(4106,1326,2)
(4457,4110,2)
(5461,2248,2)
(1476,4567,2)
(2369,4244,2)
(3835,3355,2)
(5050,998,2)
(2677,4583,2)
(467,1644,2)
(4932,1675,2)
(4862,2666,2)
(4293,1715,2)
(2930,2190,2)
(5263,3919,2)
(3177,5287,2)
(1240,2160,2)
(4048,627,2)
(2195,1791,2)
(4450,3086,2)
(1889,1844,2)
(2387,3393,2)
(4158,2226,2)
(1093,1923,2)
(3379,3500,2)
(2777,2025,2)
(5725,2916,2)
(5704,1081,2)
(2612,4534,2)
(1833,4450,2)
(1595,5725,2)
(3668,3605,2)
(2520,331,2)
(3138,1326,2)
(5289,3060,2)
(466,3099,2)
(5218,4432,2)
(521,159,2)
(1981,3919,2)
(3451,4511,2)
(3131,2655,2)
(5153,2370,2)
(2677,4244,2)
(1900,2358,2)
(2918,2392,2)
(469,3473,2)
(287,2655,2)
(3595,4934,2)
(128,270,2)
(673,851,2)
(4663,4120,2)
(773,4766,2)
(222,5683,2)
(3533,5055,2)
(3593,1714,2)
(1048,1539,2)
(4830,4797,2)
(1638,2474,2)
(4085,3067,2)
(410,1396,2)
(802,4110,2)
(2099,2522,2)
(2133,1081,2)
(4867,4500,2)
(2529,3979,2)
(1724,3442,2)
(4132,1608,2)
(2804,5645,2)
(1346,204,2)
(5250,1721,2)
(2621,2666,2)
(3773,3060,2)
(2954,3474,2)
(3243,1157,2)
(2344,351,2)
(700,1715,2)
(3998,2936,2)
(5384,3204,2)
(2714,5059,2)
(5071,941,2)
(5672,3579,2)
(658,2256,2)
(1735,1618,2)
(2053,1187,2)
(5147,716,2)
(542,1844,2)
(1083,3764,2)
(1345,3919,2)
(169,2370,2)
(4784,5075,2)
(2909,3940,2)
(2122,455,2)
(2227,2944,2)
(3940,584,2)
(4876,5059,2)
(109,1081,2)
(1583,2538,2)
(5390,5015,2)
(1778,58,2)
(2063,5248,2)
(354,4396,2)
(823,2902,2)
(573,4583,2)
(3439,5058,2)
(178,1508,2)
(4052,1958,2)
(4787,4068,2)
(5293,3579,2)
(2292,1400,2)
(2899,4789,2)
(2434,1737,2)
(2918,4449,2)
(2489,3582,2)
(4643,2344,2)
(1863,378,2)
(2508,2159,2)
(5114,3637,2)
(4311,1354,2)
(2562,2829,2)
(4030,706,2)
(1120,2721,2)
(4929,1350,2)
(4831,1844,2)
(1257,1257,2)
(1930,1489,2)
(805,962,2)
(636,2034,2)
(3613,469,2)
(3383,2248,2)
(2950,5622,2)
(5183,273,2)
(743,3897,2)
(425,2666,2)
(5067,3039,2)
(4612,2050,2)
(2918,808,2)
(442,2234,2)
(950,5022,2)
(2956,273,2)
(3113,1350,2)
(1947,4334,2)
(2038,3355,2)
(1993,1947,2)
(5444,734,2)
(2821,5059,2)
(4446,2328,2)
(4663,3646,2)
(4880,2042,2)
(5415,2109,2)
(1093,2050,2)
(5682,565,2)
(1352,2983,2)
(39,1663,2)
(5376,3500,2)
(1606,3351,2)
(5083,1723,2)
(2251,426,2)
(5244,5059,2)
(49,1195,2)
(2226,2341,2)
(1079,627,2)
(3161,183,2)
(2340,4797,2)
(842,2344,2)
(2713,3826,2)
(3486,4567,2)
(2625,4828,2)
(608,4902,2)
(2773,4097,2)
(10,5120,2)
(4077,5025,2)
(3121,4788,2)
(2061,3488,2)
(1441,1844,2)
(3485,521,2)
(1691,5324,2)
(1586,5022,2)
(4932,3229,2)
(215,3790,2)
(2912,3982,2)
(2573,3726,2)
(4078,584,2)
(5682,1031,2)
(3328,331,2)
(468,46,2)
(3979,2480,2)
(1071,2344,2)
(1758,2370,2)
(4947,1574,2)
(2596,5146,2)
(4713,2038,2)
(1110,2666,2)
(157,5658,2)
(3751,3277,2)
(5226,2190,2)
(5073,3816,2)
(2526,2701,2)
(2082,2190,2)
(5332,3300,2)
(722,1844,2)
(5415,665,2)
(649,1844,2)
(1401,1400,2)
(4663,2317,2)
(5223,665,2)
(5731,717,2)
(974,4535,2)
(517,2265,2)
(2034,3579,2)
(3114,627,2)
(2978,132,2)
(4406,627,2)
(2746,4097,2)
(5399,3635,2)
(3117,5079,2)
(838,4583,2)
(5524,5585,2)
(2600,3474,2)
(4457,1844,2)
(2918,208,2)
(472,1715,2)
(3669,1146,2)
(5515,4671,2)
(2049,850,2)
(4361,546,2)
(4374,1715,2)
(5224,1892,2)
(4936,5058,2)
(4928,2676,2)
(1891,1844,2)
(2151,273,2)
(4963,5058,2)
(309,2393,2)
(5090,627,2)
(5683,3440,2)
(478,3579,2)
(2171,2190,2)
(1319,3526,2)
(3893,296,2)
(5249,3739,2)
(4550,1714,2)
(2872,3042,2)
(3662,2426,2)
(1531,1157,2)
(4797,2816,2)
(5399,2265,2)
(1610,2190,2)
(3336,584,2)
(4819,5113,2)
(1440,426,2)
(5174,584,2)
(1317,1081,2)
(4902,389,2)
(5617,1268,2)
(832,5432,2)
(2722,1400,2)
(4318,1961,2)
(2704,682,2)
(5328,3919,2)
(3384,2666,2)
(4587,3184,2)
(2428,1698,2)
(2244,1844,2)
(684,1983,2)
(4098,1806,2)
(5379,957,2)
(1485,1777,2)
(3581,132,2)
(635,5028,2)
(4064,5022,2)
(2523,2338,2)
(3526,584,2)
(5656,3747,2)
(1406,4295,2)
(2918,2030,2)
(5413,1073,2)
(4759,243,2)
(666,2190,2)
(3098,2265,2)
(1735,1983,2)
(1722,5764,2)
(1610,943,2)
(2668,5116,2)
(5324,369,2)
(3043,627,2)
(5041,4567,2)
(1703,3635,2)
(4923,584,2)
(4578,627,2)
(609,3171,2)
(850,1141,2)
(2727,2666,2)
(623,2609,2)
(4768,4561,2)
(3586,355,2)
(2863,4788,2)
(3064,3197,2)
(1799,132,2)
(822,1983,2)
(1315,1011,2)
(3355,5210,2)
(1420,1478,2)
(3349,2307,2)
(2678,1390,2)
(2410,1142,2)
(4181,371,2)
(4753,3940,2)
(4126,4902,2)
(1064,3919,2)
(4110,3790,2)
(4998,4902,2)
(325,1871,2)
(3026,4000,2)
(3161,3625,2)
(3681,3579,2)
(5655,3909,2)
(1241,2500,2)
(709,2880,2)
(3064,4894,2)
(1519,2248,2)
(2500,331,2)
(5290,1698,2)
(2030,3640,2)
(2500,3500,2)
(2936,4105,2)
(277,5113,2)
(2870,1350,2)
(5093,3681,2)
(3877,3603,2)
(4762,2340,2)
(5270,1844,2)
(2263,1354,2)
(572,5394,2)
(1475,2248,2)
(771,940,2)
(542,4867,2)
(4932,3610,2)
(350,3510,2)
(941,1539,2)
(3889,5171,2)
(1213,1465,2)
(3488,4063,2)
(314,4761,2)
(2162,204,2)
(2371,455,2)
(4968,523,2)
(1891,5059,2)
(4618,4432,2)
(5126,1326,2)
(2482,58,2)
(588,3579,2)
(2847,2539,2)
(437,4396,2)
(1600,2190,2)
(4095,5075,2)
(5213,4788,2)
(3067,4360,2)
(3770,5394,2)
(5517,276,2)
(609,4266,2)
(171,627,2)
(3979,2325,2)
(1027,1923,2)
(5436,2034,2)
(3935,2999,2)
(1884,566,2)
(3703,666,2)
(4860,3837,2)
(3064,3821,2)
(2898,3351,2)
(5104,5752,2)
(4126,5683,2)
(771,31,2)
(3571,5059,2)
(3003,2614,2)
(5374,3539,2)
(1604,1081,2)
(480,4295,2)
(986,794,2)
(573,170,2)
(2329,580,2)
(1828,627,2)
(4693,2964,2)
(3024,2050,2)
(847,2452,2)
(2815,2721,2)
(3578,3421,2)
(573,584,2)
(4360,3086,2)
(87,1844,2)
(5251,1034,2)
(4341,3442,2)
(1321,5316,2)
(551,2620,2)
(3113,2014,2)
(1893,2476,2)
(48,1590,2)
(433,273,2)
(893,2042,2)
(4041,2721,2)
(4663,4807,2)
(3465,58,2)
(5482,564,2)
(767,5120,2)
(464,5084,2)
(357,2452,2)
(2946,1174,2)
(460,4797,2)
(3931,2655,2)
(1760,1400,2)
(3216,627,2)
(1540,5156,2)
(587,2791,2)
(4423,1081,2)
(2500,3039,2)
(3860,943,2)
(5215,2190,2)
(880,1608,2)
(817,4567,2)
(864,1626,2)
(2279,4182,2)
(3514,2976,2)
(524,1259,2)
(4488,851,2)
(3965,2426,2)
(1506,1326,2)
(3766,682,2)
(3247,823,2)
(4530,2711,2)
(2319,2246,2)
(2695,2338,2)
(5050,3816,2)
(307,81,2)
(11,1960,2)
(5187,1441,2)
(2326,2413,2)
(1159,4058,2)
(325,5709,2)
(1527,758,2)
(3555,4307,2)
(453,4932,2)
(52,1721,2)
(3055,2190,2)
(773,1478,2)
(3656,1844,2)
(4428,3668,2)
(3683,2976,2)
(5637,3683,2)
(504,3176,2)
(2284,1034,2)
(126,2190,2)
(2475,2748,2)
(3741,89,2)
(3760,4639,2)
(643,3579,2)
(4350,2523,2)
(665,4765,2)
(2927,897,2)
(4126,523,2)
(4867,3921,2)
(4548,2149,2)
(3493,1433,2)
(204,276,2)
(2873,2143,2)
(2714,3064,2)
(2586,4396,2)
(951,3640,2)
(3256,3474,2)
(3248,998,2)
(2326,1826,2)
(4714,273,2)
(3822,1400,2)
(351,2629,2)
(5710,3579,2)
(4321,1844,2)
(3223,4396,2)
(3360,2666,2)
(1670,2190,2)
(3708,2265,2)
(2063,2168,2)
(5686,1157,2)
(3589,372,2)
(3140,521,2)
(2582,1671,2)
(1413,3474,2)
(4404,1847,2)
(5207,3103,2)
(1351,2902,2)
(3127,5120,2)
(5689,3278,2)
(1627,1715,2)
(4717,1844,2)
(3024,4295,2)
(4828,5059,2)
(553,5289,2)
(3098,1670,2)
(2453,4432,2)
(641,2666,2)
(4788,191,2)
(3984,4764,2)
(4174,1844,2)
(3763,4567,2)
(502,3497,2)
(3857,1240,2)
(4652,5059,2)
(670,665,2)
(5007,716,2)
(4027,627,2)
(4598,1400,2)
(3650,1844,2)
(3168,1350,2)
(4935,4050,2)
(394,1396,2)
(3121,4396,2)
(2918,4807,2)
(2768,1411,2)
(2807,5406,2)
(5764,943,2)
(4663,5414,2)
(2866,1715,2)
(374,1034,2)
(4806,720,2)
(898,3584,2)
(365,2279,2)
(1932,1844,2)
(4743,743,2)
(2653,273,2)
(2286,716,2)
(1503,4352,2)
(1128,5022,2)
(854,3921,2)
(3195,4442,2)
(5682,4905,2)
(4920,1700,2)
(4139,195,2)
(1805,1844,2)
(5506,1994,2)
(3726,2000,2)
(2790,851,2)
(5282,3979,2)
(4377,5298,2)
(1581,4567,2)
(3666,1034,2)
(1522,2497,2)
(4531,1326,2)
(1568,2082,2)
(2905,4432,2)
(4826,1844,2)
(4796,1259,2)
(4691,911,2)
(3452,1113,2)
(5346,3579,2)
(5306,5156,2)
(2169,5079,2)
(4643,1508,2)
(5755,3469,2)
(5235,1400,2)
(5469,5059,2)
(5614,5055,2)
(1553,1698,2)
(2846,2721,2)
(39,331,2)
(1651,1167,2)
(2255,4567,2)
(4126,3790,2)
(4663,1031,2)
(3910,5027,2)
(978,3086,2)
(907,5417,2)
(3064,5093,2)
(2136,3755,2)
(2415,734,2)
(3707,335,2)
(4556,1411,2)
(4013,1187,2)
(4344,3067,2)
(427,1715,2)
(5312,1478,2)
(428,5385,2)
(4787,3979,2)
(3177,2426,2)
(4673,860,2)
(1476,3486,2)
(5729,1777,2)
(5456,627,2)
(698,1863,2)
(4867,1947,2)
(75,2708,2)
(2267,2358,2)
(1687,1406,2)
(3644,309,2)
(4091,204,2)
(2759,5429,2)
(4126,584,2)
(3287,1326,2)
(1211,2768,2)
(1735,5683,2)
(5521,4471,2)
(5019,5015,2)
(3132,523,2)
(4002,1167,2)
(3453,2721,2)
(343,4546,2)
(5550,2655,2)
(2098,4396,2)
(4048,3919,2)
(4457,5059,2)
(997,4324,2)
(1994,5535,2)
(4051,5574,2)
(2747,627,2)
(3876,2721,2)
(3238,3579,2)
(4940,5629,2)
(4565,1844,2)
(813,3838,2)
(1843,1714,2)
(5204,4788,2)
(3064,808,2)
(2557,2190,2)
(2728,2898,2)
(5009,170,2)
(353,991,2)
(1916,991,2)
(600,3909,2)
(3827,4058,2)
(3077,4828,2)
(3706,3263,2)
(2792,108,2)
(1198,5171,2)
(341,3140,2)
(5388,1465,2)
(867,3909,2)
(283,1400,2)
(4966,962,2)
(3440,4097,2)
(1979,1608,2)
(5201,3919,2)
(2422,5404,2)
(5560,451,2)
(5419,5427,2)
(370,3579,2)
(341,521,2)
(2326,2785,2)
(5682,5373,2)
(2326,3707,2)
(4734,943,2)
(4204,3300,2)
(286,3747,2)
(73,4471,2)
(2754,991,2)
(3311,627,2)
(5516,3790,2)
(3734,627,2)
(2549,2334,2)
(3987,4567,2)
(3945,2629,2)
(835,1844,2)
(3328,3355,2)
(3193,276,2)
(88,5289,2)
(1800,273,2)
(2776,5334,2)
(3208,1844,2)
(1842,2816,2)
(3662,3103,2)
(2044,5645,2)
(3084,1167,2)
(5351,3921,2)
(4922,1400,2)
(1231,4092,2)
(4173,869,2)
(4529,2773,2)
(3484,627,2)
(4394,3951,2)
(5120,4924,2)
(4479,2655,2)
(3845,4673,2)
(399,2745,2)
(4450,5127,2)
(5044,2452,2)
(5682,2486,2)
(1370,1844,2)
(2298,2773,2)
(3909,2358,2)
(3409,3802,2)
(3726,1574,2)
(4201,273,2)
(1464,5316,2)
(446,4567,2)
(646,4797,2)
(4143,3582,2)
(4219,1994,2)
(4951,296,2)
(3222,4797,2)
(5431,627,2)
(2478,2248,2)
(5420,1326,2)
(3341,876,2)
(5151,273,2)
(3654,4567,2)
(1863,5059,2)
(3902,5394,2)
(4897,4092,2)
(5409,4291,2)
(2837,627,2)
(4396,162,2)
(2801,5385,2)
(1714,4381,2)
(918,1862,2)
(3373,455,2)
(3256,276,2)
(1684,2523,2)
(3066,2748,2)
(1460,122,2)
(2500,3406,2)
(215,3247,2)
(3307,3526,2)
(4498,3837,2)
(5150,102,2)
(4190,2855,2)
(4280,2032,2)
(4663,1647,2)
(5063,2863,2)
(2616,3582,2)
(2149,3741,2)
(5022,4788,2)
(794,2108,2)
(2998,584,2)
(3090,5706,2)
(5753,1844,2)
(1497,4058,2)
(2310,296,2)
(1132,3325,2)
(2189,1273,2)
(4783,1411,2)
(335,5593,2)
(350,4786,2)
(3523,1400,2)
(3656,2113,2)
(89,3539,2)
(349,2113,2)
(1297,2614,2)
(5735,1850,2)
(547,5006,2)
(3657,1844,2)
(2944,1354,2)
(1136,4583,2)
(2256,1715,2)
(1172,3500,2)
(1083,5061,2)
(3501,3579,2)
(968,4611,2)
(4068,4736,2)
(2964,5113,2)
(2751,4108,2)
(5524,1926,2)
(622,5059,2)
(2880,4472,2)
(2119,1326,2)
(377,1350,2)
(209,5059,2)
(106,4042,2)
(318,1263,2)
(5604,666,2)
(2316,4068,2)
(838,1923,2)
(2216,3552,2)
(984,2190,2)
(2862,665,2)
(2655,2113,2)
(1616,665,2)
(5064,627,2)
(5385,4000,2)
(3640,3257,2)
(2918,1031,2)
(2416,4068,2)
(2789,3921,2)
(3518,2248,2)
(1526,1844,2)
(5691,1960,2)
(2797,3227,2)
(919,2316,2)
(4947,3204,2)
(3064,209,2)
(188,5573,2)
(4442,5532,2)
(2731,1350,2)
(2918,2758,2)
(3711,1624,2)
(4094,350,2)
(1473,477,2)
(1983,1618,2)
(4379,1844,2)
(3183,273,2)
(1791,2190,2)
(4598,5361,2)
(4947,3103,2)
(610,1522,2)
(1992,2038,2)
(2256,5562,2)
(5030,2748,2)
(915,1844,2)
(2024,836,2)
(1891,627,2)
(2567,2038,2)
(4501,1081,2)
(3064,3150,2)
(5458,1715,2)
(1870,5048,2)
(2663,4548,2)
(3042,2640,2)
(675,3351,2)
(3847,1049,2)
(1060,3747,2)
(599,2655,2)
(2500,3417,2)
(388,2241,2)
(2326,5099,2)
(187,717,2)
(1168,5022,2)
(4872,627,2)
(3526,5059,2)
(4663,4848,2)
(3328,3406,2)
(2918,5036,2)
(2265,3635,2)
(4171,1948,2)
(5622,5516,2)
(699,1777,2)
(5643,5027,2)
(2970,521,2)
(5334,1141,2)
(2918,4731,2)
(1358,5486,2)
(3965,1574,2)
(3419,1723,2)
(3448,3751,2)
(3300,2225,2)
(5071,1396,2)
(238,876,2)
(209,1326,2)
(3734,546,2)
(1748,2038,2)
(557,1844,2)
(2918,1864,2)
(3352,4567,2)
(2286,1844,2)
(482,706,2)
(2218,3211,2)
(2918,2785,2)
(2776,4254,2)
(790,4396,2)
(2805,5468,2)
(455,1618,2)
(1580,5486,2)
(545,4534,2)
(1010,4058,2)
(3079,627,2)
(3317,2248,2)
(5474,4567,2)
(2469,5289,2)
(920,2022,2)
(61,1715,2)
(3237,441,2)
(135,4774,2)
(1,4869,2)
(1086,4828,2)
(4019,1081,2)
(4826,1806,2)
(2677,523,2)
(1481,2452,2)
(2677,3247,2)
(5417,4828,2)
(4532,1326,2)
(5050,1132,2)
(164,1530,2)
(583,2708,2)
(1406,2050,2)
(3239,3257,2)
(19,1444,2)
(413,2557,2)
(114,4097,2)
(938,1081,2)
(3099,1791,2)
(451,5429,2)
(3170,2700,2)
(4307,1670,2)
(2396,4058,2)
(3351,3351,2)
(4521,2666,2)
(4650,3790,2)
(5764,763,2)
(5336,276,2)
(5409,1844,2)
(1406,276,2)
(2552,1844,2)
(1342,2748,2)
(2968,2369,2)
(2739,850,2)
(3979,4249,2)
(159,627,2)
(1786,1844,2)
(1450,3064,2)
(5736,2190,2)
(4445,1714,2)
(3848,195,2)
(2918,4249,2)
(2773,1610,2)
(2054,2853,2)
(4324,2000,2)
(3248,4432,2)
(5124,695,2)
(1128,1215,2)
(1508,5394,2)
(931,3637,2)
(1002,1326,2)
(3337,3879,2)
(811,1141,2)
(5015,2328,2)
(792,2399,2)
(4864,4583,2)
(1402,195,2)
(33,1392,2)
(1111,1844,2)
(2884,1737,2)
(4024,2954,2)
(3729,3897,2)
(1167,415,2)
(1630,1350,2)
(561,3790,2)
(1059,195,2)
(128,2248,2)
(2983,5524,2)
(4571,3060,2)
(3257,5517,2)
(125,1842,2)
(5603,4067,2)
(3134,962,2)
(3108,3247,2)
(5682,3114,2)
(3718,1144,2)
(4725,1772,2)
(335,2700,2)
(4009,5406,2)
(4969,584,2)
(3971,10,2)
(5265,4583,2)
(5682,2255,2)
(4674,2655,2)
(4412,1268,2)
(1317,2655,2)
(606,1400,2)
(3716,1608,2)
(523,1994,2)
(271,41,2)
(709,1687,2)
(2008,4432,2)
(2326,5115,2)
(4680,1844,2)
(2198,682,2)
(2393,5306,2)
(4735,627,2)
(2489,4902,2)
(2210,5434,2)
(215,273,2)
(1129,4666,2)
(4612,2474,2)
(1392,182,2)
(3211,2279,2)
(5449,10,2)
(2326,5469,2)
(2497,5059,2)
(2914,5059,2)
(1513,1130,2)
(3042,5528,2)
(295,3635,2)
(3274,1626,2)
(4868,5055,2)
(535,717,2)
(167,2190,2)
(2111,1259,2)
(4806,31,2)
(1848,1626,2)
(3984,3603,2)
(523,4686,2)
(1199,3921,2)
(212,5055,2)
(3337,4291,2)
(4294,3464,2)
(1,4567,2)
(3235,2748,2)
(2880,3897,2)
(2063,1294,2)
(4048,1817,2)
(3954,2666,2)
(2898,1859,2)
(376,716,2)
(3857,2160,2)
(4610,2113,2)
(754,716,2)
(3618,183,2)
(2918,2480,2)
(3372,1844,2)
(5724,884,2)
(1817,1889,2)
(4452,1350,2)
(1441,5058,2)
(5621,922,2)
(5702,31,2)
(946,1923,2)
(4513,1034,2)
(2879,924,2)
(3633,2500,2)
(5731,3255,2)
(1899,5022,2)
(2429,3652,2)
(1584,1844,2)
(4785,5542,2)
(3386,3421,2)
(2357,3130,2)
(215,2241,2)
(4467,2050,2)
(5568,1923,2)
(1453,4442,2)
(3335,918,2)
(4617,273,2)
(732,627,2)
(1137,2050,2)
(2645,3421,2)
(1323,716,2)
(1487,2531,2)
(4164,477,2)
(4447,944,2)
(4192,5059,2)
(2698,5113,2)
(2326,3821,2)
(1838,1350,2)
(1495,2655,2)
(2819,1714,2)
(507,1508,2)
(660,5394,2)
(896,4450,2)
(2139,4243,2)
(100,3438,2)
(5070,2050,2)
(3466,5289,2)
(303,265,2)
(2456,2072,2)
(5568,4295,2)
(856,3693,2)
(2036,4567,2)
(3664,627,2)
(2387,2983,2)
(5250,4915,2)
(1447,1400,2)
(5007,5113,2)
(4948,3008,2)
(1553,1671,2)
(2520,5675,2)
(1059,4460,2)
(2508,5059,2)
(5128,1850,2)
(2750,3640,2)
(3826,2334,2)
(5287,3965,2)
(5516,584,2)
(211,4765,2)
(1402,4295,2)
(2918,4848,2)
(2939,3473,2)
(4754,4969,2)
(1564,5448,2)
(4058,1034,2)
(5610,5059,2)
(5324,5194,2)
(1947,4105,2)
(1877,1326,2)
(4931,2939,2)
(4941,490,2)
(3055,580,2)
(3064,601,2)
(2474,4970,2)
(2962,2329,2)
(4025,850,2)
(5041,3763,2)
(5179,1715,2)
(1547,1354,2)
(4555,4828,2)
(1280,1034,2)
(5462,3579,2)
(1735,584,2)
(5207,2426,2)
(1976,2655,2)
(3256,4295,2)
(5277,4788,2)
(3483,217,2)
(5162,5059,2)
(3792,3173,2)
(5570,1715,2)
(3400,5059,2)
(4968,3790,2)
(4542,4018,2)
(2991,5537,2)
(5155,1626,2)
(1456,627,2)
(918,1844,2)
(5283,4530,2)
(4152,1129,2)
(3816,1741,2)
(4189,3579,2)
(751,408,2)
(2094,3409,2)
(1486,2038,2)
(1504,5432,2)
(2326,208,2)
(3696,2609,2)
(4992,2708,2)
(4526,1157,2)
(1377,5324,2)
(226,3921,2)
(3754,2721,2)
(1148,563,2)
(1893,3274,2)
(3316,716,2)
(4480,1326,2)
(1779,1215,2)
(3392,5528,2)
(792,3703,2)
(523,4341,2)
(3437,5048,2)
(2519,4450,2)
(883,2655,2)
(3836,1350,2)
(337,5751,2)
(5761,5384,2)
(2918,5093,2)
(4102,2671,2)
(1377,5194,2)
(4214,3184,2)
(1018,1478,2)
(1031,734,2)
(5585,627,2)
(5344,4350,2)
(3982,1081,2)
(3119,1777,2)
(3318,4567,2)
(4765,3986,2)
(5122,2474,2)
(5297,3214,2)
(4453,2075,2)
(5210,502,2)
(1664,924,2)
(3920,2796,2)
(1974,3421,2)
(259,3473,2)
(262,3511,2)
(3486,627,2)
(445,5055,2)
(3267,1508,2)
(3137,4947,2)
(4663,3197,2)
(4178,3637,2)
(948,3940,2)
(2326,1031,2)
(463,4357,2)
(4273,1505,2)
(2126,5385,2)
(1217,3488,2)
(5060,4567,2)
(2603,2926,2)
(502,2190,2)
(1714,2036,2)
(2401,3421,2)
(4923,2050,2)
(4212,2248,2)
(4867,5116,2)
(2725,4567,2)
(3064,1568,2)
(308,3640,2)
(5025,5589,2)
(5405,4432,2)
(3057,2248,2)
(4658,170,2)
(5430,3685,2)
(410,2708,2)
(447,5022,2)
(2369,5683,2)
(3807,1715,2)
(2895,850,2)
(4202,3902,2)
(5683,991,2)
(1516,3579,2)
(5493,2088,2)
(3214,5171,2)
(3919,1326,2)
(4256,3060,2)
(1406,584,2)
(746,5194,2)
(5248,4864,2)
(1487,1844,2)
(4649,204,2)
(4651,3488,2)
(2316,1342,2)
(2067,1081,2)
(384,1350,2)
(2918,1230,2)
(4080,4567,2)
(4358,3278,2)
(2143,5117,2)
(4725,2141,2)
(840,1994,2)
(3063,4567,2)
(459,1994,2)
(2955,2034,2)
(3631,1714,2)
(44,2969,2)
(401,4583,2)
(5120,1917,2)
(5250,4363,2)
(1014,1157,2)
(455,273,2)
(5682,209,2)
(267,4068,2)
(2075,1049,2)
(1039,4244,2)
(2261,2964,2)
(1770,1011,2)
(5237,1714,2)
(373,717,2)
(4663,3114,2)
(2932,1406,2)
(1622,1945,2)
(3693,307,2)
(5298,1406,2)
(1599,570,2)
(2369,3247,2)
(3119,3888,2)
(1237,1350,2)
(1735,523,2)
(5024,1081,2)
(4334,3846,2)
(1797,5055,2)
(1976,627,2)
(4599,1523,2)
(1656,4567,2)
(2611,3640,2)
(1351,4068,2)
(1610,4097,2)
(1563,4432,2)
(4663,4084,2)
(3979,1826,2)
(2915,3402,2)
(4042,5630,2)
(2687,4473,2)
(5426,3631,2)
(3065,4775,2)
(3979,5373,2)
(3252,1844,2)
(4636,2701,2)
(4354,5156,2)
(5682,1015,2)
(3172,3790,2)
(3914,3965,2)
(5629,5433,2)
(2687,1844,2)
(4019,627,2)
(2936,5116,2)
(183,5324,2)
(3551,3902,2)
(1764,1350,2)
(3512,81,2)
(3207,5267,2)
(799,716,2)
(5682,1647,2)
(787,2226,2)
(2025,4763,2)
(1202,1534,2)
(1975,4471,2)
(1794,5120,2)
(4006,4928,2)
(5174,2616,2)
(751,2190,2)
(1789,455,2)
(1423,625,2)
(4758,4343,2)
(2918,281,2)
(725,5059,2)
(2918,4102,2)
(622,195,2)
(564,1248,2)
(243,3260,2)
(3663,2655,2)
(2813,1351,2)
(1273,5334,2)
(5080,5683,2)
(4744,1994,2)
(4186,3060,2)
(2326,1015,2)
(3984,1492,2)
(2918,2325,2)
(841,3351,2)
(792,1951,2)
(1351,5059,2)
(1769,2944,2)
(5051,2190,2)
(5581,2899,2)
(2327,1400,2)
(4720,3257,2)
(1052,541,2)
(5535,743,2)
(4915,1850,2)
(936,1202,2)
(568,1268,2)
(3668,2321,2)
(3746,4546,2)
(2328,3644,2)
(1827,555,2)
(5580,1157,2)
(1548,2700,2)
(4280,1925,2)
(2182,4567,2)
(1273,3614,2)
(3365,1342,2)
(415,2666,2)
(735,1350,2)
(1458,3640,2)
(4579,1411,2)
(4844,791,2)
(44,735,2)
(810,3790,2)
(2392,627,2)
(4300,627,2)
(4042,3640,2)
(5579,4295,2)
(3906,106,2)
(1482,1715,2)
(4736,1850,2)
(5729,5059,2)
(4074,1034,2)
(4971,3805,2)
(318,3418,2)
(1316,106,2)
(4913,1081,2)
(4067,627,2)
(3634,3497,2)
(4145,1157,2)
(1105,2500,2)
(1144,1715,2)
(4205,2723,2)
(1093,170,2)
(1093,584,2)
(4663,1752,2)
(1129,5562,2)
(1298,5766,2)
(1239,2148,2)
(89,3765,2)
(3536,627,2)
(5316,2322,2)
(3248,3816,2)
(2599,836,2)
(4479,1081,2)
(4383,2248,2)
(5572,1714,2)
(3252,441,2)
(2954,3478,2)
(4663,4705,2)
(2516,2000,2)
(2490,1372,2)
(5717,1141,2)
(557,1715,2)
(1080,5685,2)
(4815,627,2)
(551,4396,2)
(5679,4567,2)
(1351,3064,2)
(3469,408,2)
(4080,3567,2)
(5373,1478,2)
(4170,2452,2)
(778,1844,2)
(2918,4300,2)
(43,1073,2)
(5682,2325,2)
(4211,4450,2)
(1886,2248,2)
(2405,5429,2)
(3064,4241,2)
(2659,2050,2)
(622,774,2)
(709,3897,2)
(1626,2190,2)
(5556,1081,2)
(5568,4583,2)
(2976,3909,2)
(838,2816,2)
(2773,2265,2)
(4676,5731,2)
(2818,716,2)
(4798,682,2)
(2452,923,2)
(402,2899,2)
(921,5436,2)
(65,2776,2)
(599,1976,2)
(5479,2477,2)
(4271,2590,2)
(385,627,2)
(690,1478,2)
(2339,1844,2)
(1180,1350,2)
(5122,276,2)
(2756,991,2)
(267,3488,2)
(289,5468,2)
(4659,1844,2)
(267,2902,2)
(3660,167,2)
(5217,1049,2)
(3511,1326,2)
(1532,4988,2)
(922,3812,2)
(2380,5116,2)
(3064,208,2)
(3787,2072,2)
(307,4068,2)
(1556,4788,2)
(5605,1994,2)
(49,2248,2)
(5558,3579,2)
(1023,3227,2)
(4851,1737,2)
(530,5289,2)
(3415,4432,2)
(1433,195,2)
(4263,3640,2)
(4787,5059,2)
(3286,2976,2)
(245,4567,2)
(1130,584,2)
(2152,1478,2)
(5295,1715,2)
(2818,5113,2)
(1322,204,2)
(5349,4366,2)
(1176,3919,2)
(1444,3579,2)
(4275,2614,2)
(2972,1034,2)
(5641,4000,2)
(4385,3393,2)
(2407,1983,2)
(2316,3064,2)
(5076,717,2)
(5557,4867,2)
(4791,273,2)
(2255,2072,2)
(3275,2748,2)
(2678,3692,2)
(3567,4567,2)
(71,3086,2)
(3535,2248,2)
(726,3666,2)
(777,3208,2)
(1489,350,2)
(2241,2334,2)
(774,1925,2)
(3064,3707,2)
(3939,4583,2)
(2568,1937,2)
(355,1844,2)
(2465,2248,2)
(3245,4291,2)
(808,2748,2)
(3256,170,2)
(2683,897,2)
(5734,5194,2)
(22,5059,2)
(2208,1842,2)
(3028,2190,2)
(534,3552,2)
(1825,1129,2)
(1295,106,2)
(20,2816,2)
(3367,132,2)
(5406,1675,2)
(5759,943,2)
(3822,4391,2)
(604,2248,2)
(324,3086,2)
(2326,3676,2)
(561,563,2)
(739,3500,2)
(4221,1844,2)
(989,1522,2)
(3882,3673,2)
(2538,4583,2)
(4210,4530,2)
(4912,5706,2)
(2104,4396,2)
(2326,4911,2)
(923,627,2)
(4432,5073,2)
(1662,523,2)
(904,2666,2)
(3990,1983,2)
(4766,2141,2)
(5682,3646,2)
(5174,4902,2)
(3979,4300,2)
(1419,2944,2)
(3979,208,2)
(5207,1574,2)
(1406,2816,2)
(3185,2603,2)
(3187,5511,2)
(3218,2050,2)
(3112,1994,2)
(138,1786,2)
(5317,1844,2)
(1629,3247,2)
(1916,2754,2)
(746,4324,2)
(2788,991,2)
(121,4788,2)
(2777,4786,2)
(3313,4110,2)
(3761,2190,2)
(40,2248,2)
(828,1326,2)
(1483,2939,2)
(2416,3979,2)
(5059,3581,2)
(1287,1350,2)
(2239,4969,2)
(610,3592,2)
(2837,5324,2)
(4629,1157,2)
(4640,2113,2)
(3347,2440,2)
(4458,5334,2)
(2300,2748,2)
(5614,3635,2)
(1453,2964,2)
(1622,5394,2)
(479,2588,2)
(1837,3184,2)
(835,13,2)
(3802,1844,2)
(3670,4624,2)
(2708,5639,2)
(1211,1411,2)
(3675,1350,2)
(758,3706,2)
(3105,665,2)
(1960,4621,2)
(5682,4632,2)
(2474,2171,2)
(4924,2748,2)
(3979,4120,2)
(5700,856,2)
(5567,665,2)
(2809,4068,2)
(2494,2721,2)
(498,4815,2)
(998,1850,2)
(4457,2735,2)
(4426,3052,2)
(2063,1983,2)
(844,2840,2)
(0,4693,2)
(4882,1844,2)
(400,1608,2)
(4888,2190,2)
(5246,4050,2)
(5054,1844,2)
(4866,580,2)
(4022,3441,2)
(5744,1329,2)
(330,5449,2)
(5498,5683,2)
(31,394,2)
(2809,563,2)
(620,2666,2)
(1601,521,2)
(1034,1326,2)
(3745,2868,2)
(1608,1715,2)
(160,1081,2)
(4628,2344,2)
(5008,1350,2)
(2326,3150,2)
(3293,1847,2)
(5682,4300,2)
(1813,4472,2)
(4714,5059,2)
(5343,5456,2)
(4570,1326,2)
(5612,1141,2)
(441,5267,2)
(3041,4396,2)
(4240,2853,2)
(956,3159,2)
(1742,4058,2)
(906,5429,2)
(2339,5486,2)
(463,2624,2)
(3821,1326,2)
(1945,2873,2)
(5126,5059,2)
(5318,924,2)
(4245,4390,2)
(5020,31,2)
(2059,3909,2)
(4068,1910,2)
(3332,868,2)
(3043,1157,2)
(2885,549,2)
(3702,3637,2)
(1737,2655,2)
(4409,4788,2)
(5682,4705,2)
(4663,2406,2)
(4728,2666,2)
(378,1892,2)
(726,2251,2)
(3408,3188,2)
(2184,4786,2)
(1735,2616,2)
(5078,2673,2)
(445,3635,2)
(437,4788,2)
(4987,3902,2)
(1460,4828,2)
(677,2616,2)
(3064,1775,2)
(680,3248,2)
(5292,1326,2)
(3867,4583,2)
(2323,2655,2)
(3829,991,2)
(3979,601,2)
(160,2655,2)
(2620,4396,2)
(4000,4788,2)
(103,5059,2)
(51,1326,2)
(4261,4058,2)
(2388,5059,2)
(2753,1354,2)
(2416,5682,2)
(1739,167,2)
(4492,1509,2)
(2373,4902,2)
(270,1398,2)
(5674,2358,2)
(3912,4624,2)
(3846,1844,2)
(3638,1329,2)
(1815,627,2)
(155,984,2)
(5571,3579,2)
(5404,3421,2)
(5275,2050,2)
(2600,2050,2)
(5125,5754,2)
(5652,4244,2)
(3327,3897,2)
(4076,1400,2)
(4567,4381,2)
(874,4788,2)
(4161,534,2)
(1413,195,2)
(4068,4449,2)
(492,5736,2)
(1570,1622,2)
(4318,1815,2)
(5154,4311,2)
(3923,1268,2)
(4586,1579,2)
(954,357,2)
(967,1844,2)
(2505,4432,2)
(1033,5706,2)
(2812,5249,2)
(2114,4717,2)
(3376,3511,2)
(5747,2666,2)
(44,5077,2)
(3478,4472,2)
(3816,5348,2)
(3123,3474,2)
(1590,2500,2)
(259,991,2)
(1752,1478,2)
(357,5177,2)
(859,1844,2)
(198,1081,2)
(2173,4132,2)
(1491,1866,2)
(5301,4567,2)
(4540,4054,2)
(4977,1844,2)
(3530,1259,2)
(3956,1844,2)
(734,2190,2)
(5481,2616,2)
(1136,2616,2)
(943,4097,2)
(2355,717,2)
(1103,193,2)
(576,1994,2)
(2256,4549,2)
(4663,4449,2)
(163,5022,2)
(4028,584,2)
(2159,5394,2)
(3140,1844,2)
(5682,5036,2)
(4232,5432,2)
(2995,2117,2)
(3777,2655,2)
(4980,2816,2)
(5002,2655,2)
(1059,627,2)
(590,4788,2)
(5714,3919,2)
(2621,998,2)
(1628,4726,2)
(250,5477,2)
(4888,4550,2)
(2225,195,2)
(2256,4666,2)
(4742,627,2)
(1635,897,2)
(1612,5434,2)
(791,4788,2)
(3546,2328,2)
(1918,1081,2)
(5121,1958,2)
(3812,1844,2)
(4592,4231,2)
(4272,1400,2)
(4663,808,2)
(4381,716,2)
(2473,4092,2)
(3674,1130,2)
(5459,3042,2)
(218,1478,2)
(1377,5059,2)
(4379,4122,2)
(5453,4231,2)
(3939,2816,2)
(2588,1944,2)
(3328,1575,2)
(2692,2500,2)
(3172,2809,2)
(5682,2030,2)
(2816,749,2)
(779,1983,2)
(1492,5384,2)
(3326,2303,2)
(271,3000,2)
(5213,4396,2)
(3025,408,2)
(1902,5089,2)
(3177,943,2)
(5110,2629,2)
(5054,3747,2)
(2461,4442,2)
(213,5397,2)
(2248,1714,2)
(180,5706,2)
(4176,627,2)
(3052,4934,2)
(4007,2190,2)
(5171,962,2)
(1571,848,2)
(4086,4128,2)
(1638,276,2)
(3939,2474,2)
(5199,441,2)
(3344,2000,2)
(5177,1844,2)
(2115,1850,2)
(4983,1925,2)
(4708,4567,2)
(1045,4295,2)
(2326,1778,2)
(4327,5058,2)
(2892,2246,2)
(5520,908,2)
(3813,5194,2)
(395,3790,2)
(2918,565,2)
(4930,1034,2)
(2751,2721,2)
(3838,4542,2)
(2289,3579,2)
(5435,3421,2)
(5726,4058,2)
(5167,5207,2)
(1555,2863,2)
(5210,3497,2)
(1753,4054,2)
(66,58,2)
(1153,2038,2)
(326,1844,2)
(3333,3640,2)
(3758,1478,2)
(3054,171,2)
(1234,1175,2)
(3205,2334,2)
(3097,3640,2)
(3214,962,2)
(3614,5334,2)
(1005,2508,2)
(4027,4567,2)
(1402,3582,2)
(3307,1319,2)
(1304,5289,2)
(4056,2248,2)
(4274,3919,2)
(2367,1400,2)
(4357,4774,2)
(3499,4050,2)
(4686,5162,2)
(264,2748,2)
(205,2248,2)
(5299,3790,2)
(136,1396,2)
(3143,5058,2)
(4959,2160,2)
(5334,1917,2)
(1570,5394,2)
(2428,2322,2)
(665,1396,2)
(5682,208,2)
(4068,2997,2)
(1654,1508,2)
(2012,4450,2)
(164,2747,2)
(488,2999,2)
(4296,1326,2)
(4911,924,2)
(5317,3863,2)
(5177,1932,2)
(2758,1523,2)
(5703,3173,2)
(4483,564,2)
(2468,4902,2)
(5182,5436,2)
(5450,911,2)
(4321,908,2)
(2270,627,2)
(3886,2050,2)
(5542,1844,2)
(3511,2074,2)
(3086,1624,2)
(2529,3064,2)
(2954,2816,2)
(2277,746,2)
(5097,4250,2)
(353,844,2)
(3311,1715,2)
(5682,1230,2)
(2791,195,2)
(2918,4120,2)
(3658,3747,2)
(108,2248,2)
(746,2000,2)
(2464,5059,2)
(2665,1618,2)
(4262,3826,2)
(3302,3368,2)
(3024,2816,2)
(966,2700,2)
(1944,3913,2)
(4688,5415,2)
(3088,3790,2)
(3887,1624,2)
(2088,5444,2)
(2308,1715,2)
(5170,4797,2)
(3844,1400,2)
(2134,3059,2)
(2787,2700,2)
(4019,2655,2)
(1786,3751,2)
(3553,273,2)
(1263,4058,2)
(189,2787,2)
(4390,2508,2)
(4033,5287,2)
(215,1618,2)
(5250,1850,2)
(5745,2038,2)
(1038,5683,2)
(3708,1670,2)
(4547,2748,2)
(5516,523,2)
(2954,1923,2)
(1074,1350,2)
(4375,2050,2)
(4939,104,2)
(2193,1326,2)
(533,5075,2)
(3657,856,2)
(573,2816,2)
(2101,2344,2)
(4612,584,2)
(790,4788,2)
(4033,1574,2)
(4980,2474,2)
(3760,4432,2)
(1383,4054,2)
(4359,4567,2)
(2120,627,2)
(4255,2437,2)
(1442,4250,2)
(1881,149,2)
(5468,2624,2)
(4499,1994,2)
(3024,276,2)
(2234,1377,2)
(519,1813,2)
(1592,3159,2)
(4905,716,2)
(3104,1268,2)
(2502,1600,2)
(5123,584,2)
(980,1081,2)
(3788,1850,2)
(39,370,2)
(1041,1844,2)
(3979,5469,2)
(3498,665,2)
(3219,563,2)
(2918,1802,2)
(5384,3103,2)
(5552,1508,2)
(5171,3042,2)
(455,4902,2)
(305,2241,2)
(4567,2072,2)
(607,2234,2)
(1129,4621,2)
(4435,3442,2)
(3070,1392,2)
(986,627,2)
(4751,5324,2)
(1073,167,2)
(3921,2863,2)
(1081,2655,2)
(5398,627,2)
(4307,943,2)
(1922,2241,2)
(792,3422,2)
(3532,5394,2)
(2753,1618,2)
(2677,2190,2)
(3343,2539,2)
(5637,1844,2)
(4926,3582,2)
(2697,2303,2)
(3036,1892,2)
(2271,3824,2)
(3381,1847,2)
(609,4735,2)
(1735,4244,2)
(477,1717,2)
(1633,3635,2)
(1450,3979,2)
(3236,604,2)
(1129,4535,2)
(4761,1611,2)
(3256,4583,2)
(1610,2334,2)
(750,2234,2)
(1139,4145,2)
(4101,4341,2)
(1642,1326,2)
(2227,1844,2)
(225,5706,2)
(3538,3227,2)
(747,1994,2)
(5618,4828,2)
(4663,732,2)
(1977,991,2)
(4069,1698,2)
(270,2248,2)
(1389,3843,2)
(44,3452,2)
(215,1983,2)
(496,2334,2)
(5215,2334,2)
(4844,4788,2)
(5532,4964,2)
(1339,991,2)
(1488,2248,2)
(3979,1230,2)
(3978,4902,2)
(355,2813,2)
(13,3857,2)
(5379,2609,2)
(4861,2241,2)
(908,1187,2)
(860,2500,2)
(3098,4097,2)
(5495,665,2)
(4637,1716,2)
(4128,4208,2)
(3928,4775,2)
(2130,1777,2)
(1853,1844,2)
(3428,4068,2)
(4223,1788,2)
(4090,3184,2)
(680,4432,2)
(1371,4450,2)
(5400,2666,2)
(4194,3679,2)
(5364,1350,2)
(3403,1844,2)
(3100,1081,2)
(4970,5150,2)
(1136,4902,2)
(2235,627,2)
(4364,4291,2)
(1396,2000,2)
(3856,4567,2)
(1140,455,2)
(5439,521,2)
(3963,2629,2)
(2497,2816,2)
(2148,4244,2)
(1136,1618,2)
(5067,4991,2)
(2880,627,2)
(1425,2721,2)
(4728,1844,2)
(3005,2246,2)
(1960,138,2)
(692,500,2)
(178,2344,2)
(4690,1035,2)
(823,3086,2)
(2455,1326,2)
(1471,2160,2)
(4511,5119,2)
(4530,5622,2)
(5224,2898,2)
(2458,4947,2)
(4947,2426,2)
(3917,1671,2)
(4663,1910,2)
(4068,2821,2)
(2476,627,2)
(4867,4105,2)
(120,1342,2)
(2133,2655,2)
(573,4295,2)
(3095,1157,2)
(3060,3214,2)
(2971,5642,2)
(5334,3417,2)
(3160,1406,2)
(2348,1626,2)
(3352,4381,2)
(2463,1844,2)
(4139,3582,2)
(4675,2226,2)
(2286,5394,2)
(5281,1777,2)
(2326,1230,2)
(2677,3790,2)
(5620,3122,2)
(606,4391,2)
(453,5406,2)
(2757,911,2)
(2131,3652,2)
(2382,2655,2)
(3022,1396,2)
(1692,1994,2)
(3197,4567,2)
(1741,4728,2)
(5682,1826,2)
(4307,182,2)
(1987,1411,2)
(2382,5059,2)
(2050,3116,2)
(1932,2452,2)
(3341,5059,2)
(2816,3300,2)
(393,3919,2)
(5130,273,2)
(3295,2748,2)
(3584,3584,2)
(5307,1925,2)
(2317,734,2)
(2326,3197,2)
(1775,3919,2)
(971,1452,2)
(2490,2588,2)
(3518,1628,2)
(455,5683,2)
(2230,2328,2)
(5456,3919,2)
(3661,3488,2)
(1797,4295,2)
(838,2474,2)
(4381,1453,2)
(5100,1887,2)
(3201,3640,2)
(3162,2248,2)
(428,5424,2)
(942,1737,2)
(310,1350,2)
(2079,4244,2)
(3979,5093,2)
(983,2139,2)
(2139,1034,2)
(1029,563,2)
(1286,3640,2)
(3573,1844,2)
(5061,5075,2)
(1358,1844,2)
(2840,372,2)
(4587,2490,2)
(3941,3909,2)
(5573,2538,2)
(1314,1508,2)
(5375,608,2)
(739,5757,2)
(1585,4350,2)
(1640,5289,2)
(1560,3578,2)
(3919,1632,2)
(2538,170,2)
(1885,1698,2)
(3042,1326,2)
(4560,1081,2)
(169,1844,2)
(5136,3300,2)
(5682,5115,2)
(1883,2748,2)
(5537,2944,2)
(91,716,2)
(4738,4058,2)
(3877,2285,2)
(4154,3169,2)
(4291,4500,2)
(1146,627,2)
(952,1478,2)
(4757,2248,2)
(1059,3582,2)
(3271,5022,2)
(4770,2256,2)
(2185,1326,2)
(1181,4797,2)
(3630,1566,2)
(101,546,2)
(3209,1354,2)
(4225,3919,2)
(5384,2426,2)
(217,2666,2)
(4423,2655,2)
(2434,1350,2)
(125,5502,2)
(5542,4652,2)
(1820,1523,2)
(3064,4084,2)
(1438,1326,2)
(4213,2523,2)
(5370,4141,2)
(1701,2899,2)
(24,3060,2)
(4923,3474,2)
(3064,2030,2)
(3863,4321,2)
(3960,1034,2)
(267,3979,2)
(4921,5022,2)
(904,1651,2)
(5327,666,2)
(988,1329,2)
(5315,4295,2)
(467,5156,2)
(4663,1568,2)
(1589,5289,2)
(4923,276,2)
(3050,2959,2)
(1623,4396,2)
(4175,4902,2)
(2326,2540,2)
(2784,4341,2)
(2597,3579,2)
(1916,1354,2)
(4001,2500,2)
(2787,5059,2)
(1590,1241,2)
(2380,3921,2)
(2066,2248,2)
(2326,2997,2)
(39,5675,2)
(2116,1326,2)
(5681,1482,2)
(4684,5058,2)
(2326,4632,2)
(4432,2452,2)
(1056,1844,2)
(3163,3790,2)
(4594,1741,2)
(2623,4567,2)
(1479,4110,2)
(3592,2464,2)
(1313,5097,2)
(5690,1983,2)
(2234,5324,2)
(5639,1396,2)
(3451,5194,2)
(4644,4235,2)
(2483,5394,2)
(3277,3231,2)
(5659,3826,2)
(3257,276,2)
(4316,4567,2)
(2000,4042,2)
(2708,410,2)
(4213,627,2)
(5149,3579,2)
(5350,3657,2)
(2486,31,2)
(5003,2612,2)
(5634,3582,2)
(4864,2050,2)
(1081,883,2)
(3232,5683,2)
(330,1203,2)
(4112,1350,2)
(2990,2288,2)
(440,5058,2)
(2256,3644,2)
(5468,1844,2)
(4751,627,2)
(54,2265,2)
(792,3420,2)
(2730,5097,2)
(4797,2190,2)
(2604,2893,2)
(5685,1350,2)
(5178,907,2)
(4539,1129,2)
(1279,570,2)
(937,2816,2)
(5334,331,2)
(639,5156,2)
(119,1073,2)
(1313,4250,2)
(5526,3421,2)
(2473,4897,2)
(1847,5683,2)
(4134,1326,2)
(3248,627,2)
(2508,2802,2)
(181,183,2)
(5166,3579,2)
(4600,2748,2)
(4952,3764,2)
(4561,1129,2)
(1230,4244,2)
(4656,3579,2)
(4956,4828,2)
(95,523,2)
(3190,1157,2)
(3081,2944,2)
(5200,2344,2)
(429,2748,2)
(2051,4784,2)
(1727,1573,2)
(2363,1400,2)
(3726,3103,2)
(5175,5048,2)
(4621,1715,2)
(3142,1081,2)
(246,81,2)
(1942,5432,2)
(2825,4432,2)
(3747,5486,2)
(2898,2898,2)
(4991,3579,2)
(4663,5707,2)
(2043,1350,2)
(2095,3511,2)
(4147,1400,2)
(3979,2540,2)
(2642,1400,2)
(2903,3902,2)
(1027,2050,2)
(4836,2954,2)
(3265,1715,2)
(5125,3640,2)
(5325,2344,2)
(5715,296,2)
(3291,455,2)
(1370,521,2)
(4544,3280,2)
(1638,2050,2)
(1487,5436,2)
(3223,4788,2)
(2480,1367,2)
(3238,3681,2)
(1996,2796,2)
(4055,4022,2)
(2918,3197,2)
(3771,2748,2)
(4923,4295,2)
(5067,5149,2)
(1395,627,2)
(3119,5729,2)
(3264,1392,2)
(3667,962,2)
(1608,3311,2)
(3697,2701,2)
(5631,4923,2)
(3328,4991,2)
(3455,4105,2)
(5646,5048,2)
(3757,2248,2)
(173,5406,2)
(4059,2222,2)
(4878,916,2)
(4317,2300,2)
(5174,1354,2)
(2536,2721,2)
(2766,716,2)
(1624,3172,2)
(414,2748,2)
(3064,2317,2)
(157,4070,2)
(882,4105,2)
(1524,2248,2)
(4228,3632,2)
(624,3956,2)
(5085,5022,2)
(1545,3882,2)
(1104,4567,2)
(2218,2279,2)
(2447,4583,2)
(4382,3381,2)
(4180,2588,2)
(195,3690,2)
(2438,5324,2)
(31,4765,2)
(2918,4736,2)
(3064,2480,2)
(4500,3286,2)
(3337,4500,2)
(4606,1777,2)
(1564,3421,2)
(2632,4231,2)
(792,1629,2)
(107,3647,2)
(3506,2288,2)
(4865,924,2)
(4162,991,2)
(4522,3837,2)
(816,2721,2)
(486,5706,2)
(2369,3790,2)
(2918,3707,2)
(2958,5683,2)
(667,2376,2)
(4315,1626,2)
(130,5079,2)
(2601,5120,2)
(91,627,2)
(2869,5543,2)
(4378,5022,2)
(3979,93,2)
(3064,2821,2)
(3274,5059,2)
(770,1350,2)
(537,924,2)
(4455,5683,2)
(4492,1610,2)
(1574,1655,2)
(4515,5196,2)
(793,2701,2)
(3992,5683,2)
(2235,1081,2)
(3064,3273,2)
(4745,3569,2)
(3297,170,2)
(939,5283,2)
(780,3511,2)
(2376,4969,2)
(2563,189,2)
(389,4587,2)
(1275,1350,2)
(3979,4628,2)
(3322,5706,2)
(2591,2629,2)
(2048,1350,2)
(1735,2241,2)
(2710,627,2)
(4692,584,2)
(1950,2248,2)
(2728,1892,2)
(5231,850,2)
(4306,1508,2)
(3708,4097,2)
(4295,1141,2)
(2677,1983,2)
(4207,546,2)
(228,1478,2)
(1895,5683,2)
(1704,1326,2)
(2108,3582,2)
(5146,1715,2)
(512,4947,2)
(5529,2721,2)
(3506,2983,2)
(3522,1482,2)
(5501,3579,2)
(204,2796,2)
(2753,3790,2)
(305,273,2)
(5222,1326,2)
(1685,3355,2)
(3203,4797,2)
(1130,2802,2)
(3299,1844,2)
(1216,3631,2)
(5523,5289,2)
(5699,546,2)
(3337,1947,2)
(1845,4828,2)
(3755,3678,2)
(4663,1778,2)
(2677,1618,2)
(3234,1326,2)
(2740,962,2)
(4864,1923,2)
(3517,3579,2)
(2472,3216,2)
(5650,991,2)
(5516,4583,2)
(5682,3488,2)
(3441,2474,2)
(4424,2117,2)
(3565,717,2)
(275,991,2)
(2695,4350,2)
(5567,5702,2)
(3229,5406,2)
(1297,204,2)
(4118,4567,2)
(442,2481,2)
(4687,1350,2)
(1923,4979,2)
(741,627,2)
(4896,2328,2)
(4665,4396,2)
(5342,3579,2)
(5663,2700,2)
(3845,2500,2)
(2714,2902,2)
(1535,3187,2)
(3053,4743,2)
(87,357,2)
(3569,5429,2)
(2874,4586,2)
(2447,2032,2)
(3592,1522,2)
(496,2265,2)
(783,5683,2)
(1960,3277,2)
(4259,584,2)
(2357,5176,2)
(5334,3039,2)
(5329,4667,2)
(563,2241,2)
(1827,5355,2)
(41,2248,2)
(1707,1011,2)
(4816,1326,2)
(5099,1081,2)
(4033,3204,2)
(2935,1508,2)
(239,195,2)
(3678,2241,2)
(2954,4583,2)
(3603,3726,2)
(4241,2721,2)
(3064,4807,2)
(2326,4412,2)
(2581,627,2)
(4504,3421,2)
(4980,3474,2)
(1824,1844,2)
(579,3919,2)
(4364,3921,2)
(29,5022,2)
(5683,1321,2)
(5244,5406,2)
(3907,2430,2)
(3431,3439,2)
(1502,3424,2)
(1910,1081,2)
(1925,2038,2)
(5282,5059,2)
(4689,5176,2)
(2593,3173,2)
(1646,1844,2)
(771,4566,2)
(3407,1844,2)
(350,2701,2)
(2358,521,2)
(2365,1715,2)
(5064,1715,2)
(704,217,2)
(5027,3638,2)
(1443,2228,2)
(633,4432,2)
(911,627,2)
(3757,456,2)
(2981,1923,2)
(4550,3507,2)
(2247,4718,2)
(5174,3790,2)
(3750,3919,2)
(5682,4894,2)
(2726,1350,2)
(1850,2666,2)
(4661,2936,2)
(3052,368,2)
(2983,2288,2)
(3804,2748,2)
(2543,4432,2)
(1136,1983,2)
(1719,1081,2)
(3256,2050,2)
(1242,4341,2)
(884,5683,2)
(1747,4216,2)
(4595,884,2)
(4864,4295,2)
(3064,2392,2)
(847,627,2)
(3924,5324,2)
(3062,2248,2)
(4338,1698,2)
(5152,2721,2)
(4871,5417,2)
(1850,5400,2)
(2668,4500,2)
(1178,4291,2)
(2171,4970,2)
(1106,908,2)
(1508,204,2)
(2353,2816,2)
(393,1817,2)
(2918,2255,2)
(1851,3582,2)
(3328,4924,2)
(4350,4213,2)
(4126,4244,2)
(4745,2322,2)
(2005,4828,2)
(4138,296,2)
(445,4295,2)
(2810,1268,2)
(3582,43,2)
(4612,1923,2)
(1281,2358,2)
(1514,856,2)
(4969,2639,2)
(1312,1400,2)
(368,1844,2)
(5209,3060,2)
(2530,1350,2)
(5574,3637,2)
(4163,546,2)
(5641,5429,2)
(3478,627,2)
(1810,1326,2)
(1235,665,2)
(4727,1844,2)
(82,1925,2)
(2183,3628,2)
(1261,2721,2)
(4084,5059,2)
(5089,1400,2)
(3892,1958,2)
(2858,1350,2)
(2694,4567,2)
(4843,2000,2)
(378,4721,2)
(1161,2904,2)
(3036,793,2)
(3523,4391,2)
(271,1844,2)
(4053,2248,2)
(5027,1329,2)
(77,686,2)
(4969,1130,2)
(5170,239,2)
(4587,1710,2)
(924,4432,2)
(4275,3539,2)
(4899,2721,2)
(2369,4583,2)
(4972,4618,2)
(2520,4924,2)
(4273,3552,2)
(4765,627,2)
(4980,4583,2)
(39,1101,2)
(1175,3421,2)
(2295,2944,2)
(1450,2902,2)
(1093,276,2)
(2581,1817,2)
(5224,3739,2)
(4454,2721,2)
(1976,1081,2)
(2123,4242,2)
(3621,3060,2)
(5073,537,2)
(5720,3640,2)
(3119,1443,2)
(280,4801,2)
(104,2701,2)
(2918,1456,2)
(4715,2248,2)
(2850,4947,2)
(4665,3338,2)
(409,5736,2)
(305,4244,2)
(3174,4763,2)
(1395,4788,2)
(1078,5406,2)
(3979,4412,2)
(2338,4824,2)
(141,523,2)
(3478,4923,2)
(94,3640,2)
(5392,2416,2)
(4900,3064,2)
(1027,2474,2)
(3685,3122,2)
(1943,1326,2)
(4712,584,2)
(85,5289,2)
(2380,2190,2)
(2500,4924,2)
(5515,584,2)
(962,2939,2)
(838,3474,2)
(4811,4788,2)
(5334,370,2)
(2168,3635,2)
(2876,1034,2)
(4574,243,2)
(990,4471,2)
(2720,3052,2)
(3846,4105,2)
(5502,195,2)
(4227,1626,2)
(4258,627,2)
(5409,4500,2)
(741,3909,2)
(1340,1590,2)
(19,3579,2)
(5568,2816,2)
(3549,4471,2)
(1250,1983,2)
(1273,1141,2)
(2589,5059,2)
(5306,467,2)
(408,939,2)
(484,4381,2)
(5194,1396,2)
(3643,500,2)
(3540,1350,2)
(3946,4432,2)
(2830,1326,2)
(3139,897,2)
(355,1193,2)
(2460,716,2)
(3406,3579,2)
(1243,2655,2)
(4932,2271,2)
(5718,4567,2)
(183,2000,2)
(3450,3579,2)
(5379,2303,2)
(4515,1844,2)
(68,2248,2)
(4663,1230,2)
(2125,1994,2)
(3280,2190,2)
(4864,2816,2)
(2572,2256,2)
(5056,1081,2)
(2311,1626,2)
(5028,1326,2)
(4391,408,2)
(516,5486,2)
(3397,273,2)
(4221,2205,2)
(3908,5059,2)
(3128,4500,2)
(2193,5059,2)
(1494,5573,2)
(1687,3897,2)
(5236,4567,2)
(170,3441,2)
(3385,1844,2)
(2590,3637,2)
(4967,4396,2)
(5749,563,2)
(4105,521,2)
(1983,1844,2)
(4500,226,2)
(2466,3726,2)
(4663,4241,2)
(1321,3917,2)
(1831,5683,2)
(728,911,2)
(5610,844,2)
(4860,3582,2)
(4829,2748,2)
(2500,370,2)
(3417,3579,2)
(5300,743,2)
(3809,1011,2)
(4151,2655,2)
(2420,813,2)
(4131,856,2)
(2677,584,2)
(737,2621,2)
(3464,1400,2)
(664,2666,2)
(3979,1778,2)
(2326,5414,2)
(710,908,2)
(5706,5059,2)
(3585,908,2)
(5120,5149,2)
(2627,2748,2)
(4472,609,2)
(2440,273,2)
(1077,4851,2)
(2651,3666,2)
(4595,1596,2)
(5246,1844,2)
(241,1590,2)
(2918,1778,2)
(3934,1326,2)
(4612,3474,2)
(878,3919,2)
(5124,5097,2)
(1600,2655,2)
(2529,5682,2)
(5349,3701,2)
(5027,1558,2)
(334,2089,2)
(4851,5059,2)
(5159,1326,2)
(5560,5384,2)
(3064,5373,2)
(2662,3631,2)
(3184,2190,2)
(2063,3990,2)
(3064,281,2)
(4688,5324,2)
(5048,2562,2)
(219,2329,2)
(1499,717,2)
(2805,4977,2)
(1202,149,2)
(1058,5113,2)
(533,1315,2)
(2753,1983,2)
(2920,4903,2)
(4736,627,2)
(4324,5324,2)
(3862,5048,2)
(2915,5430,2)
(2629,5152,2)
(1478,3130,2)
(1424,4396,2)
(1995,1714,2)
(5148,2324,2)
(2036,4381,2)
(3726,2426,2)
(3735,2340,2)
(1579,856,2)
(1564,4176,2)
(132,4611,2)
(5394,881,2)
(5510,580,2)
(3017,3143,2)
(1716,3582,2)
(3897,4472,2)
(1565,5429,2)
(2488,5059,2)
(943,3635,2)
(5683,4124,2)
(1366,851,2)
(1431,2607,2)
(5122,2816,2)
(4457,627,2)
(2602,2344,2)
(3176,1081,2)
(5058,2555,2)
(4779,410,2)
(5386,3526,2)
(3497,1842,2)
(651,2050,2)
(215,523,2)
(4968,2616,2)
(5189,4567,2)
(4859,3582,2)
(3064,5115,2)
(1027,3474,2)
(2099,897,2)
(2328,5011,2)
(4678,984,2)
(3726,5324,2)
(499,1350,2)
(1606,1489,2)
(3700,2816,2)
(3965,3103,2)
(2607,3277,2)
(5264,3493,2)
(1065,850,2)
(2760,3214,2)
(4939,4058,2)
(753,5239,2)
(4877,2190,2)
(2563,2700,2)
(4731,5059,2)
(5079,2999,2)
(582,2899,2)
(2257,5324,2)
(519,5058,2)
(792,2811,2)
(3939,2050,2)
(5073,998,2)
(5117,915,2)
(4900,5059,2)
(4915,1844,2)
(1028,1522,2)
(3321,3632,2)
(4497,2370,2)
(531,4788,2)
(4161,5022,2)
(2293,907,2)
(2918,4084,2)
(4406,3099,2)
(1768,1879,2)
(1259,3635,2)
(5640,5116,2)
(933,1994,2)
(2534,2954,2)
(2437,3320,2)
(2097,2248,2)
(736,3965,2)
(3116,3582,2)
(2413,1326,2)
(16,4688,2)
(570,2190,2)
(5654,2246,2)
(970,5394,2)
(2609,2190,2)
(3177,2429,2)
(4398,521,2)
(4907,81,2)
(2326,732,2)
(4030,2875,2)
(4058,5224,2)
(5666,3421,2)
(4716,1157,2)
(2520,3039,2)
(4552,3965,2)
(408,1983,2)
(2605,2748,2)
(4333,3631,2)
(5385,973,2)
(423,1715,2)
(5737,3060,2)
(1527,1618,2)
(3151,2724,2)
(5476,1478,2)
(2884,5059,2)
(942,2248,2)
(1284,5736,2)
(4046,1478,2)
(408,4244,2)
(5490,1081,2)
(2918,4632,2)
(3444,1958,2)
(2763,4054,2)
(3185,991,2)
(2044,4016,2)
(4663,5373,2)
(5682,4848,2)
(3824,2405,2)
(5370,4591,2)
(2260,81,2)
(1114,3790,2)
(1138,5543,2)
(2600,3582,2)
(1703,2907,2)
(2628,3986,2)
(3979,2317,2)
(62,2248,2)
(2677,2241,2)
(667,4969,2)
(4403,3421,2)
(5697,1573,2)
(4049,2248,2)
(2708,1361,2)
(3389,455,2)
(168,3683,2)
(1860,3640,2)
(2992,10,2)
(5568,2050,2)
(4597,1925,2)
(1759,4828,2)
(1245,2999,2)
(3403,1327,2)
(949,546,2)
(2327,627,2)
(2724,3582,2)
(4434,1777,2)
(3000,3518,2)
(5380,4097,2)
(3328,370,2)
(3157,1925,2)
(659,353,2)
(2203,5194,2)
(4612,276,2)
(534,5022,2)
(345,1792,2)
(1457,5764,2)
(3690,1073,2)
(224,1844,2)
(4782,2452,2)
(3307,1844,2)
(5093,5436,2)
(5350,1844,2)
(5249,1489,2)
(1851,195,2)
(1583,2745,2)
(1731,5706,2)
(1824,2248,2)
(5682,2540,2)
(4620,1844,2)
(2521,991,2)
(984,1958,2)
(3901,3640,2)
(1450,5682,2)
(5146,5064,2)
(1466,962,2)
(2123,3385,2)
(1867,4743,2)
(1907,132,2)
(4663,1456,2)
(4965,2369,2)
(450,4774,2)
(2326,816,2)
(1229,4743,2)
(4620,2473,2)
(1270,4432,2)
(2035,3526,2)
(958,4902,2)
(1658,1035,2)
(1774,1157,2)
(4971,725,2)
(1660,1034,2)
(3064,2255,2)
(441,1847,2)
(100,5289,2)
(4300,217,2)
(2014,1350,2)
(1045,170,2)
(2581,2141,2)
(2629,2721,2)
(4928,1081,2)
(4938,1034,2)
(563,3755,2)
(3136,5224,2)
(4665,4788,2)
(1267,2748,2)
(1336,4788,2)
(1703,5055,2)
(2099,673,2)
(1813,627,2)
(5038,4567,2)
(2364,2643,2)
(3066,5059,2)
(4035,4042,2)
(934,1947,2)
(4360,2714,2)
(408,523,2)
(654,836,2)
(2,1850,2)
(796,1844,2)
(3073,1626,2)
(3869,3067,2)
(2459,3579,2)
(1611,2748,2)
(4980,4295,2)
(2234,2000,2)
(5622,4583,2)
(2581,717,2)
(1697,5436,2)
(986,1844,2)
(4869,3787,2)
(4217,3086,2)
(526,1035,2)
(3337,3921,2)
(3392,4058,2)
(5418,3177,2)
(4396,4052,2)
(3668,4591,2)
(4338,662,2)
(4310,2748,2)
(1744,4902,2)
(2520,5149,2)
(2779,2334,2)
(2138,2226,2)
(1015,2700,2)
(5606,3286,2)
(1829,1452,2)
(5739,4460,2)
(136,4774,2)
(2918,3114,2)
(4473,5059,2)
(4726,14,2)
(5172,850,2)
(2470,1141,2)
(4068,601,2)
(216,1350,2)
(4536,2137,2)
(705,132,2)
(3076,2248,2)
(1870,1844,2)
(1027,4295,2)
(175,4432,2)
(3762,851,2)
(2000,3640,2)
(3955,1806,2)
(2224,2226,2)
(5304,2655,2)
(1500,3790,2)
(2511,3099,2)
(2656,5394,2)
(3563,5059,2)
(640,3160,2)
(213,1503,2)
(923,1715,2)
(1381,3017,2)
(2326,601,2)
(3539,2614,2)
(4663,1015,2)
(3875,2148,2)
(4818,441,2)
(1532,2529,2)
(5556,2655,2)
(1399,627,2)
(4723,2701,2)
(4339,627,2)
(3249,3368,2)
(188,4307,2)
(2432,1350,2)
(1131,3474,2)
(5589,897,2)
(843,4396,2)
(5682,4807,2)
(2501,5194,2)
(4154,1321,2)
(366,1326,2)
(3965,4529,2)
(5331,1806,2)
(5301,2072,2)
(4307,4097,2)
(5392,273,2)
(2304,1994,2)
(2585,5022,2)
(5094,4244,2)
(2250,2607,2)
(3403,2599,2)
(394,5702,2)
(5224,1034,2)
(4794,5059,2)
(1242,1406,2)
(1756,5022,2)
(3511,581,2)
(5016,4343,2)
(3574,4382,2)
(4341,5059,2)
(5658,1174,2)
(2777,5224,2)
(3979,2486,2)
(638,521,2)
(54,2334,2)
(2925,3090,2)
(4616,2322,2)
(1001,3579,2)
(4788,2655,2)
(5682,2152,2)
(2873,5394,2)
(2155,2616,2)
(4964,4693,2)
(3877,3730,2)
(2586,4788,2)
(462,1400,2)
(4294,1400,2)
(4663,4916,2)
(1137,2816,2)
(5020,5692,2)
(4975,3618,2)
(4471,1958,2)
(4676,627,2)
(2918,4905,2)
(2898,3739,2)
(5192,4396,2)
(4442,4693,2)
(2495,4788,2)
(5370,2918,2)
(1374,2748,2)
(4352,5059,2)
(74,1077,2)
(5169,3351,2)
(5468,1452,2)
(1379,5051,2)
(1698,2322,2)
(2877,1478,2)
(5204,4396,2)
(5347,204,2)
(1075,2248,2)
(1733,1400,2)
(5120,3417,2)
(1567,2748,2)
(1322,5394,2)
(2965,3579,2)
(1283,1034,2)
(3493,2050,2)
(3821,5059,2)
(4607,1626,2)
(4058,2777,2)
(2783,2616,2)
(4945,4319,2)
(4973,1715,2)
(212,1259,2)
(3778,1350,2)
(4157,514,2)
(3342,2137,2)
(2538,1923,2)
(5608,627,2)
(58,2887,2)
(1414,627,2)
(1295,5157,2)
(804,1350,2)
(3059,4021,2)
(1802,3227,2)
(1777,3888,2)
(1612,1844,2)
(2714,3086,2)
(1305,4583,2)
(1090,743,2)
(713,1715,2)
(259,3952,2)
(2850,5429,2)
(2932,1994,2)
(2248,1582,2)
(1893,1134,2)
(869,5379,2)
(5066,2655,2)
(1793,1847,2)
(1272,5289,2)
(2738,2082,2)
(2344,2629,2)
(1444,627,2)
(3348,2829,2)
(3418,5249,2)
(5438,1571,2)
(2907,3837,2)
(4997,1508,2)
(5665,2701,2)
(3753,1806,2)
(5211,4828,2)
(3346,2328,2)
(5257,3951,2)
(3922,2344,2)
(287,1081,2)
(4506,2936,2)
(3064,1864,2)
(157,4432,2)
(2892,1117,2)
(4803,2248,2)
(838,584,2)
(3899,2954,2)
(808,5059,2)
(2918,2997,2)
(2326,754,2)
(1319,3374,2)
(5608,5194,2)
(5174,1618,2)
(3741,204,2)
(4129,3582,2)
(869,2303,2)
(1891,3761,2)
(573,2474,2)
(3033,2512,2)
(1468,5239,2)
(5743,455,2)
(1501,4567,2)
(4368,2539,2)
(3015,3637,2)
(5766,943,2)
(4068,4894,2)
(5682,3669,2)
(2987,3579,2)
(5424,5385,2)
(1,3502,2)
(3024,584,2)
(5721,1723,2)
(1149,2248,2)
(2326,2758,2)
(4068,5469,2)
(4726,2248,2)
(2808,5058,2)
(3726,5287,2)
(5304,2382,2)
(2899,3067,2)
(5025,1844,2)
(5086,2922,2)
(4347,943,2)
(3979,5115,2)
(801,4788,2)
(3255,717,2)
(5151,3086,2)
(541,908,2)
(3950,2248,2)
(829,3919,2)
(3433,4583,2)
(1489,2251,2)
(5067,4924,2)
(3919,2632,2)
(930,455,2)
(1900,1844,2)
(464,3909,2)
(1987,2596,2)
(1792,3579,2)
(1109,1994,2)
(2578,2022,2)
(523,2954,2)
(261,584,2)
(2083,4867,2)
(5592,4105,2)
(4444,106,2)
(619,4788,2)
(1543,5079,2)
(1082,4768,2)
(4516,2826,2)
(4353,1400,2)
(2225,3582,2)
(3719,1034,2)
(2630,3940,2)
(3020,3759,2)
(4095,1011,2)
(5198,4567,2)
(3979,1568,2)
(2753,273,2)
(5073,627,2)
(3159,3843,2)
(3151,3474,2)
(4942,5385,2)
(2172,1326,2)
(4154,4124,2)
(1235,627,2)
(2936,3879,2)
(5395,4291,2)
(1906,5006,2)
(5530,2523,2)
(4618,2008,2)
(5367,3909,2)
(5388,627,2)
(597,2748,2)
(2538,4295,2)
(4120,5059,2)
(4679,1400,2)
(4777,5488,2)
(2489,195,2)
(1136,523,2)
(4655,2721,2)
(2003,794,2)
(2222,1034,2)
(3473,991,2)
(784,5059,2)
(5479,5766,2)
(4068,1081,2)
(2104,4788,2)
(2382,1081,2)
(5079,4828,2)
(4084,204,2)
(4103,851,2)
(4664,4054,2)
(684,1844,2)
(1243,1081,2)
(4634,477,2)
(2538,276,2)
(399,2904,2)
(3676,911,2)
(1834,564,2)
(1137,4295,2)
(1650,2631,2)
(4301,649,2)
(441,3207,2)
(4161,1128,2)
(28,2936,2)
(4391,596,2)
(2326,565,2)
(224,1590,2)
(2108,170,2)
(3391,5428,2)
(1113,1350,2)
(4585,378,2)
(2265,3276,2)
(991,523,2)
(4602,5543,2)
(1621,5027,2)
(4379,5289,2)
(2486,1396,2)
(3330,5622,2)
(2602,1508,2)
(57,897,2)
(2334,2538,2)
(2000,1316,2)
(5329,2248,2)
(888,3526,2)
(2326,4241,2)
(3014,3640,2)
(4006,3685,2)
(5145,4828,2)
(501,4928,2)
(2256,1082,2)
(5433,4058,2)
(4289,2944,2)
(5275,1844,2)
(5633,2616,2)
(5399,5055,2)
(4864,3474,2)
(4763,1034,2)
(3981,1350,2)
(4957,4718,2)
(2976,5655,2)
(3921,4788,2)
(4799,1326,2)
(1449,4567,2)
(3064,3093,2)
(661,280,2)
(4418,46,2)
(2809,5059,2)
(1702,1350,2)
(5486,4396,2)
(4449,3919,2)
(1195,2914,2)
(1926,3393,2)
(3580,2248,2)
(2991,2944,2)
(3606,3441,2)
(1912,716,2)
(3542,3790,2)
(215,5683,2)
(5751,3176,2)
(2852,2113,2)
(2500,1917,2)
(4304,4054,2)
(1241,1844,2)
(4395,215,2)
(2457,2248,2)
(455,2241,2)
(1446,1806,2)
(5727,706,2)
(3450,588,2)
(4281,3173,2)
(1253,5148,2)
(182,2270,2)
(3993,4346,2)
(838,4295,2)
(1618,3247,2)
(1814,4231,2)
(769,426,2)
(408,1354,2)
(3338,627,2)
(320,2655,2)
(2046,1844,2)
(454,944,2)
(2329,3055,2)
(5524,2288,2)
(2241,2265,2)
(4719,4797,2)
(4126,3247,2)
(2809,3979,2)
(421,1608,2)
(2414,908,2)
(4073,911,2)
(3968,1081,2)
(5682,4084,2)
(1380,1958,2)
(5073,1132,2)
(4971,896,2)
(2781,149,2)
(2600,4583,2)
(3534,5059,2)
(5406,2232,2)
(3532,204,2)
(1700,627,2)
(5012,3640,2)
(3000,2248,2)
(4356,3099,2)
(1151,3526,2)
(2702,4244,2)
(4561,1825,2)
(2677,273,2)
(4635,4058,2)
(436,717,2)
(3166,4105,2)
(5400,3816,2)
(5689,1844,2)
(4657,1034,2)
(1062,1400,2)
(5138,1401,2)
(2100,273,2)
(2265,4244,2)
(3401,5027,2)
(4083,4058,2)
(3979,1031,2)
(55,2248,2)
(4500,3909,2)
(4282,1632,2)
(330,3500,2)
(4382,1847,2)
(4968,1354,2)
(3455,4500,2)
(3484,1715,2)
(3175,3584,2)
(2011,2899,2)
(381,455,2)
(3605,1268,2)
(4766,1772,2)
(4268,183,2)
(4914,1844,2)
(792,1942,2)
(5284,1363,2)
(1806,3277,2)
(5522,2226,2)
(1511,3638,2)
(3349,5289,2)
(2652,2328,2)
(2194,3747,2)
(2449,2330,2)
(253,813,2)
(1246,4535,2)
(2733,5434,2)
(4766,1817,2)
(172,2358,2)
(541,1844,2)
(1468,3625,2)
(939,5622,2)
(3412,1847,2)
(1361,4436,2)
(3298,4969,2)
(599,1081,2)
(1076,4333,2)
(1329,4788,2)
(3064,1647,2)
(3307,2848,2)
(2624,5468,2)
(1133,3173,2)
(2860,1925,2)
(1015,2563,2)
(3200,2226,2)
(4198,5468,2)
(369,5194,2)
(2618,2904,2)
(843,4788,2)
(5568,2474,2)
(5474,1257,2)
(2156,10,2)
(1803,1326,2)
(5061,2032,2)
(3164,3764,2)
(546,3919,2)
(2639,2190,2)
(1764,1490,2)
(881,2936,2)
(3554,3640,2)
(3027,3011,2)
(3507,46,2)
(792,2827,2)
(1539,665,2)
(3394,441,2)
(5322,3921,2)
(792,958,2)
(815,1527,2)
(3116,195,2)
(1395,4396,2)
(868,1925,2)
(4130,490,2)
(4165,734,2)
(4565,4934,2)
(3351,1489,2)
(3011,4391,2)
(2291,1215,2)
(3541,2816,2)
(3252,3299,2)
(5484,1626,2)
(4572,1081,2)
(5370,2321,2)
(4612,4295,2)
(4376,4765,2)
(3388,132,2)
(1212,3086,2)
(1332,1947,2)
(5181,943,2)
(1448,4381,2)
(3857,1844,2)
(4244,2334,2)
(4859,2816,2)
(4022,3582,2)
(1238,2246,2)
(2246,580,2)
(883,627,2)
(1108,4567,2)
(1779,5022,2)
(1355,584,2)
(2986,2655,2)
(3273,627,2)
(617,2588,2)
(5120,1663,2)
(5026,1326,2)
(4641,3474,2)
(1559,3662,2)
(632,3488,2)
(5102,1737,2)
(5370,2326,2)
(1831,5059,2)
(5082,5022,2)
(5440,1539,2)
(3220,204,2)
(208,2655,2)
(1470,1157,2)
(2749,4350,2)
(2213,4396,2)
(307,5682,2)
(3253,5394,2)
(4415,706,2)
(5682,5707,2)
(5593,3186,2)
(4482,455,2)
(759,1792,2)
(2741,1844,2)
(3979,3150,2)
(4686,4341,2)
(1415,1844,2)
(2220,3741,2)
(507,1659,2)
(5035,3421,2)
(4295,5055,2)
(1463,5113,2)
(5588,4776,2)
(5063,627,2)
(2369,273,2)
(3832,1737,2)
(1414,546,2)
(415,4639,2)
(331,2748,2)
(3320,1737,2)
(3044,2367,2)
(4129,195,2)
(3730,5207,2)
(2326,4905,2)
(2345,4058,2)
(792,2630,2)
(4243,3960,2)
(3636,2474,2)
(4874,1777,2)
(1980,4110,2)
(2456,4381,2)
(2999,3077,2)
(3087,3052,2)
(4425,4110,2)
(4789,2403,2)
(2596,1715,2)
(4769,2748,2)
(3013,991,2)
(1982,2034,2)
(5218,1844,2)
(2086,5394,2)
(1207,1958,2)
(299,584,2)
(3214,4585,2)
(4066,4391,2)
(485,2190,2)
(932,5394,2)
(4297,2370,2)
(1437,2816,2)
(3068,4797,2)
(3082,1478,2)
(1508,716,2)
(4068,4249,2)
(2809,3790,2)
(1505,627,2)
(3034,1133,2)
(507,178,2)
(4110,2535,2)
(3064,5099,2)
(731,2589,2)
(4269,1844,2)
(5010,3474,2)
(3951,2473,2)
(2450,5058,2)
(1291,2248,2)
(1042,1329,2)
(282,2884,2)
(3455,5116,2)
(3416,2700,2)
(2671,627,2)
(5243,3790,2)
(107,1714,2)
(4499,1109,2)
(2855,2248,2)
(4702,5249,2)
(520,1777,2)
(4980,1923,2)
(1985,4432,2)
(5406,3610,2)
(1438,4578,2)
(3673,2000,2)
(1851,1925,2)
(1784,5417,2)
(1601,1844,2)
(3122,784,2)
(1027,276,2)
(4512,3393,2)
(2249,4934,2)
(1334,5022,2)
(4473,1958,2)
(5545,170,2)
(443,1350,2)
(2397,3177,2)
(4815,1081,2)
(3820,2944,2)
(4071,5054,2)
(3966,1350,2)
(2093,1508,2)
(2460,5113,2)
(1912,5113,2)
(2487,5436,2)
(5255,357,2)
(412,794,2)
(129,1844,2)
(230,408,2)
(227,1621,2)
(2885,1906,2)
(2620,627,2)
(1259,1508,2)
(4231,2190,2)
(1998,5267,2)
(3338,4396,2)
(3848,5059,2)
(4663,1826,2)
(1045,3474,2)
(3008,1870,2)
(4846,2248,2)
(271,4003,2)
(4114,5648,2)
(393,627,2)
(629,728,2)
(2934,1621,2)
(2051,2273,2)
(4663,5093,2)
(3509,3951,2)
(1864,2655,2)
(3405,991,2)
(1787,1465,2)
(1468,4955,2)
(2678,4825,2)
(4801,2340,2)
(5071,5415,2)
(4176,3421,2)
(5252,2344,2)
(1154,3247,2)
(39,5683,2)
(1460,1349,2)
(37,3579,2)
(625,2113,2)
(823,3064,2)
(1551,2512,2)
(4546,2190,2)
(1737,1081,2)
(384,3113,2)
(624,2829,2)
(3615,5417,2)
(4777,4788,2)
(3979,2413,2)
(3064,3676,2)
(563,4428,2)
(1698,4745,2)
(2417,1761,2)
(5441,1559,2)
(4420,3837,2)
(2668,4291,2)
(1136,273,2)
(5685,2434,2)
(5696,4928,2)
(1892,1489,2)
(5728,5645,2)
(826,1478,2)
(3448,1844,2)
(2632,1632,2)
(2522,2921,2)
(4129,3184,2)
(1171,4105,2)
(575,1034,2)
(4974,1714,2)
(5607,2000,2)
(4906,4054,2)
(5349,2721,2)
(4789,1807,2)
(1603,5683,2)
(5656,5075,2)
(3995,3421,2)
(382,2265,2)
(5543,1443,2)
(2899,3086,2)
(4063,3579,2)
(957,2609,2)
(4701,1844,2)
(191,2190,2)
(4350,2338,2)
(3594,1034,2)
(4780,627,2)
(26,4105,2)
(577,3173,2)
(4875,204,2)
(3737,2863,2)
(2966,1715,2)
(2705,1350,2)
(2346,3631,2)
(39,5149,2)
(2243,106,2)
(3623,1478,2)
(4032,3582,2)
(481,1741,2)
(1996,489,2)
(4878,4567,2)
(5560,1844,2)
(3473,2756,2)
(2372,856,2)
(2103,1350,2)
(5072,2452,2)
(363,1844,2)
(1426,4092,2)
(3109,3965,2)
(5632,2721,2)
(2616,195,2)
(5321,5284,2)
(4925,143,2)
(12,1411,2)
(3636,2050,2)
(4583,4280,2)
(2890,3086,2)
(4223,1350,2)
(2538,2050,2)
(2922,627,2)
(3252,4181,2)
(4469,4530,2)
(4192,1737,2)
(3467,1987,2)
(3496,10,2)
(398,1478,2)
(1212,273,2)
(5682,1775,2)
(2488,4054,2)
(4930,4243,2)
(3561,4567,2)
(5424,1844,2)
(4004,4775,2)
(1946,5267,2)
(1119,2256,2)
(824,3060,2)
(2369,2753,2)
(3098,943,2)
(3172,1148,2)
(3866,2358,2)
(746,3993,2)
(2004,3625,2)
(3800,183,2)
(4696,1141,2)
(3507,107,2)
(717,1478,2)
(594,1844,2)
(3303,3584,2)
(1578,3579,2)
(2712,5432,2)
(4576,1482,2)
(5601,3579,2)
(2542,1791,2)
(3669,1539,2)
(2250,1844,2)
(648,1618,2)
(1020,944,2)
(2576,5766,2)
(5512,455,2)
(1534,5370,2)
(2065,1844,2)
(764,851,2)
(4500,1473,2)
(1044,1157,2)
(1601,1370,2)
(1225,3086,2)
(5334,5149,2)
(2328,3277,2)
(1164,1626,2)
(3403,836,2)
(1989,1844,2)
(4450,5392,2)
(3759,106,2)
(1144,3484,2)
(5664,3247,2)
(1896,5156,2)
(728,1844,2)
(4663,2758,2)
(3064,4449,2)
(259,3185,2)
(672,984,2)
(4663,1775,2)
(2560,2082,2)
(4701,5120,2)
(3145,1400,2)
(4818,627,2)
(3533,1141,2)
(183,5194,2)
(693,2248,2)
(2629,3635,2)
(4663,3093,2)
(2144,1714,2)
(2773,4492,2)
(3519,170,2)
(1535,2410,2)
(4968,1983,2)
(2326,4120,2)
(3885,3579,2)
(3328,1663,2)
(3338,4788,2)
(1276,2452,2)
(4068,5414,2)
(2037,2964,2)
(1534,149,2)
(3978,1844,2)
(631,4382,2)
(973,4000,2)
(3726,5194,2)
(2330,1799,2)
(5207,3506,2)
(4324,1844,2)
(3850,1329,2)
(4479,1719,2)
(1465,2113,2)
(4804,4019,2)
(2791,3582,2)
(967,3242,2)
(570,1326,2)
(1611,1844,2)
(1728,1620,2)
(14,1075,2)
(426,1034,2)
(3457,217,2)
(4068,2406,2)
(1777,1626,2)
(5712,2629,2)
(3227,2616,2)
(5660,5468,2)
(3992,2190,2)
(397,1523,2)
(5235,2327,2)
(1456,4231,2)
(1972,579,2)
(2742,3790,2)
(758,3263,2)
(918,3060,2)
(983,426,2)
(2413,5059,2)
(4471,5588,2)
(379,3122,2)
(3927,280,2)
(3477,167,2)
(5309,2248,2)
(3384,1844,2)
(150,374,2)
(136,2297,2)
(3064,5707,2)
(4698,408,2)
(2593,1056,2)
(4718,911,2)
(1740,3640,2)
(5681,1844,2)
(2614,2063,2)
(5682,3707,2)
(3562,1326,2)
(19,759,2)
(5589,1844,2)
(4582,31,2)
(3000,1149,2)
(3887,2190,2)
(3186,5629,2)
(3211,1844,2)
(4139,2557,2)
(2374,1350,2)
(601,4912,2)
(4763,1535,2)
(4021,4774,2)
(4475,991,2)
(2332,851,2)
(3173,2748,2)
(107,1068,2)
(2326,3093,2)
(4421,1181,2)
(498,2655,2)
(4970,608,2)
(834,1844,2)
(2383,2944,2)
(2326,2030,2)
(1045,2050,2)
(3786,3474,2)
(4154,3440,2)
(4663,281,2)
(2262,1844,2)
(1007,4250,2)
(3943,3982,2)
(788,3247,2)
(271,1824,2)
(726,104,2)
(1265,2246,2)
(3780,4500,2)
(143,5244,2)
(3870,5468,2)
(2080,2474,2)
(3929,4567,2)
(4734,5055,2)
(2326,2255,2)
(354,4788,2)
(157,627,2)
(3658,5075,2)
(5562,4948,2)
(4920,1608,2)
(3808,4970,2)
(3001,5289,2)
(4632,2032,2)
(2025,5224,2)
(2853,627,2)
(2281,4250,2)
(2316,3979,2)
(5343,3919,2)
(3563,3064,2)
(1615,4902,2)
(3604,273,2)
(3299,441,2)
(4960,3130,2)
(4766,5176,2)
(5055,594,2)
(1874,2242,2)
(4774,5324,2)
(759,3579,2)
(4339,1400,2)
(611,1994,2)
(3805,1844,2)
(4676,717,2)
(3962,4261,2)
(2528,4432,2)
(928,4058,2)
(4663,3923,2)
(242,1350,2)
(2123,1584,2)
(408,4902,2)
(47,627,2)
(2270,5683,2)
(4727,4934,2)
(2366,3017,2)
(2822,584,2)
(280,4797,2)
(4663,601,2)
(4167,5621,2)
(4551,1487,2)
(5630,5720,2)
(296,5372,2)
(3502,2072,2)
(4663,5436,2)
(1646,5479,2)
(2918,93,2)
(754,5113,2)
(2524,2748,2)
(742,627,2)
(3993,4324,2)
(3054,3919,2)
(5766,1502,2)
(3677,2523,2)
(3266,884,2)
(3979,3821,2)
(4787,2902,2)
(4747,4105,2)
(3907,4442,2)
(3671,4786,2)
(4016,1791,2)
(3064,2413,2)
(3075,911,2)
(3328,5675,2)
(5322,5116,2)
(4900,3067,2)
(2416,273,2)
(3709,2344,2)
(3811,665,2)
(3153,2700,2)
(591,4337,2)
(4343,5058,2)
(5196,5429,2)
(2481,2234,2)
(3355,2816,2)
(3017,5058,2)
(1390,5059,2)
(2334,1392,2)
(4891,608,2)
(2500,5675,2)
(5120,3500,2)
(2026,627,2)
(5279,3637,2)
(4923,4583,2)
(5039,2452,2)
(3726,3204,2)
(2307,1844,2)
(669,3579,2)
(756,920,2)
(5470,907,2)
(4794,106,2)
(2322,2190,2)
(4580,3579,2)
(1638,584,2)
(645,3579,2)
(5233,3940,2)
(2007,4583,2)
(5527,3919,2)
(938,3982,2)
(718,4828,2)
(4947,2000,2)
(4541,1350,2)
(2388,2944,2)
(2531,5436,2)
(4514,3060,2)
(1143,5436,2)
(4548,204,2)
(5738,3409,2)
(3319,2666,2)
(2175,2655,2)
(3027,22,2)
(5073,2452,2)
(3337,5116,2)
(904,627,2)
(1958,2226,2)
(308,1740,2)
(825,1326,2)
(408,3790,2)
(3991,490,2)
(3397,47,2)
(3028,5113,2)
(2326,2325,2)
(2561,2246,2)
(1994,3240,2)
(5546,991,2)
(1686,1478,2)
(2918,5373,2)
(5115,3086,2)
(5168,3640,2)
(5326,4902,2)
(3979,808,2)
(4037,5474,2)
(3260,1466,2)
(2677,4902,2)
(1043,5384,2)
(93,2721,2)
(3707,2700,2)
(4195,3059,2)
(1371,1844,2)
(5682,2997,2)
(4793,1144,2)
(3739,4059,2)
(5324,1396,2)
(838,2050,2)
(3256,584,2)
(71,273,2)
(4319,3214,2)
(5610,2700,2)
(4918,2226,2)
(2075,5445,2)
(2813,2748,2)
(4242,2899,2)
(4336,4902,2)
(5361,4066,2)
(1022,991,2)
(4585,5171,2)
(2793,183,2)
(2626,2452,2)
(4731,5394,2)
(1084,4058,2)
(5176,4831,2)
(3154,1715,2)
(2949,2936,2)
(5763,5392,2)
(694,1844,2)
(2918,754,2)
(1855,3919,2)
(2325,5059,2)
(5053,2616,2)
(3979,565,2)
(2137,1326,2)
(2176,3355,2)
(1711,856,2)
(4181,441,2)
(4943,3919,2)
(2538,2816,2)
(701,276,2)
(5404,3578,2)
(1767,3300,2)
(4328,1715,2)
(1828,4396,2)
(1455,265,2)
(3926,2721,2)
(2422,2472,2)
(2503,746,2)
(3688,1081,2)
(2288,4765,2)
(3230,3421,2)
(204,1996,2)
(3320,5059,2)
(3755,3563,2)
(938,2655,2)
(3363,4450,2)
(4805,1715,2)
-----------------------------------
(0,CONFFLAG_INTROUSERNOREVIEW)
(1,ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc)
(2,confno)
(3,if (ast_tvzero(user->start_time)
(4,menu_active)
(5,conf)
(6,if (musiconhold)
(7,markedusers)
(8,totalsilence)
(9,confflags)
(10,!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan)
(11,0)
(12,usr->namerecloc)
(13,!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan)
(14,ast_channel_connected(user->chan)
(15,chan)
(16,conf->transframe[idx]->frametype)
(17,conf)
(18,res)
(19,ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &max_no)
(20,CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER)
(21,if (ast_test_flag64(confflags, CONFFLAG_MONITOR)
(22,user->namerecloc)
(23,4)
(24,ast_channel_language(chan)
(25,user)
(26,chan)
(27,talkreq_manager)
(28,ast_log(LOG_WARNING, "Unable to set \'%s\' to write linear mode\\n", ast_channel_name(chan)
(29,sizeof(members)
(30,)
(31,!conf->transpath[idx])
(32,if (!conf->transframe[idx])
(33,lastmarked)
(34,currentmarked = 0)
(35,conf)
(36,conf->users)
(37,1)
(38,chan)
(39,menu_was_active = menu_active)
(40,str)
(41,conf->confno)
(42,confmode)
(43,ast_read(c)
(44,ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeLeave",\n\\n\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t\\t"Duration: %ld\\r\\n",\n\\n\\t\\t\\t\\tast_channel_name(chan)
(45,)
(46,!ast_test_flag64(confflags, CONFFLAG_MONITOR)
(47,conf->confno)
(48,dtmf)
(49,ast_channel_connected(user->chan)
(50,)
(51,&user->jointime)
(52,ast_strdup(recordingtmp)
(53,dtmfstr)
(54,musiconhold)
(55,"<unknown>")
(56,user)
(57,"queue-seconds")
(58,var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
(59,chan)
(60,AST_OPTION_TONE_VERIFY)
(61,"conf-errormenu")
(62,name)
(63,1)
(64,break;)
(65,user->talk.actual)
(66,conf)
(67,idx)
(68,ast_channel_connected(user->chan)
(69,if (user->listen.actual)
(70,chan)
(71,ADMINFLAG_SELFMUTED)
(72,"Unable to set \'%s\' to read linear mode\\n")
(73,user)
(74,ast_channel_caller(user->chan)
(75,idx)
(76,OPT_ARG_MOH_CLASS)
(77,ast_debug(1, "Placed channel %s in DAHDI conf %d\\n", ast_channel_name(chan)
(78,1)
(79,chan)
(80,currentmarked)
(81,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(82,CONFFLAG_PASS_DTMF)
(83,1)
(84,user)
(85,res)
(86,if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(87,ast_waitstream(chan, "")
(88,chan)
(89,ast_channel_audiohooks(c)
(90,)
(91,conf->dahdiconf)
(92,if (ioctl(fd, DAHDI_GETCONF, &dahdic)
(93,bi.rxbufpolicy)
(94,datalen)
(95,break;)
(96,dahdic.chan = 0)
(97,conf->endalert)
(98,optargs[OPT_ARG_INTROUSER_VMREC])
(99,0)
(100,res = ast_waitstream(chan, "")
(101,conf->recordthread)
(102,f->frametype)
(103,user->chan)
(104,warning_freq = 0)
(105,chan)
(106,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(107,!firstpass)
(108,ast_channel_caller(user->chan)
(109,ast_streamfile(chan, "conf-full", ast_channel_language(chan)
(110,1)
(111,CONFFLAG_QUIET)
(112,goto conf_run_cleanup;)
(113,if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan)
(114,dahdic)
(115,user)
(116,f)
(117,nexteventts)
(118,"conf-usermenu-162")
(119,c)
(120,user)
(121,ast_config_AST_SPOOL_DIR)
(122,time(NULL)
(123,item)
(124,chan)
(125,f->subclass.integer)
(126,ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(127,chan)
(128,ast_channel_caller(user->chan)
(129,ast_stopstream(chan)
(130,conf)
(131,confflags)
(132,!cap_slin)
(133,)
(134,ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL)
(135,transframe)
(136,conf->transframe[idx])
(137,conf)
(138,!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(139,conf)
(140,if (!conf->transpath[idx])
(141,1)
(142,1)
(143,&user->kicktime)
(144,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(145,)
(146,conf->announcethreadlock)
(147,0)
(148,nfds)
(149,!ast_test_flag64(confflags, CONFFLAG_MONITOR)
(150,"timeleft")
(151,res)
(152,NULL)
(153,)
(154,)
(155,NULL)
(156,1)
(157,conf->recordingformat)
(158,ast_test_flag64(confflags, CONFFLAG_MOH)
(159,conf->users)
(160,CONFFLAG_STARTMUTED)
(161,AST_FRAME_BITS)
(162,-1)
(163,members)
(164,snprintf(user->namerecloc, sizeof(user->namerecloc)
(165,tmpvar)
(166,conf)
(167,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(168,"conf-otherinparty")
(169,ast_channel_language(chan)
(170,ast_test_flag64(confflags, CONFFLAG_SLA_STATION)
(171,conf->dahdiconf)
(172,chan)
(173,kicktime)
(174,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(175,chan)
(176,sizeof(*item)
(177,confflags)
(178,&dahdic_empty)
(179,)
(180,user)
(181,fr)
(182,currentmarked = conf->markedusers)
(183,musiconhold)
(184,break;)
(185,musiconhold)
(186,localendtime)
(187,lchan)
(188,lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
(189,ast_samp2tv(user->warning_freq, 1000)
(190,&ast_null_frame)
(191,ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(192,)
(193,meetmesecs[30] = "")
(194,user_no)
(195,f = ast_read_noaudio(c)
(196,currenttime)
(197,retrydahdi)
(198,user->user_no)
(199,end_sound ? end_sound : "UNDEF")
(200,!ast_safe_sleep(chan, 1000)
(201,if (user->talking && totalsilence > MEETME_DELAYDETECTENDTALK)
(202,)
(203,lchan)
(204,ast_channel_fd(c, 0)
(205,chan)
(206,if (!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR)
(207,ENTER)
(208,user->adminflags)
(209,user->play_warning)
(210,res)
(211,conf)
(212,close(fd)
(213,!ast_fileexists(user->namerecloc, NULL, NULL)
(214,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(215,musiconhold)
(216,chan)
(217,var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
(218,dahdic)
(219,CONFFLAG_INTROUSERNOREVIEW)
(220,integer)
(221,for (idx = 0; idx < AST_FRAME_BITS; idx++)
(222,userflags)
(223,0)
(224,ast_waitstream(chan, AST_DIGIT_ANY)
(225,play_warning)
(226,keepplaying = 1)
(227,chan)
(228,DAHDI_SETCONF)
(229,destdir)
(230,item)
(231,)
(232,if (musiconhold)
(233,meetmesecs)
(234,DAHDI_CONF_LISTENER)
(235,chan)
(236,using_pseudo)
(237,case AST_CONTROL_CONGESTION:)
(238,user)
(239,ast_dsp_silence(dsp, f, &totalsilence)
(240,chan)
(241,0)
(242,ast_channel_connected(user->chan)
(243,remain = (time_left_ms + 500)
(244,user->start_time)
(245,conf)
(246,adminflags)
(247,timelimit)
(248,if (ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR)
(249,)
(250,res == -1)
(251,confsilence)
(252,)
(253,*usr = NULL)
(254,ret)
(255,DAHDI_CONF_TALKER)
(256,recordingtmp)
(257,fd)
(258,)
(259,time_left_ms < to)
(260,parse)
(261,"MEETME_AGI_BACKGROUND")
(262,"Setting call duration limit to %d seconds.\\n")
(263,)
(264,menu_active)
(265,conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(266,buf)
(267,user->adminflags)
(268,confflags)
(269,var)
(270,ast_channel_caller(user->chan)
(271,ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeJoin",\n\\n\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t"CallerIDnum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDname: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n",\n\\n\\t\\t\\tast_channel_name(chan)
(272,conf)
(273,ioctl(fd, DAHDI_SETCONF, &dahdic)
(274,DAHDI_CONF_CONFMON)
(275,user)
(276,c)
(277,CONFFLAG_QUIET)
(278,case \'5\':)
(279,announcetype)
(280,!user->talking && totalsilence < MEETME_DELAYDETECTTALK)
(281,user->talking)
(282,ast_channel_caller(user->chan)
(283,confusers)
(284,musiconhold)
(285,res)
(286,tmpvar)
(287,conf)
(288,optargs)
(289,"Unable to write frame to channel %s\\n")
(290,0)
(291,sizeof(char)
(292,!ast_test_flag64(confflags, CONFFLAG_ADMIN)
(293,break;)
(294,ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL)
(295,close(fd)
(296,var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE")
(297,AST_DIGIT_ANY)
(298,dsp)
(299,"agi")
(300,)
(301,ptr)
(302,fd)
(303,chan)
(304,)
(305,CONFFLAG_QUIET)
(306,if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)
(307,user->adminflags)
(308,memset(&fr, 0, sizeof(fr)
(309,res > 0)
(310,id)
(311,)
(312,CONFFLAG_INTROUSERNOREVIEW)
(313,announce_thread)
(314,"")
(315,endtime)
(316,)
(317,CONFFLAG_SLA_STATION)
(318,user->warning_freq = warning_freq)
(319,ast_moh_stop(chan)
(320,usercontainer)
(321,)
(322,frametype)
(323,dahdic)
(324,dahdic)
(325,conf->markedusers++)
(326,ast_stopstream(chan)
(327,)
(328,)
(329,conf->users - 1)
(330,dtmf > 0)
(331,menu_active = 0)
(332,AST_OPTION_TONE_VERIFY)
(333,)
(334,strlen(conf->confno)
(335,ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000)
(336,dsp)
(337,CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(338,conf)
(339,destdir)
(340,fd)
(341,ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(342,if (!menu_active && user->talk.desired && !user->talk.actual)
(343,ret = 0)
(344,remain)
(345,&max_no)
(346,if (ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR)
(347,if (res > 0)
(348,if (!conf->recordingfilename)
(349,playlock)
(350,play_warning > timelimit)
(351,&x)
(352,ast_waitstream(chan, "")
(353,user->start_time)
(354,playlock)
(355,ast_streamfile(chan, "beep", ast_channel_language(chan)
(356,if (rt_schedule)
(357,!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)
(358,integer)
(359,dst)
(360,menu_active)
(361,desired)
(362,if (user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
(363,ast_waitstream(chan, "")
(364,conf)
(365,chan)
(366,end_sound)
(367,if (res > 0)
(368,ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan)
(369,conf->transframe)
(370,menu_active = 0)
(371,char *)
(372,ast_tvzero(user->start_time)
(373,LOG_WARNING)
(374,var)
(375,"conf-adminmenu-162")
(376,"DAHDI channel is in a conference already, retrying with pseudo\\n")
(377,chan)
(378,user->play_warning = play_warning)
(379,talking)
(380,outfd)
(381,confmode)
(382,ast_log(LOG_WARNING, "Error setting conference\\n")
(383,0)
(384,ast_channel_caller(user->chan)
(385,conf->recordthreadlock)
(386,chan)
(387,keepplaying)
(388,lastusers)
(389,ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
(390,CONFFLAG_INTROUSER_VMREC)
(391,checked)
(392,var)
(393,conf->lchan)
(394,conf->transpath[idx])
(395,ret)
(396,user_no)
(397,conf)
(398,0)
(399,lastmarked == 0)
(400,user_set_kickme_cb)
(401,dtmfstr)
(402,EVENT_FLAG_CALL)
(403,"confno")
(404,)
(405,&dst)
(406,chan)
(407,id)
(408,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(409,ret)
(410,idx < AST_FRAME_BITS)
(411,actual)
(412,conf)
(413,f)
(414,0)
(415,conf->recordingformat)
(416,LOG_WARNING)
(417,f)
(418,)
(419,0)
(420,user)
(421,chan)
(422,endtime)
(423,1)
(424,tmp)
(425,conf)
(426,warnfreq_str)
(427,chan)
(428,!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan)
(429,VOL_UP)
(430,ast_channel_fd(c, 0)
(431,timelimit)
(432,chan)
(433,ADMINFLAG_MUTED)
(434,case \'3\':)
(435,if (play_warning)
(436,NULL)
(437,confflags)
(438,break;)
(439,if (user->adminflags & ADMINFLAG_KICKME)
(440,"minutes")
(441,currentmarked == 1 && conf->users > 1)
(442,user->listen.actual)
(443,number)
(444,case \'8\':)
(445,conf_flush(fd, chan)
(446,goto outrun;)
(447,members)
(448,"vm-rec-name")
(449,ast_channel_lock(chan)
(450,cur)
(451,optargs[OPT_ARG_MOH_CLASS])
(452,)
(453,user->kicktime = user->kicktime + calldurationlimit)
(454,bookid)
(455,using_pseudo)
(456,ast_channel_caller(user->chan)
(457,menu_active)
(458,conf)
(459,confno)
(460,dsp)
(461,conf)
(462,conf)
(463,AST_LIST_NEXT(cur, frame_list)
(464,(char *)
(465,fr)
(466,conf->users == 1)
(467,(char *)
(468,CONFFLAG_ADMIN)
(469,to < 0)
(470,confmode)
(471,break;)
(472,chan)
(473,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(474,"confno")
(475,conf)
(476,)
(477,res > 0)
(478,menu_active)
(479,exitkeys)
(480,goto outrun;)
(481,conf)
(482,agifiledefault)
(483,warning_freq)
(484,ao2_alloc(sizeof(*item)
(485,ast_test_flag64(confflags, CONFFLAG_QUIET)
(486,nexteventts)
(487,)
(488,ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)
(489,ast_channel_audiohooks(c)
(490,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(491,if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(492,-1)
(493,if (conf->users == 1)
(494,DAHDI_CONF_TALKER)
(495,0)
(496,currentmarked)
(497,user)
(498,ao2_lock(conf->usercontainer)
(499,valid)
(500,ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT)
(501,user->talking)
(502,ast_test_flag64(confflags, CONFFLAG_STARMENU)
(503,conf->recordingfilename)
(504,CONFFLAG_INTROUSERNOREVIEW)
(505,chan)
(506,locked)
(507,memset(&dahdic_empty, 0, sizeof(dahdic_empty)
(508,0)
(509,!ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
(510,1)
(511,)
(512,0)
(513,number)
(514,conf->recordthreadlock)
(515,res)
(516,chan)
(517,fd)
(518,totalsilence)
(519,conf->endtime - now.tv_sec)
(520,namerecloc)
(521,conf->users == 2)
(522,lchan)
(523,user->kicktime && (user->kicktime <= now.tv_sec)
(524,goto outrun;)
(525,"")
(526,x)
(527,bi)
(528,)
(529,"conf-now-unmuted")
(530,AST_DIGIT_ANY)
(531,"MEETMEUNIQUEID")
(532,musiconhold)
(533,ast_copy_string(exitcontext, ast_channel_context(chan)
(534,strlen(conf->confno)
(535,recordthread)
(536,user)
(537,conf->recordingfilename = ast_strdup(recordingtmp)
(538,usercontainer)
(539,if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(540,case \'9\':)
(541,ast_streamfile(chan, "conf-extended", ast_channel_language(chan)
(542,ast_indicate(chan, -1)
(543,announcethread)
(544,cap_slin)
(545,conf)
(546,ioctl(ast_channel_fd(conf->lchan, 0)
(547,0)
(548,retrydahdi)
(549,announcement_played = 0)
(550,)
(551,&conf->playlock)
(552,if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)
(553,chan)
(554,agi_app)
(555,agifile = ast_strdupa(tmpvar)
(556,name)
(557,ast_stopstream(chan)
(558,)
(559,user)
(560,menu_active)
(561,adminflags)
(562,timelimit)
(563,(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(564,!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)
(565,conf->locked)
(566,ast_tvnow()
(567,exitcontext)
(568,DAHDI_CONF_LISTENER)
(569,using_pseudo = 0)
(570,ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
(571,numbufs)
(572,0)
(573,-1)
(574,LOG_WARNING)
(575,end_sound)
(576,origvar)
(577,"conf-muted")
(578,dahdic)
(579,DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON)
(580,conf->announcethread == AST_PTHREADT_NULL)
(581,ast_test_flag64(confflags, CONFFLAG_DURATION_STOP)
(582,confno)
(583,break;)
(584,ast_test_flag64(confflags, CONFFLAG_AGI)
(585,announcelist)
(586,)
(587,f->subclass.integer)
(588,usr->chan)
(589,4)
(590,confflags)
(591,ast_moh_stop(chan)
(592,ast_log(LOG_WARNING, "Unable to set \'%s\' to read linear mode\\n", ast_channel_name(chan)
(593,snprintf(meetmesecs, sizeof(meetmesecs)
(594,ast_channel_fd(chan, 0)
(595,)
(596,ao2_alloc(sizeof(*item)
(597,0)
(598,frametype)
(599,(conf->gmuted)
(600,chan)
(601,nexteventts = ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000)
(602,c)
(603,)
(604,ast_channel_connected(user->chan)
(605,using_pseudo = 1)
(606,item->announcetype)
(607,fr)
(608,f->frametype == AST_FRAME_DTMF_BEGIN)
(609,localendtime > conf->endtime)
(610,ast_frame_adjust_volume(f, user->talk.actual)
(611,ast_load_realtime("meetme", "confno",\n\\n\\t\\t\\t\\t\\t\\t\\tconf->confno, "starttime <=", currenttime,\n\\n\\t\\t\\t\\t\\t\\t\\t "endtime >=", currenttime, NULL)
(612,now)
(613,chan)
(614,CONFFLAG_INTROUSER_VMREC)
(615,)
(616,cap_slin)
(617,ast_strdupa(optargs[OPT_ARG_EXITKEYS])
(618,&dahdic)
(619,ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON)
(620,conf)
(621,chan)
(622,conf_queue_dtmf(conf, user, f)
(623,conf)
(624,ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(625,!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)
(626,case \'7\':)
(627,struct ast_conference *conf)
(628,timelimit)
(629,ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan)
(630,nfds)
(631,confflags)
(632,ADMINFLAG_SELFMUTED)
(633,"MEETME_RECORDINGFORMAT")
(634,setusercount)
(635,AST_LIST_UNLOCK(&confs)
(636,ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)
(637,ast_stopstream(chan)
(638,"conf-onlyone")
(639,conf->users - 1)
(640,now.tv_sec % 60)
(641,chan)
(642,if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
(643,user)
(644,*usr = NULL)
(645,menu8_active)
(646,res)
(647,OPT_ARG_EXITKEYS)
(648,ret)
(649,ast_channel_language(chan)
(650,optargs)
(651,frametype)
(652,0)
(653,timelimit)
(654,namerecloc)
(655,break;)
(656,dahdic)
(657,)
(658,0)
(659,ast_tvdiff_ms(now, user->start_time)
(660,chan)
(661,user)
(662,optargs[OPT_ARG_WAITMARKED])
(663,conf)
(664,recordingfilename)
(665,conf->transpath[idx])
(666,ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(667,ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char)
(668,play_warning)
(669,max_no)
(670,conf->transframe[idx])
(671,chan)
(672,user->namerecloc)
(673,seconds = remain)
(674,res = ast_waitstream(chan, AST_DIGIT_ANY)
(675,play_warning)
(676,NULL)
(677,AST_FRAME_VOICE)
(678,tweak_listen_volume(user, VOL_UP)
(679,NULL)
(680,ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\\n",\n\\n\\t\\t\\t\\t    \\t\\t\\t\\t\\t\\t\\tconf->confno, conf->recordingfilename, conf->recordingformat)
(681,talking)
(682,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(683,)
(684,&chan)
(685,if (now.tv_sec + conf->endalert >= conf->endtime)
(686,conf->dahdiconf)
(687,1)
(688,transpath)
(689,conf_play(chan, conf, ENTER)
(690,conf->dahdiconf)
(691,NULL)
(692,!ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])
(693,number)
(694,ast_safe_sleep(chan, 1000)
(695,user->listen.actual)
(696,localendtime)
(697,dtmf = 0)
(698,ast_samp2tv(user->play_warning, 1000)
(699,mailbox)
(700,break;)
(701,0)
(702,conf)
(703,*user = NULL)
(704,var)
(705,user)
(706,tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND")
(707,DAHDI_POLICY_IMMEDIATE)
(708,"conf-kicked")
(709,now.tv_sec >= conf->endtime)
(710,chan)
(711,conf)
(712,members)
(713,playednamerec)
(714,id)
(715,)
(716,!retrydahdi)
(717,ioctl(ast_channel_fd(conf->lchan, 0)
(718,ao2_unlink(conf->usercontainer, user)
(719,"conf-roll-callcomplete")
(720,&src)
(721,id)
(722,ast_stopstream(chan)
(723,currenttime)
(724,menu_was_active && user->listen.desired && !user->listen.actual)
(725,user->user_no)
(726,ast_verb(3, "Setting warning frequency to %ldms.\\n", warning_freq)
(727,)
(728,ast_channel_language(chan)
(729,)
(730,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(731,ast_fileexists(user->namerecloc, NULL, NULL)
(732,conf->lchan)
(733,optargs)
(734,ast_test_flag64(confflags, CONFFLAG_TALKER)
(735,conf->confno)
(736,OPT_ARG_MOH_CLASS)
(737,ast_verb(4, "Starting recording of MeetMe Conference %s into file %s.%s.\\n",\n\\n\\t\\t\\t\\t    conf->confno, conf->recordingfilename, conf->recordingformat)
(738,)
(739,dtmf > 0)
(740,DAHDI_SETLINEAR)
(741,conf->users)
(742,conf->confno)
(743,conf->endtime && (now.tv_sec >= conf->endtime)
(744,if (ast_write(chan, cur)
(745,recordingtmp)
(746,can_write(chan, confflags)
(747,&tm)
(748,confno)
(749,f->subclass.format.id == AST_FORMAT_SLINEAR)
(750,listen)
(751,ast_test_flag64(confflags, CONFFLAG_QUIET)
(752,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(753,dsp)
(754,dahdic.chan)
(755,timelimit)
(756,var = var->next)
(757,if ((ast_channel_name(usr->chan)
(758,!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan)
(759,&max_no)
(760,confno)
(761,if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(762,)
(763,ast_test_flag64(confflags, CONFFLAG_QUIET)
(764,60)
(765,"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: off\\r\\n")
(766,CONFFLAG_INTROUSER)
(767,ast_channel_language(chan)
(768,dst)
(769,warning_freq)
(770,id)
(771,ast_format_from_old_bitfield(&dst, (1 << idx)
(772,conf)
(773,ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
(774,ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(775,conf)
(776,if (user->kicktime && (user->kicktime <= now.tv_sec)
(777,ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(778,ast_channel_lock(chan)
(779,chan)
(780,OPT_ARG_DURATION_STOP)
(781,ret)
(782,ast_mutex_unlock(&conf->announcethreadlock)
(783,break;)
(784,user->talking)
(785,)
(786,ast_waitstream(chan, "")
(787,res)
(788,break;)
(789,"meetme:%s")
(790,1)
(791,sizeof(destdir)
(792,return ret;)
(793,play_warning = warning_freq = 0)
(794,f->subclass.integer)
(795,menu_active)
(796,ast_waitstream(chan, AST_DIGIT_ANY)
(797,break;)
(798,chan)
(799,dahdiconf)
(800,chan)
(801,uniqueid)
(802,conf)
(803,)
(804,chan)
(805,500)
(806,)
(807,)
(808,user->adminflags)
(809,)
(810,1)
(811,menu_active)
(812,0)
(813,dtmf > 0)
(814,mohtempstopped)
(815,"")
(816,bi.bufsize)
(817,&conf->announcelist)
(818,fr)
(819,NULL)
(820,dahdic)
(821,if (!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH)
(822,fd)
(823,user->adminflags)
(824,"vm-youhave")
(825,time_left_ms = user->timelimit)
(826,dahdiconf)
(827,if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)
(828,warning_sound)
(829,0)
(830,0)
(831,-2)
(832,-1)
(833,id)
(834,ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan)
(835,ast_waitstream(chan, "")
(836,keepplaying)
(837,ast_mutex_lock(&conf->announcelistlock)
(838,-1)
(839,"")
(840,"endtime >=")
(841,timelimit)
(842,errno)
(843,conf)
(844,user->start_time = ast_tvnow()
(845,now)
(846,chan)
(847,conf->recordthreadlock)
(848,dtmfstr[0] = f->subclass.integer)
(849,chan)
(850,menu8_active)
(851,remain / 60 >= 1)
(852,AST_PTHREADT_NULL)
(853,ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
(854,users)
(855,)
(856,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(857,cap_slin)
(858,0)
(859,ast_channel_language(chan)
(860,f->subclass)
(861,if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan)
(862,lastusers)
(863,dahdic)
(864,context)
(865,chan)
(866,"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: on\\r\\n")
(867,0)
(868,f->frametype == AST_FRAME_DTMF)
(869,!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(870,context)
(871,"conf-thereare")
(872,if (!timelimit)
(873,AST_FRAME_CONTROL)
(874,CONFFLAG_EXIT_CONTEXT)
(875,CONFFLAG_MONITOR)
(876,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(877,chan)
(878,lchan)
(879,goto outrun;)
(880,conf->usercontainer)
(881,ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR)
(882,chan)
(883,conf->maxusers)
(884,!menu_active && menu_was_active && user->listen.desired && !user->listen.actual)
(885,ast_mutex_unlock(&conf->recordthreadlock)
(886,minutes)
(887,chan)
(888,x)
(889,actual)
(890,opt_waitmarked_timeout)
(891,if (localendtime > conf->endtime)
(892,"Error starting listen channel\\n")
(893,!ast_test_flag64(confflags, CONFFLAG_MONITOR)
(894,fd)
(895,)
(896,conf->confno)
(897,seconds)
(898,"endtime")
(899,CONF_HASLEFT)
(900,NULL)
(901,goto conf_run_cleanup;)
(902,res)
(903,0)
(904,conf->recordingformat)
(905,CONFFLAG_INTROUSER_VMREC)
(906,optargs[OPT_ARG_EXITKEYS])
(907,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(908,!rt_extend_conf(conf->confno)
(909,talkreq_manager = 1)
(910,LOG_WARNING)
(911,conf->locked)
(912,if (conf->users < lastusers)
(913,if (timeout && now.tv_sec >= timeout)
(914,set_talk_volume(user, user->listen.desired)
(915,ast_channel_audiohooks(chan)
(916,conf->chan)
(917,)
(918,ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)
(919,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(920,var->next)
(921,ADMINFLAG_KICKME)
(922,res = ast_waitstream(chan, AST_DIGIT_ANY)
(923,conf->recording)
(924,!conf->recordingfilename)
(925,conf)
(926,talkreq_manager = 0)
(927,LOG_WARNING)
(928,"- timelimit     = %ld\\n")
(929,)
(930,dahdic.chan = 0)
(931,var->value)
(932,mod_speex)
(933,currenttime)
(934,res)
(935,usercontainer)
(936,!ast_test_flag64(confflags, CONFFLAG_MONITOR)
(937,AST_FRAME_DTMF)
(938,ast_test_flag64(confflags, CONFFLAG_STARTMUTED)
(939,ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(940,1 << idx)
(941,conf->transframe[idx] = &ast_null_frame)
(942,user->chan)
(943,ioctl(fd, DAHDI_SETCONF, &dahdic)
(944,rt_schedule)
(945,if (menu8_active)
(946,frametype)
(947,if (rt_schedule)
(948,2)
(949,recordthread)
(950,conf->confno)
(951,samples)
(952,DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON)
(953,break;)
(954,"")
(955,"")
(956,confflags)
(957,conf->markedusers >= 1)
(958,ret = 0)
(959,nexteventts)
(960,conf)
(961,conf->users)
(962,time_left_ms >= 5000)
(963,chan)
(964,if (res > 0)
(965,user)
(966,1000)
(967,ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char)
(968,ast_format_cap_destroy(cap_slin)
(969,dahdiretry:)
(970,retrydahdi)
(971,cur)
(972,conf)
(973,!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])
(974,1)
(975,recordthreadlock)
(976,)
(977,menu_active = 1)
(978,ADMINFLAG_HANGUP)
(979,)
(980,user)
(981,)
(982,ADMINFLAG_SELFMUTED)
(983,atol(warnfreq_str)
(984,ast_test_flag64(confflags, CONFFLAG_INTROUSER)
(985,0)
(986,sla_queue_event_conf(SLA_EVENT_HOLD, chan, conf)
(987,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(988,1)
(989,actual)
(990,namerecloc)
(991,user->timelimit)
(992,0)
(993,sent_event)
(994,AST_FORMAT_SLINEAR)
(995,"")
(996,chan)
(997,chan)
(998,conf->recordingfilename = ast_strdup(recordingtmp)
(999,dsp)
(1000,checked)
(1001,menu_active)
(1002,conf)
(1003,AST_FRIENDLY_OFFSET)
(1004,confflags)
(1005,c)
(1006,0)
(1007,user)
(1008,integer)
(1009,)
(1010,"- play_warning  = %ld\\n")
(1011,!ast_strlen_zero(ast_channel_macrocontext(chan)
(1012,confsilence > MEETME_DELAYDETECTENDTALK)
(1013,chan)
(1014,ast_channel_language(chan)
(1015,nexteventts = ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)
(1016,lchan)
(1017,extended = 0)
(1018,&dahdic)
(1019,ast_strdup(var)
(1020,chan)
(1021,firstpass)
(1022,time_left_ms)
(1023,subclass)
(1024,if (ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(1025,ast_channel_connected(user->chan)
(1026,item->confusers = conf->users)
(1027,ms)
(1028,talk)
(1029,fd)
(1030,"Setting warning frequency to %ldms.\\n")
(1031,dahdic.confmode)
(1032,agi_app)
(1033,user)
(1034,ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT)
(1035,user->dahdichannel)
(1036,dahdic)
(1037,namerecloc)
(1038,confflags)
(1039,fd)
(1040,conf)
(1041,ast_waitstream(chan, AST_DIGIT_ANY)
(1042,conf->users)
(1043,chan)
(1044,chan)
(1045,ast_tvnow()
(1046,)
(1047,f)
(1048,transframe)
(1049,!ast_check_hangup(conf->chan)
(1050,chan)
(1051,)
(1052,!ast_streamfile(chan, "conf-extended", ast_channel_language(chan)
(1053,)
(1054,outfd)
(1055,if (!conf->transframe[idx])
(1056,ast_channel_language(chan)
(1057,var)
(1058,dahdic)
(1059,conf_queue_dtmf(conf, user, f)
(1060,exitcontext)
(1061,conf)
(1062,item->announcetype = CONF_HASLEFT)
(1063,"Setting conference duration limit to: %ldms.\\n")
(1064,confmode)
(1065,subclass)
(1066,long)
(1067,ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])
(1068,firstpass = 0)
(1069,case \'1\':)
(1070,*end_sound = NULL)
(1071,0)
(1072,ast_channel_language(chan)
(1073,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(1074,id)
(1075,user->chan)
(1076,res = -1)
(1077,ast_channel_caller(user->chan)
(1078,user)
(1079,conf->confno)
(1080,ast_channel_caller(user->chan)
(1081,conf->users >= conf->maxusers)
(1082,keepplaying = 0)
(1083,ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
(1084,timelimit)
(1085,NULL)
(1086,"%d")
(1087,conf)
(1088,play_warning)
(1089,ast_waitstream(chan, "")
(1090,ast_verbose("Quitting time...\\n")
(1091,1)
(1092,chan)
(1093,0)
(1094,usr)
(1095,if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(1096,ast_channel_connected(user->chan)
(1097,if (conf->users == 1)
(1098,pbx_builtin_setvar_helper(chan, "MEETMESECS", meetmesecs)
(1099,)
(1100,user)
(1101,menu_active = 0)
(1102,if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan)
(1103,sizeof(meetmesecs)
(1104,confusers)
(1105,chan)
(1106,ast_channel_language(chan)
(1107,"Unable to set \'%s\' to write linear mode\\n")
(1108,language)
(1109,&tm)
(1110,ast_channel_unlock(chan)
(1111,ast_channel_language(chan)
(1112,var)
(1113,ast_channel_connected(user->chan)
(1114,confflags)
(1115,RQ_UINTEGER2)
(1116,chan)
(1117,&conf->announcelistlock)
(1118,if (!menu_active)
(1119,res)
(1120,DAHDI_SET_BUFINFO)
(1121,goto outrun;)
(1122,)
(1123,ast_log(LOG_WARNING, "Error starting listen channel\\n")
(1124,NULL)
(1125,item->confchan)
(1126,dahdic.confno)
(1127,lastusers)
(1128,strlen(members)
(1129,keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan)
(1130,user->dahdichannel)
(1131,f)
(1132,conf->recordingfilename = ast_strdup(var)
(1133,!ast_streamfile(chan, "conf-muted", ast_channel_language(chan)
(1134,sizeof(user->namerecloc)
(1135,)
(1136,CONFFLAG_QUIET)
(1137,menu_was_active)
(1138,"default")
(1139,ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf)
(1140,0)
(1141,ioctl(fd, DAHDI_SETCONF, &dahdic_empty)
(1142,pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE")
(1143,chan)
(1144,conf->users == 1)
(1145,0)
(1146,conf->transframe)
(1147,chan)
(1148,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1149,ast_channel_connected(user->chan)
(1150,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(1151,x)
(1152,chan)
(1153,CONFFLAG_PASS_DTMF)
(1154,user)
(1155,if (!conf->recordingfilename)
(1156,if (user->user_no)
(1157,conf->gmuted)
(1158,0)
(1159,2)
(1160,confflags)
(1161,0)
(1162,if (res > 0)
(1163,chan)
(1164,confno)
(1165,if (!conf->recordingformat)
(1166,ast_channel_connected(user->chan)
(1167,!conf->recordingformat)
(1168,members)
(1169,confmode)
(1170,markedusers)
(1171,ast_stopstream(chan)
(1172,menu_active)
(1173,)
(1174,!conf->recordingformat)
(1175,conf->confno)
(1176,conf)
(1177,conf)
(1178,keepplaying = 0)
(1179,user->namerecloc)
(1180,valid)
(1181,user->talking && totalsilence > MEETME_DELAYDETECTENDTALK)
(1182,conf)
(1183,ao2_find(conf->usercontainer, &max_no, 0)
(1184,res)
(1185,case AST_CONTROL_BUSY:)
(1186,NULL)
(1187,rt_schedule)
(1188,user)
(1189,if (!strcasecmp(var->name, "endtime")
(1190,if (conf->locked)
(1191,&user_iter)
(1192,confflags)
(1193,ast_channel_language(chan)
(1194,keepplaying)
(1195,ast_channel_connected(user->chan)
(1196,chan)
(1197,)
(1198,user)
(1199,keepplaying)
(1200,if (dtmf > 0)
(1201,if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(1202,!(dahdic.confmode & DAHDI_CONF_TALKER)
(1203,dtmf = f->subclass.integer)
(1204,ast_channel_fd(conf->lchan, 0)
(1205,RET)
(1206,res)
(1207,10)
(1208,res)
(1209,if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON)
(1210,res)
(1211,ao2_ref(usr, -1)
(1212,ADMINFLAG_MUTED)
(1213,maxusers)
(1214,)
(1215,members[10] = "")
(1216,LOG_WARNING)
(1217,adminflags)
(1218,user)
(1219,chan)
(1220,)
(1221,keepplaying)
(1222,user)
(1223,cur)
(1224,0)
(1225,user)
(1226,conf)
(1227,id)
(1228,confsilence)
(1229,endalert)
(1230,dahdic.confmode)
(1231,CONFFLAG_WAITMARKED)
(1232,if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1233,switch(dtmf)
(1234,strlen(conf->confno)
(1235,conf->transpath)
(1236,fd)
(1237,ast_channel_caller(user->chan)
(1238,AST_LIST_HEAD_INIT_NOLOCK(&conf->announcelist)
(1239,0)
(1240,ast_channel_language(chan)
(1241,ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan)
(1242,now.tv_sec)
(1243,OBJ_NODATA)
(1244,conf)
(1245,confflags)
(1246,playednamerec)
(1247,)
(1248,ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)
(1249,if (rt_log_members)
(1250,break;)
(1251,OPT_ARG_MOH_CLASS)
(1252,if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND")
(1253,0)
(1254,"")
(1255,)
(1256,if (!ast_fileexists(user->namerecloc, NULL, NULL)
(1257,!ast_check_hangup(conf->chan)
(1258,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(1259,ioctl(fd, DAHDI_GETCONF, &dahdic)
(1260,if (user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)
(1261,LOG_WARNING)
(1262,)
(1263,warning_freq = 0)
(1264,0)
(1265,conf->announcethread)
(1266,confno)
(1267,tweak_talk_volume(user, VOL_UP)
(1268,ast_test_flag64(confflags, CONFFLAG_TALKER)
(1269,)
(1270,"Starting recording of MeetMe Conference %s into file %s.%s.\\n")
(1271,if (ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)
(1272,res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan)
(1273,!menu_active && user->talk.desired && !user->talk.actual)
(1274,strsep(&parse, ":")
(1275,ast_channel_caller(user->chan)
(1276,recordthreadlock)
(1277,if (!conf->users)
(1278,if (time_left_ms < to)
(1279,optargs)
(1280,ast_channel_unlock(chan)
(1281,chan)
(1282,confmode)
(1283,limit_str)
(1284,ret = 0)
(1285,dsp)
(1286,fr.samples = res / 2)
(1287,"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t\\t"Duration: %ld\\r\\n")
(1288,AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry)
(1289,)
(1290,if (retrydahdi)
(1291,name)
(1292,fd)
(1293,menu8_active = 1)
(1294,nfds = 0)
(1295,(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1296,exitcontext)
(1297,ast_channel_tech(c)
(1298,ENTER)
(1299,conf)
(1300,name)
(1301,ast_filedelete(user->namerecloc, NULL)
(1302,)
(1303,)
(1304,"queue-minutes")
(1305,dtmfstr)
(1306,)
(1307,1)
(1308,chan)
(1309,0)
(1310,1)
(1311,&conf->announcelistlock)
(1312,announcelist_addition)
(1313,user->listen.desired && !user->listen.actual)
(1314,O_RDWR | O_NONBLOCK)
(1315,ast_channel_context(chan)
(1316,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(1317,chan)
(1318,id)
(1319,&x)
(1320,res)
(1321,timeout = time(NULL)
(1322,origfd)
(1323,ast_debug(1, "DAHDI channel is in a conference already, retrying with pseudo\\n")
(1324,dahdic_empty)
(1325,confno)
(1326,!(user = ao2_alloc(sizeof(*user)
(1327,ast_channel_language(chan)
(1328,"Unable to set linear mode: %s\\n")
(1329,!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON)
(1330,res = read(outfd, buf, CONF_SIZE)
(1331,errno)
(1332,1)
(1333,users)
(1334,confno)
(1335,tv_sec)
(1336,conf)
(1337,playednamerec)
(1338,tmp)
(1339,timelimit)
(1340,AST_DIGIT_ANY)
(1341,)
(1342,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(1343,talkreq_manager)
(1344,)
(1345,chan)
(1346,"Ooh, something swapped out under us, starting over\\n")
(1347,conf)
(1348,)
(1349,int)
(1350,sent_event)
(1351,user->adminflags)
(1352,MEETME_DELAYDETECTTALK)
(1353,)
(1354,time_left_ms <= 0)
(1355,conf)
(1356,usr)
(1357,user)
(1358,ast_channel_unlock(chan)
(1359,ast_channel_caller(user->chan)
(1360,if (res > 0)
(1361,ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)
(1362,conf)
(1363,conf->confno)
(1364,valid)
(1365,if (calldurationlimit > 0)
(1366,seconds)
(1367,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1368,(conf->endtime - now.tv_sec)
(1369,checked = 0)
(1370,ast_channel_language(chan)
(1371,ast_channel_uniqueid(chan)
(1372,ast_strdupa("#")
(1373,chan)
(1374,confflags)
(1375,str)
(1376,0)
(1377,user->listen)
(1378,exitcontext)
(1379,set_user_talking(chan, conf, user, 1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
(1380,CONFFLAG_INTROUSER)
(1381,"")
(1382,conf->locked = 1)
(1383,user)
(1384,extended)
(1385,item)
(1386,lastusers)
(1387,x = 1)
(1388,ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)
(1389,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(1390,user->user_no)
(1391,timelimit)
(1392,currentmarked == 0)
(1393,remain)
(1394,0)
(1395,conf->users)
(1396,idx = 0)
(1397,if (!announcement_played && conf->endalert)
(1398,ast_channel_caller(user->chan)
(1399,conf_play(chan, conf, ENTER)
(1400,!(item = ao2_alloc(sizeof(*item)
(1401,conf->chan)
(1402,ast_frfree(f)
(1403,adminflags)
(1404,"#")
(1405,timelimit)
(1406,now = ast_tvnow()
(1407,1)
(1408,&dahdic)
(1409,"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\\n")
(1410,announcement_played)
(1411,usr = ao2_iterator_next(&user_iter)
(1412,x = 0)
(1413,ast_frfree(f)
(1414,ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf)
(1415,ast_waitstream(chan, "")
(1416,ast_channel_caller(user->chan)
(1417,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1418,chan)
(1419,user)
(1420,chan)
(1421,ast_log(LOG_WARNING, "Error setting conference - Un/Mute \\n")
(1422,1)
(1423,ast_waitstream(chan, "")
(1424,users)
(1425,bi)
(1426,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(1427,)
(1428,CONFFLAG_QUIET)
(1429,dahdic)
(1430,item)
(1431,"conf-otherinparty")
(1432,0)
(1433,f->subclass)
(1434,"DAHDI")
(1435,"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: on\\r\\n")
(1436,)
(1437,confflags)
(1438,&conf->recordthreadlock)
(1439,ADMINFLAG_SELFMUTED)
(1440,warnfreq_str)
(1441,ast_channel_language(chan)
(1442,user->listen)
(1443,context = ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC])
(1444,conf->usercontainer)
(1445,dahdic.confno = 0)
(1446,0)
(1447,namerecloc)
(1448,item)
(1449,item->announcetype = CONF_HASJOIN)
(1450,user->adminflags)
(1451,dahdic)
(1452,cur)
(1453,(ast_test_flag64(confflags, CONFFLAG_INTROUSER)
(1454,keepplaying)
(1455,"conf-onlyperson")
(1456,conf->lchan)
(1457,confflags)
(1458,errno)
(1459,valid)
(1460,(int)
(1461,if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(1462,conf)
(1463,0)
(1464,timeout)
(1465,rt_schedule)
(1466,time_left_ms + 500)
(1467,chan)
(1468,ast_dsp_free(dsp)
(1469,lchan)
(1470,conf)
(1471,chan)
(1472,warning_sound)
(1473,keepplaying = 0)
(1474,musiconhold)
(1475,id)
(1476,&conf->announcelistlock)
(1477,fd)
(1478,(conf->recordthread == AST_PTHREADT_NULL)
(1479,CONFFLAG_MONITORTALKER)
(1480,recordingfilename)
(1481,conf)
(1482,!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(1483,5000)
(1484,"")
(1485,confflags)
(1486,f->frametype == AST_FRAME_DTMF)
(1487,ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(1488,1)
(1489,!warning_freq)
(1490,ast_channel_caller(user->chan)
(1491,ast_cond_signal(&conf->announcelist_addition)
(1492,mohtempstopped = 0)
(1493,namerecloc)
(1494,CONFFLAG_MARKEDEXIT)
(1495,conf)
(1496,confsilence)
(1497,"- end_sound     = %s\\n")
(1498,if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan)
(1499,"Error starting listen channel\\n")
(1500,CONFFLAG_MONITORTALKER)
(1501,confflags)
(1502,!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(1503,ast_fileexists(user->namerecloc, NULL, NULL)
(1504,ret)
(1505,conf->confno)
(1506,timelimit)
(1507,retrydahdi = 1)
(1508,retrydahdi)
(1509,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(1510,remain)
(1511,conf->markedusers)
(1512,conf)
(1513,CONFFLAG_STARMENU)
(1514,chan)
(1515,goto outrun;)
(1516,menu_active)
(1517,chan)
(1518,1)
(1519,"<unknown>")
(1520,confflags)
(1521,if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan)
(1522,user->talk.actual)
(1523,ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(1524,ast_channel_caller(user->chan)
(1525,)
(1526,ast_moh_stop(chan)
(1527,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(1528,user)
(1529,if (currentmarked == 1 && conf->users > 1)
(1530,user->user_no)
(1531,&conf)
(1532,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1533,chan)
(1534,dahdic.confmode & DAHDI_CONF_TALKER)
(1535,var ? var : NULL)
(1536,if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(1537,var)
(1538,0)
(1539,!conf->transframe[idx])
(1540,0)
(1541,0)
(1542,fr)
(1543,0)
(1544,"conf-extended")
(1545,MEETME_DELAYDETECTENDTALK)
(1546,confno)
(1547,CONFFLAG_KICK_CONTINUE)
(1548,start_time)
(1549,goto outrun;)
(1550,user_no)
(1551,(sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout)
(1552,item)
(1553,&opt_waitmarked_timeout)
(1554,item)
(1555,conf->users > 1)
(1556,playlock)
(1557,"Exit by single digit did not work in meetme. Extension %s does not exist in context %s\\n")
(1558,conf->markedusers == 0)
(1559,optargs[OPT_ARG_MOH_CLASS])
(1560,confno)
(1561,if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan)
(1562,f)
(1563,chan)
(1564,snprintf(members, sizeof(members)
(1565,optargs[OPT_ARG_DURATION_LIMIT])
(1566,ast_channel_connected(user->chan)
(1567,ADMINFLAG_SELFMUTED)
(1568,item->vmrec)
(1569,)
(1570,!retrydahdi)
(1571,dtmfstr[0])
(1572,users)
(1573,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(1574,musiconhold = 0)
(1575,menu_active = 0)
(1576,"members")
(1577,)
(1578,break;)
(1579,ast_streamfile(chan, "conf-muted", ast_channel_language(chan)
(1580,chan)
(1581,conf->announcelist_addition)
(1582,sent_event = 0)
(1583,lastmarked == 0)
(1584,ast_channel_uniqueid(chan)
(1585,"Message: CONFFLAG_MARKEDEXIT\\r\\nLastUsers: %d\\r\\nUsers: %d")
(1586,strlen(conf->confno)
(1587,timelimit)
(1588,transpath)
(1589,res)
(1590,!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan)
(1591,markedusers)
(1592,CONFFLAG_WAITMARKED)
(1593,chan)
(1594,CONFFLAG_MONITOR)
(1595,ast_channel_caller(user->chan)
(1596,user->listen)
(1597,ast_channel_unlock(chan)
(1598,parse)
(1599,OPT_ARG_EXITKEYS)
(1600,*confflags)
(1601,ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(1602,chan)
(1603,user->userflags = *confflags)
(1604,user)
(1605,conf)
(1606,play_warning)
(1607,if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(1608,conf->users == 1)
(1609,)
(1610,ast_test_flag64(confflags, CONFFLAG_MOH)
(1611,ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(1612,ast_waitstream(chan, "")
(1613,)
(1614,dahdic)
(1615,confflags)
(1616,transpath)
(1617,ast_stopstream(chan)
(1618,user->adminflags & ADMINFLAG_KICKME)
(1619,0)
(1620,DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER)
(1621,!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)
(1622,retrydahdi = (strcasecmp(ast_channel_tech(chan)
(1623,CONFFLAG_INTROMSG)
(1624,!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1625,)
(1626,ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(1627,user_iter)
(1628,ast_channel_connected(user->chan)
(1629,ret = 0)
(1630,ast_channel_caller(user->chan)
(1631,)
(1632,conf->recordthread == AST_PTHREADT_NULL)
(1633,close(fd)
(1634,f)
(1635,seconds)
(1636,AST_DIGIT_ANY)
(1637,ret)
(1638,menu_was_active = 0)
(1639,NULL)
(1640,"")
(1641,talking)
(1642,jointime)
(1643,)
(1644,char *)
(1645,7)
(1646,ast_waitstream(chan, "")
(1647,nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000)
(1648,)
(1649,)
(1650,ast_pthread_create_background(&conf->announcethread, NULL, announce_thread, conf)
(1651,conf->recordingformat = ast_strdup("wav")
(1652,ast_stopstream(chan)
(1653,)
(1654,dahdic)
(1655,musiconhold)
(1656,announcelist_addition)
(1657,if (!retrydahdi)
(1658,0)
(1659,sizeof(dahdic_empty)
(1660,OPT_ARG_DURATION_LIMIT)
(1661,0)
(1662,to = -1)
(1663,menu_active = 1)
(1664,"meetme-conf-rec-%s-%s")
(1665,break;)
(1666,if (conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)
(1667,if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan)
(1668,conf)
(1669,0)
(1670,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(1671,opt_waitmarked_timeout = 0)
(1672,announcelist)
(1673,4)
(1674,tmp)
(1675,calldurationlimit = 0)
(1676,markedusers)
(1677,conf->gmuted = 0)
(1678,CONFFLAG_MARKEDUSER)
(1679,if (ast_check_hangup(chan)
(1680,confmode)
(1681,var)
(1682,transpath)
(1683,chan)
(1684,lastusers)
(1685,frametype)
(1686,conf)
(1687,now.tv_sec)
(1688,if (!user->listen.actual &&\n\\n\\t\\t\\t\\t\\t\\t(ast_test_flag64(confflags, CONFFLAG_MONITOR)
(1689,60)
(1690,if (!user->talking && totalsilence < MEETME_DELAYDETECTTALK)
(1691,frametype)
(1692,sizeof(currenttime)
(1693,ret)
(1694,max_no)
(1695,warning_sound)
(1696,chan)
(1697,chan)
(1698,!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED])
(1699,item)
(1700,&conf)
(1701,conf->confno)
(1702,ast_channel_caller(user->chan)
(1703,careful_write(fd, f->data.ptr, f->datalen, 0)
(1704,confflags)
(1705,AST_FRAME_BITS)
(1706,markedusers)
(1707,chan)
(1708,NULL)
(1709,CONFFLAG_MONITORTALKER)
(1710,exitkeys = ast_strdupa(optargs[OPT_ARG_EXITKEYS])
(1711,chan)
(1712,OPT_ARG_DURATION_STOP)
(1713,ret)
(1714,ioctl(fd, DAHDI_SETCONF, &dahdic)
(1715,dtmf)
(1716,f->frametype)
(1717,res = ast_waitstream(chan, AST_DIGIT_ANY)
(1718,if (time_left_ms >= 5000)
(1719,conf->playlock)
(1720,namerecloc)
(1721,recordingtmp[AST_MAX_EXTENSION] = "")
(1722,CONFFLAG_MARKEDUSER)
(1723,conf->users == 1)
(1724,kicktime)
(1725,ast_channel_caller(user->chan)
(1726,dtmfstr)
(1727,confflags)
(1728,DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER)
(1729,NULL)
(1730,LOG_WARNING)
(1731,1000)
(1732,dtmf)
(1733,CONFFLAG_INTROUSER_VMREC)
(1734,"")
(1735,confflags)
(1736,0)
(1737,user->chan = chan)
(1738,0)
(1739,user)
(1740,sizeof(fr)
(1741,var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
(1742,calldurationlimit)
(1743,if (!(item = ao2_alloc(sizeof(*item)
(1744,ret)
(1745,)
(1746,ast_channel_language(chan)
(1747,f->subclass.format.id)
(1748,f)
(1749,DAHDI_CONF_CONFANNMON)
(1750,checked)
(1751,DAHDI_SETCONF)
(1752,dahdic.confno)
(1753,user)
(1754,"")
(1755,if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(1756,NULL)
(1757,user)
(1758,"conf-thereare")
(1759,users)
(1760,conf)
(1761,!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(1762,user)
(1763,chan)
(1764,ast_channel_caller(user->chan)
(1765,valid)
(1766,chan)
(1767,f->subclass)
(1768,user)
(1769,res)
(1770,exitcontext)
(1771,confflags)
(1772,conf->lchan = NULL)
(1773,conf->announcelistlock)
(1774,OBJ_NODATA)
(1775,dahdic.chan)
(1776,conf)
(1777,ast_strlen_zero(mailbox)
(1778,conf->recordingfilename)
(1779,snprintf(members, sizeof(members)
(1780,end_sound)
(1781,if (!musiconhold)
(1782,chan)
(1783,offset)
(1784,users)
(1785,ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
(1786,ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(1787,conf)
(1788,now.tv_sec)
(1789,0)
(1790,AST_FRIENDLY_OFFSET)
(1791,ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW)
(1792,max_no = 0)
(1793,currentmarked)
(1794,chan)
(1795,listen)
(1796,if (ioctl(ast_channel_fd(conf->lchan, 0)
(1797,close(fd)
(1798,)
(1799,&tmpfmt)
(1800,"MeetmeMute")
(1801,to)
(1802,dtmfstr[1])
(1803,calldurationlimit)
(1804,if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(1805,ast_stopstream(chan)
(1806,keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(1807,talkreq_manager = 0)
(1808,chan)
(1809,user)
(1810,CONFFLAG_RECORDCONF)
(1811,RQ_UINTEGER1)
(1812,)
(1813,conf->endtime)
(1814,chan)
(1815,conf->confno)
(1816,"%s/voicemail/%s/%s/greet")
(1817,conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
(1818,ast_waitstream(chan, AST_DIGIT_ANY)
(1819,user)
(1820,cap_slin)
(1821,if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
(1822,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(1823,0)
(1824,ast_channel_name(chan)
(1825,ast_waitstream(chan, AST_DIGIT_ANY)
(1826,conf->lchan)
(1827,pbx_exec(chan, agi_app, agifile)
(1828,conf->users)
(1829,chan)
(1830,CONFFLAG_MONITOR)
(1831,user->userflags)
(1832,while (play_warning > timelimit)
(1833,chan)
(1834,ast_waitstream(chan, "")
(1835,tmpfmt)
(1836,)
(1837,subclass)
(1838,user)
(1839,"members")
(1840,talkreq_manager)
(1841,ast_log(LOG_WARNING, "Could not find application (agi)
(1842,f->frametype == AST_FRAME_DTMF)
(1843,1)
(1844,struct ast_channel *chan)
(1845,time(NULL)
(1846,dtmf)
(1847,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(1848,destdir)
(1849,conf)
(1850,!conf->recordingfilename)
(1851,f->frametype)
(1852,)
(1853,ast_waitstream(chan, "")
(1854,origfd)
(1855,AST_FORMAT_SLINEAR)
(1856,conf)
(1857,strcasecmp(var->name, "endtime")
(1858,fd)
(1859,warning_freq = 0)
(1860,fr.subclass.format)
(1861,menu8_active)
(1862,ast_channel_language(chan)
(1863,user->play_warning)
(1864,user->adminflags)
(1865,if (res > 0)
(1866,&conf->announcelist_addition)
(1867,conf)
(1868,case \'1\':)
(1869,bi)
(1870,ast_waitstream(chan, AST_DIGIT_ANY)
(1871,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(1872,user_iter)
(1873,tv_sec)
(1874,ast_cond_signal(&conf->announcelist_addition)
(1875,"<unknown>")
(1876,if (musiconhold)
(1877,-1)
(1878,)
(1879,using_pseudo)
(1880,cap_slin)
(1881,dahdic)
(1882,conf)
(1883,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(1884,now = ast_tvnow()
(1885,"%30d")
(1886,S_COR(ast_channel_caller(user->chan)
(1887,ast_channel_caller(user->chan)
(1888,1000)
(1889,ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
(1890,"%s/meetme")
(1891,set_user_talking(chan, conf, user, 0, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
(1892,play_warning = 0)
(1893,snprintf(user->namerecloc, sizeof(user->namerecloc)
(1894,NULL)
(1895,menu_active)
(1896,chan)
(1897,)
(1898,)
(1899,"members")
(1900,ast_stopstream(chan)
(1901,NULL)
(1902,ast_mutex_unlock(&conf->announcelistlock)
(1903,lchan)
(1904,chan)
(1905,res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan)
(1906,announcement_played = 0)
(1907,sizeof(*user)
(1908,chan)
(1909,)
(1910,user->userflags)
(1911,ast_channel_language(chan)
(1912,memset(&dahdic, 0, sizeof(dahdic)
(1913,goto outrun;)
(1914,AST_FRAME_NULL)
(1915,)
(1916,now = ast_tvnow()
(1917,menu_active = 0)
(1918,usercontainer)
(1919,ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)
(1920,chan)
(1921,user_iter)
(1922,break;)
(1923,f->frametype == AST_FRAME_NULL)
(1924,if (!ast_streamfile(chan, "beep", ast_channel_language(chan)
(1925,(f->frametype == AST_FRAME_DTMF)
(1926,&confsilence)
(1927,idx)
(1928,__buf)
(1929,item)
(1930,0)
(1931,CONF_SIZE)
(1932,ast_channel_language(chan)
(1933,retrydahdi)
(1934,conf)
(1935,user)
(1936,fd)
(1937,!user->talking)
(1938,if (conf->origframe)
(1939,listenlock)
(1940,confflags)
(1941,)
(1942,ret = -1)
(1943,recordthread)
(1944,ast_strlen_zero(optargs[OPT_ARG_EXITKEYS])
(1945,strcasecmp(ast_channel_tech(chan)
(1946,conf->users)
(1947,res > 0)
(1948,warning_str)
(1949,dahdic.chan = 0)
(1950,str)
(1951,ret = 0)
(1952,duration)
(1953,chan)
(1954,)
(1955,NULL)
(1956,retrydahdi)
(1957,&dahdic)
(1958,ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
(1959,CONFFLAG_ANNOUNCEUSERCOUNT)
(1960,keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(1961,sizeof(recordingtmp)
(1962,usercontainer)
(1963,ast_waitstream(chan, "")
(1964,sizeof(user->namerecloc)
(1965,break;)
(1966,AST_FRAME_CONTROL)
(1967,chan)
(1968,max_no)
(1969,dahdic)
(1970,while (!ast_check_hangup(conf->chan)
(1971,fd)
(1972,dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON)
(1973,meetmesecs)
(1974,"%d")
(1975,10)
(1976,conf->gmuted)
(1977,now)
(1978,CONFFLAG_QUIET)
(1979,OBJ_NODATA)
(1980,user)
(1981,AST_FORMAT_SLINEAR)
(1982,userflags)
(1983,ast_check_hangup(chan)
(1984,)
(1985,recordingfilename)
(1986,"")
(1987,&user_iter)
(1988,item)
(1989,ast_stopstream(chan)
(1990,exitkeys)
(1991,1)
(1992,&dahdic_empty)
(1993,-1)
(1994,!checked)
(1995,"Error setting conference\\n")
(1996,user->dahdichannel && (ast_channel_audiohooks(c)
(1997,!ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(1998,conf)
(1999,0)
(2000,!user->listen.actual &&\n\\n\\t\\t\\t\\t\\t\\t(ast_test_flag64(confflags, CONFFLAG_MONITOR)
(2001,break;)
(2002,break;)
(2003,SLA_EVENT_HOLD)
(2004,ast_dsp_free(dsp)
(2005,user)
(2006,recordthreadlock)
(2007,exitcontext)
(2008,pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
(2009,warning_sound)
(2010,)
(2011,"MeetmeTalkRequest")
(2012,1)
(2013,if (!strcmp(user->warning_sound, "timeleft")
(2014,ast_channel_caller(user->chan)
(2015,strcasecmp(ast_channel_tech(chan)
(2016,timelimit)
(2017,fr.data)
(2018,dahdic)
(2019,"pseudo")
(2020,if (!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)
(2021,optargs)
(2022,var = origvar = ast_load_realtime("meetme", "confno",\n\\n\\t\\t\\t\\t\\t\\t\\tconf->confno, "starttime <=", currenttime,\n\\n\\t\\t\\t\\t\\t\\t\\t "endtime >=", currenttime, NULL)
(2023,exitcontext)
(2024,chan)
(2025,!end_sound)
(2026,conf->usercontainer)
(2027,break;)
(2028,user)
(2029,case \'4\':)
(2030,fr.offset)
(2031,dtmfstr[1] = \'\\0\')
(2032,dtmfstr[2] = "")
(2033,ast_waitstream(chan, "")
(2034,ast_channel_name(usr->chan)
(2035,0)
(2036,&dahdic)
(2037,confflags)
(2038,((f->frametype == AST_FRAME_DTMF)
(2039,conf)
(2040,ret = 0)
(2041,users)
(2042,!ast_test_flag64(confflags, CONFFLAG_MONITOR)
(2043,ast_channel_caller(user->chan)
(2044,ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW)
(2045,idx)
(2046,ast_channel_lock(chan)
(2047,if ((conf->transframe[idx]->frametype != AST_FRAME_NULL)
(2048,chan)
(2049,CONFFLAG_ADMIN)
(2050,f->frametype == AST_FRAME_CONTROL)
(2051,ast_copy_string(exitcontext, ast_channel_macrocontext(chan)
(2052,chan)
(2053,ast_stopstream(chan)
(2054,confflags)
(2055,)
(2056,keepplaying = 0)
(2057,0)
(2058,res)
(2059,conf->users - 1)
(2060,)
(2061,~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(2062,if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(2063,ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms)
(2064,confflags)
(2065,ast_waitstream(chan, AST_DIGIT_ANY)
(2066,S_COR(ast_channel_caller(user->chan)
(2067,conf)
(2068,chan)
(2069,announcethreadlock)
(2070,)
(2071,user)
(2072,item = ao2_alloc(sizeof(*item)
(2073,CONFFLAG_TALKER)
(2074,!ast_strlen_zero(optargs[OPT_ARG_DURATION_STOP])
(2075,ao2_ref(item, 0)
(2076,conf)
(2077,-1)
(2078,user)
(2079,dahdic)
(2080,confflags)
(2081,id)
(2082,ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(2083,-1)
(2084,dahdic_empty)
(2085,conf)
(2086,0)
(2087,&dahdic)
(2088,DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER)
(2089,strlen(conf->confno)
(2090,minutes)
(2091,user)
(2092,0)
(2093,O_NONBLOCK)
(2094,chan)
(2095,3)
(2096,1)
(2097,ast_channel_connected(user->chan)
(2098,confflags)
(2099,ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan)
(2100,user)
(2101,DAHDI_GETCONF)
(2102,LOG_WARNING)
(2103,"<unknown>")
(2104,1)
(2105,0)
(2106,)
(2107,extended = 1)
(2108,f->subclass)
(2109,ast_translate(conf->transpath[idx], conf->origframe, 0)
(2110,conf)
(2111,ast_log(LOG_WARNING, "Error getting conference\\n")
(2112,default:)
(2113,conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN)
(2114,res = ast_waitstream(chan, "")
(2115,"meetme-conf-rec-%s-%s")
(2116,time_left_ms)
(2117,var)
(2118,conf)
(2119,user)
(2120,conf->confno)
(2121,dtmfstr)
(2122,fd)
(2123,ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",\n\\n\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: off\\r\\n",\n\\n\\t\\t\\t\\t\\tast_channel_name(chan)
(2124,&user->user_no)
(2125,DATE_FORMAT)
(2126,ast_channel_language(chan)
(2127,id)
(2128,DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER)
(2129,bi.txbufpolicy = DAHDI_POLICY_IMMEDIATE)
(2130,user)
(2131,confflags)
(2132,lastmarked)
(2133,adminflags)
(2134,MEETME_DELAYDETECTENDTALK)
(2135,fr.frametype = AST_FRAME_VOICE)
(2136,confmode)
(2137,ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(2138,res = 0)
(2139,warnfreq_str = parse)
(2140,user)
(2141,conf->lchan = NULL)
(2142,case \'2\':)
(2143,ast_channel_audiohooks(chan)
(2144,ast_log(LOG_WARNING, "Error setting conference\\n")
(2145,strerror(errno)
(2146,CONFFLAG_QUIET)
(2147,THRESHOLD_SILENCE)
(2148,ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(2149,strcasecmp(ast_channel_tech(c)
(2150,user)
(2151,ast_channel_name(chan)
(2152,dahdic.chan)
(2153,conf)
(2154,0)
(2155,frametype)
(2156,dtmf = ast_waitstream(chan, AST_DIGIT_ANY)
(2157,if (using_pseudo)
(2158,ast_channel_name(chan)
(2159,user->dahdichannel = !retrydahdi)
(2160,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(2161,dahdichannel)
(2162,goto dahdiretry;)
(2163,using_pseudo)
(2164,chan)
(2165,)
(2166,adminflags)
(2167,LOG_WARNING)
(2168,&fd)
(2169,NULL)
(2170,users)
(2171,ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(2172,confs)
(2173,ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(2174,CONFFLAG_MONITOR)
(2175,user)
(2176,f)
(2177,"Setting warning time to %ldms from the conference duration limit.\\n")
(2178,confflags)
(2179,)
(2180,warning_freq)
(2181,if (setusercount)
(2182,1)
(2183,res = ast_waitstream(chan, "")
(2184,ast_debug(2, "- timelimit     = %ld\\n", timelimit)
(2185,AST_PTHREADT_NULL)
(2186,0)
(2187,origfd = ast_channel_fd(chan, 0)
(2188,if (conf->users == 1)
(2189,user)
(2190,struct ast_flags64 *confflags)
(2191,if (res > 0)
(2192,for (;;)
(2193,ao2_ref(user, -1)
(2194,chan)
(2195,confflags)
(2196,gmuted)
(2197,chan)
(2198,DAHDI_CONF_LISTENER)
(2199,case \'7\':)
(2200,confflags)
(2201,default:)
(2202,if(conf->gmuted)
(2203,conf)
(2204,goto dahdiretry;)
(2205,conf->transframe[idx]->frametype != AST_FRAME_NULL)
(2206,gmuted)
(2207,)
(2208,subclass)
(2209,fr)
(2210,chan)
(2211,0)
(2212,if (agi_app)
(2213,setusercount = 1)
(2214,conf->confno)
(2215,4)
(2216,RQ_UINTEGER4)
(2217,fr)
(2218,!ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan)
(2219,chan)
(2220,0)
(2221,recordingformat)
(2222,warning_str = strsep(&parse, ":")
(2223,valid)
(2224,1)
(2225,f->frametype)
(2226,ast_mkdir(destdir, 0777)
(2227,ast_channel_language(chan)
(2228,ast_strdupa(optargs[OPT_ARG_INTROUSER_VMREC])
(2229,keepplaying = 0)
(2230,chan)
(2231,if (res == -1)
(2232,calldurationlimit = 0)
(2233,chan)
(2234,user->listen.actual)
(2235,conf->usercontainer)
(2236,0)
(2237,"meetme")
(2238,if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(2239,x)
(2240,CONFFLAG_MONITOR)
(2241,currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
(2242,&conf->announcelist_addition)
(2243,user)
(2244,ast_channel_uniqueid(chan)
(2245,if (conf->transpath[idx])
(2246,(conf->announcethread == AST_PTHREADT_NULL)
(2247,chan)
(2248,!sent_event)
(2249,"conf-userwilljoin")
(2250,ast_channel_language(chan)
(2251,warning_freq = atol(warnfreq_str)
(2252,switch(dtmf)
(2253,)
(2254,buf)
(2255,item->announcetype)
(2256,keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan)
(2257,conf)
(2258,ast_debug(2, "- warning_sound = %s\\n", warning_sound ? warning_sound : "UNDEF")
(2259,break;)
(2260,ADMINFLAG_MUTED)
(2261,CONFFLAG_INTROUSER)
(2262,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(2263,user)
(2264,dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER)
(2265,ioctl(fd, DAHDI_SETCONF, &dahdic)
(2266,menu_was_active)
(2267,AST_DIGIT_ANY)
(2268,chan)
(2269,CONFFLAG_KICK_CONTINUE)
(2270,conf->markedusers)
(2271,calldurationlimit = atoi(optargs[OPT_ARG_DURATION_STOP])
(2272,f)
(2273,ast_channel_macrocontext(chan)
(2274,)
(2275,&conf->listenlock)
(2276,)
(2277,ast_channel_name(chan)
(2278,users)
(2279,playednamerec)
(2280,CONFFLAG_INTROUSER_VMREC)
(2281,listen)
(2282,musiconhold)
(2283,strcmp(user->warning_sound, "timeleft")
(2284,":")
(2285,mohtempstopped = 0)
(2286,ast_channel_fd(chan, 0)
(2287,checked)
(2288,musiconhold)
(2289,usercontainer)
(2290,2)
(2291,strlen(members)
(2292,item->confusers)
(2293,conf)
(2294,chan)
(2295,res)
(2296,OBJ_NODATA)
(2297,conf->transframe)
(2298,conf)
(2299,ast_debug(2, "Limit Data for this call:\\n")
(2300,rt_schedule)
(2301,if (user->dahdichannel)
(2302,user)
(2303,!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(2304,ast_variables_destroy(origvar)
(2305,)
(2306,)
(2307,ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)
(2308,1)
(2309,1)
(2310,var)
(2311,"@")
(2312,chan)
(2313,"UNDEF")
(2314,*confflags)
(2315,&conf->listenlock)
(2316,user->adminflags)
(2317,dahdic.confmode)
(2318,res)
(2319,announcelistlock)
(2320,conf)
(2321,dahdic.confmode = DAHDI_CONF_CONFANN | DAHDI_CONF_CONFANNMON)
(2322,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(2323,conf)
(2324,res = ast_waitstream(chan, AST_DIGIT_ANY)
(2325,user->adminflags)
(2326,dahdic.confmode |= DAHDI_CONF_TALKER)
(2327,conf->announcelist)
(2328,keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(2329,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(2330,ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0)
(2331,ast_log(LOG_WARNING, "Unable to open DAHDI pseudo channel: %s\\n", strerror(errno)
(2332,60)
(2333,if (!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS])
(2334,lastmarked != 0)
(2335,res)
(2336,conf->users)
(2337,transframe)
(2338,lastusers = conf->users)
(2339,pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT")
(2340,!user->talking)
(2341,ast_mkdir(destdir, 0777)
(2342,chan)
(2343,ast_log(LOG_WARNING, "Error setting conference - Un/Mute \\n")
(2344,ioctl(fd, DAHDI_SETLINEAR, &x)
(2345,"- warning_sound = %s\\n")
(2346,"Unable to allocate DSP!\\n")
(2347,)
(2348,user_no)
(2349,userflags)
(2350,0)
(2351,adminflags)
(2352,chan)
(2353,actual)
(2354,conf)
(2355,ast_hangup(conf->lchan)
(2356,conf)
(2357,ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(2358,!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(2359,VOL_UP)
(2360,conf)
(2361,musiconhold)
(2362,0)
(2363,entry)
(2364,using_pseudo = 0)
(2365,ast_stopstream(chan)
(2366,chan)
(2367,ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(2368,CONFFLAG_DURATION_STOP)
(2369,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(2370,keepplaying)
(2371,dahdic)
(2372,"conf-unmuted")
(2373,chan)
(2374,ast_channel_connected(user->chan)
(2375,)
(2376,sizeof(char)
(2377,fd)
(2378,)
(2379,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(2380,ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)
(2381,if (idx >= AST_FRAME_BITS)
(2382,user->user_no)
(2383,chan)
(2384,if (lastmarked != 0)
(2385,case \'2\':)
(2386,endtime_tm)
(2387,confsilence < MEETME_DELAYDETECTTALK)
(2388,user->end_sound)
(2389,)
(2390,f->subclass.integer)
(2391,CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW)
(2392,conf->recordingformat)
(2393,res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan)
(2394,dtmf)
(2395,chan)
(2396,2)
(2397,0)
(2398,if (!rt_extend_conf(conf->confno)
(2399,ret = 0)
(2400,users)
(2401,"meetme")
(2402,conf->endtime)
(2403,!(user->adminflags & ADMINFLAG_T_REQUEST)
(2404,user->jointime)
(2405,optargs[OPT_ARG_DURATION_STOP])
(2406,conf->recordingfilename)
(2407,NULL)
(2408,user_no)
(2409,warning_sound)
(2410,var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE")
(2411,limit_str)
(2412,timeout)
(2413,user->warning_freq)
(2414,chan)
(2415,DAHDI_CONF_CONF)
(2416,user->adminflags)
(2417,"")
(2418,using_pseudo)
(2419,ast_dsp_new()
(2420,NULL)
(2421,confflags)
(2422,ast_realtime_require_field("meetme",\n\\n\\t\\t\\t\\t\\t"confno", strlen(conf->confno)
(2423,chan)
(2424,conf->confno)
(2425,)
(2426,musiconhold = 0)
(2427,)
(2428,!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED])
(2429,ast_test_flag64(confflags, CONFFLAG_MOH)
(2430,conf->users)
(2431,"<unknown>")
(2432,str)
(2433,integer)
(2434,user->chan)
(2435,!(talkreq_manager)
(2436,f)
(2437,ast_channel_connected(user->chan)
(2438,idx)
(2439,if (ast_strlen_zero(context)
(2440,-1)
(2441,f)
(2442,var)
(2443,if (!conf->recordingfilename)
(2444,sent_event)
(2445,"wav")
(2446,2)
(2447,ast_debug(2, "Exit by single digit did not work in meetme. Extension %s does not exist in context %s\\n", dtmfstr, exitcontext)
(2448,agifiledefault)
(2449,ast_format_cap_add(cap_slin, ast_format_set(&tmpfmt, AST_FORMAT_SLINEAR, 0)
(2450,chan)
(2451,tmpvar)
(2452,conf->recording != MEETME_RECORD_ACTIVE)
(2453,recordingformat)
(2454,conf)
(2455,&confs)
(2456,*item)
(2457,chan)
(2458,chan)
(2459,0)
(2460,confno)
(2461,users)
(2462,"conf-onlyone")
(2463,ast_channel_name(chan)
(2464,user->talk)
(2465,EVENT_FLAG_CALL)
(2466,chan)
(2467,"beep")
(2468,AST_FRAME_DTMF_BEGIN)
(2469,(char *)
(2470,goto outrun;)
(2471,ast_channel_connected(user->chan)
(2472,strlen(conf->confno)
(2473,conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(2474,(f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)
(2475,tweak_listen_volume(user, VOL_UP)
(2476,conf->confno)
(2477,ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan)
(2478,valid)
(2479,"")
(2480,user->adminflags)
(2481,user->listen)
(2482,recordingfilename)
(2483,ast_module_helper("", "codec_speex", 0, 0, 0, 0)
(2484,goto bailoutandtrynormal;)
(2485,"MEETME_RECORDINGFORMAT")
(2486,conf->transpath[idx])
(2487,adminflags)
(2488,user->namerecloc)
(2489,ast_frfree(f)
(2490,exitkeys = ast_strdupa("#")
(2491,)
(2492,opt_waitmarked_timeout)
(2493,recordingtmp)
(2494,bi.numbufs = audio_buffers)
(2495,setusercount)
(2496,ast_channel_language(chan)
(2497,user->talk)
(2498,ast_channel_unlock(chan)
(2499,item)
(2500,!menu_active)
(2501,confflags)
(2502,user->userflags = *confflags)
(2503,"Unable to write frame to channel %s\\n")
(2504,)
(2505,confno)
(2506,if (ast_test_flag64(confflags, CONFFLAG_DURATION_LIMIT)
(2507,limit_str)
(2508,user->dahdichannel)
(2509,)
(2510,)
(2511,users)
(2512,sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout)
(2513,)
(2514,dahdic)
(2515,"conf-now-muted")
(2516,idx)
(2517,confno)
(2518,if (conf->users == 1)
(2519,user_no)
(2520,!menu_active)
(2521,minutes = 0)
(2522,(char *)
(2523,conf->users != lastusers)
(2524,chan)
(2525,&dahdic)
(2526,timelimit)
(2527,goto outrun;)
(2528,conf)
(2529,user->adminflags)
(2530,name)
(2531,ast_channel_language(chan)
(2532,namerecloc)
(2533,recordthreadlock)
(2534,now)
(2535,CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER)
(2536,bi.rxbufpolicy = DAHDI_POLICY_IMMEDIATE)
(2537,)
(2538,lastmarked = currentmarked)
(2539,!conf->users)
(2540,dahdic.confmode)
(2541,endalert)
(2542,ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(2543,chan)
(2544,conf->gmuted = 1)
(2545,)
(2546,time(NULL)
(2547,time_left_ms)
(2548,adminflags)
(2549,confflags)
(2550,chan)
(2551,ret)
(2552,ast_channel_language(chan)
(2553,)
(2554,res / 2)
(2555,conf->endtime)
(2556,user)
(2557,ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(2558,end_sound)
(2559,dahdic.confmode = 0)
(2560,item)
(2561,conf)
(2562,!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(2563,ast_tvadd(nexteventts, ast_samp2tv(user->warning_freq, 1000)
(2564,"%Y-%m-%d %H:%M:%S")
(2565,dahdic)
(2566,currentmarked)
(2567,fd)
(2568,confflags)
(2569,x)
(2570,)
(2571,if (!(item = ao2_alloc(sizeof(*item)
(2572,AST_DIGIT_ANY)
(2573,ast_moh_stop(chan)
(2574,if (!ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan)
(2575,"conf-placeintoconf")
(2576,chan)
(2577,)
(2578,var->name)
(2579,ast_mutex_unlock(&conf->listenlock)
(2580,conf->playlock)
(2581,conf->lchan)
(2582,opt_waitmarked_timeout > 0)
(2583,conf->users)
(2584,1)
(2585,conf)
(2586,confflags)
(2587,)
(2588,!ast_strlen_zero(optargs[OPT_ARG_EXITKEYS])
(2589,user->namerecloc)
(2590,&endtime_tm)
(2591,x)
(2592,if (ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
(2593,ast_streamfile(chan, "conf-muted", ast_channel_language(chan)
(2594,warning_freq)
(2595,conf->announcelist)
(2596,user_iter = ao2_iterator_init(conf->usercontainer, 0)
(2597,user)
(2598,"DAHDI")
(2599,usr->namerecloc)
(2600,ast_frfree(f)
(2601,integer)
(2602,chan)
(2603,user->timelimit - ast_tvdiff_ms(now, user->start_time)
(2604,&usr->userflags)
(2605,user)
(2606,)
(2607,keepplaying)
(2608,1)
(2609,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(2610,optargs)
(2611,fr)
(2612,conf->markedusers)
(2613,user)
(2614,c = ast_waitfor_nandfds(&chan, 1, &fd, nfds, NULL, &outfd, &ms)
(2615,confflags)
(2616,!f)
(2617,confflags)
(2618,lastmarked)
(2619,chan)
(2620,conf->playlock)
(2621,conf->recordingfilename)
(2622,cap_slin)
(2623,ao2_ref(item, +1)
(2624,cur = AST_LIST_NEXT(cur, frame_list)
(2625,1)
(2626,CONFFLAG_RECORDCONF)
(2627,adminflags)
(2628,origframe)
(2629,ioctl(fd, DAHDI_SET_BUFINFO, &bi)
(2630,ret = pbx_exec(chan, agi_app, agifile)
(2631,&conf->announcethread)
(2632,ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(2633,ast_streamfile(chan, "conf-locked", ast_channel_language(chan)
(2634,if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan)
(2635,case \'1\':)
(2636,ADMINFLAG_MUTED)
(2637,ast_frfree(f)
(2638,while((usr = ao2_iterator_next(&user_iter)
(2639,ast_test_flag64(confflags, CONFFLAG_STARMENU)
(2640,*warning_sound = NULL)
(2641,chan)
(2642,conf)
(2643,using_pseudo)
(2644,optargs)
(2645,members)
(2646,ast_channel_connected(user->chan)
(2647,"Error setting conference\\n")
(2648,)
(2649,src)
(2650,)
(2651,3)
(2652,AST_DIGIT_ANY)
(2653,EVENT_FLAG_CALL)
(2654,if (ioctl(ast_channel_fd(conf->lchan, 0)
(2655,rt_schedule && conf->maxusers)
(2656,"DAHDI")
(2657,CONFFLAG_MONITOR)
(2658,talk)
(2659,integer)
(2660,0)
(2661,chan)
(2662,1)
(2663,!retrydahdi)
(2664,)
(2665,0)
(2666,!conf->recordingfilename)
(2667,agi_app)
(2668,CONFFLAG_NO_AUDIO_UNTIL_UP)
(2669,)
(2670,"You must specify a mailbox in the v()
(2671,conf->transframe)
(2672,data)
(2673,&fr)
(2674,item)
(2675,if (ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER)
(2676,-1)
(2677,ast_test_flag64(confflags, CONFFLAG_QUIET)
(2678,ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",\n\\n\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: on\\r\\n",\n\\n\\t\\t\\t\\t\\tast_channel_name(chan)
(2679,chan)
(2680,case \'6\':)
(2681,1)
(2682,user)
(2683,res)
(2684,0)
(2685,ast_channel_language(chan)
(2686,LOG_WARNING)
(2687,ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE)
(2688,idx)
(2689,item)
(2690,if (conf->transframe[idx])
(2691,)
(2692,chan)
(2693,)
(2694,namerecloc)
(2695,ast_test_suite_event_notify("NOEXIT", "Message: CONFFLAG_MARKEDEXIT\\r\\nLastUsers: %d\\r\\nUsers: %d", lastusers, conf->users)
(2696,conf)
(2697,confflags)
(2698,confflags)
(2699,OPT_ARG_MOH_CLASS)
(2700,user->warning_freq)
(2701,!timelimit)
(2702,DAHDI_SETCONF)
(2703,user_set_unmuted_cb)
(2704,dahdic)
(2705,chan)
(2706,)
(2707,dtmfstr)
(2708,ast_format_to_old_bitfield(ast_channel_rawwriteformat(chan)
(2709,mailbox)
(2710,conf->users)
(2711,CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(2712,0)
(2713,optargs)
(2714,user->adminflags)
(2715,)
(2716,__buf + AST_FRIENDLY_OFFSET)
(2717,user)
(2718,)
(2719,conf)
(2720,chan)
(2721,fd < 0)
(2722,announcelistlock)
(2723,&fr.subclass.format)
(2724,f->subclass)
(2725,item->language)
(2726,name)
(2727,var)
(2728,ast_debug(2, "- play_warning  = %ld\\n", play_warning)
(2729,CONFFLAG_WAITMARKED)
(2730,user)
(2731,user)
(2732,if (using_pseudo)
(2733,"")
(2734,)
(2735,-1)
(2736,strsep(&parse, ":")
(2737,fr)
(2738,vmrec)
(2739,0)
(2740,time_left_ms)
(2741,ast_channel_uniqueid(chan)
(2742,ADMINFLAG_MUTED)
(2743,!ast_dsp_silence(dsp, &fr, &confsilence)
(2744,&fr)
(2745,lastmarked = 0)
(2746,fd)
(2747,conf->confno)
(2748,dtmf)
(2749,users)
(2750,fr.datalen = res)
(2751,bi.bufsize = CONF_SIZE / 2)
(2752,)
(2753,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(2754,ast_tvnow()
(2755,)
(2756,ast_tvdiff_ms(nexteventts, now)
(2757,"conf-lockednow")
(2758,conf->lchan)
(2759,optargs[OPT_ARG_MOH_CLASS])
(2760,user)
(2761,case \'8\':)
(2762,&x)
(2763,conf)
(2764,conf)
(2765,adminflags)
(2766,conf)
(2767,totalsilence)
(2768,-1)
(2769,menu8_active)
(2770,VOL_DOWN)
(2771,chan)
(2772,chan)
(2773,ast_test_flag64(confflags, CONFFLAG_MOH)
(2774,conf)
(2775,)
(2776,user->talk.desired)
(2777,!end_sound && timelimit)
(2778,warning_sound)
(2779,CONFFLAG_QUIET)
(2780,-1)
(2781,confmode)
(2782,confno)
(2783,AST_FRAME_DTMF)
(2784,user)
(2785,bi.txbufpolicy)
(2786,)
(2787,user->warning_freq)
(2788,minutes)
(2789,2)
(2790,seconds = remain % 60)
(2791,f->subclass)
(2792,ast_channel_caller(user->chan)
(2793,&fr)
(2794,conf)
(2795,if (minutes)
(2796,ast_channel_fd(c, 0)
(2797,dtmfstr)
(2798,confno)
(2799,conf)
(2800,)
(2801,optargs[OPT_ARG_INTROMSG])
(2802,user->dahdichannel = !retrydahdi)
(2803,dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER)
(2804,confflags)
(2805,ast_log(LOG_WARNING, "Unable to write frame to channel %s\\n", ast_channel_name(chan)
(2806,confflags)
(2807,kicktime)
(2808,ast_channel_language(chan)
(2809,user->adminflags)
(2810,DAHDI_CONF_CONF | DAHDI_CONF_TALKER)
(2811,ret = -1)
(2812,0)
(2813,user->adminflags & ADMINFLAG_T_REQUEST)
(2814,CONFFLAG_WAITMARKED)
(2815,DAHDI_POLICY_IMMEDIATE)
(2816,(f->frametype == AST_FRAME_VOICE)
(2817,confflags)
(2818,sizeof(dahdic)
(2819,firstpass)
(2820,user)
(2821,user->start_time)
(2822,pbx_builtin_getvar_helper(chan, "MEETME_AGI_BACKGROUND")
(2823,user)
(2824,chan)
(2825,"MEETME_RECORDINGFILE")
(2826,&context)
(2827,ret = 0)
(2828,0)
(2829,keepplaying)
(2830,end_sound)
(2831,confflags)
(2832,NULL)
(2833,f->frametype)
(2834,dahdic_empty)
(2835,meetmesecs)
(2836,res)
(2837,conf->listenlock)
(2838,chan)
(2839,ast_waitstream(chan, "")
(2840,ast_tvnow()
(2841,confflags)
(2842,parse)
(2843,ptr)
(2844,chan)
(2845,ast_devstate_changed(AST_DEVICE_INUSE, "meetme:%s", conf->confno)
(2846,bi)
(2847,confno)
(2848,sizeof(char)
(2849,)
(2850,optargs[OPT_ARG_MOH_CLASS])
(2851,chan)
(2852,conf)
(2853,conf->locked)
(2854,f)
(2855,ast_channel_connected(user->chan)
(2856,LOG_WARNING)
(2857,fd)
(2858,number)
(2859,mohtempstopped)
(2860,AST_FRAME_DTMF)
(2861,chan)
(2862,idx)
(2863,ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT)
(2864,)
(2865,CONF_SIZE)
(2866,recording)
(2867,-1)
(2868,conf->announcethreadlock)
(2869,context = "default")
(2870,user->chan)
(2871,)
(2872,user->warning_sound)
(2873,strcasecmp(ast_channel_tech(chan)
(2874,chan)
(2875,*agifiledefault = "conf-background.agi")
(2876,parse)
(2877,conf)
(2878,chan)
(2879,chan)
(2880,conf->endtime)
(2881,timeout)
(2882,ast_debug(2, "- end_sound     = %s\\n", end_sound ? end_sound : "UNDEF")
(2883,adminflags)
(2884,user->chan)
(2885,!announcement_played)
(2886,chan)
(2887,pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
(2888,1)
(2889,ast_set_read_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
(2890,&dahdic)
(2891,if (ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(2892,ast_mutex_init(&conf->announcelistlock)
(2893,usr->userflags)
(2894,if (!f)
(2895,menu8_active = 0)
(2896,"sln")
(2897,"")
(2898,play_warning -= warning_freq)
(2899,!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(2900,if (conf->recording != MEETME_RECORD_ACTIVE)
(2901,var)
(2902,user->adminflags = ast_test_flag64(confflags, CONFFLAG_STARTMUTED)
(2903,"on")
(2904,currentmarked >= 1)
(2905,conf)
(2906,user->user_no)
(2907,f->data.ptr)
(2908,if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan)
(2909,agifile)
(2910,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(2911,f)
(2912,0)
(2913,id)
(2914,user->chan)
(2915,totalsilence > MEETME_DELAYDETECTENDTALK)
(2916,user->chan)
(2917,c)
(2918,dahdic.confmode ^= DAHDI_CONF_TALKER)
(2919,)
(2920,lastmarked)
(2921,char *)
(2922,conf->users)
(2923,conf->endalert)
(2924,if (user->end_sound)
(2925,ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000)
(2926,user->timelimit)
(2927,chan)
(2928,announcement_played)
(2929,1)
(2930,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(2931,chan)
(2932,&now)
(2933,60)
(2934,ast_waitstream(chan, "")
(2935,0)
(2936,ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR)
(2937,chan)
(2938,3)
(2939,!to)
(2940,user)
(2941,conf)
(2942,ast_channel_language(chan)
(2943,user)
(2944,user->end_sound)
(2945,S_COR(ast_channel_caller(user->chan)
(2946,ast_strdup("wav")
(2947,"")
(2948,adminflags)
(2949,0)
(2950,CONFFLAG_INTROUSER)
(2951,origframe)
(2952,dtmf)
(2953,)
(2954,rt_schedule && conf->endtime)
(2955,CONFFLAG_ADMIN)
(2956,"Error setting conference - Un/Mute \\n")
(2957,namerecloc)
(2958,confflags)
(2959,duration = 20)
(2960,)
(2961,)
(2962,ast_test_flag64(confflags, CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(2963,MEETME_RECORD_ACTIVE)
(2964,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(2965,adminflags)
(2966,break;)
(2967,break;)
(2968,conf)
(2969,(long)
(2970,chan)
(2971,!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan)
(2972,var)
(2973,item->vmrec = 1)
(2974,conf->recordthread)
(2975,"Failed to read frame: %s\\n")
(2976,res > 0)
(2977,optargs)
(2978,cap_slin)
(2979,\'*\')
(2980,chan)
(2981,f)
(2982,f)
(2983,!ast_dsp_silence(dsp, conf->origframe, &confsilence)
(2984,mohtempstopped)
(2985,"MEETMEBOOKID")
(2986,user_no)
(2987,user)
(2988,if (musiconhold && !menu_active)
(2989,)
(2990,conf)
(2991,res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan)
(2992,0)
(2993,char)
(2994,NULL)
(2995,NULL)
(2996,)
(2997,user->chan)
(2998,agi_app = pbx_findapp("agi")
(2999,conf->users == 1)
(3000,S_COR(ast_channel_connected(user->chan)
(3001,chan)
(3002,"DENOISE(rx)
(3003,ast_channel_monitor(c)
(3004,&dahdic)
(3005,conf->announcelistlock)
(3006,chan)
(3007,"MEETME_EXIT_CONTEXT")
(3008,res = ast_waitstream(chan, AST_DIGIT_ANY)
(3009,start_time)
(3010,ret = -1)
(3011,item->namerecloc)
(3012,f->frametype)
(3013,time_left_ms)
(3014,fr)
(3015,tmp = ast_mktime(&endtime_tm, NULL)
(3016,adminflags)
(3017,!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)
(3018,endtime)
(3019,-1)
(3020,user)
(3021,timelimit = 0)
(3022,idx++)
(3023,user)
(3024,now)
(3025,item)
(3026,ast_strlen_zero(optargs[OPT_ARG_INTROMSG])
(3027,ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc)
(3028,ast_test_flag64(confflags, CONFFLAG_QUIET)
(3029,keepplaying)
(3030,)
(3031,user->talk)
(3032,RQ_UINTEGER3)
(3033,opt_waitmarked_timeout)
(3034,ast_waitstream(chan, "")
(3035,0)
(3036,ast_verb(3, "Setting warning time to %ldms from the conference duration limit.\\n", play_warning)
(3037,)
(3038,"")
(3039,menu_active = 0)
(3040,vmrec)
(3041,goto outrun;)
(3042,user->warning_sound = warning_sound)
(3043,conf->usercontainer)
(3044,1)
(3045,tweak_listen_volume(user, VOL_DOWN)
(3046,lastusers)
(3047,)
(3048,calldurationlimit)
(3049,chan)
(3050,&duration)
(3051,1)
(3052,!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan)
(3053,now)
(3054,dahdic.confno = conf->dahdiconf)
(3055,ast_test_flag64(confflags, CONFFLAG_QUIET)
(3056,timelimit)
(3057,user)
(3058,)
(3059,mohtempstopped)
(3060,!strcmp(user->warning_sound, "timeleft")
(3061,)
(3062,chan)
(3063,announcetype)
(3064,user->adminflags ^= ADMINFLAG_SELFMUTED)
(3065,confmode)
(3066,tweak_listen_volume(user, VOL_DOWN)
(3067,!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3068,talking)
(3069,)
(3070,1)
(3071,exitkeys)
(3072,)
(3073,conf)
(3074,chan)
(3075,conf)
(3076,user)
(3077,conf->users)
(3078,calldurationlimit)
(3079,conf->announcethread)
(3080,if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(3081,chan)
(3082,confno)
(3083,goto outrun;)
(3084,recordingformat)
(3085,if (ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER)
(3086,!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3087,"")
(3088,user)
(3089,case \'5\':)
(3090,ast_samp2tv(user->timelimit, 1000)
(3091,sizeof(dahdic)
(3092,OPT_ARG_MOH_CLASS)
(3093,item->confchan)
(3094,OPT_ARG_MOH_CLASS)
(3095,ast_channel_language(chan)
(3096,conf)
(3097,fr.subclass)
(3098,CONFFLAG_MOH)
(3099,!ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(3100,playlock)
(3101,integer)
(3102,)
(3103,musiconhold = 1)
(3104,DAHDI_CONF_TALKER)
(3105,conf)
(3106,sent_event)
(3107,ret)
(3108,ADMINFLAG_KICKME)
(3109,chan)
(3110,menu8_active = 0)
(3111,chan)
(3112,tm)
(3113,ast_channel_caller(user->chan)
(3114,conf->gmuted)
(3115,)
(3116,f->frametype)
(3117,user_set_hangup_cb)
(3118,fr)
(3119,snprintf(user->namerecloc, sizeof(user->namerecloc)
(3120,AST_PTHREADT_NULL)
(3121,CONFFLAG_MARKEDUSER)
(3122,user->talking == -1)
(3123,1)
(3124,bailoutandtrynormal:)
(3125,destdir)
(3126,keepplaying)
(3127,chan)
(3128,chan)
(3129,)
(3130,conf->recordthread == AST_PTHREADT_NULL)
(3131,users)
(3132,-1)
(3133,if (conf->users == 2)
(3134,warning_sound)
(3135,subclass)
(3136,end_sound)
(3137,optargs)
(3138,ast_mutex_lock(&conf->recordthreadlock)
(3139,chan)
(3140,ast_channel_language(chan)
(3141,var)
(3142,conf->playlock)
(3143,ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)
(3144,for ( ; var; var = var->next)
(3145,conf)
(3146,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(3147,actual)
(3148,ret)
(3149,if (rt_schedule)
(3150,fr.frametype)
(3151,f->subclass.integer)
(3152,dahdic)
(3153,user)
(3154,keepplaying)
(3155,tweak_talk_volume(user, VOL_UP)
(3156,"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: off\\r\\n")
(3157,chan)
(3158,recordthread)
(3159,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(3160,now.tv_sec)
(3161,ast_dsp_silence(dsp, &fr, &confsilence)
(3162,number)
(3163,"MeetmeMute")
(3164,1)
(3165,)
(3166,0)
(3167,conf)
(3168,conf)
(3169,now.tv_sec)
(3170,nexteventts)
(3171,localendtime = 0)
(3172,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3173,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(3174,user->end_sound = end_sound)
(3175,name)
(3176,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(3177,musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH)
(3178,conf)
(3179,item)
(3180,ret = -2)
(3181,time(&user->jointime)
(3182,recordingfilename)
(3183,user_no)
(3184,ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
(3185,time_left_ms = user->timelimit - ast_tvdiff_ms(now, user->start_time)
(3186,user->timelimit)
(3187,var = ast_strdupa(var)
(3188,CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(3189,0)
(3190,gmuted)
(3191,0)
(3192,ast_log(LOG_WARNING,"You must specify a mailbox in the v()
(3193,"")
(3194,menu_active)
(3195,conf)
(3196,AST_DIGIT_ANY)
(3197,item->confusers)
(3198,"")
(3199,if (!conf->recordingformat)
(3200,confflags)
(3201,0)
(3202,res = ast_waitstream(chan, "")
(3203,user)
(3204,musiconhold = 0)
(3205,confflags)
(3206,)
(3207,conf->users > 1)
(3208,ast_channel_language(chan)
(3209,to)
(3210,0)
(3211,ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan)
(3212,"conf-errormenu")
(3213,1)
(3214,user->warning_sound && user->play_warning)
(3215,mohtempstopped)
(3216,conf->confno)
(3217,currentmarked)
(3218,subclass)
(3219,ADMINFLAG_SELFMUTED)
(3220,dahdichannel)
(3221,confflags)
(3222,1)
(3223,CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON)
(3224,ast_waitstream(chan, "")
(3225,dahdic)
(3226,if (warnfreq_str)
(3227,f->frametype == AST_FRAME_DTMF)
(3228,dtmf)
(3229,user->kicktime)
(3230,members)
(3231,conf->users)
(3232,confflags)
(3233,f)
(3234,conf)
(3235,0)
(3236,ast_channel_connected(user->chan)
(3237,conf)
(3238,ao2_ref(usr, -1)
(3239,read(outfd, buf, CONF_SIZE)
(3240,checked = 0)
(3241,NULL)
(3242,&x)
(3243,chan)
(3244,usr)
(3245,keepplaying)
(3246,"Starting recording of MeetMe Conference %s into file %s.%s.\\n")
(3247,user->adminflags & ADMINFLAG_HANGUP)
(3248,conf->recordingfilename)
(3249,"")
(3250,if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan)
(3251,ADMINFLAG_MUTED)
(3252,ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan)
(3253,ast_channel_tech(chan)
(3254,locked)
(3255,conf->recordthread)
(3256,1)
(3257,outfd > -1)
(3258,if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan)
(3259,)
(3260,(time_left_ms + 500)
(3261,DAHDI_CONF_CONF)
(3262,if (warning_freq)
(3263,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(3264,currentmarked)
(3265,ao2_iterator_destroy(&user_iter)
(3266,user)
(3267,dahdic)
(3268,chan)
(3269,entry)
(3270,0)
(3271,"meetme")
(3272,)
(3273,conf->gmuted)
(3274,user->namerecloc)
(3275,user)
(3276,&dahdic)
(3277,conf->users == 2)
(3278,!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan)
(3279,recordingformat)
(3280,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(3281,for (cur = conf->transframe[idx]; cur; cur = AST_LIST_NEXT(cur, frame_list)
(3282,if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3283,ast_channel_name(chan)
(3284,AST_DIGIT_ANY)
(3285,)
(3286,res == -1)
(3287,CONFFLAG_WAITMARKED)
(3288,warning_sound)
(3289,)
(3290,f)
(3291,chan)
(3292,)
(3293,users)
(3294,opt_waitmarked_timeout)
(3295,VOL_DOWN)
(3296,DAHDI_CONF_TALKER)
(3297,subclass)
(3298,0)
(3299,ast_channel_language(chan)
(3300,f->frametype == AST_FRAME_VOICE)
(3301,chan)
(3302,chan)
(3303,var)
(3304,user)
(3305,)
(3306,recordthread)
(3307,ast_channel_setoption(chan, AST_OPTION_TONE_VERIFY, &x, sizeof(char)
(3308,)
(3309,confflags)
(3310,AST_FORMAT_SLINEAR)
(3311,conf->users)
(3312,if (conf->endtime && (now.tv_sec >= conf->endtime)
(3313,chan)
(3314,now)
(3315,0)
(3316,0)
(3317,"Channel: %s\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t"CallerIDnum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDname: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n")
(3318,confflags)
(3319,pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
(3320,user->chan)
(3321,"Error setting conference\\n")
(3322,start_time)
(3323,play_warning)
(3324,AST_FRAME_NULL)
(3325,ast_strdup(var)
(3326,CONFFLAG_MARKEDUSER)
(3327,endtime)
(3328,(f->frametype == AST_FRAME_DTMF)
(3329,RQ_UINTEGER4)
(3330,CONFFLAG_INTROUSERNOREVIEW)
(3331,firstpass)
(3332,CONFFLAG_KEYEXIT)
(3333,&fr)
(3334,recordingformat)
(3335,res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan)
(3336,user)
(3337,confflags)
(3338,conf->playlock)
(3339,conf)
(3340,user)
(3341,user->namerecloc)
(3342,recordingfilename)
(3343,conf)
(3344,0)
(3345,-1)
(3346,res)
(3347,ret = -1)
(3348,chan)
(3349,res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan)
(3350,)
(3351,play_warning > timelimit)
(3352,CONFFLAG_WAITMARKED)
(3353,)
(3354,if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT)
(3355,(f->frametype == AST_FRAME_DTMF)
(3356,duration)
(3357,chan)
(3358,if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)
(3359,chan)
(3360,conf)
(3361,strlen(conf->confno)
(3362,)
(3363,confno)
(3364,user->jointime)
(3365,ADMINFLAG_SELFMUTED)
(3366,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(3367,0)
(3368,!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan)
(3369,warning_freq)
(3370,conf->usercontainer)
(3371,confno)
(3372,ast_moh_stop(chan)
(3373,dahdic)
(3374,x = 1)
(3375,if (!checked)
(3376,ast_verb(3, "Setting call duration limit to %d seconds.\\n", calldurationlimit)
(3377,dtmf)
(3378,confmode)
(3379,menu_active)
(3380,if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(3381,conf->users)
(3382,NULL)
(3383,user_no)
(3384,ast_channel_lock(chan)
(3385,ast_channel_name(chan)
(3386,RQ_UINTEGER1)
(3387,time_left_ms)
(3388,*user)
(3389,&dahdic)
(3390,)
(3391,ast_log(LOG_WARNING, "Unable to set buffering information: %s\\n", strerror(errno)
(3392,warning_sound ? warning_sound : "UNDEF")
(3393,confsilence = 0)
(3394,NULL)
(3395,conf)
(3396,confflags)
(3397,ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeMute",\n\\n\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: off\\r\\n",\n\\n\\t\\t\\t\\t\\tast_channel_name(chan)
(3398,if (ast_test_flag64(confflags, CONFFLAG_DURATION_STOP)
(3399,ast_channel_language(chan)
(3400,set_talk_volume(user, 0)
(3401,chan)
(3402,totalsilence = 0)
(3403,ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan)
(3404,chan)
(3405,to)
(3406,menu_active = 0)
(3407,ast_channel_language(chan)
(3408,CONFFLAG_INTROUSER | CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(3409,!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)
(3410,agifiledefault)
(3411,chan)
(3412,1)
(3413,)
(3414,)
(3415,recordingfilename)
(3416,nexteventts)
(3417,menu_active = 0)
(3418,warning_freq = 0)
(3419,conf)
(3420,ret = -1)
(3421,rt_log_members)
(3422,ret = -1)
(3423,chan)
(3424,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(3425,"")
(3426,mod_speex)
(3427,chan)
(3428,user->adminflags)
(3429,lastmarked)
(3430,calldurationlimit)
(3431,!ast_streamfile(chan, "minutes", ast_channel_language(chan)
(3432,1)
(3433,ast_frfree(f)
(3434,CONFFLAG_INTROUSER_VMREC)
(3435,remain)
(3436,announcement_played)
(3437,chan)
(3438,ast_waitstream(chan, "")
(3439,ast_streamfile(chan, "minutes", ast_channel_language(chan)
(3440,timeout = 0)
(3441,ast_test_flag64(confflags, CONFFLAG_SLA_STATION)
(3442,now.tv_sec % 60 == 0)
(3443,recordingfilename)
(3444,chan)
(3445,conf)
(3446,recordingfilename)
(3447,)
(3448,ast_channel_language(chan)
(3449,res)
(3450,ast_channel_name(usr->chan)
(3451,ast_mutex_lock(&conf->listenlock)
(3452,S_COR(ast_channel_connected(user->chan)
(3453,1)
(3454,dahdichannel)
(3455,chan)
(3456,usercontainer)
(3457,recordingformat)
(3458,var)
(3459,ast_channel_tech(c)
(3460,fd)
(3461,namerecloc)
(3462,0)
(3463,f)
(3464,item->namerecloc)
(3465,var)
(3466,ast_channel_language(chan)
(3467,ao2_iterator_next(&user_iter)
(3468,ast_channel_connected(user->chan)
(3469,*item)
(3470,0)
(3471,chan)
(3472,fd)
(3473,to = ast_tvdiff_ms(nexteventts, now)
(3474,f->subclass.integer)
(3475,time_left_ms = 0)
(3476,0)
(3477,ADMINFLAG_SELFMUTED)
(3478,conf->endtime)
(3479,)
(3480,NULL)
(3481,CONFFLAG_OPTIMIZETALKER)
(3482,conf)
(3483,ast_strdup(var)
(3484,conf->users)
(3485,chan)
(3486,conf->announcelistlock)
(3487,)
(3488,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3489,idx)
(3490,actual)
(3491,CONFFLAG_PASS_DTMF)
(3492,)
(3493,f->subclass.integer)
(3494,)
(3495,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3496,chan)
(3497,f->subclass.integer == \'*\')
(3498,transframe)
(3499,"")
(3500,ast_test_flag64(confflags, CONFFLAG_ADMIN)
(3501,break;)
(3502,item->namerecloc)
(3503,)
(3504,if (remain / 60 >= 1)
(3505,confflags)
(3506,!ast_dsp_silence(dsp, conf->origframe, &confsilence)
(3507,!ast_test_flag64(confflags, CONFFLAG_MONITOR)
(3508,conf->usercontainer)
(3509,chan)
(3510,play_warning = 0)
(3511,ast_test_flag64(confflags, CONFFLAG_DURATION_STOP)
(3512,ADMINFLAG_SELFMUTED)
(3513,c)
(3514,keepplaying = 0)
(3515,)
(3516,if (!menu_active && menu_was_active && user->listen.desired && !user->listen.actual)
(3517,VOL_DOWN)
(3518,ast_channel_connected(user->chan)
(3519,integer)
(3520,mailbox)
(3521,ast_channel_language(chan)
(3522,"")
(3523,AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry)
(3524,DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER)
(3525,c)
(3526,user->dahdichannel)
(3527,1)
(3528,if (user->warning_sound && user->play_warning)
(3529,keepplaying)
(3530,"Error getting conference\\n")
(3531,endtime)
(3532,chan)
(3533,close(fd)
(3534,user->jointime)
(3535,user)
(3536,conf->announcelist)
(3537,if (now.tv_sec % 60 == 0)
(3538,\'\\0\')
(3539,ast_channel_audiohooks(c)
(3540,ast_channel_connected(user->chan)
(3541,CONFFLAG_OPTIMIZETALKER)
(3542,chan)
(3543,subclass)
(3544,goto outrun;)
(3545,res)
(3546,res)
(3547,)
(3548,)
(3549,res)
(3550,"starttime <=")
(3551,ast_func_write(chan, "DENOISE(rx)
(3552,strlen(conf->confno)
(3553,chan)
(3554,AST_FRAME_VOICE)
(3555,0)
(3556,0)
(3557,bi)
(3558,optargs)
(3559,)
(3560,opt_waitmarked_timeout)
(3561,chan)
(3562,user)
(3563,user->adminflags)
(3564,1)
(3565,conf)
(3566,keepplaying)
(3567,&conf->announcelistlock)
(3568,conf)
(3569,optargs[OPT_ARG_WAITMARKED])
(3570,)
(3571,user->chan)
(3572,id)
(3573,ast_channel_language(chan)
(3574,CONFFLAG_MARKEDUSER)
(3575,0)
(3576,break;)
(3577,CONFFLAG_INTROUSER_VMREC)
(3578,strlen(conf->confno)
(3579,dtmf)
(3580,number)
(3581,ao2_alloc(sizeof(*user)
(3582,f = ast_read(c)
(3583,confmode)
(3584,var)
(3585,"conf-nonextended")
(3586,!ast_streamfile(chan, "beep", ast_channel_language(chan)
(3587,)
(3588,-1)
(3589,start_time)
(3590,0)
(3591,"conf-will-end-in")
(3592,user->talk.actual)
(3593,CONFFLAG_AGI)
(3594,calldurationlimit)
(3595,chan)
(3596,integer)
(3597,ret)
(3598,play_warning)
(3599,conf)
(3600,*exitkeys = NULL)
(3601,)
(3602,CONFFLAG_QUIET)
(3603,mohtempstopped = 1)
(3604,conf)
(3605,dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER)
(3606,f)
(3607,ast_test_flag64(confflags, CONFFLAG_ADMIN)
(3608,)
(3609,confflags)
(3610,calldurationlimit = timelimit / 1000)
(3611,)
(3612,ast_channel_language(chan)
(3613,to)
(3614,user->talk.desired && !user->talk.actual)
(3615,conf->users--)
(3616,conf)
(3617,play_warning)
(3618,!ast_dsp_silence(dsp, &fr, &confsilence)
(3619,confno)
(3620,"")
(3621,chan)
(3622,chan)
(3623,AST_FORMAT_SLINEAR)
(3624,)
(3625,dsp = ast_dsp_new()
(3626,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(3627,-1)
(3628,ast_waitstream(chan, "")
(3629,"conf-errormenu")
(3630,ast_channel_connected(user->chan)
(3631,!(dsp = ast_dsp_new()
(3632,ioctl(fd, DAHDI_SETCONF, &dahdic)
(3633,dtmf)
(3634,CONFFLAG_STARMENU)
(3635,fd = open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK)
(3636,outfd = -1)
(3637,!strcasecmp(var->name, "endtime")
(3638,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(3639,confflags)
(3640,res > 0)
(3641,conf->origframe)
(3642,DAHDI_CONF_CONF)
(3643,OPT_ARG_DURATION_LIMIT)
(3644,keepplaying = 0)
(3645,LOG_WARNING)
(3646,conf->recordingformat)
(3647,firstpass = 1)
(3648,warning_freq)
(3649,)
(3650,ast_waitstream(chan, "")
(3651,announcethreadlock)
(3652,musiconhold)
(3653,if (res > 0)
(3654,announcelistlock)
(3655,x = 1)
(3656,ast_channel_language(chan)
(3657,ast_channel_language(chan)
(3658,ast_copy_string(exitcontext, tmpvar, sizeof(exitcontext)
(3659,conf)
(3660,adminflags)
(3661,user)
(3662,musiconhold && !menu_active)
(3663,user)
(3664,conf->users)
(3665,if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(3666,warning_freq)
(3667,user)
(3668,dahdic.confmode)
(3669,conf->transframe[idx])
(3670,play_warning)
(3671,ast_verb(3, "Setting conference duration limit to: %ldms.\\n", timelimit)
(3672,confmode)
(3673,musiconhold)
(3674,confflags)
(3675,"MeetmeLeave")
(3676,conf->locked)
(3677,conf)
(3678,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3679,optargs[OPT_ARG_MOH_CLASS])
(3680,)
(3681,usr = ao2_find(conf->usercontainer, &max_no, 0)
(3682,user->namerecloc)
(3683,keepplaying)
(3684,chan)
(3685,user->talking = 0)
(3686,if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
(3687,listenlock)
(3688,talking)
(3689,outfd)
(3690,ast_read_noaudio(c)
(3691,nfds = 1)
(3692,conf->confno)
(3693,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3694,using_pseudo)
(3695,ast_log(LOG_WARNING, "Unable to set linear mode: %s\\n", strerror(errno)
(3696,1)
(3697,warning_freq)
(3698,0)
(3699,0)
(3700,talk)
(3701,&bi)
(3702,tv_sec)
(3703,ret = -1)
(3704,CONFFLAG_EXIT_CONTEXT)
(3705,NULL)
(3706,ast_streamfile(chan, "conf-kicked", ast_channel_language(chan)
(3707,nexteventts = ast_tvadd(user->start_time, ast_samp2tv(user->timelimit, 1000)
(3708,0)
(3709,memset(&dahdic, 0, sizeof(dahdic)
(3710,"Error setting conference\\n")
(3711,confflags)
(3712,if (currentmarked == 0 && lastmarked != 0 && ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
(3713,)
(3714,user)
(3715,item)
(3716,conf)
(3717,conf)
(3718,users)
(3719,timelimit)
(3720,conf->confno)
(3721,1)
(3722,break;)
(3723,)
(3724,)
(3725,musiconhold)
(3726,musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence)
(3727,)
(3728,tm)
(3729,conf)
(3730,mohtempstopped = 1)
(3731,chan)
(3732,user)
(3733,"conf-full")
(3734,conf->lchan)
(3735,MEETME_DELAYDETECTTALK)
(3736,if (conf->users != lastusers)
(3737,conf)
(3738,switch (f->subclass.integer)
(3739,play_warning = atol(warning_str)
(3740,0)
(3741,strcasecmp(ast_channel_tech(c)
(3742,)
(3743,fr.offset = AST_FRIENDLY_OFFSET)
(3744,)
(3745,&conf->announcethreadlock)
(3746,ret)
(3747,tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT")
(3748,ast_strftime(currenttime, sizeof(currenttime)
(3749,if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(3750,dahdic)
(3751,keepplaying)
(3752,fr)
(3753,res = ast_waitstream(chan, AST_DIGIT_ANY)
(3754,bi)
(3755,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3756,)
(3757,ast_channel_caller(user->chan)
(3758,lchan)
(3759,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3760,conf->recordingformat)
(3761,ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
(3762,minutes = remain / 60)
(3763,item->language)
(3764,ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
(3765,strcasecmp(ast_channel_tech(c)
(3766,confmode)
(3767,if (can_write(chan, confflags)
(3768,if (rt_schedule && conf->endtime)
(3769,if (extended)
(3770,type)
(3771,break;)
(3772,strerror(errno)
(3773,chan)
(3774,chan)
(3775,conf)
(3776,warning_str)
(3777,ao2_unlock(conf->usercontainer)
(3778,user->user_no)
(3779,talkreq_manager)
(3780,chan)
(3781,"%s/meetme-username-%s-%d")
(3782,item)
(3783,)
(3784,1)
(3785,retrydahdi)
(3786,frametype)
(3787,item->namerecloc)
(3788,recordingtmp)
(3789,)
(3790,ioctl(fd, DAHDI_SETCONF, &dahdic)
(3791,ao2_callback(conf->usercontainer, 0, user_set_hangup_cb, NULL)
(3792,chan)
(3793,CONFFLAG_KEYEXIT)
(3794,conf)
(3795,ast_waitstream(chan, "")
(3796,if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan)
(3797,conf->confno)
(3798,confflags)
(3799,origvar = ast_load_realtime("meetme", "confno",\n\\n\\t\\t\\t\\t\\t\\t\\tconf->confno, "starttime <=", currenttime,\n\\n\\t\\t\\t\\t\\t\\t\\t "endtime >=", currenttime, NULL)
(3800,dsp)
(3801,if (seconds)
(3802,ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan)
(3803,frametype)
(3804,menu_active)
(3805,ast_channel_name(chan)
(3806,nfds)
(3807,users)
(3808,confflags)
(3809,exitcontext)
(3810,"Placed channel %s in DAHDI conf %d\\n")
(3811,transframe)
(3812,ast_waitstream(chan, AST_DIGIT_ANY)
(3813,goto bailoutandtrynormal;)
(3814,tm)
(3815,1)
(3816,conf->recordingfilename = ast_strdup(var)
(3817,0)
(3818,0)
(3819,"sln")
(3820,chan)
(3821,user->warning_sound)
(3822,item->language)
(3823,60)
(3824,atoi(optargs[OPT_ARG_DURATION_STOP])
(3825,)
(3826,!musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH)
(3827,1000)
(3828,if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(3829,to)
(3830,DAHDI_CONF_CONFANN)
(3831,f)
(3832,user->chan)
(3833,case \'3\':)
(3834,)
(3835,AST_FRAME_DTMF)
(3836,user)
(3837,user->talking || !ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
(3838,dtmf = f->subclass.integer)
(3839,DAHDI_CONF_TALKER)
(3840,conf->confno)
(3841,user)
(3842,ret)
(3843,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(3844,conf->users)
(3845,dtmf = f->subclass.integer)
(3846,ast_waitstream(chan, AST_DIGIT_ANY)
(3847,ao2_ref(item, 0)
(3848,conf_queue_dtmf(conf, user, f)
(3849,if (currentmarked == 0)
(3850,users)
(3851,agifile)
(3852,chan)
(3853,)
(3854,chan)
(3855,timelimit)
(3856,namerecloc)
(3857,ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan)
(3858,if (warning_str)
(3859,CONFFLAG_OPTIMIZETALKER)
(3860,confflags)
(3861,0)
(3862,AST_DIGIT_ANY)
(3863,!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan)
(3864,f)
(3865,OBJ_NODATA)
(3866,res)
(3867,"Got DTMF %c, goto context %s\\n")
(3868,confmode)
(3869,user->adminflags & ADMINFLAG_T_REQUEST)
(3870,break;)
(3871,play_warning)
(3872,listenlock)
(3873,"<unknown>")
(3874,dst)
(3875,ret = 0)
(3876,2)
(3877,mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK)
(3878,end_sound)
(3879,res == -1)
(3880,chan)
(3881,var)
(3882,mohtempstopped)
(3883,"")
(3884,strlen(conf->confno)
(3885,usr)
(3886,f)
(3887,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(3888,mailbox = strsep(&context, "@")
(3889,play_warning)
(3890,0)
(3891,idx)
(3892,user)
(3893,ast_strdupa(var)
(3894,0)
(3895,)
(3896,if (rt_log_members)
(3897,conf->endtime)
(3898,chan)
(3899,0)
(3900,if (musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence)
(3901,2)
(3902,mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0)
(3903,x)
(3904,if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(3905,dahdic_empty)
(3906,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3907,conf->users > 1)
(3908,user->namerecloc)
(3909,keepplaying)
(3910,"conf-waitforleader")
(3911,0)
(3912,3)
(3913,optargs[OPT_ARG_EXITKEYS])
(3914,optargs)
(3915,chan)
(3916,src)
(3917,time(NULL)
(3918,f)
(3919,(conf->recordthread == AST_PTHREADT_NULL)
(3920,user)
(3921,ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT)
(3922,dahdic)
(3923,dahdic.confmode)
(3924,conf)
(3925,confsilence)
(3926,bufsize)
(3927,CONFFLAG_MONITORTALKER)
(3928,dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER)
(3929,DAHDI_SETCONF)
(3930,format)
(3931,conf)
(3932,break;)
(3933,if (f->frametype == AST_FRAME_DTMF)
(3934,locked)
(3935,CONFFLAG_KILL_LAST_MAN_STANDING)
(3936,)
(3937,item)
(3938,if ((user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(3939,currentmarked)
(3940,agi_app)
(3941,res)
(3942,!ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan)
(3943,ADMINFLAG_SELFMUTED)
(3944,conf)
(3945,"Unable to set buffering information: %s\\n")
(3946,var)
(3947,if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE")
(3948,confflags)
(3949,ast_channel_name(chan)
(3950,"MeetmeJoin")
(3951,!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(3952,to = 0)
(3953,"meetme")
(3954,recordingformat)
(3955,res)
(3956,ast_channel_language(chan)
(3957,case \'9\':)
(3958,dsp)
(3959,if (ast_strlen_zero(mailbox)
(3960,optargs[OPT_ARG_DURATION_LIMIT])
(3961,if ((conf->recordthread == AST_PTHREADT_NULL)
(3962,end_sound)
(3963,x)
(3964,0)
(3965,!musiconhold)
(3966,user)
(3967,confno)
(3968,playlock)
(3969,ast_waitstream(chan, "")
(3970,end_sound)
(3971,AST_DIGIT_ANY)
(3972,if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(3973,ast_mutex_unlock(&conf->announcelistlock)
(3974,CONFFLAG_PASS_DTMF)
(3975,chan)
(3976,confflags)
(3977,chan)
(3978,pbx_builtin_setvar_helper(chan, "MEETME_EXIT_KEY", dtmfstr)
(3979,user->adminflags |= ADMINFLAG_T_REQUEST)
(3980,meetmesecs)
(3981,"<unknown>")
(3982,ast_test_flag64(confflags, CONFFLAG_STARTMUTED)
(3983,if ((mod_speex = ast_module_helper("", "codec_speex", 0, 0, 0, 0)
(3984,mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK)
(3985,if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(3986,!conf->transframe[idx])
(3987,announcelist)
(3988,)
(3989,outrun:)
(3990,&outfd)
(3991,confflags)
(3992,ast_test_flag64(confflags, CONFFLAG_QUIET)
(3993,ast_write(chan, &fr)
(3994,0)
(3995,"confno")
(3996,&duration)
(3997,time_left_ms)
(3998,AST_FORMAT_SLINEAR)
(3999,0)
(4000,ast_test_flag64(confflags, CONFFLAG_INTROMSG)
(4001,subclass)
(4002,ast_strdup("wav")
(4003,ast_channel_uniqueid(chan)
(4004,confflags)
(4005,0)
(4006,user->talking)
(4007,ast_test_flag64(confflags, CONFFLAG_ADMIN)
(4008,optargs)
(4009,user)
(4010,if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK)
(4011,if (dtmf > 0)
(4012,if (using_pseudo)
(4013,rt_extend_conf(conf->confno)
(4014,conf)
(4015,idx)
(4016,!ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(4017,ADMINFLAG_MUTED)
(4018,f->subclass)
(4019,conf->usercontainer)
(4020,if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(4021,musiconhold)
(4022,f->frametype)
(4023,confflags)
(4024,extended)
(4025,dtmf)
(4026,if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(4027,conf->announcelistlock)
(4028,user)
(4029,0)
(4030,ast_strdupa(agifiledefault)
(4031,warnfreq_str)
(4032,f->subclass)
(4033,!musiconhold)
(4034,user)
(4035,confflags)
(4036,0)
(4037,ast_check_hangup(conf->chan)
(4038,if (musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK)
(4039,ast_log(LOG_WARNING, "Unable to allocate DSP!\\n")
(4040,&dahdic)
(4041,bi)
(4042,!user->listen.actual)
(4043,CONFFLAG_OPTIMIZETALKER)
(4044,if (time_left_ms <= 0)
(4045,0)
(4046,dahdic)
(4047,frametype)
(4048,conf->lchan)
(4049,ast_channel_connected(user->chan)
(4050,!ast_streamfile(chan, "conf-full", ast_channel_language(chan)
(4051,ast_strptime(var->value, "%Y-%m-%d %H:%M:%S", &endtime_tm)
(4052,res = ast_play_and_record(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL, ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE)
(4053,valid)
(4054,!ast_fileexists(user->namerecloc, NULL, NULL)
(4055,f->frametype == AST_FRAME_CONTROL)
(4056,user->chan)
(4057,NULL)
(4058,!play_warning && !end_sound && timelimit)
(4059,atol(warning_str)
(4060,confflags)
(4061,chan)
(4062,1)
(4063,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4064,"meetme")
(4065,)
(4066,item->language)
(4067,conf->confno)
(4068,user->adminflags |= (conf->gmuted)
(4069,optargs)
(4070,conf->recordingformat = ast_strdup(var)
(4071,ast_strlen_zero(ast_channel_macrocontext(chan)
(4072,lchan)
(4073,conf->locked = 0)
(4074,"CONF_LIMIT_TIMEOUT_FILE")
(4075,if (musiconhold && !ast_dsp_silence(dsp, &fr, &confsilence)
(4076,chan)
(4077,res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)
(4078,ast_channel_unlock(chan)
(4079,":")
(4080,ast_mutex_lock(&conf->announcelistlock)
(4081,)
(4082,if ((f->frametype == AST_FRAME_VOICE)
(4083,warning_freq)
(4084,user->dahdichannel)
(4085,user)
(4086,chan)
(4087,user->adminflags & ADMINFLAG_T_REQUEST)
(4088,adminflags)
(4089,format)
(4090,integer)
(4091,1)
(4092,conf->users == 1)
(4093,chan)
(4094,warning_freq)
(4095,sizeof(exitcontext)
(4096,if (!warning_freq)
(4097,currentmarked >= 1 && lastmarked == 0)
(4098,res > 0)
(4099,if (!menu_active)
(4100,)
(4101,now)
(4102,conf->transframe[idx])
(4103,remain)
(4104,conf->transpath)
(4105,!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(4106,user)
(4107,)
(4108,CONF_SIZE / 2)
(4109,)
(4110,ast_test_flag64(confflags,  (CONFFLAG_MONITORTALKER | CONFFLAG_OPTIMIZETALKER)
(4111,if ((conf->announcethread == AST_PTHREADT_NULL)
(4112,ast_channel_caller(user->chan)
(4113,musiconhold)
(4114,ast_mutex_unlock(&conf->playlock)
(4115,users)
(4116,if (musiconhold && (ast_test_flag64(confflags, CONFFLAG_MOH)
(4117,tmpvar)
(4118,confchan)
(4119,if (ioctl(fd, DAHDI_SETCONF, &dahdic_empty)
(4120,user->kicktime)
(4121,confchan)
(4122,ast_channel_language(chan)
(4123,)
(4124,timeout = 0)
(4125,)
(4126,user)
(4127,)
(4128,!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(4129,f->subclass)
(4130,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4131,"conf-muted")
(4132,ast_channel_language(chan)
(4133,mohtempstopped)
(4134,AST_LIST_LOCK(&confs)
(4135,retrydahdi)
(4136,goto outrun;)
(4137,ADMINFLAG_MUTED)
(4138,var ? var : "timeleft")
(4139,conf_queue_dtmf(conf, user, f)
(4140,idx)
(4141,dahdic.confmode = DAHDI_CONF_CONF)
(4142,chan)
(4143,f->frametype)
(4144,if (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4145,conf->usercontainer)
(4146,announcement_played)
(4147,chan)
(4148,bi)
(4149,ret)
(4150,AST_DIGIT_ANY)
(4151,usercontainer)
(4152,0)
(4153,default:)
(4154,now.tv_sec >= timeout)
(4155,if (!to)
(4156,chan)
(4157,&conf->recordthreadlock)
(4158,goto outrun;)
(4159,)
(4160,EVENT_FLAG_CALL)
(4161,ast_realtime_require_field("meetme",\n\\n\\t\\t\\t"confno", strlen(conf->confno)
(4162,now)
(4163,LOG_WARNING)
(4164,keepplaying)
(4165,confmode)
(4166,CONFFLAG_INTROUSER_VMREC)
(4167,keepplaying = 0)
(4168,-1)
(4169,minutes)
(4170,ast_set_flag64(confflags, CONFFLAG_RECORDCONF)
(4171,play_warning)
(4172,adminflags)
(4173,conf)
(4174,ast_waitstream(chan, "")
(4175,f)
(4176,conf->users)
(4177,chan)
(4178,endtime_tm)
(4179,)
(4180,exitkeys)
(4181,(char *)
(4182,keepplaying)
(4183,)
(4184,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(4185,menu_active)
(4186,"")
(4187,+1)
(4188,if (user->dahdichannel)
(4189,chan)
(4190,S_COR(ast_channel_connected(user->chan)
(4191,user)
(4192,user->chan)
(4193,confflags)
(4194,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(4195,confsilence > MEETME_DELAYDETECTENDTALK)
(4196,ast_dsp_get_threshold_from_settings(THRESHOLD_SILENCE)
(4197,users)
(4198,cur)
(4199,switch (dtmf)
(4200,conf)
(4201,adminflags)
(4202,ast_free(mod_speex)
(4203,item)
(4204,AST_FORMAT_SLINEAR)
(4205,ast_format_set(&fr.subclass.format, AST_FORMAT_SLINEAR, 0)
(4206,goto outrun;)
(4207,ast_hangup(conf->lchan)
(4208,ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(4209,adminflags)
(4210,conf)
(4211,chan)
(4212,user)
(4213,conf->users)
(4214,exitkeys)
(4215,chan)
(4216,f->subclass.format)
(4217,DAHDI_SETCONF)
(4218,confflags)
(4219,var)
(4220,idx)
(4221,can_write(chan, confflags)
(4222,confsilence)
(4223,now.tv_sec - user->jointime)
(4224,f)
(4225,conf)
(4226,"CONF_LIMIT_WARNING_FILE")
(4227,OPT_ARG_INTROUSER_VMREC)
(4228,ast_log(LOG_WARNING, "Error setting conference\\n")
(4229,CONFFLAG_INTROUSER)
(4230,1)
(4231,ast_test_flag64(confflags, CONFFLAG_RECORDCONF)
(4232,1)
(4233,namerecloc)
(4234,mailbox)
(4235,user->namerecloc)
(4236,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4237,play_warning)
(4238,NULL)
(4239,sizeof(recordingtmp)
(4240,CONFFLAG_ADMIN)
(4241,bi.numbufs)
(4242,user->user_no)
(4243,parse = optargs[OPT_ARG_DURATION_LIMIT])
(4244,ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
(4245,c)
(4246,timeout)
(4247,)
(4248,remain)
(4249,conf->recordingformat)
(4250,menu_was_active)
(4251,talkreq_manager)
(4252,LOG_WARNING)
(4253,"/dev/dahdi/pseudo")
(4254,user->talk)
(4255,ast_channel_connected(user->chan)
(4256,res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan)
(4257,)
(4258,&conf)
(4259,pbx_findapp("agi")
(4260,break;)
(4261,end_sound)
(4262,1)
(4263,listen)
(4264,if (ast_channel_fd(c, 0)
(4265,if (user->talking == -1)
(4266,localendtime = tmp.tv_sec)
(4267,)
(4268,confsilence)
(4269,ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(4270,)
(4271,ast_mktime(&endtime_tm, NULL)
(4272,item)
(4273,strlen(conf->confno)
(4274,confno)
(4275,ast_channel_monitor(c)
(4276,NULL)
(4277,if ((var = pbx_builtin_getvar_helper(chan, "CONF_LIMIT_TIMEOUT_FILE")
(4278,char *)
(4279,item->vmrec)
(4280,ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)
(4281,"conf-unmuted")
(4282,CONFFLAG_RECORDCONF)
(4283,confsilence)
(4284,keepplaying)
(4285,usr)
(4286,subclass)
(4287,origframe)
(4288,item)
(4289,res = ast_waitstream(chan, "")
(4290,conf_run_cleanup:)
(4291,res > 0)
(4292,case \'2\':)
(4293,chan)
(4294,sizeof(item->namerecloc)
(4295,ioctl(fd, DAHDI_SETCONF, &dahdic)
(4296,user)
(4297,!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(4298,1)
(4299,)
(4300,conf->recordingformat)
(4301,ast_copy_string(item->language, ast_channel_language(chan)
(4302,chan)
(4303,if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(4304,confflags)
(4305,limit_str = strsep(&parse, ":")
(4306,0)
(4307,currentmarked == 0)
(4308,src)
(4309,menu8_active)
(4310,VOL_UP)
(4311,timeout)
(4312,item)
(4313,usercontainer)
(4314,confflags)
(4315,user)
(4316,language)
(4317,rt_extend_conf(conf->confno)
(4318,snprintf(recordingtmp, sizeof(recordingtmp)
(4319,musiconhold)
(4320,if (!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)
(4321,ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan)
(4322,kicktime)
(4323,destdir)
(4324,can_write(chan, confflags)
(4325,conf)
(4326,"MEETME_RECORDINGFILE")
(4327,now.tv_sec)
(4328,playednamerec = 0)
(4329,chan)
(4330,dahdichannel)
(4331,ast_channel_name(chan)
(4332,if (res > 0)
(4333,-1)
(4334,res = ast_waitstream(chan, AST_DIGIT_ANY)
(4335,chan)
(4336,f)
(4337,musiconhold)
(4338,sscanf(optargs[OPT_ARG_WAITMARKED], "%30d", &opt_waitmarked_timeout)
(4339,conf->announcelist_addition)
(4340,dtmfstr)
(4341,user->kicktime)
(4342,1)
(4343,musiconhold)
(4344,ADMINFLAG_T_REQUEST)
(4345,chan)
(4346,ast_write(chan, &fr)
(4347,"Error setting conference\\n")
(4348,users)
(4349,chan)
(4350,conf->users < lastusers)
(4351,ms)
(4352,user->namerecloc)
(4353,item)
(4354,res)
(4355,if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan)
(4356,conf)
(4357,cur = conf->transframe[idx])
(4358,"")
(4359,conf)
(4360,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4361,NULL)
(4362,confflags)
(4363,conf->confno)
(4364,0)
(4365,ast_log(LOG_WARNING, "Error setting conference\\n")
(4366,sizeof(bi)
(4367,user)
(4368,AST_DEVICE_NOT_INUSE)
(4369,ast_mutex_unlock(&conf->recordthreadlock)
(4370,"MEETME_EXIT_KEY")
(4371,)
(4372,1)
(4373,"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\\n")
(4374,ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(4375,1)
(4376,conf)
(4377,now.tv_sec + conf->endalert)
(4378,"confno")
(4379,ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan)
(4380,"")
(4381,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(4382,conf->users == 1)
(4383,user->user_no)
(4384,CONFFLAG_INTROUSERNOREVIEW)
(4385,confsilence < MEETME_DELAYDETECTTALK)
(4386,)
(4387,calldurationlimit)
(4388,chan)
(4389,conf)
(4390,ast_channel_audiohooks(c)
(4391,item = ao2_alloc(sizeof(*item)
(4392,tv_sec)
(4393,"conf-onlyperson")
(4394,ast_waitstream(chan, "")
(4395,chan)
(4396,res == -1)
(4397,id)
(4398,chan)
(4399,0)
(4400,ast_channel_connected(user->chan)
(4401,chan)
(4402,CONFFLAG_MARKEDEXIT)
(4403,confno)
(4404,conf)
(4405,DAHDI_CONF_LISTENER)
(4406,conf->users)
(4407,tweak_talk_volume(user, VOL_DOWN)
(4408,)
(4409,0777)
(4410,nfds)
(4411,timelimit / 1000)
(4412,dahdic.confmode)
(4413,if (ioctl(fd, DAHDI_SETLINEAR, &x)
(4414,user)
(4415,ast_strdupa(tmpvar)
(4416,ast_channel_uniqueid(chan)
(4417,conf)
(4418,!ast_test_flag64(confflags, CONFFLAG_ADMIN)
(4419,talkreq_manager)
(4420,datalen)
(4421,user)
(4422,fd)
(4423,user)
(4424,var)
(4425,ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
(4426,ast_waitstream(chan, "")
(4427,)
(4428,dahdic.confmode & DAHDI_CONF_TALKER)
(4429,chan)
(4430,maxusers)
(4431,language)
(4432,!conf->recordingfilename)
(4433,if (dtmf > 0)
(4434,NULL)
(4435,0)
(4436,ast_channel_rawwriteformat(chan)
(4437,NULL)
(4438,)
(4439,)
(4440,case \'4\':)
(4441,item)
(4442,ast_test_flag64(confflags, CONFFLAG_INTROUSER)
(4443,warning_sound)
(4444,ADMINFLAG_MUTED)
(4445,fd)
(4446,chan)
(4447,conf->bookid)
(4448,)
(4449,dahdic.confmode)
(4450,(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4451,DAHDI_SETCONF)
(4452,user)
(4453,1000)
(4454,txbufpolicy)
(4455,conf)
(4456,conf->listenlock)
(4457,set_user_talking(chan, conf, user, -1, ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
(4458,talk)
(4459,AST_FORMAT_SLINEAR)
(4460,ast_test_flag64(confflags, CONFFLAG_PASS_DTMF)
(4461,audio_buffers)
(4462,announcelistlock)
(4463,chan)
(4464,"<unknown>")
(4465,O_RDWR)
(4466,if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4467,subclass)
(4468,)
(4469,conf->users)
(4470,DAHDI_CONF_CONF)
(4471,ast_test_flag64(confflags, CONFFLAG_INTROUSER)
(4472,conf->endtime = localendtime)
(4473,user->namerecloc)
(4474,conf)
(4475,now)
(4476,1)
(4477,chan)
(4478,ms)
(4479,&conf->playlock)
(4480,confflags)
(4481,CONFFLAG_KICK_CONTINUE)
(4482,DAHDI_SETCONF)
(4483,"")
(4484,"")
(4485,NULL)
(4486,break;)
(4487,chan)
(4488,remain)
(4489,conf)
(4490,CONFFLAG_KICK_CONTINUE)
(4491,str)
(4492,!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4493,)
(4494,if (to < 0)
(4495,chan)
(4496,ast_set_write_format_by_id(conf->lchan, AST_FORMAT_SLINEAR)
(4497,ast_streamfile(chan, "conf-thereare", ast_channel_language(chan)
(4498,data)
(4499,ast_localtime(&now, &tm, NULL)
(4500,keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(4501,goto outrun;)
(4502,ADMINFLAG_SELFMUTED)
(4503,conf)
(4504,confno)
(4505,default:)
(4506,LOG_WARNING)
(4507,confflags)
(4508,confflags)
(4509,if (ast_test_flag64(confflags, CONFFLAG_INTROMSG)
(4510,chan)
(4511,&conf->listenlock)
(4512,&confsilence)
(4513,chan)
(4514,chan)
(4515,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(4516,strsep(&context, "@")
(4517,chan)
(4518,NULL)
(4519,ADMINFLAG_SELFMUTED)
(4520,if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(4521,conf)
(4522,f)
(4523,if (dsp)
(4524,chan)
(4525,frametype)
(4526,conf)
(4527,ast_mutex_lock(&conf->recordthreadlock)
(4528,lchan)
(4529,conf->users == 1)
(4530,ast_test_flag64(confflags, CONFFLAG_INTROUSER |CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(4531,ast_mutex_lock(&conf->announcethreadlock)
(4532,0)
(4533,AST_DIGIT_ANY)
(4534,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4535,ast_fileexists(usr->namerecloc, NULL, NULL)
(4536,conf)
(4537,OPT_ARG_INTROMSG)
(4538,DAHDI_SETCONF)
(4539,res)
(4540,confno)
(4541,name)
(4542,f->subclass.integer)
(4543,1)
(4544,!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(4545,1000)
(4546,ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(4547,chan)
(4548,retrydahdi = (strcasecmp(ast_channel_tech(c)
(4549,keepplaying = 0)
(4550,!firstpass && !ast_test_flag64(confflags, CONFFLAG_MONITOR)
(4551,!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(4552,1)
(4553,&parse)
(4554,adminflags)
(4555,conf)
(4556,namerecloc)
(4557,if (fd < 0)
(4558,to)
(4559,NULL)
(4560,confflags)
(4561,res = ast_waitstream(chan, AST_DIGIT_ANY)
(4562,1)
(4563,)
(4564,20)
(4565,ast_channel_language(chan)
(4566,&dst)
(4567,!(item = ao2_alloc(sizeof(*item)
(4568,CONFFLAG_MONITOR)
(4569,)
(4570,play_warning)
(4571,chan)
(4572,user_no)
(4573,usr)
(4574,remain % 60)
(4575,localendtime)
(4576,chan)
(4577,NULL)
(4578,conf->recordthreadlock)
(4579,1)
(4580,menu_active)
(4581,"conf-unlockednow")
(4582,idx)
(4583,!ast_goto_if_exists(chan, exitcontext, dtmfstr, 1)
(4584,"conf-userswilljoin")
(4585,user->play_warning)
(4586,!ast_streamfile(chan, "conf-muted", ast_channel_language(chan)
(4587,strchr(exitkeys, f->subclass.integer)
(4588,tmpvar)
(4589,ADMINFLAG_MUTED)
(4590,ast_channel_name(chan)
(4591,dahdic.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER)
(4592,NULL)
(4593,if (!conf->recordingfilename)
(4594,var)
(4595,user->listen.desired)
(4596,dahdic)
(4597,confflags)
(4598,ast_copy_string(item->language, ast_channel_language(chan)
(4599,NULL)
(4600,"conf-errormenu")
(4601,sent_event)
(4602,context)
(4603,RQ_UINTEGER3)
(4604,)
(4605,0)
(4606,ast_clear_flag64(confflags,CONFFLAG_INTROUSER_VMREC)
(4607,optargs)
(4608,1)
(4609,f)
(4610,"conf-locked")
(4611,*cap_slin = ast_format_cap_alloc_nolock()
(4612,1)
(4613,)
(4614,warning_freq)
(4615,var)
(4616,OPT_ARG_WAITMARKED)
(4617,LOG_WARNING)
(4618,var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFORMAT")
(4619,menu_was_active)
(4620,ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(4621,keepplaying = 1)
(4622,0)
(4623,recordingtmp)
(4624,play_warning)
(4625,exitcontext)
(4626,chan)
(4627,dahdic.confno = conf->dahdiconf)
(4628,dahdic.chan)
(4629,1)
(4630,if (keepplaying)
(4631,user)
(4632,dtmfstr[0])
(4633,f)
(4634,res)
(4635,2)
(4636,timelimit = play_warning = warning_freq = 0)
(4637,f->frametype == AST_FRAME_DTMF)
(4638,)
(4639,conf->recordingformat = ast_strdup(var)
(4640,goto outrun;)
(4641,ast_debug(1,\n\\n\\t\\t\\t\\t\\t\\t\\t"Got ignored control frame on channel %s, f->frametype=%d,f->subclass=%d\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_channel_name(chan)
(4642,optargs[OPT_ARG_MOH_CLASS])
(4643,0)
(4644,sizeof(user->namerecloc)
(4645,ast_log(LOG_WARNING, "Unable to write frame to channel %s\\n", ast_channel_name(chan)
(4646,0)
(4647,0)
(4648,)
(4649,ast_debug(1, "Ooh, something swapped out under us, starting over\\n")
(4650,EVENT_FLAG_CALL)
(4651,ADMINFLAG_MUTED)
(4652,user->namerecloc)
(4653,if (res > 0)
(4654,)
(4655,strerror(errno)
(4656,usr)
(4657,timelimit)
(4658,f)
(4659,ast_waitstream(chan, "")
(4660,res)
(4661,chan)
(4662,0)
(4663,usr->adminflags |= ADMINFLAG_KICKME)
(4664,CONFFLAG_INTROUSER_VMREC)
(4665,&conf->playlock)
(4666,keepplaying = 0)
(4667,ast_channel_caller(user->chan)
(4668,atol(limit_str)
(4669,if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
(4670,user)
(4671,conf->users)
(4672,chan)
(4673,f->subclass.integer)
(4674,confflags)
(4675,res)
(4676,ast_pthread_create_detached_background(&conf->recordthread, NULL, recordthread, conf)
(4677,2)
(4678,NULL)
(4679,namerecloc)
(4680,ast_channel_language(chan)
(4681,user)
(4682,if (!play_warning && !end_sound && timelimit)
(4683,chan)
(4684,chan)
(4685,optargs)
(4686,user->kicktime <= now.tv_sec)
(4687,ast_channel_connected(user->chan)
(4688,conf->transframe[idx])
(4689,conf->lchan)
(4690,x)
(4691,ast_channel_language(chan)
(4692,chan)
(4693,ast_test_flag64(confflags, CONFFLAG_INTROUSER)
(4694,RQ_UINTEGER2)
(4695,confflags)
(4696,LOG_WARNING)
(4697,chan)
(4698,confflags)
(4699,AST_OPTION_TONE_VERIFY)
(4700,DAHDI_CONF_CONFMON)
(4701,ast_streamfile(chan, "conf-adminmenu-162", ast_channel_language(chan)
(4702,warning_freq)
(4703,timelimit)
(4704,break;)
(4705,fr.datalen)
(4706,CONFFLAG_MOH)
(4707,lchan)
(4708,conf)
(4709,)
(4710,keepplaying)
(4711,users)
(4712,dahdichannel)
(4713,confflags)
(4714,user->user_no)
(4715,name)
(4716,chan)
(4717,ast_waitstream(chan, "")
(4718,!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan)
(4719,&totalsilence)
(4720,buf)
(4721,play_warning = warning_freq = 0)
(4722,DAHDI_SETCONF)
(4723,warning_sound = NULL)
(4724,)
(4725,conf->lchan)
(4726,ast_channel_connected(user->chan)
(4727,ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan)
(4728,pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
(4729,optargs)
(4730,)
(4731,user->dahdichannel)
(4732,)
(4733,conf)
(4734,close(fd)
(4735,conf->endtime)
(4736,conf->recordingfilename)
(4737,dahdic.confno = conf->dahdiconf)
(4738,play_warning = warning_freq = 0)
(4739,if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan)
(4740,usr)
(4741,)
(4742,conf->users)
(4743,!announcement_played && conf->endalert)
(4744,currenttime)
(4745,ast_strlen_zero(optargs[OPT_ARG_WAITMARKED])
(4746,ADMINFLAG_T_REQUEST)
(4747,AST_DIGIT_ANY)
(4748,CONFFLAG_INTROUSER_VMREC)
(4749,)
(4750,namerecloc)
(4751,conf->transframe)
(4752,chan)
(4753,"Could not find application (agi)
(4754,char)
(4755,conf)
(4756,meetmesecs)
(4757,str)
(4758,OPT_ARG_MOH_CLASS)
(4759,remain / 60)
(4760,conf)
(4761,!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(4762,totalsilence)
(4763,end_sound = var ? var : NULL)
(4764,mohtempstopped = 0)
(4765,conf->origframe)
(4766,conf->lchan)
(4767,"Limit Data for this call:\\n")
(4768,res > 0)
(4769,user)
(4770,res)
(4771,if (ast_mkdir(destdir, 0777)
(4772,)
(4773,ast_channel_connected(user->chan)
(4774,(conf->transframe[idx]->frametype != AST_FRAME_NULL)
(4775,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(4776,ast_fileexists(user->namerecloc, NULL, NULL)
(4777,pbx_builtin_setvar_helper(chan, "MEETMEUNIQUEID", conf->uniqueid)
(4778,)
(4779,1)
(4780,conf->announcelistlock)
(4781,)
(4782,conf)
(4783,usr)
(4784,sizeof(exitcontext)
(4785,res = ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL)
(4786,timelimit = atol(limit_str)
(4787,user->adminflags)
(4788,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(4789,!(user->adminflags & ADMINFLAG_T_REQUEST)
(4790,0)
(4791,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4792,ADMINFLAG_SELFMUTED)
(4793,2)
(4794,user->adminflags)
(4795,chan)
(4796,dahdic)
(4797,ast_test_flag64(confflags, (CONFFLAG_OPTIMIZETALKER | CONFFLAG_MONITORTALKER)
(4798,CONFFLAG_TALKER)
(4799,&conf->announcethreadlock)
(4800,dahdic)
(4801,totalsilence < MEETME_DELAYDETECTTALK)
(4802,&conf->recordthread)
(4803,sent_event = 1)
(4804,ao2_callback(conf->usercontainer, OBJ_NODATA, user_max_cmp, &user->user_no)
(4805,0)
(4806,ast_format_set(&src, AST_FORMAT_SLINEAR, 0)
(4807,dahdic.confmode)
(4808,fr.data.ptr = buf)
(4809,buf)
(4810,ADMINFLAG_MUTED)
(4811,users)
(4812,0)
(4813,announcement_played)
(4814,chan)
(4815,conf->usercontainer)
(4816,conf)
(4817,ast_format_cap_alloc_nolock()
(4818,conf->users)
(4819,chan)
(4820,if (ast_test_flag64(confflags, CONFFLAG_MONITOR)
(4821,to)
(4822,break;)
(4823,break;)
(4824,conf->users)
(4825,ast_channel_name(chan)
(4826,ast_stopstream(chan)
(4827,if (ast_test_flag64(confflags, CONFFLAG_KEYEXIT)
(4828,user->user_no)
(4829,ADMINFLAG_T_REQUEST)
(4830,f)
(4831,ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
(4832,ret)
(4833,user)
(4834,ast_test_flag64(confflags, CONFFLAG_ADMIN)
(4835,confflags)
(4836,localendtime)
(4837,chan)
(4838,if (ioctl(fd, DAHDI_SET_BUFINFO, &bi)
(4839,lastmarked)
(4840,conf)
(4841,conf)
(4842,if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4843,chan)
(4844,snprintf(destdir, sizeof(destdir)
(4845,)
(4846,chan)
(4847,)
(4848,fr.samples)
(4849,remain = 0)
(4850,agifile)
(4851,user->chan)
(4852,announcethread)
(4853,LOG_WARNING)
(4854,ast_channel_language(chan)
(4855,user)
(4856,jointime)
(4857,case \'4\':)
(4858,1)
(4859,f->frametype)
(4860,f->datalen)
(4861,CONFFLAG_KICK_CONTINUE)
(4862,chan)
(4863,DAHDI_CONF_CONF | DAHDI_CONF_TALKER)
(4864,ms = -1)
(4865,recordingtmp)
(4866,confflags)
(4867,!ast_test_flag64(confflags, CONFFLAG_NO_AUDIO_UNTIL_UP)
(4868,conf_flush(fd, chan)
(4869,sizeof(item->namerecloc)
(4870,)
(4871,CONFFLAG_MARKEDUSER)
(4872,conf->users)
(4873,)
(4874,namerecloc)
(4875,type)
(4876,user->chan)
(4877,ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)
(4878,item->confchan = conf->chan)
(4879,chan)
(4880,CONFFLAG_ADMIN)
(4881,if ((var = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE")
(4882,ast_waitstream(chan, "")
(4883,tv_sec)
(4884,*buf = __buf + AST_FRIENDLY_OFFSET)
(4885,user)
(4886,ast_mutex_unlock(&conf->listenlock)
(4887,tv_sec)
(4888,ast_test_flag64(confflags, CONFFLAG_QUIET)
(4889,ast_waitstream(chan, "")
(4890,chan)
(4891,f)
(4892,goto outrun;)
(4893,LOG_WARNING)
(4894,dahdic.confno)
(4895,confno)
(4896,res = ast_waitstream(chan, AST_DIGIT_ANY)
(4897,!ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4898,ast_mutex_unlock(&conf->playlock)
(4899,"Unable to open DAHDI pseudo channel: %s\\n")
(4900,user->adminflags)
(4901,)
(4902,(f->frametype == AST_FRAME_DTMF)
(4903,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4904,1)
(4905,dahdic.confno)
(4906,ast_clear_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(4907,user)
(4908,ast_channel_language(chan)
(4909,conf)
(4910,menu_active)
(4911,conf->recordingfilename)
(4912,ast_tvsub(nexteventts, ast_samp2tv(user->play_warning, 1000)
(4913,chan)
(4914,ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan)
(4915,ast_channel_uniqueid(chan)
(4916,fr.data.ptr)
(4917,ast_log(LOG_WARNING, "Error starting listen channel\\n")
(4918,ast_log(LOG_WARNING, "mkdir \'%s\' failed: %s\\n", destdir, strerror(errno)
(4919,kicktime)
(4920,ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf)
(4921,conf)
(4922,item)
(4923,rt_schedule)
(4924,menu_active = 0)
(4925,time(&user->kicktime)
(4926,f->frametype)
(4927,)
(4928,user->talking = -1)
(4929,ast_channel_connected(user->chan)
(4930,&parse)
(4931,warning_freq)
(4932,user->kicktime + calldurationlimit)
(4933,)
(4934,conf->users - 1 == 1)
(4935,chan)
(4936,now)
(4937,actual)
(4938,warning_str)
(4939,ast_debug(2, "- warning_freq  = %ld\\n", warning_freq)
(4940,user->timelimit)
(4941,CONFFLAG_WAITMARKED)
(4942,chan)
(4943,conf)
(4944,chan)
(4945,chan)
(4946,chan)
(4947,musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK)
(4948,res > 0)
(4949,if (ast_fileexists(usr->namerecloc, NULL, NULL)
(4950,if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan)
(4951,var = ast_strdupa(var)
(4952,exitcontext)
(4953,if (ast_test_flag64(confflags, CONFFLAG_INTROUSER_VMREC)
(4954,CONFFLAG_RECORDCONF)
(4955,*dsp = NULL)
(4956,now)
(4957,"")
(4958,chan)
(4959,"conf-leaderhasleft")
(4960,confflags)
(4961,)
(4962,if ((conf->recordthread == AST_PTHREADT_NULL)
(4963,tv_sec)
(4964,ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
(4965,conf_play(chan, conf, LEAVE)
(4966,1)
(4967,conf->users++)
(4968,confflags)
(4969,user->dahdichannel && ast_test_flag64(confflags, CONFFLAG_STARMENU)
(4970,f->frametype == AST_FRAME_DTMF_BEGIN || f->frametype == AST_FRAME_DTMF_END)
(4971,ast_manager_event(chan, EVENT_FLAG_CALL, "MeetmeTalkRequest",\n\\n\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Meetme: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t"Usernum: %d\\r\\n"\n\\n\\t\\t\\t\\t\\t"Status: on\\r\\n",\n\\n\\t\\t\\t\\t\\tast_channel_name(chan)
(4972,recordingformat)
(4973,usr)
(4974,dahdiconf)
(4975,MEETME_DELAYDETECTTALK)
(4976,users)
(4977,ast_channel_name(chan)
(4978,warnfreq_str)
(4979,f->frametype)
(4980,outfd)
(4981,if (play_warning < 1)
(4982,)
(4983,f)
(4984,0)
(4985,"")
(4986,if (ast_test_flag64(confflags, CONFFLAG_MOH)
(4987,mod_speex)
(4988,ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(4989,play_warning)
(4990,conf->confno)
(4991,menu_active = 0)
(4992,idx)
(4993,if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(4994,cap_slin = ast_format_cap_destroy(cap_slin)
(4995,conf)
(4996,user)
(4997,chan)
(4998,break;)
(4999,!ast_test_flag64(confflags, CONFFLAG_ADMIN)
(5000,user)
(5001,if (musiconhold)
(5002,user)
(5003,!conf->markedusers)
(5004,members)
(5005,if (musiconhold)
(5006,extended)
(5007,dahdic.chan = 0)
(5008,str)
(5009,f)
(5010,f)
(5011,!ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(5012,res)
(5013,ast_log(LOG_WARNING, "Error setting conference\\n")
(5014,"confno")
(5015,res > 0)
(5016,chan)
(5017,ast_strlen_zero(optargs[OPT_ARG_DURATION_LIMIT])
(5018,0)
(5019,0)
(5020,ast_translator_build_path(&dst, &src)
(5021,if (!sent_event)
(5022,rt_log_members)
(5023,tmpfmt)
(5024,gmuted)
(5025,ast_streamfile(chan, "queue-seconds", ast_channel_language(chan)
(5026,user)
(5027,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(5028,&confs)
(5029,)
(5030,menu_active)
(5031,conf)
(5032,parse)
(5033,dtmf)
(5034,warning_freq)
(5035,7)
(5036,dahdic.confmode)
(5037,if (user->adminflags & ADMINFLAG_HANGUP)
(5038,1)
(5039,chan)
(5040,)
(5041,sizeof(item->language)
(5042,0)
(5043,)
(5044,&conf->recordthreadlock)
(5045,context)
(5046,if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN)
(5047,0)
(5048,keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)
(5049,)
(5050,conf->recordingfilename)
(5051,ast_test_flag64(confflags, CONFFLAG_MONITORTALKER)
(5052,conf)
(5053,frametype)
(5054,ast_channel_macrocontext(chan)
(5055,fd = ast_channel_fd(chan, 0)
(5056,conf)
(5057,ast_stopstream(chan)
(5058,now.tv_sec + conf->endalert >= conf->endtime)
(5059,user = ao2_alloc(sizeof(*user)
(5060,CONF_HASJOIN)
(5061,ast_exists_extension(chan, exitcontext, dtmfstr, 1, "")
(5062,1)
(5063,conf->users)
(5064,conf->usercontainer)
(5065,f)
(5066,user_max_cmp)
(5067,!menu_active)
(5068,announcement_played = 1)
(5069,conf)
(5070,f->subclass)
(5071,conf->transframe[idx])
(5072,"conf-now-recording")
(5073,conf->recordingfilename)
(5074,ast_channel_language(chan)
(5075,exitcontext[AST_MAX_CONTEXT] = "")
(5076,lchan)
(5077,ast_channel_uniqueid(chan)
(5078,ast_frame_adjust_volume(&fr, user->listen.actual)
(5079,conf->users == 1 && ast_test_flag64(confflags, CONFFLAG_KILL_LAST_MAN_STANDING)
(5080,menu_active)
(5081,locked)
(5082,users)
(5083,AST_DEVICE_INUSE)
(5084,char *)
(5085,conf)
(5086,conf->users - 1)
(5087,chan)
(5088,localendtime)
(5089,&conf->announcelistlock)
(5090,conf->transpath)
(5091,if (dsp)
(5092,confflags)
(5093,usr->adminflags)
(5094,confflags)
(5095,chan)
(5096,if (!ast_test_flag64(confflags, CONFFLAG_QUIET)
(5097,user->listen.desired)
(5098,if (ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(5099,user->talking)
(5100,S_COR(ast_channel_caller(user->chan)
(5101,language)
(5102,user->chan)
(5103,if (!(dsp = ast_dsp_new()
(5104,"")
(5105,0)
(5106,)
(5107,if (res > 0)
(5108,conf)
(5109,1000)
(5110,errno)
(5111,if (!cap_slin)
(5112,talking)
(5113,dahdic.confmode)
(5114,value)
(5115,dahdic.confmode)
(5116,res == -1)
(5117,ast_channel_monitor(chan)
(5118,case \'6\':)
(5119,conf->listenlock)
(5120,!menu_active)
(5121,duration)
(5122,lastmarked)
(5123,user)
(5124,!user->listen.actual)
(5125,ast_log(LOG_WARNING, "Failed to read frame: %s\\n", strerror(errno)
(5126,user->start_time)
(5127,(user->adminflags & ADMINFLAG_T_REQUEST)
(5128,conf)
(5129,conf)
(5130,user)
(5131,conf)
(5132,ast_config_AST_SPOOL_DIR)
(5133,id)
(5134,ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
(5135,str)
(5136,subclass)
(5137,endtime_tm)
(5138,item->confchan = conf->chan)
(5139,)
(5140,users)
(5141,fd)
(5142,"")
(5143,)
(5144,1)
(5145,conf)
(5146,ao2_iterator_init(conf->usercontainer, 0)
(5147,1)
(5148,res > 0)
(5149,menu_active = 0)
(5150,f->frametype == AST_FRAME_DTMF_END)
(5151,user)
(5152,&bi)
(5153,chan)
(5154,timeout)
(5155,context)
(5156,keepplaying)
(5157,!user->talking && ast_test_flag64(confflags, CONFFLAG_OPTIMIZETALKER)
(5158,)
(5159,user->timelimit)
(5160,dahdic)
(5161,seconds)
(5162,user->kicktime)
(5163,confflags)
(5164,seconds)
(5165,chan)
(5166,break;)
(5167,1)
(5168,frametype)
(5169,warning_freq)
(5170,res = ast_dsp_silence(dsp, f, &totalsilence)
(5171,user->warning_sound)
(5172,0)
(5173,)
(5174,reset_volumes(user)
(5175,res)
(5176,conf->lchan = ast_request("DAHDI", cap_slin, chan, "pseudo", NULL)
(5177,ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)
(5178,conf->markedusers--)
(5179,1)
(5180,next)
(5181,CONFFLAG_QUIET)
(5182,"conf-errormenu")
(5183,1)
(5184,if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(5185,user)
(5186,user_no)
(5187,ast_say_digits(chan, (conf->endtime - now.tv_sec)
(5188,destdir)
(5189,namerecloc)
(5190,if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan)
(5191,)
(5192,CONFFLAG_NOONLYPERSON)
(5193,"members")
(5194,idx >= AST_FRAME_BITS)
(5195,nexteventts)
(5196,optargs[OPT_ARG_MOH_CLASS])
(5197,if (!ast_streamfile(chan, "conf-usermenu-162", ast_channel_language(chan)
(5198,users)
(5199,conf)
(5200,dahdic)
(5201,dahdiconf)
(5202,setusercount = 0)
(5203,)
(5204,confflags)
(5205,user_max_cmp)
(5206,user->listen)
(5207,musiconhold && !ast_dsp_silence(dsp, conf->origframe, &confsilence)
(5208,"mkdir \'%s\' failed: %s\\n")
(5209,res)
(5210,(f->subclass.integer == \'*\')
(5211,"MEETMESECS")
(5212,&conf->playlock)
(5213,CONFFLAG_QUIET)
(5214,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(5215,ast_test_flag64(confflags, CONFFLAG_QUIET)
(5216,"pseudo")
(5217,2)
(5218,ast_channel_lock(chan)
(5219,user)
(5220,DAHDI_CONF_TALKER)
(5221,user)
(5222,CONFFLAG_DURATION_LIMIT)
(5223,idx)
(5224,!play_warning)
(5225,if (keepplaying)
(5226,ast_test_flag64(confflags, CONFFLAG_MONITOR)
(5227,)
(5228,tv_sec)
(5229,)
(5230,0)
(5231,menu_active)
(5232,)
(5233,chan)
(5234,announcelistlock)
(5235,&conf->announcelist)
(5236,conf->users)
(5237,dsp)
(5238,exitcontext)
(5239,dsp)
(5240,if (rt_schedule && conf->maxusers)
(5241,)
(5242,ast_channel_lock(chan)
(5243,user)
(5244,user->kicktime)
(5245,chan)
(5246,ast_waitstream(chan, "")
(5247,)
(5248,&ms)
(5249,play_warning < 1)
(5250,snprintf(recordingtmp, sizeof(recordingtmp)
(5251,play_warning)
(5252,fd)
(5253,transframe)
(5254,conf)
(5255,chan)
(5256,OPT_ARG_INTROMSG)
(5257,"")
(5258,confno)
(5259,switch (f->subclass.integer)
(5260,if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(5261,transframe)
(5262,ast_mutex_unlock(&conf->playlock)
(5263,dahdic.chan = 0)
(5264,ast_debug(1,\n\\n\\t\\t\\t\\t\\t\\t"Got unrecognized frame on channel %s, f->frametype=%d,f->subclass=%d\\n",\n\\n\\t\\t\\t\\t\\t\\tast_channel_name(chan)
(5265,0)
(5266,item->confusers = conf->users)
(5267,currentmarked == 1)
(5268,desired)
(5269,play_warning)
(5270,ast_channel_tech(chan)
(5271,)
(5272,recordingfilename)
(5273,chan)
(5274,break;)
(5275,ast_channel_name(chan)
(5276,if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan)
(5277,ast_mutex_lock(&conf->playlock)
(5278,DAHDI_CONF_TALKER)
(5279,tmp.tv_sec)
(5280,0)
(5281,context)
(5282,user->adminflags)
(5283,conf->users > 1)
(5284,strlen(conf->confno)
(5285,)
(5286,!user->talk.actual)
(5287,musiconhold = 1)
(5288,if (ast_test_flag64(confflags, CONFFLAG_MONITOR)
(5289,minutes)
(5290,OPT_ARG_WAITMARKED)
(5291,"conf-background.agi")
(5292,start_time)
(5293,conf)
(5294,user)
(5295,usercontainer)
(5296,duration)
(5297,"timeleft")
(5298,now.tv_sec)
(5299,"Error setting conference - Un/Mute \\n")
(5300,"Quitting time...\\n")
(5301,ao2_ref(item, -1)
(5302,chan)
(5303,if (user->warning_freq)
(5304,user->user_no++)
(5305,chan)
(5306,ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan)
(5307,frametype)
(5308,firstpass)
(5309,user)
(5310,)
(5311,)
(5312,DAHDI_CONF_CONFANN)
(5313,)
(5314,AST_FRAME_DTMF)
(5315,fd)
(5316,ast_test_flag64(confflags, CONFFLAG_WAITMARKED)
(5317,ast_waitstream(chan, "")
(5318,conf)
(5319,totalsilence)
(5320,number)
(5321,strlen(conf->confno)
(5322,AST_FORMAT_SLINEAR)
(5323,destdir)
(5324,conf->transframe[idx])
(5325,close(fd)
(5326,dtmfstr)
(5327,ret)
(5328,DAHDI_CONF_CONFANNMON)
(5329,ast_channel_caller(user->chan)
(5330,if (user->timelimit)
(5331,res)
(5332,id)
(5333,chan)
(5334,!menu_active)
(5335,to = time_left_ms)
(5336,origfd)
(5337,)
(5338,endtime)
(5339,)
(5340,if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)
(5341,CONFFLAG_MONITOR)
(5342,max_no)
(5343,ast_channel_fd(conf->lchan, 0)
(5344,"NOEXIT")
(5345,)
(5346,usr)
(5347,0)
(5348,ast_strdup(var)
(5349,memset(&bi, 0, sizeof(bi)
(5350,ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan)
(5351,1)
(5352,confflags)
(5353,if (ast_test_flag64(confflags, CONFFLAG_MONITOR)
(5354,)
(5355,agifile = ast_strdupa(agifiledefault)
(5356,if (ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
(5357,chan)
(5358,usr)
(5359,__buf)
(5360,default:)
(5361,sizeof(item->language)
(5362,if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan)
(5363,1)
(5364,now)
(5365,remain / 60)
(5366,1)
(5367,users)
(5368,confflags)
(5369,optargs[OPT_ARG_DURATION_STOP])
(5370,dahdic.confmode)
(5371,namerecloc)
(5372,pbx_builtin_getvar_helper(chan, "CONF_LIMIT_WARNING_FILE")
(5373,dahdic.confmode)
(5374,c)
(5375,AST_FRAME_DTMF_END)
(5376,dtmf)
(5377,NULL)
(5378,ast_strdup(recordingtmp)
(5379,ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)
(5380,0)
(5381,0)
(5382,if (conf->users - 1 == 1)
(5383,)
(5384,musiconhold && mohtempstopped && confsilence > MEETME_DELAYDETECTENDTALK)
(5385,ast_test_flag64(confflags, CONFFLAG_INTROMSG)
(5386,char)
(5387,0)
(5388,conf->maxusers)
(5389,)
(5390,keepplaying)
(5391,if (dahdic.confmode)
(5392,user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(5393,1)
(5394,ast_set_read_format_by_id(chan, AST_FORMAT_SLINEAR)
(5395,res)
(5396,dahdic)
(5397,ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
(5398,conf->markedusers)
(5399,close(fd)
(5400,conf->recordingfilename)
(5401,conf)
(5402,CONFFLAG_MONITORTALKER)
(5403,nexteventts)
(5404,strlen(conf->confno)
(5405,conf)
(5406,calldurationlimit > 0)
(5407,)
(5408,res)
(5409,ast_set_write_format_by_id(chan, AST_FORMAT_SLINEAR)
(5410,adminflags)
(5411,NULL)
(5412,chan)
(5413,f)
(5414,user->end_sound)
(5415,conf->transframe[idx] = ast_translate(conf->transpath[idx], conf->origframe, 0)
(5416,if (conf->users >= conf->maxusers)
(5417,setusercount)
(5418,ast_moh_stop(chan)
(5419,S_COR(ast_channel_connected(user->chan)
(5420,conf->recordthread)
(5421,"")
(5422,)
(5423,desired)
(5424,ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan)
(5425,chan)
(5426,res)
(5427,ast_channel_connected(user->chan)
(5428,strerror(errno)
(5429,char *optargs[])
(5430,user->talking)
(5431,conf->transframe)
(5432,ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(5433,timelimit = play_warning = warning_freq = 0)
(5434,!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan)
(5435,members)
(5436,(ast_channel_name(usr->chan)
(5437,2)
(5438,ast_debug(1, "Got DTMF %c, goto context %s\\n", dtmfstr[0], exitcontext)
(5439,chan)
(5440,ast_null_frame)
(5441,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(5442,CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(5443,0)
(5444,DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER)
(5445,ao2_ref(item, 0)
(5446,if (!(user = ao2_alloc(sizeof(*user)
(5447,)
(5448,sizeof(members)
(5449,dtmf = 0)
(5450,conf)
(5451,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(5452,)
(5453,"DAHDI")
(5454,time_left_ms)
(5455,extended)
(5456,conf->lchan)
(5457,usercontainer)
(5458,ast_stopstream(chan)
(5459,user->warning_sound)
(5460,conf)
(5461,user)
(5462,break;)
(5463,)
(5464,ast_waitstream(chan, AST_DIGIT_ANY)
(5465,confs)
(5466,case AST_CONTROL_HOLD:)
(5467,LEAVE)
(5468,ast_write(chan, cur)
(5469,user->timelimit)
(5470,conf->markedusers)
(5471,dahdic)
(5472,jointime)
(5473,user)
(5474,conf->chan)
(5475,user->adminflags &= ~(ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(5476,AST_FORMAT_SLINEAR)
(5477,-1)
(5478,warning_str)
(5479,!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan)
(5480,break;)
(5481,f)
(5482,chan)
(5483,NULL)
(5484,"%s/meetme-username-%s-%d")
(5485,confflags)
(5486,ast_test_flag64(confflags, CONFFLAG_EXIT_CONTEXT)
(5487,item->vmrec = 1)
(5488,conf->uniqueid)
(5489,members)
(5490,user)
(5491,0)
(5492,currentmarked)
(5493,dahdic.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER)
(5494,ast_waitstream(chan, "")
(5495,conf)
(5496,if (sent_event)
(5497,exitcontext)
(5498,confflags)
(5499,menu_active)
(5500,&conf->recordthreadlock)
(5501,0)
(5502,f->subclass)
(5503,CONFFLAG_MOH)
(5504,)
(5505,recordthread)
(5506,origvar)
(5507,if (c)
(5508,"conf-onlyperson")
(5509,usercontainer)
(5510,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(5511,ast_strdupa(var)
(5512,dahdic.chan)
(5513,time_left_ms)
(5514,checked)
(5515,lastusers = conf->users)
(5516,ast_test_flag64(confflags, CONFFLAG_QUIET)
(5517,-1)
(5518,)
(5519,1)
(5520,chan)
(5521,"vm-rec-name")
(5522,errno)
(5523,res)
(5524,ast_dsp_silence(dsp, conf->origframe, &confsilence)
(5525,)
(5526,members)
(5527,dahdic)
(5528,warning_sound = var ? var : "timeleft")
(5529,fd)
(5530,users)
(5531,1)
(5532,ast_test_flag64(confflags, CONFFLAG_INTROUSERNOREVIEW)
(5533,var)
(5534,"")
(5535,checked = 1)
(5536,ast_waitstream(chan, AST_DIGIT_ANY)
(5537,ast_streamfile(chan, user->end_sound, ast_channel_language(chan)
(5538,origvar)
(5539,ao2_link(conf->usercontainer, user)
(5540,user_iter)
(5541,"MeetmeTalkRequest")
(5542,ast_record_review(chan, "vm-rec-name", user->namerecloc, 10, "sln", &duration, NULL)
(5543,ast_strlen_zero(context)
(5544,conf)
(5545,frametype)
(5546,seconds = 0)
(5547,"")
(5548,ADMINFLAG_SELFMUTED)
(5549,to)
(5550,ast_test_flag64(confflags, CONFFLAG_QUIET)
(5551,talking)
(5552,open("/dev/dahdi/pseudo", O_RDWR | O_NONBLOCK)
(5553,)
(5554,NULL)
(5555,conf)
(5556,conf)
(5557,chan)
(5558,usr)
(5559,conf)
(5560,conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS])
(5561,playednamerec = 1)
(5562,keepplaying = 0)
(5563,)
(5564,goto outrun;)
(5565,"%d")
(5566,idx)
(5567,conf->transpath[idx])
(5568,f)
(5569,user)
(5570,break;)
(5571,VOL_DOWN)
(5572,LOG_WARNING)
(5573,lastmarked != 0)
(5574,&endtime_tm)
(5575,goto outrun;)
(5576,c)
(5577,if (ast_test_flag64(confflags, CONFFLAG_AGI)
(5578,recordingtmp)
(5579,f)
(5580,user_set_muted_cb)
(5581,0)
(5582,"codec_speex")
(5583,user)
(5584,now)
(5585,conf->origframe)
(5586,)
(5587,)
(5588,!ast_fileexists(user->namerecloc, NULL, NULL)
(5589,ast_channel_language(chan)
(5590,dahdic)
(5591,fd)
(5592,res)
(5593,ast_samp2tv(user->timelimit, 1000)
(5594,if (user->talk.actual)
(5595,user)
(5596,user)
(5597,LOG_WARNING)
(5598,"UNDEF")
(5599,namerecloc)
(5600,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(5601,0)
(5602,)
(5603,ast_devstate_changed(AST_DEVICE_NOT_INUSE, "meetme:%s", conf->confno)
(5604,-1)
(5605,currenttime)
(5606,goto outrun;)
(5607,listen)
(5608,conf->transframe)
(5609,ast_stopstream(chan)
(5610,user->start_time)
(5611,user)
(5612,ast_log(LOG_WARNING, "Error setting conference\\n")
(5613,calldurationlimit)
(5614,close(fd)
(5615,user)
(5616,if (user->adminflags & ADMINFLAG_T_REQUEST)
(5617,DAHDI_CONF_CONF)
(5618,chan)
(5619,if (res > 0)
(5620,0)
(5621,res > 0)
(5622,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(5623,if (user->timelimit)
(5624,chan)
(5625,outfd)
(5626,chan)
(5627,0)
(5628,chan)
(5629,user->timelimit = timelimit)
(5630,user->listen.actual)
(5631,endtime)
(5632,rxbufpolicy)
(5633,f->frametype)
(5634,f->data)
(5635,chan)
(5636,item)
(5637,ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan)
(5638,res)
(5639,1 << idx)
(5640,goto outrun;)
(5641,optargs[OPT_ARG_INTROMSG])
(5642,ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan)
(5643,ast_channel_language(chan)
(5644,"- warning_freq  = %ld\\n")
(5645,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(5646,res)
(5647,playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan)
(5648,&conf->playlock)
(5649,break;)
(5650,seconds)
(5651,NULL)
(5652,DAHDI_CONF_CONF)
(5653,chan)
(5654,&conf->announcelist)
(5655,res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan)
(5656,sizeof(exitcontext)
(5657,)
(5658,conf->recordingformat = ast_strdup("wav")
(5659,chan)
(5660,frame_list)
(5661,MEETME_DELAYDETECTENDTALK)
(5662,chan)
(5663,user)
(5664,ret)
(5665,play_warning)
(5666,users)
(5667,0)
(5668,tweak_talk_volume(user, VOL_DOWN)
(5669,"wav")
(5670,0)
(5671,CONFFLAG_WAITMARKED)
(5672,VOL_UP)
(5673,)
(5674,0)
(5675,menu_active = 0)
(5676,confsilence)
(5677,user)
(5678,markedusers)
(5679,user)
(5680,EVENT_FLAG_CALL)
(5681,ast_waitstream(chan, "")
(5682,user->adminflags |= (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)
(5683,timeout && now.tv_sec >= timeout)
(5684,dahdichannel)
(5685,ast_channel_caller(user->chan)
(5686,ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf)
(5687,)
(5688,ast_mutex_lock(&conf->playlock)
(5689,ast_waitstream(chan, "")
(5690,c)
(5691,AST_DIGIT_ANY)
(5692,&src)
(5693,cap_slin)
(5694,1)
(5695,LOG_WARNING)
(5696,user->talking)
(5697,dahdic.confmode = DAHDI_CONF_CONF)
(5698,)
(5699,conf)
(5700,chan)
(5701,)
(5702,conf->transpath[idx] = ast_translator_build_path(&dst, &src)
(5703,ast_channel_language(chan)
(5704,conf->usercontainer)
(5705,optargs)
(5706,user->timelimit)
(5707,dahdic.confmode)
(5708,chan)
(5709,conf->markedusers)
(5710,conf)
(5711,user)
(5712,close(fd)
(5713,)
(5714,dahdic)
(5715,var)
(5716,f->subclass.integer)
(5717,"Error setting conference\\n")
(5718,dahdic)
(5719,conf)
(5720,user->listen)
(5721,"meetme:%s")
(5722,CONFFLAG_QUIET)
(5723,cur)
(5724,listen)
(5725,ast_channel_caller(user->chan)
(5726,warning_sound)
(5727,agifile)
(5728,CONFFLAG_INTROUSER)
(5729,user->namerecloc)
(5730,CONFFLAG_MONITOR)
(5731,&conf->recordthread)
(5732,f)
(5733,if ((tmpvar = pbx_builtin_getvar_helper(chan, "MEETME_EXIT_CONTEXT")
(5734,idx)
(5735,recordingtmp)
(5736,ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)
(5737,warning_sound)
(5738,"")
(5739,conf)
(5740,if (ioctl(fd, DAHDI_SETCONF, &dahdic)
(5741,conf->transpath)
(5742,chan)
(5743,dahdic.confmode)
(5744,confflags)
(5745,DAHDI_SETCONF)
(5746,setusercount)
(5747,confno)
(5748,AST_DIGIT_ANY)
(5749,DAHDI_CONF_TALKER)
(5750,number)
(5751,CONFFLAG_INTROUSERNOREVIEW | CONFFLAG_INTROUSER_VMREC)
(5752,!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan)
(5753,pbx_builtin_setvar_helper(chan, "MEETMEBOOKID", conf->bookid)
(5754,strerror(errno)
(5755,sizeof(*item)
(5756,)
(5757,dtmf = ast_waitstream(chan, AST_DIGIT_ANY)
(5758,)
(5759,fd)
(5760,users)
(5761,mohtempstopped)
(5762,ADMINFLAG_MUTED)
(5763,ADMINFLAG_T_REQUEST)
(5764,!ast_test_flag64(confflags, CONFFLAG_QUIET)
(5765,var)
(5766,!ast_test_flag64(confflags, CONFFLAG_QUIET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^