-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_12_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
    else
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
186,187
189,190
189,191
190,191
190,192
191,192
193,194
195,196
196,197
197,198
197,199
198,199
200,201
202,203
203,204
204,205
204,206
205,206
208,209
208,210
208,211
209,210
210,211
212,213
213,214
213,215
213,216
213,217
213,218
213,219
213,220
214,215
215,216
215,217
216,217
218,219
218,220
220,221
222,223
223,224
223,225
224,225
226,227
226,228
226,229
229,230
230,231
232,233
233,234
233,235
235,236
235,237
235,238
238,239
240,241
241,242
241,243
242,243
244,245
244,246
244,247
245,246
247,248
250,251
250,252
251,252
251,253
252,253
254,255
256,257
257,258
258,259
258,260
259,260
262,263
262,264
262,265
262,266
263,264
264,265
264,266
265,266
268,269
268,270
269,270
271,272
271,273
272,273
272,274
273,274
276,277
278,279
279,280
281,282
282,283
282,284
283,284
283,285
284,285
284,286
285,286
287,288
289,290
289,291
289,292
289,293
289,294
290,291
292,293
294,295
295,296
295,297
298,299
298,300
299,300
301,302
303,304
305,306
306,307
307,308
307,309
308,309
311,312
311,313
312,313
314,315
315,316
316,317
316,318
317,318
319,320
321,322
322,323
322,324
322,325
322,326
323,324
324,325
324,326
325,326
327,328
327,329
329,330
331,332
332,333
332,334
333,334
335,336
335,337
335,338
338,339
339,340
341,342
342,343
342,344
344,345
344,346
344,347
347,348
349,350
349,351
350,351
350,352
351,352
351,353
352,353
355,356
355,357
356,357
359,360
359,361
359,362
359,363
360,361
361,362
361,363
362,363
364,365
364,366
364,367
365,366
367,368
370,371
370,372
371,372
371,373
372,373
374,375
376,377
377,378
378,379
378,380
379,380
382,383
382,384
382,385
382,386
383,384
384,385
384,386
385,386
388,389
388,390
389,390
391,392
391,393
392,393
392,394
393,394
396,397
398,399
399,400
401,402
402,403
402,404
403,404
403,405
404,405
404,406
405,406
407,408
409,410
409,411
409,412
409,413
409,414
410,411
412,413
414,415
415,416
415,417
418,419
418,420
419,420
421,422
423,424
425,426
426,427
426,428
427,428
430,431
430,432
431,432
433,434
434,435
435,436
435,437
436,437
438,439
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,188,192,194,199,201,206,207,211,217,219,221,225,227,228,231,234,236,237,239,243,246,248,249,253,255,260,261,266,267,270,274,275,277,280,286,288,291,293,296,297,300,302,304,309,310,313,318,320,326,328,330,334,336,337,340,343,345,346,348,353,354,357,358,363,366,368,369,373,375,380,381,386,387,390,394,395,397,400,406,408,411,413,416,417,420,422,424,428,429,432,437,439
-----computeFrom-----
12,13
12,14
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
190,191
190,192
204,205
204,206
241,242
241,243
251,252
251,253
264,265
264,266
268,269
268,270
283,284
283,285
350,351
350,352
351,352
351,353
355,356
355,357
361,362
361,363
371,372
371,373
384,385
384,386
388,389
388,390
403,404
403,405
-----guardedBy-----
192,201
357,397
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_12_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_12_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_12_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(138,63,0)
(75,173,0)
(143,111,0)
(177,26,0)
(10,85,0)
(111,131,0)
(248,178,0)
(182,172,0)
(60,105,0)
(173,46,0)
(214,82,0)
(49,203,0)
(100,101,0)
(65,116,0)
(192,253,0)
(198,119,0)
(52,172,0)
(68,70,0)
(94,210,0)
(235,84,0)
(93,13,0)
(10,125,0)
(217,119,0)
(55,153,0)
(190,56,0)
(92,159,0)
(256,105,0)
(48,68,0)
(2,230,0)
(172,203,0)
(36,16,0)
(69,126,0)
(44,116,0)
(159,85,0)
(117,207,0)
(247,131,0)
(140,192,0)
(226,111,0)
(83,25,0)
(76,155,0)
(209,84,0)
(224,165,0)
(144,216,0)
(125,10,0)
(243,165,0)
(118,172,0)
(123,31,0)
(47,40,0)
(139,202,0)
(210,191,0)
(209,29,0)
(202,131,0)
(124,13,0)
(63,158,0)
(114,141,0)
(78,116,0)
(37,6,0)
(170,39,0)
(16,6,0)
(108,67,0)
(246,203,0)
(67,10,0)
(29,72,0)
(145,85,0)
(154,77,0)
(0,203,0)
(40,216,0)
(189,63,0)
(103,119,0)
(216,210,0)
(118,82,0)
(212,118,0)
(221,6,0)
(249,159,0)
(111,250,0)
(18,254,0)
(4,49,0)
(29,159,0)
(33,87,0)
(142,203,0)
(183,213,0)
(105,136,0)
(111,10,0)
(112,115,0)
(254,11,0)
(127,182,0)
(200,67,0)
(169,85,0)
(187,166,0)
(77,11,0)
(126,6,0)
(217,11,0)
(157,31,0)
(6,129,0)
(131,87,0)
(155,10,0)
(82,118,0)
(152,72,0)
(153,60,0)
(236,249,0)
(91,40,0)
(132,118,0)
(118,237,0)
(173,159,0)
(245,202,0)
(197,57,0)
(202,10,0)
(50,85,0)
(30,210,0)
(71,87,0)
(58,210,0)
(215,182,0)
(24,10,0)
(136,85,0)
(164,85,0)
(228,70,0)
(155,76,0)
(234,102,0)
(241,155,0)
(231,31,0)
(56,85,0)
(105,60,0)
(163,169,0)
(17,203,0)
(147,243,0)
(153,136,0)
(62,135,0)
(14,67,0)
(107,136,0)
(155,34,0)
(21,48,0)
(149,18,0)
(184,210,0)
(1,176,0)
(43,187,0)
(12,39,0)
(148,237,0)
(68,85,0)
(96,42,0)
(99,85,0)
(120,92,0)
(38,12,0)
(84,209,0)
(35,254,0)
(122,252,0)
(61,29,0)
(254,18,0)
(211,46,0)
(254,141,0)
(29,213,0)
(89,39,0)
(146,19,0)
(229,151,0)
(237,118,0)
(46,173,0)
(97,203,0)
(220,42,0)
(101,203,0)
(70,68,0)
(167,160,0)
(141,254,0)
(218,101,0)
(150,135,0)
(20,11,0)
(243,172,0)
(124,254,0)
(195,26,0)
(110,216,0)
(225,92,0)
(254,124,0)
(226,202,0)
(156,209,0)
(68,48,0)
(213,29,0)
(223,22,0)
(128,173,0)
(72,29,0)
(98,126,0)
(174,83,0)
(202,250,0)
(102,42,0)
(60,153,0)
(165,203,0)
(63,136,0)
(200,135,0)
(67,108,0)
(42,102,0)
(134,254,0)
(223,216,0)
(251,181,0)
(118,230,0)
(230,118,0)
(171,54,0)
(164,151,0)
(250,7,0)
(146,11,0)
(113,34,0)
(111,226,0)
(40,159,0)
(11,217,0)
(171,172,0)
(59,16,0)
(176,164,0)
(80,102,0)
(73,210,0)
(205,99,0)
(95,77,0)
(201,203,0)
(222,74,0)
(209,156,0)
(136,173,0)
(99,205,0)
(121,220,0)
(203,233,0)
(172,243,0)
(106,6,0)
(239,176,0)
(173,136,0)
(168,247,0)
(194,158,0)
(39,12,0)
(41,146,0)
(109,169,0)
(104,249,0)
(160,135,0)
(178,56,0)
(67,250,0)
(42,220,0)
(244,243,0)
(133,210,0)
(131,247,0)
(227,6,0)
(86,85,0)
(137,159,0)
(158,85,0)
(206,250,0)
(26,210,0)
(204,217,0)
(188,111,0)
(240,153,0)
(180,205,0)
(202,226,0)
(27,85,0)
(130,131,0)
(119,6,0)
(155,131,0)
(53,2,0)
(242,68,0)
(219,210,0)
(13,124,0)
(230,2,0)
(64,165,0)
(42,96,0)
(179,125,0)
(9,173,0)
(66,3,0)
(223,159,0)
(88,250,0)
(45,105,0)
(90,96,0)
(67,131,0)
(151,164,0)
(81,210,0)
(34,155,0)
(79,249,0)
(193,49,0)
(23,223,0)
(12,99,0)
(28,171,0)
(155,250,0)
(159,249,0)
(11,31,0)
(5,238,0)
(161,200,0)
(208,87,0)
(8,217,0)
(186,178,0)
(34,116,0)
(67,200,0)
(32,46,0)
(175,65,0)
(232,210,0)
(29,209,0)
(252,122,1)
(42,220,1)
(72,152,1)
(225,120,1)
(114,18,1)
(51,146,1)
(121,102,1)
(143,188,1)
(200,67,1)
(8,204,1)
(42,102,1)
(93,34,1)
(48,21,1)
(170,56,1)
(230,2,1)
(118,237,1)
(40,159,1)
(122,124,1)
(173,46,1)
(144,110,1)
(241,113,1)
(49,193,1)
(200,135,1)
(182,215,1)
(21,242,1)
(165,64,1)
(209,84,1)
(213,183,1)
(68,48,1)
(153,55,1)
(150,62,1)
(55,240,1)
(119,198,1)
(40,91,1)
(186,68,1)
(236,79,1)
(185,34,1)
(194,63,1)
(222,96,1)
(44,78,1)
(53,200,1)
(235,61,1)
(254,134,1)
(239,99,1)
(29,159,1)
(155,10,1)
(226,111,1)
(212,237,1)
(14,161,1)
(47,112,1)
(177,162,1)
(5,92,1)
(206,88,1)
(124,254,1)
(254,141,1)
(56,190,1)
(193,4,1)
(28,255,1)
(112,72,1)
(245,111,1)
(196,40,1)
(68,70,1)
(32,211,1)
(2,53,1)
(204,20,1)
(155,76,1)
(109,163,1)
(40,216,1)
(188,119,1)
(195,177,1)
(117,196,1)
(111,131,1)
(98,199,1)
(52,165,1)
(189,60,1)
(216,144,1)
(104,137,1)
(111,10,1)
(63,138,1)
(60,105,1)
(240,136,1)
(161,160,1)
(199,117,1)
(65,116,1)
(92,225,1)
(111,250,1)
(187,43,1)
(91,47,1)
(77,95,1)
(164,151,1)
(140,77,1)
(101,100,1)
(179,24,1)
(38,39,1)
(229,176,1)
(15,10,1)
(159,249,1)
(199,250,1)
(136,173,1)
(135,150,1)
(175,252,1)
(172,243,1)
(237,148,1)
(67,14,1)
(171,172,1)
(80,216,1)
(88,162,1)
(62,83,1)
(183,209,1)
(243,244,1)
(100,218,1)
(64,224,1)
(63,136,1)
(16,59,1)
(82,214,1)
(125,179,1)
(196,223,1)
(47,222,1)
(167,187,1)
(220,121,1)
(118,212,1)
(149,35,1)
(80,15,1)
(248,186,1)
(79,104,1)
(146,11,1)
(36,126,1)
(72,29,1)
(29,213,1)
(137,169,1)
(254,11,1)
(66,60,1)
(167,230,1)
(230,118,1)
(70,228,1)
(218,49,1)
(215,127,1)
(34,116,1)
(202,10,1)
(11,217,1)
(249,236,1)
(78,77,1)
(47,66,1)
(9,46,1)
(211,128,1)
(13,93,1)
(126,69,1)
(178,248,1)
(155,131,1)
(89,170,1)
(176,1,1)
(103,16,1)
(59,36,1)
(209,156,1)
(243,165,1)
(132,2,1)
(152,29,1)
(29,209,1)
(99,205,1)
(47,15,1)
(12,38,1)
(147,52,1)
(244,147,1)
(190,178,1)
(96,90,1)
(75,107,1)
(12,39,1)
(23,40,1)
(51,226,1)
(51,171,1)
(205,180,1)
(39,89,1)
(182,172,1)
(174,182,1)
(242,70,1)
(173,159,1)
(34,155,1)
(84,235,1)
(168,130,1)
(95,154,1)
(226,202,1)
(169,109,1)
(102,234,1)
(65,175,1)
(155,250,1)
(113,116,1)
(45,153,1)
(105,136,1)
(116,44,1)
(124,13,1)
(67,10,1)
(110,26,1)
(111,143,1)
(250,206,1)
(224,101,1)
(134,141,1)
(62,182,1)
(18,149,1)
(223,159,1)
(10,125,1)
(67,250,1)
(77,11,1)
(128,75,1)
(173,9,1)
(1,239,1)
(120,159,1)
(67,131,1)
(4,199,1)
(234,80,1)
(247,168,1)
(67,108,1)
(223,23,1)
(61,164,1)
(131,247,1)
(160,167,1)
(46,32,1)
(90,42,1)
(146,41,1)
(83,174,1)
(217,8,1)
(163,96,1)
(256,45,1)
(154,11,1)
(202,250,1)
(96,42,1)
(141,114,1)
(26,195,1)
(148,82,1)
(180,12,1)
(162,131,1)
(41,185,1)
(20,226,1)
(127,172,1)
(60,153,1)
(202,139,1)
(217,119,1)
(139,245,1)
(171,28,1)
(51,185,1)
(35,13,1)
(118,172,1)
(153,136,1)
(107,72,1)
(24,158,1)
(254,18,1)
(255,200,1)
(47,5,1)
(175,124,1)
(113,65,1)
(43,230,1)
(198,103,1)
(161,135,1)
(92,159,1)
(151,229,1)
(160,135,1)
(202,131,1)
(51,255,1)
(155,241,1)
(158,194,1)
(228,92,1)
(214,132,1)
(105,256,1)
(199,196,1)
(223,216,1)
(78,192,1)
(138,189,1)
(118,82,1)
(69,98,1)
(192,140,1)
(155,250,2)
(217,119,2)
(18,34,2)
(242,92,2)
(65,34,2)
(212,200,2)
(105,153,2)
(45,153,2)
(195,162,2)
(155,226,2)
(67,199,2)
(198,199,2)
(173,159,2)
(67,200,2)
(228,92,2)
(137,96,2)
(44,226,2)
(177,162,2)
(183,92,2)
(193,199,2)
(190,92,2)
(46,72,2)
(209,84,2)
(169,96,2)
(209,92,2)
(61,92,2)
(56,92,2)
(243,165,2)
(15,60,2)
(65,116,2)
(245,111,2)
(220,15,2)
(151,92,2)
(11,226,2)
(29,92,2)
(53,200,2)
(111,199,2)
(36,199,2)
(189,60,2)
(20,226,2)
(111,250,2)
(148,200,2)
(150,199,2)
(77,11,2)
(34,155,2)
(67,250,2)
(64,199,2)
(172,243,2)
(164,151,2)
(96,15,2)
(11,217,2)
(40,216,2)
(69,199,2)
(32,72,2)
(182,199,2)
(79,96,2)
(38,92,2)
(60,105,2)
(160,200,2)
(39,92,2)
(223,159,2)
(140,77,2)
(146,185,2)
(161,199,2)
(63,60,2)
(59,199,2)
(127,199,2)
(160,135,2)
(104,96,2)
(91,162,2)
(136,173,2)
(230,200,2)
(113,226,2)
(116,226,2)
(112,72,2)
(78,226,2)
(121,15,2)
(99,205,2)
(226,199,2)
(143,199,2)
(82,200,2)
(118,172,2)
(10,60,2)
(172,199,2)
(171,255,2)
(192,77,2)
(226,111,2)
(155,131,2)
(68,92,2)
(98,199,2)
(256,153,2)
(175,34,2)
(187,230,2)
(42,15,2)
(34,226,2)
(205,92,2)
(75,72,2)
(34,116,2)
(111,131,2)
(118,200,2)
(62,199,2)
(60,72,2)
(215,199,2)
(128,72,2)
(218,199,2)
(152,92,2)
(165,199,2)
(80,15,2)
(216,162,2)
(155,76,2)
(135,199,2)
(40,162,2)
(96,42,2)
(147,199,2)
(167,200,2)
(158,60,2)
(26,162,2)
(234,162,2)
(84,92,2)
(14,200,2)
(101,199,2)
(179,60,2)
(29,209,2)
(77,226,2)
(67,131,2)
(100,199,2)
(240,72,2)
(99,92,2)
(222,96,2)
(124,254,2)
(159,96,2)
(254,18,2)
(229,92,2)
(48,92,2)
(72,29,2)
(88,162,2)
(126,199,2)
(96,162,2)
(67,10,2)
(237,200,2)
(9,72,2)
(67,108,2)
(200,199,2)
(141,34,2)
(211,72,2)
(252,124,2)
(155,34,2)
(200,200,2)
(154,226,2)
(14,199,2)
(200,67,2)
(70,92,2)
(178,92,2)
(180,92,2)
(220,162,2)
(16,199,2)
(241,34,2)
(118,82,2)
(200,135,2)
(35,34,2)
(12,39,2)
(113,34,2)
(185,226,2)
(149,34,2)
(202,250,2)
(182,172,2)
(43,230,2)
(225,96,2)
(13,34,2)
(136,72,2)
(66,60,2)
(80,162,2)
(24,60,2)
(12,92,2)
(34,34,2)
(171,172,2)
(111,10,2)
(121,162,2)
(92,159,2)
(163,96,2)
(236,96,2)
(42,220,2)
(68,48,2)
(188,199,2)
(155,10,2)
(255,199,2)
(5,92,2)
(230,118,2)
(173,46,2)
(49,199,2)
(110,162,2)
(42,102,2)
(105,136,2)
(4,199,2)
(176,92,2)
(239,92,2)
(202,131,2)
(117,196,2)
(21,92,2)
(241,226,2)
(144,162,2)
(164,92,2)
(10,125,2)
(72,92,2)
(55,72,2)
(114,34,2)
(153,136,2)
(134,34,2)
(107,72,2)
(29,213,2)
(173,72,2)
(93,34,2)
(90,15,2)
(118,237,2)
(124,34,2)
(89,92,2)
(243,199,2)
(132,200,2)
(202,111,2)
(254,34,2)
(224,199,2)
(244,199,2)
(202,10,2)
(131,247,2)
(226,202,2)
(103,199,2)
(40,159,2)
(63,136,2)
(119,199,2)
(60,153,2)
(120,96,2)
(194,60,2)
(138,60,2)
(174,182,2)
(234,15,2)
(42,162,2)
(161,200,2)
(52,199,2)
(1,92,2)
(83,182,2)
(209,156,2)
(109,96,2)
(214,200,2)
(102,15,2)
(41,185,2)
(230,2,2)
(213,92,2)
(206,162,2)
(68,70,2)
(170,92,2)
(248,92,2)
(29,159,2)
(223,216,2)
(235,92,2)
(146,11,2)
(139,111,2)
(2,200,2)
(254,141,2)
(95,226,2)
(250,162,2)
(159,249,2)
(47,162,2)
(90,162,2)
(125,60,2)
(186,92,2)
(254,11,2)
(204,226,2)
(28,255,2)
(249,96,2)
(102,162,2)
(196,162,2)
(122,124,2)
(223,40,2)
(217,226,2)
(153,72,2)
(92,96,2)
(23,40,2)
(124,13,2)
(8,226,2)
-----------------------------------
(0,pFile)
(1,sin_port)
(2,strlen(SENTENCE)
(3,)
(4,i)
(5,break;)
(6,)
(7,)
(8,"w+")
(9,0)
(10,count = atoi(inputBuffer)
(11,pFile = fopen(filename, "w+")
(12,service.sin_addr.s_addr)
(13,strlen(SENTENCE)
(14,count)
(15,0)
(16,*pFile = NULL)
(17,if (pFile)
(18,sizeof(char)
(19,)
(20,pFile)
(21,service)
(22,)
(23,connectSocket)
(24,count)
(25,)
(26,wsaDataInit = 0)
(27,if (connectSocket == INVALID_SOCKET)
(28,pFile)
(29,connect(connectSocket, (struct sockaddr*)
(30,if (wsaDataInit)
(31,)
(32,1)
(33,count)
(34,i < (size_t)
(35,SENTENCE)
(36,pFile)
(37,i)
(38,s_addr)
(39,service.sin_addr)
(40,connectSocket != INVALID_SOCKET)
(41,pFile)
(42,WSAStartup(MAKEWORD(2,2)
(43,1)
(44,0)
(45,recvResult)
(46,CHAR_ARRAY_SIZE - 1)
(47,connectSocket)
(48,sizeof(service)
(49,i = 0)
(50,if (WSAStartup(MAKEWORD(2,2)
(51,RET)
(52,pFile)
(53,SENTENCE)
(54,)
(55,SOCKET_ERROR)
(56,service.sin_family = AF_INET)
(57,)
(58,wsaDataInit)
(59,NULL)
(60,recvResult == SOCKET_ERROR || recvResult == 0)
(61,connectSocket)
(62,i)
(63,inputBuffer[recvResult])
(64,"output_bad.txt")
(65,i++)
(66,break;)
(67,(size_t)
(68,memset(&service, 0, sizeof(service)
(69,0)
(70,&service)
(71,if(globalReturnsTrueOrFalse()
(72,connect(connectSocket, (struct sockaddr*)
(73,service)
(74,)
(75,connectSocket)
(76,size_t)
(77,pFile == NULL)
(78,i)
(79,SOCK_STREAM)
(80,2)
(81,wsaData)
(82,sizeof(char)
(83,exit(1)
(84,&service)
(85,)
(86,if (connect(connectSocket, (struct sockaddr*)
(87,)
(88,count)
(89,sin_addr)
(90,NO_ERROR)
(91,INVALID_SOCKET)
(92,connectSocket == INVALID_SOCKET)
(93,SENTENCE)
(94,do)
(95,NULL)
(96,WSAStartup(MAKEWORD(2,2)
(97,i)
(98,i)
(99,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(100,NULL)
(101,*pFile = NULL)
(102,MAKEWORD(2,2)
(103,filename)
(104,AF_INET)
(105,recvResult == 0)
(106,pFile)
(107,recvResult)
(108,size_t)
(109,1)
(110,connectSocket)
(111,count > 0)
(112,break;)
(113,i)
(114,SENTENCE)
(115,)
(116,i = 0)
(117,WSACleanup()
(118,fwrite(SENTENCE, sizeof(char)
(119,*filename = "output_good.txt")
(120,connectSocket)
(121,wsaData)
(122,1)
(123,if (pFile == NULL)
(124,strlen(SENTENCE)
(125,atoi(inputBuffer)
(126,i = 0)
(127,pFile)
(128,inputBuffer)
(129,)
(130,count)
(131,count = -1)
(132,SENTENCE)
(133,connectSocket)
(134,pFile)
(135,i = 0)
(136,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(137,connectSocket)
(138,recvResult)
(139,20)
(140,1)
(141,strlen(SENTENCE)
(142,filename)
(143,0)
(144,INVALID_SOCKET)
(145,if (recvResult == SOCKET_ERROR || recvResult == 0)
(146,fclose(pFile)
(147,filename)
(148,SENTENCE)
(149,char)
(150,0)
(151,htons(TCP_PORT)
(152,SOCKET_ERROR)
(153,recvResult == SOCKET_ERROR)
(154,pFile)
(155,(size_t)
(156,struct sockaddr*)
(157,for (i = 0; i < (size_t)
(158,inputBuffer[recvResult] = \'\\0\')
(159,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(160,i++)
(161,i)
(162,globalReturnsTrueOrFalse()
(163,wsaDataInit)
(164,service.sin_port = htons(TCP_PORT)
(165,*filename = "output_bad.txt")
(166,)
(167,i)
(168,1)
(169,wsaDataInit = 1)
(170,service)
(171,fclose(pFile)
(172,pFile = fopen(filename, "w+")
(173,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(174,1)
(175,i)
(176,service.sin_port)
(177,wsaDataInit)
(178,service.sin_family)
(179,inputBuffer)
(180,IP_ADDRESS)
(181,)
(182,pFile == NULL)
(183,service)
(184,inputBuffer)
(185,pFile)
(186,service)
(187,exit(1)
(188,count)
(189,inputBuffer)
(190,AF_INET)
(191,)
(192,exit(1)
(193,0)
(194,\'\\0\')
(195,0)
(196,wsaDataInit)
(197,if (strlen(SENTENCE)
(198,"output_good.txt")
(199,globalReturnsTrueOrFalse()
(200,i < (size_t)
(201,if (pFile == NULL)
(202,count <= 20)
(203,)
(204,filename)
(205,inet_addr(IP_ADDRESS)
(206,20)
(207,)
(208,if(globalReturnsTrueOrFalse()
(209,(struct sockaddr*)
(210,)
(211,CHAR_ARRAY_SIZE)
(212,pFile)
(213,sizeof(service)
(214,char)
(215,NULL)
(216,connectSocket = INVALID_SOCKET)
(217,fopen(filename, "w+")
(218,pFile)
(219,recvResult)
(220,&wsaData)
(221,filename)
(222,break;)
(223,CLOSE_SOCKET(connectSocket)
(224,filename)
(225,INVALID_SOCKET)
(226,count > 0 && count <= 20)
(227,if (count > 0 && count <= 20)
(228,service)
(229,TCP_PORT)
(230,strlen(SENTENCE)
(231,if (pFile)
(232,if (connectSocket != INVALID_SOCKET)
(233,)
(234,2)
(235,service)
(236,IPPROTO_TCP)
(237,strlen(SENTENCE)
(238,)
(239,service)
(240,recvResult)
(241,count)
(242,0)
(243,fopen(filename, "w+")
(244,"w+")
(245,count)
(246,for (i = 0; i < (size_t)
(247,-1)
(248,sin_family)
(249,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(250,count = 20)
(251,if (strlen(SENTENCE)
(252,exit(1)
(253,)
(254,fwrite(SENTENCE, sizeof(char)
(255,pFile)
(256,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^