-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink(size_t data)
{
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink(size_t data){    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(15,10,0)
(3,23,0)
(36,18,0)
(11,29,0)
(20,38,0)
(38,20,0)
(5,16,0)
(0,31,0)
(21,0,0)
(7,6,0)
(26,6,0)
(37,11,0)
(14,23,0)
(14,6,0)
(9,17,0)
(4,14,0)
(19,5,0)
(10,14,0)
(18,36,0)
(20,23,0)
(18,0,0)
(38,2,0)
(16,22,0)
(23,14,0)
(25,2,0)
(24,6,0)
(33,0,0)
(2,38,0)
(23,20,0)
(1,36,0)
(32,21,0)
(17,14,0)
(12,17,0)
(35,24,0)
(28,41,0)
(39,41,0)
(7,14,0)
(0,18,0)
(0,21,0)
(23,3,0)
(17,6,0)
(13,38,0)
(24,14,0)
(30,7,0)
(40,10,0)
(27,36,0)
(16,5,0)
(36,31,0)
(38,31,0)
(41,8,0)
(4,18,1)
(23,20,1)
(9,10,1)
(30,17,1)
(9,16,1)
(15,14,1)
(20,38,1)
(16,5,1)
(13,4,1)
(17,14,1)
(34,24,1)
(11,37,1)
(14,23,1)
(38,31,1)
(34,11,1)
(35,7,1)
(18,36,1)
(38,2,1)
(5,19,1)
(0,21,1)
(19,10,1)
(17,12,1)
(7,30,1)
(1,27,1)
(2,25,1)
(40,15,1)
(7,14,1)
(10,14,1)
(23,3,1)
(36,1,1)
(12,9,1)
(10,40,1)
(36,31,1)
(27,0,1)
(0,31,1)
(25,13,1)
(32,33,1)
(24,35,1)
(18,0,1)
(37,18,1)
(24,14,1)
(21,32,1)
(36,31,2)
(24,14,2)
(36,0,2)
(2,18,2)
(13,18,2)
(17,18,2)
(40,18,2)
(0,31,2)
(37,18,2)
(20,18,2)
(38,18,2)
(12,18,2)
(27,0,2)
(18,0,2)
(23,20,2)
(35,18,2)
(10,18,2)
(7,18,2)
(4,18,2)
(38,2,2)
(23,3,2)
(11,18,2)
(0,21,2)
(14,18,2)
(9,18,2)
(23,18,2)
(16,10,2)
(17,14,2)
(38,31,2)
(20,38,2)
(30,18,2)
(16,5,2)
(18,36,2)
(25,18,2)
(1,0,2)
(10,14,2)
(15,18,2)
(7,14,2)
(19,10,2)
(24,18,2)
(5,10,2)
(14,23,2)
-----------------------------------
(0,data > strlen(HELLO_STRING)
(1,100)
(2,sizeof(char)
(3,char *)
(4,myString)
(5,-1)
(6,)
(7,printLine(myString)
(8,)
(9,myString)
(10,myString == NULL)
(11,printLine("Input is less than the length of the source string or too large")
(12,HELLO_STRING)
(13,data)
(14,myString = (char *)
(15,myString)
(16,exit(-1)
(17,strcpy(myString, HELLO_STRING)
(18,data > strlen(HELLO_STRING)
(19,1)
(20,malloc(data*sizeof(char)
(21,strlen(HELLO_STRING)
(22,)
(23,(char *)
(24,free(myString)
(25,char)
(26,if (myString == NULL)
(27,data)
(28,if (data > strlen(HELLO_STRING)
(29,)
(30,myString)
(31,size_t data)
(32,HELLO_STRING)
(33,data)
(34,RET)
(35,myString)
(36,data < 100)
(37,"Input is less than the length of the source string or too large")
(38,data*sizeof(char)
(39,myString)
(40,NULL)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^