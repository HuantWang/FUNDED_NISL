-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_06_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
69,70
69,71
69,72
69,73
69,74
69,75
69,76
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
82,85
85,86
86,87
88,89
89,90
89,91
91,92
91,93
91,94
94,95
96,97
97,98
97,99
98,99
100,101
100,102
100,103
101,102
103,104
106,107
106,108
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
118,120
118,121
118,122
119,120
120,121
120,122
121,122
124,125
124,126
125,126
127,128
127,129
128,129
128,130
129,130
132,133
134,135
135,136
137,138
138,139
138,140
139,140
139,141
140,141
140,142
141,142
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
151,152
151,153
154,155
154,156
155,156
157,158
159,160
161,162
162,163
163,164
163,165
164,165
167,168
167,169
168,169
170,171
171,172
172,173
172,174
173,174
175,176
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,73,75,77,81,83,84,87,90,92,93,95,99,102,104,105,109,111,116,117,122,123,126,130,131,133,136,142,144,147,149,152,153,156,158,160,165,166,169,174,176
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
97,98
97,99
107,108
107,109
120,121
120,122
124,125
124,126
139,140
139,141
-----guardedBy-----
40,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_06_bad(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_06_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_06_bad
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(56,86,0)
(21,52,0)
(6,7,0)
(0,78,0)
(24,54,0)
(73,7,0)
(92,7,0)
(32,17,0)
(1,14,0)
(31,64,0)
(14,7,0)
(28,14,0)
(16,17,0)
(46,62,0)
(18,13,0)
(7,25,0)
(19,15,0)
(43,3,0)
(91,1,0)
(76,54,0)
(55,14,0)
(4,62,0)
(10,30,0)
(71,90,0)
(78,17,0)
(69,42,0)
(60,8,0)
(1,8,0)
(33,5,0)
(59,55,0)
(82,28,0)
(42,69,0)
(23,69,0)
(48,9,0)
(53,13,0)
(65,51,0)
(37,85,0)
(27,52,0)
(67,18,0)
(44,61,0)
(80,44,0)
(29,56,0)
(14,28,0)
(74,9,0)
(17,78,0)
(83,92,0)
(90,66,0)
(47,7,0)
(35,7,0)
(9,7,0)
(42,1,0)
(50,3,0)
(86,63,0)
(36,14,0)
(4,22,0)
(56,13,0)
(87,20,0)
(57,44,0)
(1,34,0)
(58,86,0)
(89,34,0)
(86,87,0)
(72,1,0)
(86,4,0)
(11,7,0)
(1,42,0)
(52,44,0)
(77,15,0)
(39,20,0)
(30,79,0)
(34,1,0)
(17,52,0)
(26,37,0)
(62,4,0)
(37,14,0)
(87,3,0)
(81,55,0)
(40,7,0)
(8,1,0)
(88,4,0)
(38,28,0)
(28,92,0)
(15,7,0)
(86,56,0)
(84,13,0)
(2,64,0)
(49,87,0)
(45,3,0)
(20,87,0)
(70,92,0)
(68,17,0)
(51,41,0)
(63,86,0)
(62,52,0)
(42,1,1)
(39,49,1)
(23,56,1)
(9,48,1)
(1,72,1)
(8,60,1)
(67,42,1)
(89,91,1)
(68,16,1)
(86,63,1)
(10,55,1)
(58,29,1)
(21,27,1)
(55,59,1)
(1,34,1)
(0,17,1)
(84,30,1)
(1,14,1)
(88,78,1)
(72,8,1)
(18,67,1)
(86,4,1)
(90,71,1)
(19,64,1)
(59,81,1)
(17,52,1)
(2,90,1)
(42,69,1)
(82,38,1)
(13,53,1)
(2,54,1)
(75,12,1)
(52,21,1)
(17,68,1)
(69,23,1)
(83,9,1)
(56,13,1)
(4,62,1)
(28,82,1)
(18,13,1)
(53,84,1)
(74,15,1)
(51,65,1)
(84,55,1)
(55,14,1)
(1,8,1)
(20,39,1)
(65,42,1)
(54,24,1)
(70,83,1)
(15,77,1)
(75,37,1)
(37,14,1)
(56,86,1)
(78,17,1)
(62,46,1)
(16,32,1)
(60,34,1)
(86,58,1)
(77,19,1)
(36,92,1)
(29,18,1)
(32,52,1)
(81,14,1)
(91,69,1)
(78,0,1)
(48,74,1)
(38,36,1)
(64,31,1)
(76,87,1)
(29,13,1)
(92,70,1)
(87,20,1)
(62,52,1)
(37,26,1)
(67,51,1)
(28,92,1)
(46,88,1)
(75,64,1)
(2,4,1)
(31,2,1)
(24,76,1)
(26,12,1)
(14,28,1)
(12,56,1)
(30,10,1)
(34,89,1)
(71,78,1)
(86,87,1)
(27,54,1)
(90,78,2)
(53,64,2)
(28,92,2)
(86,4,2)
(59,64,2)
(91,56,2)
(87,20,2)
(56,13,2)
(8,56,2)
(1,14,2)
(71,78,2)
(13,64,2)
(12,64,2)
(34,56,2)
(1,56,2)
(86,64,2)
(18,56,2)
(89,56,2)
(67,56,2)
(48,64,2)
(17,52,2)
(69,56,2)
(29,64,2)
(58,56,2)
(70,64,2)
(83,64,2)
(56,86,2)
(42,56,2)
(4,62,2)
(52,54,2)
(56,64,2)
(68,54,2)
(36,64,2)
(74,64,2)
(84,64,2)
(42,69,2)
(86,87,2)
(27,54,2)
(28,64,2)
(81,64,2)
(55,64,2)
(14,28,2)
(16,54,2)
(38,64,2)
(82,64,2)
(29,56,2)
(78,54,2)
(58,64,2)
(92,64,2)
(65,42,2)
(42,1,2)
(88,78,2)
(0,54,2)
(72,56,2)
(55,14,2)
(37,12,2)
(77,64,2)
(26,12,2)
(37,14,2)
(1,8,2)
(62,78,2)
(18,13,2)
(10,55,2)
(9,64,2)
(86,56,2)
(30,55,2)
(60,56,2)
(51,42,2)
(19,64,2)
(78,17,2)
(23,56,2)
(56,56,2)
(1,34,2)
(14,64,2)
(32,54,2)
(46,78,2)
(21,54,2)
(17,54,2)
(15,64,2)
(4,78,2)
(86,63,2)
(62,52,2)
-----------------------------------
(0,NULL)
(1,fwrite(SENTENCE, sizeof(char)
(2,STATIC_CONST_FIVE)
(3,)
(4,count = atoi(inputBuffer)
(5,)
(6,if (pFile)
(7,)
(8,strlen(SENTENCE)
(9,*pFile = NULL)
(10,1)
(11,pFile)
(12,pFile)
(13,i = 0)
(14,pFile = fopen(filename, "w+")
(15,i = 0)
(16,CHAR_ARRAY_SIZE)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,i++)
(19,i)
(20,-1)
(21,"")
(22,)
(23,SENTENCE)
(24,5)
(25,)
(26,pFile)
(27,inputBuffer)
(28,fopen(filename, "w+")
(29,i)
(30,exit(1)
(31,5)
(32,inputBuffer)
(33,if (strlen(SENTENCE)
(34,sizeof(char)
(35,if (pFile == NULL)
(36,pFile)
(37,fclose(pFile)
(38,filename)
(39,1)
(40,filename)
(41,)
(42,strlen(SENTENCE)
(43,if(STATIC_CONST_FIVE==5)
(44,)
(45,count)
(46,inputBuffer)
(47,i)
(48,NULL)
(49,count)
(50,if(STATIC_CONST_FIVE==5)
(51,exit(1)
(52,inputBuffer[CHAR_ARRAY_SIZE] = "")
(53,0)
(54,STATIC_CONST_FIVE==5)
(55,pFile == NULL)
(56,i < (size_t)
(57,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,count)
(59,NULL)
(60,SENTENCE)
(61,)
(62,atoi(inputBuffer)
(63,size_t)
(64,STATIC_CONST_FIVE==5)
(65,1)
(66,)
(67,i)
(68,stdin)
(69,strlen(SENTENCE)
(70,"output_bad.txt")
(71,"fgets()
(72,pFile)
(73,for (i = 0; i < (size_t)
(74,pFile)
(75,RET)
(76,STATIC_CONST_FIVE)
(77,0)
(78,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(79,)
(80,inputBuffer)
(81,pFile)
(82,"w+")
(83,filename)
(84,i)
(85,)
(86,(size_t)
(87,count = -1)
(88,count)
(89,char)
(90,printLine("fgets()
(91,SENTENCE)
(92,*filename = "output_bad.txt")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^