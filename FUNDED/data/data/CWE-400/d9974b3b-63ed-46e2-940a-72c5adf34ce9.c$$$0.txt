-----label-----
0
-----code-----
static struct group *af_getgrent(void) {
  struct group *grp = NULL, *res = NULL;

  if (!af_group_file ||
      !af_group_file->af_file) {
    errno = EINVAL;
    return NULL;
  }

  while (TRUE) {
#ifdef HAVE_FGETGRENT
    pr_signals_handle();
    grp = fgetgrent(af_group_file->af_file);
#else
    char *cp = NULL, *buf = NULL;
    int buflen = BUFSIZ;

    pr_signals_handle();

    buf = malloc(BUFSIZ);
    if (buf == NULL) {
      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
        "%s", "Out of memory!");
      _exit(1);
    }
    grp = NULL;

    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,
        &(af_group_file->af_lineno)) != NULL) {

      pr_signals_handle();

      /* Ignore comment and empty lines */
      if (buf[0] == '\0' ||
          buf[0] == '#') {
        continue;
      }

      cp = strchr(buf, '\n');
      if (cp != NULL) {
        *cp = '\0';
      }

      grp = af_getgrp(buf, af_group_file->af_lineno);
      free(buf);

      break;
    }
#endif /* !HAVE_FGETGRENT */

    /* If grp is NULL now, the file is empty - nothing more to be read. */
    if (grp == NULL) {
      break;
    }

    if (af_allow_grent(grp) < 0) {
      continue;
    }

    res = grp;
    break;
  }

  return res;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
13,16
14,15
16,17
16,18
16,19
19,20
20,21
22,23
22,24
22,25
25,26
26,27
28,29
28,30
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
41,42
43,44
45,46
46,47
48,49
48,50
49,50
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
52,53
53,54
53,55
53,56
55,56
55,57
55,58
58,59
59,60
61,62
61,63
61,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
96,97
96,98
96,99
96,100
97,98
99,100
99,101
99,102
100,101
102,103
107,108
108,109
108,110
109,110
112,113
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
120,125
121,122
123,124
124,125
126,127
127,128
129,130
129,131
130,131
133,134
134,135
135,136
135,137
136,137
139,140
141,142
141,143
141,144
141,145
141,146
141,147
141,148
142,143
143,144
144,145
146,147
146,148
147,148
147,149
148,149
148,150
149,150
149,151
150,151
154,155
154,156
155,156
155,157
156,157
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
167,168
169,170
172,173
172,174
173,174
173,175
174,175
176,177
178,179
179,180
180,181
180,182
181,182
182,183
185,186
186,187
186,188
187,188
189,190
189,191
189,192
190,191
192,193
194,195
194,196
195,196
198,199
199,200
199,201
200,201
202,203
205,206
205,207
206,207
206,208
207,208
209,210
211,212
213,214
213,215
214,215
214,216
215,216
215,217
216,217
218,219
221,222
223,224
224,225
224,226
225,226
227,228
230,231
231,232
-----nextToken-----
3,5,6,8,10,15,17,18,21,23,24,27,32,36,37,42,44,47,50,54,56,57,60,62,63,66,69,71,74,78,82,85,87,91,93,98,101,103,104,105,106,110,111,115,117,122,125,128,131,132,137,138,140,145,151,152,153,157,158,159,161,165,168,170,171,175,177,183,184,188,191,193,196,197,201,203,204,208,210,212,217,219,220,222,226,228,229,232
-----computeFrom-----
29,30
29,31
40,41
40,42
80,81
80,82
89,90
89,91
113,114
113,115
119,120
119,121
147,148
147,149
148,149
148,150
154,155
154,156
163,164
163,165
173,174
173,175
180,181
180,182
186,187
186,188
206,207
206,208
214,215
214,216
224,225
224,226
-----guardedBy-----
175,183
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;WhileStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct group *af_getgrent(void) {  struct group *grp = NULL, *res = NULL;  if (!af_group_file ||      !af_group_file->af_file) {    errno = EINVAL;    return NULL;  }  while (TRUE) {#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      pr_signals_handle();      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }  return res;}
static struct group
group
*af_getgrent(void)
*
af_getgrent
void
void


{  struct group *grp = NULL, *res = NULL;  if (!af_group_file ||      !af_group_file->af_file) {    errno = EINVAL;    return NULL;  }  while (TRUE) {#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      pr_signals_handle();      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }  return res;}
struct group *grp = NULL, *res = NULL;
struct group *grp = NULL, *res = NULL;
struct group
group
*grp = NULL
*
grp
= NULL
NULL
NULL
*res = NULL
*
res
= NULL
NULL
NULL
if (!af_group_file ||      !af_group_file->af_file) {    errno = EINVAL;    return NULL;  }
!af_group_file ||      !af_group_file->af_file
!af_group_file
af_group_file
af_group_file
!af_group_file->af_file
af_group_file->af_file
af_group_file
af_group_file
af_file
{    errno = EINVAL;    return NULL;  }
errno = EINVAL;
errno = EINVAL
errno
errno
EINVAL
EINVAL
return NULL;
NULL
NULL
while (TRUE) {#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      pr_signals_handle();      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }
TRUE
TRUE
{#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      pr_signals_handle();      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }
char *cp = NULL, *buf = NULL;
char *cp = NULL, *buf = NULL;
char
*cp = NULL
*
cp
= NULL
NULL
NULL
*buf = NULL
*
buf
= NULL
NULL
NULL
int buflen = BUFSIZ;
int buflen = BUFSIZ;
int
buflen = BUFSIZ
buflen
= BUFSIZ
BUFSIZ
BUFSIZ
pr_signals_handle();
pr_signals_handle()
pr_signals_handle
pr_signals_handle
buf = malloc(BUFSIZ);
buf = malloc(BUFSIZ)
buf
buf
malloc(BUFSIZ)
malloc
malloc
BUFSIZ
BUFSIZ
if (buf == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");      _exit(1);    }
buf == NULL
buf
buf
NULL
NULL
{      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");      _exit(1);    }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!");
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        "%s", "Out of memory!")
pr_log_pri
pr_log_pri
pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0)
pr_log_level_exhausted_rsrc
pr_log_level_exhausted_rsrc
PR_LOG_RSRC_MEM
PR_LOG_RSRC_MEM
0
"%s"
"Out of memory!"
_exit(1);
_exit(1)
_exit
_exit
1
grp = NULL;
grp = NULL
grp
grp
NULL
NULL
while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      pr_signals_handle();      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }
af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL
af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno))
af_getgrentline
af_getgrentline
&buf
buf
buf
&buflen
buflen
buflen
af_group_file->af_file
af_group_file
af_group_file
af_file
&(af_group_file->af_lineno)
(af_group_file->af_lineno)
af_group_file->af_lineno
af_group_file
af_group_file
af_lineno
NULL
NULL
{      pr_signals_handle();      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }
pr_signals_handle();
pr_signals_handle()
pr_signals_handle
pr_signals_handle
if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }
buf[0] == '\0' ||          buf[0] == '#'
buf[0] == '\0'
buf[0]
buf
buf
0
'\0'
buf[0] == '#'
buf[0]
buf
buf
0
'#'
{        continue;      }
continue;
cp = strchr(buf, '\n');
cp = strchr(buf, '\n')
cp
cp
strchr(buf, '\n')
strchr
strchr
buf
buf
'\n'
if (cp != NULL) {        *cp = '\0';      }
cp != NULL
cp
cp
NULL
NULL
{        *cp = '\0';      }
*cp = '\0';
*cp = '\0'
*cp
cp
cp
'\0'
grp = af_getgrp(buf, af_group_file->af_lineno);
grp = af_getgrp(buf, af_group_file->af_lineno)
grp
grp
af_getgrp(buf, af_group_file->af_lineno)
af_getgrp
af_getgrp
buf
buf
af_group_file->af_lineno
af_group_file
af_group_file
af_lineno
free(buf);
free(buf)
free
free
buf
buf
break;
if (grp == NULL) {      break;    }
grp == NULL
grp
grp
NULL
NULL
{      break;    }
break;
if (af_allow_grent(grp) < 0) {      continue;    }
af_allow_grent(grp) < 0
af_allow_grent(grp)
af_allow_grent
af_allow_grent
grp
grp
0
{      continue;    }
continue;
res = grp;
res = grp
res
res
grp
grp
break;
return res;
res
res
-----joern-----
(14,21,0)
(44,3,0)
(41,12,0)
(38,6,0)
(34,6,0)
(5,6,0)
(32,14,0)
(7,13,0)
(45,12,0)
(9,16,0)
(20,16,0)
(25,19,0)
(12,48,0)
(32,38,0)
(39,8,0)
(9,21,0)
(31,34,0)
(10,41,0)
(15,14,0)
(18,6,0)
(32,6,0)
(41,48,0)
(46,32,0)
(40,6,0)
(11,1,0)
(36,13,0)
(27,42,0)
(52,21,0)
(43,6,0)
(30,11,0)
(19,25,0)
(35,32,0)
(49,19,0)
(8,21,0)
(1,11,0)
(4,1,0)
(28,34,0)
(14,13,0)
(4,42,0)
(29,24,0)
(16,9,0)
(17,14,0)
(1,4,0)
(22,42,0)
(51,8,0)
(21,25,0)
(0,9,0)
(42,4,0)
(26,38,0)
(35,41,0)
(21,13,0)
(50,13,0)
(25,21,0)
(47,19,0)
(33,12,0)
(37,38,0)
(2,13,0)
(14,17,1)
(19,49,1)
(33,45,1)
(9,21,1)
(32,14,1)
(16,20,1)
(39,51,1)
(14,21,1)
(45,1,1)
(15,16,1)
(34,28,1)
(37,34,1)
(16,9,1)
(32,46,1)
(38,26,1)
(10,12,1)
(26,37,1)
(8,39,1)
(17,15,1)
(11,30,1)
(8,21,1)
(22,11,1)
(41,12,1)
(47,52,1)
(29,8,1)
(20,9,1)
(21,25,1)
(42,27,1)
(46,29,1)
(50,23,1)
(1,11,1)
(1,4,1)
(23,1,1)
(23,44,1)
(12,33,1)
(35,41,1)
(27,22,1)
(41,10,1)
(25,19,1)
(52,50,1)
(46,36,1)
(46,23,1)
(0,8,1)
(35,32,1)
(9,0,1)
(30,38,1)
(51,21,1)
(49,47,1)
(44,16,1)
(32,38,1)
(28,31,1)
(36,14,1)
(4,42,1)
(4,11,2)
(32,14,2)
(49,23,2)
(15,16,2)
(44,16,2)
(21,25,2)
(33,1,2)
(32,38,2)
(14,21,2)
(12,1,2)
(8,21,2)
(9,8,2)
(41,12,2)
(1,4,2)
(16,9,2)
(16,8,2)
(9,21,2)
(27,11,2)
(20,8,2)
(35,32,2)
(4,42,2)
(22,11,2)
(29,8,2)
(52,23,2)
(36,16,2)
(17,16,2)
(0,8,2)
(46,1,2)
(51,23,2)
(32,1,2)
(19,23,2)
(25,19,2)
(23,1,2)
(42,11,2)
(50,23,2)
(39,23,2)
(8,23,2)
(41,1,2)
(1,11,2)
(45,1,2)
(21,23,2)
(25,23,2)
(23,16,2)
(10,1,2)
(14,16,2)
(47,23,2)
(35,41,2)
-----------------------------------
(0,grp)
(1,!af_group_file ||\n\\n      !af_group_file->af_file)
(2,if (af_allow_grent(grp)
(3,)
(4,!af_group_file->af_file)
(5,res)
(6,)
(7,if (grp == NULL)
(8,grp == NULL)
(9,af_allow_grent(grp)
(10,NULL)
(11,!af_group_file)
(12,errno = EINVAL)
(13,)
(14,res = grp)
(15,res)
(16,af_allow_grent(grp)
(17,grp)
(18,while (TRUE)
(19,af_group_file->af_file)
(20,0)
(21,grp = fgetgrent(af_group_file->af_file)
(22,af_group_file)
(23,TRUE)
(24,)
(25,fgetgrent(af_group_file->af_file)
(26,NULL)
(27,af_file)
(28,NULL)
(29,break;)
(30,af_group_file)
(31,grp)
(32,return res;)
(33,EINVAL)
(34,*grp = NULL)
(35,RET)
(36,break;)
(37,res)
(38,*res = NULL)
(39,NULL)
(40,grp)
(41,return NULL;)
(42,af_group_file->af_file)
(43,if (!af_group_file ||\n\\n      !af_group_file->af_file)
(44,continue;)
(45,errno)
(46,res)
(47,af_group_file)
(48,)
(49,af_file)
(50,pr_signals_handle()
(51,grp)
(52,grp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^