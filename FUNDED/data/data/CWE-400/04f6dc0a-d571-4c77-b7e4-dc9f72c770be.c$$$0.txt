-----label-----
1
-----code-----
int driver_dispatch(Peer *peer, Message *message) {
        int r;

        if (peer_is_monitor(peer))
                return DRIVER_E_PROTOCOL_VIOLATION;

        r = message_parse_metadata(message);
        if (r > 0)
                return DRIVER_E_PROTOCOL_VIOLATION;
        else if (r < 0)
                return error_fold(r);

        message_stitch_sender(message, peer->id);

        r = driver_dispatch_internal(peer, message);
        switch (r) {
        case DRIVER_E_PEER_NOT_REGISTERED:
        case DRIVER_E_INVALID_MESSAGE:
                return DRIVER_E_PROTOCOL_VIOLATION;
        case DRIVER_E_PEER_ALREADY_REGISTERED:
        case DRIVER_E_UNEXPECTED_FDS:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r));
                break;
        case DRIVER_E_PEER_NOT_YET_REGISTERED:
        case DRIVER_E_UNEXPECTED_PATH:
        case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:
        case DRIVER_E_UNEXPECTED_REPLY:
        case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:
        case DRIVER_E_EXPECTED_REPLY_EXISTS:
        case DRIVER_E_SEND_DENIED:
        case DRIVER_E_RECEIVE_DENIED:
        case DRIVER_E_PEER_NOT_PRIVILEGED:
        case DRIVER_E_NAME_REFUSED:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));
                break;
        case DRIVER_E_UNEXPECTED_INTERFACE:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r));
                break;
        case DRIVER_E_UNEXPECTED_METHOD:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r));
                break;
        case DRIVER_E_UNEXPECTED_PROPERTY:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r));
                break;
        case DRIVER_E_READONLY_PROPERTY:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r));
                break;
        case DRIVER_E_UNEXPECTED_SIGNATURE:
        case DRIVER_E_UNEXPECTED_FLAGS:
        case DRIVER_E_NAME_RESERVED:
        case DRIVER_E_NAME_UNIQUE:
        case DRIVER_E_NAME_INVALID:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r));
                break;
        case DRIVER_E_FORWARD_FAILED:
        case DRIVER_E_QUOTA:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));
                break;
        case DRIVER_E_PEER_NOT_FOUND:
        case DRIVER_E_NAME_NOT_FOUND:
        case DRIVER_E_NAME_OWNER_NOT_FOUND:
        case DRIVER_E_DESTINATION_NOT_FOUND:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r));
                break;
        case DRIVER_E_NAME_NOT_ACTIVATABLE:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r));
                break;
        case DRIVER_E_MATCH_INVALID:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r));
                break;
        case DRIVER_E_MATCH_NOT_FOUND:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r));
                break;
        case DRIVER_E_ADT_NOT_SUPPORTED:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r));
                break;
        case DRIVER_E_SELINUX_NOT_SUPPORTED:
                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r));
                break;
        default:
                break;
        }

        return error_trace(r);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
41,43
41,44
42,43
42,44
43,44
46,47
47,48
49,50
49,51
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
74,76
74,77
75,76
77,78
79,80
81,82
81,83
82,83
84,85
84,86
84,87
84,88
84,89
84,90
84,91
84,92
84,93
84,94
84,95
84,96
84,97
84,98
84,99
84,100
84,101
84,102
84,103
84,104
84,105
84,106
84,107
84,108
84,109
84,110
84,111
84,112
84,113
84,114
84,115
84,116
84,117
84,118
84,119
84,120
84,121
84,122
84,123
84,124
84,125
84,126
84,127
84,128
84,129
84,130
84,131
84,132
84,133
84,134
84,135
84,136
84,137
84,138
84,139
84,140
84,141
84,142
84,143
84,144
84,145
84,146
84,147
84,148
84,149
85,86
86,87
88,89
89,90
91,92
92,93
94,95
95,96
97,98
98,99
100,101
101,102
101,103
102,103
104,105
104,106
104,107
104,108
104,109
105,106
107,108
109,110
109,111
110,111
112,113
115,116
115,117
116,117
118,119
121,122
122,123
124,125
125,126
127,128
128,129
130,131
131,132
133,134
134,135
136,137
137,138
139,140
140,141
142,143
143,144
145,146
146,147
148,149
149,150
151,152
152,153
152,154
153,154
155,156
155,157
155,158
155,159
155,160
156,157
158,159
160,161
160,162
161,162
163,164
166,167
166,168
167,168
169,170
172,173
173,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
179,183
179,184
180,181
182,183
184,185
184,186
185,186
187,188
190,191
190,192
191,192
193,194
196,197
197,198
199,200
200,201
200,202
201,202
203,204
203,205
203,206
203,207
203,208
204,205
206,207
208,209
208,210
209,210
211,212
214,215
214,216
215,216
217,218
220,221
221,222
223,224
224,225
224,226
225,226
227,228
227,229
227,230
227,231
227,232
228,229
230,231
232,233
232,234
233,234
235,236
238,239
238,240
239,240
241,242
244,245
245,246
247,248
248,249
248,250
249,250
251,252
251,253
251,254
251,255
251,256
252,253
254,255
256,257
256,258
257,258
259,260
262,263
262,264
263,264
265,266
268,269
269,270
271,272
272,273
274,275
275,276
277,278
278,279
280,281
281,282
283,284
284,285
284,286
285,286
287,288
287,289
287,290
287,291
287,292
288,289
290,291
292,293
292,294
293,294
295,296
298,299
298,300
299,300
301,302
304,305
305,306
307,308
308,309
310,311
311,312
311,313
312,313
314,315
314,316
314,317
314,318
314,319
315,316
317,318
319,320
319,321
320,321
322,323
325,326
325,327
326,327
328,329
331,332
332,333
334,335
335,336
337,338
338,339
340,341
341,342
343,344
344,345
344,346
345,346
347,348
347,349
347,350
347,351
347,352
348,349
350,351
352,353
352,354
353,354
355,356
358,359
358,360
359,360
361,362
364,365
365,366
367,368
368,369
368,370
369,370
371,372
371,373
371,374
371,375
371,376
372,373
374,375
376,377
376,378
377,378
379,380
382,383
382,384
383,384
385,386
388,389
389,390
391,392
392,393
392,394
393,394
395,396
395,397
395,398
395,399
395,400
396,397
398,399
400,401
400,402
401,402
403,404
406,407
406,408
407,408
409,410
412,413
413,414
415,416
416,417
416,418
417,418
419,420
419,421
419,422
419,423
419,424
420,421
422,423
424,425
424,426
425,426
427,428
430,431
430,432
431,432
433,434
436,437
437,438
439,440
440,441
440,442
441,442
443,444
443,445
443,446
443,447
443,448
444,445
446,447
448,449
448,450
449,450
451,452
454,455
454,456
455,456
457,458
460,461
461,462
463,464
464,465
464,466
465,466
467,468
467,469
467,470
467,471
467,472
468,469
470,471
472,473
472,474
473,474
475,476
478,479
478,480
479,480
481,482
486,487
487,488
487,489
488,489
490,491
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,26,28,31,35,38,40,44,45,48,52,53,57,59,63,65,68,69,73,76,78,80,83,87,90,93,96,99,103,106,108,111,113,114,117,119,120,123,126,129,132,135,138,141,144,147,150,154,157,159,162,164,165,168,170,171,174,178,181,183,186,188,189,192,194,195,198,202,205,207,210,212,213,216,218,219,222,226,229,231,234,236,237,240,242,243,246,250,253,255,258,260,261,264,266,267,270,273,276,279,282,286,289,291,294,296,297,300,302,303,306,309,313,316,318,321,323,324,327,329,330,333,336,339,342,346,349,351,354,356,357,360,362,363,366,370,373,375,378,380,381,384,386,387,390,394,397,399,402,404,405,408,410,411,414,418,421,423,426,428,429,432,434,435,438,442,445,447,450,452,453,456,458,459,462,466,469,471,474,476,477,480,482,483,484,485,489,491
-----computeFrom-----
33,34
33,35
42,43
42,44
50,51
50,52
71,72
71,73
101,102
101,103
152,153
152,154
176,177
176,178
200,201
200,202
224,225
224,226
248,249
248,250
284,285
284,286
311,312
311,313
344,345
344,346
368,369
368,370
392,393
392,394
416,417
416,418
440,441
440,442
464,465
464,466
-----guardedBy-----
52,59
-----guardedByNegation-----
44,59
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;BreakStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int driver_dispatch(Peer *peer, Message *message) {        int r;        if (peer_is_monitor(peer))                return DRIVER_E_PROTOCOL_VIOLATION;        r = message_parse_metadata(message);        if (r > 0)                return DRIVER_E_PROTOCOL_VIOLATION;        else if (r < 0)                return error_fold(r);        message_stitch_sender(message, peer->id);        r = driver_dispatch_internal(peer, message);        switch (r) {        case DRIVER_E_PEER_NOT_REGISTERED:        case DRIVER_E_INVALID_MESSAGE:                return DRIVER_E_PROTOCOL_VIOLATION;        case DRIVER_E_PEER_ALREADY_REGISTERED:        case DRIVER_E_UNEXPECTED_FDS:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_YET_REGISTERED:        case DRIVER_E_UNEXPECTED_PATH:        case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:        case DRIVER_E_UNEXPECTED_REPLY:        case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:        case DRIVER_E_EXPECTED_REPLY_EXISTS:        case DRIVER_E_SEND_DENIED:        case DRIVER_E_RECEIVE_DENIED:        case DRIVER_E_PEER_NOT_PRIVILEGED:        case DRIVER_E_NAME_REFUSED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_INTERFACE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_METHOD:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r));                break;        case DRIVER_E_READONLY_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_SIGNATURE:        case DRIVER_E_UNEXPECTED_FLAGS:        case DRIVER_E_NAME_RESERVED:        case DRIVER_E_NAME_UNIQUE:        case DRIVER_E_NAME_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r));                break;        case DRIVER_E_FORWARD_FAILED:        case DRIVER_E_QUOTA:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_FOUND:        case DRIVER_E_NAME_NOT_FOUND:        case DRIVER_E_NAME_OWNER_NOT_FOUND:        case DRIVER_E_DESTINATION_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r));                break;        case DRIVER_E_NAME_NOT_ACTIVATABLE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r));                break;        case DRIVER_E_ADT_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r));                break;        case DRIVER_E_SELINUX_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r));                break;        default:                break;        }        return error_trace(r);}
int
driver_dispatch(Peer *peer, Message *message)
driver_dispatch
Peer *peer
Peer
Peer
*peer
*
peer
Message *message
Message
Message
*message
*
message
{        int r;        if (peer_is_monitor(peer))                return DRIVER_E_PROTOCOL_VIOLATION;        r = message_parse_metadata(message);        if (r > 0)                return DRIVER_E_PROTOCOL_VIOLATION;        else if (r < 0)                return error_fold(r);        message_stitch_sender(message, peer->id);        r = driver_dispatch_internal(peer, message);        switch (r) {        case DRIVER_E_PEER_NOT_REGISTERED:        case DRIVER_E_INVALID_MESSAGE:                return DRIVER_E_PROTOCOL_VIOLATION;        case DRIVER_E_PEER_ALREADY_REGISTERED:        case DRIVER_E_UNEXPECTED_FDS:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_YET_REGISTERED:        case DRIVER_E_UNEXPECTED_PATH:        case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:        case DRIVER_E_UNEXPECTED_REPLY:        case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:        case DRIVER_E_EXPECTED_REPLY_EXISTS:        case DRIVER_E_SEND_DENIED:        case DRIVER_E_RECEIVE_DENIED:        case DRIVER_E_PEER_NOT_PRIVILEGED:        case DRIVER_E_NAME_REFUSED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_INTERFACE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_METHOD:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r));                break;        case DRIVER_E_READONLY_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_SIGNATURE:        case DRIVER_E_UNEXPECTED_FLAGS:        case DRIVER_E_NAME_RESERVED:        case DRIVER_E_NAME_UNIQUE:        case DRIVER_E_NAME_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r));                break;        case DRIVER_E_FORWARD_FAILED:        case DRIVER_E_QUOTA:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_FOUND:        case DRIVER_E_NAME_NOT_FOUND:        case DRIVER_E_NAME_OWNER_NOT_FOUND:        case DRIVER_E_DESTINATION_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r));                break;        case DRIVER_E_NAME_NOT_ACTIVATABLE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r));                break;        case DRIVER_E_ADT_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r));                break;        case DRIVER_E_SELINUX_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r));                break;        default:                break;        }        return error_trace(r);}
int r;
int r;
int
r
r
if (peer_is_monitor(peer))                return DRIVER_E_PROTOCOL_VIOLATION;
peer_is_monitor(peer)
peer_is_monitor
peer_is_monitor
peer
peer
return DRIVER_E_PROTOCOL_VIOLATION;
DRIVER_E_PROTOCOL_VIOLATION
DRIVER_E_PROTOCOL_VIOLATION
r = message_parse_metadata(message);
r = message_parse_metadata(message)
r
r
message_parse_metadata(message)
message_parse_metadata
message_parse_metadata
message
message
if (r > 0)                return DRIVER_E_PROTOCOL_VIOLATION;        else if (r < 0)                return error_fold(r);
r > 0
r
r
0
return DRIVER_E_PROTOCOL_VIOLATION;
DRIVER_E_PROTOCOL_VIOLATION
DRIVER_E_PROTOCOL_VIOLATION
if (r < 0)                return error_fold(r);
r < 0
r
r
0
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
message_stitch_sender(message, peer->id);
message_stitch_sender(message, peer->id)
message_stitch_sender
message_stitch_sender
message
message
peer->id
peer
peer
id
r = driver_dispatch_internal(peer, message);
r = driver_dispatch_internal(peer, message)
r
r
driver_dispatch_internal(peer, message)
driver_dispatch_internal
driver_dispatch_internal
peer
peer
message
message
switch (r) {        case DRIVER_E_PEER_NOT_REGISTERED:        case DRIVER_E_INVALID_MESSAGE:                return DRIVER_E_PROTOCOL_VIOLATION;        case DRIVER_E_PEER_ALREADY_REGISTERED:        case DRIVER_E_UNEXPECTED_FDS:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_YET_REGISTERED:        case DRIVER_E_UNEXPECTED_PATH:        case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:        case DRIVER_E_UNEXPECTED_REPLY:        case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:        case DRIVER_E_EXPECTED_REPLY_EXISTS:        case DRIVER_E_SEND_DENIED:        case DRIVER_E_RECEIVE_DENIED:        case DRIVER_E_PEER_NOT_PRIVILEGED:        case DRIVER_E_NAME_REFUSED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_INTERFACE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_METHOD:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r));                break;        case DRIVER_E_READONLY_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_SIGNATURE:        case DRIVER_E_UNEXPECTED_FLAGS:        case DRIVER_E_NAME_RESERVED:        case DRIVER_E_NAME_UNIQUE:        case DRIVER_E_NAME_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r));                break;        case DRIVER_E_FORWARD_FAILED:        case DRIVER_E_QUOTA:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_FOUND:        case DRIVER_E_NAME_NOT_FOUND:        case DRIVER_E_NAME_OWNER_NOT_FOUND:        case DRIVER_E_DESTINATION_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r));                break;        case DRIVER_E_NAME_NOT_ACTIVATABLE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r));                break;        case DRIVER_E_ADT_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r));                break;        case DRIVER_E_SELINUX_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r));                break;        default:                break;        }
r
r
{        case DRIVER_E_PEER_NOT_REGISTERED:        case DRIVER_E_INVALID_MESSAGE:                return DRIVER_E_PROTOCOL_VIOLATION;        case DRIVER_E_PEER_ALREADY_REGISTERED:        case DRIVER_E_UNEXPECTED_FDS:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_YET_REGISTERED:        case DRIVER_E_UNEXPECTED_PATH:        case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:        case DRIVER_E_UNEXPECTED_REPLY:        case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:        case DRIVER_E_EXPECTED_REPLY_EXISTS:        case DRIVER_E_SEND_DENIED:        case DRIVER_E_RECEIVE_DENIED:        case DRIVER_E_PEER_NOT_PRIVILEGED:        case DRIVER_E_NAME_REFUSED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_INTERFACE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_METHOD:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r));                break;        case DRIVER_E_READONLY_PROPERTY:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r));                break;        case DRIVER_E_UNEXPECTED_SIGNATURE:        case DRIVER_E_UNEXPECTED_FLAGS:        case DRIVER_E_NAME_RESERVED:        case DRIVER_E_NAME_UNIQUE:        case DRIVER_E_NAME_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r));                break;        case DRIVER_E_FORWARD_FAILED:        case DRIVER_E_QUOTA:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                break;        case DRIVER_E_PEER_NOT_FOUND:        case DRIVER_E_NAME_NOT_FOUND:        case DRIVER_E_NAME_OWNER_NOT_FOUND:        case DRIVER_E_DESTINATION_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r));                break;        case DRIVER_E_NAME_NOT_ACTIVATABLE:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_INVALID:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r));                break;        case DRIVER_E_MATCH_NOT_FOUND:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r));                break;        case DRIVER_E_ADT_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r));                break;        case DRIVER_E_SELINUX_NOT_SUPPORTED:                r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r));                break;        default:                break;        }
case DRIVER_E_PEER_NOT_REGISTERED:
DRIVER_E_PEER_NOT_REGISTERED
DRIVER_E_PEER_NOT_REGISTERED
case DRIVER_E_INVALID_MESSAGE:
DRIVER_E_INVALID_MESSAGE
DRIVER_E_INVALID_MESSAGE
return DRIVER_E_PROTOCOL_VIOLATION;
DRIVER_E_PROTOCOL_VIOLATION
DRIVER_E_PROTOCOL_VIOLATION
case DRIVER_E_PEER_ALREADY_REGISTERED:
DRIVER_E_PEER_ALREADY_REGISTERED
DRIVER_E_PEER_ALREADY_REGISTERED
case DRIVER_E_UNEXPECTED_FDS:
DRIVER_E_UNEXPECTED_FDS
DRIVER_E_UNEXPECTED_FDS
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.Failed", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.Failed"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_PEER_NOT_YET_REGISTERED:
DRIVER_E_PEER_NOT_YET_REGISTERED
DRIVER_E_PEER_NOT_YET_REGISTERED
case DRIVER_E_UNEXPECTED_PATH:
DRIVER_E_UNEXPECTED_PATH
DRIVER_E_UNEXPECTED_PATH
case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:
DRIVER_E_UNEXPECTED_MESSAGE_TYPE
DRIVER_E_UNEXPECTED_MESSAGE_TYPE
case DRIVER_E_UNEXPECTED_REPLY:
DRIVER_E_UNEXPECTED_REPLY
DRIVER_E_UNEXPECTED_REPLY
case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:
DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE
DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE
case DRIVER_E_EXPECTED_REPLY_EXISTS:
DRIVER_E_EXPECTED_REPLY_EXISTS
DRIVER_E_EXPECTED_REPLY_EXISTS
case DRIVER_E_SEND_DENIED:
DRIVER_E_SEND_DENIED
DRIVER_E_SEND_DENIED
case DRIVER_E_RECEIVE_DENIED:
DRIVER_E_RECEIVE_DENIED
DRIVER_E_RECEIVE_DENIED
case DRIVER_E_PEER_NOT_PRIVILEGED:
DRIVER_E_PEER_NOT_PRIVILEGED
DRIVER_E_PEER_NOT_PRIVILEGED
case DRIVER_E_NAME_REFUSED:
DRIVER_E_NAME_REFUSED
DRIVER_E_NAME_REFUSED
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.AccessDenied"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_UNEXPECTED_INTERFACE:
DRIVER_E_UNEXPECTED_INTERFACE
DRIVER_E_UNEXPECTED_INTERFACE
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownInterface", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.UnknownInterface"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_UNEXPECTED_METHOD:
DRIVER_E_UNEXPECTED_METHOD
DRIVER_E_UNEXPECTED_METHOD
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnknownMethod", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.UnknownMethod"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_UNEXPECTED_PROPERTY:
DRIVER_E_UNEXPECTED_PROPERTY
DRIVER_E_UNEXPECTED_PROPERTY
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.UnkonwnProperty", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.UnkonwnProperty"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_READONLY_PROPERTY:
DRIVER_E_READONLY_PROPERTY
DRIVER_E_READONLY_PROPERTY
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.PropertyReadOnly", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.PropertyReadOnly"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_UNEXPECTED_SIGNATURE:
DRIVER_E_UNEXPECTED_SIGNATURE
DRIVER_E_UNEXPECTED_SIGNATURE
case DRIVER_E_UNEXPECTED_FLAGS:
DRIVER_E_UNEXPECTED_FLAGS
DRIVER_E_UNEXPECTED_FLAGS
case DRIVER_E_NAME_RESERVED:
DRIVER_E_NAME_RESERVED
DRIVER_E_NAME_RESERVED
case DRIVER_E_NAME_UNIQUE:
DRIVER_E_NAME_UNIQUE
DRIVER_E_NAME_UNIQUE
case DRIVER_E_NAME_INVALID:
DRIVER_E_NAME_INVALID
DRIVER_E_NAME_INVALID
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.InvalidArgs", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.InvalidArgs"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_FORWARD_FAILED:
DRIVER_E_FORWARD_FAILED
DRIVER_E_FORWARD_FAILED
case DRIVER_E_QUOTA:
DRIVER_E_QUOTA
DRIVER_E_QUOTA
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.LimitsExceeded"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_PEER_NOT_FOUND:
DRIVER_E_PEER_NOT_FOUND
DRIVER_E_PEER_NOT_FOUND
case DRIVER_E_NAME_NOT_FOUND:
DRIVER_E_NAME_NOT_FOUND
DRIVER_E_NAME_NOT_FOUND
case DRIVER_E_NAME_OWNER_NOT_FOUND:
DRIVER_E_NAME_OWNER_NOT_FOUND
DRIVER_E_NAME_OWNER_NOT_FOUND
case DRIVER_E_DESTINATION_NOT_FOUND:
DRIVER_E_DESTINATION_NOT_FOUND
DRIVER_E_DESTINATION_NOT_FOUND
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.NameHasNoOwner", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.NameHasNoOwner"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_NAME_NOT_ACTIVATABLE:
DRIVER_E_NAME_NOT_ACTIVATABLE
DRIVER_E_NAME_NOT_ACTIVATABLE
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.ServiceUnknown", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.ServiceUnknown"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_MATCH_INVALID:
DRIVER_E_MATCH_INVALID
DRIVER_E_MATCH_INVALID
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleInvalid", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.MatchRuleInvalid"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_MATCH_NOT_FOUND:
DRIVER_E_MATCH_NOT_FOUND
DRIVER_E_MATCH_NOT_FOUND
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.MatchRuleNotFound", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.MatchRuleNotFound"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_ADT_NOT_SUPPORTED:
DRIVER_E_ADT_NOT_SUPPORTED
DRIVER_E_ADT_NOT_SUPPORTED
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.AdtAuditDataUnknown", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.AdtAuditDataUnknown"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
case DRIVER_E_SELINUX_NOT_SUPPORTED:
DRIVER_E_SELINUX_NOT_SUPPORTED
DRIVER_E_SELINUX_NOT_SUPPORTED
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r));
r = driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r))
r
r
driver_send_error(peer, message_read_serial(message), "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", driver_error_to_string(r))
driver_send_error
driver_send_error
peer
peer
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
break;
default:
break;
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
-----joern-----
(144,129,0)
(185,80,0)
(191,71,0)
(29,10,0)
(32,138,0)
(80,154,0)
(71,22,0)
(158,14,0)
(48,8,0)
(4,160,0)
(98,181,0)
(146,9,0)
(187,36,0)
(32,181,0)
(9,8,0)
(192,15,0)
(53,59,0)
(59,219,0)
(127,38,0)
(204,60,0)
(92,69,0)
(84,71,0)
(163,172,0)
(37,41,0)
(87,112,0)
(212,6,0)
(81,60,0)
(199,154,0)
(138,182,0)
(205,79,0)
(147,1,0)
(23,181,0)
(158,207,0)
(156,90,0)
(43,6,0)
(176,4,0)
(49,181,0)
(99,98,0)
(140,181,0)
(192,219,0)
(27,77,0)
(103,181,0)
(154,40,0)
(172,219,0)
(71,191,0)
(14,92,0)
(91,181,0)
(120,69,0)
(19,38,0)
(77,212,0)
(100,181,0)
(54,158,0)
(186,40,0)
(76,192,0)
(45,34,0)
(133,44,0)
(166,77,0)
(110,1,0)
(43,8,0)
(110,11,0)
(85,128,0)
(34,41,0)
(216,181,0)
(180,132,0)
(158,1,0)
(166,88,0)
(122,8,0)
(10,77,0)
(170,138,0)
(75,62,0)
(152,131,0)
(189,181,0)
(70,81,0)
(52,181,0)
(6,40,0)
(127,78,0)
(193,181,0)
(206,138,0)
(25,6,0)
(112,88,0)
(143,16,0)
(111,181,0)
(117,181,0)
(60,219,0)
(12,6,0)
(148,12,0)
(123,181,0)
(12,88,0)
(207,40,0)
(153,160,0)
(90,4,0)
(65,192,0)
(102,181,0)
(128,40,0)
(59,36,0)
(183,59,0)
(129,144,0)
(137,181,0)
(15,192,0)
(121,166,0)
(60,168,0)
(4,219,0)
(56,11,0)
(21,43,0)
(132,216,0)
(157,134,0)
(127,161,0)
(82,181,0)
(160,181,0)
(61,129,0)
(16,219,0)
(41,34,0)
(132,219,0)
(80,161,0)
(13,71,0)
(58,129,0)
(158,62,0)
(192,139,0)
(158,98,0)
(105,181,0)
(134,6,0)
(68,181,0)
(135,181,0)
(39,181,0)
(55,181,0)
(119,102,0)
(31,181,0)
(184,181,0)
(77,219,0)
(97,60,0)
(47,63,0)
(67,181,0)
(28,137,0)
(158,81,0)
(116,212,0)
(208,63,0)
(218,181,0)
(160,4,0)
(216,132,0)
(165,40,0)
(139,192,0)
(79,154,0)
(89,34,0)
(198,6,0)
(190,25,0)
(60,81,0)
(8,219,0)
(1,110,0)
(129,219,0)
(131,4,0)
(138,219,0)
(74,71,0)
(107,40,0)
(33,110,0)
(102,34,0)
(42,14,0)
(6,12,0)
(158,48,0)
(213,181,0)
(127,82,0)
(202,181,0)
(104,92,0)
(201,110,0)
(115,77,0)
(34,219,0)
(79,88,0)
(180,88,0)
(44,154,0)
(59,134,0)
(63,219,0)
(64,24,0)
(62,181,0)
(36,59,0)
(59,137,0)
(35,182,0)
(12,219,0)
(95,181,0)
(17,191,0)
(4,90,0)
(8,9,0)
(214,45,0)
(164,4,0)
(200,181,0)
(178,181,0)
(8,48,0)
(173,181,0)
(167,181,0)
(36,88,0)
(210,181,0)
(101,181,0)
(118,181,0)
(209,144,0)
(63,62,0)
(71,219,0)
(25,192,0)
(188,181,0)
(11,110,0)
(132,180,0)
(34,45,0)
(18,15,0)
(109,114,0)
(96,12,0)
(149,32,0)
(81,181,0)
(141,44,0)
(11,6,0)
(132,203,0)
(71,13,0)
(13,88,0)
(10,181,0)
(158,10,0)
(47,88,0)
(203,6,0)
(51,203,0)
(33,88,0)
(26,181,0)
(198,138,0)
(114,154,0)
(204,6,0)
(66,47,0)
(154,79,0)
(172,128,0)
(158,191,0)
(158,102,0)
(41,88,0)
(110,219,0)
(34,102,0)
(158,137,0)
(62,63,0)
(196,181,0)
(168,88,0)
(0,181,0)
(108,33,0)
(139,181,0)
(179,40,0)
(48,181,0)
(136,181,0)
(77,166,0)
(138,198,0)
(24,129,0)
(177,60,0)
(22,6,0)
(144,6,0)
(212,77,0)
(57,82,0)
(112,92,0)
(158,216,0)
(128,172,0)
(171,216,0)
(137,59,0)
(158,139,0)
(98,129,0)
(30,22,0)
(72,139,0)
(86,34,0)
(15,88,0)
(92,14,0)
(134,59,0)
(92,112,0)
(50,181,0)
(1,181,0)
(90,6,0)
(182,88,0)
(92,219,0)
(145,181,0)
(158,32,0)
(124,6,0)
(69,6,0)
(128,88,0)
(175,181,0)
(130,181,0)
(77,10,0)
(24,88,0)
(94,181,0)
(197,63,0)
(126,181,0)
(142,181,0)
(150,114,0)
(5,180,0)
(4,131,0)
(69,92,0)
(14,181,0)
(106,78,0)
(22,71,0)
(124,63,0)
(3,8,0)
(191,181,0)
(127,207,0)
(131,88,0)
(162,181,0)
(158,160,0)
(83,110,0)
(158,6,0)
(182,138,0)
(217,132,0)
(110,33,0)
(46,13,0)
(129,98,0)
(129,24,0)
(168,60,0)
(20,204,0)
(60,204,0)
(63,124,0)
(159,198,0)
(73,48,0)
(45,6,0)
(174,181,0)
(9,88,0)
(194,168,0)
(125,181,0)
(113,92,0)
(8,43,0)
(192,25,0)
(63,47,0)
(203,132,0)
(155,124,0)
(211,172,0)
(138,32,0)
(195,181,0)
(215,6,0)
(7,181,0)
(151,181,0)
(169,132,0)
(93,181,0)
(147,2,1)
(69,6,1)
(18,65,1)
(108,83,1)
(158,160,1)
(5,217,1)
(124,6,1)
(65,72,1)
(183,28,1)
(127,38,1)
(122,73,1)
(63,219,1)
(79,88,1)
(115,166,1)
(198,6,1)
(131,152,1)
(8,9,1)
(187,183,1)
(129,144,1)
(217,171,1)
(197,75,1)
(212,6,1)
(54,125,1)
(127,207,1)
(36,88,1)
(138,182,1)
(59,36,1)
(36,187,1)
(169,180,1)
(46,74,1)
(54,101,1)
(155,208,1)
(132,219,1)
(54,145,1)
(204,20,1)
(3,9,1)
(4,131,1)
(116,115,1)
(158,216,1)
(51,169,1)
(212,116,1)
(114,154,1)
(20,97,1)
(199,16,1)
(33,108,1)
(109,150,1)
(112,88,1)
(194,177,1)
(204,6,1)
(25,190,1)
(44,133,1)
(137,59,1)
(158,6,1)
(97,168,1)
(54,50,1)
(6,12,1)
(41,88,1)
(59,219,1)
(192,15,1)
(85,114,1)
(158,48,1)
(45,214,1)
(92,219,1)
(166,121,1)
(198,159,1)
(52,2,1)
(180,5,1)
(14,92,1)
(154,79,1)
(74,17,1)
(176,153,1)
(42,2,1)
(166,88,1)
(73,2,1)
(56,201,1)
(120,104,1)
(92,112,1)
(201,33,1)
(119,2,1)
(44,154,1)
(146,122,1)
(63,47,1)
(4,90,1)
(158,54,1)
(84,13,1)
(207,158,1)
(172,219,1)
(157,53,1)
(171,2,1)
(22,30,1)
(8,219,1)
(75,2,1)
(45,6,1)
(111,102,1)
(69,120,1)
(34,45,1)
(110,33,1)
(192,219,1)
(83,147,1)
(203,6,1)
(57,2,1)
(50,216,1)
(158,14,1)
(156,164,1)
(133,141,1)
(71,219,1)
(80,154,1)
(16,143,1)
(53,36,1)
(34,219,1)
(158,81,1)
(178,14,1)
(128,88,1)
(19,44,1)
(192,25,1)
(168,194,1)
(90,156,1)
(158,102,1)
(180,88,1)
(22,6,1)
(106,16,1)
(129,24,1)
(128,172,1)
(58,99,1)
(99,2,1)
(30,84,1)
(112,87,1)
(54,218,1)
(8,43,1)
(127,161,1)
(134,157,1)
(158,137,1)
(161,80,1)
(185,114,1)
(25,6,1)
(159,170,1)
(125,62,1)
(12,96,1)
(76,15,1)
(151,139,1)
(124,155,1)
(54,49,1)
(60,219,1)
(61,24,1)
(54,103,1)
(98,129,1)
(77,166,1)
(24,88,1)
(114,109,1)
(4,219,1)
(71,22,1)
(29,2,1)
(15,88,1)
(66,197,1)
(54,0,1)
(79,205,1)
(54,140,1)
(132,203,1)
(138,219,1)
(77,219,1)
(54,178,1)
(127,78,1)
(0,81,1)
(209,61,1)
(86,41,1)
(26,191,1)
(15,18,1)
(54,52,1)
(32,138,1)
(129,219,1)
(150,44,1)
(47,66,1)
(205,199,1)
(11,56,1)
(11,6,1)
(190,76,1)
(21,3,1)
(121,27,1)
(141,154,1)
(90,6,1)
(134,6,1)
(49,1,1)
(138,198,1)
(71,13,1)
(54,111,1)
(132,180,1)
(214,86,1)
(82,57,1)
(13,46,1)
(218,160,1)
(158,62,1)
(102,34,1)
(203,51,1)
(177,70,1)
(43,21,1)
(158,32,1)
(160,4,1)
(60,204,1)
(110,219,1)
(144,6,1)
(152,176,1)
(140,10,1)
(211,85,1)
(78,106,1)
(12,219,1)
(158,98,1)
(2,6,1)
(145,137,1)
(158,139,1)
(167,98,1)
(33,88,1)
(9,146,1)
(163,211,1)
(17,2,1)
(144,209,1)
(103,48,1)
(62,63,1)
(16,219,1)
(89,119,1)
(216,132,1)
(43,6,1)
(64,58,1)
(60,168,1)
(41,37,1)
(104,112,1)
(28,2,1)
(148,215,1)
(1,110,1)
(80,185,1)
(10,77,1)
(37,89,1)
(215,128,1)
(24,64,1)
(158,10,1)
(63,124,1)
(96,148,1)
(13,88,1)
(12,88,1)
(27,29,1)
(168,88,1)
(77,212,1)
(153,2,1)
(54,167,1)
(70,2,1)
(127,82,1)
(170,182,1)
(35,206,1)
(191,71,1)
(48,8,1)
(182,35,1)
(158,191,1)
(81,60,1)
(34,41,1)
(59,134,1)
(9,88,1)
(139,192,1)
(158,1,1)
(101,32,1)
(149,2,1)
(54,26,1)
(92,69,1)
(54,151,1)
(87,113,1)
(113,42,1)
(110,11,1)
(206,149,1)
(182,88,1)
(38,19,1)
(72,2,1)
(208,47,1)
(164,131,1)
(131,88,1)
(47,88,1)
(172,163,1)
(8,9,2)
(60,204,2)
(10,77,2)
(47,2,2)
(92,112,2)
(114,44,2)
(155,2,2)
(140,2,2)
(71,2,2)
(110,2,2)
(77,219,2)
(77,166,2)
(73,2,2)
(6,114,2)
(66,2,2)
(49,2,2)
(57,2,2)
(138,219,2)
(158,10,2)
(25,2,2)
(160,4,2)
(211,114,2)
(26,2,2)
(103,2,2)
(38,44,2)
(17,2,2)
(128,114,2)
(132,2,2)
(158,62,2)
(116,2,2)
(12,88,2)
(212,6,2)
(90,2,2)
(16,219,2)
(29,2,2)
(24,88,2)
(137,2,2)
(163,114,2)
(108,2,2)
(56,2,2)
(138,182,2)
(59,2,2)
(158,102,2)
(129,24,2)
(134,2,2)
(34,2,2)
(14,2,2)
(75,2,2)
(132,203,2)
(21,2,2)
(102,34,2)
(111,2,2)
(4,90,2)
(121,2,2)
(127,78,2)
(30,2,2)
(152,2,2)
(138,2,2)
(15,2,2)
(161,114,2)
(120,2,2)
(11,2,2)
(183,2,2)
(114,154,2)
(63,47,2)
(14,92,2)
(19,44,2)
(217,2,2)
(71,13,2)
(109,44,2)
(191,2,2)
(22,6,2)
(71,219,2)
(110,33,2)
(83,2,2)
(65,2,2)
(127,38,2)
(44,16,2)
(216,2,2)
(127,161,2)
(119,2,2)
(104,2,2)
(58,2,2)
(127,82,2)
(199,16,2)
(138,198,2)
(124,6,2)
(34,41,2)
(194,2,2)
(48,8,2)
(34,219,2)
(137,59,2)
(86,2,2)
(167,2,2)
(150,44,2)
(127,207,2)
(60,168,2)
(62,63,2)
(22,2,2)
(12,114,2)
(42,2,2)
(146,2,2)
(133,16,2)
(92,2,2)
(147,2,2)
(177,2,2)
(158,160,2)
(139,192,2)
(63,219,2)
(53,2,2)
(129,2,2)
(141,16,2)
(144,2,2)
(36,2,2)
(113,2,2)
(10,2,2)
(80,154,2)
(1,2,2)
(208,2,2)
(33,88,2)
(3,2,2)
(203,2,2)
(180,2,2)
(99,2,2)
(13,2,2)
(205,16,2)
(154,16,2)
(158,1,2)
(87,2,2)
(45,6,2)
(164,2,2)
(218,2,2)
(124,2,2)
(43,6,2)
(4,219,2)
(50,2,2)
(89,2,2)
(46,2,2)
(192,219,2)
(158,2,2)
(149,2,2)
(129,219,2)
(204,2,2)
(60,2,2)
(169,2,2)
(20,2,2)
(115,2,2)
(18,2,2)
(92,69,2)
(166,88,2)
(59,219,2)
(8,43,2)
(4,2,2)
(106,16,2)
(158,139,2)
(81,2,2)
(35,2,2)
(101,2,2)
(2,114,2)
(41,2,2)
(110,219,2)
(125,2,2)
(61,2,2)
(54,2,2)
(112,2,2)
(4,131,2)
(96,114,2)
(158,191,2)
(168,2,2)
(8,219,2)
(172,219,2)
(198,2,2)
(84,2,2)
(77,212,2)
(158,137,2)
(51,2,2)
(154,79,2)
(64,2,2)
(158,14,2)
(204,6,2)
(5,2,2)
(212,2,2)
(187,2,2)
(27,2,2)
(41,88,2)
(79,88,2)
(170,2,2)
(72,2,2)
(69,6,2)
(144,6,2)
(25,6,2)
(158,216,2)
(132,180,2)
(198,6,2)
(153,2,2)
(159,2,2)
(145,2,2)
(132,219,2)
(0,2,2)
(160,2,2)
(180,88,2)
(70,2,2)
(148,114,2)
(215,114,2)
(1,110,2)
(60,219,2)
(201,2,2)
(79,16,2)
(112,88,2)
(81,60,2)
(36,88,2)
(12,219,2)
(45,2,2)
(110,11,2)
(8,2,2)
(190,2,2)
(44,154,2)
(158,48,2)
(216,132,2)
(131,2,2)
(62,2,2)
(171,2,2)
(77,2,2)
(34,45,2)
(129,144,2)
(134,6,2)
(158,98,2)
(128,172,2)
(128,88,2)
(151,2,2)
(158,81,2)
(71,22,2)
(52,2,2)
(80,114,2)
(192,25,2)
(97,2,2)
(182,2,2)
(32,2,2)
(203,6,2)
(139,2,2)
(158,32,2)
(185,114,2)
(172,114,2)
(69,2,2)
(206,2,2)
(63,124,2)
(197,2,2)
(9,2,2)
(192,2,2)
(47,88,2)
(11,6,2)
(82,2,2)
(131,88,2)
(98,129,2)
(166,2,2)
(176,2,2)
(85,114,2)
(90,6,2)
(207,2,2)
(158,6,2)
(28,2,2)
(92,219,2)
(6,12,2)
(63,2,2)
(9,88,2)
(192,15,2)
(178,2,2)
(37,2,2)
(157,2,2)
(191,71,2)
(74,2,2)
(209,2,2)
(122,2,2)
(13,88,2)
(78,16,2)
(48,2,2)
(156,2,2)
(76,2,2)
(33,2,2)
(24,2,2)
(214,2,2)
(168,88,2)
(32,138,2)
(59,36,2)
(59,134,2)
(15,88,2)
(102,2,2)
(98,2,2)
(182,88,2)
(43,2,2)
-----------------------------------
(0,break;)
(1,r = driver_send_error(peer, message_read_serial(message)
(2,r)
(3,"org.freedesktop.DBus.Error.MatchRuleInvalid")
(4,driver_send_error(peer, message_read_serial(message)
(5,message)
(6,r = driver_dispatch_internal(peer, message)
(7,case DRIVER_E_UNEXPECTED_REPLY:)
(8,driver_send_error(peer, message_read_serial(message)
(9,message_read_serial(message)
(10,r = driver_send_error(peer, message_read_serial(message)
(11,driver_error_to_string(r)
(12,driver_dispatch_internal(peer, message)
(13,message_read_serial(message)
(14,r = driver_send_error(peer, message_read_serial(message)
(15,message_read_serial(message)
(16,peer_is_monitor(peer)
(17,r)
(18,message)
(19,DRIVER_E_PROTOCOL_VIOLATION)
(20,r)
(21,r)
(22,driver_error_to_string(r)
(23,case DRIVER_E_UNEXPECTED_FDS:)
(24,message_read_serial(message)
(25,driver_error_to_string(r)
(26,break;)
(27,peer)
(28,r)
(29,r)
(30,r)
(31,case DRIVER_E_NAME_RESERVED:)
(32,r = driver_send_error(peer, message_read_serial(message)
(33,message_read_serial(message)
(34,driver_send_error(peer, message_read_serial(message)
(35,message)
(36,message_read_serial(message)
(37,message)
(38,return DRIVER_E_PROTOCOL_VIOLATION;)
(39,default:)
(40,)
(41,message_read_serial(message)
(42,r)
(43,driver_error_to_string(r)
(44,r > 0)
(45,driver_error_to_string(r)
(46,message)
(47,message_read_serial(message)
(48,r = driver_send_error(peer, message_read_serial(message)
(49,break;)
(50,break;)
(51,r)
(52,break;)
(53,"org.freedesktop.DBus.Error.PropertyReadOnly")
(54,r)
(55,case DRIVER_E_UNEXPECTED_PATH:)
(56,r)
(57,DRIVER_E_PROTOCOL_VIOLATION)
(58,peer)
(59,driver_send_error(peer, message_read_serial(message)
(60,driver_send_error(peer, message_read_serial(message)
(61,"org.freedesktop.DBus.Error.UnknownMethod")
(62,r = driver_send_error(peer, message_read_serial(message)
(63,driver_send_error(peer, message_read_serial(message)
(64,message)
(65,peer)
(66,message)
(67,case DRIVER_E_READONLY_PROPERTY:)
(68,case DRIVER_E_PEER_NOT_REGISTERED:)
(69,driver_error_to_string(r)
(70,r)
(71,driver_send_error(peer, message_read_serial(message)
(72,r)
(73,r)
(74,peer)
(75,r)
(76,"org.freedesktop.DBus.Error.UnkonwnProperty")
(77,driver_send_error(peer, message_read_serial(message)
(78,return DRIVER_E_PROTOCOL_VIOLATION;)
(79,message_parse_metadata(message)
(80,error_fold(r)
(81,r = driver_send_error(peer, message_read_serial(message)
(82,return DRIVER_E_PROTOCOL_VIOLATION;)
(83,peer)
(84,"org.freedesktop.DBus.Error.AccessDenied")
(85,message)
(86,"org.freedesktop.DBus.Error.AdtAuditDataUnknown")
(87,message)
(88,Message *message)
(89,peer)
(90,driver_error_to_string(r)
(91,case DRIVER_E_UNEXPECTED_PROPERTY:)
(92,driver_send_error(peer, message_read_serial(message)
(93,case DRIVER_E_PEER_ALREADY_REGISTERED:)
(94,case DRIVER_E_INVALID_MESSAGE:)
(95,case DRIVER_E_SELINUX_NOT_SUPPORTED:)
(96,message)
(97,"org.freedesktop.DBus.Error.MatchRuleNotFound")
(98,r = driver_send_error(peer, message_read_serial(message)
(99,r)
(100,case DRIVER_E_MATCH_NOT_FOUND:)
(101,break;)
(102,r = driver_send_error(peer, message_read_serial(message)
(103,break;)
(104,"org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown")
(105,case DRIVER_E_UNEXPECTED_ENVIRONMENT_UPDATE:)
(106,DRIVER_E_PROTOCOL_VIOLATION)
(107,if (peer_is_monitor(peer)
(108,message)
(109,0)
(110,driver_send_error(peer, message_read_serial(message)
(111,break;)
(112,message_read_serial(message)
(113,peer)
(114,r < 0)
(115,"org.freedesktop.DBus.Error.UnknownInterface")
(116,r)
(117,case DRIVER_E_NAME_NOT_FOUND:)
(118,case DRIVER_E_ADT_NOT_SUPPORTED:)
(119,r)
(120,r)
(121,message)
(122,peer)
(123,case DRIVER_E_UNEXPECTED_METHOD:)
(124,driver_error_to_string(r)
(125,break;)
(126,case DRIVER_E_DESTINATION_NOT_FOUND:)
(127,RET)
(128,message_stitch_sender(message, peer->id)
(129,driver_send_error(peer, message_read_serial(message)
(130,case DRIVER_E_NAME_INVALID:)
(131,message_read_serial(message)
(132,driver_send_error(peer, message_read_serial(message)
(133,0)
(134,driver_error_to_string(r)
(135,case DRIVER_E_MATCH_INVALID:)
(136,case DRIVER_E_UNEXPECTED_INTERFACE:)
(137,r = driver_send_error(peer, message_read_serial(message)
(138,driver_send_error(peer, message_read_serial(message)
(139,r = driver_send_error(peer, message_read_serial(message)
(140,break;)
(141,r)
(142,case DRIVER_E_NAME_OWNER_NOT_FOUND:)
(143,peer)
(144,driver_error_to_string(r)
(145,break;)
(146,message)
(147,r)
(148,peer)
(149,r)
(150,r)
(151,break;)
(152,message)
(153,r)
(154,r = message_parse_metadata(message)
(155,r)
(156,r)
(157,r)
(158,error_trace(r)
(159,r)
(160,r = driver_send_error(peer, message_read_serial(message)
(161,return error_fold(r)
(162,case DRIVER_E_UNEXPECTED_FLAGS:)
(163,id)
(164,"org.freedesktop.DBus.Error.ServiceUnknown")
(165,if (r > 0)
(166,message_read_serial(message)
(167,break;)
(168,message_read_serial(message)
(169,"org.freedesktop.DBus.Error.Failed")
(170,"org.freedesktop.DBus.Error.InvalidArgs")
(171,r)
(172,peer->id)
(173,case DRIVER_E_NAME_NOT_ACTIVATABLE:)
(174,case DRIVER_E_EXPECTED_REPLY_EXISTS:)
(175,case DRIVER_E_PEER_NOT_YET_REGISTERED:)
(176,peer)
(177,peer)
(178,break;)
(179,switch (r)
(180,message_read_serial(message)
(181,)
(182,message_read_serial(message)
(183,peer)
(184,case DRIVER_E_FORWARD_FAILED:)
(185,r)
(186,r)
(187,message)
(188,case DRIVER_E_UNEXPECTED_MESSAGE_TYPE:)
(189,case DRIVER_E_QUOTA:)
(190,r)
(191,r = driver_send_error(peer, message_read_serial(message)
(192,driver_send_error(peer, message_read_serial(message)
(193,case DRIVER_E_NAME_UNIQUE:)
(194,message)
(195,case DRIVER_E_NAME_REFUSED:)
(196,case DRIVER_E_SEND_DENIED:)
(197,peer)
(198,driver_error_to_string(r)
(199,r)
(200,case DRIVER_E_PEER_NOT_FOUND:)
(201,"org.freedesktop.DBus.Error.LimitsExceeded")
(202,case DRIVER_E_PEER_NOT_PRIVILEGED:)
(203,driver_error_to_string(r)
(204,driver_error_to_string(r)
(205,message)
(206,peer)
(207,return error_trace(r)
(208,"org.freedesktop.DBus.Error.NameHasNoOwner")
(209,r)
(210,case DRIVER_E_RECEIVE_DENIED:)
(211,peer)
(212,driver_error_to_string(r)
(213,case DRIVER_E_UNEXPECTED_SIGNATURE:)
(214,r)
(215,r)
(216,r = driver_send_error(peer, message_read_serial(message)
(217,peer)
(218,break;)
(219,Peer *peer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^