-----label-----
1
-----code-----
char **ftpglob(register char *v, boolean_t check_ncargs)
{
    char agpath[BUFSIZ];
    char *vv[2];

    if (agargv == NULL) {
	agargv = (char **) malloc(GAVSIZ * sizeof (char *));
	if (agargv == NULL) {
	    fatal("Out of memory");
	}
	agargv_size = GAVSIZ;
    }
    fixpath(v);
    if (v[0] == '\0')
	v = ".";
    else if ((strlen(v) > 1) && (v[strlen(v) - 1] == '/'))
	v[strlen(v) - 1] = '\0';

    vv[0] = v;
    vv[1] = NULL;
    globerr = NULL;
    gflag = 0;
    rscan(vv, tglob);
    if (gflag == 0) {
	vv[0] = strspl(v, "");
	return (copyblk(vv));
    }

    globerr = NULL;
    gpath = agpath;
    gpathp = gpath;
    *gpathp = 0;
    lastgpathp = &gpath[sizeof agpath - 2];
    ginit(agargv);
    globcnt = 0;
    collect(v, check_ncargs);
    if (globcnt == 0 && (gflag & 1)) {
	blkfree(gargv), gargv = 0;
	return (0);
    }
    else
	return (gargv = copyblk(gargv));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
7,8
7,9
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
18,19
19,20
19,21
21,22
21,23
23,24
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
48,49
48,50
51,52
51,53
52,53
54,55
54,56
55,56
57,58
58,59
58,60
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
87,89
88,89
88,90
89,90
93,94
94,95
94,96
95,96
98,99
98,100
99,100
99,101
100,101
101,102
101,103
102,103
102,104
103,104
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
114,116
115,116
117,118
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
127,128
127,129
128,129
130,131
134,135
135,136
135,137
136,137
136,138
137,138
140,141
142,143
143,144
143,145
144,145
144,146
145,146
148,149
150,151
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
161,162
162,163
162,164
162,165
163,164
165,166
167,168
169,170
169,171
170,171
170,172
171,172
174,175
174,176
175,176
176,177
176,178
177,178
177,179
178,179
181,182
181,183
181,184
182,183
184,185
187,188
188,189
189,190
189,191
190,191
192,193
194,195
195,196
195,197
196,197
198,199
200,201
201,202
201,203
202,203
204,205
206,207
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
215,216
218,219
219,220
219,221
220,221
222,223
223,224
223,225
224,225
226,227
226,228
227,228
228,229
231,232
232,233
232,234
233,234
235,236
236,237
238,239
239,240
239,241
240,241
243,244
244,245
244,246
244,247
245,246
247,248
249,250
251,252
251,253
251,254
252,253
252,254
253,254
253,255
254,255
257,258
258,259
258,260
259,260
262,263
262,264
263,264
264,265
264,266
264,267
265,266
267,268
268,269
270,271
270,272
272,273
274,275
275,276
277,278
278,279
279,280
279,281
280,281
282,283
282,284
283,284
285,286
-----nextToken-----
2,4,5,6,8,10,11,14,16,20,22,25,28,30,31,33,37,39,44,47,49,50,53,56,59,61,65,67,72,73,77,79,83,85,90,91,92,96,97,104,106,107,112,116,118,119,120,125,129,131,132,133,138,139,141,146,147,149,153,155,159,160,164,166,168,172,173,179,180,183,185,186,191,193,197,199,203,205,209,211,216,217,221,225,229,230,234,237,241,242,246,248,250,255,256,260,261,266,269,271,273,276,281,284,286
-----computeFrom-----
35,36
35,37
42,43
42,44
54,55
54,56
63,64
63,65
75,76
75,77
87,88
87,89
94,95
94,96
99,100
99,101
101,102
101,103
109,110
109,111
113,114
113,115
122,123
122,124
126,127
126,128
135,136
135,137
143,144
143,145
151,152
151,153
157,158
157,159
170,171
170,172
176,177
176,178
195,196
195,197
201,202
201,203
207,208
207,209
213,214
213,215
219,220
219,221
226,227
226,228
239,240
239,241
252,253
252,254
253,254
253,255
258,259
258,260
279,280
279,281
-----guardedBy-----
39,67
37,65
90,96
116,129
118,131
-----guardedByNegation-----
90,131
-----lastLexicalUse-----
90,131
-----jump-----
90,131
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
char **ftpglob(register char *v, boolean_t check_ncargs){    char agpath[BUFSIZ];    char *vv[2];    if (agargv == NULL) {	agargv = (char **) malloc(GAVSIZ * sizeof (char *));	if (agargv == NULL) {	    fatal("Out of memory");	}	agargv_size = GAVSIZ;    }    fixpath(v);    if (v[0] == '\0')	v = ".";    else if ((strlen(v) > 1) && (v[strlen(v) - 1] == '/'))	v[strlen(v) - 1] = '\0';    vv[0] = v;    vv[1] = NULL;    globerr = NULL;    gflag = 0;    rscan(vv, tglob);    if (gflag == 0) {	vv[0] = strspl(v, "");	return (copyblk(vv));    }    globerr = NULL;    gpath = agpath;    gpathp = gpath;    *gpathp = 0;    lastgpathp = &gpath[sizeof agpath - 2];    ginit(agargv);    globcnt = 0;    collect(v, check_ncargs);    if (globcnt == 0 && (gflag & 1)) {	blkfree(gargv), gargv = 0;	return (0);    }    else	return (gargv = copyblk(gargv));}
char
**ftpglob(register char *v, boolean_t check_ncargs)
*
*
ftpglob
register char *v
register char
*v
*
v
boolean_t check_ncargs
boolean_t
boolean_t
check_ncargs
check_ncargs
{    char agpath[BUFSIZ];    char *vv[2];    if (agargv == NULL) {	agargv = (char **) malloc(GAVSIZ * sizeof (char *));	if (agargv == NULL) {	    fatal("Out of memory");	}	agargv_size = GAVSIZ;    }    fixpath(v);    if (v[0] == '\0')	v = ".";    else if ((strlen(v) > 1) && (v[strlen(v) - 1] == '/'))	v[strlen(v) - 1] = '\0';    vv[0] = v;    vv[1] = NULL;    globerr = NULL;    gflag = 0;    rscan(vv, tglob);    if (gflag == 0) {	vv[0] = strspl(v, "");	return (copyblk(vv));    }    globerr = NULL;    gpath = agpath;    gpathp = gpath;    *gpathp = 0;    lastgpathp = &gpath[sizeof agpath - 2];    ginit(agargv);    globcnt = 0;    collect(v, check_ncargs);    if (globcnt == 0 && (gflag & 1)) {	blkfree(gargv), gargv = 0;	return (0);    }    else	return (gargv = copyblk(gargv));}
char agpath[BUFSIZ];
char agpath[BUFSIZ];
char
agpath[BUFSIZ]
agpath
[BUFSIZ]
BUFSIZ
BUFSIZ
char *vv[2];
char *vv[2];
char
*vv[2]
*
vv
[2]
2
if (agargv == NULL) {	agargv = (char **) malloc(GAVSIZ * sizeof (char *));	if (agargv == NULL) {	    fatal("Out of memory");	}	agargv_size = GAVSIZ;    }
agargv == NULL
agargv
agargv
NULL
NULL
{	agargv = (char **) malloc(GAVSIZ * sizeof (char *));	if (agargv == NULL) {	    fatal("Out of memory");	}	agargv_size = GAVSIZ;    }
agargv = (char **) malloc(GAVSIZ * sizeof (char *));
agargv = (char **) malloc(GAVSIZ * sizeof (char *))
agargv
agargv
(char **) malloc(GAVSIZ * sizeof (char *))
char **
char
**
*
*
malloc(GAVSIZ * sizeof (char *))
malloc
malloc
GAVSIZ * sizeof (char *)
GAVSIZ
GAVSIZ
sizeof (char *)
char *
char
*
*
if (agargv == NULL) {	    fatal("Out of memory");	}
agargv == NULL
agargv
agargv
NULL
NULL
{	    fatal("Out of memory");	}
fatal("Out of memory");
fatal("Out of memory")
fatal
fatal
"Out of memory"
agargv_size = GAVSIZ;
agargv_size = GAVSIZ
agargv_size
agargv_size
GAVSIZ
GAVSIZ
fixpath(v);
fixpath(v)
fixpath
fixpath
v
v
if (v[0] == '\0')	v = ".";    else if ((strlen(v) > 1) && (v[strlen(v) - 1] == '/'))	v[strlen(v) - 1] = '\0';
v[0] == '\0'
v[0]
v
v
0
'\0'
v = ".";
v = "."
v
v
"."
if ((strlen(v) > 1) && (v[strlen(v) - 1] == '/'))	v[strlen(v) - 1] = '\0';
(strlen(v) > 1) && (v[strlen(v) - 1] == '/')
(strlen(v) > 1)
strlen(v) > 1
strlen(v)
strlen
strlen
v
v
1
(v[strlen(v) - 1] == '/')
v[strlen(v) - 1] == '/'
v[strlen(v) - 1]
v
v
strlen(v) - 1
strlen(v)
strlen
strlen
v
v
1
'/'
v[strlen(v) - 1] = '\0';
v[strlen(v) - 1] = '\0'
v[strlen(v) - 1]
v
v
strlen(v) - 1
strlen(v)
strlen
strlen
v
v
1
'\0'
vv[0] = v;
vv[0] = v
vv[0]
vv
vv
0
v
v
vv[1] = NULL;
vv[1] = NULL
vv[1]
vv
vv
1
NULL
NULL
globerr = NULL;
globerr = NULL
globerr
globerr
NULL
NULL
gflag = 0;
gflag = 0
gflag
gflag
0
rscan(vv, tglob);
rscan(vv, tglob)
rscan
rscan
vv
vv
tglob
tglob
if (gflag == 0) {	vv[0] = strspl(v, "");	return (copyblk(vv));    }
gflag == 0
gflag
gflag
0
{	vv[0] = strspl(v, "");	return (copyblk(vv));    }
vv[0] = strspl(v, "");
vv[0] = strspl(v, "")
vv[0]
vv
vv
0
strspl(v, "")
strspl
strspl
v
v
""
return (copyblk(vv));
(copyblk(vv))
copyblk(vv)
copyblk
copyblk
vv
vv
globerr = NULL;
globerr = NULL
globerr
globerr
NULL
NULL
gpath = agpath;
gpath = agpath
gpath
gpath
agpath
agpath
gpathp = gpath;
gpathp = gpath
gpathp
gpathp
gpath
gpath
*gpathp = 0;
*gpathp = 0
*gpathp
gpathp
gpathp
0
lastgpathp = &gpath[sizeof agpath - 2];
lastgpathp = &gpath[sizeof agpath - 2]
lastgpathp
lastgpathp
&gpath[sizeof agpath - 2]
gpath[sizeof agpath - 2]
gpath
gpath
sizeof agpath - 2
sizeof agpath
agpath
agpath
2
ginit(agargv);
ginit(agargv);
ginit
ginit
(agargv)
agargv
agargv
globcnt = 0;
globcnt = 0
globcnt
globcnt
0
collect(v, check_ncargs);
collect(v, check_ncargs)
collect
collect
v
v
check_ncargs
check_ncargs
if (globcnt == 0 && (gflag & 1)) {	blkfree(gargv), gargv = 0;	return (0);    }    else	return (gargv = copyblk(gargv));
globcnt == 0 && (gflag & 1)
globcnt == 0
globcnt
globcnt
0
(gflag & 1)
gflag & 1
gflag
gflag
1
{	blkfree(gargv), gargv = 0;	return (0);    }
blkfree(gargv), gargv = 0;
blkfree(gargv), gargv = 0;
blkfree
blkfree
(gargv)
gargv
gargv
gargv = 0
gargv
= 0
0
return (0);
(0)
0
return (gargv = copyblk(gargv));
(gargv = copyblk(gargv))
gargv = copyblk(gargv)
gargv
gargv
copyblk(gargv)
copyblk
copyblk
gargv
gargv
-----joern-----
(1,79,0)
(40,97,0)
(144,112,0)
(36,66,0)
(113,94,0)
(126,25,0)
(58,38,0)
(27,93,0)
(30,79,0)
(8,97,0)
(130,123,0)
(71,33,0)
(119,36,0)
(35,108,0)
(46,97,0)
(24,124,0)
(112,132,0)
(95,92,0)
(126,62,0)
(82,7,0)
(120,98,0)
(145,79,0)
(64,42,0)
(50,102,0)
(84,25,0)
(53,118,0)
(126,94,0)
(33,79,0)
(71,59,0)
(71,69,0)
(12,67,0)
(3,128,0)
(107,50,0)
(92,110,0)
(71,94,0)
(105,30,0)
(32,94,0)
(43,30,0)
(71,29,0)
(133,26,0)
(126,50,0)
(126,111,0)
(29,79,0)
(106,63,0)
(110,92,0)
(111,79,0)
(74,50,0)
(137,79,0)
(74,59,0)
(126,28,0)
(83,19,0)
(0,40,0)
(17,105,0)
(132,112,0)
(126,81,0)
(6,117,0)
(100,123,0)
(18,25,0)
(5,144,0)
(74,38,0)
(108,35,0)
(104,69,0)
(65,46,0)
(41,119,0)
(46,79,0)
(126,105,0)
(6,92,0)
(71,105,0)
(38,58,0)
(20,63,0)
(51,110,0)
(98,99,0)
(144,117,0)
(109,58,0)
(4,99,0)
(99,98,0)
(71,81,0)
(110,124,0)
(90,59,0)
(123,36,0)
(48,52,0)
(126,33,0)
(38,124,0)
(74,66,0)
(121,44,0)
(28,46,0)
(2,112,0)
(85,128,0)
(117,6,0)
(56,126,0)
(34,38,0)
(98,3,0)
(94,79,0)
(59,52,0)
(71,28,0)
(89,23,0)
(74,63,0)
(16,101,0)
(62,126,0)
(68,81,0)
(123,97,0)
(102,79,0)
(140,97,0)
(61,75,0)
(71,63,0)
(78,28,0)
(103,28,0)
(76,15,0)
(54,62,0)
(46,124,0)
(70,29,0)
(87,88,0)
(7,79,0)
(126,128,0)
(31,139,0)
(45,102,0)
(126,38,0)
(126,29,0)
(144,124,0)
(24,11,0)
(146,54,0)
(52,61,0)
(26,133,0)
(93,58,0)
(26,44,0)
(142,111,0)
(114,81,0)
(42,74,0)
(138,117,0)
(86,33,0)
(136,50,0)
(125,79,0)
(71,38,0)
(71,128,0)
(97,124,0)
(108,75,0)
(112,144,0)
(52,48,0)
(58,93,0)
(134,77,0)
(126,59,0)
(71,111,0)
(71,50,0)
(74,29,0)
(132,124,0)
(74,111,0)
(73,71,0)
(63,88,0)
(37,29,0)
(21,15,0)
(36,123,0)
(117,144,0)
(74,119,0)
(93,124,0)
(56,74,0)
(62,54,0)
(3,98,0)
(128,79,0)
(55,14,0)
(143,24,0)
(131,14,0)
(25,79,0)
(127,62,0)
(7,124,0)
(44,26,0)
(52,59,0)
(49,44,0)
(141,23,0)
(75,108,0)
(67,79,0)
(40,129,0)
(99,118,0)
(71,25,0)
(115,75,0)
(39,79,0)
(96,47,0)
(60,11,0)
(57,111,0)
(122,40,0)
(40,124,0)
(22,132,0)
(101,79,0)
(9,67,0)
(61,52,0)
(147,33,0)
(135,119,0)
(72,79,0)
(77,104,0)
(91,19,0)
(128,3,0)
(40,79,0)
(10,133,0)
(38,139,0)
(123,124,0)
(75,61,0)
(15,104,0)
(56,71,0)
(74,28,0)
(118,99,0)
(71,15,0)
(59,88,0)
(13,24,0)
(47,116,0)
(92,6,0)
(81,79,0)
(126,63,0)
(80,133,0)
(11,24,0)
(27,34,1)
(50,136,1)
(126,111,1)
(23,141,1)
(132,124,1)
(74,42,1)
(93,124,1)
(144,124,1)
(37,111,1)
(71,128,1)
(105,17,1)
(126,25,1)
(5,92,1)
(74,50,1)
(71,63,1)
(136,107,1)
(11,60,1)
(99,118,1)
(147,14,1)
(86,147,1)
(112,132,1)
(96,19,1)
(78,97,1)
(97,8,1)
(140,11,1)
(42,64,1)
(62,54,1)
(126,38,1)
(122,0,1)
(83,91,1)
(46,65,1)
(128,3,1)
(123,130,1)
(74,38,1)
(57,142,1)
(126,62,1)
(7,124,1)
(71,29,1)
(60,24,1)
(76,77,1)
(74,119,1)
(126,94,1)
(49,121,1)
(126,63,1)
(71,94,1)
(31,38,1)
(111,57,1)
(26,133,1)
(15,21,1)
(33,86,1)
(98,99,1)
(3,98,1)
(82,23,1)
(44,49,1)
(20,47,1)
(64,36,1)
(59,52,1)
(19,83,1)
(20,19,1)
(74,29,1)
(17,81,1)
(103,78,1)
(91,59,1)
(16,128,1)
(74,59,1)
(71,111,1)
(71,50,1)
(115,90,1)
(126,33,1)
(61,75,1)
(54,146,1)
(106,20,1)
(58,93,1)
(71,105,1)
(77,134,1)
(41,14,1)
(109,93,1)
(94,113,1)
(82,63,1)
(25,84,1)
(28,103,1)
(55,67,1)
(18,101,1)
(71,28,1)
(21,76,1)
(141,89,1)
(8,140,1)
(71,33,1)
(24,124,1)
(56,71,1)
(74,63,1)
(71,81,1)
(126,59,1)
(22,5,1)
(40,129,1)
(90,23,1)
(56,126,1)
(139,31,1)
(99,4,1)
(118,53,1)
(40,124,1)
(40,122,1)
(146,127,1)
(70,37,1)
(127,26,1)
(71,73,1)
(53,120,1)
(63,106,1)
(7,82,1)
(43,105,1)
(117,138,1)
(56,74,1)
(126,28,1)
(74,28,1)
(74,111,1)
(81,114,1)
(34,6,1)
(71,15,1)
(13,143,1)
(85,30,1)
(100,119,1)
(131,55,1)
(14,131,1)
(102,45,1)
(73,15,1)
(142,102,1)
(112,2,1)
(134,26,1)
(11,24,1)
(108,115,1)
(65,28,1)
(9,29,1)
(71,59,1)
(107,46,1)
(92,110,1)
(126,105,1)
(38,58,1)
(68,94,1)
(71,25,1)
(46,124,1)
(24,13,1)
(29,70,1)
(10,80,1)
(4,118,1)
(80,40,1)
(121,133,1)
(67,12,1)
(78,139,1)
(95,110,1)
(108,35,1)
(52,61,1)
(133,10,1)
(36,123,1)
(143,7,1)
(123,97,1)
(119,135,1)
(126,81,1)
(30,43,1)
(93,27,1)
(120,85,1)
(126,128,1)
(126,50,1)
(117,144,1)
(52,48,1)
(92,95,1)
(101,16,1)
(135,41,1)
(130,100,1)
(110,51,1)
(75,108,1)
(97,124,1)
(138,144,1)
(114,68,1)
(123,124,1)
(38,124,1)
(58,109,1)
(132,22,1)
(45,50,1)
(6,117,1)
(0,25,1)
(47,96,1)
(144,112,1)
(71,38,1)
(113,32,1)
(51,11,1)
(12,9,1)
(6,92,1)
(84,18,1)
(32,33,1)
(40,97,1)
(126,29,1)
(2,132,1)
(26,44,1)
(78,6,1)
(46,97,1)
(110,124,1)
(76,26,2)
(20,23,2)
(7,124,2)
(117,144,2)
(95,11,2)
(98,99,2)
(147,14,2)
(71,38,2)
(2,92,2)
(77,26,2)
(15,26,2)
(3,98,2)
(92,110,2)
(56,74,2)
(126,81,2)
(71,50,2)
(109,6,2)
(71,94,2)
(54,26,2)
(59,23,2)
(90,23,2)
(139,6,2)
(86,14,2)
(126,128,2)
(40,97,2)
(71,128,2)
(25,14,2)
(74,59,2)
(26,44,2)
(58,93,2)
(108,35,2)
(74,28,2)
(110,124,2)
(73,26,2)
(97,11,2)
(123,97,2)
(52,61,2)
(74,63,2)
(3,14,2)
(63,23,2)
(81,14,2)
(85,14,2)
(115,23,2)
(21,26,2)
(6,11,2)
(113,14,2)
(126,50,2)
(75,108,2)
(5,92,2)
(42,14,2)
(128,3,2)
(27,6,2)
(126,105,2)
(144,112,2)
(47,19,2)
(97,124,2)
(74,50,2)
(114,14,2)
(105,14,2)
(24,124,2)
(71,59,2)
(32,14,2)
(84,14,2)
(123,14,2)
(19,23,2)
(80,14,2)
(94,14,2)
(126,38,2)
(119,14,2)
(133,14,2)
(58,6,2)
(40,129,2)
(126,29,2)
(74,38,2)
(74,29,2)
(138,92,2)
(122,14,2)
(93,124,2)
(61,23,2)
(41,14,2)
(51,11,2)
(126,111,2)
(74,14,2)
(126,62,2)
(40,14,2)
(75,23,2)
(123,124,2)
(112,132,2)
(134,26,2)
(132,92,2)
(126,26,2)
(126,28,2)
(0,14,2)
(36,123,2)
(128,14,2)
(44,133,2)
(49,133,2)
(71,63,2)
(98,14,2)
(146,26,2)
(108,23,2)
(59,52,2)
(144,92,2)
(40,124,2)
(56,71,2)
(120,14,2)
(101,14,2)
(83,23,2)
(52,48,2)
(11,24,2)
(132,124,2)
(62,54,2)
(92,11,2)
(130,14,2)
(99,14,2)
(110,11,2)
(71,81,2)
(46,97,2)
(126,25,2)
(121,133,2)
(135,14,2)
(43,14,2)
(62,26,2)
(118,14,2)
(46,124,2)
(117,92,2)
(31,6,2)
(8,11,2)
(68,14,2)
(126,59,2)
(26,133,2)
(36,14,2)
(53,14,2)
(64,14,2)
(56,126,2)
(33,14,2)
(71,25,2)
(126,33,2)
(18,14,2)
(22,92,2)
(112,92,2)
(106,23,2)
(71,26,2)
(52,23,2)
(71,111,2)
(17,14,2)
(144,124,2)
(126,63,2)
(126,94,2)
(61,75,2)
(96,19,2)
(99,118,2)
(38,58,2)
(93,6,2)
(16,14,2)
(30,14,2)
(26,14,2)
(74,111,2)
(10,14,2)
(34,6,2)
(91,23,2)
(127,26,2)
(71,105,2)
(38,124,2)
(140,11,2)
(100,14,2)
(6,92,2)
(71,29,2)
(71,33,2)
(4,14,2)
(74,119,2)
(71,15,2)
(6,117,2)
(38,6,2)
(71,28,2)
-----------------------------------
(0,v)
(1,if (gflag == 0)
(2,1)
(3,&gpath[sizeof agpath - 2])
(4,2)
(5,v)
(6,(strlen(v)
(7,fixpath(v)
(8,".")
(9,vv)
(10,0)
(11,v[0] == \'\\0\')
(12,tglob)
(13,0)
(14,gflag == 0)
(15,gargv = 0)
(16,agargv)
(17,gpathp)
(18,globcnt)
(19,agargv == NULL)
(20,agargv_size)
(21,0)
(22,v)
(23,agargv == NULL)
(24,v[0])
(25,globcnt = 0)
(26,globcnt == 0 && (gflag & 1)
(27,v)
(28,vv[0])
(29,gflag = 0)
(30,*gpathp = 0)
(31,\'\\0\')
(32,gpath)
(33,globerr = NULL)
(34,v)
(35,char *)
(36,vv[0] = strspl(v, "")
(37,gflag)
(38,v[strlen(v)
(39,vv)
(40,collect(v, check_ncargs)
(41,vv)
(42,copyblk(vv)
(43,0)
(44,gflag & 1)
(45,NULL)
(46,vv[0] = v)
(47,fatal("Out of memory")
(48,char **)
(49,1)
(50,vv[1])
(51,v)
(52,(char **)
(53,agpath)
(54,copyblk(gargv)
(55,gflag)
(56,RET)
(57,NULL)
(58,strlen(v)
(59,agargv = (char **)
(60,\'\\0\')
(61,malloc(GAVSIZ * sizeof (char *)
(62,gargv = copyblk(gargv)
(63,agargv_size = GAVSIZ)
(64,vv)
(65,v)
(66,)
(67,rscan(vv, tglob)
(68,gpathp)
(69,)
(70,0)
(71,return (0)
(72,if (v[0] == \'\\0\')
(73,0)
(74,return (copyblk(vv)
(75,GAVSIZ * sizeof (char *)
(76,gargv)
(77,blkfree(gargv)
(78,vv)
(79,)
(80,globcnt)
(81,gpathp = gpath)
(82,v)
(83,NULL)
(84,0)
(85,lastgpathp)
(86,NULL)
(87,if (agargv == NULL)
(88,)
(89,agargv)
(90,agargv)
(91,agargv)
(92,strlen(v)
(93,strlen(v)
(94,gpath = agpath)
(95,1)
(96,"Out of memory")
(97,v = ".")
(98,gpath[sizeof agpath - 2])
(99,sizeof agpath - 2)
(100,v)
(101,ginit(agargv)
(102,vv[1] = NULL)
(103,0)
(104,)
(105,*gpathp)
(106,GAVSIZ)
(107,vv)
(108,sizeof (char *)
(109,1)
(110,strlen(v)
(111,globerr = NULL)
(112,strlen(v)
(113,agpath)
(114,gpath)
(115,GAVSIZ)
(116,)
(117,v[strlen(v)
(118,sizeof agpath)
(119,vv[0])
(120,gpath)
(121,gflag)
(122,check_ncargs)
(123,strspl(v, "")
(124,register char *v)
(125,agpath)
(126,return (gargv = copyblk(gargv)
(127,gargv)
(128,lastgpathp = &gpath[sizeof agpath - 2])
(129,boolean_t check_ncargs)
(130,"")
(131,0)
(132,strlen(v)
(133,globcnt == 0)
(134,gargv)
(135,0)
(136,1)
(137,if (agargv == NULL)
(138,\'/\')
(139,v[strlen(v)
(140,v)
(141,NULL)
(142,globerr)
(143,v)
(144,v[strlen(v)
(145,if (globcnt == 0 && (gflag & 1)
(146,gargv)
(147,globerr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^