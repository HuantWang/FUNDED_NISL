-----label-----
1
-----code-----
static void badSink()
{
    int count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData;
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
37,38
39,40
40,41
42,43
43,44
44,45
44,46
45,46
-----nextToken-----
2,4,8,10,13,18,20,22,27,28,31,35,36,38,41,46,47
-----computeFrom-----
25,26
25,27
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    int count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
static void
badSink()
badSink
{    int count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData;
int count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData;
int
count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData
count
= CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData
CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData
CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(17,6,0)
(1,4,0)
(19,7,0)
(5,8,0)
(20,9,0)
(22,6,0)
(11,14,0)
(0,5,0)
(3,11,0)
(12,9,0)
(13,4,0)
(1,9,0)
(15,5,0)
(2,1,0)
(6,5,0)
(24,4,0)
(7,8,0)
(9,1,0)
(21,4,0)
(16,24,0)
(9,20,0)
(9,7,0)
(23,8,0)
(18,7,0)
(2,4,1)
(22,17,1)
(4,13,1)
(24,4,1)
(9,20,1)
(6,22,1)
(12,2,1)
(9,7,1)
(13,21,1)
(2,24,1)
(11,3,1)
(16,11,1)
(7,18,1)
(3,1,1)
(1,4,1)
(17,7,1)
(10,1,1)
(21,6,1)
(24,16,1)
(18,19,1)
(9,12,1)
(1,9,1)
(24,4,2)
(16,1,2)
(9,20,2)
(1,1,2)
(12,1,2)
(11,1,2)
(9,7,2)
(2,1,2)
(9,1,2)
(24,1,2)
(3,1,2)
(1,9,2)
(1,4,2)
-----------------------------------
(0,i)
(1,i < (size_t)
(2,i)
(3,"Hello")
(4,i = 0)
(5,)
(6,i = 0)
(7,count = CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData)
(8,)
(9,(size_t)
(10,RET)
(11,printLine("Hello")
(12,count)
(13,0)
(14,)
(15,for (i = 0; i < (size_t)
(16,i)
(17,i)
(18,CWE400_Resource_Exhaustion__listen_socket_for_loop_45_badData)
(19,count)
(20,size_t)
(21,i)
(22,0)
(23,count)
(24,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^