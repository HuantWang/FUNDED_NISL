-----label-----
0
-----code-----
static void good1()
{
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
66,67
66,68
67,68
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
80,81
82,83
82,84
82,85
83,84
85,86
87,88
87,89
88,89
90,91
91,92
91,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
114,115
115,116
115,117
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,9,14,15,20,22,23,27,29,32,34,37,38,42,44,49,51,54,56,57,62,63,64,68,71,72,76,79,81,84,86,89,92,93,97,99,104,106,111,112,113,117,120,121,125,127
-----computeFrom-----
7,8
7,9
33,34
33,35
40,41
40,42
59,60
59,61
74,75
74,76
87,88
87,89
95,96
95,97
102,103
102,104
108,109
108,110
-----guardedBy-----
97,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(40,54,0)
(22,2,0)
(52,39,0)
(6,0,0)
(0,16,0)
(29,21,0)
(47,42,0)
(28,54,0)
(41,32,0)
(3,65,0)
(45,18,0)
(16,66,0)
(46,65,0)
(36,17,0)
(66,29,0)
(49,58,0)
(59,14,0)
(20,17,0)
(2,43,0)
(32,24,0)
(50,39,0)
(11,10,0)
(25,16,0)
(38,34,0)
(42,39,0)
(16,33,0)
(17,34,0)
(15,58,0)
(53,66,0)
(58,13,0)
(39,4,0)
(21,29,0)
(29,13,0)
(51,33,0)
(33,51,0)
(18,10,0)
(9,23,0)
(18,66,0)
(39,54,0)
(27,66,0)
(43,2,0)
(17,10,0)
(57,0,0)
(13,29,0)
(35,42,0)
(65,10,0)
(5,28,0)
(54,33,0)
(54,32,0)
(63,8,0)
(48,57,0)
(0,57,0)
(30,23,0)
(56,55,0)
(65,66,0)
(31,18,0)
(36,4,0)
(34,4,0)
(16,0,0)
(13,58,0)
(66,32,0)
(19,27,0)
(33,16,0)
(55,32,0)
(61,27,0)
(18,31,0)
(29,66,0)
(31,32,0)
(43,62,0)
(12,32,0)
(10,32,0)
(7,18,0)
(58,49,0)
(17,39,0)
(55,39,0)
(55,66,0)
(64,49,0)
(42,34,0)
(1,63,0)
(33,54,0)
(44,28,0)
(67,32,0)
(37,32,0)
(26,17,0)
(17,36,0)
(17,10,1)
(57,48,1)
(1,23,1)
(2,22,1)
(22,27,1)
(52,50,1)
(40,31,1)
(23,30,1)
(45,10,1)
(6,25,1)
(18,7,1)
(61,66,1)
(3,43,1)
(10,11,1)
(44,5,1)
(5,54,1)
(0,57,1)
(43,2,1)
(42,35,1)
(19,61,1)
(34,38,1)
(46,3,1)
(55,66,1)
(48,6,1)
(36,17,1)
(38,42,1)
(28,54,1)
(66,29,1)
(49,64,1)
(54,33,1)
(50,28,1)
(55,39,1)
(27,66,1)
(26,20,1)
(29,21,1)
(65,46,1)
(39,52,1)
(15,53,1)
(53,23,1)
(55,56,1)
(39,54,1)
(56,28,1)
(42,39,1)
(63,1,1)
(33,51,1)
(47,39,1)
(56,36,1)
(13,58,1)
(60,63,1)
(3,27,1)
(16,0,1)
(18,66,1)
(17,39,1)
(60,55,1)
(11,65,1)
(17,26,1)
(58,49,1)
(30,9,1)
(27,19,1)
(31,18,1)
(29,13,1)
(20,34,1)
(7,45,1)
(17,34,1)
(35,47,1)
(65,66,1)
(28,44,1)
(18,10,1)
(64,15,1)
(33,16,1)
(16,66,1)
(25,40,1)
(13,58,2)
(31,18,2)
(65,66,2)
(54,33,2)
(49,23,2)
(42,28,2)
(66,23,2)
(29,23,2)
(64,23,2)
(3,23,2)
(18,10,2)
(58,49,2)
(29,21,2)
(48,23,2)
(39,28,2)
(57,23,2)
(36,28,2)
(17,39,2)
(43,27,2)
(61,23,2)
(46,23,2)
(20,28,2)
(65,23,2)
(26,28,2)
(13,23,2)
(55,23,2)
(16,66,2)
(0,57,2)
(33,23,2)
(34,28,2)
(42,39,2)
(45,23,2)
(43,2,2)
(28,54,2)
(6,23,2)
(0,23,2)
(18,23,2)
(16,0,2)
(38,28,2)
(17,34,2)
(52,28,2)
(29,13,2)
(28,23,2)
(55,66,2)
(17,28,2)
(25,23,2)
(50,28,2)
(15,23,2)
(39,54,2)
(27,66,2)
(10,23,2)
(18,66,2)
(2,27,2)
(22,27,2)
(7,23,2)
(56,23,2)
(33,16,2)
(66,29,2)
(54,23,2)
(40,23,2)
(11,23,2)
(1,23,2)
(16,23,2)
(5,23,2)
(47,28,2)
(19,23,2)
(31,23,2)
(53,23,2)
(17,10,2)
(33,51,2)
(44,23,2)
(58,23,2)
(35,28,2)
(63,23,2)
(55,39,2)
(36,17,2)
(27,23,2)
-----------------------------------
(0,(130000)
(1,"Benign, fixed string")
(2,-1)
(3,data)
(4,)
(5,tmpData)
(6,130000)
(7,0)
(8,)
(9,5)
(10,data[0] = 5)
(11,5)
(12,if (tmpData != NULL)
(13,malloc(100*sizeof(int)
(14,)
(15,100)
(16,realloc(data, (130000)
(17,data[0])
(18,data[0])
(19,NULL)
(20,data)
(21,int *)
(22,1)
(23,5!=5)
(24,)
(25,data)
(26,0)
(27,data == NULL)
(28,tmpData != NULL)
(29,(int *)
(30,5)
(31,printIntLine(data[0])
(32,)
(33,(int *)
(34,data[0] = 10)
(35,0)
(36,printIntLine(data[0])
(37,data)
(38,10)
(39,data = tmpData)
(40,tmpData)
(41,tmpData)
(42,data[0])
(43,exit(-1)
(44,NULL)
(45,data)
(46,0)
(47,data)
(48,int)
(49,sizeof(int)
(50,data)
(51,int *)
(52,tmpData)
(53,data)
(54,tmpData = (int *)
(55,free(data)
(56,data)
(57,sizeof(int)
(58,100*sizeof(int)
(59,if(5!=5)
(60,RET)
(61,data)
(62,)
(63,printLine("Benign, fixed string")
(64,int)
(65,data[0])
(66,* data = (int *)
(67,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^