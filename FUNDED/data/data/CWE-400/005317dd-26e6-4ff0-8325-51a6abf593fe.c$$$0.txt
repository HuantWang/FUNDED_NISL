-----label-----
0
-----code-----
static void goodB2G1Sink(size_t data)
{
    if(goodB2G1Static)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
11,14
12,13
14,15
15,16
16,17
16,18
17,18
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
39,40
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,7,9,13,18,19,24,26,27,32,35,37,40,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
29,30
29,31
30,31
30,32
38,39
38,40
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
37,82
40,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1Sink(size_t data){    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1Sink(size_t data)
goodB2G1Sink
size_t data
size_t
size_t
data
data
{    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
goodB2G1Static
goodB2G1Static
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(33,6,0)
(26,14,0)
(37,43,0)
(34,20,0)
(47,5,0)
(18,43,0)
(32,33,0)
(2,9,0)
(9,8,0)
(1,2,0)
(21,18,0)
(47,17,0)
(7,43,0)
(22,7,0)
(0,7,0)
(14,2,0)
(35,18,0)
(5,47,0)
(30,5,0)
(45,7,0)
(23,46,0)
(33,2,0)
(39,6,0)
(39,2,0)
(14,6,0)
(18,22,0)
(18,21,0)
(37,28,0)
(2,6,0)
(12,28,0)
(25,6,0)
(37,8,0)
(29,20,0)
(22,18,0)
(13,39,0)
(8,37,0)
(3,33,0)
(42,23,0)
(38,31,0)
(15,40,0)
(28,37,0)
(9,2,0)
(20,2,0)
(41,16,0)
(7,22,0)
(11,21,0)
(19,41,0)
(24,15,0)
(27,23,0)
(9,44,0)
(8,9,0)
(44,9,0)
(10,37,0)
(4,14,1)
(9,8,1)
(26,39,1)
(47,5,1)
(41,19,1)
(3,20,1)
(37,28,1)
(30,20,1)
(20,34,1)
(11,35,1)
(19,22,1)
(7,43,1)
(21,11,1)
(37,43,1)
(1,22,1)
(10,1,1)
(22,18,1)
(29,2,1)
(4,15,1)
(3,47,1)
(4,41,1)
(0,45,1)
(8,37,1)
(7,0,1)
(5,30,1)
(12,10,1)
(45,18,1)
(35,36,1)
(33,32,1)
(39,13,1)
(39,2,1)
(2,9,1)
(9,44,1)
(18,21,1)
(28,12,1)
(18,43,1)
(33,2,1)
(14,26,1)
(14,2,1)
(13,33,1)
(15,24,1)
(34,29,1)
(22,7,1)
(32,3,1)
(20,2,1)
(24,36,1)
(22,7,2)
(11,36,2)
(35,36,2)
(14,22,2)
(7,18,2)
(8,37,2)
(37,43,2)
(20,2,2)
(9,44,2)
(12,22,2)
(28,22,2)
(47,5,2)
(37,28,2)
(22,18,2)
(2,22,2)
(32,22,2)
(39,22,2)
(1,22,2)
(19,22,2)
(22,36,2)
(7,43,2)
(9,8,2)
(47,20,2)
(10,22,2)
(37,22,2)
(15,36,2)
(34,22,2)
(33,22,2)
(33,2,2)
(30,20,2)
(18,43,2)
(18,21,2)
(24,36,2)
(5,20,2)
(8,22,2)
(45,18,2)
(26,22,2)
(29,22,2)
(20,22,2)
(18,36,2)
(0,18,2)
(9,22,2)
(3,22,2)
(13,22,2)
(21,36,2)
(41,22,2)
(39,2,2)
(2,9,2)
(14,2,2)
-----------------------------------
(0,100)
(1,myString)
(2,myString = (wchar_t *)
(3,myString)
(4,RET)
(5,-1)
(6,)
(7,data < 100)
(8,malloc(data*sizeof(wchar_t)
(9,(wchar_t *)
(10,data)
(11,HELLO_STRING)
(12,wchar_t)
(13,myString)
(14,free(myString)
(15,printLine("Benign, fixed string")
(16,)
(17,)
(18,data > wcslen(HELLO_STRING)
(19,"Input is less than the length of the source string or too large")
(20,myString == NULL)
(21,wcslen(HELLO_STRING)
(22,data > wcslen(HELLO_STRING)
(23,)
(24,"Benign, fixed string")
(25,if (myString == NULL)
(26,myString)
(27,if (data > wcslen(HELLO_STRING)
(28,sizeof(wchar_t)
(29,myString)
(30,1)
(31,)
(32,HELLO_STRING)
(33,wcscpy(myString, HELLO_STRING)
(34,NULL)
(35,data)
(36,goodB2G1Static)
(37,data*sizeof(wchar_t)
(38,if(goodB2G1Static)
(39,printWLine(myString)
(40,)
(41,printLine("Input is less than the length of the source string or too large")
(42,myString)
(43,size_t data)
(44,wchar_t *)
(45,data)
(46,)
(47,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^