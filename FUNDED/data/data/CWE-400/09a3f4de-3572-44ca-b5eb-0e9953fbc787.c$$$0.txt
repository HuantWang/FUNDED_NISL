-----label-----
1
-----code-----
static int
peer_dsc_disced(uint16_t conn_handle, const struct ble_gatt_error *error,
                uint16_t chr_val_handle, const struct ble_gatt_dsc *dsc,
                void *arg)
{
    struct peer *peer;

    peer = arg;
    assert(peer->conn_handle == conn_handle);

    switch (error->status) {
    case 0:
        peer_dsc_add(peer, chr_val_handle, dsc);
        break;

    case BLE_HS_EDONE:
        if (peer->disc_prev_chr_val > 0) {
            peer_disc_dscs(peer);
        }
        break;

    default:
        /* Error. */
        break;
    }

    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
29,30
29,31
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
52,53
55,56
57,58
57,59
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
76,77
77,78
79,80
79,81
80,81
80,82
81,82
81,83
82,83
86,87
87,88
88,89
88,90
89,90
91,92
96,97
-----nextToken-----
2,4,7,9,12,14,15,18,20,23,25,26,28,30,31,36,38,39,43,45,49,53,54,56,60,61,64,68,70,72,74,75,78,83,84,85,90,92,93,94,95,97
-----computeFrom-----
41,42
41,43
50,51
50,52
80,81
80,82
-----guardedBy-----
83,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;BreakStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static intpeer_dsc_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                uint16_t chr_val_handle, const struct ble_gatt_dsc *dsc,                void *arg){    struct peer *peer;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        break;    default:        /* Error. */        break;    }    return 0;}
static int
peer_dsc_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                uint16_t chr_val_handle, const struct ble_gatt_dsc *dsc,                void *arg)
peer_dsc_disced
uint16_t conn_handle
uint16_t
uint16_t
conn_handle
conn_handle
const struct ble_gatt_error *error
const struct ble_gatt_error
ble_gatt_error
*error
*
error
uint16_t chr_val_handle
uint16_t
uint16_t
chr_val_handle
chr_val_handle
const struct ble_gatt_dsc *dsc
const struct ble_gatt_dsc
ble_gatt_dsc
*dsc
*
dsc
void *arg
void
*arg
*
arg
{    struct peer *peer;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        break;    default:        /* Error. */        break;    }    return 0;}
struct peer *peer;
struct peer *peer;
struct peer
peer
*peer
*
peer
peer = arg;
peer = arg
peer
peer
arg
arg
assert(peer->conn_handle == conn_handle);
assert(peer->conn_handle == conn_handle)
assert
assert
peer->conn_handle == conn_handle
peer->conn_handle
peer
peer
conn_handle
conn_handle
conn_handle
switch (error->status) {    case 0:        peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        break;    default:        /* Error. */        break;    }
error->status
error
error
status
{    case 0:        peer_dsc_add(peer, chr_val_handle, dsc);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }        break;    default:        /* Error. */        break;    }
case 0:
0
peer_dsc_add(peer, chr_val_handle, dsc);
peer_dsc_add(peer, chr_val_handle, dsc)
peer_dsc_add
peer_dsc_add
peer
peer
chr_val_handle
chr_val_handle
dsc
dsc
break;
case BLE_HS_EDONE:
BLE_HS_EDONE
BLE_HS_EDONE
if (peer->disc_prev_chr_val > 0) {            peer_disc_dscs(peer);        }
peer->disc_prev_chr_val > 0
peer->disc_prev_chr_val
peer
peer
disc_prev_chr_val
0
{            peer_disc_dscs(peer);        }
peer_disc_dscs(peer);
peer_disc_dscs(peer)
peer_disc_dscs
peer_disc_dscs
peer
peer
break;
default:
break;
return 0;
0
-----joern-----
(9,20,0)
(6,23,0)
(19,27,0)
(12,20,0)
(32,14,0)
(16,26,0)
(42,17,0)
(14,32,0)
(22,26,0)
(17,26,0)
(36,23,0)
(20,12,0)
(17,18,0)
(8,25,0)
(3,26,0)
(29,2,0)
(1,14,0)
(28,17,0)
(31,21,0)
(11,26,0)
(7,26,0)
(32,41,0)
(40,12,0)
(21,0,0)
(14,27,0)
(12,27,0)
(30,27,0)
(27,33,0)
(41,32,0)
(17,38,0)
(4,14,0)
(34,12,0)
(23,25,0)
(32,37,0)
(29,27,0)
(17,27,0)
(10,21,0)
(35,26,0)
(41,25,0)
(15,32,0)
(5,26,0)
(39,29,0)
(27,25,0)
(24,17,0)
(13,25,0)
(15,14,1)
(22,21,1)
(14,1,1)
(20,9,1)
(32,37,1)
(34,21,1)
(27,33,1)
(40,34,1)
(31,41,1)
(12,27,1)
(17,42,1)
(29,27,1)
(29,39,1)
(19,30,1)
(32,14,1)
(24,21,1)
(20,12,1)
(39,20,1)
(28,24,1)
(36,22,1)
(21,10,1)
(21,0,1)
(36,3,1)
(36,35,1)
(42,28,1)
(17,18,1)
(41,32,1)
(3,29,1)
(32,15,1)
(17,27,1)
(1,4,1)
(14,27,1)
(17,38,1)
(6,23,1)
(3,20,1)
(9,12,1)
(12,40,1)
(35,17,1)
(23,36,1)
(10,31,1)
(27,19,1)
(4,27,1)
(12,21,2)
(17,21,2)
(17,18,2)
(3,21,2)
(32,37,2)
(24,21,2)
(32,14,2)
(21,0,2)
(40,21,2)
(6,23,2)
(41,32,2)
(17,27,2)
(34,21,2)
(20,12,2)
(27,33,2)
(17,38,2)
(12,27,2)
(14,27,2)
(35,21,2)
(29,27,2)
(28,21,2)
(42,21,2)
(9,21,2)
(20,21,2)
(39,20,2)
(22,21,2)
(29,20,2)
-----------------------------------
(0,const struct ble_gatt_error *error)
(1,conn_handle)
(2,)
(3,break;)
(4,peer)
(5,case BLE_HS_EDONE:)
(6,RET)
(7,default:)
(8,peer)
(9,0)
(10,status)
(11,case 0:)
(12,peer->disc_prev_chr_val)
(13,switch (error->status)
(14,peer->conn_handle)
(15,conn_handle)
(16,if (peer->disc_prev_chr_val > 0)
(17,peer_dsc_add(peer, chr_val_handle, dsc)
(18,const struct ble_gatt_dsc *dsc)
(19,arg)
(20,peer->disc_prev_chr_val > 0)
(21,error->status)
(22,break;)
(23,return 0;)
(24,peer)
(25,)
(26,)
(27,peer = arg)
(28,chr_val_handle)
(29,peer_disc_dscs(peer)
(30,peer)
(31,error)
(32,peer->conn_handle == conn_handle)
(33,void *arg)
(34,peer)
(35,break;)
(36,0)
(37,uint16_t conn_handle)
(38,uint16_t chr_val_handle)
(39,peer)
(40,disc_prev_chr_val)
(41,assert(peer->conn_handle == conn_handle)
(42,dsc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^