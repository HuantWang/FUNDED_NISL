-----label-----
0
-----code-----
static int driver_forward_broadcast(Peer *sender, Message *message) {
        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);
        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
        MatchOwner *match_owner;
        int r;

        bus_get_broadcast_destinations(sender->bus, &destinations, &sender->sender_matches, sender, &message->metadata);

        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {
                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
                NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);

                c_list_unlink(&match_owner->destinations_link);

                r = policy_snapshot_check_send(sender->policy,
                                               receiver->seclabel,
                                               &receiver_names,
                                               message->metadata.fields.interface,
                                               message->metadata.fields.member,
                                               message->metadata.fields.path,
                                               message->metadata.header.type,
                                               true,
                                               message->metadata.fields.unix_fds);
                if (r) {
                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
                                continue;

                        return error_fold(r);
                }

                r = policy_snapshot_check_receive(receiver->policy,
                                                  &sender_names,
                                                  message->metadata.fields.interface,
                                                  message->metadata.fields.member,
                                                  message->metadata.fields.path,
                                                  message->metadata.header.type,
                                                  true,
                                                  message->metadata.fields.unix_fds);
                if (r) {
                        if (r == POLICY_E_ACCESS_DENIED)
                                continue;

                        return error_fold(r);
                }

                r = connection_queue(&receiver->connection, NULL, message);
                if (r) {
                        if (r == CONNECTION_E_QUOTA) {
                                connection_shutdown(&receiver->connection);

                                log_append_here(sender->bus->log, LOG_WARNING, 0);
                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,
                                                           sender->policy->seclabel, receiver->policy->seclabel,
                                                           message);
                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);
                                if (r)
                                        return error_fold(r);
                        } else {
                                return error_fold(r);
                        }
                }
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
19,20
19,21
20,21
22,23
23,24
25,26
26,27
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
57,59
60,61
61,62
61,63
63,64
65,66
66,67
66,68
66,69
66,70
66,71
66,72
67,68
69,70
69,71
70,71
73,74
74,75
76,77
77,78
77,79
78,79
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
91,92
93,94
93,95
93,96
93,97
94,95
96,97
97,98
99,100
101,102
103,104
103,105
103,106
103,107
103,108
103,109
103,110
103,111
103,112
104,105
105,106
105,107
106,107
108,109
108,110
108,111
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
119,120
121,122
122,123
122,124
123,124
125,126
125,127
127,128
128,129
128,130
129,130
131,132
132,133
132,134
133,134
136,137
137,138
137,139
138,139
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
149,154
149,155
149,156
149,157
149,158
149,159
150,151
152,153
152,154
153,154
156,157
156,158
157,158
160,161
161,162
163,164
163,165
164,165
164,166
165,166
165,167
166,167
171,172
171,173
172,173
172,174
173,174
173,175
174,175
179,180
179,181
180,181
180,182
181,182
181,183
182,183
187,188
187,189
188,189
188,190
189,190
189,191
190,191
196,197
196,198
197,198
197,199
198,199
198,200
199,200
204,205
204,206
205,206
207,208
207,209
208,209
208,210
209,210
209,211
210,211
210,212
211,212
213,214
215,216
215,217
216,217
218,219
221,222
222,223
222,224
223,224
225,226
227,228
228,229
228,230
229,230
231,232
231,233
231,234
231,235
231,236
231,237
231,238
231,239
231,240
232,233
234,235
234,236
235,236
238,239
239,240
241,242
241,243
242,243
242,244
243,244
243,245
244,245
249,250
249,251
250,251
250,252
251,252
251,253
252,253
257,258
257,259
258,259
258,260
259,260
259,261
260,261
265,266
265,267
266,267
266,268
267,268
267,269
268,269
274,275
274,276
275,276
275,277
276,277
276,278
277,278
282,283
282,284
283,284
285,286
285,287
286,287
286,288
287,288
287,289
288,289
290,291
293,294
294,295
294,296
295,296
297,298
299,300
300,301
300,302
301,302
303,304
303,305
303,306
303,307
304,305
306,307
307,308
307,309
308,309
311,312
313,314
315,316
315,317
316,317
318,319
319,320
319,321
319,322
320,321
320,322
321,322
323,324
325,326
325,327
325,328
325,329
325,330
326,327
327,328
327,329
328,329
330,331
331,332
331,333
332,333
335,336
336,337
336,338
336,339
336,340
337,338
339,340
339,341
340,341
340,342
341,342
345,346
348,349
349,350
349,351
349,352
349,353
349,354
349,355
349,356
349,357
349,358
350,351
352,353
352,354
353,354
356,357
356,358
357,358
360,361
360,362
361,362
364,365
365,366
367,368
368,369
370,371
370,372
371,372
371,373
372,373
376,377
376,378
377,378
377,379
378,379
382,383
384,385
385,386
385,387
386,387
388,389
388,390
388,391
388,392
389,390
391,392
391,393
392,393
392,394
393,394
398,399
398,400
399,400
402,403
402,404
403,404
405,406
406,407
406,408
407,408
409,410
411,412
412,413
413,414
413,415
414,415
416,417
418,419
-----nextToken-----
2,4,7,9,10,13,15,16,21,24,29,31,35,37,41,43,47,51,52,56,58,59,62,64,68,71,72,75,79,80,82,86,87,92,95,98,100,102,107,109,110,114,116,118,120,124,126,130,134,135,139,143,144,148,151,154,155,158,159,162,167,168,169,170,175,176,177,178,183,184,185,186,191,192,193,194,195,200,201,202,203,206,212,214,217,219,220,224,226,230,233,236,237,240,245,246,247,248,253,254,255,256,261,262,263,264,269,270,271,272,273,278,279,280,281,284,289,291,292,296,298,302,305,309,310,312,314,317,322,324,329,333,334,338,342,343,344,346,347,351,354,355,358,359,362,363,366,369,373,374,375,379,380,381,383,387,390,394,395,396,397,400,401,404,408,410,415,417,419
-----computeFrom-----
90,91
90,92
146,147
146,148
209,210
209,211
210,211
210,212
215,216
215,217
228,229
228,230
287,288
287,289
300,301
300,302
320,321
320,322
385,386
385,387
-----guardedBy-----
322,410
-----guardedByNegation-----
322,417
-----lastLexicalUse-----
322,417
-----jump-----
322,417
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_forward_broadcast(Peer *sender, Message *message) {        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);        MatchOwner *match_owner;        int r;        bus_get_broadcast_destinations(sender->bus, &destinations, &sender->sender_matches, sender, &message->metadata);        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                c_list_unlink(&match_owner->destinations_link);                r = policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }        return 0;}
static int
driver_forward_broadcast(Peer *sender, Message *message)
driver_forward_broadcast
Peer *sender
Peer
Peer
*sender
*
sender
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);        MatchOwner *match_owner;        int r;        bus_get_broadcast_destinations(sender->bus, &destinations, &sender->sender_matches, sender, &message->metadata);        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                c_list_unlink(&match_owner->destinations_link);                r = policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }        return 0;}
_c_cleanup_(c_list_flush)
_c_cleanup_(c_list_flush)
_c_cleanup_
_c_cleanup_
(c_list_flush)
c_list_flush
c_list_flush
)
CList destinations = C_LIST_INIT(destinations);
CList destinations = C_LIST_INIT(destinations);
CList
CList
destinations = C_LIST_INIT(destinations)
destinations
= C_LIST_INIT(destinations)
C_LIST_INIT(destinations)
C_LIST_INIT
C_LIST_INIT
destinations
destinations
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
sender_names
= NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&sender->owned_names
sender->owned_names
sender
sender
owned_names
MatchOwner *match_owner;
MatchOwner *match_owner;
MatchOwner
MatchOwner
*match_owner
*
match_owner
int r;
int r;
int
r
r
bus_get_broadcast_destinations(sender->bus, &destinations, &sender->sender_matches, sender, &message->metadata);
bus_get_broadcast_destinations(sender->bus, &destinations, &sender->sender_matches, sender, &message->metadata)
bus_get_broadcast_destinations
bus_get_broadcast_destinations
sender->bus
sender
sender
bus
&destinations
destinations
destinations
&sender->sender_matches
sender->sender_matches
sender
sender
sender_matches
sender
sender
&message->metadata
message->metadata
message
message
metadata
while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                c_list_unlink(&match_owner->destinations_link);                r = policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }
(match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))
match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
match_owner
match_owner
c_list_first_entry(&destinations, MatchOwner, destinations_link)
c_list_first_entry
c_list_first_entry
&destinations
destinations
destinations
MatchOwner
MatchOwner
destinations_link
destinations_link
{                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);                c_list_unlink(&match_owner->destinations_link);                r = policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds);                if (r) {                        if (r == POLICY_E_ACCESS_DENIED)                                continue;                        return error_fold(r);                }                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }
Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
Peer
Peer
*receiver = c_container_of(match_owner, Peer, owned_matches)
*
receiver
= c_container_of(match_owner, Peer, owned_matches)
c_container_of(match_owner, Peer, owned_matches)
c_container_of
c_container_of
match_owner
match_owner
Peer
Peer
owned_matches
owned_matches
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names);
NameSet
NameSet
receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
receiver_names
= NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&receiver->owned_names
receiver->owned_names
receiver
receiver
owned_names
c_list_unlink(&match_owner->destinations_link);
c_list_unlink(&match_owner->destinations_link)
c_list_unlink
c_list_unlink
&match_owner->destinations_link
match_owner->destinations_link
match_owner
match_owner
destinations_link
r = policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds);
r = policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds)
r
r
policy_snapshot_check_send(sender->policy,                                               receiver->seclabel,                                               &receiver_names,                                               message->metadata.fields.interface,                                               message->metadata.fields.member,                                               message->metadata.fields.path,                                               message->metadata.header.type,                                               true,                                               message->metadata.fields.unix_fds)
policy_snapshot_check_send
policy_snapshot_check_send
sender->policy
sender
sender
policy
receiver->seclabel
receiver
receiver
seclabel
&receiver_names
receiver_names
receiver_names
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->metadata.header.type
message->metadata.header
message->metadata
message
message
metadata
header
type
true
message->metadata.fields.unix_fds
message->metadata.fields
message->metadata
message
message
metadata
fields
unix_fds
if (r) {                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;                        return error_fold(r);                }
r
r
{                        if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;                        return error_fold(r);                }
if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)                                continue;
r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
r == POLICY_E_SELINUX_ACCESS_DENIED
r
r
POLICY_E_SELINUX_ACCESS_DENIED
POLICY_E_SELINUX_ACCESS_DENIED
continue;
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds);
r = policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds)
r
r
policy_snapshot_check_receive(receiver->policy,                                                  &sender_names,                                                  message->metadata.fields.interface,                                                  message->metadata.fields.member,                                                  message->metadata.fields.path,                                                  message->metadata.header.type,                                                  true,                                                  message->metadata.fields.unix_fds)
policy_snapshot_check_receive
policy_snapshot_check_receive
receiver->policy
receiver
receiver
policy
&sender_names
sender_names
sender_names
message->metadata.fields.interface
message->metadata.fields
message->metadata
message
message
metadata
fields
interface
message->metadata.fields.member
message->metadata.fields
message->metadata
message
message
metadata
fields
member
message->metadata.fields.path
message->metadata.fields
message->metadata
message
message
metadata
fields
path
message->metadata.header.type
message->metadata.header
message->metadata
message
message
metadata
header
type
true
message->metadata.fields.unix_fds
message->metadata.fields
message->metadata
message
message
metadata
fields
unix_fds
if (r) {                        if (r == POLICY_E_ACCESS_DENIED)                                continue;                        return error_fold(r);                }
r
r
{                        if (r == POLICY_E_ACCESS_DENIED)                                continue;                        return error_fold(r);                }
if (r == POLICY_E_ACCESS_DENIED)                                continue;
r == POLICY_E_ACCESS_DENIED
r
r
POLICY_E_ACCESS_DENIED
POLICY_E_ACCESS_DENIED
continue;
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = connection_queue(&receiver->connection, NULL, message);
r = connection_queue(&receiver->connection, NULL, message)
r
r
connection_queue(&receiver->connection, NULL, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
NULL
NULL
message
message
if (r) {                        if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }
r
r
{                        if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }
if (r == CONNECTION_E_QUOTA) {                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
{                                connection_shutdown(&receiver->connection);                                log_append_here(sender->bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        }
connection_shutdown(&receiver->connection);
connection_shutdown(&receiver->connection)
connection_shutdown
connection_shutdown
&receiver->connection
receiver->connection
receiver
receiver
connection
log_append_here(sender->bus->log, LOG_WARNING, 0);
log_append_here(sender->bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
sender->bus->log
sender->bus
sender
sender
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message);
bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,                                                           sender->policy->seclabel, receiver->policy->seclabel,                                                           message)
bus_log_append_transaction
bus_log_append_transaction
sender->bus
sender
sender
bus
sender->id
sender
sender
id
receiver->id
receiver
receiver
id
&sender_names
sender_names
sender_names
&receiver_names
receiver_names
receiver_names
sender->policy->seclabel
sender->policy
sender
sender
policy
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id);
r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id)
r
r
log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id)
log_commitf
log_commitf
sender->bus->log
sender->bus
sender
sender
bus
log
"Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to."
receiver->id
receiver
receiver
id
if (r)                                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
{                                return error_fold(r);                        }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(128,49,0)
(234,131,0)
(116,158,0)
(209,84,0)
(141,120,0)
(186,50,0)
(87,33,0)
(214,220,0)
(51,49,0)
(94,137,0)
(222,144,0)
(53,225,0)
(49,64,0)
(126,234,0)
(79,125,0)
(48,224,0)
(83,92,0)
(11,212,0)
(38,162,0)
(49,34,0)
(34,156,0)
(102,64,0)
(80,120,0)
(128,105,0)
(26,198,0)
(24,209,0)
(1,226,0)
(50,248,0)
(42,153,0)
(167,22,0)
(85,105,0)
(12,0,0)
(104,207,0)
(181,231,0)
(241,136,0)
(78,129,0)
(153,232,0)
(231,144,0)
(49,128,0)
(174,41,0)
(133,172,0)
(56,49,0)
(229,143,0)
(199,202,0)
(84,172,0)
(117,67,0)
(15,184,0)
(211,131,0)
(191,92,0)
(218,44,0)
(173,23,0)
(178,257,0)
(230,204,0)
(185,207,0)
(177,163,0)
(21,32,0)
(6,67,0)
(10,84,0)
(64,212,0)
(68,50,0)
(45,144,0)
(20,161,0)
(76,161,0)
(161,226,0)
(236,211,0)
(96,73,0)
(225,49,0)
(110,117,0)
(96,207,0)
(129,248,0)
(220,56,0)
(95,158,0)
(28,133,0)
(80,131,0)
(0,12,0)
(152,184,0)
(127,239,0)
(206,226,0)
(39,170,0)
(63,257,0)
(160,156,0)
(253,137,0)
(134,172,0)
(257,226,0)
(92,158,0)
(218,16,0)
(33,224,0)
(86,49,0)
(117,163,0)
(94,131,0)
(51,66,0)
(172,84,0)
(49,51,0)
(111,148,0)
(230,222,0)
(213,25,0)
(245,133,0)
(154,193,0)
(244,58,0)
(25,53,0)
(230,241,0)
(169,129,0)
(250,44,0)
(206,186,0)
(172,133,0)
(13,31,0)
(257,239,0)
(252,145,0)
(143,145,0)
(159,224,0)
(67,117,0)
(224,202,0)
(131,12,0)
(179,152,0)
(198,192,0)
(201,44,0)
(189,96,0)
(81,206,0)
(251,117,0)
(172,134,0)
(225,53,0)
(61,181,0)
(232,158,0)
(170,39,0)
(112,105,0)
(29,25,0)
(89,40,0)
(208,83,0)
(34,49,0)
(232,50,0)
(58,59,0)
(164,173,0)
(253,224,0)
(246,0,0)
(184,137,0)
(105,112,0)
(211,145,0)
(120,130,0)
(173,100,0)
(101,112,0)
(174,221,0)
(66,179,0)
(193,73,0)
(84,209,0)
(98,58,0)
(166,226,0)
(226,257,0)
(66,144,0)
(1,224,0)
(246,248,0)
(255,253,0)
(168,59,0)
(129,220,0)
(235,232,0)
(251,125,0)
(130,120,0)
(199,137,0)
(131,211,0)
(73,193,0)
(23,131,0)
(224,207,0)
(243,166,0)
(221,174,0)
(223,226,0)
(53,25,0)
(230,198,0)
(224,48,0)
(72,1,0)
(131,80,0)
(157,148,0)
(40,210,0)
(131,16,0)
(49,56,0)
(92,131,0)
(170,158,0)
(37,234,0)
(39,20,0)
(41,239,0)
(49,225,0)
(31,212,0)
(30,158,0)
(190,80,0)
(219,130,0)
(203,77,0)
(148,110,0)
(41,174,0)
(149,53,0)
(166,155,0)
(168,241,0)
(27,218,0)
(197,34,0)
(182,1,0)
(162,69,0)
(115,94,0)
(132,160,0)
(131,94,0)
(135,31,0)
(19,92,0)
(147,143,0)
(155,185,0)
(231,181,0)
(120,80,0)
(31,248,0)
(65,66,0)
(47,134,0)
(67,137,0)
(184,152,0)
(237,191,0)
(254,97,0)
(123,112,0)
(171,231,0)
(108,246,0)
(193,137,0)
(230,69,0)
(237,83,0)
(242,199,0)
(70,222,0)
(46,160,0)
(48,137,0)
(131,23,0)
(100,173,0)
(224,3,0)
(200,202,0)
(228,48,0)
(196,209,0)
(64,49,0)
(124,153,0)
(83,237,0)
(162,134,0)
(122,223,0)
(117,110,0)
(105,128,0)
(143,248,0)
(59,158,0)
(17,257,0)
(3,66,0)
(91,41,0)
(26,232,0)
(18,23,0)
(90,204,0)
(209,137,0)
(22,33,0)
(224,33,0)
(106,144,0)
(49,59,0)
(202,224,0)
(107,191,0)
(224,1,0)
(109,226,0)
(188,100,0)
(247,168,0)
(183,210,0)
(114,225,0)
(54,59,0)
(117,144,0)
(23,173,0)
(210,231,0)
(125,137,0)
(56,220,0)
(59,49,0)
(148,248,0)
(16,218,0)
(52,100,0)
(71,144,0)
(60,158,0)
(50,232,0)
(93,246,0)
(33,22,0)
(191,237,0)
(7,144,0)
(224,97,0)
(212,31,0)
(88,166,0)
(103,170,0)
(195,128,0)
(146,50,0)
(2,161,0)
(186,206,0)
(216,48,0)
(44,248,0)
(12,131,0)
(5,144,0)
(187,156,0)
(185,155,0)
(145,143,0)
(238,172,0)
(212,64,0)
(117,251,0)
(249,90,0)
(130,248,0)
(220,129,0)
(16,131,0)
(131,92,0)
(194,73,0)
(110,148,0)
(25,248,0)
(151,158,0)
(40,239,0)
(75,26,0)
(142,125,0)
(57,56,0)
(156,34,0)
(180,206,0)
(202,199,0)
(43,94,0)
(234,226,0)
(179,66,0)
(22,226,0)
(44,218,0)
(204,77,0)
(20,39,0)
(118,51,0)
(134,207,0)
(138,0,0)
(49,223,0)
(256,16,0)
(140,40,0)
(74,253,0)
(163,231,0)
(99,131,0)
(3,224,0)
(50,186,0)
(100,248,0)
(227,117,0)
(99,170,0)
(145,211,0)
(0,246,0)
(223,49,0)
(215,131,0)
(73,96,0)
(205,191,0)
(121,199,0)
(97,224,0)
(125,251,0)
(155,166,0)
(90,92,0)
(62,223,0)
(165,83,0)
(224,253,0)
(82,136,0)
(175,41,0)
(226,158,0)
(156,160,0)
(97,170,0)
(36,22,0)
(133,226,0)
(119,184,0)
(224,248,0)
(131,99,0)
(131,234,0)
(152,179,0)
(150,3,0)
(163,117,0)
(217,96,0)
(176,99,0)
(160,248,0)
(14,193,0)
(112,248,0)
(161,20,0)
(239,40,0)
(117,137,0)
(139,67,0)
(210,40,0)
(35,130,0)
(221,158,0)
(240,12,0)
(168,247,1)
(90,249,1)
(31,135,1)
(94,137,1)
(49,64,1)
(110,148,1)
(123,51,1)
(208,165,1)
(65,231,1)
(51,66,1)
(173,100,1)
(121,97,1)
(119,65,1)
(161,226,1)
(244,9,1)
(39,20,1)
(148,248,1)
(57,220,1)
(250,99,1)
(210,231,1)
(130,35,1)
(48,216,1)
(114,53,1)
(49,223,1)
(131,234,1)
(99,170,1)
(34,156,1)
(149,25,1)
(236,145,1)
(53,149,1)
(153,124,1)
(218,44,1)
(27,44,1)
(161,2,1)
(228,253,1)
(97,170,1)
(195,105,1)
(217,189,1)
(159,33,1)
(131,211,1)
(209,137,1)
(239,40,1)
(134,172,1)
(131,80,1)
(81,235,1)
(108,93,1)
(199,137,1)
(73,194,1)
(155,166,1)
(225,53,1)
(166,226,1)
(93,80,1)
(187,160,1)
(224,33,1)
(143,229,1)
(173,164,1)
(126,94,1)
(40,210,1)
(145,143,1)
(256,218,1)
(166,88,1)
(190,120,1)
(25,248,1)
(197,156,1)
(184,15,1)
(3,150,1)
(120,141,1)
(64,102,1)
(69,162,1)
(67,137,1)
(165,113,1)
(105,112,1)
(9,59,1)
(145,252,1)
(224,248,1)
(186,206,1)
(224,48,1)
(16,218,1)
(206,226,1)
(191,92,1)
(129,78,1)
(11,31,1)
(240,0,1)
(43,19,1)
(55,232,1)
(230,198,1)
(92,131,1)
(76,103,1)
(246,248,1)
(113,92,1)
(202,199,1)
(127,4,1)
(224,3,1)
(124,42,1)
(177,67,1)
(139,66,1)
(94,115,1)
(31,248,1)
(184,137,1)
(2,76,1)
(191,205,1)
(117,137,1)
(150,1,1)
(41,239,1)
(56,220,1)
(157,111,1)
(40,89,1)
(211,236,1)
(54,113,1)
(87,22,1)
(12,0,1)
(84,10,1)
(49,225,1)
(225,114,1)
(214,129,1)
(224,1,1)
(24,47,1)
(47,224,1)
(131,23,1)
(152,184,1)
(245,238,1)
(78,169,1)
(141,130,1)
(129,248,1)
(1,226,1)
(172,133,1)
(193,154,1)
(230,241,1)
(241,168,1)
(0,138,1)
(98,244,1)
(204,90,1)
(26,232,1)
(238,84,1)
(154,14,1)
(138,246,1)
(206,180,1)
(188,52,1)
(169,86,1)
(109,239,1)
(4,58,1)
(133,226,1)
(232,50,1)
(201,250,1)
(189,73,1)
(252,143,1)
(79,163,1)
(231,181,1)
(44,248,1)
(0,246,1)
(28,245,1)
(100,188,1)
(199,242,1)
(160,46,1)
(51,118,1)
(58,59,1)
(221,174,1)
(41,91,1)
(251,125,1)
(83,208,1)
(220,129,1)
(68,146,1)
(117,251,1)
(130,248,1)
(72,48,1)
(143,248,1)
(205,107,1)
(249,237,1)
(22,36,1)
(253,74,1)
(74,255,1)
(128,195,1)
(175,170,1)
(90,92,1)
(247,58,1)
(237,191,1)
(36,167,1)
(49,56,1)
(211,145,1)
(112,101,1)
(46,132,1)
(49,51,1)
(91,175,1)
(86,64,1)
(180,81,1)
(127,117,1)
(174,41,1)
(122,54,1)
(80,120,1)
(162,134,1)
(131,94,1)
(50,248,1)
(162,38,1)
(135,13,1)
(243,153,1)
(257,63,1)
(44,201,1)
(49,128,1)
(88,243,1)
(168,59,1)
(227,251,1)
(170,39,1)
(254,3,1)
(127,55,1)
(253,137,1)
(131,16,1)
(112,248,1)
(120,130,1)
(15,119,1)
(102,212,1)
(22,226,1)
(257,239,1)
(140,210,1)
(26,75,1)
(10,209,1)
(255,96,1)
(80,190,1)
(230,204,1)
(133,28,1)
(37,126,1)
(23,18,1)
(233,134,1)
(8,237,1)
(35,219,1)
(125,137,1)
(18,173,1)
(164,100,1)
(61,171,1)
(209,196,1)
(220,214,1)
(223,62,1)
(50,68,1)
(118,223,1)
(49,34,1)
(160,248,1)
(198,26,1)
(212,11,1)
(66,179,1)
(224,97,1)
(53,25,1)
(237,83,1)
(200,199,1)
(23,173,1)
(48,137,1)
(246,108,1)
(148,157,1)
(219,211,1)
(83,92,1)
(218,27,1)
(163,231,1)
(34,197,1)
(73,193,1)
(193,137,1)
(3,66,1)
(1,182,1)
(224,253,1)
(67,6,1)
(17,109,1)
(147,16,1)
(235,9,1)
(25,29,1)
(125,142,1)
(96,217,1)
(100,248,1)
(101,123,1)
(167,202,1)
(156,160,1)
(38,233,1)
(117,163,1)
(64,212,1)
(13,34,1)
(222,70,1)
(19,221,1)
(12,240,1)
(131,99,1)
(117,110,1)
(42,55,1)
(131,12,1)
(185,155,1)
(142,79,1)
(194,193,1)
(99,176,1)
(75,153,1)
(111,227,1)
(115,43,1)
(210,183,1)
(234,37,1)
(96,73,1)
(146,186,1)
(127,233,1)
(103,226,1)
(242,121,1)
(70,239,1)
(33,22,1)
(213,128,1)
(230,222,1)
(163,177,1)
(56,57,1)
(156,187,1)
(172,84,1)
(178,17,1)
(85,112,1)
(117,67,1)
(52,215,1)
(16,256,1)
(153,232,1)
(50,186,1)
(97,254,1)
(128,105,1)
(29,213,1)
(234,226,1)
(176,234,1)
(224,202,1)
(33,87,1)
(215,12,1)
(202,200,1)
(224,159,1)
(105,85,1)
(107,83,1)
(223,226,1)
(127,8,1)
(226,257,1)
(62,122,1)
(229,147,1)
(181,61,1)
(84,209,1)
(179,152,1)
(212,31,1)
(14,185,1)
(20,161,1)
(196,24,1)
(183,127,1)
(230,69,1)
(63,178,1)
(58,98,1)
(89,140,1)
(132,225,1)
(216,228,1)
(6,139,1)
(59,49,1)
(182,72,1)
(168,59,2)
(223,113,2)
(202,153,2)
(34,156,2)
(100,248,2)
(224,33,2)
(11,113,2)
(41,239,2)
(149,113,2)
(67,137,2)
(246,248,2)
(121,153,2)
(50,9,2)
(213,113,2)
(132,113,2)
(229,239,2)
(1,226,2)
(172,133,2)
(96,73,2)
(103,239,2)
(140,55,2)
(223,226,2)
(209,137,2)
(162,233,2)
(35,239,2)
(13,113,2)
(40,237,2)
(22,226,2)
(143,248,2)
(128,113,2)
(172,84,2)
(117,251,2)
(117,137,2)
(255,153,2)
(36,153,2)
(37,239,2)
(197,113,2)
(48,137,2)
(244,9,2)
(74,153,2)
(109,239,2)
(172,153,2)
(224,1,2)
(131,99,2)
(34,113,2)
(51,66,2)
(215,239,2)
(64,113,2)
(131,12,2)
(73,153,2)
(40,58,2)
(105,113,2)
(84,209,2)
(230,222,2)
(49,225,2)
(254,153,2)
(46,113,2)
(50,248,2)
(131,211,2)
(129,113,2)
(110,148,2)
(73,193,2)
(47,153,2)
(239,58,2)
(4,58,2)
(130,248,2)
(10,153,2)
(169,113,2)
(232,50,2)
(23,173,2)
(224,97,2)
(99,170,2)
(89,55,2)
(20,239,2)
(161,226,2)
(59,113,2)
(0,239,2)
(210,237,2)
(216,153,2)
(140,237,2)
(12,0,2)
(140,233,2)
(130,239,2)
(239,55,2)
(59,49,2)
(234,239,2)
(199,153,2)
(150,153,2)
(8,237,2)
(97,170,2)
(222,239,2)
(233,153,2)
(64,212,2)
(52,239,2)
(218,44,2)
(176,239,2)
(224,3,2)
(90,92,2)
(237,113,2)
(24,153,2)
(83,113,2)
(231,181,2)
(212,113,2)
(75,153,2)
(212,31,2)
(90,237,2)
(107,83,2)
(49,51,2)
(247,58,2)
(89,237,2)
(204,237,2)
(193,137,2)
(92,239,2)
(210,231,2)
(51,113,2)
(187,113,2)
(196,153,2)
(31,113,2)
(89,58,2)
(127,237,2)
(234,226,2)
(127,55,2)
(146,9,2)
(55,9,2)
(63,239,2)
(49,113,2)
(134,172,2)
(124,55,2)
(160,113,2)
(239,40,2)
(195,113,2)
(57,113,2)
(133,153,2)
(14,153,2)
(128,105,2)
(56,220,2)
(152,184,2)
(237,191,2)
(29,113,2)
(153,232,2)
(131,80,2)
(84,153,2)
(236,239,2)
(239,237,2)
(56,113,2)
(91,239,2)
(81,9,2)
(31,248,2)
(76,239,2)
(123,113,2)
(113,239,2)
(225,53,2)
(206,9,2)
(96,153,2)
(23,239,2)
(43,239,2)
(239,233,2)
(226,239,2)
(135,113,2)
(49,223,2)
(127,233,2)
(230,204,2)
(131,239,2)
(25,248,2)
(115,239,2)
(145,143,2)
(191,83,2)
(54,113,2)
(166,226,2)
(66,179,2)
(42,55,2)
(44,248,2)
(25,113,2)
(191,92,2)
(180,9,2)
(20,161,2)
(1,153,2)
(224,48,2)
(163,231,2)
(170,239,2)
(16,218,2)
(127,58,2)
(173,100,2)
(178,239,2)
(153,55,2)
(145,239,2)
(164,239,2)
(48,153,2)
(58,9,2)
(129,248,2)
(131,23,2)
(122,113,2)
(246,239,2)
(89,233,2)
(183,237,2)
(120,239,2)
(50,186,2)
(39,239,2)
(16,239,2)
(105,112,2)
(208,113,2)
(210,233,2)
(72,153,2)
(220,129,2)
(140,58,2)
(100,239,2)
(2,239,2)
(112,113,2)
(253,137,2)
(114,113,2)
(26,232,2)
(250,239,2)
(143,239,2)
(224,202,2)
(159,153,2)
(224,253,2)
(211,145,2)
(40,55,2)
(240,239,2)
(155,153,2)
(221,174,2)
(185,153,2)
(0,246,2)
(205,83,2)
(26,153,2)
(209,153,2)
(3,153,2)
(70,239,2)
(245,153,2)
(134,153,2)
(94,239,2)
(40,233,2)
(39,20,2)
(53,113,2)
(228,153,2)
(118,113,2)
(217,153,2)
(241,58,2)
(131,16,2)
(125,137,2)
(49,128,2)
(211,239,2)
(147,239,2)
(99,239,2)
(126,239,2)
(98,9,2)
(94,137,2)
(88,153,2)
(154,153,2)
(206,226,2)
(160,248,2)
(253,153,2)
(220,113,2)
(40,210,2)
(194,153,2)
(224,153,2)
(93,239,2)
(97,153,2)
(131,234,2)
(179,152,2)
(87,153,2)
(189,153,2)
(225,113,2)
(155,166,2)
(18,239,2)
(183,58,2)
(202,199,2)
(257,239,2)
(156,113,2)
(17,239,2)
(200,153,2)
(224,248,2)
(108,239,2)
(86,113,2)
(12,239,2)
(156,160,2)
(230,198,2)
(33,22,2)
(92,131,2)
(219,239,2)
(198,153,2)
(186,206,2)
(58,59,2)
(49,64,2)
(117,110,2)
(101,113,2)
(218,239,2)
(210,58,2)
(252,239,2)
(174,239,2)
(237,83,2)
(174,41,2)
(210,55,2)
(80,239,2)
(112,248,2)
(9,113,2)
(188,239,2)
(251,125,2)
(83,92,2)
(117,67,2)
(214,113,2)
(138,239,2)
(117,163,2)
(28,153,2)
(62,113,2)
(243,153,2)
(165,113,2)
(175,239,2)
(173,239,2)
(38,233,2)
(120,130,2)
(80,120,2)
(201,239,2)
(193,153,2)
(78,113,2)
(161,239,2)
(235,9,2)
(148,248,2)
(168,58,2)
(22,153,2)
(185,155,2)
(182,153,2)
(170,39,2)
(199,137,2)
(238,153,2)
(242,153,2)
(3,66,2)
(184,137,2)
(49,56,2)
(53,25,2)
(190,239,2)
(49,34,2)
(186,9,2)
(33,153,2)
(85,113,2)
(68,9,2)
(256,239,2)
(44,239,2)
(226,257,2)
(162,134,2)
(167,153,2)
(19,239,2)
(249,237,2)
(27,239,2)
(133,226,2)
(131,94,2)
(230,69,2)
(232,9,2)
(102,113,2)
(183,233,2)
(221,239,2)
(183,55,2)
(166,153,2)
(230,241,2)
(69,233,2)
(141,239,2)
-----------------------------------
(0,message->metadata.header)
(1,receiver->id)
(2,owned_names)
(3,&sender_names)
(4,continue;)
(5,match_owner)
(6,bus)
(7,destinations)
(8,continue;)
(9,r)
(10,log)
(11,header)
(12,message->metadata.header.type)
(13,message)
(14,sender)
(15,owned_names)
(16,message->metadata.fields.interface)
(17,match_owner)
(18,unix_fds)
(19,r)
(20,&receiver->owned_names)
(21,if (r == CONNECTION_E_QUOTA)
(22,receiver->policy)
(23,message->metadata.fields.unix_fds)
(24,sender)
(25,message->metadata)
(26,error_fold(r)
(27,fields)
(28,id)
(29,metadata)
(30,if (r)
(31,message->metadata)
(32,)
(33,receiver->policy->seclabel)
(34,message->metadata.fields.path)
(35,metadata)
(36,policy)
(37,seclabel)
(38,r)
(39,NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(40,c_list_first_entry(&destinations, MatchOwner, destinations_link)
(41,match_owner->destinations_link)
(42,r)
(43,sender)
(44,message->metadata)
(45,r)
(46,metadata)
(47,r)
(48,sender->id)
(49,policy_snapshot_check_receive(receiver->policy,\n\\n                                                  &sender_names,\n\\n                                                  message->metadata.fields.interface,\n\\n                                                  message->metadata.fields.member,\n\\n                                                  message->metadata.fields.path,\n\\n                                                  message->metadata.header.type,\n\\n                                                  true,\n\\n                                                  message->metadata.fields.unix_fds)
(50,connection_queue(&receiver->connection, NULL, message)
(51,&sender_names)
(52,message)
(53,message->metadata.fields)
(54,r)
(55,r)
(56,message->metadata.fields.unix_fds)
(57,unix_fds)
(58,r == POLICY_E_ACCESS_DENIED)
(59,r = policy_snapshot_check_receive(receiver->policy,\n\\n                                                  &sender_names,\n\\n                                                  message->metadata.fields.interface,\n\\n                                                  message->metadata.fields.member,\n\\n                                                  message->metadata.fields.path,\n\\n                                                  message->metadata.header.type,\n\\n                                                  true,\n\\n                                                  message->metadata.fields.unix_fds)
(60,receiver_names)
(61,destinations)
(62,policy)
(63,owned_matches)
(64,message->metadata.header.type)
(65,sender_names)
(66,sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(67,sender->bus)
(68,message)
(69,return error_fold(r)
(70,0)
(71,while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
(72,receiver)
(73,sender->bus->log)
(74,bus)
(75,r)
(76,receiver)
(77,)
(78,metadata)
(79,sender)
(80,message->metadata.fields.path)
(81,receiver)
(82,if (r == POLICY_E_ACCESS_DENIED)
(83,r == POLICY_E_ACCESS_DENIED)
(84,sender->bus->log)
(85,fields)
(86,true)
(87,seclabel)
(88,connection)
(89,destinations_link)
(90,error_fold(r)
(91,destinations_link)
(92,r = policy_snapshot_check_send(sender->policy,\n\\n                                               receiver->seclabel,\n\\n                                               &receiver_names,\n\\n                                               message->metadata.fields.interface,\n\\n                                               message->metadata.fields.member,\n\\n                                               message->metadata.fields.path,\n\\n                                               message->metadata.header.type,\n\\n                                               true,\n\\n                                               message->metadata.fields.unix_fds)
(93,message)
(94,sender->policy)
(95,if (r)
(96,log_append_here(sender->bus->log, LOG_WARNING, 0)
(97,&receiver_names)
(98,POLICY_E_ACCESS_DENIED)
(99,&receiver_names)
(100,message->metadata)
(101,metadata)
(102,type)
(103,receiver_names)
(104,if (r)
(105,message->metadata.fields)
(106,sender_names)
(107,r)
(108,metadata)
(109,receiver)
(110,&message->metadata)
(111,message)
(112,message->metadata)
(113,r)
(114,member)
(115,policy)
(116,receiver)
(117,bus_get_broadcast_destinations(sender->bus, &destinations, &sender->sender_matches, sender, &message->metadata)
(118,sender_names)
(119,sender)
(120,message->metadata.fields)
(121,sender)
(122,receiver)
(123,message)
(124,CONNECTION_E_QUOTA)
(125,sender->sender_matches)
(126,receiver)
(127,match_owner)
(128,message->metadata.fields.interface)
(129,message->metadata)
(130,message->metadata)
(131,policy_snapshot_check_send(sender->policy,\n\\n                                               receiver->seclabel,\n\\n                                               &receiver_names,\n\\n                                               message->metadata.fields.interface,\n\\n                                               message->metadata.fields.member,\n\\n                                               message->metadata.fields.path,\n\\n                                               message->metadata.header.type,\n\\n                                               true,\n\\n                                               message->metadata.fields.unix_fds)
(132,message)
(133,receiver->id)
(134,r = log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id)
(135,metadata)
(136,)
(137,Peer *sender)
(138,header)
(139,sender)
(140,MatchOwner)
(141,fields)
(142,sender_matches)
(143,message->metadata)
(144,)
(145,message->metadata.fields)
(146,NULL)
(147,message)
(148,message->metadata)
(149,fields)
(150,sender_names)
(151,if (r)
(152,&sender->owned_names)
(153,r == CONNECTION_E_QUOTA)
(154,bus)
(155,&receiver->connection)
(156,message->metadata.fields)
(157,metadata)
(158,)
(159,message)
(160,message->metadata)
(161,receiver->owned_names)
(162,error_fold(r)
(163,&destinations)
(164,fields)
(165,r)
(166,receiver->connection)
(167,receiver)
(168,error_fold(r)
(169,message)
(170,receiver_names = NAME_SET_INIT_FROM_OWNER(&receiver->owned_names)
(171,destinations)
(172,log_commitf(sender->bus->log, "Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.", receiver->id)
(173,message->metadata.fields)
(174,&match_owner->destinations_link)
(175,match_owner)
(176,receiver_names)
(177,destinations)
(178,Peer)
(179,NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(180,connection)
(181,C_LIST_INIT(destinations)
(182,id)
(183,destinations)
(184,sender->owned_names)
(185,connection_shutdown(&receiver->connection)
(186,&receiver->connection)
(187,fields)
(188,metadata)
(189,LOG_WARNING)
(190,path)
(191,r == POLICY_E_SELINUX_ACCESS_DENIED)
(192,)
(193,sender->bus)
(194,log)
(195,interface)
(196,bus)
(197,path)
(198,return error_fold(r)
(199,sender->policy)
(200,seclabel)
(201,metadata)
(202,sender->policy->seclabel)
(203,if (r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
(204,return error_fold(r)
(205,POLICY_E_SELINUX_ACCESS_DENIED)
(206,receiver->connection)
(207,)
(208,POLICY_E_ACCESS_DENIED)
(209,sender->bus)
(210,&destinations)
(211,message->metadata.fields.member)
(212,message->metadata.header)
(213,message)
(214,fields)
(215,true)
(216,id)
(217,0)
(218,message->metadata.fields)
(219,message)
(220,message->metadata.fields)
(221,c_list_unlink(&match_owner->destinations_link)
(222,return 0;)
(223,receiver->policy)
(224,bus_log_append_transaction(sender->bus, sender->id, receiver->id, &sender_names, &receiver_names,\n\\n                                                           sender->policy->seclabel, receiver->policy->seclabel,\n\\n                                                           message)
(225,message->metadata.fields.member)
(226,*receiver = c_container_of(match_owner, Peer, owned_matches)
(227,sender)
(228,sender)
(229,metadata)
(230,RET)
(231,destinations = C_LIST_INIT(destinations)
(232,r = connection_queue(&receiver->connection, NULL, message)
(233,r)
(234,receiver->seclabel)
(235,r)
(236,member)
(237,r == POLICY_E_ACCESS_DENIED || r == POLICY_E_SELINUX_ACCESS_DENIED)
(238,"Peer :1.%llu is being disconnected as it does not have the resources to receive a signal it subscribed to.")
(239,match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
(240,type)
(241,return error_fold(r)
(242,policy)
(243,receiver)
(244,r)
(245,receiver)
(246,message->metadata)
(247,r)
(248,Message *message)
(249,r)
(250,message)
(251,&sender->sender_matches)
(252,fields)
(253,sender->bus)
(254,receiver_names)
(255,sender)
(256,interface)
(257,c_container_of(match_owner, Peer, owned_matches)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^