-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
89,92
90,91
91,92
93,94
94,95
95,96
95,97
96,97
99,100
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,92,97,98,103,105
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(50,48,0)
(32,53,0)
(35,1,0)
(39,32,0)
(25,53,0)
(17,53,0)
(15,13,0)
(53,1,0)
(2,47,0)
(2,53,0)
(18,36,0)
(31,12,0)
(15,35,0)
(2,46,0)
(45,52,0)
(20,13,0)
(49,20,0)
(27,8,0)
(9,14,0)
(41,53,0)
(19,14,0)
(11,22,0)
(14,1,0)
(52,53,0)
(36,18,0)
(19,32,0)
(16,41,0)
(51,41,0)
(38,43,0)
(44,10,0)
(30,12,0)
(18,3,0)
(35,15,0)
(17,26,0)
(6,2,0)
(34,47,0)
(13,20,0)
(7,52,0)
(17,48,0)
(5,47,0)
(53,17,0)
(13,15,0)
(37,44,0)
(28,1,0)
(48,43,0)
(21,15,0)
(20,53,0)
(23,20,0)
(15,21,0)
(48,17,0)
(42,19,0)
(43,48,0)
(8,1,0)
(22,8,0)
(47,12,0)
(0,12,0)
(26,17,0)
(52,22,0)
(24,32,0)
(22,52,0)
(43,38,0)
(40,36,0)
(32,19,0)
(33,35,1)
(34,5,1)
(17,48,1)
(29,44,1)
(6,33,1)
(27,22,1)
(52,53,1)
(7,45,1)
(44,37,1)
(48,43,1)
(54,47,1)
(20,53,1)
(11,52,1)
(20,23,1)
(36,40,1)
(29,2,1)
(2,53,1)
(32,24,1)
(53,17,1)
(43,50,1)
(2,47,1)
(41,51,1)
(15,21,1)
(39,18,1)
(22,11,1)
(41,53,1)
(35,15,1)
(45,14,1)
(9,19,1)
(24,39,1)
(18,36,1)
(47,34,1)
(13,20,1)
(8,27,1)
(23,49,1)
(17,26,1)
(15,13,1)
(22,52,1)
(52,7,1)
(19,42,1)
(25,54,1)
(40,41,1)
(33,54,1)
(42,32,1)
(39,41,1)
(49,8,1)
(19,32,1)
(14,9,1)
(32,53,1)
(16,53,1)
(2,6,1)
(51,16,1)
(43,38,1)
(50,25,1)
(37,33,1)
(48,54,2)
(39,54,2)
(23,54,2)
(41,54,2)
(42,54,2)
(13,20,2)
(43,38,2)
(18,41,2)
(53,17,2)
(17,54,2)
(14,54,2)
(17,48,2)
(51,54,2)
(36,41,2)
(20,53,2)
(8,54,2)
(50,54,2)
(27,54,2)
(41,53,2)
(16,54,2)
(35,15,2)
(7,54,2)
(2,47,2)
(35,54,2)
(49,54,2)
(53,54,2)
(15,13,2)
(9,54,2)
(43,54,2)
(48,43,2)
(22,54,2)
(24,54,2)
(20,54,2)
(32,53,2)
(22,52,2)
(2,33,2)
(32,54,2)
(19,32,2)
(40,41,2)
(52,53,2)
(15,54,2)
(37,33,2)
(18,36,2)
(44,33,2)
(13,54,2)
(17,26,2)
(6,33,2)
(45,54,2)
(15,21,2)
(2,53,2)
(11,54,2)
(19,54,2)
(52,54,2)
(25,54,2)
-----------------------------------
(0,if(globalReturnsFalse()
(1,)
(2,free(data)
(3,)
(4, sizeof(struct _twoIntsStruct)
(5,data)
(6,data)
(7,0)
(8,data[0].intTwo = 0)
(9,0)
(10,)
(11,intTwo)
(12,)
(13,&data[0])
(14,data[0].intOne = 0)
(15,(twoIntsStruct *)
(16,data)
(17,(struct _twoIntsStruct *)
(18,exit(-1)
(19,data[0].intOne)
(20,data[0])
(21,twoIntsStruct *)
(22,data[0].intTwo)
(23,0)
(24,0)
(25,data)
(26,struct _twoIntsStruct *)
(27,0)
(28,if (data == NULL)
(29,RET)
(30,data)
(31,if(globalReturnsTrue()
(32,data[0])
(33,globalReturnsFalse()
(34,NULL)
(35,printStructLine((twoIntsStruct *)
(36,-1)
(37,"Benign, fixed string")
(38,struct _twoIntsStruct)
(39,data)
(40,1)
(41,data == NULL)
(42,intOne)
(43,sizeof(struct _twoIntsStruct)
(44,printLine("Benign, fixed string")
(45,data)
(46,)
(47,data = NULL)
(48,calloc(100, sizeof(struct _twoIntsStruct)
(49,data)
(50,100)
(51,NULL)
(52,data[0])
(53,data = (struct _twoIntsStruct *)
(54,globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^