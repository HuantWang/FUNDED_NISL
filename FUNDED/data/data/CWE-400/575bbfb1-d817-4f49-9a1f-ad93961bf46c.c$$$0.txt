-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_05_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_05_bad(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_05_bad()
CWE401_Memory_Leak__wchar_t_malloc_05_bad
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(27,6,0)
(22,10,0)
(26,3,0)
(5,15,0)
(28,26,0)
(7,11,0)
(1,11,0)
(2,9,0)
(29,3,0)
(6,29,0)
(19,29,0)
(16,15,0)
(29,6,0)
(12,3,0)
(20,4,0)
(6,27,0)
(0,9,0)
(8,9,0)
(21,1,0)
(14,0,0)
(18,9,0)
(27,11,0)
(11,27,0)
(20,10,0)
(6,13,0)
(26,29,0)
(13,6,0)
(15,29,0)
(11,1,0)
(10,20,0)
(24,0,0)
(15,29,1)
(28,15,1)
(6,27,1)
(22,15,1)
(1,21,1)
(25,17,1)
(17,26,1)
(16,5,1)
(26,29,1)
(23,0,1)
(15,16,1)
(11,1,1)
(19,23,1)
(5,29,1)
(28,20,1)
(17,23,1)
(10,22,1)
(21,7,1)
(0,24,1)
(27,11,1)
(26,28,1)
(20,10,1)
(6,13,1)
(24,14,1)
(7,19,1)
(29,6,1)
(28,23,2)
(15,23,2)
(1,23,2)
(21,23,2)
(27,11,2)
(6,27,2)
(26,29,2)
(7,23,2)
(11,1,2)
(10,15,2)
(20,10,2)
(6,13,2)
(11,23,2)
(19,23,2)
(29,23,2)
(5,23,2)
(26,23,2)
(22,15,2)
(20,15,2)
(29,6,2)
(15,29,2)
(6,23,2)
(16,23,2)
(27,23,2)
-----------------------------------
(0,data = NULL)
(1,sizeof(wchar_t)
(2,if(staticTrue)
(3,)
(4,)
(5,data)
(6,(wchar_t *)
(7,100)
(8,if(staticTrue)
(9,)
(10,-1)
(11,100*sizeof(wchar_t)
(12,if (data == NULL)
(13,wchar_t *)
(14,data)
(15,data == NULL)
(16,NULL)
(17,staticTrue)
(18,data)
(19,data)
(20,exit(-1)
(21,wchar_t)
(22,1)
(23,staticTrue)
(24,NULL)
(25,RET)
(26,printWLine(data)
(27,malloc(100*sizeof(wchar_t)
(28,data)
(29,data = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^