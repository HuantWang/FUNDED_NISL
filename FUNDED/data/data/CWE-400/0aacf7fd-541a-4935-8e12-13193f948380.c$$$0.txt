-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
20,21
22,23
24,25
25,26
27,28
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
32,39
32,40
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
67,68
68,69
70,71
70,72
71,72
71,73
71,74
71,75
71,76
71,77
71,78
71,79
71,80
71,81
71,82
71,83
71,84
71,85
72,73
73,74
73,75
74,75
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
93,94
94,95
94,96
94,97
94,98
95,96
97,98
98,99
101,102
102,103
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
121,122
123,124
124,125
124,126
125,126
125,127
126,127
129,130
129,131
130,131
132,133
134,135
134,136
135,136
135,137
136,137
136,138
136,139
136,140
137,138
139,140
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
150,151
151,152
152,153
154,155
156,157
158,159
158,160
159,160
159,161
160,161
160,162
160,163
161,162
163,164
165,166
167,168
169,170
171,172
172,173
172,174
173,174
175,176
175,177
175,178
175,179
176,177
178,179
180,181
182,183
184,185
184,186
185,186
185,187
186,187
188,189
190,191
192,193
193,194
193,195
194,195
196,197
196,198
196,199
196,200
196,201
197,198
199,200
201,202
203,204
203,205
204,205
208,209
208,210
209,210
209,211
210,211
210,212
211,212
213,214
215,216
215,217
216,217
219,220
221,222
222,223
222,224
223,224
223,225
224,225
226,227
229,230
230,231
230,232
231,232
233,234
233,235
233,236
233,237
234,235
236,237
238,239
242,243
242,244
243,244
243,245
244,245
246,247
248,249
249,250
250,251
250,252
251,252
253,254
255,256
255,257
256,257
256,258
257,258
259,260
261,262
262,263
263,264
263,265
264,265
266,267
268,269
269,270
269,271
270,271
272,273
-----nextToken-----
2,4,9,11,14,17,18,21,23,26,30,31,35,37,41,43,47,49,52,56,58,61,64,66,69,75,78,80,82,84,88,90,92,96,99,100,104,109,110,112,118,119,120,122,127,128,131,133,138,140,144,146,149,153,155,157,162,164,166,168,170,174,177,179,181,183,187,189,191,195,198,200,202,205,206,207,212,214,217,218,220,225,227,228,232,235,237,239,240,241,245,247,252,254,258,260,265,267,271,273
-----computeFrom-----
28,29
28,30
73,74
73,75
86,87
86,88
106,107
106,108
114,115
114,116
124,125
124,126
135,136
135,137
159,160
159,161
172,173
172,174
185,186
185,187
193,194
193,195
203,204
203,205
209,210
209,211
210,211
210,212
215,216
215,217
222,223
222,224
230,231
230,232
243,244
243,245
256,257
256,258
-----guardedBy-----
245,254
258,267
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    size_t data;    void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    funcPtr(data);}
static void
goodB2G()
goodB2G
{    size_t data;    void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    funcPtr(data);}
size_t data;
size_t data;
size_t
size_t
data
data
void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink;
void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink;
void
(*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink
*funcPtr
*
funcPtr
size_t
size_t
size_t


= CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(91,6,0)
(16,129,0)
(73,82,0)
(68,125,0)
(120,155,0)
(67,120,0)
(57,155,0)
(81,45,0)
(144,112,0)
(59,129,0)
(77,131,0)
(49,58,0)
(65,155,0)
(141,16,0)
(46,78,0)
(109,60,0)
(149,41,0)
(83,28,0)
(86,74,0)
(72,102,0)
(147,9,0)
(125,102,0)
(100,23,0)
(94,38,0)
(18,155,0)
(1,155,0)
(44,63,0)
(148,23,0)
(48,155,0)
(136,101,0)
(9,147,0)
(152,6,0)
(126,137,0)
(151,113,0)
(2,155,0)
(102,12,0)
(159,81,0)
(15,16,0)
(113,91,0)
(118,74,0)
(88,6,0)
(35,155,0)
(30,48,0)
(17,6,0)
(104,155,0)
(12,102,0)
(122,124,0)
(115,129,0)
(20,82,0)
(123,71,0)
(131,6,0)
(59,41,0)
(125,6,0)
(82,71,0)
(113,38,0)
(121,12,0)
(160,125,0)
(13,122,0)
(156,140,0)
(0,58,0)
(102,125,0)
(45,81,0)
(24,61,0)
(96,113,0)
(116,106,0)
(122,91,0)
(28,160,0)
(76,12,0)
(63,91,0)
(54,61,0)
(114,120,0)
(23,129,0)
(36,52,0)
(103,128,0)
(23,91,0)
(112,95,0)
(41,155,0)
(117,53,0)
(110,151,0)
(95,161,0)
(63,120,0)
(21,131,0)
(129,6,0)
(157,81,0)
(113,52,0)
(92,25,0)
(38,113,0)
(75,106,0)
(153,161,0)
(64,147,0)
(134,41,0)
(3,140,0)
(142,155,0)
(82,20,0)
(160,28,0)
(22,150,0)
(82,73,0)
(51,160,0)
(105,95,0)
(74,98,0)
(145,160,0)
(50,6,0)
(119,83,0)
(34,60,0)
(75,137,0)
(151,132,0)
(29,161,0)
(99,25,0)
(154,88,0)
(62,6,0)
(69,62,0)
(128,98,0)
(98,128,0)
(4,45,0)
(10,59,0)
(137,75,0)
(127,6,0)
(19,7,0)
(107,132,0)
(33,155,0)
(102,129,0)
(55,73,0)
(112,61,0)
(106,75,0)
(32,155,0)
(98,6,0)
(112,60,0)
(43,90,0)
(26,58,0)
(113,151,0)
(150,61,0)
(5,23,0)
(97,73,0)
(129,23,0)
(27,77,0)
(40,63,0)
(111,91,0)
(85,155,0)
(162,53,0)
(133,102,0)
(28,83,0)
(71,82,0)
(79,161,0)
(161,95,0)
(52,113,0)
(25,62,0)
(14,9,0)
(11,6,0)
(90,41,0)
(155,61,0)
(91,58,0)
(158,66,0)
(130,6,0)
(90,135,0)
(81,91,0)
(77,125,0)
(139,147,0)
(132,151,0)
(151,110,0)
(47,75,0)
(8,84,0)
(39,83,0)
(58,91,0)
(93,59,0)
(37,150,0)
(95,6,0)
(53,6,0)
(89,143,0)
(83,125,0)
(138,77,0)
(60,61,0)
(87,102,0)
(122,120,0)
(80,48,0)
(75,6,0)
(9,88,0)
(56,42,0)
(140,91,0)
(90,129,0)
(108,20,0)
(53,162,1)
(52,113,1)
(58,26,1)
(56,52,1)
(103,74,1)
(3,91,1)
(106,116,1)
(88,154,1)
(63,91,1)
(21,77,1)
(160,145,1)
(36,113,1)
(28,160,1)
(62,69,1)
(123,82,1)
(87,133,1)
(10,63,1)
(16,129,1)
(147,139,1)
(41,149,1)
(108,73,1)
(140,156,1)
(113,91,1)
(82,20,1)
(4,81,1)
(115,45,1)
(86,118,1)
(40,31,1)
(145,51,1)
(97,41,1)
(29,105,1)
(133,68,1)
(126,47,1)
(148,115,1)
(82,73,1)
(5,148,1)
(77,125,1)
(97,31,1)
(102,12,1)
(112,60,1)
(9,14,1)
(161,79,1)
(77,27,1)
(151,110,1)
(144,70,1)
(79,153,1)
(43,59,1)
(149,134,1)
(162,117,1)
(146,112,1)
(55,97,1)
(129,23,1)
(122,91,1)
(74,86,1)
(96,98,1)
(93,10,1)
(137,126,1)
(31,95,1)
(156,3,1)
(139,64,1)
(89,70,1)
(59,93,1)
(109,150,1)
(9,147,1)
(122,120,1)
(23,91,1)
(154,9,1)
(102,72,1)
(10,122,1)
(72,12,1)
(111,53,1)
(40,158,1)
(140,91,1)
(112,95,1)
(113,38,1)
(91,58,1)
(158,140,1)
(73,55,1)
(38,94,1)
(128,103,1)
(48,30,1)
(19,28,1)
(34,109,1)
(68,16,1)
(114,48,1)
(75,137,1)
(75,106,1)
(59,129,1)
(59,41,1)
(92,99,1)
(90,41,1)
(27,138,1)
(8,71,1)
(157,52,1)
(47,106,1)
(90,43,1)
(69,25,1)
(90,129,1)
(151,132,1)
(159,157,1)
(70,90,1)
(118,88,1)
(14,147,1)
(121,76,1)
(28,83,1)
(94,151,1)
(112,144,1)
(51,83,1)
(144,89,1)
(25,92,1)
(16,141,1)
(46,16,1)
(70,59,1)
(22,37,1)
(102,129,1)
(107,96,1)
(153,29,1)
(0,49,1)
(80,60,1)
(81,91,1)
(81,159,1)
(134,120,1)
(119,39,1)
(125,102,1)
(132,107,1)
(113,151,1)
(13,63,1)
(83,119,1)
(40,56,1)
(63,120,1)
(138,28,1)
(20,108,1)
(120,67,1)
(116,140,1)
(63,44,1)
(39,125,1)
(49,111,1)
(122,13,1)
(26,0,1)
(44,40,1)
(83,125,1)
(45,81,1)
(160,125,1)
(45,4,1)
(71,82,1)
(40,46,1)
(40,8,1)
(141,15,1)
(150,22,1)
(12,121,1)
(100,5,1)
(52,36,1)
(30,80,1)
(60,34,1)
(95,161,1)
(15,129,1)
(136,45,1)
(40,19,1)
(67,114,1)
(23,100,1)
(105,131,1)
(40,136,1)
(71,123,1)
(99,75,1)
(131,21,1)
(76,87,1)
(64,62,1)
(98,128,1)
(117,71,1)
(39,16,2)
(59,41,2)
(132,140,2)
(121,16,2)
(25,140,2)
(111,71,2)
(98,140,2)
(125,16,2)
(12,16,2)
(112,95,2)
(95,161,2)
(47,140,2)
(26,71,2)
(105,28,2)
(90,59,2)
(107,140,2)
(129,45,2)
(0,71,2)
(94,140,2)
(64,140,2)
(63,120,2)
(161,28,2)
(76,16,2)
(92,140,2)
(23,45,2)
(160,83,2)
(139,140,2)
(138,28,2)
(140,71,2)
(83,125,2)
(89,70,2)
(75,137,2)
(43,59,2)
(113,38,2)
(154,140,2)
(147,140,2)
(62,140,2)
(122,63,2)
(129,23,2)
(123,31,2)
(151,140,2)
(100,45,2)
(71,82,2)
(71,31,2)
(115,45,2)
(112,60,2)
(77,125,2)
(4,52,2)
(77,28,2)
(136,45,2)
(162,71,2)
(16,129,2)
(153,28,2)
(9,147,2)
(82,31,2)
(20,31,2)
(45,81,2)
(83,16,2)
(103,140,2)
(118,140,2)
(122,120,2)
(28,83,2)
(140,91,2)
(151,132,2)
(8,71,2)
(81,52,2)
(53,71,2)
(137,140,2)
(128,140,2)
(74,140,2)
(148,45,2)
(106,140,2)
(36,140,2)
(9,140,2)
(125,102,2)
(151,110,2)
(102,12,2)
(5,45,2)
(96,140,2)
(160,125,2)
(108,31,2)
(52,140,2)
(97,31,2)
(3,71,2)
(90,129,2)
(98,128,2)
(133,16,2)
(58,71,2)
(21,28,2)
(52,113,2)
(145,83,2)
(51,83,2)
(158,140,2)
(19,28,2)
(95,28,2)
(38,140,2)
(27,28,2)
(156,71,2)
(116,140,2)
(45,52,2)
(14,140,2)
(79,28,2)
(31,28,2)
(68,16,2)
(131,28,2)
(49,71,2)
(15,45,2)
(159,52,2)
(82,73,2)
(117,71,2)
(157,52,2)
(16,45,2)
(46,16,2)
(81,91,2)
(73,31,2)
(141,45,2)
(28,160,2)
(91,71,2)
(102,16,2)
(23,91,2)
(91,58,2)
(29,28,2)
(87,16,2)
(75,106,2)
(113,140,2)
(56,52,2)
(72,16,2)
(119,16,2)
(69,140,2)
(113,151,2)
(126,140,2)
(86,140,2)
(90,41,2)
(28,16,2)
(88,140,2)
(82,20,2)
(55,31,2)
(122,91,2)
(102,129,2)
(75,140,2)
(13,63,2)
(99,140,2)
(59,129,2)
(113,91,2)
(63,91,2)
-----------------------------------
(0,SOCK_STREAM)
(1,if (wsaDataInit)
(2,acceptSocket)
(3,listenSocket)
(4,SOCKET_ERROR)
(5,NULL)
(6,)
(7,)
(8,break;)
(9,service.sin_addr.s_addr)
(10,acceptSocket)
(11,if (bind(listenSocket, (struct sockaddr*)
(12,CHAR_ARRAY_SIZE - 1)
(13,listenSocket)
(14,s_addr)
(15,acceptSocket)
(16,acceptSocket == SOCKET_ERROR)
(17,if (recvResult == SOCKET_ERROR || recvResult == 0)
(18,do)
(19,break;)
(20,&wsaData)
(21,'\\0')
(22,CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink)
(23,accept(listenSocket, NULL, NULL)
(24,data)
(25,service.sin_family)
(26,IPPROTO_TCP)
(27,recvResult)
(28,recvResult == SOCKET_ERROR || recvResult == 0)
(29,inputBuffer)
(30,0)
(31,0)
(32,recvResult)
(33,inputBuffer)
(34,0)
(35,wsaDataInit)
(36,SOCKET_ERROR)
(37,funcPtr)
(38,sizeof(service)
(39,recvResult)
(40,listenSocket)
(41,acceptSocket = INVALID_SOCKET)
(42,)
(43,acceptSocket)
(44,INVALID_SOCKET)
(45,listen(listenSocket, LISTEN_BACKLOG)
(46,break;)
(47,0)
(48,wsaDataInit = 0)
(49,AF_INET)
(50,if (acceptSocket == SOCKET_ERROR)
(51,recvResult)
(52,bind(listenSocket, (struct sockaddr*)
(53,wsaDataInit = 1)
(54,funcPtr)
(55,2)
(56,break;)
(57,if (acceptSocket != INVALID_SOCKET)
(58,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(59,acceptSocket != INVALID_SOCKET)
(60,data = 0)
(61,)
(62,service.sin_family = AF_INET)
(63,listenSocket != INVALID_SOCKET)
(64,service)
(65,wsaData)
(66,)
(67,INVALID_SOCKET)
(68,recvResult)
(69,AF_INET)
(70,wsaDataInit)
(71,WSAStartup(MAKEWORD(2,2)
(72,0)
(73,MAKEWORD(2,2)
(74,service.sin_port)
(75,memset(&service, 0, sizeof(service)
(76,CHAR_ARRAY_SIZE)
(77,inputBuffer[recvResult])
(78,)
(79,0)
(80,wsaDataInit)
(81,listen(listenSocket, LISTEN_BACKLOG)
(82,WSAStartup(MAKEWORD(2,2)
(83,recvResult == SOCKET_ERROR)
(84,)
(85,listenSocket)
(86,sin_port)
(87,inputBuffer)
(88,service.sin_addr.s_addr = INADDR_ANY)
(89,WSACleanup()
(90,CLOSE_SOCKET(acceptSocket)
(91,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(92,sin_family)
(93,INVALID_SOCKET)
(94,service)
(95,data = strtoul(inputBuffer, NULL, 0)
(96,listenSocket)
(97,2)
(98,service.sin_port = htons(TCP_PORT)
(99,service)
(100,NULL)
(101,)
(102,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(103,TCP_PORT)
(104,if (listenSocket != INVALID_SOCKET)
(105,data)
(106,&service)
(107,service)
(108,wsaData)
(109,data)
(110,struct sockaddr*)
(111,listenSocket)
(112,funcPtr(data)
(113,bind(listenSocket, (struct sockaddr*)
(114,listenSocket)
(115,acceptSocket)
(116,service)
(117,wsaDataInit)
(118,service)
(119,SOCKET_ERROR)
(120,listenSocket = INVALID_SOCKET)
(121,1)
(122,CLOSE_SOCKET(listenSocket)
(123,NO_ERROR)
(124,)
(125,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(126,service)
(127,if (WSAStartup(MAKEWORD(2,2)
(128,htons(TCP_PORT)
(129,acceptSocket = accept(listenSocket, NULL, NULL)
(130,if (listenSocket == INVALID_SOCKET)
(131,inputBuffer[recvResult] = '\\0')
(132,&service)
(133,acceptSocket)
(134,acceptSocket)
(135,)
(136,break;)
(137,sizeof(service)
(138,inputBuffer)
(139,sin_addr)
(140,listenSocket == INVALID_SOCKET)
(141,SOCKET_ERROR)
(142,service)
(143,)
(144,data)
(145,0)
(146,RET)
(147,service.sin_addr)
(148,listenSocket)
(149,INVALID_SOCKET)
(150,(*funcPtr)
(151,(struct sockaddr*)
(152,if (listen(listenSocket, LISTEN_BACKLOG)
(153,NULL)
(154,INADDR_ANY)
(155,)
(156,INVALID_SOCKET)
(157,listenSocket)
(158,break;)
(159,LISTEN_BACKLOG)
(160,recvResult == 0)
(161,strtoul(inputBuffer, NULL, 0)
(162,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^