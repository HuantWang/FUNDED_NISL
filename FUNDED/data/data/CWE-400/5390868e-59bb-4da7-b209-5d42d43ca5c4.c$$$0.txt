-----label-----
1
-----code-----
static void
init_timeout_handler(struct rtpp_timeout_handler *th)
{
    int t, len;
    struct sockaddr_un remote;

    if(th->fd != -1)
	close(th->fd);
    th->fd = -1;

    if(th->socket_name == NULL)
	return;

    if ((th->fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed");
	perror("socket");
	exit(1);
    }

    remote.sun_family = AF_UNIX;
    strcpy(remote.sun_path, th->socket_name);
    len = strlen(remote.sun_path) + sizeof(remote.sun_family);
    if (connect(th->fd, (struct sockaddr *)&remote, len) == -1) {
	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed");
	perror("connect");
	close(th->fd);
	th->fd = -1;
	return;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
12,13
13,14
13,15
13,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
28,29
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
49,51
50,51
50,52
51,52
51,53
52,53
55,56
58,59
58,60
59,60
59,61
60,61
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
67,68
69,70
71,72
74,75
76,77
76,78
76,79
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
105,108
106,107
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
117,119
118,119
120,121
120,122
121,122
121,123
122,123
124,125
124,126
125,126
128,129
129,130
130,131
130,132
131,132
134,135
134,136
135,136
135,137
136,137
136,138
136,139
136,140
137,138
139,140
139,141
140,141
143,144
143,145
144,145
144,146
145,146
147,148
149,150
150,151
152,153
154,155
156,157
156,158
156,159
156,160
156,161
157,158
158,159
158,160
158,161
158,162
159,160
161,162
163,164
166,167
167,168
167,169
168,169
171,172
172,173
172,174
173,174
175,176
175,177
176,177
179,180
180,181
180,182
181,182
181,183
182,183
185,186
-----nextToken-----
2,4,7,9,10,14,16,18,22,24,29,30,32,36,39,40,45,46,48,53,54,56,57,64,65,68,70,72,73,75,80,82,84,85,89,90,94,95,100,101,103,107,110,111,114,115,119,123,126,127,132,133,138,141,142,146,148,151,153,155,160,162,164,165,169,170,174,177,178,183,184,186,187
-----computeFrom-----
26,27
26,28
42,43
42,44
50,51
50,52
59,60
59,61
61,62
61,63
97,98
97,99
117,118
117,119
120,121
120,122
135,136
135,137
180,181
180,182
-----guardedBy-----
29,39
30,40
141,183
142,184
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ReturnStatement;
-----ast_node-----
static voidinit_timeout_handler(struct rtpp_timeout_handler *th){    int t, len;    struct sockaddr_un remote;    if(th->fd != -1)	close(th->fd);    th->fd = -1;    if(th->socket_name == NULL)	return;    if ((th->fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed");	perror("socket");	exit(1);    }    remote.sun_family = AF_UNIX;    strcpy(remote.sun_path, th->socket_name);    len = strlen(remote.sun_path) + sizeof(remote.sun_family);    if (connect(th->fd, (struct sockaddr *)&remote, len) == -1) {	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed");	perror("connect");	close(th->fd);	th->fd = -1;	return;    }}
static void
init_timeout_handler(struct rtpp_timeout_handler *th)
init_timeout_handler
struct rtpp_timeout_handler *th
struct rtpp_timeout_handler
rtpp_timeout_handler
*th
*
th
{    int t, len;    struct sockaddr_un remote;    if(th->fd != -1)	close(th->fd);    th->fd = -1;    if(th->socket_name == NULL)	return;    if ((th->fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed");	perror("socket");	exit(1);    }    remote.sun_family = AF_UNIX;    strcpy(remote.sun_path, th->socket_name);    len = strlen(remote.sun_path) + sizeof(remote.sun_family);    if (connect(th->fd, (struct sockaddr *)&remote, len) == -1) {	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed");	perror("connect");	close(th->fd);	th->fd = -1;	return;    }}
int t, len;
int t, len;
int
t
t
len
len
struct sockaddr_un remote;
struct sockaddr_un remote;
struct sockaddr_un
sockaddr_un
remote
remote
if(th->fd != -1)	close(th->fd);
th->fd != -1
th->fd
th
th
fd
-1
1
close(th->fd);
close(th->fd)
close
close
th->fd
th
th
fd
th->fd = -1;
th->fd = -1
th->fd
th
th
fd
-1
1
if(th->socket_name == NULL)	return;
th->socket_name == NULL
th->socket_name
th
th
socket_name
NULL
NULL
return;
if ((th->fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed");	perror("socket");	exit(1);    }
(th->fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1
(th->fd = socket(AF_UNIX, SOCK_STREAM, 0))
th->fd = socket(AF_UNIX, SOCK_STREAM, 0)
th->fd
th
th
fd
socket(AF_UNIX, SOCK_STREAM, 0)
socket
socket
AF_UNIX
AF_UNIX
SOCK_STREAM
SOCK_STREAM
0
-1
1
{	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed");	perror("socket");	exit(1);    }
rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed");
rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket() failed")
rtpp_log_write
rtpp_log_write
RTPP_LOG_ERR
RTPP_LOG_ERR
NULL
NULL
"timeoutfd socket() failed"
perror("socket");
perror("socket")
perror
perror
"socket"
exit(1);
exit(1)
exit
exit
1
remote.sun_family = AF_UNIX;
remote.sun_family = AF_UNIX
remote.sun_family
remote
remote
sun_family
AF_UNIX
AF_UNIX
strcpy(remote.sun_path, th->socket_name);
strcpy(remote.sun_path, th->socket_name)
strcpy
strcpy
remote.sun_path
remote
remote
sun_path
th->socket_name
th
th
socket_name
len = strlen(remote.sun_path) + sizeof(remote.sun_family);
len = strlen(remote.sun_path) + sizeof(remote.sun_family)
len
len
strlen(remote.sun_path) + sizeof(remote.sun_family)
strlen(remote.sun_path)
strlen
strlen
remote.sun_path
remote
remote
sun_path
sizeof(remote.sun_family)
(remote.sun_family)
remote.sun_family
remote
remote
sun_family
if (connect(th->fd, (struct sockaddr *)&remote, len) == -1) {	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed");	perror("connect");	close(th->fd);	th->fd = -1;	return;    }
connect(th->fd, (struct sockaddr *)&remote, len) == -1
connect(th->fd, (struct sockaddr *)&remote, len)
connect
connect
th->fd
th
th
fd
(struct sockaddr *)&remote
struct sockaddr *
struct sockaddr
sockaddr
*
*
&remote
remote
remote
len
len
-1
1
{	rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed");	perror("connect");	close(th->fd);	th->fd = -1;	return;    }
rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed");
rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect() failed")
rtpp_log_write
rtpp_log_write
RTPP_LOG_ERR
RTPP_LOG_ERR
NULL
NULL
"timeoutfd connect() failed"
perror("connect");
perror("connect")
perror
perror
"connect"
close(th->fd);
close(th->fd)
close
close
th->fd
th
th
fd
th->fd = -1;
th->fd = -1
th->fd
th
th
fd
-1
1
return;
-----joern-----
(75,69,0)
(18,24,0)
(98,104,0)
(15,95,0)
(54,2,0)
(34,35,0)
(21,13,0)
(93,60,0)
(64,67,0)
(6,44,0)
(22,60,0)
(74,95,0)
(55,40,0)
(79,31,0)
(73,95,0)
(69,3,0)
(85,63,0)
(4,7,0)
(88,73,0)
(103,57,0)
(17,13,0)
(20,38,0)
(33,60,0)
(45,104,0)
(9,46,0)
(80,67,0)
(63,85,0)
(94,68,0)
(13,24,0)
(44,6,0)
(50,90,0)
(80,44,0)
(104,3,0)
(52,93,0)
(86,74,0)
(24,13,0)
(79,95,0)
(18,95,0)
(24,100,0)
(10,38,0)
(87,1,0)
(77,38,0)
(99,55,0)
(5,52,0)
(104,98,0)
(68,80,0)
(84,40,0)
(42,90,0)
(98,84,0)
(81,79,0)
(36,78,0)
(47,92,0)
(14,80,0)
(2,51,0)
(46,90,0)
(76,73,0)
(11,50,0)
(44,80,0)
(2,54,0)
(68,101,0)
(39,13,0)
(36,42,0)
(59,93,0)
(65,3,0)
(27,18,0)
(72,60,0)
(41,67,0)
(85,60,0)
(67,95,0)
(57,12,0)
(84,98,0)
(84,1,0)
(35,100,0)
(32,79,0)
(16,63,0)
(92,24,0)
(73,50,0)
(100,35,0)
(47,90,0)
(26,15,0)
(37,55,0)
(82,94,0)
(93,52,0)
(53,18,0)
(0,54,0)
(23,104,0)
(38,12,0)
(66,60,0)
(49,92,0)
(7,12,0)
(40,55,0)
(80,1,0)
(3,60,0)
(43,90,0)
(92,93,0)
(31,79,0)
(62,69,0)
(96,74,0)
(71,46,0)
(92,47,0)
(89,11,0)
(58,51,0)
(1,84,0)
(102,60,0)
(30,59,0)
(67,80,0)
(25,31,0)
(97,43,0)
(83,15,0)
(67,93,0)
(61,6,0)
(92,95,0)
(56,63,0)
(29,54,0)
(67,24,0)
(40,84,0)
(91,59,0)
(51,2,0)
(100,24,0)
(28,74,0)
(74,96,0)
(85,15,0)
(80,68,0)
(8,46,0)
(50,11,0)
(15,85,0)
(101,68,0)
(19,92,0)
(70,60,0)
(1,60,0)
(59,95,0)
(48,60,0)
(68,94,0)
(54,95,0)
(93,52,1)
(86,28,1)
(71,44,1)
(84,98,1)
(19,49,1)
(75,100,1)
(45,23,1)
(104,45,1)
(44,6,1)
(31,25,1)
(11,89,1)
(88,76,1)
(13,39,1)
(100,35,1)
(79,32,1)
(3,65,1)
(92,93,1)
(29,0,1)
(21,17,1)
(78,31,1)
(75,7,1)
(31,79,1)
(36,78,1)
(91,2,1)
(6,61,1)
(7,4,1)
(18,95,1)
(41,1,1)
(53,31,1)
(73,88,1)
(38,20,1)
(49,43,1)
(67,64,1)
(40,55,1)
(55,37,1)
(67,93,1)
(62,75,1)
(91,96,1)
(65,69,1)
(80,14,1)
(51,58,1)
(74,95,1)
(28,2,1)
(104,3,1)
(10,100,1)
(103,38,1)
(15,95,1)
(80,67,1)
(43,97,1)
(98,104,1)
(97,46,1)
(9,71,1)
(92,95,1)
(39,21,1)
(67,24,1)
(25,79,1)
(50,11,1)
(15,83,1)
(63,56,1)
(82,67,1)
(36,42,1)
(46,8,1)
(83,26,1)
(14,68,1)
(56,16,1)
(30,91,1)
(79,95,1)
(67,95,1)
(16,3,1)
(85,63,1)
(68,94,1)
(61,80,1)
(47,92,1)
(74,86,1)
(59,95,1)
(89,73,1)
(44,80,1)
(27,53,1)
(69,62,1)
(84,40,1)
(5,59,1)
(8,9,1)
(26,63,1)
(73,95,1)
(20,77,1)
(34,24,1)
(1,84,1)
(52,5,1)
(54,29,1)
(64,41,1)
(85,15,1)
(57,103,1)
(80,68,1)
(92,24,1)
(32,81,1)
(77,10,1)
(81,93,1)
(100,24,1)
(94,82,1)
(37,99,1)
(68,101,1)
(54,95,1)
(24,13,1)
(35,34,1)
(58,54,1)
(23,40,1)
(76,47,1)
(17,18,1)
(99,87,1)
(92,19,1)
(2,54,1)
(80,1,1)
(36,44,1)
(59,30,1)
(42,50,1)
(2,51,1)
(87,85,1)
(96,74,1)
(18,27,1)
(4,57,1)
(100,24,2)
(15,95,2)
(17,31,2)
(68,31,2)
(92,44,2)
(89,44,2)
(14,31,2)
(98,31,2)
(53,31,2)
(27,31,2)
(55,31,2)
(24,13,2)
(88,44,2)
(35,31,2)
(43,44,2)
(7,100,2)
(92,24,2)
(77,100,2)
(85,15,2)
(82,31,2)
(16,31,2)
(36,42,2)
(84,98,2)
(80,68,2)
(80,67,2)
(26,31,2)
(84,40,2)
(10,100,2)
(75,31,2)
(84,31,2)
(68,101,2)
(18,95,2)
(4,100,2)
(36,78,2)
(45,31,2)
(63,31,2)
(40,31,2)
(13,31,2)
(94,31,2)
(62,31,2)
(40,55,2)
(38,100,2)
(92,95,2)
(6,31,2)
(57,100,2)
(2,54,2)
(78,31,2)
(64,31,2)
(85,63,2)
(44,6,2)
(100,35,2)
(41,31,2)
(96,2,2)
(68,94,2)
(87,31,2)
(1,31,2)
(98,104,2)
(59,95,2)
(80,1,2)
(11,44,2)
(50,44,2)
(100,31,2)
(54,95,2)
(76,44,2)
(65,31,2)
(44,80,2)
(19,44,2)
(83,31,2)
(42,44,2)
(73,95,2)
(86,2,2)
(34,31,2)
(28,2,2)
(104,3,2)
(79,95,2)
(44,31,2)
(99,31,2)
(92,93,2)
(80,31,2)
(47,92,2)
(61,31,2)
(74,2,2)
(23,31,2)
(67,95,2)
(71,44,2)
(103,100,2)
(8,44,2)
(46,44,2)
(67,93,2)
(3,31,2)
(85,31,2)
(97,44,2)
(67,24,2)
(49,44,2)
(50,11,2)
(37,31,2)
(21,31,2)
(2,51,2)
(24,31,2)
(93,52,2)
(74,95,2)
(15,31,2)
(104,31,2)
(96,74,2)
(69,31,2)
(1,84,2)
(20,100,2)
(73,44,2)
(9,44,2)
(31,79,2)
(67,31,2)
(56,31,2)
(18,31,2)
(39,31,2)
(47,44,2)
-----------------------------------
(0,th)
(1,len = strlen(remote.sun_path)
(2,th->fd != -1)
(3,remote.sun_family = AF_UNIX)
(4,1)
(5,1)
(6,-1)
(7,exit(1)
(8,"timeoutfd connect()
(9,NULL)
(10,RTPP_LOG_ERR)
(11,-1)
(12,)
(13,socket(AF_UNIX, SOCK_STREAM, 0)
(14,len)
(15,th->socket_name)
(16,remote)
(17,AF_UNIX)
(18,th->fd)
(19,fd)
(20,"timeoutfd socket()
(21,SOCK_STREAM)
(22,t)
(23,remote)
(24,th->fd = socket(AF_UNIX, SOCK_STREAM, 0)
(25,NULL)
(26,th)
(27,fd)
(28,th)
(29,fd)
(30,fd)
(31,th->socket_name == NULL)
(32,socket_name)
(33,if (connect(th->fd, (struct sockaddr *)
(34,1)
(35,-1)
(36,RET)
(37,sun_path)
(38,rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd socket()
(39,0)
(40,strlen(remote.sun_path)
(41,th)
(42,return;)
(43,perror("connect")
(44,connect(th->fd, (struct sockaddr *)
(45,sun_family)
(46,rtpp_log_write(RTPP_LOG_ERR, NULL, "timeoutfd connect()
(47,close(th->fd)
(48,if ((th->fd = socket(AF_UNIX, SOCK_STREAM, 0)
(49,th)
(50,th->fd = -1)
(51,-1)
(52,-1)
(53,th)
(54,th->fd)
(55,remote.sun_path)
(56,sun_path)
(57,perror("socket")
(58,1)
(59,th->fd)
(60,)
(61,1)
(62,sun_family)
(63,remote.sun_path)
(64,fd)
(65,AF_UNIX)
(66,len)
(67,th->fd)
(68,(struct sockaddr *)
(69,remote.sun_family)
(70,if(th->fd != -1)
(71,RTPP_LOG_ERR)
(72,remote)
(73,th->fd)
(74,th->fd)
(75,remote)
(76,th)
(77,NULL)
(78,return;)
(79,th->socket_name)
(80,connect(th->fd, (struct sockaddr *)
(81,th)
(82,remote)
(83,socket_name)
(84,strlen(remote.sun_path)
(85,strcpy(remote.sun_path, th->socket_name)
(86,fd)
(87,len)
(88,fd)
(89,1)
(90,)
(91,th)
(92,th->fd)
(93,th->fd = -1)
(94,&remote)
(95,struct rtpp_timeout_handler *th)
(96,close(th->fd)
(97,"connect")
(98,sizeof(remote.sun_family)
(99,remote)
(100,(th->fd = socket(AF_UNIX, SOCK_STREAM, 0)
(101,struct sockaddr *)
(102,if(th->socket_name == NULL)
(103,"socket")
(104,remote.sun_family)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^