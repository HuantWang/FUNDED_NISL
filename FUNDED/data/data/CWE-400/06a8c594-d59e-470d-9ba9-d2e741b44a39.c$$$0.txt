-----label-----
0
-----code-----
static void goodG2B()
{
    twoIntsStruct * data;
    CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
74,76
75,76
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
85,87
85,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,71,76,77,79,84,86,87,91,92,93
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(38,42,0)
(35,1,0)
(44,17,0)
(16,9,0)
(28,30,0)
(46,25,0)
(19,16,0)
(1,35,0)
(12,16,0)
(8,46,0)
(30,42,0)
(25,46,0)
(18,3,0)
(32,9,0)
(3,9,0)
(23,12,0)
(27,26,0)
(11,19,0)
(12,5,0)
(15,20,0)
(34,9,0)
(5,37,0)
(36,42,0)
(1,19,0)
(6,16,0)
(0,32,0)
(17,20,0)
(46,16,0)
(6,9,0)
(10,6,0)
(37,9,0)
(13,29,0)
(20,17,0)
(26,9,0)
(45,14,0)
(22,12,0)
(45,36,0)
(25,3,0)
(42,30,0)
(45,16,0)
(16,45,0)
(29,6,0)
(20,32,0)
(14,45,0)
(24,29,0)
(43,9,0)
(33,5,0)
(4,16,0)
(7,37,0)
(39,17,0)
(42,36,0)
(35,9,0)
(19,1,0)
(41,26,0)
(21,46,0)
(31,25,0)
(36,45,0)
(40,19,0)
(5,12,0)
(25,46,1)
(10,29,1)
(46,8,1)
(16,45,1)
(8,21,1)
(37,7,1)
(6,10,1)
(39,15,1)
(30,28,1)
(1,19,1)
(35,1,1)
(42,30,1)
(44,39,1)
(28,38,1)
(5,12,1)
(46,16,1)
(45,14,1)
(11,40,1)
(20,17,1)
(4,26,1)
(19,11,1)
(7,5,1)
(40,3,1)
(6,16,1)
(2,20,1)
(36,42,1)
(21,37,1)
(25,31,1)
(19,16,1)
(45,36,1)
(38,4,1)
(5,33,1)
(18,25,1)
(3,18,1)
(26,27,1)
(13,24,1)
(15,6,1)
(22,16,1)
(24,35,1)
(17,44,1)
(33,12,1)
(29,13,1)
(12,23,1)
(27,41,1)
(12,16,1)
(23,22,1)
(31,46,1)
(16,45,2)
(12,16,2)
(42,30,2)
(1,19,2)
(6,16,2)
(45,14,2)
(35,1,2)
(45,36,2)
(5,12,2)
(25,46,2)
(19,16,2)
(46,16,2)
(36,42,2)
(20,17,2)
-----------------------------------
(0,data)
(1,&data[0])
(2,RET)
(3,data[0].intTwo = 0)
(4,data)
(5,data[0].intOne)
(6,myUnion.unionFirst = data)
(7,0)
(8,0)
(9,)
(10,data)
(11,0)
(12,data[0])
(13,unionFirst)
(14,twoIntsStruct *)
(15,data)
(16,data = (twoIntsStruct *)
(17,myUnion.unionSecond)
(18,0)
(19,data[0])
(20,* data = myUnion.unionSecond)
(21,data)
(22,data)
(23,0)
(24,myUnion)
(25,data[0].intTwo)
(26,data = NULL)
(27,NULL)
(28,twoIntsStruct)
(29,myUnion.unionFirst)
(30,sizeof(twoIntsStruct)
(31,intTwo)
(32,)
(33,intOne)
(34,myUnion)
(35,printStructLine(&data[0])
(36,ALLOCA(100*sizeof(twoIntsStruct)
(37,data[0].intOne = 0)
(38,100)
(39,myUnion)
(40,data)
(41,data)
(42,100*sizeof(twoIntsStruct)
(43,data)
(44,unionSecond)
(45,(twoIntsStruct *)
(46,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^