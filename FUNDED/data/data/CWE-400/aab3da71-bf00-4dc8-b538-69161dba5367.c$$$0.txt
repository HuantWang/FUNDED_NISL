-----label-----
0
-----code-----
static void tls_get_passphrases(void) {
  server_rec *s = NULL;
  char buf[256];

  for (s = (server_rec *) server_list->xas_list; s; s = s->next) {
    config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;
    tls_pkey_t *k = NULL;

    /* Find any TLS*CertificateKeyFile directives.  If they aren't present,
     * look for TLS*CertificateFile directives (when appropriate).
     */
    rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE);
    if (rsa == NULL) {
      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);
    }

    dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE);
    if (dsa == NULL) {
      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);
    }

    pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE);

    if (rsa == NULL &&
        dsa == NULL &&
        pkcs12 == NULL) {
      continue;
    }

    k = pcalloc(s->pool, sizeof(tls_pkey_t));
    k->pkeysz = PEM_BUFSIZE;
    k->server = s;

    if (rsa) {
      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",
        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);
      buf[sizeof(buf)-1] = '\0';

      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);
      if (k->rsa_pkey == NULL) {
        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
          MOD_TLS_VERSION ": Out of memory!");
        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
      }

      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,
          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {
        pr_log_debug(DEBUG0, MOD_TLS_VERSION
          ": error reading RSA passphrase: %s", tls_get_errors());

        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "
          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);
        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,
          NULL);
      }
    }

    if (dsa) {
      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",
        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);
      buf[sizeof(buf)-1] = '\0';

      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);
      if (k->dsa_pkey == NULL) {
        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
          MOD_TLS_VERSION ": Out of memory!");
        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
      }

      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,
          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {
        pr_log_debug(DEBUG0, MOD_TLS_VERSION
          ": error reading DSA passphrase: %s", tls_get_errors());

        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "
          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);
        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,
          NULL);
      }
    }

    if (pkcs12) {
      snprintf(buf, sizeof(buf)-1,
        "PKCS12 password for the %s#%d (%s) server: ",
        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);
      buf[sizeof(buf)-1] = '\0';

      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);
      if (k->pkcs12_passwd == NULL) {
        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
          MOD_TLS_VERSION ": Out of memory!");
        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
      }

      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,
          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {
        pr_log_debug(DEBUG0, MOD_TLS_VERSION
          ": error reading PKCS12 password: %s", tls_get_errors());

        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "
          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);
        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,
          NULL);
      }
    }

    k->next = tls_pkey_list;
    tls_pkey_list = k;
    tls_npkeys++;
  }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
27,31
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
38,40
39,40
42,43
44,45
44,46
45,46
47,48
47,49
48,49
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
51,63
51,64
51,65
51,66
51,67
51,68
52,53
53,54
53,55
53,56
53,57
54,55
56,57
56,58
56,59
59,60
60,61
62,63
62,64
62,65
65,66
66,67
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
78,81
81,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
88,93
89,90
91,92
91,93
92,93
95,96
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
111,112
111,113
111,114
111,115
111,116
112,113
114,115
114,116
115,116
118,119
121,122
123,124
124,125
124,126
125,126
127,128
127,129
127,130
127,131
127,132
128,129
130,131
130,132
131,132
134,135
137,138
139,140
139,141
140,141
140,142
141,142
143,144
145,146
146,147
147,148
147,149
148,149
150,151
150,152
150,153
150,154
150,155
151,152
153,154
153,155
154,155
157,158
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
166,171
167,168
169,170
169,171
170,171
173,174
176,177
178,179
178,180
179,180
179,181
180,181
180,182
181,182
181,183
182,183
184,185
186,187
186,188
187,188
189,190
191,192
191,193
192,193
194,195
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
203,204
205,206
205,207
206,207
209,210
210,211
210,212
211,212
214,215
215,216
215,217
216,217
216,218
217,218
220,221
222,223
223,224
223,225
224,225
224,226
225,226
228,229
230,231
230,232
231,232
233,234
233,235
233,236
233,237
233,238
234,235
235,236
235,237
235,238
235,239
235,240
235,241
235,242
236,237
238,239
240,241
240,242
241,242
242,243
243,244
247,248
247,249
248,249
250,251
250,252
251,252
254,255
254,256
255,256
258,259
258,260
259,260
262,263
263,264
263,265
264,265
264,266
265,266
267,268
267,269
268,269
269,270
270,271
274,275
275,276
275,277
276,277
276,278
277,278
280,281
280,282
280,283
281,282
283,284
285,286
286,287
286,288
287,288
290,291
290,292
291,292
291,293
292,293
292,294
293,294
296,297
298,299
298,300
299,300
300,301
301,302
301,303
301,304
301,305
302,303
304,305
305,306
307,308
309,310
311,312
311,313
312,313
312,314
313,314
313,315
313,316
313,317
313,318
313,319
313,320
314,315
316,317
318,319
318,320
319,320
319,321
320,321
324,325
326,327
326,328
327,328
330,331
330,332
331,332
334,335
337,338
337,339
337,340
338,339
339,340
340,341
341,342
341,343
341,344
341,345
342,343
344,345
345,346
347,348
349,350
351,352
351,353
352,353
354,355
354,356
354,357
354,358
354,359
355,356
356,357
356,358
356,359
356,360
356,361
356,362
356,363
357,358
359,360
361,362
361,363
362,363
363,364
364,365
368,369
368,370
369,370
371,372
371,373
372,373
375,376
375,377
376,377
379,380
379,381
380,381
383,384
384,385
384,386
385,386
385,387
386,387
388,389
388,390
389,390
390,391
391,392
395,396
396,397
396,398
397,398
397,399
398,399
401,402
401,403
401,404
402,403
404,405
406,407
407,408
407,409
408,409
411,412
411,413
412,413
412,414
413,414
413,415
414,415
417,418
419,420
419,421
420,421
421,422
422,423
422,424
422,425
422,426
423,424
425,426
426,427
428,429
430,431
432,433
432,434
433,434
433,435
434,435
434,436
434,437
434,438
434,439
434,440
434,441
435,436
437,438
439,440
439,441
440,441
440,442
441,442
445,446
447,448
447,449
448,449
451,452
451,453
452,453
455,456
458,459
458,460
458,461
459,460
460,461
461,462
462,463
462,464
462,465
462,466
463,464
465,466
466,467
468,469
470,471
472,473
472,474
473,474
475,476
475,477
475,478
475,479
475,480
476,477
477,478
477,479
477,480
477,481
477,482
477,483
477,484
478,479
480,481
482,483
482,484
483,484
484,485
485,486
489,490
489,491
490,491
492,493
492,494
493,494
496,497
496,498
497,498
500,501
500,502
501,502
504,505
505,506
505,507
506,507
506,508
507,508
509,510
509,511
510,511
511,512
512,513
516,517
517,518
517,519
518,519
518,520
519,520
522,523
522,524
522,525
523,524
525,526
527,528
528,529
528,530
529,530
532,533
532,534
533,534
533,535
534,535
534,536
535,536
538,539
540,541
540,542
541,542
542,543
543,544
543,545
543,546
543,547
544,545
546,547
547,548
549,550
551,552
553,554
553,555
554,555
554,556
555,556
555,557
555,558
555,559
555,560
555,561
555,562
556,557
558,559
560,561
560,562
561,562
561,563
562,563
566,567
568,569
568,570
569,570
572,573
572,574
573,574
576,577
579,580
579,581
579,582
580,581
581,582
582,583
583,584
583,585
583,586
583,587
584,585
586,587
587,588
589,590
591,592
593,594
594,595
594,596
595,596
595,597
596,597
599,600
601,602
602,603
602,604
603,604
605,606
607,608
608,609
609,610
-----nextToken-----
2,4,6,8,13,15,16,19,22,24,26,31,35,37,40,41,43,46,49,50,55,57,58,61,63,64,67,69,70,73,77,79,80,83,87,90,93,94,96,97,99,103,105,110,113,116,117,119,120,122,126,129,132,133,135,136,138,142,144,149,152,155,156,158,159,161,165,168,171,172,174,175,177,183,185,188,190,193,195,197,201,204,207,208,212,213,218,219,221,226,227,229,232,237,239,244,245,246,249,252,253,256,257,260,261,266,271,272,273,278,279,282,284,288,289,294,295,297,303,306,308,310,315,317,321,322,323,325,328,329,332,333,335,336,343,346,348,350,353,358,360,365,366,367,370,373,374,377,378,381,382,387,392,393,394,399,400,403,405,409,410,415,416,418,424,427,429,431,436,438,442,443,444,446,449,450,453,454,456,457,464,467,469,471,474,479,481,486,487,488,491,494,495,498,499,502,503,508,513,514,515,520,521,524,526,530,531,536,537,539,545,548,550,552,557,559,563,564,565,567,570,571,574,575,577,578,585,588,590,592,597,598,600,604,606,610
-----computeFrom-----
29,30
29,31
44,45
44,46
85,86
85,87
101,102
101,103
108,109
108,110
124,125
124,126
140,141
140,142
147,148
147,149
163,164
163,165
179,180
179,181
180,181
180,182
181,182
181,183
186,187
186,188
191,192
191,193
199,200
199,201
215,216
215,217
223,224
223,225
240,241
240,242
263,264
263,265
267,268
267,269
275,276
275,277
291,292
291,293
312,313
312,314
361,362
361,363
384,385
384,386
388,389
388,390
396,397
396,398
412,413
412,414
433,434
433,435
482,483
482,484
505,506
505,507
509,510
509,511
517,518
517,519
533,534
533,535
554,555
554,556
594,595
594,596
602,603
602,604
-----guardedBy-----
103,110
142,149
297,310
418,431
539,552
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static void tls_get_passphrases(void) {  server_rec *s = NULL;  char buf[256];  for (s = (server_rec *) server_list->xas_list; s; s = s->next) {    config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;    tls_pkey_t *k = NULL;    /* Find any TLS*CertificateKeyFile directives.  If they aren't present,     * look for TLS*CertificateFile directives (when appropriate).     */    rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE);    if (rsa == NULL) {      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);    }    dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE);    if (dsa == NULL) {      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);    }    pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE);    if (rsa == NULL &&        dsa == NULL &&        pkcs12 == NULL) {      continue;    }    k = pcalloc(s->pool, sizeof(tls_pkey_t));    k->pkeysz = PEM_BUFSIZE;    k->server = s;    if (rsa) {      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);      if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (dsa) {      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);      if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (pkcs12) {      snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);      if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    k->next = tls_pkey_list;    tls_pkey_list = k;    tls_npkeys++;  }}
static void
tls_get_passphrases(void)
tls_get_passphrases
void
void


{  server_rec *s = NULL;  char buf[256];  for (s = (server_rec *) server_list->xas_list; s; s = s->next) {    config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;    tls_pkey_t *k = NULL;    /* Find any TLS*CertificateKeyFile directives.  If they aren't present,     * look for TLS*CertificateFile directives (when appropriate).     */    rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE);    if (rsa == NULL) {      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);    }    dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE);    if (dsa == NULL) {      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);    }    pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE);    if (rsa == NULL &&        dsa == NULL &&        pkcs12 == NULL) {      continue;    }    k = pcalloc(s->pool, sizeof(tls_pkey_t));    k->pkeysz = PEM_BUFSIZE;    k->server = s;    if (rsa) {      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);      if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (dsa) {      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);      if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (pkcs12) {      snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);      if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    k->next = tls_pkey_list;    tls_pkey_list = k;    tls_npkeys++;  }}
server_rec *s = NULL;
server_rec *s = NULL;
server_rec
server_rec
*s = NULL
*
s
= NULL
NULL
NULL
char buf[256];
char buf[256];
char
buf[256]
buf
[256]
256
for (s = (server_rec *) server_list->xas_list; s; s = s->next) {    config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;    tls_pkey_t *k = NULL;    /* Find any TLS*CertificateKeyFile directives.  If they aren't present,     * look for TLS*CertificateFile directives (when appropriate).     */    rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE);    if (rsa == NULL) {      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);    }    dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE);    if (dsa == NULL) {      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);    }    pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE);    if (rsa == NULL &&        dsa == NULL &&        pkcs12 == NULL) {      continue;    }    k = pcalloc(s->pool, sizeof(tls_pkey_t));    k->pkeysz = PEM_BUFSIZE;    k->server = s;    if (rsa) {      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);      if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (dsa) {      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);      if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (pkcs12) {      snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);      if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    k->next = tls_pkey_list;    tls_pkey_list = k;    tls_npkeys++;  }
s = (server_rec *) server_list->xas_list;
s = (server_rec *) server_list->xas_list
s
s
(server_rec *) server_list->xas_list
server_rec *
server_rec
server_rec
*
*
server_list->xas_list
server_list
server_list
xas_list
s
s
s = s->next
s
s
s->next
s
s
next
{    config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;    tls_pkey_t *k = NULL;    /* Find any TLS*CertificateKeyFile directives.  If they aren't present,     * look for TLS*CertificateFile directives (when appropriate).     */    rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE);    if (rsa == NULL) {      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);    }    dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE);    if (dsa == NULL) {      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);    }    pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE);    if (rsa == NULL &&        dsa == NULL &&        pkcs12 == NULL) {      continue;    }    k = pcalloc(s->pool, sizeof(tls_pkey_t));    k->pkeysz = PEM_BUFSIZE;    k->server = s;    if (rsa) {      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);      if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (dsa) {      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);      if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    if (pkcs12) {      snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);      if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }    k->next = tls_pkey_list;    tls_pkey_list = k;    tls_npkeys++;  }
config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;
config_rec *rsa = NULL, *dsa = NULL, *pkcs12 = NULL;
config_rec
config_rec
*rsa = NULL
*
rsa
= NULL
NULL
NULL
*dsa = NULL
*
dsa
= NULL
NULL
NULL
*pkcs12 = NULL
*
pkcs12
= NULL
NULL
NULL
tls_pkey_t *k = NULL;
tls_pkey_t *k = NULL;
tls_pkey_t
tls_pkey_t
*k = NULL
*
k
= NULL
NULL
NULL
rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE);
rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE)
rsa
rsa
find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE)
find_config
find_config
s->conf
s
s
conf
CONF_PARAM
CONF_PARAM
"TLSRSACertificateKeyFile"
FALSE
FALSE
if (rsa == NULL) {      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);    }
rsa == NULL
rsa
rsa
NULL
NULL
{      rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);    }
rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE);
rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE)
rsa
rsa
find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE)
find_config
find_config
s->conf
s
s
conf
CONF_PARAM
CONF_PARAM
"TLSRSACertificateFile"
FALSE
FALSE
dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE);
dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE)
dsa
dsa
find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE)
find_config
find_config
s->conf
s
s
conf
CONF_PARAM
CONF_PARAM
"TLSDSACertificateKeyFile"
FALSE
FALSE
if (dsa == NULL) {      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);    }
dsa == NULL
dsa
dsa
NULL
NULL
{      dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);    }
dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE);
dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE)
dsa
dsa
find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE)
find_config
find_config
s->conf
s
s
conf
CONF_PARAM
CONF_PARAM
"TLSDSACertificateFile"
FALSE
FALSE
pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE);
pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE)
pkcs12
pkcs12
find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE)
find_config
find_config
s->conf
s
s
conf
CONF_PARAM
CONF_PARAM
"TLSPKCS12File"
FALSE
FALSE
if (rsa == NULL &&        dsa == NULL &&        pkcs12 == NULL) {      continue;    }
rsa == NULL &&        dsa == NULL &&        pkcs12 == NULL
rsa == NULL &&        dsa == NULL
rsa == NULL
rsa
rsa
NULL
NULL
dsa == NULL
dsa
dsa
NULL
NULL
pkcs12 == NULL
pkcs12
pkcs12
NULL
NULL
{      continue;    }
continue;
k = pcalloc(s->pool, sizeof(tls_pkey_t));
k = pcalloc(s->pool, sizeof(tls_pkey_t))
k
k
pcalloc(s->pool, sizeof(tls_pkey_t))
pcalloc
pcalloc
s->pool
s
s
pool
sizeof(tls_pkey_t)
tls_pkey_t
tls_pkey_t
tls_pkey_t

k->pkeysz = PEM_BUFSIZE;
k->pkeysz = PEM_BUFSIZE
k->pkeysz
k
k
pkeysz
PEM_BUFSIZE
PEM_BUFSIZE
k->server = s;
k->server = s
k->server
k
k
server
s
s
if (rsa) {      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);      if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }
rsa
rsa
{      snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);      if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }
snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);
snprintf(buf, sizeof(buf)-1, "RSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName)
snprintf
snprintf
buf
buf
sizeof(buf)-1
sizeof(buf)
(buf)
buf
buf
1
"RSA key for the %s#%d (%s) server: "
pr_netaddr_get_ipstr(s->addr)
pr_netaddr_get_ipstr
pr_netaddr_get_ipstr
s->addr
s
s
addr
s->ServerPort
s
s
ServerPort
s->ServerName
s
s
ServerName
buf[sizeof(buf)-1] = '\0';
buf[sizeof(buf)-1] = '\0'
buf[sizeof(buf)-1]
buf
buf
sizeof(buf)-1
sizeof(buf)
(buf)
buf
buf
1
'\0'
k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr);
k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr)
k->rsa_pkey
k
k
rsa_pkey
tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr)
tls_get_page
tls_get_page
PEM_BUFSIZE
PEM_BUFSIZE
&k->rsa_pkey_ptr
k->rsa_pkey_ptr
k
k
rsa_pkey_ptr
if (k->rsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }
k->rsa_pkey == NULL
k->rsa_pkey
k
k
rsa_pkey
NULL
NULL
{        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_NOMEM
PR_SESS_DISCONNECT_NOMEM
NULL
NULL
if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }
tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY) < 0
tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY)
tls_get_passphrase
tls_get_passphrase
s
s
rsa->argv[0]
rsa->argv
rsa
rsa
argv
0
buf
buf
k->rsa_pkey
k
k
rsa_pkey
k->pkeysz
k
k
pkeysz
TLS_PASSPHRASE_FL_RSA_KEY
TLS_PASSPHRASE_FL_RSA_KEY
0
{        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }
pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading RSA passphrase: %s", tls_get_errors());
pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "RSA certificate key in '%s', exiting", (char *) rsa->argv[0]);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_BY_APPLICATION
PR_SESS_DISCONNECT_BY_APPLICATION
NULL
NULL
if (dsa) {      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);      if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }
dsa
dsa
{      snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);      if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }
snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);
snprintf(buf, sizeof(buf)-1, "DSA key for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName)
snprintf
snprintf
buf
buf
sizeof(buf)-1
sizeof(buf)
(buf)
buf
buf
1
"DSA key for the %s#%d (%s) server: "
pr_netaddr_get_ipstr(s->addr)
pr_netaddr_get_ipstr
pr_netaddr_get_ipstr
s->addr
s
s
addr
s->ServerPort
s
s
ServerPort
s->ServerName
s
s
ServerName
buf[sizeof(buf)-1] = '\0';
buf[sizeof(buf)-1] = '\0'
buf[sizeof(buf)-1]
buf
buf
sizeof(buf)-1
sizeof(buf)
(buf)
buf
buf
1
'\0'
k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr);
k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr)
k->dsa_pkey
k
k
dsa_pkey
tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr)
tls_get_page
tls_get_page
PEM_BUFSIZE
PEM_BUFSIZE
&k->dsa_pkey_ptr
k->dsa_pkey_ptr
k
k
dsa_pkey_ptr
if (k->dsa_pkey == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }
k->dsa_pkey == NULL
k->dsa_pkey
k
k
dsa_pkey
NULL
NULL
{        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_NOMEM
PR_SESS_DISCONNECT_NOMEM
NULL
NULL
if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }
tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY) < 0
tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY)
tls_get_passphrase
tls_get_passphrase
s
s
dsa->argv[0]
dsa->argv
dsa
dsa
argv
0
buf
buf
k->dsa_pkey
k
k
dsa_pkey
k->pkeysz
k
k
pkeysz
TLS_PASSPHRASE_FL_DSA_KEY
TLS_PASSPHRASE_FL_DSA_KEY
0
{        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }
pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading DSA passphrase: %s", tls_get_errors());
pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "DSA certificate key '%s', exiting", (char *) dsa->argv[0]);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_BY_APPLICATION
PR_SESS_DISCONNECT_BY_APPLICATION
NULL
NULL
if (pkcs12) {      snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);      if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }
pkcs12
pkcs12
{      snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);      buf[sizeof(buf)-1] = '\0';      k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);      if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }      if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }    }
snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName);
snprintf(buf, sizeof(buf)-1,        "PKCS12 password for the %s#%d (%s) server: ",        pr_netaddr_get_ipstr(s->addr), s->ServerPort, s->ServerName)
snprintf
snprintf
buf
buf
sizeof(buf)-1
sizeof(buf)
(buf)
buf
buf
1
"PKCS12 password for the %s#%d (%s) server: "
pr_netaddr_get_ipstr(s->addr)
pr_netaddr_get_ipstr
pr_netaddr_get_ipstr
s->addr
s
s
addr
s->ServerPort
s
s
ServerPort
s->ServerName
s
s
ServerName
buf[sizeof(buf)-1] = '\0';
buf[sizeof(buf)-1] = '\0'
buf[sizeof(buf)-1]
buf
buf
sizeof(buf)-1
sizeof(buf)
(buf)
buf
buf
1
'\0'
k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr);
k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr)
k->pkcs12_passwd
k
k
pkcs12_passwd
tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr)
tls_get_page
tls_get_page
PEM_BUFSIZE
PEM_BUFSIZE
&k->pkcs12_passwd_ptr
k->pkcs12_passwd_ptr
k
k
pkcs12_passwd_ptr
if (k->pkcs12_passwd == NULL) {        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }
k->pkcs12_passwd == NULL
k->pkcs12_passwd
k
k
pkcs12_passwd
NULL
NULL
{        pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);      }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),          MOD_TLS_VERSION ": Out of memory!");
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_NOMEM
PR_SESS_DISCONNECT_NOMEM
NULL
NULL
if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0) {        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }
tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD) < 0
tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD)
tls_get_passphrase
tls_get_passphrase
s
s
pkcs12->argv[0]
pkcs12->argv
pkcs12
pkcs12
argv
0
buf
buf
k->pkcs12_passwd
k
k
pkcs12_passwd
k->pkeysz
k
k
pkeysz
TLS_PASSPHRASE_FL_PKCS12_PASSWD
TLS_PASSPHRASE_FL_PKCS12_PASSWD
0
{        pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());        pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);        pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);      }
pr_log_debug(DEBUG0, MOD_TLS_VERSION          ": error reading PKCS12 password: %s", tls_get_errors());
pr_log_pri(PR_LOG_ERR, MOD_TLS_VERSION ": unable to use "          "PKCS12 certificate '%s', exiting", (char *) pkcs12->argv[0]);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,          NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_BY_APPLICATION
PR_SESS_DISCONNECT_BY_APPLICATION
NULL
NULL
k->next = tls_pkey_list;
k->next = tls_pkey_list
k->next
k
k
next
tls_pkey_list
tls_pkey_list
tls_pkey_list = k;
tls_pkey_list = k
tls_pkey_list
tls_pkey_list
k
k
tls_npkeys++;
tls_npkeys++
tls_npkeys
tls_npkeys
-----joern-----
(128,172,0)
(236,189,0)
(134,183,0)
(312,300,0)
(273,132,0)
(83,160,0)
(117,334,0)
(213,64,0)
(162,172,0)
(130,259,0)
(187,191,0)
(100,19,0)
(223,158,0)
(58,326,0)
(194,172,0)
(54,219,0)
(7,52,0)
(180,172,0)
(345,241,0)
(225,252,0)
(38,160,0)
(356,243,0)
(311,49,0)
(115,267,0)
(193,135,0)
(9,300,0)
(175,68,0)
(211,321,0)
(53,62,0)
(178,220,0)
(121,10,0)
(285,161,0)
(18,322,0)
(181,14,0)
(324,261,0)
(19,223,0)
(154,280,0)
(235,320,0)
(312,128,0)
(284,271,0)
(114,64,0)
(87,232,0)
(329,277,0)
(1,148,0)
(111,270,0)
(163,156,0)
(50,139,0)
(220,178,0)
(246,335,0)
(260,259,0)
(75,172,0)
(232,219,0)
(73,35,0)
(204,130,0)
(342,229,0)
(197,274,0)
(217,355,0)
(155,246,0)
(300,24,0)
(272,244,0)
(334,46,0)
(196,125,0)
(223,24,0)
(55,83,0)
(260,230,0)
(257,230,0)
(10,178,0)
(57,115,0)
(328,347,0)
(93,180,0)
(240,294,0)
(35,30,0)
(66,191,0)
(250,189,0)
(98,27,0)
(216,260,0)
(64,35,0)
(351,294,0)
(231,172,0)
(81,292,0)
(139,50,0)
(89,267,0)
(63,320,0)
(128,312,0)
(14,219,0)
(300,292,0)
(255,194,0)
(157,172,0)
(298,219,0)
(288,101,0)
(295,335,0)
(280,270,0)
(159,83,0)
(300,111,0)
(274,260,0)
(297,259,0)
(131,175,0)
(232,254,0)
(261,352,0)
(16,30,0)
(155,48,0)
(229,323,0)
(123,336,0)
(313,91,0)
(158,225,0)
(35,219,0)
(161,270,0)
(194,270,0)
(323,229,0)
(251,91,0)
(183,328,0)
(141,30,0)
(306,62,0)
(120,289,0)
(144,49,0)
(219,267,0)
(207,273,0)
(299,298,0)
(21,231,0)
(254,232,0)
(325,219,0)
(91,251,0)
(165,30,0)
(309,104,0)
(276,194,0)
(34,54,0)
(68,175,0)
(77,130,0)
(251,42,0)
(3,322,0)
(183,270,0)
(209,235,0)
(334,219,0)
(256,258,0)
(101,64,0)
(83,209,0)
(152,75,0)
(62,173,0)
(230,104,0)
(352,261,0)
(119,267,0)
(111,300,0)
(304,260,0)
(88,302,0)
(79,270,0)
(46,172,0)
(191,91,0)
(326,267,0)
(43,254,0)
(275,12,0)
(85,219,0)
(331,130,0)
(231,267,0)
(105,347,0)
(6,42,0)
(45,267,0)
(138,183,0)
(308,334,0)
(148,153,0)
(77,270,0)
(317,311,0)
(236,219,0)
(96,240,0)
(282,180,0)
(226,7,0)
(102,198,0)
(355,172,0)
(337,135,0)
(293,153,0)
(44,267,0)
(27,323,0)
(290,319,0)
(136,255,0)
(266,311,0)
(149,347,0)
(10,270,0)
(50,270,0)
(321,244,0)
(241,78,0)
(132,273,0)
(198,179,0)
(245,336,0)
(191,319,0)
(28,24,0)
(270,161,0)
(66,71,0)
(341,267,0)
(36,267,0)
(162,270,0)
(14,231,0)
(176,38,0)
(37,259,0)
(354,248,0)
(46,270,0)
(7,172,0)
(113,104,0)
(321,64,0)
(61,325,0)
(107,267,0)
(49,15,0)
(320,230,0)
(186,90,0)
(258,310,0)
(207,243,0)
(336,135,0)
(287,58,0)
(225,158,0)
(135,319,0)
(70,81,0)
(33,188,0)
(202,35,0)
(332,286,0)
(10,141,0)
(141,10,0)
(274,46,0)
(280,172,0)
(321,219,0)
(108,162,0)
(334,223,0)
(171,207,0)
(260,274,0)
(158,223,0)
(20,95,0)
(75,152,0)
(64,101,0)
(10,60,0)
(291,267,0)
(344,50,0)
(56,85,0)
(348,79,0)
(13,179,0)
(27,289,0)
(235,209,0)
(328,241,0)
(323,27,0)
(166,64,0)
(338,272,0)
(228,14,0)
(22,77,0)
(95,2,0)
(84,323,0)
(75,322,0)
(97,11,0)
(305,328,0)
(76,111,0)
(199,194,0)
(79,135,0)
(156,271,0)
(12,104,0)
(135,139,0)
(39,355,0)
(335,347,0)
(352,116,0)
(224,267,0)
(153,148,0)
(135,280,0)
(215,148,0)
(242,232,0)
(139,135,0)
(109,156,0)
(69,10,0)
(31,64,0)
(168,267,0)
(222,119,0)
(46,274,0)
(255,326,0)
(315,132,0)
(67,328,0)
(259,130,0)
(355,270,0)
(50,172,0)
(32,16,0)
(135,336,0)
(220,49,0)
(90,328,0)
(289,319,0)
(218,187,0)
(248,267,0)
(178,10,0)
(42,251,0)
(214,141,0)
(339,85,0)
(346,311,0)
(243,24,0)
(80,90,0)
(320,259,0)
(280,135,0)
(77,172,0)
(180,270,0)
(148,253,0)
(78,241,0)
(336,245,0)
(311,302,0)
(182,252,0)
(272,68,0)
(23,297,0)
(71,66,0)
(129,58,0)
(99,188,0)
(219,236,0)
(237,326,0)
(160,11,0)
(227,267,0)
(271,156,0)
(122,302,0)
(326,255,0)
(151,10,0)
(106,104,0)
(142,320,0)
(126,352,0)
(241,328,0)
(209,277,0)
(12,270,0)
(252,219,0)
(277,209,0)
(41,160,0)
(90,270,0)
(307,203,0)
(278,187,0)
(172,75,0)
(201,300,0)
(221,255,0)
(328,52,0)
(190,12,0)
(300,180,0)
(212,128,0)
(7,270,0)
(258,286,0)
(192,141,0)
(85,30,0)
(303,46,0)
(68,272,0)
(189,236,0)
(281,95,0)
(141,219,0)
(10,298,0)
(91,191,0)
(137,16,0)
(328,183,0)
(246,155,0)
(64,114,0)
(350,240,0)
(17,341,0)
(239,38,0)
(150,173,0)
(210,341,0)
(19,219,0)
(64,270,0)
(265,319,0)
(42,219,0)
(133,2,0)
(194,255,0)
(236,355,0)
(51,7,0)
(292,300,0)
(316,161,0)
(5,24,0)
(49,311,0)
(156,29,0)
(174,158,0)
(187,219,0)
(301,291,0)
(38,114,0)
(231,270,0)
(92,292,0)
(230,247,0)
(46,118,0)
(25,79,0)
(183,172,0)
(104,230,0)
(209,83,0)
(343,66,0)
(302,270,0)
(238,118,0)
(90,172,0)
(112,219,0)
(4,248,0)
(180,300,0)
(10,172,0)
(135,79,0)
(62,219,0)
(161,172,0)
(164,130,0)
(46,85,0)
(26,220,0)
(300,312,0)
(16,219,0)
(314,273,0)
(302,311,0)
(115,219,0)
(72,277,0)
(169,19,0)
(111,172,0)
(302,172,0)
(322,75,0)
(355,236,0)
(143,246,0)
(64,321,0)
(353,255,0)
(259,267,0)
(2,95,0)
(170,11,0)
(147,294,0)
(277,49,0)
(185,50,0)
(0,245,0)
(85,46,0)
(103,325,0)
(64,172,0)
(349,280,0)
(11,162,0)
(160,267,0)
(52,328,0)
(269,115,0)
(179,198,0)
(333,267,0)
(208,198,0)
(233,66,0)
(125,267,0)
(30,267,0)
(110,294,0)
(198,177,0)
(173,62,0)
(262,77,0)
(46,334,0)
(184,111,0)
(188,267,0)
(8,11,0)
(195,155,0)
(104,12,0)
(62,244,0)
(292,81,0)
(340,128,0)
(286,258,0)
(54,244,0)
(220,326,0)
(74,60,0)
(279,48,0)
(330,175,0)
(206,54,0)
(11,160,0)
(244,347,0)
(205,321,0)
(234,46,0)
(200,252,0)
(320,235,0)
(283,258,0)
(79,172,0)
(318,298,0)
(325,125,0)
(327,162,0)
(60,10,0)
(145,270,0)
(298,191,0)
(146,220,0)
(249,267,0)
(252,225,0)
(65,78,0)
(298,10,0)
(35,64,0)
(40,297,0)
(264,114,0)
(66,219,0)
(263,71,0)
(48,155,0)
(232,223,0)
(128,270,0)
(130,77,0)
(273,207,0)
(162,11,0)
(47,178,0)
(296,119,0)
(244,272,0)
(114,38,0)
(118,46,0)
(52,7,0)
(59,42,0)
(12,172,0)
(127,46,0)
(277,326,0)
(175,219,0)
(328,90,0)
(268,352,0)
(95,82,0)
(60,74,1)
(223,158,1)
(8,170,1)
(97,162,1)
(10,178,1)
(162,172,1)
(56,334,1)
(288,64,1)
(30,165,1)
(240,96,1)
(237,297,1)
(296,222,1)
(77,172,1)
(7,172,1)
(280,349,1)
(311,317,1)
(219,236,1)
(260,259,1)
(209,277,1)
(136,194,1)
(230,104,1)
(300,312,1)
(53,306,1)
(20,2,1)
(193,94,1)
(300,111,1)
(178,47,1)
(46,334,1)
(141,219,1)
(163,109,1)
(156,163,1)
(121,141,1)
(353,221,1)
(298,318,1)
(67,241,1)
(125,196,1)
(111,172,1)
(27,323,1)
(348,25,1)
(146,26,1)
(302,122,1)
(104,12,1)
(187,218,1)
(1,215,1)
(258,286,1)
(334,308,1)
(255,353,1)
(292,92,1)
(306,244,1)
(194,172,1)
(313,187,1)
(88,144,1)
(115,269,1)
(99,33,1)
(238,46,1)
(101,64,1)
(161,270,1)
(87,242,1)
(328,90,1)
(113,12,1)
(172,75,1)
(316,145,1)
(166,35,1)
(212,340,1)
(297,259,1)
(35,219,1)
(151,71,1)
(272,68,1)
(320,259,1)
(318,299,1)
(79,348,1)
(39,112,1)
(2,133,1)
(323,229,1)
(228,30,1)
(112,235,1)
(155,195,1)
(176,239,1)
(278,289,1)
(339,56,1)
(79,172,1)
(114,264,1)
(10,298,1)
(194,270,1)
(162,327,1)
(302,172,1)
(232,219,1)
(83,159,1)
(35,73,1)
(263,66,1)
(68,175,1)
(260,216,1)
(190,257,1)
(148,153,1)
(328,52,1)
(254,232,1)
(317,266,1)
(26,151,1)
(235,209,1)
(221,136,1)
(98,135,1)
(134,90,1)
(286,332,1)
(258,283,1)
(76,184,1)
(33,119,1)
(261,324,1)
(118,238,1)
(80,52,1)
(85,30,1)
(17,248,1)
(71,66,1)
(355,172,1)
(175,131,1)
(93,111,1)
(234,254,1)
(259,130,1)
(25,139,1)
(183,270,1)
(312,128,1)
(38,176,1)
(167,172,1)
(102,179,1)
(141,30,1)
(135,280,1)
(128,270,1)
(180,282,1)
(41,49,1)
(11,8,1)
(257,297,1)
(175,219,1)
(280,270,1)
(284,101,1)
(162,270,1)
(237,230,1)
(309,106,1)
(64,270,1)
(273,314,1)
(299,69,1)
(128,212,1)
(213,148,1)
(354,4,1)
(274,260,1)
(275,190,1)
(6,313,1)
(245,0,1)
(300,292,1)
(344,185,1)
(352,261,1)
(48,279,1)
(311,302,1)
(131,330,1)
(231,21,1)
(273,132,1)
(355,270,1)
(63,142,1)
(0,193,1)
(235,320,1)
(202,321,1)
(291,301,1)
(50,172,1)
(239,213,1)
(244,272,1)
(75,152,1)
(64,114,1)
(94,258,1)
(61,101,1)
(10,172,1)
(118,46,1)
(323,84,1)
(31,114,1)
(173,62,1)
(70,9,1)
(100,243,1)
(180,270,1)
(325,219,1)
(155,48,1)
(180,172,1)
(336,245,1)
(352,268,1)
(303,274,1)
(330,338,1)
(16,32,1)
(191,91,1)
(52,7,1)
(252,200,1)
(283,256,1)
(324,254,1)
(108,41,1)
(78,65,1)
(322,3,1)
(86,60,1)
(226,67,1)
(277,326,1)
(215,153,1)
(277,72,1)
(62,53,1)
(130,77,1)
(268,126,1)
(232,223,1)
(119,296,1)
(111,76,1)
(170,97,1)
(328,241,1)
(262,22,1)
(183,138,1)
(77,262,1)
(345,78,1)
(106,113,1)
(40,259,1)
(326,255,1)
(77,270,1)
(236,355,1)
(37,188,1)
(75,322,1)
(92,81,1)
(46,172,1)
(160,11,1)
(71,263,1)
(34,335,1)
(64,166,1)
(264,38,1)
(51,226,1)
(115,219,1)
(220,146,1)
(94,124,1)
(332,118,1)
(23,40,1)
(66,233,1)
(144,58,1)
(132,315,1)
(252,219,1)
(90,270,1)
(329,320,1)
(157,240,1)
(22,37,1)
(61,156,1)
(90,172,1)
(233,343,1)
(214,298,1)
(236,189,1)
(46,127,1)
(243,356,1)
(231,270,1)
(300,180,1)
(141,192,1)
(185,337,1)
(148,1,1)
(277,49,1)
(137,219,1)
(241,78,1)
(61,86,1)
(217,39,1)
(174,19,1)
(62,219,1)
(90,186,1)
(7,270,1)
(184,312,1)
(12,275,1)
(305,86,1)
(54,219,1)
(321,219,1)
(117,303,1)
(95,2,1)
(179,13,1)
(4,167,1)
(292,81,1)
(66,191,1)
(94,118,1)
(325,103,1)
(187,219,1)
(11,162,1)
(57,125,1)
(46,274,1)
(302,270,1)
(343,191,1)
(64,172,1)
(356,207,1)
(225,252,1)
(307,235,1)
(234,352,1)
(335,295,1)
(58,326,1)
(246,155,1)
(293,173,1)
(59,6,1)
(161,172,1)
(222,341,1)
(84,229,1)
(96,350,1)
(334,223,1)
(266,346,1)
(315,171,1)
(128,172,1)
(320,230,1)
(220,49,1)
(208,102,1)
(197,260,1)
(46,85,1)
(173,150,1)
(194,199,1)
(74,10,1)
(135,336,1)
(43,232,1)
(255,194,1)
(205,31,1)
(183,172,1)
(12,270,1)
(256,286,1)
(19,219,1)
(95,281,1)
(42,59,1)
(337,336,1)
(16,219,1)
(206,34,1)
(314,132,1)
(213,173,1)
(301,115,1)
(195,48,1)
(274,197,1)
(19,169,1)
(287,326,1)
(328,183,1)
(135,139,1)
(10,270,1)
(270,161,1)
(153,293,1)
(165,16,1)
(73,202,1)
(304,234,1)
(145,307,1)
(145,291,1)
(271,284,1)
(54,206,1)
(14,181,1)
(142,160,1)
(334,219,1)
(79,270,1)
(349,154,1)
(229,342,1)
(47,220,1)
(248,354,1)
(220,326,1)
(154,79,1)
(129,287,1)
(13,60,1)
(338,54,1)
(64,35,1)
(232,87,1)
(241,345,1)
(282,93,1)
(340,201,1)
(279,143,1)
(158,225,1)
(159,55,1)
(85,339,1)
(124,231,1)
(50,270,1)
(346,302,1)
(260,230,1)
(189,250,1)
(41,58,1)
(114,38,1)
(65,305,1)
(91,251,1)
(320,63,1)
(72,329,1)
(182,174,1)
(122,88,1)
(101,288,1)
(7,51,1)
(211,205,1)
(66,219,1)
(81,70,1)
(210,17,1)
(143,328,1)
(336,123,1)
(192,214,1)
(18,157,1)
(156,271,1)
(32,137,1)
(204,77,1)
(86,198,1)
(297,23,1)
(55,277,1)
(254,43,1)
(355,217,1)
(341,210,1)
(186,80,1)
(327,108,1)
(49,311,1)
(209,83,1)
(83,160,1)
(42,219,1)
(198,208,1)
(120,27,1)
(200,182,1)
(86,94,1)
(181,228,1)
(161,285,1)
(123,245,1)
(46,270,1)
(298,219,1)
(126,261,1)
(269,57,1)
(196,325,1)
(342,98,1)
(69,178,1)
(178,220,1)
(295,246,1)
(242,223,1)
(60,10,1)
(167,270,1)
(276,237,1)
(216,304,1)
(3,18,1)
(251,42,1)
(164,204,1)
(280,172,1)
(104,309,1)
(138,134,1)
(9,124,1)
(171,300,1)
(14,219,1)
(281,20,1)
(150,62,1)
(109,271,1)
(250,355,1)
(38,160,1)
(198,179,1)
(35,30,1)
(127,85,1)
(331,164,1)
(308,117,1)
(151,95,1)
(321,244,1)
(231,172,1)
(111,270,1)
(218,278,1)
(133,71,1)
(321,211,1)
(103,61,1)
(140,167,1)
(12,172,1)
(10,121,1)
(169,100,1)
(10,141,1)
(130,331,1)
(285,316,1)
(207,273,1)
(298,191,1)
(289,120,1)
(85,219,1)
(188,99,1)
(139,50,1)
(64,321,1)
(201,292,1)
(199,276,1)
(58,129,1)
(21,14,1)
(62,244,1)
(50,344,1)
(135,79,1)
(285,167,2)
(128,124,2)
(95,2,2)
(183,172,2)
(273,132,2)
(12,270,2)
(130,77,2)
(64,270,2)
(352,254,2)
(158,225,2)
(327,167,2)
(85,30,2)
(252,219,2)
(261,254,2)
(231,172,2)
(213,86,2)
(38,86,2)
(156,271,2)
(135,94,2)
(111,270,2)
(60,94,2)
(158,124,2)
(212,124,2)
(32,235,2)
(75,152,2)
(66,191,2)
(54,86,2)
(246,86,2)
(280,172,2)
(214,94,2)
(58,326,2)
(72,320,2)
(115,235,2)
(338,86,2)
(304,124,2)
(353,167,2)
(218,94,2)
(164,167,2)
(320,259,2)
(62,219,2)
(0,94,2)
(258,286,2)
(39,235,2)
(108,167,2)
(135,139,2)
(16,235,2)
(111,172,2)
(336,245,2)
(167,167,2)
(41,167,2)
(298,219,2)
(349,94,2)
(270,167,2)
(161,270,2)
(328,241,2)
(141,219,2)
(73,86,2)
(180,172,2)
(21,235,2)
(180,270,2)
(173,62,2)
(317,58,2)
(307,235,2)
(183,86,2)
(119,167,2)
(303,124,2)
(143,86,2)
(81,124,2)
(223,124,2)
(151,94,2)
(162,270,2)
(8,167,2)
(136,167,2)
(1,173,2)
(321,219,2)
(120,94,2)
(53,86,2)
(243,124,2)
(80,86,2)
(282,124,2)
(78,86,2)
(85,219,2)
(209,277,2)
(64,321,2)
(2,71,2)
(239,86,2)
(336,94,2)
(163,101,2)
(286,118,2)
(139,50,2)
(137,235,2)
(355,235,2)
(289,94,2)
(109,101,2)
(57,235,2)
(235,167,2)
(10,94,2)
(241,78,2)
(324,254,2)
(77,167,2)
(314,124,2)
(256,118,2)
(320,230,2)
(139,94,2)
(266,58,2)
(198,179,2)
(193,94,2)
(10,298,2)
(251,42,2)
(142,167,2)
(260,230,2)
(27,323,2)
(35,219,2)
(232,223,2)
(270,161,2)
(295,86,2)
(48,86,2)
(132,124,2)
(91,251,2)
(58,167,2)
(298,94,2)
(235,320,2)
(17,167,2)
(328,52,2)
(231,235,2)
(232,219,2)
(341,167,2)
(201,124,2)
(30,235,2)
(49,58,2)
(217,235,2)
(300,292,2)
(79,270,2)
(251,94,2)
(43,124,2)
(189,235,2)
(228,235,2)
(206,86,2)
(65,86,2)
(234,124,2)
(311,58,2)
(315,124,2)
(302,172,2)
(12,172,2)
(292,81,2)
(195,86,2)
(60,10,2)
(144,58,2)
(334,124,2)
(321,86,2)
(269,235,2)
(226,86,2)
(161,167,2)
(326,255,2)
(155,86,2)
(259,130,2)
(55,277,2)
(150,86,2)
(238,124,2)
(207,124,2)
(19,219,2)
(262,167,2)
(305,86,2)
(104,12,2)
(191,94,2)
(92,124,2)
(283,118,2)
(135,280,2)
(49,311,2)
(352,261,2)
(248,167,2)
(331,167,2)
(280,270,2)
(272,68,2)
(337,94,2)
(114,86,2)
(83,160,2)
(277,320,2)
(88,58,2)
(356,124,2)
(220,326,2)
(154,94,2)
(62,244,2)
(204,167,2)
(348,94,2)
(179,60,2)
(312,128,2)
(225,252,2)
(37,167,2)
(51,86,2)
(170,167,2)
(258,118,2)
(123,94,2)
(23,167,2)
(287,167,2)
(104,297,2)
(11,162,2)
(178,94,2)
(52,7,2)
(12,297,2)
(230,104,2)
(6,94,2)
(231,270,2)
(244,272,2)
(241,86,2)
(325,219,2)
(199,167,2)
(10,172,2)
(291,235,2)
(194,167,2)
(355,172,2)
(7,270,2)
(40,167,2)
(328,183,2)
(131,86,2)
(297,259,2)
(306,86,2)
(141,94,2)
(264,86,2)
(166,86,2)
(312,124,2)
(205,86,2)
(190,297,2)
(354,167,2)
(300,180,2)
(87,124,2)
(221,167,2)
(79,94,2)
(343,94,2)
(263,94,2)
(69,94,2)
(26,94,2)
(11,167,2)
(276,167,2)
(268,254,2)
(209,83,2)
(19,124,2)
(46,172,2)
(68,86,2)
(46,124,2)
(127,124,2)
(181,235,2)
(112,235,2)
(222,167,2)
(225,124,2)
(14,219,2)
(174,124,2)
(117,124,2)
(161,172,2)
(300,312,2)
(345,86,2)
(207,273,2)
(235,209,2)
(90,270,2)
(281,71,2)
(274,124,2)
(103,235,2)
(99,167,2)
(277,49,2)
(275,297,2)
(329,320,2)
(198,60,2)
(178,220,2)
(133,71,2)
(185,94,2)
(25,94,2)
(56,124,2)
(128,270,2)
(83,277,2)
(114,38,2)
(64,86,2)
(191,91,2)
(66,219,2)
(141,30,2)
(220,49,2)
(296,167,2)
(106,297,2)
(220,94,2)
(160,11,2)
(215,173,2)
(292,124,2)
(146,94,2)
(115,219,2)
(325,235,2)
(126,254,2)
(230,297,2)
(122,58,2)
(219,235,2)
(277,326,2)
(279,86,2)
(148,153,2)
(153,173,2)
(339,124,2)
(46,270,2)
(20,71,2)
(85,124,2)
(257,297,2)
(300,124,2)
(323,94,2)
(135,79,2)
(125,235,2)
(232,124,2)
(242,124,2)
(302,58,2)
(186,86,2)
(9,124,2)
(159,277,2)
(67,86,2)
(61,235,2)
(293,173,2)
(50,270,2)
(75,322,2)
(121,94,2)
(302,270,2)
(76,124,2)
(172,75,2)
(101,86,2)
(308,124,2)
(64,114,2)
(118,46,2)
(259,167,2)
(284,101,2)
(183,270,2)
(280,94,2)
(42,219,2)
(278,94,2)
(148,173,2)
(246,155,2)
(145,167,2)
(236,235,2)
(54,219,2)
(10,141,2)
(175,86,2)
(16,219,2)
(42,94,2)
(223,158,2)
(298,191,2)
(97,167,2)
(77,172,2)
(98,94,2)
(196,235,2)
(326,167,2)
(255,194,2)
(165,235,2)
(197,124,2)
(342,94,2)
(321,244,2)
(237,167,2)
(70,124,2)
(273,124,2)
(50,94,2)
(180,124,2)
(344,94,2)
(255,167,2)
(10,270,2)
(135,336,2)
(173,86,2)
(79,172,2)
(52,86,2)
(184,124,2)
(134,86,2)
(162,172,2)
(101,64,2)
(318,94,2)
(194,270,2)
(77,270,2)
(245,94,2)
(46,334,2)
(299,94,2)
(47,94,2)
(169,124,2)
(7,86,2)
(71,66,2)
(188,167,2)
(22,167,2)
(129,167,2)
(187,94,2)
(31,86,2)
(254,124,2)
(300,111,2)
(128,172,2)
(94,235,2)
(124,235,2)
(59,94,2)
(33,167,2)
(10,178,2)
(254,232,2)
(260,259,2)
(335,86,2)
(111,124,2)
(130,167,2)
(66,94,2)
(90,172,2)
(113,297,2)
(323,229,2)
(288,86,2)
(46,274,2)
(211,86,2)
(316,167,2)
(46,85,2)
(27,94,2)
(187,219,2)
(84,94,2)
(334,219,2)
(91,94,2)
(7,172,2)
(309,297,2)
(355,270,2)
(216,124,2)
(219,236,2)
(102,60,2)
(334,223,2)
(175,219,2)
(332,118,2)
(346,58,2)
(14,235,2)
(330,86,2)
(138,86,2)
(236,189,2)
(271,101,2)
(260,124,2)
(156,101,2)
(64,35,2)
(274,260,2)
(160,167,2)
(118,124,2)
(252,124,2)
(100,124,2)
(71,94,2)
(93,124,2)
(90,86,2)
(63,167,2)
(210,167,2)
(95,71,2)
(182,124,2)
(192,94,2)
(50,172,2)
(297,167,2)
(4,167,2)
(272,86,2)
(200,124,2)
(236,355,2)
(301,235,2)
(340,124,2)
(194,172,2)
(68,175,2)
(208,60,2)
(244,86,2)
(155,48,2)
(162,167,2)
(171,124,2)
(233,94,2)
(328,90,2)
(86,235,2)
(34,86,2)
(35,86,2)
(74,94,2)
(311,302,2)
(13,60,2)
(176,86,2)
(229,94,2)
(313,94,2)
(250,235,2)
(320,167,2)
(202,86,2)
(64,172,2)
(62,86,2)
(209,320,2)
(38,160,2)
(35,30,2)
(328,86,2)
-----------------------------------
(0,buf)
(1,NULL)
(2,&tls_module)
(3,xas_list)
(4,rsa)
(5,if (tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY)
(6,k)
(7,s->addr)
(8,FALSE)
(9,buf)
(10,tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY)
(11,find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE)
(12,s->conf)
(13,tls_module)
(14,k->server)
(15,)
(16,k->pkeysz)
(17,dsa)
(18,server_list)
(19,k->rsa_pkey)
(20,PR_SESS_DISCONNECT_NOMEM)
(21,s)
(22,s)
(23,NULL)
(24,)
(25,s)
(26,dsa)
(27,buf[sizeof(buf)
(28,if (k->rsa_pkey == NULL)
(29,)
(30,k->pkeysz = PEM_BUFSIZE)
(31,buf)
(32,pkeysz)
(33,k)
(34,k)
(35,k->pkeysz)
(36,if (rsa)
(37,rsa)
(38,pkcs12->argv)
(39,s)
(40,rsa)
(41,pkcs12)
(42,k->dsa_pkey_ptr)
(43,NULL)
(44,if (rsa == NULL)
(45,k)
(46,tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY)
(47,0)
(48,sizeof(buf)
(49,dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE)
(50,s->addr)
(51,addr)
(52,pr_netaddr_get_ipstr(s->addr)
(53,pkcs12_passwd)
(54,k->pkcs12_passwd)
(55,pkcs12)
(56,k)
(57,tls_pkey_list)
(58,dsa == NULL)
(59,dsa_pkey_ptr)
(60,tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY)
(61,k)
(62,k->pkcs12_passwd)
(63,NULL)
(64,tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD)
(65,buf)
(66,k->dsa_pkey)
(67,"PKCS12 password for the %s#%d (%s)
(68,&k->pkcs12_passwd_ptr)
(69,buf)
(70,buf)
(71,k->dsa_pkey == NULL)
(72,NULL)
(73,pkeysz)
(74,0)
(75,(server_rec *)
(76,ServerPort)
(77,s->conf)
(78,sizeof(buf)
(79,s->ServerPort)
(80,s)
(81,sizeof(buf)
(82,)
(83,pkcs12 == NULL)
(84,1)
(85,k->pkeysz)
(86,pkcs12)
(87,rsa_pkey)
(88,s)
(89,if (dsa)
(90,s->ServerPort)
(91,tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr)
(92,1)
(93,s)
(94,dsa)
(95,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
(96,NULL)
(97,CONF_PARAM)
(98,buf)
(99,NULL)
(100,k)
(101,tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD)
(102,PR_SESS_DISCONNECT_BY_APPLICATION)
(103,next)
(104,find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE)
(105,if (k->pkcs12_passwd == NULL)
(106,"TLSRSACertificateFile")
(107,if (rsa == NULL &&\n\\n        dsa == NULL &&\n\\n        pkcs12 == NULL)
(108,s)
(109,PR_SESS_DISCONNECT_BY_APPLICATION)
(110,buf)
(111,s->ServerPort)
(112,k)
(113,CONF_PARAM)
(114,pkcs12->argv[0])
(115,tls_pkey_list = k)
(116,)
(117,k)
(118,tls_get_passphrase(s, rsa->argv[0], buf, k->rsa_pkey,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_RSA_KEY)
(119,*pkcs12 = NULL)
(120,\'\\0\')
(121,TLS_PASSPHRASE_FL_DSA_KEY)
(122,conf)
(123,1)
(124,rsa)
(125,k->next = tls_pkey_list)
(126,PR_SESS_DISCONNECT_NOMEM)
(127,TLS_PASSPHRASE_FL_RSA_KEY)
(128,s->addr)
(129,NULL)
(130,find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE)
(131,pkcs12_passwd_ptr)
(132,sizeof(buf)
(133,tls_module)
(134,s)
(135,snprintf(buf, sizeof(buf)
(136,CONF_PARAM)
(137,k)
(138,ServerName)
(139,pr_netaddr_get_ipstr(s->addr)
(140,RET)
(141,k->pkeysz)
(142,rsa)
(143,buf)
(144,dsa)
(145,s)
(146,argv)
(147,s)
(148,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
(149,if (tls_get_passphrase(s, pkcs12->argv[0], buf, k->pkcs12_passwd,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_PKCS12_PASSWD)
(150,NULL)
(151,s)
(152,server_rec *)
(153,&tls_module)
(154,s)
(155,sizeof(buf)
(156,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,\n\\n          NULL)
(157,s)
(158,tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr)
(159,NULL)
(160,pkcs12 = find_config(s->conf, CONF_PARAM, "TLSPKCS12File", FALSE)
(161,s->next)
(162,s->conf)
(163,NULL)
(164,"TLSRSACertificateKeyFile")
(165,PEM_BUFSIZE)
(166,TLS_PASSPHRASE_FL_PKCS12_PASSWD)
(167,s)
(168,rsa)
(169,rsa_pkey)
(170,"TLSPKCS12File")
(171,buf)
(172,s = (server_rec *)
(173,k->pkcs12_passwd == NULL)
(174,PEM_BUFSIZE)
(175,k->pkcs12_passwd_ptr)
(176,argv)
(177,)
(178,dsa->argv[0])
(179,&tls_module)
(180,s->ServerName)
(181,server)
(182,k)
(183,s->ServerName)
(184,s)
(185,s)
(186,ServerPort)
(187,k->dsa_pkey)
(188,*k = NULL)
(189,sizeof(tls_pkey_t)
(190,s)
(191,k->dsa_pkey = tls_get_page(PEM_BUFSIZE, &k->dsa_pkey_ptr)
(192,pkeysz)
(193,buf)
(194,s->conf)
(195,1)
(196,tls_pkey_list)
(197,0)
(198,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,\n\\n          NULL)
(199,conf)
(200,rsa_pkey_ptr)
(201,"RSA key for the %s#%d (%s)
(202,k)
(203,)
(204,CONF_PARAM)
(205,k)
(206,pkcs12_passwd)
(207,buf[sizeof(buf)
(208,NULL)
(209,dsa == NULL &&\n\\n        pkcs12 == NULL)
(210,NULL)
(211,pkcs12_passwd)
(212,addr)
(213,s)
(214,k)
(215,PR_SESS_DISCONNECT_NOMEM)
(216,argv)
(217,pool)
(218,dsa_pkey)
(219,k = pcalloc(s->pool, sizeof(tls_pkey_t)
(220,dsa->argv)
(221,"TLSDSACertificateKeyFile")
(222,pkcs12)
(223,k->rsa_pkey = tls_get_page(PEM_BUFSIZE, &k->rsa_pkey_ptr)
(224,if (dsa == NULL)
(225,&k->rsa_pkey_ptr)
(226,s)
(227,dsa)
(228,k)
(229,sizeof(buf)
(230,rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateFile", FALSE)
(231,k->server = s)
(232,k->rsa_pkey)
(233,dsa_pkey)
(234,s)
(235,rsa == NULL &&\n\\n        dsa == NULL &&\n\\n        pkcs12 == NULL)
(236,pcalloc(s->pool, sizeof(tls_pkey_t)
(237,dsa)
(238,0)
(239,pkcs12)
(240,*s = NULL)
(241,sizeof(buf)
(242,k)
(243,buf[sizeof(buf)
(244,k->pkcs12_passwd = tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr)
(245,sizeof(buf)
(246,buf[sizeof(buf)
(247,)
(248,*rsa = NULL)
(249,if (pkcs12)
(250,tls_pkey_t)
(251,&k->dsa_pkey_ptr)
(252,k->rsa_pkey_ptr)
(253,)
(254,k->rsa_pkey == NULL)
(255,find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE)
(256,PR_SESS_DISCONNECT_BY_APPLICATION)
(257,rsa)
(258,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_BY_APPLICATION,\n\\n          NULL)
(259,rsa = find_config(s->conf, CONF_PARAM, "TLSRSACertificateKeyFile", FALSE)
(260,rsa->argv)
(261,&tls_module)
(262,conf)
(263,NULL)
(264,0)
(265,if (k->dsa_pkey == NULL)
(266,"TLSDSACertificateFile")
(267,)
(268,NULL)
(269,k)
(270,s = s->next)
(271,&tls_module)
(272,tls_get_page(PEM_BUFSIZE, &k->pkcs12_passwd_ptr)
(273,sizeof(buf)
(274,rsa->argv[0])
(275,conf)
(276,s)
(277,dsa == NULL)
(278,k)
(279,buf)
(280,s->ServerName)
(281,NULL)
(282,ServerName)
(283,NULL)
(284,tls_module)
(285,next)
(286,&tls_module)
(287,dsa)
(288,0)
(289,buf[sizeof(buf)
(290,if (tls_get_passphrase(s, dsa->argv[0], buf, k->dsa_pkey,\n\\n          k->pkeysz, TLS_PASSPHRASE_FL_DSA_KEY)
(291,tls_npkeys++)
(292,sizeof(buf)
(293,tls_module)
(294,)
(295,\'\\0\')
(296,NULL)
(297,rsa == NULL)
(298,k->dsa_pkey)
(299,k)
(300,snprintf(buf, sizeof(buf)
(301,tls_npkeys)
(302,s->conf)
(303,buf)
(304,rsa)
(305,buf)
(306,k)
(307,continue;)
(308,rsa_pkey)
(309,FALSE)
(310,)
(311,find_config(s->conf, CONF_PARAM, "TLSDSACertificateFile", FALSE)
(312,pr_netaddr_get_ipstr(s->addr)
(313,PEM_BUFSIZE)
(314,1)
(315,buf)
(316,s)
(317,FALSE)
(318,dsa_pkey)
(319,)
(320,rsa == NULL)
(321,k->pkcs12_passwd)
(322,server_list->xas_list)
(323,sizeof(buf)
(324,tls_module)
(325,k->next)
(326,dsa = find_config(s->conf, CONF_PARAM, "TLSDSACertificateKeyFile", FALSE)
(327,conf)
(328,snprintf(buf, sizeof(buf)
(329,dsa)
(330,k)
(331,FALSE)
(332,tls_module)
(333,pkcs12)
(334,k->rsa_pkey)
(335,buf[sizeof(buf)
(336,sizeof(buf)
(337,"DSA key for the %s#%d (%s)
(338,PEM_BUFSIZE)
(339,pkeysz)
(340,s)
(341,*dsa = NULL)
(342,buf)
(343,k)
(344,addr)
(345,1)
(346,CONF_PARAM)
(347,)
(348,ServerPort)
(349,ServerName)
(350,s)
(351,for (s = (server_rec *)
(352,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
(353,FALSE)
(354,NULL)
(355,s->pool)
(356,\'\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^