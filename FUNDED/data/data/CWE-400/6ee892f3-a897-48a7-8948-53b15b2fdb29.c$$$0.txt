-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(35,25,0)
(20,2,0)
(9,15,0)
(36,3,0)
(17,23,0)
(25,13,0)
(24,5,0)
(29,36,0)
(33,5,0)
(34,21,0)
(5,31,0)
(30,33,0)
(25,6,0)
(11,17,0)
(4,25,0)
(0,9,0)
(12,6,0)
(21,31,0)
(13,24,0)
(18,35,0)
(27,5,0)
(21,5,0)
(28,27,0)
(22,12,0)
(16,31,0)
(24,14,0)
(8,2,0)
(13,25,0)
(10,22,0)
(12,22,0)
(3,32,0)
(2,31,0)
(25,35,0)
(1,5,0)
(3,36,0)
(24,13,0)
(2,5,0)
(26,12,0)
(5,24,0)
(37,33,0)
(14,24,0)
(7,17,0)
(27,31,0)
(20,33,1)
(27,28,1)
(25,35,1)
(34,2,1)
(24,14,1)
(28,21,1)
(8,20,1)
(35,18,1)
(4,1,1)
(12,6,1)
(21,5,1)
(12,22,1)
(30,5,1)
(24,13,1)
(36,29,1)
(2,5,1)
(21,34,1)
(27,5,1)
(9,0,1)
(22,10,1)
(13,25,1)
(33,5,1)
(5,24,1)
(2,8,1)
(19,9,1)
(37,30,1)
(19,27,1)
(29,33,1)
(3,36,1)
(0,12,1)
(33,37,1)
(1,12,1)
(20,3,1)
(25,6,1)
(10,26,1)
(18,4,1)
(8,12,2)
(24,14,2)
(35,12,2)
(34,12,2)
(24,13,2)
(1,12,2)
(12,6,2)
(2,12,2)
(37,12,2)
(33,12,2)
(3,36,2)
(27,5,2)
(25,12,2)
(25,35,2)
(13,25,2)
(27,12,2)
(4,12,2)
(9,12,2)
(29,33,2)
(5,12,2)
(5,24,2)
(3,33,2)
(24,12,2)
(28,12,2)
(36,33,2)
(13,12,2)
(21,5,2)
(20,12,2)
(25,6,2)
(33,5,2)
(21,12,2)
(18,12,2)
(30,12,2)
(12,22,2)
(0,12,2)
(2,5,2)
-----------------------------------
(0,"Input is less than the length of the source string")
(1,myString)
(2,strcpy(myString, HELLO_STRING)
(3,exit(-1)
(4,data)
(5,myString = (char *)
(6,size_t data)
(7,myString)
(8,HELLO_STRING)
(9,printLine("Input is less than the length of the source string")
(10,HELLO_STRING)
(11,if (data > strlen(HELLO_STRING)
(12,data > strlen(HELLO_STRING)
(13,malloc(data*sizeof(char)
(14,char *)
(15,)
(16,if (myString == NULL)
(17,)
(18,char)
(19,RET)
(20,myString)
(21,printLine(myString)
(22,strlen(HELLO_STRING)
(23,)
(24,(char *)
(25,data*sizeof(char)
(26,data)
(27,free(myString)
(28,myString)
(29,1)
(30,myString)
(31,)
(32,)
(33,myString == NULL)
(34,myString)
(35,sizeof(char)
(36,-1)
(37,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^