-----label-----
0
-----code-----
static void goodB2G()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    }
    while(1)
    {
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
65,66
65,67
67,68
67,69
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,54,56,57,61,63,64,66,71,73,74
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G()
goodB2G
{    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }
1
{        /* FIX: Deallocate memory */        free(data);        break;    }
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(22,20,0)
(21,23,0)
(12,15,0)
(5,13,0)
(33,34,0)
(25,32,0)
(29,23,0)
(27,13,0)
(15,23,0)
(17,21,0)
(30,15,0)
(14,15,0)
(12,27,0)
(10,15,0)
(3,13,0)
(2,14,0)
(11,10,0)
(18,32,0)
(32,18,0)
(23,21,0)
(14,34,0)
(23,15,0)
(7,10,0)
(24,13,0)
(23,29,0)
(26,27,0)
(15,34,0)
(1,12,0)
(4,34,0)
(12,20,0)
(21,9,0)
(16,9,0)
(31,27,0)
(9,21,0)
(18,19,0)
(21,9,1)
(26,31,1)
(6,27,1)
(1,28,1)
(10,7,1)
(10,15,1)
(7,11,1)
(8,28,1)
(30,6,1)
(23,21,1)
(9,16,1)
(8,22,1)
(18,32,1)
(23,29,1)
(25,10,1)
(2,18,1)
(12,15,1)
(11,15,1)
(28,6,1)
(4,14,1)
(14,15,1)
(2,10,1)
(12,27,1)
(17,30,1)
(22,12,1)
(14,2,1)
(28,4,1)
(15,23,1)
(32,25,1)
(16,17,1)
(27,26,1)
(12,1,1)
(23,6,2)
(9,6,2)
(30,6,2)
(21,9,2)
(23,29,2)
(15,6,2)
(1,28,2)
(12,27,2)
(7,6,2)
(21,6,2)
(14,6,2)
(12,15,2)
(2,6,2)
(11,6,2)
(18,10,2)
(18,32,2)
(25,10,2)
(10,6,2)
(10,15,2)
(12,28,2)
(22,28,2)
(16,6,2)
(14,15,2)
(32,10,2)
(15,23,2)
(23,21,2)
(4,6,2)
(17,6,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,data)
(2,data)
(3,while(1)
(4,break;)
(5,data)
(6,1)
(7,NULL)
(8,RET)
(9,sizeof(wchar_t)
(10,data == NULL)
(11,data)
(12,free(data)
(13,)
(14,printWLine(data)
(15,data = (wchar_t *)
(16,wchar_t)
(17,100)
(18,exit(-1)
(19,)
(20,)
(21,calloc(100, sizeof(wchar_t)
(22,break;)
(23,(wchar_t *)
(24,while(1)
(25,1)
(26,NULL)
(27,data = NULL)
(28,1)
(29,wchar_t *)
(30,data)
(31,data)
(32,-1)
(33,if (data == NULL)
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^