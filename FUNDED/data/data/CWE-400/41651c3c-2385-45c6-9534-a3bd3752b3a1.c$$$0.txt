-----label-----
0
-----code-----
static void goodG2B1()
{
    int64_t * data;
    data = NULL;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
24,25
25,26
25,27
26,27
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
67,68
67,69
69,70
69,71
69,72
69,73
69,74
69,75
70,71
75,76
76,77
76,78
77,78
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,28,29,30,34,38,40,43,45,49,50,55,56,57,61,64,65,66,68,71,72,73,74,78,79,80
-----computeFrom-----
14,15
14,16
32,33
32,34
44,45
44,46
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    int64_t * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    int64_t * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(3,17,0)
(11,15,0)
(25,0,0)
(20,25,0)
(35,31,0)
(26,4,0)
(30,15,0)
(21,35,0)
(19,23,0)
(18,4,0)
(22,23,0)
(32,15,0)
(7,23,0)
(10,23,0)
(0,25,0)
(12,21,0)
(5,23,0)
(0,4,0)
(28,32,0)
(8,1,0)
(14,32,0)
(31,35,0)
(35,21,0)
(24,15,0)
(17,3,0)
(33,4,0)
(17,31,0)
(13,4,0)
(16,7,0)
(1,4,0)
(36,4,0)
(2,4,0)
(31,17,0)
(25,18,0)
(17,18,0)
(29,35,0)
(37,25,0)
(18,17,0)
(27,18,0)
(0,25,1)
(17,31,1)
(28,14,1)
(9,10,1)
(35,21,1)
(29,27,1)
(10,34,1)
(26,18,1)
(25,20,1)
(12,29,1)
(13,1,1)
(27,6,1)
(21,12,1)
(6,32,1)
(18,17,1)
(16,34,1)
(25,18,1)
(32,28,1)
(7,16,1)
(34,36,1)
(37,26,1)
(34,13,1)
(31,35,1)
(36,0,1)
(1,8,1)
(9,22,1)
(22,7,1)
(20,37,1)
(8,6,1)
(17,3,1)
(31,6,2)
(27,6,2)
(0,6,2)
(22,34,2)
(17,31,2)
(29,6,2)
(7,34,2)
(36,6,2)
(31,35,2)
(8,6,2)
(35,21,2)
(17,6,2)
(13,6,2)
(21,6,2)
(25,6,2)
(35,6,2)
(18,17,2)
(18,6,2)
(17,3,2)
(26,6,2)
(25,18,2)
(1,6,2)
(0,25,2)
(16,34,2)
(10,34,2)
(37,6,2)
(20,6,2)
(12,6,2)
-----------------------------------
(0,printLongLongLine(data[0])
(1,printLine("Benign, fixed string")
(2,case 6:)
(3,int64_t *)
(4,)
(5,default:)
(6,5)
(7,printLine("Benign, fixed string")
(8,"Benign, fixed string")
(9,RET)
(10,break;)
(11,switch(7)
(12,int64_t)
(13,break;)
(14,data)
(15,)
(16,"Benign, fixed string")
(17,(int64_t *)
(18,data = (int64_t *)
(19,case 7:)
(20,0)
(21,sizeof(int64_t)
(22,break;)
(23,)
(24,data)
(25,data[0])
(26,L)
(27,data)
(28,NULL)
(29,100)
(30,switch(5)
(31,ALLOCA(100*sizeof(int64_t)
(32,data = NULL)
(33,default:)
(34,7)
(35,100*sizeof(int64_t)
(36,break;)
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^