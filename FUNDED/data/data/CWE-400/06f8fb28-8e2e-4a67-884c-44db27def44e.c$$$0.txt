-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalReturnsTrue())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
37,41
38,39
39,40
39,41
40,41
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
59,62
62,63
64,65
64,66
65,66
65,67
66,67
66,68
67,68
70,71
70,72
71,72
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
79,80
79,81
79,82
80,81
82,83
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
122,123
124,125
124,126
124,127
124,128
124,129
125,126
127,128
129,130
130,131
130,132
133,134
133,135
134,135
136,137
138,139
140,141
141,142
141,143
142,143
145,146
145,147
146,147
148,149
149,150
150,151
150,152
151,152
153,154
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,41,43,45,49,51,52,55,58,60,61,63,68,69,72,73,78,81,83,84,88,90,95,96,101,102,105,109,110,112,115,121,123,126,128,131,132,135,137,139,143,144,147,152,154
-----computeFrom-----
12,13
12,14
65,66
65,67
66,67
66,68
70,71
70,72
76,77
76,78
86,87
86,88
99,100
99,101
103,104
103,105
118,119
118,120
-----guardedBy-----
72,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(62,7,0)
(6,72,0)
(73,36,0)
(8,71,0)
(60,79,0)
(50,32,0)
(27,32,0)
(79,16,0)
(59,72,0)
(67,78,0)
(55,54,0)
(52,68,0)
(21,16,0)
(46,17,0)
(50,64,0)
(17,40,0)
(17,7,0)
(48,7,0)
(64,50,0)
(57,48,0)
(81,39,0)
(80,18,0)
(24,1,0)
(16,33,0)
(20,26,0)
(38,63,0)
(74,33,0)
(42,16,0)
(2,43,0)
(12,3,0)
(40,17,0)
(61,38,0)
(58,7,0)
(37,48,0)
(39,79,0)
(25,21,0)
(43,3,0)
(71,3,0)
(17,4,0)
(7,62,0)
(0,3,0)
(76,17,0)
(5,17,0)
(35,43,0)
(19,33,0)
(14,41,0)
(23,73,0)
(50,16,0)
(13,0,0)
(53,76,0)
(73,16,0)
(56,50,0)
(40,26,0)
(36,73,0)
(49,62,0)
(32,50,0)
(38,7,0)
(29,54,0)
(26,40,0)
(10,0,0)
(16,21,0)
(45,4,0)
(7,54,0)
(39,47,0)
(79,39,0)
(17,76,0)
(34,62,0)
(30,33,0)
(62,43,0)
(65,80,0)
(36,1,0)
(32,72,0)
(69,71,0)
(44,39,0)
(15,3,0)
(1,36,0)
(78,72,0)
(77,73,0)
(11,1,0)
(3,22,0)
(1,16,0)
(70,54,0)
(51,3,0)
(28,3,0)
(4,17,0)
(80,65,1)
(65,48,1)
(27,72,1)
(37,57,1)
(38,61,1)
(35,0,1)
(59,80,1)
(72,6,1)
(66,39,1)
(26,20,1)
(39,79,1)
(24,11,1)
(8,69,1)
(62,34,1)
(56,27,1)
(7,62,1)
(40,17,1)
(76,53,1)
(21,25,1)
(50,56,1)
(40,26,1)
(67,68,1)
(0,13,1)
(11,43,1)
(71,8,1)
(31,36,1)
(1,16,1)
(17,4,1)
(60,44,1)
(50,64,1)
(38,7,1)
(17,46,1)
(31,38,1)
(49,58,1)
(25,42,1)
(4,45,1)
(73,77,1)
(32,50,1)
(13,10,1)
(62,43,1)
(48,37,1)
(81,9,1)
(32,72,1)
(23,1,1)
(73,16,1)
(34,49,1)
(27,78,1)
(20,32,1)
(53,4,1)
(50,16,1)
(67,40,1)
(31,66,1)
(10,71,1)
(61,75,1)
(79,60,1)
(75,32,1)
(59,48,1)
(2,35,1)
(6,59,1)
(1,24,1)
(43,2,1)
(5,26,1)
(69,66,1)
(9,16,1)
(16,21,1)
(78,67,1)
(46,76,1)
(48,7,1)
(78,72,1)
(31,75,1)
(36,1,1)
(45,5,1)
(79,16,1)
(36,73,1)
(57,7,1)
(17,76,1)
(52,40,1)
(17,7,1)
(58,36,1)
(66,9,1)
(68,52,1)
(77,23,1)
(44,81,1)
(39,79,2)
(27,36,2)
(32,72,2)
(57,36,2)
(75,36,2)
(1,66,2)
(59,36,2)
(5,32,2)
(72,36,2)
(13,66,2)
(80,48,2)
(17,76,2)
(16,21,2)
(65,48,2)
(49,36,2)
(8,66,2)
(79,16,2)
(68,40,2)
(7,36,2)
(23,1,2)
(60,9,2)
(17,32,2)
(45,32,2)
(46,32,2)
(40,26,2)
(36,1,2)
(81,9,2)
(50,36,2)
(50,32,2)
(56,36,2)
(10,66,2)
(32,50,2)
(36,66,2)
(34,36,2)
(62,36,2)
(53,32,2)
(73,16,2)
(69,66,2)
(7,62,2)
(79,9,2)
(61,75,2)
(43,66,2)
(71,66,2)
(50,16,2)
(76,32,2)
(73,1,2)
(17,7,2)
(52,40,2)
(56,32,2)
(78,32,2)
(26,32,2)
(24,66,2)
(2,66,2)
(40,32,2)
(17,4,2)
(0,66,2)
(58,36,2)
(27,32,2)
(37,36,2)
(20,32,2)
(38,75,2)
(39,9,2)
(62,43,2)
(50,64,2)
(40,17,2)
(67,32,2)
(32,36,2)
(48,36,2)
(44,9,2)
(48,7,2)
(11,66,2)
(78,72,2)
(77,1,2)
(6,36,2)
(4,32,2)
(35,66,2)
(38,7,2)
(32,32,2)
(36,73,2)
(1,16,2)
-----------------------------------
(0,*pFile = NULL)
(1,count > 0)
(2,"output_good.txt")
(3,)
(4,sizeof(char)
(5,SENTENCE)
(6,0)
(7,pFile = fopen(filename, "w+")
(8,0)
(9,globalReturnsTrue()
(10,pFile)
(11,count)
(12,if (count > 0 && count <= 20)
(13,NULL)
(14,if (strlen(SENTENCE)
(15,pFile)
(16,count = -1)
(17,fwrite(SENTENCE, sizeof(char)
(18,)
(19,if(globalReturnsTrue()
(20,SENTENCE)
(21,-1)
(22,)
(23,count)
(24,0)
(25,1)
(26,strlen(SENTENCE)
(27,i)
(28,filename)
(29,if (pFile == NULL)
(30,count)
(31,RET)
(32,i < (size_t)
(33,)
(34,"w+")
(35,filename)
(36,count > 0 && count <= 20)
(37,NULL)
(38,fclose(pFile)
(39,fscanf(stdin, "%d", &count)
(40,strlen(SENTENCE)
(41,)
(42,count)
(43,*filename = "output_good.txt")
(44,"%d")
(45,char)
(46,pFile)
(47,)
(48,pFile == NULL)
(49,filename)
(50,(size_t)
(51,i)
(52,1)
(53,SENTENCE)
(54,)
(55,for (i = 0; i < (size_t)
(56,count)
(57,pFile)
(58,pFile)
(59,i)
(60,count)
(61,pFile)
(62,fopen(filename, "w+")
(63,)
(64,size_t)
(65,1)
(66,globalReturnsTrue()
(67,i)
(68,exit(1)
(69,i)
(70,if (pFile)
(71,i = 0)
(72,i = 0)
(73,count <= 20)
(74,if(globalReturnsTrue()
(75,pFile)
(76,strlen(SENTENCE)
(77,20)
(78,i++)
(79,&count)
(80,exit(1)
(81,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^