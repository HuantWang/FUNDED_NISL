-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_for_loop_52c_goodG2BSink(int count)
{
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
20,21
21,22
21,23
22,23
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
33,34
35,36
36,37
38,39
39,40
40,41
40,42
41,42
-----nextToken-----
2,4,6,8,14,16,18,23,24,27,31,32,34,37,42,43
-----computeFrom-----
21,22
21,23
25,26
25,27
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_for_loop_52c_goodG2BSink(int count){    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_for_loop_52c_goodG2BSink(int count)
CWE400_Resource_Exhaustion__connect_socket_for_loop_52c_goodG2BSink
int count
int
count
count
{    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(1,8,0)
(12,17,0)
(19,8,0)
(5,20,0)
(6,20,0)
(18,5,0)
(20,9,0)
(11,14,0)
(21,14,0)
(8,10,0)
(13,21,0)
(4,20,0)
(2,16,0)
(0,12,0)
(16,8,0)
(15,16,0)
(20,5,0)
(3,14,0)
(20,4,0)
(5,14,0)
(11,16,1)
(5,20,1)
(7,5,1)
(20,6,1)
(6,18,1)
(18,21,1)
(14,3,1)
(0,5,1)
(21,14,1)
(3,11,1)
(5,14,1)
(12,0,1)
(16,15,1)
(18,14,1)
(21,13,1)
(20,9,1)
(20,4,1)
(13,12,1)
(15,2,1)
(20,4,2)
(20,5,2)
(13,5,2)
(18,5,2)
(0,5,2)
(6,5,2)
(5,5,2)
(21,14,2)
(21,5,2)
(5,14,2)
(12,5,2)
(5,20,2)
(20,9,2)
-----------------------------------
(0,"Hello")
(1,i)
(2,i)
(3,0)
(4,size_t)
(5,i < (size_t)
(6,count)
(7,RET)
(8,)
(9,int count)
(10,)
(11,i)
(12,printLine("Hello")
(13,i)
(14,i = 0)
(15,0)
(16,i = 0)
(17,)
(18,i)
(19,for (i = 0; i < (size_t)
(20,(size_t)
(21,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^