-----label-----
1
-----code-----
static inline int
riemann_send_msg(struct riemann_host *host, const Msg *msg)
{
	int status = 0;
	u_char *buffer = NULL;
	size_t  buffer_len;

	status = riemann_connect (host);

	if (status != 0)
		return status;

	buffer_len = msg__get_packed_size(msg);

	if (host->use_tcp)
		buffer_len += 4;

	buffer = malloc (buffer_len);

	if (buffer == NULL) {
		ERROR ("write_riemann plugin: malloc failed.");
		return ENOMEM;
	}

	memset (buffer, 0, buffer_len);

	if (host->use_tcp)
	{
		uint32_t length = htonl ((uint32_t) (buffer_len - 4));
		memcpy (buffer, &length, 4);
		msg__pack(msg, buffer + 4);
	}
	else
	{
		msg__pack(msg, buffer);
	}

	status = (int) swrite (host->s, buffer, buffer_len);

	if (status != 0)
	{
		char errbuf[1024];

		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",
				(host->node != NULL) ? host->node : RIEMANN_HOST,
				(host->service != NULL) ? host->service : RIEMANN_PORT,
				sstrerror (errno, errbuf, sizeof (errbuf)));

		sfree (buffer);
		return -1;
	}

	sfree (buffer);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
110,111
110,112
110,113
111,112
111,113
112,113
115,116
115,117
115,118
116,117
117,118
117,119
118,119
120,121
120,122
122,123
123,124
123,125
124,125
126,127
126,128
127,128
128,129
130,131
130,132
131,132
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
141,142
144,145
145,146
145,147
145,148
146,147
148,149
150,151
150,152
151,152
154,155
155,156
156,157
156,158
156,159
157,158
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
168,169
168,170
171,172
171,173
171,174
171,175
172,173
174,175
174,176
175,176
178,179
180,181
182,183
182,184
183,184
183,185
184,185
187,188
187,189
187,190
187,191
188,189
189,190
189,191
191,192
191,193
193,194
195,196
196,197
196,198
196,199
196,200
196,201
197,198
200,201
200,202
200,203
201,202
202,203
202,204
203,204
203,205
204,205
207,208
209,210
209,211
210,211
213,214
215,216
215,217
215,218
216,217
217,218
217,219
218,219
218,220
219,220
222,223
224,225
224,226
225,226
228,229
230,231
230,232
230,233
230,234
231,232
233,234
235,236
237,238
238,239
239,240
241,242
242,243
242,244
243,244
245,246
247,248
248,249
250,251
251,252
251,253
252,253
254,255
256,257
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,24,28,30,31,34,38,40,44,47,49,53,54,57,61,64,66,70,71,75,76,80,83,85,89,91,96,97,100,104,106,107,109,113,114,119,121,125,129,132,133,137,139,142,143,147,149,152,153,158,160,162,166,169,170,173,176,177,179,181,185,186,190,192,194,198,199,205,206,208,211,212,214,220,221,223,226,227,229,232,234,236,240,244,246,249,253,255,257
-----computeFrom-----
42,43
42,44
51,52
51,53
59,60
59,61
73,74
73,75
78,79
78,80
87,88
87,89
130,131
130,132
150,151
150,152
164,165
164,166
183,184
183,185
202,203
202,204
217,218
217,219
-----guardedBy-----
53,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static inline intriemann_send_msg(struct riemann_host *host, const Msg *msg){	int status = 0;	u_char *buffer = NULL;	size_t  buffer_len;	status = riemann_connect (host);	if (status != 0)		return status;	buffer_len = msg__get_packed_size(msg);	if (host->use_tcp)		buffer_len += 4;	buffer = malloc (buffer_len);	if (buffer == NULL) {		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}	memset (buffer, 0, buffer_len);	if (host->use_tcp)	{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}	else	{		msg__pack(msg, buffer);	}	status = (int) swrite (host->s, buffer, buffer_len);	if (status != 0)	{		char errbuf[1024];		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}	sfree (buffer);	return 0;}
static inline int
riemann_send_msg(struct riemann_host *host, const Msg *msg)
riemann_send_msg
struct riemann_host *host
struct riemann_host
riemann_host
*host
*
host
const Msg *msg
const Msg
Msg
*msg
*
msg
{	int status = 0;	u_char *buffer = NULL;	size_t  buffer_len;	status = riemann_connect (host);	if (status != 0)		return status;	buffer_len = msg__get_packed_size(msg);	if (host->use_tcp)		buffer_len += 4;	buffer = malloc (buffer_len);	if (buffer == NULL) {		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}	memset (buffer, 0, buffer_len);	if (host->use_tcp)	{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}	else	{		msg__pack(msg, buffer);	}	status = (int) swrite (host->s, buffer, buffer_len);	if (status != 0)	{		char errbuf[1024];		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}	sfree (buffer);	return 0;}
int status = 0;
int status = 0;
int
status = 0
status
= 0
0
u_char *buffer = NULL;
u_char *buffer = NULL;
u_char
u_char
*buffer = NULL
*
buffer
= NULL
NULL
NULL
size_t  buffer_len;
size_t  buffer_len;
size_t
size_t
buffer_len
buffer_len
status = riemann_connect (host);
status = riemann_connect (host)
status
status
riemann_connect (host)
riemann_connect
riemann_connect
host
host
if (status != 0)		return status;
status != 0
status
status
0
return status;
status
status
buffer_len = msg__get_packed_size(msg);
buffer_len = msg__get_packed_size(msg)
buffer_len
buffer_len
msg__get_packed_size(msg)
msg__get_packed_size
msg__get_packed_size
msg
msg
if (host->use_tcp)		buffer_len += 4;
host->use_tcp
host
host
use_tcp
buffer_len += 4;
buffer_len += 4
buffer_len
buffer_len
4
buffer = malloc (buffer_len);
buffer = malloc (buffer_len)
buffer
buffer
malloc (buffer_len)
malloc
malloc
buffer_len
buffer_len
if (buffer == NULL) {		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}
buffer == NULL
buffer
buffer
NULL
NULL
{		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}
ERROR ("write_riemann plugin: malloc failed.");
ERROR ("write_riemann plugin: malloc failed.")
ERROR
ERROR
"write_riemann plugin: malloc failed."
return ENOMEM;
ENOMEM
ENOMEM
memset (buffer, 0, buffer_len);
memset (buffer, 0, buffer_len)
memset
memset
buffer
buffer
0
buffer_len
buffer_len
if (host->use_tcp)	{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}	else	{		msg__pack(msg, buffer);	}
host->use_tcp
host
host
use_tcp
{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}
uint32_t length = htonl ((uint32_t) (buffer_len - 4));
uint32_t length = htonl ((uint32_t) (buffer_len - 4));
uint32_t
uint32_t
length = htonl ((uint32_t) (buffer_len - 4))
length
= htonl ((uint32_t) (buffer_len - 4))
htonl ((uint32_t) (buffer_len - 4))
htonl
htonl
(uint32_t) (buffer_len - 4)
(uint32_t)
uint32_t
uint32_t
buffer_len - 4
buffer_len
buffer_len
4
memcpy (buffer, &length, 4);
memcpy (buffer, &length, 4)
memcpy
memcpy
buffer
buffer
&length
length
length
4
msg__pack(msg, buffer + 4);
msg__pack(msg, buffer + 4)
msg__pack
msg__pack
msg
msg
buffer + 4
buffer
buffer
4
{		msg__pack(msg, buffer);	}
msg__pack(msg, buffer);
msg__pack(msg, buffer)
msg__pack
msg__pack
msg
msg
buffer
buffer
status = (int) swrite (host->s, buffer, buffer_len);
status = (int) swrite (host->s, buffer, buffer_len)
status
status
(int) swrite (host->s, buffer, buffer_len)
int
int

swrite (host->s, buffer, buffer_len)
swrite
swrite
host->s
host
host
s
buffer
buffer
buffer_len
buffer_len
if (status != 0)	{		char errbuf[1024];		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}
status != 0
status
status
0
{		char errbuf[1024];		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}
char errbuf[1024];
char errbuf[1024];
char
errbuf[1024]
errbuf
[1024]
1024
ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));
ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)))
ERROR
ERROR
"write_riemann plugin: Sending to Riemann at %s:%s failed: %s"
(host->node != NULL) ? host->node : RIEMANN_HOST
(host->node != NULL)
host->node != NULL
host->node
host
host
node
NULL
NULL
host->node
host
host
node
RIEMANN_HOST
RIEMANN_HOST
(host->service != NULL) ? host->service : RIEMANN_PORT
(host->service != NULL)
host->service != NULL
host->service
host
host
service
NULL
NULL
host->service
host
host
service
RIEMANN_PORT
RIEMANN_PORT
sstrerror (errno, errbuf, sizeof (errbuf))
sstrerror
sstrerror
errno
errno
errbuf
errbuf
sizeof (errbuf)
(errbuf)
errbuf
errbuf
sfree (buffer);
sfree (buffer)
sfree
sfree
buffer
buffer
return -1;
-1
1
sfree (buffer);
sfree (buffer)
sfree
sfree
buffer
buffer
return 0;
0
-----joern-----
(76,130,0)
(112,21,0)
(69,102,0)
(119,97,0)
(53,52,0)
(44,58,0)
(108,7,0)
(38,25,0)
(105,86,0)
(30,7,0)
(77,69,0)
(22,86,0)
(35,42,0)
(29,7,0)
(32,114,0)
(18,19,0)
(90,108,0)
(89,76,0)
(67,130,0)
(75,2,0)
(94,91,0)
(87,42,0)
(59,42,0)
(28,69,0)
(49,130,0)
(44,11,0)
(86,92,0)
(39,130,0)
(8,122,0)
(82,7,0)
(105,76,0)
(37,78,0)
(86,22,0)
(86,60,0)
(10,22,0)
(120,126,0)
(1,125,0)
(67,42,0)
(117,18,0)
(125,1,0)
(15,29,0)
(48,126,0)
(95,125,0)
(73,60,0)
(52,102,0)
(25,126,0)
(42,67,0)
(75,119,0)
(9,78,0)
(4,127,0)
(2,126,0)
(31,37,0)
(27,7,0)
(101,31,0)
(19,7,0)
(93,58,0)
(76,105,0)
(78,118,0)
(33,39,0)
(24,100,0)
(64,18,0)
(127,100,0)
(84,61,0)
(119,40,0)
(66,110,0)
(55,82,0)
(57,7,0)
(126,7,0)
(121,7,0)
(98,108,0)
(44,82,0)
(69,28,0)
(54,130,0)
(86,105,0)
(80,19,0)
(16,2,0)
(91,130,0)
(81,13,0)
(83,49,0)
(122,7,0)
(124,119,0)
(61,7,0)
(69,40,0)
(74,7,0)
(42,37,0)
(106,75,0)
(103,67,0)
(88,19,0)
(62,127,0)
(25,92,0)
(116,54,0)
(3,39,0)
(113,92,0)
(42,126,0)
(22,1,0)
(21,97,0)
(19,54,0)
(114,96,0)
(129,105,0)
(65,48,0)
(127,130,0)
(52,46,0)
(26,28,0)
(99,31,0)
(14,27,0)
(2,40,0)
(21,112,0)
(61,126,0)
(125,130,0)
(6,87,0)
(58,92,0)
(111,118,0)
(110,78,0)
(21,31,0)
(104,93,0)
(34,1,0)
(78,7,0)
(79,122,0)
(31,78,0)
(110,37,0)
(87,27,0)
(107,108,0)
(42,78,0)
(108,126,0)
(118,78,0)
(87,6,0)
(22,91,0)
(63,29,0)
(97,21,0)
(54,19,0)
(2,75,0)
(56,76,0)
(51,7,0)
(52,126,0)
(68,125,0)
(60,0,0)
(126,110,0)
(1,22,0)
(100,127,0)
(28,126,0)
(128,67,0)
(5,49,0)
(44,80,0)
(100,105,0)
(105,100,0)
(60,86,0)
(31,21,0)
(50,7,0)
(72,0,0)
(41,60,0)
(12,28,0)
(71,80,0)
(115,37,0)
(11,96,0)
(97,119,0)
(108,37,0)
(13,27,0)
(42,87,0)
(85,52,0)
(0,60,0)
(43,13,0)
(47,40,0)
(27,87,0)
(110,126,0)
(45,7,0)
(17,91,0)
(70,86,0)
(20,48,0)
(36,2,0)
(118,102,0)
(123,37,0)
(108,78,0)
(23,11,0)
(91,22,0)
(109,7,0)
(42,78,1)
(48,20,1)
(56,89,1)
(79,8,1)
(42,35,1)
(117,64,1)
(86,22,1)
(86,60,1)
(18,117,1)
(53,85,1)
(20,65,1)
(3,33,1)
(64,19,1)
(13,81,1)
(21,112,1)
(105,76,1)
(108,107,1)
(14,52,1)
(127,130,1)
(23,114,1)
(28,126,1)
(91,94,1)
(80,19,1)
(52,53,1)
(95,68,1)
(37,115,1)
(36,75,1)
(18,19,1)
(85,39,1)
(60,0,1)
(76,130,1)
(37,78,1)
(42,126,1)
(90,98,1)
(9,18,1)
(72,73,1)
(10,1,1)
(38,86,1)
(48,126,1)
(49,130,1)
(12,26,1)
(67,130,1)
(44,80,1)
(22,91,1)
(100,127,1)
(88,29,1)
(84,13,1)
(120,49,1)
(103,14,1)
(66,120,1)
(69,102,1)
(78,118,1)
(125,130,1)
(52,126,1)
(52,102,1)
(34,125,1)
(116,88,1)
(61,126,1)
(62,4,1)
(63,15,1)
(17,1,1)
(1,34,1)
(28,12,1)
(98,48,1)
(126,110,1)
(104,25,1)
(43,27,1)
(15,122,1)
(86,105,1)
(81,43,1)
(25,38,1)
(101,99,1)
(31,101,1)
(13,27,1)
(77,2,1)
(22,1,1)
(33,108,1)
(0,72,1)
(2,36,1)
(69,28,1)
(76,56,1)
(122,79,1)
(35,59,1)
(67,128,1)
(31,37,1)
(87,6,1)
(123,49,1)
(61,84,1)
(111,9,1)
(14,69,1)
(129,100,1)
(110,78,1)
(27,87,1)
(65,126,1)
(100,24,1)
(107,90,1)
(73,41,1)
(41,105,1)
(82,55,1)
(24,127,1)
(4,22,1)
(105,129,1)
(119,97,1)
(106,16,1)
(49,5,1)
(31,78,1)
(39,130,1)
(11,23,1)
(110,66,1)
(1,125,1)
(118,111,1)
(54,116,1)
(115,123,1)
(118,102,1)
(83,78,1)
(25,126,1)
(108,126,1)
(2,75,1)
(80,71,1)
(26,77,1)
(125,95,1)
(89,100,1)
(91,130,1)
(2,126,1)
(93,104,1)
(19,54,1)
(68,70,1)
(97,21,1)
(16,119,1)
(124,39,1)
(44,82,1)
(32,48,1)
(75,119,1)
(59,67,1)
(54,130,1)
(127,62,1)
(110,37,1)
(58,93,1)
(71,18,1)
(44,58,1)
(44,11,1)
(87,42,1)
(75,106,1)
(42,67,1)
(5,83,1)
(99,124,1)
(105,100,1)
(94,17,1)
(22,10,1)
(108,37,1)
(120,37,1)
(21,31,1)
(29,63,1)
(70,13,1)
(114,32,1)
(108,78,1)
(55,61,1)
(42,37,1)
(128,103,1)
(39,3,1)
(49,18,2)
(36,39,2)
(42,48,2)
(34,13,2)
(43,48,2)
(108,126,2)
(97,39,2)
(83,18,2)
(87,48,2)
(28,126,2)
(90,48,2)
(126,110,2)
(71,18,2)
(100,127,2)
(26,39,2)
(11,48,2)
(80,18,2)
(42,78,2)
(114,48,2)
(25,13,2)
(91,1,2)
(44,80,2)
(78,118,2)
(99,39,2)
(105,76,2)
(86,13,2)
(22,1,2)
(31,78,2)
(33,48,2)
(76,130,2)
(2,126,2)
(128,48,2)
(10,1,2)
(0,13,2)
(44,11,2)
(89,100,2)
(31,39,2)
(118,18,2)
(73,13,2)
(14,48,2)
(27,87,2)
(86,105,2)
(60,0,2)
(13,48,2)
(61,126,2)
(27,48,2)
(85,39,2)
(2,39,2)
(56,100,2)
(72,13,2)
(125,130,2)
(105,13,2)
(23,48,2)
(108,48,2)
(106,39,2)
(119,39,2)
(21,39,2)
(118,102,2)
(28,39,2)
(5,18,2)
(9,18,2)
(81,48,2)
(52,39,2)
(59,48,2)
(13,27,2)
(69,28,2)
(32,48,2)
(54,130,2)
(91,130,2)
(120,18,2)
(97,21,2)
(3,48,2)
(76,100,2)
(49,130,2)
(103,48,2)
(94,1,2)
(110,37,2)
(52,126,2)
(16,39,2)
(129,100,2)
(44,82,2)
(67,130,2)
(53,39,2)
(95,13,2)
(37,49,2)
(62,13,2)
(86,60,2)
(80,19,2)
(70,13,2)
(127,130,2)
(93,13,2)
(110,78,2)
(20,18,2)
(25,126,2)
(105,100,2)
(104,13,2)
(18,19,2)
(37,78,2)
(84,13,2)
(78,18,2)
(123,49,2)
(55,13,2)
(1,125,2)
(21,112,2)
(69,39,2)
(48,126,2)
(87,6,2)
(111,18,2)
(4,13,2)
(22,91,2)
(42,67,2)
(108,78,2)
(58,13,2)
(98,48,2)
(69,102,2)
(31,37,2)
(75,39,2)
(82,13,2)
(115,49,2)
(24,13,2)
(107,48,2)
(42,37,2)
(2,75,2)
(19,54,2)
(67,48,2)
(39,130,2)
(66,18,2)
(35,48,2)
(48,18,2)
(39,48,2)
(65,18,2)
(21,31,2)
(124,39,2)
(12,39,2)
(108,37,2)
(101,39,2)
(68,13,2)
(127,13,2)
(100,13,2)
(77,39,2)
(86,22,2)
(60,13,2)
(1,13,2)
(125,13,2)
(52,102,2)
(44,58,2)
(110,18,2)
(61,13,2)
(17,1,2)
(22,13,2)
(119,97,2)
(41,13,2)
(42,126,2)
(87,42,2)
(126,18,2)
(75,119,2)
(38,13,2)
-----------------------------------
(0,sizeof (errbuf)
(1,host->node != NULL)
(2,memcpy (buffer, &length, 4)
(3,use_tcp)
(4,host)
(5,use_tcp)
(6,int)
(7,)
(8,status)
(9,buffer_len)
(10,RIEMANN_HOST)
(11,return ENOMEM;)
(12,4)
(13,status != 0)
(14,status)
(15,buffer)
(16,buffer)
(17,host)
(18,status != 0)
(19,status = riemann_connect (host)
(20,NULL)
(21,(uint32_t)
(22,(host->node != NULL)
(23,ENOMEM)
(24,NULL)
(25,sfree (buffer)
(26,buffer)
(27,status = (int)
(28,buffer + 4)
(29,*buffer = NULL)
(30,buffer_len)
(31,buffer_len - 4)
(32,"write_riemann plugin: malloc failed.")
(33,host)
(34,NULL)
(35,buffer_len)
(36,4)
(37,buffer_len += 4)
(38,buffer)
(39,host->use_tcp)
(40,)
(41,errno)
(42,swrite (host->s, buffer, buffer_len)
(43,status)
(44,RET)
(45,if (status != 0)
(46,)
(47,length)
(48,buffer == NULL)
(49,host->use_tcp)
(50,if (host->use_tcp)
(51,buffer)
(52,msg__pack(msg, buffer)
(53,buffer)
(54,riemann_connect (host)
(55,0)
(56,service)
(57,if (status != 0)
(58,return -1;)
(59,buffer)
(60,sstrerror (errno, errbuf, sizeof (errbuf)
(61,sfree (buffer)
(62,service)
(63,NULL)
(64,status)
(65,buffer)
(66,buffer_len)
(67,host->s)
(68,host)
(69,msg__pack(msg, buffer + 4)
(70,"write_riemann plugin: Sending to Riemann at %s:%s failed: %s")
(71,status)
(72,errbuf)
(73,errbuf)
(74,if (buffer == NULL)
(75,&length)
(76,host->service)
(77,msg)
(78,buffer_len = msg__get_packed_size(msg)
(79,0)
(80,return status;)
(81,0)
(82,return 0;)
(83,host)
(84,buffer)
(85,msg)
(86,ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",\n\\n\\t\\t\\t\\t(host->node != NULL)
(87,(int)
(88,status)
(89,host)
(90,0)
(91,host->node)
(92,)
(93,-1)
(94,node)
(95,node)
(96,)
(97,htonl ((uint32_t)
(98,buffer)
(99,buffer_len)
(100,host->service != NULL)
(101,4)
(102,const Msg *msg)
(103,host)
(104,1)
(105,(host->service != NULL)
(106,length)
(107,buffer_len)
(108,memset (buffer, 0, buffer_len)
(109,if (host->use_tcp)
(110,malloc (buffer_len)
(111,msg)
(112,uint32_t)
(113,errbuf)
(114,ERROR ("write_riemann plugin: malloc failed.")
(115,4)
(116,host)
(117,0)
(118,msg__get_packed_size(msg)
(119,length = htonl ((uint32_t)
(120,buffer)
(121,status)
(122,status = 0)
(123,buffer_len)
(124,length)
(125,host->node)
(126,buffer = malloc (buffer_len)
(127,host->service)
(128,s)
(129,RIEMANN_PORT)
(130,struct riemann_host *host)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^