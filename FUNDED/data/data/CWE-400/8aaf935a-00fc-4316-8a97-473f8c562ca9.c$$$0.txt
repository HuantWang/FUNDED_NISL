-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_63b_badSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_63b_badSink(size_t * dataPtr){    size_t data = *dataPtr;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_63b_badSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_63b_badSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(16,6,0)
(1,23,0)
(34,7,0)
(23,6,0)
(5,27,0)
(23,1,0)
(2,5,0)
(22,20,0)
(10,16,0)
(17,38,0)
(25,16,0)
(14,22,0)
(6,23,0)
(13,12,0)
(39,4,0)
(41,11,0)
(29,31,0)
(37,6,0)
(41,24,0)
(23,20,0)
(21,40,0)
(5,40,0)
(32,24,0)
(12,31,0)
(6,36,0)
(22,14,0)
(31,12,0)
(8,36,0)
(3,34,0)
(9,27,0)
(8,6,0)
(4,36,0)
(22,5,0)
(40,33,0)
(12,5,0)
(0,8,0)
(15,38,0)
(40,5,0)
(24,41,0)
(42,14,0)
(19,37,0)
(16,36,0)
(26,22,0)
(38,27,0)
(18,37,0)
(30,6,0)
(20,23,0)
(20,22,0)
(35,36,0)
(4,6,0)
(23,1,1)
(23,20,1)
(18,6,1)
(21,2,1)
(12,5,1)
(16,25,1)
(8,6,1)
(42,26,1)
(20,22,1)
(30,12,1)
(37,6,1)
(29,13,1)
(0,16,1)
(3,12,1)
(14,42,1)
(4,6,1)
(26,30,1)
(13,5,1)
(41,24,1)
(8,0,1)
(28,34,1)
(6,23,1)
(39,8,1)
(22,14,1)
(24,32,1)
(37,19,1)
(40,33,1)
(10,37,1)
(31,29,1)
(16,6,1)
(28,4,1)
(5,40,1)
(34,3,1)
(32,37,1)
(10,41,1)
(12,31,1)
(4,39,1)
(40,21,1)
(25,10,1)
(22,5,1)
(19,18,1)
(3,12,2)
(10,12,2)
(19,12,2)
(6,12,2)
(22,5,2)
(26,12,2)
(32,37,2)
(40,33,2)
(23,20,2)
(22,14,2)
(12,31,2)
(20,22,2)
(4,12,2)
(39,12,2)
(8,12,2)
(22,12,2)
(14,12,2)
(12,5,2)
(18,12,2)
(30,12,2)
(42,12,2)
(25,12,2)
(24,37,2)
(5,40,2)
(0,12,2)
(41,37,2)
(23,1,2)
(37,12,2)
(34,12,2)
(41,24,2)
(16,6,2)
(16,12,2)
(8,6,2)
(4,6,2)
(23,12,2)
(6,23,2)
(37,6,2)
(20,12,2)
-----------------------------------
(0,myString)
(1,wchar_t *)
(2,data)
(3,"Input is less than the length of the source string")
(4,free(myString)
(5,data = *dataPtr)
(6,myString = (wchar_t *)
(7,)
(8,printWLine(myString)
(9,data)
(10,myString)
(11,)
(12,data > wcslen(HELLO_STRING)
(13,data)
(14,sizeof(wchar_t)
(15,if (data > wcslen(HELLO_STRING)
(16,wcscpy(myString, HELLO_STRING)
(17,myString)
(18,myString)
(19,NULL)
(20,malloc(data*sizeof(wchar_t)
(21,dataPtr)
(22,data*sizeof(wchar_t)
(23,(wchar_t *)
(24,-1)
(25,HELLO_STRING)
(26,data)
(27,)
(28,RET)
(29,HELLO_STRING)
(30,myString)
(31,wcslen(HELLO_STRING)
(32,1)
(33,size_t * dataPtr)
(34,printLine("Input is less than the length of the source string")
(35,if (myString == NULL)
(36,)
(37,myString == NULL)
(38,)
(39,myString)
(40,*dataPtr)
(41,exit(-1)
(42,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^