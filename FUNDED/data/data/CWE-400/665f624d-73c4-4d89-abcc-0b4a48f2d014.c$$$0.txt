-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink(size_t dataArray[])
{
    /* copy data out of dataArray */
    size_t data = dataArray[2];
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink(size_t dataArray[]){    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(35,22,0)
(34,5,0)
(40,33,0)
(6,20,0)
(43,1,0)
(29,1,0)
(3,20,0)
(38,15,0)
(13,29,0)
(31,0,0)
(11,28,0)
(24,32,0)
(42,26,0)
(35,5,0)
(7,32,0)
(23,33,0)
(29,7,0)
(32,7,0)
(40,7,0)
(32,18,0)
(39,25,0)
(25,5,0)
(15,38,0)
(15,22,0)
(17,35,0)
(37,35,0)
(33,40,0)
(0,22,0)
(21,42,0)
(16,15,0)
(27,7,0)
(41,22,0)
(12,36,0)
(9,12,0)
(15,16,0)
(26,2,0)
(28,22,0)
(22,5,0)
(26,42,0)
(20,8,0)
(29,16,0)
(19,40,0)
(0,5,0)
(14,8,0)
(7,8,0)
(10,32,0)
(22,15,0)
(25,22,0)
(1,29,0)
(30,28,0)
(16,29,0)
(35,22,1)
(31,35,1)
(10,27,1)
(23,19,1)
(22,15,1)
(33,23,1)
(0,31,1)
(37,17,1)
(42,21,1)
(24,10,1)
(1,43,1)
(4,12,1)
(7,32,1)
(15,16,1)
(29,7,1)
(21,28,1)
(0,22,1)
(40,33,1)
(41,40,1)
(13,41,1)
(26,42,1)
(43,13,1)
(12,9,1)
(25,39,1)
(15,38,1)
(28,22,1)
(39,0,1)
(40,7,1)
(19,7,1)
(17,28,1)
(32,24,1)
(16,29,1)
(28,11,1)
(32,18,1)
(25,22,1)
(9,40,1)
(11,30,1)
(4,25,1)
(35,37,1)
(29,1,1)
(30,22,1)
(17,26,1)
(41,40,2)
(22,15,2)
(0,40,2)
(26,42,2)
(29,40,2)
(30,40,2)
(28,40,2)
(31,40,2)
(1,40,2)
(29,7,2)
(25,40,2)
(35,22,2)
(16,29,2)
(42,28,2)
(40,7,2)
(15,16,2)
(29,1,2)
(7,32,2)
(13,40,2)
(39,40,2)
(11,40,2)
(16,40,2)
(21,28,2)
(9,40,2)
(22,40,2)
(35,40,2)
(17,40,2)
(26,28,2)
(0,22,2)
(37,40,2)
(15,38,2)
(43,40,2)
(15,40,2)
(32,18,2)
(40,33,2)
(12,40,2)
(25,22,2)
(28,22,2)
-----------------------------------
(0,printLine(myString)
(1,sizeof(char)
(2,)
(3,if (data > strlen(HELLO_STRING)
(4,RET)
(5,)
(6,myString)
(7,data = dataArray[2])
(8,)
(9,"Input is less than the length of the source string")
(10,dataArray)
(11,NULL)
(12,printLine("Input is less than the length of the source string")
(13,data)
(14,data)
(15,(char *)
(16,malloc(data*sizeof(char)
(17,myString)
(18,size_t dataArray[])
(19,data)
(20,)
(21,1)
(22,myString = (char *)
(23,HELLO_STRING)
(24,2)
(25,free(myString)
(26,exit(-1)
(27,data)
(28,myString == NULL)
(29,data*sizeof(char)
(30,myString)
(31,myString)
(32,dataArray[2])
(33,strlen(HELLO_STRING)
(34,if (myString == NULL)
(35,strcpy(myString, HELLO_STRING)
(36,)
(37,HELLO_STRING)
(38,char *)
(39,myString)
(40,data > strlen(HELLO_STRING)
(41,myString)
(42,-1)
(43,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^