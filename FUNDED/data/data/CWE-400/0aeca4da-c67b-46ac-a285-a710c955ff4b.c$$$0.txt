-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
32,33
33,34
33,35
33,36
33,37
33,38
33,39
33,40
34,35
35,36
35,37
36,37
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
55,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
107,108
109,110
109,111
109,112
109,113
109,114
110,111
112,113
114,115
115,116
115,117
118,119
118,120
119,120
121,122
123,124
125,126
126,127
127,128
127,129
128,129
131,132
131,133
132,133
134,135
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,29,31,37,39,41,45,47,48,51,54,56,57,59,63,66,68,69,73,75,80,81,86,87,90,94,95,97,100,106,108,111,113,116,117,120,122,124,129,130,133,138,140
-----computeFrom-----
12,13
12,14
61,62
61,63
71,72
71,73
84,85
84,86
88,89
88,90
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_02_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
1
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(54,49,0)
(13,60,0)
(60,42,0)
(21,42,0)
(71,12,0)
(26,67,0)
(15,32,0)
(68,7,0)
(6,50,0)
(52,70,0)
(39,40,0)
(44,40,0)
(19,49,0)
(12,70,0)
(30,15,0)
(41,42,0)
(15,14,0)
(4,50,0)
(17,42,0)
(47,32,0)
(35,60,0)
(24,3,0)
(33,65,0)
(2,12,0)
(42,20,0)
(10,70,0)
(50,4,0)
(46,3,0)
(15,62,0)
(3,24,0)
(38,19,0)
(45,69,0)
(14,15,0)
(29,41,0)
(15,12,0)
(19,64,0)
(61,3,0)
(55,42,0)
(25,27,0)
(5,26,0)
(6,40,0)
(36,42,0)
(34,50,0)
(50,19,0)
(45,12,0)
(27,66,0)
(16,41,0)
(0,7,0)
(12,42,0)
(1,71,0)
(3,53,0)
(59,49,0)
(72,45,0)
(58,42,0)
(50,6,0)
(43,49,0)
(9,71,0)
(24,19,0)
(31,15,0)
(73,14,0)
(62,15,0)
(56,47,0)
(64,19,0)
(51,24,0)
(28,62,0)
(70,12,0)
(11,64,0)
(18,40,0)
(23,39,0)
(70,60,0)
(32,47,0)
(63,6,0)
(7,42,0)
(32,15,0)
(8,42,0)
(71,12,1)
(12,70,1)
(68,41,1)
(34,63,1)
(18,44,1)
(41,29,1)
(6,40,1)
(52,10,1)
(29,16,1)
(44,71,1)
(23,32,1)
(57,6,1)
(2,60,1)
(7,0,1)
(23,27,1)
(1,9,1)
(48,57,1)
(19,64,1)
(32,47,1)
(37,3,1)
(5,71,1)
(24,19,1)
(27,25,1)
(72,57,1)
(70,52,1)
(25,32,1)
(70,60,1)
(31,62,1)
(13,35,1)
(50,4,1)
(11,38,1)
(40,18,1)
(73,30,1)
(0,68,1)
(24,51,1)
(56,6,1)
(63,39,1)
(37,22,1)
(44,26,1)
(3,24,1)
(15,14,1)
(46,61,1)
(15,31,1)
(45,72,1)
(14,73,1)
(39,23,1)
(28,14,1)
(15,62,1)
(51,46,1)
(10,2,1)
(30,47,1)
(16,37,1)
(60,13,1)
(22,19,1)
(48,37,1)
(50,34,1)
(63,40,1)
(15,12,1)
(35,7,1)
(45,12,1)
(39,40,1)
(32,15,1)
(6,50,1)
(71,1,1)
(50,19,1)
(9,12,1)
(48,45,1)
(61,22,1)
(26,5,1)
(47,56,1)
(62,28,1)
(64,11,1)
(47,6,2)
(68,37,2)
(19,64,2)
(29,37,2)
(34,6,2)
(45,57,2)
(28,6,2)
(70,60,2)
(6,50,2)
(57,37,2)
(24,22,2)
(15,62,2)
(30,6,2)
(46,22,2)
(32,47,2)
(73,6,2)
(26,71,2)
(63,6,2)
(44,37,2)
(12,37,2)
(50,6,2)
(0,37,2)
(71,12,2)
(12,70,2)
(60,37,2)
(14,6,2)
(5,71,2)
(39,6,2)
(10,37,2)
(6,6,2)
(50,19,2)
(71,37,2)
(39,40,2)
(2,37,2)
(7,37,2)
(1,37,2)
(61,22,2)
(6,40,2)
(32,15,2)
(40,37,2)
(6,37,2)
(3,24,2)
(27,32,2)
(63,37,2)
(72,57,2)
(50,4,2)
(15,14,2)
(9,37,2)
(35,37,2)
(18,37,2)
(52,37,2)
(13,37,2)
(56,6,2)
(50,37,2)
(70,37,2)
(62,6,2)
(16,37,2)
(3,22,2)
(23,6,2)
(45,12,2)
(15,12,2)
(15,6,2)
(24,19,2)
(51,22,2)
(25,32,2)
(34,37,2)
(41,37,2)
(31,6,2)
(32,6,2)
-----------------------------------
(0,NULL)
(1,NULL)
(2,pFile)
(3,fscanf(stdin, "%d", &count)
(4,size_t)
(5,1)
(6,i < (size_t)
(7,*pFile = NULL)
(8,if (pFile)
(9,pFile)
(10,filename)
(11,1)
(12,pFile = fopen(filename, "w+")
(13,"output_bad.txt")
(14,sizeof(char)
(15,fwrite(SENTENCE, sizeof(char)
(16,i)
(17,for (i = 0; i < (size_t)
(18,0)
(19,count = -1)
(20,)
(21,pFile)
(22,1)
(23,i)
(24,&count)
(25,1)
(26,exit(1)
(27,exit(1)
(28,SENTENCE)
(29,0)
(30,SENTENCE)
(31,pFile)
(32,strlen(SENTENCE)
(33,if (strlen(SENTENCE)
(34,count)
(35,filename)
(36,filename)
(37,1)
(38,count)
(39,i++)
(40,i = 0)
(41,i = 0)
(42,)
(43,count)
(44,i)
(45,fclose(pFile)
(46,"%d")
(47,strlen(SENTENCE)
(48,RET)
(49,)
(50,(size_t)
(51,count)
(52,"w+")
(53,)
(54,if(1)
(55,i)
(56,SENTENCE)
(57,pFile)
(58,if (pFile == NULL)
(59,if(1)
(60,*filename = "output_bad.txt")
(61,stdin)
(62,strlen(SENTENCE)
(63,i)
(64,-1)
(65,)
(66,)
(67,)
(68,pFile)
(69,)
(70,fopen(filename, "w+")
(71,pFile == NULL)
(72,pFile)
(73,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^