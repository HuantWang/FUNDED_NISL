-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
47,50
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
62,63
63,64
63,65
66,67
67,68
67,69
67,70
68,69
70,71
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
80,81
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,51,54,56,59,61,64,65,69,71,72,76,78,82,84,89,91
-----computeFrom-----
13,14
13,15
33,34
33,35
49,50
49,51
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
void
CWE401_Memory_Leak__strdup_wchar_t_12_bad()
CWE401_Memory_Leak__strdup_wchar_t_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(6,29,0)
(14,18,0)
(2,10,0)
(12,9,0)
(12,18,0)
(20,29,0)
(7,18,0)
(7,24,0)
(25,30,0)
(8,21,0)
(32,24,0)
(10,2,0)
(1,30,0)
(27,11,0)
(15,28,0)
(19,29,0)
(26,32,0)
(24,15,0)
(10,18,0)
(21,4,0)
(11,15,0)
(22,24,0)
(17,15,0)
(0,7,0)
(23,4,0)
(2,4,0)
(30,29,0)
(7,33,0)
(5,10,0)
(18,10,0)
(31,12,0)
(4,21,0)
(18,9,0)
(11,24,0)
(24,32,0)
(4,2,0)
(10,5,0)
(16,3,1)
(7,0,1)
(4,21,1)
(12,18,1)
(2,4,1)
(18,10,1)
(26,22,1)
(22,17,1)
(14,13,1)
(21,8,1)
(7,24,1)
(17,13,1)
(31,18,1)
(32,26,1)
(23,14,1)
(12,31,1)
(11,24,1)
(3,11,1)
(0,3,1)
(13,30,1)
(10,2,1)
(10,5,1)
(11,27,1)
(3,12,1)
(1,25,1)
(24,32,1)
(8,23,1)
(30,1,1)
(27,24,1)
(16,7,1)
(7,18,1)
(11,13,2)
(26,13,2)
(24,13,2)
(2,13,2)
(18,13,2)
(8,13,2)
(10,13,2)
(7,18,2)
(4,13,2)
(2,4,2)
(27,13,2)
(14,13,2)
(12,18,2)
(23,13,2)
(12,13,2)
(11,24,2)
(31,13,2)
(10,5,2)
(7,24,2)
(32,13,2)
(22,13,2)
(18,10,2)
(7,3,2)
(4,21,2)
(24,32,2)
(17,13,2)
(0,3,2)
(21,13,2)
(10,2,2)
-----------------------------------
(0,data)
(1,NULL)
(2,ALLOCA(100*sizeof(wchar_t)
(3,globalReturnsTrueOrFalse()
(4,100*sizeof(wchar_t)
(5,wchar_t *)
(6,if(globalReturnsTrueOrFalse()
(7,free(data)
(8,wchar_t)
(9,)
(10,(wchar_t *)
(11,printWLine(data)
(12,printWLine(data)
(13,globalReturnsTrueOrFalse()
(14,data)
(15,)
(16,RET)
(17,"myString")
(18,data = (wchar_t *)
(19,if(globalReturnsTrueOrFalse()
(20,data)
(21,sizeof(wchar_t)
(22,data)
(23,100)
(24,data = wcsdup(myString)
(25,data)
(26,myString)
(27,data)
(28,)
(29,)
(30,data = NULL)
(31,data)
(32,wcsdup(myString)
(33,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^