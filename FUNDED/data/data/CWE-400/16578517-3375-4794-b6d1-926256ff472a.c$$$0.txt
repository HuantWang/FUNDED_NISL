-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(1)
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
21,22
21,23
21,24
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
45,46
45,47
47,48
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,29,33,36,38,42,44,46,51,53
-----computeFrom-----
13,14
13,15
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(1)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(1)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
1
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
1
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(3,11,0)
(14,12,0)
(7,12,0)
(9,21,0)
(19,9,0)
(5,11,0)
(21,4,0)
(16,12,0)
(10,21,0)
(15,21,0)
(20,4,0)
(8,10,0)
(13,0,0)
(9,11,0)
(21,0,0)
(0,2,0)
(9,6,0)
(4,21,0)
(10,0,0)
(11,12,0)
(19,18,1)
(21,4,1)
(9,19,1)
(10,21,1)
(10,8,1)
(4,20,1)
(18,1,1)
(17,18,1)
(9,11,1)
(17,9,1)
(3,5,1)
(18,10,1)
(1,11,1)
(20,15,1)
(15,13,1)
(8,21,1)
(13,1,1)
(11,3,1)
(9,21,1)
(13,1,2)
(20,1,2)
(8,1,2)
(9,18,2)
(10,21,2)
(10,1,2)
(21,4,2)
(9,21,2)
(9,11,2)
(4,1,2)
(21,1,2)
(15,1,2)
(19,18,2)
-----------------------------------
(0,)
(1,1)
(2,)
(3,NULL)
(4,wcsdup(myString)
(5,data)
(6,)
(7,if(1)
(8,data)
(9,free(data)
(10,printWLine(data)
(11,data = NULL)
(12,)
(13,"myString")
(14,data)
(15,data)
(16,if(1)
(17,RET)
(18,1)
(19,data)
(20,myString)
(21,data = wcsdup(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^