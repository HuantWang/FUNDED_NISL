-----label-----
0
-----code-----
extern mca_btl_base_descriptor_t* mca_btl_sm_alloc(
    struct mca_btl_base_module_t* btl,
    size_t size)
{
    mca_btl_sm_frag_t* frag;
    int rc;
    if(size <= mca_btl_sm_component.eager_limit) {
        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);
    } else if (size <= mca_btl_sm_component.max_frag_size) {
        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);
    } else {
        return NULL;
    }
    frag->segment.seg_len = size;
    return (mca_btl_base_descriptor_t*)frag;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
18,21
18,22
18,23
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
31,33
31,34
32,33
32,34
33,34
35,36
35,37
36,37
39,40
40,41
41,42
41,43
41,44
42,43
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
52,53
52,54
53,54
56,57
57,58
58,59
58,60
58,61
59,60
61,62
63,64
65,66
66,67
67,68
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
77,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
86,87
-----nextToken-----
3,5,6,9,11,12,15,17,22,24,25,28,30,34,37,38,43,45,47,51,54,55,60,62,64,68,74,75,76,78,83,85,87
-----computeFrom-----
32,33
32,34
49,50
49,51
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
34,51
37,54
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
extern mca_btl_base_descriptor_t* mca_btl_sm_alloc(    struct mca_btl_base_module_t* btl,    size_t size){    mca_btl_sm_frag_t* frag;    int rc;    if(size <= mca_btl_sm_component.eager_limit) {        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    } else if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }    frag->segment.seg_len = size;    return (mca_btl_base_descriptor_t*)frag;}
extern mca_btl_base_descriptor_t
mca_btl_base_descriptor_t
* mca_btl_sm_alloc(    struct mca_btl_base_module_t* btl,    size_t size)
*
mca_btl_sm_alloc
struct mca_btl_base_module_t* btl
struct mca_btl_base_module_t
mca_btl_base_module_t
* btl
*
btl
size_t size
size_t
size_t
size
size
{    mca_btl_sm_frag_t* frag;    int rc;    if(size <= mca_btl_sm_component.eager_limit) {        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    } else if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }    frag->segment.seg_len = size;    return (mca_btl_base_descriptor_t*)frag;}
mca_btl_sm_frag_t* frag;
mca_btl_sm_frag_t* frag;
mca_btl_sm_frag_t
mca_btl_sm_frag_t
* frag
*
frag
int rc;
int rc;
int
rc
rc
if(size <= mca_btl_sm_component.eager_limit) {        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    } else if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }
size <= mca_btl_sm_component.eager_limit
size
size
mca_btl_sm_component.eager_limit
mca_btl_sm_component
mca_btl_sm_component
eager_limit
{        MCA_BTL_SM_FRAG_ALLOC1(frag,rc);    }
MCA_BTL_SM_FRAG_ALLOC1(frag,rc);
MCA_BTL_SM_FRAG_ALLOC1(frag,rc)
MCA_BTL_SM_FRAG_ALLOC1
MCA_BTL_SM_FRAG_ALLOC1
frag
frag
rc
rc
if (size <= mca_btl_sm_component.max_frag_size) {        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    } else {        return NULL;    }
size <= mca_btl_sm_component.max_frag_size
size
size
mca_btl_sm_component.max_frag_size
mca_btl_sm_component
mca_btl_sm_component
max_frag_size
{        MCA_BTL_SM_FRAG_ALLOC2(frag,rc);    }
MCA_BTL_SM_FRAG_ALLOC2(frag,rc);
MCA_BTL_SM_FRAG_ALLOC2(frag,rc)
MCA_BTL_SM_FRAG_ALLOC2
MCA_BTL_SM_FRAG_ALLOC2
frag
frag
rc
rc
{        return NULL;    }
return NULL;
NULL
NULL
frag->segment.seg_len = size;
frag->segment.seg_len = size
frag->segment.seg_len
frag->segment
frag
frag
segment
seg_len
size
size
return (mca_btl_base_descriptor_t*)frag;
(mca_btl_base_descriptor_t*)frag
mca_btl_base_descriptor_t*
mca_btl_base_descriptor_t
mca_btl_base_descriptor_t
*
*
frag
frag
-----joern-----
(36,10,0)
(10,13,0)
(17,24,0)
(17,7,0)
(2,25,0)
(21,25,0)
(32,28,0)
(24,17,0)
(15,4,0)
(31,30,0)
(26,6,0)
(12,17,0)
(34,28,0)
(0,30,0)
(8,0,0)
(4,3,0)
(30,20,0)
(28,29,0)
(5,10,0)
(15,13,0)
(13,20,0)
(29,7,0)
(25,9,0)
(30,7,0)
(13,0,0)
(19,24,0)
(18,20,0)
(33,26,0)
(37,20,0)
(0,8,0)
(22,4,0)
(27,20,0)
(1,8,0)
(10,36,0)
(23,8,0)
(14,0,0)
(29,28,0)
(11,29,0)
(16,26,0)
(35,24,0)
(26,33,1)
(4,22,1)
(12,29,1)
(32,11,1)
(33,16,1)
(35,19,1)
(14,8,1)
(5,30,1)
(15,13,1)
(29,28,1)
(25,21,1)
(31,0,1)
(29,7,1)
(23,1,1)
(30,7,1)
(21,2,1)
(22,17,1)
(0,14,1)
(15,4,1)
(28,34,1)
(10,5,1)
(13,0,1)
(17,7,1)
(0,8,1)
(24,35,1)
(30,31,1)
(16,29,1)
(34,32,1)
(17,24,1)
(8,23,1)
(19,12,1)
(2,17,1)
(1,25,1)
(10,36,1)
(13,10,1)
(1,26,1)
(8,29,2)
(17,24,2)
(14,17,2)
(29,28,2)
(35,29,2)
(4,17,2)
(1,29,2)
(21,17,2)
(5,17,2)
(13,0,2)
(0,29,2)
(13,29,2)
(10,17,2)
(30,17,2)
(26,29,2)
(30,7,2)
(0,8,2)
(24,29,2)
(17,7,2)
(31,17,2)
(10,36,2)
(15,4,2)
(2,17,2)
(22,17,2)
(15,13,2)
(30,29,2)
(10,29,2)
(17,29,2)
(31,29,2)
(23,17,2)
(23,29,2)
(16,29,2)
(5,29,2)
(25,17,2)
(13,17,2)
(12,29,2)
(33,29,2)
(1,17,2)
(19,29,2)
(8,17,2)
(29,7,2)
(0,17,2)
(14,29,2)
-----------------------------------
(0,frag->segment.seg_len)
(1,frag)
(2,frag)
(3,)
(4,return NULL;)
(5,frag)
(6,)
(7,size_t size)
(8,frag->segment)
(9,)
(10,(mca_btl_base_descriptor_t*)
(11,size)
(12,size)
(13,return (mca_btl_base_descriptor_t*)
(14,seg_len)
(15,RET)
(16,frag)
(17,size <= mca_btl_sm_component.max_frag_size)
(18,if(size <= mca_btl_sm_component.eager_limit)
(19,mca_btl_sm_component)
(20,)
(21,rc)
(22,NULL)
(23,segment)
(24,mca_btl_sm_component.max_frag_size)
(25,MCA_BTL_SM_FRAG_ALLOC2(frag,rc)
(26,MCA_BTL_SM_FRAG_ALLOC1(frag,rc)
(27,rc)
(28,mca_btl_sm_component.eager_limit)
(29,size <= mca_btl_sm_component.eager_limit)
(30,frag->segment.seg_len = size)
(31,size)
(32,mca_btl_sm_component)
(33,rc)
(34,eager_limit)
(35,max_frag_size)
(36,mca_btl_base_descriptor_t*)
(37,frag)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^