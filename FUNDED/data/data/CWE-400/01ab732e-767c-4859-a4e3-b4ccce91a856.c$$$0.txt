-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalReturnsTrue())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,15,16,20,25,26,31,32,36,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
13,14
13,15
29,30
29,31
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(51,35,0)
(29,15,0)
(26,9,0)
(52,9,0)
(8,11,0)
(22,46,0)
(35,51,0)
(36,51,0)
(23,22,0)
(20,8,0)
(45,31,0)
(12,40,0)
(41,25,0)
(15,36,0)
(35,9,0)
(10,36,0)
(45,36,0)
(37,18,0)
(21,13,0)
(32,31,0)
(27,12,0)
(15,31,0)
(17,11,0)
(44,45,0)
(51,36,0)
(13,21,0)
(14,13,0)
(18,49,0)
(38,21,0)
(13,8,0)
(47,51,0)
(19,36,0)
(34,0,0)
(43,11,0)
(9,35,0)
(28,19,0)
(9,52,0)
(19,31,0)
(6,45,0)
(13,12,0)
(7,12,0)
(4,52,0)
(16,25,0)
(9,12,0)
(9,8,0)
(30,24,0)
(48,34,0)
(49,33,0)
(5,8,0)
(36,31,0)
(25,36,0)
(2,11,0)
(49,18,0)
(24,39,0)
(51,47,0)
(50,24,0)
(18,37,1)
(1,12,1)
(9,52,1)
(1,22,1)
(36,51,1)
(42,15,1)
(20,5,1)
(10,13,1)
(13,21,1)
(15,36,1)
(14,1,1)
(49,18,1)
(4,26,1)
(48,13,1)
(51,35,1)
(34,48,1)
(41,16,1)
(13,12,1)
(9,12,1)
(9,8,1)
(7,27,1)
(21,38,1)
(19,36,1)
(27,3,1)
(12,7,1)
(51,47,1)
(25,41,1)
(6,25,1)
(38,14,1)
(45,44,1)
(25,36,1)
(45,36,1)
(16,36,1)
(22,23,1)
(52,4,1)
(19,28,1)
(15,29,1)
(29,19,1)
(42,34,1)
(37,25,1)
(3,8,1)
(28,45,1)
(35,9,1)
(8,20,1)
(26,10,1)
(42,1,1)
(13,8,1)
(23,3,1)
(6,49,1)
(44,6,1)
(16,13,2)
(38,1,2)
(26,13,2)
(13,8,2)
(35,13,2)
(19,13,2)
(13,1,2)
(6,13,2)
(25,13,2)
(23,3,2)
(51,35,2)
(9,13,2)
(18,25,2)
(13,12,2)
(41,13,2)
(10,13,2)
(52,13,2)
(37,25,2)
(49,18,2)
(27,3,2)
(15,13,2)
(14,1,2)
(48,13,2)
(12,3,2)
(4,13,2)
(21,1,2)
(9,12,2)
(44,13,2)
(15,36,2)
(51,13,2)
(36,51,2)
(35,9,2)
(45,36,2)
(28,13,2)
(51,47,2)
(29,13,2)
(36,13,2)
(34,13,2)
(7,3,2)
(45,13,2)
(49,25,2)
(9,8,2)
(22,3,2)
(9,52,2)
(25,36,2)
(19,36,2)
(13,21,2)
-----------------------------------
(0,)
(1,globalReturnsTrue()
(2,data)
(3,globalReturnsFalse()
(4,char)
(5,data)
(6,myString)
(7,20)
(8,data = 0)
(9,data*sizeof(char)
(10,myString)
(11,)
(12,data = 20)
(13,data > strlen(HELLO_STRING)
(14,data)
(15,free(myString)
(16,myString)
(17,if(globalReturnsFalse()
(18,-1)
(19,printLine(myString)
(20,0)
(21,strlen(HELLO_STRING)
(22,printLine("Benign, fixed string")
(23,"Benign, fixed string")
(24,)
(25,myString == NULL)
(26,data)
(27,data)
(28,myString)
(29,myString)
(30,if (data > strlen(HELLO_STRING)
(31,)
(32,if (myString == NULL)
(33,)
(34,printLine("Input is less than the length of the source string")
(35,malloc(data*sizeof(char)
(36,myString = (char *)
(37,1)
(38,HELLO_STRING)
(39,)
(40,)
(41,NULL)
(42,RET)
(43,if(globalReturnsTrue()
(44,HELLO_STRING)
(45,strcpy(myString, HELLO_STRING)
(46,)
(47,char *)
(48,"Input is less than the length of the source string")
(49,exit(-1)
(50,myString)
(51,(char *)
(52,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^