-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_67b_badSink(CWE400_Resource_Exhaustion__fgets_fwrite_67_structType myStruct)
{
    int count = myStruct.structFirst;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
97,102
98,99
100,101
102,103
103,104
103,105
106,107
106,108
107,108
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
119,121
120,121
122,123
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,7,9,13,15,19,20,25,27,29,33,35,36,39,42,44,45,47,51,54,56,57,61,63,68,69,74,75,78,82,83,85,88,94,96,99,101,104,105,108,110,112,117,118,121,126,128
-----computeFrom-----
49,50
49,51
59,60
59,61
72,73
72,74
76,77
76,78
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_67b_badSink(CWE400_Resource_Exhaustion__fgets_fwrite_67_structType myStruct){    int count = myStruct.structFirst;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_67b_badSink(CWE400_Resource_Exhaustion__fgets_fwrite_67_structType myStruct)
CWE400_Resource_Exhaustion__fgets_fwrite_67b_badSink
CWE400_Resource_Exhaustion__fgets_fwrite_67_structType myStruct
CWE400_Resource_Exhaustion__fgets_fwrite_67_structType
CWE400_Resource_Exhaustion__fgets_fwrite_67_structType
myStruct
myStruct
{    int count = myStruct.structFirst;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = myStruct.structFirst;
int count = myStruct.structFirst;
int
count = myStruct.structFirst
count
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(64,32,0)
(51,32,0)
(19,32,0)
(59,11,0)
(21,7,0)
(1,10,0)
(47,28,0)
(20,25,0)
(40,13,0)
(16,29,0)
(14,32,0)
(3,40,0)
(15,32,0)
(24,63,0)
(39,25,0)
(37,33,0)
(13,33,0)
(25,39,0)
(20,38,0)
(41,13,0)
(17,14,0)
(57,29,0)
(55,63,0)
(8,48,0)
(6,32,0)
(30,25,0)
(0,27,0)
(18,3,0)
(55,29,0)
(22,3,0)
(4,10,0)
(52,7,0)
(38,20,0)
(44,26,0)
(47,40,0)
(12,50,0)
(13,40,0)
(45,60,0)
(7,32,0)
(25,40,0)
(42,55,0)
(11,35,0)
(36,62,0)
(27,10,0)
(36,27,0)
(29,56,0)
(25,26,0)
(40,32,0)
(26,25,0)
(58,14,0)
(25,20,0)
(33,32,0)
(2,12,0)
(46,38,0)
(53,39,0)
(43,47,0)
(27,36,0)
(5,32,0)
(48,10,0)
(29,55,0)
(49,25,0)
(32,63,0)
(36,55,0)
(34,13,0)
(9,33,0)
(23,36,0)
(31,40,0)
(62,36,0)
(43,54,1)
(23,0,1)
(40,13,1)
(1,4,1)
(12,2,1)
(27,36,1)
(57,16,1)
(8,12,1)
(8,20,1)
(36,23,1)
(21,55,1)
(48,8,1)
(16,42,1)
(61,47,1)
(58,7,1)
(2,20,1)
(29,56,1)
(3,18,1)
(4,11,1)
(17,58,1)
(22,40,1)
(44,39,1)
(13,41,1)
(18,22,1)
(25,26,1)
(25,39,1)
(46,27,1)
(34,31,1)
(11,59,1)
(48,10,1)
(9,14,1)
(4,3,1)
(47,43,1)
(13,33,1)
(20,38,1)
(37,9,1)
(39,53,1)
(3,40,1)
(33,37,1)
(59,3,1)
(38,46,1)
(49,38,1)
(10,1,1)
(25,40,1)
(54,27,1)
(53,49,1)
(30,26,1)
(0,48,1)
(36,55,1)
(29,57,1)
(47,40,1)
(61,54,1)
(55,29,1)
(20,25,1)
(14,17,1)
(52,21,1)
(31,33,1)
(7,52,1)
(26,44,1)
(0,10,1)
(25,30,1)
(27,10,1)
(36,62,1)
(41,34,1)
(46,27,2)
(49,27,2)
(27,36,2)
(3,40,2)
(20,38,2)
(43,54,2)
(30,27,2)
(26,27,2)
(59,3,2)
(36,55,2)
(12,20,2)
(48,27,2)
(25,27,2)
(20,25,2)
(20,27,2)
(8,27,2)
(40,13,2)
(27,10,2)
(48,10,2)
(44,27,2)
(36,62,2)
(29,56,2)
(39,27,2)
(38,27,2)
(25,40,2)
(13,33,2)
(27,27,2)
(0,27,2)
(47,40,2)
(2,20,2)
(25,26,2)
(53,27,2)
(55,29,2)
(25,39,2)
(36,27,2)
(47,54,2)
(11,3,2)
(23,27,2)
-----------------------------------
(0,i)
(1,0)
(2,1)
(3,pFile == NULL)
(4,i)
(5,if (pFile == NULL)
(6,i)
(7,i = 0)
(8,i)
(9,filename)
(10,i = 0)
(11,exit(1)
(12,exit(1)
(13,fopen(filename, "w+")
(14,*pFile = NULL)
(15,filename)
(16,myStruct)
(17,NULL)
(18,NULL)
(19,for (i = 0; i < (size_t)
(20,strlen(SENTENCE)
(21,i)
(22,pFile)
(23,count)
(24,count)
(25,fwrite(SENTENCE, sizeof(char)
(26,strlen(SENTENCE)
(27,i < (size_t)
(28,)
(29,myStruct.structFirst)
(30,pFile)
(31,pFile)
(32,)
(33,*filename = "output_bad.txt")
(34,filename)
(35,)
(36,(size_t)
(37,"output_bad.txt")
(38,strlen(SENTENCE)
(39,sizeof(char)
(40,pFile = fopen(filename, "w+")
(41,"w+")
(42,count)
(43,pFile)
(44,SENTENCE)
(45,if (strlen(SENTENCE)
(46,SENTENCE)
(47,fclose(pFile)
(48,i++)
(49,SENTENCE)
(50,)
(51,pFile)
(52,0)
(53,char)
(54,pFile)
(55,count = myStruct.structFirst)
(56,CWE400_Resource_Exhaustion__fgets_fwrite_67_structType myStruct)
(57,structFirst)
(58,pFile)
(59,1)
(60,)
(61,RET)
(62,size_t)
(63,)
(64,if (pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^