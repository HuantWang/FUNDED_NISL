-----label-----
0
-----code-----
static void goodG2B1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
24,25
25,26
25,27
26,27
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
85,86
85,87
87,88
87,89
87,90
87,91
87,92
87,93
88,89
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,28,29,30,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,78,82,83,84,86,89,90,91,92,96,97,98
-----computeFrom-----
14,15
14,16
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    struct _twoIntsStruct * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    struct _twoIntsStruct * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,22,0)
(14,44,0)
(42,24,0)
(9,42,0)
(12,50,0)
(48,44,0)
(4,47,0)
(39,45,0)
(26,45,0)
(16,0,0)
(13,29,0)
(24,21,0)
(2,45,0)
(41,52,0)
(0,39,0)
(28,12,0)
(34,12,0)
(17,1,0)
(20,29,0)
(31,48,0)
(40,27,0)
(17,21,0)
(19,49,0)
(36,45,0)
(8,27,0)
(21,17,0)
(25,50,0)
(51,27,0)
(12,28,0)
(17,50,0)
(6,2,0)
(39,0,0)
(3,29,0)
(53,45,0)
(37,20,0)
(10,47,0)
(49,45,0)
(33,12,0)
(52,47,0)
(43,27,0)
(30,40,0)
(50,45,0)
(32,24,0)
(7,45,0)
(42,9,0)
(24,42,0)
(21,24,0)
(1,17,0)
(47,52,0)
(29,20,0)
(50,17,0)
(0,28,0)
(11,44,0)
(22,45,0)
(0,16,0)
(28,0,0)
(15,44,0)
(52,22,0)
(38,48,0)
(47,50,0)
(29,50,0)
(18,27,0)
(20,49,0)
(32,25,1)
(48,38,1)
(25,35,1)
(46,7,1)
(19,20,1)
(28,12,1)
(47,4,1)
(38,31,1)
(20,29,1)
(22,5,1)
(24,42,1)
(7,2,1)
(5,52,1)
(18,46,1)
(36,39,1)
(23,18,1)
(17,1,1)
(39,0,1)
(4,10,1)
(3,13,1)
(43,40,1)
(41,47,1)
(34,22,1)
(47,50,1)
(37,29,1)
(29,3,1)
(20,37,1)
(33,34,1)
(13,50,1)
(35,48,1)
(50,17,1)
(30,46,1)
(42,32,1)
(6,35,1)
(42,9,1)
(23,43,1)
(0,28,1)
(12,33,1)
(52,41,1)
(49,19,1)
(52,47,1)
(40,30,1)
(12,50,1)
(10,49,1)
(2,6,1)
(46,36,1)
(29,50,1)
(0,16,1)
(17,21,1)
(21,24,1)
(6,35,2)
(5,35,2)
(20,35,2)
(47,35,2)
(50,35,2)
(24,42,2)
(34,35,2)
(21,24,2)
(52,47,2)
(21,35,2)
(42,35,2)
(0,16,2)
(50,17,2)
(17,21,2)
(30,46,2)
(7,35,2)
(39,35,2)
(29,50,2)
(12,35,2)
(43,46,2)
(2,35,2)
(37,35,2)
(17,35,2)
(52,35,2)
(0,28,2)
(40,46,2)
(29,35,2)
(4,35,2)
(10,35,2)
(42,9,2)
(28,35,2)
(41,35,2)
(18,46,2)
(20,29,2)
(25,35,2)
(49,35,2)
(0,35,2)
(36,35,2)
(24,35,2)
(12,50,2)
(33,35,2)
(17,1,2)
(13,35,2)
(32,35,2)
(22,35,2)
(28,12,2)
(39,0,2)
(47,50,2)
(3,35,2)
(19,35,2)
-----------------------------------
(0,(twoIntsStruct *)
(1,struct _twoIntsStruct *)
(2,printLine("Benign, fixed string")
(3,0)
(4,0)
(5,0)
(6,"Benign, fixed string")
(7,break;)
(8,default:)
(9,struct _twoIntsStruct)
(10,data)
(11,switch(7)
(12,data[0])
(13,data)
(14,switch(5)
(15,data)
(16,twoIntsStruct *)
(17,(struct _twoIntsStruct *)
(18,break;)
(19,0)
(20,data[0].intOne)
(21,ALLOCA(100*sizeof(struct _twoIntsStruct)
(22,data[0].intTwo = 0)
(23,RET)
(24,100*sizeof(struct _twoIntsStruct)
(25,data)
(26,default:)
(27,)
(28,&data[0])
(29,data[0])
(30,"Benign, fixed string")
(31,data)
(32,100)
(33,0)
(34,data)
(35,5)
(36,break;)
(37,intOne)
(38,NULL)
(39,printStructLine((twoIntsStruct *)
(40,printLine("Benign, fixed string")
(41,intTwo)
(42,sizeof(struct _twoIntsStruct)
(43,break;)
(44,)
(45,)
(46,7)
(47,data[0])
(48,data = NULL)
(49,data[0].intOne = 0)
(50,data = (struct _twoIntsStruct *)
(51,case 7:)
(52,data[0].intTwo)
(53,case 6:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^