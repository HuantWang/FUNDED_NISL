-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad()
{
    int i,j;
    twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
53,54
55,56
55,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
97,98
98,99
98,100
99,100
102,103
102,104
102,105
102,106
103,104
104,105
104,106
105,106
108,109
108,110
109,110
112,113
113,114
115,116
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,56,60,61,65,67,72,74,80,81,82,83,89,90,91,92,96,100,101,106,107,110,111,114,116
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
55,56
55,57
63,64
63,65
76,77
76,78
85,86
85,87
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad(){    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad
{    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,29,0)
(19,61,0)
(30,44,0)
(37,44,0)
(36,41,0)
(45,4,0)
(2,28,0)
(32,26,0)
(56,52,0)
(28,30,0)
(4,45,0)
(41,26,0)
(52,48,0)
(9,35,0)
(35,26,0)
(48,32,0)
(41,36,0)
(38,55,0)
(1,58,0)
(47,23,0)
(43,28,0)
(62,15,0)
(14,30,0)
(34,12,0)
(29,35,0)
(20,40,0)
(29,59,0)
(55,35,0)
(15,40,0)
(7,32,0)
(34,9,0)
(23,35,0)
(17,61,0)
(9,57,0)
(6,40,0)
(0,58,0)
(60,61,0)
(12,34,0)
(30,28,0)
(9,34,0)
(10,34,0)
(51,1,0)
(55,36,0)
(52,35,0)
(22,61,0)
(8,61,0)
(13,58,0)
(5,31,0)
(53,31,0)
(44,26,0)
(45,63,0)
(18,57,0)
(46,48,0)
(24,57,0)
(42,35,0)
(54,12,0)
(49,40,0)
(11,9,0)
(31,58,0)
(50,4,0)
(59,29,0)
(3,55,0)
(25,6,0)
(29,9,0)
(33,52,0)
(28,35,0)
(36,55,0)
(39,23,0)
(57,61,0)
(48,52,0)
(16,6,0)
(21,26,0)
(35,29,0)
(29,9,1)
(41,36,1)
(1,58,1)
(40,20,1)
(9,57,1)
(37,30,1)
(58,0,1)
(9,34,1)
(25,16,1)
(3,32,1)
(14,28,1)
(11,42,1)
(39,47,1)
(62,6,1)
(18,24,1)
(43,23,1)
(0,13,1)
(15,62,1)
(2,43,1)
(12,54,1)
(29,59,1)
(44,37,1)
(46,52,1)
(28,35,1)
(15,40,1)
(4,50,1)
(43,45,1)
(5,53,1)
(47,35,1)
(23,35,1)
(42,31,1)
(56,33,1)
(30,14,1)
(48,52,1)
(53,58,1)
(10,11,1)
(7,48,1)
(55,38,1)
(1,51,1)
(23,39,1)
(6,25,1)
(36,55,1)
(30,28,1)
(16,40,1)
(38,3,1)
(49,31,1)
(6,40,1)
(13,57,1)
(31,58,1)
(35,29,1)
(28,2,1)
(50,23,1)
(33,44,1)
(57,18,1)
(53,1,1)
(31,5,1)
(51,41,1)
(9,35,1)
(16,15,1)
(55,35,1)
(52,56,1)
(54,10,1)
(48,46,1)
(20,49,1)
(34,12,1)
(27,6,1)
(32,7,1)
(45,4,1)
(52,35,1)
(29,31,2)
(12,31,2)
(51,31,2)
(43,31,2)
(48,31,2)
(31,58,2)
(1,58,2)
(28,31,2)
(32,31,2)
(31,31,2)
(28,35,2)
(62,6,2)
(52,35,2)
(30,31,2)
(9,34,2)
(53,31,2)
(41,36,2)
(33,31,2)
(10,31,2)
(37,31,2)
(6,6,2)
(44,31,2)
(23,31,2)
(50,23,2)
(30,28,2)
(3,31,2)
(38,31,2)
(48,52,2)
(45,23,2)
(29,59,2)
(7,31,2)
(35,29,2)
(14,31,2)
(55,31,2)
(23,35,2)
(4,23,2)
(36,31,2)
(5,31,2)
(54,31,2)
(56,31,2)
(55,35,2)
(15,40,2)
(15,6,2)
(9,31,2)
(47,31,2)
(2,31,2)
(25,6,2)
(29,9,2)
(45,4,2)
(52,31,2)
(1,31,2)
(46,31,2)
(6,40,2)
(16,6,2)
(41,31,2)
(42,31,2)
(9,35,2)
(11,31,2)
(35,31,2)
(34,12,2)
(9,57,2)
(34,31,2)
(39,31,2)
(36,55,2)
-----------------------------------
(0,0)
(1,i++)
(2,0)
(3,data)
(4,-1)
(5,1)
(6,j < 1)
(7,0)
(8,j)
(9,realloc(data, 100*sizeof(twoIntsStruct)
(10,100)
(11,data)
(12,sizeof(twoIntsStruct)
(13,i)
(14,intOne)
(15,j++)
(16,j)
(17,data)
(18,NULL)
(19,for(i = 0; i < 1; i++)
(20,0)
(21,if (data == NULL)
(22,i)
(23,data == NULL)
(24,data)
(25,1)
(26,)
(27,RET)
(28,data[0])
(29,(twoIntsStruct *)
(30,data[0].intOne)
(31,i < 1)
(32,data[0].intTwo = 0)
(33,data)
(34,100*sizeof(twoIntsStruct)
(35,data = (twoIntsStruct *)
(36,&data[0])
(37,0)
(38,0)
(39,NULL)
(40,j = 0)
(41,printStructLine(&data[0])
(42,data)
(43,data)
(44,data[0].intOne = 0)
(45,exit(-1)
(46,intTwo)
(47,data)
(48,data[0].intTwo)
(49,j)
(50,1)
(51,i)
(52,data[0])
(53,i)
(54,twoIntsStruct)
(55,data[0])
(56,0)
(57,data = NULL)
(58,i = 0)
(59,twoIntsStruct *)
(60,for(j = 0; j < 1; j++)
(61,)
(62,j)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^