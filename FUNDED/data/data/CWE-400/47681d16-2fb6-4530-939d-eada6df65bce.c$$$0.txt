-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
53,54
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,29,30,32,36,39,41,45,47,51,52,54
-----computeFrom-----
13,14
13,15
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_06_bad()
CWE401_Memory_Leak__strdup_wchar_t_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,15,0)
(1,15,0)
(21,15,0)
(6,4,0)
(16,17,0)
(12,17,0)
(20,10,0)
(9,15,0)
(3,4,0)
(17,11,0)
(2,14,0)
(16,4,0)
(0,14,0)
(13,16,0)
(22,10,0)
(8,3,0)
(4,3,0)
(4,17,0)
(18,1,0)
(5,1,0)
(16,13,1)
(8,6,1)
(13,4,1)
(22,20,1)
(7,10,1)
(18,5,1)
(6,12,1)
(4,3,1)
(20,14,1)
(10,22,1)
(3,8,1)
(2,0,1)
(1,18,1)
(20,16,1)
(14,2,1)
(0,1,1)
(16,4,1)
(12,14,1)
(13,14,2)
(6,14,2)
(4,14,2)
(8,14,2)
(16,4,2)
(4,3,2)
(12,14,2)
(16,14,2)
(3,14,2)
-----------------------------------
(0,STATIC_CONST_FIVE)
(1,data = NULL)
(2,5)
(3,wcsdup(myString)
(4,data = wcsdup(myString)
(5,data)
(6,data)
(7,RET)
(8,myString)
(9,data)
(10,STATIC_CONST_FIVE==5)
(11,)
(12,"myString")
(13,data)
(14,STATIC_CONST_FIVE==5)
(15,)
(16,printWLine(data)
(17,)
(18,NULL)
(19,if(STATIC_CONST_FIVE==5)
(20,STATIC_CONST_FIVE)
(21,if(STATIC_CONST_FIVE==5)
(22,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^