-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_63b_goodB2GSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
40,41
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,33,36,38,41,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
30,31
30,32
31,32
31,33
39,40
39,41
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
38,83
41,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_63b_goodB2GSink(size_t * dataPtr){    size_t data = *dataPtr;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_63b_goodB2GSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_63b_goodB2GSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(23,3,0)
(7,46,0)
(5,3,0)
(31,33,0)
(46,7,0)
(12,29,0)
(20,28,0)
(36,1,0)
(27,29,0)
(26,28,0)
(28,1,0)
(26,39,0)
(33,7,0)
(3,5,0)
(34,19,0)
(11,25,0)
(3,46,0)
(6,21,0)
(8,10,0)
(28,42,0)
(31,25,0)
(7,33,0)
(37,10,0)
(10,33,0)
(42,24,0)
(20,39,0)
(6,2,0)
(38,4,0)
(30,20,0)
(13,1,0)
(46,3,0)
(3,28,0)
(18,31,0)
(7,44,0)
(16,0,0)
(9,21,0)
(45,33,0)
(26,4,0)
(19,15,0)
(40,36,0)
(39,26,0)
(41,5,0)
(14,28,0)
(0,25,0)
(29,33,0)
(32,26,0)
(17,36,0)
(43,42,0)
(39,20,0)
(10,25,0)
(22,20,0)
(21,6,0)
(44,7,0)
(0,33,0)
(4,26,0)
(42,28,0)
(33,25,0)
(29,33,1)
(46,3,1)
(0,16,1)
(18,0,1)
(10,33,1)
(35,19,1)
(19,34,1)
(43,14,1)
(9,29,1)
(32,28,1)
(39,26,1)
(27,33,1)
(3,5,1)
(31,18,1)
(29,12,1)
(41,23,1)
(31,33,1)
(26,28,1)
(35,31,1)
(37,29,1)
(20,28,1)
(38,32,1)
(22,30,1)
(20,22,1)
(10,8,1)
(12,27,1)
(33,7,1)
(45,39,1)
(42,43,1)
(30,26,1)
(7,44,1)
(3,28,1)
(0,33,1)
(21,9,1)
(23,45,1)
(28,42,1)
(5,41,1)
(8,37,1)
(7,46,1)
(34,39,1)
(16,10,1)
(37,6,1)
(26,4,1)
(4,38,1)
(42,24,1)
(6,21,1)
(39,20,1)
(37,39,2)
(33,7,2)
(27,39,2)
(12,39,2)
(20,26,2)
(7,44,2)
(45,39,2)
(3,5,2)
(18,39,2)
(39,26,2)
(31,39,2)
(41,39,2)
(20,28,2)
(6,21,2)
(46,39,2)
(7,39,2)
(28,42,2)
(26,28,2)
(26,4,2)
(3,39,2)
(46,3,2)
(10,39,2)
(6,29,2)
(22,26,2)
(21,29,2)
(42,24,2)
(8,39,2)
(16,39,2)
(33,39,2)
(23,39,2)
(9,29,2)
(34,39,2)
(3,28,2)
(7,46,2)
(0,33,2)
(30,26,2)
(39,20,2)
(5,39,2)
(0,39,2)
(10,33,2)
(29,33,2)
(19,39,2)
(31,33,2)
(29,39,2)
-----------------------------------
(0,printWLine(myString)
(1,)
(2,)
(3,data*sizeof(wchar_t)
(4,wcslen(HELLO_STRING)
(5,sizeof(wchar_t)
(6,exit(-1)
(7,(wchar_t *)
(8,HELLO_STRING)
(9,1)
(10,wcscpy(myString, HELLO_STRING)
(11,if (myString == NULL)
(12,NULL)
(13,data)
(14,data)
(15,)
(16,myString)
(17,myString)
(18,myString)
(19,printLine("Input is less than the length of the source string or too large")
(20,data < 100)
(21,-1)
(22,100)
(23,data)
(24,size_t * dataPtr)
(25,)
(26,data > wcslen(HELLO_STRING)
(27,myString)
(28,data = *dataPtr)
(29,myString == NULL)
(30,data)
(31,free(myString)
(32,data)
(33,myString = (wchar_t *)
(34,"Input is less than the length of the source string or too large")
(35,RET)
(36,)
(37,myString)
(38,HELLO_STRING)
(39,data > wcslen(HELLO_STRING)
(40,if (data > wcslen(HELLO_STRING)
(41,wchar_t)
(42,*dataPtr)
(43,dataPtr)
(44,wchar_t *)
(45,myString)
(46,malloc(data*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^