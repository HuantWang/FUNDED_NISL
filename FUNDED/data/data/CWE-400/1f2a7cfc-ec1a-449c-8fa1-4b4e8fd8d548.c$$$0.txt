-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
62,63
63,64
63,65
64,65
65,66
65,67
66,67
68,69
68,70
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
86,87
88,89
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,61,67,69,71,76,77,80,84,85,87,90,95,96
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
74,75
74,76
78,79
78,80
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_02_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(23,6,0)
(7,2,0)
(5,2,0)
(10,2,0)
(43,30,0)
(17,34,0)
(48,39,0)
(26,30,0)
(13,32,0)
(40,49,0)
(30,46,0)
(49,32,0)
(31,9,0)
(37,36,0)
(19,35,0)
(35,9,0)
(41,39,0)
(1,34,0)
(29,35,0)
(12,16,0)
(36,18,0)
(51,4,0)
(44,9,0)
(21,3,0)
(29,38,0)
(14,25,0)
(22,51,0)
(34,36,0)
(9,39,0)
(49,9,0)
(45,3,0)
(16,3,0)
(35,29,0)
(30,26,0)
(50,2,0)
(20,49,0)
(33,46,0)
(15,14,0)
(27,29,0)
(30,29,0)
(8,49,0)
(7,6,0)
(30,7,0)
(46,30,0)
(46,3,0)
(32,49,0)
(6,7,0)
(47,7,0)
(39,24,0)
(11,36,0)
(32,49,1)
(7,6,1)
(9,31,1)
(20,8,1)
(28,42,1)
(30,29,1)
(16,3,1)
(1,17,1)
(27,32,1)
(14,15,1)
(43,33,1)
(8,9,1)
(28,29,1)
(33,16,1)
(16,12,1)
(22,46,1)
(30,7,1)
(19,27,1)
(6,23,1)
(49,40,1)
(45,21,1)
(46,30,1)
(3,45,1)
(29,35,1)
(12,51,1)
(49,9,1)
(35,9,1)
(30,26,1)
(34,1,1)
(13,49,1)
(15,32,1)
(28,14,1)
(46,3,1)
(30,43,1)
(21,34,1)
(0,28,1)
(23,47,1)
(17,28,1)
(40,20,1)
(32,13,1)
(42,7,1)
(44,42,1)
(51,22,1)
(35,19,1)
(0,46,1)
(31,44,1)
(33,3,1)
(17,28,2)
(16,3,2)
(30,29,2)
(49,42,2)
(46,3,2)
(3,28,2)
(12,46,2)
(29,35,2)
(9,42,2)
(33,46,2)
(30,26,2)
(46,28,2)
(46,46,2)
(7,6,2)
(19,32,2)
(43,46,2)
(20,42,2)
(33,28,2)
(35,9,2)
(15,32,2)
(14,32,2)
(30,46,2)
(34,28,2)
(46,30,2)
(32,42,2)
(8,42,2)
(32,49,2)
(43,28,2)
(13,42,2)
(44,42,2)
(40,42,2)
(30,7,2)
(27,32,2)
(49,9,2)
(16,46,2)
(51,46,2)
(22,46,2)
(29,32,2)
(30,28,2)
(35,32,2)
(1,28,2)
(45,28,2)
(31,42,2)
(21,28,2)
-----------------------------------
(0,RET)
(1,0)
(2,)
(3,i = 0)
(4,)
(5,if(1)
(6,-1)
(7,count = -1)
(8,inputBuffer)
(9,inputBuffer[CHAR_ARRAY_SIZE] = "")
(10,if(1)
(11,i)
(12,i)
(13,NULL)
(14,printLine("fgets()
(15,"fgets()
(16,i++)
(17,i)
(18,)
(19,inputBuffer)
(20,CHAR_ARRAY_SIZE)
(21,i)
(22,"Hello")
(23,1)
(24,)
(25,)
(26,size_t)
(27,count)
(28,1)
(29,count = atoi(inputBuffer)
(30,(size_t)
(31,"")
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,i)
(34,i = 0)
(35,atoi(inputBuffer)
(36,)
(37,for (i = 0; i < (size_t)
(38,)
(39,)
(40,stdin)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,1)
(43,count)
(44,inputBuffer)
(45,0)
(46,i < (size_t)
(47,count)
(48,inputBuffer)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,count)
(51,printLine("Hello")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^