-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_realloc_15_bad()
{
    int64_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
66,67
67,68
67,69
68,69
70,71
70,72
71,72
76,77
77,78
77,79
78,79
82,83
82,84
84,85
84,86
84,87
84,88
84,89
84,90
85,86
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,40,44,45,49,51,56,58,63,64,65,69,72,73,74,75,79,80,81,83,86,87,88,89,93,94,95
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_realloc_15_bad(){    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int64_t_realloc_15_bad()
CWE401_Memory_Leak__int64_t_realloc_15_bad
{    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(39,46,0)
(46,31,0)
(42,0,0)
(31,46,0)
(18,20,0)
(21,39,0)
(5,40,0)
(24,11,0)
(2,9,0)
(24,30,0)
(10,27,0)
(0,4,0)
(3,9,0)
(11,24,0)
(26,20,0)
(6,7,0)
(22,36,0)
(13,4,0)
(15,27,0)
(26,31,0)
(37,4,0)
(38,20,0)
(7,27,0)
(1,39,0)
(45,36,0)
(29,18,0)
(40,36,0)
(46,4,0)
(43,4,0)
(12,4,0)
(17,31,0)
(9,46,0)
(19,36,0)
(35,11,0)
(31,17,0)
(8,4,0)
(31,26,0)
(23,7,0)
(20,26,0)
(44,39,0)
(26,7,0)
(33,46,0)
(34,26,0)
(20,18,0)
(28,27,0)
(14,4,0)
(39,44,0)
(44,4,0)
(25,36,0)
(29,38,1)
(16,25,1)
(31,17,1)
(38,34,1)
(20,18,1)
(23,6,1)
(26,7,1)
(46,31,1)
(34,33,1)
(32,37,1)
(24,11,1)
(19,32,1)
(32,14,1)
(33,41,1)
(21,1,1)
(5,32,1)
(12,24,1)
(40,5,1)
(35,9,1)
(39,46,1)
(1,12,1)
(42,41,1)
(26,20,1)
(12,9,1)
(18,29,1)
(7,23,1)
(0,42,1)
(44,39,1)
(3,2,1)
(14,0,1)
(2,46,1)
(9,46,1)
(39,21,1)
(11,35,1)
(41,7,1)
(37,44,1)
(9,3,1)
(25,40,1)
(16,19,1)
(31,26,1)
(12,41,2)
(11,9,2)
(20,18,2)
(24,9,2)
(29,41,2)
(31,17,2)
(26,20,2)
(35,9,2)
(0,41,2)
(38,41,2)
(9,46,2)
(26,41,2)
(21,41,2)
(31,41,2)
(1,41,2)
(18,41,2)
(24,11,2)
(34,41,2)
(3,41,2)
(46,41,2)
(40,32,2)
(5,32,2)
(20,41,2)
(2,41,2)
(19,32,2)
(42,41,2)
(44,41,2)
(39,41,2)
(33,41,2)
(25,32,2)
(39,46,2)
(9,41,2)
(14,41,2)
(46,31,2)
(26,7,2)
(31,26,2)
(44,39,2)
(37,41,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,data)
(2,data)
(3,NULL)
(4,)
(5,"Benign, fixed string")
(6,data)
(7,data = NULL)
(8,case 6:)
(9,data == NULL)
(10,data)
(11,-1)
(12,L)
(13,if (data == NULL)
(14,break;)
(15,switch(6)
(16,RET)
(17,int64_t *)
(18,sizeof(int64_t)
(19,break;)
(20,100*sizeof(int64_t)
(21,0)
(22,default:)
(23,NULL)
(24,exit(-1)
(25,break;)
(26,realloc(data, 100*sizeof(int64_t)
(27,)
(28,switch(7)
(29,int64_t)
(30,)
(31,(int64_t *)
(32,7)
(33,data)
(34,data)
(35,1)
(36,)
(37,break;)
(38,100)
(39,data[0])
(40,printLine("Benign, fixed string")
(41,6)
(42,"Benign, fixed string")
(43,default:)
(44,printLongLongLine(data[0])
(45,case 7:)
(46,data = (int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^