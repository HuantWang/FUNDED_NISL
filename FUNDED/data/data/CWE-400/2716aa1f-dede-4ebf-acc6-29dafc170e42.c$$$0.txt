-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
25,26
25,27
27,28
28,29
28,30
29,30
30,31
30,32
32,33
32,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
39,41
40,41
42,43
44,45
44,46
44,47
44,48
44,49
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
57,59
58,59
60,61
61,62
61,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,9,11,15,16,18,23,24,26,31,33,34,38,41,43,48,51,53,56,59,62,63,67,69,74,76,80,82,84,88,90,94,96,101,102
-----computeFrom-----
13,14
13,15
21,22
21,23
36,37
36,38
46,47
46,48
57,58
57,59
65,66
65,67
-----guardedBy-----
43,84
38,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
1
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(16,36,0)
(26,21,0)
(18,36,0)
(12,17,0)
(11,24,0)
(7,9,0)
(15,19,0)
(43,38,0)
(33,35,0)
(44,24,0)
(21,38,0)
(36,44,0)
(41,3,0)
(15,14,0)
(34,39,0)
(46,43,0)
(30,13,0)
(23,44,0)
(42,47,0)
(22,38,0)
(40,24,0)
(25,37,0)
(27,38,0)
(21,39,0)
(32,11,0)
(43,39,0)
(8,47,0)
(15,44,0)
(19,15,0)
(11,44,0)
(20,39,0)
(14,15,0)
(1,31,0)
(10,5,0)
(9,44,0)
(19,21,0)
(6,33,0)
(37,24,0)
(44,15,0)
(43,5,0)
(21,31,0)
(2,17,0)
(9,24,0)
(21,19,0)
(38,49,0)
(41,13,0)
(39,17,0)
(37,44,0)
(13,41,0)
(45,9,0)
(47,28,0)
(0,17,0)
(31,21,0)
(5,43,0)
(4,33,1)
(19,21,1)
(10,46,1)
(7,45,1)
(21,38,1)
(16,18,1)
(39,34,1)
(23,43,1)
(22,27,1)
(37,44,1)
(11,44,1)
(13,30,1)
(45,36,1)
(6,43,1)
(31,1,1)
(25,9,1)
(9,7,1)
(21,39,1)
(43,5,1)
(27,48,1)
(18,44,1)
(15,19,1)
(30,36,1)
(9,44,1)
(34,20,1)
(44,15,1)
(43,39,1)
(36,16,1)
(37,25,1)
(5,10,1)
(32,37,1)
(33,6,1)
(21,31,1)
(36,44,1)
(4,11,1)
(29,38,1)
(1,26,1)
(15,14,1)
(11,32,1)
(46,29,1)
(26,23,1)
(41,13,1)
(4,29,1)
(48,39,1)
(38,22,1)
(43,38,1)
(45,41,1)
(29,48,1)
(21,43,2)
(25,43,2)
(21,38,2)
(10,29,2)
(6,43,2)
(44,15,2)
(37,43,2)
(45,43,2)
(33,43,2)
(21,39,2)
(9,43,2)
(41,13,2)
(16,43,2)
(1,43,2)
(43,39,2)
(11,43,2)
(44,43,2)
(18,43,2)
(31,43,2)
(11,44,2)
(46,29,2)
(13,36,2)
(38,48,2)
(36,44,2)
(23,43,2)
(27,48,2)
(15,19,2)
(26,43,2)
(7,43,2)
(30,36,2)
(5,29,2)
(43,38,2)
(19,21,2)
(9,44,2)
(21,31,2)
(15,14,2)
(43,29,2)
(41,36,2)
(19,43,2)
(15,43,2)
(37,44,2)
(32,43,2)
(36,43,2)
(43,5,2)
(22,48,2)
-----------------------------------
(0,data)
(1,wchar_t)
(2,if(1)
(3,)
(4,RET)
(5,wcslen(HELLO_STRING)
(6,"Input is less than the length of the source string")
(7,HELLO_STRING)
(8,if (data > wcslen(HELLO_STRING)
(9,wcscpy(myString, HELLO_STRING)
(10,HELLO_STRING)
(11,free(myString)
(12,if(1)
(13,-1)
(14,wchar_t *)
(15,(wchar_t *)
(16,NULL)
(17,)
(18,myString)
(19,malloc(data*sizeof(wchar_t)
(20,data)
(21,data*sizeof(wchar_t)
(22,20)
(23,myString)
(24,)
(25,myString)
(26,data)
(27,data)
(28,)
(29,1)
(30,1)
(31,sizeof(wchar_t)
(32,myString)
(33,printLine("Input is less than the length of the source string")
(34,0)
(35,)
(36,myString == NULL)
(37,printWLine(myString)
(38,data = 20)
(39,data = 0)
(40,if (myString == NULL)
(41,exit(-1)
(42,myString)
(43,data > wcslen(HELLO_STRING)
(44,myString = (wchar_t *)
(45,myString)
(46,data)
(47,)
(48,1)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^