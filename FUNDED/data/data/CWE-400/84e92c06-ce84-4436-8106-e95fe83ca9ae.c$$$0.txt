-----label-----
1
-----code-----
i2c_err_t i2cProcQueue(i2c_t * i2c, uint32_t *readCount, uint16_t timeOutMillis)
{
    /* do the hard stuff here
    install ISR if necessary
    setup EventGroup
    handle bus busy?
     */
    //log_e("procQueue i2c=%p",&i2c);
    if(readCount){ //total reads accomplished in all queue elements
        *readCount = 0;
    }
    if(i2c == NULL) {
        return I2C_ERROR_DEV;
    }
    if(i2c->debugFlags & 0xff000000) i2cTriggerDumps(i2c,(i2c->debugFlags>>24),"before ProcQueue");
    if (i2c->dev->status_reg.bus_busy) { // return error, let TwoWire() handle resetting the hardware.
        /* if multi master then this if should be changed to this 03/12/2018
        if(multiMaster){// try to let the bus clear by its self
            uint32_t timeOutTick = millis();
            while((i2c->dev->status_reg.bus_busy)&&(millis()-timeOutTick<timeOutMillis())){
              delay(2); // allow task switch
            }
        }
        if(i2c->dev->status_reg.bus_busy){ // still busy, so die
             */
        log_i("Bus busy, reinit");
        return I2C_ERROR_BUSY;
    }

    I2C_MUTEX_LOCK();
    /* what about co-existence with SLAVE mode?
    Should I check if a slaveMode xfer is in progress and hang
    until it completes?
    if i2c->stage == I2C_RUNNING or I2C_SLAVE_ACTIVE
     */
    i2c->stage = I2C_DONE; // until ready

#if (ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO) && (defined ENABLE_I2C_DEBUG_BUFFER)
    for(uint16_t i=0; i<INTBUFFMAX; i++) {
        intBuff[i][0][i2c->num] = 0;
        intBuff[i][1][i2c->num] = 0;
        intBuff[i][2][i2c->num] = 0;
    }
    intPos[i2c->num] = 0;
    fifoPos = 0;
    memset(fifoBuffer,0,FIFOMAX);
#endif
    // EventGroup is used to signal transmission completion from ISR
    // not always reliable. Sometimes, the FreeRTOS scheduler is maxed out and refuses request
    // if that happens, this call hangs until the timeout period expires, then it continues.
    if(!i2c->i2c_event) {
        i2c->i2c_event = xEventGroupCreate();
    }
    if(i2c->i2c_event) {
        xEventGroupClearBits(i2c->i2c_event, 0xFF);
    } else { // failed to create EventGroup
        log_e("eventCreate failed=%p",i2c->i2c_event);
        I2C_MUTEX_UNLOCK();
        return I2C_ERROR_MEMORY;
    }

    i2c_err_t reason = I2C_ERROR_OK;
    i2c->mode = I2C_MASTER;
    i2c->dev->ctr.trans_start=0; // Pause Machine
    i2c->dev->timeout.tout = 0xFFFFF; // max 13ms
    i2c->dev->int_clr.val = 0x1FFF; // kill them All!

    i2c->dev->ctr.ms_mode = 1; // master!
    i2c->queuePos=0;
    i2c->errorByteCnt=0;
    i2c->errorQueue = 0;
    uint32_t totalBytes=0; // total number of bytes to be Moved!
    // convert address field to required I2C format
    while(i2c->queuePos < i2c->queueCount) { // need to push these address modes upstream, to AddQueue
        I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];
        uint16_t taddr=0;
        if(tdq->ctrl.addrReq ==2) { // 10bit address
            taddr =((tdq->ctrl.addr >> 7) & 0xFE)
                   |tdq->ctrl.mode;
            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);
        } else { // 7bit address
            taddr =  ((tdq->ctrl.addr<<1)&0xFE)
                     |tdq->ctrl.mode;
        }
        tdq->ctrl.addr = taddr; // all fixed with R/W bit
        totalBytes += tdq->length + tdq->ctrl.addrReq; // total number of byte to be moved!
    }
    i2c->queuePos=0;

    fillCmdQueue(i2c,false); // don't enable Tx/RX irq's
    // start adding command[], END irq will keep it full
    //Data Fifo will be filled after trans_start is issued
    i2c->exitCode=0;

    I2C_FIFO_CONF_t f;
    f.val = i2c->dev->fifo_conf.val;
    f.rx_fifo_rst = 1; // fifo in reset
    f.tx_fifo_rst = 1; // fifo in reset
    f.nonfifo_en = 0; // use fifo mode
    f.nonfifo_tx_thres = 31;
    // need to adjust threshold based on I2C clock rate, at 100k, 30 usually works,
    // sometimes the emptyRx() actually moves 31 bytes
    // it hasn't overflowed yet, I cannot tell if the new byte is added while
    // emptyRX() is executing or before?
  // let i2cSetFrequency() set thrhds
  //   f.rx_fifo_full_thrhd = 30; // 30 bytes before INT is issued
  //  f.tx_fifo_empty_thrhd = 0;
    f.fifo_addr_cfg_en = 0; // no directed access
    i2c->dev->fifo_conf.val = f.val; // post them all

    f.rx_fifo_rst = 0; // release fifo
    f.tx_fifo_rst = 0;
    i2c->dev->fifo_conf.val = f.val; // post them all

    i2c->stage = I2C_STARTUP; // everything configured, now start the I2C StateMachine, and
    // As soon as interrupts are enabled, the ISR will start handling them.
    // it should receive a TXFIFO_EMPTY immediately, even before it
    // receives the TRANS_START


    uint32_t interruptsEnabled =
        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit
        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END
        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR
        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit
        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit
        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled
        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list
        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled
        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()
        I2C_RXFIFO_FULL_INT_ENA;  // (BIT(0))     trigger emptyRxFifo()

    i2c->dev->int_ena.val = interruptsEnabled;

    if(!i2c->intr_handle) { // create ISR for either peripheral
        // log_i("create ISR %d",i2c->num);
        uint32_t ret = 0;
        uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt
          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled
          ESP_INTR_FLAG_LOWMED;   //< Low and medium prio interrupts. These can be handled in C.

        if(i2c->num) {
            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);
        } else {
            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);
        }

        if(ret!=ESP_OK) {
            log_e("install interrupt handler Failed=%d",ret);
            I2C_MUTEX_UNLOCK();
            return I2C_ERROR_MEMORY;
        }
    }
    //hang until it completes.

    // how many ticks should it take to transfer totalBytes through the I2C hardware,
    // add user supplied timeOutMillis to Calculated Value

    portTickType ticksTimeOut = ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS;

    i2c->dev->ctr.trans_start=1; // go for it

#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_ERROR
    portTickType tBefore=xTaskGetTickCount();
#endif

    // wait for ISR to complete the transfer, or until timeOut in case of bus fault, hardware problem

    uint32_t eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut);

#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_ERROR
    portTickType tAfter=xTaskGetTickCount();
#endif


    // if xEventGroupSetBitsFromISR() failed, the ISR could have succeeded but never been
    // able to mark the success

    if(i2c->exitCode!=eBits) { // try to recover from O/S failure
        //  log_e("EventGroup Failed:%p!=%p",eBits,i2c->exitCode);
        eBits=i2c->exitCode;
    }
    if((eBits&EVENT_ERROR)||(!(eBits & EVENT_DONE))){ // need accurate errorByteCnt for debug
      i2c_update_error_byte_cnt(i2c);
    }

    if(!(eBits==EVENT_DONE)&&(eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE))) { // not only Done, therefore error, exclude ADDR NAK, DATA_NAK
#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO
        i2cDumpI2c(i2c);
        i2cDumpInts(i2c->num);
#endif
    }

    if(eBits&EVENT_DONE) { // no gross timeout
        switch(i2c->error) {
        case I2C_OK :
            reason = I2C_ERROR_OK;
            break;
        case I2C_ERROR :
            reason = I2C_ERROR_DEV;
            break;
        case I2C_ADDR_NAK:
            reason = I2C_ERROR_ACK;
            break;
        case I2C_DATA_NAK:
            reason = I2C_ERROR_ACK;
            break;
        case I2C_ARBITRATION:
            reason = I2C_ERROR_BUS;
            break;
        case I2C_TIMEOUT:
            reason = I2C_ERROR_TIMEOUT;
            break;
        default :
            reason = I2C_ERROR_DEV;
        }
    } else { // GROSS timeout, shutdown ISR , report Timeout
        i2c->stage = I2C_DONE;
        i2c->dev->int_ena.val =0;
        i2c->dev->int_clr.val = 0x1FFF;
        i2c_update_error_byte_cnt(i2c);
        if((i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)) { // Bus Busy no bytes Moved
            reason = I2C_ERROR_BUSY;
            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;
#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG
            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);
            i2cDumpI2c(i2c);
            i2cDumpInts(i2c->num);
#endif
        } else { // just a timeout, some data made it out or in.
            reason = I2C_ERROR_TIMEOUT;
            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;

#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG
            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);
            i2cDumpI2c(i2c);
            i2cDumpInts(i2c->num);
#endif
        }
    }

    /* offloading all EventGroups to dispatch, EventGroups in ISR is not always successful
     11/20/2017
       if error, need to trigger all succeeding dataQueue events with the EVENT_ERROR_PREV
     07/22/2018
       Need to use the queueEvent value to identify transaction blocks, if an error occurs,
       all subsequent queue items with the same queueEvent value will receive the EVENT_ERROR_PREV.
       But, ProcQue should re-queue queue items that have a different queueEvent value(different transaction)
       This change will support multi-thread i2c usage.  Use the queueEvent as the transaction event
       identifier.
    */
    uint32_t b = 0;

    while(b < i2c->queueCount) {
        if(i2c->dq[b].ctrl.mode==1 && readCount) {
            *readCount += i2c->dq[b].position; // number of data bytes received
        }
        if(b < i2c->queuePos) { // before any error
            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup
                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);
            }
        } else if(b == i2c->queuePos) { // last processed queue
            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup
                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);
            }
        } else { // never processed queues
            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup
                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);
            }
        }
        b++;
    }
    if(i2c->debugFlags & 0x00ff0000) i2cTriggerDumps(i2c,(i2c->debugFlags>>16),"after ProcQueue");

    I2C_MUTEX_UNLOCK();
    return reason;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
23,42
23,43
23,44
23,45
23,46
23,47
23,48
23,49
23,50
23,51
23,52
23,53
23,54
23,55
23,56
23,57
23,58
23,59
23,60
23,61
23,62
23,63
23,64
23,65
23,66
23,67
23,68
23,69
23,70
23,71
23,72
23,73
23,74
24,25
24,26
25,26
27,28
28,29
29,30
29,31
30,31
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
52,55
52,56
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
65,66
65,67
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
74,76
75,76
76,77
76,78
77,78
80,81
81,82
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
95,97
96,97
97,98
97,99
98,99
101,102
102,103
103,104
103,105
104,105
104,106
105,106
108,109
109,110
111,112
111,113
111,114
112,113
112,114
113,114
116,117
117,118
118,119
118,120
118,121
119,120
121,122
121,123
122,123
126,127
126,128
126,129
127,128
128,129
128,130
128,131
129,130
132,133
132,134
133,134
136,137
137,138
138,139
140,141
141,142
143,144
144,145
144,146
145,146
147,148
147,149
149,150
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
160,161
161,162
161,163
162,163
162,164
163,164
163,165
164,165
164,166
165,166
171,172
172,173
172,174
173,174
173,175
174,175
174,176
175,176
175,177
176,177
182,183
183,184
183,185
184,185
184,186
185,186
185,187
186,187
186,188
187,188
193,194
194,195
194,196
195,196
195,197
196,197
196,198
197,198
197,199
198,199
204,205
205,206
205,207
206,207
206,208
207,208
211,212
212,213
212,214
213,214
213,215
214,215
218,219
219,220
219,221
220,221
220,222
221,222
225,226
226,227
226,228
227,228
229,230
229,231
231,232
233,234
233,235
234,235
234,236
235,236
235,237
236,237
239,240
239,241
240,241
243,244
243,245
243,246
243,247
243,248
244,245
245,246
245,247
246,247
248,249
248,250
248,251
251,252
252,253
253,254
253,255
254,255
254,256
255,256
258,259
259,260
259,261
260,261
263,264
264,265
264,266
265,266
267,268
267,269
269,270
271,272
271,273
271,274
272,273
272,274
273,274
273,275
274,275
274,276
275,276
280,281
280,282
281,282
282,283
282,284
283,284
285,286
285,287
286,287
287,288
287,289
288,289
289,290
289,291
290,291
290,292
291,292
291,293
292,293
298,299
298,300
299,300
299,301
300,301
304,305
305,306
305,307
306,307
308,309
308,310
309,310
310,311
310,312
311,312
314,315
315,316
315,317
316,317
316,318
317,318
317,319
318,319
323,324
324,325
325,326
325,327
326,327
328,329
328,330
329,330
330,331
330,332
331,332
332,333
332,334
333,334
333,335
334,335
334,336
335,336
341,342
341,343
342,343
342,344
343,344
347,348
348,349
348,350
349,350
349,351
350,351
350,352
351,352
355,356
357,358
358,359
358,360
359,360
361,362
361,363
362,363
362,364
363,364
366,367
366,368
367,368
367,369
368,369
372,373
373,374
373,375
374,375
374,376
375,376
379,380
380,381
380,382
380,383
381,382
383,384
386,387
387,388
387,389
388,389
388,390
389,390
393,394
394,395
394,396
395,396
397,398
399,400
400,401
400,402
401,402
401,403
402,403
405,406
405,407
406,407
406,408
407,408
407,409
408,409
413,414
414,415
414,416
415,416
415,417
416,417
420,421
421,422
421,423
422,423
422,424
423,424
427,428
428,429
428,430
429,430
429,431
430,431
434,435
435,436
435,437
436,437
436,438
437,438
441,442
442,443
442,444
443,444
443,445
444,445
448,449
449,450
449,451
450,451
450,452
451,452
451,453
452,453
452,454
453,454
458,459
458,460
459,460
462,463
463,464
463,465
464,465
464,466
465,466
469,470
470,471
470,472
471,472
471,473
472,473
476,477
477,478
477,479
478,479
478,480
479,480
479,481
480,481
480,482
481,482
486,487
486,488
487,488
490,491
491,492
491,493
492,493
492,494
493,494
496,497
498,499
499,500
499,501
500,501
502,503
502,504
504,505
505,506
505,507
506,507
506,508
507,508
507,509
508,509
508,510
509,510
509,511
510,511
510,512
511,512
511,513
512,513
512,514
513,514
513,515
514,515
516,517
518,519
520,521
522,523
524,525
526,527
528,529
530,531
532,533
534,535
535,536
535,537
536,537
536,538
537,538
537,539
538,539
538,540
539,540
544,545
546,547
546,548
547,548
548,549
548,550
549,550
552,553
552,554
552,555
552,556
553,554
554,555
554,556
555,556
557,558
557,559
559,560
561,562
562,563
562,564
563,564
565,566
565,567
567,568
568,569
568,570
569,570
569,571
570,571
572,573
574,575
576,577
576,578
576,579
577,578
577,579
578,579
581,582
582,583
583,584
583,585
584,585
586,587
586,588
586,589
586,590
586,591
586,592
586,593
586,594
587,588
589,590
591,592
593,594
593,595
594,595
595,596
597,598
597,599
598,599
598,600
599,600
599,601
600,601
605,606
607,608
608,609
610,611
612,613
613,614
613,615
614,615
617,618
618,619
619,620
619,621
620,621
622,623
622,624
622,625
622,626
622,627
622,628
622,629
622,630
623,624
625,626
627,628
629,630
629,631
630,631
631,632
633,634
633,635
634,635
634,636
635,636
635,637
636,637
641,642
643,644
644,645
646,647
648,649
649,650
649,651
650,651
653,654
653,655
654,655
654,656
655,656
657,658
659,660
659,661
659,662
660,661
661,662
661,663
661,664
662,663
665,666
667,668
668,669
669,670
671,672
672,673
674,675
675,676
675,677
676,677
678,679
678,680
680,681
681,682
681,683
682,683
683,684
683,685
684,685
684,686
685,686
686,687
686,688
687,688
687,689
688,689
692,693
693,694
693,695
694,695
696,697
698,699
700,701
702,703
703,704
703,705
704,705
704,706
705,706
705,707
706,707
706,708
707,708
713,714
714,715
714,716
715,716
717,718
717,719
719,720
720,721
721,722
723,724
724,725
724,726
725,726
727,728
727,729
729,730
730,731
730,732
730,733
730,734
730,735
730,736
731,732
733,734
733,735
734,735
737,738
739,740
741,742
743,744
745,746
746,747
746,748
747,748
749,750
749,751
751,752
752,753
753,754
755,756
755,757
756,757
756,758
757,758
757,759
758,759
761,762
763,764
764,765
765,766
765,767
766,767
768,769
768,770
769,770
772,773
772,774
773,774
773,775
774,775
775,776
775,777
776,777
778,779
780,781
781,782
782,783
783,784
783,785
784,785
786,787
788,789
789,790
790,791
790,792
791,792
793,794
795,796
795,797
796,797
796,798
797,798
798,799
799,800
799,801
800,801
802,803
804,805
805,806
805,807
806,807
808,809
809,810
810,811
810,812
811,812
811,813
812,813
812,814
813,814
815,816
817,818
819,820
821,822
821,823
822,823
823,824
823,825
824,825
826,827
828,829
829,830
829,831
830,831
832,833
832,834
833,834
836,837
836,838
836,839
837,838
837,839
838,839
840,841
842,843
843,844
843,845
844,845
844,846
845,846
848,849
848,850
848,851
848,852
848,853
848,854
848,855
848,856
848,857
848,858
848,859
848,860
848,861
848,862
848,863
848,864
848,865
848,866
848,867
848,868
849,850
850,851
852,853
853,854
853,855
854,855
856,857
859,860
860,861
862,863
863,864
863,865
864,865
866,867
869,870
870,871
872,873
873,874
873,875
874,875
876,877
879,880
880,881
882,883
883,884
883,885
884,885
886,887
889,890
890,891
892,893
893,894
893,895
894,895
896,897
899,900
900,901
902,903
903,904
903,905
904,905
906,907
910,911
911,912
911,913
912,913
914,915
916,917
916,918
916,919
916,920
916,921
917,918
918,919
918,920
919,920
919,921
920,921
923,924
925,926
926,927
926,928
927,928
927,929
928,929
928,930
929,930
929,931
930,931
936,937
937,938
937,939
938,939
938,940
939,940
939,941
940,941
940,942
941,942
947,948
948,949
948,950
949,950
951,952
953,954
953,955
953,956
954,955
954,956
955,956
956,957
956,958
957,958
957,959
958,959
962,963
963,964
963,965
964,965
964,966
965,966
969,970
969,971
969,972
969,973
969,974
970,971
971,972
971,973
972,973
974,975
976,977
977,978
977,979
978,979
980,981
980,982
981,982
981,983
982,983
982,984
983,984
985,986
987,988
989,990
991,992
992,993
992,994
992,995
992,996
992,997
992,998
992,999
993,994
996,997
998,999
1000,1001
1001,1002
1001,1003
1002,1003
1004,1005
1006,1007
1008,1009
1008,1010
1009,1010
1012,1013
1013,1014
1013,1015
1014,1015
1016,1017
1018,1019
1019,1020
1019,1021
1020,1021
1022,1023
1022,1024
1023,1024
1026,1027
1026,1028
1026,1029
1026,1030
1026,1031
1027,1028
1028,1029
1028,1030
1029,1030
1031,1032
1033,1034
1034,1035
1034,1036
1035,1036
1037,1038
1037,1039
1038,1039
1038,1040
1039,1040
1039,1041
1040,1041
1042,1043
1044,1045
1046,1047
1048,1049
1049,1050
1049,1051
1049,1052
1049,1053
1049,1054
1049,1055
1049,1056
1050,1051
1053,1054
1055,1056
1057,1058
1058,1059
1058,1060
1059,1060
1061,1062
1063,1064
1065,1066
1065,1067
1066,1067
1069,1070
1070,1071
1070,1072
1071,1072
1073,1074
1075,1076
1076,1077
1076,1078
1077,1078
1079,1080
1079,1081
1080,1081
1083,1084
1084,1085
1084,1086
1085,1086
1087,1088
1087,1089
1089,1090
1091,1092
1091,1093
1092,1093
1092,1094
1093,1094
1095,1096
1095,1097
1096,1097
1099,1100
1099,1101
1099,1102
1100,1101
1100,1102
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1103,1105
1104,1105
1104,1106
1105,1106
1105,1107
1106,1107
1106,1108
1107,1108
1110,1111
1115,1116
1117,1118
1118,1119
1119,1120
1119,1121
1120,1121
1121,1122
1123,1124
1123,1125
1124,1125
1124,1126
1125,1126
1125,1127
1126,1127
1129,1130
1132,1133
1132,1134
1132,1135
1133,1134
1133,1135
1134,1135
1136,1137
1136,1138
1137,1138
1140,1141
1141,1142
1141,1143
1142,1143
1142,1144
1143,1144
1143,1145
1144,1145
1144,1146
1145,1146
1148,1149
1151,1152
1152,1153
1153,1154
1153,1155
1153,1156
1154,1155
1156,1157
1156,1158
1157,1158
1157,1159
1158,1159
1158,1160
1159,1160
1162,1163
1165,1166
1167,1168
1167,1169
1167,1170
1168,1169
1168,1170
1169,1170
1171,1172
1171,1173
1172,1173
1175,1176
1176,1177
1176,1178
1177,1178
1177,1179
1178,1179
1178,1180
1179,1180
1179,1181
1180,1181
1183,1184
1186,1187
1187,1188
1188,1189
1188,1190
1188,1191
1189,1190
1191,1192
1191,1193
1192,1193
1192,1194
1193,1194
1193,1195
1194,1195
1197,1198
1200,1201
1202,1203
1203,1204
1203,1205
1204,1205
1204,1206
1205,1206
1205,1207
1206,1207
1206,1208
1207,1208
1210,1211
1213,1214
1214,1215
1215,1216
1215,1217
1215,1218
1216,1217
1218,1219
1218,1220
1219,1220
1219,1221
1220,1221
1220,1222
1221,1222
1224,1225
1227,1228
1227,1229
1228,1229
1230,1231
1232,1233
1233,1234
1234,1235
1236,1237
1236,1238
1237,1238
1237,1239
1238,1239
1238,1240
1239,1240
1243,1244
1244,1245
1244,1246
1244,1247
1244,1248
1245,1246
1247,1248
1249,1250
1250,1251
1250,1252
1251,1252
1251,1253
1252,1253
1257,1258
1258,1259
1259,1260
1261,1262
1262,1263
-----nextToken-----
3,5,8,10,11,14,16,17,20,22,26,32,33,37,39,43,48,49,50,54,56,61,62,63,64,70,71,72,73,78,79,82,86,91,92,94,99,100,106,107,110,114,115,120,123,124,125,130,131,134,135,139,142,146,148,151,156,157,159,166,167,168,169,170,177,178,179,180,181,188,189,190,191,192,199,200,201,202,203,208,209,210,215,216,217,222,223,224,228,230,232,237,238,241,242,247,249,250,256,257,261,262,266,268,270,276,277,278,279,284,293,294,295,296,297,301,302,303,307,312,313,319,320,321,322,327,336,337,338,339,340,344,345,346,352,353,354,356,360,364,365,369,370,371,376,377,378,382,384,385,390,391,392,396,398,403,404,409,410,411,412,417,418,419,424,425,426,431,432,433,438,439,440,445,446,447,454,455,456,457,460,461,466,467,468,473,474,475,482,483,484,485,488,489,494,495,497,501,503,515,517,519,521,523,525,527,529,531,533,540,541,542,543,545,550,551,556,558,560,564,566,571,573,575,579,580,585,588,590,592,596,601,602,603,604,606,609,611,615,616,621,624,626,628,632,637,638,639,640,642,645,647,651,652,656,658,663,664,666,670,673,677,679,689,690,691,695,697,699,701,708,709,710,711,712,716,718,722,726,728,732,735,736,738,740,742,744,748,750,754,759,760,762,767,770,771,777,779,785,787,792,794,801,803,807,814,816,818,820,825,827,831,834,835,839,841,846,847,851,855,857,858,861,865,867,868,871,875,877,878,881,885,887,888,891,895,897,898,901,905,907,908,909,913,915,921,922,924,931,932,933,934,935,942,943,944,945,946,950,952,959,960,961,966,967,968,973,975,979,984,986,988,990,994,995,997,999,1003,1005,1007,1010,1011,1015,1017,1021,1024,1025,1030,1032,1036,1041,1043,1045,1047,1051,1052,1054,1056,1060,1062,1064,1067,1068,1072,1074,1078,1081,1082,1086,1088,1090,1094,1097,1098,1108,1109,1111,1112,1113,1114,1116,1122,1127,1128,1130,1131,1135,1138,1139,1146,1147,1149,1150,1155,1160,1161,1163,1164,1166,1170,1173,1174,1181,1182,1184,1185,1190,1195,1196,1198,1199,1201,1208,1209,1211,1212,1217,1222,1223,1225,1226,1229,1231,1235,1240,1241,1242,1246,1248,1253,1254,1255,1256,1260,1263
-----computeFrom-----
29,30
29,31
35,36
35,37
45,46
45,47
58,59
58,60
88,89
88,90
103,104
103,105
153,154
153,155
161,162
161,163
172,173
172,174
183,184
183,185
194,195
194,196
205,206
205,207
212,213
212,214
219,220
219,221
234,235
234,236
272,273
272,274
282,283
282,284
285,286
285,287
287,288
287,289
289,290
289,291
305,306
305,307
308,309
308,310
310,311
310,312
315,316
315,317
325,326
325,327
328,329
328,330
330,331
330,332
332,333
332,334
348,349
348,350
358,359
358,360
361,362
361,363
373,374
373,375
387,388
387,389
400,401
400,402
414,415
414,416
421,422
421,423
428,429
428,430
435,436
435,437
442,443
442,444
449,450
449,451
463,464
463,465
470,471
470,472
477,478
477,479
491,492
491,493
505,506
505,507
506,507
506,508
507,508
507,509
508,509
508,510
509,510
509,511
510,511
510,512
511,512
511,513
512,513
512,514
513,514
513,515
535,536
535,537
568,569
568,570
569,570
569,571
583,584
583,585
593,594
593,595
619,620
619,621
629,630
629,631
654,655
654,656
681,682
681,683
683,684
683,685
684,685
684,686
686,687
686,688
687,688
687,689
703,704
703,705
756,757
756,758
765,766
765,767
773,774
773,775
775,776
775,777
783,784
783,785
796,797
796,798
799,800
799,801
805,806
805,807
810,811
810,812
811,812
811,813
812,813
812,814
837,838
837,839
853,854
853,855
863,864
863,865
873,874
873,875
883,884
883,885
893,894
893,895
903,904
903,905
911,912
911,913
918,919
918,920
926,927
926,928
937,938
937,939
954,955
954,956
956,957
956,958
963,964
963,965
971,972
971,973
977,978
977,979
980,981
980,982
981,982
981,983
982,983
982,984
1001,1002
1001,1003
1028,1029
1028,1030
1034,1035
1034,1036
1037,1038
1037,1039
1038,1039
1038,1040
1039,1040
1039,1041
1058,1059
1058,1060
1092,1093
1092,1094
1101,1102
1101,1103
1102,1103
1102,1104
1119,1120
1119,1121
1133,1134
1133,1135
1168,1169
1168,1170
1227,1228
1227,1229
1237,1238
1237,1239
1250,1251
1250,1252
-----guardedBy-----
49,62
48,61
276,319
277,320
656,666
762,767
760,771
759,770
966,1024
1111,1130
1108,1127
1116,1122
1109,1128
1135,1163
1138,1160
1170,1198
1173,1195
1241,1254
1240,1253
-----guardedByNegation-----
276,344
277,345
839,1041
841,1047
966,1081
1135,1225
1139,1174
1138,1222
1170,1225
1173,1222
-----lastLexicalUse-----
276,344
277,345
966,1081
1135,1225
1138,1222
1170,1225
1173,1222
-----jump-----
276,344
277,345
966,1081
1135,1225
1138,1222
1170,1225
1173,1222
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
i2c_err_t i2cProcQueue(i2c_t * i2c, uint32_t *readCount, uint16_t timeOutMillis){    /* do the hard stuff here    install ISR if necessary    setup EventGroup    handle bus busy?     */    //log_e("procQueue i2c=%p",&i2c);    if(readCount){ //total reads accomplished in all queue elements        *readCount = 0;    }    if(i2c == NULL) {        return I2C_ERROR_DEV;    }    if(i2c->debugFlags & 0xff000000) i2cTriggerDumps(i2c,(i2c->debugFlags>>24),"before ProcQueue");    if (i2c->dev->status_reg.bus_busy) { // return error, let TwoWire() handle resetting the hardware.        /* if multi master then this if should be changed to this 03/12/2018        if(multiMaster){// try to let the bus clear by its self            uint32_t timeOutTick = millis();            while((i2c->dev->status_reg.bus_busy)&&(millis()-timeOutTick<timeOutMillis())){              delay(2); // allow task switch            }        }        if(i2c->dev->status_reg.bus_busy){ // still busy, so die             */        log_i("Bus busy, reinit");        return I2C_ERROR_BUSY;    }    I2C_MUTEX_LOCK();    /* what about co-existence with SLAVE mode?    Should I check if a slaveMode xfer is in progress and hang    until it completes?    if i2c->stage == I2C_RUNNING or I2C_SLAVE_ACTIVE     */    i2c->stage = I2C_DONE; // until ready#if (ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO) && (defined ENABLE_I2C_DEBUG_BUFFER)    for(uint16_t i=0; i<INTBUFFMAX; i++) {        intBuff[i][0][i2c->num] = 0;        intBuff[i][1][i2c->num] = 0;        intBuff[i][2][i2c->num] = 0;    }    intPos[i2c->num] = 0;    fifoPos = 0;    memset(fifoBuffer,0,FIFOMAX);#endif    // EventGroup is used to signal transmission completion from ISR    // not always reliable. Sometimes, the FreeRTOS scheduler is maxed out and refuses request    // if that happens, this call hangs until the timeout period expires, then it continues.    if(!i2c->i2c_event) {        i2c->i2c_event = xEventGroupCreate();    }    if(i2c->i2c_event) {        xEventGroupClearBits(i2c->i2c_event, 0xFF);    } else { // failed to create EventGroup        log_e("eventCreate failed=%p",i2c->i2c_event);        I2C_MUTEX_UNLOCK();        return I2C_ERROR_MEMORY;    }    i2c_err_t reason = I2C_ERROR_OK;    i2c->mode = I2C_MASTER;    i2c->dev->ctr.trans_start=0; // Pause Machine    i2c->dev->timeout.tout = 0xFFFFF; // max 13ms    i2c->dev->int_clr.val = 0x1FFF; // kill them All!    i2c->dev->ctr.ms_mode = 1; // master!    i2c->queuePos=0;    i2c->errorByteCnt=0;    i2c->errorQueue = 0;    uint32_t totalBytes=0; // total number of bytes to be Moved!    // convert address field to required I2C format    while(i2c->queuePos < i2c->queueCount) { // need to push these address modes upstream, to AddQueue        I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];        uint16_t taddr=0;        if(tdq->ctrl.addrReq ==2) { // 10bit address            taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);        } else { // 7bit address            taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;        }        tdq->ctrl.addr = taddr; // all fixed with R/W bit        totalBytes += tdq->length + tdq->ctrl.addrReq; // total number of byte to be moved!    }    i2c->queuePos=0;    fillCmdQueue(i2c,false); // don't enable Tx/RX irq's    // start adding command[], END irq will keep it full    //Data Fifo will be filled after trans_start is issued    i2c->exitCode=0;    I2C_FIFO_CONF_t f;    f.val = i2c->dev->fifo_conf.val;    f.rx_fifo_rst = 1; // fifo in reset    f.tx_fifo_rst = 1; // fifo in reset    f.nonfifo_en = 0; // use fifo mode    f.nonfifo_tx_thres = 31;    // need to adjust threshold based on I2C clock rate, at 100k, 30 usually works,    // sometimes the emptyRx() actually moves 31 bytes    // it hasn't overflowed yet, I cannot tell if the new byte is added while    // emptyRX() is executing or before?  // let i2cSetFrequency() set thrhds  //   f.rx_fifo_full_thrhd = 30; // 30 bytes before INT is issued  //  f.tx_fifo_empty_thrhd = 0;    f.fifo_addr_cfg_en = 0; // no directed access    i2c->dev->fifo_conf.val = f.val; // post them all    f.rx_fifo_rst = 0; // release fifo    f.tx_fifo_rst = 0;    i2c->dev->fifo_conf.val = f.val; // post them all    i2c->stage = I2C_STARTUP; // everything configured, now start the I2C StateMachine, and    // As soon as interrupts are enabled, the ISR will start handling them.    // it should receive a TXFIFO_EMPTY immediately, even before it    // receives the TRANS_START    uint32_t interruptsEnabled =        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA;  // (BIT(0))     trigger emptyRxFifo()    i2c->dev->int_ena.val = interruptsEnabled;    if(!i2c->intr_handle) { // create ISR for either peripheral        // log_i("create ISR %d",i2c->num);        uint32_t ret = 0;        uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED;   //< Low and medium prio interrupts. These can be handled in C.        if(i2c->num) {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        } else {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }        if(ret!=ESP_OK) {            log_e("install interrupt handler Failed=%d",ret);            I2C_MUTEX_UNLOCK();            return I2C_ERROR_MEMORY;        }    }    //hang until it completes.    // how many ticks should it take to transfer totalBytes through the I2C hardware,    // add user supplied timeOutMillis to Calculated Value    portTickType ticksTimeOut = ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS;    i2c->dev->ctr.trans_start=1; // go for it#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_ERROR    portTickType tBefore=xTaskGetTickCount();#endif    // wait for ISR to complete the transfer, or until timeOut in case of bus fault, hardware problem    uint32_t eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut);#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_ERROR    portTickType tAfter=xTaskGetTickCount();#endif    // if xEventGroupSetBitsFromISR() failed, the ISR could have succeeded but never been    // able to mark the success    if(i2c->exitCode!=eBits) { // try to recover from O/S failure        //  log_e("EventGroup Failed:%p!=%p",eBits,i2c->exitCode);        eBits=i2c->exitCode;    }    if((eBits&EVENT_ERROR)||(!(eBits & EVENT_DONE))){ // need accurate errorByteCnt for debug      i2c_update_error_byte_cnt(i2c);    }    if(!(eBits==EVENT_DONE)&&(eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE))) { // not only Done, therefore error, exclude ADDR NAK, DATA_NAK#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO        i2cDumpI2c(i2c);        i2cDumpInts(i2c->num);#endif    }    if(eBits&EVENT_DONE) { // no gross timeout        switch(i2c->error) {        case I2C_OK :            reason = I2C_ERROR_OK;            break;        case I2C_ERROR :            reason = I2C_ERROR_DEV;            break;        case I2C_ADDR_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_DATA_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_ARBITRATION:            reason = I2C_ERROR_BUS;            break;        case I2C_TIMEOUT:            reason = I2C_ERROR_TIMEOUT;            break;        default :            reason = I2C_ERROR_DEV;        }    } else { // GROSS timeout, shutdown ISR , report Timeout        i2c->stage = I2C_DONE;        i2c->dev->int_ena.val =0;        i2c->dev->int_clr.val = 0x1FFF;        i2c_update_error_byte_cnt(i2c);        if((i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)) { // Bus Busy no bytes Moved            reason = I2C_ERROR_BUSY;            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        } else { // just a timeout, some data made it out or in.            reason = I2C_ERROR_TIMEOUT;            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }    }    /* offloading all EventGroups to dispatch, EventGroups in ISR is not always successful     11/20/2017       if error, need to trigger all succeeding dataQueue events with the EVENT_ERROR_PREV     07/22/2018       Need to use the queueEvent value to identify transaction blocks, if an error occurs,       all subsequent queue items with the same queueEvent value will receive the EVENT_ERROR_PREV.       But, ProcQue should re-queue queue items that have a different queueEvent value(different transaction)       This change will support multi-thread i2c usage.  Use the queueEvent as the transaction event       identifier.    */    uint32_t b = 0;    while(b < i2c->queueCount) {        if(i2c->dq[b].ctrl.mode==1 && readCount) {            *readCount += i2c->dq[b].position; // number of data bytes received        }        if(b < i2c->queuePos) { // before any error            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }        } else if(b == i2c->queuePos) { // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        } else { // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }        b++;    }    if(i2c->debugFlags & 0x00ff0000) i2cTriggerDumps(i2c,(i2c->debugFlags>>16),"after ProcQueue");    I2C_MUTEX_UNLOCK();    return reason;}
i2c_err_t
i2c_err_t
i2cProcQueue(i2c_t * i2c, uint32_t *readCount, uint16_t timeOutMillis)
i2cProcQueue
i2c_t * i2c
i2c_t
i2c_t
* i2c
*
i2c
uint32_t *readCount
uint32_t
uint32_t
*readCount
*
readCount
uint16_t timeOutMillis
uint16_t
uint16_t
timeOutMillis
timeOutMillis
{    /* do the hard stuff here    install ISR if necessary    setup EventGroup    handle bus busy?     */    //log_e("procQueue i2c=%p",&i2c);    if(readCount){ //total reads accomplished in all queue elements        *readCount = 0;    }    if(i2c == NULL) {        return I2C_ERROR_DEV;    }    if(i2c->debugFlags & 0xff000000) i2cTriggerDumps(i2c,(i2c->debugFlags>>24),"before ProcQueue");    if (i2c->dev->status_reg.bus_busy) { // return error, let TwoWire() handle resetting the hardware.        /* if multi master then this if should be changed to this 03/12/2018        if(multiMaster){// try to let the bus clear by its self            uint32_t timeOutTick = millis();            while((i2c->dev->status_reg.bus_busy)&&(millis()-timeOutTick<timeOutMillis())){              delay(2); // allow task switch            }        }        if(i2c->dev->status_reg.bus_busy){ // still busy, so die             */        log_i("Bus busy, reinit");        return I2C_ERROR_BUSY;    }    I2C_MUTEX_LOCK();    /* what about co-existence with SLAVE mode?    Should I check if a slaveMode xfer is in progress and hang    until it completes?    if i2c->stage == I2C_RUNNING or I2C_SLAVE_ACTIVE     */    i2c->stage = I2C_DONE; // until ready#if (ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO) && (defined ENABLE_I2C_DEBUG_BUFFER)    for(uint16_t i=0; i<INTBUFFMAX; i++) {        intBuff[i][0][i2c->num] = 0;        intBuff[i][1][i2c->num] = 0;        intBuff[i][2][i2c->num] = 0;    }    intPos[i2c->num] = 0;    fifoPos = 0;    memset(fifoBuffer,0,FIFOMAX);#endif    // EventGroup is used to signal transmission completion from ISR    // not always reliable. Sometimes, the FreeRTOS scheduler is maxed out and refuses request    // if that happens, this call hangs until the timeout period expires, then it continues.    if(!i2c->i2c_event) {        i2c->i2c_event = xEventGroupCreate();    }    if(i2c->i2c_event) {        xEventGroupClearBits(i2c->i2c_event, 0xFF);    } else { // failed to create EventGroup        log_e("eventCreate failed=%p",i2c->i2c_event);        I2C_MUTEX_UNLOCK();        return I2C_ERROR_MEMORY;    }    i2c_err_t reason = I2C_ERROR_OK;    i2c->mode = I2C_MASTER;    i2c->dev->ctr.trans_start=0; // Pause Machine    i2c->dev->timeout.tout = 0xFFFFF; // max 13ms    i2c->dev->int_clr.val = 0x1FFF; // kill them All!    i2c->dev->ctr.ms_mode = 1; // master!    i2c->queuePos=0;    i2c->errorByteCnt=0;    i2c->errorQueue = 0;    uint32_t totalBytes=0; // total number of bytes to be Moved!    // convert address field to required I2C format    while(i2c->queuePos < i2c->queueCount) { // need to push these address modes upstream, to AddQueue        I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];        uint16_t taddr=0;        if(tdq->ctrl.addrReq ==2) { // 10bit address            taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);        } else { // 7bit address            taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;        }        tdq->ctrl.addr = taddr; // all fixed with R/W bit        totalBytes += tdq->length + tdq->ctrl.addrReq; // total number of byte to be moved!    }    i2c->queuePos=0;    fillCmdQueue(i2c,false); // don't enable Tx/RX irq's    // start adding command[], END irq will keep it full    //Data Fifo will be filled after trans_start is issued    i2c->exitCode=0;    I2C_FIFO_CONF_t f;    f.val = i2c->dev->fifo_conf.val;    f.rx_fifo_rst = 1; // fifo in reset    f.tx_fifo_rst = 1; // fifo in reset    f.nonfifo_en = 0; // use fifo mode    f.nonfifo_tx_thres = 31;    // need to adjust threshold based on I2C clock rate, at 100k, 30 usually works,    // sometimes the emptyRx() actually moves 31 bytes    // it hasn't overflowed yet, I cannot tell if the new byte is added while    // emptyRX() is executing or before?  // let i2cSetFrequency() set thrhds  //   f.rx_fifo_full_thrhd = 30; // 30 bytes before INT is issued  //  f.tx_fifo_empty_thrhd = 0;    f.fifo_addr_cfg_en = 0; // no directed access    i2c->dev->fifo_conf.val = f.val; // post them all    f.rx_fifo_rst = 0; // release fifo    f.tx_fifo_rst = 0;    i2c->dev->fifo_conf.val = f.val; // post them all    i2c->stage = I2C_STARTUP; // everything configured, now start the I2C StateMachine, and    // As soon as interrupts are enabled, the ISR will start handling them.    // it should receive a TXFIFO_EMPTY immediately, even before it    // receives the TRANS_START    uint32_t interruptsEnabled =        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA;  // (BIT(0))     trigger emptyRxFifo()    i2c->dev->int_ena.val = interruptsEnabled;    if(!i2c->intr_handle) { // create ISR for either peripheral        // log_i("create ISR %d",i2c->num);        uint32_t ret = 0;        uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED;   //< Low and medium prio interrupts. These can be handled in C.        if(i2c->num) {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        } else {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }        if(ret!=ESP_OK) {            log_e("install interrupt handler Failed=%d",ret);            I2C_MUTEX_UNLOCK();            return I2C_ERROR_MEMORY;        }    }    //hang until it completes.    // how many ticks should it take to transfer totalBytes through the I2C hardware,    // add user supplied timeOutMillis to Calculated Value    portTickType ticksTimeOut = ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS;    i2c->dev->ctr.trans_start=1; // go for it#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_ERROR    portTickType tBefore=xTaskGetTickCount();#endif    // wait for ISR to complete the transfer, or until timeOut in case of bus fault, hardware problem    uint32_t eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut);#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_ERROR    portTickType tAfter=xTaskGetTickCount();#endif    // if xEventGroupSetBitsFromISR() failed, the ISR could have succeeded but never been    // able to mark the success    if(i2c->exitCode!=eBits) { // try to recover from O/S failure        //  log_e("EventGroup Failed:%p!=%p",eBits,i2c->exitCode);        eBits=i2c->exitCode;    }    if((eBits&EVENT_ERROR)||(!(eBits & EVENT_DONE))){ // need accurate errorByteCnt for debug      i2c_update_error_byte_cnt(i2c);    }    if(!(eBits==EVENT_DONE)&&(eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE))) { // not only Done, therefore error, exclude ADDR NAK, DATA_NAK#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO        i2cDumpI2c(i2c);        i2cDumpInts(i2c->num);#endif    }    if(eBits&EVENT_DONE) { // no gross timeout        switch(i2c->error) {        case I2C_OK :            reason = I2C_ERROR_OK;            break;        case I2C_ERROR :            reason = I2C_ERROR_DEV;            break;        case I2C_ADDR_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_DATA_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_ARBITRATION:            reason = I2C_ERROR_BUS;            break;        case I2C_TIMEOUT:            reason = I2C_ERROR_TIMEOUT;            break;        default :            reason = I2C_ERROR_DEV;        }    } else { // GROSS timeout, shutdown ISR , report Timeout        i2c->stage = I2C_DONE;        i2c->dev->int_ena.val =0;        i2c->dev->int_clr.val = 0x1FFF;        i2c_update_error_byte_cnt(i2c);        if((i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)) { // Bus Busy no bytes Moved            reason = I2C_ERROR_BUSY;            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        } else { // just a timeout, some data made it out or in.            reason = I2C_ERROR_TIMEOUT;            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }    }    /* offloading all EventGroups to dispatch, EventGroups in ISR is not always successful     11/20/2017       if error, need to trigger all succeeding dataQueue events with the EVENT_ERROR_PREV     07/22/2018       Need to use the queueEvent value to identify transaction blocks, if an error occurs,       all subsequent queue items with the same queueEvent value will receive the EVENT_ERROR_PREV.       But, ProcQue should re-queue queue items that have a different queueEvent value(different transaction)       This change will support multi-thread i2c usage.  Use the queueEvent as the transaction event       identifier.    */    uint32_t b = 0;    while(b < i2c->queueCount) {        if(i2c->dq[b].ctrl.mode==1 && readCount) {            *readCount += i2c->dq[b].position; // number of data bytes received        }        if(b < i2c->queuePos) { // before any error            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }        } else if(b == i2c->queuePos) { // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        } else { // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }        b++;    }    if(i2c->debugFlags & 0x00ff0000) i2cTriggerDumps(i2c,(i2c->debugFlags>>16),"after ProcQueue");    I2C_MUTEX_UNLOCK();    return reason;}
if(readCount){ //total reads accomplished in all queue elements        *readCount = 0;    }
readCount
readCount
{ //total reads accomplished in all queue elements        *readCount = 0;    }
*readCount = 0;
*readCount = 0
*readCount
readCount
readCount
0
if(i2c == NULL) {        return I2C_ERROR_DEV;    }
i2c == NULL
i2c
i2c
NULL
NULL
{        return I2C_ERROR_DEV;    }
return I2C_ERROR_DEV;
I2C_ERROR_DEV
I2C_ERROR_DEV
if(i2c->debugFlags & 0xff000000) i2cTriggerDumps(i2c,(i2c->debugFlags>>24),"before ProcQueue");
i2c->debugFlags & 0xff000000
i2c->debugFlags
i2c
i2c
debugFlags
0xff000000
i2cTriggerDumps(i2c,(i2c->debugFlags>>24),"before ProcQueue");
i2cTriggerDumps(i2c,(i2c->debugFlags>>24),"before ProcQueue")
i2cTriggerDumps
i2cTriggerDumps
i2c
i2c
(i2c->debugFlags>>24)
i2c->debugFlags>>24
i2c->debugFlags
i2c
i2c
debugFlags
24
"before ProcQueue"
if (i2c->dev->status_reg.bus_busy) { // return error, let TwoWire() handle resetting the hardware.        /* if multi master then this if should be changed to this 03/12/2018        if(multiMaster){// try to let the bus clear by its self            uint32_t timeOutTick = millis();            while((i2c->dev->status_reg.bus_busy)&&(millis()-timeOutTick<timeOutMillis())){              delay(2); // allow task switch            }        }        if(i2c->dev->status_reg.bus_busy){ // still busy, so die             */        log_i("Bus busy, reinit");        return I2C_ERROR_BUSY;    }
i2c->dev->status_reg.bus_busy
i2c->dev->status_reg
i2c->dev
i2c
i2c
dev
status_reg
bus_busy
{ // return error, let TwoWire() handle resetting the hardware.        /* if multi master then this if should be changed to this 03/12/2018        if(multiMaster){// try to let the bus clear by its self            uint32_t timeOutTick = millis();            while((i2c->dev->status_reg.bus_busy)&&(millis()-timeOutTick<timeOutMillis())){              delay(2); // allow task switch            }        }        if(i2c->dev->status_reg.bus_busy){ // still busy, so die             */        log_i("Bus busy, reinit");        return I2C_ERROR_BUSY;    }
log_i("Bus busy, reinit");
log_i("Bus busy, reinit")
log_i
log_i
"Bus busy, reinit"
return I2C_ERROR_BUSY;
I2C_ERROR_BUSY
I2C_ERROR_BUSY
I2C_MUTEX_LOCK();
I2C_MUTEX_LOCK()
I2C_MUTEX_LOCK
I2C_MUTEX_LOCK
i2c->stage = I2C_DONE;
i2c->stage = I2C_DONE
i2c->stage
i2c
i2c
stage
I2C_DONE
I2C_DONE
if(!i2c->i2c_event) {        i2c->i2c_event = xEventGroupCreate();    }
!i2c->i2c_event
i2c->i2c_event
i2c
i2c
i2c_event
{        i2c->i2c_event = xEventGroupCreate();    }
i2c->i2c_event = xEventGroupCreate();
i2c->i2c_event = xEventGroupCreate()
i2c->i2c_event
i2c
i2c
i2c_event
xEventGroupCreate()
xEventGroupCreate
xEventGroupCreate
if(i2c->i2c_event) {        xEventGroupClearBits(i2c->i2c_event, 0xFF);    } else { // failed to create EventGroup        log_e("eventCreate failed=%p",i2c->i2c_event);        I2C_MUTEX_UNLOCK();        return I2C_ERROR_MEMORY;    }
i2c->i2c_event
i2c
i2c
i2c_event
{        xEventGroupClearBits(i2c->i2c_event, 0xFF);    }
xEventGroupClearBits(i2c->i2c_event, 0xFF);
xEventGroupClearBits(i2c->i2c_event, 0xFF)
xEventGroupClearBits
xEventGroupClearBits
i2c->i2c_event
i2c
i2c
i2c_event
0xFF
{ // failed to create EventGroup        log_e("eventCreate failed=%p",i2c->i2c_event);        I2C_MUTEX_UNLOCK();        return I2C_ERROR_MEMORY;    }
log_e("eventCreate failed=%p",i2c->i2c_event);
log_e("eventCreate failed=%p",i2c->i2c_event)
log_e
log_e
"eventCreate failed=%p"
i2c->i2c_event
i2c
i2c
i2c_event
I2C_MUTEX_UNLOCK();
I2C_MUTEX_UNLOCK()
I2C_MUTEX_UNLOCK
I2C_MUTEX_UNLOCK
return I2C_ERROR_MEMORY;
I2C_ERROR_MEMORY
I2C_ERROR_MEMORY
i2c_err_t reason = I2C_ERROR_OK;
i2c_err_t reason = I2C_ERROR_OK;
i2c_err_t
i2c_err_t
reason = I2C_ERROR_OK
reason
= I2C_ERROR_OK
I2C_ERROR_OK
I2C_ERROR_OK
i2c->mode = I2C_MASTER;
i2c->mode = I2C_MASTER
i2c->mode
i2c
i2c
mode
I2C_MASTER
I2C_MASTER
i2c->dev->ctr.trans_start=0;
i2c->dev->ctr.trans_start=0
i2c->dev->ctr.trans_start
i2c->dev->ctr
i2c->dev
i2c
i2c
dev
ctr
trans_start
0
i2c->dev->timeout.tout = 0xFFFFF;
i2c->dev->timeout.tout = 0xFFFFF
i2c->dev->timeout.tout
i2c->dev->timeout
i2c->dev
i2c
i2c
dev
timeout
tout
0xFFFFF
i2c->dev->int_clr.val = 0x1FFF;
i2c->dev->int_clr.val = 0x1FFF
i2c->dev->int_clr.val
i2c->dev->int_clr
i2c->dev
i2c
i2c
dev
int_clr
val
0x1FFF
i2c->dev->ctr.ms_mode = 1;
i2c->dev->ctr.ms_mode = 1
i2c->dev->ctr.ms_mode
i2c->dev->ctr
i2c->dev
i2c
i2c
dev
ctr
ms_mode
1
i2c->queuePos=0;
i2c->queuePos=0
i2c->queuePos
i2c
i2c
queuePos
0
i2c->errorByteCnt=0;
i2c->errorByteCnt=0
i2c->errorByteCnt
i2c
i2c
errorByteCnt
0
i2c->errorQueue = 0;
i2c->errorQueue = 0
i2c->errorQueue
i2c
i2c
errorQueue
0
uint32_t totalBytes=0;
uint32_t totalBytes=0;
uint32_t
uint32_t
totalBytes=0
totalBytes
=0
0
while(i2c->queuePos < i2c->queueCount) { // need to push these address modes upstream, to AddQueue        I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];        uint16_t taddr=0;        if(tdq->ctrl.addrReq ==2) { // 10bit address            taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);        } else { // 7bit address            taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;        }        tdq->ctrl.addr = taddr; // all fixed with R/W bit        totalBytes += tdq->length + tdq->ctrl.addrReq; // total number of byte to be moved!    }
i2c->queuePos < i2c->queueCount
i2c->queuePos
i2c
i2c
queuePos
i2c->queueCount
i2c
i2c
queueCount
{ // need to push these address modes upstream, to AddQueue        I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];        uint16_t taddr=0;        if(tdq->ctrl.addrReq ==2) { // 10bit address            taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);        } else { // 7bit address            taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;        }        tdq->ctrl.addr = taddr; // all fixed with R/W bit        totalBytes += tdq->length + tdq->ctrl.addrReq; // total number of byte to be moved!    }
I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];
I2C_DATA_QUEUE_t *tdq = &i2c->dq[i2c->queuePos++];
I2C_DATA_QUEUE_t
I2C_DATA_QUEUE_t
*tdq = &i2c->dq[i2c->queuePos++]
*
tdq
= &i2c->dq[i2c->queuePos++]
&i2c->dq[i2c->queuePos++]
i2c->dq[i2c->queuePos++]
i2c->dq
i2c
i2c
dq
i2c->queuePos++
i2c->queuePos
i2c
i2c
queuePos
uint16_t taddr=0;
uint16_t taddr=0;
uint16_t
uint16_t
taddr=0
taddr
=0
0
if(tdq->ctrl.addrReq ==2) { // 10bit address            taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);        } else { // 7bit address            taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;        }
tdq->ctrl.addrReq ==2
tdq->ctrl.addrReq
tdq->ctrl
tdq
tdq
ctrl
addrReq
2
{ // 10bit address            taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;            taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);        }
taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode;
taddr =((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode
taddr
taddr
((tdq->ctrl.addr >> 7) & 0xFE)                   |tdq->ctrl.mode
((tdq->ctrl.addr >> 7) & 0xFE)
(tdq->ctrl.addr >> 7) & 0xFE
(tdq->ctrl.addr >> 7)
tdq->ctrl.addr >> 7
tdq->ctrl.addr
tdq->ctrl
tdq
tdq
ctrl
addr
7
0xFE
tdq->ctrl.mode
tdq->ctrl
tdq
tdq
ctrl
mode
taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF);
taddr = (taddr <<8) || (tdq->ctrl.addr&0xFF)
taddr
taddr
(taddr <<8) || (tdq->ctrl.addr&0xFF)
(taddr <<8)
taddr <<8
taddr
taddr
8
(tdq->ctrl.addr&0xFF)
tdq->ctrl.addr&0xFF
tdq->ctrl.addr
tdq->ctrl
tdq
tdq
ctrl
addr
0xFF
{ // 7bit address            taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;        }
taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode;
taddr =  ((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode
taddr
taddr
((tdq->ctrl.addr<<1)&0xFE)                     |tdq->ctrl.mode
((tdq->ctrl.addr<<1)&0xFE)
(tdq->ctrl.addr<<1)&0xFE
(tdq->ctrl.addr<<1)
tdq->ctrl.addr<<1
tdq->ctrl.addr
tdq->ctrl
tdq
tdq
ctrl
addr
1
0xFE
tdq->ctrl.mode
tdq->ctrl
tdq
tdq
ctrl
mode
tdq->ctrl.addr = taddr;
tdq->ctrl.addr = taddr
tdq->ctrl.addr
tdq->ctrl
tdq
tdq
ctrl
addr
taddr
taddr
totalBytes += tdq->length + tdq->ctrl.addrReq;
totalBytes += tdq->length + tdq->ctrl.addrReq
totalBytes
totalBytes
tdq->length + tdq->ctrl.addrReq
tdq->length
tdq
tdq
length
tdq->ctrl.addrReq
tdq->ctrl
tdq
tdq
ctrl
addrReq
i2c->queuePos=0;
i2c->queuePos=0
i2c->queuePos
i2c
i2c
queuePos
0
fillCmdQueue(i2c,false);
fillCmdQueue(i2c,false)
fillCmdQueue
fillCmdQueue
i2c
i2c
false
i2c->exitCode=0;
i2c->exitCode=0
i2c->exitCode
i2c
i2c
exitCode
0
I2C_FIFO_CONF_t f;
I2C_FIFO_CONF_t f;
I2C_FIFO_CONF_t
I2C_FIFO_CONF_t
f
f
f.val = i2c->dev->fifo_conf.val;
f.val = i2c->dev->fifo_conf.val
f.val
f
f
val
i2c->dev->fifo_conf.val
i2c->dev->fifo_conf
i2c->dev
i2c
i2c
dev
fifo_conf
val
f.rx_fifo_rst = 1;
f.rx_fifo_rst = 1
f.rx_fifo_rst
f
f
rx_fifo_rst
1
f.tx_fifo_rst = 1;
f.tx_fifo_rst = 1
f.tx_fifo_rst
f
f
tx_fifo_rst
1
f.nonfifo_en = 0;
f.nonfifo_en = 0
f.nonfifo_en
f
f
nonfifo_en
0
f.nonfifo_tx_thres = 31;
f.nonfifo_tx_thres = 31
f.nonfifo_tx_thres
f
f
nonfifo_tx_thres
31
f.fifo_addr_cfg_en = 0;
f.fifo_addr_cfg_en = 0
f.fifo_addr_cfg_en
f
f
fifo_addr_cfg_en
0
i2c->dev->fifo_conf.val = f.val;
i2c->dev->fifo_conf.val = f.val
i2c->dev->fifo_conf.val
i2c->dev->fifo_conf
i2c->dev
i2c
i2c
dev
fifo_conf
val
f.val
f
f
val
f.rx_fifo_rst = 0;
f.rx_fifo_rst = 0
f.rx_fifo_rst
f
f
rx_fifo_rst
0
f.tx_fifo_rst = 0;
f.tx_fifo_rst = 0
f.tx_fifo_rst
f
f
tx_fifo_rst
0
i2c->dev->fifo_conf.val = f.val;
i2c->dev->fifo_conf.val = f.val
i2c->dev->fifo_conf.val
i2c->dev->fifo_conf
i2c->dev
i2c
i2c
dev
fifo_conf
val
f.val
f
f
val
i2c->stage = I2C_STARTUP;
i2c->stage = I2C_STARTUP
i2c->stage
i2c
i2c
stage
I2C_STARTUP
I2C_STARTUP
uint32_t interruptsEnabled =        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA;
uint32_t interruptsEnabled =        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA;
uint32_t
uint32_t
interruptsEnabled =        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA
interruptsEnabled
=        I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1))    triggers fillTxFifo()        I2C_RXFIFO_FULL_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2))  unhandled        I2C_TXFIFO_EMPTY_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA  | // (BIT(3))   refills cmd[] list        I2C_RXFIFO_OVF_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4))  unhandled        I2C_END_DETECT_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5))  cause fatal error exit        I2C_SLAVE_TRAN_COMP_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7))  triggered by STOP, successful exit        I2C_ARBITRATION_LOST_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA  | //(BIT(8))  Trigger by SLAVE SCL stretching, NOT an ERROR        I2C_TRANS_COMPLETE_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA | // (BIT(9))  Triggered by trans_start=1, initial,END        I2C_TIME_OUT_INT_ENA
I2C_ACK_ERR_INT_ENA | // (BIT(10))  Causes Fatal Error Exit        I2C_TRANS_START_INT_ENA
I2C_ACK_ERR_INT_ENA
I2C_ACK_ERR_INT_ENA
I2C_TRANS_START_INT_ENA
I2C_TRANS_START_INT_ENA
I2C_TIME_OUT_INT_ENA
I2C_TIME_OUT_INT_ENA
I2C_TRANS_COMPLETE_INT_ENA
I2C_TRANS_COMPLETE_INT_ENA
I2C_ARBITRATION_LOST_INT_ENA
I2C_ARBITRATION_LOST_INT_ENA
I2C_SLAVE_TRAN_COMP_INT_ENA
I2C_SLAVE_TRAN_COMP_INT_ENA
I2C_END_DETECT_INT_ENA
I2C_END_DETECT_INT_ENA
I2C_RXFIFO_OVF_INT_ENA
I2C_RXFIFO_OVF_INT_ENA
I2C_TXFIFO_EMPTY_INT_ENA
I2C_TXFIFO_EMPTY_INT_ENA
I2C_RXFIFO_FULL_INT_ENA
I2C_RXFIFO_FULL_INT_ENA
i2c->dev->int_ena.val = interruptsEnabled;
i2c->dev->int_ena.val = interruptsEnabled
i2c->dev->int_ena.val
i2c->dev->int_ena
i2c->dev
i2c
i2c
dev
int_ena
val
interruptsEnabled
interruptsEnabled
if(!i2c->intr_handle) { // create ISR for either peripheral        // log_i("create ISR %d",i2c->num);        uint32_t ret = 0;        uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED;   //< Low and medium prio interrupts. These can be handled in C.        if(i2c->num) {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        } else {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }        if(ret!=ESP_OK) {            log_e("install interrupt handler Failed=%d",ret);            I2C_MUTEX_UNLOCK();            return I2C_ERROR_MEMORY;        }    }
!i2c->intr_handle
i2c->intr_handle
i2c
i2c
intr_handle
{ // create ISR for either peripheral        // log_i("create ISR %d",i2c->num);        uint32_t ret = 0;        uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED;   //< Low and medium prio interrupts. These can be handled in C.        if(i2c->num) {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        } else {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }        if(ret!=ESP_OK) {            log_e("install interrupt handler Failed=%d",ret);            I2C_MUTEX_UNLOCK();            return I2C_ERROR_MEMORY;        }    }
uint32_t ret = 0;
uint32_t ret = 0;
uint32_t
uint32_t
ret = 0
ret
= 0
0
uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED;
uint32_t flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED;
uint32_t
uint32_t
flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED
flags
= ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED
ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled          ESP_INTR_FLAG_LOWMED
ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt          ESP_INTR_FLAG_IRAM
ESP_INTR_FLAG_EDGE
ESP_INTR_FLAG_EDGE
ESP_INTR_FLAG_IRAM
ESP_INTR_FLAG_IRAM
ESP_INTR_FLAG_LOWMED
ESP_INTR_FLAG_LOWMED
if(i2c->num) {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        } else {            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }
i2c->num
i2c
i2c
num
{            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }
ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);
ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle)
ret
ret
esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle)
esp_intr_alloc_intrstatus
esp_intr_alloc_intrstatus
ETS_I2C_EXT1_INTR_SOURCE
ETS_I2C_EXT1_INTR_SOURCE
flags
flags
(uint32_t)&i2c->dev->int_status.val
(uint32_t)
uint32_t
uint32_t
i2c->dev->int_status.val
i2c->dev->int_status
i2c->dev
i2c
i2c
dev
int_status
val
interruptsEnabled
interruptsEnabled
&i2c_isr_handler_default
i2c_isr_handler_default
i2c_isr_handler_default
i2c
i2c
&i2c->intr_handle
i2c->intr_handle
i2c
i2c
intr_handle
{            ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);        }
ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle);
ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle)
ret
ret
esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)&i2c->dev->int_status.val, interruptsEnabled, &i2c_isr_handler_default,i2c, &i2c->intr_handle)
esp_intr_alloc_intrstatus
esp_intr_alloc_intrstatus
ETS_I2C_EXT0_INTR_SOURCE
ETS_I2C_EXT0_INTR_SOURCE
flags
flags
(uint32_t)&i2c->dev->int_status.val
(uint32_t)
uint32_t
uint32_t
i2c->dev->int_status.val
i2c->dev->int_status
i2c->dev
i2c
i2c
dev
int_status
val
interruptsEnabled
interruptsEnabled
&i2c_isr_handler_default
i2c_isr_handler_default
i2c_isr_handler_default
i2c
i2c
&i2c->intr_handle
i2c->intr_handle
i2c
i2c
intr_handle
if(ret!=ESP_OK) {            log_e("install interrupt handler Failed=%d",ret);            I2C_MUTEX_UNLOCK();            return I2C_ERROR_MEMORY;        }
ret!=ESP_OK
ret
ret
ESP_OK
ESP_OK
{            log_e("install interrupt handler Failed=%d",ret);            I2C_MUTEX_UNLOCK();            return I2C_ERROR_MEMORY;        }
log_e("install interrupt handler Failed=%d",ret);
log_e("install interrupt handler Failed=%d",ret)
log_e
log_e
"install interrupt handler Failed=%d"
ret
ret
I2C_MUTEX_UNLOCK();
I2C_MUTEX_UNLOCK()
I2C_MUTEX_UNLOCK
I2C_MUTEX_UNLOCK
return I2C_ERROR_MEMORY;
I2C_ERROR_MEMORY
I2C_ERROR_MEMORY
portTickType ticksTimeOut = ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS;
portTickType ticksTimeOut = ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS;
portTickType
portTickType
ticksTimeOut = ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS
ticksTimeOut
= ((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS
((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)/portTICK_PERIOD_MS
((totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis)
(totalBytes*10*1000)/(i2cGetFrequency(i2c))+timeOutMillis
(totalBytes*10*1000)/(i2cGetFrequency(i2c))
(totalBytes*10*1000)
totalBytes*10*1000
totalBytes*10
totalBytes
totalBytes
10
1000
(i2cGetFrequency(i2c))
i2cGetFrequency(i2c)
i2cGetFrequency
i2cGetFrequency
i2c
i2c
timeOutMillis
timeOutMillis
portTICK_PERIOD_MS
portTICK_PERIOD_MS
i2c->dev->ctr.trans_start=1;
i2c->dev->ctr.trans_start=1
i2c->dev->ctr.trans_start
i2c->dev->ctr
i2c->dev
i2c
i2c
dev
ctr
trans_start
1
portTickType tBefore=xTaskGetTickCount();
portTickType tBefore=xTaskGetTickCount();
portTickType
portTickType
tBefore=xTaskGetTickCount()
tBefore
=xTaskGetTickCount()
xTaskGetTickCount()
xTaskGetTickCount
xTaskGetTickCount
uint32_t eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut);
uint32_t eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut);
uint32_t
uint32_t
eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut)
eBits
= xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut)
xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut)
xEventGroupWaitBits
xEventGroupWaitBits
i2c->i2c_event
i2c
i2c
i2c_event
EVENT_DONE
EVENT_DONE
pdFALSE
pdFALSE
pdTRUE
pdTRUE
ticksTimeOut
ticksTimeOut
portTickType tAfter=xTaskGetTickCount();
portTickType tAfter=xTaskGetTickCount();
portTickType
portTickType
tAfter=xTaskGetTickCount()
tAfter
=xTaskGetTickCount()
xTaskGetTickCount()
xTaskGetTickCount
xTaskGetTickCount
if(i2c->exitCode!=eBits) { // try to recover from O/S failure        //  log_e("EventGroup Failed:%p!=%p",eBits,i2c->exitCode);        eBits=i2c->exitCode;    }
i2c->exitCode!=eBits
i2c->exitCode
i2c
i2c
exitCode
eBits
eBits
{ // try to recover from O/S failure        //  log_e("EventGroup Failed:%p!=%p",eBits,i2c->exitCode);        eBits=i2c->exitCode;    }
eBits=i2c->exitCode;
eBits=i2c->exitCode
eBits
eBits
i2c->exitCode
i2c
i2c
exitCode
if((eBits&EVENT_ERROR)||(!(eBits & EVENT_DONE))){ // need accurate errorByteCnt for debug      i2c_update_error_byte_cnt(i2c);    }
(eBits&EVENT_ERROR)||(!(eBits & EVENT_DONE))
(eBits&EVENT_ERROR)
eBits&EVENT_ERROR
eBits
eBits
EVENT_ERROR
EVENT_ERROR
(!(eBits & EVENT_DONE))
!(eBits & EVENT_DONE)
(eBits & EVENT_DONE)
eBits & EVENT_DONE
eBits
eBits
EVENT_DONE
EVENT_DONE
{ // need accurate errorByteCnt for debug      i2c_update_error_byte_cnt(i2c);    }
i2c_update_error_byte_cnt(i2c);
i2c_update_error_byte_cnt(i2c)
i2c_update_error_byte_cnt
i2c_update_error_byte_cnt
i2c
i2c
if(!(eBits==EVENT_DONE)&&(eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE))) { // not only Done, therefore error, exclude ADDR NAK, DATA_NAK#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO        i2cDumpI2c(i2c);        i2cDumpInts(i2c->num);#endif    }
!(eBits==EVENT_DONE)&&(eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE))
!(eBits==EVENT_DONE)
(eBits==EVENT_DONE)
eBits==EVENT_DONE
eBits
eBits
EVENT_DONE
EVENT_DONE
(eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE))
eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
eBits
eBits
~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE
EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR
EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK
EVENT_ERROR_NAK
EVENT_ERROR_NAK
EVENT_ERROR_DATA_NAK
EVENT_ERROR_DATA_NAK
EVENT_ERROR
EVENT_ERROR
EVENT_DONE
EVENT_DONE
{ // not only Done, therefore error, exclude ADDR NAK, DATA_NAK#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_INFO        i2cDumpI2c(i2c);        i2cDumpInts(i2c->num);#endif    }
i2cDumpI2c(i2c);
i2cDumpI2c(i2c)
i2cDumpI2c
i2cDumpI2c
i2c
i2c
i2cDumpInts(i2c->num);
i2cDumpInts(i2c->num)
i2cDumpInts
i2cDumpInts
i2c->num
i2c
i2c
num
if(eBits&EVENT_DONE) { // no gross timeout        switch(i2c->error) {        case I2C_OK :            reason = I2C_ERROR_OK;            break;        case I2C_ERROR :            reason = I2C_ERROR_DEV;            break;        case I2C_ADDR_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_DATA_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_ARBITRATION:            reason = I2C_ERROR_BUS;            break;        case I2C_TIMEOUT:            reason = I2C_ERROR_TIMEOUT;            break;        default :            reason = I2C_ERROR_DEV;        }    } else { // GROSS timeout, shutdown ISR , report Timeout        i2c->stage = I2C_DONE;        i2c->dev->int_ena.val =0;        i2c->dev->int_clr.val = 0x1FFF;        i2c_update_error_byte_cnt(i2c);        if((i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)) { // Bus Busy no bytes Moved            reason = I2C_ERROR_BUSY;            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        } else { // just a timeout, some data made it out or in.            reason = I2C_ERROR_TIMEOUT;            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }    }
eBits&EVENT_DONE
eBits
eBits
EVENT_DONE
EVENT_DONE
{ // no gross timeout        switch(i2c->error) {        case I2C_OK :            reason = I2C_ERROR_OK;            break;        case I2C_ERROR :            reason = I2C_ERROR_DEV;            break;        case I2C_ADDR_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_DATA_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_ARBITRATION:            reason = I2C_ERROR_BUS;            break;        case I2C_TIMEOUT:            reason = I2C_ERROR_TIMEOUT;            break;        default :            reason = I2C_ERROR_DEV;        }    }
switch(i2c->error) {        case I2C_OK :            reason = I2C_ERROR_OK;            break;        case I2C_ERROR :            reason = I2C_ERROR_DEV;            break;        case I2C_ADDR_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_DATA_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_ARBITRATION:            reason = I2C_ERROR_BUS;            break;        case I2C_TIMEOUT:            reason = I2C_ERROR_TIMEOUT;            break;        default :            reason = I2C_ERROR_DEV;        }
i2c->error
i2c
i2c
error
{        case I2C_OK :            reason = I2C_ERROR_OK;            break;        case I2C_ERROR :            reason = I2C_ERROR_DEV;            break;        case I2C_ADDR_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_DATA_NAK:            reason = I2C_ERROR_ACK;            break;        case I2C_ARBITRATION:            reason = I2C_ERROR_BUS;            break;        case I2C_TIMEOUT:            reason = I2C_ERROR_TIMEOUT;            break;        default :            reason = I2C_ERROR_DEV;        }
case I2C_OK :
I2C_OK
I2C_OK
reason = I2C_ERROR_OK;
reason = I2C_ERROR_OK
reason
reason
I2C_ERROR_OK
I2C_ERROR_OK
break;
case I2C_ERROR :
I2C_ERROR
I2C_ERROR
reason = I2C_ERROR_DEV;
reason = I2C_ERROR_DEV
reason
reason
I2C_ERROR_DEV
I2C_ERROR_DEV
break;
case I2C_ADDR_NAK:
I2C_ADDR_NAK
I2C_ADDR_NAK
reason = I2C_ERROR_ACK;
reason = I2C_ERROR_ACK
reason
reason
I2C_ERROR_ACK
I2C_ERROR_ACK
break;
case I2C_DATA_NAK:
I2C_DATA_NAK
I2C_DATA_NAK
reason = I2C_ERROR_ACK;
reason = I2C_ERROR_ACK
reason
reason
I2C_ERROR_ACK
I2C_ERROR_ACK
break;
case I2C_ARBITRATION:
I2C_ARBITRATION
I2C_ARBITRATION
reason = I2C_ERROR_BUS;
reason = I2C_ERROR_BUS
reason
reason
I2C_ERROR_BUS
I2C_ERROR_BUS
break;
case I2C_TIMEOUT:
I2C_TIMEOUT
I2C_TIMEOUT
reason = I2C_ERROR_TIMEOUT;
reason = I2C_ERROR_TIMEOUT
reason
reason
I2C_ERROR_TIMEOUT
I2C_ERROR_TIMEOUT
break;
default :
reason = I2C_ERROR_DEV;
reason = I2C_ERROR_DEV
reason
reason
I2C_ERROR_DEV
I2C_ERROR_DEV
{ // GROSS timeout, shutdown ISR , report Timeout        i2c->stage = I2C_DONE;        i2c->dev->int_ena.val =0;        i2c->dev->int_clr.val = 0x1FFF;        i2c_update_error_byte_cnt(i2c);        if((i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)) { // Bus Busy no bytes Moved            reason = I2C_ERROR_BUSY;            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        } else { // just a timeout, some data made it out or in.            reason = I2C_ERROR_TIMEOUT;            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }    }
i2c->stage = I2C_DONE;
i2c->stage = I2C_DONE
i2c->stage
i2c
i2c
stage
I2C_DONE
I2C_DONE
i2c->dev->int_ena.val =0;
i2c->dev->int_ena.val =0
i2c->dev->int_ena.val
i2c->dev->int_ena
i2c->dev
i2c
i2c
dev
int_ena
val
0
i2c->dev->int_clr.val = 0x1FFF;
i2c->dev->int_clr.val = 0x1FFF
i2c->dev->int_clr.val
i2c->dev->int_clr
i2c->dev
i2c
i2c
dev
int_clr
val
0x1FFF
i2c_update_error_byte_cnt(i2c);
i2c_update_error_byte_cnt(i2c)
i2c_update_error_byte_cnt
i2c_update_error_byte_cnt
i2c
i2c
if((i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)) { // Bus Busy no bytes Moved            reason = I2C_ERROR_BUSY;            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        } else { // just a timeout, some data made it out or in.            reason = I2C_ERROR_TIMEOUT;            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }
(i2c->errorByteCnt == 0)&&(i2c->errorQueue==0)
(i2c->errorByteCnt == 0)
i2c->errorByteCnt == 0
i2c->errorByteCnt
i2c
i2c
errorByteCnt
0
(i2c->errorQueue==0)
i2c->errorQueue==0
i2c->errorQueue
i2c
i2c
errorQueue
0
{ // Bus Busy no bytes Moved            reason = I2C_ERROR_BUSY;            eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }
reason = I2C_ERROR_BUSY;
reason = I2C_ERROR_BUSY
reason
reason
I2C_ERROR_BUSY
I2C_ERROR_BUSY
eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE;
eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE
eBits
eBits
eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE
eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR
eBits | EVENT_ERROR_BUS_BUSY
eBits
eBits
EVENT_ERROR_BUS_BUSY
EVENT_ERROR_BUS_BUSY
EVENT_ERROR
EVENT_ERROR
EVENT_DONE
EVENT_DONE
log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);
log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error)
log_d
log_d
" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d"
tBefore
tBefore
tAfter
tAfter
(tAfter-tBefore)
tAfter-tBefore
tAfter
tAfter
tBefore
tBefore
ticksTimeOut
ticksTimeOut
i2c->error
i2c
i2c
error
i2cDumpI2c(i2c);
i2cDumpI2c(i2c)
i2cDumpI2c
i2cDumpI2c
i2c
i2c
i2cDumpInts(i2c->num);
i2cDumpInts(i2c->num)
i2cDumpInts
i2cDumpInts
i2c->num
i2c
i2c
num
{ // just a timeout, some data made it out or in.            reason = I2C_ERROR_TIMEOUT;            eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;#if ARDUHAL_LOG_LEVEL >= ARDUHAL_LOG_LEVEL_DEBUG            log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);            i2cDumpI2c(i2c);            i2cDumpInts(i2c->num);#endif        }
reason = I2C_ERROR_TIMEOUT;
reason = I2C_ERROR_TIMEOUT
reason
reason
I2C_ERROR_TIMEOUT
I2C_ERROR_TIMEOUT
eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE;
eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE
eBits
eBits
eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE
eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR
eBits | EVENT_ERROR_TIMEOUT
eBits
eBits
EVENT_ERROR_TIMEOUT
EVENT_ERROR_TIMEOUT
EVENT_ERROR
EVENT_ERROR
EVENT_DONE
EVENT_DONE
log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error);
log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore),ticksTimeOut,i2c->error)
log_d
log_d
" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d"
tBefore
tBefore
tAfter
tAfter
(tAfter-tBefore)
tAfter-tBefore
tAfter
tAfter
tBefore
tBefore
ticksTimeOut
ticksTimeOut
i2c->error
i2c
i2c
error
i2cDumpI2c(i2c);
i2cDumpI2c(i2c)
i2cDumpI2c
i2cDumpI2c
i2c
i2c
i2cDumpInts(i2c->num);
i2cDumpInts(i2c->num)
i2cDumpInts
i2cDumpInts
i2c->num
i2c
i2c
num
uint32_t b = 0;
uint32_t b = 0;
uint32_t
uint32_t
b = 0
b
= 0
0
while(b < i2c->queueCount) {        if(i2c->dq[b].ctrl.mode==1 && readCount) {            *readCount += i2c->dq[b].position; // number of data bytes received        }        if(b < i2c->queuePos) { // before any error            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }        } else if(b == i2c->queuePos) { // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        } else { // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }        b++;    }
b < i2c->queueCount
b
b
i2c->queueCount
i2c
i2c
queueCount
{        if(i2c->dq[b].ctrl.mode==1 && readCount) {            *readCount += i2c->dq[b].position; // number of data bytes received        }        if(b < i2c->queuePos) { // before any error            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }        } else if(b == i2c->queuePos) { // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        } else { // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }        b++;    }
if(i2c->dq[b].ctrl.mode==1 && readCount) {            *readCount += i2c->dq[b].position; // number of data bytes received        }
i2c->dq[b].ctrl.mode==1 && readCount
i2c->dq[b].ctrl.mode==1
i2c->dq[b].ctrl.mode
i2c->dq[b].ctrl
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
ctrl
mode
1
readCount
readCount
{            *readCount += i2c->dq[b].position; // number of data bytes received        }
*readCount += i2c->dq[b].position;
*readCount += i2c->dq[b].position
*readCount
readCount
readCount
i2c->dq[b].position
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
position
if(b < i2c->queuePos) { // before any error            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }        } else if(b == i2c->queuePos) { // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        } else { // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }
b < i2c->queuePos
b
b
i2c->queuePos
i2c
i2c
queuePos
{ // before any error            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }        }
if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }
i2c->dq[b].queueEvent
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
queueEvent
{ // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);            }
xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE);
xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE)
xEventGroupSetBits
xEventGroupSetBits
i2c->dq[b].queueEvent
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
queueEvent
EVENT_DONE
EVENT_DONE
if(b == i2c->queuePos) { // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        } else { // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }
b == i2c->queuePos
b
b
i2c->queuePos
i2c
i2c
queuePos
{ // last processed queue            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }        }
if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }
i2c->dq[b].queueEvent
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
queueEvent
{ // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);            }
xEventGroupSetBits(i2c->dq[b].queueEvent,eBits);
xEventGroupSetBits(i2c->dq[b].queueEvent,eBits)
xEventGroupSetBits
xEventGroupSetBits
i2c->dq[b].queueEvent
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
queueEvent
eBits
eBits
{ // never processed queues            if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }        }
if(i2c->dq[b].queueEvent) { // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }
i2c->dq[b].queueEvent
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
queueEvent
{ // this data queue element has an EventGroup                xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);            }
xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV);
xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV)
xEventGroupSetBits
xEventGroupSetBits
i2c->dq[b].queueEvent
i2c->dq[b]
i2c->dq
i2c
i2c
dq
b
b
queueEvent
eBits|EVENT_ERROR_PREV
eBits
eBits
EVENT_ERROR_PREV
EVENT_ERROR_PREV
b++;
b++
b
b
if(i2c->debugFlags & 0x00ff0000) i2cTriggerDumps(i2c,(i2c->debugFlags>>16),"after ProcQueue");
i2c->debugFlags & 0x00ff0000
i2c->debugFlags
i2c
i2c
debugFlags
0x00ff0000
i2cTriggerDumps(i2c,(i2c->debugFlags>>16),"after ProcQueue");
i2cTriggerDumps(i2c,(i2c->debugFlags>>16),"after ProcQueue")
i2cTriggerDumps
i2cTriggerDumps
i2c
i2c
(i2c->debugFlags>>16)
i2c->debugFlags>>16
i2c->debugFlags
i2c
i2c
debugFlags
16
"after ProcQueue"
I2C_MUTEX_UNLOCK();
I2C_MUTEX_UNLOCK()
I2C_MUTEX_UNLOCK
I2C_MUTEX_UNLOCK
return reason;
reason
reason
-----joern-----
(165,672,0)
(307,216,0)
(623,783,0)
(301,119,0)
(806,164,0)
(736,217,0)
(270,723,0)
(250,118,0)
(857,626,0)
(811,405,0)
(549,565,0)
(39,626,0)
(552,508,0)
(336,642,0)
(492,596,0)
(388,317,0)
(487,453,0)
(741,354,0)
(129,435,0)
(733,310,0)
(20,596,0)
(671,318,0)
(770,307,0)
(795,642,0)
(565,354,0)
(60,208,0)
(287,626,0)
(389,354,0)
(753,525,0)
(558,701,0)
(241,642,0)
(775,208,0)
(660,537,0)
(591,674,0)
(297,849,0)
(393,584,0)
(50,642,0)
(488,354,0)
(315,0,0)
(72,538,0)
(391,642,0)
(692,323,0)
(533,354,0)
(35,205,0)
(621,782,0)
(290,158,0)
(407,212,0)
(32,683,0)
(345,161,0)
(364,411,0)
(527,285,0)
(516,296,0)
(854,19,0)
(811,353,0)
(858,79,0)
(537,524,0)
(416,541,0)
(68,857,0)
(306,56,0)
(326,846,0)
(360,470,0)
(783,597,0)
(496,849,0)
(280,626,0)
(173,445,0)
(701,537,0)
(720,288,0)
(787,91,0)
(751,334,0)
(657,823,0)
(451,668,0)
(597,226,0)
(637,664,0)
(745,502,0)
(290,326,0)
(170,344,0)
(799,276,0)
(3,272,0)
(301,36,0)
(5,376,0)
(746,297,0)
(721,626,0)
(597,783,0)
(814,828,0)
(103,595,0)
(507,720,0)
(296,516,0)
(271,380,0)
(828,354,0)
(188,187,0)
(406,120,0)
(265,508,0)
(259,626,0)
(192,375,0)
(462,525,0)
(244,320,0)
(698,196,0)
(532,354,0)
(263,455,0)
(606,154,0)
(459,559,0)
(417,820,0)
(302,354,0)
(332,215,0)
(566,40,0)
(486,375,0)
(320,244,0)
(301,293,0)
(675,767,0)
(301,747,0)
(498,752,0)
(308,531,0)
(476,194,0)
(693,19,0)
(551,307,0)
(377,805,0)
(217,736,0)
(427,453,0)
(824,583,0)
(400,459,0)
(506,797,0)
(58,679,0)
(35,590,0)
(444,411,0)
(25,479,0)
(723,161,0)
(91,422,0)
(301,714,0)
(508,482,0)
(521,537,0)
(70,581,0)
(797,506,0)
(310,525,0)
(510,477,0)
(464,855,0)
(614,644,0)
(267,747,0)
(317,354,0)
(707,354,0)
(743,591,0)
(226,626,0)
(810,236,0)
(107,596,0)
(20,51,0)
(491,559,0)
(220,226,0)
(720,354,0)
(847,642,0)
(301,781,0)
(126,660,0)
(419,707,0)
(707,419,0)
(669,324,0)
(752,284,0)
(582,559,0)
(766,672,0)
(537,660,0)
(18,736,0)
(538,354,0)
(489,810,0)
(717,271,0)
(405,811,0)
(345,176,0)
(463,702,0)
(302,136,0)
(775,61,0)
(19,854,0)
(752,705,0)
(804,642,0)
(496,354,0)
(696,37,0)
(129,140,0)
(227,185,0)
(431,626,0)
(539,727,0)
(756,533,0)
(788,57,0)
(749,226,0)
(215,259,0)
(323,431,0)
(635,721,0)
(584,86,0)
(78,542,0)
(375,192,0)
(479,626,0)
(107,51,0)
(619,677,0)
(711,267,0)
(245,621,0)
(216,307,0)
(314,679,0)
(36,810,0)
(448,232,0)
(462,354,0)
(605,723,0)
(474,707,0)
(650,244,0)
(843,733,0)
(56,306,0)
(452,189,0)
(816,297,0)
(815,202,0)
(269,659,0)
(789,295,0)
(136,302,0)
(802,354,0)
(601,689,0)
(227,354,0)
(341,642,0)
(464,516,0)
(285,354,0)
(723,491,0)
(546,226,0)
(573,482,0)
(175,307,0)
(577,702,0)
(467,19,0)
(200,386,0)
(504,189,0)
(41,480,0)
(588,450,0)
(584,393,0)
(325,529,0)
(592,185,0)
(249,677,0)
(625,290,0)
(76,553,0)
(301,808,0)
(20,210,0)
(307,770,0)
(194,476,0)
(636,354,0)
(383,491,0)
(794,626,0)
(242,859,0)
(534,829,0)
(324,820,0)
(74,141,0)
(464,151,0)
(118,422,0)
(395,626,0)
(788,626,0)
(81,626,0)
(838,202,0)
(701,512,0)
(169,304,0)
(182,285,0)
(373,715,0)
(176,559,0)
(12,365,0)
(284,578,0)
(855,196,0)
(789,627,0)
(613,259,0)
(744,609,0)
(155,726,0)
(554,192,0)
(254,626,0)
(568,112,0)
(284,752,0)
(231,186,0)
(582,801,0)
(67,762,0)
(199,206,0)
(491,723,0)
(483,143,0)
(172,320,0)
(829,304,0)
(232,529,0)
(27,495,0)
(285,21,0)
(641,404,0)
(154,354,0)
(760,66,0)
(121,141,0)
(488,737,0)
(464,829,0)
(392,575,0)
(92,626,0)
(556,674,0)
(307,354,0)
(183,147,0)
(585,318,0)
(808,354,0)
(622,37,0)
(435,668,0)
(667,552,0)
(574,158,0)
(817,335,0)
(571,818,0)
(628,374,0)
(599,342,0)
(522,140,0)
(445,354,0)
(58,378,0)
(328,663,0)
(282,418,0)
(567,548,0)
(140,167,0)
(30,366,0)
(710,61,0)
(66,20,0)
(676,355,0)
(269,43,0)
(593,435,0)
(93,459,0)
(464,781,0)
(301,479,0)
(398,330,0)
(264,530,0)
(583,807,0)
(490,202,0)
(709,151,0)
(646,136,0)
(481,626,0)
(385,318,0)
(301,476,0)
(453,354,0)
(378,58,0)
(301,542,0)
(40,37,0)
(548,517,0)
(611,533,0)
(682,335,0)
(558,609,0)
(516,595,0)
(609,307,0)
(732,147,0)
(615,690,0)
(25,406,0)
(544,779,0)
(830,374,0)
(648,626,0)
(502,412,0)
(780,529,0)
(524,668,0)
(754,495,0)
(854,529,0)
(602,690,0)
(194,355,0)
(299,767,0)
(604,737,0)
(837,590,0)
(728,425,0)
(387,161,0)
(301,601,0)
(188,559,0)
(688,477,0)
(469,626,0)
(627,642,0)
(632,731,0)
(464,714,0)
(763,782,0)
(223,310,0)
(859,481,0)
(761,644,0)
(284,646,0)
(693,354,0)
(455,354,0)
(738,843,0)
(434,180,0)
(157,710,0)
(636,380,0)
(77,626,0)
(122,532,0)
(230,73,0)
(101,470,0)
(841,626,0)
(538,857,0)
(218,627,0)
(57,788,0)
(620,446,0)
(445,173,0)
(145,655,0)
(780,232,0)
(134,636,0)
(316,609,0)
(271,354,0)
(476,806,0)
(843,537,0)
(344,107,0)
(368,715,0)
(482,161,0)
(252,537,0)
(674,354,0)
(316,701,0)
(378,354,0)
(785,475,0)
(301,118,0)
(196,855,0)
(473,550,0)
(361,819,0)
(680,707,0)
(11,858,0)
(812,639,0)
(778,129,0)
(399,202,0)
(663,328,0)
(216,322,0)
(616,232,0)
(850,295,0)
(84,362,0)
(689,289,0)
(196,354,0)
(714,354,0)
(343,450,0)
(156,728,0)
(3,389,0)
(760,741,0)
(464,293,0)
(430,261,0)
(367,301,0)
(702,463,0)
(464,406,0)
(669,789,0)
(673,548,0)
(610,118,0)
(167,140,0)
(113,233,0)
(351,288,0)
(532,267,0)
(1,289,0)
(366,628,0)
(289,422,0)
(685,626,0)
(8,705,0)
(107,344,0)
(344,170,0)
(255,2,0)
(372,626,0)
(10,184,0)
(727,590,0)
(845,808,0)
(651,276,0)
(106,788,0)
(559,335,0)
(301,677,0)
(66,760,0)
(436,446,0)
(460,642,0)
(470,101,0)
(362,43,0)
(389,3,0)
(669,583,0)
(102,128,0)
(542,301,0)
(244,354,0)
(455,690,0)
(173,138,0)
(705,737,0)
(139,659,0)
(547,149,0)
(520,222,0)
(655,626,0)
(718,797,0)
(201,626,0)
(790,815,0)
(621,245,0)
(343,226,0)
(683,857,0)
(410,530,0)
(439,626,0)
(569,626,0)
(537,838,0)
(300,346,0)
(678,192,0)
(464,820,0)
(279,672,0)
(740,626,0)
(760,226,0)
(322,743,0)
(404,340,0)
(557,829,0)
(168,295,0)
(737,439,0)
(347,550,0)
(649,206,0)
(177,316,0)
(334,354,0)
(681,51,0)
(326,290,0)
(440,296,0)
(112,559,0)
(852,656,0)
(838,141,0)
(20,66,0)
(477,354,0)
(464,677,0)
(394,702,0)
(127,202,0)
(780,788,0)
(714,481,0)
(703,354,0)
(839,42,0)
(312,373,0)
(703,749,0)
(245,475,0)
(291,815,0)
(238,255,0)
(561,334,0)
(428,3,0)
(384,596,0)
(423,271,0)
(545,664,0)
(299,561,0)
(268,86,0)
(797,375,0)
(390,700,0)
(631,389,0)
(834,164,0)
(34,50,0)
(492,705,0)
(634,19,0)
(537,843,0)
(333,367,0)
(334,561,0)
(125,137,0)
(464,323,0)
(99,749,0)
(301,215,0)
(151,198,0)
(346,125,0)
(376,596,0)
(464,186,0)
(495,354,0)
(21,285,0)
(278,849,0)
(659,705,0)
(665,319,0)
(809,440,0)
(219,166,0)
(95,840,0)
(205,36,0)
(820,409,0)
(342,575,0)
(228,389,0)
(401,626,0)
(358,828,0)
(470,251,0)
(645,806,0)
(842,617,0)
(638,685,0)
(530,410,0)
(572,445,0)
(475,236,0)
(338,582,0)
(663,212,0)
(712,354,0)
(208,775,0)
(71,176,0)
(618,244,0)
(464,215,0)
(62,848,0)
(628,628,0)
(386,354,0)
(668,435,0)
(406,354,0)
(429,0,0)
(419,154,0)
(747,222,0)
(402,642,0)
(36,802,0)
(375,797,0)
(689,626,0)
(73,786,0)
(859,596,0)
(222,524,0)
(0,429,0)
(526,251,0)
(412,502,0)
(429,794,0)
(120,626,0)
(597,365,0)
(737,705,0)
(148,710,0)
(243,626,0)
(124,762,0)
(340,404,0)
(659,269,0)
(656,229,0)
(301,829,0)
(723,270,0)
(595,626,0)
(485,343,0)
(495,150,0)
(111,626,0)
(609,135,0)
(96,233,0)
(141,74,0)
(198,626,0)
(514,737,0)
(97,531,0)
(301,272,0)
(464,345,0)
(274,66,0)
(805,233,0)
(0,315,0)
(339,302,0)
(176,345,0)
(86,584,0)
(659,596,0)
(192,559,0)
(482,762,0)
(208,354,0)
(88,455,0)
(225,701,0)
(237,305,0)
(453,487,0)
(326,848,0)
(541,538,0)
(805,354,0)
(206,354,0)
(541,217,0)
(286,488,0)
(301,516,0)
(594,125,0)
(136,646,0)
(376,705,0)
(408,642,0)
(150,229,0)
(221,70,0)
(702,354,0)
(277,801,0)
(647,293,0)
(464,496,0)
(48,227,0)
(477,421,0)
(15,293,0)
(239,299,0)
(232,788,0)
(150,495,0)
(301,323,0)
(813,802,0)
(224,167,0)
(190,537,0)
(774,406,0)
(270,70,0)
(203,748,0)
(213,307,0)
(94,854,0)
(672,766,0)
(25,36,0)
(288,715,0)
(687,642,0)
(628,335,0)
(195,505,0)
(153,789,0)
(305,292,0)
(506,761,0)
(125,226,0)
(366,30,0)
(80,298,0)
(356,270,0)
(2,255,0)
(23,546,0)
(859,354,0)
(137,125,0)
(464,712,0)
(379,167,0)
(781,128,0)
(443,642,0)
(624,537,0)
(152,419,0)
(666,345,0)
(311,853,0)
(468,517,0)
(178,272,0)
(404,849,0)
(648,354,0)
(482,508,0)
(752,596,0)
(537,354,0)
(729,354,0)
(366,112,0)
(478,328,0)
(719,138,0)
(743,322,0)
(762,559,0)
(365,597,0)
(301,186,0)
(413,324,0)
(832,628,0)
(7,741,0)
(465,440,0)
(464,518,0)
(352,25,0)
(304,626,0)
(318,354,0)
(272,818,0)
(657,354,0)
(53,626,0)
(25,820,0)
(633,693,0)
(677,655,0)
(764,232,0)
(87,737,0)
(425,354,0)
(664,354,0)
(548,354,0)
(442,425,0)
(412,373,0)
(630,737,0)
(379,364,0)
(309,590,0)
(283,137,0)
(435,129,0)
(301,518,0)
(396,558,0)
(457,859,0)
(700,61,0)
(767,626,0)
(19,439,0)
(350,58,0)
(33,380,0)
(674,591,0)
(340,226,0)
(301,820,0)
(322,216,0)
(214,116,0)
(651,52,0)
(141,838,0)
(348,627,0)
(307,21,0)
(90,714,0)
(167,379,0)
(217,541,0)
(629,450,0)
(658,781,0)
(480,354,0)
(432,307,0)
(267,532,0)
(232,780,0)
(686,297,0)
(628,366,0)
(752,51,0)
(138,173,0)
(705,626,0)
(779,229,0)
(296,440,0)
(702,849,0)
(464,601,0)
(587,760,0)
(789,166,0)
(306,726,0)
(519,198,0)
(715,288,0)
(712,685,0)
(253,703,0)
(161,553,0)
(260,805,0)
(415,255,0)
(537,487,0)
(464,330,0)
(643,187,0)
(555,532,0)
(179,170,0)
(758,292,0)
(301,496,0)
(13,481,0)
(669,464,0)
(73,354,0)
(759,402,0)
(529,626,0)
(581,70,0)
(211,232,0)
(342,546,0)
(30,459,0)
(205,35,0)
(471,603,0)
(404,354,0)
(258,523,0)
(266,626,0)
(708,74,0)
(439,697,0)
(856,215,0)
(695,188,0)
(44,418,0)
(715,373,0)
(247,354,0)
(161,335,0)
(438,561,0)
(508,552,0)
(414,448,0)
(297,354,0)
(162,136,0)
(301,603,0)
(301,245,0)
(363,602,0)
(301,429,0)
(464,118,0)
(591,743,0)
(853,626,0)
(187,188,0)
(517,548,0)
(158,290,0)
(104,697,0)
(149,229,0)
(728,226,0)
(583,820,0)
(146,154,0)
(515,642,0)
(235,626,0)
(825,464,0)
(133,626,0)
(56,376,0)
(672,354,0)
(329,671,0)
(464,455,0)
(798,854,0)
(598,79,0)
(686,533,0)
(749,703,0)
(464,245,0)
(272,3,0)
(546,342,0)
(370,782,0)
(25,781,0)
(789,50,0)
(204,120,0)
(232,439,0)
(104,173,0)
(317,180,0)
(525,310,0)
(776,188,0)
(783,354,0)
(528,626,0)
(21,307,0)
(792,614,0)
(728,367,0)
(835,529,0)
(301,367,0)
(546,386,0)
(570,374,0)
(386,546,0)
(552,76,0)
(533,686,0)
(369,412,0)
(186,517,0)
(138,628,0)
(730,247,0)
(789,402,0)
(789,656,0)
(79,858,0)
(703,849,0)
(76,187,0)
(706,802,0)
(301,345,0)
(104,735,0)
(722,582,0)
(245,828,0)
(86,354,0)
(349,429,0)
(232,61,0)
(463,584,0)
(330,42,0)
(612,518,0)
(331,340,0)
(690,626,0)
(464,683,0)
(323,143,0)
(411,364,0)
(207,462,0)
(319,354,0)
(540,86,0)
(437,344,0)
(247,164,0)
(189,335,0)
(109,780,0)
(140,129,0)
(256,194,0)
(422,626,0)
(19,529,0)
(733,843,0)
(821,530,0)
(855,77,0)
(800,558,0)
(112,366,0)
(781,354,0)
(49,425,0)
(779,492,0)
(215,354,0)
(281,626,0)
(584,463,0)
(108,811,0)
(355,194,0)
(782,621,0)
(185,227,0)
(542,409,0)
(492,779,0)
(421,477,0)
(553,670,0)
(858,354,0)
(700,354,0)
(523,626,0)
(669,25,0)
(47,838,0)
(212,663,0)
(789,710,0)
(321,439,0)
(84,560,0)
(531,596,0)
(24,170,0)
(404,685,0)
(324,357,0)
(586,496,0)
(382,19,0)
(849,626,0)
(166,642,0)
(565,511,0)
(144,858,0)
(63,378,0)
(149,354,0)
(301,326,0)
(726,596,0)
(128,102,0)
(6,846,0)
(328,354,0)
(464,747,0)
(289,689,0)
(292,626,0)
(472,621,0)
(791,553,0)
(29,205,0)
(186,116,0)
(772,781,0)
(464,326,0)
(301,305,0)
(316,261,0)
(458,158,0)
(69,516,0)
(464,305,0)
(393,559,0)
(42,626,0)
(403,166,0)
(769,693,0)
(671,705,0)
(725,720,0)
(307,838,0)
(494,853,0)
(575,342,0)
(741,760,0)
(470,226,0)
(614,581,0)
(100,524,0)
(248,77,0)
(456,636,0)
(373,412,0)
(530,354,0)
(273,480,0)
(793,353,0)
(789,147,0)
(315,354,0)
(484,20,0)
(724,0,0)
(376,56,0)
(683,354,0)
(20,779,0)
(550,354,0)
(232,448,0)
(19,229,0)
(161,761,0)
(773,96,0)
(45,404,0)
(65,355,0)
(142,330,0)
(768,626,0)
(646,284,0)
(499,747,0)
(294,794,0)
(525,462,0)
(466,591,0)
(307,609,0)
(54,289,0)
(524,626,0)
(789,523,0)
(581,614,0)
(503,674,0)
(154,419,0)
(448,354,0)
(380,636,0)
(684,448,0)
(367,728,0)
(82,309,0)
(301,683,0)
(766,511,0)
(777,496,0)
(83,855,0)
(562,226,0)
(181,227,0)
(447,853,0)
(535,335,0)
(789,626,0)
(786,226,0)
(454,112,0)
(375,161,0)
(786,73,0)
(51,61,0)
(596,844,0)
(661,712,0)
(51,107,0)
(459,30,0)
(464,261,0)
(464,272,0)
(117,196,0)
(550,143,0)
(193,104,0)
(98,626,0)
(138,374,0)
(297,686,0)
(771,476,0)
(425,728,0)
(19,693,0)
(185,603,0)
(742,523,0)
(808,748,0)
(652,328,0)
(840,506,0)
(131,302,0)
(64,378,0)
(59,848,0)
(85,151,0)
(14,315,0)
(96,422,0)
(411,418,0)
(397,697,0)
(464,429,0)
(43,362,0)
(602,736,0)
(765,2,0)
(505,642,0)
(697,439,0)
(580,30,0)
(559,393,0)
(579,216,0)
(25,245,0)
(143,323,0)
(561,299,0)
(163,780,0)
(694,783,0)
(36,205,0)
(440,354,0)
(433,491,0)
(464,317,0)
(378,128,0)
(607,420,0)
(301,455,0)
(301,299,0)
(426,406,0)
(782,590,0)
(640,648,0)
(827,743,0)
(251,470,0)
(441,19,0)
(820,842,0)
(180,626,0)
(602,354,0)
(854,788,0)
(143,550,0)
(699,232,0)
(114,770,0)
(107,705,0)
(137,354,0)
(173,104,0)
(262,462,0)
(446,138,0)
(359,402,0)
(364,379,0)
(233,96,0)
(318,671,0)
(497,642,0)
(174,559,0)
(25,326,0)
(25,679,0)
(501,405,0)
(353,811,0)
(125,346,0)
(750,651,0)
(75,683,0)
(105,656,0)
(362,84,0)
(464,479,0)
(26,712,0)
(668,524,0)
(826,808,0)
(560,2,0)
(222,626,0)
(307,524,0)
(209,726,0)
(529,325,0)
(28,703,0)
(564,316,0)
(747,267,0)
(424,663,0)
(380,271,0)
(538,541,0)
(737,488,0)
(851,73,0)
(301,317,0)
(160,91,0)
(739,560,0)
(301,330,0)
(22,176,0)
(25,855,0)
(147,642,0)
(371,50,0)
(116,626,0)
(560,84,0)
(818,626,0)
(801,581,0)
(697,104,0)
(303,405,0)
(276,651,0)
(420,807,0)
(318,481,0)
(836,786,0)
(761,506,0)
(191,597,0)
(500,626,0)
(748,164,0)
(537,701,0)
(301,712,0)
(596,859,0)
(251,354,0)
(91,431,0)
(840,614,0)
(493,379,0)
(581,801,0)
(136,226,0)
(600,602,0)
(293,731,0)
(16,107,0)
(603,185,0)
(461,276,0)
(518,721,0)
(802,36,0)
(726,306,0)
(197,164,0)
(110,208,0)
(362,596,0)
(187,76,0)
(9,714,0)
(509,305,0)
(20,705,0)
(822,659,0)
(288,226,0)
(89,646,0)
(79,601,0)
(355,354,0)
(38,648,0)
(506,840,0)
(848,354,0)
(240,479,0)
(158,590,0)
(664,337,0)
(422,96,0)
(381,488,0)
(449,752,0)
(43,269,0)
(431,91,0)
(704,729,0)
(716,251,0)
(246,202,0)
(4,590,0)
(734,626,0)
(488,128,0)
(31,362,0)
(301,151,0)
(553,76,0)
(846,236,0)
(517,186,0)
(654,840,0)
(327,538,0)
(608,479,0)
(123,364,0)
(362,705,0)
(19,788,0)
(536,410,0)
(138,446,0)
(233,805,0)
(337,664,0)
(55,492,0)
(726,705,0)
(492,40,0)
(502,409,0)
(275,518,0)
(762,482,0)
(37,40,0)
(563,834,0)
(576,505,0)
(731,626,0)
(752,779,0)
(40,492,0)
(46,35,0)
(295,642,0)
(801,582,0)
(603,834,0)
(159,453,0)
(531,705,0)
(601,79,0)
(76,552,0)
(374,626,0)
(2,560,0)
(288,720,0)
(691,729,0)
(128,803,0)
(276,128,0)
(796,601,0)
(848,326,0)
(234,74,0)
(513,296,0)
(216,579,0)
(784,386,0)
(703,685,0)
(405,559,0)
(301,406,0)
(789,505,0)
(310,733,0)
(70,270,0)
(418,411,0)
(301,855,0)
(543,376,0)
(736,602,0)
(115,315,0)
(713,317,0)
(17,761,0)
(833,101,0)
(464,36,0)
(653,741,0)
(171,626,0)
(831,657,0)
(257,137,0)
(575,132,0)
(662,309,0)
(828,245,0)
(130,842,0)
(757,35,0)
(843,738,0)
(487,537,0)
(276,354,0)
(313,319,0)
(589,334,0)
(220,206,1)
(23,386,1)
(789,50,1)
(523,742,1)
(124,67,1)
(251,354,1)
(191,783,1)
(792,353,1)
(728,156,1)
(285,527,1)
(310,223,1)
(166,219,1)
(212,663,1)
(373,715,1)
(32,690,1)
(158,458,1)
(355,65,1)
(718,375,1)
(832,161,1)
(492,705,1)
(284,752,1)
(789,505,1)
(592,227,1)
(594,137,1)
(537,524,1)
(727,539,1)
(495,354,1)
(746,628,1)
(485,284,1)
(404,685,1)
(293,15,1)
(378,128,1)
(843,733,1)
(410,536,1)
(714,90,1)
(653,7,1)
(754,27,1)
(537,354,1)
(30,459,1)
(538,327,1)
(661,686,1)
(669,324,1)
(376,5,1)
(285,354,1)
(519,151,1)
(547,19,1)
(71,761,1)
(429,349,1)
(854,529,1)
(301,683,1)
(421,477,1)
(744,729,1)
(120,204,1)
(477,354,1)
(3,428,1)
(752,498,1)
(161,761,1)
(656,852,1)
(419,154,1)
(782,590,1)
(736,602,1)
(302,354,1)
(2,255,1)
(752,51,1)
(499,267,1)
(258,651,1)
(185,227,1)
(664,354,1)
(762,559,1)
(641,331,1)
(648,354,1)
(212,407,1)
(668,435,1)
(789,402,1)
(715,288,1)
(381,8,1)
(619,721,1)
(136,226,1)
(451,100,1)
(405,303,1)
(752,596,1)
(498,449,1)
(313,128,1)
(801,582,1)
(470,360,1)
(71,553,1)
(70,270,1)
(529,325,1)
(228,631,1)
(820,409,1)
(429,0,1)
(48,748,1)
(25,326,1)
(370,810,1)
(416,538,1)
(239,561,1)
(697,104,1)
(797,375,1)
(621,472,1)
(269,659,1)
(301,272,1)
(609,307,1)
(542,409,1)
(858,354,1)
(232,780,1)
(837,120,1)
(618,650,1)
(185,592,1)
(551,216,1)
(651,750,1)
(155,671,1)
(648,38,1)
(454,832,1)
(702,394,1)
(531,308,1)
(789,656,1)
(525,753,1)
(268,174,1)
(693,769,1)
(550,473,1)
(464,496,1)
(240,77,1)
(621,782,1)
(415,765,1)
(516,69,1)
(494,311,1)
(536,530,1)
(188,695,1)
(378,64,1)
(319,665,1)
(309,662,1)
(115,818,1)
(480,354,1)
(122,524,1)
(196,698,1)
(552,667,1)
(391,166,1)
(362,705,1)
(623,694,1)
(6,326,1)
(464,305,1)
(789,166,1)
(299,239,1)
(297,816,1)
(95,654,1)
(703,354,1)
(308,97,1)
(94,798,1)
(64,63,1)
(538,857,1)
(638,712,1)
(20,66,1)
(553,76,1)
(362,84,1)
(717,456,1)
(407,663,1)
(508,482,1)
(489,36,1)
(729,704,1)
(485,101,1)
(301,330,1)
(225,729,1)
(597,226,1)
(110,60,1)
(112,559,1)
(663,328,1)
(334,354,1)
(253,28,1)
(747,499,1)
(301,479,1)
(353,793,1)
(384,671,1)
(773,233,1)
(58,378,1)
(367,333,1)
(464,345,1)
(478,320,1)
(809,465,1)
(84,560,1)
(215,354,1)
(736,18,1)
(805,354,1)
(7,346,1)
(532,354,1)
(317,713,1)
(598,858,1)
(436,719,1)
(482,573,1)
(345,666,1)
(137,354,1)
(301,326,1)
(461,319,1)
(72,736,1)
(248,855,1)
(371,206,1)
(698,117,1)
(789,627,1)
(322,743,1)
(301,542,1)
(727,590,1)
(651,276,1)
(527,182,1)
(220,795,1)
(146,474,1)
(581,70,1)
(712,354,1)
(20,705,1)
(842,130,1)
(584,86,1)
(460,505,1)
(90,9,1)
(453,354,1)
(137,283,1)
(565,354,1)
(196,354,1)
(14,115,1)
(338,70,1)
(488,286,1)
(215,856,1)
(603,471,1)
(591,674,1)
(174,686,1)
(759,206,1)
(17,614,1)
(789,295,1)
(796,79,1)
(811,108,1)
(677,249,1)
(25,781,1)
(805,260,1)
(604,87,1)
(334,751,1)
(262,521,1)
(772,421,1)
(683,75,1)
(703,685,1)
(176,559,1)
(301,603,1)
(525,462,1)
(25,36,1)
(419,152,1)
(822,139,1)
(351,720,1)
(278,496,1)
(316,609,1)
(301,781,1)
(56,376,1)
(169,829,1)
(564,177,1)
(686,533,1)
(795,147,1)
(301,293,1)
(563,603,1)
(18,602,1)
(640,685,1)
(445,572,1)
(455,354,1)
(741,354,1)
(301,36,1)
(104,173,1)
(686,297,1)
(422,96,1)
(249,619,1)
(105,217,1)
(35,757,1)
(289,54,1)
(725,507,1)
(140,167,1)
(446,620,1)
(117,83,1)
(510,688,1)
(459,559,1)
(375,192,1)
(655,145,1)
(770,114,1)
(301,829,1)
(8,788,1)
(139,306,1)
(332,431,1)
(707,419,1)
(101,833,1)
(187,643,1)
(25,479,1)
(305,509,1)
(695,776,1)
(848,354,1)
(321,558,1)
(546,23,1)
(690,615,1)
(383,792,1)
(674,503,1)
(576,206,1)
(706,813,1)
(254,636,1)
(800,396,1)
(25,406,1)
(504,559,1)
(702,354,1)
(728,425,1)
(186,517,1)
(464,677,1)
(20,779,1)
(464,714,1)
(77,248,1)
(447,494,1)
(840,614,1)
(552,508,1)
(845,826,1)
(464,151,1)
(301,455,1)
(154,606,1)
(25,352,1)
(194,256,1)
(575,342,1)
(19,529,1)
(97,43,1)
(301,299,1)
(376,596,1)
(531,705,1)
(380,271,1)
(390,232,1)
(696,622,1)
(221,270,1)
(851,836,1)
(746,374,1)
(790,291,1)
(301,677,1)
(290,625,1)
(433,383,1)
(672,165,1)
(485,575,1)
(87,514,1)
(41,842,1)
(533,354,1)
(830,570,1)
(558,701,1)
(37,696,1)
(359,759,1)
(78,502,1)
(294,429,1)
(583,820,1)
(412,373,1)
(610,481,1)
(373,312,1)
(825,430,1)
(199,531,1)
(435,129,1)
(491,433,1)
(125,226,1)
(482,762,1)
(62,290,1)
(355,354,1)
(573,762,1)
(464,479,1)
(628,374,1)
(97,766,1)
(307,21,1)
(301,118,1)
(366,112,1)
(783,354,1)
(342,599,1)
(442,49,1)
(51,107,1)
(3,389,1)
(179,437,1)
(316,701,1)
(723,605,1)
(183,732,1)
(43,269,1)
(406,354,1)
(309,590,1)
(327,72,1)
(283,257,1)
(591,466,1)
(797,718,1)
(565,549,1)
(414,616,1)
(550,354,1)
(848,59,1)
(336,627,1)
(671,705,1)
(25,245,1)
(138,446,1)
(375,161,1)
(476,771,1)
(19,854,1)
(301,496,1)
(125,594,1)
(475,785,1)
(780,529,1)
(671,329,1)
(478,707,1)
(474,320,1)
(204,406,1)
(27,149,1)
(306,726,1)
(595,103,1)
(849,278,1)
(91,422,1)
(470,226,1)
(85,689,1)
(566,55,1)
(707,354,1)
(723,161,1)
(662,82,1)
(509,237,1)
(701,537,1)
(506,797,1)
(483,550,1)
(559,393,1)
(233,113,1)
(493,224,1)
(220,336,1)
(697,397,1)
(611,297,1)
(464,429,1)
(326,848,1)
(589,439,1)
(646,136,1)
(340,226,1)
(206,354,1)
(360,251,1)
(238,415,1)
(303,501,1)
(256,355,1)
(195,576,1)
(382,779,1)
(307,354,1)
(834,563,1)
(608,240,1)
(678,554,1)
(620,436,1)
(464,781,1)
(664,637,1)
(496,777,1)
(22,71,1)
(288,226,1)
(103,516,1)
(793,811,1)
(603,185,1)
(193,173,1)
(46,846,1)
(660,126,1)
(245,621,1)
(216,322,1)
(464,825,1)
(30,580,1)
(801,277,1)
(217,736,1)
(464,317,1)
(688,853,1)
(341,402,1)
(464,215,1)
(244,618,1)
(343,485,1)
(456,410,1)
(116,214,1)
(821,264,1)
(389,354,1)
(209,155,1)
(464,330,1)
(423,717,1)
(36,205,1)
(149,547,1)
(783,623,1)
(358,814,1)
(720,725,1)
(558,609,1)
(702,849,1)
(15,647,1)
(42,839,1)
(214,186,1)
(301,476,1)
(286,381,1)
(220,150,1)
(752,779,1)
(471,185,1)
(302,131,1)
(590,4,1)
(207,262,1)
(532,555,1)
(211,699,1)
(628,366,1)
(320,244,1)
(99,502,1)
(259,613,1)
(161,387,1)
(340,404,1)
(630,488,1)
(502,409,1)
(681,710,1)
(263,88,1)
(363,600,1)
(501,189,1)
(427,159,1)
(276,354,1)
(186,231,1)
(852,105,1)
(743,827,1)
(473,347,1)
(392,342,1)
(432,770,1)
(318,385,1)
(729,354,1)
(705,737,1)
(464,820,1)
(650,480,1)
(464,323,1)
(220,295,1)
(652,478,1)
(65,676,1)
(288,720,1)
(125,137,1)
(786,73,1)
(785,245,1)
(301,345,1)
(593,451,1)
(107,344,1)
(277,582,1)
(28,99,1)
(468,548,1)
(476,194,1)
(464,829,1)
(654,17,1)
(507,786,1)
(339,101,1)
(101,470,1)
(318,354,1)
(760,741,1)
(252,225,1)
(700,390,1)
(33,271,1)
(290,158,1)
(362,596,1)
(813,205,1)
(517,468,1)
(366,30,1)
(418,282,1)
(152,154,1)
(74,234,1)
(324,413,1)
(854,788,1)
(386,200,1)
(464,118,1)
(131,339,1)
(272,3,1)
(79,598,1)
(568,454,1)
(205,29,1)
(439,697,1)
(859,242,1)
(616,780,1)
(669,25,1)
(57,106,1)
(437,16,1)
(12,597,1)
(659,822,1)
(669,789,1)
(192,678,1)
(811,405,1)
(301,808,1)
(859,481,1)
(54,1,1)
(542,78,1)
(711,532,1)
(561,334,1)
(41,755,1)
(675,299,1)
(374,830,1)
(464,747,1)
(680,419,1)
(464,683,1)
(114,551,1)
(479,608,1)
(118,250,1)
(488,128,1)
(572,138,1)
(406,426,1)
(601,79,1)
(79,858,1)
(485,20,1)
(425,442,1)
(672,354,1)
(257,340,1)
(394,577,1)
(760,587,1)
(66,760,1)
(614,581,1)
(156,425,1)
(70,221,1)
(83,309,1)
(245,828,1)
(222,524,1)
(107,596,1)
(0,724,1)
(787,160,1)
(548,354,1)
(485,365,1)
(658,772,1)
(173,445,1)
(301,429,1)
(577,86,1)
(722,338,1)
(232,529,1)
(69,296,1)
(181,48,1)
(601,796,1)
(251,716,1)
(301,820,1)
(691,838,1)
(170,24,1)
(149,354,1)
(404,354,1)
(815,790,1)
(315,14,1)
(50,34,1)
(625,158,1)
(356,723,1)
(613,215,1)
(109,764,1)
(530,821,1)
(220,497,1)
(777,586,1)
(264,786,1)
(632,293,1)
(68,683,1)
(606,146,1)
(378,354,1)
(260,377,1)
(767,675,1)
(292,758,1)
(464,293,1)
(808,354,1)
(514,630,1)
(284,646,1)
(737,439,1)
(667,508,1)
(172,244,1)
(721,635,1)
(312,715,1)
(541,416,1)
(219,403,1)
(426,774,1)
(220,341,1)
(404,849,1)
(113,805,1)
(208,354,1)
(586,116,1)
(780,163,1)
(424,328,1)
(244,354,1)
(29,35,1)
(462,207,1)
(560,2,1)
(708,121,1)
(301,714,1)
(180,434,1)
(344,170,1)
(289,422,1)
(774,171,1)
(147,183,1)
(187,188,1)
(328,652,1)
(778,593,1)
(296,440,1)
(585,529,1)
(719,321,1)
(271,354,1)
(364,411,1)
(73,354,1)
(810,489,1)
(464,245,1)
(325,835,1)
(731,632,1)
(539,475,1)
(742,258,1)
(213,175,1)
(102,781,1)
(367,728,1)
(495,754,1)
(377,118,1)
(19,788,1)
(836,343,1)
(250,610,1)
(223,525,1)
(272,178,1)
(781,354,1)
(716,526,1)
(171,212,1)
(693,354,1)
(20,51,1)
(645,476,1)
(546,386,1)
(49,542,1)
(425,354,1)
(136,162,1)
(503,556,1)
(321,337,1)
(464,36,1)
(157,148,1)
(155,596,1)
(761,506,1)
(753,462,1)
(464,855,1)
(104,193,1)
(232,788,1)
(597,783,1)
(93,112,1)
(99,301,1)
(820,417,1)
(106,767,1)
(749,703,1)
(141,74,1)
(352,314,1)
(700,354,1)
(40,37,1)
(449,646,1)
(543,726,1)
(86,354,1)
(346,300,1)
(333,728,1)
(222,520,1)
(35,590,1)
(487,453,1)
(791,353,1)
(396,609,1)
(448,684,1)
(368,288,1)
(457,384,1)
(365,12,1)
(556,213,1)
(420,607,1)
(587,741,1)
(506,840,1)
(758,305,1)
(743,591,1)
(850,206,1)
(232,439,1)
(524,668,1)
(47,815,1)
(548,567,1)
(331,749,1)
(265,482,1)
(607,212,1)
(846,6,1)
(567,673,1)
(396,701,1)
(508,265,1)
(549,43,1)
(757,46,1)
(663,424,1)
(276,128,1)
(129,140,1)
(154,354,1)
(831,306,1)
(296,513,1)
(575,392,1)
(481,13,1)
(194,355,1)
(306,56,1)
(330,398,1)
(301,323,1)
(624,843,1)
(724,315,1)
(100,259,1)
(247,730,1)
(530,354,1)
(781,658,1)
(628,628,1)
(376,705,1)
(151,709,1)
(838,141,1)
(676,834,1)
(732,206,1)
(771,194,1)
(189,452,1)
(375,486,1)
(465,794,1)
(323,692,1)
(182,432,1)
(561,438,1)
(749,226,1)
(165,279,1)
(220,391,1)
(763,370,1)
(369,373,1)
(596,859,1)
(282,44,1)
(291,337,1)
(317,354,1)
(673,595,1)
(138,374,1)
(827,591,1)
(66,274,1)
(540,268,1)
(520,747,1)
(314,58,1)
(319,354,1)
(353,811,1)
(643,188,1)
(160,323,1)
(153,254,1)
(175,744,1)
(316,564,1)
(255,238,1)
(31,269,1)
(21,285,1)
(546,226,1)
(709,85,1)
(741,653,1)
(389,228,1)
(459,400,1)
(828,354,1)
(76,187,1)
(288,351,1)
(217,541,1)
(310,525,1)
(5,543,1)
(247,354,1)
(463,702,1)
(752,705,1)
(582,559,1)
(694,749,1)
(760,226,1)
(574,309,1)
(636,354,1)
(138,628,1)
(11,144,1)
(485,346,1)
(769,633,1)
(533,756,1)
(764,211,1)
(538,354,1)
(554,840,1)
(788,57,1)
(136,302,1)
(301,245,1)
(627,348,1)
(34,371,1)
(224,522,1)
(464,518,1)
(779,492,1)
(458,574,1)
(320,172,1)
(464,186,1)
(464,601,1)
(833,470,1)
(128,102,1)
(775,208,1)
(557,198,1)
(737,488,1)
(148,217,1)
(816,746,1)
(488,354,1)
(295,168,1)
(808,845,1)
(161,553,1)
(570,857,1)
(150,495,1)
(497,50,1)
(398,142,1)
(96,773,1)
(208,110,1)
(839,330,1)
(301,367,1)
(173,138,1)
(307,524,1)
(756,611,1)
(301,406,1)
(453,427,1)
(622,566,1)
(674,354,1)
(703,253,1)
(347,304,1)
(130,820,1)
(434,317,1)
(254,410,1)
(162,302,1)
(230,851,1)
(142,292,1)
(279,565,1)
(858,11,1)
(26,661,1)
(710,157,1)
(403,206,1)
(104,735,1)
(218,206,1)
(237,655,1)
(163,109,1)
(484,66,1)
(854,94,1)
(59,62,1)
(144,731,1)
(597,191,1)
(829,534,1)
(685,638,1)
(134,380,1)
(646,89,1)
(505,195,1)
(659,596,1)
(544,656,1)
(751,589,1)
(766,672,1)
(537,838,1)
(323,143,1)
(227,354,1)
(480,273,1)
(826,531,1)
(748,203,1)
(123,493,1)
(167,379,1)
(20,596,1)
(699,51,1)
(750,276,1)
(91,787,1)
(602,363,1)
(198,519,1)
(518,612,1)
(16,681,1)
(466,674,1)
(798,467,1)
(25,820,1)
(234,708,1)
(82,727,1)
(452,504,1)
(276,799,1)
(329,318,1)
(477,510,1)
(502,745,1)
(158,590,1)
(73,230,1)
(145,677,1)
(737,604,1)
(203,808,1)
(168,850,1)
(836,226,1)
(188,559,1)
(780,788,1)
(126,624,1)
(728,226,1)
(762,124,1)
(789,710,1)
(177,558,1)
(176,22,1)
(190,660,1)
(25,855,1)
(605,491,1)
(513,440,1)
(337,664,1)
(502,412,1)
(486,192,1)
(428,389,1)
(666,176,1)
(301,317,1)
(786,226,1)
(274,760,1)
(445,354,1)
(669,583,1)
(112,568,1)
(470,251,1)
(410,530,1)
(635,518,1)
(267,532,1)
(96,233,1)
(178,3,1)
(412,369,1)
(464,326,1)
(107,705,1)
(311,479,1)
(537,487,1)
(413,480,1)
(233,805,1)
(516,296,1)
(301,601,1)
(703,849,1)
(45,641,1)
(301,186,1)
(205,35,1)
(273,41,1)
(301,712,1)
(67,791,1)
(671,318,1)
(417,755,1)
(75,32,1)
(647,42,1)
(380,33,1)
(270,356,1)
(584,463,1)
(271,423,1)
(411,418,1)
(38,640,1)
(1,601,1)
(712,26,1)
(379,364,1)
(220,460,1)
(43,362,1)
(307,216,1)
(541,538,1)
(581,801,1)
(404,45,1)
(707,680,1)
(747,267,1)
(599,546,1)
(571,272,1)
(19,439,1)
(326,290,1)
(441,854,1)
(440,809,1)
(431,91,1)
(121,47,1)
(4,837,1)
(726,596,1)
(20,484,1)
(89,136,1)
(345,176,1)
(55,544,1)
(794,294,1)
(464,516,1)
(385,585,1)
(159,190,1)
(297,354,1)
(139,657,1)
(723,491,1)
(267,711,1)
(0,315,1)
(612,275,1)
(397,104,1)
(464,272,1)
(388,523,1)
(304,169,1)
(789,153,1)
(88,849,1)
(558,800,1)
(343,226,1)
(82,590,1)
(818,571,1)
(789,523,1)
(464,712,1)
(467,634,1)
(602,354,1)
(853,447,1)
(521,252,1)
(301,215,1)
(76,552,1)
(537,660,1)
(835,705,1)
(348,218,1)
(455,263,1)
(342,546,1)
(713,388,1)
(657,354,1)
(318,481,1)
(86,540,1)
(522,778,1)
(307,838,1)
(692,143,1)
(689,289,1)
(13,714,1)
(108,405,1)
(492,40,1)
(637,545,1)
(270,723,1)
(776,552,1)
(60,700,1)
(464,406,1)
(24,179,1)
(300,125,1)
(9,648,1)
(745,412,1)
(328,354,1)
(387,345,1)
(600,247,1)
(633,441,1)
(462,354,1)
(726,705,1)
(307,770,1)
(206,649,1)
(739,31,1)
(301,305,1)
(649,199,1)
(143,550,1)
(19,693,1)
(301,518,1)
(857,68,1)
(346,125,1)
(615,455,1)
(765,739,1)
(44,444,1)
(859,354,1)
(231,517,1)
(275,422,1)
(232,448,1)
(313,421,1)
(430,316,1)
(448,354,1)
(843,738,1)
(636,380,1)
(828,358,1)
(349,0,1)
(531,596,1)
(526,340,1)
(537,843,1)
(402,359,1)
(789,147,1)
(301,516,1)
(301,151,1)
(555,122,1)
(580,459,1)
(802,354,1)
(715,368,1)
(665,313,1)
(782,763,1)
(472,782,1)
(824,420,1)
(657,831,1)
(440,354,1)
(683,354,1)
(393,584,1)
(714,354,1)
(492,596,1)
(242,457,1)
(301,855,1)
(192,559,1)
(301,747,1)
(299,561,1)
(806,645,1)
(802,706,1)
(704,691,1)
(491,559,1)
(517,548,1)
(400,93,1)
(405,559,1)
(583,824,1)
(315,354,1)
(545,222,1)
(726,209,1)
(733,310,1)
(297,849,1)
(350,319,1)
(856,332,1)
(36,802,1)
(63,350,1)
(386,354,1)
(143,483,1)
(482,161,1)
(562,220,1)
(438,334,1)
(365,597,1)
(602,690,1)
(636,134,1)
(227,181,1)
(730,806,1)
(669,464,1)
(324,820,1)
(799,461,1)
(659,705,1)
(855,196,1)
(220,775,1)
(814,621,1)
(784,365,1)
(840,95,1)
(684,414,1)
(631,180,1)
(496,354,1)
(226,562,1)
(444,123,1)
(582,722,1)
(200,784,1)
(534,557,1)
(216,579,1)
(720,354,1)
(634,382,1)
(464,455,1)
(73,337,2)
(694,749,2)
(271,354,2)
(260,319,2)
(672,354,2)
(162,101,2)
(283,340,2)
(400,686,2)
(138,337,2)
(540,686,2)
(464,326,2)
(564,558,2)
(174,686,2)
(220,558,2)
(60,217,2)
(6,309,2)
(502,412,2)
(272,3,2)
(464,558,2)
(723,161,2)
(446,337,2)
(340,226,2)
(602,531,2)
(451,319,2)
(574,309,2)
(180,319,2)
(129,319,2)
(609,729,2)
(427,729,2)
(620,337,2)
(783,749,2)
(25,319,2)
(686,319,2)
(575,365,2)
(780,217,2)
(402,206,2)
(832,686,2)
(188,559,2)
(117,212,2)
(476,194,2)
(537,524,2)
(857,319,2)
(504,686,2)
(315,319,2)
(591,674,2)
(163,217,2)
(99,786,2)
(305,319,2)
(596,671,2)
(789,295,2)
(1,319,2)
(206,531,2)
(480,354,2)
(192,559,2)
(94,217,2)
(301,326,2)
(659,705,2)
(518,319,2)
(767,558,2)
(674,354,2)
(826,531,2)
(737,337,2)
(173,558,2)
(442,502,2)
(362,705,2)
(73,354,2)
(838,141,2)
(723,353,2)
(411,418,2)
(350,319,2)
(112,686,2)
(378,128,2)
(478,480,2)
(125,137,2)
(166,206,2)
(364,411,2)
(536,558,2)
(77,212,2)
(462,354,2)
(530,337,2)
(76,187,2)
(334,558,2)
(195,206,2)
(464,293,2)
(301,118,2)
(301,151,2)
(770,729,2)
(296,440,2)
(596,859,2)
(84,269,2)
(301,429,2)
(834,531,2)
(155,558,2)
(301,215,2)
(752,51,2)
(125,226,2)
(546,386,2)
(643,353,2)
(793,686,2)
(232,439,2)
(3,319,2)
(178,319,2)
(160,319,2)
(269,337,2)
(194,531,2)
(605,353,2)
(560,2,2)
(835,337,2)
(152,320,2)
(365,597,2)
(693,217,2)
(779,217,2)
(35,590,2)
(131,101,2)
(607,212,2)
(279,43,2)
(449,101,2)
(795,206,2)
(381,558,2)
(301,502,2)
(57,337,2)
(349,319,2)
(323,319,2)
(775,217,2)
(752,596,2)
(303,686,2)
(306,558,2)
(319,354,2)
(23,365,2)
(760,226,2)
(383,353,2)
(20,66,2)
(423,410,2)
(310,729,2)
(843,729,2)
(256,531,2)
(365,749,2)
(786,226,2)
(404,849,2)
(474,320,2)
(410,337,2)
(141,74,2)
(713,319,2)
(789,505,2)
(421,212,2)
(703,786,2)
(736,602,2)
(728,425,2)
(232,448,2)
(651,276,2)
(173,445,2)
(25,245,2)
(464,345,2)
(464,330,2)
(470,226,2)
(597,783,2)
(464,186,2)
(199,531,2)
(788,57,2)
(130,755,2)
(597,749,2)
(318,481,2)
(138,446,2)
(220,337,2)
(161,761,2)
(650,480,2)
(30,459,2)
(208,217,2)
(435,129,2)
(765,269,2)
(21,729,2)
(749,703,2)
(194,355,2)
(440,354,2)
(301,317,2)
(250,319,2)
(296,319,2)
(138,628,2)
(295,206,2)
(623,749,2)
(301,245,2)
(82,309,2)
(600,531,2)
(134,410,2)
(592,531,2)
(628,686,2)
(124,353,2)
(727,309,2)
(666,686,2)
(373,715,2)
(562,337,2)
(729,354,2)
(217,531,2)
(531,705,2)
(619,319,2)
(476,531,2)
(777,319,2)
(211,217,2)
(251,340,2)
(276,354,2)
(780,788,2)
(316,609,2)
(378,354,2)
(801,582,2)
(701,537,2)
(447,212,2)
(207,729,2)
(537,354,2)
(150,217,2)
(426,212,2)
(680,320,2)
(789,50,2)
(835,558,2)
(726,705,2)
(138,558,2)
(230,558,2)
(836,786,2)
(741,346,2)
(316,558,2)
(307,21,2)
(627,206,2)
(445,558,2)
(517,319,2)
(341,206,2)
(128,421,2)
(455,354,2)
(309,212,2)
(369,786,2)
(790,337,2)
(371,206,2)
(786,337,2)
(484,346,2)
(703,685,2)
(821,337,2)
(714,354,2)
(352,319,2)
(346,125,2)
(297,354,2)
(228,319,2)
(301,603,2)
(417,755,2)
(76,353,2)
(405,686,2)
(531,558,2)
(97,337,2)
(366,686,2)
(859,354,2)
(307,838,2)
(460,206,2)
(671,558,2)
(802,354,2)
(439,558,2)
(761,506,2)
(550,354,2)
(251,354,2)
(444,319,2)
(404,685,2)
(702,686,2)
(572,337,2)
(191,749,2)
(684,217,2)
(471,531,2)
(717,410,2)
(307,354,2)
(636,354,2)
(410,530,2)
(798,217,2)
(297,319,2)
(452,686,2)
(522,319,2)
(15,319,2)
(51,217,2)
(108,686,2)
(247,531,2)
(319,212,2)
(683,319,2)
(367,502,2)
(707,320,2)
(177,558,2)
(19,693,2)
(822,337,2)
(615,319,2)
(589,558,2)
(784,365,2)
(362,269,2)
(752,779,2)
(254,558,2)
(482,161,2)
(464,712,2)
(224,319,2)
(366,112,2)
(340,404,2)
(665,212,2)
(37,217,2)
(559,686,2)
(324,820,2)
(745,412,2)
(209,337,2)
(668,435,2)
(143,550,2)
(106,558,2)
(561,558,2)
(205,309,2)
(662,309,2)
(525,462,2)
(380,410,2)
(301,683,2)
(301,714,2)
(428,319,2)
(573,353,2)
(668,319,2)
(752,705,2)
(301,455,2)
(79,319,2)
(380,271,2)
(326,290,2)
(470,340,2)
(517,548,2)
(618,480,2)
(440,319,2)
(45,749,2)
(743,729,2)
(360,340,2)
(715,288,2)
(614,353,2)
(91,422,2)
(69,319,2)
(19,788,2)
(301,808,2)
(465,319,2)
(526,340,2)
(534,319,2)
(330,319,2)
(464,406,2)
(59,309,2)
(658,421,2)
(712,354,2)
(822,558,2)
(493,319,2)
(821,558,2)
(529,325,2)
(419,154,2)
(611,319,2)
(242,671,2)
(742,319,2)
(667,353,2)
(464,151,2)
(470,251,2)
(226,558,2)
(308,337,2)
(13,319,2)
(788,558,2)
(675,337,2)
(445,354,2)
(86,686,2)
(123,319,2)
(122,319,2)
(430,558,2)
(845,531,2)
(438,337,2)
(272,319,2)
(140,167,2)
(368,786,2)
(553,76,2)
(301,829,2)
(737,558,2)
(792,353,2)
(585,558,2)
(833,340,2)
(276,319,2)
(385,337,2)
(343,786,2)
(541,538,2)
(542,502,2)
(708,337,2)
(802,309,2)
(640,319,2)
(112,559,2)
(566,217,2)
(271,410,2)
(35,309,2)
(332,319,2)
(155,337,2)
(301,516,2)
(138,374,2)
(499,319,2)
(301,330,2)
(799,319,2)
(590,212,2)
(110,217,2)
(46,309,2)
(301,345,2)
(95,353,2)
(87,337,2)
(346,340,2)
(382,217,2)
(18,531,2)
(614,581,2)
(107,344,2)
(317,354,2)
(548,319,2)
(302,354,2)
(859,481,2)
(391,206,2)
(19,854,2)
(697,558,2)
(728,226,2)
(782,590,2)
(326,848,2)
(576,206,2)
(128,102,2)
(631,319,2)
(464,516,2)
(286,558,2)
(306,56,2)
(288,786,2)
(706,309,2)
(313,212,2)
(749,226,2)
(75,319,2)
(421,477,2)
(301,36,2)
(301,367,2)
(805,319,2)
(200,365,2)
(551,729,2)
(464,781,2)
(628,374,2)
(33,410,2)
(318,337,2)
(854,529,2)
(257,340,2)
(563,531,2)
(321,337,2)
(31,269,2)
(27,217,2)
(721,319,2)
(103,319,2)
(47,337,2)
(677,319,2)
(436,337,2)
(25,479,2)
(457,671,2)
(0,315,2)
(705,737,2)
(329,558,2)
(553,353,2)
(284,752,2)
(789,710,2)
(269,558,2)
(686,686,2)
(701,729,2)
(538,736,2)
(736,531,2)
(829,319,2)
(635,319,2)
(68,319,2)
(301,542,2)
(114,729,2)
(637,319,2)
(461,319,2)
(42,319,2)
(323,143,2)
(455,319,2)
(397,337,2)
(753,729,2)
(786,73,2)
(786,786,2)
(297,686,2)
(537,487,2)
(632,319,2)
(783,354,2)
(473,319,2)
(321,558,2)
(293,319,2)
(169,319,2)
(265,353,2)
(568,686,2)
(555,319,2)
(781,354,2)
(464,747,2)
(810,309,2)
(97,558,2)
(87,558,2)
(836,337,2)
(463,686,2)
(815,337,2)
(669,324,2)
(646,136,2)
(436,558,2)
(76,552,2)
(311,212,2)
(167,379,2)
(633,217,2)
(435,319,2)
(446,558,2)
(459,559,2)
(851,558,2)
(263,319,2)
(32,319,2)
(232,529,2)
(270,353,2)
(145,319,2)
(581,70,2)
(301,677,2)
(55,217,2)
(776,353,2)
(636,380,2)
(699,217,2)
(389,354,2)
(255,269,2)
(811,686,2)
(362,84,2)
(167,319,2)
(140,319,2)
(554,840,2)
(3,389,2)
(464,683,2)
(839,319,2)
(767,337,2)
(431,319,2)
(794,319,2)
(227,354,2)
(649,531,2)
(259,319,2)
(513,319,2)
(217,736,2)
(7,346,2)
(28,786,2)
(26,319,2)
(43,337,2)
(507,786,2)
(704,337,2)
(86,354,2)
(322,729,2)
(398,319,2)
(585,337,2)
(700,354,2)
(689,319,2)
(411,319,2)
(190,729,2)
(491,353,2)
(567,319,2)
(855,212,2)
(495,217,2)
(636,410,2)
(686,297,2)
(616,217,2)
(648,319,2)
(198,319,2)
(58,378,2)
(859,671,2)
(25,855,2)
(602,690,2)
(309,590,2)
(718,840,2)
(852,217,2)
(16,217,2)
(676,531,2)
(262,729,2)
(710,217,2)
(558,609,2)
(808,354,2)
(853,212,2)
(249,319,2)
(264,558,2)
(726,596,2)
(558,337,2)
(0,319,2)
(697,337,2)
(749,786,2)
(376,726,2)
(334,337,2)
(285,354,2)
(394,686,2)
(404,749,2)
(570,319,2)
(524,668,2)
(212,663,2)
(477,354,2)
(828,354,2)
(541,736,2)
(854,217,2)
(464,518,2)
(93,686,2)
(733,729,2)
(703,354,2)
(205,35,2)
(530,558,2)
(516,296,2)
(379,364,2)
(301,855,2)
(719,558,2)
(732,206,2)
(275,319,2)
(301,496,2)
(213,729,2)
(307,770,2)
(375,161,2)
(307,729,2)
(445,337,2)
(808,531,2)
(806,531,2)
(301,781,2)
(20,596,2)
(496,319,2)
(125,340,2)
(502,409,2)
(482,762,2)
(547,217,2)
(193,558,2)
(760,346,2)
(147,206,2)
(723,491,2)
(345,176,2)
(187,353,2)
(583,212,2)
(403,206,2)
(212,480,2)
(206,354,2)
(308,558,2)
(582,353,2)
(546,226,2)
(2,255,2)
(544,217,2)
(558,701,2)
(289,422,2)
(659,337,2)
(771,531,2)
(780,529,2)
(536,337,2)
(464,677,2)
(581,801,2)
(185,227,2)
(25,36,2)
(234,337,2)
(595,319,2)
(502,786,2)
(307,216,2)
(620,558,2)
(638,319,2)
(136,302,2)
(277,353,2)
(107,596,2)
(153,558,2)
(299,558,2)
(377,319,2)
(397,558,2)
(85,319,2)
(106,337,2)
(571,319,2)
(766,672,2)
(43,362,2)
(556,729,2)
(485,786,2)
(83,212,2)
(720,354,2)
(91,319,2)
(179,217,2)
(149,217,2)
(104,337,2)
(824,212,2)
(538,857,2)
(258,319,2)
(388,319,2)
(301,479,2)
(49,502,2)
(842,755,2)
(565,43,2)
(43,269,2)
(603,531,2)
(318,354,2)
(434,319,2)
(25,820,2)
(466,729,2)
(763,309,2)
(151,319,2)
(604,337,2)
(290,158,2)
(492,40,2)
(779,492,2)
(306,726,2)
(671,705,2)
(622,217,2)
(121,337,2)
(669,583,2)
(221,353,2)
(532,319,2)
(337,664,2)
(477,212,2)
(239,558,2)
(270,723,2)
(688,212,2)
(628,628,2)
(565,354,2)
(378,319,2)
(393,686,2)
(227,531,2)
(483,319,2)
(291,337,2)
(188,353,2)
(396,337,2)
(505,206,2)
(756,319,2)
(550,319,2)
(20,705,2)
(538,354,2)
(142,319,2)
(231,319,2)
(695,353,2)
(702,354,2)
(326,309,2)
(159,729,2)
(818,319,2)
(836,558,2)
(610,319,2)
(278,319,2)
(840,353,2)
(630,558,2)
(438,558,2)
(458,309,2)
(813,309,2)
(176,686,2)
(156,502,2)
(587,346,2)
(748,531,2)
(239,337,2)
(58,319,2)
(709,319,2)
(362,596,2)
(606,320,2)
(537,838,2)
(331,749,2)
(661,319,2)
(11,319,2)
(720,786,2)
(253,786,2)
(20,346,2)
(336,206,2)
(325,337,2)
(655,319,2)
(475,309,2)
(696,217,2)
(139,337,2)
(406,354,2)
(320,244,2)
(315,354,2)
(692,319,2)
(66,760,2)
(67,353,2)
(523,319,2)
(222,524,2)
(492,596,2)
(481,319,2)
(816,319,2)
(36,309,2)
(673,319,2)
(137,354,2)
(756,686,2)
(240,212,2)
(671,337,2)
(14,319,2)
(290,309,2)
(663,328,2)
(342,546,2)
(254,337,2)
(338,353,2)
(628,366,2)
(387,686,2)
(501,686,2)
(301,820,2)
(218,206,2)
(355,354,2)
(785,309,2)
(660,729,2)
(176,559,2)
(552,508,2)
(703,849,2)
(101,340,2)
(154,320,2)
(467,217,2)
(70,270,2)
(737,439,2)
(448,217,2)
(758,319,2)
(431,91,2)
(850,206,2)
(533,319,2)
(786,558,2)
(843,733,2)
(659,596,2)
(764,217,2)
(719,337,2)
(533,686,2)
(464,855,2)
(422,319,2)
(662,212,2)
(301,601,2)
(514,558,2)
(8,337,2)
(129,140,2)
(855,196,2)
(233,319,2)
(70,353,2)
(778,319,2)
(120,212,2)
(601,79,2)
(328,354,2)
(530,354,2)
(495,354,2)
(73,558,2)
(760,741,2)
(599,365,2)
(657,306,2)
(686,533,2)
(312,786,2)
(560,269,2)
(342,365,2)
(557,319,2)
(48,531,2)
(664,354,2)
(533,354,2)
(448,354,2)
(324,480,2)
(301,323,2)
(729,337,2)
(222,319,2)
(101,470,2)
(707,419,2)
(537,660,2)
(759,206,2)
(464,305,2)
(406,212,2)
(215,354,2)
(347,319,2)
(641,749,2)
(244,480,2)
(743,591,2)
(267,532,2)
(193,337,2)
(107,217,2)
(494,212,2)
(425,354,2)
(301,476,2)
(531,596,2)
(789,402,2)
(580,686,2)
(488,354,2)
(373,786,2)
(439,337,2)
(657,354,2)
(333,502,2)
(789,558,2)
(158,309,2)
(796,319,2)
(50,206,2)
(520,319,2)
(849,319,2)
(216,322,2)
(64,319,2)
(175,729,2)
(25,781,2)
(532,354,2)
(464,496,2)
(453,354,2)
(320,480,2)
(186,319,2)
(479,212,2)
(577,686,2)
(223,729,2)
(545,319,2)
(516,319,2)
(301,305,2)
(762,353,2)
(84,560,2)
(424,480,2)
(581,353,2)
(158,590,2)
(789,523,2)
(693,354,2)
(773,319,2)
(21,285,2)
(433,353,2)
(597,226,2)
(492,217,2)
(651,319,2)
(276,128,2)
(17,353,2)
(208,354,2)
(137,340,2)
(71,686,2)
(529,558,2)
(489,309,2)
(157,217,2)
(36,205,2)
(575,342,2)
(766,43,2)
(659,558,2)
(464,215,2)
(348,206,2)
(630,337,2)
(772,421,2)
(634,217,2)
(104,558,2)
(113,319,2)
(353,811,2)
(105,217,2)
(492,705,2)
(586,319,2)
(104,735,2)
(299,337,2)
(252,729,2)
(392,365,2)
(858,354,2)
(828,309,2)
(702,849,2)
(327,736,2)
(301,293,2)
(182,729,2)
(8,558,2)
(269,659,2)
(496,354,2)
(410,558,2)
(608,212,2)
(464,323,2)
(245,309,2)
(118,319,2)
(148,217,2)
(189,686,2)
(284,101,2)
(697,104,2)
(358,309,2)
(831,306,2)
(192,840,2)
(472,309,2)
(754,217,2)
(601,319,2)
(761,353,2)
(801,353,2)
(645,531,2)
(733,310,2)
(598,319,2)
(429,319,2)
(340,749,2)
(36,802,2)
(429,0,2)
(344,217,2)
(109,217,2)
(612,319,2)
(739,269,2)
(464,455,2)
(343,226,2)
(747,267,2)
(825,558,2)
(203,531,2)
(840,614,2)
(150,495,2)
(181,531,2)
(90,319,2)
(89,101,2)
(525,729,2)
(838,337,2)
(747,319,2)
(216,729,2)
(752,101,2)
(310,525,2)
(141,337,2)
(245,621,2)
(624,729,2)
(654,353,2)
(589,337,2)
(705,558,2)
(722,353,2)
(593,319,2)
(647,319,2)
(355,531,2)
(88,319,2)
(846,309,2)
(416,736,2)
(521,729,2)
(809,319,2)
(797,840,2)
(418,319,2)
(165,43,2)
(238,269,2)
(814,309,2)
(737,488,2)
(274,346,2)
(301,272,2)
(456,410,2)
(247,354,2)
(782,309,2)
(412,373,2)
(509,319,2)
(115,319,2)
(364,319,2)
(674,729,2)
(664,319,2)
(56,376,2)
(519,319,2)
(286,337,2)
(751,558,2)
(854,788,2)
(537,729,2)
(230,786,2)
(730,531,2)
(329,337,2)
(185,531,2)
(301,406,2)
(173,337,2)
(698,212,2)
(851,786,2)
(789,627,2)
(96,319,2)
(583,820,2)
(79,858,2)
(700,217,2)
(789,337,2)
(542,409,2)
(288,720,2)
(351,786,2)
(307,524,2)
(529,337,2)
(552,353,2)
(51,107,2)
(705,337,2)
(514,337,2)
(678,840,2)
(56,726,2)
(139,558,2)
(297,849,2)
(805,354,2)
(237,319,2)
(366,30,2)
(245,828,2)
(559,393,2)
(726,337,2)
(508,353,2)
(173,138,2)
(267,319,2)
(374,319,2)
(386,365,2)
(405,559,2)
(393,584,2)
(170,217,2)
(546,365,2)
(168,206,2)
(40,37,2)
(663,480,2)
(683,354,2)
(464,601,2)
(727,590,2)
(672,43,2)
(415,269,2)
(548,354,2)
(62,309,2)
(689,289,2)
(751,337,2)
(390,217,2)
(716,340,2)
(797,375,2)
(691,337,2)
(464,429,2)
(389,319,2)
(385,558,2)
(325,558,2)
(104,173,2)
(584,686,2)
(370,309,2)
(789,147,2)
(561,334,2)
(301,299,2)
(848,354,2)
(225,729,2)
(690,319,2)
(787,319,2)
(40,217,2)
(462,729,2)
(102,421,2)
(584,463,2)
(591,729,2)
(800,337,2)
(725,786,2)
(549,43,2)
(328,480,2)
(603,185,2)
(309,309,2)
(196,212,2)
(425,502,2)
(621,782,2)
(848,309,2)
(609,307,2)
(304,319,2)
(187,188,2)
(126,729,2)
(562,558,2)
(183,206,2)
(345,686,2)
(498,101,2)
(820,755,2)
(454,686,2)
(219,206,2)
(407,480,2)
(459,686,2)
(837,212,2)
(582,559,2)
(65,531,2)
(302,101,2)
(464,272,2)
(30,686,2)
(762,559,2)
(268,686,2)
(289,319,2)
(453,729,2)
(153,337,2)
(136,226,2)
(339,101,2)
(432,729,2)
(63,319,2)
(44,319,2)
(292,319,2)
(715,786,2)
(488,558,2)
(244,354,2)
(412,786,2)
(506,840,2)
(107,705,2)
(539,309,2)
(506,797,2)
(301,518,2)
(146,320,2)
(43,558,2)
(317,319,2)
(22,686,2)
(488,128,2)
(508,482,2)
(375,840,2)
(96,233,2)
(25,406,2)
(572,558,2)
(288,226,2)
(74,337,2)
(789,166,2)
(72,736,2)
(744,729,2)
(464,118,2)
(318,558,2)
(363,531,2)
(482,353,2)
(843,738,2)
(464,820,2)
(4,212,2)
(726,558,2)
(367,728,2)
(376,705,2)
(20,779,2)
(386,354,2)
(232,217,2)
(830,319,2)
(24,217,2)
(420,212,2)
(464,479,2)
(2,269,2)
(788,337,2)
(816,686,2)
(82,212,2)
(669,464,2)
(54,319,2)
(827,729,2)
(66,346,2)
(584,86,2)
(264,337,2)
(712,319,2)
(5,726,2)
(19,439,2)
(12,749,2)
(488,337,2)
(20,51,2)
(301,747,2)
(464,829,2)
(337,319,2)
(376,596,2)
(143,319,2)
(334,354,2)
(486,840,2)
(604,558,2)
(322,743,2)
(19,217,2)
(625,309,2)
(746,686,2)
(487,453,2)
(186,517,2)
(791,353,2)
(413,480,2)
(217,541,2)
(851,337,2)
(301,712,2)
(724,319,2)
(171,212,2)
(196,354,2)
(230,337,2)
(524,319,2)
(285,729,2)
(750,319,2)
(491,559,2)
(226,337,2)
(404,354,2)
(73,786,2)
(419,320,2)
(746,319,2)
(344,170,2)
(314,319,2)
(301,186,2)
(379,319,2)
(714,319,2)
(774,212,2)
(656,217,2)
(78,502,2)
(144,319,2)
(468,319,2)
(284,646,2)
(204,212,2)
(671,318,2)
(161,553,2)
(464,317,2)
(19,529,2)
(464,36,2)
(300,340,2)
(613,319,2)
(856,319,2)
(741,354,2)
(232,788,2)
(384,671,2)
(248,212,2)
(414,217,2)
(707,354,2)
(154,354,2)
(775,208,2)
(464,714,2)
(34,206,2)
(172,480,2)
(769,217,2)
(497,206,2)
(728,502,2)
(602,354,2)
(669,25,2)
(100,319,2)
(621,309,2)
(306,337,2)
(136,101,2)
(681,217,2)
(685,319,2)
(731,319,2)
(789,656,2)
(669,789,2)
(858,319,2)
(116,319,2)
(503,729,2)
(543,726,2)
(653,346,2)
(811,405,2)
(527,729,2)
(214,319,2)
(294,319,2)
(299,561,2)
(215,319,2)
(38,319,2)
(464,245,2)
(232,780,2)
(209,558,2)
(161,686,2)
(531,337,2)
(282,319,2)
(757,309,2)
(149,354,2)
(57,558,2)
(675,558,2)
(422,96,2)
(537,843,2)
(439,697,2)
(353,686,2)
(510,212,2)
(652,480,2)
(594,340,2)
(646,101,2)
(611,686,2)
(25,326,2)
(375,192,2)
(561,337,2)
(359,206,2)
(29,309,2)
(316,701,2)
(9,319,2)
(437,217,2)
(487,729,2)
(381,337,2)
(216,579,2)
(648,354,2)
(820,409,2)
(441,217,2)
(463,702,2)
(233,805,2)
(356,353,2)
(711,319,2)
(781,421,2)
(506,353,2)
-----------------------------------
(0,i2c->dev->timeout)
(1,f)
(2,EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
(3,i2c->dev->ctr)
(4,0)
(5,EVENT_DONE)
(6,0)
(7,i2c)
(8,eBits)
(9,i2c)
(10,switch(i2c->error)
(11,dev)
(12,queueEvent)
(13,0)
(14,dev)
(15,fifo_addr_cfg_en)
(16,eBits)
(17,taddr)
(18,0)
(19,log_d(" Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore)
(20,xEventGroupSetBits(i2c->dq[b].queueEvent,eBits)
(21,&i2c->intr_handle)
(22,ctrl)
(23,b)
(24,EVENT_DONE)
(25,return I2C_ERROR_MEMORY;)
(26,queuePos)
(27,i2c)
(28,i2c)
(29,1)
(30,tdq->ctrl.addrReq)
(31,eBits)
(32,i2c)
(33,16)
(34,I2C_ERROR_OK)
(35,intBuff[i])
(36,intBuff[i][1][i2c->num])
(37,EVENT_ERROR|EVENT_DONE)
(38,false)
(39,if (i2c->dev->status_reg.bus_busy)
(40,EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE)
(41,i2c)
(42,f.nonfifo_tx_thres = 31)
(43,!(eBits==EVENT_DONE)
(44,I2C_TXFIFO_EMPTY_INT_ENA)
(45,queuePos)
(46,intBuff)
(47,flags)
(48,i2c)
(49,i2c)
(50,reason = I2C_ERROR_OK)
(51,eBits = eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE)
(52,)
(53,interruptsEnabled)
(54,val)
(55,eBits)
(56,!(eBits & EVENT_DONE)
(57,xTaskGetTickCount()
(58,log_e("eventCreate failed=%p",i2c->i2c_event)
(59,num)
(60,i2c)
(61,)
(62,i2c)
(63,i2c)
(64,i2c_event)
(65,dev)
(66,i2c->dq[b].queueEvent)
(67,tdq)
(68,0)
(69,val)
(70,(tdq->ctrl.addr >> 7)
(71,tdq)
(72,i2c)
(73,i2c->queueCount)
(74,ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled\n\\n          ESP_INTR_FLAG_LOWMED)
(75,errorQueue)
(76,((tdq->ctrl.addr<<1)
(77,intPos[i2c->num] = 0)
(78,readCount)
(79,i2c->dev->fifo_conf)
(80,if(i2c->dq[b].queueEvent)
(81,while(b < i2c->queueCount)
(82,i)
(83,intPos)
(84,~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
(85,f)
(86,i2c->dq)
(87,pdTRUE)
(88,i2c)
(89,queueEvent)
(90,exitCode)
(91,f.val)
(92,tAfter)
(93,tdq)
(94,tBefore)
(95,8)
(96,i2c->dev->fifo_conf.val)
(97,eBits)
(98,if(i2c == NULL)
(99,b)
(100,interruptsEnabled)
(101,i2c->dq[b].queueEvent)
(102,xEventGroupCreate()
(103,0x1FFF)
(104,(totalBytes*10*1000)
(105,reason)
(106,tBefore)
(107,eBits | EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE)
(108,addrReq)
(109,tAfter)
(110,num)
(111,if(i2c->exitCode!=eBits)
(112,tdq->length)
(113,fifo_conf)
(114,i2c_isr_handler_default)
(115,i2c)
(116,i2c->dev->ctr.ms_mode = 1)
(117,i2c)
(118,f.val)
(119,)
(120,i2c->stage = I2C_DONE)
(121,ESP_INTR_FLAG_EDGE)
(122,i2c)
(123,I2C_END_DETECT_INT_ENA)
(124,ctrl)
(125,i2c->dq[b])
(126,i2c_isr_handler_default)
(127,if(ret!=ESP_OK)
(128,i2c->i2c_event = xEventGroupCreate()
(129,I2C_TIME_OUT_INT_ENA  | //(BIT(8)
(130,0)
(131,dq)
(132,)
(133,if(i2c->debugFlags & 0x00ff0000)
(134,"after ProcQueue")
(135,)
(136,i2c->dq[b])
(137,i2c->dq)
(138,totalBytes*10*1000)
(139,eBits)
(140,I2C_TRANS_COMPLETE_INT_ENA | // (BIT(7)
(141,ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt\n\\n          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled\n\\n          ESP_INTR_FLAG_LOWMED)
(142,f)
(143,i2c->dev->fifo_conf)
(144,i2c)
(145,1)
(146,i2c)
(147,reason = I2C_ERROR_TIMEOUT)
(148,reason)
(149,i2cDumpI2c(i2c)
(150,i2cDumpInts(i2c->num)
(151,f.rx_fifo_rst)
(152,24)
(153,reason)
(154,i2c->debugFlags)
(155,eBits)
(156,b)
(157,I2C_ERROR_BUSY)
(158,intBuff[i])
(159,i2c)
(160,f)
(161,tdq->ctrl.addr = taddr)
(162,b)
(163,tBefore)
(164,)
(165,num)
(166,reason = I2C_ERROR_ACK)
(167,I2C_ARBITRATION_LOST_INT_ENA | // (BIT(5)
(168,I2C_ERROR_DEV)
(169,0)
(170,EVENT_ERROR|EVENT_DONE)
(171,I2C_MUTEX_LOCK()
(172,0xff000000)
(173,(totalBytes*10*1000)
(174,tdq)
(175,ETS_I2C_EXT1_INTR_SOURCE)
(176,tdq->ctrl)
(177,"install interrupt handler Failed=%d")
(178,trans_start)
(179,EVENT_ERROR)
(180,i2c->mode = I2C_MASTER)
(181,dev)
(182,i2c)
(183,I2C_ERROR_TIMEOUT)
(184,)
(185,i2c->dev->int_ena)
(186,i2c->dev->ctr.ms_mode)
(187,tdq->ctrl.mode)
(188,tdq->ctrl)
(189,taddr=0)
(190,i2c)
(191,b)
(192,tdq->ctrl)
(193,timeOutMillis)
(194,i2c->dev->int_clr)
(195,I2C_ERROR_DEV)
(196,i2c->num)
(197,if((i2c->errorByteCnt == 0)
(198,f.rx_fifo_rst = 0)
(199,i2c)
(200,dq)
(201,if(readCount)
(202,)
(203,I2C_DONE)
(204,I2C_DONE)
(205,intBuff[i][1])
(206,i2c->error)
(207,dev)
(208,i2c->num)
(209,EVENT_ERROR)
(210,)
(211,tBefore)
(212,i2c->dev->status_reg.bus_busy)
(213,flags)
(214,1)
(215,i2c->stage)
(216,(uint32_t)
(217,(i2c->errorByteCnt == 0)
(218,reason)
(219,I2C_ERROR_ACK)
(220,b)
(221,0xFE)
(222,i2c->dev->int_ena.val = interruptsEnabled)
(223,val)
(224,I2C_ARBITRATION_LOST_INT_ENA)
(225,ret)
(226,b = 0)
(227,i2c->dev)
(228,dev)
(229,)
(230,queueCount)
(231,ms_mode)
(232,log_d(" Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d",tBefore,tAfter,(tAfter-tBefore)
(233,i2c->dev->fifo_conf)
(234,ESP_INTR_FLAG_LOWMED)
(235,totalBytes)
(236,)
(237,f)
(238,EVENT_DONE)
(239,trans_start)
(240,fifoPos)
(241,case I2C_OK :)
(242,exitCode)
(243,f)
(244,i2c->debugFlags)
(245,intBuff[i][2][i2c->num])
(246,if(i2c->num)
(247,i2c_update_error_byte_cnt(i2c)
(248,0)
(249,tx_fifo_rst)
(250,val)
(251,i2c->dq)
(252,ETS_I2C_EXT0_INTR_SOURCE)
(253,queuePos)
(254,I2C_MUTEX_UNLOCK()
(255,EVENT_ERROR|EVENT_DONE)
(256,int_clr)
(257,i2c)
(258,reason)
(259,i2c->stage = I2C_STARTUP)
(260,dev)
(261,)
(262,i2c)
(263,errorByteCnt)
(264,i2c)
(265,1)
(266,if(!(eBits==EVENT_DONE)
(267,i2c->dev->int_ena)
(268,i2c)
(269,!(eBits==EVENT_DONE)
(270,tdq->ctrl.addr >> 7)
(271,i2c->debugFlags)
(272,i2c->dev->ctr.trans_start)
(273,NULL)
(274,queueEvent)
(275,f)
(276,i2c->i2c_event)
(277,mode)
(278,0)
(279,i2c)
(280,if(eBits&EVENT_DONE)
(281,b)
(282,I2C_RXFIFO_FULL_INT_ENA)
(283,dq)
(284,xEventGroupSetBits(i2c->dq[b].queueEvent,eBits|EVENT_ERROR_PREV)
(285,i2c->intr_handle)
(286,i2c_event)
(287,reason)
(288,i2c->dq[b])
(289,f.val)
(290,intBuff[i][0])
(291,ret)
(292,f.nonfifo_en = 0)
(293,f.fifo_addr_cfg_en)
(294,0xFFFFF)
(295,reason = I2C_ERROR_DEV)
(296,i2c->dev->int_clr)
(297,i2c->queuePos)
(298,)
(299,i2c->dev->ctr.trans_start)
(300,queueEvent)
(301,*readCount += i2c->dq[b].position)
(302,i2c->dq)
(303,ctrl)
(304,f.tx_fifo_rst = 0)
(305,f.nonfifo_en)
(306,(eBits&EVENT_ERROR)
(307,esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)
(308,EVENT_DONE)
(309,i<INTBUFFMAX)
(310,i2c->dev->int_status.val)
(311,fifoBuffer)
(312,mode)
(313,i2c)
(314,I2C_MUTEX_UNLOCK()
(315,i2c->dev)
(316,log_e("install interrupt handler Failed=%d",ret)
(317,i2c->mode)
(318,i2c->exitCode)
(319,i2c->i2c_event)
(320,i2c->debugFlags & 0xff000000)
(321,ticksTimeOut)
(322,&i2c->dev->int_status.val)
(323,i2c->dev->fifo_conf.val)
(324,return I2C_ERROR_DEV;)
(325,xTaskGetTickCount()
(326,intBuff[i][0][i2c->num])
(327,errorQueue)
(328,i2c->dev)
(329,eBits)
(330,f.nonfifo_tx_thres)
(331,b)
(332,i2c)
(333,position)
(334,i2c->dev)
(335,)
(336,break;)
(337,!i2c->intr_handle)
(338,tdq)
(339,i2c)
(340,b == i2c->queuePos)
(341,break;)
(342,i2c->dq[b].queueEvent)
(343,b++)
(344,EVENT_ERROR_BUS_BUSY|EVENT_ERROR|EVENT_DONE)
(345,tdq->ctrl.addr)
(346,i2c->dq[b].queueEvent)
(347,i2c)
(348,I2C_ERROR_BUS)
(349,tout)
(350,"eventCreate failed=%p")
(351,b)
(352,I2C_ERROR_MEMORY)
(353,tdq->ctrl.addrReq ==2)
(354,i2c_t * i2c)
(355,i2c->dev)
(356,7)
(357,)
(358,num)
(359,I2C_ERROR_ACK)
(360,b)
(361,if(i2c->dq[b].queueEvent)
(362,eBits&~(EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
(363,errorByteCnt)
(364,I2C_END_DETECT_INT_ENA  | // (BIT(3)
(365,i2c->dq[b].queueEvent)
(366,tdq->length + tdq->ctrl.addrReq)
(367,i2c->dq[b].position)
(368,ctrl)
(369,1)
(370,intBuff)
(371,reason)
(372,eBits)
(373,i2c->dq[b].ctrl.mode)
(374,totalBytes=0)
(375,tdq->ctrl.addr)
(376,eBits & EVENT_DONE)
(377,i2c)
(378,i2c->i2c_event)
(379,I2C_SLAVE_TRAN_COMP_INT_ENA  | // (BIT(4)
(380,i2c->debugFlags>>16)
(381,i2c)
(382," Gross Timeout Dead start=0x%x, end=0x%x, =%d, max=%d error=%d")
(383,tdq)
(384,eBits)
(385,exitCode)
(386,i2c->dq)
(387,taddr)
(388,i2c)
(389,i2c->dev)
(390,i2c)
(391,break;)
(392,EVENT_DONE)
(393,&i2c->dq[i2c->queuePos++])
(394,queuePos)
(395,for(uint16_t i=0; i<INTBUFFMAX; i++)
(396,ret)
(397,portTICK_PERIOD_MS)
(398,nonfifo_tx_thres)
(399,flags)
(400,ctrl)
(401,if(i2c->debugFlags & 0xff000000)
(402,reason = I2C_ERROR_ACK)
(403,reason)
(404,i2c->queuePos)
(405,tdq->ctrl)
(406,i2c->stage)
(407,bus_busy)
(408,case I2C_ADDR_NAK:)
(409,uint32_t *readCount)
(410,i2c->debugFlags & 0x00ff0000)
(411,I2C_RXFIFO_OVF_INT_ENA  | //(BIT(2)
(412,i2c->dq[b].ctrl.mode==1)
(413,I2C_ERROR_DEV)
(414,i2c)
(415,EVENT_ERROR)
(416,0)
(417,readCount)
(418,I2C_TXFIFO_EMPTY_INT_ENA | // (BIT(1)
(419,i2c->debugFlags>>24)
(420,log_i("Bus busy, reinit")
(421,!i2c->i2c_event)
(422,f.val = i2c->dev->fifo_conf.val)
(423,debugFlags)
(424,status_reg)
(425,i2c->dq)
(426,stage)
(427,intr_handle)
(428,ctr)
(429,i2c->dev->timeout.tout)
(430,I2C_MUTEX_UNLOCK()
(431,i2c->dev->fifo_conf.val = f.val)
(432,i2c)
(433,ctrl)
(434,I2C_MASTER)
(435,I2C_TRANS_START_INT_ENA | // (BIT(9)
(436,10)
(437,EVENT_ERROR_BUS_BUSY)
(438,ctr)
(439,ticksTimeOut = ((totalBytes*10*1000)
(440,i2c->dev)
(441,ticksTimeOut)
(442,dq)
(443,case I2C_ARBITRATION:)
(444,I2C_RXFIFO_OVF_INT_ENA)
(445,i2cGetFrequency(i2c)
(446,10*1000)
(447,FIFOMAX)
(448,i2c->error)
(449,eBits)
(450,)
(451,I2C_ACK_ERR_INT_ENA)
(452,0)
(453,i2c->intr_handle)
(454,tdq)
(455,i2c->errorByteCnt)
(456,i2c)
(457,i2c)
(458,i)
(459,tdq->ctrl)
(460,break;)
(461,i2c)
(462,i2c->dev)
(463,i2c->queuePos++)
(464,return I2C_ERROR_MEMORY;)
(465,i2c)
(466,int_status)
(467,tAfter)
(468,ctr)
(469,i)
(470,i2c->dq[b])
(471,val)
(472,2)
(473,dev)
(474,i2c)
(475,intBuff[i][2][i2c->num] = 0)
(476,i2c->dev->int_clr.val)
(477,i2c->i2c_event)
(478,i2c)
(479,fifoPos = 0)
(480,i2c == NULL)
(481,i2c->exitCode=0)
(482,tdq->ctrl.addr)
(483,fifo_conf)
(484,eBits)
(485,b)
(486,addr)
(487,&i2c->intr_handle)
(488,i2c->i2c_event)
(489,0)
(490,ret)
(491,tdq->ctrl)
(492,eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE)
(493,I2C_SLAVE_TRAN_COMP_INT_ENA)
(494,0)
(495,i2c->num)
(496,i2c->queuePos)
(497,break;)
(498,EVENT_ERROR_PREV)
(499,val)
(500,ticksTimeOut)
(501,tdq)
(502,i2c->dq[b].ctrl.mode==1 && readCount)
(503,dev)
(504,taddr)
(505,reason = I2C_ERROR_DEV)
(506,(taddr <<8)
(507,i2c)
(508,tdq->ctrl.addr<<1)
(509,nonfifo_en)
(510,i2c_event)
(511,)
(512,)
(513,int_clr)
(514,pdFALSE)
(515,case I2C_DATA_NAK:)
(516,i2c->dev->int_clr.val)
(517,i2c->dev->ctr)
(518,f.rx_fifo_rst)
(519,0)
(520,interruptsEnabled)
(521,flags)
(522,I2C_TRANS_COMPLETE_INT_ENA)
(523,reason = I2C_ERROR_OK)
(524,interruptsEnabled =\n\\n        I2C_ACK_ERR_INT_ENA | // (BIT(10)
(525,i2c->dev->int_status)
(526,i2c)
(527,intr_handle)
(528,if(!i2c->i2c_event)
(529,tAfter=xTaskGetTickCount()
(530,i2c->debugFlags)
(531,eBits&EVENT_DONE)
(532,i2c->dev)
(533,i2c->queueCount)
(534,tx_fifo_rst)
(535,if(tdq->ctrl.addrReq ==2)
(536,0x00ff0000)
(537,esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)
(538,i2c->errorQueue)
(539,i)
(540,dq)
(541,i2c->errorQueue==0)
(542,*readCount)
(543,eBits)
(544,eBits)
(545,i2c)
(546,i2c->dq[b])
(547,i2c)
(548,i2c->dev)
(549,i2c)
(550,i2c->dev)
(551,interruptsEnabled)
(552,(tdq->ctrl.addr<<1)
(553,taddr =  ((tdq->ctrl.addr<<1)
(554,tdq)
(555,dev)
(556,i2c)
(557,f)
(558,ret!=ESP_OK)
(559,*tdq = &i2c->dq[i2c->queuePos++])
(560,EVENT_ERROR_NAK|EVENT_ERROR_DATA_NAK|EVENT_ERROR|EVENT_DONE)
(561,i2c->dev->ctr)
(562,0)
(563,0)
(564,ret)
(565,i2cDumpI2c(i2c)
(566,EVENT_ERROR_TIMEOUT)
(567,dev)
(568,length)
(569,tBefore)
(570,totalBytes)
(571,0)
(572,i2c)
(573,addr)
(574,intBuff)
(575,xEventGroupSetBits(i2c->dq[b].queueEvent,EVENT_DONE)
(576,reason)
(577,i2c)
(578,)
(579,uint32_t)
(580,addrReq)
(581,((tdq->ctrl.addr >> 7)
(582,tdq->ctrl)
(583,return I2C_ERROR_BUSY;)
(584,i2c->dq[i2c->queuePos++])
(585,i2c)
(586,i2c)
(587,b)
(588,if(b < i2c->queuePos)
(589,i2c)
(590,i=0)
(591,i2c->dev->int_status)
(592,int_ena)
(593,I2C_TRANS_START_INT_ENA)
(594,b)
(595,i2c->dev->int_clr.val = 0x1FFF)
(596,eBits=i2c->exitCode)
(597,i2c->dq[b])
(598,fifo_conf)
(599,queueEvent)
(600,i2c)
(601,i2c->dev->fifo_conf.val)
(602,i2c->errorByteCnt)
(603,i2c->dev->int_ena.val)
(604,ticksTimeOut)
(605,addr)
(606,debugFlags)
(607,"Bus busy, reinit")
(608,0)
(609,ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT1_INTR_SOURCE, flags, (uint32_t)
(610,f)
(611,i2c)
(612,rx_fifo_rst)
(613,I2C_STARTUP)
(614,taddr =((tdq->ctrl.addr >> 7)
(615,0)
(616,ticksTimeOut)
(617,)
(618,debugFlags)
(619,f)
(620,1000)
(621,intBuff[i][2])
(622,EVENT_ERROR)
(623,dq)
(624,interruptsEnabled)
(625,0)
(626,)
(627,reason = I2C_ERROR_BUS)
(628,totalBytes += tdq->length + tdq->ctrl.addrReq)
(629,if(i2c->dq[b].ctrl.mode==1 && readCount)
(630,EVENT_DONE)
(631,i2c)
(632,0)
(633,i2c)
(634,tBefore)
(635,1)
(636,i2cTriggerDumps(i2c,(i2c->debugFlags>>16)
(637,intr_handle)
(638,0)
(639,)
(640,i2c)
(641,i2c)
(642,)
(643,mode)
(644,)
(645,0x1FFF)
(646,i2c->dq[b].queueEvent)
(647,f)
(648,fillCmdQueue(i2c,false)
(649,error)
(650,i2c)
(651,xEventGroupClearBits(i2c->i2c_event, 0xFF)
(652,dev)
(653,dq)
(654,taddr)
(655,f.tx_fifo_rst = 1)
(656,reason = I2C_ERROR_TIMEOUT)
(657,i2c_update_error_byte_cnt(i2c)
(658,i2c_event)
(659,eBits==EVENT_DONE)
(660,&i2c_isr_handler_default)
(661,i2c)
(662,INTBUFFMAX)
(663,i2c->dev->status_reg)
(664,i2c->intr_handle)
(665,i2c_event)
(666,addr)
(667,0xFE)
(668,I2C_ACK_ERR_INT_ENA | // (BIT(10)
(669,RET)
(670,)
(671,i2c->exitCode!=eBits)
(672,i2c->num)
(673,i2c)
(674,i2c->dev)
(675,1)
(676,i2c)
(677,f.tx_fifo_rst)
(678,ctrl)
(679,)
(680,"before ProcQueue")
(681,eBits)
(682,taddr)
(683,i2c->errorQueue)
(684,error)
(685,i2c->queuePos=0)
(686,i2c->queuePos < i2c->queueCount)
(687,case I2C_ERROR :)
(688,i2c)
(689,i2c->dev->fifo_conf.val = f.val)
(690,i2c->errorByteCnt=0)
(691,i2c)
(692,val)
(693,i2c->error)
(694,i2c)
(695,ctrl)
(696,EVENT_DONE)
(697,((totalBytes*10*1000)
(698,num)
(699," Busy Timeout start=0x%x, end=0x%x, =%d, max=%d error=%d")
(700,i2cDumpI2c(i2c)
(701,ret = esp_intr_alloc_intrstatus(ETS_I2C_EXT0_INTR_SOURCE, flags, (uint32_t)
(702,i2c->queuePos)
(703,i2c->queuePos)
(704,num)
(705,eBits = xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut)
(706,num)
(707,i2cTriggerDumps(i2c,(i2c->debugFlags>>24)
(708,ESP_INTR_FLAG_IRAM)
(709,rx_fifo_rst)
(710,reason = I2C_ERROR_BUSY)
(711,int_ena)
(712,i2c->queuePos)
(713,mode)
(714,i2c->exitCode)
(715,i2c->dq[b].ctrl)
(716,dq)
(717,i2c)
(718,0xFF)
(719,totalBytes)
(720,i2c->dq)
(721,f.rx_fifo_rst = 1)
(722,ctrl)
(723,tdq->ctrl.addr)
(724,timeout)
(725,dq)
(726,eBits&EVENT_ERROR)
(727,i++)
(728,i2c->dq[b])
(729,i2c->num)
(730,i2c)
(731,f.fifo_addr_cfg_en = 0)
(732,reason)
(733,&i2c->dev->int_status.val)
(734,if(i2c->i2c_event)
(735,uint16_t timeOutMillis)
(736,i2c->errorByteCnt == 0)
(737,xEventGroupWaitBits(i2c->i2c_event,EVENT_DONE,pdFALSE,pdTRUE,ticksTimeOut)
(738,uint32_t)
(739,EVENT_ERROR_NAK)
(740,if(!i2c->intr_handle)
(741,i2c->dq)
(742,I2C_ERROR_OK)
(743,i2c->dev->int_status.val)
(744,ret)
(745,readCount)
(746,i2c)
(747,i2c->dev->int_ena.val)
(748,i2c->stage = I2C_DONE)
(749,b < i2c->queuePos)
(750,0xFF)
(751,dev)
(752,eBits|EVENT_ERROR_PREV)
(753,int_status)
(754,num)
(755,readCount)
(756,queueCount)
(757,i)
(758,0)
(759,reason)
(760,i2c->dq[b])
(761,taddr = (taddr <<8)
(762,tdq->ctrl)
(763,i)
(764,tAfter)
(765,EVENT_ERROR_DATA_NAK)
(766,i2cDumpInts(i2c->num)
(767,i2c->dev->ctr.trans_start=1)
(768,if((eBits&EVENT_ERROR)
(769,error)
(770,&i2c_isr_handler_default)
(771,val)
(772,i2c)
(773,val)
(774,i2c)
(775,i2cDumpInts(i2c->num)
(776,tdq)
(777,queuePos)
(778,I2C_TIME_OUT_INT_ENA)
(779,eBits = eBits | EVENT_ERROR_TIMEOUT|EVENT_ERROR|EVENT_DONE)
(780,tAfter-tBefore)
(781,i2c->i2c_event)
(782,intBuff[i])
(783,i2c->dq)
(784,i2c)
(785,0)
(786,b < i2c->queueCount)
(787,val)
(788,tBefore=xTaskGetTickCount()
(789,return reason;)
(790,0)
(791,taddr)
(792,taddr)
(793,2)
(794,i2c->dev->timeout.tout = 0xFFFFF)
(795,break;)
(796,val)
(797,tdq->ctrl.addr&0xFF)
(798,tAfter)
(799,i2c_event)
(800,ESP_OK)
(801,tdq->ctrl.mode)
(802,i2c->num)
(803,)
(804,case I2C_TIMEOUT:)
(805,i2c->dev)
(806,i2c->dev->int_clr.val = 0x1FFF)
(807,)
(808,i2c->stage)
(809,dev)
(810,intBuff[i][1][i2c->num] = 0)
(811,tdq->ctrl.addrReq)
(812,if(i2c->dq[b].queueEvent)
(813,i2c)
(814,i2c)
(815,ret = 0)
(816,queuePos)
(817,tdq)
(818,i2c->dev->ctr.trans_start=0)
(819,)
(820,*readCount)
(821,debugFlags)
(822,EVENT_DONE)
(823,)
(824,I2C_ERROR_BUSY)
(825,I2C_ERROR_MEMORY)
(826,i2c)
(827,val)
(828,i2c->num)
(829,f.tx_fifo_rst)
(830,0)
(831,i2c)
(832,totalBytes)
(833,queueEvent)
(834,i2c->dev->int_ena.val =0)
(835,tAfter)
(836,b)
(837,i)
(838,flags = ESP_INTR_FLAG_EDGE |  //< Edge-triggered interrupt\n\\n          ESP_INTR_FLAG_IRAM |  //< ISR can be called if cache is disabled\n\\n          ESP_INTR_FLAG_LOWMED)
(839,31)
(840,taddr <<8)
(841,while(i2c->queuePos < i2c->queueCount)
(842,*readCount = 0)
(843,(uint32_t)
(844,)
(845,stage)
(846,intBuff[i][0][i2c->num] = 0)
(847,default :)
(848,i2c->num)
(849,i2c->queuePos=0)
(850,reason)
(851,i2c)
(852,I2C_ERROR_TIMEOUT)
(853,memset(fifoBuffer,0,FIFOMAX)
(854,tAfter-tBefore)
(855,intPos[i2c->num])
(856,stage)
(857,i2c->errorQueue = 0)
(858,i2c->dev)
(859,i2c->exitCode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^