-----label-----
0
-----code-----
int
handle_value_request(u_char *packet, int size,
		     char *address, u_short port,
		     u_int8_t *schemes, u_int16_t ssize)

{
        struct packet_sub parts[] = {
	     { "Exchange Value", FLD_VARPRE, 0, 0, },
	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },
	     { NULL }
	};
	struct packet vr_msg = {
	     "Value Request",
	     VALUE_REQUEST_MIN, 0, parts
	};
	struct value_request *header;
	struct stateob *st;
	BIGNUM *test, *gen, *mod;
	u_int8_t *p, *modp, *refp, *genp = NULL;
	size_t sstart, vsize, modsize, modpsize, refpsize;
	int modflag;
	u_int8_t scheme_ref[2];
	u_int8_t rcookie[COOKIE_SIZE];

	if (size < VALUE_REQUEST_MIN)
	     return (-1);	/* packet too small  */

	if (packet_check(packet, size, &vr_msg) == -1) {
	     log_print("bad packet structure in handle_value_request()");
	     return (-1);
	}

	header = (struct value_request *) packet;

	st = state_find_cookies(address, header->icookie, header->rcookie);
	if (st == NULL) {
	     struct stateob tempst;
	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 
	     tempst.initiator = 0;                   /* We are the Responder */ 
	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 
	     strncpy(tempst.address, address, 15); 
	     tempst.port = global_port; 
	     tempst.counter = header->counter;
	     
	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 

	     /* Check for invalid cookie */
	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {
		  packet_size = PACKET_BUFFER_SIZE;
		  photuris_error_message(&tempst, packet_buffer, &packet_size,
					 header->icookie, header->rcookie,
					 header->counter, BAD_COOKIE);
		  send_packet();
		  return (0);
	     }

	     /* Check exchange value - XXX doesn't check long form */
	     vsize = parts[0].size;

	     /* Check schemes - selected length is in exchange value*/
	     sstart = 0;
	     modflag = 0;
	     refp = modp = NULL;
	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));
	     while (sstart < ssize) {
		  p = scheme_get_mod(schemes + sstart);
		  modsize = varpre2octets(p);
		  if (!bcmp(header->scheme, schemes + sstart, 2)) {
		       modflag = 1;
		       if (modsize == vsize) {
			    genp = scheme_get_gen(schemes+sstart);
			    modp = p;
			    modpsize = modsize;
			    break;  /* On right scheme + right size */
		       } else if (modsize <= 2 && refp != NULL) {
			    modp = refp;
			    modpsize = refpsize;
			    break;
		       }
		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&
			     modsize == vsize) {
		       genp = scheme_get_gen(schemes + sstart);
		       if (modflag) {
			    modp = p;
			    modpsize = modsize;
			    break;
		       }
		       refp = p;
		       refpsize = modsize;
		  }
		  
		  sstart += scheme_get_len(schemes+sstart);
	     }
	     if (sstart >= ssize)
		  return (-1);   /* Did not find a scheme - XXX log */

	     /* now check the exchange value */
	     test = BN_new();
	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {
		     BN_free(test);
		     return (-1);
	     }

	     mod = BN_new();
	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {
		     BN_free(test);
		     BN_free(mod);
		     return (-1);
	     }

	     gen = BN_new();
	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||
		 !exchange_check_value(test, gen, mod)) {
		  BN_free(test);
		  BN_free(gen);
		  BN_free(mod);
		  return 0;
	     }
	     BN_free(test);
	     BN_free(gen);
	     BN_free(mod);

	     if ((st = state_new()) == NULL)
		     goto resourcefail;

	     /* Default options */
	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;

	     /* Fill the state object */
	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));
             if (st->uSPIoattrib == NULL) {
                  state_value_reset(st);
		  goto resourcefail;
	     }
             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);  
             st->uSPIoattribsize = parts[1].size;  

	     /* Save scheme, which will be used by both parties */
	     vsize = 2 + varpre2octets(modp);

	     /* XXX - VPN - only support two octets */
	     if (genp != NULL)
		  vsize += 2 + varpre2octets(genp);

	     st->scheme = calloc(vsize, sizeof(u_int8_t));
	     if (st->scheme == NULL) {
                  state_value_reset(st); 
                  goto resourcefail; 
             } 
             bcopy(header->scheme, st->scheme, 2);
	     if (genp != NULL) {
		  st->scheme[2] = (vsize-4) >> 8;
		  st->scheme[3] = (vsize-4) & 0xFF;
		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));
	     }
	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),
		   varpre2octets(modp));;
		   
             st->schemesize = vsize;

#ifdef DEBUG
	     {
		  int i = BUFFER_SIZE;
		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));
		  printf("Got exchange value 0x%s\n", buffer);
	     }
#endif

	     /* Set exchange value */
	     st->texchangesize = parts[0].size;
	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));
	     if (st->texchange == NULL) {
		  log_error("calloc() in handle_value_request()");
		  state_value_reset(st);
		  goto resourcefail;
	     }
	     bcopy(parts[0].where, st->texchange, st->texchangesize);


	     /* Fill in the state object with generic data */
             strncpy(st->address, address, 15);  
             st->port = port;  
	     st->counter = header->counter;
             bcopy(header->icookie, st->icookie, COOKIE_SIZE);  
             bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  
	     bcopy(&header->counter, st->uSPITBV, 3);

	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {
		  log_error("calloc() in handle_value_request()");
		  state_value_reset(st);
		  goto resourcefail;
	     }
	     bcopy(schemes, st->roschemes, ssize);
	     st->roschemesize = ssize;

	     if (pick_attrib(st, &(st->oSPIoattrib), 
			     &(st->oSPIoattribsize)) == -1) {
		  state_value_reset(st);
		  goto resourcefail;
	     }

	     st->lifetime = exchange_timeout + time(NULL);

	     /* Now put the filled state object in the chain */
	     state_insert(st);
	} else if (st->phase != VALUE_RESPONSE) {
		LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__
			 ": value request from %s, but we are in state %d",
			 st->address, st->phase));
		return (-1);
	}
	     
	packet_size = PACKET_BUFFER_SIZE;
	if (photuris_value_response(st, packet_buffer, &packet_size) == -1)
	     return (-1);

	send_packet();

        /* Compute the shared secret now */
        compute_shared_secret(st, &(st->shared), &(st->sharedsize));
#ifdef DEBUG   
	{
	     int i = BUFFER_SIZE;
	     bin2hex(buffer, &i, st->shared, st->sharedsize);
	     printf("Shared secret is: 0x%s\n", buffer);   
	}
#endif   

	if (st->oSPIprivacyctx == NULL) {
	     /* Initialize Privacy Keys from Exchange Values */
	     init_privacy_key(st, 0);   /* User -> Owner direction */
	     init_privacy_key(st, 1);   /* Owner -> User direction */
	}

	st->retries = 0;
	st->phase = VALUE_RESPONSE;
	return (0);

 resourcefail:
	packet_size = PACKET_BUFFER_SIZE;
	photuris_error_message(st, packet_buffer, &packet_size,
			       header->icookie, header->rcookie,
			       header->counter, RESOURCE_LIMIT);
	send_packet();
	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
28,30
31,32
31,33
32,33
34,35
36,37
36,38
36,39
36,40
36,41
36,42
36,43
36,44
36,45
36,46
36,47
36,48
36,49
36,50
36,51
36,52
36,53
36,54
36,55
36,56
36,57
36,58
36,59
36,60
36,61
36,62
36,63
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
45,48
46,47
46,48
46,49
46,50
48,49
52,53
52,54
52,55
52,56
54,55
56,57
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
69,72
69,73
71,72
74,75
76,77
77,78
77,79
78,79
80,81
80,82
83,84
84,85
84,86
85,86
87,88
87,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
94,96
97,98
97,99
100,101
100,102
103,104
104,105
104,106
104,107
104,108
104,109
105,106
107,108
107,109
110,111
110,112
113,114
113,115
116,117
116,118
116,119
119,120
120,121
122,123
123,124
123,125
123,126
123,127
123,128
123,129
124,125
126,127
128,129
130,131
132,133
134,135
136,137
137,138
137,139
139,140
141,142
142,143
142,144
143,144
145,146
145,147
147,148
149,150
150,151
150,152
151,152
153,154
153,155
155,156
156,157
158,159
158,160
159,160
159,161
160,161
162,163
164,165
165,166
166,167
168,169
168,170
169,170
169,171
170,171
170,172
170,173
170,174
171,172
173,174
175,176
177,178
178,179
180,181
182,183
182,184
183,184
184,185
184,186
185,186
188,189
189,190
190,191
192,193
193,194
193,195
194,195
196,197
196,198
197,198
197,199
198,199
200,201
202,203
204,205
205,206
205,207
206,207
208,209
208,210
208,211
208,212
209,210
211,212
213,214
213,215
214,215
217,218
217,219
218,219
221,222
221,223
221,224
222,223
222,224
223,224
225,226
227,228
227,229
227,230
227,231
227,232
227,233
227,234
227,235
227,236
227,237
227,238
227,239
227,240
227,241
227,242
227,243
227,244
227,245
227,246
227,247
227,248
227,249
227,250
227,251
227,252
227,253
227,254
227,255
227,256
227,257
227,258
227,259
227,260
227,261
227,262
227,263
227,264
227,265
227,266
227,267
227,268
227,269
227,270
227,271
227,272
227,273
227,274
227,275
227,276
227,277
227,278
227,279
227,280
227,281
227,282
227,283
228,229
229,230
229,231
230,231
232,233
234,235
235,236
235,237
235,238
236,237
238,239
238,240
239,240
239,241
241,242
243,244
244,245
246,247
247,248
248,249
250,251
251,252
251,253
252,253
252,254
253,254
257,258
258,259
258,260
258,261
258,262
259,260
261,262
261,263
262,263
265,266
265,267
266,267
269,270
271,272
272,273
272,274
272,275
272,276
273,274
275,276
275,277
276,277
279,280
282,283
283,284
283,285
284,285
284,286
285,286
288,289
290,291
291,292
291,293
292,293
292,294
293,294
296,297
296,298
297,298
300,301
301,302
301,303
301,304
301,305
301,306
301,307
302,303
304,305
305,306
307,308
309,310
311,312
313,314
315,316
315,317
316,317
316,318
316,319
316,320
317,318
319,320
321,322
321,323
322,323
325,326
327,328
327,329
327,330
327,331
328,329
329,330
329,331
330,331
332,333
334,335
335,336
335,337
335,338
335,339
335,340
335,341
335,342
335,343
336,337
338,339
339,340
341,342
343,344
344,345
346,347
346,348
347,348
350,351
350,352
351,352
354,355
354,356
355,356
358,359
360,361
361,362
362,363
364,365
365,366
367,368
368,369
368,370
369,370
371,372
371,373
372,373
372,374
373,374
377,378
378,379
378,380
379,380
382,383
383,384
383,385
384,385
387,388
388,389
388,390
389,390
391,392
391,393
392,393
394,395
396,397
397,398
397,399
398,399
399,400
399,401
400,401
400,402
401,402
403,404
405,406
407,408
407,409
408,409
410,411
410,412
411,412
413,414
413,415
414,415
417,418
417,419
418,419
418,420
419,420
421,422
423,424
423,425
423,426
423,427
424,425
425,426
425,427
426,427
428,429
428,430
429,430
431,432
431,433
432,433
434,435
436,437
437,438
437,439
438,439
440,441
440,442
441,442
443,444
445,446
445,447
445,448
446,447
447,448
447,449
447,450
447,451
448,449
450,451
450,452
451,452
454,455
454,456
455,456
457,458
460,461
460,462
461,462
462,463
462,464
463,464
466,467
466,468
466,469
467,468
467,469
468,469
470,471
472,473
472,474
472,475
472,476
473,474
474,475
474,476
475,476
477,478
477,479
478,479
480,481
480,482
481,482
483,484
485,486
486,487
486,488
487,488
489,490
491,492
492,493
492,494
493,494
495,496
498,499
498,500
499,500
499,501
500,501
500,502
501,502
504,505
504,506
505,506
507,508
509,510
509,511
509,512
510,511
511,512
511,513
512,513
514,515
516,517
517,518
517,519
518,519
520,521
523,524
523,525
524,525
524,526
525,526
526,527
526,528
526,529
526,530
527,528
529,530
531,532
531,533
532,533
534,535
537,538
537,539
538,539
540,541
542,543
542,544
542,545
542,546
543,544
544,545
544,546
545,546
547,548
547,549
548,549
550,551
550,552
551,552
553,554
555,556
555,557
556,557
558,559
558,560
558,561
559,560
560,561
560,562
561,562
563,564
565,566
566,567
566,568
567,568
569,570
572,573
573,574
573,575
574,575
576,577
578,579
579,580
579,581
580,581
582,583
584,585
585,586
585,587
586,587
588,589
588,590
589,590
591,592
591,593
592,593
594,595
596,597
596,598
597,598
597,599
598,599
600,601
602,603
603,604
604,605
606,607
607,608
607,609
608,609
610,611
611,612
613,614
613,615
614,615
614,616
615,616
615,617
615,618
615,619
616,617
618,619
618,620
619,620
619,621
620,621
624,625
624,626
625,626
625,627
626,627
630,631
632,633
634,635
634,636
635,636
636,637
636,638
637,638
639,640
641,642
642,643
643,644
645,646
646,647
646,648
647,648
649,650
650,651
652,653
652,654
653,654
653,655
654,655
654,656
654,657
654,658
655,656
657,658
659,660
661,662
663,664
665,666
665,667
665,668
666,667
667,668
667,669
668,669
670,671
672,673
673,674
673,675
674,675
676,677
678,679
679,680
680,681
682,683
683,684
683,685
684,685
686,687
687,688
689,690
689,691
690,691
690,692
691,692
691,693
692,693
692,694
692,695
692,696
693,694
695,696
697,698
697,699
698,699
701,702
703,704
705,706
706,707
706,708
706,709
706,710
707,708
709,710
711,712
713,714
715,716
715,717
715,718
715,719
716,717
717,718
717,719
718,719
720,721
722,723
723,724
723,725
724,725
726,727
728,729
729,730
729,731
730,731
732,733
734,735
736,737
737,738
737,739
738,739
740,741
742,743
743,744
743,745
744,745
746,747
748,749
749,750
749,751
750,751
752,753
754,755
754,756
755,756
755,757
756,757
757,758
757,759
758,759
760,761
761,762
763,764
765,766
767,768
768,769
768,770
769,770
769,771
770,771
773,774
773,775
774,775
776,777
778,779
779,780
779,781
780,781
780,782
781,782
784,785
784,786
784,787
785,786
787,788
787,789
788,789
788,790
789,790
793,794
794,795
794,796
795,796
798,799
798,800
799,800
799,801
800,801
800,802
801,802
804,805
806,807
806,808
807,808
808,809
808,810
809,810
811,812
813,814
815,816
816,817
816,818
816,819
816,820
817,818
819,820
819,821
820,821
820,822
821,822
825,826
825,827
826,827
829,830
829,831
830,831
830,832
831,832
835,836
836,837
836,838
837,838
837,839
838,839
841,842
841,843
842,843
842,844
843,844
847,848
848,849
848,850
849,850
851,852
851,853
853,854
853,855
854,855
856,857
858,859
858,860
859,860
859,861
860,861
862,863
864,865
865,866
865,867
866,867
868,869
868,870
870,871
870,872
871,872
873,874
875,876
876,877
876,878
877,878
877,879
878,879
881,882
881,883
881,884
882,883
884,885
886,887
887,888
887,889
888,889
891,892
891,893
892,893
892,894
893,894
893,895
894,895
897,898
899,900
899,901
900,901
901,902
901,903
902,903
904,905
906,907
908,909
909,910
909,911
909,912
909,913
910,911
912,913
912,914
913,914
916,917
916,918
917,918
921,922
921,923
922,923
922,924
923,924
925,926
927,928
927,929
927,930
928,929
929,930
929,931
930,931
930,932
931,932
931,933
932,933
936,937
936,938
937,938
938,939
938,940
939,940
943,944
944,945
944,946
945,946
945,947
946,947
946,948
947,948
951,952
951,953
952,953
953,954
953,955
954,955
958,959
959,960
959,961
959,962
959,963
960,961
962,963
964,965
964,966
965,966
965,967
966,967
966,968
967,968
972,973
972,974
973,974
975,976
977,978
978,979
978,980
978,981
978,982
979,980
981,982
983,984
983,985
984,985
984,986
985,986
985,987
986,987
990,991
991,992
991,993
991,994
992,993
992,994
993,994
995,996
998,999
998,1000
1000,1001
1000,1002
1001,1002
1003,1004
1005,1006
1005,1007
1006,1007
1008,1009
1011,1012
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1017,1018
1019,1020
1020,1021
1020,1022
1021,1022
1021,1023
1022,1023
1025,1026
1025,1027
1026,1027
1026,1028
1027,1028
1031,1032
1032,1033
1032,1034
1033,1034
1033,1035
1034,1035
1037,1038
1037,1039
1037,1040
1038,1039
1040,1041
1040,1042
1041,1042
1044,1045
1045,1046
1045,1047
1046,1047
1049,1050
1049,1051
1050,1051
1050,1052
1051,1052
1051,1053
1052,1053
1055,1056
1057,1058
1057,1059
1057,1060
1058,1059
1059,1060
1059,1061
1060,1061
1063,1064
1064,1065
1064,1066
1065,1066
1067,1068
1069,1070
1071,1072
1072,1073
1072,1074
1072,1075
1072,1076
1073,1074
1075,1076
1075,1077
1076,1077
1076,1078
1077,1078
1081,1082
1081,1083
1082,1083
1085,1086
1085,1087
1086,1087
1089,1090
1090,1091
1090,1092
1090,1093
1090,1094
1091,1092
1093,1094
1093,1095
1094,1095
1097,1098
1100,1101
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1106,1107
1108,1109
1109,1110
1109,1111
1110,1111
1110,1112
1111,1112
1114,1115
1114,1116
1115,1116
1118,1119
1119,1120
1119,1121
1119,1122
1119,1123
1120,1121
1122,1123
1122,1124
1123,1124
1126,1127
1126,1128
1127,1128
1130,1131
1132,1133
1133,1134
1133,1135
1133,1136
1133,1137
1134,1135
1136,1137
1136,1138
1137,1138
1140,1141
1140,1142
1141,1142
1144,1145
1146,1147
1147,1148
1147,1149
1147,1150
1147,1151
1148,1149
1150,1151
1151,1152
1151,1153
1152,1153
1155,1156
1155,1157
1156,1157
1160,1161
1160,1162
1161,1162
1161,1163
1162,1163
1163,1164
1163,1165
1164,1165
1164,1166
1165,1166
1168,1169
1168,1170
1168,1171
1169,1170
1171,1172
1173,1174
1174,1175
1174,1176
1175,1176
1178,1179
1180,1181
1180,1182
1180,1183
1181,1182
1182,1183
1182,1184
1183,1184
1186,1187
1187,1188
1187,1189
1188,1189
1190,1191
1192,1193
1194,1195
1195,1196
1195,1197
1195,1198
1195,1199
1196,1197
1198,1199
1200,1201
1200,1202
1201,1202
1204,1205
1206,1207
1207,1208
1207,1209
1208,1209
1208,1210
1209,1210
1212,1213
1214,1215
1214,1216
1215,1216
1215,1217
1216,1217
1216,1218
1216,1219
1216,1220
1217,1218
1219,1220
1221,1222
1222,1223
1223,1224
1223,1225
1224,1225
1227,1228
1228,1229
1229,1230
1229,1231
1230,1231
1233,1234
1235,1236
1235,1237
1236,1237
1237,1238
1237,1239
1238,1239
1240,1241
1242,1243
1244,1245
1245,1246
1245,1247
1246,1247
1246,1248
1247,1248
1250,1251
1250,1252
1251,1252
1253,1254
1253,1255
1254,1255
1256,1257
1258,1259
1259,1260
1259,1261
1260,1261
1262,1263
1264,1265
1264,1266
1265,1266
1265,1267
1266,1267
1266,1268
1267,1268
1270,1271
1272,1273
1272,1274
1273,1274
1274,1275
1275,1276
1276,1277
1278,1279
1279,1280
1279,1281
1280,1281
1282,1283
1284,1285
1284,1286
1285,1286
1285,1287
1286,1287
1286,1288
1286,1289
1286,1290
1287,1288
1289,1290
1291,1292
1293,1294
1294,1295
1296,1297
1298,1299
1299,1300
1300,1301
1302,1303
1303,1304
1304,1305
1306,1307
1307,1308
1307,1309
1307,1310
1307,1311
1308,1309
1310,1311
1312,1313
1313,1314
1314,1315
1314,1316
1315,1316
1318,1319
1319,1320
1320,1321
1320,1322
1321,1322
1324,1325
1324,1326
1325,1326
1325,1327
1326,1327
1326,1328
1327,1328
1330,1331
1332,1333
1332,1334
1333,1334
1334,1335
1334,1336
1334,1337
1335,1336
1337,1338
1340,1341
1341,1342
1341,1343
1341,1344
1342,1343
1344,1345
1347,1348
1348,1349
1348,1350
1349,1350
1349,1351
1350,1351
1354,1355
1355,1356
1355,1357
1356,1357
1356,1358
1357,1358
1360,1361
1362,1363
1363,1364
1365,1366
1365,1367
1367,1368
1368,1369
1368,1370
1369,1370
1371,1372
1373,1374
1374,1375
1374,1376
1374,1377
1374,1378
1374,1379
1374,1380
1374,1381
1374,1382
1375,1376
1377,1378
1379,1380
1381,1382
1382,1383
1384,1385
1384,1386
1385,1386
1388,1389
1388,1390
1389,1390
1392,1393
1392,1394
1393,1394
1396,1397
1398,1399
1399,1400
1400,1401
1402,1403
1403,1404
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,22,24,27,29,30,33,35,40,42,43,47,49,50,51,53,55,57,58,61,65,67,70,72,73,75,79,81,82,86,88,89,93,95,96,98,99,101,102,106,108,109,111,112,114,115,117,118,121,125,127,129,131,133,135,138,140,144,146,148,152,154,157,161,163,167,172,174,176,179,181,186,187,191,195,199,201,203,207,210,212,215,216,219,220,224,226,231,233,237,240,242,245,249,254,255,256,260,263,264,267,268,270,274,277,278,280,281,286,287,289,294,295,298,299,303,306,308,310,312,314,318,320,323,324,326,331,333,337,340,342,345,348,349,352,353,356,357,359,363,366,370,374,375,376,380,381,385,386,390,393,395,402,404,406,409,412,415,416,420,422,427,430,433,435,439,442,444,449,452,453,456,458,459,464,465,469,471,476,479,482,484,488,490,494,496,497,502,503,506,508,513,515,519,521,522,528,530,533,535,536,539,541,546,549,552,554,557,562,564,568,570,571,575,577,581,583,587,590,593,595,599,601,605,609,612,617,621,622,623,627,628,629,631,633,638,640,644,648,651,656,658,660,662,664,669,671,675,677,681,685,688,694,696,699,700,702,704,708,710,712,714,719,721,725,727,731,733,735,739,741,745,747,751,753,759,762,764,766,771,772,775,777,782,783,786,790,791,792,796,797,802,803,805,810,812,814,818,822,823,824,827,828,832,833,834,839,840,844,845,846,850,852,855,857,861,863,867,869,872,874,879,880,883,885,889,890,895,896,898,903,905,907,911,914,915,918,919,920,924,926,933,934,935,940,941,942,948,949,950,955,956,957,961,963,968,969,970,971,974,976,980,982,987,988,989,994,996,997,999,1002,1004,1007,1009,1010,1015,1016,1018,1023,1024,1028,1029,1030,1035,1036,1039,1042,1043,1047,1048,1053,1054,1056,1061,1062,1066,1068,1070,1074,1078,1079,1080,1083,1084,1087,1088,1092,1095,1096,1098,1099,1104,1105,1107,1112,1113,1116,1117,1121,1124,1125,1128,1129,1131,1135,1138,1139,1142,1143,1145,1149,1153,1154,1157,1158,1159,1166,1167,1170,1172,1176,1177,1179,1184,1185,1189,1191,1193,1197,1199,1202,1203,1205,1210,1211,1213,1218,1220,1225,1226,1231,1232,1234,1239,1241,1243,1248,1249,1252,1255,1257,1261,1263,1268,1269,1271,1277,1281,1283,1288,1290,1292,1295,1297,1301,1305,1309,1311,1316,1317,1322,1323,1328,1329,1331,1336,1338,1339,1343,1345,1346,1351,1352,1353,1358,1359,1361,1364,1366,1370,1372,1376,1378,1380,1383,1386,1387,1390,1391,1394,1395,1397,1401,1404
-----computeFrom-----
159,160
159,161
169,170
169,171
193,194
193,195
205,206
205,207
222,223
222,224
251,252
251,253
283,284
283,285
291,292
291,293
329,330
329,331
368,369
368,370
378,379
378,380
383,384
383,385
388,389
388,390
391,392
391,393
397,398
397,399
418,419
418,420
425,426
425,427
431,432
431,433
437,438
437,439
454,455
454,456
462,463
462,464
467,468
467,469
474,475
474,476
480,481
480,482
486,487
486,488
492,493
492,494
499,500
499,501
500,501
500,502
504,505
504,506
511,512
511,513
517,518
517,519
524,525
524,526
531,532
531,533
537,538
537,539
544,545
544,546
550,551
550,552
560,561
560,562
566,567
566,568
573,574
573,575
579,580
579,581
585,586
585,587
591,592
591,593
597,598
597,599
607,608
607,609
614,615
614,616
646,647
646,648
653,654
653,655
683,684
683,685
690,691
690,692
691,692
691,693
755,756
755,757
757,758
757,759
768,769
768,770
773,774
773,775
779,780
779,781
799,800
799,801
836,837
836,838
848,849
848,850
851,852
851,853
859,860
859,861
865,866
865,867
868,869
868,870
876,877
876,878
892,893
892,894
922,923
922,924
929,930
929,931
936,937
936,938
938,939
938,940
944,945
944,946
951,952
951,953
953,954
953,955
964,965
964,966
965,966
965,967
983,984
983,985
984,985
984,986
992,993
992,994
998,999
998,1000
1012,1013
1012,1014
1020,1021
1020,1022
1032,1033
1032,1034
1050,1051
1050,1052
1101,1102
1101,1103
1109,1110
1109,1111
1161,1162
1161,1163
1163,1164
1163,1165
1207,1208
1207,1209
1215,1216
1215,1217
1245,1246
1245,1247
1250,1251
1250,1252
1265,1266
1265,1267
1279,1280
1279,1281
1285,1286
1285,1287
1325,1326
1325,1327
1348,1349
1348,1350
1355,1356
1355,1357
1368,1369
1368,1370
-----guardedBy-----
224,1263
226,1257
469,496
506,515
535,554
533,552
539,583
631,640
662,677
712,727
714,733
710,721
802,812
861,874
895,905
924,976
1053,1068
1166,1191
1231,1241
1328,1345
-----guardedByNegation-----
224,1268
469,502
-----lastLexicalUse-----
224,1268
469,502
-----jump-----
224,1268
469,502
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
inthandle_value_request(u_char *packet, int size,		     char *address, u_short port,		     u_int8_t *schemes, u_int16_t ssize){        struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};	struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};	struct value_request *header;	struct stateob *st;	BIGNUM *test, *gen, *mod;	u_int8_t *p, *modp, *refp, *genp = NULL;	size_t sstart, vsize, modsize, modpsize, refpsize;	int modflag;	u_int8_t scheme_ref[2];	u_int8_t rcookie[COOKIE_SIZE];	if (size < VALUE_REQUEST_MIN)	     return (-1);	/* packet too small  */	if (packet_check(packet, size, &vr_msg) == -1) {	     log_print("bad packet structure in handle_value_request()");	     return (-1);	}	header = (struct value_request *) packet;	st = state_find_cookies(address, header->icookie, header->rcookie);	if (st == NULL) {	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return (0);	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return (-1);   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		     goto resourcefail;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  goto resourcefail;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   goto resourcefail;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  goto resourcefail;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	} else if (st->phase != VALUE_RESPONSE) {		LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__			 ": value request from %s, but we are in state %d",			 st->address, st->phase));		return (-1);	}	     	packet_size = PACKET_BUFFER_SIZE;	if (photuris_value_response(st, packet_buffer, &packet_size) == -1)	     return (-1);	send_packet();        /* Compute the shared secret now */        compute_shared_secret(st, &(st->shared), &(st->sharedsize));#ifdef DEBUG   	{	     int i = BUFFER_SIZE;	     bin2hex(buffer, &i, st->shared, st->sharedsize);	     printf("Shared secret is: 0x%s\n", buffer);   	}#endif   	if (st->oSPIprivacyctx == NULL) {	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}	st->retries = 0;	st->phase = VALUE_RESPONSE;	return (0); resourcefail:	packet_size = PACKET_BUFFER_SIZE;	photuris_error_message(st, packet_buffer, &packet_size,			       header->icookie, header->rcookie,			       header->counter, RESOURCE_LIMIT);	send_packet();	return (0);}
int
handle_value_request(u_char *packet, int size,		     char *address, u_short port,		     u_int8_t *schemes, u_int16_t ssize)
handle_value_request
u_char *packet
u_char
u_char
*packet
*
packet
int size
int
size
size
char *address
char
*address
*
address
u_short port
u_short
u_short
port
port
u_int8_t *schemes
u_int8_t
u_int8_t
*schemes
*
schemes
u_int16_t ssize
u_int16_t
u_int16_t
ssize
ssize
{        struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};	struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};	struct value_request *header;	struct stateob *st;	BIGNUM *test, *gen, *mod;	u_int8_t *p, *modp, *refp, *genp = NULL;	size_t sstart, vsize, modsize, modpsize, refpsize;	int modflag;	u_int8_t scheme_ref[2];	u_int8_t rcookie[COOKIE_SIZE];	if (size < VALUE_REQUEST_MIN)	     return (-1);	/* packet too small  */	if (packet_check(packet, size, &vr_msg) == -1) {	     log_print("bad packet structure in handle_value_request()");	     return (-1);	}	header = (struct value_request *) packet;	st = state_find_cookies(address, header->icookie, header->rcookie);	if (st == NULL) {	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return (0);	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return (-1);   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		     goto resourcefail;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  goto resourcefail;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   goto resourcefail;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  goto resourcefail;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	} else if (st->phase != VALUE_RESPONSE) {		LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__			 ": value request from %s, but we are in state %d",			 st->address, st->phase));		return (-1);	}	     	packet_size = PACKET_BUFFER_SIZE;	if (photuris_value_response(st, packet_buffer, &packet_size) == -1)	     return (-1);	send_packet();        /* Compute the shared secret now */        compute_shared_secret(st, &(st->shared), &(st->sharedsize));#ifdef DEBUG   	{	     int i = BUFFER_SIZE;	     bin2hex(buffer, &i, st->shared, st->sharedsize);	     printf("Shared secret is: 0x%s\n", buffer);   	}#endif   	if (st->oSPIprivacyctx == NULL) {	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}	st->retries = 0;	st->phase = VALUE_RESPONSE;	return (0); resourcefail:	packet_size = PACKET_BUFFER_SIZE;	photuris_error_message(st, packet_buffer, &packet_size,			       header->icookie, header->rcookie,			       header->counter, RESOURCE_LIMIT);	send_packet();	return (0);}
struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};
struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};
struct packet_sub
packet_sub
parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	}
parts
[]
= {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	}
{	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	}
{ "Exchange Value", FLD_VARPRE, 0, 0, }
"Exchange Value"
FLD_VARPRE
FLD_VARPRE
0
0
{ "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, }
"Offered Attributes"
FLD_ATTRIB
FLD_ATTRIB
FMD_ATT_FILL
FMD_ATT_FILL
0
{ NULL }
NULL
NULL
struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};
struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};
struct packet
packet
vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	}
vr_msg
= {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	}
{	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	}
"Value Request"
VALUE_REQUEST_MIN
VALUE_REQUEST_MIN
0
parts
parts
struct value_request *header;
struct value_request *header;
struct value_request
value_request
*header
*
header
struct stateob *st;
struct stateob *st;
struct stateob
stateob
*st
*
st
BIGNUM *test, *gen, *mod;
BIGNUM *test, *gen, *mod;
BIGNUM
BIGNUM
*test
*
test
*gen
*
gen
*mod
*
mod
u_int8_t *p, *modp, *refp, *genp = NULL;
u_int8_t *p, *modp, *refp, *genp = NULL;
u_int8_t
u_int8_t
*p
*
p
*modp
*
modp
*refp
*
refp
*genp = NULL
*
genp
= NULL
NULL
NULL
size_t sstart, vsize, modsize, modpsize, refpsize;
size_t sstart, vsize, modsize, modpsize, refpsize;
size_t
size_t
sstart
sstart
vsize
vsize
modsize
modsize
modpsize
modpsize
refpsize
refpsize
int modflag;
int modflag;
int
modflag
modflag
u_int8_t scheme_ref[2];
u_int8_t scheme_ref[2];
u_int8_t
u_int8_t
scheme_ref[2]
scheme_ref
[2]
2
u_int8_t rcookie[COOKIE_SIZE];
u_int8_t rcookie[COOKIE_SIZE];
u_int8_t
u_int8_t
rcookie[COOKIE_SIZE]
rcookie
[COOKIE_SIZE]
COOKIE_SIZE
COOKIE_SIZE
if (size < VALUE_REQUEST_MIN)	     return (-1);
size < VALUE_REQUEST_MIN
size
size
VALUE_REQUEST_MIN
VALUE_REQUEST_MIN
return (-1);
(-1)
-1
1
if (packet_check(packet, size, &vr_msg) == -1) {	     log_print("bad packet structure in handle_value_request()");	     return (-1);	}
packet_check(packet, size, &vr_msg) == -1
packet_check(packet, size, &vr_msg)
packet_check
packet_check
packet
packet
size
size
&vr_msg
vr_msg
vr_msg
-1
1
{	     log_print("bad packet structure in handle_value_request()");	     return (-1);	}
log_print("bad packet structure in handle_value_request()");
log_print("bad packet structure in handle_value_request()")
log_print
log_print
"bad packet structure in handle_value_request()"
return (-1);
(-1)
-1
1
header = (struct value_request *) packet;
header = (struct value_request *) packet
header
header
(struct value_request *) packet
struct value_request *
struct value_request
value_request
*
*
packet
packet
st = state_find_cookies(address, header->icookie, header->rcookie);
st = state_find_cookies(address, header->icookie, header->rcookie)
st
st
state_find_cookies(address, header->icookie, header->rcookie)
state_find_cookies
state_find_cookies
address
address
header->icookie
header
header
icookie
header->rcookie
header
header
rcookie
if (st == NULL) {	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return (0);	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return (-1);   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		     goto resourcefail;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  goto resourcefail;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   goto resourcefail;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  goto resourcefail;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	} else if (st->phase != VALUE_RESPONSE) {		LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__			 ": value request from %s, but we are in state %d",			 st->address, st->phase));		return (-1);	}
st == NULL
st
st
NULL
NULL
{	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return (0);	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return (-1);   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		     goto resourcefail;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  goto resourcefail;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   goto resourcefail;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  goto resourcefail;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	}
struct stateob tempst;
struct stateob tempst;
struct stateob
stateob
tempst
tempst
bzero((char *)&tempst, sizeof(tempst));
bzero((char *)&tempst, sizeof(tempst))
bzero
bzero
(char *)&tempst
char *
char
*
*
&tempst
tempst
tempst
sizeof(tempst)
(tempst)
tempst
tempst
tempst.initiator = 0;
tempst.initiator = 0
tempst.initiator
tempst
tempst
initiator
0
bcopy(header->icookie, tempst.icookie, COOKIE_SIZE);
bcopy(header->icookie, tempst.icookie, COOKIE_SIZE)
bcopy
bcopy
header->icookie
header
header
icookie
tempst.icookie
tempst
tempst
icookie
COOKIE_SIZE
COOKIE_SIZE
strncpy(tempst.address, address, 15);
strncpy(tempst.address, address, 15)
strncpy
strncpy
tempst.address
tempst
tempst
address
address
address
15
tempst.port = global_port;
tempst.port = global_port
tempst.port
tempst
tempst
port
global_port
global_port
tempst.counter = header->counter;
tempst.counter = header->counter
tempst.counter
tempst
tempst
counter
header->counter
header
header
counter
cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize);
cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize)
cookie_generate
cookie_generate
&tempst
tempst
tempst
rcookie
rcookie
COOKIE_SIZE
COOKIE_SIZE
schemes
schemes
ssize
ssize
if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return (0);	     }
bcmp(rcookie, header->rcookie, COOKIE_SIZE)
bcmp
bcmp
rcookie
rcookie
header->rcookie
header
header
rcookie
COOKIE_SIZE
COOKIE_SIZE
{		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return (0);	     }
packet_size = PACKET_BUFFER_SIZE;
packet_size = PACKET_BUFFER_SIZE
packet_size
packet_size
PACKET_BUFFER_SIZE
PACKET_BUFFER_SIZE
photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);
photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE)
photuris_error_message
photuris_error_message
&tempst
tempst
tempst
packet_buffer
packet_buffer
&packet_size
packet_size
packet_size
header->icookie
header
header
icookie
header->rcookie
header
header
rcookie
header->counter
header
header
counter
BAD_COOKIE
BAD_COOKIE
send_packet();
send_packet()
send_packet
send_packet
return (0);
(0)
0
vsize = parts[0].size;
vsize = parts[0].size
vsize
vsize
parts[0].size
parts[0]
parts
parts
0
size
sstart = 0;
sstart = 0
sstart
sstart
0
modflag = 0;
modflag = 0
modflag
modflag
0
refp = modp = NULL;
refp = modp = NULL
refp
refp
modp = NULL
modp
modp
NULL
NULL
*(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));
*(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme))
*(u_int16_t *)scheme_ref
(u_int16_t *)scheme_ref
u_int16_t *
u_int16_t
u_int16_t
*
*
scheme_ref
scheme_ref
htons(scheme_get_ref(header->scheme))
htons
htons
scheme_get_ref(header->scheme)
scheme_get_ref
scheme_get_ref
header->scheme
header
header
scheme
while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }
sstart < ssize
sstart
sstart
ssize
ssize
{		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }
p = scheme_get_mod(schemes + sstart);
p = scheme_get_mod(schemes + sstart)
p
p
scheme_get_mod(schemes + sstart)
scheme_get_mod
scheme_get_mod
schemes + sstart
schemes
schemes
sstart
sstart
modsize = varpre2octets(p);
modsize = varpre2octets(p)
modsize
modsize
varpre2octets(p)
varpre2octets
varpre2octets
p
p
if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }
!bcmp(header->scheme, schemes + sstart, 2)
bcmp(header->scheme, schemes + sstart, 2)
bcmp
bcmp
header->scheme
header
header
scheme
schemes + sstart
schemes
schemes
sstart
sstart
2
{		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  }
modflag = 1;
modflag = 1
modflag
modflag
1
if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }
modsize == vsize
modsize
modsize
vsize
vsize
{			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       }
genp = scheme_get_gen(schemes+sstart);
genp = scheme_get_gen(schemes+sstart)
genp
genp
scheme_get_gen(schemes+sstart)
scheme_get_gen
scheme_get_gen
schemes+sstart
schemes
schemes
sstart
sstart
modp = p;
modp = p
modp
modp
p
p
modpsize = modsize;
modpsize = modsize
modpsize
modpsize
modsize
modsize
break;
if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }
modsize <= 2 && refp != NULL
modsize <= 2
modsize
modsize
2
refp != NULL
refp
refp
NULL
NULL
{			    modp = refp;			    modpsize = refpsize;			    break;		       }
modp = refp;
modp = refp
modp
modp
refp
refp
modpsize = refpsize;
modpsize = refpsize
modpsize
modpsize
refpsize
refpsize
break;
if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }
!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize
!bcmp(scheme_ref, schemes + sstart, 2)
bcmp(scheme_ref, schemes + sstart, 2)
bcmp
bcmp
scheme_ref
scheme_ref
schemes + sstart
schemes
schemes
sstart
sstart
2
modsize == vsize
modsize
modsize
vsize
vsize
{		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }
genp = scheme_get_gen(schemes + sstart);
genp = scheme_get_gen(schemes + sstart)
genp
genp
scheme_get_gen(schemes + sstart)
scheme_get_gen
scheme_get_gen
schemes + sstart
schemes
schemes
sstart
sstart
if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }
modflag
modflag
{			    modp = p;			    modpsize = modsize;			    break;		       }
modp = p;
modp = p
modp
modp
p
p
modpsize = modsize;
modpsize = modsize
modpsize
modpsize
modsize
modsize
break;
refp = p;
refp = p
refp
refp
p
p
refpsize = modsize;
refpsize = modsize
refpsize
refpsize
modsize
modsize
sstart += scheme_get_len(schemes+sstart);
sstart += scheme_get_len(schemes+sstart)
sstart
sstart
scheme_get_len(schemes+sstart)
scheme_get_len
scheme_get_len
schemes+sstart
schemes
schemes
sstart
sstart
if (sstart >= ssize)		  return (-1);
sstart >= ssize
sstart
sstart
ssize
ssize
return (-1);
(-1)
-1
1
test = BN_new();
test = BN_new()
test
test
BN_new()
BN_new
BN_new
if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }
BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL
BN_varpre2bn(parts[0].where, parts[0].size, test)
BN_varpre2bn
BN_varpre2bn
parts[0].where
parts[0]
parts
parts
0
where
parts[0].size
parts[0]
parts
parts
0
size
test
test
NULL
NULL
{		     BN_free(test);		     return (-1);	     }
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
return (-1);
(-1)
-1
1
mod = BN_new();
mod = BN_new()
mod
mod
BN_new()
BN_new
BN_new
if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }
BN_varpre2bn(modp, modpsize, mod) == NULL
BN_varpre2bn(modp, modpsize, mod)
BN_varpre2bn
BN_varpre2bn
modp
modp
modpsize
modpsize
mod
mod
NULL
NULL
{		     BN_free(test);		     BN_free(mod);		     return (-1);	     }
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
BN_free(mod);
BN_free(mod)
BN_free
BN_free
mod
mod
return (-1);
(-1)
-1
1
gen = BN_new();
gen = BN_new()
gen
gen
BN_new()
BN_new
BN_new
if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }
exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)
exchange_set_generator(gen, header->scheme, genp) == -1
exchange_set_generator(gen, header->scheme, genp)
exchange_set_generator
exchange_set_generator
gen
gen
header->scheme
header
header
scheme
genp
genp
-1
1
!exchange_check_value(test, gen, mod)
exchange_check_value(test, gen, mod)
exchange_check_value
exchange_check_value
test
test
gen
gen
mod
mod
{		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
BN_free(gen);
BN_free(gen)
BN_free
BN_free
gen
gen
BN_free(mod);
BN_free(mod)
BN_free
BN_free
mod
mod
return 0;
0
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
BN_free(gen);
BN_free(gen)
BN_free
BN_free
gen
gen
BN_free(mod);
BN_free(mod)
BN_free
BN_free
mod
mod
if ((st = state_new()) == NULL)		     goto resourcefail;
(st = state_new()) == NULL
(st = state_new())
st = state_new()
st
st
state_new()
state_new
state_new
NULL
NULL
goto resourcefail;
resourcefail
st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;
st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH
st->flags
st
st
flags
IPSEC_OPT_ENC|IPSEC_OPT_AUTH
IPSEC_OPT_ENC
IPSEC_OPT_ENC
IPSEC_OPT_AUTH
IPSEC_OPT_AUTH
st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));
st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t))
st->uSPIoattrib
st
st
uSPIoattrib
calloc(parts[1].size, sizeof(u_int8_t))
calloc
calloc
parts[1].size
parts[1]
parts
parts
1
size
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  goto resourcefail;	     }
st->uSPIoattrib == NULL
st->uSPIoattrib
st
st
uSPIoattrib
NULL
NULL
{                  state_value_reset(st);		  goto resourcefail;	     }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
goto resourcefail;
resourcefail
bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);
bcopy(parts[1].where, st->uSPIoattrib, parts[1].size)
bcopy
bcopy
parts[1].where
parts[1]
parts
parts
1
where
st->uSPIoattrib
st
st
uSPIoattrib
parts[1].size
parts[1]
parts
parts
1
size
st->uSPIoattribsize = parts[1].size;
st->uSPIoattribsize = parts[1].size
st->uSPIoattribsize
st
st
uSPIoattribsize
parts[1].size
parts[1]
parts
parts
1
size
vsize = 2 + varpre2octets(modp);
vsize = 2 + varpre2octets(modp)
vsize
vsize
2 + varpre2octets(modp)
2
varpre2octets(modp)
varpre2octets
varpre2octets
modp
modp
if (genp != NULL)		  vsize += 2 + varpre2octets(genp);
genp != NULL
genp
genp
NULL
NULL
vsize += 2 + varpre2octets(genp);
vsize += 2 + varpre2octets(genp)
vsize
vsize
2 + varpre2octets(genp)
2
varpre2octets(genp)
varpre2octets
varpre2octets
genp
genp
st->scheme = calloc(vsize, sizeof(u_int8_t));
st->scheme = calloc(vsize, sizeof(u_int8_t))
st->scheme
st
st
scheme
calloc(vsize, sizeof(u_int8_t))
calloc
calloc
vsize
vsize
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

if (st->scheme == NULL) {                  state_value_reset(st);                   goto resourcefail;              }
st->scheme == NULL
st->scheme
st
st
scheme
NULL
NULL
{                  state_value_reset(st);                   goto resourcefail;              }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
goto resourcefail;
resourcefail
bcopy(header->scheme, st->scheme, 2);
bcopy(header->scheme, st->scheme, 2)
bcopy
bcopy
header->scheme
header
header
scheme
st->scheme
st
st
scheme
2
if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }
genp != NULL
genp
genp
NULL
NULL
{		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }
st->scheme[2] = (vsize-4) >> 8;
st->scheme[2] = (vsize-4) >> 8
st->scheme[2]
st->scheme
st
st
scheme
2
(vsize-4) >> 8
(vsize-4)
vsize-4
vsize
vsize
4
8
st->scheme[3] = (vsize-4) & 0xFF;
st->scheme[3] = (vsize-4) & 0xFF
st->scheme[3]
st->scheme
st
st
scheme
3
(vsize-4) & 0xFF
(vsize-4)
vsize-4
vsize
vsize
4
0xFF
bcopy(genp, st->scheme+2+2, varpre2octets(genp));
bcopy(genp, st->scheme+2+2, varpre2octets(genp))
bcopy
bcopy
genp
genp
st->scheme+2+2
st->scheme+2
st->scheme
st
st
scheme
2
2
varpre2octets(genp)
varpre2octets
varpre2octets
genp
genp
bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));
bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp))
bcopy
bcopy
modp
modp
st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp))
st->scheme + 2
st->scheme
st
st
scheme
2
(genp == NULL ? 0 : 2 + varpre2octets(genp))
genp == NULL ? 0 : 2 + varpre2octets(genp)
genp == NULL
genp
genp
NULL
NULL
0
2 + varpre2octets(genp)
2
varpre2octets(genp)
varpre2octets
varpre2octets
genp
genp
varpre2octets(modp)
varpre2octets
varpre2octets
modp
modp
;
st->schemesize = vsize;
st->schemesize = vsize
st->schemesize
st
st
schemesize
vsize
vsize
st->texchangesize = parts[0].size;
st->texchangesize = parts[0].size
st->texchangesize
st
st
texchangesize
parts[0].size
parts[0]
parts
parts
0
size
st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));
st->texchange = calloc(st->texchangesize, sizeof(u_int8_t))
st->texchange
st
st
texchange
calloc(st->texchangesize, sizeof(u_int8_t))
calloc
calloc
st->texchangesize
st
st
texchangesize
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }
st->texchange == NULL
st->texchange
st
st
texchange
NULL
NULL
{		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }
log_error("calloc() in handle_value_request()");
log_error("calloc() in handle_value_request()")
log_error
log_error
"calloc() in handle_value_request()"
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
goto resourcefail;
resourcefail
bcopy(parts[0].where, st->texchange, st->texchangesize);
bcopy(parts[0].where, st->texchange, st->texchangesize)
bcopy
bcopy
parts[0].where
parts[0]
parts
parts
0
where
st->texchange
st
st
texchange
st->texchangesize
st
st
texchangesize
strncpy(st->address, address, 15);
strncpy(st->address, address, 15)
strncpy
strncpy
st->address
st
st
address
address
address
15
st->port = port;
st->port = port
st->port
st
st
port
port
port
st->counter = header->counter;
st->counter = header->counter
st->counter
st
st
counter
header->counter
header
header
counter
bcopy(header->icookie, st->icookie, COOKIE_SIZE);
bcopy(header->icookie, st->icookie, COOKIE_SIZE)
bcopy
bcopy
header->icookie
header
header
icookie
st->icookie
st
st
icookie
COOKIE_SIZE
COOKIE_SIZE
bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);
bcopy(header->rcookie, st->rcookie, COOKIE_SIZE)
bcopy
bcopy
header->rcookie
header
header
rcookie
st->rcookie
st
st
rcookie
COOKIE_SIZE
COOKIE_SIZE
bcopy(&header->counter, st->uSPITBV, 3);
bcopy(&header->counter, st->uSPITBV, 3)
bcopy
bcopy
&header->counter
header->counter
header
header
counter
st->uSPITBV
st
st
uSPITBV
3
if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }
(st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL
(st->roschemes = calloc(ssize, sizeof(u_int8_t)))
st->roschemes = calloc(ssize, sizeof(u_int8_t))
st->roschemes
st
st
roschemes
calloc(ssize, sizeof(u_int8_t))
calloc
calloc
ssize
ssize
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

NULL
NULL
{		  log_error("calloc() in handle_value_request()");		  state_value_reset(st);		  goto resourcefail;	     }
log_error("calloc() in handle_value_request()");
log_error("calloc() in handle_value_request()")
log_error
log_error
"calloc() in handle_value_request()"
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
goto resourcefail;
resourcefail
bcopy(schemes, st->roschemes, ssize);
bcopy(schemes, st->roschemes, ssize)
bcopy
bcopy
schemes
schemes
st->roschemes
st
st
roschemes
ssize
ssize
st->roschemesize = ssize;
st->roschemesize = ssize
st->roschemesize
st
st
roschemesize
ssize
ssize
if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  goto resourcefail;	     }
pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1
pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize))
pick_attrib
pick_attrib
st
st
&(st->oSPIoattrib)
(st->oSPIoattrib)
st->oSPIoattrib
st
st
oSPIoattrib
&(st->oSPIoattribsize)
(st->oSPIoattribsize)
st->oSPIoattribsize
st
st
oSPIoattribsize
-1
1
{		  state_value_reset(st);		  goto resourcefail;	     }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
goto resourcefail;
resourcefail
st->lifetime = exchange_timeout + time(NULL);
st->lifetime = exchange_timeout + time(NULL)
st->lifetime
st
st
lifetime
exchange_timeout + time(NULL)
exchange_timeout
exchange_timeout
time(NULL)
time
time
NULL
NULL
state_insert(st);
state_insert(st)
state_insert
state_insert
st
st
if (st->phase != VALUE_RESPONSE) {		LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__			 ": value request from %s, but we are in state %d",			 st->address, st->phase));		return (-1);	}
st->phase != VALUE_RESPONSE
st->phase
st
st
phase
VALUE_RESPONSE
VALUE_RESPONSE
{		LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__			 ": value request from %s, but we are in state %d",			 st->address, st->phase));		return (-1);	}
LOG_DBG((LOG_PROTOCOL, 55, __FUNCTION__			 ": value request from %s, but we are in state %d",			 st->address, st->phase));
return (-1);
(-1)
-1
1
packet_size = PACKET_BUFFER_SIZE;
packet_size = PACKET_BUFFER_SIZE
packet_size
packet_size
PACKET_BUFFER_SIZE
PACKET_BUFFER_SIZE
if (photuris_value_response(st, packet_buffer, &packet_size) == -1)	     return (-1);
photuris_value_response(st, packet_buffer, &packet_size) == -1
photuris_value_response(st, packet_buffer, &packet_size)
photuris_value_response
photuris_value_response
st
st
packet_buffer
packet_buffer
&packet_size
packet_size
packet_size
-1
1
return (-1);
(-1)
-1
1
send_packet();
send_packet()
send_packet
send_packet
compute_shared_secret(st, &(st->shared), &(st->sharedsize));
compute_shared_secret(st, &(st->shared), &(st->sharedsize))
compute_shared_secret
compute_shared_secret
st
st
&(st->shared)
(st->shared)
st->shared
st
st
shared
&(st->sharedsize)
(st->sharedsize)
st->sharedsize
st
st
sharedsize
if (st->oSPIprivacyctx == NULL) {	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}
st->oSPIprivacyctx == NULL
st->oSPIprivacyctx
st
st
oSPIprivacyctx
NULL
NULL
{	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}
init_privacy_key(st, 0);
init_privacy_key(st, 0)
init_privacy_key
init_privacy_key
st
st
0
init_privacy_key(st, 1);
init_privacy_key(st, 1)
init_privacy_key
init_privacy_key
st
st
1
st->retries = 0;
st->retries = 0
st->retries
st
st
retries
0
st->phase = VALUE_RESPONSE;
st->phase = VALUE_RESPONSE
st->phase
st
st
phase
VALUE_RESPONSE
VALUE_RESPONSE
return (0);
(0)
0
resourcefail:	packet_size = PACKET_BUFFER_SIZE;
resourcefail
packet_size = PACKET_BUFFER_SIZE;
packet_size = PACKET_BUFFER_SIZE
packet_size
packet_size
PACKET_BUFFER_SIZE
PACKET_BUFFER_SIZE
photuris_error_message(st, packet_buffer, &packet_size,			       header->icookie, header->rcookie,			       header->counter, RESOURCE_LIMIT);
photuris_error_message(st, packet_buffer, &packet_size,			       header->icookie, header->rcookie,			       header->counter, RESOURCE_LIMIT)
photuris_error_message
photuris_error_message
st
st
packet_buffer
packet_buffer
&packet_size
packet_size
packet_size
header->icookie
header
header
icookie
header->rcookie
header
header
rcookie
header->counter
header
header
counter
RESOURCE_LIMIT
RESOURCE_LIMIT
send_packet();
send_packet()
send_packet
send_packet
return (0);
(0)
0
-----joern-----
(528,357,0)
(533,725,0)
(757,293,0)
(6,769,0)
(122,21,0)
(293,451,0)
(685,572,0)
(378,769,0)
(77,29,0)
(555,702,0)
(466,691,0)
(161,442,0)
(500,101,0)
(437,620,0)
(585,523,0)
(298,764,0)
(246,680,0)
(131,772,0)
(313,232,0)
(24,358,0)
(148,218,0)
(160,101,0)
(52,654,0)
(8,777,0)
(676,725,0)
(456,391,0)
(20,582,0)
(211,431,0)
(599,9,0)
(227,619,0)
(170,21,0)
(744,245,0)
(584,731,0)
(356,242,0)
(154,107,0)
(73,377,0)
(200,419,0)
(639,447,0)
(204,251,0)
(372,85,0)
(667,436,0)
(176,340,0)
(18,326,0)
(286,71,0)
(528,140,0)
(505,242,0)
(480,708,0)
(444,529,0)
(661,347,0)
(533,493,0)
(563,10,0)
(9,599,0)
(254,36,0)
(497,230,0)
(240,708,0)
(218,242,0)
(179,433,0)
(408,139,0)
(320,90,0)
(274,60,0)
(138,514,0)
(348,668,0)
(585,656,0)
(466,545,0)
(301,561,0)
(122,664,0)
(668,218,0)
(262,527,0)
(360,420,0)
(446,242,0)
(199,198,0)
(760,725,0)
(708,59,0)
(318,179,0)
(764,318,0)
(17,9,0)
(491,233,0)
(142,725,0)
(88,600,0)
(683,733,0)
(463,760,0)
(483,324,0)
(216,289,0)
(27,588,0)
(707,242,0)
(26,676,0)
(546,763,0)
(708,145,0)
(1,408,0)
(528,457,0)
(123,732,0)
(528,21,0)
(667,723,0)
(743,728,0)
(493,414,0)
(582,81,0)
(232,433,0)
(73,140,0)
(290,725,0)
(343,33,0)
(271,242,0)
(521,443,0)
(318,595,0)
(518,768,0)
(433,72,0)
(335,242,0)
(164,608,0)
(237,139,0)
(60,356,0)
(118,763,0)
(726,25,0)
(708,240,0)
(179,187,0)
(275,581,0)
(122,254,0)
(360,151,0)
(626,725,0)
(574,553,0)
(710,420,0)
(25,242,0)
(119,240,0)
(249,377,0)
(96,209,0)
(783,703,0)
(676,710,0)
(609,148,0)
(29,90,0)
(420,447,0)
(105,242,0)
(122,570,0)
(58,487,0)
(305,543,0)
(777,203,0)
(684,237,0)
(703,725,0)
(234,447,0)
(148,725,0)
(81,167,0)
(4,155,0)
(489,773,0)
(405,768,0)
(619,227,0)
(764,725,0)
(526,39,0)
(10,448,0)
(676,46,0)
(186,423,0)
(676,355,0)
(658,574,0)
(213,443,0)
(55,208,0)
(688,182,0)
(311,447,0)
(327,572,0)
(698,380,0)
(133,183,0)
(521,595,0)
(135,501,0)
(789,447,0)
(331,254,0)
(361,484,0)
(593,573,0)
(309,724,0)
(215,691,0)
(607,118,0)
(741,725,0)
(680,680,0)
(766,142,0)
(762,249,0)
(774,747,0)
(46,676,0)
(30,447,0)
(282,110,0)
(11,33,0)
(165,659,0)
(407,39,0)
(402,580,0)
(647,596,0)
(509,683,0)
(299,768,0)
(376,37,0)
(414,618,0)
(121,521,0)
(283,263,0)
(22,6,0)
(43,242,0)
(646,481,0)
(382,721,0)
(195,242,0)
(218,668,0)
(577,98,0)
(693,247,0)
(162,404,0)
(257,612,0)
(403,447,0)
(537,323,0)
(584,6,0)
(584,747,0)
(268,604,0)
(499,315,0)
(440,661,0)
(411,225,0)
(422,662,0)
(90,29,0)
(269,790,0)
(276,227,0)
(515,533,0)
(282,305,0)
(687,148,0)
(381,725,0)
(663,420,0)
(271,233,0)
(128,580,0)
(785,37,0)
(589,596,0)
(753,756,0)
(369,33,0)
(606,360,0)
(457,155,0)
(150,355,0)
(313,720,0)
(560,447,0)
(70,392,0)
(33,596,0)
(596,242,0)
(541,4,0)
(374,518,0)
(592,585,0)
(459,292,0)
(209,455,0)
(568,555,0)
(469,725,0)
(500,315,0)
(102,619,0)
(63,669,0)
(265,502,0)
(413,120,0)
(181,755,0)
(539,174,0)
(429,594,0)
(604,435,0)
(101,155,0)
(209,725,0)
(122,71,0)
(28,85,0)
(122,85,0)
(148,207,0)
(13,242,0)
(152,669,0)
(683,436,0)
(556,457,0)
(745,643,0)
(528,225,0)
(81,582,0)
(23,187,0)
(377,689,0)
(494,413,0)
(392,70,0)
(29,77,0)
(466,203,0)
(446,604,0)
(461,519,0)
(542,155,0)
(166,610,0)
(252,725,0)
(573,725,0)
(430,227,0)
(108,63,0)
(695,90,0)
(386,368,0)
(736,247,0)
(169,237,0)
(290,263,0)
(82,348,0)
(133,484,0)
(229,165,0)
(723,296,0)
(525,723,0)
(208,447,0)
(476,117,0)
(483,567,0)
(775,731,0)
(555,769,0)
(614,447,0)
(263,290,0)
(523,680,0)
(486,769,0)
(359,128,0)
(528,723,0)
(267,173,0)
(389,384,0)
(668,559,0)
(155,309,0)
(508,669,0)
(528,423,0)
(625,572,0)
(73,489,0)
(315,500,0)
(31,271,0)
(752,36,0)
(667,377,0)
(408,680,0)
(46,420,0)
(714,460,0)
(470,725,0)
(68,113,0)
(724,309,0)
(553,456,0)
(122,357,0)
(590,265,0)
(584,596,0)
(548,382,0)
(413,242,0)
(201,528,0)
(448,545,0)
(93,109,0)
(772,680,0)
(384,725,0)
(644,121,0)
(357,709,0)
(358,475,0)
(71,447,0)
(443,203,0)
(174,596,0)
(103,600,0)
(307,447,0)
(123,720,0)
(373,645,0)
(115,538,0)
(466,768,0)
(584,433,0)
(337,324,0)
(768,401,0)
(472,554,0)
(10,732,0)
(708,699,0)
(484,133,0)
(109,447,0)
(725,622,0)
(225,725,0)
(70,772,0)
(597,206,0)
(332,554,0)
(73,387,0)
(611,733,0)
(581,25,0)
(579,118,0)
(404,420,0)
(67,206,0)
(761,320,0)
(771,433,0)
(44,406,0)
(675,750,0)
(524,570,0)
(296,242,0)
(251,25,0)
(318,764,0)
(503,123,0)
(474,58,0)
(84,612,0)
(620,420,0)
(168,38,0)
(573,167,0)
(197,39,0)
(741,133,0)
(96,516,0)
(283,416,0)
(317,608,0)
(740,680,0)
(528,790,0)
(643,725,0)
(770,88,0)
(495,268,0)
(161,655,0)
(680,740,0)
(184,242,0)
(250,308,0)
(151,360,0)
(273,282,0)
(528,254,0)
(729,496,0)
(514,455,0)
(252,765,0)
(370,489,0)
(111,46,0)
(3,733,0)
(303,694,0)
(690,120,0)
(717,466,0)
(426,580,0)
(107,242,0)
(269,608,0)
(620,116,0)
(557,725,0)
(352,552,0)
(510,678,0)
(299,545,0)
(164,790,0)
(570,507,0)
(601,36,0)
(399,368,0)
(314,699,0)
(353,200,0)
(776,357,0)
(434,338,0)
(441,542,0)
(23,731,0)
(514,725,0)
(616,382,0)
(573,593,0)
(36,242,0)
(39,526,0)
(206,725,0)
(261,626,0)
(685,242,0)
(232,747,0)
(464,71,0)
(187,392,0)
(732,10,0)
(259,242,0)
(284,107,0)
(122,377,0)
(287,661,0)
(739,392,0)
(73,664,0)
(283,725,0)
(633,616,0)
(638,219,0)
(424,726,0)
(683,380,0)
(182,688,0)
(233,271,0)
(161,122,0)
(595,318,0)
(2,620,0)
(507,736,0)
(703,456,0)
(780,662,0)
(790,224,0)
(566,191,0)
(392,706,0)
(324,203,0)
(610,447,0)
(114,423,0)
(456,242,0)
(398,503,0)
(420,9,0)
(225,493,0)
(528,377,0)
(709,503,0)
(53,582,0)
(659,165,0)
(141,718,0)
(487,242,0)
(45,777,0)
(570,725,0)
(680,706,0)
(187,401,0)
(329,123,0)
(195,25,0)
(33,604,0)
(564,349,0)
(122,423,0)
(59,708,0)
(493,242,0)
(448,10,0)
(653,545,0)
(321,123,0)
(442,112,0)
(152,740,0)
(172,408,0)
(98,420,0)
(518,545,0)
(256,447,0)
(754,680,0)
(670,431,0)
(279,471,0)
(603,260,0)
(466,543,0)
(305,282,0)
(246,368,0)
(207,148,0)
(57,252,0)
(449,741,0)
(572,685,0)
(584,714,0)
(34,516,0)
(182,33,0)
(760,155,0)
(434,36,0)
(665,308,0)
(682,164,0)
(251,615,0)
(264,768,0)
(124,271,0)
(455,514,0)
(624,542,0)
(649,81,0)
(530,69,0)
(349,72,0)
(61,340,0)
(379,328,0)
(173,25,0)
(686,447,0)
(683,527,0)
(528,570,0)
(289,725,0)
(662,422,0)
(326,5,0)
(161,269,0)
(173,367,0)
(676,447,0)
(617,404,0)
(725,384,0)
(141,790,0)
(443,521,0)
(149,708,0)
(702,656,0)
(161,249,0)
(511,473,0)
(117,305,0)
(249,723,0)
(217,663,0)
(122,608,0)
(191,324,0)
(475,447,0)
(293,725,0)
(769,486,0)
(423,133,0)
(320,769,0)
(562,110,0)
(746,47,0)
(179,242,0)
(48,25,0)
(9,145,0)
(86,24,0)
(270,527,0)
(87,720,0)
(65,585,0)
(297,183,0)
(523,669,0)
(35,191,0)
(790,652,0)
(312,756,0)
(619,420,0)
(73,790,0)
(707,151,0)
(36,434,0)
(616,488,0)
(209,155,0)
(271,669,0)
(503,709,0)
(567,483,0)
(244,664,0)
(621,319,0)
(735,242,0)
(110,732,0)
(575,358,0)
(280,320,0)
(165,725,0)
(130,601,0)
(512,246,0)
(191,420,0)
(380,683,0)
(147,710,0)
(685,788,0)
(594,155,0)
(653,508,0)
(569,703,0)
(289,414,0)
(310,176,0)
(728,117,0)
(393,36,0)
(751,447,0)
(471,420,0)
(16,689,0)
(73,225,0)
(586,447,0)
(12,107,0)
(157,69,0)
(772,669,0)
(641,254,0)
(677,694,0)
(288,694,0)
(636,242,0)
(782,714,0)
(691,215,0)
(33,25,0)
(555,90,0)
(73,423,0)
(163,584,0)
(336,203,0)
(559,756,0)
(397,393,0)
(350,25,0)
(703,218,0)
(654,5,0)
(514,155,0)
(161,141,0)
(712,706,0)
(729,725,0)
(731,460,0)
(73,357,0)
(209,447,0)
(367,173,0)
(445,732,0)
(25,350,0)
(576,242,0)
(136,469,0)
(767,596,0)
(295,391,0)
(356,60,0)
(520,526,0)
(584,616,0)
(137,387,0)
(435,604,0)
(73,494,0)
(414,289,0)
(231,5,0)
(724,420,0)
(232,731,0)
(626,319,0)
(395,98,0)
(697,393,0)
(322,269,0)
(113,552,0)
(239,284,0)
(302,440,0)
(648,457,0)
(339,379,0)
(645,420,0)
(303,349,0)
(731,392,0)
(23,179,0)
(733,683,0)
(122,140,0)
(502,265,0)
(739,721,0)
(528,387,0)
(73,608,0)
(72,747,0)
(451,242,0)
(101,725,0)
(24,245,0)
(101,500,0)
(308,665,0)
(223,553,0)
(602,559,0)
(517,729,0)
(99,208,0)
(559,668,0)
(155,447,0)
(516,725,0)
(269,377,0)
(59,481,0)
(527,420,0)
(565,295,0)
(728,725,0)
(58,38,0)
(175,242,0)
(412,179,0)
(465,203,0)
(591,391,0)
(351,447,0)
(594,725,0)
(732,720,0)
(519,406,0)
(667,608,0)
(741,237,0)
(122,790,0)
(391,456,0)
(141,608,0)
(477,584,0)
(635,494,0)
(737,736,0)
(161,164,0)
(433,488,0)
(618,414,0)
(550,447,0)
(237,741,0)
(110,282,0)
(601,725,0)
(691,466,0)
(299,466,0)
(128,359,0)
(63,680,0)
(664,260,0)
(121,518,0)
(391,295,0)
(608,759,0)
(722,242,0)
(604,242,0)
(421,292,0)
(645,309,0)
(788,685,0)
(89,208,0)
(263,283,0)
(125,447,0)
(394,447,0)
(414,493,0)
(580,128,0)
(21,725,0)
(710,676,0)
(470,62,0)
(496,98,0)
(661,471,0)
(662,780,0)
(60,420,0)
(627,140,0)
(285,764,0)
(324,191,0)
(786,433,0)
(174,615,0)
(787,750,0)
(294,610,0)
(330,230,0)
(296,37,0)
(607,194,0)
(416,283,0)
(788,420,0)
(528,469,0)
(341,665,0)
(404,676,0)
(167,81,0)
(587,447,0)
(116,242,0)
(507,242,0)
(715,283,0)
(309,127,0)
(381,242,0)
(584,187,0)
(702,555,0)
(323,142,0)
(750,155,0)
(189,584,0)
(458,141,0)
(777,545,0)
(249,608,0)
(692,514,0)
(484,473,0)
(142,155,0)
(161,419,0)
(185,203,0)
(623,420,0)
(752,725,0)
(141,723,0)
(716,290,0)
(105,720,0)
(542,358,0)
(417,314,0)
(110,720,0)
(654,725,0)
(277,356,0)
(688,483,0)
(527,683,0)
(246,139,0)
(173,340,0)
(528,85,0)
(528,608,0)
(726,718,0)
(704,289,0)
(164,723,0)
(281,207,0)
(454,187,0)
(255,88,0)
(431,475,0)
(69,127,0)
(219,493,0)
(363,77,0)
(90,242,0)
(72,242,0)
(101,160,0)
(4,725,0)
(196,788,0)
(198,584,0)
(334,471,0)
(388,242,0)
(601,691,0)
(504,440,0)
(85,725,0)
(117,728,0)
(747,72,0)
(183,133,0)
(179,747,0)
(224,790,0)
(594,375,0)
(593,242,0)
(15,187,0)
(784,676,0)
(523,585,0)
(4,538,0)
(324,545,0)
(696,619,0)
(730,387,0)
(241,573,0)
(228,752,0)
(752,357,0)
(489,725,0)
(516,155,0)
(9,420,0)
(63,368,0)
(553,574,0)
(496,242,0)
(405,63,0)
(457,725,0)
(383,12,0)
(173,501,0)
(513,594,0)
(440,368,0)
(14,447,0)
(116,620,0)
(439,110,0)
(672,447,0)
(50,46,0)
(742,101,0)
(23,747,0)
(523,368,0)
(232,187,0)
(448,203,0)
(324,483,0)
(219,725,0)
(7,21,0)
(33,182,0)
(613,458,0)
(75,557,0)
(680,368,0)
(358,750,0)
(260,462,0)
(368,242,0)
(224,104,0)
(126,60,0)
(595,521,0)
(518,121,0)
(167,242,0)
(259,596,0)
(210,489,0)
(588,122,0)
(713,59,0)
(359,652,0)
(49,521,0)
(230,497,0)
(425,377,0)
(667,678,0)
(152,368,0)
(393,356,0)
(755,683,0)
(95,659,0)
(355,676,0)
(382,769,0)
(345,451,0)
(571,224,0)
(535,739,0)
(292,242,0)
(427,447,0)
(768,405,0)
(719,469,0)
(289,167,0)
(538,447,0)
(456,703,0)
(662,497,0)
(777,768,0)
(85,218,0)
(54,29,0)
(358,542,0)
(245,475,0)
(676,404,0)
(272,392,0)
(118,519,0)
(707,206,0)
(408,368,0)
(469,105,0)
(73,85,0)
(140,725,0)
(237,669,0)
(772,70,0)
(122,387,0)
(409,219,0)
(549,252,0)
(528,4,0)
(194,607,0)
(518,203,0)
(248,724,0)
(647,94,0)
(485,667,0)
(497,242,0)
(534,772,0)
(481,447,0)
(679,434,0)
(291,472,0)
(23,433,0)
(362,759,0)
(668,348,0)
(416,47,0)
(434,720,0)
(258,381,0)
(387,487,0)
(179,318,0)
(415,185,0)
(161,528,0)
(153,752,0)
(720,242,0)
(765,283,0)
(358,24,0)
(146,707,0)
(779,762,0)
(651,259,0)
(76,72,0)
(557,526,0)
(265,593,0)
(642,436,0)
(324,604,0)
(134,38,0)
(247,736,0)
(40,446,0)
(773,242,0)
(19,215,0)
(73,117,0)
(542,725,0)
(410,788,0)
(472,725,0)
(78,723,0)
(105,732,0)
(333,655,0)
(521,121,0)
(393,725,0)
(106,451,0)
(73,254,0)
(528,494,0)
(584,198,0)
(306,367,0)
(630,729,0)
(738,284,0)
(129,324,0)
(673,232,0)
(278,604,0)
(122,469,0)
(674,647,0)
(235,725,0)
(478,443,0)
(483,688,0)
(506,155,0)
(63,405,0)
(79,682,0)
(221,152,0)
(349,303,0)
(185,545,0)
(226,299,0)
(643,552,0)
(179,731,0)
(714,769,0)
(701,333,0)
(164,377,0)
(271,139,0)
(122,494,0)
(80,4,0)
(700,447,0)
(194,420,0)
(750,725,0)
(69,612,0)
(612,69,0)
(385,683,0)
(532,63,0)
(694,303,0)
(634,77,0)
(354,314,0)
(629,747,0)
(41,555,0)
(652,359,0)
(545,653,0)
(705,242,0)
(73,447,0)
(325,377,0)
(497,662,0)
(740,152,0)
(0,313,0)
(237,242,0)
(536,573,0)
(457,109,0)
(179,23,0)
(356,393,0)
(340,173,0)
(593,265,0)
(387,725,0)
(42,773,0)
(73,21,0)
(456,553,0)
(180,447,0)
(47,416,0)
(120,413,0)
(144,508,0)
(205,685,0)
(605,557,0)
(467,120,0)
(632,382,0)
(266,246,0)
(203,447,0)
(508,680,0)
(73,723,0)
(452,152,0)
(656,585,0)
(6,401,0)
(482,488,0)
(756,559,0)
(222,142,0)
(758,731,0)
(432,501,0)
(122,225,0)
(519,118,0)
(479,155,0)
(709,543,0)
(720,313,0)
(727,245,0)
(32,119,0)
(578,523,0)
(69,242,0)
(309,645,0)
(185,768,0)
(689,242,0)
(664,725,0)
(443,545,0)
(428,105,0)
(73,610,0)
(340,176,0)
(501,173,0)
(528,71,0)
(581,94,0)
(143,209,0)
(455,209,0)
(365,645,0)
(451,293,0)
(161,667,0)
(122,117,0)
(681,728,0)
(547,338,0)
(122,489,0)
(671,710,0)
(694,769,0)
(466,299,0)
(526,242,0)
(283,765,0)
(440,669,0)
(628,293,0)
(37,420,0)
(492,447,0)
(342,401,0)
(156,516,0)
(528,489,0)
(212,140,0)
(468,724,0)
(37,296,0)
(158,502,0)
(778,608,0)
(471,661,0)
(38,58,0)
(269,723,0)
(544,271,0)
(83,595,0)
(683,755,0)
(178,422,0)
(473,484,0)
(661,440,0)
(171,432,0)
(540,616,0)
(390,215,0)
(316,496,0)
(309,155,0)
(763,284,0)
(531,494,0)
(39,420,0)
(678,436,0)
(450,447,0)
(453,506,0)
(243,663,0)
(583,523,0)
(733,420,0)
(438,618,0)
(418,242,0)
(396,165,0)
(21,167,0)
(558,194,0)
(140,116,0)
(593,219,0)
(765,252,0)
(349,739,0)
(104,224,0)
(66,545,0)
(760,375,0)
(451,127,0)
(498,448,0)
(650,721,0)
(748,432,0)
(508,368,0)
(304,6,0)
(97,290,0)
(522,360,0)
(141,377,0)
(152,680,0)
(728,36,0)
(159,242,0)
(769,706,0)
(545,721,0)
(400,271,0)
(631,486,0)
(666,185,0)
(100,508,0)
(773,139,0)
(118,107,0)
(663,683,0)
(526,557,0)
(528,117,0)
(529,533,0)
(357,752,0)
(691,601,0)
(98,496,0)
(551,574,0)
(749,760,0)
(51,295,0)
(347,661,0)
(448,768,0)
(423,725,0)
(188,160,0)
(637,101,0)
(596,589,0)
(346,195,0)
(193,665,0)
(338,434,0)
(299,203,0)
(484,139,0)
(734,242,0)
(655,328,0)
(443,768,0)
(214,447,0)
(501,432,0)
(220,502,0)
(736,507,0)
(665,155,0)
(533,529,0)
(249,615,0)
(64,676,0)
(344,176,0)
(268,94,0)
(209,96,0)
(177,23,0)
(759,242,0)
(56,406,0)
(683,663,0)
(508,653,0)
(772,368,0)
(496,729,0)
(192,12,0)
(764,36,0)
(249,790,0)
(364,460,0)
(561,442,0)
(165,36,0)
(622,725,0)
(640,470,0)
(656,702,0)
(202,741,0)
(236,664,0)
(406,519,0)
(763,118,0)
(123,503,0)
(91,309,0)
(494,725,0)
(240,119,0)
(652,242,0)
(142,323,0)
(122,723,0)
(132,714,0)
(516,96,0)
(260,242,0)
(73,469,0)
(161,73,0)
(528,664,0)
(232,313,0)
(440,680,0)
(657,73,0)
(254,725,0)
(238,475,0)
(580,420,0)
(433,739,0)
(660,533,0)
(371,601,0)
(219,593,0)
(92,349,0)
(269,94,0)
(434,732,0)
(487,58,0)
(711,678,0)
(750,358,0)
(528,447,0)
(151,707,0)
(206,707,0)
(781,225,0)
(490,570,0)
(300,739,0)
(118,607,0)
(324,768,0)
(253,62,0)
(366,567,0)
(190,506,0)
(486,392,0)
(33,343,1)
(611,663,1)
(412,185,1)
(662,422,1)
(683,509,1)
(742,637,1)
(772,680,1)
(16,377,1)
(564,92,1)
(716,765,1)
(73,377,1)
(297,133,1)
(110,439,1)
(664,236,1)
(760,749,1)
(345,293,1)
(60,274,1)
(237,139,1)
(4,725,1)
(48,246,1)
(711,510,1)
(457,155,1)
(358,750,1)
(97,716,1)
(523,578,1)
(189,477,1)
(520,557,1)
(294,332,1)
(113,68,1)
(126,659,1)
(616,540,1)
(81,649,1)
(337,604,1)
(440,669,1)
(680,740,1)
(428,469,1)
(324,203,1)
(336,481,1)
(584,189,1)
(429,513,1)
(168,387,1)
(456,703,1)
(74,545,1)
(424,367,1)
(496,316,1)
(217,527,1)
(69,530,1)
(433,771,1)
(466,768,1)
(206,597,1)
(688,182,1)
(151,360,1)
(726,25,1)
(179,731,1)
(323,537,1)
(743,185,1)
(387,725,1)
(468,91,1)
(766,222,1)
(272,408,1)
(555,769,1)
(141,377,1)
(685,205,1)
(322,647,1)
(306,173,1)
(781,411,1)
(567,366,1)
(201,109,1)
(559,602,1)
(303,349,1)
(223,574,1)
(456,553,1)
(582,20,1)
(349,72,1)
(544,400,1)
(566,337,1)
(676,710,1)
(440,302,1)
(733,3,1)
(497,662,1)
(623,240,1)
(446,40,1)
(161,141,1)
(58,474,1)
(362,608,1)
(179,747,1)
(635,384,1)
(36,434,1)
(299,768,1)
(754,382,1)
(729,630,1)
(122,387,1)
(476,728,1)
(448,203,1)
(621,626,1)
(58,38,1)
(278,198,1)
(500,315,1)
(501,135,1)
(750,787,1)
(557,725,1)
(173,501,1)
(195,346,1)
(109,93,1)
(60,420,1)
(164,608,1)
(719,179,1)
(80,760,1)
(73,610,1)
(73,85,1)
(661,287,1)
(549,715,1)
(160,188,1)
(631,378,1)
(518,203,1)
(437,2,1)
(571,72,1)
(391,591,1)
(135,432,1)
(406,56,1)
(122,377,1)
(387,730,1)
(299,203,1)
(702,555,1)
(604,435,1)
(252,57,1)
(666,356,1)
(19,601,1)
(316,729,1)
(585,592,1)
(256,676,1)
(142,155,1)
(694,769,1)
(283,765,1)
(487,58,1)
(767,367,1)
(512,482,1)
(277,393,1)
(156,34,1)
(185,415,1)
(741,449,1)
(502,220,1)
(645,373,1)
(339,240,1)
(451,293,1)
(469,725,1)
(605,75,1)
(707,146,1)
(668,559,1)
(185,545,1)
(80,323,1)
(747,774,1)
(508,680,1)
(737,570,1)
(142,766,1)
(490,416,1)
(659,95,1)
(641,331,1)
(161,249,1)
(452,754,1)
(310,344,1)
(116,620,1)
(434,338,1)
(707,151,1)
(555,90,1)
(318,764,1)
(289,167,1)
(314,417,1)
(280,761,1)
(720,313,1)
(779,174,1)
(231,654,1)
(467,494,1)
(122,71,1)
(334,279,1)
(470,640,1)
(470,725,1)
(209,455,1)
(2,140,1)
(353,314,1)
(79,246,1)
(538,115,1)
(430,619,1)
(366,324,1)
(122,494,1)
(161,164,1)
(219,638,1)
(37,376,1)
(24,86,1)
(260,603,1)
(573,241,1)
(629,76,1)
(321,357,1)
(528,469,1)
(54,77,1)
(122,117,1)
(194,420,1)
(96,516,1)
(68,529,1)
(528,664,1)
(728,681,1)
(308,665,1)
(39,420,1)
(27,500,1)
(542,441,1)
(73,608,1)
(367,306,1)
(528,357,1)
(215,390,1)
(528,117,1)
(594,725,1)
(708,699,1)
(147,355,1)
(195,25,1)
(73,21,1)
(305,282,1)
(86,575,1)
(229,396,1)
(254,725,1)
(708,145,1)
(683,380,1)
(519,406,1)
(161,667,1)
(584,6,1)
(308,250,1)
(247,693,1)
(546,579,1)
(443,203,1)
(61,176,1)
(342,6,1)
(471,420,1)
(218,668,1)
(603,664,1)
(500,101,1)
(526,557,1)
(514,138,1)
(227,430,1)
(377,425,1)
(170,7,1)
(708,59,1)
(349,564,1)
(271,233,1)
(267,340,1)
(685,572,1)
(458,613,1)
(529,444,1)
(254,641,1)
(320,769,1)
(341,506,1)
(496,729,1)
(660,515,1)
(134,168,1)
(687,218,1)
(249,790,1)
(558,519,1)
(624,750,1)
(207,281,1)
(489,210,1)
(124,31,1)
(703,569,1)
(671,147,1)
(212,627,1)
(286,308,1)
(581,275,1)
(423,725,1)
(42,489,1)
(23,747,1)
(260,462,1)
(309,127,1)
(172,652,1)
(357,752,1)
(173,267,1)
(251,204,1)
(528,4,1)
(563,445,1)
(246,680,1)
(163,596,1)
(580,420,1)
(542,725,1)
(29,54,1)
(528,21,1)
(449,202,1)
(744,727,1)
(164,723,1)
(777,8,1)
(185,203,1)
(412,466,1)
(691,215,1)
(728,36,1)
(268,604,1)
(630,517,1)
(95,165,1)
(702,656,1)
(152,680,1)
(626,725,1)
(350,48,1)
(557,605,1)
(746,283,1)
(561,301,1)
(485,642,1)
(398,123,1)
(415,666,1)
(788,410,1)
(491,296,1)
(234,500,1)
(637,71,1)
(162,617,1)
(31,233,1)
(764,725,1)
(773,42,1)
(161,528,1)
(663,243,1)
(298,285,1)
(514,725,1)
(285,412,1)
(123,720,1)
(47,746,1)
(393,397,1)
(73,723,1)
(594,155,1)
(689,16,1)
(496,98,1)
(262,270,1)
(371,717,1)
(206,725,1)
(761,88,1)
(203,465,1)
(782,731,1)
(122,588,1)
(647,674,1)
(522,496,1)
(274,126,1)
(232,673,1)
(287,440,1)
(590,502,1)
(657,256,1)
(179,187,1)
(161,269,1)
(432,171,1)
(281,148,1)
(413,120,1)
(84,257,1)
(312,85,1)
(493,414,1)
(597,67,1)
(70,772,1)
(598,384,1)
(73,225,1)
(6,304,1)
(122,423,1)
(533,660,1)
(199,584,1)
(346,688,1)
(165,725,1)
(750,725,1)
(331,732,1)
(527,420,1)
(232,187,1)
(73,790,1)
(683,663,1)
(18,183,1)
(695,227,1)
(51,207,1)
(448,768,1)
(75,39,1)
(416,283,1)
(182,33,1)
(676,355,1)
(756,753,1)
(547,679,1)
(237,684,1)
(713,480,1)
(188,742,1)
(76,292,1)
(647,596,1)
(283,263,1)
(69,127,1)
(461,406,1)
(625,327,1)
(264,320,1)
(688,483,1)
(289,725,1)
(592,523,1)
(645,420,1)
(632,548,1)
(484,139,1)
(73,117,1)
(205,572,1)
(683,755,1)
(181,385,1)
(710,420,1)
(73,664,1)
(21,170,1)
(508,669,1)
(56,44,1)
(122,489,1)
(122,608,1)
(685,788,1)
(161,73,1)
(653,508,1)
(228,153,1)
(101,160,1)
(246,266,1)
(516,156,1)
(626,261,1)
(405,63,1)
(209,725,1)
(512,364,1)
(440,368,1)
(117,728,1)
(553,223,1)
(105,732,1)
(317,778,1)
(236,244,1)
(393,36,1)
(8,45,1)
(451,127,1)
(225,781,1)
(572,625,1)
(698,678,1)
(676,26,1)
(638,409,1)
(183,133,1)
(224,104,1)
(376,785,1)
(3,611,1)
(622,235,1)
(102,276,1)
(122,254,1)
(474,38,1)
(714,769,1)
(570,524,1)
(443,213,1)
(445,777,1)
(434,732,1)
(38,134,1)
(72,747,1)
(508,368,1)
(749,463,1)
(556,538,1)
(140,725,1)
(17,623,1)
(360,606,1)
(132,782,1)
(294,253,1)
(573,167,1)
(584,731,1)
(733,420,1)
(301,308,1)
(216,704,1)
(299,226,1)
(593,573,1)
(378,392,1)
(528,387,1)
(356,393,1)
(665,193,1)
(529,533,1)
(265,502,1)
(210,370,1)
(327,788,1)
(516,725,1)
(607,194,1)
(52,326,1)
(196,759,1)
(118,519,1)
(528,201,1)
(93,457,1)
(227,619,1)
(269,608,1)
(369,483,1)
(748,25,1)
(269,790,1)
(150,64,1)
(661,471,1)
(729,725,1)
(294,598,1)
(44,763,1)
(433,739,1)
(365,724,1)
(85,725,1)
(741,133,1)
(579,284,1)
(391,295,1)
(123,329,1)
(246,139,1)
(679,254,1)
(243,217,1)
(122,225,1)
(23,731,1)
(320,280,1)
(384,389,1)
(190,155,1)
(275,688,1)
(533,493,1)
(9,145,1)
(569,783,1)
(707,206,1)
(268,495,1)
(601,130,1)
(728,725,1)
(408,680,1)
(219,725,1)
(441,624,1)
(584,187,1)
(709,503,1)
(105,720,1)
(754,303,1)
(715,773,1)
(240,119,1)
(539,251,1)
(471,334,1)
(197,407,1)
(466,299,1)
(390,19,1)
(63,680,1)
(433,72,1)
(279,769,1)
(504,471,1)
(663,420,1)
(528,489,1)
(152,221,1)
(411,167,1)
(269,322,1)
(367,173,1)
(511,361,1)
(233,491,1)
(173,340,1)
(680,680,1)
(431,670,1)
(294,621,1)
(717,709,1)
(24,245,1)
(269,377,1)
(187,392,1)
(541,80,1)
(45,720,1)
(577,395,1)
(684,741,1)
(691,601,1)
(250,665,1)
(518,768,1)
(185,768,1)
(187,15,1)
(360,420,1)
(9,17,1)
(442,561,1)
(25,350,1)
(33,604,1)
(98,577,1)
(772,368,1)
(246,368,1)
(198,584,1)
(318,595,1)
(419,200,1)
(408,368,1)
(90,29,1)
(508,144,1)
(355,150,1)
(225,725,1)
(232,747,1)
(332,472,1)
(324,545,1)
(584,616,1)
(122,570,1)
(340,61,1)
(503,123,1)
(589,767,1)
(601,725,1)
(456,391,1)
(528,71,1)
(618,438,1)
(612,84,1)
(416,47,1)
(115,4,1)
(122,723,1)
(769,486,1)
(787,675,1)
(790,224,1)
(193,341,1)
(349,739,1)
(152,368,1)
(770,347,1)
(120,690,1)
(736,247,1)
(664,725,1)
(291,659,1)
(503,398,1)
(202,169,1)
(221,452,1)
(123,732,1)
(92,694,1)
(527,262,1)
(178,506,1)
(414,618,1)
(157,612,1)
(472,291,1)
(620,420,1)
(693,737,1)
(271,669,1)
(584,433,1)
(326,18,1)
(357,776,1)
(785,723,1)
(741,725,1)
(255,770,1)
(634,363,1)
(732,10,1)
(239,105,1)
(284,738,1)
(568,656,1)
(620,437,1)
(244,451,1)
(608,317,1)
(105,428,1)
(73,357,1)
(273,110,1)
(143,234,1)
(110,720,1)
(370,237,1)
(408,139,1)
(59,481,1)
(161,122,1)
(73,469,1)
(499,101,1)
(778,497,1)
(249,377,1)
(50,111,1)
(676,404,1)
(649,582,1)
(574,551,1)
(754,702,1)
(33,25,1)
(73,494,1)
(565,51,1)
(528,85,1)
(775,758,1)
(439,562,1)
(237,741,1)
(9,599,1)
(683,527,1)
(455,514,1)
(465,336,1)
(562,117,1)
(39,197,1)
(606,522,1)
(714,132,1)
(186,707,1)
(753,312,1)
(531,635,1)
(404,162,1)
(523,669,1)
(506,155,1)
(303,694,1)
(131,272,1)
(66,702,1)
(263,290,1)
(232,731,1)
(694,288,1)
(191,35,1)
(525,78,1)
(294,352,1)
(692,96,1)
(347,661,1)
(422,178,1)
(183,297,1)
(235,259,1)
(595,521,1)
(459,368,1)
(760,725,1)
(87,487,1)
(361,423,1)
(523,368,1)
(725,622,1)
(111,404,1)
(257,685,1)
(20,53,1)
(73,387,1)
(207,148,1)
(71,464,1)
(662,780,1)
(141,608,1)
(59,713,1)
(292,421,1)
(478,83,1)
(776,752,1)
(402,790,1)
(524,490,1)
(73,423,1)
(261,207,1)
(110,732,1)
(271,139,1)
(673,0,1)
(469,136,1)
(138,692,1)
(690,467,1)
(101,725,1)
(512,408,1)
(338,547,1)
(443,768,1)
(703,725,1)
(593,219,1)
(174,539,1)
(786,303,1)
(602,756,1)
(765,252,1)
(73,254,1)
(730,137,1)
(724,420,1)
(453,190,1)
(423,114,1)
(773,139,1)
(302,504,1)
(320,90,1)
(448,545,1)
(81,582,1)
(654,52,1)
(73,489,1)
(661,440,1)
(15,454,1)
(220,158,1)
(67,151,1)
(46,420,1)
(777,768,1)
(142,725,1)
(372,413,1)
(772,669,1)
(532,108,1)
(404,420,1)
(665,155,1)
(396,36,1)
(652,359,1)
(174,596,1)
(173,25,1)
(667,377,1)
(628,593,1)
(344,501,1)
(617,710,1)
(340,176,1)
(118,607,1)
(435,278,1)
(356,60,1)
(352,643,1)
(386,399,1)
(358,542,1)
(731,392,1)
(486,631,1)
(374,644,1)
(482,616,1)
(513,323,1)
(136,719,1)
(654,725,1)
(444,533,1)
(300,74,1)
(323,142,1)
(764,298,1)
(537,142,1)
(29,77,1)
(161,442,1)
(164,790,1)
(651,446,1)
(667,608,1)
(119,32,1)
(389,725,1)
(144,100,1)
(473,511,1)
(240,708,1)
(161,655,1)
(484,473,1)
(677,320,1)
(122,357,1)
(23,187,1)
(752,725,1)
(668,348,1)
(6,769,1)
(0,87,1)
(678,711,1)
(83,764,1)
(745,113,1)
(528,457,1)
(382,632,1)
(73,140,1)
(98,420,1)
(528,423,1)
(764,36,1)
(448,498,1)
(696,102,1)
(313,232,1)
(528,723,1)
(41,568,1)
(784,610,1)
(443,545,1)
(122,21,1)
(22,187,1)
(192,383,1)
(329,321,1)
(73,657,1)
(640,416,1)
(528,570,1)
(333,701,1)
(64,784,1)
(198,199,1)
(518,545,1)
(528,790,1)
(489,725,1)
(739,535,1)
(457,725,1)
(373,365,1)
(211,358,1)
(777,545,1)
(359,128,1)
(63,532,1)
(237,669,1)
(324,604,1)
(309,645,1)
(165,36,1)
(399,90,1)
(148,218,1)
(78,689,1)
(584,747,1)
(259,651,1)
(581,25,1)
(643,745,1)
(35,566,1)
(593,265,1)
(330,662,1)
(515,493,1)
(222,431,1)
(675,24,1)
(296,37,1)
(509,733,1)
(289,216,1)
(616,382,1)
(526,39,1)
(219,493,1)
(249,762,1)
(166,294,1)
(528,608,1)
(681,743,1)
(269,723,1)
(421,459,1)
(295,565,1)
(356,277,1)
(613,726,1)
(451,106,1)
(106,345,1)
(584,596,1)
(315,499,1)
(609,687,1)
(364,714,1)
(555,41,1)
(392,70,1)
(324,191,1)
(506,453,1)
(726,424,1)
(200,353,1)
(167,81,1)
(282,273,1)
(454,768,1)
(230,330,1)
(483,567,1)
(4,155,1)
(667,723,1)
(91,479,1)
(762,779,1)
(179,433,1)
(293,757,1)
(738,239,1)
(122,140,1)
(393,725,1)
(381,258,1)
(314,699,1)
(385,380,1)
(667,678,1)
(290,725,1)
(536,219,1)
(777,203,1)
(309,724,1)
(463,594,1)
(466,203,1)
(533,725,1)
(676,725,1)
(518,374,1)
(771,786,1)
(655,333,1)
(545,653,1)
(530,157,1)
(697,60,1)
(768,405,1)
(627,260,1)
(510,227,1)
(117,476,1)
(259,596,1)
(619,696,1)
(176,310,1)
(194,558,1)
(704,225,1)
(426,402,1)
(153,305,1)
(763,284,1)
(155,309,1)
(420,9,1)
(171,748,1)
(752,36,1)
(69,612,1)
(252,725,1)
(290,97,1)
(548,739,1)
(294,231,1)
(410,196,1)
(703,218,1)
(486,392,1)
(559,756,1)
(232,433,1)
(11,369,1)
(152,669,1)
(169,183,1)
(755,181,1)
(446,604,1)
(400,124,1)
(528,377,1)
(324,129,1)
(542,155,1)
(594,429,1)
(165,229,1)
(12,192,1)
(526,520,1)
(133,484,1)
(282,110,1)
(177,318,1)
(763,546,1)
(772,534,1)
(248,468,1)
(682,79,1)
(26,46,1)
(521,49,1)
(732,720,1)
(580,426,1)
(299,545,1)
(676,46,1)
(683,733,1)
(642,683,1)
(466,691,1)
(658,703,1)
(495,581,1)
(578,583,1)
(601,36,1)
(122,85,1)
(128,580,1)
(480,149,1)
(368,386,1)
(146,206,1)
(619,420,1)
(507,736,1)
(209,96,1)
(249,608,1)
(1,172,1)
(575,245,1)
(46,50,1)
(191,420,1)
(553,574,1)
(343,11,1)
(118,763,1)
(137,456,1)
(701,379,1)
(483,324,1)
(528,140,1)
(209,155,1)
(528,225,1)
(477,163,1)
(584,714,1)
(28,372,1)
(783,391,1)
(494,725,1)
(591,295,1)
(161,419,1)
(293,725,1)
(644,443,1)
(379,339,1)
(245,744,1)
(382,769,1)
(408,1,1)
(710,671,1)
(534,131,1)
(407,116,1)
(383,118,1)
(434,720,1)
(494,531,1)
(523,680,1)
(588,27,1)
(752,228,1)
(88,255,1)
(358,24,1)
(4,541,1)
(528,254,1)
(63,669,1)
(788,420,1)
(325,69,1)
(258,507,1)
(535,300,1)
(633,433,1)
(414,289,1)
(512,342,1)
(363,695,1)
(481,646,1)
(425,325,1)
(164,377,1)
(750,155,1)
(164,682,1)
(49,443,1)
(457,648,1)
(380,698,1)
(497,230,1)
(130,371,1)
(667,485,1)
(731,775,1)
(758,74,1)
(226,691,1)
(740,152,1)
(34,143,1)
(659,165,1)
(122,664,1)
(648,556,1)
(472,725,1)
(224,571,1)
(739,392,1)
(121,518,1)
(774,629,1)
(57,549,1)
(21,725,1)
(409,265,1)
(395,526,1)
(101,155,1)
(573,725,1)
(213,478,1)
(179,23,1)
(680,368,1)
(514,155,1)
(381,725,1)
(149,314,1)
(23,433,1)
(438,289,1)
(129,191,1)
(498,563,1)
(517,98,1)
(324,768,1)
(286,381,1)
(521,443,1)
(7,12,1)
(77,634,1)
(723,525,1)
(610,166,1)
(108,264,1)
(276,271,1)
(466,545,1)
(397,697,1)
(253,470,1)
(37,420,1)
(270,755,1)
(179,318,1)
(65,347,1)
(670,211,1)
(100,66,1)
(759,362,1)
(122,469,1)
(53,21,1)
(23,177,1)
(596,589,1)
(251,25,1)
(32,708,1)
(348,82,1)
(585,523,1)
(288,677,1)
(656,585,1)
(33,596,1)
(10,448,1)
(266,512,1)
(141,790,1)
(674,268,1)
(148,725,1)
(727,209,1)
(283,725,1)
(724,248,1)
(85,28,1)
(354,203,1)
(519,461,1)
(479,420,1)
(583,65,1)
(122,790,1)
(417,354,1)
(241,536,1)
(384,725,1)
(521,121,1)
(528,494,1)
(540,633,1)
(141,723,1)
(757,628,1)
(551,658,1)
(249,723,1)
(570,725,1)
(271,544,1)
(63,368,1)
(643,725,1)
(114,186,1)
(760,155,1)
(148,609,1)
(265,590,1)
(204,198,1)
(172,680,1)
(464,286,1)
(40,195,1)
(304,22,1)
(440,680,1)
(140,212,1)
(331,777,1)
(158,529,1)
(501,432,1)
(141,458,1)
(82,559,1)
(516,155,1)
(246,139,2)
(667,723,2)
(80,500,2)
(349,739,2)
(227,619,2)
(434,732,2)
(290,183,2)
(256,659,2)
(790,224,2)
(31,506,2)
(161,73,2)
(122,140,2)
(542,725,2)
(1,227,2)
(261,207,2)
(73,790,2)
(37,420,2)
(324,191,2)
(349,72,2)
(471,408,2)
(408,368,2)
(46,420,2)
(340,246,2)
(110,185,2)
(657,529,2)
(665,155,2)
(773,183,2)
(747,227,2)
(709,185,2)
(725,688,2)
(240,314,2)
(671,207,2)
(226,185,2)
(594,725,2)
(101,160,2)
(414,618,2)
(411,659,2)
(74,702,2)
(717,185,2)
(96,500,2)
(118,607,2)
(665,506,2)
(677,320,2)
(95,207,2)
(269,608,2)
(748,246,2)
(78,506,2)
(471,420,2)
(487,58,2)
(640,416,2)
(283,765,2)
(350,246,2)
(339,240,2)
(210,183,2)
(617,659,2)
(384,688,2)
(257,506,2)
(399,227,2)
(278,198,2)
(416,47,2)
(443,768,2)
(526,557,2)
(122,423,2)
(571,227,2)
(652,359,2)
(710,416,2)
(657,384,2)
(616,303,2)
(493,414,2)
(143,500,2)
(581,688,2)
(338,207,2)
(212,529,2)
(200,314,2)
(269,688,2)
(573,725,2)
(514,155,2)
(171,246,2)
(73,254,2)
(48,246,2)
(161,528,2)
(142,725,2)
(162,183,2)
(1,303,2)
(267,246,2)
(164,608,2)
(612,506,2)
(384,725,2)
(768,320,2)
(689,506,2)
(47,183,2)
(448,777,2)
(258,416,2)
(122,608,2)
(69,612,2)
(623,240,2)
(9,145,2)
(363,227,2)
(772,368,2)
(54,227,2)
(98,529,2)
(444,659,2)
(680,368,2)
(647,596,2)
(555,769,2)
(453,240,2)
(41,656,2)
(785,506,2)
(651,688,2)
(657,659,2)
(111,207,2)
(713,314,2)
(176,246,2)
(676,710,2)
(732,10,2)
(464,308,2)
(160,416,2)
(370,183,2)
(489,725,2)
(526,529,2)
(18,183,2)
(79,246,2)
(359,128,2)
(197,529,2)
(63,669,2)
(44,659,2)
(602,384,2)
(167,81,2)
(701,240,2)
(1,702,2)
(437,529,2)
(50,384,2)
(245,500,2)
(527,227,2)
(232,433,2)
(667,227,2)
(518,443,2)
(528,469,2)
(250,506,2)
(134,207,2)
(434,207,2)
(283,183,2)
(113,529,2)
(601,36,2)
(361,529,2)
(740,152,2)
(604,198,2)
(610,529,2)
(438,659,2)
(8,207,2)
(425,506,2)
(557,725,2)
(448,203,2)
(269,790,2)
(494,384,2)
(251,25,2)
(691,215,2)
(110,732,2)
(110,720,2)
(318,595,2)
(589,367,2)
(415,659,2)
(172,702,2)
(73,664,2)
(742,308,2)
(659,207,2)
(152,368,2)
(59,481,2)
(390,185,2)
(567,198,2)
(777,207,2)
(73,85,2)
(271,139,2)
(379,240,2)
(752,725,2)
(413,120,2)
(714,74,2)
(410,506,2)
(275,688,2)
(345,529,2)
(391,295,2)
(671,529,2)
(50,207,2)
(433,72,2)
(72,227,2)
(580,227,2)
(116,620,2)
(676,207,2)
(657,207,2)
(459,227,2)
(255,347,2)
(160,308,2)
(277,659,2)
(452,702,2)
(595,659,2)
(334,408,2)
(28,384,2)
(685,572,2)
(775,74,2)
(122,489,2)
(150,529,2)
(528,387,2)
(46,659,2)
(72,747,2)
(503,123,2)
(352,529,2)
(407,529,2)
(548,74,2)
(63,368,2)
(117,185,2)
(130,185,2)
(750,725,2)
(788,420,2)
(523,669,2)
(617,416,2)
(23,747,2)
(433,303,2)
(629,227,2)
(207,148,2)
(392,408,2)
(194,420,2)
(381,416,2)
(20,659,2)
(494,725,2)
(528,117,2)
(73,21,2)
(273,185,2)
(703,207,2)
(405,63,2)
(232,731,2)
(478,659,2)
(683,733,2)
(111,659,2)
(305,282,2)
(434,720,2)
(536,529,2)
(164,723,2)
(553,207,2)
(416,183,2)
(73,610,2)
(594,323,2)
(702,347,2)
(528,570,2)
(303,694,2)
(157,506,2)
(408,680,2)
(469,725,2)
(487,207,2)
(753,384,2)
(591,207,2)
(172,303,2)
(708,314,2)
(4,725,2)
(64,416,2)
(420,9,2)
(56,659,2)
(254,207,2)
(395,529,2)
(638,529,2)
(355,416,2)
(121,518,2)
(64,659,2)
(663,420,2)
(136,659,2)
(731,392,2)
(774,227,2)
(637,308,2)
(503,185,2)
(7,659,2)
(219,725,2)
(155,309,2)
(715,183,2)
(187,320,2)
(73,659,2)
(289,725,2)
(190,240,2)
(652,227,2)
(671,183,2)
(320,90,2)
(262,227,2)
(302,408,2)
(73,608,2)
(622,688,2)
(101,416,2)
(496,98,2)
(256,384,2)
(707,151,2)
(252,183,2)
(152,702,2)
(347,408,2)
(207,384,2)
(37,506,2)
(360,420,2)
(529,533,2)
(46,416,2)
(161,249,2)
(340,176,2)
(559,384,2)
(393,659,2)
(581,25,2)
(547,207,2)
(259,596,2)
(299,768,2)
(528,85,2)
(499,416,2)
(97,183,2)
(90,29,2)
(87,207,2)
(790,227,2)
(218,384,2)
(760,323,2)
(58,38,2)
(710,659,2)
(289,167,2)
(661,471,2)
(563,777,2)
(632,74,2)
(610,659,2)
(64,183,2)
(752,185,2)
(746,183,2)
(708,145,2)
(673,207,2)
(150,183,2)
(408,702,2)
(610,384,2)
(676,46,2)
(183,133,2)
(454,320,2)
(46,183,2)
(765,252,2)
(784,659,2)
(315,308,2)
(662,422,2)
(620,420,2)
(111,416,2)
(232,207,2)
(1,74,2)
(758,74,2)
(456,391,2)
(618,659,2)
(664,529,2)
(764,725,2)
(179,187,2)
(25,246,2)
(348,384,2)
(167,659,2)
(144,702,2)
(185,659,2)
(256,529,2)
(265,502,2)
(249,377,2)
(325,506,2)
(423,529,2)
(331,207,2)
(764,659,2)
(596,367,2)
(124,506,2)
(50,529,2)
(507,416,2)
(634,227,2)
(150,416,2)
(766,500,2)
(148,725,2)
(178,506,2)
(404,529,2)
(147,416,2)
(392,70,2)
(440,408,2)
(725,622,2)
(508,680,2)
(440,680,2)
(309,724,2)
(685,506,2)
(294,207,2)
(609,384,2)
(728,725,2)
(326,183,2)
(313,232,2)
(372,384,2)
(322,688,2)
(431,500,2)
(246,227,2)
(723,506,2)
(270,227,2)
(750,500,2)
(484,529,2)
(782,74,2)
(441,500,2)
(73,387,2)
(357,185,2)
(764,36,2)
(532,320,2)
(135,246,2)
(472,659,2)
(404,416,2)
(96,516,2)
(456,207,2)
(209,155,2)
(680,680,2)
(754,303,2)
(324,198,2)
(593,265,2)
(594,155,2)
(396,207,2)
(671,416,2)
(740,303,2)
(486,392,2)
(357,752,2)
(93,500,2)
(6,769,2)
(635,384,2)
(347,661,2)
(105,732,2)
(141,790,2)
(466,545,2)
(731,74,2)
(141,367,2)
(680,303,2)
(517,529,2)
(152,669,2)
(664,725,2)
(237,669,2)
(458,367,2)
(387,207,2)
(32,314,2)
(680,702,2)
(161,655,2)
(484,473,2)
(490,416,2)
(679,207,2)
(40,688,2)
(64,529,2)
(166,529,2)
(27,500,2)
(610,416,2)
(519,406,2)
(46,207,2)
(141,377,2)
(518,203,2)
(762,198,2)
(476,185,2)
(158,529,2)
(358,24,2)
(73,529,2)
(221,702,2)
(98,420,2)
(122,469,2)
(194,659,2)
(440,368,2)
(737,416,2)
(497,662,2)
(527,420,2)
(324,768,2)
(572,506,2)
(540,303,2)
(309,240,2)
(225,659,2)
(122,387,2)
(146,529,2)
(303,349,2)
(380,227,2)
(728,36,2)
(400,506,2)
(451,127,2)
(318,659,2)
(389,688,2)
(457,725,2)
(294,529,2)
(616,382,2)
(101,725,2)
(291,659,2)
(316,529,2)
(166,659,2)
(588,500,2)
(428,659,2)
(645,420,2)
(81,659,2)
(164,246,2)
(603,529,2)
(358,542,2)
(189,367,2)
(470,725,2)
(528,254,2)
(580,420,2)
(524,416,2)
(243,227,2)
(280,347,2)
(314,699,2)
(206,725,2)
(434,338,2)
(129,198,2)
(236,529,2)
(35,198,2)
(281,384,2)
(268,688,2)
(368,227,2)
(448,545,2)
(472,725,2)
(667,377,2)
(508,368,2)
(77,227,2)
(480,314,2)
(269,377,2)
(122,570,2)
(4,500,2)
(165,725,2)
(668,348,2)
(451,529,2)
(12,659,2)
(268,604,2)
(92,694,2)
(161,667,2)
(122,254,2)
(720,207,2)
(318,764,2)
(68,529,2)
(777,545,2)
(608,506,2)
(406,659,2)
(174,596,2)
(21,659,2)
(582,659,2)
(173,25,2)
(656,585,2)
(360,529,2)
(64,207,2)
(301,308,2)
(156,500,2)
(519,659,2)
(161,442,2)
(497,230,2)
(772,669,2)
(477,367,2)
(583,347,2)
(784,529,2)
(73,469,2)
(771,303,2)
(566,198,2)
(0,207,2)
(114,529,2)
(637,416,2)
(274,659,2)
(733,227,2)
(593,573,2)
(256,207,2)
(655,240,2)
(195,25,2)
(148,384,2)
(168,207,2)
(126,659,2)
(3,227,2)
(162,384,2)
(369,483,2)
(46,384,2)
(174,198,2)
(710,529,2)
(10,777,2)
(767,367,2)
(412,659,2)
(161,122,2)
(716,183,2)
(732,720,2)
(374,443,2)
(445,777,2)
(366,198,2)
(63,320,2)
(408,227,2)
(773,139,2)
(676,416,2)
(359,227,2)
(678,227,2)
(327,506,2)
(645,240,2)
(402,227,2)
(70,772,2)
(528,664,2)
(228,185,2)
(109,500,2)
(321,185,2)
(772,680,2)
(676,355,2)
(71,416,2)
(521,443,2)
(584,747,2)
(605,529,2)
(597,529,2)
(82,384,2)
(504,408,2)
(122,225,2)
(67,529,2)
(73,384,2)
(663,227,2)
(382,769,2)
(355,529,2)
(533,659,2)
(211,500,2)
(429,323,2)
(355,659,2)
(330,506,2)
(249,723,2)
(64,384,2)
(695,227,2)
(229,207,2)
(631,408,2)
(298,659,2)
(542,155,2)
(69,127,2)
(387,725,2)
(568,656,2)
(710,384,2)
(233,506,2)
(671,384,2)
(120,384,2)
(264,320,2)
(122,21,2)
(337,198,2)
(324,604,2)
(756,384,2)
(290,725,2)
(216,659,2)
(667,608,2)
(607,194,2)
(119,314,2)
(702,555,2)
(491,506,2)
(769,486,2)
(530,506,2)
(140,529,2)
(649,659,2)
(414,659,2)
(784,416,2)
(356,60,2)
(101,308,2)
(584,6,2)
(333,240,2)
(358,750,2)
(152,680,2)
(676,384,2)
(117,728,2)
(570,416,2)
(234,500,2)
(765,183,2)
(206,529,2)
(457,155,2)
(690,384,2)
(26,529,2)
(777,203,2)
(23,433,2)
(164,377,2)
(779,198,2)
(728,185,2)
(309,645,2)
(70,408,2)
(768,405,2)
(253,416,2)
(142,500,2)
(73,140,2)
(528,225,2)
(584,433,2)
(741,133,2)
(542,500,2)
(501,432,2)
(303,320,2)
(683,663,2)
(763,284,2)
(726,25,2)
(692,500,2)
(254,725,2)
(265,529,2)
(778,506,2)
(619,506,2)
(150,659,2)
(724,240,2)
(590,529,2)
(584,731,2)
(739,392,2)
(408,139,2)
(426,227,2)
(528,790,2)
(239,659,2)
(356,659,2)
(76,227,2)
(668,559,2)
(162,659,2)
(367,246,2)
(711,227,2)
(509,227,2)
(668,384,2)
(443,659,2)
(760,155,2)
(740,74,2)
(601,725,2)
(657,416,2)
(528,457,2)
(496,729,2)
(607,659,2)
(155,240,2)
(416,283,2)
(218,668,2)
(466,185,2)
(150,384,2)
(577,529,2)
(585,523,2)
(641,207,2)
(306,246,2)
(648,500,2)
(788,506,2)
(521,121,2)
(606,529,2)
(83,659,2)
(729,725,2)
(644,443,2)
(696,506,2)
(213,659,2)
(320,769,2)
(404,420,2)
(73,489,2)
(153,185,2)
(161,141,2)
(739,74,2)
(284,659,2)
(224,227,2)
(132,74,2)
(617,529,2)
(50,183,2)
(183,529,2)
(166,207,2)
(423,725,2)
(625,506,2)
(483,567,2)
(474,207,2)
(694,769,2)
(710,207,2)
(683,527,2)
(500,308,2)
(707,206,2)
(443,545,2)
(526,39,2)
(528,423,2)
(209,725,2)
(122,377,2)
(697,659,2)
(128,580,2)
(292,227,2)
(23,659,2)
(221,303,2)
(667,678,2)
(343,483,2)
(502,529,2)
(367,173,2)
(528,723,2)
(385,227,2)
(308,665,2)
(137,207,2)
(752,36,2)
(558,659,2)
(682,246,2)
(188,416,2)
(452,74,2)
(73,357,2)
(528,357,2)
(514,500,2)
(670,500,2)
(381,725,2)
(529,659,2)
(33,596,2)
(323,142,2)
(108,320,2)
(364,74,2)
(561,308,2)
(377,506,2)
(755,227,2)
(516,500,2)
(332,659,2)
(221,74,2)
(432,246,2)
(537,500,2)
(683,227,2)
(121,443,2)
(355,207,2)
(33,25,2)
(523,347,2)
(23,731,2)
(553,574,2)
(122,117,2)
(760,725,2)
(329,185,2)
(493,659,2)
(528,377,2)
(75,529,2)
(710,183,2)
(743,185,2)
(45,207,2)
(122,500,2)
(714,769,2)
(684,183,2)
(161,269,2)
(479,240,2)
(128,227,2)
(562,185,2)
(299,545,2)
(358,500,2)
(81,582,2)
(215,185,2)
(166,384,2)
(545,653,2)
(777,768,2)
(516,155,2)
(256,416,2)
(219,529,2)
(660,659,2)
(271,233,2)
(294,416,2)
(455,500,2)
(754,702,2)
(151,360,2)
(256,183,2)
(24,245,2)
(442,308,2)
(787,500,2)
(249,198,2)
(763,659,2)
(569,207,2)
(535,74,2)
(408,303,2)
(626,207,2)
(241,529,2)
(259,688,2)
(497,506,2)
(33,604,2)
(23,187,2)
(466,299,2)
(86,500,2)
(528,608,2)
(105,659,2)
(681,185,2)
(39,420,2)
(531,384,2)
(161,164,2)
(147,384,2)
(179,731,2)
(225,725,2)
(633,303,2)
(726,367,2)
(546,659,2)
(522,529,2)
(772,408,2)
(26,659,2)
(533,725,2)
(249,608,2)
(293,529,2)
(123,732,2)
(473,529,2)
(19,185,2)
(42,183,2)
(499,308,2)
(66,702,2)
(659,165,2)
(528,21,2)
(100,702,2)
(409,529,2)
(518,768,2)
(105,720,2)
(593,219,2)
(654,183,2)
(617,183,2)
(627,529,2)
(185,545,2)
(26,207,2)
(9,599,2)
(60,659,2)
(703,218,2)
(237,183,2)
(626,725,2)
(182,483,2)
(688,182,2)
(525,506,2)
(724,420,2)
(466,203,2)
(266,227,2)
(564,694,2)
(185,768,2)
(573,529,2)
(741,725,2)
(230,506,2)
(182,33,2)
(683,380,2)
(122,71,2)
(703,725,2)
(483,324,2)
(244,529,2)
(593,529,2)
(619,420,2)
(740,702,2)
(73,117,2)
(147,183,2)
(707,529,2)
(166,183,2)
(101,155,2)
(446,604,2)
(152,74,2)
(617,384,2)
(393,725,2)
(149,314,2)
(708,59,2)
(84,506,2)
(495,688,2)
(341,506,2)
(376,506,2)
(88,347,2)
(378,408,2)
(289,659,2)
(209,455,2)
(164,790,2)
(584,596,2)
(515,659,2)
(513,323,2)
(201,500,2)
(754,74,2)
(742,416,2)
(227,506,2)
(162,529,2)
(685,788,2)
(506,240,2)
(643,529,2)
(457,500,2)
(555,656,2)
(191,198,2)
(24,500,2)
(11,483,2)
(383,659,2)
(237,139,2)
(232,187,2)
(749,323,2)
(693,416,2)
(688,483,2)
(404,207,2)
(191,420,2)
(179,318,2)
(73,416,2)
(141,723,2)
(557,529,2)
(111,183,2)
(501,246,2)
(730,207,2)
(342,320,2)
(485,227,2)
(346,688,2)
(166,416,2)
(732,777,2)
(272,408,2)
(496,529,2)
(186,529,2)
(551,207,2)
(34,500,2)
(188,308,2)
(414,289,2)
(187,392,2)
(596,589,2)
(147,207,2)
(353,314,2)
(613,367,2)
(285,659,2)
(420,240,2)
(53,659,2)
(528,489,2)
(193,506,2)
(85,384,2)
(240,708,2)
(611,227,2)
(624,500,2)
(676,659,2)
(585,347,2)
(666,659,2)
(688,198,2)
(482,303,2)
(295,207,2)
(534,408,2)
(508,669,2)
(106,529,2)
(698,227,2)
(541,500,2)
(65,347,2)
(661,440,2)
(179,23,2)
(687,384,2)
(123,720,2)
(642,227,2)
(323,500,2)
(653,702,2)
(309,127,2)
(408,74,2)
(181,227,2)
(73,183,2)
(69,506,2)
(138,500,2)
(310,246,2)
(761,347,2)
(691,185,2)
(671,659,2)
(300,74,2)
(770,347,2)
(102,506,2)
(204,198,2)
(680,740,2)
(598,384,2)
(683,755,2)
(702,656,2)
(118,763,2)
(122,357,2)
(6,320,2)
(260,529,2)
(584,714,2)
(179,747,2)
(455,514,2)
(729,529,2)
(63,680,2)
(73,423,2)
(173,246,2)
(658,207,2)
(133,484,2)
(528,494,2)
(209,96,2)
(365,240,2)
(439,185,2)
(449,183,2)
(263,183,2)
(249,790,2)
(680,74,2)
(282,110,2)
(397,659,2)
(662,780,2)
(398,185,2)
(704,659,2)
(324,545,2)
(573,167,2)
(674,688,2)
(466,691,2)
(710,420,2)
(165,36,2)
(371,185,2)
(443,203,2)
(373,240,2)
(179,433,2)
(219,493,2)
(22,320,2)
(520,529,2)
(282,185,2)
(248,240,2)
(57,183,2)
(85,725,2)
(304,320,2)
(29,77,2)
(727,500,2)
(452,303,2)
(781,659,2)
(2,529,2)
(556,500,2)
(757,529,2)
(506,155,2)
(386,227,2)
(199,367,2)
(173,501,2)
(122,494,2)
(470,416,2)
(643,725,2)
(783,207,2)
(299,203,2)
(123,185,2)
(528,71,2)
(220,529,2)
(595,521,2)
(299,185,2)
(391,207,2)
(173,340,2)
(73,377,2)
(296,506,2)
(320,347,2)
(162,207,2)
(574,207,2)
(115,500,2)
(736,416,2)
(528,500,2)
(202,183,2)
(733,420,2)
(544,506,2)
(73,494,2)
(52,183,2)
(676,404,2)
(483,198,2)
(446,688,2)
(286,308,2)
(324,203,2)
(662,506,2)
(26,416,2)
(111,529,2)
(430,506,2)
(769,408,2)
(661,408,2)
(271,506,2)
(133,529,2)
(122,790,2)
(708,699,2)
(463,323,2)
(172,74,2)
(565,207,2)
(579,659,2)
(26,384,2)
(276,506,2)
(451,293,2)
(709,503,2)
(232,747,2)
(293,725,2)
(344,246,2)
(538,500,2)
(440,669,2)
(61,246,2)
(294,183,2)
(131,408,2)
(308,506,2)
(720,313,2)
(500,416,2)
(247,416,2)
(73,225,2)
(656,347,2)
(435,198,2)
(162,416,2)
(575,500,2)
(784,207,2)
(601,185,2)
(362,506,2)
(150,207,2)
(36,207,2)
(196,506,2)
(116,529,2)
(224,104,2)
(21,725,2)
(25,350,2)
(404,659,2)
(58,207,2)
(433,739,2)
(4,155,2)
(741,183,2)
(283,263,2)
(784,183,2)
(195,688,2)
(140,725,2)
(294,659,2)
(122,723,2)
(610,183,2)
(738,659,2)
(545,702,2)
(16,506,2)
(141,608,2)
(468,240,2)
(90,227,2)
(39,529,2)
(786,303,2)
(584,616,2)
(498,777,2)
(382,74,2)
(654,725,2)
(17,240,2)
(676,529,2)
(192,659,2)
(528,4,2)
(235,688,2)
(549,183,2)
(744,500,2)
(91,240,2)
(223,207,2)
(163,367,2)
(404,384,2)
(584,187,2)
(49,443,2)
(521,659,2)
(147,529,2)
(38,207,2)
(512,227,2)
(142,155,2)
(172,227,2)
(776,185,2)
(198,367,2)
(170,659,2)
(185,203,2)
(260,462,2)
(759,506,2)
(736,247,2)
(621,207,2)
(578,347,2)
(269,723,2)
(50,416,2)
(288,320,2)
(315,416,2)
(404,183,2)
(653,508,2)
(533,493,2)
(122,85,2)
(312,384,2)
(657,183,2)
(466,768,2)
(518,545,2)
(305,185,2)
(33,483,2)
(237,741,2)
(405,320,2)
(296,37,2)
(286,416,2)
(467,384,2)
(313,207,2)
(523,368,2)
(489,183,2)
(71,308,2)
(209,500,2)
(539,198,2)
(448,768,2)
(419,314,2)
(461,659,2)
(161,419,2)
(469,659,2)
(355,183,2)
(271,669,2)
(507,736,2)
(617,207,2)
(630,529,2)
(60,420,2)
(165,207,2)
(15,320,2)
(205,506,2)
(36,434,2)
(10,448,2)
(263,290,2)
(122,664,2)
(355,384,2)
(50,659,2)
(251,198,2)
(694,320,2)
(151,529,2)
(421,227,2)
(675,500,2)
(604,435,2)
(555,90,2)
(287,408,2)
(516,725,2)
(784,384,2)
(73,207,2)
(349,694,2)
(240,119,2)
(456,553,2)
(148,218,2)
(691,601,2)
(9,240,2)
(559,756,2)
(51,207,2)
(500,101,2)
(177,659,2)
(179,659,2)
(246,368,2)
(46,529,2)
(570,725,2)
(508,702,2)
(317,506,2)
(514,725,2)
(422,506,2)
(510,227,2)
(393,36,2)
(198,584,2)
(523,680,2)
(413,384,2)
(222,500,2)
(719,659,2)
(231,183,2)
(610,207,2)
(676,725,2)
(584,367,2)
(111,384,2)
(169,183,2)
(456,703,2)
(294,384,2)
(147,659,2)
(424,367,2)
(73,723,2)
(620,529,2)
(152,303,2)
(217,227,2)
(484,139,2)
(246,680,2)
(356,393,2)
(486,408,2)
(745,529,2)
(252,725,2)
(29,227,2)
(592,347,2)
(676,183,2)
(647,688,2)
(118,659,2)
(500,315,2)
(283,725,2)
(628,529,2)
(750,155,2)
(511,529,2)
(118,519,2)
(26,183,2)
(297,529,2)
(464,416,2)
(279,408,2)
(528,140,2)
(59,314,2)
-----------------------------------
(0,2)
(1,ssize)
(2,header)
(3,counter)
(4,st->retries)
(5,)
(6,modpsize = modsize)
(7,st)
(8,NULL)
(9,(struct value_request *)
(10,2 + varpre2octets(genp)
(11,gen)
(12,printf("Got exchange value 0x%s\\n", buffer)
(13,if (exchange_set_generator(gen, header->scheme, genp)
(14,header)
(15,p)
(16,global_port)
(17,packet)
(18,"calloc()
(19,2)
(20,0)
(21,st->texchangesize)
(22,modpsize)
(23,varpre2octets(modp)
(24,&i)
(25,test = BN_new()
(26,RESOURCE_LIMIT)
(27,1)
(28,uSPIoattrib)
(29,parts[0].size)
(30,modp)
(31,rcookie)
(32,1)
(33,exchange_check_value(test, gen, mod)
(34,st)
(35,scheme)
(36,st->scheme = calloc(vsize, sizeof(u_int8_t)
(37,header->counter)
(38,parts[1])
(39,header->icookie)
(40,gen)
(41,vsize)
(42,ssize)
(43,if ((st->roschemes = calloc(ssize, sizeof(u_int8_t)
(44,parts)
(45,genp)
(46,header->counter)
(47,-1)
(48,test)
(49,0)
(50,counter)
(51,parts)
(52,st)
(53,parts)
(54,size)
(55,)
(56,0)
(57,oSPIoattrib)
(58,parts[1].size)
(59,&vr_msg)
(60,header->scheme)
(61,size)
(62,)
(63,schemes+sstart)
(64,packet_buffer)
(65,scheme_ref)
(66,genp)
(67,st)
(68,"calloc()
(69,strncpy(tempst.address, address, 15)
(70,scheme_get_mod(schemes + sstart)
(71,packet_size = PACKET_BUFFER_SIZE)
(72,refp = modp = NULL)
(73,return (0)
(74,modflag)
(75,st)
(76,refp)
(77,parts[0])
(78,tempst)
(79,1)
(80,st)
(81,parts[0].size)
(82,u_int8_t)
(83,2)
(84,address)
(85,st->uSPIoattrib)
(86,i)
(87,vsize)
(88,modflag = 1)
(89,)
(90,vsize = parts[0].size)
(91,address)
(92,refp)
(93,VALUE_RESPONSE)
(94,)
(95,NULL)
(96,&(st->shared)
(97,oSPIoattribsize)
(98,header->rcookie)
(99,)
(100,schemes)
(101,photuris_value_response(st, packet_buffer, &packet_size)
(102,header)
(103,if (modsize == vsize)
(104,u_int16_t *)
(105,st->schemesize = vsize)
(106,15)
(107,)
(108,schemes)
(109,st->phase = VALUE_RESPONSE)
(110,vsize-4)
(111,header)
(112,)
(113,log_error("calloc()
(114,roschemes)
(115,0)
(116,st->counter = header->counter)
(117,st->scheme[2])
(118,bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)
(119,-1)
(120,IPSEC_OPT_ENC|IPSEC_OPT_AUTH)
(121,2 + varpre2octets(genp)
(122,return (-1)
(123,vsize-4)
(124,COOKIE_SIZE)
(125,scheme_ref)
(126,header)
(127,char *address)
(128,scheme_get_ref(header->scheme)
(129,genp)
(130,scheme)
(131,schemes)
(132,modsize)
(133,st->roschemes = calloc(ssize, sizeof(u_int8_t)
(134,1)
(135,where)
(136,schemesize)
(137,st)
(138,sharedsize)
(139,u_int16_t ssize)
(140,st->counter)
(141,return (-1)
(142,st->oSPIprivacyctx)
(143,st)
(144,sstart)
(145,u_char *packet)
(146,3)
(147,header)
(148,st->uSPIoattrib)
(149,packet)
(150,packet_size)
(151,&header->counter)
(152,schemes+sstart)
(153,st)
(154,i)
(155,st = state_find_cookies(address, header->icookie, header->rcookie)
(156,shared)
(157,address)
(158,parts)
(159,if (st->texchange == NULL)
(160,&packet_size)
(161,RET)
(162,rcookie)
(163,modp)
(164,return (-1)
(165,st->scheme)
(166,PACKET_BUFFER_SIZE)
(167,st->texchangesize = parts[0].size)
(168,parts)
(169,schemes)
(170,texchangesize)
(171,0)
(172,sstart)
(173,BN_varpre2bn(parts[0].where, parts[0].size, test)
(174,BN_free(mod)
(175,if (pick_attrib(st, &(st->oSPIoattrib)
(176,parts[0])
(177,modp)
(178,tempst)
(179,bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)
(180,p)
(181,packet_size)
(182,!exchange_check_value(test, gen, mod)
(183,(st->roschemes = calloc(ssize, sizeof(u_int8_t)
(184,if (sstart >= ssize)
(185,genp != NULL)
(186,st)
(187,modp = p)
(188,packet_size)
(189,mod)
(190,st)
(191,header->scheme)
(192,buffer)
(193,phase)
(194,VALUE_REQUEST_VALUE(header)
(195,BN_free(test)
(196,header)
(197,icookie)
(198,BN_varpre2bn(modp, modpsize, mod)
(199,NULL)
(200,-1)
(201,0)
(202,st)
(203,*genp = NULL)
(204,test)
(205,COOKIE_SIZE)
(206,st->uSPITBV)
(207,st->uSPIoattrib == NULL)
(208,)
(209,compute_shared_secret(st, &(st->shared)
(210,roschemesize)
(211,"Shared secret is: 0x%s\\n")
(212,counter)
(213,NULL)
(214,refpsize)
(215,2+2)
(216,texchangesize)
(217,header)
(218,st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t)
(219,st->texchange)
(220,0)
(221,sstart)
(222,st)
(223,size)
(224,(u_int16_t *)
(225,st->texchange)
(226,genp)
(227,bcmp(rcookie, header->rcookie, COOKIE_SIZE)
(228,scheme)
(229,scheme)
(230,sizeof(tempst)
(231,goto resourcefail;)
(232,varpre2octets(modp)
(233,&tempst)
(234,send_packet()
(235,st)
(236,port)
(237,bcopy(schemes, st->roschemes, ssize)
(238,i)
(239,i)
(240,packet_check(packet, size, &vr_msg)
(241,texchangesize)
(242,)
(243,rcookie)
(244,st)
(245,i = BUFFER_SIZE)
(246,sstart >= ssize)
(247,time(NULL)
(248,icookie)
(249,return (-1)
(250,VALUE_RESPONSE)
(251,BN_free(test)
(252,st->oSPIoattrib)
(253,goto resourcefail;)
(254,st->scheme)
(255,1)
(256,send_packet()
(257,tempst)
(258,st)
(259,BN_free(mod)
(260,st->port = port)
(261,st)
(262,icookie)
(263,&(st->oSPIoattribsize)
(264,genp)
(265,parts[0].where)
(266,ssize)
(267,test)
(268,BN_free(gen)
(269,return 0;)
(270,header)
(271,cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize)
(272,p)
(273,8)
(274,scheme)
(275,test)
(276,rcookie)
(277,2)
(278,gen)
(279,header)
(280,vsize)
(281,NULL)
(282,(vsize-4)
(283,pick_attrib(st, &(st->oSPIoattrib)
(284,i = BUFFER_SIZE)
(285,st)
(286,packet_size)
(287,2)
(288,2)
(289,st->texchangesize)
(290,st->oSPIoattribsize)
(291,st)
(292,modflag = 0)
(293,st->address)
(294,packet_size)
(295,parts[1])
(296,tempst.counter = header->counter)
(297,NULL)
(298,scheme)
(299,varpre2octets(genp)
(300,refp)
(301,1)
(302,sstart)
(303,modsize <= 2 && refp != NULL)
(304,modsize)
(305,st->scheme[2] = (vsize-4)
(306,NULL)
(307,st)
(308,st->phase != VALUE_RESPONSE)
(309,state_find_cookies(address, header->icookie, header->rcookie)
(310,0)
(311,sstart)
(312,parts)
(313,2 + varpre2octets(modp)
(314,size < VALUE_REQUEST_MIN)
(315,-1)
(316,COOKIE_SIZE)
(317,initiator)
(318,st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)
(319,)
(320,modsize == vsize)
(321,vsize)
(322,0)
(323,st->oSPIprivacyctx == NULL)
(324,exchange_set_generator(gen, header->scheme, genp)
(325,tempst)
(326,log_error("calloc()
(327,tempst)
(328,)
(329,4)
(330,tempst)
(331,st)
(332,goto resourcefail;)
(333,-1)
(334,scheme)
(335,if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)
(336,genp)
(337,gen)
(338,sizeof(u_int8_t)
(339,"bad packet structure in handle_value_request()
(340,parts[0].size)
(341,st)
(342,break;)
(343,mod)
(344,parts)
(345,address)
(346,test)
(347,!bcmp(header->scheme, schemes + sstart, 2)
(348,sizeof(u_int8_t)
(349,refp != NULL)
(350,BN_new()
(351,if (packet_check(packet, size, &vr_msg)
(352,goto resourcefail;)
(353,1)
(354,size)
(355,&packet_size)
(356,bcopy(header->scheme, st->scheme, 2)
(357,st->scheme[3])
(358,bin2hex(buffer, &i, st->shared, st->sharedsize)
(359,htons(scheme_get_ref(header->scheme)
(360,header->counter)
(361,ssize)
(362,0)
(363,parts)
(364,break;)
(365,header)
(366,1)
(367,BN_varpre2bn(parts[0].where, parts[0].size, test)
(368,sstart = 0)
(369,test)
(370,st)
(371,st)
(372,st)
(373,rcookie)
(374,genp)
(375,)
(376,counter)
(377,tempst.port)
(378,modsize)
(379,log_print("bad packet structure in handle_value_request()
(380,&tempst)
(381,state_insert(st)
(382,refpsize = modsize)
(383,"Got exchange value 0x%s\\n")
(384,(st = state_new()
(385,packet_buffer)
(386,0)
(387,st->uSPIoattribsize)
(388,if (st->scheme == NULL)
(389,NULL)
(390,2)
(391,parts[1].where)
(392,p = scheme_get_mod(schemes + sstart)
(393,st->scheme)
(394,if (photuris_value_response(st, packet_buffer, &packet_size)
(395,header)
(396,st)
(397,scheme)
(398,0xFF)
(399,sstart)
(400,schemes)
(401,)
(402,header)
(403,if (size < VALUE_REQUEST_MIN)
(404,header->rcookie)
(405,scheme_get_gen(schemes+sstart)
(406,parts[0])
(407,header)
(408,sstart < ssize)
(409,st)
(410,icookie)
(411,st)
(412,modp)
(413,st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH)
(414,calloc(st->texchangesize, sizeof(u_int8_t)
(415,NULL)
(416,pick_attrib(st, &(st->oSPIoattrib)
(417,VALUE_REQUEST_MIN)
(418,if (genp != NULL)
(419,return (-1)
(420,header = (struct value_request *)
(421,0)
(422,&tempst)
(423,st->roschemes)
(424,test)
(425,port)
(426,scheme)
(427,vsize)
(428,vsize)
(429,0)
(430,COOKIE_SIZE)
(431,printf("Shared secret is: 0x%s\\n", buffer)
(432,parts[0])
(433,modp = refp)
(434,calloc(vsize, sizeof(u_int8_t)
(435,BN_new()
(436,)
(437,counter)
(438,u_int8_t)
(439,4)
(440,schemes + sstart)
(441,sharedsize)
(442,return (-1)
(443,genp == NULL)
(444,NULL)
(445,vsize)
(446,BN_free(gen)
(447,)
(448,varpre2octets(genp)
(449,roschemes)
(450,mod)
(451,strncpy(st->address, address, 15)
(452,schemes)
(453,NULL)
(454,modp)
(455,&(st->sharedsize)
(456,bcopy(parts[1].where, st->uSPIoattrib, parts[1].size)
(457,st->phase)
(458,-1)
(459,modflag)
(460,)
(461,where)
(462,u_short port)
(463,st)
(464,PACKET_BUFFER_SIZE)
(465,NULL)
(466,bcopy(genp, st->scheme+2+2, varpre2octets(genp)
(467,IPSEC_OPT_ENC)
(468,header)
(469,st->schemesize)
(470,state_value_reset(st)
(471,header->scheme)
(472,state_value_reset(st)
(473,sizeof(u_int8_t)
(474,size)
(475,)
(476,2)
(477,modpsize)
(478,genp)
(479,st)
(480,size)
(481,vr_msg = {\n\\n\\t     "Value Request",\n\\n\\t     VALUE_REQUEST_MIN, 0, parts\n\\n\\t})
(482,break;)
(483,exchange_set_generator(gen, header->scheme, genp)
(484,calloc(ssize, sizeof(u_int8_t)
(485,0)
(486,varpre2octets(p)
(487,st->uSPIoattribsize = parts[1].size)
(488,)
(489,st->roschemesize)
(490,st)
(491,tempst)
(492,resourcefail:)
(493,st->texchange = calloc(st->texchangesize, sizeof(u_int8_t)
(494,st->flags)
(495,gen)
(496,bcopy(header->rcookie, st->rcookie, COOKIE_SIZE)
(497,bzero((char *)
(498,genp)
(499,1)
(500,photuris_value_response(st, packet_buffer, &packet_size)
(501,parts[0].where)
(502,parts[0])
(503,(vsize-4)
(504,schemes)
(505,if (genp != NULL)
(506,st == NULL)
(507,st->lifetime = exchange_timeout + time(NULL)
(508,schemes + sstart)
(509,BAD_COOKIE)
(510,packet_size)
(511,u_int8_t)
(512,sstart)
(513,st)
(514,st->sharedsize)
(515,st)
(516,st->shared)
(517,st)
(518,varpre2octets(genp)
(519,parts[0].where)
(520,COOKIE_SIZE)
(521,genp == NULL ? 0 : 2 + varpre2octets(genp)
(522,header)
(523,schemes + sstart)
(524,lifetime)
(525,counter)
(526,bcopy(header->icookie, st->icookie, COOKIE_SIZE)
(527,header->icookie)
(528,return (0)
(529,st->texchange == NULL)
(530,15)
(531,flags)
(532,sstart)
(533,st->texchange)
(534,sstart)
(535,p)
(536,st)
(537,NULL)
(538,st->retries = 0)
(539,mod)
(540,refpsize)
(541,retries)
(542,st->sharedsize)
(543,)
(544,ssize)
(545,genp = scheme_get_gen(schemes + sstart)
(546,i)
(547,u_int8_t)
(548,refpsize)
(549,st)
(550,if (st == NULL)
(551,1)
(552,)
(553,parts[1].size)
(554,)
(555,modsize == vsize)
(556,st)
(557,st->icookie)
(558,header)
(559,parts[1].size)
(560,test)
(561,-1)
(562,vsize)
(563,2)
(564,NULL)
(565,1)
(566,header)
(567,-1)
(568,modsize)
(569,uSPIoattrib)
(570,st->lifetime)
(571,scheme_ref)
(572,tempst.icookie)
(573,st->texchangesize)
(574,parts[1])
(575,buffer)
(576,if (BN_varpre2bn(modp, modpsize, mod)
(577,rcookie)
(578,sstart)
(579,buffer)
(580,header->scheme)
(581,BN_free(test)
(582,parts[0])
(583,schemes)
(584,BN_varpre2bn(modp, modpsize, mod)
(585,bcmp(scheme_ref, schemes + sstart, 2)
(586,rcookie)
(587,genp)
(588,-1)
(589,BN_new()
(590,where)
(591,where)
(592,2)
(593,bcopy(parts[0].where, st->texchange, st->texchangesize)
(594,init_privacy_key(st, 0)
(595,2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)
(596,mod = BN_new()
(597,uSPITBV)
(598,goto resourcefail;)
(599,struct value_request *)
(600,)
(601,st->scheme)
(602,size)
(603,port)
(604,gen = BN_new()
(605,icookie)
(606,counter)
(607,varpre2octets(VALUE_REQUEST_VALUE(header)
(608,tempst.initiator)
(609,uSPIoattrib)
(610,packet_size = PACKET_BUFFER_SIZE)
(611,header)
(612,tempst.address)
(613,1)
(614,modflag)
(615,)
(616,modpsize = refpsize)
(617,header)
(618,sizeof(u_int8_t)
(619,header->rcookie)
(620,header->counter)
(621,goto resourcefail;)
(622,state_new()
(623,header)
(624,st)
(625,icookie)
(626,state_value_reset(st)
(627,st)
(628,st)
(629,modp)
(630,rcookie)
(631,p)
(632,modsize)
(633,modpsize)
(634,0)
(635,st)
(636,if (st->uSPIoattrib == NULL)
(637,st)
(638,texchange)
(639,modsize)
(640,st)
(641,scheme)
(642,send_packet()
(643,state_value_reset(st)
(644,2)
(645,header->rcookie)
(646,vr_msg)
(647,BN_free(mod)
(648,phase)
(649,size)
(650,if (modflag)
(651,mod)
(652,*(u_int16_t *)
(653,scheme_get_gen(schemes + sstart)
(654,state_value_reset(st)
(655,return (-1)
(656,!bcmp(scheme_ref, schemes + sstart, 2)
(657,0)
(658,parts)
(659,st->scheme == NULL)
(660,texchange)
(661,bcmp(header->scheme, schemes + sstart, 2)
(662,(char *)
(663,header->rcookie)
(664,st->port)
(665,st->phase)
(666,genp)
(667,return (0)
(668,calloc(parts[1].size, sizeof(u_int8_t)
(669,u_int8_t *schemes)
(670,buffer)
(671,icookie)
(672,gen)
(673,modp)
(674,mod)
(675,st)
(676,photuris_error_message(st, packet_buffer, &packet_size,\n\\n\\t\\t\\t       header->icookie, header->rcookie,\n\\n\\t\\t\\t       header->counter, RESOURCE_LIMIT)
(677,modsize)
(678,packet_size = PACKET_BUFFER_SIZE)
(679,vsize)
(680,sstart += scheme_get_len(schemes+sstart)
(681,scheme)
(682,-1)
(683,photuris_error_message(&tempst, packet_buffer, &packet_size,\n\\n\\t\\t\\t\\t\\t header->icookie, header->rcookie,\n\\n\\t\\t\\t\\t\\t header->counter, BAD_COOKIE)
(684,ssize)
(685,bcopy(header->icookie, tempst.icookie, COOKIE_SIZE)
(686,if (st->oSPIprivacyctx == NULL)
(687,st)
(688,exchange_set_generator(gen, header->scheme, genp)
(689,tempst.port = global_port)
(690,IPSEC_OPT_AUTH)
(691,st->scheme+2+2)
(692,st)
(693,NULL)
(694,modsize <= 2)
(695,vsize)
(696,rcookie)
(697,st)
(698,tempst)
(699,int size)
(700,vr_msg)
(701,1)
(702,!bcmp(scheme_ref, schemes + sstart, 2)
(703,st->uSPIoattrib)
(704,st)
(705,tempst)
(706,)
(707,bcopy(&header->counter, st->uSPITBV, 3)
(708,packet_check(packet, size, &vr_msg)
(709,st->scheme[3] = (vsize-4)
(710,header->icookie)
(711,PACKET_BUFFER_SIZE)
(712,if (!bcmp(header->scheme, schemes + sstart, 2)
(713,vr_msg)
(714,modpsize = modsize)
(715,st)
(716,st)
(717,genp)
(718,)
(719,st)
(720,vsize = 2 + varpre2octets(modp)
(721,)
(722,if (BN_varpre2bn(parts[0].where, parts[0].size, test)
(723,tempst.counter)
(724,header->icookie)
(725,st = state_new()
(726,BN_free(test)
(727,i)
(728,st->scheme)
(729,st->rcookie)
(730,uSPIoattribsize)
(731,modp = p)
(732,vsize += 2 + varpre2octets(genp)
(733,header->counter)
(734,while (sstart < ssize)
(735,if ((st = state_new()
(736,exchange_timeout + time(NULL)
(737,exchange_timeout)
(738,BUFFER_SIZE)
(739,refp = p)
(740,scheme_get_len(schemes+sstart)
(741,st->roschemes)
(742,packet_buffer)
(743,st)
(744,BUFFER_SIZE)
(745,st)
(746,1)
(747,modp = NULL)
(748,parts)
(749,1)
(750,st->shared)
(751,modpsize)
(752,st->scheme)
(753,1)
(754,sstart)
(755,&packet_size)
(756,parts[1])
(757,address)
(758,modp)
(759,tempst.initiator = 0)
(760,init_privacy_key(st, 1)
(761,modsize)
(762,-1)
(763,&i)
(764,st->scheme)
(765,&(st->oSPIoattrib)
(766,oSPIprivacyctx)
(767,mod)
(768,genp = scheme_get_gen(schemes+sstart)
(769,modsize = varpre2octets(p)
(770,modflag)
(771,refp)
(772,schemes + sstart)
(773,st->roschemesize = ssize)
(774,NULL)
(775,p)
(776,3)
(777,genp != NULL)
(778,tempst)
(779,1)
(780,char *)
(781,texchange)
(782,modpsize)
(783,st)
(784,st)
(785,header)
(786,modp)
(787,shared)
(788,header->icookie)
(789,refp)
(790,*(u_int16_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^