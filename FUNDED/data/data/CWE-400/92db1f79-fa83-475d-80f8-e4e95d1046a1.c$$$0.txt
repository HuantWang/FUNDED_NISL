-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_10_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalTrue)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
58,59
60,61
61,62
63,64
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,39,41,43,48,49,52,56,57,59,62,67,68
-----computeFrom-----
12,13
12,14
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_10_bad(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_10_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_10_bad
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalTrue
globalTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(13,30,0)
(15,10,0)
(26,2,0)
(21,13,0)
(16,1,0)
(36,10,0)
(6,10,0)
(3,25,0)
(30,36,0)
(2,8,0)
(16,18,0)
(30,13,0)
(27,32,0)
(1,16,0)
(12,18,0)
(22,36,0)
(5,11,0)
(24,11,0)
(34,10,0)
(11,0,0)
(9,12,0)
(25,36,0)
(1,36,0)
(29,16,0)
(19,1,0)
(7,18,0)
(28,13,0)
(14,30,0)
(32,11,0)
(13,31,0)
(17,18,0)
(36,25,0)
(4,32,0)
(1,35,0)
(35,1,0)
(36,25,1)
(2,26,1)
(17,7,1)
(9,2,1)
(25,3,1)
(12,9,1)
(26,16,1)
(23,16,1)
(19,29,1)
(21,33,1)
(20,13,1)
(32,27,1)
(20,33,1)
(28,21,1)
(29,12,1)
(1,19,1)
(7,32,1)
(16,1,1)
(16,18,1)
(23,20,1)
(27,4,1)
(14,28,1)
(33,36,1)
(29,18,1)
(1,35,1)
(1,36,1)
(4,20,1)
(12,18,1)
(3,22,1)
(30,14,1)
(13,30,1)
(30,36,1)
(18,17,1)
(12,18,2)
(1,35,2)
(1,36,2)
(14,33,2)
(30,33,2)
(19,16,2)
(30,36,2)
(26,16,2)
(1,20,2)
(13,33,2)
(12,16,2)
(27,20,2)
(17,20,2)
(19,20,2)
(29,20,2)
(18,20,2)
(13,30,2)
(16,16,2)
(4,20,2)
(9,16,2)
(16,20,2)
(28,33,2)
(2,16,2)
(16,1,2)
(36,25,2)
(32,20,2)
(7,20,2)
(16,18,2)
(21,33,2)
(1,16,2)
(29,16,2)
-----------------------------------
(0,)
(1,(size_t)
(2,printLine("Hello")
(3,1)
(4,i)
(5,for (i = 0; i < (size_t)
(6,if(globalTrue)
(7,i)
(8,)
(9,i)
(10,)
(11,)
(12,i++)
(13,fscanf(stdin, "%d", &count)
(14,count)
(15,if(globalTrue)
(16,i < (size_t)
(17,0)
(18,i = 0)
(19,count)
(20,globalTrue)
(21,stdin)
(22,count)
(23,RET)
(24,i)
(25,-1)
(26,"Hello")
(27,0)
(28,"%d")
(29,i)
(30,&count)
(31,)
(32,i = 0)
(33,globalTrue)
(34,count)
(35,size_t)
(36,count = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^