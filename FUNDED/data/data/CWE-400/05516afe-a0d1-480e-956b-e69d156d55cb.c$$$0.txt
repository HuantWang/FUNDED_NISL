-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_04_bad(){    if(STATIC_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_04_bad()
CWE401_Memory_Leak__malloc_realloc_char_04_bad
{    if(STATIC_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(STATIC_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(38,23,0)
(43,50,0)
(22,0,0)
(8,44,0)
(8,34,0)
(18,23,0)
(45,38,0)
(1,44,0)
(36,43,0)
(7,21,0)
(47,23,0)
(19,38,0)
(28,32,0)
(17,2,0)
(37,39,0)
(33,21,0)
(31,3,0)
(13,6,0)
(44,23,0)
(16,41,0)
(4,6,0)
(35,44,0)
(2,44,0)
(25,45,0)
(26,3,0)
(18,38,0)
(46,18,0)
(25,50,0)
(40,23,0)
(44,1,0)
(21,38,0)
(11,34,0)
(30,11,0)
(5,45,0)
(38,45,0)
(32,38,0)
(15,1,0)
(10,28,0)
(45,25,0)
(0,24,0)
(50,43,0)
(42,22,0)
(49,50,0)
(23,29,0)
(32,28,0)
(50,25,0)
(14,23,0)
(3,34,0)
(11,44,0)
(45,5,0)
(1,32,0)
(0,22,0)
(21,23,0)
(1,15,0)
(3,44,0)
(39,28,0)
(28,39,0)
(20,2,0)
(9,32,0)
(12,8,0)
(6,38,0)
(32,1,0)
(1,15,1)
(1,32,1)
(20,17,1)
(48,27,1)
(21,38,1)
(3,31,1)
(2,20,1)
(33,6,1)
(6,13,1)
(6,38,1)
(18,38,1)
(8,12,1)
(45,5,1)
(3,44,1)
(46,21,1)
(37,10,1)
(22,42,1)
(35,18,1)
(13,4,1)
(7,33,1)
(36,49,1)
(30,8,1)
(50,43,1)
(32,38,1)
(25,50,1)
(28,39,1)
(42,6,1)
(9,35,1)
(49,19,1)
(32,28,1)
(10,9,1)
(26,2,1)
(39,37,1)
(38,45,1)
(17,44,1)
(48,11,1)
(33,0,1)
(8,44,1)
(44,1,1)
(4,38,1)
(43,36,1)
(11,30,1)
(12,3,1)
(11,44,1)
(18,46,1)
(0,22,1)
(31,26,1)
(48,2,1)
(21,7,1)
(2,44,1)
(45,25,1)
(19,27,1)
(7,27,2)
(2,44,2)
(45,5,2)
(33,27,2)
(9,27,2)
(25,27,2)
(28,39,2)
(12,2,2)
(28,27,2)
(17,27,2)
(3,2,2)
(13,27,2)
(22,6,2)
(32,28,2)
(30,2,2)
(50,43,2)
(18,27,2)
(46,27,2)
(21,27,2)
(44,1,2)
(6,27,2)
(2,27,2)
(11,2,2)
(43,27,2)
(8,2,2)
(42,6,2)
(3,44,2)
(26,2,2)
(21,38,2)
(8,44,2)
(6,38,2)
(0,6,2)
(1,15,2)
(32,38,2)
(32,27,2)
(37,27,2)
(38,45,2)
(45,27,2)
(11,44,2)
(31,2,2)
(44,27,2)
(38,27,2)
(1,32,2)
(0,22,2)
(36,27,2)
(35,27,2)
(25,50,2)
(49,27,2)
(20,27,2)
(50,27,2)
(39,27,2)
(18,38,2)
(10,27,2)
(1,27,2)
(19,27,2)
(45,25,2)
(4,27,2)
-----------------------------------
(0,exit(-1)
(1,(char *)
(2,data != NULL)
(3,strcpy(data, "New String")
(4,data)
(5,char *)
(6,data == NULL)
(7,"A String")
(8,printLine(data)
(9,data)
(10,130000)
(11,free(data)
(12,data)
(13,NULL)
(14,if (data != NULL)
(15,char *)
(16,if(STATIC_CONST_TRUE)
(17,data)
(18,printLine(data)
(19,data)
(20,NULL)
(21,strcpy(data, "A String")
(22,-1)
(23,)
(24,)
(25,malloc(100*sizeof(char)
(26,data)
(27,STATIC_CONST_TRUE)
(28,(130000)
(29,)
(30,data)
(31,"New String")
(32,realloc(data, (130000)
(33,data)
(34,)
(35,data)
(36,char)
(37,char)
(38,* data = (char *)
(39,sizeof(char)
(40,if (data == NULL)
(41,)
(42,1)
(43,sizeof(char)
(44,data = (char *)
(45,(char *)
(46,data)
(47,data)
(48,RET)
(49,100)
(50,100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^