-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
82,83
83,84
83,85
84,85
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,69,70,74,75,76,78,81,85,86,87,88,92,94,95
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(18,17,0)
(8,11,0)
(0,21,0)
(35,21,0)
(16,32,0)
(0,35,0)
(5,12,0)
(22,2,0)
(26,3,0)
(24,35,0)
(48,25,0)
(46,12,0)
(9,17,0)
(33,8,0)
(14,34,0)
(8,17,0)
(10,2,0)
(27,21,0)
(1,28,0)
(46,25,0)
(8,35,0)
(36,3,0)
(35,25,0)
(19,21,0)
(7,24,0)
(25,46,0)
(41,24,0)
(47,17,0)
(42,11,0)
(43,32,0)
(25,48,0)
(4,21,0)
(12,34,0)
(13,27,0)
(29,0,0)
(37,35,0)
(20,11,0)
(23,17,0)
(12,46,0)
(44,46,0)
(45,21,0)
(34,12,0)
(22,30,0)
(32,35,0)
(2,22,0)
(25,35,0)
(11,3,0)
(31,3,0)
(32,21,0)
(46,11,0)
(15,21,0)
(39,21,0)
(28,17,0)
(6,47,1)
(32,35,1)
(15,0,1)
(8,35,1)
(4,27,1)
(24,35,1)
(34,14,1)
(8,33,1)
(12,34,1)
(2,10,1)
(23,28,1)
(43,22,1)
(10,24,1)
(6,23,1)
(24,7,1)
(25,48,1)
(13,38,1)
(44,37,1)
(35,25,1)
(37,38,1)
(14,5,1)
(8,11,1)
(38,11,1)
(40,15,1)
(0,29,1)
(32,16,1)
(46,11,1)
(16,43,1)
(22,2,1)
(0,35,1)
(25,46,1)
(28,1,1)
(7,41,1)
(5,44,1)
(33,40,1)
(41,35,1)
(43,24,1)
(47,8,1)
(11,42,1)
(46,12,1)
(29,32,1)
(1,40,1)
(42,20,1)
(27,13,1)
(40,4,1)
(35,38,2)
(10,24,2)
(8,11,2)
(8,35,2)
(25,46,2)
(12,38,2)
(29,38,2)
(23,40,2)
(35,25,2)
(7,38,2)
(46,38,2)
(4,38,2)
(32,35,2)
(22,24,2)
(16,38,2)
(34,38,2)
(28,40,2)
(37,38,2)
(8,40,2)
(24,38,2)
(13,38,2)
(44,38,2)
(25,38,2)
(1,40,2)
(24,35,2)
(22,2,2)
(25,48,2)
(15,38,2)
(47,40,2)
(0,38,2)
(43,38,2)
(14,38,2)
(33,40,2)
(46,11,2)
(5,38,2)
(46,12,2)
(0,35,2)
(12,34,2)
(32,38,2)
(41,38,2)
(2,24,2)
(27,38,2)
-----------------------------------
(0,printLine(data)
(1,"Benign, fixed string")
(2,-1)
(3,)
(4,break;)
(5,100)
(6,RET)
(7,NULL)
(8,free(data)
(9,case 7:)
(10,1)
(11,data = NULL)
(12,100*sizeof(char)
(13,"Benign, fixed string")
(14,char)
(15,break;)
(16,"A String")
(17,)
(18,default:)
(19,default:)
(20,data)
(21,)
(22,exit(-1)
(23,break;)
(24,data == NULL)
(25,(char *)
(26,switch(6)
(27,printLine("Benign, fixed string")
(28,printLine("Benign, fixed string")
(29,data)
(30,)
(31,switch(8)
(32,strcpy(data, "A String")
(33,data)
(34,sizeof(char)
(35,data = (char *)
(36,data)
(37,data)
(38,6)
(39,case 6:)
(40,8)
(41,data)
(42,NULL)
(43,data)
(44,data)
(45,if (data == NULL)
(46,realloc(data, 100*sizeof(char)
(47,break;)
(48,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^