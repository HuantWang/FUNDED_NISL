-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink(count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
46,48
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
47,56
47,57
47,58
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
59,60
61,62
61,63
62,63
62,64
63,64
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
74,75
77,78
78,79
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
108,110
109,110
111,112
113,114
113,115
114,115
114,116
115,116
115,117
115,118
115,119
116,117
118,119
120,121
120,122
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
133,134
135,136
137,138
138,139
138,140
139,140
141,142
141,143
141,144
141,145
141,146
142,143
144,145
146,147
148,149
148,150
149,150
153,154
153,155
154,155
154,156
155,156
155,157
156,157
158,159
160,161
160,162
161,162
164,165
166,167
167,168
167,169
168,169
168,170
169,170
171,172
174,175
175,176
175,177
176,177
178,179
178,180
179,180
181,182
184,185
184,186
185,186
185,187
186,187
188,189
190,191
191,192
192,193
192,194
193,194
195,196
197,198
198,199
198,200
199,200
201,202
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,37,40,42,45,51,54,56,58,60,64,66,68,72,75,76,80,85,86,88,94,95,96,99,101,106,107,110,112,117,119,123,125,128,132,134,136,140,143,145,147,150,151,152,157,159,162,163,165,170,172,173,177,180,182,183,187,189,194,196,200,202
-----computeFrom-----
12,13
12,14
49,50
49,51
62,63
62,64
82,83
82,84
90,91
90,92
103,104
103,105
114,115
114,116
138,139
138,140
148,149
148,150
154,155
154,156
155,156
155,157
160,161
160,162
167,168
167,169
175,176
175,177
185,186
185,187
-----guardedBy-----
187,196
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink(count);}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink(count);}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink(count);
CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink(count)
CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink
CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink
count
count
-----joern-----
(30,91,0)
(116,123,0)
(100,12,0)
(107,18,0)
(94,64,0)
(25,19,0)
(20,76,0)
(70,12,0)
(15,112,0)
(36,116,0)
(64,20,0)
(116,86,0)
(10,76,0)
(79,71,0)
(119,2,0)
(71,76,0)
(86,116,0)
(10,97,0)
(59,71,0)
(26,108,0)
(89,93,0)
(27,76,0)
(49,12,0)
(88,28,0)
(23,39,0)
(52,8,0)
(24,93,0)
(32,12,0)
(5,79,0)
(35,28,0)
(77,114,0)
(126,19,0)
(95,86,0)
(67,112,0)
(23,76,0)
(8,52,0)
(118,23,0)
(64,57,0)
(125,14,0)
(13,1,0)
(111,28,0)
(91,115,0)
(58,73,0)
(71,79,0)
(16,12,0)
(82,49,0)
(19,126,0)
(18,42,0)
(18,107,0)
(74,124,0)
(112,15,0)
(117,35,0)
(68,59,0)
(106,76,0)
(12,6,0)
(78,84,0)
(85,96,0)
(75,2,0)
(60,39,0)
(112,116,0)
(69,37,0)
(9,52,0)
(47,21,0)
(31,80,0)
(34,70,0)
(18,76,0)
(126,76,0)
(116,71,0)
(84,6,0)
(3,76,0)
(96,126,0)
(124,76,0)
(0,96,0)
(110,18,0)
(11,115,0)
(29,73,0)
(21,91,0)
(81,76,0)
(65,59,0)
(72,119,0)
(63,107,0)
(2,119,0)
(59,70,0)
(121,113,0)
(29,6,0)
(102,117,0)
(84,23,0)
(73,29,0)
(45,70,0)
(52,71,0)
(123,116,0)
(113,76,0)
(44,2,0)
(109,12,0)
(33,117,0)
(1,70,0)
(91,21,0)
(42,18,0)
(35,117,0)
(22,64,0)
(50,12,0)
(51,97,0)
(104,21,0)
(56,49,0)
(41,79,0)
(90,57,0)
(20,52,0)
(115,91,0)
(103,67,0)
(57,76,0)
(17,12,0)
(122,52,0)
(87,6,0)
(83,79,0)
(120,8,0)
(38,12,0)
(92,123,0)
(112,67,0)
(61,12,0)
(101,42,0)
(48,124,0)
(91,30,0)
(62,55,0)
(28,20,0)
(98,12,0)
(99,37,0)
(117,20,0)
(46,30,0)
(1,127,0)
(54,8,0)
(7,71,0)
(4,29,0)
(28,35,0)
(119,10,0)
(52,20,0)
(37,71,0)
(116,112,0)
(84,29,0)
(97,10,0)
(1,71,0)
(93,113,0)
(53,20,0)
(105,52,0)
(39,23,0)
(111,88,1)
(79,5,1)
(89,24,1)
(10,97,1)
(8,54,1)
(62,123,1)
(41,83,1)
(84,23,1)
(116,112,1)
(71,79,1)
(91,30,1)
(52,71,1)
(52,8,1)
(78,77,1)
(102,33,1)
(119,2,1)
(110,107,1)
(0,10,1)
(99,71,1)
(123,92,1)
(36,126,1)
(53,123,1)
(84,29,1)
(24,18,1)
(124,48,1)
(66,1,1)
(65,31,1)
(65,40,1)
(52,105,1)
(125,37,1)
(67,103,1)
(122,9,1)
(91,21,1)
(30,46,1)
(123,116,1)
(74,115,1)
(65,26,1)
(68,65,1)
(82,56,1)
(46,21,1)
(49,82,1)
(33,20,1)
(117,102,1)
(96,85,1)
(126,19,1)
(60,118,1)
(42,101,1)
(85,0,1)
(112,67,1)
(22,35,1)
(104,47,1)
(116,71,1)
(31,115,1)
(115,91,1)
(101,110,1)
(75,113,1)
(51,119,1)
(64,94,1)
(88,117,1)
(9,53,1)
(25,96,1)
(1,70,1)
(118,57,1)
(35,28,1)
(65,125,1)
(73,58,1)
(94,22,1)
(28,20,1)
(107,63,1)
(57,90,1)
(40,23,1)
(19,25,1)
(39,60,1)
(45,34,1)
(1,71,1)
(117,20,1)
(116,86,1)
(11,91,1)
(119,72,1)
(92,116,1)
(18,42,1)
(83,7,1)
(69,99,1)
(97,51,1)
(78,66,1)
(18,107,1)
(44,75,1)
(64,20,1)
(29,73,1)
(84,78,1)
(66,59,1)
(65,62,1)
(72,2,1)
(121,93,1)
(59,70,1)
(90,64,1)
(48,74,1)
(43,84,1)
(93,89,1)
(113,121,1)
(23,39,1)
(1,13,1)
(59,71,1)
(115,11,1)
(37,69,1)
(35,117,1)
(28,111,1)
(26,35,1)
(103,36,1)
(47,70,1)
(34,49,1)
(112,15,1)
(59,68,1)
(86,95,1)
(13,59,1)
(105,8,1)
(21,104,1)
(5,41,1)
(70,45,1)
(95,112,1)
(47,40,1)
(120,122,1)
(2,44,1)
(37,71,1)
(56,29,1)
(54,120,1)
(7,124,1)
(20,52,1)
(63,37,1)
(77,66,1)
(58,4,1)
(112,67,2)
(94,35,2)
(84,23,2)
(2,37,2)
(23,35,2)
(71,79,2)
(29,73,2)
(63,37,2)
(54,123,2)
(59,71,2)
(64,20,2)
(67,37,2)
(52,8,2)
(126,19,2)
(62,123,2)
(96,37,2)
(7,115,2)
(123,37,2)
(60,35,2)
(116,37,2)
(52,123,2)
(110,37,2)
(95,37,2)
(111,117,2)
(20,52,2)
(57,35,2)
(72,37,2)
(37,71,2)
(19,37,2)
(69,115,2)
(113,37,2)
(92,37,2)
(91,30,2)
(122,123,2)
(125,37,2)
(71,115,2)
(117,123,2)
(35,123,2)
(99,115,2)
(10,37,2)
(91,21,2)
(46,40,2)
(90,35,2)
(41,115,2)
(5,115,2)
(42,37,2)
(25,37,2)
(35,117,2)
(115,40,2)
(11,40,2)
(0,37,2)
(88,117,2)
(26,35,2)
(117,20,2)
(10,97,2)
(33,123,2)
(83,115,2)
(21,40,2)
(18,37,2)
(115,91,2)
(28,117,2)
(18,42,2)
(85,37,2)
(89,37,2)
(93,37,2)
(124,115,2)
(77,66,2)
(22,35,2)
(36,37,2)
(37,115,2)
(51,37,2)
(18,107,2)
(52,71,2)
(30,40,2)
(91,40,2)
(39,35,2)
(24,37,2)
(9,123,2)
(44,37,2)
(112,37,2)
(86,37,2)
(1,71,2)
(101,37,2)
(74,115,2)
(13,59,2)
(118,35,2)
(79,115,2)
(120,123,2)
(126,37,2)
(105,123,2)
(116,112,2)
(97,37,2)
(59,70,2)
(1,59,2)
(8,123,2)
(116,71,2)
(123,116,2)
(64,35,2)
(35,28,2)
(1,70,2)
(104,40,2)
(28,20,2)
(121,37,2)
(48,115,2)
(47,40,2)
(75,37,2)
(112,15,2)
(40,35,2)
(107,37,2)
(103,37,2)
(102,123,2)
(119,2,2)
(116,86,2)
(53,123,2)
(119,37,2)
(23,39,2)
(84,29,2)
(20,123,2)
(31,115,2)
-----------------------------------
(0,service)
(1,CLOSE_SOCKET(connectSocket)
(2,service.sin_addr)
(3,if (connect(connectSocket, (struct sockaddr*)
(4,count)
(5,IPPROTO_TCP)
(6,)
(7,connectSocket)
(8,CHAR_ARRAY_SIZE - 1)
(9,connectSocket)
(10,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(11,NO_ERROR)
(12,)
(13,connectSocket)
(14,)
(15,struct sockaddr*)
(16,do)
(17,connectSocket)
(18,memset(&service, 0, sizeof(service)
(19,htons(TCP_PORT)
(20,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(21,MAKEWORD(2,2)
(22,inputBuffer)
(23,count = atoi(inputBuffer)
(24,service)
(25,TCP_PORT)
(26,break;)
(27,if (connectSocket == INVALID_SOCKET)
(28,recvResult == 0)
(29,count = -1)
(30,&wsaData)
(31,break;)
(32,wsaDataInit)
(33,recvResult)
(34,connectSocket)
(35,recvResult == SOCKET_ERROR || recvResult == 0)
(36,connectSocket)
(37,connectSocket == INVALID_SOCKET)
(38,service)
(39,atoi(inputBuffer)
(40,0)
(41,SOCK_STREAM)
(42,sizeof(service)
(43,RET)
(44,sin_addr)
(45,INVALID_SOCKET)
(46,wsaData)
(47,2)
(48,1)
(49,wsaDataInit = 0)
(50,wsaData)
(51,IP_ADDRESS)
(52,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(53,recvResult)
(54,1)
(55,)
(56,wsaDataInit)
(57,inputBuffer[recvResult] = '\\0')
(58,1)
(59,connectSocket != INVALID_SOCKET)
(60,inputBuffer)
(61,if (connectSocket != INVALID_SOCKET)
(62,break;)
(63,service)
(64,inputBuffer[recvResult])
(65,connectSocket)
(66,wsaDataInit)
(67,&service)
(68,INVALID_SOCKET)
(69,INVALID_SOCKET)
(70,connectSocket = INVALID_SOCKET)
(71,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(72,s_addr)
(73,-1)
(74,wsaDataInit)
(75,service)
(76,)
(77,WSACleanup()
(78,count)
(79,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(80,)
(81,if (recvResult == SOCKET_ERROR || recvResult == 0)
(82,0)
(83,AF_INET)
(84,CWE400_Resource_Exhaustion__connect_socket_sleep_52b_goodB2GSink(count)
(85,sin_port)
(86,sizeof(service)
(87,count)
(88,recvResult)
(89,sin_family)
(90,'\\0')
(91,WSAStartup(MAKEWORD(2,2)
(92,SOCKET_ERROR)
(93,service.sin_family)
(94,recvResult)
(95,service)
(96,service.sin_port)
(97,inet_addr(IP_ADDRESS)
(98,if (wsaDataInit)
(99,connectSocket)
(100,inputBuffer)
(101,service)
(102,SOCKET_ERROR)
(103,service)
(104,2)
(105,0)
(106,if (WSAStartup(MAKEWORD(2,2)
(107,&service)
(108,)
(109,recvResult)
(110,0)
(111,0)
(112,(struct sockaddr*)
(113,service.sin_family = AF_INET)
(114,)
(115,WSAStartup(MAKEWORD(2,2)
(116,connect(connectSocket, (struct sockaddr*)
(117,recvResult == SOCKET_ERROR)
(118,count)
(119,service.sin_addr.s_addr)
(120,CHAR_ARRAY_SIZE)
(121,AF_INET)
(122,inputBuffer)
(123,connect(connectSocket, (struct sockaddr*)
(124,wsaDataInit = 1)
(125,break;)
(126,service.sin_port = htons(TCP_PORT)
(127,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^