-----label-----
0
-----code-----
static int shaper_msg_send(pid_t dst_pid, unsigned int prio,
    long double downrate, long double uprate) {
  unsigned int error_count = 0;
  int res;
  struct shaper_msg *msg;
  size_t msgsz = sizeof(unsigned int) + sizeof(long double) +
    sizeof(long double);

  msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));
  if (msg == NULL) {
    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
      MOD_SHAPER_VERSION ": Out of memory!");
    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);
  }

  msg->mtype = dst_pid;
  memcpy(msg->mtext, &prio, sizeof(unsigned int));
  memcpy(msg->mtext + sizeof(unsigned int), &downrate, sizeof(long double));
  memcpy(msg->mtext + sizeof(unsigned int) + sizeof(long double), &uprate,
    sizeof(long double));

  /* Remove any old messages in the queue for the destination PID.  This
   * helps keep the queue clear and moving, more resistant to (inadvertent
   * or not) DoS situations.
   */
  shaper_msg_clear(dst_pid);

  while (msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT) < 0) {
    pr_signals_handle();

    if (errno != EAGAIN) {
      free(msg);
      return -1;

    } else {
      /* The EAGAIN error happens when there are too many bytes of messages
       * on the queue.  Check to see what the current number of messages
       * on the queue is, and log the error.
       *
       * If this error is hit too many times in a loop, we may need to give
       * up permanently.  (XXX in the future, if one queue is too small for
       * a busy daemon, look into a different queue allocation strategy.)
       */
      struct msqid_ds ds;

      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {
        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,
          "error checking queue ID %d: %s", shaper_qid, strerror(errno));

      } else {
        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,
          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "
          "reached (%lu messages of %lu bytes currently in queue)",
          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,
          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);
      }

      error_count++;
      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {
        free(msg);

        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,
          "unable to send message to PID %lu via queue ID %d after %u attempts "
          "(%u max attempts allowed), failing", (unsigned long) dst_pid,
          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);

        errno = EPERM;
        return -1;
      }
    }

  }
  free(msg);

  /* Send SIGUSR2 to the destination process, to let it know that it should
   * check the queue for messages.
   */
  PRIVS_ROOT
  res = kill(dst_pid, SIGUSR2);
  PRIVS_RELINQUISH

  if (res < 0) {
    if (errno == ESRCH) {
      shaper_msg_clear(dst_pid);

    } else {
      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,
        "error sending notice: %s", strerror(errno));
    }
  }

#if 0
  /* Handle our own signal, if necessary. */
  if (getpid() == dst_pid)
    pr_signals_handle();
#endif

  return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
10,11
10,12
12,13
14,15
14,16
16,17
18,19
18,20
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
50,52
51,52
52,53
52,54
55,56
56,57
56,58
59,60
60,61
60,62
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
73,74
73,75
74,75
77,78
79,80
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
92,93
93,94
94,95
94,96
94,97
94,98
95,96
97,98
98,99
100,101
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
113,116
113,117
114,115
116,117
116,118
117,118
120,121
121,122
123,124
124,125
124,126
127,128
128,129
128,130
128,131
128,132
129,130
131,132
131,133
132,133
132,134
133,134
136,137
137,138
137,139
140,141
141,142
143,144
144,145
144,146
147,148
148,149
148,150
148,151
148,152
149,150
151,152
151,153
152,153
152,154
153,154
153,155
154,155
157,158
158,159
158,160
161,162
162,163
162,164
165,166
166,167
168,169
169,170
169,171
172,173
173,174
173,175
174,175
176,177
178,179
178,180
179,180
179,181
180,181
180,182
180,183
180,184
180,185
181,182
183,184
185,186
187,188
189,190
192,193
192,194
193,194
194,195
195,196
197,198
197,199
197,200
198,199
198,200
199,200
201,202
203,204
203,205
204,205
205,206
205,207
206,207
208,209
210,211
211,212
213,214
213,215
213,216
213,217
214,215
215,216
215,217
216,217
218,219
220,221
220,222
220,223
221,222
221,223
222,223
222,224
222,225
222,226
223,224
225,226
227,228
229,230
230,231
233,234
234,235
235,236
235,237
236,237
236,238
239,240
239,241
239,242
239,243
239,244
239,245
240,241
242,243
244,245
247,248
249,250
249,251
250,251
252,253
254,255
255,256
256,257
256,258
257,258
257,259
260,261
260,262
260,263
260,264
260,265
260,266
260,267
260,268
260,269
261,262
263,264
265,266
268,269
268,270
269,270
269,271
272,273
274,275
276,277
278,279
278,280
279,280
279,281
282,283
282,284
283,284
286,287
286,288
287,288
287,289
288,289
288,290
291,292
291,293
292,293
295,296
297,298
298,299
299,300
301,302
301,303
302,303
302,304
303,304
305,306
307,308
307,309
307,310
307,311
308,309
309,310
309,311
310,311
312,313
314,315
315,316
315,317
316,317
316,318
319,320
319,321
319,322
319,323
319,324
319,325
319,326
319,327
320,321
322,323
324,325
327,328
327,329
328,329
328,330
331,332
333,334
335,336
337,338
339,340
340,341
340,342
341,342
343,344
345,346
346,347
348,349
349,350
349,351
350,351
352,353
354,355
355,356
355,357
356,357
358,359
358,360
360,361
361,362
361,363
361,364
362,363
364,365
366,367
368,369
369,370
371,372
372,373
372,374
373,374
373,375
374,375
377,378
378,379
378,380
378,381
379,380
379,381
380,381
382,383
384,385
385,386
386,387
386,388
387,388
389,390
391,392
392,393
393,394
393,395
394,395
394,396
397,398
397,399
397,400
397,401
397,402
398,399
400,401
402,403
405,406
405,407
406,407
408,409
410,411
-----nextToken-----
2,4,7,9,11,13,15,17,19,21,25,27,29,32,34,38,40,41,45,47,53,54,57,58,61,62,66,69,75,76,78,83,84,88,90,96,99,101,103,108,109,111,115,118,119,122,125,126,130,134,135,138,139,142,145,146,150,155,156,159,160,163,164,167,170,171,175,177,182,184,186,188,190,191,196,200,202,207,209,212,217,219,224,226,228,231,232,237,238,241,243,245,246,248,251,253,258,259,262,264,266,267,270,271,273,275,277,280,281,284,285,289,290,293,294,296,300,304,306,311,313,317,318,321,323,325,326,329,330,332,334,336,338,342,344,347,351,353,357,359,363,365,367,370,375,376,381,383,388,390,395,396,399,401,403,404,407,409,411
-----computeFrom-----
49,50
49,51
50,51
50,52
64,65
64,66
70,71
70,72
71,72
71,73
86,87
86,88
105,106
105,107
131,132
131,133
151,152
151,153
152,153
152,154
179,180
179,181
198,199
198,200
221,222
221,223
286,287
286,288
302,303
302,304
340,341
340,342
373,374
373,375
379,380
379,381
-----guardedBy-----
90,103
226,248
306,338
304,336
-----guardedByNegation-----
200,342
226,275
231,293
381,409
-----lastLexicalUse-----
226,275
-----jump-----
226,275
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int shaper_msg_send(pid_t dst_pid, unsigned int prio,    long double downrate, long double uprate) {  unsigned int error_count = 0;  int res;  struct shaper_msg *msg;  size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);  msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));  if (msg == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }  msg->mtype = dst_pid;  memcpy(msg->mtext, &prio, sizeof(unsigned int));  memcpy(msg->mtext + sizeof(unsigned int), &downrate, sizeof(long double));  memcpy(msg->mtext + sizeof(unsigned int) + sizeof(long double), &uprate,    sizeof(long double));  /* Remove any old messages in the queue for the destination PID.  This   * helps keep the queue clear and moving, more resistant to (inadvertent   * or not) DoS situations.   */  shaper_msg_clear(dst_pid);  while (msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT) < 0) {    pr_signals_handle();    if (errno != EAGAIN) {      free(msg);      return -1;    } else {      /* The EAGAIN error happens when there are too many bytes of messages       * on the queue.  Check to see what the current number of messages       * on the queue is, and log the error.       *       * If this error is hit too many times in a loop, we may need to give       * up permanently.  (XXX in the future, if one queue is too small for       * a busy daemon, look into a different queue allocation strategy.)       */      struct msqid_ds ds;      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }      error_count++;      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }    }  }  free(msg);  /* Send SIGUSR2 to the destination process, to let it know that it should   * check the queue for messages.   */  PRIVS_ROOT  res = kill(dst_pid, SIGUSR2);  PRIVS_RELINQUISH  if (res < 0) {    if (errno == ESRCH) {      shaper_msg_clear(dst_pid);    } else {      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));    }  }#if 0  /* Handle our own signal, if necessary. */  if (getpid() == dst_pid)    pr_signals_handle();#endif  return 0;}
static int
shaper_msg_send(pid_t dst_pid, unsigned int prio,    long double downrate, long double uprate)
shaper_msg_send
pid_t dst_pid
pid_t
pid_t
dst_pid
dst_pid
unsigned int prio
unsigned int
prio
prio
long double downrate
long double
downrate
downrate
long double uprate
long double
uprate
uprate
{  unsigned int error_count = 0;  int res;  struct shaper_msg *msg;  size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);  msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));  if (msg == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }  msg->mtype = dst_pid;  memcpy(msg->mtext, &prio, sizeof(unsigned int));  memcpy(msg->mtext + sizeof(unsigned int), &downrate, sizeof(long double));  memcpy(msg->mtext + sizeof(unsigned int) + sizeof(long double), &uprate,    sizeof(long double));  /* Remove any old messages in the queue for the destination PID.  This   * helps keep the queue clear and moving, more resistant to (inadvertent   * or not) DoS situations.   */  shaper_msg_clear(dst_pid);  while (msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT) < 0) {    pr_signals_handle();    if (errno != EAGAIN) {      free(msg);      return -1;    } else {      /* The EAGAIN error happens when there are too many bytes of messages       * on the queue.  Check to see what the current number of messages       * on the queue is, and log the error.       *       * If this error is hit too many times in a loop, we may need to give       * up permanently.  (XXX in the future, if one queue is too small for       * a busy daemon, look into a different queue allocation strategy.)       */      struct msqid_ds ds;      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }      error_count++;      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }    }  }  free(msg);  /* Send SIGUSR2 to the destination process, to let it know that it should   * check the queue for messages.   */  PRIVS_ROOT  res = kill(dst_pid, SIGUSR2);  PRIVS_RELINQUISH  if (res < 0) {    if (errno == ESRCH) {      shaper_msg_clear(dst_pid);    } else {      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));    }  }#if 0  /* Handle our own signal, if necessary. */  if (getpid() == dst_pid)    pr_signals_handle();#endif  return 0;}
unsigned int error_count = 0;
unsigned int error_count = 0;
unsigned int
error_count = 0
error_count
= 0
0
int res;
int res;
int
res
res
struct shaper_msg *msg;
struct shaper_msg *msg;
struct shaper_msg
shaper_msg
*msg
*
msg
size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);
size_t msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double);
size_t
size_t
msgsz = sizeof(unsigned int) + sizeof(long double) +    sizeof(long double)
msgsz
= sizeof(unsigned int) + sizeof(long double) +    sizeof(long double)
sizeof(unsigned int) + sizeof(long double) +    sizeof(long double)
sizeof(unsigned int) + sizeof(long double)
sizeof(unsigned int)
unsigned int
unsigned int

sizeof(long double)
long double
long double

sizeof(long double)
long double
long double

msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext));
msg = malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext))
msg
msg
malloc(sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext))
malloc
malloc
sizeof(struct shaper_msg) + msgsz - sizeof(msg->mtext)
sizeof(struct shaper_msg) + msgsz
sizeof(struct shaper_msg)
struct shaper_msg
struct shaper_msg
shaper_msg

msgsz
msgsz
sizeof(msg->mtext)
(msg->mtext)
msg->mtext
msg
msg
mtext
if (msg == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }
msg == NULL
msg
msg
NULL
NULL
{    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");    pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SHAPER_VERSION ": Out of memory!");
pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL);
pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL)
pr_session_disconnect
pr_session_disconnect
&shaper_module
shaper_module
shaper_module
PR_SESS_DISCONNECT_NOMEM
PR_SESS_DISCONNECT_NOMEM
NULL
NULL
msg->mtype = dst_pid;
msg->mtype = dst_pid
msg->mtype
msg
msg
mtype
dst_pid
dst_pid
memcpy(msg->mtext, &prio, sizeof(unsigned int));
memcpy(msg->mtext, &prio, sizeof(unsigned int))
memcpy
memcpy
msg->mtext
msg
msg
mtext
&prio
prio
prio
sizeof(unsigned int)
unsigned int
unsigned int

memcpy(msg->mtext + sizeof(unsigned int), &downrate, sizeof(long double));
memcpy(msg->mtext + sizeof(unsigned int), &downrate, sizeof(long double))
memcpy
memcpy
msg->mtext + sizeof(unsigned int)
msg->mtext
msg
msg
mtext
sizeof(unsigned int)
unsigned int
unsigned int

&downrate
downrate
downrate
sizeof(long double)
long double
long double

memcpy(msg->mtext + sizeof(unsigned int) + sizeof(long double), &uprate,    sizeof(long double));
memcpy(msg->mtext + sizeof(unsigned int) + sizeof(long double), &uprate,    sizeof(long double))
memcpy
memcpy
msg->mtext + sizeof(unsigned int) + sizeof(long double)
msg->mtext + sizeof(unsigned int)
msg->mtext
msg
msg
mtext
sizeof(unsigned int)
unsigned int
unsigned int

sizeof(long double)
long double
long double

&uprate
uprate
uprate
sizeof(long double)
long double
long double

shaper_msg_clear(dst_pid);
shaper_msg_clear(dst_pid)
shaper_msg_clear
shaper_msg_clear
dst_pid
dst_pid
while (msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT) < 0) {    pr_signals_handle();    if (errno != EAGAIN) {      free(msg);      return -1;    } else {      /* The EAGAIN error happens when there are too many bytes of messages       * on the queue.  Check to see what the current number of messages       * on the queue is, and log the error.       *       * If this error is hit too many times in a loop, we may need to give       * up permanently.  (XXX in the future, if one queue is too small for       * a busy daemon, look into a different queue allocation strategy.)       */      struct msqid_ds ds;      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }      error_count++;      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }    }  }
msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT) < 0
msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT)
msgsnd
msgsnd
shaper_qid
shaper_qid
msg
msg
msgsz
msgsz
IPC_NOWAIT
IPC_NOWAIT
0
{    pr_signals_handle();    if (errno != EAGAIN) {      free(msg);      return -1;    } else {      /* The EAGAIN error happens when there are too many bytes of messages       * on the queue.  Check to see what the current number of messages       * on the queue is, and log the error.       *       * If this error is hit too many times in a loop, we may need to give       * up permanently.  (XXX in the future, if one queue is too small for       * a busy daemon, look into a different queue allocation strategy.)       */      struct msqid_ds ds;      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }      error_count++;      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }    }  }
pr_signals_handle();
pr_signals_handle()
pr_signals_handle
pr_signals_handle
if (errno != EAGAIN) {      free(msg);      return -1;    } else {      /* The EAGAIN error happens when there are too many bytes of messages       * on the queue.  Check to see what the current number of messages       * on the queue is, and log the error.       *       * If this error is hit too many times in a loop, we may need to give       * up permanently.  (XXX in the future, if one queue is too small for       * a busy daemon, look into a different queue allocation strategy.)       */      struct msqid_ds ds;      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }      error_count++;      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }    }
errno != EAGAIN
errno
errno
EAGAIN
EAGAIN
{      free(msg);      return -1;    }
free(msg);
free(msg)
free
free
msg
msg
return -1;
-1
1
{      /* The EAGAIN error happens when there are too many bytes of messages       * on the queue.  Check to see what the current number of messages       * on the queue is, and log the error.       *       * If this error is hit too many times in a loop, we may need to give       * up permanently.  (XXX in the future, if one queue is too small for       * a busy daemon, look into a different queue allocation strategy.)       */      struct msqid_ds ds;      if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }      error_count++;      if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }    }
struct msqid_ds ds;
struct msqid_ds ds;
struct msqid_ds
msqid_ds
ds
ds
if (msgctl(shaper_qid, IPC_STAT, &ds) < 0) {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      } else {        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }
msgctl(shaper_qid, IPC_STAT, &ds) < 0
msgctl(shaper_qid, IPC_STAT, &ds)
msgctl
msgctl
shaper_qid
shaper_qid
IPC_STAT
IPC_STAT
&ds
ds
ds
0
{        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));      }
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno));
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno))
void
void

pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "error checking queue ID %d: %s", shaper_qid, strerror(errno))
pr_log_writefile
pr_log_writefile
shaper_logfd
shaper_logfd
MOD_SHAPER_VERSION
MOD_SHAPER_VERSION
"error checking queue ID %d: %s"
shaper_qid
shaper_qid
strerror(errno)
strerror
strerror
errno
errno
{        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);      }
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz);
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz)
void
void

pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)",          (unsigned long) dst_pid, shaper_qid, shaper_qmaxbytes,          (unsigned long) ds.msg_qnum, (unsigned long) ds.msg_qnum * msgsz)
pr_log_writefile
pr_log_writefile
shaper_logfd
shaper_logfd
MOD_SHAPER_VERSION
MOD_SHAPER_VERSION
"unable to send message to PID %lu via queue ID %d, max bytes (%lu) "          "reached (%lu messages of %lu bytes currently in queue)"
(unsigned long) dst_pid
unsigned long
unsigned long

dst_pid
dst_pid
shaper_qid
shaper_qid
shaper_qmaxbytes
shaper_qmaxbytes
(unsigned long) ds.msg_qnum
unsigned long
unsigned long

ds.msg_qnum
ds
ds
msg_qnum
(unsigned long) ds.msg_qnum * msgsz
(unsigned long) ds.msg_qnum
unsigned long
unsigned long

ds.msg_qnum
ds
ds
msg_qnum
msgsz
msgsz
error_count++;
error_count++
error_count
error_count
if (error_count > SHAPER_MAX_SEND_ATTEMPTS) {        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }
error_count > SHAPER_MAX_SEND_ATTEMPTS
error_count
error_count
SHAPER_MAX_SEND_ATTEMPTS
SHAPER_MAX_SEND_ATTEMPTS
{        free(msg);        (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);        errno = EPERM;        return -1;      }
free(msg);
free(msg)
free
free
msg
msg
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS);
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS)
void
void

pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,          "unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing", (unsigned long) dst_pid,          shaper_qid, error_count, SHAPER_MAX_SEND_ATTEMPTS)
pr_log_writefile
pr_log_writefile
shaper_logfd
shaper_logfd
MOD_SHAPER_VERSION
MOD_SHAPER_VERSION
"unable to send message to PID %lu via queue ID %d after %u attempts "          "(%u max attempts allowed), failing"
(unsigned long) dst_pid
unsigned long
unsigned long

dst_pid
dst_pid
shaper_qid
shaper_qid
error_count
error_count
SHAPER_MAX_SEND_ATTEMPTS
SHAPER_MAX_SEND_ATTEMPTS
errno = EPERM;
errno = EPERM
errno
errno
EPERM
EPERM
return -1;
-1
1
free(msg);
free(msg)
free
free
msg
msg
PRIVS_ROOT  res = kill(dst_pid, SIGUSR2);
PRIVS_ROOT  res = kill(dst_pid, SIGUSR2);
PRIVS_ROOT
PRIVS_ROOT
res = kill(dst_pid, SIGUSR2)
res
= kill(dst_pid, SIGUSR2)
kill(dst_pid, SIGUSR2)
kill
kill
dst_pid
dst_pid
SIGUSR2
SIGUSR2
PRIVS_RELINQUISH
PRIVS_RELINQUISH
PRIVS_RELINQUISH
H
if (res < 0) {    if (errno == ESRCH) {      shaper_msg_clear(dst_pid);    } else {      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));    }  }
res < 0
res
res
0
{    if (errno == ESRCH) {      shaper_msg_clear(dst_pid);    } else {      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));    }  }
if (errno == ESRCH) {      shaper_msg_clear(dst_pid);    } else {      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));    }
errno == ESRCH
errno
errno
ESRCH
ESRCH
{      shaper_msg_clear(dst_pid);    }
shaper_msg_clear(dst_pid);
shaper_msg_clear(dst_pid)
shaper_msg_clear
shaper_msg_clear
dst_pid
dst_pid
{      (void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));    }
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno));
(void) pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno))
void
void

pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,        "error sending notice: %s", strerror(errno))
pr_log_writefile
pr_log_writefile
shaper_logfd
shaper_logfd
MOD_SHAPER_VERSION
MOD_SHAPER_VERSION
"error sending notice: %s"
strerror(errno)
strerror
strerror
errno
errno
return 0;
0
-----joern-----
(137,95,0)
(51,10,0)
(195,104,0)
(198,190,0)
(140,185,0)
(119,178,0)
(178,33,0)
(178,119,0)
(86,24,0)
(22,209,0)
(124,69,0)
(77,99,0)
(32,80,0)
(27,97,0)
(56,24,0)
(149,67,0)
(4,110,0)
(143,19,0)
(24,152,0)
(148,66,0)
(204,71,0)
(39,206,0)
(11,128,0)
(48,185,0)
(114,9,0)
(25,67,0)
(21,204,0)
(72,94,0)
(189,75,0)
(87,93,0)
(159,31,0)
(194,22,0)
(118,89,0)
(24,40,0)
(183,169,0)
(5,185,0)
(14,74,0)
(39,79,0)
(201,79,0)
(45,202,0)
(47,80,0)
(83,150,0)
(73,136,0)
(118,154,0)
(59,150,0)
(125,33,0)
(173,206,0)
(175,185,0)
(189,67,0)
(115,31,0)
(2,23,0)
(150,128,0)
(166,185,0)
(42,150,0)
(10,128,0)
(208,54,0)
(113,141,0)
(133,31,0)
(152,24,0)
(175,117,0)
(167,110,0)
(178,148,0)
(89,34,0)
(82,40,0)
(41,152,0)
(37,111,0)
(162,175,0)
(148,178,0)
(44,80,0)
(53,141,0)
(184,31,0)
(27,67,0)
(21,128,0)
(130,15,0)
(160,169,0)
(211,108,0)
(64,200,0)
(145,133,0)
(52,189,0)
(146,185,0)
(97,27,0)
(187,9,0)
(34,89,0)
(102,185,0)
(17,87,0)
(74,14,0)
(60,143,0)
(163,197,0)
(63,27,0)
(195,85,0)
(151,157,0)
(9,107,0)
(65,12,0)
(75,189,0)
(158,185,0)
(105,96,0)
(180,183,0)
(111,204,0)
(93,139,0)
(108,128,0)
(26,25,0)
(117,175,0)
(80,32,0)
(7,169,0)
(89,162,0)
(66,29,0)
(68,19,0)
(14,165,0)
(189,52,0)
(188,31,0)
(178,185,0)
(205,190,0)
(121,80,0)
(200,64,0)
(146,67,0)
(50,102,0)
(171,50,0)
(104,13,0)
(71,204,0)
(131,75,0)
(15,58,0)
(40,24,0)
(144,65,0)
(127,102,0)
(133,67,0)
(182,13,0)
(10,12,0)
(11,148,0)
(85,174,0)
(207,11,0)
(65,75,0)
(43,172,0)
(104,174,0)
(139,123,0)
(134,133,0)
(29,66,0)
(162,107,0)
(204,21,0)
(28,175,0)
(135,141,0)
(0,1,0)
(20,183,0)
(169,183,0)
(147,75,0)
(142,75,0)
(124,15,0)
(25,185,0)
(91,135,0)
(81,75,0)
(108,38,0)
(89,118,0)
(208,67,0)
(199,201,0)
(95,174,0)
(160,31,0)
(55,80,0)
(128,185,0)
(90,124,0)
(179,189,0)
(93,117,0)
(196,157,0)
(150,175,0)
(110,128,0)
(136,73,0)
(149,181,0)
(71,193,0)
(22,79,0)
(46,208,0)
(31,133,0)
(123,139,0)
(80,47,0)
(49,172,0)
(79,185,0)
(106,162,0)
(126,75,0)
(133,134,0)
(155,47,0)
(148,11,0)
(57,50,0)
(190,97,0)
(79,39,0)
(65,144,0)
(107,162,0)
(14,31,0)
(31,14,0)
(79,201,0)
(181,149,0)
(176,13,0)
(13,12,0)
(73,206,0)
(197,117,0)
(6,174,0)
(19,120,0)
(39,110,0)
(139,93,0)
(18,185,0)
(117,93,0)
(66,148,0)
(33,178,0)
(195,95,0)
(165,14,0)
(161,160,0)
(162,89,0)
(135,102,0)
(206,73,0)
(119,8,0)
(79,22,0)
(191,141,0)
(97,185,0)
(204,185,0)
(206,39,0)
(92,96,0)
(206,173,0)
(33,70,0)
(85,185,0)
(169,160,0)
(111,30,0)
(87,17,0)
(36,174,0)
(107,9,0)
(95,38,0)
(15,124,0)
(84,173,0)
(75,65,0)
(128,34,0)
(112,99,0)
(177,21,0)
(132,69,0)
(122,137,0)
(154,118,0)
(174,128,0)
(200,31,0)
(32,103,0)
(31,200,0)
(168,31,0)
(117,197,0)
(19,143,0)
(109,124,0)
(186,32,0)
(170,128,0)
(32,186,0)
(69,124,0)
(157,128,0)
(156,21,0)
(78,149,0)
(100,80,0)
(110,39,0)
(61,102,0)
(160,175,0)
(138,185,0)
(35,146,0)
(31,160,0)
(116,97,0)
(200,129,0)
(210,11,0)
(104,12,0)
(75,102,0)
(1,104,0)
(93,87,0)
(101,85,0)
(76,27,0)
(201,199,0)
(203,185,0)
(8,119,0)
(3,74,0)
(153,124,0)
(197,163,0)
(173,84,0)
(88,185,0)
(193,71,0)
(23,150,0)
(150,23,0)
(202,128,0)
(174,146,0)
(192,19,0)
(98,74,0)
(204,111,0)
(62,150,0)
(169,7,0)
(164,75,0)
(15,130,0)
(34,128,0)
(202,185,0)
(19,143,1)
(28,102,1)
(143,60,1)
(4,178,1)
(25,67,1)
(126,164,1)
(66,29,1)
(104,174,1)
(85,101,1)
(32,186,1)
(66,11,1)
(157,151,1)
(107,9,1)
(10,51,1)
(93,139,1)
(128,34,1)
(118,170,1)
(92,43,1)
(101,16,1)
(171,135,1)
(19,68,1)
(156,177,1)
(181,208,1)
(160,161,1)
(164,189,1)
(40,82,1)
(55,121,1)
(202,128,1)
(15,124,1)
(160,175,1)
(46,99,1)
(146,67,1)
(179,131,1)
(89,118,1)
(135,91,1)
(124,69,1)
(197,28,1)
(79,22,1)
(41,24,1)
(118,154,1)
(190,97,1)
(23,150,1)
(173,84,1)
(202,45,1)
(200,64,1)
(149,67,1)
(98,3,1)
(81,142,1)
(111,30,1)
(111,37,1)
(178,33,1)
(137,122,1)
(95,137,1)
(181,190,1)
(97,27,1)
(206,173,1)
(79,39,1)
(77,112,1)
(43,23,1)
(25,26,1)
(78,181,1)
(109,99,1)
(60,157,1)
(119,8,1)
(76,63,1)
(101,149,1)
(112,190,1)
(26,79,1)
(204,111,1)
(36,6,1)
(73,173,1)
(145,168,1)
(169,183,1)
(99,77,1)
(178,148,1)
(148,11,1)
(75,147,1)
(182,176,1)
(204,21,1)
(187,114,1)
(122,108,1)
(32,80,1)
(15,130,1)
(44,152,1)
(174,36,1)
(133,134,1)
(20,14,1)
(208,46,1)
(192,143,1)
(157,128,1)
(178,119,1)
(194,39,1)
(6,19,1)
(16,149,1)
(116,202,1)
(153,109,1)
(139,123,1)
(63,116,1)
(91,200,1)
(91,32,1)
(155,100,1)
(33,70,1)
(79,201,1)
(176,65,1)
(65,144,1)
(93,87,1)
(87,17,1)
(180,20,1)
(110,167,1)
(195,104,1)
(146,35,1)
(162,107,1)
(0,13,1)
(200,31,1)
(131,81,1)
(74,98,1)
(183,180,1)
(142,10,1)
(9,187,1)
(89,162,1)
(189,52,1)
(100,55,1)
(173,110,1)
(80,47,1)
(57,171,1)
(162,175,1)
(208,67,1)
(190,198,1)
(68,192,1)
(159,133,1)
(71,111,1)
(197,163,1)
(87,139,1)
(211,96,1)
(61,127,1)
(189,179,1)
(51,50,1)
(106,118,1)
(82,86,1)
(31,133,1)
(50,57,1)
(11,128,1)
(83,42,1)
(139,197,1)
(205,97,1)
(13,182,1)
(132,90,1)
(115,188,1)
(34,89,1)
(210,207,1)
(96,105,1)
(198,205,1)
(147,126,1)
(167,4,1)
(11,210,1)
(152,24,1)
(196,128,1)
(206,73,1)
(73,136,1)
(148,66,1)
(39,206,1)
(1,0,1)
(110,128,1)
(2,150,1)
(75,189,1)
(35,174,1)
(150,128,1)
(204,71,1)
(189,67,1)
(184,159,1)
(14,165,1)
(201,199,1)
(195,85,1)
(24,40,1)
(10,128,1)
(47,155,1)
(21,156,1)
(170,175,1)
(108,128,1)
(160,169,1)
(14,74,1)
(104,13,1)
(152,41,1)
(125,148,1)
(133,67,1)
(104,1,1)
(59,25,1)
(22,209,1)
(31,14,1)
(121,44,1)
(62,59,1)
(85,174,1)
(59,50,1)
(86,56,1)
(177,146,1)
(161,169,1)
(207,204,1)
(27,67,1)
(114,106,1)
(195,95,1)
(31,160,1)
(175,117,1)
(90,153,1)
(21,128,1)
(201,22,1)
(149,78,1)
(117,93,1)
(3,184,1)
(133,145,1)
(65,75,1)
(45,23,1)
(119,33,1)
(39,110,1)
(102,61,1)
(42,62,1)
(151,196,1)
(22,194,1)
(50,102,1)
(23,2,1)
(117,197,1)
(37,21,1)
(95,174,1)
(135,102,1)
(168,115,1)
(69,132,1)
(181,15,1)
(56,96,1)
(188,152,1)
(169,7,1)
(149,181,1)
(150,175,1)
(27,76,1)
(6,157,1)
(108,211,1)
(150,83,1)
(105,92,1)
(75,102,1)
(174,128,1)
(71,193,1)
(33,125,1)
(46,99,2)
(204,71,2)
(195,104,2)
(79,39,2)
(19,157,2)
(173,84,2)
(91,96,2)
(77,190,2)
(128,34,2)
(39,110,2)
(85,174,2)
(42,50,2)
(24,40,2)
(51,50,2)
(11,128,2)
(111,30,2)
(93,87,2)
(206,173,2)
(25,67,2)
(117,197,2)
(108,128,2)
(75,102,2)
(98,152,2)
(149,23,2)
(181,23,2)
(160,152,2)
(150,175,2)
(96,23,2)
(79,201,2)
(68,157,2)
(107,9,2)
(89,162,2)
(92,23,2)
(147,50,2)
(10,50,2)
(169,7,2)
(100,152,2)
(182,50,2)
(97,27,2)
(157,128,2)
(24,96,2)
(41,96,2)
(178,33,2)
(189,67,2)
(15,130,2)
(16,149,2)
(14,165,2)
(43,23,2)
(15,99,2)
(89,118,2)
(168,152,2)
(145,152,2)
(124,99,2)
(178,119,2)
(73,136,2)
(31,152,2)
(159,152,2)
(23,150,2)
(32,80,2)
(39,206,2)
(201,199,2)
(202,23,2)
(69,99,2)
(15,124,2)
(108,96,2)
(200,31,2)
(31,133,2)
(146,67,2)
(32,152,2)
(99,190,2)
(122,96,2)
(27,23,2)
(119,8,2)
(162,175,2)
(204,111,2)
(104,50,2)
(197,163,2)
(117,93,2)
(10,128,2)
(135,96,2)
(74,152,2)
(132,99,2)
(190,97,2)
(85,23,2)
(184,152,2)
(20,152,2)
(135,102,2)
(79,22,2)
(21,128,2)
(71,193,2)
(31,160,2)
(75,189,2)
(93,139,2)
(0,50,2)
(162,107,2)
(206,73,2)
(205,23,2)
(115,152,2)
(164,50,2)
(131,50,2)
(22,209,2)
(192,157,2)
(44,152,2)
(121,152,2)
(180,152,2)
(60,157,2)
(56,96,2)
(14,152,2)
(19,143,2)
(118,154,2)
(109,99,2)
(161,152,2)
(80,47,2)
(124,69,2)
(3,152,2)
(86,96,2)
(95,96,2)
(97,23,2)
(1,50,2)
(110,128,2)
(65,50,2)
(160,175,2)
(62,50,2)
(40,96,2)
(202,128,2)
(183,152,2)
(169,152,2)
(87,17,2)
(14,74,2)
(104,174,2)
(45,23,2)
(133,67,2)
(152,24,2)
(150,50,2)
(78,23,2)
(65,75,2)
(126,50,2)
(175,117,2)
(66,29,2)
(33,70,2)
(81,50,2)
(148,11,2)
(57,96,2)
(13,50,2)
(59,50,2)
(169,183,2)
(139,123,2)
(82,96,2)
(190,23,2)
(32,186,2)
(149,181,2)
(148,66,2)
(90,99,2)
(152,96,2)
(133,152,2)
(104,13,2)
(101,23,2)
(208,99,2)
(105,23,2)
(188,152,2)
(150,128,2)
(149,67,2)
(47,152,2)
(2,50,2)
(208,67,2)
(171,96,2)
(50,102,2)
(133,134,2)
(189,50,2)
(200,64,2)
(137,96,2)
(200,152,2)
(63,23,2)
(204,21,2)
(34,89,2)
(116,23,2)
(83,50,2)
(142,50,2)
(189,52,2)
(155,152,2)
(195,85,2)
(143,157,2)
(179,50,2)
(112,190,2)
(160,169,2)
(75,50,2)
(95,174,2)
(195,95,2)
(198,23,2)
(31,14,2)
(50,96,2)
(65,144,2)
(76,23,2)
(27,67,2)
(80,152,2)
(178,148,2)
(174,128,2)
(23,50,2)
(153,99,2)
(176,50,2)
(55,152,2)
(211,96,2)
-----------------------------------
(0,1)
(1,-1)
(2,0)
(3,ds)
(4,msg)
(5,while (msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT)
(6,msg)
(7,unsigned long)
(8,long double)
(9,msg->mtext)
(10,free(msg)
(11,msg->mtext)
(12,)
(13,errno = EPERM)
(14,(unsigned long)
(15,(void)
(16,pr_signals_handle()
(17,long double)
(18,msgsz)
(19,pr_session_disconnect(&shaper_module, PR_SESS_DISCONNECT_NOMEM, NULL)
(20,ds)
(21,msg->mtext)
(22,&uprate)
(23,msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT)
(24,msgctl(shaper_qid, IPC_STAT, &ds)
(25,shaper_msg_clear(dst_pid)
(26,dst_pid)
(27,kill(dst_pid, SIGUSR2)
(28,msgsz)
(29,unsigned int)
(30,unsigned int prio)
(31,pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,\n\\n          "unable to send message to PID %lu via queue ID %d, max bytes (%lu)
(32,(void)
(33,&downrate)
(34,malloc(sizeof(struct shaper_msg)
(35,dst_pid)
(36,mtype)
(37,prio)
(38,)
(39,msg->mtext + sizeof(unsigned int)
(40,&ds)
(41,0)
(42,msgsz)
(43,pr_signals_handle()
(44,shaper_logfd)
(45,msg)
(46,dst_pid)
(47,strerror(errno)
(48,res)
(49,if (errno != EAGAIN)
(50,error_count > SHAPER_MAX_SEND_ATTEMPTS)
(51,msg)
(52,unsigned long)
(53,if (error_count > SHAPER_MAX_SEND_ATTEMPTS)
(54,)
(55,"error checking queue ID %d: %s")
(56,shaper_qid)
(57,SHAPER_MAX_SEND_ATTEMPTS)
(58,)
(59,shaper_qid)
(60,shaper_module)
(61,0)
(62,msg)
(63,dst_pid)
(64,void)
(65,(void)
(66,sizeof(unsigned int)
(67,pid_t dst_pid)
(68,NULL)
(69,strerror(errno)
(70,long double downrate)
(71,sizeof(unsigned int)
(72,if (errno == ESRCH)
(73,sizeof(long double)
(74,ds.msg_qnum)
(75,pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,\n\\n          "unable to send message to PID %lu via queue ID %d after %u attempts "\n\\n          "(%u max attempts allowed)
(76,SIGUSR2)
(77,ESRCH)
(78,dst_pid)
(79,memcpy(msg->mtext + sizeof(unsigned int)
(80,pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,\n\\n          "error checking queue ID %d: %s", shaper_qid, strerror(errno)
(81,MOD_SHAPER_VERSION)
(82,ds)
(83,IPC_NOWAIT)
(84,unsigned int)
(85,return 0;)
(86,IPC_STAT)
(87,sizeof(long double)
(88,msg)
(89,sizeof(struct shaper_msg)
(90,"error sending notice: %s")
(91,error_count)
(92,errno)
(93,sizeof(long double)
(94,)
(95,return -1;)
(96,errno != EAGAIN)
(97,res = kill(dst_pid, SIGUSR2)
(98,msg_qnum)
(99,errno == ESRCH)
(100,shaper_qid)
(101,0)
(102,error_count = 0)
(103,)
(104,return -1;)
(105,EAGAIN)
(106,msgsz)
(107,sizeof(msg->mtext)
(108,free(msg)
(109,shaper_logfd)
(110,msg->mtext)
(111,&prio)
(112,errno)
(113,ds)
(114,msg)
(115,MOD_SHAPER_VERSION)
(116,res)
(117,sizeof(unsigned int)
(118,sizeof(struct shaper_msg)
(119,sizeof(long double)
(120,)
(121,MOD_SHAPER_VERSION)
(122,1)
(123,long double)
(124,pr_log_writefile(shaper_logfd, MOD_SHAPER_VERSION,\n\\n        "error sending notice: %s", strerror(errno)
(125,downrate)
(126,error_count)
(127,error_count)
(128,msg = malloc(sizeof(struct shaper_msg)
(129,)
(130,void)
(131,"unable to send message to PID %lu via queue ID %d after %u attempts "\n\\n          "(%u max attempts allowed)
(132,errno)
(133,(unsigned long)
(134,unsigned long)
(135,error_count++)
(136,long double)
(137,-1)
(138,if (res < 0)
(139,sizeof(long double)
(140,if (getpid()
(141,)
(142,shaper_logfd)
(143,&shaper_module)
(144,void)
(145,dst_pid)
(146,msg->mtype = dst_pid)
(147,SHAPER_MAX_SEND_ATTEMPTS)
(148,msg->mtext + sizeof(unsigned int)
(149,getpid()
(150,msgsnd(shaper_qid, msg, msgsz, IPC_NOWAIT)
(151,NULL)
(152,msgctl(shaper_qid, IPC_STAT, &ds)
(153,MOD_SHAPER_VERSION)
(154,struct shaper_msg)
(155,errno)
(156,mtext)
(157,msg == NULL)
(158,res)
(159,shaper_qid)
(160,(unsigned long)
(161,msgsz)
(162,msgsz - sizeof(msg->mtext)
(163,unsigned int)
(164,shaper_qid)
(165,unsigned long)
(166,error_count)
(167,mtext)
(168,"unable to send message to PID %lu via queue ID %d, max bytes (%lu)
(169,(unsigned long)
(170,msg)
(171,error_count)
(172,)
(173,sizeof(unsigned int)
(174,msg->mtype)
(175,msgsz = sizeof(unsigned int)
(176,errno)
(177,msg)
(178,memcpy(msg->mtext + sizeof(unsigned int)
(179,dst_pid)
(180,msg_qnum)
(181,getpid()
(182,EPERM)
(183,ds.msg_qnum)
(184,shaper_qmaxbytes)
(185,)
(186,void)
(187,mtext)
(188,shaper_logfd)
(189,(unsigned long)
(190,res < 0)
(191,if (msgctl(shaper_qid, IPC_STAT, &ds)
(192,PR_SESS_DISCONNECT_NOMEM)
(193,unsigned int)
(194,uprate)
(195,RET)
(196,msg)
(197,sizeof(unsigned int)
(198,0)
(199,long double)
(200,(void)
(201,sizeof(long double)
(202,free(msg)
(203,if (msg == NULL)
(204,memcpy(msg->mtext, &prio, sizeof(unsigned int)
(205,res)
(206,sizeof(unsigned int)
(207,msg)
(208,shaper_msg_clear(dst_pid)
(209,long double uprate)
(210,mtext)
(211,msg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^