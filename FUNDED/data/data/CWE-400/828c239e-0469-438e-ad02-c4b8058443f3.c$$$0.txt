-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
55,57
56,57
57,58
59,60
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
69,70
71,72
71,73
71,74
71,75
71,76
71,77
71,78
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
90,91
91,92
91,93
93,94
93,95
93,96
96,97
98,99
99,100
99,101
100,101
102,103
102,104
102,105
103,104
105,106
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
120,121
120,122
120,123
120,124
121,122
122,123
122,124
123,124
126,127
126,128
127,128
129,130
129,131
130,131
130,132
131,132
134,135
136,137
137,138
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
153,154
153,155
156,157
156,158
157,158
159,160
161,162
163,164
164,165
165,166
165,167
166,167
169,170
169,171
170,171
172,173
173,174
174,175
174,176
175,176
177,178
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,53,58,60,64,66,70,75,77,79,83,85,86,89,92,94,95,97,101,104,106,107,111,113,118,119,124,125,128,132,133,135,138,144,146,149,151,154,155,158,160,162,167,168,171,176,178
-----computeFrom-----
32,33
32,34
48,49
48,50
55,56
55,57
99,100
99,101
109,110
109,111
122,123
122,124
126,127
126,128
141,142
141,143
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_32_bad()
CWE400_Resource_Exhaustion__rand_fwrite_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(24,84,0)
(29,37,0)
(49,83,0)
(62,56,0)
(78,37,0)
(57,22,0)
(39,69,0)
(56,62,0)
(71,79,0)
(85,12,0)
(31,78,0)
(4,52,0)
(75,69,0)
(1,42,0)
(44,9,0)
(50,52,0)
(9,11,0)
(23,56,0)
(78,73,0)
(35,62,0)
(32,69,0)
(63,70,0)
(18,23,0)
(56,52,0)
(66,56,0)
(88,52,0)
(27,78,0)
(37,29,0)
(72,50,0)
(81,52,0)
(84,8,0)
(72,23,0)
(40,73,0)
(80,50,0)
(12,72,0)
(69,50,0)
(28,32,0)
(21,83,0)
(47,49,0)
(91,75,0)
(14,4,0)
(25,47,0)
(15,6,0)
(12,90,0)
(11,52,0)
(34,86,0)
(2,69,0)
(77,31,0)
(90,48,0)
(60,15,0)
(78,19,0)
(87,48,0)
(22,19,0)
(76,90,0)
(74,11,0)
(38,69,0)
(79,9,0)
(26,48,0)
(37,69,0)
(36,0,0)
(83,49,0)
(78,31,0)
(46,32,0)
(33,29,0)
(84,37,0)
(67,10,0)
(9,61,0)
(3,36,0)
(86,69,0)
(59,78,0)
(41,52,0)
(70,16,0)
(30,58,0)
(13,58,0)
(61,9,0)
(90,12,0)
(23,72,0)
(47,79,0)
(0,36,0)
(68,72,0)
(20,14,0)
(17,69,0)
(42,48,0)
(58,37,0)
(0,11,0)
(73,78,0)
(54,29,0)
(89,69,0)
(49,52,0)
(64,37,0)
(19,78,0)
(79,11,0)
(4,14,0)
(19,22,0)
(51,69,0)
(65,49,0)
(36,49,0)
(29,32,0)
(55,0,0)
(43,12,0)
(82,75,0)
(5,4,0)
(12,43,0)
(7,86,0)
(83,21,1)
(3,55,1)
(72,23,1)
(53,84,1)
(36,3,1)
(1,19,1)
(15,60,1)
(46,28,1)
(12,85,1)
(25,9,1)
(7,72,1)
(5,56,1)
(37,29,1)
(78,31,1)
(60,58,1)
(12,43,1)
(77,27,1)
(64,32,1)
(55,4,1)
(56,62,1)
(4,14,1)
(48,26,1)
(86,34,1)
(29,54,1)
(91,86,1)
(28,75,1)
(19,78,1)
(68,79,1)
(59,73,1)
(87,15,1)
(76,48,1)
(22,57,1)
(58,13,1)
(13,30,1)
(79,9,1)
(71,47,1)
(12,72,1)
(54,33,1)
(78,59,1)
(40,31,1)
(34,7,1)
(20,5,1)
(0,36,1)
(58,37,1)
(87,58,1)
(24,45,1)
(82,91,1)
(1,70,1)
(23,56,1)
(62,35,1)
(84,24,1)
(31,77,1)
(79,71,1)
(26,87,1)
(66,49,1)
(14,20,1)
(45,90,1)
(75,82,1)
(19,22,1)
(23,18,1)
(70,63,1)
(42,48,1)
(9,61,1)
(57,90,1)
(53,45,1)
(76,42,1)
(44,0,1)
(78,73,1)
(47,25,1)
(78,37,1)
(73,40,1)
(21,65,1)
(49,83,1)
(18,68,1)
(29,32,1)
(61,44,1)
(85,76,1)
(90,48,1)
(27,22,1)
(42,1,1)
(84,37,1)
(63,19,1)
(47,49,1)
(30,37,1)
(36,49,1)
(33,64,1)
(35,66,1)
(32,46,1)
(90,12,1)
(12,43,2)
(90,90,2)
(77,90,2)
(12,90,2)
(42,90,2)
(9,61,2)
(23,56,2)
(78,31,2)
(76,90,2)
(19,78,2)
(27,90,2)
(29,32,2)
(4,14,2)
(49,83,2)
(84,45,2)
(19,22,2)
(56,62,2)
(90,12,2)
(79,9,2)
(37,29,2)
(47,49,2)
(42,48,2)
(57,90,2)
(78,37,2)
(31,90,2)
(63,19,2)
(24,45,2)
(85,90,2)
(0,36,2)
(1,90,2)
(36,49,2)
(78,73,2)
(19,90,2)
(72,23,2)
(58,37,2)
(12,72,2)
(22,90,2)
(60,58,2)
(73,90,2)
(90,48,2)
(70,19,2)
(40,90,2)
(15,58,2)
(84,37,2)
(59,90,2)
(78,90,2)
-----------------------------------
(0,count = *countPtr1)
(1,i)
(2,i)
(3,countPtr1)
(4,count = -1)
(5,count)
(6,)
(7,i)
(8,)
(9,count = RAND32()
(10,)
(11,)
(12,(size_t)
(13,NULL)
(14,-1)
(15,exit(1)
(16,)
(17,for (i = 0; i < (size_t)
(18,countPtr2)
(19,strlen(SENTENCE)
(20,1)
(21,count)
(22,strlen(SENTENCE)
(23,*countPtr2)
(24,pFile)
(25,countPtr1)
(26,0)
(27,SENTENCE)
(28,filename)
(29,fopen(filename, "w+")
(30,pFile)
(31,sizeof(char)
(32,*filename = "output_bad.txt")
(33,filename)
(34,0)
(35,count)
(36,*countPtr1)
(37,pFile = fopen(filename, "w+")
(38,pFile)
(39,if (pFile)
(40,SENTENCE)
(41,countPtr2)
(42,i++)
(43,size_t)
(44,count)
(45,pFile)
(46,"output_bad.txt")
(47,*countPtr1)
(48,i = 0)
(49,*countPtr1 = &count)
(50,)
(51,if (pFile == NULL)
(52,)
(53,RET)
(54,"w+")
(55,count)
(56,*countPtr2 = &count)
(57,SENTENCE)
(58,pFile == NULL)
(59,pFile)
(60,1)
(61,RAND32()
(62,&count)
(63,1)
(64,pFile)
(65,countPtr1)
(66,countPtr2)
(67,if (strlen(SENTENCE)
(68,count)
(69,)
(70,exit(1)
(71,count)
(72,count = *countPtr2)
(73,strlen(SENTENCE)
(74,count)
(75,*pFile = NULL)
(76,i)
(77,char)
(78,fwrite(SENTENCE, sizeof(char)
(79,*countPtr1 = count)
(80,count)
(81,count)
(82,NULL)
(83,&count)
(84,fclose(pFile)
(85,count)
(86,i = 0)
(87,i)
(88,countPtr1)
(89,filename)
(90,i < (size_t)
(91,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^