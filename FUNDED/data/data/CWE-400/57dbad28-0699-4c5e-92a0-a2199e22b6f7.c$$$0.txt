-----label-----
1
-----code-----
FILE *attempt_open_append(const char *s, const char *suffixes)
{
   /*** spaces in name ***/
   while (isspace((int)(unsigned char)*s))
      s += 1;
   strcpy(file_name, s);

   if (!strcmp(s, "$stdout"))
      return stdout;
   if (!strcmp(s, "$stderr"))
      return stderr;

   /*** pipes ***/
   if (*s == '|') {
      errno = 0;
      FILE *f = popen(s + 1, "w");
      if (f) {
         FMODE_BINARY(f);
         return f;
      } else
         return NIL;
   }

   /*** suffix ***/
   if (access(s, W_OK) == -1) {
      s = add_suffix(s, suffixes);
      // strcpy(file_name, s); // why ?
   }

   /*** open ***/
   errno = 0;
   FILE *f = fopen(s, "a");
   if (f) {
      FMODE_BINARY(f);
      return f;
   } else
      return NIL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
18,20
19,20
19,21
20,21
22,23
22,24
23,24
23,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
42,43
44,45
46,47
46,48
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
57,58
57,59
58,59
59,60
59,61
59,62
60,61
62,63
65,66
66,67
68,69
68,70
69,70
69,71
70,71
71,72
74,75
74,76
74,77
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
88,90
88,91
89,90
91,92
91,93
92,93
96,97
96,98
96,99
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
106,107
107,108
109,110
110,111
112,113
112,114
113,114
113,115
114,115
114,116
114,117
115,116
117,118
119,120
121,122
123,124
124,125
125,126
125,127
126,127
128,129
128,130
128,131
129,130
131,132
133,134
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
144,146
144,147
147,148
148,149
148,150
148,151
149,150
151,152
154,155
154,156
154,157
155,156
157,158
157,159
158,159
159,160
159,161
160,161
162,163
164,165
165,166
167,168
168,169
-----nextToken-----
3,5,6,8,10,11,13,15,16,21,24,25,28,29,32,36,37,41,43,45,50,52,53,56,61,63,64,67,72,73,78,79,83,85,86,90,93,94,95,98,103,105,108,111,116,118,120,122,127,130,132,134,138,139,143,145,146,150,152,153,156,161,163,166,169
-----computeFrom-----
34,35
34,36
69,70
69,71
76,77
76,78
91,92
91,93
113,114
113,115
125,126
125,127
136,137
136,138
-----guardedBy-----
72,93
118,132
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;WhileStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
FILE *attempt_open_append(const char *s, const char *suffixes){   /*** spaces in name ***/   while (isspace((int)(unsigned char)*s))      s += 1;   strcpy(file_name, s);   if (!strcmp(s, "$stdout"))      return stdout;   if (!strcmp(s, "$stderr"))      return stderr;   /*** pipes ***/   if (*s == '|') {      errno = 0;      FILE *f = popen(s + 1, "w");      if (f) {         FMODE_BINARY(f);         return f;      } else         return NIL;   }   /*** suffix ***/   if (access(s, W_OK) == -1) {      s = add_suffix(s, suffixes);      // strcpy(file_name, s); // why ?   }   /*** open ***/   errno = 0;   FILE *f = fopen(s, "a");   if (f) {      FMODE_BINARY(f);      return f;   } else      return NIL;}
FILE
FILE
*attempt_open_append(const char *s, const char *suffixes)
*
attempt_open_append
const char *s
const char
*s
*
s
const char *suffixes
const char
*suffixes
*
suffixes
{   /*** spaces in name ***/   while (isspace((int)(unsigned char)*s))      s += 1;   strcpy(file_name, s);   if (!strcmp(s, "$stdout"))      return stdout;   if (!strcmp(s, "$stderr"))      return stderr;   /*** pipes ***/   if (*s == '|') {      errno = 0;      FILE *f = popen(s + 1, "w");      if (f) {         FMODE_BINARY(f);         return f;      } else         return NIL;   }   /*** suffix ***/   if (access(s, W_OK) == -1) {      s = add_suffix(s, suffixes);      // strcpy(file_name, s); // why ?   }   /*** open ***/   errno = 0;   FILE *f = fopen(s, "a");   if (f) {      FMODE_BINARY(f);      return f;   } else      return NIL;}
while (isspace((int)(unsigned char)*s))      s += 1;
isspace((int)(unsigned char)*s)
isspace
isspace
(int)(unsigned char)*s
int
int

(unsigned char)*s
unsigned char
unsigned char

*s
s
s
s += 1;
s += 1
s
s
1
strcpy(file_name, s);
strcpy(file_name, s)
strcpy
strcpy
file_name
file_name
s
s
if (!strcmp(s, "$stdout"))      return stdout;
!strcmp(s, "$stdout")
strcmp(s, "$stdout")
strcmp
strcmp
s
s
"$stdout"
return stdout;
stdout
stdout
if (!strcmp(s, "$stderr"))      return stderr;
!strcmp(s, "$stderr")
strcmp(s, "$stderr")
strcmp
strcmp
s
s
"$stderr"
return stderr;
stderr
stderr
if (*s == '|') {      errno = 0;      FILE *f = popen(s + 1, "w");      if (f) {         FMODE_BINARY(f);         return f;      } else         return NIL;   }
*s == '|'
*s
s
s
'|'
{      errno = 0;      FILE *f = popen(s + 1, "w");      if (f) {         FMODE_BINARY(f);         return f;      } else         return NIL;   }
errno = 0;
errno = 0
errno
errno
0
FILE *f = popen(s + 1, "w");
FILE *f = popen(s + 1, "w");
FILE
FILE
*f = popen(s + 1, "w")
*
f
= popen(s + 1, "w")
popen(s + 1, "w")
popen
popen
s + 1
s
s
1
"w"
if (f) {         FMODE_BINARY(f);         return f;      } else         return NIL;
f
f
{         FMODE_BINARY(f);         return f;      }
FMODE_BINARY(f);
FMODE_BINARY(f)
FMODE_BINARY
FMODE_BINARY
f
f
return f;
f
f
return NIL;
NIL
NIL
if (access(s, W_OK) == -1) {      s = add_suffix(s, suffixes);      // strcpy(file_name, s); // why ?   }
access(s, W_OK) == -1
access(s, W_OK)
access
access
s
s
W_OK
W_OK
-1
1
{      s = add_suffix(s, suffixes);      // strcpy(file_name, s); // why ?   }
s = add_suffix(s, suffixes);
s = add_suffix(s, suffixes)
s
s
add_suffix(s, suffixes)
add_suffix
add_suffix
s
s
suffixes
suffixes
errno = 0;
errno = 0
errno
errno
0
FILE *f = fopen(s, "a");
FILE *f = fopen(s, "a");
FILE
FILE
*f = fopen(s, "a")
*
f
= fopen(s, "a")
fopen(s, "a")
fopen
fopen
s
s
"a"
if (f) {      FMODE_BINARY(f);      return f;   } else      return NIL;
f
f
{      FMODE_BINARY(f);      return f;   }
FMODE_BINARY(f);
FMODE_BINARY(f)
FMODE_BINARY
FMODE_BINARY
f
f
return f;
f
f
return NIL;
NIL
NIL
-----joern-----
(4,65,0)
(17,65,0)
(60,30,0)
(29,35,0)
(8,4,0)
(70,86,0)
(44,44,0)
(57,33,0)
(44,33,0)
(8,24,0)
(5,33,0)
(67,44,0)
(51,33,0)
(43,26,0)
(4,38,0)
(35,33,0)
(74,67,0)
(22,38,0)
(34,44,0)
(50,52,0)
(84,44,0)
(52,6,0)
(63,65,0)
(37,72,0)
(26,86,0)
(31,65,0)
(52,75,0)
(85,75,0)
(68,5,0)
(67,33,0)
(79,72,0)
(43,50,0)
(32,21,0)
(61,51,0)
(78,4,0)
(64,52,0)
(51,61,0)
(59,11,0)
(81,65,0)
(54,34,0)
(47,65,0)
(46,82,0)
(19,51,0)
(5,44,0)
(21,32,0)
(72,79,0)
(82,65,0)
(27,65,0)
(12,34,0)
(28,45,0)
(32,88,0)
(88,32,0)
(34,20,0)
(35,59,0)
(78,24,0)
(30,69,0)
(57,44,0)
(30,44,0)
(3,38,0)
(13,59,0)
(6,67,0)
(1,52,0)
(43,78,0)
(42,86,0)
(56,8,0)
(59,35,0)
(6,52,0)
(25,75,0)
(43,49,0)
(58,65,0)
(38,4,0)
(34,33,0)
(39,78,0)
(40,64,0)
(21,76,0)
(38,33,0)
(69,2,0)
(79,33,0)
(79,44,0)
(87,4,0)
(7,82,0)
(71,50,0)
(55,82,0)
(5,65,0)
(83,26,0)
(43,45,0)
(38,44,0)
(14,2,0)
(76,21,0)
(64,15,0)
(69,30,0)
(32,66,0)
(53,6,0)
(66,32,0)
(51,44,0)
(0,79,0)
(21,57,0)
(48,57,0)
(10,30,0)
(20,34,0)
(80,49,0)
(36,5,0)
(86,75,0)
(30,33,0)
(59,33,0)
(67,6,0)
(57,21,0)
(23,35,0)
(2,69,0)
(73,51,0)
(41,67,0)
(43,7,0)
(38,59,0)
(62,44,0)
(35,16,0)
(50,15,0)
(35,44,0)
(18,7,0)
(30,44,1)
(57,33,1)
(71,64,1)
(57,48,1)
(55,69,1)
(84,66,1)
(57,44,1)
(30,33,1)
(43,7,1)
(2,14,1)
(3,22,1)
(38,44,1)
(79,0,1)
(69,30,1)
(22,87,1)
(54,12,1)
(44,44,1)
(41,1,1)
(20,34,1)
(34,44,1)
(12,61,1)
(64,52,1)
(19,73,1)
(51,19,1)
(67,74,1)
(7,82,1)
(34,54,1)
(62,84,1)
(51,33,1)
(73,5,1)
(49,80,1)
(82,46,1)
(35,16,1)
(78,4,1)
(21,76,1)
(5,33,1)
(78,39,1)
(72,37,1)
(42,70,1)
(68,66,1)
(45,28,1)
(38,59,1)
(43,26,1)
(50,71,1)
(26,83,1)
(23,29,1)
(59,33,1)
(9,4,1)
(1,86,1)
(14,30,1)
(18,9,1)
(43,78,1)
(87,82,1)
(39,8,1)
(7,18,1)
(8,4,1)
(69,2,1)
(29,13,1)
(8,56,1)
(60,72,1)
(37,79,1)
(26,86,1)
(0,20,1)
(72,79,1)
(64,40,1)
(38,33,1)
(6,67,1)
(38,3,1)
(66,32,1)
(50,52,1)
(83,77,1)
(77,52,1)
(30,10,1)
(56,9,1)
(34,33,1)
(6,53,1)
(79,44,1)
(74,41,1)
(35,44,1)
(55,59,1)
(79,33,1)
(70,72,1)
(13,69,1)
(5,44,1)
(10,60,1)
(52,6,1)
(5,36,1)
(43,50,1)
(48,44,1)
(40,77,1)
(35,23,1)
(44,33,1)
(32,21,1)
(32,88,1)
(21,57,1)
(51,44,1)
(80,61,1)
(67,33,1)
(67,44,1)
(59,35,1)
(28,20,1)
(61,51,1)
(36,68,1)
(44,62,1)
(46,55,1)
(35,33,1)
(4,38,1)
(43,45,1)
(86,42,1)
(53,67,1)
(43,49,1)
(2,72,2)
(60,72,2)
(69,30,2)
(69,72,2)
(59,33,2)
(43,50,2)
(50,77,2)
(51,44,2)
(34,61,2)
(35,44,2)
(9,72,2)
(35,69,2)
(32,88,2)
(40,77,2)
(50,52,2)
(26,86,2)
(34,33,2)
(69,2,2)
(57,44,2)
(7,9,2)
(5,33,2)
(44,44,2)
(32,66,2)
(38,72,2)
(46,72,2)
(72,20,2)
(55,72,2)
(4,72,2)
(6,72,2)
(7,82,2)
(64,77,2)
(52,72,2)
(5,44,2)
(38,33,2)
(79,33,2)
(32,21,2)
(30,44,2)
(21,76,2)
(71,77,2)
(22,72,2)
(78,9,2)
(43,45,2)
(26,77,2)
(80,61,2)
(49,61,2)
(67,44,2)
(35,16,2)
(79,44,2)
(0,20,2)
(6,67,2)
(59,35,2)
(79,20,2)
(10,72,2)
(53,72,2)
(45,20,2)
(51,33,2)
(30,33,2)
(35,33,2)
(38,59,2)
(86,72,2)
(43,78,2)
(3,72,2)
(30,72,2)
(66,32,2)
(62,66,2)
(67,72,2)
(64,52,2)
(38,44,2)
(43,7,2)
(66,66,2)
(54,61,2)
(42,72,2)
(87,72,2)
(14,72,2)
(44,66,2)
(29,69,2)
(43,49,2)
(39,9,2)
(13,69,2)
(57,66,2)
(8,9,2)
(1,72,2)
(61,51,2)
(82,72,2)
(74,72,2)
(28,20,2)
(20,34,2)
(12,61,2)
(77,72,2)
(20,61,2)
(84,66,2)
(59,69,2)
(70,72,2)
(56,9,2)
(52,6,2)
(78,4,2)
(67,33,2)
(23,69,2)
(57,33,2)
(18,9,2)
(48,66,2)
(8,4,2)
(72,79,2)
(21,57,2)
(83,77,2)
(34,44,2)
(43,26,2)
(41,72,2)
(44,33,2)
(37,20,2)
(21,66,2)
(4,38,2)
-----------------------------------
(0,s)
(1,f)
(2,-1)
(3,"a")
(4,*f = fopen(s, "a")
(5,strcpy(file_name, s)
(6,popen(s + 1, "w")
(7,return NIL;)
(8,FMODE_BINARY(f)
(9,f)
(10,W_OK)
(11,)
(12,s)
(13,s)
(14,1)
(15,)
(16,const char *suffixes)
(17,if (access(s, W_OK)
(18,NIL)
(19,"$stdout")
(20,!strcmp(s, "$stderr")
(21,(unsigned char)
(22,s)
(23,suffixes)
(24,)
(25,if (f)
(26,return NIL;)
(27,while (isspace((int)
(28,stderr)
(29,s)
(30,access(s, W_OK)
(31,if (!strcmp(s, "$stdout")
(32,(int)
(33,const char *s)
(34,strcmp(s, "$stderr")
(35,add_suffix(s, suffixes)
(36,s)
(37,\'|\')
(38,fopen(s, "a")
(39,f)
(40,f)
(41,s)
(42,0)
(43,RET)
(44,s += 1)
(45,return stderr;)
(46,0)
(47,f)
(48,s)
(49,return stdout;)
(50,return f;)
(51,strcmp(s, "$stdout")
(52,*f = popen(s + 1, "w")
(53,"w")
(54,"$stderr")
(55,errno)
(56,f)
(57,*s)
(58,if (f)
(59,s = add_suffix(s, suffixes)
(60,s)
(61,!strcmp(s, "$stdout")
(62,1)
(63,if (*s == \'|\')
(64,FMODE_BINARY(f)
(65,)
(66,isspace((int)
(67,s + 1)
(68,file_name)
(69,access(s, W_OK)
(70,errno)
(71,f)
(72,*s == \'|\')
(73,s)
(74,1)
(75,)
(76,unsigned char)
(77,f)
(78,return f;)
(79,*s)
(80,stdout)
(81,if (!strcmp(s, "$stderr")
(82,errno = 0)
(83,NIL)
(84,s)
(85,f)
(86,errno = 0)
(87,f)
(88,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^