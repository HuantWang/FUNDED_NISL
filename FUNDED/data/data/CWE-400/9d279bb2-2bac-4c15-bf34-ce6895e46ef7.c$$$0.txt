-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(44,8,0)
(14,36,0)
(47,19,0)
(20,11,0)
(16,7,0)
(22,0,0)
(42,33,0)
(41,36,0)
(52,35,0)
(7,48,0)
(48,43,0)
(4,34,0)
(51,21,0)
(48,7,0)
(50,21,0)
(11,34,0)
(33,42,0)
(39,7,0)
(7,34,0)
(34,42,0)
(12,42,0)
(43,19,0)
(46,2,0)
(45,4,0)
(32,19,0)
(22,12,0)
(42,12,0)
(23,36,0)
(45,47,0)
(38,28,0)
(11,28,0)
(1,2,0)
(25,4,0)
(28,11,0)
(28,38,0)
(24,29,0)
(31,5,0)
(6,4,0)
(9,19,0)
(0,22,0)
(44,5,0)
(40,47,0)
(34,19,0)
(5,44,0)
(2,36,0)
(30,22,0)
(10,11,0)
(27,34,0)
(38,32,0)
(0,15,0)
(18,29,0)
(49,35,0)
(3,38,0)
(38,3,0)
(32,38,0)
(26,43,0)
(4,45,0)
(21,34,0)
(17,45,0)
(42,34,0)
(15,0,0)
(13,48,0)
(12,22,0)
(7,34,1)
(50,34,1)
(49,29,1)
(45,4,1)
(39,21,1)
(43,26,1)
(20,10,1)
(24,2,1)
(48,13,1)
(28,11,1)
(38,28,1)
(18,24,1)
(47,40,1)
(26,48,1)
(7,16,1)
(30,27,1)
(5,31,1)
(10,47,1)
(48,7,1)
(32,38,1)
(4,34,1)
(17,4,1)
(0,15,1)
(42,12,1)
(44,5,1)
(21,51,1)
(25,6,1)
(11,34,1)
(1,46,1)
(51,50,1)
(0,30,1)
(40,45,1)
(31,21,1)
(2,1,1)
(22,0,1)
(27,29,1)
(49,32,1)
(39,44,1)
(21,34,1)
(45,17,1)
(34,42,1)
(37,35,1)
(11,20,1)
(12,22,1)
(52,49,1)
(42,33,1)
(4,25,1)
(29,18,1)
(13,7,1)
(6,43,1)
(38,3,1)
(16,39,1)
(35,52,1)
(39,29,2)
(5,21,2)
(26,29,2)
(4,34,2)
(21,29,2)
(32,29,2)
(30,29,2)
(7,34,2)
(0,15,2)
(10,29,2)
(47,29,2)
(31,21,2)
(28,11,2)
(7,29,2)
(48,29,2)
(25,29,2)
(40,29,2)
(38,29,2)
(13,29,2)
(22,29,2)
(45,29,2)
(28,29,2)
(16,29,2)
(43,29,2)
(4,29,2)
(6,29,2)
(44,5,2)
(42,12,2)
(51,29,2)
(50,29,2)
(42,33,2)
(27,29,2)
(11,29,2)
(34,29,2)
(32,38,2)
(17,29,2)
(22,0,2)
(12,22,2)
(38,28,2)
(34,42,2)
(44,21,2)
(21,34,2)
(38,3,2)
(42,29,2)
(45,4,2)
(11,34,2)
(48,7,2)
(20,29,2)
(12,29,2)
(0,29,2)
-----------------------------------
(0,sizeof(struct _twoIntsStruct)
(1,NULL)
(2,data = NULL)
(3,twoIntsStruct *)
(4,data[0])
(5,-1)
(6,data)
(7,data[0])
(8,)
(9,if (data == NULL)
(10,data)
(11,data[0])
(12,malloc(100*sizeof(struct _twoIntsStruct)
(13,intOne)
(14,data)
(15,struct _twoIntsStruct)
(16,0)
(17,intTwo)
(18,5)
(19,)
(20,0)
(21,data == NULL)
(22,100*sizeof(struct _twoIntsStruct)
(23,if(staticFive==5)
(24,staticFive)
(25,0)
(26,0)
(27,data)
(28,&data[0])
(29,staticFive==5)
(30,100)
(31,1)
(32,printStructLine((twoIntsStruct *)
(33,struct _twoIntsStruct *)
(34,data = (struct _twoIntsStruct *)
(35,staticFive==5)
(36,)
(37,RET)
(38,(twoIntsStruct *)
(39,data)
(40,0)
(41,if(staticFive==5)
(42,(struct _twoIntsStruct *)
(43,data[0].intOne = 0)
(44,exit(-1)
(45,data[0].intTwo)
(46,data)
(47,data[0].intTwo = 0)
(48,data[0].intOne)
(49,staticFive)
(50,data)
(51,NULL)
(52,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^