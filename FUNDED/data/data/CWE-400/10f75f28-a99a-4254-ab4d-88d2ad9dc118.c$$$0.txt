-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,32,33,37,38,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
35,36
35,37
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(28,20,0)
(29,41,0)
(41,35,0)
(44,19,0)
(7,26,0)
(0,22,0)
(26,25,0)
(3,42,0)
(11,35,0)
(10,27,0)
(19,37,0)
(25,27,0)
(26,50,0)
(41,2,0)
(48,46,0)
(56,24,0)
(20,28,0)
(13,25,0)
(46,3,0)
(47,26,0)
(42,3,0)
(48,22,0)
(47,3,0)
(18,27,0)
(16,24,0)
(9,48,0)
(49,20,0)
(5,50,0)
(52,2,0)
(38,1,0)
(23,46,0)
(21,32,0)
(32,46,0)
(4,25,0)
(6,32,0)
(3,46,0)
(53,12,0)
(26,2,0)
(41,25,0)
(26,47,0)
(8,2,0)
(15,22,0)
(3,47,0)
(35,41,0)
(34,46,0)
(33,19,0)
(36,0,0)
(43,40,0)
(23,22,0)
(28,17,0)
(46,22,0)
(55,23,0)
(0,46,0)
(50,26,0)
(30,40,0)
(2,39,0)
(1,45,0)
(14,27,0)
(54,23,0)
(51,53,0)
(47,26,1)
(31,1,1)
(20,49,1)
(34,41,1)
(43,53,1)
(5,7,1)
(26,50,1)
(25,4,1)
(1,38,1)
(3,42,1)
(48,46,1)
(24,16,1)
(49,32,1)
(50,5,1)
(32,46,1)
(51,24,1)
(31,40,1)
(54,28,1)
(16,56,1)
(55,54,1)
(4,13,1)
(36,48,1)
(30,43,1)
(29,40,1)
(0,46,1)
(38,41,1)
(56,25,1)
(26,2,1)
(48,9,1)
(43,2,1)
(3,47,1)
(11,29,1)
(21,46,1)
(52,8,1)
(7,34,1)
(41,2,1)
(23,46,1)
(28,20,1)
(40,30,1)
(32,6,1)
(41,25,1)
(2,52,1)
(46,3,1)
(8,24,1)
(6,21,1)
(23,55,1)
(53,51,1)
(54,32,1)
(26,25,1)
(41,35,1)
(31,0,1)
(0,36,1)
(9,23,1)
(35,11,1)
(1,41,2)
(3,47,2)
(51,24,2)
(34,41,2)
(36,41,2)
(55,41,2)
(26,41,2)
(23,46,2)
(7,41,2)
(9,41,2)
(29,40,2)
(11,40,2)
(32,46,2)
(52,24,2)
(28,20,2)
(6,41,2)
(48,46,2)
(3,42,2)
(0,41,2)
(28,32,2)
(3,41,2)
(46,41,2)
(49,32,2)
(41,35,2)
(53,24,2)
(38,41,2)
(41,25,2)
(0,46,2)
(41,2,2)
(48,41,2)
(46,3,2)
(8,24,2)
(41,40,2)
(26,25,2)
(26,50,2)
(5,41,2)
(47,26,2)
(2,24,2)
(21,41,2)
(50,41,2)
(32,41,2)
(20,32,2)
(54,41,2)
(35,40,2)
(26,2,2)
(47,41,2)
(23,41,2)
-----------------------------------
(0,free(myString)
(1,printLine("Input is less than the length of the source string")
(2,data = 20)
(3,(wchar_t *)
(4,0)
(5,wchar_t)
(6,NULL)
(7,data)
(8,data)
(9,myString)
(10,if(STATIC_CONST_FIVE==5)
(11,HELLO_STRING)
(12,)
(13,data)
(14,if(STATIC_CONST_FIVE!=5)
(15,if (myString == NULL)
(16,5)
(17,)
(18,data)
(19,)
(20,-1)
(21,myString)
(22,)
(23,wcscpy(myString, HELLO_STRING)
(24,STATIC_CONST_FIVE!=5)
(25,data = 0)
(26,data*sizeof(wchar_t)
(27,)
(28,exit(-1)
(29,data)
(30,5)
(31,RET)
(32,myString == NULL)
(33,if (data > wcslen(HELLO_STRING)
(34,myString)
(35,wcslen(HELLO_STRING)
(36,myString)
(37,)
(38,"Input is less than the length of the source string")
(39,)
(40,STATIC_CONST_FIVE==5)
(41,data > wcslen(HELLO_STRING)
(42,wchar_t *)
(43,STATIC_CONST_FIVE)
(44,myString)
(45,)
(46,myString = (wchar_t *)
(47,malloc(data*sizeof(wchar_t)
(48,printWLine(myString)
(49,1)
(50,sizeof(wchar_t)
(51,"Benign, fixed string")
(52,20)
(53,printLine("Benign, fixed string")
(54,myString)
(55,HELLO_STRING)
(56,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^