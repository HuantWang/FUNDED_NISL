-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_16_bad()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
68,69
68,70
70,71
70,72
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,62,65,66,67,69,71,72
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_16_bad(){    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int_malloc_16_bad()
CWE401_Memory_Leak__int_malloc_16_bad
{    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(0,3,0)
(25,35,0)
(32,3,0)
(17,18,0)
(37,18,0)
(12,2,0)
(19,28,0)
(15,38,0)
(33,10,0)
(18,16,0)
(22,30,0)
(35,15,0)
(39,10,0)
(7,38,0)
(16,18,0)
(18,37,0)
(30,22,0)
(29,2,0)
(15,22,0)
(14,20,0)
(26,15,0)
(22,37,0)
(6,35,0)
(23,36,0)
(23,24,0)
(39,38,0)
(36,23,0)
(11,36,0)
(5,38,0)
(4,2,0)
(10,28,0)
(10,15,0)
(35,28,0)
(28,38,0)
(3,15,0)
(13,4,0)
(22,15,0)
(34,4,0)
(27,2,0)
(10,39,0)
(31,16,0)
(9,10,0)
(37,22,0)
(3,15,1)
(22,37,1)
(4,34,1)
(10,28,1)
(25,3,1)
(23,36,1)
(35,15,1)
(8,4,1)
(26,8,1)
(19,35,1)
(15,22,1)
(14,1,1)
(11,3,1)
(25,23,1)
(36,11,1)
(31,17,1)
(10,9,1)
(0,15,1)
(34,13,1)
(6,25,1)
(33,28,1)
(5,39,1)
(28,19,1)
(10,15,1)
(3,32,1)
(18,16,1)
(1,8,1)
(16,31,1)
(22,30,1)
(1,5,1)
(21,1,1)
(17,26,1)
(32,0,1)
(37,18,1)
(21,14,1)
(9,33,1)
(35,6,1)
(39,10,1)
(26,8,2)
(15,22,2)
(18,16,2)
(33,8,2)
(10,8,2)
(36,3,2)
(9,8,2)
(23,36,2)
(28,8,2)
(35,8,2)
(37,18,2)
(0,8,2)
(6,8,2)
(31,8,2)
(16,8,2)
(3,15,2)
(15,8,2)
(18,8,2)
(25,8,2)
(17,8,2)
(10,28,2)
(5,8,2)
(23,3,2)
(22,30,2)
(10,15,2)
(37,8,2)
(14,1,2)
(19,8,2)
(32,8,2)
(39,10,2)
(11,3,2)
(39,8,2)
(22,8,2)
(35,15,2)
(22,37,2)
(3,8,2)
-----------------------------------
(0,data)
(1,1)
(2,)
(3,data == NULL)
(4,data = NULL)
(5,break;)
(6,0)
(7,if (data == NULL)
(8,1)
(9,0)
(10,data[0])
(11,1)
(12,while(1)
(13,data)
(14,break;)
(15,data = (int *)
(16,sizeof(int)
(17,100)
(18,100*sizeof(int)
(19,5)
(20,)
(21,RET)
(22,(int *)
(23,exit(-1)
(24,)
(25,data)
(26,data)
(27,data)
(28,data[0] = 5)
(29,while(1)
(30,int *)
(31,int)
(32,NULL)
(33,data)
(34,NULL)
(35,data[0])
(36,-1)
(37,malloc(100*sizeof(int)
(38,)
(39,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^