-----label-----
1
-----code-----
static void
init_config(struct cfg *cf, int argc, char **argv)
{
    int ch, i;
    char *bh[2], *bh6[2], *cp;

    bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;

    cf->port_min = PORT_MIN;
    cf->port_max = PORT_MAX;

    cf->max_ttl = SESSION_TIMEOUT;
    cf->tos = TOS;
    cf->rrtcp = 1;
    cf->ttl_mode = TTL_UNIFIED;

    cf->timeout_handler.socket_name = NULL;
    cf->timeout_handler.fd = -1;
    cf->timeout_handler.connected = 0;

    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)
	err(1, "getrlimit");

    while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)
	switch (ch) {
	case 'f':
	    cf->nodaemon = 1;
	    break;

	case 'l':
	    bh[0] = optarg;
	    bh[1] = strchr(bh[0], '/');
	    if (bh[1] != NULL) {
		*bh[1] = '\0';
		bh[1]++;
		cf->bmode = 1;
	    }
	    break;

	case '6':
	    bh6[0] = optarg;
	    bh6[1] = strchr(bh6[0], '/');
	    if (bh6[1] != NULL) {
		*bh6[1] = '\0';
		bh6[1]++;
		cf->bmode = 1;
	    }
	    break;

	case 's':
	    if (strncmp("udp:", optarg, 4) == 0) {
		cf->umode = 1;
		optarg += 4;
	    } else if (strncmp("udp6:", optarg, 5) == 0) {
		cf->umode = 6;
		optarg += 5;
	    } else if (strncmp("unix:", optarg, 5) == 0) {
		cf->umode = 0;
		optarg += 5;
	    }
	    cmd_sock = optarg;
	    break;

	case 't':
	    cf->tos = atoi(optarg);
	    break;

	case '2':
	    cf->dmode = 1;
	    break;

	case 'v':
	    printf("Basic version: %d\n", CPROTOVER);
	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {
		printf("Extension %s: %s\n", proto_caps[i].pc_id,
		    proto_caps[i].pc_description);
	    }
	    exit(0);
	    break;

	case 'r':
	    cf->rdir = optarg;
	    break;

	case 'S':
	    cf->sdir = optarg;
	    break;

	case 'R':
	    cf->rrtcp = 0;
	    break;

	case 'p':
	    pid_file = optarg;
	    break;

	case 'T':
	    cf->max_ttl = atoi(optarg);
	    break;

	case 'L':
	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);
	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)
		err(1, "setrlimit");
	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)
		err(1, "getrlimit");
	    if (cf->nofile_limit.rlim_max < atoi(optarg))
		warnx("limit allocated by setrlimit (%d) is less than "
		  "requested (%d)", (int) cf->nofile_limit.rlim_max,
		  atoi(optarg));
	    break;

	case 'm':
	    cf->port_min = atoi(optarg);
	    break;

	case 'M':
	    cf->port_max = atoi(optarg);
	    break;

	case 'u':
	    cf->run_uname = optarg;
	    cp = strchr(optarg, ':');
	    if (cp != NULL) {
		if (cp == optarg)
		    cf->run_uname = NULL;
		cp[0] = '\0';
		cp++;
	    }
	    cf->run_gname = cp;
	    break;

	case 'F':
	    cf->no_check = 1;
	    break;

	case 'i':
	    cf->ttl_mode = TTL_INDEPENDENT;
	    break;

	case 'n':
	    if(strncmp("unix:", optarg, 5) == 0)
		optarg += 5;
	    optarg += 5;
	    if(strlen(optarg) == 0)
		errx(1, "timeout notification socket name too short");
	    cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);
	    if(cf->timeout_handler.socket_name == NULL)
		err(1, "can't allocate memory");
	    strcpy(cf->timeout_handler.socket_name, optarg);
	    cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);
	    if (cf->timeout_handler.fd == -1)
		err(1, "can't create timeout socket");
	    break;

	case '?':
	default:
	    usage();
	}
    if (cf->rdir == NULL && cf->sdir != NULL)
	errx(1, "-S switch requires -r switch");

    if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {
	if (cf->umode != 0) {
	    errx(1, "running this program as superuser in a remote control "
	      "mode is strongly not recommended, as it poses serious security "
	      "threat to your system. Use -u option to run as an unprivileged "
	      "user or -F is you want to run as a superuser anyway.");
	} else {
	    warnx("WARNING!!! Running this program as superuser is strongly "
	      "not recommended, as it may pose serious security threat to "
	      "your system. Use -u option to run as an unprivileged user "
	      "or -F to surpress this warning.");
	}
    }

    if (cf->port_min <= 0 || cf->port_min > 65535)
	errx(1, "invalid value of the port_min argument, "
	  "not in the range 1-65535");
    if (cf->port_max <= 0 || cf->port_max > 65535)
	errx(1, "invalid value of the port_max argument, "
	  "not in the range 1-65535");
    if (cf->port_min > cf->port_max)
	errx(1, "port_min should be less than port_max");

    /* make sure that port_min and port_max are even */
    if ((cf->port_min % 2) != 0)
	cf->port_min++;
    if ((cf->port_max % 2) != 0)
	cf->port_max--;

    cf->nextport[0] = cf->nextport[1] = cf->port_min;
    cf->sessions = malloc((sizeof cf->sessions[0]) *
      (((cf->port_max - cf->port_min + 1) * 2) + 1));
    cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *
      (((cf->port_max - cf->port_min + 1) * 2) + 1));
    cf->pfds = malloc((sizeof cf->pfds[0]) *
      (((cf->port_max - cf->port_min + 1) * 2) + 1));

    if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {
	if (cf->umode != 0)
	    errx(1, "explicit binding address has to be specified in UDP "
	      "command mode");
	bh[0] = "*";
    }

    for (i = 0; i < 2; i++) {
	if (bh[i] != NULL && *bh[i] == '\0')
	    bh[i] = NULL;
	if (bh6[i] != NULL && *bh6[i] == '\0')
	    bh6[i] = NULL;
    }

    i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +
      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);
    if (cf->bmode != 0) {
	if (bh[0] != NULL && bh6[0] != NULL)
	    errx(1, "either IPv4 or IPv6 should be configured for external "
	      "interface in bridging mode, not both");
	if (bh[1] != NULL && bh6[1] != NULL)
	    errx(1, "either IPv4 or IPv6 should be configured for internal "
	      "interface in bridging mode, not both");
	if (i != 2)
	    errx(1, "incomplete configuration of the bridging mode - exactly "
	      "2 listen addresses required, %d provided", i);
    } else if (i != 1) {
	errx(1, "exactly 1 listen addresses required, %d provided", i);
    }

    for (i = 0; i < 2; i++) {
	cf->bindaddr[i] = NULL;
	if (bh[i] != NULL) {
	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);
	    continue;
	}
	if (bh6[i] != NULL) {
	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);
	    continue;
	}
    }
    if (cf->bindaddr[0] == NULL) {
	cf->bindaddr[0] = cf->bindaddr[1];
	cf->bindaddr[1] = NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
17,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
21,44
21,45
21,46
21,47
21,48
21,49
21,50
21,51
21,52
22,23
23,24
23,25
23,26
25,26
27,28
29,30
30,31
30,32
30,33
30,34
32,33
32,34
32,35
35,36
37,38
37,39
37,40
40,41
42,43
42,44
45,46
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
77,78
77,79
78,79
78,80
79,80
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
109,111
110,111
113,114
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
133,134
135,136
136,137
136,138
137,138
137,139
138,139
138,140
139,140
144,145
144,146
145,146
145,147
146,147
146,148
146,149
147,148
149,150
151,152
152,153
153,154
153,155
154,155
158,159
159,160
159,161
159,162
160,161
164,165
164,166
165,166
165,167
166,167
167,168
167,169
168,169
170,171
170,172
170,173
170,174
171,172
173,174
175,176
178,179
180,181
180,182
181,182
183,184
183,185
183,186
183,187
183,188
183,189
183,190
183,191
183,192
183,193
183,194
183,195
183,196
183,197
183,198
183,199
183,200
183,201
183,202
183,203
183,204
183,205
183,206
183,207
183,208
183,209
183,210
183,211
183,212
183,213
183,214
183,215
183,216
183,217
183,218
183,219
183,220
183,221
183,222
183,223
183,224
183,225
183,226
183,227
183,228
183,229
183,230
183,231
183,232
183,233
183,234
183,235
183,236
183,237
183,238
183,239
183,240
183,241
183,242
183,243
183,244
183,245
183,246
183,247
183,248
183,249
183,250
183,251
183,252
183,253
183,254
183,255
183,256
183,257
183,258
183,259
183,260
183,261
183,262
183,263
184,185
186,187
187,188
187,189
188,189
188,190
189,190
194,195
196,197
197,198
197,199
198,199
198,200
199,200
202,203
204,205
205,206
205,207
206,207
206,208
207,208
210,211
210,212
210,213
211,212
213,214
213,215
214,215
218,219
218,220
219,220
219,221
220,221
220,222
221,222
224,225
226,227
226,228
226,229
227,228
228,229
228,230
229,230
230,231
230,232
231,232
235,236
236,237
237,238
237,239
238,239
241,242
242,243
242,244
243,244
243,245
244,245
249,250
251,252
252,253
252,254
253,254
253,255
254,255
257,258
259,260
260,261
260,262
261,262
261,263
262,263
265,266
265,267
265,268
266,267
268,269
268,270
269,270
273,274
273,275
274,275
274,276
275,276
275,277
276,277
279,280
281,282
281,283
281,284
282,283
283,284
283,285
284,285
285,286
285,287
286,287
290,291
291,292
292,293
292,294
293,294
296,297
297,298
297,299
298,299
298,300
299,300
304,305
306,307
306,308
306,309
307,308
307,309
308,309
308,310
308,311
308,312
309,310
312,313
316,317
316,318
317,318
318,319
318,320
319,320
319,321
320,321
324,325
325,326
325,327
326,327
329,330
329,331
329,332
330,331
330,332
331,332
331,333
331,334
331,335
332,333
335,336
339,340
339,341
340,341
341,342
341,343
342,343
342,344
343,344
347,348
348,349
348,350
349,350
352,353
352,354
353,354
353,355
354,355
354,356
354,357
354,358
355,356
358,359
362,363
362,364
363,364
364,365
364,366
365,366
365,367
366,367
370,371
371,372
371,373
372,373
375,376
376,377
376,378
377,378
379,380
382,383
384,385
385,386
385,387
386,387
386,388
387,388
390,391
390,392
391,392
393,394
396,397
398,399
399,400
399,401
400,401
400,402
401,402
406,407
408,409
409,410
409,411
409,412
410,411
413,414
415,416
415,417
415,418
415,419
416,417
417,418
417,419
418,419
421,422
421,423
422,423
422,424
423,424
423,425
424,425
426,427
429,430
431,432
432,433
434,435
435,436
436,437
436,438
436,439
436,440
437,438
440,441
440,442
441,442
441,443
442,443
444,445
447,448
447,449
448,449
448,450
449,450
451,452
454,455
455,456
455,457
456,457
460,461
462,463
463,464
463,465
464,465
464,466
465,466
468,469
471,472
473,474
474,475
474,476
475,476
475,477
476,477
479,480
482,483
484,485
485,486
485,487
486,487
486,488
487,488
492,493
494,495
495,496
495,497
496,497
498,499
501,502
503,504
504,505
504,506
505,506
505,507
506,507
509,510
509,511
510,511
512,513
515,516
517,518
518,519
518,520
519,520
519,521
520,521
520,522
521,522
525,526
525,527
526,527
526,528
527,528
527,529
528,529
532,533
532,534
533,534
535,536
537,538
537,539
538,539
538,540
539,540
539,541
539,542
540,541
542,543
544,545
545,546
546,547
546,548
547,548
551,552
552,553
552,554
552,555
553,554
557,558
557,559
558,559
558,560
559,560
559,561
559,562
560,561
562,563
564,565
565,566
566,567
566,568
567,568
571,572
572,573
572,574
572,575
573,574
577,578
577,579
578,579
578,580
579,580
579,581
580,581
580,582
581,582
585,586
585,587
586,587
588,589
590,591
591,592
591,593
591,594
591,595
592,593
595,596
595,597
596,597
596,598
599,600
599,601
600,601
600,602
601,602
605,606
605,607
606,607
608,609
611,612
613,614
614,615
614,616
615,616
615,617
616,617
619,620
619,621
620,621
622,623
625,626
627,628
628,629
628,630
629,630
629,631
630,631
633,634
633,635
634,635
636,637
639,640
641,642
642,643
642,644
643,644
643,645
644,645
647,648
649,650
650,651
650,652
651,652
653,654
653,655
653,656
654,655
656,657
659,660
659,661
660,661
660,662
661,662
663,664
665,666
665,667
665,668
666,667
666,668
667,668
667,669
668,669
670,671
672,673
673,674
673,675
674,675
674,676
675,676
678,679
680,681
681,682
681,683
682,683
682,684
683,684
687,688
688,689
689,690
691,692
692,693
692,694
693,694
693,695
694,695
697,698
700,701
702,703
703,704
703,705
704,705
704,706
705,706
710,711
712,713
713,714
713,715
714,715
714,716
715,716
718,719
721,722
723,724
723,725
724,725
724,726
725,726
725,727
725,728
725,729
726,727
729,730
733,734
734,735
734,736
735,736
738,739
739,740
739,741
740,741
743,744
743,745
744,745
744,746
745,746
745,747
746,747
748,749
751,752
752,753
752,754
752,755
753,754
757,758
758,759
758,760
759,760
759,761
760,761
760,762
761,762
765,766
765,767
766,767
766,768
768,769
770,771
770,772
771,772
773,774
773,775
774,775
774,776
775,776
777,778
780,781
780,782
781,782
781,783
782,783
782,784
783,784
783,785
784,785
788,789
790,791
791,792
791,793
791,794
792,793
796,797
797,798
797,799
797,800
798,799
800,801
800,802
801,802
801,803
802,803
806,807
808,809
809,810
809,811
810,811
810,812
811,812
811,813
812,813
816,817
816,818
816,819
816,820
817,818
819,820
821,822
824,825
824,826
825,826
825,827
826,827
826,828
827,828
827,829
828,829
832,833
834,835
835,836
835,837
835,838
836,837
841,842
844,845
845,846
846,847
848,849
848,850
849,850
849,851
850,851
850,852
851,852
851,853
852,853
855,856
857,858
857,859
858,859
858,860
859,860
862,863
864,865
865,866
865,867
865,868
866,867
870,871
870,872
871,872
871,873
872,873
872,874
873,874
873,875
874,875
874,876
875,876
879,880
879,881
880,881
881,882
884,885
884,886
885,886
885,887
886,887
889,890
891,892
892,893
892,894
892,895
893,894
893,895
894,895
894,896
895,896
899,900
900,901
901,902
901,903
901,904
902,903
906,907
907,908
908,909
908,910
909,910
912,913
912,914
913,914
913,915
914,915
914,916
915,916
915,917
916,917
920,921
920,922
921,922
921,923
922,923
926,927
927,928
927,929
927,930
928,929
932,933
932,934
933,934
933,935
934,935
934,936
935,936
935,937
936,937
940,941
940,942
941,942
941,943
942,943
946,947
947,948
947,949
947,950
948,949
952,953
952,954
953,954
953,955
954,955
954,956
955,956
958,959
958,960
959,960
962,963
963,964
963,965
963,966
964,965
968,969
968,970
969,970
969,971
970,971
971,972
971,973
972,973
972,974
973,974
978,979
979,980
980,981
980,982
981,982
984,985
984,986
985,986
985,987
986,987
987,988
987,989
988,989
988,990
989,990
994,995
995,996
996,997
996,998
997,998
1000,1001
1001,1002
1001,1003
1002,1003
1002,1004
1003,1004
1003,1005
1004,1005
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1010,1012
1011,1012
1015,1016
1015,1017
1016,1017
1019,1020
1020,1021
1020,1022
1021,1022
1021,1023
1022,1023
1025,1026
1025,1027
1026,1027
1028,1029
1028,1030
1029,1030
1030,1031
1031,1032
1031,1033
1032,1033
1032,1034
1033,1034
1037,1038
1038,1039
1038,1040
1039,1040
1040,1041
1040,1042
1041,1042
1042,1043
1042,1044
1043,1044
1043,1045
1044,1045
1044,1046
1045,1046
1048,1049
1048,1050
1049,1050
1055,1056
1056,1057
1056,1058
1057,1058
1057,1059
1058,1059
1061,1062
1061,1063
1062,1063
1064,1065
1064,1066
1065,1066
1066,1067
1067,1068
1067,1069
1068,1069
1068,1070
1069,1070
1073,1074
1074,1075
1074,1076
1075,1076
1076,1077
1076,1078
1077,1078
1078,1079
1078,1080
1079,1080
1079,1081
1080,1081
1080,1082
1081,1082
1084,1085
1084,1086
1085,1086
1091,1092
1092,1093
1092,1094
1093,1094
1093,1095
1094,1095
1097,1098
1097,1099
1098,1099
1100,1101
1100,1102
1101,1102
1102,1103
1103,1104
1103,1105
1104,1105
1104,1106
1105,1106
1109,1110
1110,1111
1110,1112
1111,1112
1112,1113
1112,1114
1113,1114
1114,1115
1114,1116
1115,1116
1115,1117
1116,1117
1116,1118
1117,1118
1120,1121
1120,1122
1121,1122
1127,1128
1127,1129
1128,1129
1128,1130
1129,1130
1129,1131
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1132,1134
1133,1134
1136,1137
1138,1139
1138,1140
1139,1140
1139,1141
1140,1141
1143,1144
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1150,1151
1152,1153
1152,1154
1153,1154
1153,1155
1154,1155
1157,1158
1159,1160
1159,1161
1160,1161
1160,1162
1161,1162
1161,1163
1162,1163
1162,1164
1163,1164
1167,1168
1168,1169
1168,1170
1168,1171
1169,1170
1173,1174
1174,1175
1174,1176
1175,1176
1175,1177
1176,1177
1180,1181
1180,1182
1180,1183
1180,1184
1181,1182
1182,1183
1182,1184
1183,1184
1186,1187
1186,1188
1187,1188
1190,1191
1191,1192
1193,1194
1193,1195
1194,1195
1194,1196
1195,1196
1195,1197
1196,1197
1196,1198
1197,1198
1197,1199
1198,1199
1200,1201
1202,1203
1204,1205
1204,1206
1205,1206
1206,1207
1206,1208
1207,1208
1209,1210
1212,1213
1213,1214
1213,1215
1214,1215
1214,1216
1215,1216
1217,1218
1219,1220
1221,1222
1221,1223
1222,1223
1222,1224
1223,1224
1223,1225
1224,1225
1224,1226
1225,1226
1227,1228
1229,1230
1231,1232
1231,1233
1232,1233
1233,1234
1233,1235
1234,1235
1236,1237
1239,1240
1240,1241
1240,1242
1241,1242
1241,1243
1242,1243
1244,1245
1246,1247
1248,1249
1249,1250
1249,1251
1250,1251
1252,1253
1252,1254
1253,1254
1253,1255
1254,1255
1254,1256
1255,1256
1256,1257
1256,1258
1256,1259
1257,1258
1258,1259
1258,1260
1259,1260
1259,1261
1260,1261
1263,1264
1267,1268
1268,1269
1268,1270
1268,1271
1269,1270
1270,1271
1270,1272
1271,1272
1271,1273
1272,1273
1275,1276
1279,1280
1280,1281
1280,1282
1280,1283
1281,1282
1282,1283
1282,1284
1283,1284
1283,1285
1284,1285
1287,1288
1291,1292
1292,1293
1292,1294
1292,1295
1293,1294
1294,1295
1294,1296
1295,1296
1295,1297
1296,1297
1299,1300
1303,1304
1303,1305
1303,1306
1304,1305
1304,1306
1305,1306
1305,1307
1306,1307
1310,1311
1310,1312
1310,1313
1311,1312
1311,1313
1312,1313
1312,1314
1313,1314
1313,1315
1314,1315
1314,1316
1315,1316
1318,1319
1320,1321
1320,1322
1321,1322
1321,1323
1322,1323
1325,1326
1327,1328
1328,1329
1328,1330
1328,1331
1329,1330
1333,1334
1333,1335
1334,1335
1334,1336
1335,1336
1335,1337
1336,1337
1336,1338
1337,1338
1340,1341
1342,1343
1342,1344
1343,1344
1343,1345
1344,1345
1347,1348
1349,1350
1350,1351
1350,1352
1350,1353
1351,1352
1355,1356
1355,1357
1356,1357
1356,1358
1357,1358
1360,1361
1361,1362
1361,1363
1361,1364
1361,1365
1362,1363
1366,1367
1368,1369
1368,1370
1369,1370
1369,1371
1370,1371
1373,1374
1374,1375
1375,1376
1375,1377
1375,1378
1375,1379
1376,1377
1380,1381
1382,1383
1382,1384
1382,1385
1382,1386
1383,1384
1384,1385
1384,1386
1385,1386
1388,1389
1388,1390
1389,1390
1392,1393
1393,1394
1395,1396
1395,1397
1395,1398
1396,1397
1397,1398
1397,1399
1398,1399
1398,1400
1399,1400
1399,1401
1400,1401
1403,1404
1405,1406
1407,1408
1407,1409
1408,1409
1408,1410
1409,1410
1409,1411
1410,1411
1412,1413
1414,1415
1416,1417
1416,1418
1416,1419
1417,1418
1418,1419
1418,1420
1419,1420
1419,1421
1420,1421
1420,1422
1421,1422
1424,1425
1426,1427
1426,1428
1427,1428
1429,1430
1430,1431
1430,1432
1431,1432
1434,1435
1435,1436
1435,1437
1435,1438
1435,1439
1435,1440
1436,1437
1438,1439
1438,1440
1439,1440
1439,1441
1440,1441
1443,1444
1445,1446
1447,1448
1447,1449
1448,1449
1450,1451
1452,1453
1455,1456
1455,1457
1456,1457
1456,1458
1457,1458
1457,1459
1458,1459
1460,1461
1462,1463
1464,1465
1464,1466
1464,1467
1465,1466
1466,1467
1466,1468
1467,1468
1467,1469
1468,1469
1468,1470
1469,1470
1472,1473
1474,1475
1474,1476
1475,1476
1477,1478
1478,1479
1478,1480
1479,1480
1482,1483
1483,1484
1483,1485
1483,1486
1483,1487
1483,1488
1484,1485
1486,1487
1486,1488
1487,1488
1487,1489
1488,1489
1491,1492
1493,1494
1495,1496
1495,1497
1496,1497
1498,1499
1500,1501
1503,1504
1503,1505
1504,1505
1504,1506
1505,1506
1505,1507
1506,1507
1506,1508
1507,1508
1511,1512
1513,1514
1513,1515
1514,1515
1515,1516
1515,1517
1516,1517
1516,1518
1517,1518
1517,1519
1518,1519
1522,1523
1522,1524
1523,1524
1523,1525
1524,1525
1528,1529
1529,1530
1529,1531
1530,1531
1530,1532
1531,1532
1531,1533
1532,1533
1536,1537
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,20,24,26,28,31,33,34,36,38,39,41,43,44,49,50,54,55,59,60,64,65,67,72,73,75,80,81,83,88,89,91,96,97,99,104,105,106,111,112,114,120,121,122,124,130,131,132,134,140,141,142,143,148,150,155,156,157,161,162,163,169,172,174,176,177,179,182,185,190,191,192,193,195,200,201,203,208,209,212,215,216,217,222,223,225,232,233,234,239,240,245,246,247,248,250,255,256,258,263,264,267,270,271,272,277,278,280,287,288,289,294,295,300,301,302,303,305,310,311,313,314,315,321,322,323,327,328,333,334,336,337,338,344,345,346,350,351,356,357,359,360,361,367,368,369,373,374,378,380,381,383,388,389,392,394,395,397,402,403,404,405,407,411,412,414,419,420,425,427,428,430,433,438,439,443,445,446,450,452,453,457,458,459,461,466,467,469,470,472,477,478,480,481,483,488,489,490,491,493,497,499,500,502,507,508,511,513,514,516,522,523,524,529,530,531,534,536,541,543,548,549,550,554,555,556,561,563,568,569,570,574,575,576,582,583,584,587,589,593,594,597,598,602,603,604,607,609,610,612,617,618,621,623,624,626,631,632,635,637,638,640,645,646,648,652,655,657,658,662,664,669,671,676,677,679,684,685,686,690,695,696,698,699,701,706,707,708,709,711,716,717,719,720,722,727,728,730,731,732,736,737,741,742,747,749,750,754,755,756,762,763,764,767,769,772,776,778,779,785,786,787,789,793,794,795,799,803,804,805,807,813,814,815,818,820,822,823,829,830,831,833,837,838,839,840,842,843,847,853,854,856,860,861,863,867,868,869,876,877,878,882,883,887,888,890,896,897,898,903,904,905,910,911,917,918,919,923,924,925,929,930,931,937,938,939,943,944,945,949,950,951,956,957,960,961,965,966,967,974,975,976,977,982,983,990,991,992,993,998,999,1005,1006,1007,1012,1013,1014,1017,1018,1023,1024,1027,1034,1035,1036,1046,1047,1050,1051,1052,1053,1054,1059,1060,1063,1070,1071,1072,1082,1083,1086,1087,1088,1089,1090,1095,1096,1099,1106,1107,1108,1118,1119,1122,1123,1124,1125,1126,1134,1135,1137,1141,1142,1144,1148,1149,1151,1155,1156,1158,1164,1165,1166,1170,1171,1172,1177,1178,1179,1184,1185,1188,1189,1192,1199,1201,1203,1208,1210,1211,1216,1218,1220,1226,1228,1230,1235,1237,1238,1243,1245,1247,1251,1261,1262,1264,1265,1266,1273,1274,1276,1277,1278,1285,1286,1288,1289,1290,1297,1298,1300,1301,1302,1307,1308,1309,1316,1317,1319,1323,1324,1326,1330,1331,1332,1338,1339,1341,1345,1346,1348,1352,1353,1354,1358,1359,1363,1364,1365,1367,1371,1372,1377,1378,1379,1381,1386,1387,1390,1391,1394,1401,1402,1404,1406,1411,1413,1415,1422,1423,1425,1428,1432,1433,1437,1441,1442,1444,1446,1449,1451,1453,1454,1459,1461,1463,1470,1471,1473,1476,1480,1481,1485,1489,1490,1492,1494,1497,1499,1501,1502,1508,1509,1510,1512,1519,1520,1521,1525,1526,1527,1533,1534,1535,1537
-----computeFrom-----
46,47
46,48
51,52
51,53
56,57
56,58
61,62
61,63
69,70
69,71
77,78
77,79
85,86
85,87
93,94
93,95
101,102
101,103
108,109
108,110
116,117
116,118
126,127
126,128
136,137
136,138
145,146
145,147
165,166
165,167
167,168
167,169
187,188
187,189
197,198
197,199
205,206
205,207
219,220
219,221
228,229
228,230
242,243
242,244
252,253
252,254
260,261
260,262
274,275
274,276
283,284
283,285
297,298
297,299
307,308
307,309
318,319
318,320
325,326
325,327
330,331
330,332
341,342
341,343
348,349
348,350
353,354
353,355
364,365
364,366
371,372
371,373
376,377
376,378
385,386
385,387
399,400
399,401
417,418
417,419
421,422
421,423
463,464
463,465
474,475
474,476
485,486
485,487
495,496
495,497
504,505
504,506
518,519
518,520
525,526
525,527
538,539
538,540
558,559
558,560
578,579
578,580
614,615
614,616
628,629
628,630
642,643
642,644
650,651
650,652
660,661
660,662
667,668
667,669
673,674
673,675
681,682
681,683
692,693
692,694
703,704
703,705
713,714
713,715
724,725
724,726
734,735
734,736
739,740
739,741
744,745
744,746
758,759
758,760
773,774
773,775
781,782
781,783
809,810
809,811
825,826
825,827
849,850
849,851
850,851
850,852
857,858
857,859
871,872
871,873
872,873
872,874
873,874
873,875
879,880
879,881
884,885
884,886
893,894
893,895
913,914
913,915
914,915
914,916
920,921
920,922
933,934
933,935
934,935
934,936
940,941
940,942
953,954
953,955
969,970
969,971
971,972
971,973
985,986
985,987
987,988
987,989
1001,1002
1001,1003
1008,1009
1008,1010
1020,1021
1020,1022
1028,1029
1028,1030
1038,1039
1038,1040
1040,1041
1040,1042
1042,1043
1042,1044
1043,1044
1043,1045
1056,1057
1056,1058
1064,1065
1064,1066
1074,1075
1074,1076
1076,1077
1076,1078
1078,1079
1078,1080
1079,1080
1079,1081
1092,1093
1092,1094
1100,1101
1100,1102
1110,1111
1110,1112
1112,1113
1112,1114
1114,1115
1114,1116
1115,1116
1115,1117
1128,1129
1128,1130
1129,1130
1129,1131
1130,1131
1130,1132
1131,1132
1131,1133
1138,1139
1138,1140
1145,1146
1145,1147
1152,1153
1152,1154
1161,1162
1161,1163
1174,1175
1174,1176
1182,1183
1182,1184
1186,1187
1186,1188
1195,1196
1195,1197
1196,1197
1196,1198
1204,1205
1204,1206
1213,1214
1213,1215
1222,1223
1222,1224
1223,1224
1223,1225
1231,1232
1231,1233
1240,1241
1240,1242
1249,1250
1249,1251
1252,1253
1252,1254
1253,1254
1253,1255
1254,1255
1254,1256
1258,1259
1258,1260
1270,1271
1270,1272
1282,1283
1282,1284
1294,1295
1294,1296
1304,1305
1304,1306
1312,1313
1312,1314
1313,1314
1313,1315
1320,1321
1320,1322
1334,1335
1334,1336
1335,1336
1335,1337
1342,1343
1342,1344
1356,1357
1356,1358
1369,1370
1369,1371
1384,1385
1384,1386
1388,1389
1388,1390
1397,1398
1397,1399
1408,1409
1408,1410
1418,1419
1418,1420
1456,1457
1456,1458
1466,1467
1466,1468
1504,1505
1504,1506
1515,1516
1515,1517
1529,1530
1529,1531
-----guardedBy-----
222,239
277,294
313,327
336,350
359,373
587,607
582,602
584,604
589,609
583,603
664,679
662,690
730,736
887,896
974,982
975,983
990,998
991,999
1141,1177
1203,1220
1208,1216
1210,1218
1235,1243
1230,1247
1237,1245
1358,1367
1371,1381
1411,1449
1413,1451
1459,1497
1461,1499
1508,1533
1512,1537
1509,1534
-----guardedByNegation-----
310,356
313,373
333,356
336,373
-----lastLexicalUse-----
313,373
336,373
-----jump-----
313,373
336,373
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
static voidinit_config(struct cfg *cf, int argc, char **argv){    int ch, i;    char *bh[2], *bh6[2], *cp;    bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;    cf->port_min = PORT_MIN;    cf->port_max = PORT_MAX;    cf->max_ttl = SESSION_TIMEOUT;    cf->tos = TOS;    cf->rrtcp = 1;    cf->ttl_mode = TTL_UNIFIED;    cf->timeout_handler.socket_name = NULL;    cf->timeout_handler.fd = -1;    cf->timeout_handler.connected = 0;    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)	err(1, "getrlimit");    while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)	switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = TTL_INDEPENDENT;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0)		optarg += 5;	    optarg += 5;	    if(strlen(optarg) == 0)		errx(1, "timeout notification socket name too short");	    cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);	    if(cf->timeout_handler.socket_name == NULL)		err(1, "can't allocate memory");	    strcpy(cf->timeout_handler.socket_name, optarg);	    cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);	    if (cf->timeout_handler.fd == -1)		err(1, "can't create timeout socket");	    break;	case '?':	default:	    usage();	}    if (cf->rdir == NULL && cf->sdir != NULL)	errx(1, "-S switch requires -r switch");    if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }    if (cf->port_min <= 0 || cf->port_min > 65535)	errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");    if (cf->port_max <= 0 || cf->port_max > 65535)	errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");    if (cf->port_min > cf->port_max)	errx(1, "port_min should be less than port_max");    /* make sure that port_min and port_max are even */    if ((cf->port_min % 2) != 0)	cf->port_min++;    if ((cf->port_max % 2) != 0)	cf->port_max--;    cf->nextport[0] = cf->nextport[1] = cf->port_min;    cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }    for (i = 0; i < 2; i++) {	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }    i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);    if (cf->bmode != 0) {	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    } else if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }    for (i = 0; i < 2; i++) {	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }    if (cf->bindaddr[0] == NULL) {	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }}
static void
init_config(struct cfg *cf, int argc, char **argv)
init_config
struct cfg *cf
struct cfg
cfg
*cf
*
cf
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{    int ch, i;    char *bh[2], *bh6[2], *cp;    bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;    cf->port_min = PORT_MIN;    cf->port_max = PORT_MAX;    cf->max_ttl = SESSION_TIMEOUT;    cf->tos = TOS;    cf->rrtcp = 1;    cf->ttl_mode = TTL_UNIFIED;    cf->timeout_handler.socket_name = NULL;    cf->timeout_handler.fd = -1;    cf->timeout_handler.connected = 0;    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)	err(1, "getrlimit");    while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)	switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = TTL_INDEPENDENT;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0)		optarg += 5;	    optarg += 5;	    if(strlen(optarg) == 0)		errx(1, "timeout notification socket name too short");	    cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);	    if(cf->timeout_handler.socket_name == NULL)		err(1, "can't allocate memory");	    strcpy(cf->timeout_handler.socket_name, optarg);	    cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);	    if (cf->timeout_handler.fd == -1)		err(1, "can't create timeout socket");	    break;	case '?':	default:	    usage();	}    if (cf->rdir == NULL && cf->sdir != NULL)	errx(1, "-S switch requires -r switch");    if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }    if (cf->port_min <= 0 || cf->port_min > 65535)	errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");    if (cf->port_max <= 0 || cf->port_max > 65535)	errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");    if (cf->port_min > cf->port_max)	errx(1, "port_min should be less than port_max");    /* make sure that port_min and port_max are even */    if ((cf->port_min % 2) != 0)	cf->port_min++;    if ((cf->port_max % 2) != 0)	cf->port_max--;    cf->nextport[0] = cf->nextport[1] = cf->port_min;    cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));    if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }    for (i = 0; i < 2; i++) {	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }    i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);    if (cf->bmode != 0) {	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    } else if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }    for (i = 0; i < 2; i++) {	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }    if (cf->bindaddr[0] == NULL) {	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }}
int ch, i;
int ch, i;
int
ch
ch
i
i
char *bh[2], *bh6[2], *cp;
char *bh[2], *bh6[2], *cp;
char
*bh[2]
*
bh
[2]
2
*bh6[2]
*
bh6
[2]
2
*cp
*
cp
bh[0] = bh[1] = bh6[0] = bh6[1] = NULL;
bh[0] = bh[1] = bh6[0] = bh6[1] = NULL
bh[0]
bh
bh
0
bh[1] = bh6[0] = bh6[1] = NULL
bh[1]
bh
bh
1
bh6[0] = bh6[1] = NULL
bh6[0]
bh6
bh6
0
bh6[1] = NULL
bh6[1]
bh6
bh6
1
NULL
NULL
cf->port_min = PORT_MIN;
cf->port_min = PORT_MIN
cf->port_min
cf
cf
port_min
PORT_MIN
PORT_MIN
cf->port_max = PORT_MAX;
cf->port_max = PORT_MAX
cf->port_max
cf
cf
port_max
PORT_MAX
PORT_MAX
cf->max_ttl = SESSION_TIMEOUT;
cf->max_ttl = SESSION_TIMEOUT
cf->max_ttl
cf
cf
max_ttl
SESSION_TIMEOUT
SESSION_TIMEOUT
cf->tos = TOS;
cf->tos = TOS
cf->tos
cf
cf
tos
TOS
TOS
cf->rrtcp = 1;
cf->rrtcp = 1
cf->rrtcp
cf
cf
rrtcp
1
cf->ttl_mode = TTL_UNIFIED;
cf->ttl_mode = TTL_UNIFIED
cf->ttl_mode
cf
cf
ttl_mode
TTL_UNIFIED
TTL_UNIFIED
cf->timeout_handler.socket_name = NULL;
cf->timeout_handler.socket_name = NULL
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
NULL
NULL
cf->timeout_handler.fd = -1;
cf->timeout_handler.fd = -1
cf->timeout_handler.fd
cf->timeout_handler
cf
cf
timeout_handler
fd
-1
1
cf->timeout_handler.connected = 0;
cf->timeout_handler.connected = 0
cf->timeout_handler.connected
cf->timeout_handler
cf
cf
timeout_handler
connected
0
if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)	err(1, "getrlimit");
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit))
getrlimit
getrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&(cf->nofile_limit)
(cf->nofile_limit)
cf->nofile_limit
cf
cf
nofile_limit
0
err(1, "getrlimit");
err(1, "getrlimit")
err
err
1
"getrlimit"
while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1)	switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = TTL_INDEPENDENT;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0)		optarg += 5;	    optarg += 5;	    if(strlen(optarg) == 0)		errx(1, "timeout notification socket name too short");	    cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);	    if(cf->timeout_handler.socket_name == NULL)		err(1, "can't allocate memory");	    strcpy(cf->timeout_handler.socket_name, optarg);	    cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);	    if (cf->timeout_handler.fd == -1)		err(1, "can't create timeout socket");	    break;	case '?':	default:	    usage();	}
(ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")) != -1
(ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:"))
ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
ch
ch
getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
getopt
getopt
argc
argc
argv
argv
"vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:"
-1
1
switch (ch) {	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = TTL_INDEPENDENT;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0)		optarg += 5;	    optarg += 5;	    if(strlen(optarg) == 0)		errx(1, "timeout notification socket name too short");	    cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);	    if(cf->timeout_handler.socket_name == NULL)		err(1, "can't allocate memory");	    strcpy(cf->timeout_handler.socket_name, optarg);	    cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);	    if (cf->timeout_handler.fd == -1)		err(1, "can't create timeout socket");	    break;	case '?':	default:	    usage();	}
ch
ch
{	case 'f':	    cf->nodaemon = 1;	    break;	case 'l':	    bh[0] = optarg;	    bh[1] = strchr(bh[0], '/');	    if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }	    break;	case '6':	    bh6[0] = optarg;	    bh6[1] = strchr(bh6[0], '/');	    if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }	    break;	case 's':	    if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }	    cmd_sock = optarg;	    break;	case 't':	    cf->tos = atoi(optarg);	    break;	case '2':	    cf->dmode = 1;	    break;	case 'v':	    printf("Basic version: %d\n", CPROTOVER);	    for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }	    exit(0);	    break;	case 'r':	    cf->rdir = optarg;	    break;	case 'S':	    cf->sdir = optarg;	    break;	case 'R':	    cf->rrtcp = 0;	    break;	case 'p':	    pid_file = optarg;	    break;	case 'T':	    cf->max_ttl = atoi(optarg);	    break;	case 'L':	    cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);	    if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");	    if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");	    if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));	    break;	case 'm':	    cf->port_min = atoi(optarg);	    break;	case 'M':	    cf->port_max = atoi(optarg);	    break;	case 'u':	    cf->run_uname = optarg;	    cp = strchr(optarg, ':');	    if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }	    cf->run_gname = cp;	    break;	case 'F':	    cf->no_check = 1;	    break;	case 'i':	    cf->ttl_mode = TTL_INDEPENDENT;	    break;	case 'n':	    if(strncmp("unix:", optarg, 5) == 0)		optarg += 5;	    optarg += 5;	    if(strlen(optarg) == 0)		errx(1, "timeout notification socket name too short");	    cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);	    if(cf->timeout_handler.socket_name == NULL)		err(1, "can't allocate memory");	    strcpy(cf->timeout_handler.socket_name, optarg);	    cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);	    if (cf->timeout_handler.fd == -1)		err(1, "can't create timeout socket");	    break;	case '?':	default:	    usage();	}
case 'f':
'f'
cf->nodaemon = 1;
cf->nodaemon = 1
cf->nodaemon
cf
cf
nodaemon
1
break;
case 'l':
'l'
bh[0] = optarg;
bh[0] = optarg
bh[0]
bh
bh
0
optarg
optarg
bh[1] = strchr(bh[0], '/');
bh[1] = strchr(bh[0], '/')
bh[1]
bh
bh
1
strchr(bh[0], '/')
strchr
strchr
bh[0]
bh
bh
0
'/'
if (bh[1] != NULL) {		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }
bh[1] != NULL
bh[1]
bh
bh
1
NULL
NULL
{		*bh[1] = '\0';		bh[1]++;		cf->bmode = 1;	    }
*bh[1] = '\0';
*bh[1] = '\0'
*bh[1]
bh[1]
bh
bh
1
'\0'
bh[1]++;
bh[1]++
bh[1]
bh
bh
1
cf->bmode = 1;
cf->bmode = 1
cf->bmode
cf
cf
bmode
1
break;
case '6':
'6'
bh6[0] = optarg;
bh6[0] = optarg
bh6[0]
bh6
bh6
0
optarg
optarg
bh6[1] = strchr(bh6[0], '/');
bh6[1] = strchr(bh6[0], '/')
bh6[1]
bh6
bh6
1
strchr(bh6[0], '/')
strchr
strchr
bh6[0]
bh6
bh6
0
'/'
if (bh6[1] != NULL) {		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }
bh6[1] != NULL
bh6[1]
bh6
bh6
1
NULL
NULL
{		*bh6[1] = '\0';		bh6[1]++;		cf->bmode = 1;	    }
*bh6[1] = '\0';
*bh6[1] = '\0'
*bh6[1]
bh6[1]
bh6
bh6
1
'\0'
bh6[1]++;
bh6[1]++
bh6[1]
bh6
bh6
1
cf->bmode = 1;
cf->bmode = 1
cf->bmode
cf
cf
bmode
1
break;
case 's':
's'
if (strncmp("udp:", optarg, 4) == 0) {		cf->umode = 1;		optarg += 4;	    } else if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }
strncmp("udp:", optarg, 4) == 0
strncmp("udp:", optarg, 4)
strncmp
strncmp
"udp:"
optarg
optarg
4
0
{		cf->umode = 1;		optarg += 4;	    }
cf->umode = 1;
cf->umode = 1
cf->umode
cf
cf
umode
1
optarg += 4;
optarg += 4
optarg
optarg
4
if (strncmp("udp6:", optarg, 5) == 0) {		cf->umode = 6;		optarg += 5;	    } else if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }
strncmp("udp6:", optarg, 5) == 0
strncmp("udp6:", optarg, 5)
strncmp
strncmp
"udp6:"
optarg
optarg
5
0
{		cf->umode = 6;		optarg += 5;	    }
cf->umode = 6;
cf->umode = 6
cf->umode
cf
cf
umode
6
optarg += 5;
optarg += 5
optarg
optarg
5
if (strncmp("unix:", optarg, 5) == 0) {		cf->umode = 0;		optarg += 5;	    }
strncmp("unix:", optarg, 5) == 0
strncmp("unix:", optarg, 5)
strncmp
strncmp
"unix:"
optarg
optarg
5
0
{		cf->umode = 0;		optarg += 5;	    }
cf->umode = 0;
cf->umode = 0
cf->umode
cf
cf
umode
0
optarg += 5;
optarg += 5
optarg
optarg
5
cmd_sock = optarg;
cmd_sock = optarg
cmd_sock
cmd_sock
optarg
optarg
break;
case 't':
't'
cf->tos = atoi(optarg);
cf->tos = atoi(optarg)
cf->tos
cf
cf
tos
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case '2':
'2'
cf->dmode = 1;
cf->dmode = 1
cf->dmode
cf
cf
dmode
1
break;
case 'v':
'v'
printf("Basic version: %d\n", CPROTOVER);
printf("Basic version: %d\n", CPROTOVER)
printf
printf
"Basic version: %d\n"
CPROTOVER
CPROTOVER
for (i = 1; proto_caps[i].pc_id != NULL; ++i) {		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }
i = 1;
i = 1
i
i
1
proto_caps[i].pc_id != NULL
proto_caps[i].pc_id
proto_caps[i]
proto_caps
proto_caps
i
i
pc_id
NULL
NULL
++i
i
i
{		printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);	    }
printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description);
printf("Extension %s: %s\n", proto_caps[i].pc_id,		    proto_caps[i].pc_description)
printf
printf
"Extension %s: %s\n"
proto_caps[i].pc_id
proto_caps[i]
proto_caps
proto_caps
i
i
pc_id
proto_caps[i].pc_description
proto_caps[i]
proto_caps
proto_caps
i
i
pc_description
exit(0);
exit(0)
exit
exit
0
break;
case 'r':
'r'
cf->rdir = optarg;
cf->rdir = optarg
cf->rdir
cf
cf
rdir
optarg
optarg
break;
case 'S':
'S'
cf->sdir = optarg;
cf->sdir = optarg
cf->sdir
cf
cf
sdir
optarg
optarg
break;
case 'R':
'R'
cf->rrtcp = 0;
cf->rrtcp = 0
cf->rrtcp
cf
cf
rrtcp
0
break;
case 'p':
'p'
pid_file = optarg;
pid_file = optarg
pid_file
pid_file
optarg
optarg
break;
case 'T':
'T'
cf->max_ttl = atoi(optarg);
cf->max_ttl = atoi(optarg)
cf->max_ttl
cf
cf
max_ttl
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'L':
'L'
cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg);
cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg)
cf->nofile_limit.rlim_cur
cf->nofile_limit
cf
cf
nofile_limit
rlim_cur
cf->nofile_limit.rlim_max = atoi(optarg)
cf->nofile_limit.rlim_max
cf->nofile_limit
cf
cf
nofile_limit
rlim_max
atoi(optarg)
atoi
atoi
optarg
optarg
if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "setrlimit");
setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0
setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit))
setrlimit
setrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&(cf->nofile_limit)
(cf->nofile_limit)
cf->nofile_limit
cf
cf
nofile_limit
0
err(1, "setrlimit");
err(1, "setrlimit")
err
err
1
"setrlimit"
if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0)		err(1, "getrlimit");
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)) != 0
getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit))
getrlimit
getrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&(cf->nofile_limit)
(cf->nofile_limit)
cf->nofile_limit
cf
cf
nofile_limit
0
err(1, "getrlimit");
err(1, "getrlimit")
err
err
1
"getrlimit"
if (cf->nofile_limit.rlim_max < atoi(optarg))		warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));
cf->nofile_limit.rlim_max < atoi(optarg)
cf->nofile_limit.rlim_max
cf->nofile_limit
cf
cf
nofile_limit
rlim_max
atoi(optarg)
atoi
atoi
optarg
optarg
warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg));
warnx("limit allocated by setrlimit (%d) is less than "		  "requested (%d)", (int) cf->nofile_limit.rlim_max,		  atoi(optarg))
warnx
warnx
"limit allocated by setrlimit (%d) is less than "		  "requested (%d)"
(int) cf->nofile_limit.rlim_max
int
int

cf->nofile_limit.rlim_max
cf->nofile_limit
cf
cf
nofile_limit
rlim_max
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'm':
'm'
cf->port_min = atoi(optarg);
cf->port_min = atoi(optarg)
cf->port_min
cf
cf
port_min
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'M':
'M'
cf->port_max = atoi(optarg);
cf->port_max = atoi(optarg)
cf->port_max
cf
cf
port_max
atoi(optarg)
atoi
atoi
optarg
optarg
break;
case 'u':
'u'
cf->run_uname = optarg;
cf->run_uname = optarg
cf->run_uname
cf
cf
run_uname
optarg
optarg
cp = strchr(optarg, ':');
cp = strchr(optarg, ':')
cp
cp
strchr(optarg, ':')
strchr
strchr
optarg
optarg
':'
if (cp != NULL) {		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }
cp != NULL
cp
cp
NULL
NULL
{		if (cp == optarg)		    cf->run_uname = NULL;		cp[0] = '\0';		cp++;	    }
if (cp == optarg)		    cf->run_uname = NULL;
cp == optarg
cp
cp
optarg
optarg
cf->run_uname = NULL;
cf->run_uname = NULL
cf->run_uname
cf
cf
run_uname
NULL
NULL
cp[0] = '\0';
cp[0] = '\0'
cp[0]
cp
cp
0
'\0'
cp++;
cp++
cp
cp
cf->run_gname = cp;
cf->run_gname = cp
cf->run_gname
cf
cf
run_gname
cp
cp
break;
case 'F':
'F'
cf->no_check = 1;
cf->no_check = 1
cf->no_check
cf
cf
no_check
1
break;
case 'i':
'i'
cf->ttl_mode = TTL_INDEPENDENT;
cf->ttl_mode = TTL_INDEPENDENT
cf->ttl_mode
cf
cf
ttl_mode
TTL_INDEPENDENT
TTL_INDEPENDENT
break;
case 'n':
'n'
if(strncmp("unix:", optarg, 5) == 0)		optarg += 5;
strncmp("unix:", optarg, 5) == 0
strncmp("unix:", optarg, 5)
strncmp
strncmp
"unix:"
optarg
optarg
5
0
optarg += 5;
optarg += 5
optarg
optarg
5
optarg += 5;
optarg += 5
optarg
optarg
5
if(strlen(optarg) == 0)		errx(1, "timeout notification socket name too short");
strlen(optarg) == 0
strlen(optarg)
strlen
strlen
optarg
optarg
0
errx(1, "timeout notification socket name too short");
errx(1, "timeout notification socket name too short")
errx
errx
1
"timeout notification socket name too short"
cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1);
cf->timeout_handler.socket_name = (char *)malloc(strlen(optarg) + 1)
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
(char *)malloc(strlen(optarg) + 1)
char *
char
*
*
malloc(strlen(optarg) + 1)
malloc
malloc
strlen(optarg) + 1
strlen(optarg)
strlen
strlen
optarg
optarg
1
if(cf->timeout_handler.socket_name == NULL)		err(1, "can't allocate memory");
cf->timeout_handler.socket_name == NULL
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
NULL
NULL
err(1, "can't allocate memory");
err(1, "can't allocate memory")
err
err
1
"can't allocate memory"
strcpy(cf->timeout_handler.socket_name, optarg);
strcpy(cf->timeout_handler.socket_name, optarg)
strcpy
strcpy
cf->timeout_handler.socket_name
cf->timeout_handler
cf
cf
timeout_handler
socket_name
optarg
optarg
cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0);
cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0)
cf->timeout_handler.fd
cf->timeout_handler
cf
cf
timeout_handler
fd
socket(AF_UNIX, SOCK_STREAM, 0)
socket
socket
AF_UNIX
AF_UNIX
SOCK_STREAM
SOCK_STREAM
0
if (cf->timeout_handler.fd == -1)		err(1, "can't create timeout socket");
cf->timeout_handler.fd == -1
cf->timeout_handler.fd
cf->timeout_handler
cf
cf
timeout_handler
fd
-1
1
err(1, "can't create timeout socket");
err(1, "can't create timeout socket")
err
err
1
"can't create timeout socket"
break;
case '?':
'?'
default:
usage();
usage()
usage
usage
if (cf->rdir == NULL && cf->sdir != NULL)	errx(1, "-S switch requires -r switch");
cf->rdir == NULL && cf->sdir != NULL
cf->rdir == NULL
cf->rdir
cf
cf
rdir
NULL
NULL
cf->sdir != NULL
cf->sdir
cf
cf
sdir
NULL
NULL
errx(1, "-S switch requires -r switch");
errx(1, "-S switch requires -r switch")
errx
errx
1
"-S switch requires -r switch"
if (cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL) {	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }
cf->no_check == 0 && getuid() == 0 && cf->run_uname == NULL
cf->no_check == 0 && getuid() == 0
cf->no_check == 0
cf->no_check
cf
cf
no_check
0
getuid() == 0
getuid()
getuid
getuid
0
cf->run_uname == NULL
cf->run_uname
cf
cf
run_uname
NULL
NULL
{	if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}    }
if (cf->umode != 0) {	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	} else {	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}
cf->umode != 0
cf->umode
cf
cf
umode
0
{	    errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");	}
errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.");
errx(1, "running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway.")
errx
errx
1
"running this program as superuser in a remote control "	      "mode is strongly not recommended, as it poses serious security "	      "threat to your system. Use -u option to run as an unprivileged "	      "user or -F is you want to run as a superuser anyway."
{	    warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");	}
warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.");
warnx("WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning.")
warnx
warnx
"WARNING!!! Running this program as superuser is strongly "	      "not recommended, as it may pose serious security threat to "	      "your system. Use -u option to run as an unprivileged user "	      "or -F to surpress this warning."
if (cf->port_min <= 0 || cf->port_min > 65535)	errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");
cf->port_min <= 0 || cf->port_min > 65535
cf->port_min <= 0
cf->port_min
cf
cf
port_min
0
cf->port_min > 65535
cf->port_min
cf
cf
port_min
65535
errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535");
errx(1, "invalid value of the port_min argument, "	  "not in the range 1-65535")
errx
errx
1
"invalid value of the port_min argument, "	  "not in the range 1-65535"
if (cf->port_max <= 0 || cf->port_max > 65535)	errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");
cf->port_max <= 0 || cf->port_max > 65535
cf->port_max <= 0
cf->port_max
cf
cf
port_max
0
cf->port_max > 65535
cf->port_max
cf
cf
port_max
65535
errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535");
errx(1, "invalid value of the port_max argument, "	  "not in the range 1-65535")
errx
errx
1
"invalid value of the port_max argument, "	  "not in the range 1-65535"
if (cf->port_min > cf->port_max)	errx(1, "port_min should be less than port_max");
cf->port_min > cf->port_max
cf->port_min
cf
cf
port_min
cf->port_max
cf
cf
port_max
errx(1, "port_min should be less than port_max");
errx(1, "port_min should be less than port_max")
errx
errx
1
"port_min should be less than port_max"
if ((cf->port_min % 2) != 0)	cf->port_min++;
(cf->port_min % 2) != 0
(cf->port_min % 2)
cf->port_min % 2
cf->port_min
cf
cf
port_min
2
0
cf->port_min++;
cf->port_min++
cf->port_min
cf
cf
port_min
if ((cf->port_max % 2) != 0)	cf->port_max--;
(cf->port_max % 2) != 0
(cf->port_max % 2)
cf->port_max % 2
cf->port_max
cf
cf
port_max
2
0
cf->port_max--;
cf->port_max--
cf->port_max
cf
cf
port_max
cf->nextport[0] = cf->nextport[1] = cf->port_min;
cf->nextport[0] = cf->nextport[1] = cf->port_min
cf->nextport[0]
cf->nextport
cf
cf
nextport
0
cf->nextport[1] = cf->port_min
cf->nextport[1]
cf->nextport
cf
cf
nextport
1
cf->port_min
cf
cf
port_min
cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));
cf->sessions = malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
cf->sessions
cf
cf
sessions
malloc((sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
malloc
malloc
(sizeof cf->sessions[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1)
(sizeof cf->sessions[0])
sizeof cf->sessions[0]
cf->sessions[0]
cf->sessions
cf
cf
sessions
0
(((cf->port_max - cf->port_min + 1) * 2) + 1)
((cf->port_max - cf->port_min + 1) * 2) + 1
((cf->port_max - cf->port_min + 1) * 2)
(cf->port_max - cf->port_min + 1) * 2
(cf->port_max - cf->port_min + 1)
cf->port_max - cf->port_min + 1
cf->port_max - cf->port_min
cf->port_max
cf
cf
port_max
cf->port_min
cf
cf
port_min
1
2
1
cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));
cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
cf->rtp_servers
cf
cf
rtp_servers
malloc((sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
malloc
malloc
(sizeof cf->rtp_servers[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1)
(sizeof cf->rtp_servers[0])
sizeof cf->rtp_servers[0]
cf->rtp_servers[0]
cf->rtp_servers
cf
cf
rtp_servers
0
(((cf->port_max - cf->port_min + 1) * 2) + 1)
((cf->port_max - cf->port_min + 1) * 2) + 1
((cf->port_max - cf->port_min + 1) * 2)
(cf->port_max - cf->port_min + 1) * 2
(cf->port_max - cf->port_min + 1)
cf->port_max - cf->port_min + 1
cf->port_max - cf->port_min
cf->port_max
cf
cf
port_max
cf->port_min
cf
cf
port_min
1
2
1
cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1));
cf->pfds = malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
cf->pfds
cf
cf
pfds
malloc((sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1))
malloc
malloc
(sizeof cf->pfds[0]) *      (((cf->port_max - cf->port_min + 1) * 2) + 1)
(sizeof cf->pfds[0])
sizeof cf->pfds[0]
cf->pfds[0]
cf->pfds
cf
cf
pfds
0
(((cf->port_max - cf->port_min + 1) * 2) + 1)
((cf->port_max - cf->port_min + 1) * 2) + 1
((cf->port_max - cf->port_min + 1) * 2)
(cf->port_max - cf->port_min + 1) * 2
(cf->port_max - cf->port_min + 1)
cf->port_max - cf->port_min + 1
cf->port_max - cf->port_min
cf->port_max
cf
cf
port_max
cf->port_min
cf
cf
port_min
1
2
1
if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL) {	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }
bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL
bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL
bh[0] == NULL && bh[1] == NULL
bh[0] == NULL
bh[0]
bh
bh
0
NULL
NULL
bh[1] == NULL
bh[1]
bh
bh
1
NULL
NULL
bh6[0] == NULL
bh6[0]
bh6
bh6
0
NULL
NULL
bh6[1] == NULL
bh6[1]
bh6
bh6
1
NULL
NULL
{	if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");	bh[0] = "*";    }
if (cf->umode != 0)	    errx(1, "explicit binding address has to be specified in UDP "	      "command mode");
cf->umode != 0
cf->umode
cf
cf
umode
0
errx(1, "explicit binding address has to be specified in UDP "	      "command mode");
errx(1, "explicit binding address has to be specified in UDP "	      "command mode")
errx
errx
1
"explicit binding address has to be specified in UDP "	      "command mode"
bh[0] = "*";
bh[0] = "*"
bh[0]
bh
bh
0
"*"
for (i = 0; i < 2; i++) {	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }
i = 0;
i = 0
i
i
0
i < 2
i
i
2
i++
i
i
{	if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;	if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;    }
if (bh[i] != NULL && *bh[i] == '\0')	    bh[i] = NULL;
bh[i] != NULL && *bh[i] == '\0'
bh[i] != NULL
bh[i]
bh
bh
i
i
NULL
NULL
*bh[i] == '\0'
*bh[i]
bh[i]
bh
bh
i
i
'\0'
bh[i] = NULL;
bh[i] = NULL
bh[i]
bh
bh
i
i
NULL
NULL
if (bh6[i] != NULL && *bh6[i] == '\0')	    bh6[i] = NULL;
bh6[i] != NULL && *bh6[i] == '\0'
bh6[i] != NULL
bh6[i]
bh6
bh6
i
i
NULL
NULL
*bh6[i] == '\0'
*bh6[i]
bh6[i]
bh6
bh6
i
i
'\0'
bh6[i] = NULL;
bh6[i] = NULL
bh6[i]
bh6
bh6
i
i
NULL
NULL
i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1);
i = ((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1)
i
i
((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1) + ((bh6[1] == NULL) ? 0 : 1)
((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1) +      ((bh6[0] == NULL) ? 0 : 1)
((bh[0] == NULL) ? 0 : 1) + ((bh[1] == NULL) ? 0 : 1)
((bh[0] == NULL) ? 0 : 1)
(bh[0] == NULL) ? 0 : 1
(bh[0] == NULL)
bh[0] == NULL
bh[0]
bh
bh
0
NULL
NULL
0
1
((bh[1] == NULL) ? 0 : 1)
(bh[1] == NULL) ? 0 : 1
(bh[1] == NULL)
bh[1] == NULL
bh[1]
bh
bh
1
NULL
NULL
0
1
((bh6[0] == NULL) ? 0 : 1)
(bh6[0] == NULL) ? 0 : 1
(bh6[0] == NULL)
bh6[0] == NULL
bh6[0]
bh6
bh6
0
NULL
NULL
0
1
((bh6[1] == NULL) ? 0 : 1)
(bh6[1] == NULL) ? 0 : 1
(bh6[1] == NULL)
bh6[1] == NULL
bh6[1]
bh6
bh6
1
NULL
NULL
0
1
if (cf->bmode != 0) {	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    } else if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }
cf->bmode != 0
cf->bmode
cf
cf
bmode
0
{	if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");	if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");	if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);    }
if (bh[0] != NULL && bh6[0] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");
bh[0] != NULL && bh6[0] != NULL
bh[0] != NULL
bh[0]
bh
bh
0
NULL
NULL
bh6[0] != NULL
bh6[0]
bh6
bh6
0
NULL
NULL
errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both");
errx(1, "either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both")
errx
errx
1
"either IPv4 or IPv6 should be configured for external "	      "interface in bridging mode, not both"
if (bh[1] != NULL && bh6[1] != NULL)	    errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");
bh[1] != NULL && bh6[1] != NULL
bh[1] != NULL
bh[1]
bh
bh
1
NULL
NULL
bh6[1] != NULL
bh6[1]
bh6
bh6
1
NULL
NULL
errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both");
errx(1, "either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both")
errx
errx
1
"either IPv4 or IPv6 should be configured for internal "	      "interface in bridging mode, not both"
if (i != 2)	    errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);
i != 2
i
i
2
errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i);
errx(1, "incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided", i)
errx
errx
1
"incomplete configuration of the bridging mode - exactly "	      "2 listen addresses required, %d provided"
i
i
if (i != 1) {	errx(1, "exactly 1 listen addresses required, %d provided", i);    }
i != 1
i
i
1
{	errx(1, "exactly 1 listen addresses required, %d provided", i);    }
errx(1, "exactly 1 listen addresses required, %d provided", i);
errx(1, "exactly 1 listen addresses required, %d provided", i)
errx
errx
1
"exactly 1 listen addresses required, %d provided"
i
i
for (i = 0; i < 2; i++) {	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }
i = 0;
i = 0
i
i
0
i < 2
i
i
2
i++
i
i
{	cf->bindaddr[i] = NULL;	if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}	if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}    }
cf->bindaddr[i] = NULL;
cf->bindaddr[i] = NULL
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
NULL
NULL
if (bh[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}
bh[i] != NULL
bh[i]
bh
bh
i
i
NULL
NULL
{	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);	    continue;	}
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage))
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
malloc(sizeof(struct sockaddr_storage))
malloc
malloc
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE);
setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE)
setbindhost
setbindhost
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
AF_INET
AF_INET
bh[i]
bh
bh
i
i
SERVICE
SERVICE
continue;
if (bh6[i] != NULL) {	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}
bh6[i] != NULL
bh6[i]
bh6
bh6
i
i
NULL
NULL
{	    cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));	    setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);	    continue;	}
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage));
cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage))
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
malloc(sizeof(struct sockaddr_storage))
malloc
malloc
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE);
setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE)
setbindhost
setbindhost
cf->bindaddr[i]
cf->bindaddr
cf
cf
bindaddr
i
i
AF_INET6
AF_INET6
bh6[i]
bh6
bh6
i
i
SERVICE
SERVICE
continue;
if (cf->bindaddr[0] == NULL) {	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }
cf->bindaddr[0] == NULL
cf->bindaddr[0]
cf->bindaddr
cf
cf
bindaddr
0
NULL
NULL
{	cf->bindaddr[0] = cf->bindaddr[1];	cf->bindaddr[1] = NULL;    }
cf->bindaddr[0] = cf->bindaddr[1];
cf->bindaddr[0] = cf->bindaddr[1]
cf->bindaddr[0]
cf->bindaddr
cf
cf
bindaddr
0
cf->bindaddr[1]
cf->bindaddr
cf
cf
bindaddr
1
cf->bindaddr[1] = NULL;
cf->bindaddr[1] = NULL
cf->bindaddr[1]
cf->bindaddr
cf
cf
bindaddr
1
NULL
NULL
-----joern-----
(999,690,0)
(956,645,0)
(38,979,0)
(752,554,0)
(518,589,0)
(116,216,0)
(872,815,0)
(546,0,0)
(814,510,0)
(211,518,0)
(906,59,0)
(730,384,0)
(387,342,0)
(652,216,0)
(946,506,0)
(455,385,0)
(697,88,0)
(439,117,0)
(832,135,0)
(482,268,0)
(999,645,0)
(787,984,0)
(768,176,0)
(706,411,0)
(872,697,0)
(872,469,0)
(650,587,0)
(447,235,0)
(518,96,0)
(451,440,0)
(650,531,0)
(888,466,0)
(518,997,0)
(409,176,0)
(930,543,0)
(993,821,0)
(678,303,0)
(897,176,0)
(27,281,0)
(302,838,0)
(660,176,0)
(73,821,0)
(572,684,0)
(334,176,0)
(369,234,0)
(636,526,0)
(447,342,0)
(61,883,0)
(543,342,0)
(9,884,0)
(341,20,0)
(632,471,0)
(339,660,0)
(437,176,0)
(136,141,0)
(513,485,0)
(903,235,0)
(908,497,0)
(997,176,0)
(41,929,0)
(137,175,0)
(729,302,0)
(686,846,0)
(942,892,0)
(370,496,0)
(294,774,0)
(684,525,0)
(872,854,0)
(629,604,0)
(408,176,0)
(85,268,0)
(215,316,0)
(513,733,0)
(614,28,0)
(810,444,0)
(480,627,0)
(960,696,0)
(699,821,0)
(517,544,0)
(562,63,0)
(526,180,0)
(518,214,0)
(610,815,0)
(163,506,0)
(771,410,0)
(984,151,0)
(839,925,0)
(857,394,0)
(714,584,0)
(399,600,0)
(10,446,0)
(555,447,0)
(685,176,0)
(604,821,0)
(366,834,0)
(319,775,0)
(627,451,0)
(581,667,0)
(883,821,0)
(938,403,0)
(289,578,0)
(339,825,0)
(101,821,0)
(25,176,0)
(240,54,0)
(382,901,0)
(742,877,0)
(269,342,0)
(339,592,0)
(456,176,0)
(39,183,0)
(743,480,0)
(36,990,0)
(474,821,0)
(707,460,0)
(647,821,0)
(164,839,0)
(841,352,0)
(773,712,0)
(515,711,0)
(269,235,0)
(192,850,0)
(423,868,0)
(751,591,0)
(639,504,0)
(402,128,0)
(683,685,0)
(623,409,0)
(417,627,0)
(867,97,0)
(365,497,0)
(735,430,0)
(20,688,0)
(995,821,0)
(646,176,0)
(748,105,0)
(497,176,0)
(93,336,0)
(27,863,0)
(324,243,0)
(580,796,0)
(808,506,0)
(940,866,0)
(703,821,0)
(877,887,0)
(200,800,0)
(181,322,0)
(311,800,0)
(518,281,0)
(923,523,0)
(872,807,0)
(872,214,0)
(72,357,0)
(833,476,0)
(128,402,0)
(360,476,0)
(832,825,0)
(961,130,0)
(133,137,0)
(122,332,0)
(135,388,0)
(802,652,0)
(832,997,0)
(326,130,0)
(339,407,0)
(682,849,0)
(518,469,0)
(56,375,0)
(576,506,0)
(535,806,0)
(377,367,0)
(148,953,0)
(754,123,0)
(733,298,0)
(231,23,0)
(557,291,0)
(605,772,0)
(258,834,0)
(261,176,0)
(457,407,0)
(744,490,0)
(199,492,0)
(954,792,0)
(477,506,0)
(756,176,0)
(822,838,0)
(125,441,0)
(904,821,0)
(156,372,0)
(321,401,0)
(304,281,0)
(499,648,0)
(840,905,0)
(260,697,0)
(518,584,0)
(842,417,0)
(178,821,0)
(518,700,0)
(339,96,0)
(497,908,0)
(28,673,0)
(632,170,0)
(243,528,0)
(732,595,0)
(410,771,0)
(518,23,0)
(926,124,0)
(27,697,0)
(89,792,0)
(974,821,0)
(874,691,0)
(796,934,0)
(205,781,0)
(114,437,0)
(540,39,0)
(481,33,0)
(269,176,0)
(832,815,0)
(819,334,0)
(720,234,0)
(346,402,0)
(35,627,0)
(353,924,0)
(1000,96,0)
(589,234,0)
(49,999,0)
(556,980,0)
(518,411,0)
(27,184,0)
(872,311,0)
(503,980,0)
(12,821,0)
(290,135,0)
(305,291,0)
(981,966,0)
(380,821,0)
(140,176,0)
(979,690,0)
(518,351,0)
(758,821,0)
(518,839,0)
(44,372,0)
(832,23,0)
(299,891,0)
(705,87,0)
(404,559,0)
(864,990,0)
(832,344,0)
(141,136,0)
(762,663,0)
(878,645,0)
(872,872,0)
(693,971,0)
(80,884,0)
(671,2,0)
(461,889,0)
(13,534,0)
(302,883,0)
(676,999,0)
(441,484,0)
(378,76,0)
(384,730,0)
(444,927,0)
(238,821,0)
(330,504,0)
(27,218,0)
(7,821,0)
(872,403,0)
(494,506,0)
(571,192,0)
(61,627,0)
(117,578,0)
(402,312,0)
(811,464,0)
(770,766,0)
(27,807,0)
(20,341,0)
(825,688,0)
(866,235,0)
(699,923,0)
(906,440,0)
(496,26,0)
(268,85,0)
(851,731,0)
(315,501,0)
(307,80,0)
(631,681,0)
(81,478,0)
(544,883,0)
(737,954,0)
(683,986,0)
(339,846,0)
(896,214,0)
(518,206,0)
(607,960,0)
(318,601,0)
(529,821,0)
(62,759,0)
(339,815,0)
(45,70,0)
(666,163,0)
(27,351,0)
(267,920,0)
(339,184,0)
(518,966,0)
(441,418,0)
(91,660,0)
(651,339,0)
(92,53,0)
(327,506,0)
(872,476,0)
(518,592,0)
(375,635,0)
(683,12,0)
(878,384,0)
(143,506,0)
(206,824,0)
(760,151,0)
(58,506,0)
(167,60,0)
(248,1,0)
(407,470,0)
(351,516,0)
(969,176,0)
(226,132,0)
(322,440,0)
(416,63,0)
(196,629,0)
(872,842,0)
(265,311,0)
(832,311,0)
(832,966,0)
(284,44,0)
(150,856,0)
(728,176,0)
(357,72,0)
(710,131,0)
(832,839,0)
(37,598,0)
(941,953,0)
(339,218,0)
(577,794,0)
(87,705,0)
(920,176,0)
(690,979,0)
(563,633,0)
(210,334,0)
(736,969,0)
(832,732,0)
(955,791,0)
(16,331,0)
(339,589,0)
(424,629,0)
(239,696,0)
(476,176,0)
(163,666,0)
(271,609,0)
(339,872,0)
(80,891,0)
(214,604,0)
(872,480,0)
(100,176,0)
(432,318,0)
(363,9,0)
(282,317,0)
(603,269,0)
(369,652,0)
(549,308,0)
(288,932,0)
(750,821,0)
(893,628,0)
(85,176,0)
(268,659,0)
(27,997,0)
(340,294,0)
(429,821,0)
(925,821,0)
(145,176,0)
(458,141,0)
(67,821,0)
(865,338,0)
(229,369,0)
(664,873,0)
(928,169,0)
(60,167,0)
(27,407,0)
(399,624,0)
(564,848,0)
(60,754,0)
(952,887,0)
(208,587,0)
(641,892,0)
(728,342,0)
(29,269,0)
(462,176,0)
(401,689,0)
(955,282,0)
(484,902,0)
(213,132,0)
(478,821,0)
(832,476,0)
(16,964,0)
(518,854,0)
(394,866,0)
(544,627,0)
(8,650,0)
(217,332,0)
(453,510,0)
(446,176,0)
(339,135,0)
(636,909,0)
(726,821,0)
(514,303,0)
(648,451,0)
(141,176,0)
(892,417,0)
(615,25,0)
(892,604,0)
(272,825,0)
(396,944,0)
(718,640,0)
(919,83,0)
(872,322,0)
(903,765,0)
(170,765,0)
(818,180,0)
(109,929,0)
(1,248,0)
(27,322,0)
(47,184,0)
(86,227,0)
(103,337,0)
(884,312,0)
(719,12,0)
(845,515,0)
(476,53,0)
(741,421,0)
(872,462,0)
(921,237,0)
(171,216,0)
(100,53,0)
(963,506,0)
(255,821,0)
(602,821,0)
(792,89,0)
(806,406,0)
(579,25,0)
(546,771,0)
(860,941,0)
(454,870,0)
(832,832,0)
(352,785,0)
(27,462,0)
(508,887,0)
(368,285,0)
(66,100,0)
(872,584,0)
(148,478,0)
(832,897,0)
(571,822,0)
(945,206,0)
(518,807,0)
(11,756,0)
(997,880,0)
(53,108,0)
(872,339,0)
(756,11,0)
(89,151,0)
(755,540,0)
(460,427,0)
(536,997,0)
(195,455,0)
(112,925,0)
(27,476,0)
(469,992,0)
(402,167,0)
(809,34,0)
(643,506,0)
(964,243,0)
(988,293,0)
(87,216,0)
(216,87,0)
(177,559,0)
(343,83,0)
(453,645,0)
(76,507,0)
(159,79,0)
(339,914,0)
(825,176,0)
(872,135,0)
(28,464,0)
(173,793,0)
(1,617,0)
(667,796,0)
(872,825,0)
(339,446,0)
(683,699,0)
(160,857,0)
(905,587,0)
(489,285,0)
(328,880,0)
(908,711,0)
(23,529,0)
(518,353,0)
(872,218,0)
(925,112,0)
(789,506,0)
(832,206,0)
(757,997,0)
(394,857,0)
(55,773,0)
(951,497,0)
(345,821,0)
(574,821,0)
(27,933,0)
(583,848,0)
(518,403,0)
(82,822,0)
(518,407,0)
(848,627,0)
(303,151,0)
(27,732,0)
(797,838,0)
(196,883,0)
(219,774,0)
(75,89,0)
(259,183,0)
(462,384,0)
(759,883,0)
(312,83,0)
(26,728,0)
(814,293,0)
(129,281,0)
(18,821,0)
(261,218,0)
(339,351,0)
(704,484,0)
(887,151,0)
(924,176,0)
(872,732,0)
(992,977,0)
(823,285,0)
(878,293,0)
(771,546,0)
(571,87,0)
(143,537,0)
(990,36,0)
(872,353,0)
(796,667,0)
(127,401,0)
(427,460,0)
(134,85,0)
(684,628,0)
(832,145,0)
(291,176,0)
(518,897,0)
(31,451,0)
(542,592,0)
(635,127,0)
(159,70,0)
(936,442,0)
(872,344,0)
(532,629,0)
(649,440,0)
(543,235,0)
(507,473,0)
(74,151,0)
(479,369,0)
(713,598,0)
(872,27,0)
(281,490,0)
(537,545,0)
(491,632,0)
(107,648,0)
(155,341,0)
(518,339,0)
(485,513,0)
(832,700,0)
(518,908,0)
(518,422,0)
(298,731,0)
(407,176,0)
(40,214,0)
(980,54,0)
(848,564,0)
(466,888,0)
(652,369,0)
(391,107,0)
(677,716,0)
(617,58,0)
(760,442,0)
(529,478,0)
(146,734,0)
(411,699,0)
(865,956,0)
(933,262,0)
(955,793,0)
(830,125,0)
(691,478,0)
(294,151,0)
(832,322,0)
(944,100,0)
(370,269,0)
(121,466,0)
(580,570,0)
(832,589,0)
(617,1,0)
(493,506,0)
(672,593,0)
(854,647,0)
(792,954,0)
(339,854,0)
(872,592,0)
(518,81,0)
(721,821,0)
(406,769,0)
(106,140,0)
(184,176,0)
(624,399,0)
(980,176,0)
(858,175,0)
(520,531,0)
(902,484,0)
(929,587,0)
(849,391,0)
(794,124,0)
(935,587,0)
(451,627,0)
(383,903,0)
(807,883,0)
(854,176,0)
(790,349,0)
(36,977,0)
(518,462,0)
(661,689,0)
(54,980,0)
(500,473,0)
(443,262,0)
(959,243,0)
(832,353,0)
(313,612,0)
(27,966,0)
(447,979,0)
(547,726,0)
(734,793,0)
(690,999,0)
(470,506,0)
(635,375,0)
(564,423,0)
(381,821,0)
(153,984,0)
(859,80,0)
(486,237,0)
(598,506,0)
(890,730,0)
(17,711,0)
(32,453,0)
(9,176,0)
(877,742,0)
(832,27,0)
(541,141,0)
(293,814,0)
(593,868,0)
(832,218,0)
(838,822,0)
(869,964,0)
(786,478,0)
(266,595,0)
(832,422,0)
(26,496,0)
(761,85,0)
(76,417,0)
(316,821,0)
(295,969,0)
(216,652,0)
(270,76,0)
(817,34,0)
(237,495,0)
(496,370,0)
(649,59,0)
(244,235,0)
(688,863,0)
(894,821,0)
(291,775,0)
(369,451,0)
(778,821,0)
(492,587,0)
(296,33,0)
(629,417,0)
(979,447,0)
(698,61,0)
(569,852,0)
(286,407,0)
(872,81,0)
(897,856,0)
(740,516,0)
(519,148,0)
(339,81,0)
(899,649,0)
(590,488,0)
(102,990,0)
(887,877,0)
(100,169,0)
(518,145,0)
(717,322,0)
(317,506,0)
(971,417,0)
(180,176,0)
(983,427,0)
(512,635,0)
(518,437,0)
(783,489,0)
(732,176,0)
(139,470,0)
(593,440,0)
(387,235,0)
(204,559,0)
(364,933,0)
(27,660,0)
(438,779,0)
(325,408,0)
(809,175,0)
(454,587,0)
(631,440,0)
(889,628,0)
(832,807,0)
(619,908,0)
(518,446,0)
(76,604,0)
(52,151,0)
(759,627,0)
(518,842,0)
(562,176,0)
(638,180,0)
(117,600,0)
(27,825,0)
(450,821,0)
(518,732,0)
(339,700,0)
(747,868,0)
(198,534,0)
(95,353,0)
(35,126,0)
(2,250,0)
(633,769,0)
(107,391,0)
(15,688,0)
(309,35,0)
(355,518,0)
(339,462,0)
(27,846,0)
(361,966,0)
(616,649,0)
(692,778,0)
(595,821,0)
(376,261,0)
(182,166,0)
(168,515,0)
(862,564,0)
(311,176,0)
(760,278,0)
(872,933,0)
(832,908,0)
(518,697,0)
(518,660,0)
(342,663,0)
(600,126,0)
(866,176,0)
(372,44,0)
(884,298,0)
(898,927,0)
(221,821,0)
(469,649,0)
(763,821,0)
(339,997,0)
(453,384,0)
(127,635,0)
(689,176,0)
(22,61,0)
(183,176,0)
(339,480,0)
(104,659,0)
(905,312,0)
(832,469,0)
(715,145,0)
(832,281,0)
(202,562,0)
(158,821,0)
(631,59,0)
(665,705,0)
(402,298,0)
(27,480,0)
(415,923,0)
(356,285,0)
(880,821,0)
(27,135,0)
(813,439,0)
(627,417,0)
(235,506,0)
(522,37,0)
(375,595,0)
(150,227,0)
(712,267,0)
(544,509,0)
(21,447,0)
(439,906,0)
(459,897,0)
(537,143,0)
(405,732,0)
(565,400,0)
(872,422,0)
(725,902,0)
(262,821,0)
(397,506,0)
(70,248,0)
(339,839,0)
(273,442,0)
(279,302,0)
(625,370,0)
(174,506,0)
(759,591,0)
(518,846,0)
(868,593,0)
(430,845,0)
(591,759,0)
(6,821,0)
(184,668,0)
(573,821,0)
(57,878,0)
(788,992,0)
(657,852,0)
(27,872,0)
(515,845,0)
(256,61,0)
(832,184,0)
(374,695,0)
(395,728,0)
(646,726,0)
(225,408,0)
(518,476,0)
(832,872,0)
(96,342,0)
(884,587,0)
(94,821,0)
(353,934,0)
(779,34,0)
(705,681,0)
(339,966,0)
(339,933,0)
(829,51,0)
(706,176,0)
(884,80,0)
(832,81,0)
(852,851,0)
(848,883,0)
(339,322,0)
(949,100,0)
(986,506,0)
(972,422,0)
(868,423,0)
(681,631,0)
(872,832,0)
(65,700,0)
(27,96,0)
(387,176,0)
(314,839,0)
(27,842,0)
(971,604,0)
(212,775,0)
(63,385,0)
(795,832,0)
(357,234,0)
(969,159,0)
(74,774,0)
(766,440,0)
(679,897,0)
(276,167,0)
(516,506,0)
(362,525,0)
(900,97,0)
(358,510,0)
(852,774,0)
(518,184,0)
(433,842,0)
(954,105,0)
(598,192,0)
(421,914,0)
(727,821,0)
(832,256,0)
(851,402,0)
(454,298,0)
(815,169,0)
(263,27,0)
(903,176,0)
(668,821,0)
(333,387,0)
(1,888,0)
(844,506,0)
(339,732,0)
(19,218,0)
(845,430,0)
(339,23,0)
(628,684,0)
(832,697,0)
(855,851,0)
(540,176,0)
(115,681,0)
(540,645,0)
(490,506,0)
(302,627,0)
(685,683,0)
(212,545,0)
(978,584,0)
(518,27,0)
(712,773,0)
(465,74,0)
(339,832,0)
(872,351,0)
(872,206,0)
(970,261,0)
(59,72,0)
(14,150,0)
(601,771,0)
(552,17,0)
(27,353,0)
(872,411,0)
(734,690,0)
(87,571,0)
(393,506,0)
(442,936,0)
(748,294,0)
(241,26,0)
(88,176,0)
(511,492,0)
(269,370,0)
(186,772,0)
(76,193,0)
(659,104,0)
(515,163,0)
(27,81,0)
(277,854,0)
(878,176,0)
(816,851,0)
(147,647,0)
(518,135,0)
(69,825,0)
(467,453,0)
(88,697,0)
(668,554,0)
(135,176,0)
(371,732,0)
(600,399,0)
(933,176,0)
(969,645,0)
(435,821,0)
(193,76,0)
(335,332,0)
(606,17,0)
(206,176,0)
(339,807,0)
(35,883,0)
(332,774,0)
(626,351,0)
(766,781,0)
(354,507,0)
(267,712,0)
(791,136,0)
(193,850,0)
(142,832,0)
(256,976,0)
(531,650,0)
(872,660,0)
(403,176,0)
(505,850,0)
(384,821,0)
(895,742,0)
(768,486,0)
(413,357,0)
(190,294,0)
(339,281,0)
(600,117,0)
(357,451,0)
(832,407,0)
(659,44,0)
(771,601,0)
(733,513,0)
(903,342,0)
(975,37,0)
(820,409,0)
(967,193,0)
(791,955,0)
(222,546,0)
(425,183,0)
(27,446,0)
(79,159,0)
(390,88,0)
(872,407,0)
(437,645,0)
(170,506,0)
(339,403,0)
(518,987,0)
(27,23,0)
(881,194,0)
(971,507,0)
(852,587,0)
(27,437,0)
(655,565,0)
(525,176,0)
(658,953,0)
(609,317,0)
(124,794,0)
(922,664,0)
(387,79,0)
(118,6,0)
(431,648,0)
(105,748,0)
(408,515,0)
(27,589,0)
(543,572,0)
(20,421,0)
(402,851,0)
(117,439,0)
(81,941,0)
(44,659,0)
(183,235,0)
(27,839,0)
(275,821,0)
(871,196,0)
(832,446,0)
(917,624,0)
(23,176,0)
(342,821,0)
(352,699,0)
(687,344,0)
(348,728,0)
(929,80,0)
(359,673,0)
(885,79,0)
(947,866,0)
(331,16,0)
(436,713,0)
(861,706,0)
(48,821,0)
(254,506,0)
(601,318,0)
(798,6,0)
(976,108,0)
(298,733,0)
(339,206,0)
(804,712,0)
(936,742,0)
(777,646,0)
(681,705,0)
(884,167,0)
(697,796,0)
(527,175,0)
(613,821,0)
(487,716,0)
(924,353,0)
(985,636,0)
(646,318,0)
(223,406,0)
(630,768,0)
(843,902,0)
(785,352,0)
(566,131,0)
(472,821,0)
(448,567,0)
(336,176,0)
(832,480,0)
(849,971,0)
(593,59,0)
(907,151,0)
(916,986,0)
(644,683,0)
(339,344,0)
(191,126,0)
(350,331,0)
(510,453,0)
(642,884,0)
(320,388,0)
(518,218,0)
(648,107,0)
(137,125,0)
(113,311,0)
(913,570,0)
(232,5,0)
(280,501,0)
(209,206,0)
(97,388,0)
(872,446,0)
(78,367,0)
(338,865,0)
(765,903,0)
(34,779,0)
(523,923,0)
(332,587,0)
(800,821,0)
(464,176,0)
(441,125,0)
(803,933,0)
(911,480,0)
(578,117,0)
(27,214,0)
(943,387,0)
(832,351,0)
(883,196,0)
(392,909,0)
(711,17,0)
(846,163,0)
(689,800,0)
(664,598,0)
(621,956,0)
(832,854,0)
(411,706,0)
(455,25,0)
(339,422,0)
(484,441,0)
(994,821,0)
(832,660,0)
(409,276,0)
(422,451,0)
(956,865,0)
(318,646,0)
(89,774,0)
(385,63,0)
(650,278,0)
(832,411,0)
(294,748,0)
(518,815,0)
(96,176,0)
(659,268,0)
(962,650,0)
(247,233,0)
(846,336,0)
(339,437,0)
(27,422,0)
(27,700,0)
(27,339,0)
(61,256,0)
(27,145,0)
(596,924,0)
(772,478,0)
(889,545,0)
(144,278,0)
(709,471,0)
(80,929,0)
(594,9,0)
(120,903,0)
(663,342,0)
(673,28,0)
(518,344,0)
(31,578,0)
(689,401,0)
(765,170,0)
(339,353,0)
(660,316,0)
(236,906,0)
(218,986,0)
(98,471,0)
(20,176,0)
(105,954,0)
(283,660,0)
(931,150,0)
(543,176,0)
(518,518,0)
(123,754,0)
(234,821,0)
(502,140,0)
(550,344,0)
(310,112,0)
(131,58,0)
(50,821,0)
(824,506,0)
(339,214,0)
(339,584,0)
(950,821,0)
(694,872,0)
(887,278,0)
(622,713,0)
(189,140,0)
(674,706,0)
(782,700,0)
(303,278,0)
(776,454,0)
(162,666,0)
(578,31,0)
(538,96,0)
(910,446,0)
(875,976,0)
(471,632,0)
(180,526,0)
(882,422,0)
(509,108,0)
(649,469,0)
(525,684,0)
(518,933,0)
(745,20,0)
(756,235,0)
(624,892,0)
(872,589,0)
(183,39,0)
(31,234,0)
(998,410,0)
(832,584,0)
(670,570,0)
(276,409,0)
(423,564,0)
(463,175,0)
(872,897,0)
(27,854,0)
(415,927,0)
(412,821,0)
(242,464,0)
(918,304,0)
(445,31,0)
(884,9,0)
(696,960,0)
(228,462,0)
(27,815,0)
(886,821,0)
(521,81,0)
(367,176,0)
(30,878,0)
(42,809,0)
(154,567,0)
(257,756,0)
(826,856,0)
(293,878,0)
(634,357,0)
(982,122,0)
(33,176,0)
(909,636,0)
(27,206,0)
(34,809,0)
(287,587,0)
(99,821,0)
(27,908,0)
(336,846,0)
(609,176,0)
(872,700,0)
(554,668,0)
(339,476,0)
(957,592,0)
(812,403,0)
(64,821,0)
(100,944,0)
(780,145,0)
(46,748,0)
(870,176,0)
(837,870,0)
(192,571,0)
(126,35,0)
(426,664,0)
(742,936,0)
(218,261,0)
(25,455,0)
(339,518,0)
(483,411,0)
(753,633,0)
(373,437,0)
(923,699,0)
(12,683,0)
(784,901,0)
(872,839,0)
(379,488,0)
(515,408,0)
(832,214,0)
(645,506,0)
(525,384,0)
(872,997,0)
(339,339,0)
(739,31,0)
(934,821,0)
(251,462,0)
(680,956,0)
(71,821,0)
(969,384,0)
(570,580,0)
(140,384,0)
(145,778,0)
(530,598,0)
(161,89,0)
(498,124,0)
(27,403,0)
(509,544,0)
(620,689,0)
(227,150,0)
(398,609,0)
(832,842,0)
(300,932,0)
(832,403,0)
(110,137,0)
(991,136,0)
(27,584,0)
(183,342,0)
(197,247,0)
(192,598,0)
(793,734,0)
(702,870,0)
(250,580,0)
(835,785,0)
(966,176,0)
(927,415,0)
(939,821,0)
(964,16,0)
(828,337,0)
(965,5,0)
(386,906,0)
(150,688,0)
(675,766,0)
(172,604,0)
(648,234,0)
(711,821,0)
(815,176,0)
(971,849,0)
(518,872,0)
(27,469,0)
(923,415,0)
(159,969,0)
(510,814,0)
(618,691,0)
(850,193,0)
(545,537,0)
(728,26,0)
(119,184,0)
(958,809,0)
(249,645,0)
(990,59,0)
(471,176,0)
(572,543,0)
(722,506,0)
(996,865,0)
(934,796,0)
(560,338,0)
(419,567,0)
(902,175,0)
(539,872,0)
(872,23,0)
(892,624,0)
(375,176,0)
(592,821,0)
(839,176,0)
(230,824,0)
(84,506,0)
(27,897,0)
(27,256,0)
(920,267,0)
(79,387,0)
(352,33,0)
(486,768,0)
(640,478,0)
(185,20,0)
(831,208,0)
(872,281,0)
(929,278,0)
(167,891,0)
(150,176,0)
(70,159,0)
(165,589,0)
(654,685,0)
(775,291,0)
(27,27,0)
(866,394,0)
(832,437,0)
(723,349,0)
(410,97,0)
(872,846,0)
(876,463,0)
(27,411,0)
(756,342,0)
(793,955,0)
(879,821,0)
(872,966,0)
(63,562,0)
(956,176,0)
(559,204,0)
(97,262,0)
(434,821,0)
(853,807,0)
(169,977,0)
(449,821,0)
(406,806,0)
(838,302,0)
(352,986,0)
(391,849,0)
(51,821,0)
(568,664,0)
(179,248,0)
(125,137,0)
(518,480,0)
(452,746,0)
(347,695,0)
(292,506,0)
(822,571,0)
(72,59,0)
(708,74,0)
(558,247,0)
(575,81,0)
(769,633,0)
(274,713,0)
(832,846,0)
(420,276,0)
(628,889,0)
(701,544,0)
(728,235,0)
(126,600,0)
(323,506,0)
(684,572,0)
(801,705,0)
(339,27,0)
(339,897,0)
(446,421,0)
(832,933,0)
(749,807,0)
(253,696,0)
(832,518,0)
(669,394,0)
(872,518,0)
(308,151,0)
(157,312,0)
(447,176,0)
(990,440,0)
(533,27,0)
(385,495,0)
(872,96,0)
(414,540,0)
(140,502,0)
(872,184,0)
(268,796,0)
(402,587,0)
(131,176,0)
(97,410,0)
(872,256,0)
(580,250,0)
(207,339,0)
(738,243,0)
(584,821,0)
(850,192,0)
(453,176,0)
(466,334,0)
(166,506,0)
(339,256,0)
(588,572,0)
(781,766,0)
(0,546,0)
(847,135,0)
(344,235,0)
(775,212,0)
(832,592,0)
(456,905,0)
(912,760,0)
(905,456,0)
(281,304,0)
(339,145,0)
(339,908,0)
(805,815,0)
(518,832,0)
(851,852,0)
(111,848,0)
(582,850,0)
(906,439,0)
(585,456,0)
(872,437,0)
(39,540,0)
(866,342,0)
(599,593,0)
(870,454,0)
(285,489,0)
(540,384,0)
(597,529,0)
(832,821,0)
(956,384,0)
(548,375,0)
(440,451,0)
(475,821,0)
(264,23,0)
(586,456,0)
(545,212,0)
(243,964,0)
(140,645,0)
(27,311,0)
(525,645,0)
(367,143,0)
(201,631,0)
(33,352,0)
(339,842,0)
(872,145,0)
(59,821,0)
(570,176,0)
(526,636,0)
(276,587,0)
(138,440,0)
(501,507,0)
(888,1,0)
(332,122,0)
(90,821,0)
(188,580,0)
(4,842,0)
(24,971,0)
(344,176,0)
(339,411,0)
(999,176,0)
(927,444,0)
(611,559,0)
(690,734,0)
(968,768,0)
(97,176,0)
(334,466,0)
(633,176,0)
(832,96,0)
(27,518,0)
(401,127,0)
(27,592,0)
(518,311,0)
(27,344,0)
(799,204,0)
(306,924,0)
(20,856,0)
(700,59,0)
(545,889,0)
(389,756,0)
(317,282,0)
(150,421,0)
(403,726,0)
(989,631,0)
(417,506,0)
(827,822,0)
(769,406,0)
(832,339,0)
(464,28,0)
(468,124,0)
(836,351,0)
(754,60,0)
(442,760,0)
(766,59,0)
(832,462,0)
(54,765,0)
(77,685,0)
(856,987,0)
(203,304,0)
(428,920,0)
(966,166,0)
(553,128,0)
(764,759,0)
(999,384,0)
(152,646,0)
(937,128,0)
(637,72,0)
(478,640,0)
(128,176,0)
(43,821,0)
(136,791,0)
(662,35,0)
(518,825,0)
(872,908,0)
(834,598,0)
(304,176,0)
(68,746,0)
(329,194,0)
(518,322,0)
(351,176,0)
(248,70,0)
(301,88,0)
(245,821,0)
(518,256,0)
(27,832,0)
(767,562,0)
(250,2,0)
(246,920,0)
(224,525,0)
(282,955,0)
(948,107,0)
(339,469,0)
(297,731,0)
(973,441,0)
(656,589,0)
(724,854,0)
(629,196,0)
(915,543,0)
(243,220,0)
(3,640,0)
(252,696,0)
(339,311,0)
(561,17,0)
(187,486,0)
(58,617,0)
(339,697,0)
(653,336,0)
(551,760,0)
(524,821,0)
(516,740,1)
(998,97,1)
(518,584,1)
(882,972,1)
(545,212,1)
(163,666,1)
(221,647,1)
(352,986,1)
(814,293,1)
(74,708,1)
(129,304,1)
(943,333,1)
(906,386,1)
(179,70,1)
(705,665,1)
(698,591,1)
(339,732,1)
(395,247,1)
(298,733,1)
(193,76,1)
(580,570,1)
(509,544,1)
(869,886,1)
(543,915,1)
(59,72,1)
(226,773,1)
(182,966,1)
(38,447,1)
(527,6,1)
(49,676,1)
(27,854,1)
(449,592,1)
(711,17,1)
(872,311,1)
(261,176,1)
(778,692,1)
(629,417,1)
(519,941,1)
(999,384,1)
(518,966,1)
(522,944,1)
(308,549,1)
(852,569,1)
(515,168,1)
(370,269,1)
(150,688,1)
(384,730,1)
(832,422,1)
(872,145,1)
(277,608,1)
(126,35,1)
(975,522,1)
(965,427,1)
(144,303,1)
(798,118,1)
(588,543,1)
(27,23,1)
(680,621,1)
(521,691,1)
(692,145,1)
(763,845,1)
(183,425,1)
(852,587,1)
(354,501,1)
(111,349,1)
(462,176,1)
(518,407,1)
(582,193,1)
(269,342,1)
(148,478,1)
(304,176,1)
(783,285,1)
(202,455,1)
(832,480,1)
(86,150,1)
(436,274,1)
(27,407,1)
(947,940,1)
(837,122,1)
(27,908,1)
(315,130,1)
(407,176,1)
(830,137,1)
(27,322,1)
(872,584,1)
(759,62,1)
(97,900,1)
(339,184,1)
(9,176,1)
(540,176,1)
(27,411,1)
(644,685,1)
(872,339,1)
(589,165,1)
(5,232,1)
(339,351,1)
(268,796,1)
(958,175,1)
(720,589,1)
(921,486,1)
(53,92,1)
(934,796,1)
(878,30,1)
(971,604,1)
(872,214,1)
(91,608,1)
(887,151,1)
(157,905,1)
(442,760,1)
(850,582,1)
(446,176,1)
(80,884,1)
(951,365,1)
(920,246,1)
(149,237,1)
(424,532,1)
(446,910,1)
(832,872,1)
(402,312,1)
(901,784,1)
(940,901,1)
(416,562,1)
(650,962,1)
(339,872,1)
(867,546,1)
(564,848,1)
(926,498,1)
(76,604,1)
(476,360,1)
(518,422,1)
(216,652,1)
(548,56,1)
(530,984,1)
(685,654,1)
(246,428,1)
(756,389,1)
(907,399,1)
(339,908,1)
(140,384,1)
(869,879,1)
(140,176,1)
(518,403,1)
(843,725,1)
(222,0,1)
(223,934,1)
(810,411,1)
(913,132,1)
(469,649,1)
(66,598,1)
(135,847,1)
(140,106,1)
(841,33,1)
(27,732,1)
(869,727,1)
(556,503,1)
(615,579,1)
(546,0,1)
(980,176,1)
(164,314,1)
(777,152,1)
(945,516,1)
(339,697,1)
(966,361,1)
(697,88,1)
(942,143,1)
(243,528,1)
(339,933,1)
(766,675,1)
(464,176,1)
(238,53,1)
(453,645,1)
(456,176,1)
(787,151,1)
(770,59,1)
(87,705,1)
(44,659,1)
(990,440,1)
(884,167,1)
(967,76,1)
(370,625,1)
(217,335,1)
(525,176,1)
(679,459,1)
(894,250,1)
(544,627,1)
(264,231,1)
(508,442,1)
(832,411,1)
(746,452,1)
(713,598,1)
(578,289,1)
(872,184,1)
(865,996,1)
(647,147,1)
(484,704,1)
(33,481,1)
(55,712,1)
(518,842,1)
(88,176,1)
(74,151,1)
(160,394,1)
(289,31,1)
(668,554,1)
(20,421,1)
(872,437,1)
(404,177,1)
(833,509,1)
(339,825,1)
(734,146,1)
(511,587,1)
(855,402,1)
(835,352,1)
(571,822,1)
(387,342,1)
(175,858,1)
(344,176,1)
(116,652,1)
(492,199,1)
(328,997,1)
(109,307,1)
(483,706,1)
(832,214,1)
(303,151,1)
(869,238,1)
(27,81,1)
(818,985,1)
(952,508,1)
(542,957,1)
(869,613,1)
(642,9,1)
(989,216,1)
(27,846,1)
(957,339,1)
(923,523,1)
(872,407,1)
(870,176,1)
(518,81,1)
(847,290,1)
(566,170,1)
(172,214,1)
(369,479,1)
(832,462,1)
(762,96,1)
(367,377,1)
(832,145,1)
(540,645,1)
(24,693,1)
(865,956,1)
(872,846,1)
(761,284,1)
(681,115,1)
(159,79,1)
(117,578,1)
(619,497,1)
(903,176,1)
(387,176,1)
(591,759,1)
(857,394,1)
(616,781,1)
(339,218,1)
(339,214,1)
(732,176,1)
(957,960,1)
(518,462,1)
(575,521,1)
(776,870,1)
(112,310,1)
(42,958,1)
(27,446,1)
(281,304,1)
(514,678,1)
(339,446,1)
(383,120,1)
(635,512,1)
(794,577,1)
(139,407,1)
(925,112,1)
(190,340,1)
(211,856,1)
(851,816,1)
(712,267,1)
(490,744,1)
(480,911,1)
(20,185,1)
(300,288,1)
(884,587,1)
(34,809,1)
(827,838,1)
(411,483,1)
(310,839,1)
(860,81,1)
(135,176,1)
(655,341,1)
(465,105,1)
(403,812,1)
(504,330,1)
(929,587,1)
(728,235,1)
(27,311,1)
(338,865,1)
(751,759,1)
(339,403,1)
(728,348,1)
(89,151,1)
(650,278,1)
(545,889,1)
(339,997,1)
(97,176,1)
(27,839,1)
(33,176,1)
(293,988,1)
(227,86,1)
(832,589,1)
(832,469,1)
(999,49,1)
(956,680,1)
(27,339,1)
(551,105,1)
(753,223,1)
(339,322,1)
(27,518,1)
(339,462,1)
(128,176,1)
(649,440,1)
(195,25,1)
(6,798,1)
(814,510,1)
(391,849,1)
(76,507,1)
(375,176,1)
(785,835,1)
(571,87,1)
(690,999,1)
(193,967,1)
(846,336,1)
(339,135,1)
(57,496,1)
(832,966,1)
(28,614,1)
(765,903,1)
(593,599,1)
(359,28,1)
(31,234,1)
(620,661,1)
(518,184,1)
(197,341,1)
(405,608,1)
(339,815,1)
(804,806,1)
(872,469,1)
(659,104,1)
(872,908,1)
(27,807,1)
(795,142,1)
(339,81,1)
(27,997,1)
(447,235,1)
(872,462,1)
(15,825,1)
(670,913,1)
(691,618,1)
(595,266,1)
(27,256,1)
(339,281,1)
(122,982,1)
(936,442,1)
(255,169,1)
(999,645,1)
(288,806,1)
(9,594,1)
(866,176,1)
(646,726,1)
(503,632,1)
(464,242,1)
(697,260,1)
(76,417,1)
(333,969,1)
(820,531,1)
(832,446,1)
(336,176,1)
(815,176,1)
(759,627,1)
(373,114,1)
(666,162,1)
(334,176,1)
(832,476,1)
(301,353,1)
(832,795,1)
(839,176,1)
(832,933,1)
(702,837,1)
(640,3,1)
(969,295,1)
(391,107,1)
(447,176,1)
(510,358,1)
(515,711,1)
(27,214,1)
(216,116,1)
(719,683,1)
(561,552,1)
(737,792,1)
(161,748,1)
(215,660,1)
(886,342,1)
(427,460,1)
(632,471,1)
(677,487,1)
(689,800,1)
(453,176,1)
(978,608,1)
(142,794,1)
(423,564,1)
(872,344,1)
(578,31,1)
(394,866,1)
(950,316,1)
(849,682,1)
(136,141,1)
(832,184,1)
(832,660,1)
(664,922,1)
(851,852,1)
(339,854,1)
(684,525,1)
(662,309,1)
(367,176,1)
(878,176,1)
(235,244,1)
(339,23,1)
(441,484,1)
(518,825,1)
(497,176,1)
(782,234,1)
(482,85,1)
(184,47,1)
(372,156,1)
(832,997,1)
(959,324,1)
(432,646,1)
(35,627,1)
(196,871,1)
(447,342,1)
(968,630,1)
(937,553,1)
(899,616,1)
(727,584,1)
(674,427,1)
(826,897,1)
(525,384,1)
(775,291,1)
(781,766,1)
(531,650,1)
(344,550,1)
(271,58,1)
(869,994,1)
(207,651,1)
(227,150,1)
(251,228,1)
(324,738,1)
(869,504,1)
(650,587,1)
(749,853,1)
(632,491,1)
(988,878,1)
(997,176,1)
(984,153,1)
(905,587,1)
(413,634,1)
(537,545,1)
(102,992,1)
(462,251,1)
(29,26,1)
(609,398,1)
(171,652,1)
(915,930,1)
(676,791,1)
(772,478,1)
(665,681,1)
(748,294,1)
(793,734,1)
(122,332,1)
(728,342,1)
(979,38,1)
(853,604,1)
(966,176,1)
(168,408,1)
(649,59,1)
(218,19,1)
(185,745,1)
(501,280,1)
(678,936,1)
(592,542,1)
(912,551,1)
(740,351,1)
(92,476,1)
(339,469,1)
(460,707,1)
(339,897,1)
(105,954,1)
(969,176,1)
(809,175,1)
(518,832,1)
(930,525,1)
(496,370,1)
(60,754,1)
(293,878,1)
(900,867,1)
(339,966,1)
(150,421,1)
(684,572,1)
(339,411,1)
(11,756,1)
(652,369,1)
(339,353,1)
(540,414,1)
(362,212,1)
(831,299,1)
(447,555,1)
(739,126,1)
(868,747,1)
(683,644,1)
(549,278,1)
(649,899,1)
(36,990,1)
(889,461,1)
(366,695,1)
(41,109,1)
(831,297,1)
(797,302,1)
(940,39,1)
(569,657,1)
(570,670,1)
(417,627,1)
(177,611,1)
(439,813,1)
(984,151,1)
(832,23,1)
(403,176,1)
(454,776,1)
(421,741,1)
(872,697,1)
(107,648,1)
(565,655,1)
(316,215,1)
(518,480,1)
(518,592,1)
(213,226,1)
(353,95,1)
(903,342,1)
(872,218,1)
(434,51,1)
(960,607,1)
(944,100,1)
(869,255,1)
(786,262,1)
(518,933,1)
(657,855,1)
(72,357,1)
(525,224,1)
(584,714,1)
(960,696,1)
(31,451,1)
(641,942,1)
(208,831,1)
(273,760,1)
(479,229,1)
(489,285,1)
(819,131,1)
(990,864,1)
(339,207,1)
(917,892,1)
(543,176,1)
(85,176,1)
(431,499,1)
(248,179,1)
(3,718,1)
(22,698,1)
(230,206,1)
(705,801,1)
(962,8,1)
(243,959,1)
(134,761,1)
(872,872,1)
(386,236,1)
(335,312,1)
(150,176,1)
(956,645,1)
(153,787,1)
(420,409,1)
(927,444,1)
(189,338,1)
(133,110,1)
(832,96,1)
(787,308,1)
(922,426,1)
(793,173,1)
(369,451,1)
(79,885,1)
(375,595,1)
(409,176,1)
(201,989,1)
(866,947,1)
(631,59,1)
(40,608,1)
(754,123,1)
(623,820,1)
(27,584,1)
(229,822,1)
(872,96,1)
(390,301,1)
(518,206,1)
(760,278,1)
(908,619,1)
(839,164,1)
(518,437,1)
(471,176,1)
(27,697,1)
(46,294,1)
(544,883,1)
(88,390,1)
(85,134,1)
(673,359,1)
(832,807,1)
(95,924,1)
(869,602,1)
(683,685,1)
(250,580,1)
(848,883,1)
(807,749,1)
(572,543,1)
(280,315,1)
(878,645,1)
(933,176,1)
(695,374,1)
(232,965,1)
(983,460,1)
(510,453,1)
(318,432,1)
(872,351,1)
(871,629,1)
(848,627,1)
(244,344,1)
(825,272,1)
(836,626,1)
(775,319,1)
(693,944,1)
(63,562,1)
(750,529,1)
(518,351,1)
(341,20,1)
(287,834,1)
(884,642,1)
(214,896,1)
(872,403,1)
(872,997,1)
(621,857,1)
(869,763,1)
(311,176,1)
(854,176,1)
(130,961,1)
(357,451,1)
(76,270,1)
(27,462,1)
(137,175,1)
(27,403,1)
(131,176,1)
(608,16,1)
(428,804,1)
(518,27,1)
(872,27,1)
(295,736,1)
(297,851,1)
(961,326,1)
(439,906,1)
(152,716,1)
(62,764,1)
(265,113,1)
(187,768,1)
(407,457,1)
(851,402,1)
(518,23,1)
(125,137,1)
(387,235,1)
(832,27,1)
(531,520,1)
(267,920,1)
(433,4,1)
(755,183,1)
(308,151,1)
(872,807,1)
(339,842,1)
(628,893,1)
(518,256,1)
(352,33,1)
(673,28,1)
(832,322,1)
(872,23,1)
(872,933,1)
(247,558,1)
(568,37,1)
(518,339,1)
(136,991,1)
(838,797,1)
(872,322,1)
(398,271,1)
(487,127,1)
(562,176,1)
(687,417,1)
(23,176,1)
(61,22,1)
(82,838,1)
(27,206,1)
(284,250,1)
(47,119,1)
(395,601,1)
(27,281,1)
(931,399,1)
(872,966,1)
(529,597,1)
(878,384,1)
(741,446,1)
(312,157,1)
(252,204,1)
(705,681,1)
(805,36,1)
(94,778,1)
(635,375,1)
(854,724,1)
(964,243,1)
(870,702,1)
(305,557,1)
(249,437,1)
(170,765,1)
(138,322,1)
(832,407,1)
(872,592,1)
(629,604,1)
(832,135,1)
(339,344,1)
(37,598,1)
(590,379,1)
(146,690,1)
(2,671,1)
(339,437,1)
(756,235,1)
(518,872,1)
(155,20,1)
(624,892,1)
(549,936,1)
(338,560,1)
(929,278,1)
(107,948,1)
(994,595,1)
(726,547,1)
(832,825,1)
(633,563,1)
(65,782,1)
(547,403,1)
(27,344,1)
(396,100,1)
(27,469,1)
(660,283,1)
(932,300,1)
(294,151,1)
(923,415,1)
(587,935,1)
(570,176,1)
(803,364,1)
(518,700,1)
(27,135,1)
(351,176,1)
(455,195,1)
(121,334,1)
(617,1,1)
(869,434,1)
(723,790,1)
(601,771,1)
(831,531,1)
(16,331,1)
(181,717,1)
(832,897,1)
(20,176,1)
(869,909,1)
(732,371,1)
(764,883,1)
(239,252,1)
(627,451,1)
(392,636,1)
(70,45,1)
(150,856,1)
(141,541,1)
(954,792,1)
(661,635,1)
(781,205,1)
(57,337,1)
(614,464,1)
(263,533,1)
(422,882,1)
(339,832,1)
(605,186,1)
(210,819,1)
(995,384,1)
(518,469,1)
(536,757,1)
(476,176,1)
(183,176,1)
(869,894,1)
(72,637,1)
(402,298,1)
(224,362,1)
(785,352,1)
(77,194,1)
(872,518,1)
(935,287,1)
(902,843,1)
(892,641,1)
(406,769,1)
(467,32,1)
(208,587,1)
(875,256,1)
(347,423,1)
(27,660,1)
(924,306,1)
(444,810,1)
(27,422,1)
(27,825,1)
(401,321,1)
(905,456,1)
(339,660,1)
(628,684,1)
(920,176,1)
(357,413,1)
(411,706,1)
(332,774,1)
(564,862,1)
(745,601,1)
(166,182,1)
(555,21,1)
(113,608,1)
(910,10,1)
(243,220,1)
(956,384,1)
(879,925,1)
(872,206,1)
(823,608,1)
(216,171,1)
(938,608,1)
(969,645,1)
(118,608,1)
(27,437,1)
(883,196,1)
(869,950,1)
(709,338,1)
(234,720,1)
(544,517,1)
(892,417,1)
(858,527,1)
(638,818,1)
(342,663,1)
(699,923,1)
(261,376,1)
(748,46,1)
(790,391,1)
(27,872,1)
(990,59,1)
(872,422,1)
(872,411,1)
(980,556,1)
(991,141,1)
(360,833,1)
(971,507,1)
(269,235,1)
(430,735,1)
(204,799,1)
(440,138,1)
(27,218,1)
(518,322,1)
(237,921,1)
(526,180,1)
(140,645,1)
(240,980,1)
(706,176,1)
(957,518,1)
(351,836,1)
(779,34,1)
(518,311,1)
(352,841,1)
(275,608,1)
(880,328,1)
(518,96,1)
(492,587,1)
(152,127,1)
(200,311,1)
(39,540,1)
(269,176,1)
(19,261,1)
(517,701,1)
(20,688,1)
(304,918,1)
(339,145,1)
(376,970,1)
(183,235,1)
(869,435,1)
(754,276,1)
(791,136,1)
(958,463,1)
(845,430,1)
(120,54,1)
(199,511,1)
(724,277,1)
(743,842,1)
(349,723,1)
(773,712,1)
(518,518,1)
(997,536,1)
(583,111,1)
(618,874,1)
(255,781,1)
(872,589,1)
(320,135,1)
(319,291,1)
(34,817,1)
(933,803,1)
(125,830,1)
(848,583,1)
(339,96,1)
(184,176,1)
(999,176,1)
(443,933,1)
(27,933,1)
(315,227,1)
(425,259,1)
(652,802,1)
(970,166,1)
(339,476,1)
(813,906,1)
(806,535,1)
(729,279,1)
(132,213,1)
(872,660,1)
(442,273,1)
(8,122,1)
(361,981,1)
(604,172,1)
(889,628,1)
(45,159,1)
(817,809,1)
(866,342,1)
(552,908,1)
(976,875,1)
(306,596,1)
(832,908,1)
(399,600,1)
(557,367,1)
(435,800,1)
(832,518,1)
(518,697,1)
(694,539,1)
(114,235,1)
(518,135,1)
(241,728,1)
(218,261,1)
(318,646,1)
(37,975,1)
(287,713,1)
(948,648,1)
(206,209,1)
(674,5,1)
(283,91,1)
(600,117,1)
(14,931,1)
(956,176,1)
(580,188,1)
(725,125,1)
(248,70,1)
(606,561,1)
(468,926,1)
(898,444,1)
(525,645,1)
(0,318,1)
(339,256,1)
(580,796,1)
(730,890,1)
(872,815,1)
(767,202,1)
(949,66,1)
(266,732,1)
(520,650,1)
(772,605,1)
(518,476,1)
(857,160,1)
(291,176,1)
(845,515,1)
(585,586,1)
(410,998,1)
(832,839,1)
(471,98,1)
(872,135,1)
(339,480,1)
(563,753,1)
(825,176,1)
(832,842,1)
(339,846,1)
(100,949,1)
(115,631,1)
(872,842,1)
(822,827,1)
(25,176,1)
(321,689,1)
(936,742,1)
(872,480,1)
(887,952,1)
(285,356,1)
(631,201,1)
(577,124,1)
(766,440,1)
(35,662,1)
(366,423,1)
(192,850,1)
(708,465,1)
(957,27,1)
(597,23,1)
(689,176,1)
(358,453,1)
(81,478,1)
(850,193,1)
(742,895,1)
(738,869,1)
(228,608,1)
(735,515,1)
(388,320,1)
(162,846,1)
(225,325,1)
(902,175,1)
(518,355,1)
(21,999,1)
(834,598,1)
(639,909,1)
(716,677,1)
(518,145,1)
(27,700,1)
(610,805,1)
(96,176,1)
(341,155,1)
(686,336,1)
(346,128,1)
(27,832,1)
(636,526,1)
(598,192,1)
(715,608,1)
(278,144,1)
(973,779,1)
(717,422,1)
(402,128,1)
(39,183,1)
(907,507,1)
(895,877,1)
(832,697,1)
(461,628,1)
(481,296,1)
(31,445,1)
(591,751,1)
(484,902,1)
(369,234,1)
(257,857,1)
(128,937,1)
(87,216,1)
(287,37,1)
(714,978,1)
(302,883,1)
(656,608,1)
(332,217,1)
(387,943,1)
(326,227,1)
(205,766,1)
(262,443,1)
(906,440,1)
(653,986,1)
(515,408,1)
(89,774,1)
(543,342,1)
(204,559,1)
(78,317,1)
(757,608,1)
(339,589,1)
(23,264,1)
(350,964,1)
(690,979,1)
(646,176,1)
(1,888,1)
(518,214,1)
(972,480,1)
(809,42,1)
(911,743,1)
(385,63,1)
(16,964,1)
(832,732,1)
(27,842,1)
(707,832,1)
(872,832,1)
(238,591,1)
(728,176,1)
(93,653,1)
(700,65,1)
(12,683,1)
(268,482,1)
(339,592,1)
(856,826,1)
(111,391,1)
(145,780,1)
(147,854,1)
(774,219,1)
(80,929,1)
(100,53,1)
(766,59,1)
(242,811,1)
(918,203,1)
(145,176,1)
(529,478,1)
(456,585,1)
(117,439,1)
(832,592,1)
(337,828,1)
(330,639,1)
(69,489,1)
(141,176,1)
(759,883,1)
(541,458,1)
(379,814,1)
(63,416,1)
(832,846,1)
(634,700,1)
(339,311,1)
(408,176,1)
(77,785,1)
(768,176,1)
(148,519,1)
(905,840,1)
(518,732,1)
(685,176,1)
(539,794,1)
(253,239,1)
(832,351,1)
(985,490,1)
(375,548,1)
(801,681,1)
(512,375,1)
(52,907,1)
(681,631,1)
(804,932,1)
(81,575,1)
(106,189,1)
(317,282,1)
(521,388,1)
(553,298,1)
(463,876,1)
(268,85,1)
(872,256,1)
(451,440,1)
(646,777,1)
(744,281,1)
(538,608,1)
(20,856,1)
(276,409,1)
(496,26,1)
(1000,538,1)
(701,976,1)
(884,9,1)
(368,823,1)
(884,312,1)
(173,734,1)
(470,139,1)
(518,908,1)
(864,102,1)
(633,176,1)
(70,159,1)
(206,176,1)
(884,298,1)
(402,167,1)
(394,669,1)
(438,34,1)
(890,462,1)
(296,699,1)
(872,825,1)
(979,447,1)
(410,97,1)
(302,627,1)
(191,35,1)
(286,645,1)
(887,278,1)
(415,927,1)
(613,668,1)
(441,125,1)
(846,686,1)
(872,446,1)
(61,627,1)
(219,74,1)
(897,176,1)
(869,703,1)
(453,467,1)
(872,897,1)
(231,772,1)
(100,169,1)
(389,257,1)
(287,664,1)
(784,382,1)
(486,187,1)
(79,387,1)
(196,629,1)
(27,145,1)
(518,660,1)
(499,849,1)
(611,489,1)
(294,774,1)
(832,437,1)
(710,566,1)
(869,94,1)
(579,673,1)
(872,476,1)
(269,603,1)
(533,688,1)
(25,615,1)
(165,656,1)
(353,924,1)
(466,334,1)
(75,161,1)
(535,406,1)
(982,332,1)
(126,191,1)
(842,433,1)
(110,973,1)
(908,497,1)
(689,620,1)
(928,815,1)
(626,470,1)
(518,997,1)
(893,684,1)
(869,995,1)
(276,587,1)
(927,898,1)
(491,471,1)
(540,384,1)
(543,235,1)
(874,772,1)
(334,210,1)
(260,88,1)
(560,865,1)
(30,57,1)
(760,912,1)
(802,369,1)
(27,353,1)
(756,342,1)
(27,966,1)
(203,163,1)
(885,387,1)
(822,82,1)
(314,608,1)
(799,559,1)
(12,719,1)
(437,176,1)
(572,588,1)
(100,176,1)
(862,848,1)
(742,877,1)
(511,208,1)
(768,968,1)
(733,513,1)
(339,339,1)
(760,151,1)
(274,622,1)
(518,854,1)
(458,609,1)
(352,699,1)
(648,451,1)
(669,866,1)
(281,129,1)
(683,986,1)
(600,126,1)
(986,916,1)
(151,52,1)
(672,564,1)
(459,960,1)
(127,635,1)
(339,584,1)
(356,368,1)
(364,608,1)
(194,881,1)
(27,27,1)
(279,850,1)
(27,476,1)
(859,929,1)
(734,690,1)
(654,77,1)
(894,44,1)
(631,440,1)
(149,673,1)
(909,636,1)
(56,16,1)
(454,587,1)
(518,846,1)
(752,184,1)
(944,396,1)
(675,770,1)
(691,478,1)
(806,406,1)
(872,700,1)
(26,241,1)
(332,587,1)
(581,697,1)
(131,710,1)
(824,230,1)
(27,184,1)
(955,793,1)
(869,221,1)
(365,12,1)
(869,275,1)
(51,829,1)
(437,373,1)
(236,578,1)
(290,691,1)
(703,726,1)
(872,81,1)
(913,773,1)
(150,14,1)
(303,514,1)
(10,204,1)
(877,887,1)
(832,81,1)
(888,466,1)
(829,779,1)
(159,969,1)
(621,11,1)
(27,96,1)
(259,814,1)
(763,746,1)
(137,133,1)
(832,218,1)
(840,456,1)
(399,624,1)
(596,608,1)
(551,774,1)
(488,590,1)
(622,834,1)
(832,832,1)
(414,755,1)
(832,256,1)
(896,40,1)
(866,235,1)
(188,570,1)
(294,190,1)
(339,518,1)
(954,737,1)
(788,469,1)
(97,388,1)
(143,537,1)
(562,767,1)
(105,748,1)
(637,357,1)
(518,411,1)
(339,422,1)
(822,838,1)
(27,351,1)
(26,728,1)
(996,956,1)
(625,269,1)
(663,762,1)
(466,121,1)
(518,344,1)
(27,815,1)
(941,860,1)
(832,854,1)
(832,281,1)
(357,234,1)
(1,248,1)
(861,674,1)
(832,403,1)
(771,410,1)
(363,167,1)
(713,436,1)
(270,378,1)
(909,392,1)
(832,206,1)
(282,955,1)
(593,59,1)
(756,176,1)
(688,15,1)
(696,253,1)
(671,580,1)
(609,176,1)
(554,752,1)
(769,633,1)
(68,845,1)
(180,638,1)
(792,89,1)
(593,440,1)
(27,480,1)
(594,363,1)
(167,60,1)
(103,496,1)
(339,407,1)
(309,624,1)
(869,750,1)
(32,293,1)
(409,623,1)
(322,181,1)
(849,971,1)
(299,80,1)
(395,565,1)
(445,739,1)
(800,200,1)
(340,984,1)
(872,281,1)
(256,61,1)
(339,839,1)
(709,502,1)
(518,897,1)
(250,2,1)
(892,604,1)
(505,193,1)
(507,354,1)
(402,346,1)
(302,729,1)
(881,329,1)
(771,546,1)
(601,318,1)
(603,29,1)
(513,454,1)
(156,659,1)
(838,302,1)
(58,617,1)
(291,305,1)
(816,852,1)
(599,672,1)
(773,55,1)
(607,696,1)
(502,140,1)
(426,568,1)
(183,342,1)
(27,263,1)
(377,78,1)
(371,405,1)
(828,103,1)
(629,424,1)
(27,589,1)
(27,897,1)
(903,383,1)
(811,492,1)
(272,69,1)
(832,584,1)
(427,983,1)
(457,286,1)
(832,311,1)
(35,883,1)
(498,608,1)
(683,699,1)
(602,880,1)
(307,884,1)
(355,211,1)
(212,775,1)
(648,234,1)
(929,41,1)
(747,593,1)
(518,353,1)
(667,581,1)
(513,485,1)
(664,598,1)
(339,807,1)
(186,478,1)
(876,441,1)
(518,218,1)
(325,711,1)
(486,768,1)
(832,700,1)
(955,791,1)
(868,593,1)
(96,1000,1)
(834,258,1)
(463,175,1)
(339,206,1)
(44,372,1)
(124,468,1)
(779,438,1)
(796,667,1)
(872,839,1)
(869,449,1)
(378,530,1)
(812,938,1)
(423,868,1)
(645,249,1)
(586,492,1)
(402,587,1)
(336,93,1)
(61,883,1)
(872,732,1)
(489,783,1)
(532,807,1)
(231,148,1)
(259,488,1)
(971,417,1)
(209,945,1)
(339,700,1)
(518,589,1)
(401,689,1)
(515,163,1)
(648,431,1)
(682,971,1)
(780,715,1)
(452,68,1)
(971,24,1)
(331,350,1)
(455,25,1)
(706,861,1)
(119,608,1)
(97,262,1)
(872,353,1)
(897,679,1)
(180,176,1)
(329,785,1)
(518,839,1)
(454,870,1)
(718,786,1)
(624,917,1)
(903,235,1)
(660,176,1)
(969,384,1)
(559,404,1)
(453,384,1)
(906,59,1)
(794,124,1)
(872,854,1)
(169,928,1)
(497,951,1)
(89,75,1)
(374,347,1)
(736,888,1)
(518,281,1)
(832,344,1)
(192,571,1)
(478,640,1)
(832,815,1)
(546,222,1)
(832,339,1)
(276,420,1)
(704,902,1)
(832,353,1)
(659,268,1)
(992,788,1)
(815,610,1)
(852,774,1)
(518,815,1)
(17,606,1)
(850,505,1)
(382,39,1)
(550,687,1)
(630,385,1)
(54,980,1)
(558,197,1)
(28,464,1)
(981,824,1)
(27,592,1)
(311,265,1)
(54,240,1)
(127,401,1)
(142,872,1)
(408,225,1)
(651,421,1)
(916,218,1)
(872,694,1)
(518,446,1)
(924,176,1)
(98,709,1)
(339,27,1)
(348,395,1)
(258,366,1)
(80,859,1)
(518,807,1)
(689,176,2)
(239,204,2)
(561,608,2)
(311,608,2)
(402,312,2)
(906,440,2)
(959,16,2)
(607,204,2)
(289,126,2)
(267,608,2)
(314,608,2)
(463,175,2)
(420,531,2)
(132,773,2)
(832,353,2)
(859,531,2)
(699,608,2)
(832,480,2)
(460,608,2)
(671,608,2)
(795,608,2)
(920,608,2)
(518,825,2)
(872,966,2)
(558,341,2)
(126,624,2)
(423,564,2)
(682,944,2)
(549,984,2)
(148,772,2)
(759,627,2)
(999,645,2)
(298,122,2)
(817,608,2)
(27,732,2)
(31,234,2)
(12,683,2)
(409,176,2)
(720,608,2)
(648,451,2)
(153,984,2)
(91,608,2)
(711,608,2)
(832,832,2)
(387,342,2)
(371,608,2)
(94,608,2)
(223,608,2)
(171,652,2)
(27,339,2)
(302,883,2)
(872,933,2)
(353,924,2)
(476,176,2)
(771,410,2)
(832,96,2)
(656,608,2)
(1,248,2)
(978,608,2)
(27,592,2)
(902,175,2)
(832,807,2)
(600,117,2)
(167,531,2)
(334,176,2)
(908,497,2)
(723,391,2)
(339,204,2)
(760,151,2)
(339,422,2)
(369,451,2)
(685,176,2)
(649,781,2)
(759,608,2)
(950,608,2)
(34,608,2)
(659,250,2)
(118,608,2)
(872,480,2)
(652,369,2)
(964,16,2)
(266,608,2)
(339,23,2)
(411,706,2)
(929,587,2)
(501,399,2)
(697,88,2)
(636,526,2)
(74,151,2)
(954,792,2)
(27,660,2)
(694,794,2)
(1,888,2)
(489,285,2)
(600,126,2)
(33,176,2)
(215,608,2)
(47,608,2)
(409,531,2)
(518,480,2)
(126,35,2)
(339,732,2)
(300,806,2)
(933,608,2)
(27,589,2)
(253,204,2)
(110,779,2)
(46,984,2)
(654,608,2)
(25,673,2)
(677,127,2)
(809,175,2)
(518,476,2)
(569,122,2)
(88,608,2)
(236,578,2)
(61,627,2)
(544,883,2)
(884,298,2)
(256,61,2)
(763,608,2)
(728,342,2)
(87,705,2)
(135,176,2)
(454,122,2)
(990,59,2)
(196,608,2)
(339,476,2)
(339,135,2)
(89,151,2)
(814,293,2)
(288,806,2)
(339,518,2)
(339,256,2)
(535,608,2)
(773,712,2)
(753,608,2)
(145,608,2)
(794,608,2)
(370,269,2)
(386,578,2)
(862,944,2)
(227,150,2)
(9,176,2)
(202,673,2)
(27,422,2)
(264,608,2)
(297,122,2)
(832,446,2)
(832,27,2)
(655,341,2)
(150,399,2)
(125,779,2)
(60,531,2)
(583,944,2)
(35,883,2)
(497,608,2)
(518,832,2)
(11,857,2)
(845,430,2)
(872,135,2)
(683,986,2)
(486,673,2)
(518,206,2)
(782,608,2)
(92,591,2)
(27,351,2)
(507,399,2)
(518,589,2)
(944,100,2)
(81,772,2)
(27,807,2)
(637,608,2)
(389,857,2)
(887,442,2)
(468,608,2)
(864,781,2)
(552,608,2)
(382,39,2)
(27,462,2)
(218,261,2)
(564,944,2)
(683,608,2)
(80,884,2)
(401,635,2)
(752,608,2)
(509,544,2)
(998,546,2)
(578,31,2)
(832,476,2)
(339,27,2)
(441,125,2)
(260,608,2)
(339,311,2)
(251,608,2)
(872,825,2)
(339,339,2)
(439,578,2)
(971,417,2)
(375,595,2)
(100,169,2)
(577,608,2)
(387,235,2)
(326,227,2)
(61,883,2)
(518,462,2)
(283,608,2)
(518,422,2)
(871,608,2)
(745,601,2)
(913,608,2)
(999,384,2)
(518,353,2)
(63,562,2)
(776,122,2)
(766,440,2)
(880,608,2)
(708,105,2)
(848,883,2)
(571,87,2)
(518,96,2)
(140,338,2)
(238,608,2)
(990,440,2)
(379,814,2)
(872,437,2)
(826,960,2)
(872,184,2)
(274,834,2)
(798,608,2)
(471,176,2)
(564,848,2)
(192,571,2)
(317,282,2)
(518,469,2)
(642,531,2)
(499,849,2)
(580,570,2)
(423,944,2)
(531,650,2)
(767,673,2)
(27,966,2)
(892,417,2)
(775,291,2)
(339,446,2)
(399,600,2)
(518,311,2)
(751,608,2)
(453,384,2)
(190,984,2)
(999,176,2)
(582,193,2)
(222,318,2)
(339,933,2)
(598,192,2)
(562,673,2)
(60,754,2)
(958,608,2)
(446,204,2)
(456,492,2)
(339,411,2)
(27,854,2)
(426,37,2)
(976,591,2)
(423,868,2)
(551,984,2)
(189,338,2)
(518,214,2)
(601,318,2)
(685,608,2)
(206,176,2)
(225,608,2)
(693,944,2)
(872,794,2)
(788,781,2)
(130,227,2)
(537,545,2)
(455,673,2)
(832,839,2)
(872,854,2)
(299,531,2)
(760,278,2)
(518,281,2)
(742,877,2)
(872,518,2)
(339,807,2)
(344,176,2)
(388,691,2)
(102,781,2)
(771,546,2)
(554,608,2)
(941,772,2)
(875,591,2)
(651,204,2)
(772,608,2)
(128,122,2)
(339,697,2)
(117,439,2)
(849,944,2)
(601,771,2)
(339,353,2)
(339,437,2)
(539,794,2)
(570,608,2)
(518,256,2)
(734,690,2)
(860,772,2)
(839,608,2)
(276,409,2)
(837,122,2)
(216,652,2)
(301,608,2)
(948,849,2)
(888,466,2)
(878,645,2)
(232,427,2)
(764,608,2)
(964,243,2)
(309,624,2)
(207,204,2)
(329,785,2)
(197,341,2)
(39,183,2)
(183,176,2)
(44,250,2)
(27,846,2)
(431,849,2)
(675,608,2)
(298,733,2)
(684,525,2)
(627,451,2)
(878,176,2)
(892,604,2)
(339,96,2)
(443,608,2)
(955,793,2)
(529,608,2)
(912,984,2)
(140,384,2)
(452,845,2)
(816,122,2)
(572,543,2)
(191,624,2)
(212,775,2)
(63,673,2)
(336,176,2)
(689,635,2)
(140,645,2)
(200,608,2)
(26,728,2)
(542,608,2)
(353,608,2)
(923,523,2)
(406,769,2)
(982,492,2)
(809,608,2)
(390,608,2)
(496,26,2)
(832,218,2)
(547,608,2)
(756,235,2)
(141,176,2)
(845,608,2)
(832,403,2)
(247,341,2)
(408,608,2)
(106,338,2)
(148,478,2)
(208,492,2)
(75,748,2)
(766,608,2)
(15,489,2)
(785,352,2)
(16,331,2)
(749,608,2)
(27,842,2)
(37,598,2)
(679,960,2)
(848,627,2)
(8,122,2)
(402,587,2)
(590,814,2)
(990,781,2)
(308,984,2)
(250,608,2)
(331,16,2)
(508,442,2)
(898,608,2)
(800,608,2)
(199,492,2)
(367,176,2)
(828,496,2)
(934,796,2)
(727,608,2)
(832,437,2)
(832,281,2)
(72,608,2)
(813,578,2)
(525,176,2)
(938,608,2)
(27,518,2)
(456,176,2)
(258,944,2)
(293,878,2)
(521,772,2)
(712,267,2)
(454,870,2)
(357,234,2)
(952,442,2)
(447,176,2)
(807,608,2)
(968,673,2)
(832,732,2)
(357,608,2)
(633,176,2)
(100,176,2)
(12,608,2)
(623,531,2)
(484,779,2)
(684,572,2)
(44,659,2)
(366,944,2)
(618,772,2)
(616,781,2)
(113,608,2)
(27,832,2)
(711,17,2)
(748,294,2)
(10,204,2)
(117,578,2)
(150,421,2)
(34,779,2)
(701,591,2)
(134,250,2)
(633,608,2)
(814,510,2)
(184,176,2)
(339,351,2)
(877,442,2)
(620,635,2)
(55,608,2)
(832,135,2)
(261,176,2)
(408,176,2)
(352,699,2)
(872,81,2)
(272,489,2)
(543,235,2)
(933,176,2)
(602,608,2)
(350,16,2)
(453,176,2)
(402,128,2)
(754,531,2)
(852,774,2)
(894,608,2)
(969,384,2)
(628,684,2)
(832,589,2)
(277,608,2)
(838,302,2)
(629,417,2)
(306,608,2)
(27,897,2)
(832,81,2)
(27,96,2)
(856,960,2)
(958,779,2)
(696,204,2)
(866,342,2)
(553,122,2)
(355,960,2)
(492,492,2)
(105,954,2)
(6,608,2)
(632,471,2)
(486,768,2)
(80,531,2)
(145,176,2)
(832,846,2)
(872,422,2)
(79,387,2)
(227,399,2)
(502,140,2)
(872,311,2)
(518,145,2)
(884,587,2)
(488,814,2)
(905,587,2)
(339,81,2)
(403,176,2)
(897,176,2)
(868,564,2)
(518,815,2)
(715,608,2)
(713,598,2)
(29,26,2)
(518,135,2)
(518,807,2)
(513,485,2)
(924,608,2)
(906,578,2)
(872,351,2)
(688,489,2)
(519,772,2)
(692,608,2)
(703,608,2)
(872,344,2)
(97,176,2)
(518,846,2)
(497,176,2)
(810,608,2)
(870,122,2)
(868,593,2)
(36,781,2)
(896,608,2)
(700,608,2)
(866,235,2)
(463,779,2)
(872,145,2)
(780,608,2)
(85,176,2)
(536,608,2)
(469,781,2)
(447,342,2)
(342,608,2)
(391,944,2)
(478,640,2)
(320,691,2)
(926,608,2)
(596,608,2)
(872,339,2)
(644,608,2)
(570,176,2)
(16,16,2)
(748,984,2)
(328,608,2)
(164,608,2)
(170,765,2)
(540,384,2)
(971,944,2)
(832,825,2)
(183,342,2)
(27,480,2)
(219,105,2)
(580,608,2)
(934,608,2)
(832,339,2)
(884,9,2)
(923,415,2)
(437,176,2)
(672,564,2)
(188,608,2)
(683,685,2)
(525,645,2)
(413,608,2)
(773,608,2)
(997,608,2)
(954,748,2)
(728,176,2)
(545,212,2)
(756,857,2)
(402,298,2)
(88,176,2)
(806,608,2)
(747,564,2)
(518,411,2)
(971,604,2)
(832,660,2)
(339,908,2)
(889,628,2)
(446,176,2)
(832,854,2)
(157,492,2)
(603,26,2)
(403,608,2)
(352,986,2)
(872,908,2)
(730,608,2)
(204,559,2)
(175,608,2)
(302,627,2)
(441,779,2)
(337,496,2)
(969,645,2)
(815,176,2)
(725,779,2)
(476,591,2)
(304,176,2)
(27,839,2)
(833,591,2)
(438,608,2)
(927,608,2)
(27,908,2)
(543,176,2)
(768,176,2)
(312,492,2)
(59,608,2)
(568,37,2)
(107,849,2)
(600,624,2)
(163,666,2)
(135,691,2)
(611,489,2)
(339,589,2)
(925,112,2)
(792,89,2)
(887,278,2)
(5,427,2)
(905,456,2)
(834,944,2)
(706,176,2)
(962,122,2)
(330,909,2)
(832,311,2)
(796,608,2)
(872,403,2)
(667,608,2)
(737,748,2)
(466,334,2)
(878,384,2)
(605,608,2)
(285,608,2)
(41,531,2)
(161,748,2)
(100,53,2)
(27,933,2)
(462,176,2)
(774,105,2)
(625,26,2)
(214,608,2)
(364,608,2)
(518,446,2)
(273,984,2)
(936,742,2)
(391,849,2)
(895,442,2)
(53,591,2)
(454,587,2)
(58,617,2)
(965,427,2)
(347,423,2)
(27,206,2)
(832,842,2)
(1000,608,2)
(784,39,2)
(857,394,2)
(155,601,2)
(719,608,2)
(532,608,2)
(518,592,2)
(339,184,2)
(879,608,2)
(339,815,2)
(799,489,2)
(983,608,2)
(406,608,2)
(180,176,2)
(936,984,2)
(89,748,2)
(872,700,2)
(832,322,2)
(278,936,2)
(872,206,2)
(872,589,2)
(34,809,2)
(870,176,2)
(449,608,2)
(111,944,2)
(854,176,2)
(741,204,2)
(237,673,2)
(593,440,2)
(459,960,2)
(872,23,2)
(848,944,2)
(897,960,2)
(496,370,2)
(674,608,2)
(27,700,2)
(865,956,2)
(415,927,2)
(133,779,2)
(282,955,2)
(589,608,2)
(217,492,2)
(872,214,2)
(691,478,2)
(515,711,2)
(520,122,2)
(427,608,2)
(441,484,2)
(168,608,2)
(924,176,2)
(540,176,2)
(358,293,2)
(518,839,2)
(483,608,2)
(96,608,2)
(872,218,2)
(177,489,2)
(869,16,2)
(186,608,2)
(832,23,2)
(332,774,2)
(339,407,2)
(303,151,2)
(779,608,2)
(956,384,2)
(529,478,2)
(851,402,2)
(668,554,2)
(122,332,2)
(841,608,2)
(513,122,2)
(689,800,2)
(195,673,2)
(109,531,2)
(854,608,2)
(832,897,2)
(872,446,2)
(872,281,2)
(931,399,2)
(900,546,2)
(374,423,2)
(525,384,2)
(33,608,2)
(872,732,2)
(17,608,2)
(290,691,2)
(136,141,2)
(901,39,2)
(325,608,2)
(436,834,2)
(533,489,2)
(339,872,2)
(263,489,2)
(832,206,2)
(131,176,2)
(847,691,2)
(167,60,2)
(518,960,2)
(732,608,2)
(831,492,2)
(832,592,2)
(518,966,2)
(980,176,2)
(518,518,2)
(324,16,2)
(339,322,2)
(339,592,2)
(65,608,2)
(593,564,2)
(518,407,2)
(704,779,2)
(27,27,2)
(294,774,2)
(192,850,2)
(204,489,2)
(724,608,2)
(759,883,2)
(624,892,2)
(905,492,2)
(851,122,2)
(489,608,2)
(593,59,2)
(76,507,2)
(518,81,2)
(872,997,2)
(492,587,2)
(234,608,2)
(341,20,2)
(812,608,2)
(427,460,2)
(27,135,2)
(966,176,2)
(27,403,2)
(544,627,2)
(226,773,2)
(791,136,2)
(416,673,2)
(619,608,2)
(318,646,2)
(855,122,2)
(256,591,2)
(861,608,2)
(886,608,2)
(22,591,2)
(609,176,2)
(27,446,2)
(81,478,2)
(76,417,2)
(0,318,2)
(124,608,2)
(650,278,2)
(394,866,2)
(96,176,2)
(250,580,2)
(27,145,2)
(622,834,2)
(430,608,2)
(979,447,2)
(883,196,2)
(20,856,2)
(269,26,2)
(757,608,2)
(579,673,2)
(262,608,2)
(874,772,2)
(339,832,2)
(664,37,2)
(881,785,2)
(518,854,2)
(779,34,2)
(76,604,2)
(872,462,2)
(23,176,2)
(27,825,2)
(832,351,2)
(835,608,2)
(546,0,2)
(482,250,2)
(128,176,2)
(746,845,2)
(68,845,2)
(832,697,2)
(349,391,2)
(849,971,2)
(665,681,2)
(699,923,2)
(927,444,2)
(832,214,2)
(690,979,2)
(872,322,2)
(509,591,2)
(27,697,2)
(714,608,2)
(657,122,2)
(922,37,2)
(563,608,2)
(221,608,2)
(40,608,2)
(858,608,2)
(208,587,2)
(928,781,2)
(72,357,2)
(194,785,2)
(140,176,2)
(518,697,2)
(332,587,2)
(661,635,2)
(872,584,2)
(769,633,2)
(899,781,2)
(597,608,2)
(451,440,2)
(31,126,2)
(646,726,2)
(187,673,2)
(117,126,2)
(518,660,2)
(518,584,2)
(783,608,2)
(339,846,2)
(992,781,2)
(872,411,2)
(793,734,2)
(595,608,2)
(832,908,2)
(445,126,2)
(608,16,2)
(543,342,2)
(112,608,2)
(872,697,2)
(726,608,2)
(3,608,2)
(246,608,2)
(594,531,2)
(830,779,2)
(765,903,2)
(832,815,2)
(27,344,2)
(404,489,2)
(339,854,2)
(518,403,2)
(410,97,2)
(469,649,2)
(955,791,2)
(832,608,2)
(585,492,2)
(281,304,2)
(61,591,2)
(790,391,2)
(228,608,2)
(846,336,2)
(670,608,2)
(832,407,2)
(660,176,2)
(929,531,2)
(649,59,2)
(80,929,2)
(27,489,2)
(827,838,2)
(356,608,2)
(369,234,2)
(339,825,2)
(339,214,2)
(698,591,2)
(339,700,2)
(89,774,2)
(339,206,2)
(840,492,2)
(877,887,2)
(761,250,2)
(269,342,2)
(518,842,2)
(732,176,2)
(872,592,2)
(387,176,2)
(884,531,2)
(339,281,2)
(733,513,2)
(718,608,2)
(984,151,2)
(339,584,2)
(995,608,2)
(14,399,2)
(303,936,2)
(205,608,2)
(316,608,2)
(735,608,2)
(804,608,2)
(504,909,2)
(462,608,2)
(339,344,2)
(465,105,2)
(681,631,2)
(678,936,2)
(787,984,2)
(269,235,2)
(832,462,2)
(442,984,2)
(591,608,2)
(243,220,2)
(805,781,2)
(280,399,2)
(908,608,2)
(527,608,2)
(786,608,2)
(498,608,2)
(464,176,2)
(35,627,2)
(961,227,2)
(119,608,2)
(438,779,2)
(872,407,2)
(876,779,2)
(505,193,2)
(518,872,2)
(615,673,2)
(832,145,2)
(87,216,2)
(599,564,2)
(668,608,2)
(268,250,2)
(872,832,2)
(518,997,2)
(575,772,2)
(531,122,2)
(9,531,2)
(631,59,2)
(540,645,2)
(872,476,2)
(159,969,2)
(866,176,2)
(384,730,2)
(649,440,2)
(27,997,2)
(27,184,2)
(565,341,2)
(872,807,2)
(832,584,2)
(150,688,2)
(415,608,2)
(762,608,2)
(27,256,2)
(183,235,2)
(401,689,2)
(903,342,2)
(803,608,2)
(832,469,2)
(883,608,2)
(69,489,2)
(829,608,2)
(405,608,2)
(778,608,2)
(663,608,2)
(515,608,2)
(147,608,2)
(839,176,2)
(363,531,2)
(690,999,2)
(650,587,2)
(884,167,2)
(705,681,2)
(872,815,2)
(629,604,2)
(771,318,2)
(647,608,2)
(514,936,2)
(742,442,2)
(308,151,2)
(586,492,2)
(518,908,2)
(257,857,2)
(447,235,2)
(193,76,2)
(268,796,2)
(518,322,2)
(27,81,2)
(997,176,2)
(339,403,2)
(402,167,2)
(903,235,2)
(750,608,2)
(252,204,2)
(822,838,2)
(581,608,2)
(902,779,2)
(27,214,2)
(32,293,2)
(243,528,2)
(971,507,2)
(391,107,2)
(785,608,2)
(142,608,2)
(559,489,2)
(673,28,2)
(407,176,2)
(20,688,2)
(442,760,2)
(27,218,2)
(269,176,2)
(544,591,2)
(339,842,2)
(956,645,2)
(664,598,2)
(617,1,2)
(339,997,2)
(481,608,2)
(467,293,2)
(455,25,2)
(920,176,2)
(339,218,2)
(375,176,2)
(453,293,2)
(27,476,2)
(24,944,2)
(339,660,2)
(518,339,2)
(346,122,2)
(144,936,2)
(825,176,2)
(27,281,2)
(817,779,2)
(502,338,2)
(185,601,2)
(683,699,2)
(584,608,2)
(592,608,2)
(629,608,2)
(635,375,2)
(518,351,2)
(872,353,2)
(809,779,2)
(27,437,2)
(650,122,2)
(733,122,2)
(518,897,2)
(27,407,2)
(37,944,2)
(845,515,2)
(444,608,2)
(352,33,2)
(385,63,2)
(716,127,2)
(820,531,2)
(631,440,2)
(284,250,2)
(31,451,2)
(518,184,2)
(697,608,2)
(211,960,2)
(872,839,2)
(107,648,2)
(116,652,2)
(872,27,2)
(267,920,2)
(511,492,2)
(368,608,2)
(95,608,2)
(370,26,2)
(478,608,2)
(691,772,2)
(77,608,2)
(834,598,2)
(832,184,2)
(307,531,2)
(910,204,2)
(255,608,2)
(659,104,2)
(28,464,2)
(384,608,2)
(728,235,2)
(410,546,2)
(887,151,2)
(156,250,2)
(310,608,2)
(510,453,2)
(832,518,2)
(604,608,2)
(832,344,2)
(562,176,2)
(20,176,2)
(97,546,2)
(706,608,2)
(779,779,2)
(801,681,2)
(105,984,2)
(352,608,2)
(339,469,2)
(27,815,2)
(276,587,2)
(35,624,2)
(640,608,2)
(832,872,2)
(756,176,2)
(417,627,2)
(571,822,2)
(832,422,2)
(713,834,2)
(936,442,2)
(250,2,2)
(794,124,2)
(872,469,2)
(850,193,2)
(62,608,2)
(434,608,2)
(341,601,2)
(545,889,2)
(402,122,2)
(296,608,2)
(546,318,2)
(276,531,2)
(137,779,2)
(127,401,2)
(522,944,2)
(852,587,2)
(338,865,2)
(973,779,2)
(872,96,2)
(339,897,2)
(97,388,2)
(662,624,2)
(872,842,2)
(739,126,2)
(695,423,2)
(518,700,2)
(937,122,2)
(872,660,2)
(74,105,2)
(951,608,2)
(122,492,2)
(738,16,2)
(872,256,2)
(54,980,2)
(39,540,2)
(125,137,2)
(994,608,2)
(770,608,2)
(843,779,2)
(332,492,2)
(315,399,2)
(435,608,2)
(515,408,2)
(768,673,2)
(806,406,2)
(399,624,2)
(27,353,2)
(518,732,2)
(648,849,2)
(796,667,2)
(291,176,2)
(231,608,2)
(159,79,2)
(510,293,2)
(105,748,2)
(339,839,2)
(756,342,2)
(760,984,2)
(578,126,2)
(25,176,2)
(51,608,2)
(294,151,2)
(421,204,2)
(769,608,2)
(97,262,2)
(707,608,2)
(70,159,2)
(385,673,2)
(340,984,2)
(518,437,2)
(275,608,2)
(852,122,2)
(957,608,2)
(781,608,2)
(150,856,2)
(909,636,2)
(424,608,2)
(932,806,2)
(832,966,2)
(781,766,2)
(832,411,2)
(639,909,2)
(526,180,2)
(969,176,2)
(172,608,2)
(518,933,2)
(294,984,2)
(143,537,2)
(27,23,2)
(365,608,2)
(956,176,2)
(518,218,2)
(342,663,2)
(925,608,2)
(487,127,2)
(2,608,2)
(518,23,2)
(702,122,2)
(103,496,2)
(453,645,2)
(265,608,2)
(884,312,2)
(27,584,2)
(906,59,2)
(792,748,2)
(248,70,2)
(372,250,2)
(42,608,2)
(851,852,2)
(660,608,2)
(411,608,2)
(853,608,2)
(825,489,2)
(484,902,2)
(754,123,2)
(832,256,2)
(85,250,2)
(36,990,2)
(311,176,2)
(339,480,2)
(929,278,2)
(339,145,2)
(832,933,2)
(975,944,2)
(150,176,2)
(321,635,2)
(165,608,2)
(815,781,2)
(890,608,2)
(137,175,2)
(184,608,2)
(613,608,2)
(772,478,2)
(354,399,2)
(27,872,2)
(823,608,2)
(960,696,2)
(648,234,2)
(339,462,2)
(591,759,2)
(872,897,2)
(44,372,2)
(196,629,2)
(27,411,2)
(580,796,2)
(169,781,2)
(515,163,2)
(903,176,2)
(27,311,2)
(20,421,2)
(11,756,2)
(357,451,2)
(960,204,2)
(59,72,2)
(428,608,2)
(984,984,2)
(867,546,2)
(630,673,2)
(872,846,2)
(335,492,2)
(538,608,2)
(832,700,2)
(921,673,2)
(439,906,2)
(243,16,2)
(86,399,2)
(82,838,2)
(351,176,2)
(646,176,2)
(360,591,2)
(517,591,2)
(339,966,2)
(923,608,2)
(606,608,2)
(16,964,2)
(268,85,2)
(659,268,2)
(127,635,2)
(634,608,2)
(610,781,2)
(23,608,2)
(27,469,2)
(766,59,2)
(20,601,2)
(42,779,2)
(213,773,2)
(872,872,2)
(518,344,2)
(27,322,2)
(832,997,2)
(518,27,2)
(712,608,2)
-----------------------------------
(0,getuid()
(1,(sizeof cf->sessions[0])
(2,atoi(optarg)
(3,\':\')
(4,bh)
(5,errx(1, "timeout notification socket name too short")
(6,printf("Basic version: %d\\n", CPROTOVER)
(7,if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(8,bh6)
(9,cf->bindaddr)
(10,cf)
(11,cf->port_min++)
(12,strcpy(cf->timeout_handler.socket_name, optarg)
(13,if (bh6[i] != NULL && *bh6[i] == \'\\0\')
(14,umode)
(15,1)
(16,(ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(17,socket(AF_UNIX, SOCK_STREAM, 0)
(18,case \'l\':)
(19,socket_name)
(20,cf->umode)
(21,cf)
(22,1)
(23,cf->run_gname)
(24,0)
(25,cf->bindaddr)
(26,cf->port_min <= 0)
(27,optarg += 4)
(28,cf->bindaddr[0])
(29,cf)
(30,port_max)
(31,bh6[0])
(32,cf)
(33,cf->timeout_handler)
(34,proto_caps[i].pc_id)
(35,bh[1])
(36,bh6[1]++)
(37,i != 1)
(38,1)
(39,cf->port_min > cf->port_max)
(40,bh)
(41,i)
(42,i)
(43,if (strncmp("udp:", optarg, 4)
(44,warnx("limit allocated by setrlimit (%d)
(45,2)
(46,NULL)
(47,max_ttl)
(48,case \'p\':)
(49,port_max)
(50,case \'M\':)
(51,exit(0)
(52,0)
(53,cf->bmode = 1)
(54,cf->nextport[1])
(55,0)
(56,cf)
(57,cf)
(58,cf->sessions = malloc((sizeof cf->sessions[0])
(59,bh6[1] = strchr(bh6[0], \'/\')
(60,malloc(sizeof(struct sockaddr_storage)
(61,bh[1])
(62,1)
(63,cf->bindaddr[1])
(64,if (cf->nofile_limit.rlim_max < atoi(optarg)
(65,1)
(66,cf)
(67,case \'2\':)
(68,1)
(69,cf)
(70,(cf->port_max - cf->port_min + 1)
(71,default:)
(72,strchr(bh6[0], \'/\')
(73,for (i = 1; proto_caps[i].pc_id != NULL; ++i)
(74,bh[i])
(75,i)
(76,bh[0])
(77,cf)
(78,cf)
(79,cf->port_min + 1)
(80,setbindhost(cf->bindaddr[i], AF_INET6, bh6[i], SERVICE)
(81,cp[0])
(82,1)
(83,)
(84,if ((cf->port_min % 2)
(85,cf->nofile_limit)
(86,0)
(87,((bh6[0] == NULL)
(88,cf->nofile_limit)
(89,bh[i])
(90,case \'r\':)
(91,cf)
(92,1)
(93,timeout_handler)
(94,break;)
(95,rlim_cur)
(96,cf->port_min)
(97,cf->run_uname)
(98,nextport)
(99,if (setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(100,cf->bmode)
(101,case \'n\':)
(102,bh6)
(103,1)
(104,int)
(105,bh[i] != NULL && *bh[i] == \'\\0\')
(106,port_max)
(107,bh6[0] != NULL)
(108,)
(109,bh6)
(110,proto_caps)
(111,bh)
(112,atoi(optarg)
(113,cf)
(114,cf)
(115,NULL)
(116,0)
(117,bh6[0] == NULL && bh6[1] == NULL)
(118,"Basic version: %d\\n")
(119,cf)
(120,cf)
(121,0)
(122,bh[i] != NULL)
(123,struct sockaddr_storage)
(124,strncmp("unix:", optarg, 5)
(125,proto_caps[i].pc_id)
(126,bh[1] == NULL)
(127,cf->rdir == NULL && cf->sdir != NULL)
(128,cf->bindaddr)
(129,connected)
(130,errx(1, "explicit binding address has to be specified in UDP "\n\\n\\t      "command mode")
(131,cf->sessions)
(132,err(1, "getrlimit")
(133,i)
(134,nofile_limit)
(135,cf->run_uname)
(136,cf->rtp_servers[0])
(137,proto_caps[i])
(138,NULL)
(139,SESSION_TIMEOUT)
(140,cf->port_max)
(141,cf->rtp_servers)
(142,optarg)
(143,cf->pfds = malloc((sizeof cf->pfds[0])
(144,NULL)
(145,cf->nodaemon)
(146,2)
(147,1)
(148,cp++)
(149,RET)
(150,cf->umode)
(151,i = 0)
(152,cf)
(153,2)
(154,if (bh[0] != NULL && bh6[0] != NULL)
(155,0)
(156,optarg)
(157,NULL)
(158,case \'T\':)
(159,cf->port_max - cf->port_min + 1)
(160,0)
(161,bh)
(162,1)
(163,cf->timeout_handler.fd = -1)
(164,tos)
(165,0)
(166,cf->ttl_mode = TTL_UNIFIED)
(167,cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage)
(168,fd)
(169,cf->bmode = 1)
(170,cf->nextport[0] = cf->nextport[1] = cf->port_min)
(171,1)
(172,optarg)
(173,1)
(174,if (bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL)
(175,i = 1)
(176,struct cfg *cf)
(177,optarg)
(178,case \'f\':)
(179,1)
(180,cf->nofile_limit)
(181,1)
(182,TTL_UNIFIED)
(183,cf->port_min)
(184,cf->max_ttl)
(185,umode)
(186,cp)
(187,1)
(188,rlim_max)
(189,cf)
(190,i)
(191,NULL)
(192,((bh[0] == NULL)
(193,bh[0] == NULL)
(194,err(1, "can\'t allocate memory")
(195,0)
(196,strchr(bh[0], \'/\')
(197,1)
(198,if (bh[i] != NULL && *bh[i] == \'\\0\')
(199,2)
(200,optarg)
(201,1)
(202,cf)
(203,cf)
(204,strncmp("udp6:", optarg, 5)
(205,NULL)
(206,cf->rrtcp)
(207,5)
(208,i++)
(209,rrtcp)
(210,sessions)
(211,optarg)
(212,sizeof cf->pfds[0])
(213,"getrlimit")
(214,bh[0])
(215,0)
(216,(bh6[0] == NULL)
(217,i)
(218,cf->timeout_handler.socket_name)
(219,NULL)
(220,int argc)
(221,break;)
(222,0)
(223,RLIMIT_NOFILE)
(224,port_max)
(225,timeout_handler)
(226,1)
(227,cf->umode != 0)
(228,cf)
(229,bh6)
(230,1)
(231,cf)
(232,"timeout notification socket name too short")
(233,)
(234,bh6[0] = optarg)
(235,cf->port_min = PORT_MIN)
(236,bh6)
(237,cf->bindaddr[1] = NULL)
(238,break;)
(239,optarg)
(240,1)
(241,0)
(242,bindaddr)
(243,getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(244,PORT_MIN)
(245,case \'F\':)
(246,nofile_limit)
(247,errx(1, "running this program as superuser in a remote control "\n\\n\\t      "mode is strongly not recommended, as it poses serious security "\n\\n\\t      "threat to your system. Use -u option to run as an unprivileged "\n\\n\\t      "user or -F is you want to run as a superuser anyway.")
(248,((cf->port_max - cf->port_min + 1)
(249,PORT_MAX)
(250,cf->nofile_limit.rlim_max < atoi(optarg)
(251,port_max)
(252,"unix:")
(253,5)
(254,if (getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(255,break;)
(256,*bh[1])
(257,cf)
(258,2)
(259,cf)
(260,rlim_max)
(261,cf->timeout_handler)
(262,cf->run_uname = optarg)
(263,4)
(264,run_gname)
(265,sdir)
(266,optarg)
(267,&(cf->nofile_limit)
(268,cf->nofile_limit.rlim_max)
(269,cf->port_min)
(270,0)
(271,cf)
(272,umode)
(273,NULL)
(274,"incomplete configuration of the bridging mode - exactly "\n\\n\\t      "2 listen addresses required, %d provided")
(275,usage()
(276,cf->bindaddr[i])
(277,cf)
(278,bh6[i] = NULL)
(279,bh)
(280,0)
(281,cf->timeout_handler.connected)
(282,malloc((sizeof cf->rtp_servers[0])
(283,rrtcp)
(284,"limit allocated by setrlimit (%d)
(285,strncmp("udp:", optarg, 4)
(286,cf)
(287,i)
(288,1)
(289,NULL)
(290,cf)
(291,cf->pfds)
(292,if (cf->bindaddr[0] == NULL)
(293,cf->port_max <= 0)
(294,bh[i])
(295,port_max)
(296,cf)
(297,continue;)
(298,cf->bindaddr[i] = malloc(sizeof(struct sockaddr_storage)
(299,continue;)
(300,"setrlimit")
(301,cf)
(302,bh[1])
(303,bh6[i])
(304,cf->timeout_handler)
(305,pfds)
(306,nofile_limit)
(307,AF_INET6)
(308,i++)
(309,bh)
(310,optarg)
(311,cf->sdir)
(312,cf->bindaddr[i] = NULL)
(313,if (cf->umode != 0)
(314,cf)
(315,bh)
(316,cf->rrtcp = 0)
(317,cf->rtp_servers =  malloc((sizeof cf->rtp_servers[0])
(318,cf->no_check == 0)
(319,0)
(320,NULL)
(321,NULL)
(322,bh6[1])
(323,for (i = 0; i < 2; i++)
(324,argv)
(325,cf)
(326,1)
(327,if (cf->port_min <= 0 || cf->port_min > 65535)
(328,TTL_INDEPENDENT)
(329,1)
(330,"getrlimit")
(331,-1)
(332,bh[i])
(333,cf)
(334,cf->sessions)
(335,bh)
(336,cf->timeout_handler)
(337,errx(1, "invalid value of the port_min argument, "\n\\n\\t  "not in the range 1-65535")
(338,(cf->port_max % 2)
(339,optarg += 5)
(340,bh)
(341,cf->umode != 0)
(342,cf->port_min = atoi(optarg)
(343,if (bh6[i] != NULL)
(344,cf->port_min)
(345,if (cf->timeout_handler.fd == -1)
(346,i)
(347,1)
(348,port_min)
(349,errx(1, "either IPv4 or IPv6 should be configured for external "\n\\n\\t      "interface in bridging mode, not both")
(350,1)
(351,cf->tos)
(352,cf->timeout_handler.socket_name)
(353,cf->nofile_limit.rlim_cur)
(354,"*")
(355,5)
(356,4)
(357,bh6[0])
(358,65535)
(359,NULL)
(360,bmode)
(361,ttl_mode)
(362,cf)
(363,cf)
(364,cf)
(365,cf)
(366,i)
(367,cf->pfds)
(368,optarg)
(369,bh6[0])
(370,cf->port_min > 65535)
(371,rdir)
(372,atoi(optarg)
(373,port_max)
(374,"either IPv4 or IPv6 should be configured for internal "\n\\n\\t      "interface in bridging mode, not both")
(375,cf->rdir)
(376,timeout_handler)
(377,pfds)
(378,bh)
(379,1)
(380,case \'L\':)
(381,if(strncmp("unix:", optarg, 5)
(382,1)
(383,port_min)
(384,cf->port_max = atoi(optarg)
(385,cf->bindaddr[0] = cf->bindaddr[1])
(386,1)
(387,cf->port_min)
(388,cf->run_uname = NULL)
(389,port_min)
(390,nofile_limit)
(391,bh[0] != NULL && bh6[0] != NULL)
(392,0)
(393,if (cf->bmode != 0)
(394,cf->port_min % 2)
(395,cf)
(396,0)
(397,if (cf->rdir == NULL && cf->sdir != NULL)
(398,rtp_servers)
(399,bh[0] == NULL && bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL)
(400,)
(401,cf->sdir != NULL)
(402,cf->bindaddr[i])
(403,cf->no_check)
(404,5)
(405,cf)
(406,setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(407,cf->max_ttl)
(408,cf->timeout_handler)
(409,cf->bindaddr)
(410,cf->run_uname == NULL)
(411,cf->timeout_handler.socket_name)
(412,if(cf->timeout_handler.socket_name == NULL)
(413,0)
(414,port_max)
(415,malloc(strlen(optarg)
(416,1)
(417,bh[0] = bh[1] = bh6[0] = bh6[1] = NULL)
(418,)
(419,if (bh[1] != NULL && bh6[1] != NULL)
(420,i)
(421,cf->umode = 6)
(422,bh6[0])
(423,bh[1] != NULL && bh6[1] != NULL)
(424,0)
(425,port_min)
(426,"exactly 1 listen addresses required, %d provided")
(427,strlen(optarg)
(428,cf)
(429,case \'i\':)
(430,-1)
(431,0)
(432,0)
(433,0)
(434,break;)
(435,break;)
(436,i)
(437,cf->port_max)
(438,NULL)
(439,bh6[1] == NULL)
(440,bh6[1] = NULL)
(441,printf("Extension %s: %s\\n", proto_caps[i].pc_id,\n\\n\\t\\t    proto_caps[i].pc_description)
(442,bh6[i] != NULL)
(443,optarg)
(444,strlen(optarg)
(445,0)
(446,cf->umode)
(447,cf->port_min)
(448,if (i != 2)
(449,break;)
(450,case \'v\':)
(451,bh6[0] = bh6[1] = NULL)
(452,"can\'t create timeout socket")
(453,cf->port_max)
(454,cf->bindaddr[i])
(455,cf->bindaddr[0])
(456,cf->bindaddr)
(457,max_ttl)
(458,cf)
(459,cf)
(460,strlen(optarg)
(461,1)
(462,cf->port_max)
(463,++i)
(464,cf->bindaddr)
(465,bh)
(466,cf->sessions[0])
(467,port_max)
(468,5)
(469,*bh6[1])
(470,cf->max_ttl = SESSION_TIMEOUT)
(471,cf->nextport)
(472,case \'R\':)
(473,)
(474,case \'s\':)
(475,if(strlen(optarg)
(476,cf->bmode)
(477,bh6)
(478,cp = strchr(optarg, \':\')
(479,0)
(480,bh[1])
(481,timeout_handler)
(482,rlim_max)
(483,socket_name)
(484,proto_caps[i].pc_description)
(485,struct sockaddr_storage)
(486,cf->bindaddr[1])
(487,1)
(488,errx(1, "invalid value of the port_max argument, "\n\\n\\t  "not in the range 1-65535")
(489,strncmp("udp:", optarg, 4)
(490,cf->timeout_handler.connected = 0)
(491,0)
(492,i < 2)
(493,bh)
(494,cp)
(495,)
(496,cf->port_min <= 0 || cf->port_min > 65535)
(497,cf->timeout_handler)
(498,"unix:")
(499,bh6)
(500,if (cf->umode != 0)
(501,bh[0])
(502,cf->port_max--)
(503,cf)
(504,err(1, "getrlimit")
(505,0)
(506,)
(507,bh[0] = "*")
(508,bh6)
(509,bh[1]++)
(510,cf->port_max > 65535)
(511,i)
(512,NULL)
(513,sizeof(struct sockaddr_storage)
(514,i)
(515,cf->timeout_handler.fd)
(516,cf->tos = TOS)
(517,1)
(518,optarg += 5)
(519,cp)
(520,NULL)
(521,cp)
(522,i)
(523,char *)
(524,if (cp != NULL)
(525,cf->port_max)
(526,&(cf->nofile_limit)
(527,i)
(528,char **argv)
(529,cf->run_gname = cp)
(530,i)
(531,bh6[i] != NULL)
(532,bh)
(533,optarg)
(534,)
(535,0)
(536,ttl_mode)
(537,malloc((sizeof cf->pfds[0])
(538,cf)
(539,optarg)
(540,cf->port_max)
(541,rtp_servers)
(542,optarg)
(543,cf->port_min)
(544,bh[1])
(545,(sizeof cf->pfds[0])
(546,getuid()
(547,1)
(548,rdir)
(549,i)
(550,port_min)
(551,bh6)
(552,AF_UNIX)
(553,cf)
(554,atoi(optarg)
(555,port_min)
(556,nextport)
(557,cf)
(558,"running this program as superuser in a remote control "\n\\n\\t      "mode is strongly not recommended, as it poses serious security "\n\\n\\t      "threat to your system. Use -u option to run as an unprivileged "\n\\n\\t      "user or -F is you want to run as a superuser anyway.")
(559,strncmp("udp6:", optarg, 5)
(560,0)
(561,SOCK_STREAM)
(562,cf->bindaddr)
(563,nofile_limit)
(564,bh[1] != NULL)
(565,warnx("WARNING!!! Running this program as superuser is strongly "\n\\n\\t      "not recommended, as it may pose serious security threat to "\n\\n\\t      "your system. Use -u option to run as an unprivileged user "\n\\n\\t      "or -F to surpress this warning.")
(566,cf)
(567,)
(568,1)
(569,i)
(570,cf->nofile_limit)
(571,((bh[1] == NULL)
(572,cf->port_min + 1)
(573,case \'u\':)
(574,if (bh[1] != NULL)
(575,0)
(576,if ((cf->port_max % 2)
(577,0)
(578,bh6[0] == NULL)
(579,cf)
(580,cf->nofile_limit.rlim_max)
(581,optarg)
(582,1)
(583,1)
(584,pid_file = optarg)
(585,bindaddr)
(586,cf)
(587,i = 0)
(588,1)
(589,bh6[0])
(590,"invalid value of the port_max argument, "\n\\n\\t  "not in the range 1-65535")
(591,bh[1] != NULL)
(592,cmd_sock = optarg)
(593,bh6[1])
(594,bindaddr)
(595,cf->rdir = optarg)
(596,cf)
(597,cp)
(598,i = ((bh[0] == NULL)
(599,1)
(600,bh[1] == NULL && bh6[0] == NULL && bh6[1] == NULL)
(601,cf->no_check == 0 && getuid()
(602,break;)
(603,port_min)
(604,bh[0] = optarg)
(605,NULL)
(606,0)
(607,0)
(608,ch)
(609,cf->rtp_servers)
(610,bmode)
(611,"udp6:")
(612,)
(613,break;)
(614,0)
(615,bindaddr)
(616,bh6)
(617,malloc((sizeof cf->sessions[0])
(618,optarg)
(619,fd)
(620,sdir)
(621,cf)
(622,1)
(623,bindaddr)
(624,bh[0] == NULL)
(625,65535)
(626,cf)
(627,bh[1] = bh6[0] = bh6[1] = NULL)
(628,(cf->port_max - cf->port_min + 1)
(629,bh[0])
(630,cf)
(631,bh6[1])
(632,cf->nextport[0])
(633,cf->nofile_limit)
(634,bh6)
(635,cf->rdir == NULL)
(636,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(637,\'/\')
(638,nofile_limit)
(639,1)
(640,strchr(optarg, \':\')
(641,0)
(642,i)
(643,if (cf->port_max <= 0 || cf->port_max > 65535)
(644,socket_name)
(645,cf->port_max = PORT_MAX)
(646,cf->no_check)
(647,cf->dmode = 1)
(648,bh6[0])
(649,bh6[1])
(650,bh6[i])
(651,optarg)
(652,bh6[0] == NULL)
(653,cf)
(654,timeout_handler)
(655,"WARNING!!! Running this program as superuser is strongly "\n\\n\\t      "not recommended, as it may pose serious security threat to "\n\\n\\t      "your system. Use -u option to run as an unprivileged user "\n\\n\\t      "or -F to surpress this warning.")
(656,bh6)
(657,bh)
(658,if (cp == optarg)
(659,(int)
(660,cf->rrtcp)
(661,cf)
(662,1)
(663,atoi(optarg)
(664,errx(1, "exactly 1 listen addresses required, %d provided", i)
(665,1)
(666,-1)
(667,atoi(optarg)
(668,cf->max_ttl = atoi(optarg)
(669,2)
(670,nofile_limit)
(671,optarg)
(672,bh6)
(673,cf->bindaddr[0] == NULL)
(674,cf)
(675,1)
(676,cf)
(677,"-S switch requires -r switch")
(678,bh6)
(679,umode)
(680,port_max)
(681,bh6[1] == NULL)
(682,NULL)
(683,cf->timeout_handler.socket_name)
(684,cf->port_max - cf->port_min + 1)
(685,cf->timeout_handler)
(686,fd)
(687,cf)
(688,cf->umode = 1)
(689,cf->sdir)
(690,cf->port_max - cf->port_min + 1)
(691,cp == optarg)
(692,1)
(693,bh)
(694,5)
(695,errx(1, "either IPv4 or IPv6 should be configured for internal "\n\\n\\t      "interface in bridging mode, not both")
(696,strncmp("unix:", optarg, 5)
(697,cf->nofile_limit.rlim_max)
(698,bh)
(699,cf->timeout_handler.socket_name = (char *)
(700,bh6[1])
(701,bh)
(702,bindaddr)
(703,break;)
(704,pc_description)
(705,(bh6[1] == NULL)
(706,cf->timeout_handler)
(707,optarg)
(708,i)
(709,cf)
(710,sessions)
(711,cf->timeout_handler.fd = socket(AF_UNIX, SOCK_STREAM, 0)
(712,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(713,errx(1, "incomplete configuration of the bridging mode - exactly "\n\\n\\t      "2 listen addresses required, %d provided", i)
(714,optarg)
(715,cf)
(716,errx(1, "-S switch requires -r switch")
(717,bh6)
(718,optarg)
(719,optarg)
(720,optarg)
(721,case \'S\':)
(722,while ((ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(723,"either IPv4 or IPv6 should be configured for external "\n\\n\\t      "interface in bridging mode, not both")
(724,dmode)
(725,proto_caps)
(726,cf->no_check = 1)
(727,break;)
(728,cf->port_min)
(729,1)
(730,atoi(optarg)
(731,)
(732,cf->rdir)
(733,malloc(sizeof(struct sockaddr_storage)
(734,(cf->port_max - cf->port_min + 1)
(735,1)
(736,cf)
(737,\'\\0\')
(738,argc)
(739,bh6)
(740,TOS)
(741,6)
(742,*bh6[i] == \'\\0\')
(743,bh)
(744,0)
(745,cf)
(746,err(1, "can\'t create timeout socket")
(747,NULL)
(748,bh[i] != NULL)
(749,1)
(750,break;)
(751,NULL)
(752,optarg)
(753,cf)
(754,sizeof(struct sockaddr_storage)
(755,cf)
(756,cf->port_min)
(757,cf)
(758,case \'?\':)
(759,bh[1])
(760,bh6[i])
(761,cf)
(762,optarg)
(763,break;)
(764,bh)
(765,cf->nextport[1] = cf->port_min)
(766,bh6[1])
(767,bindaddr)
(768,cf->bindaddr)
(769,&(cf->nofile_limit)
(770,bh6)
(771,getuid()
(772,cp != NULL)
(773,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(774,bh[i] = NULL)
(775,cf->pfds[0])
(776,i)
(777,no_check)
(778,cf->nodaemon = 1)
(779,proto_caps[i].pc_id != NULL)
(780,nodaemon)
(781,bh6[1] != NULL)
(782,bh6)
(783,0)
(784,"port_min should be less than port_max")
(785,cf->timeout_handler.socket_name == NULL)
(786,cp)
(787,i)
(788,\'\\0\')
(789,for (i = 0; i < 2; i++)
(790,1)
(791,sizeof cf->rtp_servers[0])
(792,*bh[i])
(793,((cf->port_max - cf->port_min + 1)
(794,strncmp("unix:", optarg, 5)
(795,5)
(796,cf->nofile_limit.rlim_max = atoi(optarg)
(797,NULL)
(798,CPROTOVER)
(799,0)
(800,cf->sdir = optarg)
(801,0)
(802,NULL)
(803,run_uname)
(804,RLIMIT_NOFILE)
(805,cf)
(806,setrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(807,bh[1])
(808,i)
(809,proto_caps[i])
(810,optarg)
(811,cf)
(812,no_check)
(813,NULL)
(814,cf->port_max <= 0 || cf->port_max > 65535)
(815,cf->bmode)
(816,SERVICE)
(817,pc_id)
(818,cf)
(819,cf)
(820,cf)
(821,)
(822,(bh[1] == NULL)
(823,"udp:")
(824,cf->rrtcp = 1)
(825,cf->umode)
(826,0)
(827,0)
(828,"invalid value of the port_min argument, "\n\\n\\t  "not in the range 1-65535")
(829,0)
(830,pc_id)
(831,i)
(832,optarg += 5)
(833,cf)
(834,i != 2)
(835,NULL)
(836,tos)
(837,cf)
(838,bh[1] == NULL)
(839,cf->tos)
(840,i)
(841,socket_name)
(842,bh[0])
(843,i)
(844,if (cf->port_min > cf->port_max)
(845,cf->timeout_handler.fd == -1)
(846,cf->timeout_handler.fd)
(847,run_uname)
(848,bh[1])
(849,bh[0] != NULL)
(850,(bh[0] == NULL)
(851,setbindhost(cf->bindaddr[i], AF_INET, bh[i], SERVICE)
(852,bh[i])
(853,bh)
(854,cf->dmode)
(855,AF_INET)
(856,cf->umode = 0)
(857,(cf->port_min % 2)
(858,1)
(859,SERVICE)
(860,\'\\0\')
(861,timeout_handler)
(862,NULL)
(863,)
(864,1)
(865,cf->port_max % 2)
(866,cf->port_min)
(867,cf)
(868,bh6[1] != NULL)
(869,ch)
(870,cf->bindaddr)
(871,\'/\')
(872,optarg += 5)
(873,)
(874,cp)
(875,\'\\0\')
(876,i)
(877,*bh6[i])
(878,cf->port_max)
(879,break;)
(880,cf->ttl_mode = TTL_INDEPENDENT)
(881,"can\'t allocate memory")
(882,0)
(883,bh[1] = strchr(bh[0], \'/\')
(884,cf->bindaddr[i])
(885,1)
(886,break;)
(887,bh6[i])
(888,sizeof cf->sessions[0])
(889,((cf->port_max - cf->port_min + 1)
(890,optarg)
(891,)
(892,bh[0])
(893,2)
(894,break;)
(895,\'\\0\')
(896,0)
(897,cf->umode)
(898,1)
(899,1)
(900,run_uname)
(901,errx(1, "port_min should be less than port_max")
(902,proto_caps[i])
(903,cf->port_min)
(904,if (bh6[1] != NULL)
(905,cf->bindaddr[i])
(906,bh6[1])
(907,i)
(908,cf->timeout_handler.fd)
(909,getrlimit(RLIMIT_NOFILE, &(cf->nofile_limit)
(910,umode)
(911,1)
(912,i)
(913,cf)
(914,)
(915,port_min)
(916,NULL)
(917,NULL)
(918,timeout_handler)
(919,if (bh[i] != NULL)
(920,cf->nofile_limit)
(921,NULL)
(922,i)
(923,(char *)
(924,cf->nofile_limit)
(925,cf->tos = atoi(optarg)
(926,optarg)
(927,strlen(optarg)
(928,1)
(929,bh6[i])
(930,cf)
(931,cf)
(932,err(1, "setrlimit")
(933,cf->run_uname)
(934,cf->nofile_limit.rlim_cur = cf->nofile_limit.rlim_max = atoi(optarg)
(935,0)
(936,bh6[i] != NULL && *bh6[i] == \'\\0\')
(937,bindaddr)
(938,cf)
(939,case \'6\':)
(940,cf)
(941,cp[0] = \'\\0\')
(942,bh)
(943,port_min)
(944,cf->bmode != 0)
(945,cf)
(946,ch)
(947,port_min)
(948,NULL)
(949,bmode)
(950,break;)
(951,timeout_handler)
(952,i)
(953,)
(954,*bh[i] == \'\\0\')
(955,(sizeof cf->rtp_servers[0])
(956,cf->port_max)
(957,cmd_sock)
(958,proto_caps)
(959,"vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(960,strncmp("unix:", optarg, 5)
(961,"explicit binding address has to be specified in UDP "\n\\n\\t      "command mode")
(962,i)
(963,if (cf->no_check == 0 && getuid()
(964,ch = getopt(argc, argv, "vf2Rl:6:s:S:t:r:p:T:L:m:M:u:Fin:")
(965,1)
(966,cf->ttl_mode)
(967,NULL)
(968,bindaddr)
(969,cf->port_max)
(970,cf)
(971,bh[0])
(972,bh6)
(973,"Extension %s: %s\\n")
(974,case \'m\':)
(975,1)
(976,*bh[1] = \'\\0\')
(977,)
(978,pid_file)
(979,cf->port_min + 1)
(980,cf->nextport)
(981,cf)
(982,NULL)
(983,0)
(984,i < 2)
(985,RLIMIT_NOFILE)
(986,cf->timeout_handler.socket_name = NULL)
(987,)
(988,0)
(989,bh6)
(990,bh6[1])
(991,0)
(992,*bh6[1] = \'\\0\')
(993,case \'t\':)
(994,break;)
(995,break;)
(996,2)
(997,cf->ttl_mode)
(998,NULL)
(999,cf->port_max)
(1000,port_min)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^