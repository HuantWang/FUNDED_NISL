-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
63,64
64,65
66,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
73,76
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
83,84
83,85
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,70,71,77,78,81,82,87,89,93,94,99,100
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
74,75
74,76
75,76
75,77
79,80
79,81
-----guardedBy-----
39,55
81,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(2,9,0)
(49,25,0)
(39,46,0)
(46,10,0)
(12,8,0)
(44,13,0)
(30,27,0)
(22,14,0)
(46,39,0)
(28,31,0)
(42,40,0)
(48,7,0)
(18,13,0)
(42,13,0)
(8,29,0)
(9,27,0)
(8,42,0)
(11,10,0)
(43,40,0)
(47,35,0)
(33,14,0)
(48,39,0)
(50,23,0)
(14,42,0)
(37,9,0)
(19,1,0)
(21,42,0)
(48,42,0)
(36,4,0)
(45,48,0)
(7,48,0)
(6,46,0)
(20,13,0)
(17,10,0)
(8,39,0)
(7,14,0)
(32,9,0)
(51,48,0)
(14,39,0)
(41,39,0)
(9,10,0)
(40,42,0)
(24,50,0)
(14,7,0)
(39,3,0)
(4,26,0)
(27,9,0)
(1,29,0)
(10,50,0)
(15,50,0)
(38,47,0)
(31,16,0)
(22,48,1)
(48,51,1)
(14,39,1)
(12,7,1)
(46,10,1)
(19,8,1)
(45,0,1)
(31,28,1)
(40,43,1)
(8,12,1)
(37,32,1)
(11,5,1)
(9,37,1)
(34,47,1)
(30,9,1)
(39,46,1)
(42,40,1)
(1,19,1)
(17,11,1)
(28,0,1)
(38,7,1)
(4,36,1)
(46,6,1)
(14,33,1)
(0,5,1)
(7,48,1)
(36,27,1)
(27,30,1)
(43,21,1)
(6,41,1)
(8,42,1)
(0,39,1)
(33,22,1)
(47,38,1)
(10,17,1)
(32,2,1)
(2,10,1)
(7,14,1)
(34,31,1)
(5,42,1)
(34,1,1)
(0,4,1)
(41,27,1)
(51,45,1)
(48,39,1)
(8,39,1)
(9,10,1)
(14,42,1)
(48,42,1)
(27,9,1)
(9,10,2)
(47,7,2)
(14,48,2)
(11,5,2)
(10,5,2)
(30,5,2)
(6,27,2)
(8,42,2)
(46,27,2)
(33,48,2)
(39,46,2)
(48,39,2)
(38,7,2)
(22,48,2)
(48,42,2)
(14,42,2)
(8,39,2)
(27,9,2)
(46,10,2)
(27,5,2)
(48,0,2)
(31,0,2)
(7,14,2)
(7,48,2)
(2,5,2)
(8,7,2)
(12,7,2)
(14,39,2)
(51,0,2)
(19,7,2)
(41,27,2)
(28,0,2)
(7,0,2)
(42,40,2)
(37,5,2)
(45,0,2)
(9,5,2)
(39,27,2)
(32,5,2)
(36,27,2)
(17,5,2)
(4,27,2)
(1,7,2)
-----------------------------------
(0,globalReturnsFalse()
(1,printLine("Sleep time OK")
(2,inputBuffer)
(3,)
(4,printLine("fgets()
(5,globalReturnsTrue()
(6,inputBuffer)
(7,count > 0 && count <= 2000)
(8,SLEEP(count)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,inputBuffer[CHAR_ARRAY_SIZE] = "")
(11,inputBuffer)
(12,count)
(13,)
(14,count <= 2000)
(15,inputBuffer)
(16,)
(17,"")
(18,count)
(19,"Sleep time OK")
(20,if(globalReturnsTrue()
(21,count)
(22,count)
(23,)
(24,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,)
(26,)
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,"Benign, fixed string")
(29,)
(30,NULL)
(31,printLine("Benign, fixed string")
(32,CHAR_ARRAY_SIZE)
(33,2000)
(34,RET)
(35,)
(36,"fgets()
(37,stdin)
(38,"Sleep time too long")
(39,count = atoi(inputBuffer)
(40,-1)
(41,count)
(42,count = -1)
(43,1)
(44,if(globalReturnsFalse()
(45,count)
(46,atoi(inputBuffer)
(47,printLine("Sleep time too long")
(48,count > 0)
(49,if (count > 0 && count <= 2000)
(50,)
(51,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^