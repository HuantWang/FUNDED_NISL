-----label-----
0
-----code-----
static void test_message(void) {
        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
        _c_cleanup_(message_unrefp) Message *message1 = NULL, *message2 = NULL;
        SocketBuffer *skb;
        MessageHeader header = {
                .endian = 'l',
        };
        int pair[2], r;

        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);
        assert(r >= 0);

        r = socket_init(&client, NULL, pair[0]);
        assert(r == 0);

        r = socket_init(&server, NULL, pair[1]);
        assert(r == 0);

        r = socket_dequeue(&server, &message2);
        assert(!r && !message2);

        r = message_new_incoming(&message1, header);
        assert(r == 0);

        r = socket_buffer_new(&skb, message1);
        assert(!r);

        socket_queue(&client, skb);

        r = socket_dispatch(&client, EPOLLOUT);
        assert(r == SOCKET_E_LOST_INTEREST);
        r = socket_dispatch(&server, EPOLLIN);
        assert(!r || r == SOCKET_E_PREEMPTED);

        r = socket_dequeue(&server, &message2);
        assert(!r && message2);

        assert(memcmp(message1->header, message2->header, sizeof(header)) == 0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
10,11
11,12
11,13
12,13
14,15
15,16
17,18
18,19
19,20
19,21
19,22
20,21
22,23
22,24
24,25
25,26
25,27
26,27
28,29
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
43,44
45,46
46,47
47,48
47,49
47,50
48,49
50,51
50,52
50,53
53,54
54,55
56,57
56,58
56,59
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
72,73
73,74
74,75
75,76
75,77
75,78
77,78
77,79
79,80
81,82
83,84
84,85
84,86
85,86
87,88
87,89
87,90
87,91
87,92
88,89
90,91
92,93
95,96
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
109,111
109,112
109,113
110,111
112,113
113,114
115,116
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
125,127
126,127
129,130
130,131
130,132
131,132
133,134
133,135
133,136
133,137
134,135
136,137
137,138
139,140
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
157,159
157,160
158,159
160,161
161,162
163,164
164,165
166,167
167,168
167,169
168,169
170,171
170,172
171,172
172,173
174,175
175,176
177,178
178,179
178,180
179,180
181,182
181,183
181,184
182,183
184,185
185,186
187,188
189,190
190,191
190,192
191,192
193,194
193,195
194,195
197,198
198,199
198,200
199,200
201,202
201,203
201,204
202,203
204,205
205,206
207,208
209,210
210,211
210,212
211,212
213,214
214,215
216,217
217,218
217,219
217,220
218,219
220,221
221,222
223,224
225,226
226,227
226,228
227,228
229,230
229,231
229,232
230,231
232,233
233,234
235,236
237,238
238,239
238,240
239,240
241,242
241,243
242,243
244,245
246,247
247,248
247,249
248,249
250,251
250,252
250,253
251,252
253,254
254,255
256,257
258,259
259,260
259,261
260,261
262,263
262,264
263,264
264,265
266,267
266,268
267,268
269,270
271,272
272,273
272,274
273,274
275,276
275,277
275,278
276,277
278,279
279,280
281,282
282,283
284,285
285,286
285,287
286,287
288,289
288,290
289,290
290,291
292,293
294,295
295,296
295,297
296,297
298,299
298,300
299,300
299,301
299,302
299,303
300,301
302,303
302,304
303,304
306,307
306,308
307,308
310,311
311,312
311,313
312,313
-----nextToken-----
2,4,6,8,13,16,21,23,27,29,31,35,37,41,44,49,51,52,55,57,58,61,65,67,68,71,76,78,80,82,86,89,91,93,94,96,100,103,104,108,111,114,116,119,120,124,127,128,132,135,138,140,143,144,148,151,152,156,159,162,165,169,173,176,180,183,186,188,192,195,196,200,203,206,208,212,215,219,222,224,228,231,234,236,240,243,245,249,252,255,257,261,265,268,270,274,277,280,283,287,291,293,297,301,304,305,308,309,313,314,315
-----computeFrom-----
84,85
84,86
101,102
101,103
106,107
106,108
125,126
125,127
130,131
130,132
149,150
149,151
154,155
154,156
170,171
170,172
178,179
178,180
193,194
193,195
198,199
198,200
226,227
226,228
241,242
241,243
247,248
247,249
262,263
262,264
266,267
266,268
272,273
272,274
288,289
288,290
298,299
298,300
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;IdExpression;Name;ProblemStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;
-----ast_node-----
static void test_message(void) {        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);        _c_cleanup_(message_unrefp) Message *message1 = NULL, *message2 = NULL;        SocketBuffer *skb;        MessageHeader header = {                .endian = 'l',        };        int pair[2], r;        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);        assert(r >= 0);        r = socket_init(&client, NULL, pair[0]);        assert(r == 0);        r = socket_init(&server, NULL, pair[1]);        assert(r == 0);        r = socket_dequeue(&server, &message2);        assert(!r && !message2);        r = message_new_incoming(&message1, header);        assert(r == 0);        r = socket_buffer_new(&skb, message1);        assert(!r);        socket_queue(&client, skb);        r = socket_dispatch(&client, EPOLLOUT);        assert(r == SOCKET_E_LOST_INTEREST);        r = socket_dispatch(&server, EPOLLIN);        assert(!r || r == SOCKET_E_PREEMPTED);        r = socket_dequeue(&server, &message2);        assert(!r && message2);        assert(memcmp(message1->header, message2->header, sizeof(header)) == 0);}
static void
test_message(void)
test_message
void
void


{        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);        _c_cleanup_(message_unrefp) Message *message1 = NULL, *message2 = NULL;        SocketBuffer *skb;        MessageHeader header = {                .endian = 'l',        };        int pair[2], r;        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);        assert(r >= 0);        r = socket_init(&client, NULL, pair[0]);        assert(r == 0);        r = socket_init(&server, NULL, pair[1]);        assert(r == 0);        r = socket_dequeue(&server, &message2);        assert(!r && !message2);        r = message_new_incoming(&message1, header);        assert(r == 0);        r = socket_buffer_new(&skb, message1);        assert(!r);        socket_queue(&client, skb);        r = socket_dispatch(&client, EPOLLOUT);        assert(r == SOCKET_E_LOST_INTEREST);        r = socket_dispatch(&server, EPOLLIN);        assert(!r || r == SOCKET_E_PREEMPTED);        r = socket_dequeue(&server, &message2);        assert(!r && message2);        assert(memcmp(message1->header, message2->header, sizeof(header)) == 0);}
_c_cleanup_(socket_deinit)
_c_cleanup_(socket_deinit)
_c_cleanup_
_c_cleanup_
(socket_deinit)
socket_deinit
socket_deinit
)
Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
Socket
Socket
client = SOCKET_NULL(client)
client
= SOCKET_NULL(client)
SOCKET_NULL(client)
SOCKET_NULL
SOCKET_NULL
client
client
server = SOCKET_NULL(server)
server
= SOCKET_NULL(server)
SOCKET_NULL(server)
SOCKET_NULL
SOCKET_NULL
server
server
_c_cleanup_(message_unrefp)
_c_cleanup_(message_unrefp)
_c_cleanup_
_c_cleanup_
(message_unrefp)
message_unrefp
message_unrefp
)
Message *message1 = NULL, *message2 = NULL;
Message *message1 = NULL, *message2 = NULL;
Message
Message
*message1 = NULL
*
message1
= NULL
NULL
NULL
*message2 = NULL
*
message2
= NULL
NULL
NULL
SocketBuffer *skb;
SocketBuffer *skb;
SocketBuffer
SocketBuffer
*skb
*
skb
MessageHeader
MessageHeader
MessageHeader
r
header = {                .endian = 'l',        };
int pair[2], r;
int pair[2], r;
int
pair[2]
pair
[2]
2
r
r
r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);
r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
r
r
socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
socketpair
socketpair
AF_UNIX
AF_UNIX
SOCK_STREAM
SOCK_STREAM
0
pair
pair
assert(r >= 0);
assert(r >= 0)
assert
assert
r >= 0
r
r
0
r = socket_init(&client, NULL, pair[0]);
r = socket_init(&client, NULL, pair[0])
r
r
socket_init(&client, NULL, pair[0])
socket_init
socket_init
&client
client
client
NULL
NULL
pair[0]
pair
pair
0
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_init(&server, NULL, pair[1]);
r = socket_init(&server, NULL, pair[1])
r
r
socket_init(&server, NULL, pair[1])
socket_init
socket_init
&server
server
server
NULL
NULL
pair[1]
pair
pair
1
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_dequeue(&server, &message2);
r = socket_dequeue(&server, &message2)
r
r
socket_dequeue(&server, &message2)
socket_dequeue
socket_dequeue
&server
server
server
&message2
message2
message2
assert(!r && !message2);
assert(!r && !message2)
assert
assert
!r && !message2
!r
r
r
!message2
message2
message2
r = message_new_incoming(&message1, header);
r = message_new_incoming(&message1, header)
r
r
message_new_incoming(&message1, header)
message_new_incoming
message_new_incoming
&message1
message1
message1
header
header
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_buffer_new(&skb, message1);
r = socket_buffer_new(&skb, message1)
r
r
socket_buffer_new(&skb, message1)
socket_buffer_new
socket_buffer_new
&skb
skb
skb
message1
message1
assert(!r);
assert(!r)
assert
assert
!r
r
r
socket_queue(&client, skb);
socket_queue(&client, skb)
socket_queue
socket_queue
&client
client
client
skb
skb
r = socket_dispatch(&client, EPOLLOUT);
r = socket_dispatch(&client, EPOLLOUT)
r
r
socket_dispatch(&client, EPOLLOUT)
socket_dispatch
socket_dispatch
&client
client
client
EPOLLOUT
EPOLLOUT
assert(r == SOCKET_E_LOST_INTEREST);
assert(r == SOCKET_E_LOST_INTEREST)
assert
assert
r == SOCKET_E_LOST_INTEREST
r
r
SOCKET_E_LOST_INTEREST
SOCKET_E_LOST_INTEREST
r = socket_dispatch(&server, EPOLLIN);
r = socket_dispatch(&server, EPOLLIN)
r
r
socket_dispatch(&server, EPOLLIN)
socket_dispatch
socket_dispatch
&server
server
server
EPOLLIN
EPOLLIN
assert(!r || r == SOCKET_E_PREEMPTED);
assert(!r || r == SOCKET_E_PREEMPTED)
assert
assert
!r || r == SOCKET_E_PREEMPTED
!r
r
r
r == SOCKET_E_PREEMPTED
r
r
SOCKET_E_PREEMPTED
SOCKET_E_PREEMPTED
r = socket_dequeue(&server, &message2);
r = socket_dequeue(&server, &message2)
r
r
socket_dequeue(&server, &message2)
socket_dequeue
socket_dequeue
&server
server
server
&message2
message2
message2
assert(!r && message2);
assert(!r && message2)
assert
assert
!r && message2
!r
r
r
message2
message2
assert(memcmp(message1->header, message2->header, sizeof(header)) == 0);
assert(memcmp(message1->header, message2->header, sizeof(header)) == 0)
assert
assert
memcmp(message1->header, message2->header, sizeof(header)) == 0
memcmp(message1->header, message2->header, sizeof(header))
memcmp
memcmp
message1->header
message1
message1
header
message2->header
message2
message2
header
sizeof(header)
header
header
header

0
-----joern-----
(138,36,0)
(105,71,0)
(145,76,0)
(142,14,0)
(132,87,0)
(44,139,0)
(117,100,0)
(137,47,0)
(12,122,0)
(88,86,0)
(73,85,0)
(41,100,0)
(6,71,0)
(65,47,0)
(32,68,0)
(18,120,0)
(107,70,0)
(83,14,0)
(54,19,0)
(93,106,0)
(122,129,0)
(55,67,0)
(46,99,0)
(98,34,0)
(96,21,0)
(64,23,0)
(58,96,0)
(19,54,0)
(95,89,0)
(105,19,0)
(75,71,0)
(40,31,0)
(69,97,0)
(47,33,0)
(53,127,0)
(63,30,0)
(120,18,0)
(90,14,0)
(61,28,0)
(32,14,0)
(54,14,0)
(146,79,0)
(31,14,0)
(90,146,0)
(13,123,0)
(124,6,0)
(120,29,0)
(104,14,0)
(70,63,0)
(35,96,0)
(68,86,0)
(31,60,0)
(77,108,0)
(66,139,0)
(86,79,0)
(9,129,0)
(85,122,0)
(123,13,0)
(127,14,0)
(42,63,0)
(97,14,0)
(51,45,0)
(87,125,0)
(142,145,0)
(39,136,0)
(45,5,0)
(108,14,0)
(145,142,0)
(41,14,0)
(69,38,0)
(99,87,0)
(21,33,0)
(123,14,0)
(143,129,0)
(135,100,0)
(66,14,0)
(114,28,0)
(33,47,0)
(128,45,0)
(33,21,0)
(112,31,0)
(101,14,0)
(76,50,0)
(52,31,0)
(130,129,0)
(40,138,0)
(140,42,0)
(80,31,0)
(6,112,0)
(129,122,0)
(62,85,0)
(87,99,0)
(126,30,0)
(50,138,0)
(110,125,0)
(131,14,0)
(36,138,0)
(27,97,0)
(108,77,0)
(118,146,0)
(22,139,0)
(1,79,0)
(97,49,0)
(78,134,0)
(119,49,0)
(100,41,0)
(94,114,0)
(68,34,0)
(48,33,0)
(56,97,0)
(115,145,0)
(121,13,0)
(19,105,0)
(82,105,0)
(138,40,0)
(17,14,0)
(134,79,0)
(136,79,0)
(81,60,0)
(23,53,0)
(91,129,0)
(38,72,0)
(122,14,0)
(6,124,0)
(5,14,0)
(131,96,0)
(49,97,0)
(13,63,0)
(38,69,0)
(20,40,0)
(136,89,0)
(50,14,0)
(72,38,0)
(139,66,0)
(116,68,0)
(77,125,0)
(52,33,0)
(15,18,0)
(26,14,0)
(57,14,0)
(112,6,0)
(106,127,0)
(92,77,0)
(86,68,0)
(30,63,0)
(100,32,0)
(21,14,0)
(29,120,0)
(111,119,0)
(147,50,0)
(84,34,0)
(49,119,0)
(63,42,0)
(89,136,0)
(34,68,0)
(96,131,0)
(113,21,0)
(63,13,0)
(67,14,0)
(37,14,0)
(72,14,0)
(28,114,0)
(27,38,0)
(139,67,0)
(5,114,0)
(10,112,0)
(103,70,0)
(79,134,0)
(0,120,0)
(19,2,0)
(85,141,0)
(133,27,0)
(63,70,0)
(125,14,0)
(25,76,0)
(109,49,0)
(8,90,0)
(67,89,0)
(60,31,0)
(141,85,0)
(146,90,0)
(119,31,0)
(26,45,0)
(43,27,0)
(45,26,0)
(71,14,0)
(144,5,0)
(11,2,0)
(59,124,0)
(141,14,0)
(76,145,0)
(138,50,0)
(7,69,0)
(33,52,0)
(38,27,0)
(71,6,0)
(68,32,0)
(125,87,0)
(4,30,0)
(89,67,0)
(2,19,0)
(114,5,0)
(102,32,0)
(24,36,0)
(74,53,0)
(18,106,0)
(16,52,0)
(79,14,0)
(31,60,1)
(22,44,1)
(65,137,1)
(18,120,1)
(71,6,1)
(62,122,1)
(8,146,1)
(78,1,1)
(72,38,1)
(49,119,1)
(134,78,1)
(38,69,1)
(143,91,1)
(74,23,1)
(130,143,1)
(103,107,1)
(140,70,1)
(121,63,1)
(119,111,1)
(90,146,1)
(23,64,1)
(70,103,1)
(60,81,1)
(138,40,1)
(147,72,1)
(19,105,1)
(96,21,1)
(77,92,1)
(141,85,1)
(115,76,1)
(7,97,1)
(109,119,1)
(107,30,1)
(13,63,1)
(55,90,1)
(67,89,1)
(98,84,1)
(24,40,1)
(142,145,1)
(41,100,1)
(18,15,1)
(89,136,1)
(56,66,1)
(100,135,1)
(112,31,1)
(136,79,1)
(63,70,1)
(84,116,1)
(27,133,1)
(73,62,1)
(94,28,1)
(25,50,1)
(124,59,1)
(42,140,1)
(81,80,1)
(126,142,1)
(63,42,1)
(69,97,1)
(27,97,1)
(112,10,1)
(138,36,1)
(19,2,1)
(4,126,1)
(20,147,1)
(34,98,1)
(108,77,1)
(123,13,1)
(85,122,1)
(59,112,1)
(52,16,1)
(43,69,1)
(90,8,1)
(79,134,1)
(16,113,1)
(122,129,1)
(85,73,1)
(118,108,1)
(128,51,1)
(135,117,1)
(64,106,1)
(3,123,1)
(9,130,1)
(106,93,1)
(39,55,1)
(35,58,1)
(114,94,1)
(105,82,1)
(2,11,1)
(100,32,1)
(36,24,1)
(77,125,1)
(92,125,1)
(76,25,1)
(11,105,1)
(89,95,1)
(119,31,1)
(33,52,1)
(69,7,1)
(68,34,1)
(87,132,1)
(145,76,1)
(12,53,1)
(51,5,1)
(50,138,1)
(129,9,1)
(86,79,1)
(133,43,1)
(139,67,1)
(80,79,1)
(53,74,1)
(102,141,1)
(28,61,1)
(40,20,1)
(49,109,1)
(137,48,1)
(105,71,1)
(26,45,1)
(131,96,1)
(66,139,1)
(136,39,1)
(139,22,1)
(146,118,1)
(63,30,1)
(47,65,1)
(145,115,1)
(44,67,1)
(97,49,1)
(132,99,1)
(6,112,1)
(52,31,1)
(54,19,1)
(5,114,1)
(120,29,1)
(87,99,1)
(96,35,1)
(116,86,1)
(82,71,1)
(33,47,1)
(45,5,1)
(117,32,1)
(48,52,1)
(93,18,1)
(40,31,1)
(88,102,1)
(30,4,1)
(15,120,1)
(61,144,1)
(86,88,1)
(75,131,1)
(32,68,1)
(38,27,1)
(113,41,1)
(6,124,1)
(0,31,1)
(95,136,1)
(10,75,1)
(110,26,1)
(114,28,1)
(111,56,1)
(120,0,1)
(13,121,1)
(45,128,1)
(99,46,1)
(91,12,1)
(68,86,1)
(125,87,1)
(21,33,1)
(76,50,1)
(58,21,1)
(144,54,1)
(46,110,1)
(146,79,1)
(87,99,2)
(141,85,2)
(63,70,2)
(85,122,2)
(123,13,2)
(27,97,2)
(38,69,2)
(33,52,2)
(66,139,2)
(13,63,2)
(18,120,2)
(131,96,2)
(89,136,2)
(67,89,2)
(120,29,2)
(76,50,2)
(21,33,2)
(54,19,2)
(122,129,2)
(96,21,2)
(6,124,2)
(90,146,2)
(79,134,2)
(114,28,2)
(45,5,2)
(6,112,2)
(112,31,2)
(146,79,2)
(5,114,2)
(69,97,2)
(2,105,2)
(97,49,2)
(63,42,2)
(100,32,2)
(19,2,2)
(41,100,2)
(32,68,2)
(33,47,2)
(43,69,2)
(50,138,2)
(142,145,2)
(38,27,2)
(125,87,2)
(136,79,2)
(115,76,2)
(72,38,2)
(105,71,2)
(86,79,2)
(77,125,2)
(138,40,2)
(68,34,2)
(40,31,2)
(27,69,2)
(49,119,2)
(119,31,2)
(71,6,2)
(26,45,2)
(108,77,2)
(68,86,2)
(138,36,2)
(133,69,2)
(63,30,2)
(145,76,2)
(11,105,2)
(31,60,2)
(19,105,2)
(52,31,2)
(139,67,2)
-----------------------------------
(0,Message)
(1,client)
(2,!message2)
(3,RET)
(4,header)
(5,r = message_new_incoming(&message1, header)
(6,socket_dequeue(&server, &message2)
(7,r)
(8,skb)
(9,pair)
(10,server)
(11,message2)
(12,r)
(13,memcmp(message1->header, message2->header, sizeof(header)
(14,)
(15,message1)
(16,server)
(17,pair)
(18,(message_unrefp)
(19,!r && !message2)
(20,server)
(21,r = socket_init(&server, NULL, pair[1])
(22,SOCKET_E_LOST_INTEREST)
(23,*message2)
(24,message2)
(25,r)
(26,assert(r == 0)
(27,r == SOCKET_E_PREEMPTED)
(28,&message1)
(29,message_unrefp)
(30,message1->header)
(31,server = SOCKET_NULL(server)
(32,r = socket_init(&client, NULL, pair[0])
(33,socket_init(&server, NULL, pair[1])
(34,pair[0])
(35,0)
(36,&message2)
(37,r)
(38,!r || r == SOCKET_E_PREEMPTED)
(39,client)
(40,&server)
(41,assert(r == 0)
(42,sizeof(header)
(43,r)
(44,r)
(45,r == 0)
(46,skb)
(47,pair[1])
(48,NULL)
(49,socket_dispatch(&server, EPOLLIN)
(50,r = socket_dequeue(&server, &message2)
(51,r)
(52,&server)
(53,*message2 = NULL)
(54,assert(!r && !message2)
(55,r)
(56,r)
(57,server)
(58,r)
(59,message2)
(60,SOCKET_NULL(server)
(61,message1)
(62,r)
(63,memcmp(message1->header, message2->header, sizeof(header)
(64,message2)
(65,1)
(66,assert(r == SOCKET_E_LOST_INTEREST)
(67,r = socket_dispatch(&client, EPOLLOUT)
(68,socket_init(&client, NULL, pair[0])
(69,!r)
(70,message2->header)
(71,r = socket_dequeue(&server, &message2)
(72,assert(!r || r == SOCKET_E_PREEMPTED)
(73,0)
(74,NULL)
(75,r)
(76,!r)
(77,!r)
(78,client)
(79,client = SOCKET_NULL(client)
(80,server)
(81,server)
(82,r)
(83,)
(84,pair)
(85,r >= 0)
(86,&client)
(87,socket_buffer_new(&skb, message1)
(88,client)
(89,socket_dispatch(&client, EPOLLOUT)
(90,socket_queue(&client, skb)
(91,AF_UNIX)
(92,r)
(93,NULL)
(94,header)
(95,EPOLLOUT)
(96,r == 0)
(97,r = socket_dispatch(&server, EPOLLIN)
(98,0)
(99,&skb)
(100,r == 0)
(101,client)
(102,r)
(103,header)
(104,skb)
(105,!r)
(106,(message_unrefp)
(107,message2)
(108,assert(!r)
(109,EPOLLIN)
(110,r)
(111,server)
(112,&server)
(113,r)
(114,message_new_incoming(&message1, header)
(115,message2)
(116,NULL)
(117,r)
(118,client)
(119,&server)
(120,(message_unrefp)
(121,0)
(122,r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
(123,assert(memcmp(message1->header, message2->header, sizeof(header)
(124,&message2)
(125,r = socket_buffer_new(&skb, message1)
(126,message1)
(127,)
(128,0)
(129,socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
(130,0)
(131,assert(r == 0)
(132,message1)
(133,SOCKET_E_PREEMPTED)
(134,SOCKET_NULL(client)
(135,0)
(136,&client)
(137,pair)
(138,socket_dequeue(&server, &message2)
(139,r == SOCKET_E_LOST_INTEREST)
(140,header)
(141,assert(r >= 0)
(142,assert(!r && message2)
(143,SOCK_STREAM)
(144,r)
(145,!r && message2)
(146,&client)
(147,r)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^