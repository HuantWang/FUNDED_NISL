-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,32,33,37,38,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
35,36
35,37
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(14,37,0)
(7,31,0)
(49,2,0)
(16,54,0)
(43,37,0)
(19,10,0)
(44,43,0)
(28,30,0)
(27,26,0)
(13,44,0)
(13,52,0)
(11,22,0)
(14,54,0)
(32,14,0)
(44,52,0)
(55,9,0)
(2,29,0)
(35,44,0)
(24,25,0)
(50,26,0)
(20,54,0)
(14,30,0)
(50,22,0)
(36,43,0)
(37,43,0)
(10,55,0)
(14,26,0)
(0,35,0)
(51,21,0)
(40,13,0)
(1,21,0)
(37,14,0)
(5,25,0)
(56,52,0)
(46,18,0)
(54,4,0)
(12,44,0)
(55,10,0)
(43,36,0)
(8,39,0)
(31,38,0)
(26,53,0)
(30,14,0)
(22,50,0)
(39,44,0)
(39,52,0)
(43,44,0)
(45,53,0)
(3,18,0)
(33,26,0)
(41,53,0)
(18,23,0)
(42,53,0)
(48,13,0)
(47,34,0)
(17,50,0)
(35,52,0)
(21,44,0)
(50,54,0)
(15,34,0)
(10,19,1)
(14,26,1)
(26,33,1)
(21,51,1)
(55,10,1)
(12,50,1)
(34,47,1)
(6,25,1)
(50,54,1)
(37,14,1)
(13,44,1)
(43,37,1)
(28,32,1)
(51,1,1)
(5,31,1)
(30,28,1)
(11,17,1)
(6,35,1)
(39,8,1)
(2,49,1)
(47,15,1)
(15,26,1)
(31,7,1)
(13,40,1)
(54,16,1)
(33,27,1)
(19,21,1)
(16,20,1)
(44,43,1)
(8,13,1)
(5,54,1)
(50,26,1)
(14,30,1)
(7,34,1)
(21,44,1)
(25,24,1)
(20,34,1)
(24,5,1)
(48,21,1)
(0,39,1)
(50,22,1)
(6,2,1)
(39,44,1)
(35,44,1)
(22,11,1)
(49,50,1)
(35,0,1)
(48,55,1)
(14,54,1)
(32,12,1)
(17,25,1)
(1,44,1)
(43,36,1)
(40,48,1)
(14,54,2)
(43,36,2)
(14,30,2)
(0,50,2)
(11,25,2)
(30,50,2)
(37,14,2)
(37,50,2)
(55,10,2)
(10,21,2)
(39,44,2)
(21,50,2)
(14,50,2)
(17,25,2)
(44,43,2)
(44,50,2)
(20,34,2)
(50,54,2)
(51,50,2)
(54,34,2)
(50,26,2)
(31,34,2)
(43,50,2)
(19,21,2)
(32,50,2)
(55,21,2)
(1,50,2)
(13,44,2)
(35,44,2)
(13,50,2)
(48,50,2)
(16,34,2)
(8,50,2)
(40,50,2)
(39,50,2)
(14,26,2)
(35,50,2)
(21,44,2)
(7,34,2)
(28,50,2)
(12,50,2)
(50,25,2)
(22,25,2)
(2,50,2)
(49,50,2)
(50,22,2)
(43,37,2)
-----------------------------------
(0,myString)
(1,myString)
(2,printLine("Input is less than the length of the source string")
(3,if (data > wcslen(HELLO_STRING)
(4,)
(5,GLOBAL_CONST_FIVE)
(6,RET)
(7,"Benign, fixed string")
(8,myString)
(9,)
(10,-1)
(11,HELLO_STRING)
(12,myString)
(13,wcscpy(myString, HELLO_STRING)
(14,data*sizeof(wchar_t)
(15,GLOBAL_CONST_FIVE)
(16,20)
(17,data)
(18,)
(19,1)
(20,data)
(21,myString == NULL)
(22,wcslen(HELLO_STRING)
(23,)
(24,5)
(25,GLOBAL_CONST_FIVE==5)
(26,data = 0)
(27,data)
(28,wchar_t)
(29,)
(30,sizeof(wchar_t)
(31,printLine("Benign, fixed string")
(32,data)
(33,0)
(34,GLOBAL_CONST_FIVE!=5)
(35,free(myString)
(36,wchar_t *)
(37,malloc(data*sizeof(wchar_t)
(38,)
(39,printWLine(myString)
(40,HELLO_STRING)
(41,data)
(42,if(GLOBAL_CONST_FIVE==5)
(43,(wchar_t *)
(44,myString = (wchar_t *)
(45,if(GLOBAL_CONST_FIVE!=5)
(46,myString)
(47,5)
(48,myString)
(49,"Input is less than the length of the source string")
(50,data > wcslen(HELLO_STRING)
(51,NULL)
(52,)
(53,)
(54,data = 20)
(55,exit(-1)
(56,if (myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^