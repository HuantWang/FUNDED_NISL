-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,73,75
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,26,0)
(16,18,0)
(1,28,0)
(10,28,0)
(3,18,0)
(25,11,0)
(24,30,0)
(0,26,0)
(24,21,0)
(21,27,0)
(12,30,0)
(17,2,0)
(22,30,0)
(21,24,0)
(29,14,0)
(28,1,0)
(8,18,0)
(13,12,0)
(26,18,0)
(30,12,0)
(14,20,0)
(6,32,0)
(21,11,0)
(14,11,0)
(2,11,0)
(11,20,0)
(31,20,0)
(4,32,0)
(27,21,0)
(2,26,0)
(30,24,0)
(32,11,0)
(1,9,0)
(11,21,0)
(2,23,0)
(21,27,1)
(14,11,1)
(2,17,1)
(5,15,1)
(10,32,1)
(29,32,1)
(0,7,1)
(19,26,1)
(21,24,1)
(17,15,1)
(28,10,1)
(22,25,1)
(32,6,1)
(29,1,1)
(12,13,1)
(4,11,1)
(24,30,1)
(15,14,1)
(1,28,1)
(2,11,1)
(2,26,1)
(11,21,1)
(14,29,1)
(26,0,1)
(25,19,1)
(32,11,1)
(15,19,1)
(30,12,1)
(6,4,1)
(5,2,1)
(13,22,1)
(1,32,2)
(14,19,2)
(6,19,2)
(21,24,2)
(22,19,2)
(30,19,2)
(24,30,2)
(2,26,2)
(24,19,2)
(1,28,2)
(17,15,2)
(25,19,2)
(32,19,2)
(4,19,2)
(21,19,2)
(13,19,2)
(28,32,2)
(14,11,2)
(11,19,2)
(32,11,2)
(30,12,2)
(10,32,2)
(29,19,2)
(2,11,2)
(11,21,2)
(2,15,2)
(21,27,2)
(12,19,2)
-----------------------------------
(0,NULL)
(1,exit(-1)
(2,free(data)
(3,data)
(4,data)
(5,RET)
(6,NULL)
(7,data)
(8,if(GLOBAL_CONST_TRUE)
(9,)
(10,1)
(11,data = (wchar_t *)
(12,sizeof(wchar_t)
(13,wchar_t)
(14,printWLine(data)
(15,GLOBAL_CONST_TRUE)
(16,if(GLOBAL_CONST_TRUE)
(17,data)
(18,)
(19,GLOBAL_CONST_TRUE)
(20,)
(21,(wchar_t *)
(22,100)
(23,)
(24,malloc(100*sizeof(wchar_t)
(25,data)
(26,data = NULL)
(27,wchar_t *)
(28,-1)
(29,data)
(30,100*sizeof(wchar_t)
(31,if (data == NULL)
(32,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^