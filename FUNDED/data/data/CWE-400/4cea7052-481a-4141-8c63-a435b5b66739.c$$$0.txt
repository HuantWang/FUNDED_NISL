-----label-----
0
-----code-----
static void goodB2G2()
{
    int64_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
74,75
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,61,62,66,69,70,73,78,80
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int64_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int64_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(9,17,0)
(32,15,0)
(2,34,0)
(26,15,0)
(35,22,0)
(1,30,0)
(3,22,0)
(6,1,0)
(0,17,0)
(30,22,0)
(4,20,0)
(16,30,0)
(22,3,0)
(23,20,0)
(4,17,0)
(7,21,0)
(28,8,0)
(8,28,0)
(21,15,0)
(29,31,0)
(5,28,0)
(31,30,0)
(17,4,0)
(34,2,0)
(22,35,0)
(3,28,0)
(22,30,0)
(25,8,0)
(12,20,0)
(10,2,0)
(11,15,0)
(34,18,0)
(28,3,0)
(30,20,0)
(17,30,0)
(31,21,0)
(31,33,0)
(13,1,0)
(27,21,0)
(29,24,1)
(17,30,1)
(14,31,1)
(0,9,1)
(10,1,1)
(25,5,1)
(1,30,1)
(30,22,1)
(22,35,1)
(3,28,1)
(34,2,1)
(31,29,1)
(7,27,1)
(13,30,1)
(12,34,1)
(22,3,1)
(4,17,1)
(5,16,1)
(31,30,1)
(12,1,1)
(1,6,1)
(8,25,1)
(24,4,1)
(31,21,1)
(17,0,1)
(16,19,1)
(19,21,1)
(6,13,1)
(2,10,1)
(21,7,1)
(9,12,1)
(28,8,1)
(14,24,1)
(24,19,1)
(3,28,2)
(10,1,2)
(28,8,2)
(1,30,2)
(16,19,2)
(34,2,2)
(1,19,2)
(12,19,2)
(25,19,2)
(5,19,2)
(17,19,2)
(22,3,2)
(22,35,2)
(30,19,2)
(31,30,2)
(31,24,2)
(2,1,2)
(30,22,2)
(4,19,2)
(8,19,2)
(31,21,2)
(4,17,2)
(9,19,2)
(0,19,2)
(6,19,2)
(22,19,2)
(13,19,2)
(34,1,2)
(17,30,2)
(29,24,2)
(28,19,2)
(3,19,2)
-----------------------------------
(0,0)
(1,data == NULL)
(2,-1)
(3,malloc(100*sizeof(int64_t)
(4,printLongLongLine(data[0])
(5,100)
(6,NULL)
(7,NULL)
(8,sizeof(int64_t)
(9,data)
(10,1)
(11,data)
(12,L)
(13,data)
(14,RET)
(15,)
(16,data)
(17,data[0])
(18,)
(19,staticTrue)
(20,)
(21,data = NULL)
(22,(int64_t *)
(23,if (data == NULL)
(24,staticTrue)
(25,int64_t)
(26,if(staticTrue)
(27,data)
(28,100*sizeof(int64_t)
(29,data)
(30,data = (int64_t *)
(31,free(data)
(32,if(staticTrue)
(33,)
(34,exit(-1)
(35,int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^