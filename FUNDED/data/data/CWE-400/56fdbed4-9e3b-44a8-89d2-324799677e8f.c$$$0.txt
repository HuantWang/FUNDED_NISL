-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_03_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(5==5)
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
29,30
29,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
37,40
38,39
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,30,31,36,39,40,41,45,47,52,54
-----computeFrom-----
14,15
14,16
20,21
20,22
29,30
29,31
34,35
34,36
43,44
43,45
-----guardedBy-----
45,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_03_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(5==5)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_03_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_03_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(5==5)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(5==5)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
5==5
5
5
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(24,3,0)
(22,13,0)
(7,5,0)
(6,8,0)
(21,8,0)
(9,27,0)
(18,11,0)
(4,3,0)
(25,19,0)
(14,19,0)
(20,13,0)
(27,9,0)
(11,27,0)
(8,27,0)
(10,27,0)
(16,12,0)
(11,17,0)
(15,9,0)
(0,25,0)
(27,5,0)
(1,19,0)
(26,9,0)
(25,13,0)
(23,12,0)
(3,13,0)
(19,25,0)
(8,6,1)
(2,8,1)
(6,21,1)
(14,0,1)
(27,9,1)
(12,16,1)
(11,27,1)
(19,1,1)
(0,3,1)
(9,15,1)
(10,12,1)
(25,19,1)
(3,4,1)
(23,25,1)
(18,8,1)
(11,18,1)
(26,10,1)
(2,11,1)
(21,27,1)
(2,12,1)
(15,26,1)
(8,27,1)
(1,14,1)
(16,23,1)
(4,24,1)
(21,12,2)
(15,12,2)
(26,12,2)
(8,12,2)
(11,8,2)
(6,12,2)
(11,27,2)
(8,27,2)
(9,12,2)
(18,8,2)
(10,12,2)
(27,9,2)
(27,12,2)
(25,19,2)
-----------------------------------
(0,data)
(1,"w+")
(2,RET)
(3,data = NULL)
(4,NULL)
(5,)
(6,NULL)
(7,if (data != NULL)
(8,data != NULL)
(9,fopen("BadSink_fopen.txt", "w+")
(10,data)
(11,fclose(data)
(12,5==5)
(13,)
(14,"BadSource_fopen.txt")
(15,"w+")
(16,5)
(17,)
(18,data)
(19,fopen("BadSource_fopen.txt", "w+")
(20,if(5==5)
(21,data)
(22,data)
(23,5)
(24,data)
(25,data = fopen("BadSource_fopen.txt", "w+")
(26,"BadSink_fopen.txt")
(27,data = fopen("BadSink_fopen.txt", "w+")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^