-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    struct _twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    for(k = 0; k < 1; k++)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
91,92
92,93
92,94
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
119,120
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,78,79,80,81,87,88,89,90,94,98,100,104,105,110,111,114,115,118,123,125
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
74,75
74,76
83,84
83,85
108,109
108,110
112,113
112,114
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int i,k;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    int i,k;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }}
int i,k;
int i,k;
int
i
i
k
k
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(35,46,0)
(55,16,0)
(31,33,0)
(4,29,0)
(43,27,0)
(66,28,0)
(11,34,0)
(23,56,0)
(64,20,0)
(50,47,0)
(7,47,0)
(56,20,0)
(23,10,0)
(30,20,0)
(5,42,0)
(27,11,0)
(36,25,0)
(38,23,0)
(14,53,0)
(64,45,0)
(57,1,0)
(0,53,0)
(1,3,0)
(13,30,0)
(62,24,0)
(8,46,0)
(65,34,0)
(24,53,0)
(34,11,0)
(61,53,0)
(5,33,0)
(33,31,0)
(6,10,0)
(42,46,0)
(43,19,0)
(54,47,0)
(63,5,0)
(28,24,0)
(29,47,0)
(42,5,0)
(20,43,0)
(34,65,0)
(1,57,0)
(10,46,0)
(28,58,0)
(67,57,0)
(28,20,0)
(5,63,0)
(21,8,0)
(52,29,0)
(12,30,0)
(40,64,0)
(11,27,0)
(15,45,0)
(27,43,0)
(31,20,0)
(56,23,0)
(33,5,0)
(48,16,0)
(18,25,0)
(26,24,0)
(32,16,0)
(45,8,0)
(59,64,0)
(60,56,0)
(41,20,0)
(39,55,0)
(44,31,0)
(22,56,0)
(19,43,0)
(49,7,0)
(45,64,0)
(20,46,0)
(25,16,0)
(43,20,0)
(51,53,0)
(17,31,0)
(9,11,0)
(2,53,0)
(5,33,1)
(49,28,1)
(55,39,1)
(33,31,1)
(38,56,1)
(30,20,1)
(56,60,1)
(9,41,1)
(32,48,1)
(7,49,1)
(10,6,1)
(29,47,1)
(40,1,1)
(27,11,1)
(43,19,1)
(20,43,1)
(7,47,1)
(21,45,1)
(34,65,1)
(45,15,1)
(62,26,1)
(57,67,1)
(16,32,1)
(12,20,1)
(52,7,1)
(34,9,1)
(54,25,1)
(13,12,1)
(40,30,1)
(67,30,1)
(60,22,1)
(1,57,1)
(56,20,1)
(4,52,1)
(6,23,1)
(43,27,1)
(15,64,1)
(36,55,1)
(22,8,1)
(30,13,1)
(24,62,1)
(5,63,1)
(41,25,1)
(47,50,1)
(31,44,1)
(36,16,1)
(59,40,1)
(42,5,1)
(64,59,1)
(55,16,1)
(23,38,1)
(31,20,1)
(25,16,1)
(37,29,1)
(48,24,1)
(11,34,1)
(39,42,1)
(44,17,1)
(45,64,1)
(29,4,1)
(28,66,1)
(8,21,1)
(52,47,1)
(66,29,1)
(28,24,1)
(17,10,1)
(23,56,1)
(64,20,1)
(50,54,1)
(25,18,1)
(28,20,1)
(18,36,1)
(22,25,2)
(23,25,2)
(8,25,2)
(25,25,2)
(31,25,2)
(33,25,2)
(39,25,2)
(15,25,2)
(21,25,2)
(45,64,2)
(18,25,2)
(33,31,2)
(64,20,2)
(44,25,2)
(23,56,2)
(20,43,2)
(12,25,2)
(17,25,2)
(13,25,2)
(9,25,2)
(7,47,2)
(38,25,2)
(66,29,2)
(28,29,2)
(1,30,2)
(34,25,2)
(45,25,2)
(43,25,2)
(20,25,2)
(5,63,2)
(67,30,2)
(11,25,2)
(42,5,2)
(10,25,2)
(28,20,2)
(41,25,2)
(40,25,2)
(30,25,2)
(11,34,2)
(43,19,2)
(34,65,2)
(29,29,2)
(56,25,2)
(64,25,2)
(27,25,2)
(60,25,2)
(55,25,2)
(55,16,2)
(4,29,2)
(28,24,2)
(6,25,2)
(5,33,2)
(57,30,2)
(27,11,2)
(30,20,2)
(52,29,2)
(5,25,2)
(56,20,2)
(29,47,2)
(1,57,2)
(42,25,2)
(36,25,2)
(59,25,2)
(49,29,2)
(25,16,2)
(43,27,2)
(31,20,2)
(7,29,2)
-----------------------------------
(0,for(k = 0; k < 1; k++)
(1,exit(-1)
(2,data)
(3,)
(4,1)
(5,(twoIntsStruct *)
(6,0)
(7,k++)
(8,data[0].intOne = 0)
(9,100)
(10,data[0].intTwo = 0)
(11,100*sizeof(struct _twoIntsStruct)
(12,data)
(13,NULL)
(14,k)
(15,intOne)
(16,i = 0)
(17,data)
(18,1)
(19,struct _twoIntsStruct *)
(20,data = (struct _twoIntsStruct *)
(21,0)
(22,data)
(23,data[0].intTwo)
(24,data = NULL)
(25,i < 1)
(26,data)
(27,malloc(100*sizeof(struct _twoIntsStruct)
(28,free(data)
(29,k < 1)
(30,data == NULL)
(31,data[0])
(32,0)
(33,&data[0])
(34,sizeof(struct _twoIntsStruct)
(35,if (data == NULL)
(36,i)
(37,RET)
(38,intTwo)
(39,i)
(40,data)
(41,data)
(42,printStructLine((twoIntsStruct *)
(43,(struct _twoIntsStruct *)
(44,0)
(45,data[0].intOne)
(46,)
(47,k = 0)
(48,i)
(49,k)
(50,0)
(51,i)
(52,k)
(53,)
(54,k)
(55,i++)
(56,data[0])
(57,-1)
(58,)
(59,0)
(60,0)
(61,for(i = 0; i < 1; i++)
(62,NULL)
(63,twoIntsStruct *)
(64,data[0])
(65,struct _twoIntsStruct)
(66,data)
(67,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^