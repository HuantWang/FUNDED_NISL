-----label-----
1
-----code-----
static twoIntsStruct * badSource(twoIntsStruct * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
50,52
51,52
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
69,70
70,71
70,72
71,72
74,75
75,76
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,32,33,37,39,44,46,52,53,54,55,61,62,63,64,68,72,73,76
-----computeFrom-----
15,16
15,17
27,28
27,29
35,36
35,37
48,49
48,50
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static twoIntsStruct * badSource(twoIntsStruct * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
static twoIntsStruct
twoIntsStruct
* badSource(twoIntsStruct * data)
*
badSource
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
return data;
data
data
-----joern-----
(22,31,0)
(5,9,0)
(10,24,0)
(17,18,0)
(11,24,0)
(9,36,0)
(15,0,0)
(1,31,0)
(21,20,0)
(5,22,0)
(24,11,0)
(32,23,0)
(10,20,0)
(18,17,0)
(20,10,0)
(30,3,0)
(33,23,0)
(23,36,0)
(25,20,0)
(9,21,0)
(9,5,0)
(7,22,0)
(27,31,0)
(24,10,0)
(2,32,0)
(40,3,0)
(38,23,0)
(35,21,0)
(0,21,0)
(26,13,0)
(3,21,0)
(18,6,0)
(4,13,0)
(0,36,0)
(20,25,0)
(34,24,0)
(28,9,0)
(4,19,0)
(39,6,0)
(32,1,0)
(17,31,0)
(0,31,0)
(37,5,0)
(14,0,0)
(23,32,0)
(6,21,0)
(29,1,0)
(6,18,0)
(6,36,0)
(12,11,0)
(23,21,0)
(3,36,0)
(20,21,0)
(21,31,0)
(13,4,0)
(21,36,0)
(16,9,0)
(8,6,0)
(14,17,1)
(32,23,1)
(40,21,1)
(33,3,1)
(12,34,1)
(9,36,1)
(39,8,1)
(29,32,1)
(13,26,1)
(38,33,1)
(21,20,1)
(5,9,1)
(23,36,1)
(0,14,1)
(0,36,1)
(16,28,1)
(37,9,1)
(7,5,1)
(22,7,1)
(2,23,1)
(5,37,1)
(3,36,1)
(32,2,1)
(6,21,1)
(18,6,1)
(4,13,1)
(1,29,1)
(11,12,1)
(23,21,1)
(6,39,1)
(28,1,1)
(17,18,1)
(34,35,1)
(3,21,1)
(33,4,1)
(15,0,1)
(9,16,1)
(20,10,1)
(10,24,1)
(30,40,1)
(9,21,1)
(21,36,1)
(3,30,1)
(26,3,1)
(0,21,1)
(8,22,1)
(6,36,1)
(23,38,1)
(24,11,1)
(20,25,1)
(0,21,2)
(24,11,2)
(3,21,2)
(3,36,2)
(10,24,2)
(21,36,2)
(4,13,2)
(26,3,2)
(9,36,2)
(23,21,2)
(6,21,2)
(18,6,2)
(32,23,2)
(9,21,2)
(0,36,2)
(13,3,2)
(20,25,2)
(6,36,2)
(15,0,2)
(21,20,2)
(23,36,2)
(5,9,2)
(20,10,2)
(4,3,2)
(17,18,2)
-----------------------------------
(0,return data;)
(1,data[0].intOne = 0)
(2,intOne)
(3,data == NULL)
(4,exit(-1)
(5,data[0].intTwo)
(6,data[0])
(7,0)
(8,data)
(9,data[0])
(10,malloc(100*sizeof(twoIntsStruct)
(11,sizeof(twoIntsStruct)
(12,twoIntsStruct)
(13,-1)
(14,data)
(15,RET)
(16,0)
(17,printStructLine(&data[0])
(18,&data[0])
(19,)
(20,(twoIntsStruct *)
(21,data = (twoIntsStruct *)
(22,data[0].intTwo = 0)
(23,data[0])
(24,100*sizeof(twoIntsStruct)
(25,twoIntsStruct *)
(26,1)
(27,if (data == NULL)
(28,data)
(29,0)
(30,NULL)
(31,)
(32,data[0].intOne)
(33,data)
(34,100)
(35,data)
(36,twoIntsStruct * data)
(37,intTwo)
(38,0)
(39,0)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^