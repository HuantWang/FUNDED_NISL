-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_12_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
    else
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
46,47
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
65,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
74,77
75,76
77,78
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
88,89
88,90
89,90
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
119,122
119,123
119,124
120,121
122,123
124,125
125,126
125,127
128,129
128,130
129,130
131,132
133,134
135,136
136,137
137,138
137,139
138,139
141,142
141,143
142,143
144,145
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
152,155
152,156
153,154
154,155
154,156
155,156
157,158
157,159
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
168,169
169,170
171,172
172,173
172,174
174,175
174,176
174,177
177,178
179,180
179,181
180,181
180,182
181,182
181,183
182,183
185,186
185,187
186,187
189,190
189,191
189,192
189,193
190,191
191,192
191,193
192,193
194,195
194,196
194,197
195,196
197,198
200,201
200,202
201,202
201,203
202,203
204,205
206,207
207,208
208,209
208,210
209,210
212,213
212,214
212,215
212,216
213,214
214,215
214,216
215,216
218,219
218,220
219,220
221,222
221,223
222,223
222,224
223,224
226,227
228,229
229,230
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
237,238
239,240
239,241
239,242
239,243
239,244
240,241
242,243
244,245
245,246
245,247
248,249
248,250
249,250
251,252
253,254
255,256
256,257
256,258
257,258
260,261
260,262
261,262
263,264
264,265
265,266
265,267
266,267
268,269
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,37,41,47,49,51,55,57,58,61,64,66,67,69,73,76,78,79,83,85,90,91,96,97,100,104,105,107,110,116,118,121,123,126,127,130,132,134,139,140,143,148,150,156,158,160,164,166,167,170,173,175,176,178,183,184,187,188,193,196,198,199,203,205,210,211,216,217,220,224,225,227,230,236,238,241,243,246,247,250,252,254,258,259,262,267,269
-----computeFrom-----
12,13
12,14
34,35
34,36
71,72
71,73
81,82
81,83
94,95
94,96
98,99
98,100
113,114
113,115
180,181
180,182
181,182
181,183
185,186
185,187
191,192
191,193
201,202
201,203
214,215
214,216
218,219
218,220
233,234
233,235
-----guardedBy-----
187,227
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_12_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_12_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_12_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(40,95,0)
(95,135,0)
(137,51,0)
(96,74,0)
(140,72,0)
(90,51,0)
(31,89,0)
(83,55,0)
(141,133,0)
(34,93,0)
(80,51,0)
(64,42,0)
(138,58,0)
(36,117,0)
(94,110,0)
(49,93,0)
(14,51,0)
(72,92,0)
(4,89,0)
(86,55,0)
(107,36,0)
(68,110,0)
(119,12,0)
(79,80,0)
(11,34,0)
(33,37,0)
(41,7,0)
(7,26,0)
(25,47,0)
(15,37,0)
(97,34,0)
(130,124,0)
(32,110,0)
(99,49,0)
(105,113,0)
(34,11,0)
(0,60,0)
(77,47,0)
(129,36,0)
(110,135,0)
(50,136,0)
(98,47,0)
(65,3,0)
(49,92,0)
(19,15,0)
(51,112,0)
(74,26,0)
(3,113,0)
(53,24,0)
(54,107,0)
(84,80,0)
(89,31,0)
(30,102,0)
(48,53,0)
(72,93,0)
(85,3,0)
(102,47,0)
(15,26,0)
(15,20,0)
(110,94,0)
(55,93,0)
(73,60,0)
(110,119,0)
(89,124,0)
(37,15,0)
(133,51,0)
(23,7,0)
(6,93,0)
(2,11,0)
(63,94,0)
(113,47,0)
(61,60,0)
(26,51,0)
(34,62,0)
(50,26,0)
(109,93,0)
(45,18,0)
(35,56,0)
(20,15,0)
(88,98,0)
(92,72,0)
(13,110,0)
(28,128,0)
(21,51,0)
(115,15,0)
(34,89,0)
(26,74,0)
(15,45,0)
(70,24,0)
(11,24,0)
(72,89,0)
(16,13,0)
(82,51,0)
(29,91,0)
(62,34,0)
(18,45,0)
(38,98,0)
(5,135,0)
(56,51,0)
(3,135,0)
(78,134,0)
(12,119,0)
(47,1,0)
(120,29,0)
(17,47,0)
(95,43,0)
(55,89,0)
(64,55,0)
(122,12,0)
(111,24,0)
(121,131,0)
(87,56,0)
(139,18,0)
(116,58,0)
(52,42,0)
(110,13,0)
(55,83,0)
(45,15,0)
(104,142,0)
(49,89,0)
(118,31,0)
(100,47,0)
(101,64,0)
(36,107,0)
(92,49,0)
(71,20,0)
(59,133,0)
(10,72,0)
(76,50,0)
(123,27,0)
(126,42,0)
(46,123,0)
(119,110,0)
(55,64,0)
(57,113,0)
(103,51,0)
(93,75,0)
(22,74,0)
(107,89,0)
(69,36,0)
(134,81,0)
(67,42,0)
(135,3,0)
(135,60,0)
(125,49,0)
(106,126,0)
(74,56,0)
(58,135,0)
(44,26,0)
(39,102,0)
(132,124,0)
(66,124,0)
(109,9,1)
(72,89,1)
(69,9,1)
(44,56,1)
(113,105,1)
(31,118,1)
(110,32,1)
(32,13,1)
(84,79,1)
(74,22,1)
(2,24,1)
(63,68,1)
(68,12,1)
(24,70,1)
(15,115,1)
(49,93,1)
(72,140,1)
(22,96,1)
(35,87,1)
(38,88,1)
(8,93,1)
(108,11,1)
(20,71,1)
(12,122,1)
(46,58,1)
(56,35,1)
(76,127,1)
(95,40,1)
(55,93,1)
(98,38,1)
(71,19,1)
(34,97,1)
(88,102,1)
(93,6,1)
(36,107,1)
(54,129,1)
(45,18,1)
(87,133,1)
(114,127,1)
(101,42,1)
(102,30,1)
(50,76,1)
(40,108,1)
(106,134,1)
(110,94,1)
(55,89,1)
(15,26,1)
(114,108,1)
(99,125,1)
(58,135,1)
(19,18,1)
(110,13,1)
(114,92,1)
(72,93,1)
(48,119,1)
(111,58,1)
(15,37,1)
(114,50,1)
(142,104,1)
(26,74,1)
(127,64,1)
(15,20,1)
(45,15,1)
(58,138,1)
(107,89,1)
(49,89,1)
(125,72,1)
(104,119,1)
(33,20,1)
(10,113,1)
(16,94,1)
(41,23,1)
(85,65,1)
(57,98,1)
(105,57,1)
(13,16,1)
(106,45,1)
(3,113,1)
(52,67,1)
(107,54,1)
(11,24,1)
(8,36,1)
(42,52,1)
(139,64,1)
(97,2,1)
(129,69,1)
(96,44,1)
(80,84,1)
(116,135,1)
(123,46,1)
(39,8,1)
(101,126,1)
(9,89,1)
(53,24,1)
(138,116,1)
(115,37,1)
(67,7,1)
(37,33,1)
(135,3,1)
(18,139,1)
(50,26,1)
(126,106,1)
(111,123,1)
(141,80,1)
(89,31,1)
(11,34,1)
(126,42,1)
(64,42,1)
(118,4,1)
(34,93,1)
(55,83,1)
(92,72,1)
(55,86,1)
(7,41,1)
(23,26,1)
(120,7,1)
(92,49,1)
(86,101,1)
(7,26,1)
(114,95,1)
(6,109,1)
(59,141,1)
(70,111,1)
(49,99,1)
(53,48,1)
(110,135,1)
(140,10,1)
(65,5,1)
(48,142,1)
(134,78,1)
(64,55,1)
(67,29,1)
(34,62,1)
(34,89,1)
(122,11,1)
(119,12,1)
(5,92,1)
(95,135,1)
(3,85,1)
(2,53,1)
(29,120,1)
(133,59,1)
(30,39,1)
(74,56,1)
(79,8,1)
(94,63,1)
(119,110,1)
(78,45,1)
(109,9,2)
(24,92,2)
(138,92,2)
(105,8,2)
(2,92,2)
(92,49,2)
(115,64,2)
(108,92,2)
(88,8,2)
(95,108,2)
(6,9,2)
(86,64,2)
(92,8,2)
(72,8,2)
(125,72,2)
(69,9,2)
(101,64,2)
(33,64,2)
(20,64,2)
(142,119,2)
(23,8,2)
(50,127,2)
(119,12,2)
(119,110,2)
(11,24,2)
(53,24,2)
(58,135,2)
(122,11,2)
(34,11,2)
(18,64,2)
(57,8,2)
(41,8,2)
(135,92,2)
(36,9,2)
(74,56,2)
(129,9,2)
(52,8,2)
(107,89,2)
(140,8,2)
(38,8,2)
(15,64,2)
(34,89,2)
(86,8,2)
(98,8,2)
(67,8,2)
(133,8,2)
(40,108,2)
(102,8,2)
(74,8,2)
(45,15,2)
(13,11,2)
(45,64,2)
(34,93,2)
(50,26,2)
(7,26,2)
(92,72,2)
(3,92,2)
(89,31,2)
(87,8,2)
(95,135,2)
(110,11,2)
(139,64,2)
(72,93,2)
(104,119,2)
(42,8,2)
(107,9,2)
(65,92,2)
(29,7,2)
(55,64,2)
(76,127,2)
(68,11,2)
(134,45,2)
(141,8,2)
(97,11,2)
(64,42,2)
(64,8,2)
(54,9,2)
(59,8,2)
(126,64,2)
(12,11,2)
(93,9,2)
(110,13,2)
(72,89,2)
(113,8,2)
(48,11,2)
(101,8,2)
(97,92,2)
(55,8,2)
(99,72,2)
(39,8,2)
(110,94,2)
(11,11,2)
(15,20,2)
(34,92,2)
(34,62,2)
(26,8,2)
(7,8,2)
(85,92,2)
(127,8,2)
(80,8,2)
(36,107,2)
(106,64,2)
(16,11,2)
(26,74,2)
(135,3,2)
(15,26,2)
(94,11,2)
(71,64,2)
(19,64,2)
(63,11,2)
(64,64,2)
(126,42,2)
(11,34,2)
(37,64,2)
(15,37,2)
(49,89,2)
(123,58,2)
(55,89,2)
(46,58,2)
(49,72,2)
(119,11,2)
(3,113,2)
(79,8,2)
(22,8,2)
(84,8,2)
(44,8,2)
(45,18,2)
(30,8,2)
(35,8,2)
(111,92,2)
(32,11,2)
(64,55,2)
(70,92,2)
(116,92,2)
(58,92,2)
(96,8,2)
(49,93,2)
(55,93,2)
(120,7,2)
(10,8,2)
(5,92,2)
(53,11,2)
(55,83,2)
(110,135,2)
(2,11,2)
(56,8,2)
(78,45,2)
(11,92,2)
-----------------------------------
(0,for (i = 0; i < (size_t)
(1,)
(2,i)
(3,fopen(filename, "w+")
(4,count)
(5,pFile)
(6,20)
(7,pFile == NULL)
(8,globalReturnsTrueOrFalse()
(9,globalReturnsTrueOrFalse()
(10,count)
(11,i < (size_t)
(12,strlen(SENTENCE)
(13,strlen(SENTENCE)
(14,for (i = 0; i < (size_t)
(15,fwrite(SENTENCE, sizeof(char)
(16,SENTENCE)
(17,filename)
(18,strlen(SENTENCE)
(19,SENTENCE)
(20,sizeof(char)
(21,if (pFile)
(22,"w+")
(23,pFile)
(24,i = 0)
(25,if (count > 0 && count <= 20)
(26,pFile = fopen(filename, "w+")
(27,)
(28,if (strlen(SENTENCE)
(29,exit(1)
(30,0)
(31,-1)
(32,pFile)
(33,SENTENCE)
(34,(size_t)
(35,"output_bad.txt")
(36,fscanf(stdin, "%d", &count)
(37,strlen(SENTENCE)
(38,NULL)
(39,i)
(40,pFile)
(41,NULL)
(42,i = 0)
(43,)
(44,pFile)
(45,strlen(SENTENCE)
(46,1)
(47,)
(48,i)
(49,count <= 20)
(50,fclose(pFile)
(51,)
(52,0)
(53,i++)
(54,count)
(55,(size_t)
(56,*filename = "output_bad.txt")
(57,filename)
(58,pFile == NULL)
(59,NULL)
(60,)
(61,if (pFile == NULL)
(62,size_t)
(63,char)
(64,i < (size_t)
(65,filename)
(66,if(globalReturnsTrueOrFalse()
(67,i)
(68,SENTENCE)
(69,stdin)
(70,0)
(71,char)
(72,count > 0)
(73,if (pFile)
(74,fopen(filename, "w+")
(75,)
(76,pFile)
(77,pFile)
(78,1)
(79,i)
(80,i = 0)
(81,)
(82,if (pFile == NULL)
(83,size_t)
(84,0)
(85,"w+")
(86,count)
(87,filename)
(88,pFile)
(89,count = -1)
(90,filename)
(91,)
(92,count > 0 && count <= 20)
(93,count = 20)
(94,sizeof(char)
(95,fclose(pFile)
(96,filename)
(97,count)
(98,*pFile = NULL)
(99,20)
(100,i)
(101,i)
(102,i = 0)
(103,i)
(104,1)
(105,"output_good.txt")
(106,i)
(107,&count)
(108,pFile)
(109,count)
(110,fwrite(SENTENCE, sizeof(char)
(111,i)
(112,)
(113,*filename = "output_good.txt")
(114,RET)
(115,pFile)
(116,pFile)
(117,)
(118,1)
(119,strlen(SENTENCE)
(120,1)
(121,if (strlen(SENTENCE)
(122,SENTENCE)
(123,exit(1)
(124,)
(125,count)
(126,i++)
(127,pFile)
(128,)
(129,"%d")
(130,if(globalReturnsTrueOrFalse()
(131,)
(132,count)
(133,*pFile = NULL)
(134,exit(1)
(135,pFile = fopen(filename, "w+")
(136,)
(137,pFile)
(138,NULL)
(139,SENTENCE)
(140,0)
(141,pFile)
(142,exit(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^