-----label-----
0
-----code-----
static void goodG2B2()
{
    int * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
42,43
42,44
43,44
43,45
44,45
48,49
49,50
49,51
50,51
52,53
52,54
53,54
56,57
56,58
57,58
58,59
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,45,46,47,51,54,55,59,61
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,11,0)
(18,4,0)
(18,6,0)
(2,4,0)
(19,4,0)
(18,1,0)
(9,27,0)
(4,18,0)
(23,25,0)
(6,9,0)
(17,22,0)
(20,22,0)
(8,25,0)
(14,11,0)
(9,6,0)
(15,13,0)
(0,27,0)
(5,25,0)
(27,9,0)
(28,22,0)
(1,18,0)
(25,5,0)
(25,15,0)
(10,15,0)
(24,9,0)
(11,22,0)
(5,13,0)
(26,19,0)
(6,18,0)
(25,4,0)
(21,19,0)
(19,15,0)
(4,13,0)
(7,5,1)
(26,4,1)
(10,19,1)
(19,4,1)
(23,15,1)
(12,14,1)
(16,7,1)
(25,8,1)
(2,3,1)
(25,15,1)
(9,27,1)
(11,12,1)
(4,18,1)
(6,9,1)
(27,0,1)
(25,4,1)
(0,24,1)
(18,6,1)
(18,1,1)
(5,25,1)
(19,21,1)
(15,10,1)
(8,23,1)
(3,11,1)
(21,26,1)
(7,3,1)
(24,2,1)
(15,3,2)
(25,3,2)
(19,4,2)
(18,6,2)
(4,3,2)
(6,9,2)
(8,3,2)
(9,27,2)
(24,3,2)
(2,3,2)
(25,4,2)
(27,3,2)
(18,3,2)
(18,1,2)
(5,3,2)
(19,3,2)
(25,15,2)
(10,3,2)
(21,3,2)
(23,3,2)
(4,18,2)
(0,3,2)
(5,25,2)
(6,3,2)
(26,3,2)
(9,3,2)
-----------------------------------
(0,int)
(1,int *)
(2,data)
(3,globalReturnsTrue()
(4,data = (int *)
(5,printIntLine(data[0])
(6,ALLOCA(100*sizeof(int)
(7,globalReturnsTrue()
(8,0)
(9,100*sizeof(int)
(10,5)
(11,data = NULL)
(12,NULL)
(13,)
(14,data)
(15,data[0] = 5)
(16,RET)
(17,if(globalReturnsTrue()
(18,(int *)
(19,data[0])
(20,data)
(21,0)
(22,)
(23,data)
(24,100)
(25,data[0])
(26,data)
(27,sizeof(int)
(28,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^