-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
33,36
34,35
34,36
35,36
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
47,48
47,49
49,50
49,51
52,53
52,54
52,55
53,54
53,55
54,55
54,56
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,43,48,50,51,56,59,61,64,65,70,73,75,78,81,84,85,89,91,96,98,102,104,106,110,112,116,118,123,124
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
53,54
53,55
54,55
54,56
62,63
62,64
68,69
68,70
79,80
79,81
87,88
87,89
-----guardedBy-----
61,106
64,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(10,21,0)
(33,4,0)
(37,2,0)
(41,39,0)
(52,39,0)
(27,2,0)
(32,14,0)
(19,25,0)
(10,25,0)
(18,41,0)
(15,51,0)
(25,10,0)
(59,3,0)
(40,21,0)
(49,28,0)
(1,21,0)
(6,10,0)
(16,61,0)
(29,2,0)
(17,48,0)
(54,26,0)
(43,27,0)
(28,49,0)
(32,2,0)
(44,27,0)
(55,9,0)
(0,48,0)
(49,8,0)
(46,33,0)
(39,41,0)
(34,23,0)
(51,15,0)
(8,32,0)
(36,17,0)
(37,48,0)
(5,3,0)
(2,32,0)
(10,15,0)
(42,50,0)
(14,32,0)
(39,21,0)
(41,45,0)
(23,31,0)
(57,51,0)
(2,48,0)
(24,26,0)
(13,26,0)
(51,21,0)
(21,26,0)
(47,48,0)
(7,9,0)
(35,51,0)
(17,2,0)
(0,2,0)
(56,41,0)
(8,49,0)
(42,20,0)
(30,0,0)
(62,37,0)
(15,10,0)
(22,28,0)
(60,61,0)
(3,53,0)
(58,37,0)
(32,8,0)
(12,50,0)
(49,21,0)
(50,42,0)
(11,49,0)
(9,55,1)
(41,39,1)
(7,61,1)
(27,43,1)
(32,8,1)
(17,2,1)
(10,25,1)
(0,30,1)
(38,33,1)
(0,2,1)
(62,42,1)
(55,7,1)
(15,51,1)
(39,52,1)
(50,12,1)
(34,15,1)
(21,40,1)
(18,56,1)
(36,0,1)
(51,21,1)
(62,27,1)
(7,41,1)
(56,61,1)
(58,62,1)
(33,46,1)
(52,18,1)
(38,17,1)
(17,36,1)
(42,50,1)
(35,57,1)
(49,21,1)
(12,27,1)
(38,23,1)
(37,2,1)
(22,11,1)
(6,9,1)
(15,10,1)
(60,16,1)
(27,2,1)
(30,37,1)
(49,28,1)
(46,9,1)
(39,21,1)
(16,21,1)
(32,14,1)
(23,34,1)
(37,58,1)
(11,29,1)
(28,22,1)
(19,6,1)
(43,44,1)
(2,32,1)
(8,49,1)
(44,2,1)
(25,19,1)
(40,1,1)
(29,15,1)
(57,10,1)
(61,60,1)
(10,21,1)
(51,35,1)
(39,61,2)
(46,9,2)
(36,15,2)
(58,15,2)
(57,10,2)
(2,32,2)
(33,9,2)
(18,61,2)
(37,15,2)
(41,39,2)
(27,2,2)
(52,61,2)
(37,2,2)
(62,15,2)
(43,15,2)
(32,8,2)
(39,21,2)
(49,15,2)
(51,10,2)
(51,21,2)
(10,21,2)
(34,15,2)
(30,15,2)
(32,14,2)
(49,28,2)
(11,15,2)
(12,27,2)
(17,2,2)
(10,25,2)
(8,49,2)
(19,9,2)
(56,61,2)
(0,2,2)
(49,21,2)
(15,9,2)
(2,15,2)
(10,9,2)
(8,15,2)
(23,15,2)
(32,15,2)
(15,10,2)
(42,50,2)
(6,9,2)
(35,10,2)
(15,51,2)
(42,27,2)
(25,9,2)
(22,15,2)
(50,27,2)
(0,15,2)
(17,15,2)
(28,15,2)
(44,15,2)
(27,15,2)
(41,61,2)
(29,15,2)
-----------------------------------
(0,printLine(myString)
(1,data)
(2,myString = (char *)
(3,)
(4,)
(5,myString)
(6,data)
(7,STATIC_CONST_FIVE)
(8,malloc(data*sizeof(char)
(9,STATIC_CONST_FIVE!=5)
(10,data > strlen(HELLO_STRING)
(11,data)
(12,1)
(13,if(STATIC_CONST_FIVE==5)
(14,char *)
(15,data > strlen(HELLO_STRING)
(16,STATIC_CONST_FIVE)
(17,free(myString)
(18,"%zu")
(19,HELLO_STRING)
(20,)
(21,data = 0)
(22,char)
(23,printLine("Input is less than the length of the source string or too large")
(24,if(STATIC_CONST_FIVE!=5)
(25,strlen(HELLO_STRING)
(26,)
(27,myString == NULL)
(28,sizeof(char)
(29,myString)
(30,myString)
(31,)
(32,(char *)
(33,printLine("Benign, fixed string")
(34,"Input is less than the length of the source string or too large")
(35,100)
(36,myString)
(37,strcpy(myString, HELLO_STRING)
(38,RET)
(39,&data)
(40,0)
(41,fscanf(stdin, "%zu", &data)
(42,exit(-1)
(43,NULL)
(44,myString)
(45,)
(46,"Benign, fixed string")
(47,if (myString == NULL)
(48,)
(49,data*sizeof(char)
(50,-1)
(51,data < 100)
(52,data)
(53,)
(54,data)
(55,5)
(56,stdin)
(57,data)
(58,HELLO_STRING)
(59,if (data > strlen(HELLO_STRING)
(60,5)
(61,STATIC_CONST_FIVE==5)
(62,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^