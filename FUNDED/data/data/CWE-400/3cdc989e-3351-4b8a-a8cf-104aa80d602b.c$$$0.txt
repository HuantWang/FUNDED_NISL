-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
93,96
94,95
94,96
95,96
98,99
99,100
100,101
100,102
101,102
104,105
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,102,103,108,110
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(22,39,0)
(25,29,0)
(45,32,0)
(26,42,0)
(43,36,0)
(34,0,0)
(54,53,0)
(16,30,0)
(47,46,0)
(46,47,0)
(5,3,0)
(25,59,0)
(34,3,0)
(4,47,0)
(7,47,0)
(40,39,0)
(33,36,0)
(20,14,0)
(59,25,0)
(58,17,0)
(3,36,0)
(32,23,0)
(22,2,0)
(32,45,0)
(36,30,0)
(44,9,0)
(29,25,0)
(8,22,0)
(13,17,0)
(56,9,0)
(46,25,0)
(23,32,0)
(9,2,0)
(34,2,0)
(12,11,0)
(27,36,0)
(24,2,0)
(51,23,0)
(18,26,0)
(25,46,0)
(2,42,0)
(28,11,0)
(3,34,0)
(41,6,0)
(35,30,0)
(14,21,0)
(39,38,0)
(2,34,0)
(59,42,0)
(27,2,0)
(19,53,0)
(10,21,0)
(47,2,0)
(3,23,0)
(13,50,0)
(21,26,0)
(0,34,0)
(27,37,0)
(14,2,0)
(31,42,0)
(52,30,0)
(1,38,0)
(39,22,0)
(23,3,0)
(17,13,0)
(6,48,0)
(15,27,0)
(55,14,0)
(38,42,0)
(21,14,0)
(49,22,0)
(6,41,1)
(1,39,1)
(18,21,1)
(56,44,1)
(34,3,1)
(20,55,1)
(22,49,1)
(21,14,1)
(55,9,1)
(26,18,1)
(7,4,1)
(57,27,1)
(8,26,1)
(5,24,1)
(13,17,1)
(34,0,1)
(32,51,1)
(9,2,1)
(39,40,1)
(49,8,1)
(3,36,1)
(14,2,1)
(54,59,1)
(21,10,1)
(19,54,1)
(47,2,1)
(22,2,1)
(58,9,1)
(47,7,1)
(10,14,1)
(27,2,1)
(39,22,1)
(12,36,1)
(27,36,1)
(57,6,1)
(24,11,1)
(15,53,1)
(40,22,1)
(28,12,1)
(32,45,1)
(4,38,1)
(17,58,1)
(38,1,1)
(2,34,1)
(25,29,1)
(46,47,1)
(33,43,1)
(55,13,1)
(3,23,1)
(44,2,1)
(36,33,1)
(41,53,1)
(53,19,1)
(54,11,1)
(9,56,1)
(59,25,1)
(14,20,1)
(25,46,1)
(27,15,1)
(11,28,1)
(51,5,1)
(23,32,1)
(3,23,2)
(46,11,2)
(39,22,2)
(32,11,2)
(14,11,2)
(46,47,2)
(9,11,2)
(25,11,2)
(27,36,2)
(6,53,2)
(49,11,2)
(23,32,2)
(8,11,2)
(25,46,2)
(21,11,2)
(20,11,2)
(58,9,2)
(34,3,2)
(7,11,2)
(22,11,2)
(32,45,2)
(26,11,2)
(55,11,2)
(47,11,2)
(40,11,2)
(47,2,2)
(13,9,2)
(14,2,2)
(27,53,2)
(27,2,2)
(21,14,2)
(10,11,2)
(4,11,2)
(25,29,2)
(38,11,2)
(51,11,2)
(34,11,2)
(18,11,2)
(39,11,2)
(13,17,2)
(41,53,2)
(23,11,2)
(2,34,2)
(22,2,2)
(9,2,2)
(44,11,2)
(1,11,2)
(59,25,2)
(17,9,2)
(59,11,2)
(3,11,2)
(5,11,2)
(15,53,2)
(2,11,2)
(34,0,2)
(56,11,2)
(3,36,2)
(24,11,2)
-----------------------------------
(0,struct _twoIntsStruct *)
(1,0)
(2,data = (struct _twoIntsStruct *)
(3,realloc(data, 100*sizeof(struct _twoIntsStruct)
(4,data)
(5,data)
(6,printLine("Benign, fixed string")
(7,0)
(8,data)
(9,data == NULL)
(10,intOne)
(11,GLOBAL_CONST_FIVE==5)
(12,GLOBAL_CONST_FIVE)
(13,exit(-1)
(14,data[0])
(15,data)
(16,data)
(17,-1)
(18,0)
(19,5)
(20,0)
(21,data[0].intOne)
(22,data[0])
(23,100*sizeof(struct _twoIntsStruct)
(24,data)
(25,(twoIntsStruct *)
(26,data[0].intOne = 0)
(27,free(data)
(28,5)
(29,twoIntsStruct *)
(30,)
(31,if (data == NULL)
(32,sizeof(struct _twoIntsStruct)
(33,NULL)
(34,(struct _twoIntsStruct *)
(35,if(GLOBAL_CONST_FIVE==5)
(36,data = NULL)
(37,)
(38,data[0].intTwo = 0)
(39,data[0].intTwo)
(40,intTwo)
(41,"Benign, fixed string")
(42,)
(43,data)
(44,data)
(45,struct _twoIntsStruct)
(46,&data[0])
(47,data[0])
(48,)
(49,0)
(50,)
(51,100)
(52,if(GLOBAL_CONST_FIVE!=5)
(53,GLOBAL_CONST_FIVE!=5)
(54,GLOBAL_CONST_FIVE)
(55,data)
(56,NULL)
(57,RET)
(58,1)
(59,printStructLine((twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^