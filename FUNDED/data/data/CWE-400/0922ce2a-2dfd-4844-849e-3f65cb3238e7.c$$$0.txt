-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
71,72
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,75,77
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(14,3,0)
(33,11,0)
(22,4,0)
(23,5,0)
(3,17,0)
(29,33,0)
(16,18,0)
(22,20,0)
(1,30,0)
(5,26,0)
(33,17,0)
(19,20,0)
(8,16,0)
(17,3,0)
(10,31,0)
(28,17,0)
(3,14,0)
(21,30,0)
(7,11,0)
(10,5,0)
(6,26,0)
(18,14,0)
(13,5,0)
(9,18,0)
(0,3,0)
(20,22,0)
(14,18,0)
(3,0,0)
(18,16,0)
(27,26,0)
(14,5,0)
(32,26,0)
(30,17,0)
(24,14,0)
(17,11,0)
(10,17,0)
(12,10,0)
(5,13,1)
(12,15,1)
(13,23,1)
(3,14,1)
(15,25,1)
(14,5,1)
(14,18,1)
(19,30,1)
(29,22,1)
(10,5,1)
(22,20,1)
(10,12,1)
(10,17,1)
(3,0,1)
(21,1,1)
(2,15,1)
(33,17,1)
(28,25,1)
(33,29,1)
(20,19,1)
(8,9,1)
(15,33,1)
(30,17,1)
(9,24,1)
(17,3,1)
(30,21,1)
(1,17,1)
(18,16,1)
(2,10,1)
(25,5,1)
(24,28,1)
(16,8,1)
(29,30,1)
(18,16,2)
(33,25,2)
(9,25,2)
(1,25,2)
(16,25,2)
(14,18,2)
(33,17,2)
(3,14,2)
(8,25,2)
(22,30,2)
(18,25,2)
(22,20,2)
(14,5,2)
(3,0,2)
(19,30,2)
(3,25,2)
(10,15,2)
(14,25,2)
(17,3,2)
(20,30,2)
(24,25,2)
(10,17,2)
(29,25,2)
(30,25,2)
(12,15,2)
(21,25,2)
(30,17,2)
(17,25,2)
(28,25,2)
(10,5,2)
-----------------------------------
(0,wchar_t *)
(1,data)
(2,RET)
(3,(wchar_t *)
(4,)
(5,data = NULL)
(6,if(staticTrue)
(7,if (data == NULL)
(8,wchar_t)
(9,100)
(10,free(data)
(11,)
(12,data)
(13,NULL)
(14,realloc(data, 100*sizeof(wchar_t)
(15,staticTrue)
(16,sizeof(wchar_t)
(17,data = (wchar_t *)
(18,100*sizeof(wchar_t)
(19,1)
(20,-1)
(21,NULL)
(22,exit(-1)
(23,data)
(24,data)
(25,staticTrue)
(26,)
(27,if(staticTrue)
(28,data)
(29,data)
(30,data == NULL)
(31,)
(32,data)
(33,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^