-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
53,55
54,55
55,56
55,57
57,58
57,59
60,61
60,62
60,63
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
69,71
69,72
69,73
69,74
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
82,84
83,84
85,86
86,87
86,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
124,125
124,126
125,126
-----nextToken-----
2,4,9,11,15,17,21,22,26,28,29,32,37,38,40,45,47,51,52,56,58,59,63,66,68,73,76,78,81,84,87,88,92,94,99,101,105,107,109,113,115,119,121,126,127
-----computeFrom-----
19,20
19,21
34,35
34,36
61,62
61,63
71,72
71,73
82,83
82,84
90,91
90,92
-----guardedBy-----
68,109
63,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(12,48,0)
(42,0,0)
(51,58,0)
(9,41,0)
(18,16,0)
(21,9,0)
(50,10,0)
(56,14,0)
(10,20,0)
(1,22,0)
(11,30,0)
(57,4,0)
(56,2,0)
(35,30,0)
(7,25,0)
(19,41,0)
(4,15,0)
(27,6,0)
(5,13,0)
(23,9,0)
(2,56,0)
(46,29,0)
(54,13,0)
(48,25,0)
(55,20,0)
(45,35,0)
(33,56,0)
(47,34,0)
(22,5,0)
(22,15,0)
(6,24,0)
(29,16,0)
(32,13,0)
(44,5,0)
(43,25,0)
(34,14,0)
(5,22,0)
(49,48,0)
(34,47,0)
(53,4,0)
(40,2,0)
(3,15,0)
(20,15,0)
(36,15,0)
(48,30,0)
(34,30,0)
(28,53,0)
(38,53,0)
(41,20,0)
(4,13,0)
(51,0,0)
(17,30,0)
(56,41,0)
(37,11,0)
(26,11,0)
(16,29,0)
(16,41,0)
(0,51,0)
(8,7,0)
(31,10,0)
(13,15,0)
(7,30,0)
(30,25,0)
(14,56,0)
(14,34,0)
(52,22,0)
(30,34,0)
(35,25,0)
(41,9,0)
(39,6,1)
(35,45,1)
(4,57,1)
(5,44,1)
(49,51,1)
(30,34,1)
(16,29,1)
(45,48,1)
(11,30,1)
(23,19,1)
(35,30,1)
(6,27,1)
(53,38,1)
(13,32,1)
(56,2,1)
(22,5,1)
(34,14,1)
(5,13,1)
(12,49,1)
(2,40,1)
(56,41,1)
(33,17,1)
(34,47,1)
(17,16,1)
(42,11,1)
(51,0,1)
(52,1,1)
(44,52,1)
(37,26,1)
(0,42,1)
(7,30,1)
(14,56,1)
(1,13,1)
(48,12,1)
(16,41,1)
(18,41,1)
(28,22,1)
(26,30,1)
(41,9,1)
(39,7,1)
(46,18,1)
(4,13,1)
(29,46,1)
(21,23,1)
(38,28,1)
(8,35,1)
(27,16,1)
(40,33,1)
(19,4,1)
(49,11,1)
(57,53,1)
(11,37,1)
(48,30,1)
(32,54,1)
(7,8,1)
(9,21,1)
(7,30,2)
(45,16,2)
(4,13,2)
(27,16,2)
(33,16,2)
(12,16,2)
(34,14,2)
(17,16,2)
(7,16,2)
(5,13,2)
(34,16,2)
(56,41,2)
(40,16,2)
(56,2,2)
(16,29,2)
(11,30,2)
(26,16,2)
(49,16,2)
(11,16,2)
(0,11,2)
(37,16,2)
(16,41,2)
(35,30,2)
(30,16,2)
(48,30,2)
(2,16,2)
(35,16,2)
(6,16,2)
(14,56,2)
(34,47,2)
(30,34,2)
(22,5,2)
(14,16,2)
(51,0,2)
(8,16,2)
(41,9,2)
(51,11,2)
(42,11,2)
(56,16,2)
(48,16,2)
-----------------------------------
(0,-1)
(1,stdin)
(2,sizeof(char)
(3,myUnion)
(4,myUnion.unionFirst = data)
(5,&data)
(6,printLine("Input is less than the length of the source string")
(7,free(myString)
(8,myString)
(9,myUnion.unionSecond)
(10,)
(11,myString == NULL)
(12,HELLO_STRING)
(13,data = 0)
(14,malloc(data*sizeof(char)
(15,)
(16,data > strlen(HELLO_STRING)
(17,myString)
(18,data)
(19,data)
(20,)
(21,unionSecond)
(22,fscanf(stdin, "%zu", &data)
(23,myUnion)
(24,)
(25,)
(26,myString)
(27,"Input is less than the length of the source string")
(28,myUnion)
(29,strlen(HELLO_STRING)
(30,myString = (char *)
(31,myString)
(32,0)
(33,data)
(34,(char *)
(35,printLine(myString)
(36,data)
(37,NULL)
(38,unionFirst)
(39,RET)
(40,char)
(41,data = myUnion.unionSecond)
(42,1)
(43,if (myString == NULL)
(44,data)
(45,myString)
(46,HELLO_STRING)
(47,char *)
(48,strcpy(myString, HELLO_STRING)
(49,myString)
(50,if (data > strlen(HELLO_STRING)
(51,exit(-1)
(52,"%zu")
(53,myUnion.unionFirst)
(54,data)
(55,data)
(56,data*sizeof(char)
(57,data)
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^