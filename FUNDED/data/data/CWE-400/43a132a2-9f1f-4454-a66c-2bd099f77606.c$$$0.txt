-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,14,16,20,22,26,27,32,33,35,39,41,45,46,50,52,56,57
-----computeFrom-----
18,19
18,20
24,25
24,26
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B()
goodG2B
{    int count;    CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__rand_sleep_34_unionType
CWE400_Resource_Exhaustion__rand_sleep_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(2,24,0)
(25,18,0)
(22,26,0)
(16,18,0)
(25,14,0)
(4,14,0)
(26,9,0)
(1,4,0)
(20,9,0)
(0,5,0)
(21,2,0)
(3,26,0)
(9,26,0)
(11,5,0)
(12,24,0)
(19,2,0)
(5,14,0)
(6,4,0)
(13,0,0)
(10,14,0)
(18,25,0)
(9,5,0)
(7,14,0)
(0,9,0)
(23,5,0)
(24,14,0)
(17,25,0)
(24,4,0)
(8,11,0)
(26,22,1)
(13,9,1)
(19,21,1)
(24,12,1)
(8,0,1)
(22,3,1)
(12,2,1)
(20,24,1)
(21,4,1)
(2,19,1)
(16,17,1)
(3,20,1)
(1,6,1)
(9,26,1)
(24,4,1)
(0,9,1)
(11,8,1)
(15,11,1)
(6,25,1)
(4,1,1)
(25,18,1)
(18,16,1)
(0,13,1)
(24,4,2)
(0,9,2)
(9,26,2)
(25,18,2)
-----------------------------------
(0,SLEEP(count)
(1,20)
(2,myUnion.unionFirst)
(3,myUnion)
(4,count = 20)
(5,)
(6,count)
(7,count)
(8,"Sleep time possibly too long")
(9,count = myUnion.unionSecond)
(10,myUnion)
(11,printLine("Sleep time possibly too long")
(12,count)
(13,count)
(14,)
(15,RET)
(16,1)
(17,count)
(18,-1)
(19,unionFirst)
(20,count)
(21,myUnion)
(22,unionSecond)
(23,count)
(24,myUnion.unionFirst = count)
(25,count = -1)
(26,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^