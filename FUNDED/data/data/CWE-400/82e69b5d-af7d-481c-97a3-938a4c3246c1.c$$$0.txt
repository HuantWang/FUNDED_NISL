-----label-----
1
-----code-----
int parse_config(FILE *io, struct server *s)
{
	char buf[8192];
	char *a, *b;

	char *directive;
	char *value;
	char *endptr;

	int line = 0;

	while (fgets(buf, 8191, io)) {
		line++;

		for (a = buf; *a && isspace(*a); a++)
			/* skip whitespace */;
		if (*a == '#') continue; /* skip comments */
		if (!*a) continue; /* blank line */

		/* parse the configuration directive token */
		for (b = a; *b && !isspace(*b) && *b != '='; b++)
			/* a...b = directive */;
		if (a == b || !*b) {
			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
			return 1;
		}
		directive = a; *b = '\0';

		/* skip past m{\s*=*} */
		for (a = b+1; *a && *a != '='; a++)
			;
		if (!*a) {
			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
			return 2;
		}
		for (a++; *a && isspace(*a); a++)
			/* skip whitespace */;

		/* parse the configuration value */
		for (b = a; *b && !isspace(*b); b++)
			/* a...b = value */;
		if (a == b) {
			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
			return 3;
		}
		value = a; *b = '\0';

		if (strcmp(directive, "port") == 0) {
			free(s->port);
			s->port = strdup(value);
		} else if (strcmp(directive, "max_clients") == 0) {
			errno = 0;
			s->max_clients = strtol(value, &endptr, 10);
			if (errno != 0 || endptr == value) {
				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
				return 4;
			}
		} else if (strcmp(directive, "max_lifetime") == 0) {
			errno = 0;
			s->max_lifetime = strtol(value, &endptr, 10);
			if (errno != 0 || endptr == value) {
				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
				return 5;
			}
			MAX_LIFETIME = s->max_lifetime;
		} else if (strcmp(directive, "syslog_ident") == 0) {
			free(s->syslog_ident);
			s->syslog_ident = strdup(value);
		} else if (strcmp(directive, "syslog_facility") == 0) {
			for (a = value; *a; a++)
				*a = tolower(*a);
			free(s->syslog_facility);
			s->syslog_facility = strdup(value);
		} else {
			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",
				directive, line);
		}
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
26,29
28,29
28,30
31,32
31,33
34,35
35,36
35,37
37,38
37,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
55,56
55,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
66,67
68,69
68,70
68,71
68,72
68,73
68,74
68,75
68,76
68,77
68,78
68,79
68,80
68,81
68,82
68,83
68,84
69,70
70,71
71,72
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
78,79
80,81
80,82
81,82
82,83
84,85
84,86
85,86
87,88
88,89
90,91
91,92
94,95
94,96
95,96
95,97
96,97
97,98
101,102
101,103
102,103
103,104
104,105
107,108
107,109
107,110
107,111
108,109
109,110
109,111
110,111
112,113
114,115
114,116
115,116
115,117
116,117
117,118
119,120
120,121
120,122
121,122
123,124
124,125
126,127
126,128
127,128
128,129
131,132
132,133
135,136
135,137
136,137
136,138
137,138
137,139
138,139
140,141
142,143
143,144
144,145
146,147
146,148
147,148
148,149
148,150
148,151
148,152
148,153
149,150
151,152
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
169,170
172,173
172,174
172,175
172,176
173,174
174,175
174,176
175,176
177,178
177,179
178,179
181,182
181,183
182,183
183,184
185,186
185,187
186,187
187,188
190,191
191,192
194,195
194,196
195,196
196,197
197,198
199,200
199,201
200,201
201,202
201,203
201,204
201,205
201,206
202,203
204,205
207,208
209,210
211,212
213,214
213,215
213,216
213,217
214,215
215,216
216,217
218,219
218,220
219,220
220,221
222,223
222,224
223,224
225,226
226,227
228,229
229,230
232,233
232,234
232,235
232,236
233,234
234,235
234,236
235,236
237,238
239,240
239,241
240,241
241,242
243,244
244,245
244,246
245,246
247,248
248,249
250,251
251,252
254,255
254,256
255,256
255,257
256,257
258,259
260,261
260,262
261,262
262,263
262,264
262,265
262,266
262,267
263,264
265,266
268,269
270,271
272,273
274,275
275,276
275,277
276,277
278,279
280,281
281,282
281,283
282,283
283,284
286,287
286,288
286,289
287,288
287,289
288,289
288,290
288,291
289,290
291,292
295,296
295,297
296,297
297,298
297,299
298,299
300,301
300,302
301,302
304,305
305,306
305,307
306,307
306,308
307,308
310,311
310,312
311,312
313,314
315,316
315,317
315,318
316,317
316,318
317,318
317,319
317,320
318,319
320,321
324,325
324,326
324,327
325,326
326,327
326,328
327,328
330,331
331,332
331,333
332,333
332,334
333,334
336,337
336,338
336,339
336,340
337,338
339,340
341,342
342,343
345,346
345,347
346,347
346,348
347,348
347,349
348,349
351,352
351,353
352,353
354,355
356,357
356,358
357,358
358,359
358,360
358,361
358,362
358,363
359,360
361,362
364,365
366,367
368,369
370,371
370,372
370,373
371,372
371,373
372,373
372,374
372,375
373,374
375,376
379,380
379,381
379,382
379,383
380,381
381,382
381,383
382,383
385,386
386,387
386,388
387,388
387,389
388,389
391,392
391,393
391,394
391,395
392,393
394,395
396,397
397,398
400,401
400,402
401,402
401,403
402,403
402,404
403,404
406,407
406,408
407,408
409,410
411,412
411,413
412,413
413,414
413,415
413,416
413,417
413,418
414,415
416,417
419,420
421,422
423,424
425,426
426,427
426,428
427,428
429,430
429,431
430,431
433,434
433,435
433,436
434,435
434,436
435,436
435,437
435,438
436,437
438,439
442,443
442,444
443,444
444,445
444,446
445,446
447,448
447,449
448,449
451,452
452,453
452,454
453,454
453,455
454,455
457,458
457,459
458,459
460,461
462,463
462,464
462,465
463,464
463,465
464,465
464,466
464,467
465,466
467,468
471,472
471,473
471,474
472,473
472,474
472,475
472,476
473,474
474,475
474,476
475,476
477,478
479,480
480,481
482,483
483,484
485,486
486,487
486,488
487,488
488,489
490,491
490,492
491,492
493,494
494,495
496,497
497,498
497,499
498,499
500,501
500,502
501,502
504,505
505,506
505,507
506,507
506,508
507,508
510,511
510,512
511,512
513,514
515,516
516,517
517,518
517,519
517,520
517,521
517,522
518,519
520,521
523,524
525,526
527,528
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,24,27,29,30,32,33,36,38,39,42,44,45,48,50,51,54,56,58,62,64,65,67,72,77,79,83,86,89,92,93,98,99,100,105,106,111,113,118,122,125,129,130,133,134,139,141,145,150,152,153,155,157,159,163,165,170,171,176,179,180,184,188,189,192,193,198,203,205,206,208,210,212,217,221,224,227,230,231,236,238,242,246,249,252,253,257,259,264,266,267,269,271,273,277,279,284,285,290,292,293,294,299,302,303,308,309,312,314,319,321,322,323,328,329,334,335,338,340,343,344,349,350,353,355,360,362,363,365,367,369,374,376,377,378,383,384,389,390,393,395,398,399,404,405,408,410,415,417,418,420,422,424,428,431,432,437,439,440,441,446,449,450,455,456,459,461,466,468,469,470,476,478,481,484,489,492,495,499,502,503,508,509,512,514,519,521,522,524,526,528
-----computeFrom-----
75,76
75,77
80,81
80,82
95,96
95,97
109,110
109,111
114,115
114,116
115,116
115,117
126,127
126,128
136,137
136,138
137,138
137,139
161,162
161,163
167,168
167,169
174,175
174,176
177,178
177,179
181,182
181,183
185,186
185,187
218,219
218,220
234,235
234,236
239,240
239,241
255,256
255,257
275,276
275,277
281,282
281,283
287,288
287,289
305,306
305,307
316,317
316,318
326,327
326,328
331,332
331,333
346,347
346,348
347,348
347,349
351,352
351,353
371,372
371,373
381,382
381,383
386,387
386,388
401,402
401,403
402,403
402,404
406,407
406,408
426,427
426,428
434,435
434,436
452,453
452,454
463,464
463,465
474,475
474,476
486,487
486,488
505,506
505,507
-----guardedBy-----
-----guardedByNegation-----
290,466
292,524
319,466
321,524
374,466
376,524
437,466
439,524
468,524
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;IfStatement;UnaryExpression;UnaryExpression;IdExpression;Name;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ForStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int parse_config(FILE *io, struct server *s){	char buf[8192];	char *a, *b;	char *directive;	char *value;	char *endptr;	int line = 0;	while (fgets(buf, 8191, io)) {		line++;		for (a = buf; *a && isspace(*a); a++)			/* skip whitespace */;		if (*a == '#') continue; /* skip comments */		if (!*a) continue; /* blank line */		/* parse the configuration directive token */		for (b = a; *b && !isspace(*b) && *b != '='; b++)			/* a...b = directive */;		if (a == b || !*b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 1;		}		directive = a; *b = '\0';		/* skip past m{\s*=*} */		for (a = b+1; *a && *a != '='; a++)			;		if (!*a) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 2;		}		for (a++; *a && isspace(*a); a++)			/* skip whitespace */;		/* parse the configuration value */		for (b = a; *b && !isspace(*b); b++)			/* a...b = value */;		if (a == b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 3;		}		value = a; *b = '\0';		if (strcmp(directive, "port") == 0) {			free(s->port);			s->port = strdup(value);		} else if (strcmp(directive, "max_clients") == 0) {			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		} else if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}	}	return 0;}
int
parse_config(FILE *io, struct server *s)
parse_config
FILE *io
FILE
FILE
*io
*
io
struct server *s
struct server
server
*s
*
s
{	char buf[8192];	char *a, *b;	char *directive;	char *value;	char *endptr;	int line = 0;	while (fgets(buf, 8191, io)) {		line++;		for (a = buf; *a && isspace(*a); a++)			/* skip whitespace */;		if (*a == '#') continue; /* skip comments */		if (!*a) continue; /* blank line */		/* parse the configuration directive token */		for (b = a; *b && !isspace(*b) && *b != '='; b++)			/* a...b = directive */;		if (a == b || !*b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 1;		}		directive = a; *b = '\0';		/* skip past m{\s*=*} */		for (a = b+1; *a && *a != '='; a++)			;		if (!*a) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 2;		}		for (a++; *a && isspace(*a); a++)			/* skip whitespace */;		/* parse the configuration value */		for (b = a; *b && !isspace(*b); b++)			/* a...b = value */;		if (a == b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 3;		}		value = a; *b = '\0';		if (strcmp(directive, "port") == 0) {			free(s->port);			s->port = strdup(value);		} else if (strcmp(directive, "max_clients") == 0) {			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		} else if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}	}	return 0;}
char buf[8192];
char buf[8192];
char
buf[8192]
buf
[8192]
8192
char *a, *b;
char *a, *b;
char
*a
*
a
*b
*
b
char *directive;
char *directive;
char
*directive
*
directive
char *value;
char *value;
char
*value
*
value
char *endptr;
char *endptr;
char
*endptr
*
endptr
int line = 0;
int line = 0;
int
line = 0
line
= 0
0
while (fgets(buf, 8191, io)) {		line++;		for (a = buf; *a && isspace(*a); a++)			/* skip whitespace */;		if (*a == '#') continue; /* skip comments */		if (!*a) continue; /* blank line */		/* parse the configuration directive token */		for (b = a; *b && !isspace(*b) && *b != '='; b++)			/* a...b = directive */;		if (a == b || !*b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 1;		}		directive = a; *b = '\0';		/* skip past m{\s*=*} */		for (a = b+1; *a && *a != '='; a++)			;		if (!*a) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 2;		}		for (a++; *a && isspace(*a); a++)			/* skip whitespace */;		/* parse the configuration value */		for (b = a; *b && !isspace(*b); b++)			/* a...b = value */;		if (a == b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 3;		}		value = a; *b = '\0';		if (strcmp(directive, "port") == 0) {			free(s->port);			s->port = strdup(value);		} else if (strcmp(directive, "max_clients") == 0) {			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		} else if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}	}
fgets(buf, 8191, io)
fgets
fgets
buf
buf
8191
io
io
{		line++;		for (a = buf; *a && isspace(*a); a++)			/* skip whitespace */;		if (*a == '#') continue; /* skip comments */		if (!*a) continue; /* blank line */		/* parse the configuration directive token */		for (b = a; *b && !isspace(*b) && *b != '='; b++)			/* a...b = directive */;		if (a == b || !*b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 1;		}		directive = a; *b = '\0';		/* skip past m{\s*=*} */		for (a = b+1; *a && *a != '='; a++)			;		if (!*a) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 2;		}		for (a++; *a && isspace(*a); a++)			/* skip whitespace */;		/* parse the configuration value */		for (b = a; *b && !isspace(*b); b++)			/* a...b = value */;		if (a == b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 3;		}		value = a; *b = '\0';		if (strcmp(directive, "port") == 0) {			free(s->port);			s->port = strdup(value);		} else if (strcmp(directive, "max_clients") == 0) {			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		} else if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}	}
line++;
line++
line
line
for (a = buf; *a && isspace(*a); a++)			/* skip whitespace */;
a = buf;
a = buf
a
a
buf
buf
*a && isspace(*a)
*a
a
a
isspace(*a)
isspace
isspace
*a
a
a
a++
a
a
;
if (*a == '#') continue;
*a == '#'
*a
a
a
'#'
continue;
if (!*a) continue;
!*a
*a
a
a
continue;
for (b = a; *b && !isspace(*b) && *b != '='; b++)			/* a...b = directive */;
b = a;
b = a
b
b
a
a
*b && !isspace(*b) && *b != '='
*b && !isspace(*b)
*b
b
b
!isspace(*b)
isspace(*b)
isspace
isspace
*b
b
b
*b != '='
*b
b
b
'='
b++
b
b
;
if (a == b || !*b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 1;		}
a == b || !*b
a == b
a
a
b
b
!*b
*b
b
b
{			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 1;		}
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf)
fprintf
fprintf
stderr
stderr
"malformed configuration, line %d: %s\n"
line
line
buf
buf
return 1;
1
directive = a;
directive = a
directive
directive
a
a
*b = '\0';
*b = '\0'
*b
b
b
'\0'
for (a = b+1; *a && *a != '='; a++)			;
a = b+1;
a = b+1
a
a
b+1
b
b
1
*a && *a != '='
*a
a
a
*a != '='
*a
a
a
'='
a++
a
a
;
if (!*a) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 2;		}
!*a
*a
a
a
{			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 2;		}
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf)
fprintf
fprintf
stderr
stderr
"malformed configuration, line %d: %s\n"
line
line
buf
buf
return 2;
2
for (a++; *a && isspace(*a); a++)			/* skip whitespace */;
a++;
a++
a
a
*a && isspace(*a)
*a
a
a
isspace(*a)
isspace
isspace
*a
a
a
a++
a
a
;
for (b = a; *b && !isspace(*b); b++)			/* a...b = value */;
b = a;
b = a
b
b
a
a
*b && !isspace(*b)
*b
b
b
!isspace(*b)
isspace(*b)
isspace
isspace
*b
b
b
b++
b
b
;
if (a == b) {			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 3;		}
a == b
a
a
b
b
{			fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);			return 3;		}
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf)
fprintf
fprintf
stderr
stderr
"malformed configuration, line %d: %s\n"
line
line
buf
buf
return 3;
3
value = a;
value = a
value
value
a
a
*b = '\0';
*b = '\0'
*b
b
b
'\0'
if (strcmp(directive, "port") == 0) {			free(s->port);			s->port = strdup(value);		} else if (strcmp(directive, "max_clients") == 0) {			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		} else if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}
strcmp(directive, "port") == 0
strcmp(directive, "port")
strcmp
strcmp
directive
directive
"port"
0
{			free(s->port);			s->port = strdup(value);		}
free(s->port);
free(s->port)
free
free
s->port
s
s
port
s->port = strdup(value);
s->port = strdup(value)
s->port
s
s
port
strdup(value)
strdup
strdup
value
value
if (strcmp(directive, "max_clients") == 0) {			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		} else if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}
strcmp(directive, "max_clients") == 0
strcmp(directive, "max_clients")
strcmp
strcmp
directive
directive
"max_clients"
0
{			errno = 0;			s->max_clients = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}		}
errno = 0;
errno = 0
errno
errno
0
s->max_clients = strtol(value, &endptr, 10);
s->max_clients = strtol(value, &endptr, 10)
s->max_clients
s
s
max_clients
strtol(value, &endptr, 10)
strtol
strtol
value
value
&endptr
endptr
endptr
10
if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}
errno != 0 || endptr == value
errno != 0
errno
errno
0
endptr == value
endptr
endptr
value
value
{				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 4;			}
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf)
fprintf
fprintf
stderr
stderr
"malformed configuration, line %d: %s\n"
line
line
buf
buf
return 4;
4
if (strcmp(directive, "max_lifetime") == 0) {			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		} else if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}
strcmp(directive, "max_lifetime") == 0
strcmp(directive, "max_lifetime")
strcmp
strcmp
directive
directive
"max_lifetime"
0
{			errno = 0;			s->max_lifetime = strtol(value, &endptr, 10);			if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}			MAX_LIFETIME = s->max_lifetime;		}
errno = 0;
errno = 0
errno
errno
0
s->max_lifetime = strtol(value, &endptr, 10);
s->max_lifetime = strtol(value, &endptr, 10)
s->max_lifetime
s
s
max_lifetime
strtol(value, &endptr, 10)
strtol
strtol
value
value
&endptr
endptr
endptr
10
if (errno != 0 || endptr == value) {				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}
errno != 0 || endptr == value
errno != 0
errno
errno
0
endptr == value
endptr
endptr
value
value
{				fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);				return 5;			}
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf);
fprintf(stderr, "malformed configuration, line %d: %s\n", line, buf)
fprintf
fprintf
stderr
stderr
"malformed configuration, line %d: %s\n"
line
line
buf
buf
return 5;
5
MAX_LIFETIME = s->max_lifetime;
MAX_LIFETIME = s->max_lifetime
MAX_LIFETIME
MAX_LIFETIME
s->max_lifetime
s
s
max_lifetime
if (strcmp(directive, "syslog_ident") == 0) {			free(s->syslog_ident);			s->syslog_ident = strdup(value);		} else if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}
strcmp(directive, "syslog_ident") == 0
strcmp(directive, "syslog_ident")
strcmp
strcmp
directive
directive
"syslog_ident"
0
{			free(s->syslog_ident);			s->syslog_ident = strdup(value);		}
free(s->syslog_ident);
free(s->syslog_ident)
free
free
s->syslog_ident
s
s
syslog_ident
s->syslog_ident = strdup(value);
s->syslog_ident = strdup(value)
s->syslog_ident
s
s
syslog_ident
strdup(value)
strdup
strdup
value
value
if (strcmp(directive, "syslog_facility") == 0) {			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		} else {			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}
strcmp(directive, "syslog_facility") == 0
strcmp(directive, "syslog_facility")
strcmp
strcmp
directive
directive
"syslog_facility"
0
{			for (a = value; *a; a++)				*a = tolower(*a);			free(s->syslog_facility);			s->syslog_facility = strdup(value);		}
for (a = value; *a; a++)				*a = tolower(*a);
a = value;
a = value
a
a
value
value
*a
a
a
a++
a
a
*a = tolower(*a);
*a = tolower(*a)
*a
a
a
tolower(*a)
tolower
tolower
*a
a
a
free(s->syslog_facility);
free(s->syslog_facility)
free
free
s->syslog_facility
s
s
syslog_facility
s->syslog_facility = strdup(value);
s->syslog_facility = strdup(value)
s->syslog_facility
s
s
syslog_facility
strdup(value)
strdup
strdup
value
value
{			fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);		}
fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line);
fprintf(stderr, "unrecognized configuration directive '%s', on line %i\n",				directive, line)
fprintf
fprintf
stderr
stderr
"unrecognized configuration directive '%s', on line %i\n"
directive
directive
line
line
return 0;
0
-----joern-----
(128,86,0)
(196,126,0)
(144,207,0)
(270,86,0)
(119,196,0)
(171,196,0)
(279,153,0)
(287,280,0)
(251,229,0)
(57,73,0)
(235,59,0)
(233,156,0)
(178,251,0)
(172,178,0)
(59,179,0)
(196,119,0)
(281,126,0)
(59,3,0)
(160,222,0)
(74,220,0)
(15,210,0)
(98,160,0)
(205,60,0)
(290,257,0)
(284,181,0)
(292,217,0)
(36,212,0)
(221,259,0)
(273,75,0)
(16,60,0)
(207,25,0)
(47,251,0)
(247,153,0)
(93,180,0)
(17,39,0)
(298,11,0)
(107,93,0)
(255,273,0)
(93,284,0)
(285,130,0)
(117,126,0)
(3,171,0)
(201,89,0)
(12,218,0)
(103,191,0)
(116,229,0)
(245,152,0)
(221,216,0)
(24,229,0)
(287,106,0)
(190,66,0)
(171,39,0)
(21,190,0)
(103,201,0)
(60,259,0)
(125,273,0)
(99,242,0)
(188,13,0)
(201,116,0)
(241,75,0)
(139,65,0)
(74,259,0)
(110,158,0)
(280,288,0)
(204,164,0)
(197,229,0)
(51,217,0)
(161,1,0)
(43,153,0)
(79,239,0)
(52,51,0)
(181,217,0)
(174,114,0)
(221,17,0)
(60,212,0)
(45,220,0)
(261,117,0)
(168,44,0)
(126,229,0)
(156,126,0)
(60,220,0)
(292,277,0)
(59,259,0)
(7,251,0)
(124,39,0)
(71,30,0)
(34,19,0)
(58,151,0)
(194,279,0)
(234,203,0)
(101,185,0)
(220,217,0)
(114,299,0)
(163,109,0)
(60,131,0)
(293,250,0)
(85,43,0)
(283,251,0)
(145,80,0)
(126,75,0)
(205,93,0)
(168,89,0)
(56,166,0)
(221,179,0)
(27,297,0)
(249,196,0)
(175,3,0)
(22,284,0)
(43,85,0)
(257,185,0)
(135,276,0)
(223,94,0)
(76,264,0)
(114,264,0)
(208,185,0)
(168,264,0)
(61,259,0)
(106,264,0)
(158,110,0)
(177,26,0)
(277,276,0)
(117,261,0)
(254,286,0)
(47,166,0)
(41,86,0)
(113,86,0)
(102,118,0)
(261,224,0)
(239,28,0)
(228,153,0)
(48,115,0)
(228,266,0)
(10,80,0)
(279,266,0)
(92,105,0)
(36,86,0)
(166,47,0)
(51,261,0)
(142,25,0)
(59,160,0)
(212,232,0)
(221,284,0)
(11,217,0)
(60,3,0)
(221,131,0)
(164,118,0)
(212,217,0)
(221,3,0)
(185,86,0)
(181,284,0)
(91,224,0)
(297,229,0)
(90,229,0)
(36,17,0)
(6,153,0)
(162,75,0)
(46,162,0)
(95,44,0)
(176,286,0)
(84,153,0)
(132,247,0)
(256,73,0)
(63,84,0)
(36,216,0)
(70,212,0)
(114,116,0)
(165,6,0)
(36,284,0)
(19,244,0)
(151,58,0)
(260,86,0)
(49,74,0)
(170,168,0)
(148,117,0)
(59,180,0)
(221,220,0)
(203,126,0)
(114,162,0)
(187,153,0)
(64,266,0)
(238,251,0)
(191,109,0)
(109,266,0)
(94,178,0)
(81,257,0)
(140,180,0)
(205,221,0)
(250,279,0)
(83,289,0)
(196,171,0)
(6,266,0)
(68,292,0)
(58,153,0)
(121,229,0)
(108,101,0)
(13,188,0)
(48,6,0)
(80,126,0)
(8,281,0)
(106,116,0)
(59,17,0)
(111,19,0)
(120,86,0)
(267,86,0)
(282,239,0)
(80,10,0)
(202,229,0)
(189,150,0)
(50,201,0)
(247,13,0)
(201,264,0)
(93,3,0)
(285,288,0)
(59,66,0)
(136,75,0)
(51,91,0)
(74,212,0)
(299,159,0)
(230,156,0)
(130,264,0)
(73,185,0)
(231,75,0)
(74,3,0)
(286,251,0)
(91,51,0)
(72,154,0)
(232,207,0)
(156,158,0)
(60,284,0)
(93,131,0)
(20,119,0)
(206,227,0)
(59,220,0)
(286,105,0)
(205,36,0)
(60,17,0)
(294,239,0)
(271,46,0)
(4,238,0)
(74,179,0)
(150,75,0)
(93,244,0)
(295,43,0)
(54,190,0)
(11,274,0)
(93,179,0)
(159,215,0)
(288,285,0)
(78,266,0)
(136,162,0)
(74,284,0)
(248,101,0)
(23,178,0)
(105,286,0)
(237,181,0)
(88,222,0)
(150,153,0)
(221,180,0)
(155,153,0)
(274,218,0)
(274,281,0)
(167,101,0)
(115,48,0)
(37,130,0)
(19,185,0)
(289,162,0)
(30,203,0)
(207,126,0)
(292,135,0)
(137,216,0)
(183,126,0)
(44,168,0)
(147,203,0)
(89,266,0)
(273,89,0)
(226,190,0)
(259,89,0)
(154,266,0)
(179,277,0)
(46,116,0)
(74,160,0)
(138,161,0)
(207,232,0)
(65,199,0)
(84,161,0)
(180,162,0)
(236,89,0)
(238,152,0)
(228,115,0)
(215,159,0)
(210,10,0)
(141,239,0)
(0,75,0)
(143,185,0)
(169,106,0)
(29,19,0)
(59,216,0)
(59,284,0)
(284,222,0)
(43,75,0)
(135,292,0)
(220,274,0)
(173,19,0)
(2,231,0)
(25,207,0)
(33,179,0)
(180,264,0)
(67,86,0)
(288,280,0)
(221,123,0)
(60,28,0)
(10,210,0)
(109,89,0)
(291,101,0)
(253,162,0)
(277,227,0)
(281,274,0)
(32,110,0)
(178,94,0)
(298,218,0)
(36,259,0)
(118,164,0)
(104,36,0)
(257,296,0)
(5,229,0)
(93,216,0)
(11,298,0)
(246,187,0)
(205,74,0)
(35,80,0)
(44,280,0)
(232,222,0)
(164,251,0)
(157,212,0)
(243,89,0)
(227,277,0)
(184,110,0)
(13,247,0)
(297,185,0)
(59,131,0)
(1,155,0)
(58,266,0)
(42,11,0)
(153,214,0)
(36,160,0)
(1,161,0)
(87,155,0)
(38,17,0)
(73,219,0)
(93,220,0)
(36,180,0)
(46,215,0)
(159,299,0)
(268,221,0)
(225,136,0)
(74,219,0)
(74,131,0)
(192,257,0)
(131,203,0)
(265,11,0)
(36,131,0)
(168,116,0)
(130,116,0)
(187,214,0)
(214,187,0)
(18,65,0)
(242,89,0)
(186,126,0)
(122,190,0)
(269,257,0)
(278,65,0)
(179,217,0)
(247,75,0)
(60,216,0)
(93,17,0)
(221,212,0)
(74,17,0)
(198,229,0)
(97,17,0)
(130,89,0)
(59,212,0)
(264,229,0)
(214,153,0)
(112,73,0)
(31,3,0)
(129,228,0)
(213,47,0)
(299,114,0)
(259,116,0)
(36,3,0)
(191,103,0)
(280,44,0)
(155,75,0)
(161,84,0)
(60,180,0)
(279,250,0)
(155,1,0)
(257,251,0)
(96,164,0)
(46,264,0)
(200,229,0)
(60,160,0)
(201,103,0)
(211,136,0)
(187,203,0)
(69,47,0)
(182,181,0)
(227,126,0)
(106,89,0)
(258,109,0)
(181,232,0)
(251,266,0)
(77,58,0)
(106,287,0)
(60,179,0)
(93,259,0)
(36,179,0)
(146,149,0)
(190,185,0)
(133,51,0)
(62,238,0)
(74,216,0)
(263,116,0)
(127,179,0)
(75,273,0)
(216,217,0)
(6,48,0)
(158,156,0)
(221,160,0)
(149,203,0)
(3,217,0)
(55,229,0)
(101,123,0)
(100,162,0)
(239,185,0)
(26,75,0)
(193,73,0)
(84,75,0)
(82,207,0)
(115,228,0)
(36,220,0)
(93,160,0)
(134,210,0)
(275,241,0)
(216,261,0)
(74,180,0)
(53,220,0)
(188,150,0)
(240,229,0)
(272,216,0)
(9,160,0)
(280,287,0)
(40,292,0)
(252,229,0)
(130,285,0)
(152,238,0)
(205,59,0)
(195,131,0)
(215,46,0)
(209,196,0)
(109,191,0)
(131,153,0)
(150,188,0)
(93,212,0)
(148,216,1)
(221,259,1)
(227,126,1)
(179,217,1)
(63,155,1)
(242,99,1)
(292,40,1)
(59,284,1)
(58,153,1)
(242,89,1)
(58,266,1)
(159,215,1)
(6,266,1)
(110,32,1)
(109,266,1)
(294,282,1)
(62,4,1)
(93,160,1)
(190,54,1)
(288,285,1)
(171,196,1)
(178,172,1)
(93,220,1)
(289,162,1)
(237,22,1)
(141,85,1)
(205,36,1)
(36,259,1)
(210,15,1)
(74,17,1)
(60,179,1)
(18,261,1)
(188,150,1)
(220,217,1)
(74,131,1)
(155,153,1)
(46,271,1)
(84,63,1)
(136,225,1)
(241,75,1)
(87,231,1)
(76,180,1)
(201,116,1)
(238,62,1)
(201,89,1)
(125,0,1)
(174,289,1)
(65,278,1)
(115,228,1)
(9,166,1)
(77,250,1)
(122,226,1)
(60,284,1)
(43,75,1)
(29,34,1)
(161,138,1)
(81,105,1)
(297,185,1)
(54,122,1)
(156,230,1)
(92,286,1)
(115,48,1)
(173,136,1)
(166,47,1)
(201,264,1)
(191,103,1)
(130,37,1)
(209,3,1)
(74,179,1)
(101,248,1)
(59,216,1)
(183,186,1)
(227,206,1)
(221,3,1)
(245,238,1)
(223,178,1)
(187,203,1)
(262,250,1)
(129,266,1)
(212,217,1)
(30,203,1)
(104,65,1)
(155,75,1)
(254,152,1)
(1,155,1)
(99,287,1)
(36,131,1)
(65,199,1)
(282,79,1)
(280,44,1)
(221,268,1)
(139,18,1)
(84,153,1)
(89,266,1)
(162,253,1)
(2,1,1)
(299,159,1)
(279,194,1)
(232,207,1)
(216,137,1)
(258,163,1)
(118,102,1)
(18,277,1)
(131,195,1)
(79,141,1)
(119,20,1)
(106,169,1)
(51,261,1)
(221,179,1)
(105,286,1)
(18,185,1)
(214,187,1)
(233,110,1)
(221,131,1)
(248,167,1)
(286,251,1)
(52,94,1)
(189,26,1)
(130,89,1)
(38,118,1)
(102,164,1)
(182,237,1)
(150,189,1)
(134,171,1)
(135,292,1)
(272,91,1)
(215,46,1)
(188,13,1)
(164,251,1)
(234,105,1)
(150,153,1)
(221,160,1)
(193,256,1)
(221,212,1)
(235,190,1)
(114,116,1)
(146,203,1)
(59,180,1)
(72,115,1)
(163,287,1)
(174,162,1)
(144,212,1)
(207,82,1)
(277,227,1)
(279,153,1)
(11,274,1)
(95,168,1)
(157,160,1)
(175,31,1)
(49,73,1)
(59,160,1)
(152,238,1)
(156,126,1)
(91,51,1)
(69,118,1)
(265,42,1)
(291,108,1)
(118,164,1)
(27,65,1)
(204,96,1)
(74,284,1)
(13,247,1)
(211,299,1)
(114,174,1)
(145,210,1)
(74,3,1)
(106,89,1)
(158,110,1)
(208,143,1)
(59,3,1)
(273,89,1)
(6,165,1)
(187,246,1)
(186,136,1)
(53,298,1)
(36,160,1)
(131,203,1)
(190,185,1)
(23,264,1)
(93,17,1)
(231,75,1)
(74,49,1)
(205,93,1)
(180,140,1)
(87,75,1)
(59,131,1)
(275,188,1)
(11,217,1)
(207,126,1)
(51,217,1)
(169,89,1)
(168,89,1)
(176,254,1)
(7,191,1)
(101,185,1)
(196,249,1)
(93,259,1)
(37,106,1)
(20,209,1)
(142,144,1)
(97,38,1)
(221,180,1)
(257,185,1)
(74,180,1)
(15,134,1)
(8,220,1)
(96,94,1)
(19,185,1)
(146,30,1)
(247,153,1)
(167,291,1)
(85,43,1)
(60,259,1)
(129,154,1)
(273,255,1)
(255,125,1)
(74,160,1)
(17,97,1)
(286,176,1)
(3,217,1)
(136,75,1)
(295,1,1)
(126,75,1)
(36,284,1)
(33,127,1)
(48,6,1)
(185,208,1)
(47,213,1)
(114,264,1)
(228,129,1)
(74,259,1)
(168,170,1)
(158,156,1)
(80,35,1)
(18,262,1)
(117,126,1)
(153,214,1)
(59,179,1)
(60,131,1)
(59,235,1)
(58,77,1)
(103,201,1)
(170,288,1)
(289,83,1)
(271,114,1)
(266,64,1)
(11,265,1)
(149,203,1)
(168,264,1)
(137,272,1)
(283,7,1)
(165,228,1)
(154,72,1)
(285,130,1)
(40,68,1)
(30,71,1)
(257,269,1)
(130,116,1)
(181,232,1)
(280,288,1)
(82,25,1)
(93,284,1)
(36,180,1)
(10,210,1)
(74,220,1)
(26,177,1)
(236,151,1)
(112,57,1)
(281,126,1)
(43,295,1)
(196,126,1)
(203,147,1)
(160,98,1)
(230,233,1)
(138,84,1)
(34,173,1)
(149,146,1)
(239,185,1)
(297,27,1)
(161,84,1)
(269,290,1)
(31,17,1)
(16,239,1)
(80,126,1)
(206,179,1)
(93,179,1)
(59,17,1)
(126,183,1)
(162,75,1)
(93,180,1)
(228,153,1)
(59,220,1)
(250,293,1)
(231,2,1)
(220,45,1)
(83,299,1)
(287,280,1)
(256,112,1)
(169,242,1)
(253,100,1)
(184,232,1)
(45,53,1)
(116,263,1)
(46,264,1)
(73,185,1)
(221,284,1)
(251,283,1)
(75,273,1)
(292,277,1)
(247,75,1)
(44,168,1)
(61,251,1)
(168,116,1)
(32,184,1)
(225,211,1)
(152,245,1)
(36,17,1)
(264,76,1)
(203,126,1)
(25,142,1)
(100,188,1)
(93,216,1)
(251,266,1)
(108,158,1)
(1,161,1)
(106,116,1)
(98,9,1)
(89,243,1)
(60,220,1)
(19,111,1)
(257,251,1)
(46,162,1)
(180,162,1)
(150,75,1)
(71,153,1)
(60,16,1)
(36,212,1)
(35,145,1)
(221,220,1)
(51,133,1)
(0,116,1)
(47,251,1)
(111,29,1)
(205,221,1)
(140,126,1)
(164,204,1)
(59,259,1)
(84,75,1)
(114,162,1)
(177,85,1)
(189,241,1)
(246,131,1)
(290,192,1)
(292,217,1)
(187,153,1)
(18,14,1)
(93,212,1)
(93,131,1)
(133,52,1)
(250,279,1)
(268,101,1)
(213,69,1)
(60,180,1)
(74,212,1)
(10,80,1)
(3,175,1)
(107,19,1)
(43,153,1)
(281,8,1)
(259,89,1)
(216,217,1)
(59,212,1)
(201,50,1)
(22,158,1)
(105,92,1)
(298,11,1)
(172,23,1)
(36,216,1)
(279,266,1)
(57,10,1)
(191,109,1)
(44,95,1)
(278,139,1)
(212,70,1)
(36,220,1)
(18,284,1)
(195,149,1)
(14,151,1)
(18,10,1)
(154,266,1)
(239,294,1)
(93,3,1)
(221,216,1)
(18,274,1)
(21,191,1)
(26,75,1)
(50,109,1)
(132,150,1)
(259,61,1)
(226,21,1)
(109,258,1)
(93,107,1)
(249,119,1)
(179,33,1)
(64,78,1)
(166,56,1)
(18,257,1)
(60,3,1)
(194,115,1)
(106,264,1)
(293,279,1)
(36,3,1)
(299,114,1)
(155,87,1)
(42,149,1)
(60,160,1)
(74,216,1)
(205,74,1)
(127,135,1)
(207,25,1)
(287,106,1)
(70,157,1)
(147,234,1)
(247,132,1)
(205,60,1)
(263,259,1)
(109,89,1)
(196,119,1)
(181,182,1)
(243,236,1)
(73,193,1)
(60,212,1)
(261,117,1)
(68,152,1)
(192,81,1)
(205,59,1)
(130,264,1)
(181,217,1)
(151,58,1)
(94,223,1)
(178,251,1)
(36,104,1)
(60,216,1)
(221,17,1)
(117,148,1)
(60,17,1)
(46,116,1)
(36,179,1)
(238,251,1)
(78,297,1)
(284,181,1)
(228,266,1)
(6,153,1)
(56,47,1)
(241,275,1)
(136,162,1)
(4,166,1)
(274,281,1)
(94,178,1)
(196,118,2)
(47,118,2)
(228,65,2)
(158,166,2)
(286,152,2)
(81,105,2)
(93,220,2)
(63,155,2)
(122,191,2)
(216,217,2)
(71,149,2)
(168,288,2)
(188,13,2)
(273,89,2)
(205,59,2)
(285,130,2)
(190,185,2)
(201,89,2)
(58,266,2)
(259,89,2)
(97,118,2)
(279,65,2)
(58,250,2)
(221,131,2)
(287,106,2)
(76,136,2)
(256,10,2)
(195,149,2)
(166,47,2)
(95,288,2)
(215,114,2)
(52,94,2)
(228,115,2)
(227,152,2)
(207,126,2)
(60,17,2)
(21,191,2)
(133,94,2)
(221,216,2)
(46,116,2)
(145,210,2)
(290,105,2)
(139,151,2)
(214,149,2)
(29,136,2)
(178,251,2)
(17,118,2)
(264,136,2)
(60,160,2)
(36,284,2)
(125,191,2)
(144,166,2)
(280,288,2)
(215,46,2)
(168,116,2)
(84,75,2)
(51,217,2)
(65,10,2)
(154,115,2)
(74,3,2)
(220,217,2)
(104,65,2)
(61,191,2)
(59,220,2)
(93,3,2)
(281,105,2)
(155,153,2)
(27,65,2)
(169,287,2)
(84,153,2)
(255,191,2)
(173,136,2)
(232,207,2)
(146,149,2)
(214,187,2)
(99,287,2)
(91,51,2)
(60,3,2)
(106,287,2)
(176,152,2)
(43,75,2)
(277,152,2)
(261,117,2)
(161,84,2)
(165,228,2)
(178,136,2)
(1,155,2)
(117,126,2)
(31,118,2)
(85,191,2)
(150,188,2)
(205,36,2)
(292,277,2)
(79,85,2)
(248,158,2)
(109,266,2)
(80,210,2)
(59,191,2)
(46,162,2)
(265,105,2)
(34,136,2)
(115,65,2)
(245,166,2)
(274,105,2)
(269,105,2)
(201,109,2)
(289,299,2)
(62,166,2)
(295,191,2)
(53,105,2)
(73,185,2)
(60,259,2)
(288,106,2)
(11,217,2)
(115,48,2)
(60,131,2)
(26,75,2)
(65,158,2)
(292,152,2)
(177,85,2)
(181,217,2)
(241,188,2)
(167,158,2)
(49,10,2)
(65,250,2)
(65,151,2)
(184,166,2)
(187,153,2)
(150,75,2)
(105,152,2)
(84,155,2)
(281,126,2)
(74,220,2)
(266,65,2)
(298,105,2)
(94,136,2)
(7,191,2)
(216,94,2)
(139,158,2)
(278,94,2)
(194,65,2)
(74,212,2)
(74,259,2)
(151,58,2)
(189,85,2)
(0,191,2)
(253,85,2)
(257,251,2)
(258,151,2)
(221,220,2)
(299,114,2)
(100,85,2)
(277,227,2)
(109,151,2)
(106,89,2)
(36,179,2)
(13,150,2)
(139,250,2)
(231,1,2)
(227,126,2)
(291,158,2)
(239,85,2)
(212,166,2)
(65,166,2)
(190,191,2)
(205,60,2)
(246,149,2)
(174,299,2)
(221,180,2)
(226,191,2)
(111,136,2)
(96,94,2)
(98,166,2)
(22,158,2)
(259,191,2)
(153,149,2)
(241,75,2)
(238,251,2)
(221,179,2)
(179,217,2)
(262,250,2)
(69,118,2)
(279,153,2)
(293,65,2)
(180,136,2)
(50,109,2)
(171,196,2)
(280,44,2)
(278,158,2)
(279,266,2)
(203,105,2)
(10,210,2)
(9,166,2)
(59,284,2)
(149,149,2)
(189,188,2)
(15,118,2)
(221,212,2)
(211,85,2)
(287,287,2)
(101,158,2)
(72,115,2)
(4,166,2)
(136,75,2)
(220,105,2)
(32,166,2)
(137,94,2)
(242,287,2)
(268,158,2)
(93,179,2)
(155,1,2)
(14,151,2)
(94,178,2)
(59,259,2)
(299,299,2)
(174,85,2)
(207,166,2)
(156,126,2)
(159,114,2)
(148,94,2)
(93,131,2)
(115,228,2)
(164,94,2)
(101,185,2)
(87,191,2)
(206,152,2)
(3,217,2)
(299,85,2)
(261,94,2)
(153,214,2)
(168,89,2)
(250,279,2)
(247,153,2)
(257,105,2)
(139,166,2)
(59,216,2)
(132,150,2)
(83,299,2)
(40,152,2)
(20,118,2)
(221,284,2)
(6,266,2)
(82,166,2)
(235,191,2)
(263,191,2)
(93,216,2)
(182,158,2)
(142,166,2)
(36,259,2)
(126,136,2)
(114,85,2)
(278,250,2)
(38,118,2)
(93,212,2)
(13,247,2)
(18,250,2)
(162,75,2)
(254,152,2)
(221,17,2)
(33,152,2)
(93,136,2)
(272,94,2)
(46,264,2)
(166,118,2)
(203,126,2)
(141,85,2)
(1,161,2)
(155,75,2)
(157,166,2)
(85,43,2)
(74,160,2)
(164,251,2)
(283,191,2)
(16,85,2)
(230,110,2)
(221,158,2)
(89,151,2)
(119,118,2)
(74,179,2)
(65,94,2)
(196,119,2)
(129,115,2)
(273,191,2)
(19,185,2)
(1,191,2)
(155,191,2)
(60,212,2)
(181,232,2)
(44,168,2)
(37,106,2)
(163,151,2)
(221,3,2)
(243,151,2)
(274,281,2)
(18,158,2)
(140,136,2)
(74,10,2)
(58,153,2)
(10,118,2)
(188,150,2)
(30,149,2)
(93,180,2)
(175,118,2)
(112,10,2)
(60,220,2)
(2,1,2)
(93,259,2)
(130,264,2)
(89,266,2)
(77,250,2)
(136,85,2)
(78,65,2)
(147,105,2)
(51,261,2)
(106,264,2)
(286,251,2)
(30,203,2)
(74,180,2)
(74,284,2)
(91,94,2)
(47,251,2)
(239,185,2)
(25,166,2)
(18,166,2)
(242,89,2)
(213,118,2)
(80,126,2)
(138,155,2)
(105,286,2)
(188,85,2)
(181,158,2)
(170,288,2)
(127,152,2)
(18,151,2)
(179,152,2)
(60,180,2)
(146,105,2)
(6,153,2)
(169,151,2)
(188,188,2)
(36,17,2)
(139,10,2)
(228,266,2)
(8,105,2)
(231,75,2)
(103,109,2)
(152,238,2)
(26,85,2)
(60,284,2)
(93,160,2)
(285,106,2)
(59,180,2)
(209,118,2)
(74,216,2)
(18,10,2)
(282,85,2)
(168,264,2)
(23,136,2)
(114,264,2)
(207,25,2)
(289,162,2)
(247,150,2)
(205,74,2)
(110,166,2)
(35,210,2)
(36,220,2)
(158,156,2)
(36,3,2)
(221,259,2)
(299,159,2)
(36,180,2)
(233,110,2)
(59,179,2)
(187,149,2)
(74,131,2)
(278,166,2)
(238,166,2)
(228,153,2)
(210,118,2)
(93,284,2)
(251,191,2)
(172,136,2)
(204,94,2)
(60,179,2)
(192,105,2)
(191,151,2)
(87,1,2)
(287,280,2)
(75,273,2)
(257,185,2)
(19,136,2)
(73,10,2)
(48,6,2)
(159,215,2)
(152,166,2)
(11,105,2)
(280,106,2)
(278,151,2)
(187,203,2)
(136,162,2)
(60,216,2)
(161,155,2)
(59,131,2)
(93,17,2)
(36,160,2)
(54,191,2)
(151,250,2)
(149,203,2)
(183,136,2)
(201,116,2)
(223,136,2)
(298,11,2)
(297,185,2)
(212,217,2)
(160,166,2)
(59,17,2)
(18,94,2)
(118,164,2)
(162,85,2)
(107,136,2)
(284,158,2)
(251,266,2)
(109,89,2)
(205,93,2)
(108,158,2)
(60,85,2)
(48,228,2)
(234,105,2)
(275,188,2)
(118,94,2)
(131,149,2)
(115,115,2)
(59,160,2)
(130,106,2)
(150,153,2)
(36,65,2)
(106,151,2)
(42,105,2)
(247,75,2)
(205,221,2)
(149,105,2)
(10,80,2)
(102,94,2)
(287,151,2)
(3,118,2)
(11,274,2)
(114,299,2)
(131,203,2)
(64,65,2)
(129,65,2)
(59,212,2)
(297,65,2)
(237,158,2)
(171,118,2)
(68,152,2)
(75,191,2)
(43,153,2)
(106,116,2)
(294,85,2)
(278,10,2)
(135,152,2)
(70,166,2)
(225,85,2)
(92,152,2)
(186,136,2)
(201,264,2)
(65,199,2)
(180,162,2)
(46,114,2)
(232,166,2)
(191,109,2)
(221,160,2)
(154,266,2)
(130,89,2)
(114,162,2)
(288,285,2)
(44,288,2)
(150,85,2)
(292,217,2)
(56,118,2)
(236,151,2)
(158,110,2)
(45,105,2)
(36,216,2)
(59,3,2)
(117,94,2)
(6,228,2)
(196,126,2)
(191,103,2)
(271,114,2)
(193,10,2)
(139,94,2)
(36,212,2)
(134,118,2)
(103,201,2)
(126,75,2)
(249,118,2)
(284,181,2)
(51,94,2)
(156,110,2)
(130,116,2)
(1,1,2)
(43,191,2)
(116,191,2)
(135,292,2)
(36,131,2)
(250,65,2)
(114,116,2)
(57,10,2)
(74,17,2)
-----------------------------------
(0,a)
(1,*a && *a != \'=\')
(2,a)
(3,s->max_clients)
(4,directive)
(5,if (a == b)
(6,*a)
(7,directive)
(8,value)
(9,errno)
(10,errno != 0 || endptr == value)
(11,s->syslog_facility)
(12,for (a = value; *a; a++)
(13,isspace(*a)
(14,continue;)
(15,0)
(16,2)
(17,errno = 0)
(18,buf)
(19,fprintf(stderr, "malformed configuration, line %d: %s\\n", line, buf)
(20,endptr)
(21,stderr)
(22,MAX_LIFETIME)
(23,directive)
(24,for (b = a; *b && !isspace(*b)
(25,&endptr)
(26,a++)
(27,line)
(28,)
(29,line)
(30,a++)
(31,s)
(32,0)
(33,syslog_ident)
(34,"malformed configuration, line %d: %s\\n")
(35,value)
(36,return 0;)
(37,b)
(38,errno)
(39,)
(40,syslog_ident)
(41,endptr)
(42,s)
(43,*a)
(44,*b != \'=\')
(45,syslog_facility)
(46,*b)
(47,strcmp(directive, "max_lifetime")
(48,isspace(*a)
(49,4)
(50,b)
(51,s->port)
(52,s)
(53,s)
(54,buf)
(55,if (*a == \'#\')
(56,0)
(57,stderr)
(58,*a)
(59,return 1;)
(60,return 2;)
(61,b)
(62,"syslog_ident")
(63,a)
(64,buf)
(65,fgets(buf, 8191, io)
(66,)
(67,directive)
(68,s)
(69,directive)
(70,max_lifetime)
(71,a)
(72,a)
(73,fprintf(stderr, "malformed configuration, line %d: %s\\n", line, buf)
(74,return 4;)
(75,a = b+1)
(76,\'\\0\')
(77,a)
(78,a)
(79,"malformed configuration, line %d: %s\\n")
(80,endptr == value)
(81,stderr)
(82,10)
(83,b)
(84,*a)
(85,!*a)
(86,)
(87,a)
(88,if (errno != 0 || endptr == value)
(89,b = a)
(90,for (a = b+1; *a && *a != \'=\'; a++)
(91,free(s->port)
(92,0)
(93,return 3;)
(94,strcmp(directive, "port")
(95,\'=\')
(96,directive)
(97,0)
(98,0)
(99,b)
(100,b)
(101,fprintf(stderr, "malformed configuration, line %d: %s\\n", line, buf)
(102,0)
(103,!*b)
(104,0)
(105,strcmp(directive, "syslog_facility")
(106,*b)
(107,3)
(108,stderr)
(109,a == b)
(110,errno != 0)
(111,buf)
(112,"malformed configuration, line %d: %s\\n")
(113,value)
(114,*b)
(115,*a && isspace(*a)
(116,*b = \'\\0\')
(117,strdup(value)
(118,strcmp(directive, "max_clients")
(119,&endptr)
(120,b)
(121,for (b = a; *b && !isspace(*b)
(122,line)
(123,)
(124,if (errno != 0 || endptr == value)
(125,b)
(126,value = a)
(127,s)
(128,buf)
(129,a)
(130,*b)
(131,*a)
(132,a)
(133,port)
(134,errno)
(135,free(s->syslog_ident)
(136,a == b)
(137,port)
(138,\'=\')
(139,8191)
(140,b)
(141,stderr)
(142,endptr)
(143,line)
(144,value)
(145,endptr)
(146,a)
(147,value)
(148,value)
(149,*a)
(150,*a)
(151,!*a)
(152,strcmp(directive, "syslog_ident")
(153,*a = tolower(*a)
(154,a++)
(155,*a)
(156,endptr == value)
(157,s)
(158,errno != 0 || endptr == value)
(159,!isspace(*b)
(160,errno = 0)
(161,*a != \'=\')
(162,b = a)
(163,a)
(164,strcmp(directive, "max_clients")
(165,a)
(166,strcmp(directive, "max_lifetime")
(167,line)
(168,*b)
(169,b)
(170,b)
(171,s->max_clients = strtol(value, &endptr, 10)
(172,"port")
(173,stderr)
(174,b)
(175,max_clients)
(176,"syslog_facility")
(177,a)
(178,strcmp(directive, "port")
(179,s->syslog_ident)
(180,*b)
(181,s->max_lifetime)
(182,max_lifetime)
(183,a)
(184,errno)
(185,line = 0)
(186,value)
(187,*a)
(188,*a && isspace(*a)
(189,a)
(190,fprintf(stderr, "malformed configuration, line %d: %s\\n", line, buf)
(191,a == b || !*b)
(192,"unrecognized configuration directive \'%s\', on line %i\\n")
(193,buf)
(194,a)
(195,a)
(196,strtol(value, &endptr, 10)
(197,if (!*a)
(198,if (a == b || !*b)
(199,FILE *io)
(200,if (strcmp(directive, "port")
(201,*b)
(202,if (!*a)
(203,a = value)
(204,"max_clients")
(205,RET)
(206,value)
(207,strtol(value, &endptr, 10)
(208,0)
(209,value)
(210,errno != 0)
(211,a)
(212,s->max_lifetime)
(213,"max_lifetime")
(214,tolower(*a)
(215,isspace(*b)
(216,s->port)
(217,struct server *s)
(218,)
(219,)
(220,s->syslog_facility)
(221,return 5;)
(222,)
(223,0)
(224,)
(225,b)
(226,"malformed configuration, line %d: %s\\n")
(227,strdup(value)
(228,*a)
(229,)
(230,value)
(231,a++)
(232,s->max_lifetime = strtol(value, &endptr, 10)
(233,endptr)
(234,a)
(235,1)
(236,b)
(237,s)
(238,strcmp(directive, "syslog_ident")
(239,fprintf(stderr, "malformed configuration, line %d: %s\\n", line, buf)
(240,for (a++; *a && isspace(*a)
(241,a++)
(242,b++)
(243,a)
(244,)
(245,0)
(246,a)
(247,*a)
(248,buf)
(249,10)
(250,*a == \'#\')
(251,directive = a)
(252,for (a = buf; *a && isspace(*a)
(253,a)
(254,directive)
(255,1)
(256,line)
(257,fprintf(stderr, "unrecognized configuration directive \'%s\', on line %i\\n",\n\\n\\t\\t\\t\\tdirective, line)
(258,b)
(259,*b)
(260,line)
(261,s->port = strdup(value)
(262,continue;)
(263,\'\\0\')
(264,*b = \'\\0\')
(265,syslog_facility)
(266,a = buf)
(267,while (fgets(buf, 8191, io)
(268,5)
(269,line)
(270,a)
(271,b)
(272,s)
(273,b+1)
(274,s->syslog_facility = strdup(value)
(275,a)
(276,)
(277,s->syslog_ident = strdup(value)
(278,io)
(279,*a)
(280,!isspace(*b)
(281,strdup(value)
(282,line)
(283,a)
(284,MAX_LIFETIME = s->max_lifetime)
(285,isspace(*b)
(286,strcmp(directive, "syslog_facility")
(287,*b && !isspace(*b)
(288,!isspace(*b)
(289,b++)
(290,directive)
(291,"malformed configuration, line %d: %s\\n")
(292,s->syslog_ident)
(293,\'#\')
(294,buf)
(295,a)
(296,)
(297,line++)
(298,free(s->syslog_facility)
(299,*b && !isspace(*b)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^