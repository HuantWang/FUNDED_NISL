-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,43,45,49,50
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(11,19,0)
(26,25,0)
(19,21,0)
(6,7,0)
(5,9,0)
(23,9,0)
(14,25,0)
(16,8,0)
(10,20,0)
(0,9,0)
(16,9,0)
(13,16,0)
(2,8,0)
(4,24,0)
(7,4,0)
(12,10,0)
(15,3,0)
(7,16,0)
(7,21,0)
(8,16,0)
(22,3,0)
(1,4,0)
(18,4,0)
(7,6,1)
(14,26,1)
(4,18,1)
(1,25,1)
(12,25,1)
(17,3,1)
(26,16,1)
(18,1,1)
(3,22,1)
(15,4,1)
(6,3,1)
(17,19,1)
(10,12,1)
(25,14,1)
(7,4,1)
(15,10,1)
(22,15,1)
(8,2,1)
(16,8,1)
(7,16,1)
(19,11,1)
(11,7,1)
(2,13,1)
(6,3,2)
(7,3,2)
(7,16,2)
(12,25,2)
(19,3,2)
(16,8,2)
(11,3,2)
(1,25,2)
(18,25,2)
(7,4,2)
(4,25,2)
(10,25,2)
-----------------------------------
(0,count)
(1,count)
(2,1)
(3,STATIC_CONST_FIVE==5)
(4,count = 20)
(5,if(STATIC_CONST_FIVE!=5)
(6,count)
(7,SLEEP(count)
(8,-1)
(9,)
(10,printLine("Benign, fixed string")
(11,"Sleep time possibly too long")
(12,"Benign, fixed string")
(13,count)
(14,5)
(15,STATIC_CONST_FIVE)
(16,count = -1)
(17,RET)
(18,20)
(19,printLine("Sleep time possibly too long")
(20,)
(21,)
(22,5)
(23,if(STATIC_CONST_FIVE==5)
(24,)
(25,STATIC_CONST_FIVE!=5)
(26,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^