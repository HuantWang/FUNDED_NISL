-----label-----
0
-----code-----
static int driver_forward_unicast(Peer *sender, const char *destination, Message *message) {
        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
        Peer *receiver;
        Name *name;
        int r;

        receiver = bus_find_peer_by_name(sender->bus, &name, destination);
        if (!receiver) {
                if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)
                        return DRIVER_E_DESTINATION_NOT_FOUND;
                if (!name || !name->activation)
                        return DRIVER_E_NAME_NOT_ACTIVATABLE;

                r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message);
                if (r) {
                        if (r == ACTIVATION_E_QUOTA)
                                return DRIVER_E_QUOTA;

                        return error_fold(r);
                }

                return 0;
        }

        r = peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message);
        if (r) {
                if (r == PEER_E_EXPECTED_REPLY_EXISTS)
                        return DRIVER_E_EXPECTED_REPLY_EXISTS;
                else if (r == PEER_E_QUOTA)
                        return DRIVER_E_QUOTA;
                else if (r == PEER_E_SEND_DENIED)
                        return DRIVER_E_SEND_DENIED;
                else if (r == PEER_E_RECEIVE_DENIED)
                        return DRIVER_E_RECEIVE_DENIED;
                else if (r == PEER_E_UNEXPECTED_FDS)
                        return DRIVER_E_UNEXPECTED_FDS;
                else
                        return error_fold(r);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
23,24
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
61,64
61,65
62,63
64,65
64,66
65,66
68,69
69,70
71,72
73,74
73,75
74,75
75,76
77,78
77,79
77,80
77,81
77,82
78,79
78,80
79,80
79,81
80,81
80,82
81,82
81,83
82,83
82,84
83,84
88,89
90,91
91,92
93,94
93,95
94,95
94,96
95,96
96,97
98,99
99,100
99,101
100,101
103,104
104,105
106,107
107,108
107,109
108,109
110,111
110,112
110,113
110,114
110,115
110,116
111,112
113,114
113,115
114,115
117,118
117,119
118,119
121,122
122,123
122,124
123,124
126,127
126,128
127,128
130,131
132,133
132,134
133,134
135,136
135,137
136,137
136,138
137,138
137,139
138,139
140,141
142,143
143,144
145,146
146,147
146,148
147,148
149,150
151,152
153,154
154,155
154,156
155,156
157,158
157,159
157,160
157,161
157,162
157,163
157,164
157,165
158,159
160,161
160,162
161,162
164,165
165,166
167,168
168,169
168,170
169,170
172,173
172,174
173,174
176,177
176,178
177,178
180,181
182,183
184,185
184,186
185,186
187,188
188,189
188,190
188,191
189,190
189,191
190,191
192,193
194,195
195,196
197,198
197,199
197,200
198,199
198,200
199,200
201,202
203,204
204,205
206,207
206,208
206,209
207,208
207,209
208,209
210,211
212,213
213,214
215,216
215,217
215,218
216,217
216,218
217,218
219,220
221,222
222,223
224,225
224,226
224,227
225,226
225,227
226,227
228,229
230,231
231,232
233,234
234,235
234,236
235,236
237,238
239,240
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,21,26,28,32,36,37,41,43,44,48,50,51,54,56,60,63,66,67,70,72,76,84,85,86,87,89,92,97,101,102,105,109,112,115,116,119,120,124,125,128,129,131,134,139,141,144,148,150,152,156,159,162,163,166,170,171,174,175,178,179,181,183,186,191,193,196,200,202,205,209,211,214,218,220,223,227,229,232,236,238,240
-----computeFrom-----
58,59
58,60
79,80
79,81
94,95
94,96
107,108
107,109
137,138
137,139
154,155
154,156
189,190
189,191
198,199
198,200
207,208
207,209
216,217
216,218
225,226
225,227
-----guardedBy-----
-----guardedByNegation-----
191,238
200,238
209,238
218,238
227,238
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_forward_unicast(Peer *sender, const char *destination, Message *message) {        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);        Peer *receiver;        Name *name;        int r;        receiver = bus_find_peer_by_name(sender->bus, &name, destination);        if (!receiver) {                if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)                        return DRIVER_E_DESTINATION_NOT_FOUND;                if (!name || !name->activation)                        return DRIVER_E_NAME_NOT_ACTIVATABLE;                r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message);                if (r) {                        if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;                        return error_fold(r);                }                return 0;        }        r = peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message);        if (r) {                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);        }        return 0;}
static int
driver_forward_unicast(Peer *sender, const char *destination, Message *message)
driver_forward_unicast
Peer *sender
Peer
Peer
*sender
*
sender
const char *destination
const char
*destination
*
destination
Message *message
Message
Message
*message
*
message
{        NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);        Peer *receiver;        Name *name;        int r;        receiver = bus_find_peer_by_name(sender->bus, &name, destination);        if (!receiver) {                if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)                        return DRIVER_E_DESTINATION_NOT_FOUND;                if (!name || !name->activation)                        return DRIVER_E_NAME_NOT_ACTIVATABLE;                r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message);                if (r) {                        if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;                        return error_fold(r);                }                return 0;        }        r = peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message);        if (r) {                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);        }        return 0;}
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
sender_names
= NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
&sender->owned_names
sender->owned_names
sender
sender
owned_names
Peer *receiver;
Peer *receiver;
Peer
Peer
*receiver
*
receiver
Name *name;
Name *name;
Name
Name
*name
*
name
int r;
int r;
int
r
r
receiver = bus_find_peer_by_name(sender->bus, &name, destination);
receiver = bus_find_peer_by_name(sender->bus, &name, destination)
receiver
receiver
bus_find_peer_by_name(sender->bus, &name, destination)
bus_find_peer_by_name
bus_find_peer_by_name
sender->bus
sender
sender
bus
&name
name
name
destination
destination
if (!receiver) {                if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)                        return DRIVER_E_DESTINATION_NOT_FOUND;                if (!name || !name->activation)                        return DRIVER_E_NAME_NOT_ACTIVATABLE;                r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message);                if (r) {                        if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;                        return error_fold(r);                }                return 0;        }
!receiver
receiver
receiver
{                if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)                        return DRIVER_E_DESTINATION_NOT_FOUND;                if (!name || !name->activation)                        return DRIVER_E_NAME_NOT_ACTIVATABLE;                r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message);                if (r) {                        if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;                        return error_fold(r);                }                return 0;        }
if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)                        return DRIVER_E_DESTINATION_NOT_FOUND;
message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START
message->metadata.header.flags
message->metadata.header
message->metadata
message
message
metadata
header
flags
DBUS_HEADER_FLAG_NO_AUTO_START
DBUS_HEADER_FLAG_NO_AUTO_START
return DRIVER_E_DESTINATION_NOT_FOUND;
DRIVER_E_DESTINATION_NOT_FOUND
DRIVER_E_DESTINATION_NOT_FOUND
if (!name || !name->activation)                        return DRIVER_E_NAME_NOT_ACTIVATABLE;
!name || !name->activation
!name
name
name
!name->activation
name->activation
name
name
activation
return DRIVER_E_NAME_NOT_ACTIVATABLE;
DRIVER_E_NAME_NOT_ACTIVATABLE
DRIVER_E_NAME_NOT_ACTIVATABLE
r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message);
r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message)
r
r
activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message)
activation_queue_message
activation_queue_message
name->activation
name
name
activation
sender->user
sender
sender
user
&sender->owned_names
sender->owned_names
sender
sender
owned_names
sender->policy
sender
sender
policy
message
message
if (r) {                        if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;                        return error_fold(r);                }
r
r
{                        if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;                        return error_fold(r);                }
if (r == ACTIVATION_E_QUOTA)                                return DRIVER_E_QUOTA;
r == ACTIVATION_E_QUOTA
r
r
ACTIVATION_E_QUOTA
ACTIVATION_E_QUOTA
return DRIVER_E_QUOTA;
DRIVER_E_QUOTA
DRIVER_E_QUOTA
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
r = peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message);
r = peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message)
r
r
peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message)
peer_queue_unicast
peer_queue_unicast
sender->policy
sender
sender
policy
&sender_names
sender_names
sender_names
&sender->owned_replies
sender->owned_replies
sender
sender
owned_replies
sender->user
sender
sender
user
sender->id
sender
sender
id
receiver
receiver
message
message
if (r) {                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);        }
r
r
{                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);        }
if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);
r == PEER_E_EXPECTED_REPLY_EXISTS
r
r
PEER_E_EXPECTED_REPLY_EXISTS
PEER_E_EXPECTED_REPLY_EXISTS
return DRIVER_E_EXPECTED_REPLY_EXISTS;
DRIVER_E_EXPECTED_REPLY_EXISTS
DRIVER_E_EXPECTED_REPLY_EXISTS
if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);
r == PEER_E_QUOTA
r
r
PEER_E_QUOTA
PEER_E_QUOTA
return DRIVER_E_QUOTA;
DRIVER_E_QUOTA
DRIVER_E_QUOTA
if (r == PEER_E_SEND_DENIED)                        return DRIVER_E_SEND_DENIED;                else if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);
r == PEER_E_SEND_DENIED
r
r
PEER_E_SEND_DENIED
PEER_E_SEND_DENIED
return DRIVER_E_SEND_DENIED;
DRIVER_E_SEND_DENIED
DRIVER_E_SEND_DENIED
if (r == PEER_E_RECEIVE_DENIED)                        return DRIVER_E_RECEIVE_DENIED;                else if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);
r == PEER_E_RECEIVE_DENIED
r
r
PEER_E_RECEIVE_DENIED
PEER_E_RECEIVE_DENIED
return DRIVER_E_RECEIVE_DENIED;
DRIVER_E_RECEIVE_DENIED
DRIVER_E_RECEIVE_DENIED
if (r == PEER_E_UNEXPECTED_FDS)                        return DRIVER_E_UNEXPECTED_FDS;                else                        return error_fold(r);
r == PEER_E_UNEXPECTED_FDS
r
r
PEER_E_UNEXPECTED_FDS
PEER_E_UNEXPECTED_FDS
return DRIVER_E_UNEXPECTED_FDS;
DRIVER_E_UNEXPECTED_FDS
DRIVER_E_UNEXPECTED_FDS
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(135,113,0)
(124,113,0)
(46,1,0)
(47,10,0)
(120,76,0)
(26,17,0)
(15,22,0)
(77,15,0)
(22,118,0)
(114,121,0)
(87,102,0)
(126,76,0)
(81,27,0)
(99,15,0)
(5,114,0)
(78,35,0)
(23,62,0)
(90,24,0)
(119,127,0)
(65,62,0)
(112,110,0)
(52,118,0)
(40,28,0)
(47,4,0)
(18,77,0)
(32,115,0)
(15,77,0)
(42,115,0)
(57,28,0)
(15,102,0)
(33,25,0)
(51,127,0)
(3,46,0)
(86,118,0)
(103,42,0)
(59,32,0)
(120,112,0)
(1,21,0)
(47,111,0)
(69,98,0)
(102,15,0)
(95,134,0)
(44,51,0)
(102,118,0)
(70,127,0)
(94,12,0)
(122,77,0)
(62,54,0)
(54,15,0)
(54,62,0)
(47,39,0)
(13,127,0)
(64,27,0)
(88,17,0)
(104,94,0)
(7,114,0)
(96,51,0)
(47,72,0)
(1,46,0)
(47,98,0)
(127,51,0)
(94,32,0)
(87,39,0)
(96,72,0)
(91,3,0)
(115,42,0)
(98,27,0)
(21,118,0)
(63,16,0)
(61,0,0)
(113,25,0)
(83,118,0)
(67,4,0)
(50,102,0)
(127,119,0)
(43,15,0)
(100,50,0)
(115,32,0)
(56,82,0)
(15,35,0)
(130,21,0)
(19,115,0)
(47,49,0)
(110,112,0)
(127,12,0)
(68,130,0)
(2,38,0)
(20,44,0)
(127,113,0)
(47,89,0)
(114,22,0)
(15,130,0)
(62,25,0)
(45,118,0)
(128,111,0)
(74,49,0)
(127,28,0)
(47,0,0)
(33,15,0)
(16,22,0)
(36,110,0)
(105,25,0)
(132,51,0)
(116,33,0)
(70,105,0)
(53,97,0)
(112,120,0)
(11,48,0)
(93,27,0)
(92,44,0)
(71,7,0)
(7,25,0)
(37,118,0)
(109,87,0)
(84,119,0)
(28,127,0)
(22,114,0)
(129,119,0)
(106,102,0)
(107,7,0)
(75,114,0)
(31,106,0)
(35,25,0)
(125,76,0)
(105,70,0)
(76,120,0)
(47,134,0)
(46,3,0)
(127,70,0)
(79,89,0)
(133,102,0)
(9,96,0)
(24,118,0)
(3,25,0)
(108,105,0)
(47,24,0)
(15,12,0)
(77,25,0)
(8,3,0)
(30,50,0)
(113,127,0)
(130,15,0)
(114,7,0)
(85,33,0)
(15,54,0)
(29,22,0)
(47,82,0)
(51,27,0)
(34,97,0)
(60,94,0)
(35,15,0)
(66,106,0)
(6,118,0)
(17,102,0)
(101,21,0)
(28,25,0)
(80,35,0)
(117,105,0)
(114,75,0)
(32,94,0)
(55,102,0)
(131,75,0)
(123,133,0)
(21,1,0)
(97,102,0)
(15,33,0)
(72,48,0)
(14,10,0)
(73,133,0)
(49,74,1)
(1,46,1)
(108,113,1)
(127,119,1)
(47,72,1)
(113,25,1)
(31,50,1)
(15,77,1)
(90,58,1)
(59,94,1)
(95,106,1)
(109,133,1)
(114,121,1)
(97,102,1)
(134,95,1)
(106,102,1)
(130,68,1)
(44,20,1)
(97,34,1)
(71,29,1)
(102,15,1)
(15,54,1)
(41,51,1)
(124,119,1)
(47,0,1)
(18,55,1)
(16,22,1)
(115,19,1)
(15,130,1)
(120,76,1)
(94,12,1)
(112,120,1)
(15,12,1)
(127,113,1)
(35,78,1)
(42,115,1)
(26,88,1)
(72,96,1)
(47,89,1)
(13,28,1)
(96,9,1)
(105,25,1)
(62,25,1)
(126,125,1)
(21,1,1)
(30,17,1)
(28,25,1)
(132,112,1)
(14,50,1)
(60,104,1)
(115,32,1)
(24,90,1)
(119,84,1)
(87,102,1)
(96,51,1)
(46,3,1)
(47,10,1)
(91,8,1)
(57,70,1)
(36,42,1)
(47,134,1)
(43,33,1)
(125,110,1)
(69,41,1)
(40,57,1)
(33,25,1)
(47,39,1)
(105,117,1)
(127,28,1)
(0,61,1)
(17,102,1)
(65,130,1)
(47,82,1)
(5,75,1)
(68,77,1)
(88,97,1)
(80,54,1)
(58,102,1)
(130,21,1)
(28,40,1)
(50,102,1)
(127,12,1)
(78,80,1)
(133,102,1)
(51,127,1)
(82,56,1)
(116,85,1)
(3,91,1)
(122,18,1)
(77,25,1)
(135,124,1)
(85,35,1)
(19,32,1)
(114,75,1)
(29,21,1)
(47,49,1)
(3,25,1)
(133,73,1)
(32,94,1)
(9,44,1)
(54,62,1)
(73,123,1)
(104,16,1)
(84,129,1)
(92,41,1)
(110,36,1)
(4,67,1)
(74,112,1)
(87,109,1)
(89,79,1)
(117,108,1)
(56,42,1)
(100,30,1)
(62,23,1)
(47,4,1)
(22,114,1)
(94,60,1)
(113,135,1)
(10,14,1)
(107,71,1)
(23,65,1)
(47,111,1)
(20,92,1)
(66,31,1)
(35,25,1)
(63,22,1)
(127,13,1)
(112,110,1)
(15,35,1)
(33,116,1)
(114,7,1)
(76,126,1)
(47,24,1)
(75,131,1)
(53,58,1)
(44,51,1)
(17,26,1)
(50,100,1)
(129,132,1)
(16,63,1)
(127,70,1)
(103,115,1)
(131,7,1)
(114,5,1)
(15,22,1)
(123,106,1)
(34,53,1)
(7,107,1)
(32,59,1)
(70,105,1)
(99,43,1)
(98,69,1)
(67,17,1)
(128,44,1)
(15,99,1)
(111,128,1)
(77,122,1)
(7,25,1)
(47,98,1)
(15,33,1)
(55,16,1)
(42,103,1)
(106,66,1)
(61,97,1)
(8,101,1)
(39,87,1)
(79,133,1)
(84,112,2)
(62,16,2)
(108,112,2)
(85,16,2)
(127,119,2)
(117,112,2)
(106,102,2)
(97,102,2)
(47,4,2)
(32,16,2)
(42,16,2)
(127,12,2)
(123,106,2)
(77,25,2)
(112,110,2)
(56,42,2)
(7,25,2)
(50,17,2)
(92,41,2)
(109,133,2)
(114,7,2)
(49,112,2)
(122,16,2)
(0,97,2)
(106,50,2)
(72,44,2)
(119,112,2)
(15,22,2)
(43,16,2)
(99,16,2)
(15,35,2)
(33,16,2)
(47,89,2)
(80,16,2)
(35,16,2)
(113,25,2)
(13,112,2)
(55,16,2)
(70,105,2)
(26,97,2)
(129,112,2)
(10,50,2)
(47,49,2)
(15,77,2)
(79,133,2)
(89,133,2)
(16,22,2)
(67,17,2)
(113,112,2)
(128,44,2)
(69,41,2)
(110,42,2)
(135,112,2)
(44,51,2)
(51,112,2)
(76,110,2)
(28,112,2)
(15,54,2)
(102,16,2)
(1,46,2)
(20,41,2)
(15,16,2)
(28,25,2)
(115,32,2)
(19,16,2)
(100,17,2)
(98,41,2)
(127,113,2)
(95,106,2)
(90,58,2)
(112,42,2)
(47,134,2)
(57,112,2)
(102,15,2)
(47,10,2)
(127,112,2)
(105,112,2)
(82,42,2)
(134,106,2)
(42,115,2)
(77,16,2)
(24,58,2)
(40,112,2)
(14,50,2)
(116,16,2)
(41,112,2)
(133,106,2)
(18,16,2)
(47,72,2)
(47,0,2)
(96,44,2)
(114,75,2)
(114,121,2)
(66,50,2)
(74,112,2)
(53,58,2)
(51,127,2)
(3,25,2)
(133,102,2)
(130,16,2)
(17,97,2)
(31,50,2)
(120,110,2)
(17,102,2)
(34,58,2)
(96,51,2)
(94,12,2)
(61,97,2)
(127,28,2)
(36,42,2)
(58,16,2)
(47,24,2)
(47,39,2)
(47,98,2)
(70,112,2)
(15,130,2)
(15,33,2)
(78,16,2)
(65,16,2)
(68,16,2)
(127,70,2)
(126,110,2)
(22,114,2)
(97,58,2)
(30,17,2)
(111,44,2)
(105,25,2)
(47,82,2)
(115,16,2)
(4,17,2)
(104,16,2)
(130,21,2)
(50,102,2)
(39,133,2)
(124,112,2)
(60,16,2)
(23,16,2)
(33,25,2)
(54,62,2)
(15,12,2)
(112,120,2)
(59,16,2)
(62,25,2)
(46,3,2)
(73,106,2)
(35,25,2)
(47,111,2)
(54,16,2)
(103,16,2)
(125,110,2)
(87,133,2)
(87,102,2)
(132,112,2)
(94,16,2)
(9,44,2)
(120,76,2)
(21,1,2)
(32,94,2)
(44,41,2)
(88,97,2)
-----------------------------------
(0,return DRIVER_E_EXPECTED_REPLY_EXISTS;)
(1,NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(2,if (r == PEER_E_EXPECTED_REPLY_EXISTS)
(3,sender->owned_names)
(4,return DRIVER_E_QUOTA;)
(5,destination)
(6,r)
(7,sender->bus)
(8,sender)
(9,r)
(10,return DRIVER_E_SEND_DENIED;)
(11,if (r == ACTIVATION_E_QUOTA)
(12,Message *message)
(13,message)
(14,DRIVER_E_SEND_DENIED)
(15,peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message)
(16,!receiver)
(17,r == PEER_E_QUOTA)
(18,sender)
(19,flags)
(20,ACTIVATION_E_QUOTA)
(21,sender_names = NAME_SET_INIT_FROM_OWNER(&sender->owned_names)
(22,receiver = bus_find_peer_by_name(sender->bus, &name, destination)
(23,owned_replies)
(24,return 0;)
(25,Peer *sender)
(26,PEER_E_QUOTA)
(27,)
(28,sender->policy)
(29,receiver)
(30,r)
(31,r)
(32,message->metadata.header)
(33,sender->id)
(34,PEER_E_EXPECTED_REPLY_EXISTS)
(35,sender->user)
(36,name)
(37,sender_names)
(38,)
(39,return error_fold(r)
(40,policy)
(41,r)
(42,message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)
(43,receiver)
(44,r == ACTIVATION_E_QUOTA)
(45,if (!receiver)
(46,&sender->owned_names)
(47,RET)
(48,)
(49,return DRIVER_E_NAME_NOT_ACTIVATABLE;)
(50,r == PEER_E_SEND_DENIED)
(51,r = activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message)
(52,receiver)
(53,r)
(54,&sender->owned_replies)
(55,r)
(56,DRIVER_E_DESTINATION_NOT_FOUND)
(57,sender)
(58,r)
(59,header)
(60,metadata)
(61,DRIVER_E_EXPECTED_REPLY_EXISTS)
(62,sender->owned_replies)
(63,receiver)
(64,if (r)
(65,sender)
(66,PEER_E_RECEIVE_DENIED)
(67,DRIVER_E_QUOTA)
(68,sender_names)
(69,0)
(70,&sender->owned_names)
(71,sender)
(72,return error_fold(r)
(73,PEER_E_UNEXPECTED_FDS)
(74,DRIVER_E_NAME_NOT_ACTIVATABLE)
(75,&name)
(76,name->activation)
(77,sender->policy)
(78,user)
(79,DRIVER_E_UNEXPECTED_FDS)
(80,sender)
(81,if (message->metadata.header.flags & DBUS_HEADER_FLAG_NO_AUTO_START)
(82,return DRIVER_E_DESTINATION_NOT_FOUND;)
(83,if (r)
(84,activation)
(85,sender)
(86,name)
(87,error_fold(r)
(88,r)
(89,return DRIVER_E_UNEXPECTED_FDS;)
(90,0)
(91,owned_names)
(92,r)
(93,if (!name || !name->activation)
(94,message->metadata)
(95,DRIVER_E_RECEIVE_DENIED)
(96,error_fold(r)
(97,r == PEER_E_EXPECTED_REPLY_EXISTS)
(98,return 0;)
(99,message)
(100,PEER_E_SEND_DENIED)
(101,sender_names)
(102,r = peer_queue_unicast(sender->policy, &sender_names, &sender->owned_replies, sender->user, sender->id, receiver, message)
(103,DBUS_HEADER_FLAG_NO_AUTO_START)
(104,message)
(105,sender->owned_names)
(106,r == PEER_E_RECEIVE_DENIED)
(107,bus)
(108,sender)
(109,r)
(110,!name)
(111,return DRIVER_E_QUOTA;)
(112,!name || !name->activation)
(113,sender->user)
(114,bus_find_peer_by_name(sender->bus, &name, destination)
(115,message->metadata.header.flags)
(116,id)
(117,owned_names)
(118,)
(119,name->activation)
(120,!name->activation)
(121,const char *destination)
(122,policy)
(123,r)
(124,sender)
(125,name)
(126,activation)
(127,activation_queue_message(name->activation, sender->user, &sender->owned_names, sender->policy, message)
(128,DRIVER_E_QUOTA)
(129,name)
(130,&sender_names)
(131,name)
(132,r)
(133,r == PEER_E_UNEXPECTED_FDS)
(134,return DRIVER_E_RECEIVE_DENIED;)
(135,user)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^