-----label-----
0
-----code-----
static void goodB2G2()
{
    int64_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(1)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
74,75
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,61,62,63,67,70,71,73,78,80
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(1)    {        /* FIX: Deallocate memory */        free(data);    }
1
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(23,10,0)
(26,21,0)
(24,8,0)
(28,5,0)
(20,16,0)
(27,15,0)
(14,4,0)
(27,9,0)
(1,10,0)
(22,16,0)
(8,2,0)
(2,18,0)
(33,4,0)
(13,31,0)
(30,18,0)
(1,11,0)
(25,5,0)
(31,13,0)
(10,18,0)
(34,33,0)
(6,8,0)
(8,10,0)
(16,21,0)
(27,10,0)
(15,27,0)
(2,8,0)
(7,21,0)
(4,33,0)
(32,21,0)
(31,36,0)
(0,13,0)
(1,16,0)
(29,18,0)
(4,9,0)
(9,16,0)
(9,4,0)
(10,27,0)
(5,10,0)
(17,1,0)
(9,27,0)
(19,9,0)
(1,17,1)
(0,5,1)
(5,25,1)
(3,35,1)
(1,16,1)
(1,10,1)
(6,24,1)
(19,23,1)
(16,20,1)
(35,2,1)
(12,16,1)
(13,0,1)
(27,9,1)
(3,1,1)
(34,14,1)
(8,6,1)
(10,27,1)
(25,28,1)
(28,10,1)
(35,12,1)
(31,13,1)
(9,4,1)
(30,31,1)
(20,22,1)
(9,16,1)
(8,10,1)
(33,34,1)
(5,10,1)
(17,35,1)
(14,19,1)
(4,33,1)
(24,30,1)
(30,5,1)
(2,8,1)
(27,15,1)
(23,12,1)
(14,12,2)
(33,12,2)
(25,12,2)
(13,5,2)
(8,10,2)
(28,12,2)
(1,16,2)
(19,12,2)
(5,10,2)
(1,10,2)
(27,12,2)
(0,5,2)
(5,12,2)
(17,35,2)
(10,12,2)
(9,12,2)
(31,5,2)
(31,13,2)
(1,35,2)
(9,4,2)
(10,27,2)
(9,16,2)
(4,12,2)
(2,8,2)
(27,15,2)
(27,9,2)
(4,33,2)
(6,12,2)
(34,12,2)
(30,12,2)
(8,12,2)
(23,12,2)
(24,12,2)
(2,12,2)
-----------------------------------
(0,1)
(1,free(data)
(2,printLongLongLine(data[0])
(3,RET)
(4,100*sizeof(int64_t)
(5,data == NULL)
(6,0)
(7,if(1)
(8,data[0])
(9,realloc(data, 100*sizeof(int64_t)
(10,data = (int64_t *)
(11,)
(12,1)
(13,-1)
(14,100)
(15,int64_t *)
(16,data = NULL)
(17,data)
(18,)
(19,data)
(20,NULL)
(21,)
(22,data)
(23,data)
(24,data)
(25,NULL)
(26,if(1)
(27,(int64_t *)
(28,data)
(29,if (data == NULL)
(30,L)
(31,exit(-1)
(32,data)
(33,sizeof(int64_t)
(34,int64_t)
(35,1)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^