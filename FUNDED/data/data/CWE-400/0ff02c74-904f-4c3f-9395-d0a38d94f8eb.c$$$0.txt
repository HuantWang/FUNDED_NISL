-----label-----
1
-----code-----
static void
test_protover_all_supported(void *arg)
{
  (void)arg;
  char *msg = NULL;

  tt_assert(protover_all_supported(NULL, &msg));
  tt_ptr_op(msg, OP_EQ, NULL);

  tt_assert(protover_all_supported("", &msg));
  tt_ptr_op(msg, OP_EQ, NULL);

  // Some things that we do support
  tt_assert(protover_all_supported("Link=3-4", &msg));
  tt_ptr_op(msg, OP_EQ, NULL);
  tt_assert(protover_all_supported("Link=3-4 Desc=2", &msg));
  tt_ptr_op(msg, OP_EQ, NULL);

  // Some things we don't support
  tt_assert(! protover_all_supported("Wombat=9", &msg));
  tt_str_op(msg, OP_EQ, "Wombat=9");
  tor_free(msg);
  tt_assert(! protover_all_supported("Link=999", &msg));
  tt_str_op(msg, OP_EQ, "Link=999");
  tor_free(msg);

  // Mix of things we support and things we don't
  tt_assert(! protover_all_supported("Link=3-4 Wombat=9", &msg));
  tt_str_op(msg, OP_EQ, "Wombat=9");
  tor_free(msg);

  /* Mix of things we support and don't support within a single protocol
   * which we do support */
  tt_assert(! protover_all_supported("Link=3-999", &msg));
  tt_str_op(msg, OP_EQ, "Link=6-999");
  tor_free(msg);
  tt_assert(! protover_all_supported("Link=1-3,345-666", &msg));
  tt_str_op(msg, OP_EQ, "Link=345-666");
  tor_free(msg);
  tt_assert(! protover_all_supported("Link=1-3,5-12", &msg));
  tt_str_op(msg, OP_EQ, "Link=6-12");
  tor_free(msg);

  /* Mix of protocols we do support and some we don't, where the protocols
   * we do support have some versions we don't support. */
  tt_assert(! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg));
  tt_str_op(msg, OP_EQ, "Link=6-12 Quokka=9000-9001");
  tor_free(msg);

  /* We shouldn't be able to DoS ourselves parsing a large range. */
  tt_assert(! protover_all_supported("Sleen=0-2147483648", &msg));
  tt_str_op(msg, OP_EQ, "Sleen=0-2147483648");
  tor_free(msg);

  /* This case is allowed. */
  tt_assert(! protover_all_supported("Sleen=0-4294967294", &msg));
  tt_str_op(msg, OP_EQ, "Sleen=0-4294967294");
  tor_free(msg);

  /* If we get a (barely) valid (but unsupported list, we say "yes, that's
   * supported." */
  tt_assert(protover_all_supported("Fribble=", &msg));
  tt_ptr_op(msg, OP_EQ, NULL);

  /* If we get a completely unparseable list, protover_all_supported should
   * hit a fatal assertion for BUG(entries == NULL). */
  tor_capture_bugs_(1);
  tt_assert(protover_all_supported("Fribble", &msg));
  tor_end_capture_bugs_();

  /* If we get a completely unparseable list, protover_all_supported should
   * hit a fatal assertion for BUG(entries == NULL). */
  tor_capture_bugs_(1);
  tt_assert(protover_all_supported("Sleen=0-4294967295", &msg));
  tor_end_capture_bugs_();

  /* Protocol name too long */
  tor_capture_bugs_(1);
  tt_assert(protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                                   "aaaaaaaaaaaa=1-65536", &msg));
  tor_end_capture_bugs_();

 done:
  tor_end_capture_bugs_();
  tor_free(msg);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
10,28
10,29
10,30
10,31
10,32
10,33
10,34
10,35
10,36
10,37
10,38
10,39
10,40
10,41
10,42
10,43
10,44
10,45
10,46
10,47
10,48
10,49
10,50
10,51
10,52
10,53
10,54
10,55
10,56
10,57
10,58
10,59
10,60
11,12
12,13
12,14
13,14
13,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
31,34
32,33
34,35
36,37
37,38
39,40
40,41
40,42
40,43
40,44
41,42
43,44
45,46
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
57,58
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
74,77
75,76
78,79
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
95,97
95,98
96,97
99,100
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
112,113
113,114
113,115
114,115
116,117
117,118
117,119
117,120
118,119
121,122
122,123
124,125
125,126
125,127
125,128
125,129
126,127
128,129
130,131
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
144,145
144,146
144,147
145,146
148,149
149,150
151,152
152,153
152,154
152,155
152,156
153,154
155,156
157,158
160,161
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
170,171
171,172
171,173
171,174
172,173
175,176
176,177
178,179
179,180
179,181
179,182
179,183
180,181
182,183
184,185
187,188
188,189
188,190
189,190
191,192
193,194
194,195
194,196
195,196
197,198
198,199
198,200
198,201
199,200
202,203
203,204
205,206
206,207
206,208
206,209
206,210
207,208
209,210
211,212
214,215
215,216
215,217
216,217
218,219
220,221
221,222
221,223
222,223
224,225
225,226
225,227
225,228
226,227
229,230
230,231
232,233
233,234
233,235
233,236
233,237
234,235
236,237
238,239
241,242
242,243
242,244
243,244
245,246
247,248
248,249
248,250
249,250
251,252
252,253
252,254
252,255
253,254
256,257
257,258
259,260
260,261
260,262
260,263
260,264
261,262
263,264
265,266
268,269
269,270
269,271
270,271
272,273
274,275
275,276
275,277
276,277
278,279
279,280
279,281
279,282
280,281
283,284
284,285
286,287
287,288
287,289
287,290
287,291
288,289
290,291
292,293
295,296
296,297
296,298
297,298
299,300
301,302
302,303
302,304
303,304
305,306
306,307
306,308
306,309
307,308
310,311
311,312
313,314
314,315
314,316
314,317
314,318
315,316
317,318
319,320
322,323
323,324
323,325
324,325
326,327
328,329
329,330
329,331
330,331
332,333
333,334
333,335
333,336
334,335
337,338
338,339
340,341
341,342
341,343
341,344
341,345
342,343
344,345
346,347
349,350
350,351
350,352
351,352
353,354
355,356
356,357
356,358
357,358
359,360
359,361
359,362
360,361
363,364
364,365
366,367
367,368
367,369
367,370
367,371
368,369
370,371
372,373
374,375
376,377
377,378
377,379
378,379
381,382
382,383
382,384
383,384
385,386
385,387
385,388
386,387
389,390
390,391
392,393
393,394
394,395
396,397
397,398
397,399
398,399
401,402
402,403
402,404
403,404
405,406
405,407
405,408
406,407
409,410
410,411
412,413
413,414
414,415
416,417
417,418
417,419
418,419
421,422
422,423
422,424
423,424
425,426
425,427
425,428
426,427
429,430
430,431
432,433
433,434
434,435
436,437
436,438
438,439
439,440
440,441
442,443
443,444
443,445
444,445
446,447
-----nextToken-----
2,4,6,8,9,14,15,17,20,22,23,26,30,33,35,38,42,44,46,48,52,55,56,59,63,65,67,69,73,76,77,80,84,86,88,90,94,97,98,101,105,107,109,111,115,119,120,123,127,129,131,132,136,138,142,146,147,150,154,156,158,159,163,165,169,173,174,177,181,183,185,186,190,192,196,200,201,204,208,210,212,213,217,219,223,227,228,231,235,237,239,240,244,246,250,254,255,258,262,264,266,267,271,273,277,281,282,285,289,291,293,294,298,300,304,308,309,312,316,318,320,321,325,327,331,335,336,339,343,345,347,348,352,354,358,361,362,365,369,371,373,375,379,380,384,387,388,391,395,399,400,404,407,408,411,415,419,420,424,427,428,431,435,437,441,445,447
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static voidtest_protover_all_supported(void *arg){  (void)arg;  char *msg = NULL;  tt_assert(protover_all_supported(NULL, &msg));  tt_ptr_op(msg, OP_EQ, NULL);  tt_assert(protover_all_supported("", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  // Some things that we do support  tt_assert(protover_all_supported("Link=3-4", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  tt_assert(protover_all_supported("Link=3-4 Desc=2", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  // Some things we don't support  tt_assert(! protover_all_supported("Wombat=9", &msg));  tt_str_op(msg, OP_EQ, "Wombat=9");  tor_free(msg);  tt_assert(! protover_all_supported("Link=999", &msg));  tt_str_op(msg, OP_EQ, "Link=999");  tor_free(msg);  // Mix of things we support and things we don't  tt_assert(! protover_all_supported("Link=3-4 Wombat=9", &msg));  tt_str_op(msg, OP_EQ, "Wombat=9");  tor_free(msg);  /* Mix of things we support and don't support within a single protocol   * which we do support */  tt_assert(! protover_all_supported("Link=3-999", &msg));  tt_str_op(msg, OP_EQ, "Link=6-999");  tor_free(msg);  tt_assert(! protover_all_supported("Link=1-3,345-666", &msg));  tt_str_op(msg, OP_EQ, "Link=345-666");  tor_free(msg);  tt_assert(! protover_all_supported("Link=1-3,5-12", &msg));  tt_str_op(msg, OP_EQ, "Link=6-12");  tor_free(msg);  /* Mix of protocols we do support and some we don't, where the protocols   * we do support have some versions we don't support. */  tt_assert(! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg));  tt_str_op(msg, OP_EQ, "Link=6-12 Quokka=9000-9001");  tor_free(msg);  /* We shouldn't be able to DoS ourselves parsing a large range. */  tt_assert(! protover_all_supported("Sleen=0-2147483648", &msg));  tt_str_op(msg, OP_EQ, "Sleen=0-2147483648");  tor_free(msg);  /* This case is allowed. */  tt_assert(! protover_all_supported("Sleen=0-4294967294", &msg));  tt_str_op(msg, OP_EQ, "Sleen=0-4294967294");  tor_free(msg);  /* If we get a (barely) valid (but unsupported list, we say "yes, that's   * supported." */  tt_assert(protover_all_supported("Fribble=", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  /* If we get a completely unparseable list, protover_all_supported should   * hit a fatal assertion for BUG(entries == NULL). */  tor_capture_bugs_(1);  tt_assert(protover_all_supported("Fribble", &msg));  tor_end_capture_bugs_();  /* If we get a completely unparseable list, protover_all_supported should   * hit a fatal assertion for BUG(entries == NULL). */  tor_capture_bugs_(1);  tt_assert(protover_all_supported("Sleen=0-4294967295", &msg));  tor_end_capture_bugs_();  /* Protocol name too long */  tor_capture_bugs_(1);  tt_assert(protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaa=1-65536", &msg));  tor_end_capture_bugs_(); done:  tor_end_capture_bugs_();  tor_free(msg);}
static void
test_protover_all_supported(void *arg)
test_protover_all_supported
void *arg
void
*arg
*
arg
{  (void)arg;  char *msg = NULL;  tt_assert(protover_all_supported(NULL, &msg));  tt_ptr_op(msg, OP_EQ, NULL);  tt_assert(protover_all_supported("", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  // Some things that we do support  tt_assert(protover_all_supported("Link=3-4", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  tt_assert(protover_all_supported("Link=3-4 Desc=2", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  // Some things we don't support  tt_assert(! protover_all_supported("Wombat=9", &msg));  tt_str_op(msg, OP_EQ, "Wombat=9");  tor_free(msg);  tt_assert(! protover_all_supported("Link=999", &msg));  tt_str_op(msg, OP_EQ, "Link=999");  tor_free(msg);  // Mix of things we support and things we don't  tt_assert(! protover_all_supported("Link=3-4 Wombat=9", &msg));  tt_str_op(msg, OP_EQ, "Wombat=9");  tor_free(msg);  /* Mix of things we support and don't support within a single protocol   * which we do support */  tt_assert(! protover_all_supported("Link=3-999", &msg));  tt_str_op(msg, OP_EQ, "Link=6-999");  tor_free(msg);  tt_assert(! protover_all_supported("Link=1-3,345-666", &msg));  tt_str_op(msg, OP_EQ, "Link=345-666");  tor_free(msg);  tt_assert(! protover_all_supported("Link=1-3,5-12", &msg));  tt_str_op(msg, OP_EQ, "Link=6-12");  tor_free(msg);  /* Mix of protocols we do support and some we don't, where the protocols   * we do support have some versions we don't support. */  tt_assert(! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg));  tt_str_op(msg, OP_EQ, "Link=6-12 Quokka=9000-9001");  tor_free(msg);  /* We shouldn't be able to DoS ourselves parsing a large range. */  tt_assert(! protover_all_supported("Sleen=0-2147483648", &msg));  tt_str_op(msg, OP_EQ, "Sleen=0-2147483648");  tor_free(msg);  /* This case is allowed. */  tt_assert(! protover_all_supported("Sleen=0-4294967294", &msg));  tt_str_op(msg, OP_EQ, "Sleen=0-4294967294");  tor_free(msg);  /* If we get a (barely) valid (but unsupported list, we say "yes, that's   * supported." */  tt_assert(protover_all_supported("Fribble=", &msg));  tt_ptr_op(msg, OP_EQ, NULL);  /* If we get a completely unparseable list, protover_all_supported should   * hit a fatal assertion for BUG(entries == NULL). */  tor_capture_bugs_(1);  tt_assert(protover_all_supported("Fribble", &msg));  tor_end_capture_bugs_();  /* If we get a completely unparseable list, protover_all_supported should   * hit a fatal assertion for BUG(entries == NULL). */  tor_capture_bugs_(1);  tt_assert(protover_all_supported("Sleen=0-4294967295", &msg));  tor_end_capture_bugs_();  /* Protocol name too long */  tor_capture_bugs_(1);  tt_assert(protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaa=1-65536", &msg));  tor_end_capture_bugs_(); done:  tor_end_capture_bugs_();  tor_free(msg);}
(void)arg;
(void)arg
void
void

arg
arg
char *msg = NULL;
char *msg = NULL;
char
*msg = NULL
*
msg
= NULL
NULL
NULL
tt_assert(protover_all_supported(NULL, &msg));
tt_assert(protover_all_supported(NULL, &msg))
tt_assert
tt_assert
protover_all_supported(NULL, &msg)
protover_all_supported
protover_all_supported
NULL
NULL
&msg
msg
msg
tt_ptr_op(msg, OP_EQ, NULL);
tt_ptr_op(msg, OP_EQ, NULL)
tt_ptr_op
tt_ptr_op
msg
msg
OP_EQ
OP_EQ
NULL
NULL
tt_assert(protover_all_supported("", &msg));
tt_assert(protover_all_supported("", &msg))
tt_assert
tt_assert
protover_all_supported("", &msg)
protover_all_supported
protover_all_supported
""
&msg
msg
msg
tt_ptr_op(msg, OP_EQ, NULL);
tt_ptr_op(msg, OP_EQ, NULL)
tt_ptr_op
tt_ptr_op
msg
msg
OP_EQ
OP_EQ
NULL
NULL
tt_assert(protover_all_supported("Link=3-4", &msg));
tt_assert(protover_all_supported("Link=3-4", &msg))
tt_assert
tt_assert
protover_all_supported("Link=3-4", &msg)
protover_all_supported
protover_all_supported
"Link=3-4"
&msg
msg
msg
tt_ptr_op(msg, OP_EQ, NULL);
tt_ptr_op(msg, OP_EQ, NULL)
tt_ptr_op
tt_ptr_op
msg
msg
OP_EQ
OP_EQ
NULL
NULL
tt_assert(protover_all_supported("Link=3-4 Desc=2", &msg));
tt_assert(protover_all_supported("Link=3-4 Desc=2", &msg))
tt_assert
tt_assert
protover_all_supported("Link=3-4 Desc=2", &msg)
protover_all_supported
protover_all_supported
"Link=3-4 Desc=2"
&msg
msg
msg
tt_ptr_op(msg, OP_EQ, NULL);
tt_ptr_op(msg, OP_EQ, NULL)
tt_ptr_op
tt_ptr_op
msg
msg
OP_EQ
OP_EQ
NULL
NULL
tt_assert(! protover_all_supported("Wombat=9", &msg));
tt_assert(! protover_all_supported("Wombat=9", &msg))
tt_assert
tt_assert
! protover_all_supported("Wombat=9", &msg)
protover_all_supported("Wombat=9", &msg)
protover_all_supported
protover_all_supported
"Wombat=9"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Wombat=9");
tt_str_op(msg, OP_EQ, "Wombat=9")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Wombat=9"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Link=999", &msg));
tt_assert(! protover_all_supported("Link=999", &msg))
tt_assert
tt_assert
! protover_all_supported("Link=999", &msg)
protover_all_supported("Link=999", &msg)
protover_all_supported
protover_all_supported
"Link=999"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Link=999");
tt_str_op(msg, OP_EQ, "Link=999")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Link=999"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Link=3-4 Wombat=9", &msg));
tt_assert(! protover_all_supported("Link=3-4 Wombat=9", &msg))
tt_assert
tt_assert
! protover_all_supported("Link=3-4 Wombat=9", &msg)
protover_all_supported("Link=3-4 Wombat=9", &msg)
protover_all_supported
protover_all_supported
"Link=3-4 Wombat=9"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Wombat=9");
tt_str_op(msg, OP_EQ, "Wombat=9")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Wombat=9"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Link=3-999", &msg));
tt_assert(! protover_all_supported("Link=3-999", &msg))
tt_assert
tt_assert
! protover_all_supported("Link=3-999", &msg)
protover_all_supported("Link=3-999", &msg)
protover_all_supported
protover_all_supported
"Link=3-999"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Link=6-999");
tt_str_op(msg, OP_EQ, "Link=6-999")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Link=6-999"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Link=1-3,345-666", &msg));
tt_assert(! protover_all_supported("Link=1-3,345-666", &msg))
tt_assert
tt_assert
! protover_all_supported("Link=1-3,345-666", &msg)
protover_all_supported("Link=1-3,345-666", &msg)
protover_all_supported
protover_all_supported
"Link=1-3,345-666"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Link=345-666");
tt_str_op(msg, OP_EQ, "Link=345-666")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Link=345-666"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Link=1-3,5-12", &msg));
tt_assert(! protover_all_supported("Link=1-3,5-12", &msg))
tt_assert
tt_assert
! protover_all_supported("Link=1-3,5-12", &msg)
protover_all_supported("Link=1-3,5-12", &msg)
protover_all_supported
protover_all_supported
"Link=1-3,5-12"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Link=6-12");
tt_str_op(msg, OP_EQ, "Link=6-12")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Link=6-12"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg));
tt_assert(! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg))
tt_assert
tt_assert
! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg)
protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg)
protover_all_supported
protover_all_supported
"Link=1-3,5-12 Quokka=9000-9001"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Link=6-12 Quokka=9000-9001");
tt_str_op(msg, OP_EQ, "Link=6-12 Quokka=9000-9001")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Link=6-12 Quokka=9000-9001"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Sleen=0-2147483648", &msg));
tt_assert(! protover_all_supported("Sleen=0-2147483648", &msg))
tt_assert
tt_assert
! protover_all_supported("Sleen=0-2147483648", &msg)
protover_all_supported("Sleen=0-2147483648", &msg)
protover_all_supported
protover_all_supported
"Sleen=0-2147483648"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Sleen=0-2147483648");
tt_str_op(msg, OP_EQ, "Sleen=0-2147483648")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Sleen=0-2147483648"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(! protover_all_supported("Sleen=0-4294967294", &msg));
tt_assert(! protover_all_supported("Sleen=0-4294967294", &msg))
tt_assert
tt_assert
! protover_all_supported("Sleen=0-4294967294", &msg)
protover_all_supported("Sleen=0-4294967294", &msg)
protover_all_supported
protover_all_supported
"Sleen=0-4294967294"
&msg
msg
msg
tt_str_op(msg, OP_EQ, "Sleen=0-4294967294");
tt_str_op(msg, OP_EQ, "Sleen=0-4294967294")
tt_str_op
tt_str_op
msg
msg
OP_EQ
OP_EQ
"Sleen=0-4294967294"
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
tt_assert(protover_all_supported("Fribble=", &msg));
tt_assert(protover_all_supported("Fribble=", &msg))
tt_assert
tt_assert
protover_all_supported("Fribble=", &msg)
protover_all_supported
protover_all_supported
"Fribble="
&msg
msg
msg
tt_ptr_op(msg, OP_EQ, NULL);
tt_ptr_op(msg, OP_EQ, NULL)
tt_ptr_op
tt_ptr_op
msg
msg
OP_EQ
OP_EQ
NULL
NULL
tor_capture_bugs_(1);
tor_capture_bugs_(1)
tor_capture_bugs_
tor_capture_bugs_
1
tt_assert(protover_all_supported("Fribble", &msg));
tt_assert(protover_all_supported("Fribble", &msg))
tt_assert
tt_assert
protover_all_supported("Fribble", &msg)
protover_all_supported
protover_all_supported
"Fribble"
&msg
msg
msg
tor_end_capture_bugs_();
tor_end_capture_bugs_()
tor_end_capture_bugs_
tor_end_capture_bugs_
tor_capture_bugs_(1);
tor_capture_bugs_(1)
tor_capture_bugs_
tor_capture_bugs_
1
tt_assert(protover_all_supported("Sleen=0-4294967295", &msg));
tt_assert(protover_all_supported("Sleen=0-4294967295", &msg))
tt_assert
tt_assert
protover_all_supported("Sleen=0-4294967295", &msg)
protover_all_supported
protover_all_supported
"Sleen=0-4294967295"
&msg
msg
msg
tor_end_capture_bugs_();
tor_end_capture_bugs_()
tor_end_capture_bugs_
tor_end_capture_bugs_
tor_capture_bugs_(1);
tor_capture_bugs_(1)
tor_capture_bugs_
tor_capture_bugs_
1
tt_assert(protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaa=1-65536", &msg));
tt_assert(protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaa=1-65536", &msg))
tt_assert
tt_assert
protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaa=1-65536", &msg)
protover_all_supported
protover_all_supported
"DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                                   "aaaaaaaaaaaa=1-65536"
&msg
msg
msg
tor_end_capture_bugs_();
tor_end_capture_bugs_()
tor_end_capture_bugs_
tor_end_capture_bugs_
done:  tor_end_capture_bugs_();
done
tor_end_capture_bugs_();
tor_end_capture_bugs_()
tor_end_capture_bugs_
tor_end_capture_bugs_
tor_free(msg);
tor_free(msg)
tor_free
tor_free
msg
msg
-----joern-----
(18,136,0)
(49,84,0)
(8,38,0)
(132,38,0)
(137,125,0)
(55,78,0)
(67,38,0)
(156,63,0)
(162,38,0)
(116,38,0)
(158,23,0)
(136,38,0)
(32,109,0)
(19,170,0)
(178,23,0)
(42,32,0)
(146,23,0)
(97,183,0)
(109,38,0)
(126,129,0)
(107,38,0)
(13,38,0)
(166,7,0)
(160,38,0)
(180,23,0)
(163,181,0)
(6,38,0)
(92,42,0)
(130,68,0)
(84,49,0)
(133,140,0)
(162,150,0)
(42,182,0)
(128,23,0)
(67,23,0)
(186,79,0)
(98,13,0)
(96,86,0)
(174,23,0)
(70,23,0)
(24,150,0)
(69,117,0)
(114,128,0)
(127,78,0)
(175,178,0)
(120,23,0)
(157,38,0)
(188,12,0)
(91,23,0)
(152,23,0)
(183,38,0)
(182,23,0)
(35,183,0)
(185,107,0)
(89,17,0)
(1,88,0)
(128,38,0)
(16,180,0)
(41,145,0)
(113,153,0)
(52,19,0)
(172,23,0)
(171,8,0)
(4,5,0)
(34,37,0)
(79,168,0)
(47,20,0)
(144,88,0)
(31,16,0)
(39,110,0)
(59,17,0)
(19,52,0)
(6,16,0)
(74,100,0)
(20,77,0)
(180,16,0)
(112,172,0)
(187,96,0)
(83,181,0)
(76,38,0)
(121,38,0)
(15,128,0)
(148,7,0)
(123,153,0)
(159,85,0)
(142,38,0)
(190,83,0)
(56,140,0)
(94,121,0)
(82,38,0)
(68,149,0)
(164,4,0)
(24,23,0)
(181,62,0)
(29,150,0)
(11,79,0)
(173,182,0)
(2,59,0)
(136,23,0)
(145,38,0)
(16,6,0)
(95,38,0)
(86,96,0)
(27,38,0)
(117,124,0)
(3,49,0)
(183,23,0)
(153,123,0)
(87,37,0)
(118,141,0)
(40,23,0)
(48,58,0)
(111,134,0)
(0,49,0)
(106,12,0)
(140,23,0)
(102,125,0)
(127,95,0)
(115,38,0)
(27,23,0)
(33,127,0)
(149,68,0)
(20,23,0)
(17,143,0)
(139,140,0)
(100,23,0)
(21,144,0)
(132,52,0)
(9,123,0)
(107,23,0)
(119,81,0)
(181,83,0)
(149,85,0)
(153,129,0)
(135,170,0)
(170,23,0)
(57,38,0)
(182,42,0)
(36,19,0)
(61,13,0)
(88,144,0)
(134,23,0)
(77,157,0)
(120,38,0)
(9,38,0)
(54,146,0)
(100,38,0)
(134,88,0)
(129,23,0)
(143,38,0)
(75,38,0)
(45,82,0)
(110,23,0)
(104,38,0)
(79,11,0)
(28,179,0)
(12,23,0)
(11,76,0)
(110,38,0)
(123,9,0)
(76,11,0)
(143,17,0)
(37,23,0)
(48,96,0)
(121,94,0)
(13,23,0)
(176,67,0)
(168,23,0)
(46,128,0)
(99,91,0)
(81,23,0)
(155,94,0)
(122,86,0)
(91,38,0)
(179,38,0)
(170,19,0)
(10,179,0)
(85,149,0)
(165,100,0)
(105,81,0)
(103,67,0)
(117,38,0)
(95,127,0)
(161,12,0)
(70,4,0)
(109,32,0)
(44,13,0)
(158,38,0)
(80,107,0)
(131,81,0)
(43,40,0)
(157,77,0)
(58,38,0)
(150,24,0)
(49,0,0)
(68,130,0)
(130,38,0)
(138,107,0)
(37,38,0)
(40,38,0)
(7,38,0)
(63,38,0)
(88,134,0)
(184,37,0)
(141,23,0)
(104,5,0)
(150,162,0)
(64,63,0)
(58,48,0)
(125,137,0)
(17,59,0)
(59,23,0)
(7,23,0)
(172,38,0)
(86,23,0)
(14,57,0)
(189,178,0)
(141,38,0)
(32,42,0)
(4,70,0)
(63,23,0)
(147,149,0)
(171,137,0)
(84,38,0)
(85,23,0)
(177,70,0)
(140,38,0)
(94,146,0)
(23,38,0)
(75,23,0)
(77,20,0)
(62,38,0)
(71,100,0)
(81,38,0)
(93,180,0)
(0,23,0)
(65,178,0)
(101,7,0)
(62,181,0)
(90,38,0)
(52,132,0)
(53,117,0)
(25,75,0)
(167,120,0)
(146,94,0)
(30,27,0)
(21,38,0)
(137,171,0)
(78,127,0)
(151,179,0)
(73,63,0)
(179,23,0)
(125,23,0)
(26,38,0)
(108,77,0)
(78,23,0)
(66,158,0)
(5,104,0)
(129,153,0)
(83,23,0)
(96,48,0)
(144,21,0)
(22,24,0)
(50,168,0)
(168,79,0)
(5,4,0)
(8,171,0)
(117,69,0)
(178,38,0)
(12,38,0)
(51,67,0)
(72,183,0)
(154,137,0)
(169,0,0)
(189,132,1)
(190,163,1)
(118,107,1)
(114,62,1)
(39,67,1)
(12,161,1)
(179,10,1)
(108,82,1)
(166,101,1)
(98,61,1)
(27,23,1)
(76,11,1)
(9,123,1)
(148,166,1)
(127,78,1)
(20,23,1)
(159,147,1)
(46,114,1)
(59,23,1)
(93,31,1)
(111,1,1)
(68,149,1)
(43,37,1)
(186,100,1)
(183,35,1)
(138,58,1)
(179,23,1)
(32,42,1)
(83,190,1)
(61,21,1)
(91,23,1)
(121,94,1)
(180,23,1)
(140,56,1)
(94,146,1)
(171,137,1)
(0,169,1)
(156,64,1)
(77,20,1)
(96,86,1)
(152,117,1)
(167,115,1)
(42,182,1)
(24,22,1)
(188,84,1)
(3,128,1)
(162,150,1)
(117,124,1)
(134,111,1)
(36,27,1)
(119,104,1)
(125,102,1)
(86,23,1)
(164,110,1)
(151,28,1)
(95,127,1)
(173,92,1)
(25,7,1)
(126,113,1)
(122,187,1)
(149,85,1)
(24,23,1)
(31,12,1)
(4,70,1)
(145,41,1)
(105,119,1)
(100,23,1)
(33,23,1)
(19,170,1)
(120,23,1)
(2,89,1)
(103,176,1)
(136,18,1)
(23,174,1)
(12,23,1)
(110,39,1)
(97,72,1)
(81,131,1)
(153,129,1)
(37,23,1)
(183,23,1)
(1,75,1)
(73,95,1)
(174,152,1)
(131,105,1)
(54,155,1)
(158,23,1)
(128,15,1)
(135,36,1)
(6,16,1)
(52,19,1)
(44,98,1)
(57,14,1)
(109,32,1)
(85,23,1)
(70,177,1)
(71,6,1)
(15,46,1)
(146,54,1)
(170,135,1)
(172,112,1)
(123,153,1)
(136,23,1)
(0,23,1)
(157,77,1)
(16,180,1)
(63,156,1)
(185,80,1)
(178,23,1)
(55,33,1)
(99,178,1)
(66,13,1)
(18,179,1)
(106,188,1)
(137,125,1)
(88,134,1)
(181,83,1)
(113,91,1)
(104,5,1)
(87,34,1)
(58,48,1)
(5,4,1)
(184,87,1)
(75,25,1)
(29,141,1)
(7,148,1)
(169,3,1)
(165,74,1)
(154,136,1)
(143,17,1)
(142,157,1)
(141,23,1)
(175,65,1)
(141,118,1)
(158,66,1)
(81,23,1)
(150,24,1)
(180,93,1)
(117,69,1)
(78,55,1)
(92,158,1)
(163,63,1)
(40,23,1)
(70,23,1)
(161,106,1)
(125,23,1)
(140,23,1)
(101,9,1)
(129,126,1)
(35,97,1)
(62,181,1)
(47,108,1)
(45,116,1)
(82,45,1)
(168,50,1)
(13,44,1)
(144,88,1)
(20,47,1)
(10,151,1)
(11,79,1)
(67,23,1)
(51,109,1)
(26,143,1)
(37,184,1)
(146,23,1)
(74,71,1)
(117,53,1)
(91,99,1)
(30,140,1)
(172,23,1)
(107,23,1)
(187,172,1)
(110,23,1)
(49,0,1)
(67,103,1)
(8,171,1)
(100,165,1)
(22,29,1)
(28,130,1)
(78,23,1)
(139,133,1)
(17,59,1)
(112,81,1)
(83,23,1)
(7,23,1)
(60,120,1)
(56,139,1)
(13,23,1)
(72,162,1)
(130,68,1)
(80,138,1)
(129,23,1)
(147,40,1)
(132,52,1)
(178,175,1)
(120,167,1)
(48,96,1)
(177,164,1)
(176,51,1)
(182,173,1)
(59,2,1)
(170,23,1)
(155,57,1)
(116,121,1)
(41,183,1)
(86,122,1)
(89,145,1)
(64,73,1)
(168,23,1)
(21,144,1)
(14,26,1)
(40,43,1)
(128,23,1)
(50,186,1)
(182,23,1)
(65,189,1)
(107,185,1)
(115,142,1)
(85,159,1)
(84,49,1)
(27,30,1)
(134,23,1)
(75,23,1)
(79,168,1)
(133,8,1)
(34,76,1)
(102,154,1)
(63,23,1)
(81,23,2)
(180,23,2)
(42,182,2)
(157,77,2)
(59,23,2)
(13,23,2)
(5,4,2)
(95,127,2)
(17,59,2)
(24,23,2)
(91,23,2)
(4,70,2)
(78,23,2)
(162,150,2)
(179,23,2)
(67,23,2)
(100,23,2)
(70,23,2)
(75,23,2)
(94,146,2)
(130,68,2)
(125,23,2)
(107,23,2)
(123,153,2)
(20,23,2)
(0,23,2)
(121,94,2)
(9,123,2)
(11,79,2)
(19,170,2)
(68,149,2)
(134,23,2)
(120,23,2)
(52,19,2)
(21,144,2)
(117,124,2)
(127,78,2)
(27,23,2)
(37,23,2)
(110,23,2)
(40,23,2)
(117,69,2)
(129,23,2)
(12,23,2)
(183,23,2)
(16,180,2)
(168,23,2)
(48,96,2)
(141,23,2)
(88,134,2)
(7,23,2)
(104,5,2)
(85,23,2)
(132,52,2)
(96,86,2)
(49,0,2)
(144,88,2)
(86,23,2)
(76,11,2)
(32,42,2)
(58,48,2)
(136,23,2)
(150,24,2)
(182,23,2)
(158,23,2)
(6,16,2)
(137,125,2)
(149,85,2)
(146,23,2)
(62,181,2)
(109,32,2)
(178,23,2)
(181,83,2)
(8,171,2)
(153,129,2)
(143,17,2)
(128,23,2)
(84,49,2)
(79,168,2)
(77,20,2)
(171,137,2)
(63,23,2)
(140,23,2)
(170,23,2)
(172,23,2)
(83,23,2)
-----------------------------------
(0,&msg)
(1,"Link=1-3,5-12")
(2,msg)
(3,"Link=3-4")
(4,protover_all_supported("Sleen=0-2147483648", &msg)
(5,! protover_all_supported("Sleen=0-2147483648", &msg)
(6,tt_assert(protover_all_supported("Link=3-4 Desc=2", &msg)
(7,tt_str_op(msg, OP_EQ, "Link=345-666")
(8,tt_assert(! protover_all_supported("Link=3-4 Wombat=9", &msg)
(9,tt_assert(! protover_all_supported("Link=1-3,345-666", &msg)
(10,"Link=999")
(11,! protover_all_supported("Wombat=9", &msg)
(12,tt_ptr_op(msg, OP_EQ, NULL)
(13,tt_str_op(msg, OP_EQ, "Link=6-12")
(14,1)
(15,NULL)
(16,protover_all_supported("Link=3-4 Desc=2", &msg)
(17,protover_all_supported("Fribble", &msg)
(18,msg)
(19,protover_all_supported("Link=3-999", &msg)
(20,&msg)
(21,tt_assert(! protover_all_supported("Link=1-3,5-12", &msg)
(22,msg)
(23,*msg = NULL)
(24,&msg)
(25,msg)
(26,tor_end_capture_bugs_()
(27,tor_free(msg)
(28,msg)
(29,"Fribble=")
(30,msg)
(31,"Link=3-4 Desc=2")
(32,! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg)
(33,NULL)
(34,msg)
(35,NULL)
(36,"Link=3-999")
(37,tt_str_op(msg, OP_EQ, "Wombat=9")
(38,)
(39,msg)
(40,tor_free(msg)
(41,1)
(42,protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg)
(43,msg)
(44,"Link=6-12")
(45,1)
(46,OP_EQ)
(47,msg)
(48,! protover_all_supported("Sleen=0-4294967294", &msg)
(49,protover_all_supported("Link=3-4", &msg)
(50,msg)
(51,msg)
(52,! protover_all_supported("Link=3-999", &msg)
(53,arg)
(54,msg)
(55,msg)
(56,"Wombat=9")
(57,tor_capture_bugs_(1)
(58,tt_assert(! protover_all_supported("Sleen=0-4294967294", &msg)
(59,&msg)
(60,RET)
(61,msg)
(62,tt_assert(protover_all_supported("", &msg)
(63,tt_ptr_op(msg, OP_EQ, NULL)
(64,OP_EQ)
(65,OP_EQ)
(66,msg)
(67,tt_str_op(msg, OP_EQ, "Link=6-12 Quokka=9000-9001")
(68,! protover_all_supported("Link=999", &msg)
(69,void)
(70,&msg)
(71,msg)
(72,msg)
(73,msg)
(74,OP_EQ)
(75,tor_free(msg)
(76,tt_assert(! protover_all_supported("Wombat=9", &msg)
(77,protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaa=1-65536", &msg)
(78,&msg)
(79,protover_all_supported("Wombat=9", &msg)
(80,OP_EQ)
(81,tt_str_op(msg, OP_EQ, "Sleen=0-2147483648")
(82,tor_capture_bugs_(1)
(83,&msg)
(84,tt_assert(protover_all_supported("Link=3-4", &msg)
(85,&msg)
(86,&msg)
(87,OP_EQ)
(88,protover_all_supported("Link=1-3,5-12", &msg)
(89,"Fribble")
(90,done:)
(91,tor_free(msg)
(92,"Link=1-3,5-12 Quokka=9000-9001")
(93,msg)
(94,protover_all_supported("Sleen=0-4294967295", &msg)
(95,tt_assert(protover_all_supported(NULL, &msg)
(96,protover_all_supported("Sleen=0-4294967294", &msg)
(97,OP_EQ)
(98,OP_EQ)
(99,msg)
(100,tt_ptr_op(msg, OP_EQ, NULL)
(101,msg)
(102,msg)
(103,"Link=6-12 Quokka=9000-9001")
(104,tt_assert(! protover_all_supported("Sleen=0-2147483648", &msg)
(105,OP_EQ)
(106,OP_EQ)
(107,tt_str_op(msg, OP_EQ, "Sleen=0-4294967294")
(108,"DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaa=1-65536")
(109,tt_assert(! protover_all_supported("Link=1-3,5-12 Quokka=9000-9001", &msg)
(110,tor_free(msg)
(111,msg)
(112,msg)
(113,"Link=1-3,345-666")
(114,msg)
(115,tor_end_capture_bugs_()
(116,tor_end_capture_bugs_()
(117,(void)
(118,msg)
(119,msg)
(120,tor_free(msg)
(121,tt_assert(protover_all_supported("Sleen=0-4294967295", &msg)
(122,msg)
(123,! protover_all_supported("Link=1-3,345-666", &msg)
(124,void *arg)
(125,&msg)
(126,msg)
(127,protover_all_supported(NULL, &msg)
(128,tt_ptr_op(msg, OP_EQ, NULL)
(129,&msg)
(130,tt_assert(! protover_all_supported("Link=999", &msg)
(131,"Sleen=0-2147483648")
(132,tt_assert(! protover_all_supported("Link=3-999", &msg)
(133,msg)
(134,&msg)
(135,msg)
(136,tor_free(msg)
(137,protover_all_supported("Link=3-4 Wombat=9", &msg)
(138,msg)
(139,OP_EQ)
(140,tt_str_op(msg, OP_EQ, "Wombat=9")
(141,tor_free(msg)
(142,tor_end_capture_bugs_()
(143,tt_assert(protover_all_supported("Fribble", &msg)
(144,! protover_all_supported("Link=1-3,5-12", &msg)
(145,tor_capture_bugs_(1)
(146,&msg)
(147,"Link=999")
(148,"Link=345-666")
(149,protover_all_supported("Link=999", &msg)
(150,protover_all_supported("Fribble=", &msg)
(151,OP_EQ)
(152,msg)
(153,protover_all_supported("Link=1-3,345-666", &msg)
(154,"Link=3-4 Wombat=9")
(155,"Sleen=0-4294967295")
(156,NULL)
(157,tt_assert(protover_all_supported("DoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n\\n                                   "aaaaaaaaaaaa=1-65536", &msg)
(158,tor_free(msg)
(159,msg)
(160,msg)
(161,NULL)
(162,tt_assert(protover_all_supported("Fribble=", &msg)
(163,"")
(164,"Sleen=0-2147483648")
(165,NULL)
(166,OP_EQ)
(167,msg)
(168,&msg)
(169,msg)
(170,&msg)
(171,! protover_all_supported("Link=3-4 Wombat=9", &msg)
(172,tor_free(msg)
(173,msg)
(174,NULL)
(175,"Link=6-999")
(176,OP_EQ)
(177,msg)
(178,tt_str_op(msg, OP_EQ, "Link=6-999")
(179,tt_str_op(msg, OP_EQ, "Link=999")
(180,&msg)
(181,protover_all_supported("", &msg)
(182,&msg)
(183,tt_ptr_op(msg, OP_EQ, NULL)
(184,"Wombat=9")
(185,"Sleen=0-4294967294")
(186,"Wombat=9")
(187,"Sleen=0-4294967294")
(188,msg)
(189,msg)
(190,msg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^