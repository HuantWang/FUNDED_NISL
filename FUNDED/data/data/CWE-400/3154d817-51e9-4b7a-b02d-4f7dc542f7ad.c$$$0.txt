-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,86
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(41,22,0)
(36,34,0)
(45,34,0)
(8,22,0)
(4,44,0)
(26,23,0)
(0,8,0)
(44,4,0)
(13,1,0)
(46,26,0)
(27,17,0)
(29,22,0)
(1,33,0)
(25,31,0)
(21,31,0)
(32,20,0)
(26,34,0)
(18,33,0)
(36,33,0)
(20,36,0)
(28,22,0)
(38,44,0)
(23,26,0)
(14,20,0)
(19,33,0)
(34,36,0)
(31,36,0)
(30,9,0)
(10,33,0)
(34,26,0)
(34,45,0)
(9,18,0)
(18,9,0)
(11,10,0)
(6,23,0)
(43,8,0)
(4,37,0)
(25,1,0)
(31,25,0)
(9,30,0)
(3,36,0)
(2,30,0)
(42,25,0)
(17,11,0)
(17,36,0)
(5,10,0)
(39,11,0)
(16,17,0)
(11,17,0)
(35,31,0)
(24,30,0)
(30,36,0)
(34,26,1)
(38,20,1)
(14,36,1)
(7,40,1)
(17,27,1)
(26,23,1)
(11,39,1)
(34,45,1)
(30,36,1)
(16,20,1)
(31,36,1)
(16,4,1)
(8,0,1)
(23,6,1)
(30,2,1)
(46,3,1)
(25,31,1)
(17,36,1)
(15,7,1)
(3,40,1)
(27,16,1)
(20,32,1)
(1,13,1)
(36,34,1)
(31,21,1)
(40,8,1)
(9,30,1)
(13,25,1)
(35,10,1)
(21,35,1)
(7,18,1)
(25,42,1)
(44,38,1)
(6,46,1)
(11,17,1)
(4,44,1)
(20,36,1)
(2,24,1)
(18,9,1)
(5,11,1)
(10,5,1)
(0,43,1)
(24,1,1)
(32,14,1)
(39,17,1)
(42,31,1)
(5,40,2)
(6,40,2)
(30,40,2)
(34,40,2)
(44,20,2)
(42,40,2)
(1,40,2)
(34,26,2)
(11,40,2)
(20,40,2)
(32,40,2)
(38,20,2)
(25,40,2)
(18,40,2)
(4,44,2)
(31,36,2)
(27,40,2)
(31,40,2)
(21,40,2)
(9,40,2)
(17,40,2)
(20,36,2)
(46,40,2)
(26,40,2)
(9,30,2)
(24,40,2)
(23,40,2)
(3,40,2)
(26,23,2)
(2,40,2)
(25,31,2)
(13,40,2)
(16,40,2)
(11,17,2)
(35,40,2)
(39,40,2)
(10,40,2)
(36,34,2)
(36,40,2)
(4,20,2)
(34,45,2)
(17,36,2)
(18,9,2)
(30,36,2)
(14,40,2)
-----------------------------------
(0,NULL)
(1,data[0].intTwo = 0)
(2,0)
(3,data)
(4,exit(-1)
(5,0)
(6,twoIntsStruct)
(7,staticTrue)
(8,data = NULL)
(9,&data[0])
(10,data[0].intOne = 0)
(11,data[0].intOne)
(12, sizeof(twoIntsStruct)
(13,0)
(14,data)
(15,RET)
(16,data)
(17,data[0])
(18,printStructLine(&data[0])
(19,if (data == NULL)
(20,data == NULL)
(21,0)
(22,)
(23,sizeof(twoIntsStruct)
(24,data)
(25,data[0].intTwo)
(26,calloc(100, sizeof(twoIntsStruct)
(27,0)
(28,if(staticTrue)
(29,data)
(30,data[0])
(31,data[0])
(32,NULL)
(33,)
(34,(twoIntsStruct *)
(35,data)
(36,data = (twoIntsStruct *)
(37,)
(38,1)
(39,intOne)
(40,staticTrue)
(41,if(staticTrue)
(42,intTwo)
(43,data)
(44,-1)
(45,twoIntsStruct *)
(46,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^