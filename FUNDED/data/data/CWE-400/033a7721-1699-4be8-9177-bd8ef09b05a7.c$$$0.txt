-----label-----
0
-----code-----
static void goodB2G2Sink(size_t data)
{
    if(goodB2G2Static)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
50,51
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,7,9,13,18,20,21,26,29,31,34,35,40,43,45,48,51,54,55,59,61,66,68,72,74,76,80,82,86,88,93,94
-----computeFrom-----
23,24
23,25
24,25
24,26
32,33
32,34
38,39
38,40
49,50
49,51
57,58
57,59
-----guardedBy-----
31,76
34,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2Sink(size_t data){    if(goodB2G2Static)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2Sink(size_t data)
goodB2G2Sink
size_t data
size_t
size_t
data
data
{    if(goodB2G2Static)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
if(goodB2G2Static)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
goodB2G2Static
goodB2G2Static
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(15,8,0)
(6,33,0)
(26,20,0)
(32,28,0)
(27,39,0)
(16,31,0)
(36,19,0)
(8,20,0)
(40,41,0)
(23,36,0)
(25,42,0)
(11,36,0)
(8,38,0)
(35,17,0)
(43,44,0)
(42,25,0)
(11,19,0)
(7,35,0)
(31,35,0)
(28,36,0)
(13,33,0)
(5,11,0)
(31,16,0)
(33,34,0)
(2,40,0)
(38,8,0)
(9,16,0)
(10,35,0)
(38,43,0)
(12,16,0)
(16,9,0)
(39,36,0)
(20,8,0)
(43,36,0)
(39,19,0)
(0,28,0)
(24,36,0)
(8,17,0)
(24,19,0)
(16,17,0)
(30,9,0)
(21,19,0)
(43,38,0)
(35,31,0)
(18,11,0)
(4,42,0)
(44,43,0)
(3,24,0)
(22,37,0)
(36,43,0)
(25,1,0)
(28,36,1)
(0,32,1)
(20,26,1)
(26,15,1)
(2,31,1)
(16,9,1)
(9,30,1)
(38,8,1)
(12,29,1)
(36,43,1)
(4,28,1)
(39,27,1)
(43,38,1)
(42,4,1)
(16,17,1)
(35,10,1)
(27,24,1)
(35,17,1)
(28,0,1)
(32,36,1)
(8,17,1)
(31,16,1)
(23,31,1)
(30,12,1)
(14,40,1)
(31,35,1)
(15,23,1)
(11,18,1)
(14,39,1)
(18,5,1)
(24,3,1)
(24,36,1)
(8,20,1)
(14,29,1)
(3,11,1)
(39,36,1)
(40,2,1)
(25,42,1)
(10,7,1)
(5,28,1)
(43,44,1)
(5,25,1)
(11,36,1)
(7,16,1)
(43,44,2)
(28,31,2)
(0,31,2)
(8,20,2)
(32,31,2)
(2,31,2)
(25,28,2)
(8,31,2)
(30,29,2)
(43,38,2)
(15,31,2)
(16,17,2)
(18,31,2)
(3,31,2)
(42,28,2)
(38,31,2)
(23,31,2)
(5,31,2)
(11,31,2)
(16,9,2)
(8,17,2)
(11,36,2)
(10,16,2)
(26,31,2)
(4,28,2)
(28,36,2)
(39,31,2)
(35,17,2)
(36,31,2)
(20,31,2)
(35,16,2)
(12,29,2)
(9,29,2)
(16,29,2)
(38,8,2)
(25,42,2)
(40,31,2)
(36,43,2)
(31,29,2)
(31,35,2)
(31,16,2)
(27,31,2)
(24,36,2)
(39,36,2)
(7,16,2)
(24,31,2)
(43,31,2)
-----------------------------------
(0,NULL)
(1,)
(2,"Input is less than the length of the source string or too large")
(3,myString)
(4,1)
(5,myString)
(6,myString)
(7,data)
(8,data*sizeof(char)
(9,strlen(HELLO_STRING)
(10,100)
(11,strcpy(myString, HELLO_STRING)
(12,data)
(13,if (data > strlen(HELLO_STRING)
(14,RET)
(15,data)
(16,data > strlen(HELLO_STRING)
(17,size_t data)
(18,HELLO_STRING)
(19,)
(20,sizeof(char)
(21,if (myString == NULL)
(22,if(goodB2G2Static)
(23,myString)
(24,printLine(myString)
(25,exit(-1)
(26,char)
(27,myString)
(28,myString == NULL)
(29,goodB2G2Static)
(30,HELLO_STRING)
(31,data > strlen(HELLO_STRING)
(32,myString)
(33,)
(34,)
(35,data < 100)
(36,myString = (char *)
(37,)
(38,malloc(data*sizeof(char)
(39,free(myString)
(40,printLine("Input is less than the length of the source string or too large")
(41,)
(42,-1)
(43,(char *)
(44,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^