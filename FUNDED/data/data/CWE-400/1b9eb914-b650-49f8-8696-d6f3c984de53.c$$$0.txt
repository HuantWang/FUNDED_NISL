-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    {
        int countCopy = count;
        int count = countCopy;
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
44,47
45,46
45,47
46,47
46,48
47,48
50,51
50,52
51,52
54,55
54,56
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,32,35,38,40,43,48,49,52,53,58,60,64,65,70,71
-----computeFrom-----
12,13
12,14
45,46
45,47
46,47
46,48
50,51
50,52
-----guardedBy-----
52,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        int countCopy = count;        int count = countCopy;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        int countCopy = count;        int count = countCopy;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        int countCopy = count;        int count = countCopy;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(26,4,0)
(8,4,0)
(36,6,0)
(12,9,0)
(32,13,0)
(17,10,0)
(24,29,0)
(34,8,0)
(17,9,0)
(0,17,0)
(1,11,0)
(19,8,0)
(10,11,0)
(31,6,0)
(8,6,0)
(3,11,0)
(31,16,0)
(28,6,0)
(18,31,0)
(7,17,0)
(35,33,0)
(9,4,0)
(11,9,0)
(27,16,0)
(5,28,0)
(6,28,0)
(22,32,0)
(14,25,0)
(20,9,0)
(24,9,0)
(25,29,0)
(10,17,0)
(9,8,0)
(16,33,0)
(23,4,0)
(6,33,0)
(2,24,0)
(11,10,0)
(15,4,0)
(30,16,0)
(4,33,0)
(16,31,0)
(20,12,1)
(6,28,1)
(17,0,1)
(31,18,1)
(32,22,1)
(28,5,1)
(0,7,1)
(9,20,1)
(22,10,1)
(11,9,1)
(11,1,1)
(5,36,1)
(19,34,1)
(31,6,1)
(10,11,1)
(17,9,1)
(2,10,1)
(21,25,1)
(25,14,1)
(12,8,1)
(8,19,1)
(7,11,1)
(3,9,1)
(10,17,1)
(27,6,1)
(24,9,1)
(21,32,1)
(8,6,1)
(16,31,1)
(14,24,1)
(18,30,1)
(1,3,1)
(9,8,1)
(34,16,1)
(30,27,1)
(24,2,1)
(24,10,2)
(16,31,2)
(10,17,2)
(22,10,2)
(10,11,2)
(17,9,2)
(7,11,2)
(6,28,2)
(8,6,2)
(11,9,2)
(9,8,2)
(14,10,2)
(24,9,2)
(25,10,2)
(0,11,2)
(17,11,2)
(31,6,2)
(2,10,2)
(32,10,2)
-----------------------------------
(0,2000)
(1,0)
(2,count)
(3,count)
(4,)
(5,1)
(6,count = -1)
(7,count)
(8,countCopy = count)
(9,count = countCopy)
(10,count > 0 && count <= 2000)
(11,count > 0)
(12,count)
(13,)
(14,"Sleep time OK")
(15,countCopy)
(16,fscanf(stdin, "%d", &count)
(17,count <= 2000)
(18,count)
(19,count)
(20,countCopy)
(21,RET)
(22,"Sleep time too long")
(23,if (count > 0 && count <= 2000)
(24,SLEEP(count)
(25,printLine("Sleep time OK")
(26,count)
(27,stdin)
(28,-1)
(29,)
(30,"%d")
(31,&count)
(32,printLine("Sleep time too long")
(33,)
(34,countCopy)
(35,count)
(36,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^