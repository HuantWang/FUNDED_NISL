-----label-----
0
-----code-----
static int conf_process(conf_t *conf)
{
	// Create PID file
	if (conf->rundir == NULL) {
		conf->rundir = strdup(RUN_DIR);
		if (conf->rundir == NULL) {
			return KNOT_ENOMEM;
		}
	}

	/* Default TCP/UDP limits. */
	if (conf->max_conn_idle < 1) {
		conf->max_conn_idle = CONFIG_IDLE_WD;
	}
	if (conf->max_conn_hs < 1) {
		conf->max_conn_hs = CONFIG_HANDSHAKE_WD;
	}
	if (conf->max_conn_reply < 1) {
		conf->max_conn_reply = CONFIG_REPLY_WD;
	}
	if (conf->max_tcp_clients < 1) {
		conf->max_tcp_clients = CONFIG_MAXTCP;
	}

	/* Default interface. */
	conf_iface_t *ctl_if = conf->ctl.iface;
	if (!conf->ctl.have && ctl_if == NULL) {
		ctl_if = malloc(sizeof(conf_iface_t));
		memset(ctl_if, 0, sizeof(conf_iface_t));
		sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0);
		conf->ctl.iface = ctl_if;
	}

	/* Control interface. */
	if (ctl_if) {
		if (ctl_if->addr.ss_family == AF_UNIX) {
			char *full_path = malloc(SOCKADDR_STRLEN);
			memset(full_path, 0, SOCKADDR_STRLEN);
			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);

			/* Convert to absolute path. */
			full_path = conf_abs_path(conf->rundir, full_path);
			if(full_path) {
				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);
				free(full_path);
			}

			/* Check for ACL existence. */
			if (!EMPTY_LIST(conf->ctl.allow)) {
				log_warning("control 'allow' statement does not "
				            "affect UNIX sockets");
			}
		} else if (sockaddr_port(&ctl_if->addr) <= 0) {
			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);
		}
	}

	/* Default RRL limits. */
	if (conf->rrl_slip < 0) {
		conf->rrl_slip = CONFIG_RRL_SLIP;
	}
	if (conf->rrl_size == 0) {
		conf->rrl_size = CONFIG_RRL_SIZE;
	}

	/* Default parallel transfers. */
	if (conf->xfers <= 0)
		conf->xfers = CONFIG_XFERS;

	/* Zones global configuration. */
	if (conf->storage == NULL) {
		conf->storage = strdup(STORAGE_DIR);
	}
	conf->storage = strcpath(conf->storage);
	if (conf->dnssec_keydir) {
		conf->dnssec_keydir = conf_abs_path(conf->storage,
		                                    conf->dnssec_keydir);
	}

	// Postprocess zones
	int ret = KNOT_EOK;

	/* Initialize query plan if modules exist. */
	if (!EMPTY_LIST(conf->query_modules)) {
		conf->query_plan = query_plan_create(NULL);
		if (conf->query_plan == NULL) {
			return KNOT_ENOMEM;
		}
	}

	/* Load query modules. */
	struct query_module *module = NULL;
	WALK_LIST(module, conf->query_modules) {
		ret = module->load(conf->query_plan, module);
		if (ret != KNOT_EOK) {
			return ret;
		}
	}

	const bool sorted = false;
	hattrie_iter_t *z_iter = hattrie_iter_begin(conf->zones, sorted);
	if (z_iter == NULL) {
		return KNOT_ERROR;
	}
	for (; !hattrie_iter_finished(z_iter) && ret == KNOT_EOK; hattrie_iter_next(z_iter)) {

		conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);

		// Default policy for dbsync timeout
		if (zone->dbsync_timeout < 0) {
			zone->dbsync_timeout = conf->dbsync_timeout;
		}

		// Default policy for ixfr-from-differences
		if (zone->build_diffs < 0) {
			zone->build_diffs = conf->build_diffs;
		}

		// Default policy for semantic checks
		if (zone->enable_checks < 0) {
			zone->enable_checks = conf->zone_checks;
		}

		// Default policy for disabling ANY type queries for AA
		if (zone->disable_any < 0) {
			zone->disable_any = conf->disable_any;
		}

		// Default policy for NOTIFY retries
		if (zone->notify_retries <= 0) {
			zone->notify_retries = conf->notify_retries;
		}

		// Default policy for NOTIFY timeout
		if (zone->notify_timeout <= 0) {
			zone->notify_timeout = conf->notify_timeout;
		}

		// Default policy for IXFR FSLIMIT
		if (zone->ixfr_fslimit == 0) { /* ixfr_fslimit is unsigned type */
			zone->ixfr_fslimit = conf->ixfr_fslimit;
		}

		// Default policy for DNSSEC signature lifetime
		if (zone->sig_lifetime <= 0) {
			zone->sig_lifetime = conf->sig_lifetime;
		}

		if (zone->serial_policy == 0) {
			zone->serial_policy = conf->serial_policy;
		}

		// Default zone file
		if (zone->file == NULL) {
			zone->file = strcdup(zone->name, "zone");
			if (!zone->file) {
				ret = KNOT_ENOMEM;
				continue;
			}
		}

		// Default data directories
		if (!zone->storage && conf->storage) {
			zone->storage = strdup(conf->storage);
		}
		if (!zone->dnssec_keydir && conf->dnssec_keydir) {
			zone->dnssec_keydir = strdup(conf->dnssec_keydir);
		}

		// Default policy for DNSSEC
		if (!zone->dnssec_keydir) {
			zone->dnssec_enable = 0;
		} else if (zone->dnssec_enable < 0) {
			zone->dnssec_enable = conf->dnssec_enable;
		}

		assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1);

		// DNSSEC required settings
		if (zone->dnssec_enable) {
			// Enable zone diffs (silently)
			zone->build_diffs = true;

			// Disable incoming XFRs
			if (!EMPTY_LIST(zone->acl.notify_in) ||
			    !EMPTY_LIST(zone->acl.xfr_in)
			) {
				log_zone_str_notice(zone->name, "automatic "
					"DNSSEC signing enabled, disabling "
					"incoming XFRs");

				WALK_LIST_FREE(zone->acl.notify_in);
				WALK_LIST_FREE(zone->acl.xfr_in);
			}
		}

		// Resolve relative paths everywhere
		zone->storage = conf_abs_path(conf->storage, zone->storage);
		zone->file = conf_abs_path(zone->storage, zone->file);
		if (zone->dnssec_enable) {
			zone->dnssec_keydir = conf_abs_path(zone->storage,
			                                    zone->dnssec_keydir);
		}

		if (zone->storage == NULL ||
		    zone->file == NULL ||
		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)
		) {
			free(zone->storage);
			free(zone->file);
			free(zone->dnssec_keydir);
			ret = KNOT_ENOMEM;
			continue;
		}

		/* Check paths existence. */
		if (!is_existing_dir(zone->storage)) {
			log_error("storage directory '%s' does not exist",
			          zone->storage);
			ret = KNOT_EINVAL;
			continue;
		}
		if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)) {
			log_error("DNSSEC key directory '%s' does not exist",
			          zone->dnssec_keydir);
			ret = KNOT_EINVAL;
			continue;

		}

		/* Create journal filename. */
		size_t zname_len = strlen(zone->name);
		size_t stor_len = strlen(zone->storage);
		size_t size = stor_len + zname_len + 9; // /diff.db,\0
		char *dest = malloc(size);
		if (dest == NULL) {
			zone->ixfr_db = NULL; /* Not enough memory. */
			ret = KNOT_ENOMEM; /* Error report. */
			continue;
		}
		char *dpos = dest;
		memcpy(dpos, zone->storage, stor_len + 1);
		dpos += stor_len;
		if (zone->storage[stor_len - 1] != '/') {
			*(dpos++) = '/';
			*dpos = '\0';
		}

		const char *dbext = "diff.db";
		memcpy(dpos, zone->name, zname_len + 1);
		for (size_t i = 0; i < zname_len; ++i) {
			if (dpos[i] == '/') dpos[i] = '_';
		}
		memcpy(dpos + zname_len, dbext, strlen(dbext) + 1);
		zone->ixfr_db = dest;

		/* Initialize query plan if modules exist. */
		if (!EMPTY_LIST(zone->query_modules)) {
			zone->query_plan = query_plan_create(NULL);
			if (zone->query_plan == NULL) {
				ret = KNOT_ENOMEM;
				continue;
			}

			/* Only supported zone class is now IN. */
			internet_query_plan(zone->query_plan);
		}

		/* Load query modules. */
		struct query_module *module = NULL;
		WALK_LIST(module, zone->query_modules) {
			ret = module->load(zone->query_plan, module);
			if (ret != KNOT_EOK) {
				break;
			}
		}
	}
	hattrie_iter_free(z_iter);

	/* Update UID and GID. */
	if (conf->uid < 0) conf->uid = getuid();
	if (conf->gid < 0) conf->gid = getgid();

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
12,13
12,14
13,14
13,15
14,15
14,16
15,16
18,19
20,21
20,22
21,22
22,23
22,24
23,24
23,25
24,25
27,28
27,29
28,29
30,31
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
40,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
46,48
47,48
51,52
52,53
53,54
53,55
54,55
54,56
55,56
58,59
60,61
60,62
61,62
61,63
62,63
62,64
63,64
67,68
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
83,84
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
100,101
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
109,111
110,111
112,113
112,114
112,115
115,116
116,117
116,118
117,118
117,119
118,119
122,123
122,124
123,124
123,125
124,125
125,126
125,127
126,127
126,128
127,128
131,132
131,133
132,133
134,135
136,137
136,138
136,139
136,140
137,138
138,139
138,140
139,140
141,142
141,143
142,143
144,145
145,146
145,147
146,147
149,150
150,151
150,152
150,153
150,154
151,152
153,154
156,157
157,158
157,159
158,159
161,162
162,163
162,164
162,165
162,166
162,167
163,164
165,166
166,167
166,168
167,168
170,171
174,175
175,176
175,177
176,177
176,178
177,178
177,179
178,179
182,183
184,185
184,186
185,186
187,188
188,189
188,190
188,191
189,190
189,191
190,191
190,192
191,192
191,193
192,193
196,197
198,199
198,200
198,201
198,202
198,203
198,204
199,200
200,201
200,202
202,203
202,204
202,205
205,206
206,207
206,208
207,208
209,210
211,212
212,213
212,214
212,215
212,216
213,214
215,216
218,219
220,221
221,222
221,223
221,224
221,225
222,223
224,225
226,227
228,229
229,230
229,231
230,231
233,234
234,235
234,236
235,236
237,238
237,239
237,240
238,239
240,241
240,242
241,242
244,245
246,247
246,248
247,248
249,250
249,251
250,251
251,252
251,253
251,254
251,255
251,256
252,253
254,255
255,256
255,257
256,257
259,260
261,262
264,265
265,266
265,267
266,267
268,269
270,271
270,272
271,272
272,273
272,274
273,274
275,276
275,277
276,277
276,278
277,278
281,282
282,283
283,284
283,285
284,285
287,288
287,289
288,289
288,290
289,290
289,291
290,291
292,293
293,294
293,295
294,295
298,299
299,300
300,301
300,302
300,303
301,302
303,304
304,305
304,306
305,306
308,309
310,311
310,312
311,312
311,313
312,313
312,314
313,314
317,318
318,319
319,320
319,321
320,321
320,322
321,322
324,325
326,327
326,328
327,328
327,329
328,329
328,330
329,330
333,334
334,335
335,336
335,337
336,337
336,338
337,338
340,341
342,343
342,344
343,344
343,345
344,345
344,346
345,346
349,350
350,351
350,352
351,352
351,353
352,353
355,356
357,358
357,359
358,359
358,360
359,360
359,361
360,361
363,364
365,366
366,367
367,368
367,369
368,369
368,370
369,370
372,373
372,374
373,374
375,376
377,378
378,379
378,380
379,380
379,381
380,381
383,384
383,385
384,385
386,387
386,388
387,388
390,391
390,392
391,392
391,393
392,393
395,396
396,397
397,398
397,399
398,399
398,400
399,400
402,403
402,404
402,405
403,404
405,406
405,407
406,407
409,410
409,411
410,411
413,414
414,415
414,416
416,417
416,418
418,419
419,420
421,422
421,423
422,423
423,424
423,425
424,425
426,427
426,428
427,428
430,431
430,432
431,432
432,433
432,434
433,434
433,435
434,435
437,438
437,439
438,439
440,441
442,443
442,444
443,444
443,445
444,445
444,446
445,446
448,449
450,451
451,452
452,453
454,455
455,456
455,457
456,457
458,459
458,460
458,461
461,462
462,463
464,465
465,466
465,467
465,468
466,467
468,469
470,471
470,472
471,472
474,475
475,476
475,477
476,477
477,478
477,479
478,479
480,481
480,482
480,483
481,482
481,483
482,483
485,486
485,487
486,487
489,490
491,492
491,493
492,493
492,494
493,494
495,496
497,498
498,499
499,500
501,502
502,503
502,504
504,505
504,506
506,507
508,509
509,510
509,511
510,511
512,513
512,514
512,515
515,516
516,517
516,518
516,519
517,518
519,520
519,521
520,521
523,524
525,526
525,527
526,527
526,528
527,528
529,530
531,532
532,533
533,534
535,536
535,537
535,538
535,539
537,538
537,539
538,539
539,540
539,541
540,541
542,543
544,545
544,546
545,546
547,548
549,550
549,551
550,551
552,553
554,555
554,556
554,557
554,558
554,559
554,560
554,561
554,562
554,563
554,564
554,565
554,566
554,567
554,568
554,569
554,570
554,571
554,572
554,573
554,574
554,575
554,576
554,577
554,578
554,579
554,580
554,581
554,582
554,583
554,584
554,585
554,586
554,587
554,588
554,589
554,590
554,591
554,592
554,593
554,594
554,595
555,556
556,557
556,558
557,558
559,560
559,561
559,562
562,563
563,564
563,565
564,565
564,566
565,566
567,568
569,570
570,571
570,572
571,572
573,574
575,576
575,577
576,577
576,578
577,578
577,579
578,579
582,583
583,584
584,585
584,586
585,586
585,587
586,587
589,590
589,591
590,591
593,594
593,595
594,595
594,596
595,596
595,597
596,597
600,601
601,602
602,603
602,604
603,604
603,605
604,605
607,608
607,609
608,609
611,612
611,613
612,613
612,614
613,614
613,615
614,615
618,619
619,620
620,621
620,622
621,622
621,623
622,623
625,626
625,627
626,627
629,630
629,631
630,631
630,632
631,632
631,633
632,633
636,637
637,638
638,639
638,640
639,640
639,641
640,641
643,644
643,645
644,645
647,648
647,649
648,649
648,650
649,650
649,651
650,651
654,655
655,656
656,657
656,658
657,658
657,659
658,659
661,662
661,663
662,663
665,666
665,667
666,667
666,668
667,668
667,669
668,669
672,673
673,674
674,675
674,676
675,676
675,677
676,677
679,680
679,681
680,681
683,684
683,685
684,685
684,686
685,686
685,687
686,687
690,691
691,692
692,693
692,694
693,694
693,695
694,695
697,698
697,699
698,699
701,702
701,703
702,703
702,704
703,704
703,705
704,705
708,709
709,710
710,711
710,712
711,712
711,713
712,713
715,716
715,717
716,717
719,720
719,721
720,721
720,722
721,722
721,723
722,723
726,727
727,728
728,729
728,730
729,730
729,731
730,731
733,734
733,735
734,735
737,738
737,739
738,739
738,740
739,740
739,741
740,741
743,744
745,746
745,747
746,747
747,748
747,749
748,749
748,750
749,750
752,753
752,754
752,755
753,754
755,756
755,757
756,757
760,761
760,762
761,762
762,763
762,764
763,764
766,767
766,768
767,768
768,769
768,770
769,770
771,772
774,775
774,776
775,776
775,777
776,777
777,778
777,779
778,779
781,782
781,783
782,783
785,786
786,787
787,788
787,789
788,789
788,790
789,790
792,793
792,794
793,794
795,796
795,797
796,797
799,800
799,801
800,801
800,802
801,802
802,803
802,804
803,804
806,807
806,808
807,808
810,811
811,812
812,813
812,814
813,814
813,815
814,815
817,818
817,819
818,819
820,821
820,822
821,822
824,825
824,826
824,827
825,826
826,827
826,828
827,828
830,831
831,832
832,833
832,834
833,834
833,835
834,835
838,839
838,840
839,840
839,841
840,841
840,842
841,842
845,846
846,847
847,848
847,849
848,849
848,850
849,850
852,853
852,854
853,854
856,857
857,858
857,859
858,859
860,861
860,862
861,862
861,863
862,863
862,864
863,864
867,868
867,869
868,869
868,870
869,870
873,874
873,875
874,875
874,876
875,876
878,879
878,880
879,880
880,881
880,882
881,882
881,883
882,883
886,887
886,888
887,888
887,889
888,889
889,890
889,891
890,891
892,893
892,894
893,894
893,895
894,895
898,899
899,900
899,901
900,901
902,903
902,904
903,904
903,905
904,905
908,909
908,910
908,911
909,910
910,911
910,912
910,913
911,912
913,914
913,915
914,915
918,919
919,920
919,921
920,921
922,923
922,924
923,924
923,925
924,925
928,929
929,930
929,931
930,931
932,933
932,934
933,934
933,935
934,935
938,939
939,940
939,941
940,941
940,942
941,942
944,945
944,946
944,947
945,946
947,948
947,949
948,949
951,952
951,953
952,953
955,956
956,957
956,958
957,958
957,959
958,959
961,962
961,963
961,964
962,963
964,965
964,966
965,966
968,969
968,970
969,970
972,973
972,974
973,974
973,975
974,975
977,978
978,979
979,980
979,981
980,981
980,982
981,982
984,985
984,986
984,987
985,986
987,988
987,989
988,989
991,992
991,993
992,993
995,996
995,997
996,997
996,998
997,998
997,999
998,999
998,1000
999,1000
999,1001
1000,1001
1003,1004
1005,1006
1005,1007
1006,1007
1006,1008
1007,1008
1010,1011
1012,1013
1013,1014
1013,1015
1014,1015
1014,1016
1015,1016
1018,1019
1018,1020
1019,1020
1019,1021
1020,1021
1023,1024
1025,1026
1025,1027
1025,1028
1025,1029
1025,1030
1026,1027
1027,1028
1027,1029
1028,1029
1030,1031
1030,1032
1031,1032
1034,1035
1035,1036
1035,1037
1036,1037
1038,1039
1038,1040
1039,1040
1042,1043
1043,1044
1043,1045
1044,1045
1046,1047
1046,1048
1047,1048
1050,1051
1051,1052
1051,1053
1052,1053
1054,1055
1057,1058
1057,1059
1058,1059
1059,1060
1059,1061
1060,1061
1062,1063
1062,1064
1063,1064
1066,1067
1066,1068
1066,1069
1067,1068
1068,1069
1068,1070
1068,1071
1069,1070
1072,1073
1072,1074
1073,1074
1076,1077
1077,1078
1077,1079
1078,1079
1080,1081
1083,1084
1083,1085
1084,1085
1084,1086
1085,1086
1085,1087
1086,1087
1089,1090
1090,1091
1090,1092
1091,1092
1093,1094
1093,1095
1094,1095
1097,1098
1097,1099
1097,1100
1098,1099
1099,1100
1099,1101
1099,1102
1100,1101
1103,1104
1103,1105
1104,1105
1107,1108
1108,1109
1108,1110
1109,1110
1111,1112
1114,1115
1115,1116
1115,1117
1116,1117
1118,1119
1118,1120
1120,1121
1121,1122
1121,1123
1122,1123
1124,1125
1124,1126
1125,1126
1128,1129
1129,1130
1129,1131
1130,1131
1132,1133
1132,1134
1134,1135
1135,1136
1135,1137
1136,1137
1138,1139
1138,1140
1139,1140
1142,1143
1143,1144
1143,1145
1144,1145
1146,1147
1146,1148
1148,1149
1149,1150
1149,1151
1150,1151
1150,1152
1151,1152
1153,1154
1156,1157
1157,1158
1157,1159
1159,1160
1159,1161
1159,1162
1162,1163
1163,1164
1163,1165
1164,1165
1166,1167
1168,1169
1168,1170
1169,1170
1169,1171
1170,1171
1172,1173
1174,1175
1174,1176
1174,1177
1175,1176
1176,1177
1176,1178
1177,1178
1177,1179
1178,1179
1181,1182
1183,1184
1184,1185
1184,1186
1185,1186
1187,1188
1190,1191
1191,1192
1191,1193
1193,1194
1193,1195
1193,1196
1196,1197
1197,1198
1199,1200
1200,1201
1200,1202
1200,1203
1200,1204
1201,1202
1203,1204
1205,1206
1205,1207
1206,1207
1209,1210
1209,1211
1210,1211
1213,1214
1214,1215
1214,1216
1215,1216
1217,1218
1219,1220
1219,1221
1220,1221
1220,1222
1221,1222
1221,1223
1222,1223
1222,1224
1223,1224
1226,1227
1226,1228
1227,1228
1231,1232
1231,1233
1232,1233
1233,1234
1233,1235
1234,1235
1235,1236
1236,1237
1237,1238
1240,1241
1241,1242
1241,1243
1242,1243
1243,1244
1246,1247
1247,1248
1247,1249
1249,1250
1249,1251
1249,1252
1252,1253
1254,1255
1255,1256
1255,1257
1255,1258
1255,1259
1256,1257
1258,1259
1260,1261
1260,1262
1261,1262
1264,1265
1264,1266
1265,1266
1268,1269
1268,1270
1268,1271
1268,1272
1269,1270
1270,1271
1270,1272
1271,1272
1273,1274
1273,1275
1275,1276
1277,1278
1277,1279
1278,1279
1280,1281
1282,1283
1283,1284
1285,1286
1286,1287
1286,1288
1287,1288
1287,1289
1288,1289
1288,1290
1289,1290
1291,1292
1294,1295
1295,1296
1295,1297
1296,1297
1296,1298
1297,1298
1299,1300
1302,1303
1303,1304
1303,1305
1303,1306
1303,1307
1304,1305
1306,1307
1306,1308
1307,1308
1309,1310
1311,1312
1313,1314
1313,1315
1314,1315
1314,1316
1315,1316
1317,1318
1320,1321
1321,1322
1321,1323
1322,1323
1322,1324
1323,1324
1326,1327
1328,1329
1328,1330
1329,1330
1330,1331
1330,1332
1331,1332
1333,1334
1333,1335
1334,1335
1337,1338
1337,1339
1337,1340
1338,1339
1339,1340
1339,1341
1340,1341
1340,1342
1341,1342
1344,1345
1344,1346
1345,1346
1347,1348
1349,1350
1349,1351
1350,1351
1350,1352
1351,1352
1351,1353
1352,1353
1355,1356
1357,1358
1357,1359
1358,1359
1359,1360
1359,1361
1360,1361
1362,1363
1365,1366
1366,1367
1366,1368
1367,1368
1369,1370
1369,1371
1370,1371
1373,1374
1374,1375
1374,1376
1375,1376
1377,1378
1377,1379
1377,1380
1380,1381
1381,1382
1383,1384
1384,1385
1384,1386
1384,1387
1385,1386
1387,1388
1389,1390
1389,1391
1390,1391
1393,1394
1394,1395
1394,1396
1395,1396
1396,1397
1396,1398
1397,1398
1399,1400
1399,1401
1399,1402
1400,1401
1400,1402
1401,1402
1404,1405
1404,1406
1405,1406
1408,1409
1410,1411
1410,1412
1411,1412
1411,1413
1412,1413
1414,1415
1416,1417
1418,1419
1419,1420
1419,1421
1420,1421
1422,1423
1424,1425
1424,1426
1425,1426
1425,1427
1426,1427
1426,1428
1427,1428
1431,1432
1432,1433
1432,1434
1433,1434
1433,1435
1434,1435
1437,1438
1438,1439
1440,1441
1440,1442
1441,1442
1441,1443
1442,1443
1442,1444
1443,1444
1447,1448
1448,1449
1448,1450
1449,1450
1449,1451
1450,1451
1453,1454
1454,1455
1456,1457
1457,1458
-----nextToken-----
2,4,7,9,10,16,17,19,25,26,29,31,36,37,39,43,48,49,50,56,57,59,64,65,66,72,73,75,80,81,82,88,89,91,96,97,98,104,105,107,111,113,114,119,120,121,128,129,130,133,135,140,143,147,148,152,154,155,159,160,164,168,169,171,172,173,179,180,181,183,186,193,194,195,197,201,203,204,208,210,214,216,217,219,223,225,227,231,232,236,239,242,243,245,248,253,257,258,260,262,263,267,269,274,278,279,280,285,286,291,295,296,297,302,306,307,309,314,315,316,322,323,325,330,331,332,338,339,341,346,347,348,353,354,356,361,362,364,370,371,374,376,381,382,385,388,389,393,394,400,401,404,407,408,411,412,415,417,420,425,428,429,435,436,439,441,446,447,449,453,457,459,460,463,467,469,472,473,479,483,484,487,488,490,494,496,500,503,505,507,511,513,514,518,521,522,524,528,530,534,536,541,543,546,548,551,553,558,560,561,566,568,572,574,579,580,581,587,588,591,592,597,598,599,605,606,609,610,615,616,617,623,624,627,628,633,634,635,641,642,645,646,651,652,653,659,660,663,664,669,670,671,677,678,681,682,687,688,689,695,696,699,700,705,706,707,713,714,717,718,723,724,725,731,732,735,736,741,742,744,750,751,754,757,758,759,764,765,770,772,773,779,780,783,784,790,791,794,797,798,804,805,808,809,815,816,819,822,823,828,829,835,836,837,842,843,844,850,851,854,855,859,864,865,866,870,871,872,876,877,883,884,885,891,895,896,897,901,905,906,907,912,915,916,917,921,925,926,927,931,935,936,937,942,943,946,949,950,953,954,959,960,963,966,967,970,971,975,976,982,983,986,989,990,993,994,1001,1002,1004,1008,1009,1011,1016,1017,1021,1022,1024,1029,1032,1033,1037,1040,1041,1045,1048,1049,1053,1055,1056,1061,1064,1065,1070,1071,1074,1075,1079,1081,1082,1087,1088,1092,1095,1096,1101,1102,1105,1106,1110,1112,1113,1117,1119,1123,1126,1127,1131,1133,1137,1140,1141,1145,1147,1152,1154,1155,1158,1160,1161,1165,1167,1171,1173,1179,1180,1182,1186,1188,1189,1192,1194,1195,1198,1202,1204,1207,1208,1211,1212,1216,1218,1224,1225,1228,1229,1230,1238,1239,1244,1245,1248,1250,1251,1253,1257,1259,1262,1263,1266,1267,1272,1274,1276,1279,1281,1284,1290,1292,1293,1298,1300,1301,1305,1308,1310,1312,1316,1318,1319,1324,1325,1327,1332,1335,1336,1342,1343,1346,1348,1353,1354,1356,1361,1363,1364,1368,1371,1372,1376,1378,1379,1382,1386,1388,1391,1392,1398,1402,1403,1406,1407,1409,1413,1415,1417,1421,1423,1428,1429,1430,1435,1436,1439,1444,1445,1446,1451,1452,1455,1458
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
45,46
45,47
53,54
53,55
61,62
61,63
69,70
69,71
77,78
77,79
85,86
85,87
93,94
93,95
101,102
101,103
123,124
123,125
131,132
131,133
138,139
138,140
175,176
175,177
189,190
189,191
234,235
234,236
288,289
288,290
311,312
311,313
319,320
319,321
327,328
327,329
335,336
335,337
343,344
343,345
350,351
350,352
358,359
358,360
367,368
367,369
378,379
378,380
397,398
397,399
432,433
432,434
443,444
443,445
477,478
477,479
492,493
492,494
526,527
526,528
537,538
537,539
544,545
544,546
576,577
576,578
584,585
584,586
594,595
594,596
602,603
602,604
612,613
612,614
620,621
620,622
630,631
630,632
638,639
638,640
648,649
648,650
656,657
656,658
666,667
666,668
674,675
674,676
684,685
684,686
692,693
692,694
702,703
702,704
710,711
710,712
720,721
720,722
728,729
728,730
738,739
738,740
747,748
747,749
768,769
768,770
775,776
775,777
787,788
787,789
800,801
800,802
812,813
812,814
832,833
832,834
839,840
839,841
847,848
847,849
860,861
860,862
861,862
861,863
867,868
867,869
880,881
880,882
887,888
887,889
939,940
939,941
956,957
956,958
979,980
979,981
996,997
996,998
997,998
997,999
998,999
998,1000
1005,1006
1005,1007
1013,1014
1013,1015
1018,1019
1018,1020
1051,1052
1051,1053
1077,1078
1077,1079
1084,1085
1084,1086
1108,1109
1108,1110
1149,1150
1149,1151
1150,1151
1150,1152
1169,1170
1169,1171
1176,1177
1176,1178
1184,1185
1184,1186
1209,1210
1209,1211
1214,1215
1214,1216
1220,1221
1220,1222
1226,1227
1226,1228
1233,1234
1233,1235
1241,1242
1241,1243
1264,1265
1264,1266
1277,1278
1277,1279
1287,1288
1287,1289
1295,1296
1295,1297
1306,1307
1306,1308
1313,1314
1313,1315
1321,1322
1321,1323
1339,1340
1339,1341
1350,1351
1350,1352
1359,1360
1359,1361
1396,1397
1396,1398
1411,1412
1411,1413
1425,1426
1425,1427
1432,1433
1432,1434
1441,1442
1441,1443
1448,1449
1448,1450
-----guardedBy-----
19,39
16,36
17,37
48,56
49,57
64,72
65,73
80,88
81,89
96,104
97,105
133,183
128,179
129,180
193,257
197,260
194,258
295,306
296,307
314,322
315,323
330,338
331,339
347,354
346,353
361,370
362,371
494,500
579,587
580,592
597,605
598,610
615,623
616,624
633,641
634,646
651,659
652,664
669,677
670,682
688,700
687,695
705,713
706,718
723,731
724,736
742,765
741,764
779,790
783,797
784,798
804,815
809,823
808,822
842,850
843,855
897,927
905,935
907,937
906,936
1009,1041
1021,1048
1022,1049
1002,1033
1095,1105
1096,1106
1173,1182
1292,1300
1290,1298
1429,1436
1428,1435
1445,1452
1444,1451
-----guardedByNegation-----
193,306
194,307
-----lastLexicalUse-----
193,306
194,307
-----jump-----
193,306
194,307
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int conf_process(conf_t *conf){	// Create PID file	if (conf->rundir == NULL) {		conf->rundir = strdup(RUN_DIR);		if (conf->rundir == NULL) {			return KNOT_ENOMEM;		}	}	/* Default TCP/UDP limits. */	if (conf->max_conn_idle < 1) {		conf->max_conn_idle = CONFIG_IDLE_WD;	}	if (conf->max_conn_hs < 1) {		conf->max_conn_hs = CONFIG_HANDSHAKE_WD;	}	if (conf->max_conn_reply < 1) {		conf->max_conn_reply = CONFIG_REPLY_WD;	}	if (conf->max_tcp_clients < 1) {		conf->max_tcp_clients = CONFIG_MAXTCP;	}	/* Default interface. */	conf_iface_t *ctl_if = conf->ctl.iface;	if (!conf->ctl.have && ctl_if == NULL) {		ctl_if = malloc(sizeof(conf_iface_t));		memset(ctl_if, 0, sizeof(conf_iface_t));		sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0);		conf->ctl.iface = ctl_if;	}	/* Control interface. */	if (ctl_if) {		if (ctl_if->addr.ss_family == AF_UNIX) {			char *full_path = malloc(SOCKADDR_STRLEN);			memset(full_path, 0, SOCKADDR_STRLEN);			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);			/* Convert to absolute path. */			full_path = conf_abs_path(conf->rundir, full_path);			if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}			/* Check for ACL existence. */			if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}		} else if (sockaddr_port(&ctl_if->addr) <= 0) {			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}	}	/* Default RRL limits. */	if (conf->rrl_slip < 0) {		conf->rrl_slip = CONFIG_RRL_SLIP;	}	if (conf->rrl_size == 0) {		conf->rrl_size = CONFIG_RRL_SIZE;	}	/* Default parallel transfers. */	if (conf->xfers <= 0)		conf->xfers = CONFIG_XFERS;	/* Zones global configuration. */	if (conf->storage == NULL) {		conf->storage = strdup(STORAGE_DIR);	}	conf->storage = strcpath(conf->storage);	if (conf->dnssec_keydir) {		conf->dnssec_keydir = conf_abs_path(conf->storage,		                                    conf->dnssec_keydir);	}	// Postprocess zones	int ret = KNOT_EOK;	/* Initialize query plan if modules exist. */	if (!EMPTY_LIST(conf->query_modules)) {		conf->query_plan = query_plan_create(NULL);		if (conf->query_plan == NULL) {			return KNOT_ENOMEM;		}	}	/* Load query modules. */	struct query_module *module = NULL;	WALK_LIST(module, conf->query_modules) {		ret = module->load(conf->query_plan, module);		if (ret != KNOT_EOK) {			return ret;		}	}	const bool sorted = false;	hattrie_iter_t *z_iter = hattrie_iter_begin(conf->zones, sorted);	if (z_iter == NULL) {		return KNOT_ERROR;	}	for (; !hattrie_iter_finished(z_iter) && ret == KNOT_EOK; hattrie_iter_next(z_iter)) {		conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);		// Default policy for dbsync timeout		if (zone->dbsync_timeout < 0) {			zone->dbsync_timeout = conf->dbsync_timeout;		}		// Default policy for ixfr-from-differences		if (zone->build_diffs < 0) {			zone->build_diffs = conf->build_diffs;		}		// Default policy for semantic checks		if (zone->enable_checks < 0) {			zone->enable_checks = conf->zone_checks;		}		// Default policy for disabling ANY type queries for AA		if (zone->disable_any < 0) {			zone->disable_any = conf->disable_any;		}		// Default policy for NOTIFY retries		if (zone->notify_retries <= 0) {			zone->notify_retries = conf->notify_retries;		}		// Default policy for NOTIFY timeout		if (zone->notify_timeout <= 0) {			zone->notify_timeout = conf->notify_timeout;		}		// Default policy for IXFR FSLIMIT		if (zone->ixfr_fslimit == 0) { /* ixfr_fslimit is unsigned type */			zone->ixfr_fslimit = conf->ixfr_fslimit;		}		// Default policy for DNSSEC signature lifetime		if (zone->sig_lifetime <= 0) {			zone->sig_lifetime = conf->sig_lifetime;		}		if (zone->serial_policy == 0) {			zone->serial_policy = conf->serial_policy;		}		// Default zone file		if (zone->file == NULL) {			zone->file = strcdup(zone->name, "zone");			if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}		}		// Default data directories		if (!zone->storage && conf->storage) {			zone->storage = strdup(conf->storage);		}		if (!zone->dnssec_keydir && conf->dnssec_keydir) {			zone->dnssec_keydir = strdup(conf->dnssec_keydir);		}		// Default policy for DNSSEC		if (!zone->dnssec_keydir) {			zone->dnssec_enable = 0;		} else if (zone->dnssec_enable < 0) {			zone->dnssec_enable = conf->dnssec_enable;		}		assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1);		// DNSSEC required settings		if (zone->dnssec_enable) {			// Enable zone diffs (silently)			zone->build_diffs = true;			// Disable incoming XFRs			if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}		}		// Resolve relative paths everywhere		zone->storage = conf_abs_path(conf->storage, zone->storage);		zone->file = conf_abs_path(zone->storage, zone->file);		if (zone->dnssec_enable) {			zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);		}		if (zone->storage == NULL ||		    zone->file == NULL ||		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)		) {			free(zone->storage);			free(zone->file);			free(zone->dnssec_keydir);			ret = KNOT_ENOMEM;			continue;		}		/* Check paths existence. */		if (!is_existing_dir(zone->storage)) {			log_error("storage directory '%s' does not exist",			          zone->storage);			ret = KNOT_EINVAL;			continue;		}		if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)) {			log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);			ret = KNOT_EINVAL;			continue;		}		/* Create journal filename. */		size_t zname_len = strlen(zone->name);		size_t stor_len = strlen(zone->storage);		size_t size = stor_len + zname_len + 9; // /diff.db,\0		char *dest = malloc(size);		if (dest == NULL) {			zone->ixfr_db = NULL; /* Not enough memory. */			ret = KNOT_ENOMEM; /* Error report. */			continue;		}		char *dpos = dest;		memcpy(dpos, zone->storage, stor_len + 1);		dpos += stor_len;		if (zone->storage[stor_len - 1] != '/') {			*(dpos++) = '/';			*dpos = '\0';		}		const char *dbext = "diff.db";		memcpy(dpos, zone->name, zname_len + 1);		for (size_t i = 0; i < zname_len; ++i) {			if (dpos[i] == '/') dpos[i] = '_';		}		memcpy(dpos + zname_len, dbext, strlen(dbext) + 1);		zone->ixfr_db = dest;		/* Initialize query plan if modules exist. */		if (!EMPTY_LIST(zone->query_modules)) {			zone->query_plan = query_plan_create(NULL);			if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}			/* Only supported zone class is now IN. */			internet_query_plan(zone->query_plan);		}		/* Load query modules. */		struct query_module *module = NULL;		WALK_LIST(module, zone->query_modules) {			ret = module->load(zone->query_plan, module);			if (ret != KNOT_EOK) {				break;			}		}	}	hattrie_iter_free(z_iter);	/* Update UID and GID. */	if (conf->uid < 0) conf->uid = getuid();	if (conf->gid < 0) conf->gid = getgid();	return ret;}
static int
conf_process(conf_t *conf)
conf_process
conf_t *conf
conf_t
conf_t
*conf
*
conf
{	// Create PID file	if (conf->rundir == NULL) {		conf->rundir = strdup(RUN_DIR);		if (conf->rundir == NULL) {			return KNOT_ENOMEM;		}	}	/* Default TCP/UDP limits. */	if (conf->max_conn_idle < 1) {		conf->max_conn_idle = CONFIG_IDLE_WD;	}	if (conf->max_conn_hs < 1) {		conf->max_conn_hs = CONFIG_HANDSHAKE_WD;	}	if (conf->max_conn_reply < 1) {		conf->max_conn_reply = CONFIG_REPLY_WD;	}	if (conf->max_tcp_clients < 1) {		conf->max_tcp_clients = CONFIG_MAXTCP;	}	/* Default interface. */	conf_iface_t *ctl_if = conf->ctl.iface;	if (!conf->ctl.have && ctl_if == NULL) {		ctl_if = malloc(sizeof(conf_iface_t));		memset(ctl_if, 0, sizeof(conf_iface_t));		sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0);		conf->ctl.iface = ctl_if;	}	/* Control interface. */	if (ctl_if) {		if (ctl_if->addr.ss_family == AF_UNIX) {			char *full_path = malloc(SOCKADDR_STRLEN);			memset(full_path, 0, SOCKADDR_STRLEN);			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);			/* Convert to absolute path. */			full_path = conf_abs_path(conf->rundir, full_path);			if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}			/* Check for ACL existence. */			if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}		} else if (sockaddr_port(&ctl_if->addr) <= 0) {			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}	}	/* Default RRL limits. */	if (conf->rrl_slip < 0) {		conf->rrl_slip = CONFIG_RRL_SLIP;	}	if (conf->rrl_size == 0) {		conf->rrl_size = CONFIG_RRL_SIZE;	}	/* Default parallel transfers. */	if (conf->xfers <= 0)		conf->xfers = CONFIG_XFERS;	/* Zones global configuration. */	if (conf->storage == NULL) {		conf->storage = strdup(STORAGE_DIR);	}	conf->storage = strcpath(conf->storage);	if (conf->dnssec_keydir) {		conf->dnssec_keydir = conf_abs_path(conf->storage,		                                    conf->dnssec_keydir);	}	// Postprocess zones	int ret = KNOT_EOK;	/* Initialize query plan if modules exist. */	if (!EMPTY_LIST(conf->query_modules)) {		conf->query_plan = query_plan_create(NULL);		if (conf->query_plan == NULL) {			return KNOT_ENOMEM;		}	}	/* Load query modules. */	struct query_module *module = NULL;	WALK_LIST(module, conf->query_modules) {		ret = module->load(conf->query_plan, module);		if (ret != KNOT_EOK) {			return ret;		}	}	const bool sorted = false;	hattrie_iter_t *z_iter = hattrie_iter_begin(conf->zones, sorted);	if (z_iter == NULL) {		return KNOT_ERROR;	}	for (; !hattrie_iter_finished(z_iter) && ret == KNOT_EOK; hattrie_iter_next(z_iter)) {		conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);		// Default policy for dbsync timeout		if (zone->dbsync_timeout < 0) {			zone->dbsync_timeout = conf->dbsync_timeout;		}		// Default policy for ixfr-from-differences		if (zone->build_diffs < 0) {			zone->build_diffs = conf->build_diffs;		}		// Default policy for semantic checks		if (zone->enable_checks < 0) {			zone->enable_checks = conf->zone_checks;		}		// Default policy for disabling ANY type queries for AA		if (zone->disable_any < 0) {			zone->disable_any = conf->disable_any;		}		// Default policy for NOTIFY retries		if (zone->notify_retries <= 0) {			zone->notify_retries = conf->notify_retries;		}		// Default policy for NOTIFY timeout		if (zone->notify_timeout <= 0) {			zone->notify_timeout = conf->notify_timeout;		}		// Default policy for IXFR FSLIMIT		if (zone->ixfr_fslimit == 0) { /* ixfr_fslimit is unsigned type */			zone->ixfr_fslimit = conf->ixfr_fslimit;		}		// Default policy for DNSSEC signature lifetime		if (zone->sig_lifetime <= 0) {			zone->sig_lifetime = conf->sig_lifetime;		}		if (zone->serial_policy == 0) {			zone->serial_policy = conf->serial_policy;		}		// Default zone file		if (zone->file == NULL) {			zone->file = strcdup(zone->name, "zone");			if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}		}		// Default data directories		if (!zone->storage && conf->storage) {			zone->storage = strdup(conf->storage);		}		if (!zone->dnssec_keydir && conf->dnssec_keydir) {			zone->dnssec_keydir = strdup(conf->dnssec_keydir);		}		// Default policy for DNSSEC		if (!zone->dnssec_keydir) {			zone->dnssec_enable = 0;		} else if (zone->dnssec_enable < 0) {			zone->dnssec_enable = conf->dnssec_enable;		}		assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1);		// DNSSEC required settings		if (zone->dnssec_enable) {			// Enable zone diffs (silently)			zone->build_diffs = true;			// Disable incoming XFRs			if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}		}		// Resolve relative paths everywhere		zone->storage = conf_abs_path(conf->storage, zone->storage);		zone->file = conf_abs_path(zone->storage, zone->file);		if (zone->dnssec_enable) {			zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);		}		if (zone->storage == NULL ||		    zone->file == NULL ||		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)		) {			free(zone->storage);			free(zone->file);			free(zone->dnssec_keydir);			ret = KNOT_ENOMEM;			continue;		}		/* Check paths existence. */		if (!is_existing_dir(zone->storage)) {			log_error("storage directory '%s' does not exist",			          zone->storage);			ret = KNOT_EINVAL;			continue;		}		if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)) {			log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);			ret = KNOT_EINVAL;			continue;		}		/* Create journal filename. */		size_t zname_len = strlen(zone->name);		size_t stor_len = strlen(zone->storage);		size_t size = stor_len + zname_len + 9; // /diff.db,\0		char *dest = malloc(size);		if (dest == NULL) {			zone->ixfr_db = NULL; /* Not enough memory. */			ret = KNOT_ENOMEM; /* Error report. */			continue;		}		char *dpos = dest;		memcpy(dpos, zone->storage, stor_len + 1);		dpos += stor_len;		if (zone->storage[stor_len - 1] != '/') {			*(dpos++) = '/';			*dpos = '\0';		}		const char *dbext = "diff.db";		memcpy(dpos, zone->name, zname_len + 1);		for (size_t i = 0; i < zname_len; ++i) {			if (dpos[i] == '/') dpos[i] = '_';		}		memcpy(dpos + zname_len, dbext, strlen(dbext) + 1);		zone->ixfr_db = dest;		/* Initialize query plan if modules exist. */		if (!EMPTY_LIST(zone->query_modules)) {			zone->query_plan = query_plan_create(NULL);			if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}			/* Only supported zone class is now IN. */			internet_query_plan(zone->query_plan);		}		/* Load query modules. */		struct query_module *module = NULL;		WALK_LIST(module, zone->query_modules) {			ret = module->load(zone->query_plan, module);			if (ret != KNOT_EOK) {				break;			}		}	}	hattrie_iter_free(z_iter);	/* Update UID and GID. */	if (conf->uid < 0) conf->uid = getuid();	if (conf->gid < 0) conf->gid = getgid();	return ret;}
if (conf->rundir == NULL) {		conf->rundir = strdup(RUN_DIR);		if (conf->rundir == NULL) {			return KNOT_ENOMEM;		}	}
conf->rundir == NULL
conf->rundir
conf
conf
rundir
NULL
NULL
{		conf->rundir = strdup(RUN_DIR);		if (conf->rundir == NULL) {			return KNOT_ENOMEM;		}	}
conf->rundir = strdup(RUN_DIR);
conf->rundir = strdup(RUN_DIR)
conf->rundir
conf
conf
rundir
strdup(RUN_DIR)
strdup
strdup
RUN_DIR
RUN_DIR
if (conf->rundir == NULL) {			return KNOT_ENOMEM;		}
conf->rundir == NULL
conf->rundir
conf
conf
rundir
NULL
NULL
{			return KNOT_ENOMEM;		}
return KNOT_ENOMEM;
KNOT_ENOMEM
KNOT_ENOMEM
if (conf->max_conn_idle < 1) {		conf->max_conn_idle = CONFIG_IDLE_WD;	}
conf->max_conn_idle < 1
conf->max_conn_idle
conf
conf
max_conn_idle
1
{		conf->max_conn_idle = CONFIG_IDLE_WD;	}
conf->max_conn_idle = CONFIG_IDLE_WD;
conf->max_conn_idle = CONFIG_IDLE_WD
conf->max_conn_idle
conf
conf
max_conn_idle
CONFIG_IDLE_WD
CONFIG_IDLE_WD
if (conf->max_conn_hs < 1) {		conf->max_conn_hs = CONFIG_HANDSHAKE_WD;	}
conf->max_conn_hs < 1
conf->max_conn_hs
conf
conf
max_conn_hs
1
{		conf->max_conn_hs = CONFIG_HANDSHAKE_WD;	}
conf->max_conn_hs = CONFIG_HANDSHAKE_WD;
conf->max_conn_hs = CONFIG_HANDSHAKE_WD
conf->max_conn_hs
conf
conf
max_conn_hs
CONFIG_HANDSHAKE_WD
CONFIG_HANDSHAKE_WD
if (conf->max_conn_reply < 1) {		conf->max_conn_reply = CONFIG_REPLY_WD;	}
conf->max_conn_reply < 1
conf->max_conn_reply
conf
conf
max_conn_reply
1
{		conf->max_conn_reply = CONFIG_REPLY_WD;	}
conf->max_conn_reply = CONFIG_REPLY_WD;
conf->max_conn_reply = CONFIG_REPLY_WD
conf->max_conn_reply
conf
conf
max_conn_reply
CONFIG_REPLY_WD
CONFIG_REPLY_WD
if (conf->max_tcp_clients < 1) {		conf->max_tcp_clients = CONFIG_MAXTCP;	}
conf->max_tcp_clients < 1
conf->max_tcp_clients
conf
conf
max_tcp_clients
1
{		conf->max_tcp_clients = CONFIG_MAXTCP;	}
conf->max_tcp_clients = CONFIG_MAXTCP;
conf->max_tcp_clients = CONFIG_MAXTCP
conf->max_tcp_clients
conf
conf
max_tcp_clients
CONFIG_MAXTCP
CONFIG_MAXTCP
conf_iface_t *ctl_if = conf->ctl.iface;
conf_iface_t *ctl_if = conf->ctl.iface;
conf_iface_t
conf_iface_t
*ctl_if = conf->ctl.iface
*
ctl_if
= conf->ctl.iface
conf->ctl.iface
conf->ctl
conf
conf
ctl
iface
if (!conf->ctl.have && ctl_if == NULL) {		ctl_if = malloc(sizeof(conf_iface_t));		memset(ctl_if, 0, sizeof(conf_iface_t));		sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0);		conf->ctl.iface = ctl_if;	}
!conf->ctl.have && ctl_if == NULL
!conf->ctl.have
conf->ctl.have
conf->ctl
conf
conf
ctl
have
ctl_if == NULL
ctl_if
ctl_if
NULL
NULL
{		ctl_if = malloc(sizeof(conf_iface_t));		memset(ctl_if, 0, sizeof(conf_iface_t));		sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0);		conf->ctl.iface = ctl_if;	}
ctl_if = malloc(sizeof(conf_iface_t));
ctl_if = malloc(sizeof(conf_iface_t))
ctl_if
ctl_if
malloc(sizeof(conf_iface_t))
malloc
malloc
sizeof(conf_iface_t)
conf_iface_t
conf_iface_t
conf_iface_t

memset(ctl_if, 0, sizeof(conf_iface_t));
memset(ctl_if, 0, sizeof(conf_iface_t))
memset
memset
ctl_if
ctl_if
0
sizeof(conf_iface_t)
conf_iface_t
conf_iface_t
conf_iface_t

sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0);
sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0)
sockaddr_set
sockaddr_set
&ctl_if->addr
ctl_if->addr
ctl_if
ctl_if
addr
AF_UNIX
AF_UNIX
"knot.sock"
0
conf->ctl.iface = ctl_if;
conf->ctl.iface = ctl_if
conf->ctl.iface
conf->ctl
conf
conf
ctl
iface
ctl_if
ctl_if
if (ctl_if) {		if (ctl_if->addr.ss_family == AF_UNIX) {			char *full_path = malloc(SOCKADDR_STRLEN);			memset(full_path, 0, SOCKADDR_STRLEN);			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);			/* Convert to absolute path. */			full_path = conf_abs_path(conf->rundir, full_path);			if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}			/* Check for ACL existence. */			if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}		} else if (sockaddr_port(&ctl_if->addr) <= 0) {			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}	}
ctl_if
ctl_if
{		if (ctl_if->addr.ss_family == AF_UNIX) {			char *full_path = malloc(SOCKADDR_STRLEN);			memset(full_path, 0, SOCKADDR_STRLEN);			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);			/* Convert to absolute path. */			full_path = conf_abs_path(conf->rundir, full_path);			if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}			/* Check for ACL existence. */			if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}		} else if (sockaddr_port(&ctl_if->addr) <= 0) {			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}	}
if (ctl_if->addr.ss_family == AF_UNIX) {			char *full_path = malloc(SOCKADDR_STRLEN);			memset(full_path, 0, SOCKADDR_STRLEN);			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);			/* Convert to absolute path. */			full_path = conf_abs_path(conf->rundir, full_path);			if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}			/* Check for ACL existence. */			if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}		} else if (sockaddr_port(&ctl_if->addr) <= 0) {			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}
ctl_if->addr.ss_family == AF_UNIX
ctl_if->addr.ss_family
ctl_if->addr
ctl_if
ctl_if
addr
ss_family
AF_UNIX
AF_UNIX
{			char *full_path = malloc(SOCKADDR_STRLEN);			memset(full_path, 0, SOCKADDR_STRLEN);			sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);			/* Convert to absolute path. */			full_path = conf_abs_path(conf->rundir, full_path);			if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}			/* Check for ACL existence. */			if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}		}
char *full_path = malloc(SOCKADDR_STRLEN);
char *full_path = malloc(SOCKADDR_STRLEN);
char
*full_path = malloc(SOCKADDR_STRLEN)
*
full_path
= malloc(SOCKADDR_STRLEN)
malloc(SOCKADDR_STRLEN)
malloc
malloc
SOCKADDR_STRLEN
SOCKADDR_STRLEN
memset(full_path, 0, SOCKADDR_STRLEN);
memset(full_path, 0, SOCKADDR_STRLEN)
memset
memset
full_path
full_path
0
SOCKADDR_STRLEN
SOCKADDR_STRLEN
sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr);
sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr)
sockaddr_tostr
sockaddr_tostr
full_path
full_path
SOCKADDR_STRLEN
SOCKADDR_STRLEN
&ctl_if->addr
ctl_if->addr
ctl_if
ctl_if
addr
full_path = conf_abs_path(conf->rundir, full_path);
full_path = conf_abs_path(conf->rundir, full_path)
full_path
full_path
conf_abs_path(conf->rundir, full_path)
conf_abs_path
conf_abs_path
conf->rundir
conf
conf
rundir
full_path
full_path
if(full_path) {				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}
full_path
full_path
{				sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);				free(full_path);			}
sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0);
sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0)
sockaddr_set
sockaddr_set
&ctl_if->addr
ctl_if->addr
ctl_if
ctl_if
addr
AF_UNIX
AF_UNIX
full_path
full_path
0
free(full_path);
free(full_path)
free
free
full_path
full_path
if (!EMPTY_LIST(conf->ctl.allow)) {				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}
!EMPTY_LIST(conf->ctl.allow)
EMPTY_LIST(conf->ctl.allow)
EMPTY_LIST
EMPTY_LIST
conf->ctl.allow
conf->ctl
conf
conf
ctl
allow
{				log_warning("control 'allow' statement does not "				            "affect UNIX sockets");			}
log_warning("control 'allow' statement does not "				            "affect UNIX sockets");
log_warning("control 'allow' statement does not "				            "affect UNIX sockets")
log_warning
log_warning
"control 'allow' statement does not "				            "affect UNIX sockets"
if (sockaddr_port(&ctl_if->addr) <= 0) {			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}
sockaddr_port(&ctl_if->addr) <= 0
sockaddr_port(&ctl_if->addr)
sockaddr_port
sockaddr_port
&ctl_if->addr
ctl_if->addr
ctl_if
ctl_if
addr
0
{			sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);		}
sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT);
sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT)
sockaddr_port_set
sockaddr_port_set
&ctl_if->addr
ctl_if->addr
ctl_if
ctl_if
addr
REMOTE_DPORT
REMOTE_DPORT
if (conf->rrl_slip < 0) {		conf->rrl_slip = CONFIG_RRL_SLIP;	}
conf->rrl_slip < 0
conf->rrl_slip
conf
conf
rrl_slip
0
{		conf->rrl_slip = CONFIG_RRL_SLIP;	}
conf->rrl_slip = CONFIG_RRL_SLIP;
conf->rrl_slip = CONFIG_RRL_SLIP
conf->rrl_slip
conf
conf
rrl_slip
CONFIG_RRL_SLIP
CONFIG_RRL_SLIP
if (conf->rrl_size == 0) {		conf->rrl_size = CONFIG_RRL_SIZE;	}
conf->rrl_size == 0
conf->rrl_size
conf
conf
rrl_size
0
{		conf->rrl_size = CONFIG_RRL_SIZE;	}
conf->rrl_size = CONFIG_RRL_SIZE;
conf->rrl_size = CONFIG_RRL_SIZE
conf->rrl_size
conf
conf
rrl_size
CONFIG_RRL_SIZE
CONFIG_RRL_SIZE
if (conf->xfers <= 0)		conf->xfers = CONFIG_XFERS;
conf->xfers <= 0
conf->xfers
conf
conf
xfers
0
conf->xfers = CONFIG_XFERS;
conf->xfers = CONFIG_XFERS
conf->xfers
conf
conf
xfers
CONFIG_XFERS
CONFIG_XFERS
if (conf->storage == NULL) {		conf->storage = strdup(STORAGE_DIR);	}
conf->storage == NULL
conf->storage
conf
conf
storage
NULL
NULL
{		conf->storage = strdup(STORAGE_DIR);	}
conf->storage = strdup(STORAGE_DIR);
conf->storage = strdup(STORAGE_DIR)
conf->storage
conf
conf
storage
strdup(STORAGE_DIR)
strdup
strdup
STORAGE_DIR
STORAGE_DIR
conf->storage = strcpath(conf->storage);
conf->storage = strcpath(conf->storage)
conf->storage
conf
conf
storage
strcpath(conf->storage)
strcpath
strcpath
conf->storage
conf
conf
storage
if (conf->dnssec_keydir) {		conf->dnssec_keydir = conf_abs_path(conf->storage,		                                    conf->dnssec_keydir);	}
conf->dnssec_keydir
conf
conf
dnssec_keydir
{		conf->dnssec_keydir = conf_abs_path(conf->storage,		                                    conf->dnssec_keydir);	}
conf->dnssec_keydir = conf_abs_path(conf->storage,		                                    conf->dnssec_keydir);
conf->dnssec_keydir = conf_abs_path(conf->storage,		                                    conf->dnssec_keydir)
conf->dnssec_keydir
conf
conf
dnssec_keydir
conf_abs_path(conf->storage,		                                    conf->dnssec_keydir)
conf_abs_path
conf_abs_path
conf->storage
conf
conf
storage
conf->dnssec_keydir
conf
conf
dnssec_keydir
int ret = KNOT_EOK;
int ret = KNOT_EOK;
int
ret = KNOT_EOK
ret
= KNOT_EOK
KNOT_EOK
KNOT_EOK
if (!EMPTY_LIST(conf->query_modules)) {		conf->query_plan = query_plan_create(NULL);		if (conf->query_plan == NULL) {			return KNOT_ENOMEM;		}	}
!EMPTY_LIST(conf->query_modules)
EMPTY_LIST(conf->query_modules)
EMPTY_LIST
EMPTY_LIST
conf->query_modules
conf
conf
query_modules
{		conf->query_plan = query_plan_create(NULL);		if (conf->query_plan == NULL) {			return KNOT_ENOMEM;		}	}
conf->query_plan = query_plan_create(NULL);
conf->query_plan = query_plan_create(NULL)
conf->query_plan
conf
conf
query_plan
query_plan_create(NULL)
query_plan_create
query_plan_create
NULL
NULL
if (conf->query_plan == NULL) {			return KNOT_ENOMEM;		}
conf->query_plan == NULL
conf->query_plan
conf
conf
query_plan
NULL
NULL
{			return KNOT_ENOMEM;		}
return KNOT_ENOMEM;
KNOT_ENOMEM
KNOT_ENOMEM
struct query_module *module = NULL;
struct query_module *module = NULL;
struct query_module
query_module
*module = NULL
*
module
= NULL
NULL
NULL
WALK_LIST(module, conf->query_modules)
WALK_LIST(module, conf->query_modules)
WALK_LIST
WALK_LIST
module
module
conf->query_modules
conf
conf
query_modules
)
{		ret = module->load(conf->query_plan, module);		if (ret != KNOT_EOK) {			return ret;		}	}
ret = module->load(conf->query_plan, module);
ret = module->load(conf->query_plan, module)
ret
ret
module->load(conf->query_plan, module)
module->load
module
module
load
conf->query_plan
conf
conf
query_plan
module
module
if (ret != KNOT_EOK) {			return ret;		}
ret != KNOT_EOK
ret
ret
KNOT_EOK
KNOT_EOK
{			return ret;		}
return ret;
ret
ret
const bool sorted = false;
const bool sorted = false;
const bool
sorted = false
sorted
= false
false
hattrie_iter_t *z_iter = hattrie_iter_begin(conf->zones, sorted);
hattrie_iter_t *z_iter = hattrie_iter_begin(conf->zones, sorted);
hattrie_iter_t
hattrie_iter_t
*z_iter = hattrie_iter_begin(conf->zones, sorted)
*
z_iter
= hattrie_iter_begin(conf->zones, sorted)
hattrie_iter_begin(conf->zones, sorted)
hattrie_iter_begin
hattrie_iter_begin
conf->zones
conf
conf
zones
sorted
sorted
if (z_iter == NULL) {		return KNOT_ERROR;	}
z_iter == NULL
z_iter
z_iter
NULL
NULL
{		return KNOT_ERROR;	}
return KNOT_ERROR;
KNOT_ERROR
KNOT_ERROR
for (; !hattrie_iter_finished(z_iter) && ret == KNOT_EOK; hattrie_iter_next(z_iter)) {		conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);		// Default policy for dbsync timeout		if (zone->dbsync_timeout < 0) {			zone->dbsync_timeout = conf->dbsync_timeout;		}		// Default policy for ixfr-from-differences		if (zone->build_diffs < 0) {			zone->build_diffs = conf->build_diffs;		}		// Default policy for semantic checks		if (zone->enable_checks < 0) {			zone->enable_checks = conf->zone_checks;		}		// Default policy for disabling ANY type queries for AA		if (zone->disable_any < 0) {			zone->disable_any = conf->disable_any;		}		// Default policy for NOTIFY retries		if (zone->notify_retries <= 0) {			zone->notify_retries = conf->notify_retries;		}		// Default policy for NOTIFY timeout		if (zone->notify_timeout <= 0) {			zone->notify_timeout = conf->notify_timeout;		}		// Default policy for IXFR FSLIMIT		if (zone->ixfr_fslimit == 0) { /* ixfr_fslimit is unsigned type */			zone->ixfr_fslimit = conf->ixfr_fslimit;		}		// Default policy for DNSSEC signature lifetime		if (zone->sig_lifetime <= 0) {			zone->sig_lifetime = conf->sig_lifetime;		}		if (zone->serial_policy == 0) {			zone->serial_policy = conf->serial_policy;		}		// Default zone file		if (zone->file == NULL) {			zone->file = strcdup(zone->name, "zone");			if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}		}		// Default data directories		if (!zone->storage && conf->storage) {			zone->storage = strdup(conf->storage);		}		if (!zone->dnssec_keydir && conf->dnssec_keydir) {			zone->dnssec_keydir = strdup(conf->dnssec_keydir);		}		// Default policy for DNSSEC		if (!zone->dnssec_keydir) {			zone->dnssec_enable = 0;		} else if (zone->dnssec_enable < 0) {			zone->dnssec_enable = conf->dnssec_enable;		}		assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1);		// DNSSEC required settings		if (zone->dnssec_enable) {			// Enable zone diffs (silently)			zone->build_diffs = true;			// Disable incoming XFRs			if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}		}		// Resolve relative paths everywhere		zone->storage = conf_abs_path(conf->storage, zone->storage);		zone->file = conf_abs_path(zone->storage, zone->file);		if (zone->dnssec_enable) {			zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);		}		if (zone->storage == NULL ||		    zone->file == NULL ||		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)		) {			free(zone->storage);			free(zone->file);			free(zone->dnssec_keydir);			ret = KNOT_ENOMEM;			continue;		}		/* Check paths existence. */		if (!is_existing_dir(zone->storage)) {			log_error("storage directory '%s' does not exist",			          zone->storage);			ret = KNOT_EINVAL;			continue;		}		if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)) {			log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);			ret = KNOT_EINVAL;			continue;		}		/* Create journal filename. */		size_t zname_len = strlen(zone->name);		size_t stor_len = strlen(zone->storage);		size_t size = stor_len + zname_len + 9; // /diff.db,\0		char *dest = malloc(size);		if (dest == NULL) {			zone->ixfr_db = NULL; /* Not enough memory. */			ret = KNOT_ENOMEM; /* Error report. */			continue;		}		char *dpos = dest;		memcpy(dpos, zone->storage, stor_len + 1);		dpos += stor_len;		if (zone->storage[stor_len - 1] != '/') {			*(dpos++) = '/';			*dpos = '\0';		}		const char *dbext = "diff.db";		memcpy(dpos, zone->name, zname_len + 1);		for (size_t i = 0; i < zname_len; ++i) {			if (dpos[i] == '/') dpos[i] = '_';		}		memcpy(dpos + zname_len, dbext, strlen(dbext) + 1);		zone->ixfr_db = dest;		/* Initialize query plan if modules exist. */		if (!EMPTY_LIST(zone->query_modules)) {			zone->query_plan = query_plan_create(NULL);			if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}			/* Only supported zone class is now IN. */			internet_query_plan(zone->query_plan);		}		/* Load query modules. */		struct query_module *module = NULL;		WALK_LIST(module, zone->query_modules) {			ret = module->load(zone->query_plan, module);			if (ret != KNOT_EOK) {				break;			}		}	}
;
!hattrie_iter_finished(z_iter) && ret == KNOT_EOK
!hattrie_iter_finished(z_iter)
hattrie_iter_finished(z_iter)
hattrie_iter_finished
hattrie_iter_finished
z_iter
z_iter
ret == KNOT_EOK
ret
ret
KNOT_EOK
KNOT_EOK
hattrie_iter_next(z_iter)
hattrie_iter_next
hattrie_iter_next
z_iter
z_iter
{		conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);		// Default policy for dbsync timeout		if (zone->dbsync_timeout < 0) {			zone->dbsync_timeout = conf->dbsync_timeout;		}		// Default policy for ixfr-from-differences		if (zone->build_diffs < 0) {			zone->build_diffs = conf->build_diffs;		}		// Default policy for semantic checks		if (zone->enable_checks < 0) {			zone->enable_checks = conf->zone_checks;		}		// Default policy for disabling ANY type queries for AA		if (zone->disable_any < 0) {			zone->disable_any = conf->disable_any;		}		// Default policy for NOTIFY retries		if (zone->notify_retries <= 0) {			zone->notify_retries = conf->notify_retries;		}		// Default policy for NOTIFY timeout		if (zone->notify_timeout <= 0) {			zone->notify_timeout = conf->notify_timeout;		}		// Default policy for IXFR FSLIMIT		if (zone->ixfr_fslimit == 0) { /* ixfr_fslimit is unsigned type */			zone->ixfr_fslimit = conf->ixfr_fslimit;		}		// Default policy for DNSSEC signature lifetime		if (zone->sig_lifetime <= 0) {			zone->sig_lifetime = conf->sig_lifetime;		}		if (zone->serial_policy == 0) {			zone->serial_policy = conf->serial_policy;		}		// Default zone file		if (zone->file == NULL) {			zone->file = strcdup(zone->name, "zone");			if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}		}		// Default data directories		if (!zone->storage && conf->storage) {			zone->storage = strdup(conf->storage);		}		if (!zone->dnssec_keydir && conf->dnssec_keydir) {			zone->dnssec_keydir = strdup(conf->dnssec_keydir);		}		// Default policy for DNSSEC		if (!zone->dnssec_keydir) {			zone->dnssec_enable = 0;		} else if (zone->dnssec_enable < 0) {			zone->dnssec_enable = conf->dnssec_enable;		}		assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1);		// DNSSEC required settings		if (zone->dnssec_enable) {			// Enable zone diffs (silently)			zone->build_diffs = true;			// Disable incoming XFRs			if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}		}		// Resolve relative paths everywhere		zone->storage = conf_abs_path(conf->storage, zone->storage);		zone->file = conf_abs_path(zone->storage, zone->file);		if (zone->dnssec_enable) {			zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);		}		if (zone->storage == NULL ||		    zone->file == NULL ||		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)		) {			free(zone->storage);			free(zone->file);			free(zone->dnssec_keydir);			ret = KNOT_ENOMEM;			continue;		}		/* Check paths existence. */		if (!is_existing_dir(zone->storage)) {			log_error("storage directory '%s' does not exist",			          zone->storage);			ret = KNOT_EINVAL;			continue;		}		if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)) {			log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);			ret = KNOT_EINVAL;			continue;		}		/* Create journal filename. */		size_t zname_len = strlen(zone->name);		size_t stor_len = strlen(zone->storage);		size_t size = stor_len + zname_len + 9; // /diff.db,\0		char *dest = malloc(size);		if (dest == NULL) {			zone->ixfr_db = NULL; /* Not enough memory. */			ret = KNOT_ENOMEM; /* Error report. */			continue;		}		char *dpos = dest;		memcpy(dpos, zone->storage, stor_len + 1);		dpos += stor_len;		if (zone->storage[stor_len - 1] != '/') {			*(dpos++) = '/';			*dpos = '\0';		}		const char *dbext = "diff.db";		memcpy(dpos, zone->name, zname_len + 1);		for (size_t i = 0; i < zname_len; ++i) {			if (dpos[i] == '/') dpos[i] = '_';		}		memcpy(dpos + zname_len, dbext, strlen(dbext) + 1);		zone->ixfr_db = dest;		/* Initialize query plan if modules exist. */		if (!EMPTY_LIST(zone->query_modules)) {			zone->query_plan = query_plan_create(NULL);			if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}			/* Only supported zone class is now IN. */			internet_query_plan(zone->query_plan);		}		/* Load query modules. */		struct query_module *module = NULL;		WALK_LIST(module, zone->query_modules) {			ret = module->load(zone->query_plan, module);			if (ret != KNOT_EOK) {				break;			}		}	}
conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);
conf_zone_t *zone = (conf_zone_t *)*hattrie_iter_val(z_iter);
conf_zone_t
conf_zone_t
*zone = (conf_zone_t *)*hattrie_iter_val(z_iter)
*
zone
= (conf_zone_t *)*hattrie_iter_val(z_iter)
(conf_zone_t *)*hattrie_iter_val(z_iter)
conf_zone_t *
conf_zone_t
conf_zone_t
*
*
*hattrie_iter_val(z_iter)
hattrie_iter_val(z_iter)
hattrie_iter_val
hattrie_iter_val
z_iter
z_iter
if (zone->dbsync_timeout < 0) {			zone->dbsync_timeout = conf->dbsync_timeout;		}
zone->dbsync_timeout < 0
zone->dbsync_timeout
zone
zone
dbsync_timeout
0
{			zone->dbsync_timeout = conf->dbsync_timeout;		}
zone->dbsync_timeout = conf->dbsync_timeout;
zone->dbsync_timeout = conf->dbsync_timeout
zone->dbsync_timeout
zone
zone
dbsync_timeout
conf->dbsync_timeout
conf
conf
dbsync_timeout
if (zone->build_diffs < 0) {			zone->build_diffs = conf->build_diffs;		}
zone->build_diffs < 0
zone->build_diffs
zone
zone
build_diffs
0
{			zone->build_diffs = conf->build_diffs;		}
zone->build_diffs = conf->build_diffs;
zone->build_diffs = conf->build_diffs
zone->build_diffs
zone
zone
build_diffs
conf->build_diffs
conf
conf
build_diffs
if (zone->enable_checks < 0) {			zone->enable_checks = conf->zone_checks;		}
zone->enable_checks < 0
zone->enable_checks
zone
zone
enable_checks
0
{			zone->enable_checks = conf->zone_checks;		}
zone->enable_checks = conf->zone_checks;
zone->enable_checks = conf->zone_checks
zone->enable_checks
zone
zone
enable_checks
conf->zone_checks
conf
conf
zone_checks
if (zone->disable_any < 0) {			zone->disable_any = conf->disable_any;		}
zone->disable_any < 0
zone->disable_any
zone
zone
disable_any
0
{			zone->disable_any = conf->disable_any;		}
zone->disable_any = conf->disable_any;
zone->disable_any = conf->disable_any
zone->disable_any
zone
zone
disable_any
conf->disable_any
conf
conf
disable_any
if (zone->notify_retries <= 0) {			zone->notify_retries = conf->notify_retries;		}
zone->notify_retries <= 0
zone->notify_retries
zone
zone
notify_retries
0
{			zone->notify_retries = conf->notify_retries;		}
zone->notify_retries = conf->notify_retries;
zone->notify_retries = conf->notify_retries
zone->notify_retries
zone
zone
notify_retries
conf->notify_retries
conf
conf
notify_retries
if (zone->notify_timeout <= 0) {			zone->notify_timeout = conf->notify_timeout;		}
zone->notify_timeout <= 0
zone->notify_timeout
zone
zone
notify_timeout
0
{			zone->notify_timeout = conf->notify_timeout;		}
zone->notify_timeout = conf->notify_timeout;
zone->notify_timeout = conf->notify_timeout
zone->notify_timeout
zone
zone
notify_timeout
conf->notify_timeout
conf
conf
notify_timeout
if (zone->ixfr_fslimit == 0) { /* ixfr_fslimit is unsigned type */			zone->ixfr_fslimit = conf->ixfr_fslimit;		}
zone->ixfr_fslimit == 0
zone->ixfr_fslimit
zone
zone
ixfr_fslimit
0
{ /* ixfr_fslimit is unsigned type */			zone->ixfr_fslimit = conf->ixfr_fslimit;		}
zone->ixfr_fslimit = conf->ixfr_fslimit;
zone->ixfr_fslimit = conf->ixfr_fslimit
zone->ixfr_fslimit
zone
zone
ixfr_fslimit
conf->ixfr_fslimit
conf
conf
ixfr_fslimit
if (zone->sig_lifetime <= 0) {			zone->sig_lifetime = conf->sig_lifetime;		}
zone->sig_lifetime <= 0
zone->sig_lifetime
zone
zone
sig_lifetime
0
{			zone->sig_lifetime = conf->sig_lifetime;		}
zone->sig_lifetime = conf->sig_lifetime;
zone->sig_lifetime = conf->sig_lifetime
zone->sig_lifetime
zone
zone
sig_lifetime
conf->sig_lifetime
conf
conf
sig_lifetime
if (zone->serial_policy == 0) {			zone->serial_policy = conf->serial_policy;		}
zone->serial_policy == 0
zone->serial_policy
zone
zone
serial_policy
0
{			zone->serial_policy = conf->serial_policy;		}
zone->serial_policy = conf->serial_policy;
zone->serial_policy = conf->serial_policy
zone->serial_policy
zone
zone
serial_policy
conf->serial_policy
conf
conf
serial_policy
if (zone->file == NULL) {			zone->file = strcdup(zone->name, "zone");			if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}		}
zone->file == NULL
zone->file
zone
zone
file
NULL
NULL
{			zone->file = strcdup(zone->name, "zone");			if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}		}
zone->file = strcdup(zone->name, "zone");
zone->file = strcdup(zone->name, "zone")
zone->file
zone
zone
file
strcdup(zone->name, "zone")
strcdup
strcdup
zone->name
zone
zone
name
"zone"
if (!zone->file) {				ret = KNOT_ENOMEM;				continue;			}
!zone->file
zone->file
zone
zone
file
{				ret = KNOT_ENOMEM;				continue;			}
ret = KNOT_ENOMEM;
ret = KNOT_ENOMEM
ret
ret
KNOT_ENOMEM
KNOT_ENOMEM
continue;
if (!zone->storage && conf->storage) {			zone->storage = strdup(conf->storage);		}
!zone->storage && conf->storage
!zone->storage
zone->storage
zone
zone
storage
conf->storage
conf
conf
storage
{			zone->storage = strdup(conf->storage);		}
zone->storage = strdup(conf->storage);
zone->storage = strdup(conf->storage)
zone->storage
zone
zone
storage
strdup(conf->storage)
strdup
strdup
conf->storage
conf
conf
storage
if (!zone->dnssec_keydir && conf->dnssec_keydir) {			zone->dnssec_keydir = strdup(conf->dnssec_keydir);		}
!zone->dnssec_keydir && conf->dnssec_keydir
!zone->dnssec_keydir
zone->dnssec_keydir
zone
zone
dnssec_keydir
conf->dnssec_keydir
conf
conf
dnssec_keydir
{			zone->dnssec_keydir = strdup(conf->dnssec_keydir);		}
zone->dnssec_keydir = strdup(conf->dnssec_keydir);
zone->dnssec_keydir = strdup(conf->dnssec_keydir)
zone->dnssec_keydir
zone
zone
dnssec_keydir
strdup(conf->dnssec_keydir)
strdup
strdup
conf->dnssec_keydir
conf
conf
dnssec_keydir
if (!zone->dnssec_keydir) {			zone->dnssec_enable = 0;		} else if (zone->dnssec_enable < 0) {			zone->dnssec_enable = conf->dnssec_enable;		}
!zone->dnssec_keydir
zone->dnssec_keydir
zone
zone
dnssec_keydir
{			zone->dnssec_enable = 0;		}
zone->dnssec_enable = 0;
zone->dnssec_enable = 0
zone->dnssec_enable
zone
zone
dnssec_enable
0
if (zone->dnssec_enable < 0) {			zone->dnssec_enable = conf->dnssec_enable;		}
zone->dnssec_enable < 0
zone->dnssec_enable
zone
zone
dnssec_enable
0
{			zone->dnssec_enable = conf->dnssec_enable;		}
zone->dnssec_enable = conf->dnssec_enable;
zone->dnssec_enable = conf->dnssec_enable
zone->dnssec_enable
zone
zone
dnssec_enable
conf->dnssec_enable
conf
conf
dnssec_enable
assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1);
assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1)
assert
assert
zone->dnssec_enable == 0 || zone->dnssec_enable == 1
zone->dnssec_enable == 0
zone->dnssec_enable
zone
zone
dnssec_enable
0
zone->dnssec_enable == 1
zone->dnssec_enable
zone
zone
dnssec_enable
1
if (zone->dnssec_enable) {			// Enable zone diffs (silently)			zone->build_diffs = true;			// Disable incoming XFRs			if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}		}
zone->dnssec_enable
zone
zone
dnssec_enable
{			// Enable zone diffs (silently)			zone->build_diffs = true;			// Disable incoming XFRs			if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}		}
zone->build_diffs = true;
zone->build_diffs = true
zone->build_diffs
zone
zone
build_diffs
true
if (!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)			) {				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}
!EMPTY_LIST(zone->acl.notify_in) ||			    !EMPTY_LIST(zone->acl.xfr_in)
!EMPTY_LIST(zone->acl.notify_in)
EMPTY_LIST(zone->acl.notify_in)
EMPTY_LIST
EMPTY_LIST
zone->acl.notify_in
zone->acl
zone
zone
acl
notify_in
!EMPTY_LIST(zone->acl.xfr_in)
EMPTY_LIST(zone->acl.xfr_in)
EMPTY_LIST
EMPTY_LIST
zone->acl.xfr_in
zone->acl
zone
zone
acl
xfr_in
{				log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");				WALK_LIST_FREE(zone->acl.notify_in);				WALK_LIST_FREE(zone->acl.xfr_in);			}
log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs");
log_zone_str_notice(zone->name, "automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs")
log_zone_str_notice
log_zone_str_notice
zone->name
zone
zone
name
"automatic "					"DNSSEC signing enabled, disabling "					"incoming XFRs"
WALK_LIST_FREE(zone->acl.notify_in);
WALK_LIST_FREE(zone->acl.notify_in)
WALK_LIST_FREE
WALK_LIST_FREE
zone->acl.notify_in
zone->acl
zone
zone
acl
notify_in
WALK_LIST_FREE(zone->acl.xfr_in);
WALK_LIST_FREE(zone->acl.xfr_in)
WALK_LIST_FREE
WALK_LIST_FREE
zone->acl.xfr_in
zone->acl
zone
zone
acl
xfr_in
zone->storage = conf_abs_path(conf->storage, zone->storage);
zone->storage = conf_abs_path(conf->storage, zone->storage)
zone->storage
zone
zone
storage
conf_abs_path(conf->storage, zone->storage)
conf_abs_path
conf_abs_path
conf->storage
conf
conf
storage
zone->storage
zone
zone
storage
zone->file = conf_abs_path(zone->storage, zone->file);
zone->file = conf_abs_path(zone->storage, zone->file)
zone->file
zone
zone
file
conf_abs_path(zone->storage, zone->file)
conf_abs_path
conf_abs_path
zone->storage
zone
zone
storage
zone->file
zone
zone
file
if (zone->dnssec_enable) {			zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);		}
zone->dnssec_enable
zone
zone
dnssec_enable
{			zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);		}
zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir);
zone->dnssec_keydir = conf_abs_path(zone->storage,			                                    zone->dnssec_keydir)
zone->dnssec_keydir
zone
zone
dnssec_keydir
conf_abs_path(zone->storage,			                                    zone->dnssec_keydir)
conf_abs_path
conf_abs_path
zone->storage
zone
zone
storage
zone->dnssec_keydir
zone
zone
dnssec_keydir
if (zone->storage == NULL ||		    zone->file == NULL ||		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)		) {			free(zone->storage);			free(zone->file);			free(zone->dnssec_keydir);			ret = KNOT_ENOMEM;			continue;		}
zone->storage == NULL ||		    zone->file == NULL ||		    (zone->dnssec_enable && zone->dnssec_keydir == NULL)
zone->storage == NULL ||		    zone->file == NULL
zone->storage == NULL
zone->storage
zone
zone
storage
NULL
NULL
zone->file == NULL
zone->file
zone
zone
file
NULL
NULL
(zone->dnssec_enable && zone->dnssec_keydir == NULL)
zone->dnssec_enable && zone->dnssec_keydir == NULL
zone->dnssec_enable
zone
zone
dnssec_enable
zone->dnssec_keydir == NULL
zone->dnssec_keydir
zone
zone
dnssec_keydir
NULL
NULL
{			free(zone->storage);			free(zone->file);			free(zone->dnssec_keydir);			ret = KNOT_ENOMEM;			continue;		}
free(zone->storage);
free(zone->storage)
free
free
zone->storage
zone
zone
storage
free(zone->file);
free(zone->file)
free
free
zone->file
zone
zone
file
free(zone->dnssec_keydir);
free(zone->dnssec_keydir)
free
free
zone->dnssec_keydir
zone
zone
dnssec_keydir
ret = KNOT_ENOMEM;
ret = KNOT_ENOMEM
ret
ret
KNOT_ENOMEM
KNOT_ENOMEM
continue;
if (!is_existing_dir(zone->storage)) {			log_error("storage directory '%s' does not exist",			          zone->storage);			ret = KNOT_EINVAL;			continue;		}
!is_existing_dir(zone->storage)
is_existing_dir(zone->storage)
is_existing_dir
is_existing_dir
zone->storage
zone
zone
storage
{			log_error("storage directory '%s' does not exist",			          zone->storage);			ret = KNOT_EINVAL;			continue;		}
log_error("storage directory '%s' does not exist",			          zone->storage);
log_error("storage directory '%s' does not exist",			          zone->storage)
log_error
log_error
"storage directory '%s' does not exist"
zone->storage
zone
zone
storage
ret = KNOT_EINVAL;
ret = KNOT_EINVAL
ret
ret
KNOT_EINVAL
KNOT_EINVAL
continue;
if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)) {			log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);			ret = KNOT_EINVAL;			continue;		}
zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)
zone->dnssec_enable
zone
zone
dnssec_enable
!is_existing_dir(zone->dnssec_keydir)
is_existing_dir(zone->dnssec_keydir)
is_existing_dir
is_existing_dir
zone->dnssec_keydir
zone
zone
dnssec_keydir
{			log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);			ret = KNOT_EINVAL;			continue;		}
log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir);
log_error("DNSSEC key directory '%s' does not exist",			          zone->dnssec_keydir)
log_error
log_error
"DNSSEC key directory '%s' does not exist"
zone->dnssec_keydir
zone
zone
dnssec_keydir
ret = KNOT_EINVAL;
ret = KNOT_EINVAL
ret
ret
KNOT_EINVAL
KNOT_EINVAL
continue;
size_t zname_len = strlen(zone->name);
size_t zname_len = strlen(zone->name);
size_t
size_t
zname_len = strlen(zone->name)
zname_len
= strlen(zone->name)
strlen(zone->name)
strlen
strlen
zone->name
zone
zone
name
size_t stor_len = strlen(zone->storage);
size_t stor_len = strlen(zone->storage);
size_t
size_t
stor_len = strlen(zone->storage)
stor_len
= strlen(zone->storage)
strlen(zone->storage)
strlen
strlen
zone->storage
zone
zone
storage
size_t size = stor_len + zname_len + 9;
size_t size = stor_len + zname_len + 9;
size_t
size_t
size = stor_len + zname_len + 9
size
= stor_len + zname_len + 9
stor_len + zname_len + 9
stor_len + zname_len
stor_len
stor_len
zname_len
zname_len
9
char *dest = malloc(size);
char *dest = malloc(size);
char
*dest = malloc(size)
*
dest
= malloc(size)
malloc(size)
malloc
malloc
size
size
if (dest == NULL) {			zone->ixfr_db = NULL; /* Not enough memory. */			ret = KNOT_ENOMEM; /* Error report. */			continue;		}
dest == NULL
dest
dest
NULL
NULL
{			zone->ixfr_db = NULL; /* Not enough memory. */			ret = KNOT_ENOMEM; /* Error report. */			continue;		}
zone->ixfr_db = NULL;
zone->ixfr_db = NULL
zone->ixfr_db
zone
zone
ixfr_db
NULL
NULL
ret = KNOT_ENOMEM;
ret = KNOT_ENOMEM
ret
ret
KNOT_ENOMEM
KNOT_ENOMEM
continue;
char *dpos = dest;
char *dpos = dest;
char
*dpos = dest
*
dpos
= dest
dest
dest
memcpy(dpos, zone->storage, stor_len + 1);
memcpy(dpos, zone->storage, stor_len + 1)
memcpy
memcpy
dpos
dpos
zone->storage
zone
zone
storage
stor_len + 1
stor_len
stor_len
1
dpos += stor_len;
dpos += stor_len
dpos
dpos
stor_len
stor_len
if (zone->storage[stor_len - 1] != '/') {			*(dpos++) = '/';			*dpos = '\0';		}
zone->storage[stor_len - 1] != '/'
zone->storage[stor_len - 1]
zone->storage
zone
zone
storage
stor_len - 1
stor_len
stor_len
1
'/'
{			*(dpos++) = '/';			*dpos = '\0';		}
*(dpos++) = '/';
*(dpos++) = '/'
*(dpos++)
(dpos++)
dpos++
dpos
dpos
'/'
*dpos = '\0';
*dpos = '\0'
*dpos
dpos
dpos
'\0'
const char *dbext = "diff.db";
const char *dbext = "diff.db";
const char
*dbext = "diff.db"
*
dbext
= "diff.db"
"diff.db"
memcpy(dpos, zone->name, zname_len + 1);
memcpy(dpos, zone->name, zname_len + 1)
memcpy
memcpy
dpos
dpos
zone->name
zone
zone
name
zname_len + 1
zname_len
zname_len
1
for (size_t i = 0; i < zname_len; ++i) {			if (dpos[i] == '/') dpos[i] = '_';		}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
i < zname_len
i
i
zname_len
zname_len
++i
i
i
{			if (dpos[i] == '/') dpos[i] = '_';		}
if (dpos[i] == '/') dpos[i] = '_';
dpos[i] == '/'
dpos[i]
dpos
dpos
i
i
'/'
dpos[i] = '_';
dpos[i] = '_'
dpos[i]
dpos
dpos
i
i
'_'
memcpy(dpos + zname_len, dbext, strlen(dbext) + 1);
memcpy(dpos + zname_len, dbext, strlen(dbext) + 1)
memcpy
memcpy
dpos + zname_len
dpos
dpos
zname_len
zname_len
dbext
dbext
strlen(dbext) + 1
strlen(dbext)
strlen
strlen
dbext
dbext
1
zone->ixfr_db = dest;
zone->ixfr_db = dest
zone->ixfr_db
zone
zone
ixfr_db
dest
dest
if (!EMPTY_LIST(zone->query_modules)) {			zone->query_plan = query_plan_create(NULL);			if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}			/* Only supported zone class is now IN. */			internet_query_plan(zone->query_plan);		}
!EMPTY_LIST(zone->query_modules)
EMPTY_LIST(zone->query_modules)
EMPTY_LIST
EMPTY_LIST
zone->query_modules
zone
zone
query_modules
{			zone->query_plan = query_plan_create(NULL);			if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}			/* Only supported zone class is now IN. */			internet_query_plan(zone->query_plan);		}
zone->query_plan = query_plan_create(NULL);
zone->query_plan = query_plan_create(NULL)
zone->query_plan
zone
zone
query_plan
query_plan_create(NULL)
query_plan_create
query_plan_create
NULL
NULL
if (zone->query_plan == NULL) {				ret = KNOT_ENOMEM;				continue;			}
zone->query_plan == NULL
zone->query_plan
zone
zone
query_plan
NULL
NULL
{				ret = KNOT_ENOMEM;				continue;			}
ret = KNOT_ENOMEM;
ret = KNOT_ENOMEM
ret
ret
KNOT_ENOMEM
KNOT_ENOMEM
continue;
internet_query_plan(zone->query_plan);
internet_query_plan(zone->query_plan)
internet_query_plan
internet_query_plan
zone->query_plan
zone
zone
query_plan
struct query_module *module = NULL;
struct query_module *module = NULL;
struct query_module
query_module
*module = NULL
*
module
= NULL
NULL
NULL
WALK_LIST(module, zone->query_modules)
WALK_LIST(module, zone->query_modules)
WALK_LIST
WALK_LIST
module
module
zone->query_modules
zone
zone
query_modules
)
{			ret = module->load(zone->query_plan, module);			if (ret != KNOT_EOK) {				break;			}		}
ret = module->load(zone->query_plan, module);
ret = module->load(zone->query_plan, module)
ret
ret
module->load(zone->query_plan, module)
module->load
module
module
load
zone->query_plan
zone
zone
query_plan
module
module
if (ret != KNOT_EOK) {				break;			}
ret != KNOT_EOK
ret
ret
KNOT_EOK
KNOT_EOK
{				break;			}
break;
hattrie_iter_free(z_iter);
hattrie_iter_free(z_iter)
hattrie_iter_free
hattrie_iter_free
z_iter
z_iter
if (conf->uid < 0) conf->uid = getuid();
conf->uid < 0
conf->uid
conf
conf
uid
0
conf->uid = getuid();
conf->uid = getuid()
conf->uid
conf
conf
uid
getuid()
getuid
getuid
if (conf->gid < 0) conf->gid = getgid();
conf->gid < 0
conf->gid
conf
conf
gid
0
conf->gid = getgid();
conf->gid = getgid()
conf->gid
conf
conf
gid
getgid()
getgid
getgid
return ret;
ret
ret
-----joern-----
(157,393,0)
(513,180,0)
(728,807,0)
(278,733,0)
(367,299,0)
(175,180,0)
(130,61,0)
(809,180,0)
(895,253,0)
(446,180,0)
(200,329,0)
(546,570,0)
(361,588,0)
(574,264,0)
(534,23,0)
(720,588,0)
(760,450,0)
(497,750,0)
(416,570,0)
(595,7,0)
(49,450,0)
(618,363,0)
(198,273,0)
(400,368,0)
(299,232,0)
(603,650,0)
(900,122,0)
(595,294,0)
(363,842,0)
(393,837,0)
(746,588,0)
(367,381,0)
(866,420,0)
(248,363,0)
(43,137,0)
(858,552,0)
(101,276,0)
(755,450,0)
(287,190,0)
(802,98,0)
(794,137,0)
(56,58,0)
(333,153,0)
(227,506,0)
(130,294,0)
(426,180,0)
(543,23,0)
(197,399,0)
(857,179,0)
(891,664,0)
(289,56,0)
(382,367,0)
(247,161,0)
(82,294,0)
(13,82,0)
(53,607,0)
(407,264,0)
(48,294,0)
(355,60,0)
(725,773,0)
(524,588,0)
(405,235,0)
(535,450,0)
(122,277,0)
(316,84,0)
(210,460,0)
(854,176,0)
(617,334,0)
(407,32,0)
(0,239,0)
(562,855,0)
(368,370,0)
(658,476,0)
(705,671,0)
(872,298,0)
(482,588,0)
(85,400,0)
(196,769,0)
(256,734,0)
(368,326,0)
(625,294,0)
(858,381,0)
(671,525,0)
(217,450,0)
(493,62,0)
(272,37,0)
(650,712,0)
(400,294,0)
(910,724,0)
(41,233,0)
(374,744,0)
(104,744,0)
(429,431,0)
(272,819,0)
(375,625,0)
(504,180,0)
(409,477,0)
(382,858,0)
(169,294,0)
(516,904,0)
(631,562,0)
(17,479,0)
(800,450,0)
(137,66,0)
(380,187,0)
(645,379,0)
(832,464,0)
(78,209,0)
(743,294,0)
(374,450,0)
(465,137,0)
(35,490,0)
(217,510,0)
(365,687,0)
(201,544,0)
(273,450,0)
(464,314,0)
(506,314,0)
(897,680,0)
(42,588,0)
(341,319,0)
(858,555,0)
(734,256,0)
(858,742,0)
(313,294,0)
(643,728,0)
(769,235,0)
(517,693,0)
(870,450,0)
(172,879,0)
(359,761,0)
(231,95,0)
(60,766,0)
(68,534,0)
(782,606,0)
(7,741,0)
(878,425,0)
(236,384,0)
(273,268,0)
(748,760,0)
(474,450,0)
(840,534,0)
(472,904,0)
(300,584,0)
(479,232,0)
(849,859,0)
(455,588,0)
(678,630,0)
(367,589,0)
(367,212,0)
(833,211,0)
(608,880,0)
(858,65,0)
(528,534,0)
(109,95,0)
(354,6,0)
(501,450,0)
(670,301,0)
(325,787,0)
(318,313,0)
(610,583,0)
(632,329,0)
(16,151,0)
(728,643,0)
(8,6,0)
(793,525,0)
(564,717,0)
(781,394,0)
(739,89,0)
(460,210,0)
(399,818,0)
(48,660,0)
(583,610,0)
(36,773,0)
(695,534,0)
(828,118,0)
(880,423,0)
(884,269,0)
(899,842,0)
(483,159,0)
(321,109,0)
(63,807,0)
(278,173,0)
(908,180,0)
(887,311,0)
(49,427,0)
(696,628,0)
(690,506,0)
(118,199,0)
(204,264,0)
(630,264,0)
(813,211,0)
(235,769,0)
(153,224,0)
(854,785,0)
(179,151,0)
(237,547,0)
(354,453,0)
(95,109,0)
(165,294,0)
(330,234,0)
(541,890,0)
(374,232,0)
(545,667,0)
(84,402,0)
(123,180,0)
(118,880,0)
(192,25,0)
(647,920,0)
(811,588,0)
(858,253,0)
(723,516,0)
(912,425,0)
(798,588,0)
(764,165,0)
(239,678,0)
(367,729,0)
(179,366,0)
(171,450,0)
(731,21,0)
(114,690,0)
(97,160,0)
(293,866,0)
(261,879,0)
(299,450,0)
(75,660,0)
(324,61,0)
(705,294,0)
(21,750,0)
(268,273,0)
(841,262,0)
(719,294,0)
(619,588,0)
(258,702,0)
(770,176,0)
(245,719,0)
(116,678,0)
(265,450,0)
(743,773,0)
(717,347,0)
(753,450,0)
(650,588,0)
(508,294,0)
(913,3,0)
(155,821,0)
(812,799,0)
(177,456,0)
(674,112,0)
(310,538,0)
(334,12,0)
(790,785,0)
(431,429,0)
(582,854,0)
(779,32,0)
(158,478,0)
(563,840,0)
(408,294,0)
(745,789,0)
(487,367,0)
(222,576,0)
(503,379,0)
(28,738,0)
(883,588,0)
(607,294,0)
(709,684,0)
(48,368,0)
(628,23,0)
(892,294,0)
(921,121,0)
(94,806,0)
(121,921,0)
(906,511,0)
(539,427,0)
(706,534,0)
(641,262,0)
(776,861,0)
(257,608,0)
(690,789,0)
(135,870,0)
(381,139,0)
(693,294,0)
(226,347,0)
(854,162,0)
(815,548,0)
(911,755,0)
(206,272,0)
(772,571,0)
(108,428,0)
(822,81,0)
(738,6,0)
(660,85,0)
(659,733,0)
(104,450,0)
(400,660,0)
(55,282,0)
(52,378,0)
(592,813,0)
(493,294,0)
(39,474,0)
(820,180,0)
(625,660,0)
(583,528,0)
(224,153,0)
(265,438,0)
(364,717,0)
(315,751,0)
(662,280,0)
(743,151,0)
(706,144,0)
(663,751,0)
(768,506,0)
(107,352,0)
(173,293,0)
(256,294,0)
(250,441,0)
(666,547,0)
(90,450,0)
(519,176,0)
(920,294,0)
(477,160,0)
(784,804,0)
(7,604,0)
(761,538,0)
(223,130,0)
(59,294,0)
(573,368,0)
(36,294,0)
(475,825,0)
(340,180,0)
(758,36,0)
(313,318,0)
(438,470,0)
(742,300,0)
(858,212,0)
(597,838,0)
(490,27,0)
(317,888,0)
(762,431,0)
(235,844,0)
(385,21,0)
(327,588,0)
(210,450,0)
(24,562,0)
(874,265,0)
(9,490,0)
(692,683,0)
(865,717,0)
(276,82,0)
(12,334,0)
(85,660,0)
(219,921,0)
(151,16,0)
(96,789,0)
(269,368,0)
(848,600,0)
(845,920,0)
(193,628,0)
(920,845,0)
(899,307,0)
(194,172,0)
(337,601,0)
(838,824,0)
(527,241,0)
(383,807,0)
(298,872,0)
(519,272,0)
(247,283,0)
(103,364,0)
(640,180,0)
(77,343,0)
(763,739,0)
(294,588,0)
(32,860,0)
(153,333,0)
(459,333,0)
(419,258,0)
(110,679,0)
(176,881,0)
(366,179,0)
(451,278,0)
(830,25,0)
(562,753,0)
(128,310,0)
(256,368,0)
(260,43,0)
(700,144,0)
(174,458,0)
(246,22,0)
(183,269,0)
(873,264,0)
(301,137,0)
(536,728,0)
(842,307,0)
(71,616,0)
(339,83,0)
(915,258,0)
(609,3,0)
(661,313,0)
(819,588,0)
(688,573,0)
(102,93,0)
(301,670,0)
(914,212,0)
(249,627,0)
(80,826,0)
(733,278,0)
(525,588,0)
(821,773,0)
(548,789,0)
(516,670,0)
(318,793,0)
(766,438,0)
(669,576,0)
(622,229,0)
(610,360,0)
(861,844,0)
(142,840,0)
(41,571,0)
(369,729,0)
(729,450,0)
(160,477,0)
(854,684,0)
(98,346,0)
(511,329,0)
(435,756,0)
(253,899,0)
(580,187,0)
(795,843,0)
(494,588,0)
(863,296,0)
(867,729,0)
(439,432,0)
(851,595,0)
(290,801,0)
(571,450,0)
(72,639,0)
(685,506,0)
(620,588,0)
(683,240,0)
(367,65,0)
(104,470,0)
(713,180,0)
(496,24,0)
(464,294,0)
(336,782,0)
(284,733,0)
(20,309,0)
(300,267,0)
(627,249,0)
(117,687,0)
(601,156,0)
(76,48,0)
(704,407,0)
(525,671,0)
(742,450,0)
(571,41,0)
(62,768,0)
(389,787,0)
(473,422,0)
(470,90,0)
(717,525,0)
(288,139,0)
(865,380,0)
(544,773,0)
(57,212,0)
(896,336,0)
(383,842,0)
(12,294,0)
(367,800,0)
(364,373,0)
(744,180,0)
(239,586,0)
(553,920,0)
(279,604,0)
(403,204,0)
(871,479,0)
(880,608,0)
(607,354,0)
(803,93,0)
(132,294,0)
(907,199,0)
(694,680,0)
(324,37,0)
(370,368,0)
(568,383,0)
(708,660,0)
(775,898,0)
(626,588,0)
(552,747,0)
(345,433,0)
(151,434,0)
(779,450,0)
(329,511,0)
(217,912,0)
(304,574,0)
(221,89,0)
(265,16,0)
(831,588,0)
(916,782,0)
(750,21,0)
(655,400,0)
(678,239,0)
(483,639,0)
(308,501,0)
(336,450,0)
(314,506,0)
(239,0,0)
(58,15,0)
(282,912,0)
(3,180,0)
(635,861,0)
(548,836,0)
(294,610,0)
(333,739,0)
(456,294,0)
(21,450,0)
(421,669,0)
(581,273,0)
(93,32,0)
(329,744,0)
(113,824,0)
(350,65,0)
(122,822,0)
(708,906,0)
(646,690,0)
(50,575,0)
(607,538,0)
(484,354,0)
(699,588,0)
(105,336,0)
(752,224,0)
(476,41,0)
(548,717,0)
(75,294,0)
(230,872,0)
(528,583,0)
(82,276,0)
(515,482,0)
(280,180,0)
(481,652,0)
(821,355,0)
(364,789,0)
(127,229,0)
(631,691,0)
(347,277,0)
(526,465,0)
(639,807,0)
(676,630,0)
(566,48,0)
(120,169,0)
(159,483,0)
(384,180,0)
(898,229,0)
(719,58,0)
(495,90,0)
(454,743,0)
(712,525,0)
(824,585,0)
(679,450,0)
(165,151,0)
(190,300,0)
(282,450,0)
(152,588,0)
(1,440,0)
(843,491,0)
(737,652,0)
(639,483,0)
(262,264,0)
(162,510,0)
(751,294,0)
(335,491,0)
(903,82,0)
(786,719,0)
(672,698,0)
(586,239,0)
(324,294,0)
(735,573,0)
(104,232,0)
(254,712,0)
(118,294,0)
(687,365,0)
(400,85,0)
(766,60,0)
(612,519,0)
(821,294,0)
(232,514,0)
(708,368,0)
(893,616,0)
(725,151,0)
(173,278,0)
(62,717,0)
(66,137,0)
(734,484,0)
(565,422,0)
(79,728,0)
(822,588,0)
(386,43,0)
(153,89,0)
(814,84,0)
(82,368,0)
(610,294,0)
(338,478,0)
(91,61,0)
(181,109,0)
(27,269,0)
(654,695,0)
(387,165,0)
(705,660,0)
(60,355,0)
(519,616,0)
(648,719,0)
(599,554,0)
(726,75,0)
(156,601,0)
(407,888,0)
(801,450,0)
(367,336,0)
(586,588,0)
(376,319,0)
(51,324,0)
(23,534,0)
(216,725,0)
(918,277,0)
(755,825,0)
(204,294,0)
(797,706,0)
(584,300,0)
(478,338,0)
(199,118,0)
(906,708,0)
(253,859,0)
(796,298,0)
(889,37,0)
(220,641,0)
(477,294,0)
(147,912,0)
(778,591,0)
(167,800,0)
(761,354,0)
(266,393,0)
(424,531,0)
(89,588,0)
(756,294,0)
(348,743,0)
(113,204,0)
(806,530,0)
(351,535,0)
(469,542,0)
(379,58,0)
(558,588,0)
(614,130,0)
(653,574,0)
(93,294,0)
(544,18,0)
(570,354,0)
(293,173,0)
(519,162,0)
(144,706,0)
(787,450,0)
(687,117,0)
(664,294,0)
(244,588,0)
(143,309,0)
(202,63,0)
(277,588,0)
(126,595,0)
(711,180,0)
(549,91,0)
(774,779,0)
(281,174,0)
(18,113,0)
(277,122,0)
(593,818,0)
(621,176,0)
(67,679,0)
(824,113,0)
(317,445,0)
(349,472,0)
(875,242,0)
(283,715,0)
(870,46,0)
(430,227,0)
(150,346,0)
(310,354,0)
(575,909,0)
(394,801,0)
(367,742,0)
(727,474,0)
(228,309,0)
(762,294,0)
(717,588,0)
(203,881,0)
(303,381,0)
(649,46,0)
(489,607,0)
(479,450,0)
(363,677,0)
(791,400,0)
(511,906,0)
(437,753,0)
(154,104,0)
(27,490,0)
(393,157,0)
(184,374,0)
(38,493,0)
(839,299,0)
(83,717,0)
(570,294,0)
(179,773,0)
(73,674,0)
(314,464,0)
(499,630,0)
(680,294,0)
(552,450,0)
(534,180,0)
(876,157,0)
(379,294,0)
(286,56,0)
(854,616,0)
(262,32,0)
(24,294,0)
(243,460,0)
(888,317,0)
(16,265,0)
(185,742,0)
(113,18,0)
(633,256,0)
(680,660,0)
(187,530,0)
(214,842,0)
(760,146,0)
(478,61,0)
(232,432,0)
(650,75,0)
(211,813,0)
(886,508,0)
(329,450,0)
(312,246,0)
(147,450,0)
(479,85,0)
(44,702,0)
(813,450,0)
(557,453,0)
(427,49,0)
(412,751,0)
(117,433,0)
(22,799,0)
(225,742,0)
(139,447,0)
(353,591,0)
(65,575,0)
(638,783,0)
(854,352,0)
(680,597,0)
(484,734,0)
(604,7,0)
(705,368,0)
(844,861,0)
(58,56,0)
(269,294,0)
(276,596,0)
(81,822,0)
(490,294,0)
(319,25,0)
(739,333,0)
(636,59,0)
(850,588,0)
(540,227,0)
(729,119,0)
(548,373,0)
(470,438,0)
(825,755,0)
(689,813,0)
(115,465,0)
(921,807,0)
(441,912,0)
(204,113,0)
(0,508,0)
(331,90,0)
(433,117,0)
(136,639,0)
(780,785,0)
(224,717,0)
(26,104,0)
(382,854,0)
(212,174,0)
(519,352,0)
(821,151,0)
(212,450,0)
(29,698,0)
(140,301,0)
(85,479,0)
(846,378,0)
(166,372,0)
(616,372,0)
(508,0,0)
(367,253,0)
(295,65,0)
(6,354,0)
(476,294,0)
(768,62,0)
(100,705,0)
(519,700,0)
(862,48,0)
(23,628,0)
(371,163,0)
(275,210,0)
(740,753,0)
(644,789,0)
(858,378,0)
(264,882,0)
(773,710,0)
(847,783,0)
(190,450,0)
(87,627,0)
(164,180,0)
(355,821,0)
(271,180,0)
(366,576,0)
(242,214,0)
(787,300,0)
(747,452,0)
(715,450,0)
(262,294,0)
(675,63,0)
(670,804,0)
(684,531,0)
(922,594,0)
(25,830,0)
(885,755,0)
(817,899,0)
(507,604,0)
(854,669,0)
(399,294,0)
(465,675,0)
(838,597,0)
(856,267,0)
(754,429,0)
(625,368,0)
(550,171,0)
(195,407,0)
(826,383,0)
(297,786,0)
(835,381,0)
(508,264,0)
(478,294,0)
(378,438,0)
(793,318,0)
(715,283,0)
(442,631,0)
(362,456,0)
(109,61,0)
(382,683,0)
(323,43,0)
(700,519,0)
(634,519,0)
(858,336,0)
(133,528,0)
(407,294,0)
(235,172,0)
(74,865,0)
(600,848,0)
(569,762,0)
(630,678,0)
(298,294,0)
(628,450,0)
(472,121,0)
(679,110,0)
(40,210,0)
(367,147,0)
(701,804,0)
(466,708,0)
(759,179,0)
(320,53,0)
(477,41,0)
(853,412,0)
(652,162,0)
(601,294,0)
(255,153,0)
(313,660,0)
(771,256,0)
(296,826,0)
(830,420,0)
(319,294,0)
(859,253,0)
(367,535,0)
(598,171,0)
(660,588,0)
(736,373,0)
(462,246,0)
(208,766,0)
(807,460,0)
(106,312,0)
(418,312,0)
(98,450,0)
(505,836,0)
(861,450,0)
(718,762,0)
(313,368,0)
(484,538,0)
(179,294,0)
(99,544,0)
(11,159,0)
(721,81,0)
(363,307,0)
(471,482,0)
(161,428,0)
(683,742,0)
(214,242,0)
(380,865,0)
(414,531,0)
(342,347,0)
(433,450,0)
(573,294,0)
(436,287,0)
(32,779,0)
(535,744,0)
(62,493,0)
(229,450,0)
(36,445,0)
(671,705,0)
(75,650,0)
(484,294,0)
(862,576,0)
(657,428,0)
(533,474,0)
(579,804,0)
(263,63,0)
(83,806,0)
(252,478,0)
(410,493,0)
(490,151,0)
(702,258,0)
(920,354,0)
(866,293,0)
(675,465,0)
(905,691,0)
(693,880,0)
(396,217,0)
(479,744,0)
(332,241,0)
(901,584,0)
(501,234,0)
(734,538,0)
(25,319,0)
(390,147,0)
(381,450,0)
(374,370,0)
(677,363,0)
(298,431,0)
(836,548,0)
(56,450,0)
(587,793,0)
(395,313,0)
(591,660,0)
(406,588,0)
(858,147,0)
(401,180,0)
(148,383,0)
(854,180,0)
(491,335,0)
(178,601,0)
(869,766,0)
(730,464,0)
(367,378,0)
(801,394,0)
(422,450,0)
(262,641,0)
(234,501,0)
(461,171,0)
(892,837,0)
(585,761,0)
(468,332,0)
(188,859,0)
(457,756,0)
(34,18,0)
(238,596,0)
(792,224,0)
(413,39,0)
(547,294,0)
(417,747,0)
(749,608,0)
(429,450,0)
(65,450,0)
(229,898,0)
(519,785,0)
(808,542,0)
(788,892,0)
(424,725,0)
(54,715,0)
(302,352,0)
(858,535,0)
(318,163,0)
(492,12,0)
(329,232,0)
(852,299,0)
(500,921,0)
(356,738,0)
(432,232,0)
(246,312,0)
(488,665,0)
(305,477,0)
(858,299,0)
(338,665,0)
(63,675,0)
(378,450,0)
(574,294,0)
(445,36,0)
(37,482,0)
(544,294,0)
(285,705,0)
(170,0,0)
(81,525,0)
(842,214,0)
(902,677,0)
(280,534,0)
(146,760,0)
(773,27,0)
(630,294,0)
(443,110,0)
(5,571,0)
(156,799,0)
(816,190,0)
(125,684,0)
(141,588,0)
(864,588,0)
(169,538,0)
(131,265,0)
(146,509,0)
(650,347,0)
(273,232,0)
(547,773,0)
(604,450,0)
(919,717,0)
(845,576,0)
(732,49,0)
(465,804,0)
(834,190,0)
(63,842,0)
(224,506,0)
(370,374,0)
(460,807,0)
(189,169,0)
(144,700,0)
(241,277,0)
(698,307,0)
(301,787,0)
(757,508,0)
(480,66,0)
(529,725,0)
(807,180,0)
(827,393,0)
(256,660,0)
(538,734,0)
(415,693,0)
(36,151,0)
(310,128,0)
(23,724,0)
(664,146,0)
(404,588,0)
(328,162,0)
(888,407,0)
(556,180,0)
(367,552,0)
(643,249,0)
(651,779,0)
(45,408,0)
(249,643,0)
(812,412,0)
(191,801,0)
(161,247,0)
(383,826,0)
(591,294,0)
(37,272,0)
(10,892,0)
(121,472,0)
(391,402,0)
(691,631,0)
(551,800,0)
(502,24,0)
(818,881,0)
(624,209,0)
(463,332,0)
(623,501,0)
(332,294,0)
(753,562,0)
(445,317,0)
(844,259,0)
(347,588,0)
(761,294,0)
(241,588,0)
(69,424,0)
(411,595,0)
(597,680,0)
(829,588,0)
(215,724,0)
(283,247,0)
(722,217,0)
(719,786,0)
(712,650,0)
(600,625,0)
(388,12,0)
(725,424,0)
(756,844,0)
(912,441,0)
(510,217,0)
(61,665,0)
(382,1,0)
(291,476,0)
(269,27,0)
(498,743,0)
(858,729,0)
(854,272,0)
(637,807,0)
(84,294,0)
(668,180,0)
(472,670,0)
(824,838,0)
(357,761,0)
(37,324,0)
(725,294,0)
(474,39,0)
(444,870,0)
(402,84,0)
(282,594,0)
(209,277,0)
(608,450,0)
(629,550,0)
(508,32,0)
(420,830,0)
(542,294,0)
(22,246,0)
(532,842,0)
(538,588,0)
(595,851,0)
(519,684,0)
(30,552,0)
(14,548,0)
(393,294,0)
(858,800,0)
(767,49,0)
(205,588,0)
(43,804,0)
(47,822,0)
(306,669,0)
(743,348,0)
(352,596,0)
(843,450,0)
(761,585,0)
(162,384,0)
(707,793,0)
(682,670,0)
(783,837,0)
(486,572,0)
(322,204,0)
(449,851,0)
(837,642,0)
(64,118,0)
(917,117,0)
(485,75,0)
(227,81,0)
(109,294,0)
(86,283,0)
(358,715,0)
(724,180,0)
(615,760,0)
(309,228,0)
(567,664,0)
(92,282,0)
(111,525,0)
(129,858,0)
(62,588,0)
(4,235,0)
(137,804,0)
(716,62,0)
(377,821,0)
(428,807,0)
(190,287,0)
(90,470,0)
(251,768,0)
(800,667,0)
(392,36,0)
(520,156,0)
(218,868,0)
(751,412,0)
(134,588,0)
(630,32,0)
(859,450,0)
(607,53,0)
(84,146,0)
(397,311,0)
(823,472,0)
(48,862,0)
(602,89,0)
(88,180,0)
(733,294,0)
(33,1,0)
(605,588,0)
(269,660,0)
(680,368,0)
(470,104,0)
(667,138,0)
(894,597,0)
(521,484,0)
(783,450,0)
(81,227,0)
(542,172,0)
(577,868,0)
(171,550,0)
(510,311,0)
(59,7,0)
(686,429,0)
(921,842,0)
(312,294,0)
(309,842,0)
(186,588,0)
(398,310,0)
(448,585,0)
(27,773,0)
(585,824,0)
(611,588,0)
(787,301,0)
(766,450,0)
(519,669,0)
(702,44,0)
(728,842,0)
(310,294,0)
(631,294,0)
(868,272,0)
(544,151,0)
(467,180,0)
(765,147,0)
(613,819,0)
(810,98,0)
(625,600,0)
(207,298,0)
(18,544,0)
(594,282,0)
(537,552,0)
(673,59,0)
(274,310,0)
(522,119,0)
(506,588,0)
(738,294,0)
(639,842,0)
(490,773,0)
(61,91,0)
(270,679,0)
(523,588,0)
(82,660,0)
(6,738,0)
(145,843,0)
(344,535,0)
(698,228,0)
(703,408,0)
(431,182,0)
(777,708,0)
(518,472,0)
(590,364,0)
(510,162,0)
(805,180,0)
(46,649,0)
(31,262,0)
(744,268,0)
(168,324,0)
(412,812,0)
(697,768,0)
(311,180,0)
(153,588,0)
(228,698,0)
(837,783,0)
(561,510,0)
(204,32,0)
(268,744,0)
(235,294,0)
(920,538,0)
(681,712,0)
(346,98,0)
(258,450,0)
(360,610,0)
(512,399,0)
(559,698,0)
(75,368,0)
(19,484,0)
(124,374,0)
(708,294,0)
(877,180,0)
(714,625,0)
(826,296,0)
(163,318,0)
(656,433,0)
(1,162,0)
(428,161,0)
(292,745,0)
(578,607,0)
(420,866,0)
(438,70,0)
(149,631,0)
(159,560,0)
(785,890,0)
(334,617,0)
(46,649,1)
(22,246,1)
(817,253,1)
(847,638,1)
(379,503,1)
(121,921,1)
(228,309,1)
(85,400,1)
(694,456,1)
(59,636,1)
(700,144,1)
(630,264,1)
(498,60,1)
(821,294,1)
(351,110,1)
(436,190,1)
(478,294,1)
(515,617,1)
(821,773,1)
(705,660,1)
(755,911,1)
(213,670,1)
(383,568,1)
(648,245,1)
(75,726,1)
(858,742,1)
(374,744,1)
(118,294,1)
(769,235,1)
(178,866,1)
(866,420,1)
(103,590,1)
(25,192,1)
(53,607,1)
(402,84,1)
(33,652,1)
(880,608,1)
(759,845,1)
(140,787,1)
(888,317,1)
(885,747,1)
(892,788,1)
(601,294,1)
(608,450,1)
(54,807,1)
(364,789,1)
(690,114,1)
(75,660,1)
(332,468,1)
(540,721,1)
(717,525,1)
(621,818,1)
(376,341,1)
(85,479,1)
(298,431,1)
(793,525,1)
(23,628,1)
(393,827,1)
(654,222,1)
(337,178,1)
(898,775,1)
(407,704,1)
(355,821,1)
(206,482,1)
(185,750,1)
(584,901,1)
(262,841,1)
(342,209,1)
(625,368,1)
(421,306,1)
(139,288,1)
(153,333,1)
(810,667,1)
(675,63,1)
(712,254,1)
(191,211,1)
(767,674,1)
(154,26,1)
(62,717,1)
(764,60,1)
(577,218,1)
(747,417,1)
(766,438,1)
(503,645,1)
(681,75,1)
(893,71,1)
(17,871,1)
(782,916,1)
(546,53,1)
(564,919,1)
(211,833,1)
(854,272,1)
(487,594,1)
(273,232,1)
(887,594,1)
(37,482,1)
(367,535,1)
(779,450,1)
(90,450,1)
(535,344,1)
(842,214,1)
(679,270,1)
(770,621,1)
(825,755,1)
(246,462,1)
(456,294,1)
(276,82,1)
(743,773,1)
(807,460,1)
(722,396,1)
(163,318,1)
(580,380,1)
(370,374,1)
(465,137,1)
(224,717,1)
(597,680,1)
(437,24,1)
(587,707,1)
(598,39,1)
(478,252,1)
(808,408,1)
(553,862,1)
(758,407,1)
(528,133,1)
(237,666,1)
(287,190,1)
(464,832,1)
(255,224,1)
(623,825,1)
(319,294,1)
(484,354,1)
(269,660,1)
(788,10,1)
(793,587,1)
(351,232,1)
(301,137,1)
(698,672,1)
(510,217,1)
(378,450,1)
(118,64,1)
(787,389,1)
(772,476,1)
(30,537,1)
(570,294,1)
(662,599,1)
(756,435,1)
(169,294,1)
(602,221,1)
(493,294,1)
(124,573,1)
(812,412,1)
(83,339,1)
(269,183,1)
(751,315,1)
(490,773,1)
(216,69,1)
(304,348,1)
(386,260,1)
(320,607,1)
(828,691,1)
(200,632,1)
(251,697,1)
(427,539,1)
(43,323,1)
(168,51,1)
(718,872,1)
(519,684,1)
(59,294,1)
(525,671,1)
(302,276,1)
(834,300,1)
(310,398,1)
(786,297,1)
(76,566,1)
(760,450,1)
(704,195,1)
(604,450,1)
(569,718,1)
(616,893,1)
(854,669,1)
(573,735,1)
(801,290,1)
(872,230,1)
(854,352,1)
(478,61,1)
(333,459,1)
(117,917,1)
(190,816,1)
(362,177,1)
(451,733,1)
(552,30,1)
(708,368,1)
(266,402,1)
(858,212,1)
(658,291,1)
(374,232,1)
(898,229,1)
(412,751,1)
(753,450,1)
(84,146,1)
(318,793,1)
(528,534,1)
(367,212,1)
(269,368,1)
(427,49,1)
(647,553,1)
(221,163,1)
(889,324,1)
(479,450,1)
(410,716,1)
(24,294,1)
(472,121,1)
(567,891,1)
(106,418,1)
(288,381,1)
(727,427,1)
(612,634,1)
(329,744,1)
(224,752,1)
(680,660,1)
(824,113,1)
(511,906,1)
(111,506,1)
(49,732,1)
(678,630,1)
(100,285,1)
(595,411,1)
(226,342,1)
(664,567,1)
(125,424,1)
(18,544,1)
(171,450,1)
(268,273,1)
(350,295,1)
(192,319,1)
(303,835,1)
(357,359,1)
(477,305,1)
(387,764,1)
(506,314,1)
(98,802,1)
(209,277,1)
(36,294,1)
(634,144,1)
(346,98,1)
(0,170,1)
(725,151,1)
(1,162,1)
(310,354,1)
(402,391,1)
(519,616,1)
(636,673,1)
(575,50,1)
(775,229,1)
(382,1,1)
(392,758,1)
(382,683,1)
(367,487,1)
(348,743,1)
(324,294,1)
(761,538,1)
(12,492,1)
(582,394,1)
(50,65,1)
(515,338,1)
(459,739,1)
(529,216,1)
(353,408,1)
(585,761,1)
(349,518,1)
(367,253,1)
(818,593,1)
(429,754,1)
(83,717,1)
(204,264,1)
(897,694,1)
(687,117,1)
(607,538,1)
(43,137,1)
(835,39,1)
(916,336,1)
(287,436,1)
(245,7,1)
(520,601,1)
(863,826,1)
(865,74,1)
(335,843,1)
(705,294,1)
(424,725,1)
(429,450,1)
(235,294,1)
(887,44,1)
(639,842,1)
(653,304,1)
(769,196,1)
(435,457,1)
(210,450,1)
(158,95,1)
(214,242,1)
(316,880,1)
(615,748,1)
(631,442,1)
(383,807,1)
(275,40,1)
(498,151,1)
(62,493,1)
(857,759,1)
(796,207,1)
(854,162,1)
(608,749,1)
(803,102,1)
(299,450,1)
(476,294,1)
(738,294,1)
(917,433,1)
(821,377,1)
(113,18,1)
(293,173,1)
(473,744,1)
(363,677,1)
(449,595,1)
(126,431,1)
(505,548,1)
(542,294,1)
(400,660,1)
(207,844,1)
(655,791,1)
(457,769,1)
(906,708,1)
(656,516,1)
(698,228,1)
(472,670,1)
(635,756,1)
(516,670,1)
(405,4,1)
(317,445,1)
(232,432,1)
(921,842,1)
(715,450,1)
(858,535,1)
(79,536,1)
(568,148,1)
(607,578,1)
(44,702,1)
(14,690,1)
(533,727,1)
(35,269,1)
(768,251,1)
(105,896,1)
(318,313,1)
(75,294,1)
(783,450,1)
(630,294,1)
(58,56,1)
(109,61,1)
(508,32,1)
(767,2,1)
(366,179,1)
(82,660,1)
(407,32,1)
(56,450,1)
(242,875,1)
(84,814,1)
(630,32,1)
(716,89,1)
(21,731,1)
(827,266,1)
(683,742,1)
(806,94,1)
(729,369,1)
(725,773,1)
(341,172,1)
(477,41,1)
(313,395,1)
(443,679,1)
(409,294,1)
(394,781,1)
(867,550,1)
(641,220,1)
(369,867,1)
(300,584,1)
(705,100,1)
(730,685,1)
(262,294,1)
(874,165,1)
(428,657,1)
(859,450,1)
(212,57,1)
(654,166,1)
(86,715,1)
(623,575,1)
(367,729,1)
(41,571,1)
(752,792,1)
(305,409,1)
(93,294,1)
(610,360,1)
(36,773,1)
(40,637,1)
(659,420,1)
(8,738,1)
(179,294,1)
(469,808,1)
(294,610,1)
(548,373,1)
(329,200,1)
(913,422,1)
(368,370,1)
(754,686,1)
(142,534,1)
(37,889,1)
(649,870,1)
(414,684,1)
(734,256,1)
(836,548,1)
(325,682,1)
(159,483,1)
(627,87,1)
(75,368,1)
(657,108,1)
(854,616,1)
(394,801,1)
(296,863,1)
(407,294,1)
(656,213,1)
(527,332,1)
(460,243,1)
(813,592,1)
(559,228,1)
(650,75,1)
(725,294,1)
(595,7,1)
(364,103,1)
(920,354,1)
(510,561,1)
(419,3,1)
(13,903,1)
(919,650,1)
(733,294,1)
(114,646,1)
(607,294,1)
(292,836,1)
(858,299,1)
(118,880,1)
(654,868,1)
(354,6,1)
(762,569,1)
(859,849,1)
(888,407,1)
(905,631,1)
(246,312,1)
(761,354,1)
(122,900,1)
(399,294,1)
(322,585,1)
(57,914,1)
(27,269,1)
(727,782,1)
(131,874,1)
(176,770,1)
(512,197,1)
(870,450,1)
(843,145,1)
(631,294,1)
(147,450,1)
(538,734,1)
(201,99,1)
(273,450,1)
(262,264,1)
(717,347,1)
(700,519,1)
(910,652,1)
(679,450,1)
(73,365,1)
(858,147,1)
(637,174,1)
(336,105,1)
(241,527,1)
(767,365,1)
(646,745,1)
(479,744,1)
(53,320,1)
(748,664,1)
(920,647,1)
(147,390,1)
(858,381,1)
(367,742,1)
(64,828,1)
(627,249,1)
(172,194,1)
(417,552,1)
(609,913,1)
(885,898,1)
(767,159,1)
(714,838,1)
(726,485,1)
(11,483,1)
(211,813,1)
(871,591,1)
(723,472,1)
(845,920,1)
(323,386,1)
(400,294,1)
(776,635,1)
(858,729,1)
(787,450,1)
(578,489,1)
(761,294,1)
(828,562,1)
(838,824,1)
(725,529,1)
(654,541,1)
(813,450,1)
(27,490,1)
(840,563,1)
(479,232,1)
(94,83,1)
(843,450,1)
(398,274,1)
(31,348,1)
(264,873,1)
(544,773,1)
(456,362,1)
(311,397,1)
(126,872,1)
(329,450,1)
(792,690,1)
(705,368,1)
(374,450,1)
(204,403,1)
(257,693,1)
(544,294,1)
(629,171,1)
(680,294,1)
(671,705,1)
(472,823,1)
(284,659,1)
(412,853,1)
(654,203,1)
(462,312,1)
(92,912,1)
(848,600,1)
(683,692,1)
(238,352,1)
(872,298,1)
(542,469,1)
(247,283,1)
(306,366,1)
(60,355,1)
(160,477,1)
(26,378,1)
(643,728,1)
(502,691,1)
(234,330,1)
(82,368,1)
(104,232,1)
(816,834,1)
(170,508,1)
(87,249,1)
(661,717,1)
(581,535,1)
(915,419,1)
(471,515,1)
(461,598,1)
(272,37,1)
(52,846,1)
(900,918,1)
(491,335,1)
(918,822,1)
(167,551,1)
(601,337,1)
(146,760,1)
(301,140,1)
(25,319,1)
(755,450,1)
(690,506,1)
(179,857,1)
(411,126,1)
(156,520,1)
(582,46,1)
(235,405,1)
(165,387,1)
(194,542,1)
(195,848,1)
(858,336,1)
(108,247,1)
(208,869,1)
(691,905,1)
(269,294,1)
(61,91,1)
(869,355,1)
(224,506,1)
(662,700,1)
(313,660,1)
(840,534,1)
(708,660,1)
(403,322,1)
(239,678,1)
(363,842,1)
(72,136,1)
(737,481,1)
(583,528,1)
(814,316,1)
(415,199,1)
(645,786,1)
(625,375,1)
(624,78,1)
(901,742,1)
(222,669,1)
(771,633,1)
(783,847,1)
(470,90,1)
(836,505,1)
(652,162,1)
(381,303,1)
(733,284,1)
(270,67,1)
(669,421,1)
(851,595,1)
(519,272,1)
(314,464,1)
(854,785,1)
(333,739,1)
(378,52,1)
(217,450,1)
(666,456,1)
(490,294,1)
(484,521,1)
(574,294,1)
(628,450,1)
(196,235,1)
(445,36,1)
(422,565,1)
(663,156,1)
(719,58,1)
(235,844,1)
(352,107,1)
(460,210,1)
(610,583,1)
(697,493,1)
(628,696,1)
(391,84,1)
(51,206,1)
(865,717,1)
(837,783,1)
(47,525,1)
(204,32,1)
(296,826,1)
(773,27,1)
(685,888,1)
(10,157,1)
(721,47,1)
(367,147,1)
(470,104,1)
(695,534,1)
(367,336,1)
(67,550,1)
(800,167,1)
(846,422,1)
(207,769,1)
(316,199,1)
(637,346,1)
(858,800,1)
(428,807,1)
(110,679,1)
(646,789,1)
(688,511,1)
(359,597,1)
(841,31,1)
(444,135,1)
(550,629,1)
(413,474,1)
(95,109,1)
(858,129,1)
(500,219,1)
(521,19,1)
(36,151,1)
(431,429,1)
(762,294,1)
(563,142,1)
(631,562,1)
(332,294,1)
(21,450,1)
(235,172,1)
(544,151,1)
(790,780,1)
(38,410,1)
(466,128,1)
(689,280,1)
(328,311,1)
(163,371,1)
(113,204,1)
(367,378,1)
(45,703,1)
(345,656,1)
(810,234,1)
(262,32,1)
(184,124,1)
(356,570,1)
(252,158,1)
(280,534,1)
(230,298,1)
(298,294,1)
(23,543,1)
(607,354,1)
(149,786,1)
(291,160,1)
(844,861,1)
(221,806,1)
(375,714,1)
(48,76,1)
(594,922,1)
(439,299,1)
(127,622,1)
(274,354,1)
(625,660,1)
(734,484,1)
(779,774,1)
(283,715,1)
(129,840,1)
(617,334,1)
(600,625,1)
(324,61,1)
(732,767,1)
(833,813,1)
(4,160,1)
(852,839,1)
(454,498,1)
(115,43,1)
(516,723,1)
(508,264,1)
(388,241,1)
(266,146,1)
(549,130,1)
(204,294,1)
(373,736,1)
(37,324,1)
(765,44,1)
(265,450,1)
(561,217,1)
(767,627,1)
(474,533,1)
(921,807,1)
(339,187,1)
(743,294,1)
(632,906,1)
(313,368,1)
(95,231,1)
(397,887,1)
(537,898,1)
(922,282,1)
(823,349,1)
(870,444,1)
(298,796,1)
(875,532,1)
(543,628,1)
(65,350,1)
(24,496,1)
(310,538,1)
(839,110,1)
(301,787,1)
(331,104,1)
(84,294,1)
(822,81,1)
(256,660,1)
(667,545,1)
(644,62,1)
(719,294,1)
(215,910,1)
(618,842,1)
(379,294,1)
(90,495,1)
(495,331,1)
(489,157,1)
(263,202,1)
(490,151,1)
(227,506,1)
(324,168,1)
(492,388,1)
(522,729,1)
(677,902,1)
(187,580,1)
(312,106,1)
(199,118,1)
(680,897,1)
(728,842,1)
(48,368,1)
(229,127,1)
(519,352,1)
(518,121,1)
(586,239,1)
(286,289,1)
(595,294,1)
(884,547,1)
(873,574,1)
(786,719,1)
(641,262,1)
(347,226,1)
(49,450,1)
(851,449,1)
(56,286,1)
(465,675,1)
(273,198,1)
(68,724,1)
(791,479,1)
(183,884,1)
(382,858,1)
(367,65,1)
(639,72,1)
(313,294,1)
(295,825,1)
(166,616,1)
(390,765,1)
(501,308,1)
(217,722,1)
(499,676,1)
(48,660,1)
(682,465,1)
(899,817,1)
(464,294,1)
(329,232,1)
(751,294,1)
(153,224,1)
(256,771,1)
(562,753,1)
(265,438,1)
(367,299,1)
(519,612,1)
(676,0,1)
(408,294,1)
(768,506,1)
(203,176,1)
(821,151,1)
(162,510,1)
(853,751,1)
(832,730,1)
(868,272,1)
(797,840,1)
(81,525,1)
(639,807,1)
(223,617,1)
(96,644,1)
(282,450,1)
(193,68,1)
(876,393,1)
(789,96,1)
(334,12,1)
(785,790,1)
(508,886,1)
(795,211,1)
(81,227,1)
(16,265,1)
(750,497,1)
(603,347,1)
(265,131,1)
(896,427,1)
(408,45,1)
(256,294,1)
(552,450,1)
(448,761,1)
(181,321,1)
(9,35,1)
(389,325,1)
(858,378,1)
(29,559,1)
(36,392,1)
(573,294,1)
(712,525,1)
(23,724,1)
(484,294,1)
(825,475,1)
(802,810,1)
(39,413,1)
(229,450,1)
(703,586,1)
(104,154,1)
(708,294,1)
(432,439,1)
(489,837,1)
(894,680,1)
(757,264,1)
(660,85,1)
(285,111,1)
(347,277,1)
(739,89,1)
(622,750,1)
(102,641,1)
(903,101,1)
(672,29,1)
(148,2,1)
(277,122,1)
(241,277,1)
(501,450,1)
(420,830,1)
(598,139,1)
(482,471,1)
(279,59,1)
(654,238,1)
(536,296,1)
(728,79,1)
(256,368,1)
(794,296,1)
(861,450,1)
(517,415,1)
(312,294,1)
(188,698,1)
(63,842,1)
(756,294,1)
(920,538,1)
(282,55,1)
(622,287,1)
(630,499,1)
(678,116,1)
(508,294,1)
(731,385,1)
(3,609,1)
(177,538,1)
(310,294,1)
(604,507,1)
(254,681,1)
(739,763,1)
(364,717,1)
(565,473,1)
(220,262,1)
(566,838,1)
(55,92,1)
(475,755,1)
(544,201,1)
(367,800,1)
(854,176,1)
(441,250,1)
(749,257,1)
(278,451,1)
(367,552,1)
(801,450,1)
(143,20,1)
(477,294,1)
(548,717,1)
(895,859,1)
(60,766,1)
(892,294,1)
(592,689,1)
(173,278,1)
(393,837,1)
(680,368,1)
(299,852,1)
(418,812,1)
(0,508,1)
(155,368,1)
(693,517,1)
(534,23,1)
(82,13,1)
(693,294,1)
(742,450,1)
(433,450,1)
(511,329,1)
(377,155,1)
(913,438,1)
(438,470,1)
(338,478,1)
(571,5,1)
(824,585,1)
(766,208,1)
(189,660,1)
(706,534,1)
(128,310,1)
(507,279,1)
(258,915,1)
(20,363,1)
(778,353,1)
(695,654,1)
(179,151,1)
(433,345,1)
(702,258,1)
(585,448,1)
(150,98,1)
(191,491,1)
(319,376,1)
(179,773,1)
(67,119,1)
(248,618,1)
(63,807,1)
(539,49,1)
(551,234,1)
(250,147,1)
(2,899,1)
(638,892,1)
(838,597,1)
(707,313,1)
(519,669,1)
(757,641,1)
(212,450,1)
(336,450,1)
(519,785,1)
(547,294,1)
(136,627,1)
(907,118,1)
(315,663,1)
(736,364,1)
(574,653,1)
(374,184,1)
(526,115,1)
(858,552,1)
(65,450,1)
(652,737,1)
(854,582,1)
(156,601,1)
(91,549,1)
(66,480,1)
(234,501,1)
(519,176,1)
(210,275,1)
(745,292,1)
(245,851,1)
(239,0,1)
(570,416,1)
(74,163,1)
(120,189,1)
(174,281,1)
(231,109,1)
(260,137,1)
(625,294,1)
(442,149,1)
(591,294,1)
(849,188,1)
(800,450,1)
(760,615,1)
(866,293,1)
(921,500,1)
(249,643,1)
(365,687,1)
(479,17,1)
(664,294,1)
(483,639,1)
(692,287,1)
(597,894,1)
(89,602,1)
(740,437,1)
(481,162,1)
(493,38,1)
(353,22,1)
(745,789,1)
(826,80,1)
(78,277,1)
(309,143,1)
(2,161,1)
(133,132,1)
(1,33,1)
(104,450,1)
(330,501,1)
(400,655,1)
(227,430,1)
(706,797,1)
(218,272,1)
(717,564,1)
(735,688,1)
(891,402,1)
(728,807,1)
(463,153,1)
(12,294,1)
(899,842,1)
(253,859,1)
(358,54,1)
(6,738,1)
(190,300,1)
(399,512,1)
(743,151,1)
(490,9,1)
(674,73,1)
(80,383,1)
(39,474,1)
(673,851,1)
(535,450,1)
(744,268,1)
(729,450,1)
(197,209,1)
(395,661,1)
(550,171,1)
(169,120,1)
(547,237,1)
(122,822,1)
(289,379,1)
(787,300,1)
(719,648,1)
(19,256,1)
(99,204,1)
(474,450,1)
(393,294,1)
(62,768,1)
(7,604,1)
(753,740,1)
(130,614,1)
(422,450,1)
(97,477,1)
(101,848,1)
(519,162,1)
(476,658,1)
(104,744,1)
(98,450,1)
(761,357,1)
(541,785,1)
(654,414,1)
(670,301,1)
(826,383,1)
(797,695,1)
(690,789,1)
(243,210,1)
(738,28,1)
(914,346,1)
(130,294,1)
(594,282,1)
(258,450,1)
(430,540,1)
(633,169,1)
(862,48,1)
(590,836,1)
(830,25,1)
(353,866,1)
(696,193,1)
(4,41,1)
(571,450,1)
(912,441,1)
(145,795,1)
(651,93,1)
(190,450,1)
(468,463,1)
(198,581,1)
(321,61,1)
(380,865,1)
(694,773,1)
(157,393,1)
(171,461,1)
(367,381,1)
(253,895,1)
(161,247,1)
(149,58,1)
(18,34,1)
(742,225,1)
(69,888,1)
(109,181,1)
(93,803,1)
(614,223,1)
(650,712,1)
(781,801,1)
(282,912,1)
(283,86,1)
(902,248,1)
(135,394,1)
(532,161,1)
(484,538,1)
(278,733,1)
(766,450,1)
(209,624,1)
(774,651,1)
(48,294,1)
(854,684,1)
(545,800,1)
(686,762,1)
(396,328,1)
(144,706,1)
(381,450,1)
(371,318,1)
(750,21,1)
(815,14,1)
(861,776,1)
(383,842,1)
(496,502,1)
(548,789,1)
(858,65,1)
(777,466,1)
(157,876,1)
(110,443,1)
(165,294,1)
(160,97,1)
(510,311,1)
(116,630,1)
(691,631,1)
(107,302,1)
(346,150,1)
(292,373,1)
(159,11,1)
(407,264,1)
(119,522,1)
(886,757,1)
(109,294,1)
(309,842,1)
(161,428,1)
(548,815,1)
(308,623,1)
(199,907,1)
(757,32,1)
(858,253,1)
(280,662,1)
(28,356,1)
(480,794,1)
(281,212,1)
(780,95,1)
(344,351,1)
(599,868,1)
(297,719,1)
(32,779,1)
(400,368,1)
(137,66,1)
(151,16,1)
(63,263,1)
(724,215,1)
(416,546,1)
(71,128,1)
(290,191,1)
(202,526,1)
(82,294,1)
(382,854,1)
(485,603,1)
(225,185,1)
(466,53,1)
(34,544,1)
(497,21,1)
(920,294,1)
(868,577,1)
(591,778,1)
(219,213,1)
(6,8,1)
(153,89,1)
(911,885,1)
(684,709,1)
(117,433,1)
(217,912,1)
(650,347,1)
(382,367,1)
(763,255,1)
(5,772,1)
(715,358,1)
(132,700,1)
(709,125,1)
(155,511,1)
(708,777,1)
(743,454,1)
(593,399,1)
(235,700,2)
(840,534,2)
(266,700,2)
(649,394,2)
(680,368,2)
(484,294,2)
(427,750,2)
(700,868,2)
(470,90,2)
(590,836,2)
(431,429,2)
(0,53,2)
(264,348,2)
(753,450,2)
(824,585,2)
(552,898,2)
(98,450,2)
(301,137,2)
(866,408,2)
(857,838,2)
(490,456,2)
(743,294,2)
(574,348,2)
(345,296,2)
(814,700,2)
(214,242,2)
(643,728,2)
(738,53,2)
(574,294,2)
(210,450,2)
(916,427,2)
(126,700,2)
(57,346,2)
(706,209,2)
(630,264,2)
(604,450,2)
(268,287,2)
(654,888,2)
(498,128,2)
(755,450,2)
(634,144,2)
(11,627,2)
(334,209,2)
(616,128,2)
(797,128,2)
(568,2,2)
(23,652,2)
(869,355,2)
(812,412,2)
(324,617,2)
(355,53,2)
(667,234,2)
(187,163,2)
(684,888,2)
(396,44,2)
(162,44,2)
(168,95,2)
(111,888,2)
(570,53,2)
(431,872,2)
(873,348,2)
(858,535,2)
(367,594,2)
(843,450,2)
(888,848,2)
(302,848,2)
(830,25,2)
(94,163,2)
(284,420,2)
(301,296,2)
(399,294,2)
(721,888,2)
(643,296,2)
(471,617,2)
(212,450,2)
(341,408,2)
(803,641,2)
(526,296,2)
(81,525,2)
(262,264,2)
(821,53,2)
(32,641,2)
(272,37,2)
(680,53,2)
(39,474,2)
(321,617,2)
(479,450,2)
(490,294,2)
(722,594,2)
(816,750,2)
(717,347,2)
(787,296,2)
(303,39,2)
(690,690,2)
(317,407,2)
(797,209,2)
(305,700,2)
(43,296,2)
(162,594,2)
(601,294,2)
(269,368,2)
(895,161,2)
(445,36,2)
(190,450,2)
(252,95,2)
(646,690,2)
(698,228,2)
(140,296,2)
(743,128,2)
(127,750,2)
(715,750,2)
(920,838,2)
(58,56,2)
(730,888,2)
(484,53,2)
(405,700,2)
(580,163,2)
(886,53,2)
(723,213,2)
(777,128,2)
(774,641,2)
(1,162,2)
(375,838,2)
(46,649,2)
(72,627,2)
(403,585,2)
(108,247,2)
(461,287,2)
(706,840,2)
(548,789,2)
(85,479,2)
(683,742,2)
(777,53,2)
(27,269,2)
(48,294,2)
(700,840,2)
(695,128,2)
(397,44,2)
(594,282,2)
(739,89,2)
(90,450,2)
(377,128,2)
(849,161,2)
(660,128,2)
(36,151,2)
(110,750,2)
(144,706,2)
(858,378,2)
(915,287,2)
(165,60,2)
(27,456,2)
(519,785,2)
(772,160,2)
(607,538,2)
(49,750,2)
(690,506,2)
(906,53,2)
(144,840,2)
(862,838,2)
(818,209,2)
(144,848,2)
(533,287,2)
(225,750,2)
(428,247,2)
(36,773,2)
(362,53,2)
(439,110,2)
(298,431,2)
(158,95,2)
(222,838,2)
(889,95,2)
(412,751,2)
(508,264,2)
(676,0,2)
(662,840,2)
(474,287,2)
(172,408,2)
(18,204,2)
(472,121,2)
(751,294,2)
(821,294,2)
(116,0,2)
(506,314,2)
(100,888,2)
(650,347,2)
(894,53,2)
(313,368,2)
(273,287,2)
(165,294,2)
(599,868,2)
(854,176,2)
(419,750,2)
(737,44,2)
(329,744,2)
(444,394,2)
(153,333,2)
(349,213,2)
(153,89,2)
(389,296,2)
(217,912,2)
(161,428,2)
(0,128,2)
(871,128,2)
(851,700,2)
(758,407,2)
(824,597,2)
(280,840,2)
(311,594,2)
(501,750,2)
(533,750,2)
(113,585,2)
(775,287,2)
(511,53,2)
(477,41,2)
(844,861,2)
(163,318,2)
(754,872,2)
(664,402,2)
(104,232,2)
(677,161,2)
(591,53,2)
(367,147,2)
(921,842,2)
(600,838,2)
(485,209,2)
(227,506,2)
(540,888,2)
(7,604,2)
(802,287,2)
(727,287,2)
(706,848,2)
(370,374,2)
(583,528,2)
(274,53,2)
(210,750,2)
(337,866,2)
(83,163,2)
(144,95,2)
(298,294,2)
(14,690,2)
(331,422,2)
(190,300,2)
(417,898,2)
(765,44,2)
(329,232,2)
(104,450,2)
(381,39,2)
(740,691,2)
(289,786,2)
(148,2,2)
(569,872,2)
(454,53,2)
(396,594,2)
(160,700,2)
(67,287,2)
(709,888,2)
(101,848,2)
(364,717,2)
(258,450,2)
(171,750,2)
(464,888,2)
(858,336,2)
(897,128,2)
(686,872,2)
(25,319,2)
(581,750,2)
(703,53,2)
(559,161,2)
(716,209,2)
(898,287,2)
(880,199,2)
(256,294,2)
(653,348,2)
(362,128,2)
(135,394,2)
(691,631,2)
(464,294,2)
(824,113,2)
(844,769,2)
(892,157,2)
(37,324,2)
(725,773,2)
(314,888,2)
(761,538,2)
(807,460,2)
(272,95,2)
(607,354,2)
(766,450,2)
(154,422,2)
(298,700,2)
(695,868,2)
(358,287,2)
(800,450,2)
(519,162,2)
(204,264,2)
(81,888,2)
(780,95,2)
(788,157,2)
(705,294,2)
(382,858,2)
(505,690,2)
(520,866,2)
(300,750,2)
(58,786,2)
(93,641,2)
(251,209,2)
(2,287,2)
(519,352,2)
(85,400,2)
(690,209,2)
(241,277,2)
(728,842,2)
(438,422,2)
(223,617,2)
(672,161,2)
(114,690,2)
(422,287,2)
(448,597,2)
(902,161,2)
(335,211,2)
(427,287,2)
(118,880,2)
(542,294,2)
(332,209,2)
(915,750,2)
(408,294,2)
(95,109,2)
(355,128,2)
(153,209,2)
(707,209,2)
(5,160,2)
(833,840,2)
(393,294,2)
(145,211,2)
(771,53,2)
(563,652,2)
(40,750,2)
(475,287,2)
(146,760,2)
(654,209,2)
(655,53,2)
(415,199,2)
(854,785,2)
(304,348,2)
(656,296,2)
(858,800,2)
(74,163,2)
(854,352,2)
(413,750,2)
(693,294,2)
(825,755,2)
(920,354,2)
(630,294,2)
(173,420,2)
(534,23,2)
(595,700,2)
(564,209,2)
(328,594,2)
(208,355,2)
(386,296,2)
(718,872,2)
(255,209,2)
(110,679,2)
(344,287,2)
(38,209,2)
(179,773,2)
(743,773,2)
(382,854,2)
(802,750,2)
(382,683,2)
(680,660,2)
(625,368,2)
(639,842,2)
(705,368,2)
(630,32,2)
(37,95,2)
(766,355,2)
(887,594,2)
(919,209,2)
(329,450,2)
(508,32,2)
(479,53,2)
(358,750,2)
(430,888,2)
(615,402,2)
(702,287,2)
(393,700,2)
(53,607,2)
(727,750,2)
(781,840,2)
(535,287,2)
(213,296,2)
(365,296,2)
(113,204,2)
(622,287,2)
(623,287,2)
(368,511,2)
(609,287,2)
(380,865,2)
(695,848,2)
(700,848,2)
(310,294,2)
(128,310,2)
(62,209,2)
(753,691,2)
(374,450,2)
(538,53,2)
(234,750,2)
(366,179,2)
(875,161,2)
(247,750,2)
(220,348,2)
(204,32,2)
(845,838,2)
(202,296,2)
(188,161,2)
(714,838,2)
(797,868,2)
(650,712,2)
(144,209,2)
(661,209,2)
(83,717,2)
(367,800,2)
(659,420,2)
(206,95,2)
(625,660,2)
(519,144,2)
(771,128,2)
(482,617,2)
(268,750,2)
(863,2,2)
(571,160,2)
(376,408,2)
(839,110,2)
(887,44,2)
(744,750,2)
(323,296,2)
(479,744,2)
(249,643,2)
(387,60,2)
(420,830,2)
(184,511,2)
(519,272,2)
(762,294,2)
(687,117,2)
(783,157,2)
(854,162,2)
(465,137,2)
(253,161,2)
(679,450,2)
(597,128,2)
(121,213,2)
(128,53,2)
(411,700,2)
(739,209,2)
(508,53,2)
(888,317,2)
(353,128,2)
(550,171,2)
(779,450,2)
(629,287,2)
(468,209,2)
(796,700,2)
(865,717,2)
(382,1,2)
(382,367,2)
(33,652,2)
(367,381,2)
(120,53,2)
(193,652,2)
(858,840,2)
(454,128,2)
(793,525,2)
(86,750,2)
(155,128,2)
(537,898,2)
(858,212,2)
(407,32,2)
(460,287,2)
(290,840,2)
(265,438,2)
(755,287,2)
(84,146,2)
(144,868,2)
(779,641,2)
(870,450,2)
(903,848,2)
(34,204,2)
(422,750,2)
(712,209,2)
(419,287,2)
(60,355,2)
(44,702,2)
(279,851,2)
(566,838,2)
(631,294,2)
(285,888,2)
(143,161,2)
(117,433,2)
(3,750,2)
(886,128,2)
(547,456,2)
(276,82,2)
(706,838,2)
(477,700,2)
(192,408,2)
(275,287,2)
(670,296,2)
(695,209,2)
(474,750,2)
(767,287,2)
(312,866,2)
(62,717,2)
(745,789,2)
(89,209,2)
(24,294,2)
(344,750,2)
(807,287,2)
(858,381,2)
(679,750,2)
(383,842,2)
(652,44,2)
(800,234,2)
(98,287,2)
(525,888,2)
(466,128,2)
(636,851,2)
(868,272,2)
(59,294,2)
(82,368,2)
(575,825,2)
(508,294,2)
(623,750,2)
(862,48,2)
(104,744,2)
(868,95,2)
(41,571,2)
(658,160,2)
(544,773,2)
(283,715,2)
(151,16,2)
(910,652,2)
(171,287,2)
(262,294,2)
(708,128,2)
(262,348,2)
(374,232,2)
(797,840,2)
(320,700,2)
(900,888,2)
(78,888,2)
(106,866,2)
(209,277,2)
(585,597,2)
(562,691,2)
(595,7,2)
(906,128,2)
(212,346,2)
(778,128,2)
(120,128,2)
(858,65,2)
(854,669,2)
(836,690,2)
(6,738,2)
(35,456,2)
(810,750,2)
(392,407,2)
(31,348,2)
(607,294,2)
(43,137,2)
(110,287,2)
(379,294,2)
(706,95,2)
(674,365,2)
(210,287,2)
(706,888,2)
(383,807,2)
(378,422,2)
(228,309,2)
(840,652,2)
(75,660,2)
(12,294,2)
(127,287,2)
(785,95,2)
(548,373,2)
(408,53,2)
(749,199,2)
(109,617,2)
(356,53,2)
(476,160,2)
(6,53,2)
(262,32,2)
(277,888,2)
(742,750,2)
(782,427,2)
(234,287,2)
(86,287,2)
(36,294,2)
(499,0,2)
(224,717,2)
(461,750,2)
(591,294,2)
(483,627,2)
(478,294,2)
(629,750,2)
(217,450,2)
(521,53,2)
(310,53,2)
(528,534,2)
(483,639,2)
(673,851,2)
(838,597,2)
(49,287,2)
(637,750,2)
(884,456,2)
(273,450,2)
(906,708,2)
(234,501,2)
(156,601,2)
(150,750,2)
(617,334,2)
(917,296,2)
(913,287,2)
(432,110,2)
(253,859,2)
(815,690,2)
(169,128,2)
(832,888,2)
(868,617,2)
(920,294,2)
(276,848,2)
(708,53,2)
(407,264,2)
(562,753,2)
(265,60,2)
(817,161,2)
(319,408,2)
(318,209,2)
(797,888,2)
(871,53,2)
(595,294,2)
(496,691,2)
(715,450,2)
(594,44,2)
(695,838,2)
(822,888,2)
(408,128,2)
(515,617,2)
(751,866,2)
(197,209,2)
(92,44,2)
(56,450,2)
(586,239,2)
(690,789,2)
(638,157,2)
(313,209,2)
(812,866,2)
(23,724,2)
(338,95,2)
(437,691,2)
(858,729,2)
(198,287,2)
(738,294,2)
(813,840,2)
(538,734,2)
(901,750,2)
(664,294,2)
(82,848,2)
(628,450,2)
(546,53,2)
(22,246,2)
(25,408,2)
(609,750,2)
(592,840,2)
(918,888,2)
(412,866,2)
(64,700,2)
(872,700,2)
(553,838,2)
(309,842,2)
(522,550,2)
(293,420,2)
(744,268,2)
(400,368,2)
(260,296,2)
(427,49,2)
(651,641,2)
(858,253,2)
(366,838,2)
(407,848,2)
(286,786,2)
(838,53,2)
(508,128,2)
(914,346,2)
(737,594,2)
(342,209,2)
(374,744,2)
(587,209,2)
(201,204,2)
(2,750,2)
(393,837,2)
(756,769,2)
(336,450,2)
(736,836,2)
(698,161,2)
(85,128,2)
(786,700,2)
(247,287,2)
(270,287,2)
(586,53,2)
(899,161,2)
(472,670,2)
(207,700,2)
(474,450,2)
(641,348,2)
(157,393,2)
(769,700,2)
(760,450,2)
(296,826,2)
(473,750,2)
(198,750,2)
(26,422,2)
(732,750,2)
(63,842,2)
(41,160,2)
(625,294,2)
(113,18,2)
(516,213,2)
(695,888,2)
(836,548,2)
(687,296,2)
(783,450,2)
(65,825,2)
(671,888,2)
(624,888,2)
(912,44,2)
(136,627,2)
(433,296,2)
(604,851,2)
(704,848,2)
(612,144,2)
(846,422,2)
(28,53,2)
(62,768,2)
(48,660,2)
(75,368,2)
(478,95,2)
(330,750,2)
(367,535,2)
(115,296,2)
(544,204,2)
(163,209,2)
(183,456,2)
(702,750,2)
(196,700,2)
(490,773,2)
(273,750,2)
(216,888,2)
(81,227,2)
(506,888,2)
(256,53,2)
(122,822,2)
(577,95,2)
(719,58,2)
(700,128,2)
(471,95,2)
(675,63,2)
(654,848,2)
(239,128,2)
(177,53,2)
(211,840,2)
(147,450,2)
(655,128,2)
(700,144,2)
(297,700,2)
(235,294,2)
(535,450,2)
(621,209,2)
(534,652,2)
(371,209,2)
(395,209,2)
(377,53,2)
(519,684,2)
(889,617,2)
(65,450,2)
(756,294,2)
(8,53,2)
(654,95,2)
(69,888,2)
(719,294,2)
(7,851,2)
(896,427,2)
(231,617,2)
(888,407,2)
(610,583,2)
(397,594,2)
(351,750,2)
(63,296,2)
(618,161,2)
(80,2,2)
(842,161,2)
(479,128,2)
(593,209,2)
(536,296,2)
(68,652,2)
(472,213,2)
(763,209,2)
(178,866,2)
(797,95,2)
(532,161,2)
(652,162,2)
(400,128,2)
(170,128,2)
(402,84,2)
(102,641,2)
(85,53,2)
(694,53,2)
(239,0,2)
(861,450,2)
(125,888,2)
(247,283,2)
(333,209,2)
(66,296,2)
(631,700,2)
(174,346,2)
(232,432,2)
(583,700,2)
(897,53,2)
(561,44,2)
(834,750,2)
(479,232,2)
(660,85,2)
(394,801,2)
(894,128,2)
(759,838,2)
(760,402,2)
(98,750,2)
(347,277,2)
(552,450,2)
(424,725,2)
(179,294,2)
(352,848,2)
(189,128,2)
(204,294,2)
(733,294,2)
(680,128,2)
(422,450,2)
(159,483,2)
(535,750,2)
(791,53,2)
(742,450,2)
(768,209,2)
(548,717,2)
(478,61,2)
(893,128,2)
(529,888,2)
(287,190,2)
(786,719,2)
(413,287,2)
(364,836,2)
(728,296,2)
(443,750,2)
(511,128,2)
(694,128,2)
(706,534,2)
(460,750,2)
(270,750,2)
(734,128,2)
(258,750,2)
(330,287,2)
(821,773,2)
(176,209,2)
(242,161,2)
(199,118,2)
(806,163,2)
(147,44,2)
(573,511,2)
(542,408,2)
(17,53,2)
(87,296,2)
(787,300,2)
(608,450,2)
(104,422,2)
(379,786,2)
(438,470,2)
(683,287,2)
(354,53,2)
(481,594,2)
(473,287,2)
(773,456,2)
(167,234,2)
(30,898,2)
(854,616,2)
(277,122,2)
(32,779,2)
(858,742,2)
(367,378,2)
(457,769,2)
(21,450,2)
(639,627,2)
(602,209,2)
(691,700,2)
(367,299,2)
(144,128,2)
(722,44,2)
(696,652,2)
(734,484,2)
(369,550,2)
(865,163,2)
(324,294,2)
(462,866,2)
(830,408,2)
(312,294,2)
(700,888,2)
(129,840,2)
(510,44,2)
(420,408,2)
(511,906,2)
(295,825,2)
(149,700,2)
(787,450,2)
(250,44,2)
(435,769,2)
(851,595,2)
(859,161,2)
(346,98,2)
(23,628,2)
(75,209,2)
(501,287,2)
(729,550,2)
(348,53,2)
(428,807,2)
(503,786,2)
(359,597,2)
(199,700,2)
(367,552,2)
(484,354,2)
(776,769,2)
(203,209,2)
(585,761,2)
(905,700,2)
(837,783,2)
(159,627,2)
(214,161,2)
(823,213,2)
(449,700,2)
(294,610,2)
(367,212,2)
(241,209,2)
(826,383,2)
(551,234,2)
(256,660,2)
(797,838,2)
(217,594,2)
(206,617,2)
(898,229,2)
(269,456,2)
(898,750,2)
(501,450,2)
(650,75,2)
(671,705,2)
(729,450,2)
(348,743,2)
(142,652,2)
(237,456,2)
(37,482,2)
(227,888,2)
(913,750,2)
(654,838,2)
(357,597,2)
(82,660,2)
(465,675,2)
(155,53,2)
(47,888,2)
(641,262,2)
(451,420,2)
(764,60,2)
(795,211,2)
(769,235,2)
(712,525,2)
(137,296,2)
(109,294,2)
(114,209,2)
(24,691,2)
(224,506,2)
(521,128,2)
(336,427,2)
(18,544,2)
(567,402,2)
(680,294,2)
(338,478,2)
(866,420,2)
(697,209,2)
(768,506,2)
(885,750,2)
(300,584,2)
(666,456,2)
(1,652,2)
(861,769,2)
(50,825,2)
(463,209,2)
(391,700,2)
(539,750,2)
(278,733,2)
(728,807,2)
(791,128,2)
(169,53,2)
(637,287,2)
(443,287,2)
(597,53,2)
(597,680,2)
(822,81,2)
(49,450,2)
(368,370,2)
(317,445,2)
(870,394,2)
(246,866,2)
(367,253,2)
(59,851,2)
(743,53,2)
(549,617,2)
(510,311,2)
(511,329,2)
(706,128,2)
(181,617,2)
(778,53,2)
(249,296,2)
(848,838,2)
(254,209,2)
(821,128,2)
(755,750,2)
(374,511,2)
(281,346,2)
(528,700,2)
(45,128,2)
(269,660,2)
(726,209,2)
(228,161,2)
(299,110,2)
(299,450,2)
(130,617,2)
(168,617,2)
(308,287,2)
(475,750,2)
(708,368,2)
(282,450,2)
(469,408,2)
(226,209,2)
(922,44,2)
(872,298,2)
(689,840,2)
(548,690,2)
(912,441,2)
(510,594,2)
(429,872,2)
(39,750,2)
(22,866,2)
(324,95,2)
(866,293,2)
(480,296,2)
(248,161,2)
(650,209,2)
(600,625,2)
(678,630,2)
(56,786,2)
(191,840,2)
(246,312,2)
(842,214,2)
(258,287,2)
(365,687,2)
(794,296,2)
(75,294,2)
(733,420,2)
(314,464,2)
(332,294,2)
(550,287,2)
(517,199,2)
(150,287,2)
(215,652,2)
(669,838,2)
(808,408,2)
(715,287,2)
(95,617,2)
(288,39,2)
(700,209,2)
(810,287,2)
(858,299,2)
(633,128,2)
(44,750,2)
(204,585,2)
(109,61,2)
(105,427,2)
(166,128,2)
(194,408,2)
(582,840,2)
(177,128,2)
(442,700,2)
(550,750,2)
(310,538,2)
(400,53,2)
(682,296,2)
(790,95,2)
(705,888,2)
(256,368,2)
(743,151,2)
(825,750,2)
(293,173,2)
(367,336,2)
(55,44,2)
(179,151,2)
(421,838,2)
(229,287,2)
(565,287,2)
(37,617,2)
(843,211,2)
(19,128,2)
(296,2,2)
(692,287,2)
(63,807,2)
(544,151,2)
(858,147,2)
(487,594,2)
(773,27,2)
(827,700,2)
(9,456,2)
(107,848,2)
(734,256,2)
(45,53,2)
(151,60,2)
(911,750,2)
(502,691,2)
(133,700,2)
(607,700,2)
(767,750,2)
(854,272,2)
(235,172,2)
(363,842,2)
(200,906,2)
(807,750,2)
(801,840,2)
(71,128,2)
(845,920,2)
(130,294,2)
(770,209,2)
(346,287,2)
(617,209,2)
(876,700,2)
(708,660,2)
(53,700,2)
(500,213,2)
(292,690,2)
(235,844,2)
(380,163,2)
(757,53,2)
(695,95,2)
(306,838,2)
(631,562,2)
(484,128,2)
(381,450,2)
(209,888,2)
(625,838,2)
(456,128,2)
(482,95,2)
(273,232,2)
(48,368,2)
(394,840,2)
(39,287,2)
(265,450,2)
(847,157,2)
(280,534,2)
(161,750,2)
(383,2,2)
(61,617,2)
(725,151,2)
(693,199,2)
(838,824,2)
(257,199,2)
(118,294,2)
(490,151,2)
(367,65,2)
(185,750,2)
(17,128,2)
(93,294,2)
(311,44,2)
(351,287,2)
(429,450,2)
(229,750,2)
(647,838,2)
(679,287,2)
(880,608,2)
(565,750,2)
(190,750,2)
(622,750,2)
(654,128,2)
(700,95,2)
(717,525,2)
(144,888,2)
(44,287,2)
(813,450,2)
(329,906,2)
(725,294,2)
(646,209,2)
(400,660,2)
(644,209,2)
(854,684,2)
(761,354,2)
(828,700,2)
(283,750,2)
(543,652,2)
(48,838,2)
(139,39,2)
(645,786,2)
(409,700,2)
(835,39,2)
(789,209,2)
(853,866,2)
(460,210,2)
(752,209,2)
(410,209,2)
(19,53,2)
(238,848,2)
(459,209,2)
(507,851,2)
(370,511,2)
(36,407,2)
(124,511,2)
(663,866,2)
(633,53,2)
(416,53,2)
(598,750,2)
(821,151,2)
(705,660,2)
(309,161,2)
(601,866,2)
(350,825,2)
(353,53,2)
(481,44,2)
(681,209,2)
(675,296,2)
(628,652,2)
(837,157,2)
(586,128,2)
(725,888,2)
(761,597,2)
(162,510,2)
(333,739,2)
(245,700,2)
(757,128,2)
(652,594,2)
(367,729,2)
(702,258,2)
(570,294,2)
(498,53,2)
(218,95,2)
(493,294,2)
(465,296,2)
(51,95,2)
(492,209,2)
(275,750,2)
(489,700,2)
(719,700,2)
(418,866,2)
(146,402,2)
(700,519,2)
(735,511,2)
(491,211,2)
(189,53,2)
(493,209,2)
(744,287,2)
(82,294,2)
(61,91,2)
(99,204,2)
(456,294,2)
(301,787,2)
(766,438,2)
(578,700,2)
(243,287,2)
(797,848,2)
(885,287,2)
(584,750,2)
(334,12,2)
(229,450,2)
(348,128,2)
(390,44,2)
(476,294,2)
(685,888,2)
(495,422,2)
(907,700,2)
(544,294,2)
(571,450,2)
(4,700,2)
(859,450,2)
(54,750,2)
(748,402,2)
(153,224,2)
(20,161,2)
(363,677,2)
(920,538,2)
(519,616,2)
(131,60,2)
(657,247,2)
(654,868,2)
(282,44,2)
(747,898,2)
(867,550,2)
(294,700,2)
(539,287,2)
(173,278,2)
(854,840,2)
(313,294,2)
(761,294,2)
(363,161,2)
(132,700,2)
(527,209,2)
(848,600,2)
(398,53,2)
(545,234,2)
(470,104,2)
(73,365,2)
(573,294,2)
(269,294,2)
(792,209,2)
(921,213,2)
(402,700,2)
(46,394,2)
(547,294,2)
(858,552,2)
(239,678,2)
(169,294,2)
(373,836,2)
(518,213,2)
(160,477,2)
(519,669,2)
(424,888,2)
(510,217,2)
(76,838,2)
(161,287,2)
(60,53,2)
(12,209,2)
(90,422,2)
(441,44,2)
(211,813,2)
(745,690,2)
(51,617,2)
(52,422,2)
(825,287,2)
(874,60,2)
(688,511,2)
(3,287,2)
(367,742,2)
(700,838,2)
(445,407,2)
(282,912,2)
(157,700,2)
(10,157,2)
(660,53,2)
(512,209,2)
(407,294,2)
(96,209,2)
(838,128,2)
(16,265,2)
(610,360,2)
(219,213,2)
(79,296,2)
(762,872,2)
(324,61,2)
(706,868,2)
(466,53,2)
(328,44,2)
(232,110,2)
(399,209,2)
(470,422,2)
(627,296,2)
(581,287,2)
(156,866,2)
(291,160,2)
(610,700,2)
(477,294,2)
(519,176,2)
(678,0,2)
(243,750,2)
(310,354,2)
(355,821,2)
(84,700,2)
(91,617,2)
(308,750,2)
(171,450,2)
(364,789,2)
(29,161,2)
(388,209,2)
(40,287,2)
(313,660,2)
(325,296,2)
(608,199,2)
(283,287,2)
(339,163,2)
(170,53,2)
(614,617,2)
(137,66,2)
(541,95,2)
(0,508,2)
(793,209,2)
(161,247,2)
(670,301,2)
(717,209,2)
(13,848,2)
(516,670,2)
(892,294,2)
(561,594,2)
(27,490,2)
(122,888,2)
(103,836,2)
(60,766,2)
(630,0,2)
(491,335,2)
(224,209,2)
(119,550,2)
(603,209,2)
(217,44,2)
(121,921,2)
(62,493,2)
(891,402,2)
(144,838,2)
(278,420,2)
(515,95,2)
(179,838,2)
(218,617,2)
(97,700,2)
(346,750,2)
(750,21,2)
(414,888,2)
(84,294,2)
(911,287,2)
(433,450,2)
(538,128,2)
(316,700,2)
(67,750,2)
(591,128,2)
(775,750,2)
(635,769,2)
(256,128,2)
(287,750,2)
(826,2,2)
(708,294,2)
(195,848,2)
(899,842,2)
(734,53,2)
(263,296,2)
(852,110,2)
(272,617,2)
(319,294,2)
(841,348,2)
(118,700,2)
(484,538,2)
(60,128,2)
(318,793,2)
(239,53,2)
(921,807,2)
(695,534,2)
(268,273,2)
(632,906,2)
(801,450,2)
(436,750,2)
(703,128,2)
(354,6,2)
(648,700,2)
(525,671,2)
(639,807,2)
(456,53,2)
(732,287,2)
(315,866,2)
(347,209,2)
(322,585,2)
(724,652,2)
(627,249,2)
(16,60,2)
(318,313,2)
(598,287,2)
(230,700,2)
(378,450,2)
(221,209,2)
(54,287,2)
(117,296,2)
(400,294,2)
(577,617,2)
-----------------------------------
(0,zone->dnssec_enable == 0)
(1,return ret;)
(2,ctl_if)
(3,ret = KNOT_EOK)
(4,zone)
(5,dbsync_timeout)
(6,strcdup(zone->name, "zone")
(7,zone->disable_any = conf->disable_any)
(8,"zone")
(9,dnssec_keydir)
(10,zone)
(11,REMOTE_DPORT)
(12,zone->query_modules)
(13,storage)
(14,dpos)
(15,)
(16,strdup(conf->dnssec_keydir)
(17,storage)
(18,zone->dnssec_keydir == NULL)
(19,zone)
(20,ctl_if)
(21,conf->rundir)
(22,WALK_LIST_FREE(zone->acl.xfr_in)
(23,hattrie_iter_begin(conf->zones, sorted)
(24,zone->notify_timeout)
(25,zone->acl.notify_in)
(26,conf)
(27,conf_abs_path(zone->storage,\n\\n\\t\\t\\t                                    zone->dnssec_keydir)
(28,name)
(29,"knot.sock")
(30,max_conn_idle)
(31,zone)
(32,zone->dnssec_enable = conf->dnssec_enable)
(33,ret)
(34,NULL)
(35,zone)
(36,zone->dnssec_keydir)
(37,module->load(zone->query_plan, module)
(38,name)
(39,conf->rrl_size == 0)
(40,conf)
(41,zone->dbsync_timeout = conf->dbsync_timeout)
(42,if (zone->dnssec_enable)
(43,memset(full_path, 0, SOCKADDR_STRLEN)
(44,!EMPTY_LIST(conf->query_modules)
(45,dnssec_enable)
(46,conf->gid = getgid()
(47,size)
(48,zone->storage)
(49,conf->rrl_slip)
(50,CONFIG_HANDSHAKE_WD)
(51,zone)
(52,dnssec_keydir)
(53,zone->file == NULL)
(54,conf)
(55,query_plan)
(56,conf->notify_retries)
(57,max_tcp_clients)
(58,zone->notify_retries = conf->notify_retries)
(59,zone->disable_any)
(60,!zone->dnssec_keydir && conf->dnssec_keydir)
(61,zone->query_plan = query_plan_create(NULL)
(62,memcpy(dpos, zone->name, zname_len + 1)
(63,ctl_if->addr)
(64,ixfr_fslimit)
(65,conf->max_conn_hs)
(66,malloc(SOCKADDR_STRLEN)
(67,conf)
(68,z_iter)
(69,"DNSSEC key directory \'%s\' does not exist")
(70,)
(71,ret)
(72,addr)
(73,"control \'allow\' statement does not "\n\\n\\t\\t\\t\\t            "affect UNIX sockets")
(74,dpos)
(75,zone->storage)
(76,storage)
(77,if (dpos[i] == \'/\')
(78,dest)
(79,addr)
(80,ss_family)
(81,stor_len + zname_len + 9)
(82,zone->storage)
(83,*dpos)
(84,zone->sig_lifetime)
(85,conf_abs_path(conf->storage, zone->storage)
(86,have)
(87,0)
(88,sorted)
(89,*dbext = "diff.db")
(90,conf->dnssec_keydir)
(91,query_plan_create(NULL)
(92,conf)
(93,zone->dnssec_enable)
(94,\'\\0\')
(95,zone->query_plan == NULL)
(96,0)
(97,0)
(98,conf->max_tcp_clients)
(99,zone)
(100,storage)
(101,"storage directory \'%s\' does not exist")
(102,zone)
(103,i)
(104,conf->storage)
(105,rrl_slip)
(106,acl)
(107,KNOT_EINVAL)
(108,ctl_if)
(109,zone->query_plan)
(110,conf->storage == NULL)
(111,stor_len)
(112,)
(113,zone->dnssec_enable && zone->dnssec_keydir == NULL)
(114,zname_len)
(115,full_path)
(116,1)
(117,conf->ctl.allow)
(118,zone->ixfr_fslimit)
(119,conf->xfers = CONFIG_XFERS)
(120,file)
(121,&ctl_if->addr)
(122,malloc(size)
(123,if (conf->gid < 0)
(124,conf)
(125,ret)
(126,zone)
(127,max_conn_idle)
(128,!zone->file)
(129,KNOT_ERROR)
(130,zone->query_plan)
(131,dnssec_keydir)
(132,zone)
(133,z_iter)
(134,if (zone->notify_timeout <= 0)
(135,conf)
(136,ctl_if)
(137,*full_path = malloc(SOCKADDR_STRLEN)
(138,)
(139,conf->rrl_size = CONFIG_RRL_SIZE)
(140,full_path)
(141,if (!zone->dnssec_keydir && conf->dnssec_keydir)
(142,z_iter)
(143,addr)
(144,!hattrie_iter_finished(z_iter)
(145,uid)
(146,zone->sig_lifetime = conf->sig_lifetime)
(147,conf->query_plan)
(148,ctl_if)
(149,zone)
(150,1)
(151,zone->dnssec_keydir = strdup(conf->dnssec_keydir)
(152,if (!EMPTY_LIST(zone->query_modules)
(153,memcpy(dpos + zname_len, dbext, strlen(dbext)
(154,storage)
(155,zone)
(156,log_zone_str_notice(zone->name, "automatic "\n\\n\\t\\t\\t\\t\\t"DNSSEC signing enabled, disabling "\n\\n\\t\\t\\t\\t\\t"incoming XFRs")
(157,zone->serial_policy == 0)
(158,zone)
(159,sockaddr_port_set(&ctl_if->addr, REMOTE_DPORT)
(160,zone->dbsync_timeout < 0)
(161,!conf->ctl.have && ctl_if == NULL)
(162,ret = module->load(conf->query_plan, module)
(163,zone->storage[stor_len - 1] != \'/\')
(164,z_iter)
(165,zone->dnssec_keydir)
(166,continue;)
(167,max_conn_reply)
(168,query_plan)
(169,zone->file)
(170,0)
(171,conf->xfers)
(172,zone->build_diffs = true)
(173,EMPTY_LIST(zone->acl.xfr_in)
(174,conf->max_tcp_clients = CONFIG_MAXTCP)
(175,if (conf->max_conn_hs < 1)
(176,ret = KNOT_ENOMEM)
(177,zone)
(178,zone)
(179,zone->dnssec_keydir)
(180,)
(181,query_plan)
(182,)
(183,storage)
(184,storage)
(185,conf)
(186,zname_len)
(187,*(dpos++)
(188,conf)
(189,zone)
(190,conf->rundir)
(191,conf)
(192,notify_in)
(193,conf)
(194,true)
(195,zone)
(196,0)
(197,zone)
(198,storage)
(199,zone->ixfr_fslimit == 0)
(200,storage)
(201,dnssec_keydir)
(202,ctl_if)
(203,continue;)
(204,zone->dnssec_enable)
(205,i)
(206,ret)
(207,zone)
(208,dnssec_keydir)
(209,dest == NULL)
(210,conf->ctl)
(211,conf->uid < 0)
(212,conf->max_tcp_clients)
(213,full_path)
(214,malloc(sizeof(conf_iface_t)
(215,false)
(216,zone)
(217,conf->query_plan)
(218,ret)
(219,ctl_if)
(220,0)
(221,dbext)
(222,continue;)
(223,zone)
(224,dpos + zname_len)
(225,rundir)
(226,dest)
(227,zname_len + 9)
(228,&ctl_if->addr)
(229,conf->max_conn_idle)
(230,0)
(231,NULL)
(232,conf->storage = strdup(STORAGE_DIR)
(233,)
(234,conf->max_conn_reply < 1)
(235,zone->build_diffs)
(236,if (ret != KNOT_EOK)
(237,dnssec_keydir)
(238,continue;)
(239,zone->dnssec_enable == 0 || zone->dnssec_enable == 1)
(240,)
(241,zone->ixfr_db = dest)
(242,sizeof(conf_iface_t)
(243,iface)
(244,module)
(245,zone)
(246,zone->acl.xfr_in)
(247,!conf->ctl.have)
(248,0)
(249,sockaddr_port(&ctl_if->addr)
(250,NULL)
(251,1)
(252,query_plan)
(253,conf->ctl.iface)
(254,1)
(255,dbext)
(256,zone->storage)
(257,conf)
(258,conf->query_modules)
(259,)
(260,full_path)
(261,if (!EMPTY_LIST(zone->acl.notify_in)
(262,zone->dnssec_enable)
(263,addr)
(264,zone->dnssec_enable = 0)
(265,conf->dnssec_keydir)
(266,zone)
(267,)
(268,strcpath(conf->storage)
(269,zone->storage)
(270,storage)
(271,if (!conf->ctl.have && ctl_if == NULL)
(272,ret = module->load(zone->query_plan, module)
(273,conf->storage)
(274,zone)
(275,ctl)
(276,log_error("storage directory \'%s\' does not exist",\n\\n\\t\\t\\t          zone->storage)
(277,*dest = malloc(size)
(278,zone->acl.xfr_in)
(279,conf)
(280,hattrie_iter_free(z_iter)
(281,CONFIG_MAXTCP)
(282,conf->query_plan)
(283,conf->ctl.have)
(284,acl)
(285,zone)
(286,notify_retries)
(287,conf->rundir == NULL)
(288,CONFIG_RRL_SIZE)
(289,conf)
(290,gid)
(291,zone)
(292,i)
(293,!EMPTY_LIST(zone->acl.xfr_in)
(294,*zone = (conf_zone_t *)
(295,conf)
(296,ctl_if->addr.ss_family == AF_UNIX)
(297,0)
(298,zone->enable_checks)
(299,conf->storage)
(300,conf->rundir = strdup(RUN_DIR)
(301,conf_abs_path(conf->rundir, full_path)
(302,ret)
(303,rrl_size)
(304,zone)
(305,dbsync_timeout)
(306,ret)
(307,)
(308,max_conn_reply)
(309,ctl_if->addr)
(310,zone->file)
(311,*module = NULL)
(312,zone->acl)
(313,zone->storage)
(314,strlen(zone->name)
(315,acl)
(316,zone)
(317,!is_existing_dir(zone->dnssec_keydir)
(318,zone->storage[stor_len - 1])
(319,zone->acl)
(320,NULL)
(321,zone)
(322,zone)
(323,SOCKADDR_STRLEN)
(324,zone->query_plan)
(325,conf)
(326,)
(327,if (dest == NULL)
(328,ret)
(329,conf->storage)
(330,1)
(331,conf)
(332,zone->ixfr_db)
(333,strlen(dbext)
(334,EMPTY_LIST(zone->query_modules)
(335,getuid()
(336,conf->rrl_slip)
(337,name)
(338,internet_query_plan(zone->query_plan)
(339,dpos)
(340,if (!EMPTY_LIST(conf->query_modules)
(341,zone)
(342,dpos)
(343,)
(344,storage)
(345,ctl)
(346,conf->max_tcp_clients < 1)
(347,*dpos = dest)
(348,!zone->dnssec_keydir)
(349,full_path)
(350,max_conn_hs)
(351,conf)
(352,ret = KNOT_EINVAL)
(353,zone)
(354,zone->file = strcdup(zone->name, "zone")
(355,!zone->dnssec_keydir)
(356,zone)
(357,file)
(358,ctl)
(359,zone)
(360,conf_zone_t *)
(361,if (zone->sig_lifetime <= 0)
(362,dnssec_enable)
(363,memset(ctl_if, 0, sizeof(conf_iface_t)
(364,dpos[i])
(365,!EMPTY_LIST(conf->ctl.allow)
(366,free(zone->dnssec_keydir)
(367,return KNOT_ENOMEM;)
(368,zone->storage = strdup(conf->storage)
(369,xfers)
(370,strdup(conf->storage)
(371,\'/\')
(372,)
(373,dpos[i] = \'_\')
(374,conf->storage)
(375,storage)
(376,acl)
(377,dnssec_keydir)
(378,conf->dnssec_keydir)
(379,zone->notify_retries)
(380,*(dpos++)
(381,conf->rrl_size)
(382,RET)
(383,ctl_if->addr)
(384,)
(385,conf)
(386,0)
(387,dnssec_keydir)
(388,zone)
(389,rundir)
(390,query_plan)
(391,0)
(392,dnssec_keydir)
(393,zone->serial_policy)
(394,conf->gid < 0)
(395,storage)
(396,conf)
(397,NULL)
(398,file)
(399,zone->ixfr_db)
(400,zone->storage)
(401,if (conf->max_conn_idle < 1)
(402,zone->sig_lifetime <= 0)
(403,dnssec_enable)
(404,dest)
(405,build_diffs)
(406,size)
(407,zone->dnssec_enable)
(408,zone->dnssec_enable)
(409,zone)
(410,zone)
(411,disable_any)
(412,zone->acl.notify_in)
(413,0)
(414,continue;)
(415,zone)
(416,file)
(417,CONFIG_IDLE_WD)
(418,zone)
(419,conf)
(420,!EMPTY_LIST(zone->acl.notify_in)
(421,KNOT_ENOMEM)
(422,conf->dnssec_keydir)
(423,)
(424,log_error("DNSSEC key directory \'%s\' does not exist",\n\\n\\t\\t\\t          zone->dnssec_keydir)
(425,)
(426,if (conf->max_conn_reply < 1)
(427,conf->rrl_slip < 0)
(428,ctl_if == NULL)
(429,conf->zone_checks)
(430,9)
(431,zone->enable_checks = conf->zone_checks)
(432,strdup(STORAGE_DIR)
(433,conf->ctl)
(434,)
(435,build_diffs)
(436,NULL)
(437,conf)
(438,conf->dnssec_keydir = conf_abs_path(conf->storage,\n\\n\\t\\t                                    conf->dnssec_keydir)
(439,STORAGE_DIR)
(440,)
(441,query_plan_create(NULL)
(442,notify_timeout)
(443,NULL)
(444,gid)
(445,is_existing_dir(zone->dnssec_keydir)
(446,if (ctl_if)
(447,)
(448,NULL)
(449,0)
(450,conf_t *conf)
(451,xfr_in)
(452,)
(453,)
(454,dnssec_keydir)
(455,if (!zone->dnssec_keydir)
(456,zone->dnssec_enable)
(457,zone)
(458,)
(459,1)
(460,conf->ctl.iface)
(461,xfers)
(462,xfr_in)
(463,zone)
(464,zone->name)
(465,sockaddr_tostr(full_path, SOCKADDR_STRLEN, &ctl_if->addr)
(466,zone)
(467,if (conf->max_tcp_clients < 1)
(468,ixfr_db)
(469,build_diffs)
(470,conf_abs_path(conf->storage,\n\\n\\t\\t                                    conf->dnssec_keydir)
(471,NULL)
(472,sockaddr_set(&ctl_if->addr, AF_UNIX, full_path, 0)
(473,conf)
(474,conf->rrl_size)
(475,1)
(476,zone->dbsync_timeout)
(477,zone->dbsync_timeout)
(478,zone->query_plan)
(479,conf->storage)
(480,SOCKADDR_STRLEN)
(481,ret)
(482,*module = NULL)
(483,&ctl_if->addr)
(484,zone->file)
(485,zone)
(486,if (ctl_if->addr.ss_family == AF_UNIX)
(487,KNOT_ENOMEM)
(488,if (zone->query_plan == NULL)
(489,zone)
(490,zone->dnssec_keydir)
(491,conf->uid = getuid()
(492,query_modules)
(493,zone->name)
(494,if (zone->disable_any < 0)
(495,dnssec_keydir)
(496,notify_timeout)
(497,NULL)
(498,zone)
(499,dnssec_enable)
(500,addr)
(501,conf->max_conn_reply)
(502,zone)
(503,notify_retries)
(504,if (conf->rrl_slip < 0)
(505,\'/\')
(506,zname_len = strlen(zone->name)
(507,disable_any)
(508,zone->dnssec_enable)
(509,)
(510,module->load(conf->query_plan, module)
(511,!zone->storage && conf->storage)
(512,ixfr_db)
(513,ctl_if)
(514,)
(515,module)
(516,free(full_path)
(517,ixfr_fslimit)
(518,AF_UNIX)
(519,ret == KNOT_EOK)
(520,"automatic "\n\\n\\t\\t\\t\\t\\t"DNSSEC signing enabled, disabling "\n\\n\\t\\t\\t\\t\\t"incoming XFRs")
(521,file)
(522,CONFIG_XFERS)
(523,if (zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)
(524,if (zone->notify_retries <= 0)
(525,stor_len = strlen(zone->storage)
(526,SOCKADDR_STRLEN)
(527,dest)
(528,hattrie_iter_val(z_iter)
(529,dnssec_keydir)
(530,)
(531,)
(532,ctl_if)
(533,rrl_size)
(534,*z_iter = hattrie_iter_begin(conf->zones, sorted)
(535,conf->storage)
(536,ctl_if)
(537,conf)
(538,zone->file = conf_abs_path(zone->storage, zone->file)
(539,0)
(540,zname_len)
(541,continue;)
(542,zone->build_diffs)
(543,sorted)
(544,zone->dnssec_keydir)
(545,CONFIG_REPLY_WD)
(546,zone)
(547,zone->dnssec_keydir)
(548,dpos[i])
(549,NULL)
(550,conf->xfers <= 0)
(551,conf)
(552,conf->max_conn_idle)
(553,zone)
(554,)
(555,)
(556,if (conf->dnssec_keydir)
(557,if (!zone->file)
(558,dbext)
(559,AF_UNIX)
(560,)
(561,module)
(562,zone->notify_timeout = conf->notify_timeout)
(563,NULL)
(564,stor_len)
(565,dnssec_keydir)
(566,zone)
(567,sig_lifetime)
(568,addr)
(569,enable_checks)
(570,zone->file)
(571,conf->dbsync_timeout)
(572,)
(573,zone->storage)
(574,zone->dnssec_enable)
(575,conf->max_conn_hs = CONFIG_HANDSHAKE_WD)
(576,)
(577,KNOT_EOK)
(578,file)
(579,full_path)
(580,\'/\')
(581,conf)
(582,ret)
(583,*hattrie_iter_val(z_iter)
(584,strdup(RUN_DIR)
(585,zone->file == NULL)
(586,assert(zone->dnssec_enable == 0 || zone->dnssec_enable == 1)
(587,1)
(588,)
(589,)
(590,dpos)
(591,zone->storage)
(592,uid)
(593,NULL)
(594,conf->query_plan == NULL)
(595,zone->disable_any)
(596,)
(597,zone->storage == NULL)
(598,conf)
(599,break;)
(600,is_existing_dir(zone->storage)
(601,zone->name)
(602,"diff.db")
(603,dpos)
(604,conf->disable_any)
(605,zone)
(606,)
(607,zone->file)
(608,conf->ixfr_fslimit)
(609,KNOT_EOK)
(610,(conf_zone_t *)
(611,for (size_t i = 0; i < zname_len; ++i)
(612,KNOT_EOK)
(613,if (ret != KNOT_EOK)
(614,query_plan)
(615,sig_lifetime)
(616,ret = KNOT_ENOMEM)
(617,!EMPTY_LIST(zone->query_modules)
(618,ctl_if)
(619,if (!zone->storage && conf->storage)
(620,if (!is_existing_dir(zone->storage)
(621,ret)
(622,conf)
(623,conf)
(624,NULL)
(625,zone->storage)
(626,stor_len)
(627,sockaddr_port(&ctl_if->addr)
(628,conf->zones)
(629,0)
(630,zone->dnssec_enable)
(631,zone->notify_timeout)
(632,conf)
(633,zone)
(634,ret)
(635,conf)
(636,disable_any)
(637,ctl_if)
(638,conf)
(639,ctl_if->addr)
(640,if (conf->rundir == NULL)
(641,zone->dnssec_enable < 0)
(642,)
(643,&ctl_if->addr)
(644,i)
(645,zone)
(646,i)
(647,file)
(648,notify_retries)
(649,getgid()
(650,memcpy(dpos, zone->storage, stor_len + 1)
(651,conf)
(652,ret != KNOT_EOK)
(653,dnssec_enable)
(654,z_iter)
(655,storage)
(656,conf)
(657,NULL)
(658,dbsync_timeout)
(659,zone)
(660,zone->storage = conf_abs_path(conf->storage, zone->storage)
(661,zone)
(662,z_iter)
(663,zone)
(664,zone->sig_lifetime)
(665,)
(666,zone)
(667,conf->max_conn_reply = CONFIG_REPLY_WD)
(668,if (conf->xfers <= 0)
(669,ret = KNOT_ENOMEM)
(670,full_path = conf_abs_path(conf->rundir, full_path)
(671,strlen(zone->storage)
(672,0)
(673,zone)
(674,log_warning("control \'allow\' statement does not "\n\\n\\t\\t\\t\\t            "affect UNIX sockets")
(675,&ctl_if->addr)
(676,zone)
(677,sizeof(conf_iface_t)
(678,zone->dnssec_enable == 1)
(679,conf->storage)
(680,zone->storage)
(681,stor_len)
(682,full_path)
(683,return KNOT_ENOMEM;)
(684,ret = KNOT_EINVAL)
(685,zname_len)
(686,conf)
(687,EMPTY_LIST(conf->ctl.allow)
(688,zone)
(689,conf)
(690,i < zname_len)
(691,zone->notify_timeout <= 0)
(692,KNOT_ENOMEM)
(693,zone->ixfr_fslimit)
(694,zone)
(695,hattrie_iter_next(z_iter)
(696,zones)
(697,zname_len)
(698,sockaddr_set(&ctl_if->addr, AF_UNIX, "knot.sock", 0)
(699,if (zone->ixfr_fslimit == 0)
(700,!hattrie_iter_finished(z_iter)
(701,if (!EMPTY_LIST(conf->ctl.allow)
(702,EMPTY_LIST(conf->query_modules)
(703,zone)
(704,dnssec_enable)
(705,zone->storage)
(706,hattrie_iter_finished(z_iter)
(707,stor_len)
(708,zone->storage)
(709,KNOT_EINVAL)
(710,)
(711,if (conf->rrl_size == 0)
(712,stor_len + 1)
(713,if (conf->uid < 0)
(714,zone)
(715,conf->ctl)
(716,dpos)
(717,dpos += stor_len)
(718,zone)
(719,zone->notify_retries)
(720,if (zone->storage[stor_len - 1] != \'/\')
(721,stor_len)
(722,query_plan)
(723,full_path)
(724,sorted = false)
(725,zone->dnssec_keydir)
(726,storage)
(727,conf)
(728,ctl_if->addr)
(729,conf->xfers)
(730,zone)
(731,rundir)
(732,rrl_slip)
(733,zone->acl)
(734,conf_abs_path(zone->storage, zone->file)
(735,storage)
(736,\'_\')
(737,KNOT_EOK)
(738,zone->name)
(739,strlen(dbext)
(740,notify_timeout)
(741,)
(742,conf->rundir)
(743,zone->dnssec_keydir)
(744,conf->storage = strcpath(conf->storage)
(745,++i)
(746,if (zone->build_diffs < 0)
(747,conf->max_conn_idle = CONFIG_IDLE_WD)
(748,conf)
(749,ixfr_fslimit)
(750,conf->rundir == NULL)
(751,zone->acl)
(752,zname_len)
(753,conf->notify_timeout)
(754,zone_checks)
(755,conf->max_conn_hs)
(756,zone->build_diffs)
(757,zone)
(758,zone)
(759,zone)
(760,conf->sig_lifetime)
(761,zone->file)
(762,zone->enable_checks)
(763,dbext)
(764,zone)
(765,conf)
(766,conf->dnssec_keydir)
(767,conf)
(768,zname_len + 1)
(769,zone->build_diffs < 0)
(770,KNOT_ENOMEM)
(771,storage)
(772,conf)
(773,zone->dnssec_keydir = conf_abs_path(zone->storage,\n\\n\\t\\t\\t                                    zone->dnssec_keydir)
(774,dnssec_enable)
(775,1)
(776,build_diffs)
(777,storage)
(778,storage)
(779,conf->dnssec_enable)
(780,ret)
(781,0)
(782,conf->rrl_slip = CONFIG_RRL_SLIP)
(783,conf->serial_policy)
(784,if(full_path)
(785,ret = KNOT_ENOMEM)
(786,zone->notify_retries <= 0)
(787,conf->rundir)
(788,serial_policy)
(789,i = 0)
(790,KNOT_ENOMEM)
(791,zone)
(792,dpos)
(793,stor_len - 1)
(794,full_path)
(795,conf)
(796,enable_checks)
(797,z_iter)
(798,if (zone->storage == NULL ||\n\\n\\t\\t    zone->file == NULL ||\n\\n\\t\\t    (zone->dnssec_enable && zone->dnssec_keydir == NULL)
(799,)
(800,conf->max_conn_reply)
(801,conf->gid)
(802,max_tcp_clients)
(803,dnssec_enable)
(804,)
(805,for (; !hattrie_iter_finished(z_iter)
(806,*dpos = \'\\0\')
(807,*ctl_if = conf->ctl.iface)
(808,zone)
(809,if (conf->storage == NULL)
(810,conf)
(811,if (zone->file == NULL)
(812,WALK_LIST_FREE(zone->acl.notify_in)
(813,conf->uid)
(814,sig_lifetime)
(815,i)
(816,rundir)
(817,ctl_if)
(818,zone->ixfr_db = NULL)
(819,)
(820,ret)
(821,zone->dnssec_keydir)
(822,size = stor_len + zname_len + 9)
(823,0)
(824,zone->file == NULL ||\n\\n\\t\\t    (zone->dnssec_enable && zone->dnssec_keydir == NULL)
(825,conf->max_conn_hs < 1)
(826,ctl_if->addr.ss_family)
(827,serial_policy)
(828,zone)
(829,dpos)
(830,EMPTY_LIST(zone->acl.notify_in)
(831,if (zone->dnssec_enable)
(832,name)
(833,0)
(834,conf)
(835,conf)
(836,dpos[i] == \'/\')
(837,zone->serial_policy = conf->serial_policy)
(838,zone->storage == NULL ||\n\\n\\t\\t    zone->file == NULL ||\n\\n\\t\\t    (zone->dnssec_enable && zone->dnssec_keydir == NULL)
(839,conf)
(840,z_iter == NULL)
(841,dnssec_enable)
(842,ctl_if = malloc(sizeof(conf_iface_t)
(843,conf->uid)
(844,zone->build_diffs = conf->build_diffs)
(845,free(zone->file)
(846,conf)
(847,serial_policy)
(848,!is_existing_dir(zone->storage)
(849,ctl)
(850,if (zone->serial_policy == 0)
(851,zone->disable_any < 0)
(852,storage)
(853,notify_in)
(854,return ret;)
(855,)
(856,if (conf->rundir == NULL)
(857,dnssec_keydir)
(858,return KNOT_ERROR;)
(859,conf->ctl)
(860,)
(861,conf->build_diffs)
(862,free(zone->storage)
(863,AF_UNIX)
(864,if (zone->enable_checks < 0)
(865,dpos++)
(866,!EMPTY_LIST(zone->acl.notify_in)
(867,conf)
(868,ret != KNOT_EOK)
(869,conf)
(870,conf->gid)
(871,conf)
(872,zone->enable_checks < 0)
(873,0)
(874,conf)
(875,conf_iface_t)
(876,0)
(877,module)
(878,if (conf->query_plan == NULL)
(879,)
(880,zone->ixfr_fslimit = conf->ixfr_fslimit)
(881,)
(882,)
(883,if (zone->dbsync_timeout < 0)
(884,zone)
(885,conf)
(886,dnssec_enable)
(887,module)
(888,zone->dnssec_enable && !is_existing_dir(zone->dnssec_keydir)
(889,module)
(890,)
(891,zone)
(892,zone->serial_policy)
(893,KNOT_ENOMEM)
(894,NULL)
(895,iface)
(896,conf)
(897,storage)
(898,conf->max_conn_idle < 1)
(899,conf->ctl.iface = ctl_if)
(900,size)
(901,RUN_DIR)
(902,conf_iface_t)
(903,zone)
(904,)
(905,0)
(906,!zone->storage)
(907,0)
(908,if (z_iter == NULL)
(909,)
(910,sorted)
(911,max_conn_hs)
(912,conf->query_plan = query_plan_create(NULL)
(913,ret)
(914,conf)
(915,query_modules)
(916,CONFIG_RRL_SLIP)
(917,allow)
(918,dest)
(919,dpos)
(920,zone->file)
(921,ctl_if->addr)
(922,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^