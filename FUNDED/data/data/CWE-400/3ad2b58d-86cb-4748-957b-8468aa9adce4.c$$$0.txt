-----label-----
0
-----code-----
void
pn_verbosity(pn_o pn, CCS verb, CCS ext)
{
    if (vb_bitmatch(VB_STD)) {
	CS tpath;
	CCS plat;

	if (prop_is_true(P_ABSOLUTE_PATHS)) {
	    tpath = putil_strdup(pn_get_abs(pn));
	} else {
	    tpath = putil_strdup(pn_get_rel(pn));
	}

	if ((plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w') {
	    char *p;

	    for (p = tpath; *p; p++) {
		if (*p == '/') {
		    *p = '\\';
		}
	    }
	}

	if (ext) {
	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);
	} else {
	    vb_printf(VB_STD, "%s %s", verb, tpath);
	}

	putil_free(tpath);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
15,16
15,17
16,17
18,19
20,21
21,22
21,23
22,23
22,24
23,24
25,26
26,27
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
46,47
48,49
49,50
50,51
50,52
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
87,88
90,91
90,92
91,92
92,93
92,94
94,95
94,96
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
102,103
104,105
105,106
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
114,115
117,118
118,119
119,120
119,121
120,121
121,122
124,125
124,126
124,127
125,126
127,128
128,129
129,130
129,131
129,132
129,133
129,134
129,135
129,136
130,131
132,133
135,136
137,138
139,140
141,142
143,144
144,145
145,146
145,147
145,148
145,149
145,150
146,147
148,149
151,152
153,154
155,156
156,157
156,158
157,158
159,160
-----nextToken-----
2,4,7,9,12,14,17,19,24,27,32,34,38,40,44,47,52,55,58,60,65,68,71,73,79,82,84,88,89,93,95,96,101,103,106,109,115,116,122,123,126,131,133,134,136,138,140,142,147,149,150,152,154,158,160
-----computeFrom-----
50,51
50,52
63,64
63,65
75,76
75,77
77,78
77,79
85,86
85,87
99,100
99,101
112,113
112,114
119,120
119,121
-----guardedBy-----
115,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidpn_verbosity(pn_o pn, CCS verb, CCS ext){    if (vb_bitmatch(VB_STD)) {	CS tpath;	CCS plat;	if (prop_is_true(P_ABSOLUTE_PATHS)) {	    tpath = putil_strdup(pn_get_abs(pn));	} else {	    tpath = putil_strdup(pn_get_rel(pn));	}	if ((plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w') {	    char *p;	    for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }	}	if (ext) {	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);	} else {	    vb_printf(VB_STD, "%s %s", verb, tpath);	}	putil_free(tpath);    }}
void
pn_verbosity(pn_o pn, CCS verb, CCS ext)
pn_verbosity
pn_o pn
pn_o
pn_o
pn
pn
CCS verb
CCS
CCS
verb
verb
CCS ext
CCS
CCS
ext
ext
{    if (vb_bitmatch(VB_STD)) {	CS tpath;	CCS plat;	if (prop_is_true(P_ABSOLUTE_PATHS)) {	    tpath = putil_strdup(pn_get_abs(pn));	} else {	    tpath = putil_strdup(pn_get_rel(pn));	}	if ((plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w') {	    char *p;	    for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }	}	if (ext) {	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);	} else {	    vb_printf(VB_STD, "%s %s", verb, tpath);	}	putil_free(tpath);    }}
if (vb_bitmatch(VB_STD)) {	CS tpath;	CCS plat;	if (prop_is_true(P_ABSOLUTE_PATHS)) {	    tpath = putil_strdup(pn_get_abs(pn));	} else {	    tpath = putil_strdup(pn_get_rel(pn));	}	if ((plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w') {	    char *p;	    for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }	}	if (ext) {	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);	} else {	    vb_printf(VB_STD, "%s %s", verb, tpath);	}	putil_free(tpath);    }
vb_bitmatch(VB_STD)
vb_bitmatch
vb_bitmatch
(VB_STD)
VB_STD
VB_STD
{	CS tpath;	CCS plat;	if (prop_is_true(P_ABSOLUTE_PATHS)) {	    tpath = putil_strdup(pn_get_abs(pn));	} else {	    tpath = putil_strdup(pn_get_rel(pn));	}	if ((plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w') {	    char *p;	    for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }	}	if (ext) {	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);	} else {	    vb_printf(VB_STD, "%s %s", verb, tpath);	}	putil_free(tpath);    }
CS tpath;
CS tpath;
CS
CS
tpath
tpath
CCS plat;
CCS plat;
CCS
CCS
plat
plat
if (prop_is_true(P_ABSOLUTE_PATHS)) {	    tpath = putil_strdup(pn_get_abs(pn));	} else {	    tpath = putil_strdup(pn_get_rel(pn));	}
prop_is_true(P_ABSOLUTE_PATHS)
prop_is_true
prop_is_true
(P_ABSOLUTE_PATHS)
P_ABSOLUTE_PATHS
P_ABSOLUTE_PATHS
{	    tpath = putil_strdup(pn_get_abs(pn));	}
tpath = putil_strdup(pn_get_abs(pn));
tpath = putil_strdup(pn_get_abs(pn))
tpath
tpath
putil_strdup(pn_get_abs(pn))
putil_strdup
putil_strdup
pn_get_abs(pn)
pn_get_abs
pn_get_abs
pn
pn
{	    tpath = putil_strdup(pn_get_rel(pn));	}
tpath = putil_strdup(pn_get_rel(pn));
tpath = putil_strdup(pn_get_rel(pn))
tpath
tpath
putil_strdup(pn_get_rel(pn))
putil_strdup
putil_strdup
pn_get_rel(pn)
pn_get_rel
pn_get_rel
pn
pn
if ((plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w') {	    char *p;	    for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }	}
(plat = prop_get_str(P_CLIENT_PLATFORM)) && *plat == 'w'
(plat = prop_get_str(P_CLIENT_PLATFORM))
plat = prop_get_str(P_CLIENT_PLATFORM)
plat
plat
prop_get_str(P_CLIENT_PLATFORM)
prop_get_str
prop_get_str
P_CLIENT_PLATFORM
P_CLIENT_PLATFORM
*plat == 'w'
*plat
plat
plat
'w'
{	    char *p;	    for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }	}
char *p;
char *p;
char
*p
*
p
for (p = tpath; *p; p++) {		if (*p == '/') {		    *p = '\\';		}	    }
p = tpath;
p = tpath
p
p
tpath
tpath
*p
p
p
p++
p
p
{		if (*p == '/') {		    *p = '\\';		}	    }
if (*p == '/') {		    *p = '\\';		}
*p == '/'
*p
p
p
'/'
{		    *p = '\\';		}
*p = '\\';
*p = '\\'
*p
p
p
'\\'
if (ext) {	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);	} else {	    vb_printf(VB_STD, "%s %s", verb, tpath);	}
ext
ext
{	    vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);	}
vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext);
vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext)
vb_printf
vb_printf
VB_STD
VB_STD
"%s %s%s%s"
verb
verb
tpath
tpath
XNS
XNS
ext
ext
{	    vb_printf(VB_STD, "%s %s", verb, tpath);	}
vb_printf(VB_STD, "%s %s", verb, tpath);
vb_printf(VB_STD, "%s %s", verb, tpath)
vb_printf
vb_printf
VB_STD
VB_STD
"%s %s"
verb
verb
tpath
tpath
putil_free(tpath);
putil_free(tpath)
putil_free
putil_free
tpath
tpath
-----joern-----
(30,60,0)
(65,15,0)
(44,15,0)
(62,16,0)
(73,33,0)
(2,67,0)
(16,41,0)
(41,3,0)
(19,24,0)
(25,54,0)
(17,67,0)
(9,67,0)
(16,13,0)
(72,33,0)
(22,44,0)
(32,33,0)
(16,44,0)
(23,10,0)
(13,16,0)
(48,8,0)
(56,63,0)
(66,22,0)
(42,44,0)
(26,67,0)
(65,33,0)
(54,15,0)
(60,39,0)
(0,43,0)
(61,8,0)
(15,38,0)
(67,15,0)
(24,20,0)
(14,33,0)
(34,74,0)
(59,57,0)
(67,50,0)
(5,1,0)
(63,56,0)
(67,58,0)
(27,44,0)
(65,24,0)
(64,63,0)
(10,63,0)
(67,21,0)
(45,53,0)
(6,54,0)
(53,41,0)
(51,67,0)
(28,63,0)
(11,18,0)
(67,24,0)
(31,33,0)
(54,24,0)
(70,67,0)
(47,13,0)
(69,55,0)
(4,65,0)
(30,15,0)
(1,39,0)
(54,68,0)
(35,37,0)
(15,30,0)
(60,30,0)
(57,64,0)
(1,7,0)
(46,56,0)
(40,41,0)
(36,60,0)
(12,54,0)
(74,44,0)
(71,15,0)
(63,64,0)
(53,44,0)
(44,24,0)
(7,24,0)
(64,57,0)
(10,57,0)
(24,7,0)
(52,54,0)
(7,1,0)
(54,21,0)
(57,10,0)
(74,44,1)
(59,10,1)
(42,27,1)
(1,39,1)
(36,71,1)
(54,15,1)
(54,24,1)
(54,25,1)
(10,23,1)
(29,74,1)
(22,66,1)
(4,67,1)
(13,47,1)
(29,64,1)
(65,4,1)
(52,6,1)
(18,11,1)
(57,59,1)
(16,44,1)
(2,29,1)
(15,30,1)
(4,54,1)
(17,2,1)
(66,13,1)
(67,9,1)
(60,36,1)
(25,52,1)
(60,39,1)
(30,60,1)
(67,50,1)
(70,26,1)
(74,34,1)
(41,40,1)
(24,7,1)
(28,15,1)
(26,51,1)
(67,15,1)
(71,18,1)
(11,55,1)
(12,29,1)
(7,1,1)
(22,44,1)
(47,16,1)
(63,56,1)
(56,46,1)
(34,22,1)
(44,15,1)
(16,62,1)
(16,41,1)
(28,24,1)
(27,64,1)
(44,42,1)
(54,21,1)
(53,45,1)
(53,44,1)
(67,21,1)
(49,55,1)
(55,69,1)
(6,12,1)
(9,70,1)
(65,24,1)
(46,28,1)
(51,17,1)
(5,19,1)
(19,18,1)
(23,63,1)
(49,65,1)
(62,74,1)
(45,13,1)
(40,53,1)
(66,41,1)
(64,63,1)
(10,63,1)
(44,24,1)
(64,57,1)
(13,16,1)
(1,5,1)
(67,24,1)
(57,10,1)
(65,15,1)
(34,44,1)
(51,29,2)
(5,18,2)
(1,39,2)
(28,55,2)
(10,63,2)
(56,55,2)
(54,29,2)
(60,18,2)
(13,16,2)
(16,74,2)
(65,24,2)
(25,29,2)
(36,18,2)
(22,74,2)
(2,29,2)
(44,24,2)
(65,55,2)
(18,55,2)
(53,13,2)
(44,15,2)
(67,29,2)
(16,41,2)
(54,24,2)
(67,15,2)
(15,18,2)
(40,13,2)
(9,29,2)
(52,29,2)
(24,7,2)
(63,55,2)
(64,55,2)
(70,29,2)
(7,1,2)
(74,64,2)
(19,18,2)
(7,18,2)
(16,44,2)
(63,56,2)
(23,63,2)
(59,63,2)
(67,24,2)
(57,10,2)
(24,18,2)
(30,60,2)
(29,55,2)
(74,44,2)
(34,74,2)
(34,64,2)
(54,21,2)
(26,29,2)
(64,63,2)
(71,18,2)
(47,74,2)
(54,15,2)
(74,74,2)
(11,55,2)
(66,74,2)
(60,39,2)
(12,29,2)
(45,13,2)
(57,63,2)
(22,44,2)
(64,57,2)
(1,18,2)
(62,74,2)
(4,55,2)
(17,29,2)
(13,74,2)
(15,30,2)
(6,29,2)
(27,64,2)
(30,18,2)
(65,15,2)
(44,64,2)
(67,21,2)
(67,50,2)
(46,55,2)
(53,44,2)
(42,64,2)
(41,13,2)
-----------------------------------
(0,if (vb_bitmatch(VB_STD)
(1,pn_get_rel(pn)
(2,VB_STD)
(3,)
(4,tpath)
(5,pn)
(6,"%s %s")
(7,putil_strdup(pn_get_rel(pn)
(8,)
(9,ext)
(10,*plat)
(11,P_ABSOLUTE_PATHS)
(12,VB_STD)
(13,*p == \'/\')
(14,if (prop_is_true(P_ABSOLUTE_PATHS)
(15,tpath = putil_strdup(pn_get_abs(pn)
(16,*p)
(17,"%s %s%s%s")
(18,prop_is_true(P_ABSOLUTE_PATHS)
(19,tpath)
(20,)
(21,CCS verb)
(22,p++)
(23,plat)
(24,tpath = putil_strdup(pn_get_rel(pn)
(25,tpath)
(26,tpath)
(27,p)
(28,plat)
(29,ext)
(30,putil_strdup(pn_get_abs(pn)
(31,tpath)
(32,plat)
(33,)
(34,p)
(35,if (*p == \'/\')
(36,pn)
(37,)
(38,)
(39,pn_o pn)
(40,\'\\\\\')
(41,*p = \'\\\\\')
(42,tpath)
(43,)
(44,p = tpath)
(45,p)
(46,P_CLIENT_PLATFORM)
(47,\'/\')
(48,p)
(49,RET)
(50,CCS ext)
(51,verb)
(52,verb)
(53,*p)
(54,vb_printf(VB_STD, "%s %s", verb, tpath)
(55,vb_bitmatch(VB_STD)
(56,prop_get_str(P_CLIENT_PLATFORM)
(57,*plat == \'w\')
(58,)
(59,\'w\')
(60,pn_get_abs(pn)
(61,for (p = tpath; *p; p++)
(62,p)
(63,plat = prop_get_str(P_CLIENT_PLATFORM)
(64,(plat = prop_get_str(P_CLIENT_PLATFORM)
(65,putil_free(tpath)
(66,p)
(67,vb_printf(VB_STD, "%s %s%s%s", verb, tpath, XNS, ext)
(68,)
(69,VB_STD)
(70,XNS)
(71,tpath)
(72,if ((plat = prop_get_str(P_CLIENT_PLATFORM)
(73,if (ext)
(74,*p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^