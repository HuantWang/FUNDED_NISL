-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_06_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
59,60
61,62
62,63
64,65
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,40,42,44,49,50,53,57,58,60,63,68,69
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
47,48
47,49
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_06_bad(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_06_bad()
CWE400_Resource_Exhaustion__rand_for_loop_06_bad
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(7,30,0)
(18,0,0)
(26,35,0)
(38,11,0)
(38,9,0)
(14,25,0)
(0,32,0)
(33,0,0)
(6,3,0)
(1,13,0)
(17,20,0)
(2,8,0)
(8,35,0)
(36,38,0)
(24,19,0)
(19,38,0)
(27,19,0)
(8,19,0)
(19,24,0)
(15,14,0)
(31,11,0)
(12,11,0)
(22,0,0)
(4,9,0)
(37,35,0)
(10,20,0)
(16,11,0)
(23,13,0)
(9,38,0)
(14,28,0)
(29,33,0)
(3,34,0)
(19,8,0)
(30,35,0)
(25,14,0)
(5,33,0)
(19,14,0)
(21,20,1)
(3,6,1)
(19,38,1)
(8,35,1)
(17,13,1)
(1,23,1)
(9,4,1)
(4,36,1)
(27,2,1)
(19,14,1)
(7,3,1)
(25,15,1)
(13,1,1)
(6,8,1)
(20,10,1)
(17,14,1)
(5,20,1)
(35,37,1)
(15,13,1)
(2,35,1)
(8,19,1)
(21,8,1)
(23,38,1)
(10,17,1)
(33,29,1)
(19,24,1)
(14,25,1)
(19,27,1)
(2,30,1)
(30,35,1)
(30,7,1)
(26,33,1)
(38,9,1)
(37,26,1)
(29,5,1)
(35,20,2)
(27,8,2)
(19,20,2)
(8,19,2)
(5,20,2)
(19,8,2)
(37,20,2)
(26,20,2)
(19,14,2)
(30,35,2)
(8,20,2)
(38,9,2)
(19,38,2)
(14,25,2)
(8,8,2)
(25,13,2)
(15,13,2)
(6,8,2)
(14,13,2)
(19,24,2)
(33,20,2)
(2,20,2)
(29,20,2)
(27,20,2)
(7,8,2)
(8,35,2)
(3,8,2)
(2,8,2)
(30,8,2)
-----------------------------------
(0,)
(1,5)
(2,i)
(3,printLine("Hello")
(4,1)
(5,i)
(6,"Hello")
(7,i)
(8,i < (size_t)
(9,-1)
(10,5)
(11,)
(12,if(STATIC_CONST_FIVE==5)
(13,STATIC_CONST_FIVE==5)
(14,count = RAND32()
(15,count)
(16,if(STATIC_CONST_FIVE==5)
(17,STATIC_CONST_FIVE)
(18,for (i = 0; i < (size_t)
(19,(size_t)
(20,STATIC_CONST_FIVE==5)
(21,RET)
(22,i)
(23,STATIC_CONST_FIVE)
(24,size_t)
(25,RAND32()
(26,i)
(27,count)
(28,)
(29,0)
(30,i++)
(31,count)
(32,)
(33,i = 0)
(34,)
(35,i = 0)
(36,count)
(37,0)
(38,count = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^