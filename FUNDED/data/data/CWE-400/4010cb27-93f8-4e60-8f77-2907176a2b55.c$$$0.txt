-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
51,53
51,54
52,53
53,54
53,55
55,56
55,57
55,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
78,79
80,81
82,83
82,84
83,84
84,85
84,86
86,87
86,88
86,89
89,90
90,91
91,92
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,56,57,59,63,66,68,72,74,79,81,85,87,88,92,93
-----computeFrom-----
35,36
35,37
61,62
61,63
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_32_bad()
CWE401_Memory_Leak__strdup_char_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(5,32,0)
(15,32,0)
(13,14,0)
(14,28,0)
(37,6,0)
(23,5,0)
(21,40,0)
(41,28,0)
(19,32,0)
(40,42,0)
(36,14,0)
(6,33,0)
(12,5,0)
(17,22,0)
(3,6,0)
(33,28,0)
(11,22,0)
(32,33,0)
(0,28,0)
(22,17,0)
(36,34,0)
(26,11,0)
(16,33,0)
(42,28,0)
(39,16,0)
(16,5,0)
(11,16,0)
(4,19,0)
(22,28,0)
(19,5,0)
(6,3,0)
(31,36,0)
(2,42,0)
(34,36,0)
(38,28,0)
(25,22,0)
(20,23,0)
(10,33,0)
(24,17,0)
(1,38,0)
(34,42,0)
(30,34,0)
(5,23,0)
(9,3,0)
(29,35,0)
(42,40,0)
(8,35,0)
(23,35,0)
(35,32,0)
(27,38,0)
(3,22,0)
(7,28,0)
(23,35,1)
(21,2,1)
(22,17,1)
(30,31,1)
(11,26,1)
(9,37,1)
(19,5,1)
(34,30,1)
(42,40,1)
(35,29,1)
(3,22,1)
(3,9,1)
(19,4,1)
(20,12,1)
(40,21,1)
(27,42,1)
(1,27,1)
(31,16,1)
(12,35,1)
(24,25,1)
(37,38,1)
(23,20,1)
(6,3,1)
(2,22,1)
(16,39,1)
(4,5,1)
(26,19,1)
(18,36,1)
(39,11,1)
(11,22,1)
(34,42,1)
(38,1,1)
(8,6,1)
(16,5,1)
(29,8,1)
(5,23,1)
(17,24,1)
(36,34,1)
(5,23,2)
(6,3,2)
(36,34,2)
(22,17,2)
(19,5,2)
(23,35,2)
(16,5,2)
(34,42,2)
(42,40,2)
(3,22,2)
(11,22,2)
-----------------------------------
(0,dataPtr1)
(1,NULL)
(2,dataPtr2)
(3,*dataPtr1)
(4,data)
(5,data = strdup(myString)
(6,* data = *dataPtr1)
(7,dataPtr2)
(8,myString)
(9,dataPtr1)
(10,data)
(11,*dataPtr1)
(12,data)
(13,data)
(14,)
(15,myString)
(16,*dataPtr1 = data)
(17,&data)
(18,RET)
(19,printLine(data)
(20,myString)
(21,data)
(22,* *dataPtr1 = &data)
(23,strdup(myString)
(24,data)
(25,dataPtr1)
(26,dataPtr1)
(27,data)
(28,)
(29,"myString")
(30,dataPtr2)
(31,data)
(32,)
(33,)
(34,*dataPtr2)
(35,myString[] = "myString")
(36,* data = *dataPtr2)
(37,data)
(38,data = NULL)
(39,data)
(40,&data)
(41,data)
(42,* *dataPtr2 = &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^