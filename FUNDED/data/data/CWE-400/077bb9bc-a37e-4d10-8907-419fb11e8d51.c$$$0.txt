-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_15_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    switch(6)
    {
    case 6:
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
30,37
31,32
33,34
34,35
34,36
35,36
37,38
37,39
37,40
38,39
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
57,58
58,59
58,60
59,60
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,29,32,36,39,40,41,45,47,52,54,55,56,60,61,62
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
43,44
43,45
-----guardedBy-----
45,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_15_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    switch(6)    {    case 6:        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_15_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_15_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    switch(6)    {    case 6:        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
switch(6)    {    case 6:        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,10,0)
(7,31,0)
(13,26,0)
(1,16,0)
(10,26,0)
(22,6,0)
(10,23,0)
(8,10,0)
(16,23,0)
(27,6,0)
(14,23,0)
(17,0,0)
(22,0,0)
(24,31,0)
(0,22,0)
(30,18,0)
(28,23,0)
(31,6,0)
(25,23,0)
(11,8,0)
(15,6,0)
(21,22,0)
(18,10,0)
(26,10,0)
(29,0,0)
(9,26,0)
(3,23,0)
(4,8,0)
(12,23,0)
(18,2,0)
(22,0,1)
(31,24,1)
(20,28,1)
(24,7,1)
(1,19,1)
(0,17,1)
(10,26,1)
(12,18,1)
(4,10,1)
(8,10,1)
(20,12,1)
(13,5,1)
(9,13,1)
(29,21,1)
(5,19,1)
(18,10,1)
(17,29,1)
(28,16,1)
(11,4,1)
(30,8,1)
(26,9,1)
(21,31,1)
(12,8,1)
(16,1,1)
(19,22,1)
(18,30,1)
(8,11,1)
(26,19,2)
(8,10,2)
(10,26,2)
(18,10,2)
(22,0,2)
(5,19,2)
(1,19,2)
(18,8,2)
(4,19,2)
(10,19,2)
(13,19,2)
(28,19,2)
(12,19,2)
(11,19,2)
(30,8,2)
(16,19,2)
(8,19,2)
(9,19,2)
-----------------------------------
(0,fopen("BadSource_fopen.txt", "w+")
(1,"Benign, fixed string")
(2,)
(3,if (data != NULL)
(4,data)
(5,data)
(6,)
(7,data)
(8,data != NULL)
(9,"w+")
(10,data = fopen("BadSink_fopen.txt", "w+")
(11,NULL)
(12,break;)
(13,"BadSink_fopen.txt")
(14,default:)
(15,data)
(16,printLine("Benign, fixed string")
(17,"w+")
(18,fclose(data)
(19,6)
(20,RET)
(21,data)
(22,data = fopen("BadSource_fopen.txt", "w+")
(23,)
(24,NULL)
(25,case 6:)
(26,fopen("BadSink_fopen.txt", "w+")
(27,switch(6)
(28,break;)
(29,"BadSource_fopen.txt")
(30,data)
(31,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^