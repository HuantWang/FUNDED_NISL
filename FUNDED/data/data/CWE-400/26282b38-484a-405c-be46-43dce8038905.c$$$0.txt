-----label-----
1
-----code-----
static int
Fread(
    GIFImageConfig *gifConfPtr,
    unsigned char *dst,		/* where to put the result */
    size_t hunk, size_t count,	/* how many */
    Tcl_Channel chan)
{
    if (gifConfPtr->fromData == INLINE_DATA_BASE64) {
	return Mread(dst, hunk, count, (MFile *) chan);
    }

    if (gifConfPtr->fromData == INLINE_DATA_BINARY) {
	MFile *handle = (MFile *) chan;

	if (handle->length <= 0 || (size_t) handle->length < hunk*count) {
	    return -1;
	}
	memcpy(dst, handle->data, (size_t) (hunk * count));
	handle->data += hunk * count;
	handle->length -= hunk * count;
	return (int)(hunk * count);
    }

    /*
     * Otherwise we've got a real file to read.
     */

    return Tcl_Read(chan, (char *) dst, (int) (hunk * count));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
40,41
41,42
42,43
42,44
42,45
42,46
42,47
43,44
45,46
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
67,68
67,69
67,70
67,71
67,72
67,73
68,69
69,70
69,71
70,71
72,73
72,74
72,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
87,89
88,89
92,93
92,94
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
102,103
102,104
103,104
105,106
107,108
108,109
109,110
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
117,119
118,119
121,122
121,123
122,123
123,124
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
132,134
133,134
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
143,145
144,145
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
154,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
164,167
164,168
165,166
167,168
169,170
169,171
170,171
170,172
172,173
174,175
176,177
176,178
177,178
177,179
180,181
181,182
181,183
182,183
184,185
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,23,25,28,30,36,37,39,44,46,48,50,54,56,58,63,64,66,71,73,74,79,81,83,89,90,91,96,97,100,101,104,106,110,114,116,119,120,124,127,129,134,135,138,140,145,146,149,151,155,156,160,162,166,168,171,173,175,178,179,183,185
-----computeFrom-----
33,34
33,35
60,61
60,62
85,86
85,87
86,87
86,88
92,93
92,94
102,103
102,104
125,126
125,127
131,132
131,133
136,137
136,138
142,143
142,144
147,148
147,149
158,159
158,160
181,182
181,183
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static intFread(    GIFImageConfig *gifConfPtr,    unsigned char *dst,		/* where to put the result */    size_t hunk, size_t count,	/* how many */    Tcl_Channel chan){    if (gifConfPtr->fromData == INLINE_DATA_BASE64) {	return Mread(dst, hunk, count, (MFile *) chan);    }    if (gifConfPtr->fromData == INLINE_DATA_BINARY) {	MFile *handle = (MFile *) chan;	if (handle->length <= 0 || (size_t) handle->length < hunk*count) {	    return -1;	}	memcpy(dst, handle->data, (size_t) (hunk * count));	handle->data += hunk * count;	handle->length -= hunk * count;	return (int)(hunk * count);    }    /*     * Otherwise we've got a real file to read.     */    return Tcl_Read(chan, (char *) dst, (int) (hunk * count));}
static int
Fread(    GIFImageConfig *gifConfPtr,    unsigned char *dst,		/* where to put the result */    size_t hunk, size_t count,	/* how many */    Tcl_Channel chan)
Fread
GIFImageConfig *gifConfPtr
GIFImageConfig
GIFImageConfig
*gifConfPtr
*
gifConfPtr
unsigned char *dst
unsigned char
*dst
*
dst
size_t hunk
size_t
size_t
hunk
hunk
size_t count
size_t
size_t
count
count
Tcl_Channel chan
Tcl_Channel
Tcl_Channel
chan
chan
{    if (gifConfPtr->fromData == INLINE_DATA_BASE64) {	return Mread(dst, hunk, count, (MFile *) chan);    }    if (gifConfPtr->fromData == INLINE_DATA_BINARY) {	MFile *handle = (MFile *) chan;	if (handle->length <= 0 || (size_t) handle->length < hunk*count) {	    return -1;	}	memcpy(dst, handle->data, (size_t) (hunk * count));	handle->data += hunk * count;	handle->length -= hunk * count;	return (int)(hunk * count);    }    /*     * Otherwise we've got a real file to read.     */    return Tcl_Read(chan, (char *) dst, (int) (hunk * count));}
if (gifConfPtr->fromData == INLINE_DATA_BASE64) {	return Mread(dst, hunk, count, (MFile *) chan);    }
gifConfPtr->fromData == INLINE_DATA_BASE64
gifConfPtr->fromData
gifConfPtr
gifConfPtr
fromData
INLINE_DATA_BASE64
INLINE_DATA_BASE64
{	return Mread(dst, hunk, count, (MFile *) chan);    }
return Mread(dst, hunk, count, (MFile *) chan);
Mread(dst, hunk, count, (MFile *) chan)
Mread
Mread
dst
dst
hunk
hunk
count
count
(MFile *) chan
MFile *
MFile
MFile
*
*
chan
chan
if (gifConfPtr->fromData == INLINE_DATA_BINARY) {	MFile *handle = (MFile *) chan;	if (handle->length <= 0 || (size_t) handle->length < hunk*count) {	    return -1;	}	memcpy(dst, handle->data, (size_t) (hunk * count));	handle->data += hunk * count;	handle->length -= hunk * count;	return (int)(hunk * count);    }
gifConfPtr->fromData == INLINE_DATA_BINARY
gifConfPtr->fromData
gifConfPtr
gifConfPtr
fromData
INLINE_DATA_BINARY
INLINE_DATA_BINARY
{	MFile *handle = (MFile *) chan;	if (handle->length <= 0 || (size_t) handle->length < hunk*count) {	    return -1;	}	memcpy(dst, handle->data, (size_t) (hunk * count));	handle->data += hunk * count;	handle->length -= hunk * count;	return (int)(hunk * count);    }
MFile *handle = (MFile *) chan;
MFile *handle = (MFile *) chan;
MFile
MFile
*handle = (MFile *) chan
*
handle
= (MFile *) chan
(MFile *) chan
MFile *
MFile
MFile
*
*
chan
chan
if (handle->length <= 0 || (size_t) handle->length < hunk*count) {	    return -1;	}
handle->length <= 0 || (size_t) handle->length < hunk*count
handle->length <= 0
handle->length
handle
handle
length
0
(size_t) handle->length < hunk*count
(size_t) handle->length
size_t
size_t
size_t

handle->length
handle
handle
length
hunk*count
hunk
hunk
count
count
{	    return -1;	}
return -1;
-1
1
memcpy(dst, handle->data, (size_t) (hunk * count));
memcpy(dst, handle->data, (size_t) (hunk * count))
memcpy
memcpy
dst
dst
handle->data
handle
handle
data
(size_t) (hunk * count)
(size_t)
size_t
size_t
hunk * count
hunk
hunk
count
count
handle->data += hunk * count;
handle->data += hunk * count
handle->data
handle
handle
data
hunk * count
hunk
hunk
count
count
handle->length -= hunk * count;
handle->length -= hunk * count
handle->length
handle
handle
length
hunk * count
hunk
hunk
count
count
return (int)(hunk * count);
(int)(hunk * count)
int
int

(hunk * count)
hunk * count
hunk
hunk
count
count
return Tcl_Read(chan, (char *) dst, (int) (hunk * count));
Tcl_Read(chan, (char *) dst, (int) (hunk * count))
Tcl_Read
Tcl_Read
chan
chan
(char *) dst
char *
char
*
*
dst
dst
(int) (hunk * count)
int
int

(hunk * count)
hunk * count
hunk
hunk
count
count
-----joern-----
(86,46,0)
(74,59,0)
(24,6,0)
(52,19,0)
(87,92,0)
(51,72,0)
(25,54,0)
(93,87,0)
(71,25,0)
(3,85,0)
(49,92,0)
(37,46,0)
(30,17,0)
(32,90,0)
(75,40,0)
(8,94,0)
(60,73,0)
(65,7,0)
(18,8,0)
(84,25,0)
(31,60,0)
(83,36,0)
(1,85,0)
(76,40,0)
(34,11,0)
(20,52,0)
(60,36,0)
(73,67,0)
(42,53,0)
(51,62,0)
(75,22,0)
(92,62,0)
(36,37,0)
(87,60,0)
(65,68,0)
(17,82,0)
(19,43,0)
(52,79,0)
(6,24,0)
(59,74,0)
(35,8,0)
(55,22,0)
(39,77,0)
(13,1,0)
(53,72,0)
(88,67,0)
(10,52,0)
(11,75,0)
(92,87,0)
(52,72,0)
(54,46,0)
(26,59,0)
(4,77,0)
(58,85,0)
(11,67,0)
(5,55,0)
(87,93,0)
(8,76,0)
(21,27,0)
(2,51,0)
(6,2,0)
(17,67,0)
(76,8,0)
(2,6,0)
(53,35,0)
(75,11,0)
(2,1,0)
(37,73,0)
(60,46,0)
(91,65,0)
(19,52,0)
(35,53,0)
(38,22,0)
(57,68,0)
(27,67,0)
(95,59,0)
(51,2,0)
(0,73,0)
(12,51,0)
(55,62,0)
(90,15,0)
(56,51,0)
(53,62,0)
(48,33,0)
(76,69,0)
(61,36,0)
(31,79,0)
(55,72,0)
(22,55,0)
(92,72,0)
(69,76,0)
(36,67,0)
(94,33,0)
(35,89,0)
(63,19,0)
(50,27,0)
(16,52,0)
(80,53,0)
(67,17,0)
(25,72,0)
(1,13,0)
(77,72,0)
(8,14,0)
(31,94,0)
(24,27,0)
(68,65,0)
(89,35,0)
(70,33,0)
(31,90,0)
(41,74,0)
(37,77,0)
(23,65,0)
(1,2,0)
(75,46,0)
(17,14,0)
(22,38,0)
(85,1,0)
(9,75,0)
(45,76,0)
(19,14,0)
(27,24,0)
(52,62,0)
(78,11,0)
(47,73,0)
(29,24,0)
(73,54,0)
(8,35,0)
(81,92,0)
(22,75,0)
(67,46,0)
(28,46,0)
(79,66,0)
(77,62,0)
(64,32,0)
(43,19,0)
(54,25,0)
(85,67,0)
(59,7,0)
(82,17,0)
(44,55,0)
(52,40,0)
(77,37,0)
(25,62,0)
(25,62,1)
(1,13,1)
(44,5,1)
(47,75,1)
(77,62,1)
(5,11,1)
(42,80,1)
(27,67,1)
(17,30,1)
(65,7,1)
(88,68,1)
(87,93,1)
(64,6,1)
(92,49,1)
(17,14,1)
(49,81,1)
(4,39,1)
(68,57,1)
(19,63,1)
(6,2,1)
(71,73,1)
(73,67,1)
(60,73,1)
(85,67,1)
(61,54,1)
(36,83,1)
(57,65,1)
(92,72,1)
(87,92,1)
(74,59,1)
(31,79,1)
(78,34,1)
(45,18,1)
(27,50,1)
(60,36,1)
(65,23,1)
(32,64,1)
(24,29,1)
(91,74,1)
(92,62,1)
(77,72,1)
(1,85,1)
(29,27,1)
(52,40,1)
(75,40,1)
(16,74,1)
(2,51,1)
(52,62,1)
(81,37,1)
(17,82,1)
(25,84,1)
(18,68,1)
(12,1,1)
(8,14,1)
(85,3,1)
(83,61,1)
(2,1,1)
(22,38,1)
(22,55,1)
(24,27,1)
(31,94,1)
(20,16,1)
(68,65,1)
(55,72,1)
(51,56,1)
(63,10,1)
(73,0,1)
(79,52,1)
(8,35,1)
(51,62,1)
(8,76,1)
(77,4,1)
(11,67,1)
(53,62,1)
(0,47,1)
(53,72,1)
(51,72,1)
(55,62,1)
(36,67,1)
(75,11,1)
(80,76,1)
(3,58,1)
(60,87,1)
(37,73,1)
(76,40,1)
(41,59,1)
(25,72,1)
(30,88,1)
(59,7,1)
(21,67,1)
(94,8,1)
(26,95,1)
(31,60,1)
(39,36,1)
(56,12,1)
(74,41,1)
(23,91,1)
(31,90,1)
(35,53,1)
(50,21,1)
(76,45,1)
(35,89,1)
(59,26,1)
(19,14,1)
(52,72,1)
(75,22,1)
(34,9,1)
(52,19,1)
(58,24,1)
(84,71,1)
(55,44,1)
(37,77,1)
(54,25,1)
(9,6,1)
(6,24,1)
(10,20,1)
(53,42,1)
(19,43,1)
(76,69,1)
(90,32,1)
(67,17,1)
(11,78,1)
(19,74,2)
(6,2,2)
(17,82,2)
(5,6,2)
(49,6,2)
(81,6,2)
(77,72,2)
(65,74,2)
(55,6,2)
(88,68,2)
(68,65,2)
(35,53,2)
(51,24,2)
(75,6,2)
(60,36,2)
(53,68,2)
(53,62,2)
(58,24,2)
(19,14,2)
(6,24,2)
(76,40,2)
(11,6,2)
(53,72,2)
(76,68,2)
(37,77,2)
(35,89,2)
(45,68,2)
(39,6,2)
(25,72,2)
(55,72,2)
(54,6,2)
(18,68,2)
(71,6,2)
(31,60,2)
(21,68,2)
(0,6,2)
(94,68,2)
(54,25,2)
(52,72,2)
(52,40,2)
(16,74,2)
(52,74,2)
(12,24,2)
(8,68,2)
(73,6,2)
(52,62,2)
(73,67,2)
(23,74,2)
(2,51,2)
(84,6,2)
(3,24,2)
(19,43,2)
(1,13,2)
(6,68,2)
(22,38,2)
(11,67,2)
(77,62,2)
(79,74,2)
(60,73,2)
(2,24,2)
(17,68,2)
(77,6,2)
(36,67,2)
(1,85,2)
(91,74,2)
(9,6,2)
(64,6,2)
(90,6,2)
(92,62,2)
(80,68,2)
(92,6,2)
(27,67,2)
(75,22,2)
(20,74,2)
(52,19,2)
(85,67,2)
(24,27,2)
(17,14,2)
(74,59,2)
(63,74,2)
(30,68,2)
(67,17,2)
(32,6,2)
(27,68,2)
(60,6,2)
(57,74,2)
(76,69,2)
(34,6,2)
(51,62,2)
(31,94,2)
(83,6,2)
(4,6,2)
(59,7,2)
(8,14,2)
(22,6,2)
(37,73,2)
(75,40,2)
(37,6,2)
(78,6,2)
(2,1,2)
(61,6,2)
(8,76,2)
(1,24,2)
(44,6,2)
(25,6,2)
(87,6,2)
(85,24,2)
(87,93,2)
(24,68,2)
(75,11,2)
(25,62,2)
(29,68,2)
(87,92,2)
(56,24,2)
(51,72,2)
(31,90,2)
(35,68,2)
(31,79,2)
(92,72,2)
(67,68,2)
(47,6,2)
(68,74,2)
(22,55,2)
(65,7,2)
(8,35,2)
(36,6,2)
(10,74,2)
(55,62,2)
(42,68,2)
(50,68,2)
-----------------------------------
(0,data)
(1,(size_t)
(2,(size_t)
(3,length)
(4,count)
(5,hunk)
(6,handle->length <= 0 || (size_t)
(7,GIFImageConfig *gifConfPtr)
(8,Tcl_Read(chan, (char *)
(9,dst)
(10,count)
(11,handle->data)
(12,hunk)
(13,size_t)
(14,Tcl_Channel chan)
(15,)
(16,dst)
(17,(MFile *)
(18,chan)
(19,(MFile *)
(20,hunk)
(21,handle)
(22,(size_t)
(23,fromData)
(24,handle->length <= 0)
(25,hunk * count)
(26,fromData)
(27,handle->length)
(28,handle)
(29,0)
(30,chan)
(31,RET)
(32,-1)
(33,)
(34,handle)
(35,(int)
(36,handle->length)
(37,handle->length -= hunk * count)
(38,size_t)
(39,hunk)
(40,unsigned char *dst)
(41,INLINE_DATA_BASE64)
(42,count)
(43,MFile *)
(44,count)
(45,dst)
(46,)
(47,handle)
(48,if (gifConfPtr->fromData == INLINE_DATA_BINARY)
(49,count)
(50,length)
(51,hunk*count)
(52,Mread(dst, hunk, count, (MFile *)
(53,hunk * count)
(54,handle->data += hunk * count)
(55,hunk * count)
(56,count)
(57,INLINE_DATA_BINARY)
(58,handle)
(59,gifConfPtr->fromData)
(60,return (int)
(61,handle)
(62,size_t hunk)
(63,chan)
(64,1)
(65,gifConfPtr->fromData)
(66,)
(67,*handle = (MFile *)
(68,gifConfPtr->fromData == INLINE_DATA_BINARY)
(69,char *)
(70,if (gifConfPtr->fromData == INLINE_DATA_BASE64)
(71,hunk)
(72,size_t count)
(73,handle->data)
(74,gifConfPtr->fromData == INLINE_DATA_BASE64)
(75,memcpy(dst, handle->data, (size_t)
(76,(char *)
(77,hunk * count)
(78,data)
(79,return Mread(dst, hunk, count, (MFile *)
(80,hunk)
(81,hunk)
(82,MFile *)
(83,length)
(84,count)
(85,handle->length)
(86,if (handle->length <= 0 || (size_t)
(87,(int)
(88,handle)
(89,int)
(90,return -1;)
(91,gifConfPtr)
(92,hunk * count)
(93,int)
(94,return Tcl_Read(chan, (char *)
(95,gifConfPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^