-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
19,20
20,21
21,22
21,23
22,23
25,26
26,27
27,28
27,29
28,29
31,32
31,33
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
52,54
53,54
53,55
54,55
57,58
59,60
60,61
62,63
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,16,18,23,24,29,30,32,38,40,42,47,48,51,55,56,58,61,66,67
-----computeFrom-----
12,13
12,14
27,28
27,29
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(31,16,0)
(22,36,0)
(21,3,0)
(2,21,0)
(10,3,0)
(20,35,0)
(35,29,0)
(24,11,0)
(9,3,0)
(8,15,0)
(7,27,0)
(37,21,0)
(36,23,0)
(25,16,0)
(1,23,0)
(5,36,0)
(12,11,0)
(30,36,0)
(36,22,0)
(36,5,0)
(0,16,0)
(5,15,0)
(32,15,0)
(13,23,0)
(33,5,0)
(23,18,0)
(19,12,0)
(17,32,0)
(11,12,0)
(11,16,0)
(3,14,0)
(4,15,0)
(36,11,0)
(26,7,0)
(28,34,1)
(33,15,1)
(7,26,1)
(36,23,1)
(36,11,1)
(23,13,1)
(26,5,1)
(34,23,1)
(4,21,1)
(20,6,1)
(17,7,1)
(2,34,1)
(36,22,1)
(35,20,1)
(36,30,1)
(8,4,1)
(34,35,1)
(12,19,1)
(1,6,1)
(5,15,1)
(21,37,1)
(5,36,1)
(33,32,1)
(32,17,1)
(15,8,1)
(37,2,1)
(11,12,1)
(19,24,1)
(28,5,1)
(32,15,1)
(6,11,1)
(13,1,1)
(30,33,1)
(35,6,2)
(36,34,2)
(17,5,2)
(7,5,2)
(2,34,2)
(5,5,2)
(33,34,2)
(26,5,2)
(8,34,2)
(37,34,2)
(15,34,2)
(21,34,2)
(30,34,2)
(11,12,2)
(5,15,2)
(1,6,2)
(36,5,2)
(20,6,2)
(5,34,2)
(13,6,2)
(33,5,2)
(32,15,2)
(36,23,2)
(30,5,2)
(36,11,2)
(4,34,2)
(32,5,2)
(5,36,2)
(23,6,2)
(36,22,2)
-----------------------------------
(0,if(0)
(1,count)
(2,i)
(3,)
(4,i)
(5,i < (size_t)
(6,0)
(7,printLine("Hello")
(8,0)
(9,i)
(10,for (i = 0; i < (size_t)
(11,count = -1)
(12,-1)
(13,20)
(14,)
(15,i = 0)
(16,)
(17,i)
(18,)
(19,1)
(20,"Benign, fixed string")
(21,i = 0)
(22,size_t)
(23,count = 20)
(24,count)
(25,count)
(26,"Hello")
(27,)
(28,RET)
(29,)
(30,count)
(31,if(1)
(32,i++)
(33,i)
(34,1)
(35,printLine("Benign, fixed string")
(36,(size_t)
(37,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^