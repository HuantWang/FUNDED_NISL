-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_06_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,72,74,78,79
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
-----guardedBy-----
40,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_06_bad(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_06_bad()
CWE400_Resource_Exhaustion__fgets_sleep_06_bad
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(9,36,0)
(39,18,0)
(36,14,0)
(2,21,0)
(9,13,0)
(29,32,0)
(9,34,0)
(12,25,0)
(35,34,0)
(38,18,0)
(5,7,0)
(26,21,0)
(40,28,0)
(31,9,0)
(34,25,0)
(4,7,0)
(20,21,0)
(7,32,0)
(22,25,0)
(6,27,0)
(37,32,0)
(21,7,0)
(17,0,0)
(34,11,0)
(11,34,0)
(36,4,0)
(27,13,0)
(3,21,0)
(16,28,0)
(19,20,0)
(10,11,0)
(4,36,0)
(24,25,0)
(32,8,0)
(33,4,0)
(23,17,0)
(21,20,0)
(30,7,0)
(1,36,0)
(26,2,1)
(27,6,1)
(36,4,1)
(16,36,1)
(15,28,1)
(9,31,1)
(38,34,1)
(10,35,1)
(23,20,1)
(31,28,1)
(2,7,1)
(33,1,1)
(9,36,1)
(4,33,1)
(7,30,1)
(1,20,1)
(16,18,1)
(6,9,1)
(5,18,1)
(3,26,1)
(40,16,1)
(39,38,1)
(11,10,1)
(16,17,1)
(4,7,1)
(21,3,1)
(21,7,1)
(17,23,1)
(20,21,1)
(34,11,1)
(30,5,1)
(19,21,1)
(9,34,1)
(28,40,1)
(15,27,1)
(20,19,1)
(18,39,1)
(20,18,2)
(19,18,2)
(7,18,2)
(33,20,2)
(5,18,2)
(9,36,2)
(27,28,2)
(21,18,2)
(3,18,2)
(36,4,2)
(4,7,2)
(30,18,2)
(1,20,2)
(34,11,2)
(21,7,2)
(4,20,2)
(31,28,2)
(6,28,2)
(17,20,2)
(36,20,2)
(23,20,2)
(9,28,2)
(26,18,2)
(20,21,2)
(2,18,2)
(9,34,2)
-----------------------------------
(0,)
(1,count)
(2,inputBuffer)
(3,stdin)
(4,atoi(inputBuffer)
(5,inputBuffer)
(6,"Sleep time possibly too long")
(7,inputBuffer[CHAR_ARRAY_SIZE] = "")
(8,)
(9,SLEEP(count)
(10,1)
(11,-1)
(12,if(STATIC_CONST_FIVE==5)
(13,)
(14,)
(15,RET)
(16,STATIC_CONST_FIVE)
(17,printLine("fgets()
(18,STATIC_CONST_FIVE==5)
(19,NULL)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,if(STATIC_CONST_FIVE==5)
(23,"fgets()
(24,count)
(25,)
(26,CHAR_ARRAY_SIZE)
(27,printLine("Sleep time possibly too long")
(28,STATIC_CONST_FIVE==5)
(29,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,"")
(31,count)
(32,)
(33,inputBuffer)
(34,count = -1)
(35,count)
(36,count = atoi(inputBuffer)
(37,inputBuffer)
(38,STATIC_CONST_FIVE)
(39,5)
(40,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^