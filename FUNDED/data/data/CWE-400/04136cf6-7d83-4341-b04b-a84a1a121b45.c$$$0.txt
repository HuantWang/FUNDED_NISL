-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
30,31
30,32
31,32
31,33
32,33
33,34
33,35
35,36
35,37
38,39
38,40
38,41
39,40
39,41
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,18,23,26,27,29,34,36,37,42,45,47,50,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110,111
-----computeFrom-----
13,14
13,15
21,22
21,23
39,40
39,41
40,41
40,42
48,49
48,50
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
47,92
50,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
while(1)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }
1
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
-----joern-----
(0,16,0)
(31,9,0)
(32,37,0)
(25,43,0)
(19,30,0)
(41,39,0)
(4,46,0)
(4,10,0)
(18,55,0)
(22,40,0)
(52,10,0)
(47,42,0)
(31,54,0)
(29,2,0)
(40,16,0)
(27,55,0)
(4,40,0)
(49,10,0)
(53,29,0)
(20,11,0)
(46,43,0)
(32,11,0)
(7,31,0)
(43,10,0)
(29,53,0)
(10,51,0)
(13,24,0)
(31,10,0)
(18,11,0)
(10,52,0)
(11,55,0)
(44,53,0)
(36,4,0)
(23,55,0)
(32,54,0)
(35,23,0)
(4,36,0)
(50,23,0)
(8,36,0)
(37,32,0)
(28,13,0)
(43,46,0)
(46,4,0)
(31,40,0)
(42,11,0)
(38,9,0)
(43,40,0)
(23,11,0)
(15,41,0)
(33,30,0)
(30,11,0)
(42,55,0)
(21,4,0)
(6,51,0)
(45,18,0)
(14,41,0)
(9,31,0)
(3,16,0)
(26,40,0)
(54,32,0)
(54,31,0)
(5,16,0)
(11,32,0)
(17,43,0)
(12,39,0)
(34,12,1)
(48,1,1)
(22,26,1)
(30,11,1)
(48,6,1)
(43,17,1)
(31,40,1)
(49,1,1)
(13,28,1)
(11,32,1)
(1,40,1)
(18,11,1)
(4,36,1)
(31,10,1)
(43,40,1)
(35,50,1)
(19,33,1)
(23,35,1)
(28,46,1)
(54,31,1)
(32,37,1)
(10,52,1)
(47,23,1)
(42,11,1)
(42,47,1)
(50,30,1)
(50,29,1)
(17,25,1)
(4,10,1)
(6,10,1)
(12,13,1)
(34,48,1)
(12,18,1)
(38,7,1)
(29,53,1)
(30,19,1)
(25,4,1)
(9,38,1)
(33,11,1)
(46,4,1)
(7,20,1)
(32,54,1)
(23,11,1)
(20,46,1)
(8,21,1)
(4,40,1)
(45,42,1)
(44,30,1)
(21,48,1)
(18,45,1)
(52,49,1)
(53,44,1)
(36,8,1)
(46,43,1)
(31,9,1)
(43,10,1)
(40,22,1)
(28,46,2)
(45,46,2)
(42,46,2)
(30,11,2)
(11,46,2)
(31,40,2)
(11,32,2)
(18,46,2)
(4,40,2)
(7,46,2)
(53,30,2)
(35,46,2)
(13,46,2)
(47,46,2)
(20,46,2)
(46,4,2)
(31,9,2)
(54,46,2)
(8,48,2)
(32,46,2)
(21,48,2)
(43,4,2)
(9,46,2)
(33,46,2)
(32,37,2)
(29,53,2)
(43,40,2)
(50,46,2)
(10,52,2)
(54,31,2)
(49,1,2)
(46,48,2)
(12,48,2)
(6,1,2)
(23,11,2)
(4,48,2)
(29,30,2)
(19,46,2)
(30,46,2)
(4,10,2)
(32,54,2)
(36,48,2)
(17,4,2)
(4,36,2)
(31,46,2)
(38,46,2)
(18,11,2)
(43,10,2)
(23,46,2)
(10,1,2)
(44,30,2)
(31,10,2)
(42,11,2)
(46,43,2)
(25,4,2)
(52,1,2)
-----------------------------------
(0,data)
(1,1)
(2,)
(3,while(1)
(4,data > wcslen(HELLO_STRING)
(5,while(1)
(6,break;)
(7,data)
(8,HELLO_STRING)
(9,sizeof(wchar_t)
(10,data = rand()
(11,myString = (wchar_t *)
(12,break;)
(13,printLine("Input is less than the length of the source string or too large")
(14,myString)
(15,if (data > wcslen(HELLO_STRING)
(16,)
(17,100)
(18,free(myString)
(19,NULL)
(20,myString)
(21,data)
(22,0)
(23,wcscpy(myString, HELLO_STRING)
(24,)
(25,data)
(26,data)
(27,if (myString == NULL)
(28,"Input is less than the length of the source string or too large")
(29,exit(-1)
(30,myString == NULL)
(31,data*sizeof(wchar_t)
(32,(wchar_t *)
(33,myString)
(34,RET)
(35,HELLO_STRING)
(36,wcslen(HELLO_STRING)
(37,wchar_t *)
(38,wchar_t)
(39,)
(40,data = 0)
(41,)
(42,printWLine(myString)
(43,data < 100)
(44,1)
(45,myString)
(46,data > wcslen(HELLO_STRING)
(47,myString)
(48,1)
(49,data)
(50,myString)
(51,)
(52,rand()
(53,-1)
(54,malloc(data*sizeof(wchar_t)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^