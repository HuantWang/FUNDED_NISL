-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    goto sink;
sink:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
33,34
33,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,18,20,24,26,27,30,32,34,38,40,41,45,48,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
43,44
43,45
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
50,91
45,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);
source
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
goto sink;
sink
sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
sink
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(8,32,0)
(10,47,0)
(43,17,0)
(2,37,0)
(15,11,0)
(34,27,0)
(0,4,0)
(41,43,0)
(7,34,0)
(17,37,0)
(39,11,0)
(49,37,0)
(14,32,0)
(21,8,0)
(22,3,0)
(23,37,0)
(6,10,0)
(14,30,0)
(31,13,0)
(9,48,0)
(32,3,0)
(45,37,0)
(30,14,0)
(15,47,0)
(44,37,0)
(4,32,0)
(33,8,0)
(27,34,0)
(16,15,0)
(35,32,0)
(4,3,0)
(43,47,0)
(10,28,0)
(46,3,0)
(48,3,0)
(48,32,0)
(27,40,0)
(36,47,0)
(47,37,0)
(32,14,0)
(24,15,0)
(29,48,0)
(12,37,0)
(15,24,0)
(24,14,0)
(17,43,0)
(42,17,0)
(38,17,0)
(11,15,0)
(14,24,0)
(26,28,0)
(5,22,0)
(22,32,0)
(25,44,0)
(28,10,0)
(18,44,0)
(20,31,0)
(1,47,0)
(28,26,1)
(48,29,1)
(20,10,1)
(8,32,1)
(5,4,1)
(17,43,1)
(9,8,1)
(12,47,1)
(22,5,1)
(8,33,1)
(0,48,1)
(4,32,1)
(26,6,1)
(48,32,1)
(39,16,1)
(38,42,1)
(15,47,1)
(14,30,1)
(34,7,1)
(35,10,1)
(33,21,1)
(16,35,1)
(24,15,1)
(7,8,1)
(11,39,1)
(22,32,1)
(23,17,1)
(31,20,1)
(14,24,1)
(43,47,1)
(19,31,1)
(32,14,1)
(41,38,1)
(6,23,1)
(36,1,1)
(43,41,1)
(10,47,1)
(10,28,1)
(47,36,1)
(15,11,1)
(19,22,1)
(9,27,1)
(4,0,1)
(29,9,1)
(27,34,1)
(21,32,1)
(42,12,1)
(0,10,2)
(48,32,2)
(5,10,2)
(10,28,2)
(7,8,2)
(14,30,2)
(22,10,2)
(21,10,2)
(31,10,2)
(17,43,2)
(48,10,2)
(9,10,2)
(15,11,2)
(4,10,2)
(8,32,2)
(24,15,2)
(39,10,2)
(32,14,2)
(35,10,2)
(27,34,2)
(10,47,2)
(14,24,2)
(29,10,2)
(34,8,2)
(15,10,2)
(32,10,2)
(27,8,2)
(14,10,2)
(4,32,2)
(16,10,2)
(15,47,2)
(33,10,2)
(20,10,2)
(24,10,2)
(11,10,2)
(22,32,2)
(8,10,2)
(43,47,2)
-----------------------------------
(0,myString)
(1,data)
(2,sink:)
(3,)
(4,printLine(myString)
(5,myString)
(6,data)
(7,1)
(8,myString == NULL)
(9,myString)
(10,data > strlen(HELLO_STRING)
(11,sizeof(char)
(12,goto source;)
(13,)
(14,(char *)
(15,data*sizeof(char)
(16,data)
(17,fscanf(stdin, "%zu", &data)
(18,myString)
(19,RET)
(20,"Input is less than the length of the source string")
(21,myString)
(22,free(myString)
(23,goto sink;)
(24,malloc(data*sizeof(char)
(25,if (data > strlen(HELLO_STRING)
(26,HELLO_STRING)
(27,exit(-1)
(28,strlen(HELLO_STRING)
(29,HELLO_STRING)
(30,char *)
(31,printLine("Input is less than the length of the source string")
(32,myString = (char *)
(33,NULL)
(34,-1)
(35,myString)
(36,0)
(37,)
(38,"%zu")
(39,char)
(40,)
(41,data)
(42,stdin)
(43,&data)
(44,)
(45,source:)
(46,if (myString == NULL)
(47,data = 0)
(48,strcpy(myString, HELLO_STRING)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^