-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_02_bad()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
21,22
21,23
21,24
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
45,46
45,47
47,48
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,29,33,36,38,42,44,46,48
-----computeFrom-----
13,14
13,15
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_02_bad(){    wchar_t * data;    data = NULL;    if(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_02_bad()
CWE401_Memory_Leak__strdup_wchar_t_02_bad
{    wchar_t * data;    data = NULL;    if(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
1
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,13,0)
(16,15,0)
(17,5,0)
(14,15,0)
(5,15,0)
(4,14,0)
(12,9,0)
(18,14,0)
(11,18,0)
(13,9,0)
(5,14,0)
(14,18,0)
(15,7,0)
(6,9,0)
(2,13,0)
(3,9,0)
(1,2,1)
(17,14,1)
(14,18,1)
(11,4,1)
(8,10,1)
(4,16,1)
(13,1,1)
(10,5,1)
(10,0,1)
(5,14,1)
(5,17,1)
(0,13,1)
(18,11,1)
(16,0,1)
(16,0,2)
(17,0,2)
(5,0,2)
(11,0,2)
(18,0,2)
(14,18,2)
(14,0,2)
(5,14,2)
(4,0,2)
-----------------------------------
(0,1)
(1,NULL)
(2,data)
(3,if(1)
(4,data)
(5,printWLine(data)
(6,data)
(7,)
(8,RET)
(9,)
(10,1)
(11,myString)
(12,if(1)
(13,data = NULL)
(14,data = wcsdup(myString)
(15,)
(16,"myString")
(17,data)
(18,wcsdup(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^