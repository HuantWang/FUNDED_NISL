-----label-----
0
-----code-----
static void goodG2B1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
21,22
24,25
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,29,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,78,82,83,87,88,90
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(33,11,0)
(13,38,0)
(18,17,0)
(12,32,0)
(37,38,0)
(45,35,0)
(14,5,0)
(19,23,0)
(28,13,0)
(15,6,0)
(7,21,0)
(42,10,0)
(30,10,0)
(34,29,0)
(32,38,0)
(35,28,0)
(36,32,0)
(26,11,0)
(20,29,0)
(38,13,0)
(47,32,0)
(5,46,0)
(36,18,0)
(4,44,0)
(19,46,0)
(38,17,0)
(27,21,0)
(3,19,0)
(22,45,0)
(45,22,0)
(5,38,0)
(2,36,0)
(46,19,0)
(46,5,0)
(24,10,0)
(19,3,0)
(43,18,0)
(35,45,0)
(39,29,0)
(8,13,0)
(40,5,0)
(16,10,0)
(3,17,0)
(13,28,0)
(0,35,0)
(9,42,0)
(25,34,0)
(1,42,0)
(6,17,0)
(28,35,0)
(23,19,0)
(13,8,0)
(32,36,0)
(29,38,0)
(31,4,0)
(34,6,0)
(29,34,0)
(32,38,1)
(27,42,1)
(20,39,1)
(34,25,1)
(21,7,1)
(46,5,1)
(28,35,1)
(18,43,1)
(45,22,1)
(2,32,1)
(6,15,1)
(13,8,1)
(26,3,1)
(19,46,1)
(29,38,1)
(29,20,1)
(39,18,1)
(7,27,1)
(31,21,1)
(32,47,1)
(15,34,1)
(42,1,1)
(38,13,1)
(41,11,1)
(13,28,1)
(3,19,1)
(36,32,1)
(11,33,1)
(43,36,1)
(34,29,1)
(12,38,1)
(5,40,1)
(1,9,1)
(36,2,1)
(35,45,1)
(14,6,1)
(0,37,1)
(37,21,1)
(33,26,1)
(25,29,1)
(4,31,1)
(26,4,1)
(40,14,1)
(47,12,1)
(45,0,1)
(19,23,1)
(5,38,1)
(39,21,2)
(19,46,2)
(5,21,2)
(35,21,2)
(13,21,2)
(45,22,2)
(28,35,2)
(3,19,2)
(40,21,2)
(12,21,2)
(6,21,2)
(19,21,2)
(38,13,2)
(34,21,2)
(46,21,2)
(35,45,2)
(28,21,2)
(13,28,2)
(31,21,2)
(29,38,2)
(46,5,2)
(13,8,2)
(20,21,2)
(43,21,2)
(47,21,2)
(45,21,2)
(5,38,2)
(38,21,2)
(19,23,2)
(4,21,2)
(2,21,2)
(25,21,2)
(32,38,2)
(36,21,2)
(3,21,2)
(18,21,2)
(34,29,2)
(32,21,2)
(37,21,2)
(15,21,2)
(29,21,2)
(36,32,2)
(14,21,2)
(0,21,2)
-----------------------------------
(0,100)
(1,NULL)
(2,intOne)
(3,printStructLine((twoIntsStruct *)
(4,printLine("Benign, fixed string")
(5,data[0])
(6,data[0].intTwo = 0)
(7,5)
(8,struct _twoIntsStruct *)
(9,data)
(10,)
(11,STATIC_CONST_FIVE==5)
(12,data)
(13,(struct _twoIntsStruct *)
(14,data)
(15,0)
(16,if(STATIC_CONST_FIVE!=5)
(17,)
(18,data[0].intOne = 0)
(19,(twoIntsStruct *)
(20,0)
(21,STATIC_CONST_FIVE!=5)
(22,struct _twoIntsStruct)
(23,twoIntsStruct *)
(24,data)
(25,intTwo)
(26,STATIC_CONST_FIVE)
(27,STATIC_CONST_FIVE)
(28,ALLOCA(100*sizeof(struct _twoIntsStruct)
(29,data[0])
(30,if(STATIC_CONST_FIVE==5)
(31,"Benign, fixed string")
(32,data[0])
(33,5)
(34,data[0].intTwo)
(35,100*sizeof(struct _twoIntsStruct)
(36,data[0].intOne)
(37,data)
(38,data = (struct _twoIntsStruct *)
(39,data)
(40,0)
(41,RET)
(42,data = NULL)
(43,0)
(44,)
(45,sizeof(struct _twoIntsStruct)
(46,&data[0])
(47,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^