-----label-----
1
-----code-----
int
chgproccnt(uid_t uid, int diff)
{
	struct uidinfo *uip;
	struct uihashhead *uipp;

	uipp = UIHASH(uid);

	LIST_FOREACH(uip, uipp, ui_hash)
		if (uip->ui_uid == uid)
			break;

	if (uip) {
		uip->ui_proccnt += diff;
		if (uip->ui_proccnt > 0)
			return (uip->ui_proccnt);
		if (uip->ui_proccnt < 0)
			panic("chgproccnt: procs < 0");
		LIST_REMOVE(uip, ui_hash);
		FREE(uip, M_PROC);
		return (0);
	}
	if (diff <= 0) {
		if (diff == 0)
			return(0);
		panic("chgproccnt: lost user");
	}
	MALLOC(uip, struct uidinfo *, sizeof(*uip), M_PROC, M_WAITOK);
	LIST_INSERT_HEAD(uipp, uip, ui_hash);
	uip->ui_uid = uid;
	uip->ui_proccnt = diff;
	return (diff);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
10,11
10,12
12,13
14,15
14,16
14,17
14,18
14,19
14,20
14,21
14,22
14,23
14,24
14,25
14,26
14,27
15,16
16,17
16,18
17,18
19,20
19,21
22,23
23,24
23,25
24,25
26,27
26,28
29,30
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
55,56
58,59
58,60
59,60
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
77,78
78,79
79,80
79,81
80,81
83,84
83,85
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
95,96
96,97
96,98
96,99
97,98
99,100
101,102
103,104
104,105
104,106
104,107
105,106
107,108
109,110
111,112
112,113
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
120,122
121,122
121,123
122,123
125,126
126,127
128,129
129,130
129,131
130,131
133,134
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
144,145
145,146
145,147
146,147
146,148
147,148
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
160,161
161,162
162,163
-----nextToken-----
2,4,7,9,11,13,18,20,21,25,27,28,32,35,37,41,43,45,47,53,54,56,57,60,66,67,69,74,75,76,81,82,87,88,89,93,94,98,100,102,106,108,110,113,117,118,123,124,127,131,132,137,139,141,143,148,149,151,156,157,159,163
-----computeFrom-----
30,31
30,32
50,51
50,52
63,64
63,65
71,72
71,73
84,85
84,86
115,116
115,117
121,122
121,123
145,146
145,147
153,154
153,155
-----guardedBy-----
75,82
74,81
117,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
intchgproccnt(uid_t uid, int diff){	struct uidinfo *uip;	struct uihashhead *uipp;	uipp = UIHASH(uid);	LIST_FOREACH(uip, uipp, ui_hash)		if (uip->ui_uid == uid)			break;	if (uip) {		uip->ui_proccnt += diff;		if (uip->ui_proccnt > 0)			return (uip->ui_proccnt);		if (uip->ui_proccnt < 0)			panic("chgproccnt: procs < 0");		LIST_REMOVE(uip, ui_hash);		FREE(uip, M_PROC);		return (0);	}	if (diff <= 0) {		if (diff == 0)			return(0);		panic("chgproccnt: lost user");	}	MALLOC(uip, struct uidinfo *, sizeof(*uip), M_PROC, M_WAITOK);	LIST_INSERT_HEAD(uipp, uip, ui_hash);	uip->ui_uid = uid;	uip->ui_proccnt = diff;	return (diff);}
int
chgproccnt(uid_t uid, int diff)
chgproccnt
uid_t uid
uid_t
uid_t
uid
uid
int diff
int
diff
diff
{	struct uidinfo *uip;	struct uihashhead *uipp;	uipp = UIHASH(uid);	LIST_FOREACH(uip, uipp, ui_hash)		if (uip->ui_uid == uid)			break;	if (uip) {		uip->ui_proccnt += diff;		if (uip->ui_proccnt > 0)			return (uip->ui_proccnt);		if (uip->ui_proccnt < 0)			panic("chgproccnt: procs < 0");		LIST_REMOVE(uip, ui_hash);		FREE(uip, M_PROC);		return (0);	}	if (diff <= 0) {		if (diff == 0)			return(0);		panic("chgproccnt: lost user");	}	MALLOC(uip, struct uidinfo *, sizeof(*uip), M_PROC, M_WAITOK);	LIST_INSERT_HEAD(uipp, uip, ui_hash);	uip->ui_uid = uid;	uip->ui_proccnt = diff;	return (diff);}
struct uidinfo *uip;
struct uidinfo *uip;
struct uidinfo
uidinfo
*uip
*
uip
struct uihashhead *uipp;
struct uihashhead *uipp;
struct uihashhead
uihashhead
*uipp
*
uipp
uipp = UIHASH(uid);
uipp = UIHASH(uid)
uipp
uipp
UIHASH(uid)
UIHASH
UIHASH
uid
uid
LIST_FOREACH(uip, uipp, ui_hash)
LIST_FOREACH(uip, uipp, ui_hash)
LIST_FOREACH
LIST_FOREACH
uip
uip
uipp
uipp
ui_hash
ui_hash
)
if (uip->ui_uid == uid)			break;
uip->ui_uid == uid
uip->ui_uid
uip
uip
ui_uid
uid
uid
break;
if (uip) {		uip->ui_proccnt += diff;		if (uip->ui_proccnt > 0)			return (uip->ui_proccnt);		if (uip->ui_proccnt < 0)			panic("chgproccnt: procs < 0");		LIST_REMOVE(uip, ui_hash);		FREE(uip, M_PROC);		return (0);	}
uip
uip
{		uip->ui_proccnt += diff;		if (uip->ui_proccnt > 0)			return (uip->ui_proccnt);		if (uip->ui_proccnt < 0)			panic("chgproccnt: procs < 0");		LIST_REMOVE(uip, ui_hash);		FREE(uip, M_PROC);		return (0);	}
uip->ui_proccnt += diff;
uip->ui_proccnt += diff
uip->ui_proccnt
uip
uip
ui_proccnt
diff
diff
if (uip->ui_proccnt > 0)			return (uip->ui_proccnt);
uip->ui_proccnt > 0
uip->ui_proccnt
uip
uip
ui_proccnt
0
return (uip->ui_proccnt);
(uip->ui_proccnt)
uip->ui_proccnt
uip
uip
ui_proccnt
if (uip->ui_proccnt < 0)			panic("chgproccnt: procs < 0");
uip->ui_proccnt < 0
uip->ui_proccnt
uip
uip
ui_proccnt
0
panic("chgproccnt: procs < 0");
panic("chgproccnt: procs < 0")
panic
panic
"chgproccnt: procs < 0"
LIST_REMOVE(uip, ui_hash);
LIST_REMOVE(uip, ui_hash)
LIST_REMOVE
LIST_REMOVE
uip
uip
ui_hash
ui_hash
FREE(uip, M_PROC);
FREE(uip, M_PROC)
FREE
FREE
uip
uip
M_PROC
M_PROC
return (0);
(0)
0
if (diff <= 0) {		if (diff == 0)			return(0);		panic("chgproccnt: lost user");	}
diff <= 0
diff
diff
0
{		if (diff == 0)			return(0);		panic("chgproccnt: lost user");	}
if (diff == 0)			return(0);
diff == 0
diff
diff
0
return(0);
(0)
0
panic("chgproccnt: lost user");
panic("chgproccnt: lost user")
panic
panic
"chgproccnt: lost user"
MALLOC(uip, struct uidinfo *, sizeof(*uip), M_PROC, M_WAITOK);
LIST_INSERT_HEAD(uipp, uip, ui_hash);
LIST_INSERT_HEAD(uipp, uip, ui_hash)
LIST_INSERT_HEAD
LIST_INSERT_HEAD
uipp
uipp
uip
uip
ui_hash
ui_hash
uip->ui_uid = uid;
uip->ui_uid = uid
uip->ui_uid
uip
uip
ui_uid
uid
uid
uip->ui_proccnt = diff;
uip->ui_proccnt = diff
uip->ui_proccnt
uip
uip
ui_proccnt
diff
diff
return (diff);
(diff)
diff
diff
-----joern-----
(8,1,0)
(49,43,0)
(30,1,0)
(79,43,0)
(42,10,0)
(62,19,0)
(76,19,0)
(33,6,0)
(14,39,0)
(51,19,0)
(22,19,0)
(40,15,0)
(23,0,0)
(10,19,0)
(68,11,0)
(16,73,0)
(65,53,0)
(79,64,0)
(11,10,0)
(24,9,0)
(1,36,0)
(4,35,0)
(74,39,0)
(0,34,0)
(59,8,0)
(39,19,0)
(32,59,0)
(41,18,0)
(75,28,0)
(37,21,0)
(9,73,0)
(64,36,0)
(48,28,0)
(15,46,0)
(55,49,0)
(54,58,0)
(67,65,0)
(61,73,0)
(2,16,0)
(72,53,0)
(31,61,0)
(44,6,0)
(35,34,0)
(63,16,0)
(0,18,0)
(38,36,0)
(57,30,0)
(25,18,0)
(53,73,0)
(58,19,0)
(61,19,0)
(8,59,0)
(39,58,0)
(26,9,0)
(79,61,0)
(47,1,0)
(29,36,0)
(7,39,0)
(6,56,0)
(71,36,0)
(79,45,0)
(12,65,0)
(53,19,0)
(56,6,0)
(43,30,0)
(13,19,0)
(35,58,0)
(20,64,0)
(50,49,0)
(3,8,0)
(6,1,0)
(52,45,0)
(66,56,0)
(58,35,0)
(10,34,0)
(17,30,0)
(1,73,0)
(64,30,0)
(69,11,0)
(60,46,0)
(77,38,0)
(28,36,0)
(27,38,0)
(18,0,0)
(70,8,0)
(9,73,1)
(59,32,1)
(39,58,1)
(43,30,1)
(16,73,1)
(18,25,1)
(48,75,1)
(64,20,1)
(1,47,1)
(37,56,1)
(39,7,1)
(14,16,1)
(1,73,1)
(64,30,1)
(79,45,1)
(55,59,1)
(74,14,1)
(5,0,1)
(28,48,1)
(16,63,1)
(30,57,1)
(15,40,1)
(58,35,1)
(20,38,1)
(69,68,1)
(45,52,1)
(75,56,1)
(53,72,1)
(32,8,1)
(70,1,1)
(23,18,1)
(44,59,1)
(61,73,1)
(12,10,1)
(17,78,1)
(79,64,1)
(4,54,1)
(79,43,1)
(41,58,1)
(6,1,1)
(59,8,1)
(26,24,1)
(27,77,1)
(78,0,1)
(25,41,1)
(67,12,1)
(7,74,1)
(47,30,1)
(38,27,1)
(50,55,1)
(31,53,1)
(75,21,1)
(57,17,1)
(79,61,1)
(72,65,1)
(11,69,1)
(56,66,1)
(2,78,1)
(61,31,1)
(10,42,1)
(0,23,1)
(78,5,1)
(8,3,1)
(52,9,1)
(24,16,1)
(10,34,1)
(40,9,1)
(65,67,1)
(63,2,1)
(14,15,1)
(6,33,1)
(49,50,1)
(9,26,1)
(68,39,1)
(77,28,1)
(43,49,1)
(0,18,1)
(66,6,1)
(42,11,1)
(21,37,1)
(56,6,1)
(35,34,1)
(33,44,1)
(3,70,1)
(0,34,1)
(35,4,1)
(53,73,1)
(8,1,1)
(43,30,2)
(56,6,2)
(12,9,2)
(33,59,2)
(11,16,2)
(6,1,2)
(64,59,2)
(27,59,2)
(39,16,2)
(74,16,2)
(14,16,2)
(72,9,2)
(61,9,2)
(3,78,2)
(7,16,2)
(61,16,2)
(42,9,2)
(15,9,2)
(66,59,2)
(31,9,2)
(67,9,2)
(75,59,2)
(6,59,2)
(65,9,2)
(24,16,2)
(9,73,2)
(68,16,2)
(45,9,2)
(59,78,2)
(9,16,2)
(30,78,2)
(14,9,2)
(7,9,2)
(59,8,2)
(70,78,2)
(26,16,2)
(16,73,2)
(21,56,2)
(68,9,2)
(8,1,2)
(31,16,2)
(52,9,2)
(43,59,2)
(39,9,2)
(53,16,2)
(74,9,2)
(72,16,2)
(8,78,2)
(64,30,2)
(57,78,2)
(16,78,2)
(1,78,2)
(10,16,2)
(69,16,2)
(40,9,2)
(61,73,2)
(1,73,2)
(49,59,2)
(77,59,2)
(79,64,2)
(44,59,2)
(37,56,2)
(20,59,2)
(55,59,2)
(38,59,2)
(65,16,2)
(0,18,2)
(56,59,2)
(47,78,2)
(39,58,2)
(10,9,2)
(79,45,2)
(69,9,2)
(10,34,2)
(2,78,2)
(67,16,2)
(35,34,2)
(28,59,2)
(12,16,2)
(63,78,2)
(0,34,2)
(42,16,2)
(5,0,2)
(48,59,2)
(17,78,2)
(58,35,2)
(79,43,2)
(79,61,2)
(53,9,2)
(11,9,2)
(32,78,2)
(53,73,2)
(50,59,2)
-----------------------------------
(0,uip->ui_uid == uid)
(1,uip->ui_proccnt += diff)
(2,diff)
(3,ui_proccnt)
(4,uid)
(5,break;)
(6,uip->ui_proccnt)
(7,ui_hash)
(8,uip->ui_proccnt)
(9,diff == 0)
(10,uip->ui_uid = uid)
(11,uip->ui_uid)
(12,uip)
(13,if (uip)
(14,uipp)
(15,panic("chgproccnt: lost user")
(16,diff <= 0)
(17,uip)
(18,uip->ui_uid)
(19,)
(20,0)
(21,panic("chgproccnt: procs < 0")
(22,if (uip->ui_uid == uid)
(23,uid)
(24,diff)
(25,ui_uid)
(26,0)
(27,M_PROC)
(28,LIST_REMOVE(uip, ui_hash)
(29,if (uip->ui_proccnt > 0)
(30,uip->ui_proccnt)
(31,diff)
(32,0)
(33,ui_proccnt)
(34,uid_t uid)
(35,UIHASH(uid)
(36,)
(37,"chgproccnt: procs < 0")
(38,FREE(uip, M_PROC)
(39,LIST_INSERT_HEAD(uipp, uip, ui_hash)
(40,"chgproccnt: lost user")
(41,uip)
(42,uid)
(43,return (uip->ui_proccnt)
(44,uip)
(45,return(0)
(46,)
(47,diff)
(48,ui_hash)
(49,uip->ui_proccnt)
(50,ui_proccnt)
(51,uipp)
(52,0)
(53,uip->ui_proccnt = diff)
(54,uipp)
(55,uip)
(56,uip->ui_proccnt < 0)
(57,ui_proccnt)
(58,uipp = UIHASH(uid)
(59,uip->ui_proccnt > 0)
(60,if (diff == 0)
(61,return (diff)
(62,uip)
(63,0)
(64,return (0)
(65,uip->ui_proccnt)
(66,0)
(67,ui_proccnt)
(68,uip)
(69,ui_uid)
(70,uip)
(71,if (uip->ui_proccnt < 0)
(72,diff)
(73,int diff)
(74,uip)
(75,uip)
(76,if (diff <= 0)
(77,uip)
(78,uip)
(79,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^