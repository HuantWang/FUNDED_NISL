-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    /* FIX: Use a relatively small number */
    count = 20;
    goto sink;
sink:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
23,24
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,18,20,24,25,27,29,34,36,38,43,44,47,51,52,54,57,62,63
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    goto source;source:    /* FIX: Use a relatively small number */    count = 20;    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    goto source;source:    /* FIX: Use a relatively small number */    count = 20;    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    /* FIX: Use a relatively small number */    count = 20;
source
count = 20;
count = 20
count
count
20
goto sink;
sink
sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
sink
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(4,7,0)
(5,24,0)
(10,24,0)
(29,28,0)
(28,2,0)
(16,14,0)
(13,24,0)
(11,6,0)
(19,0,0)
(7,6,0)
(22,30,0)
(31,14,0)
(17,10,0)
(1,14,0)
(20,12,0)
(8,32,0)
(32,0,0)
(18,14,0)
(23,14,0)
(7,12,0)
(0,14,0)
(27,2,0)
(28,14,0)
(30,26,0)
(12,24,0)
(12,7,0)
(2,28,0)
(3,7,0)
(6,14,0)
(21,0,0)
(9,32,0)
(7,3,0)
(15,6,0)
(18,28,1)
(12,24,1)
(22,12,1)
(1,6,1)
(30,22,1)
(4,20,1)
(10,24,1)
(12,7,1)
(28,2,1)
(5,13,1)
(15,18,1)
(7,3,1)
(6,11,1)
(2,27,1)
(25,12,1)
(7,4,1)
(13,32,1)
(20,24,1)
(8,9,1)
(17,30,1)
(7,6,1)
(11,15,1)
(32,8,1)
(27,29,1)
(20,10,1)
(24,5,1)
(9,1,1)
(10,17,1)
(30,12,2)
(12,7,2)
(4,12,2)
(7,12,2)
(12,12,2)
(10,12,2)
(20,12,2)
(17,12,2)
(7,6,2)
(12,24,2)
(7,3,2)
(10,24,2)
(22,12,2)
(28,2,2)
-----------------------------------
(0,)
(1,goto sink;)
(2,-1)
(3,size_t)
(4,count)
(5,0)
(6,count = 20)
(7,(size_t)
(8,0)
(9,i)
(10,i++)
(11,20)
(12,i < (size_t)
(13,i)
(14,)
(15,count)
(16,sink:)
(17,i)
(18,goto source;)
(19,for (i = 0; i < (size_t)
(20,i)
(21,i)
(22,"Hello")
(23,source:)
(24,i = 0)
(25,RET)
(26,)
(27,1)
(28,count = -1)
(29,count)
(30,printLine("Hello")
(31,count)
(32,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^