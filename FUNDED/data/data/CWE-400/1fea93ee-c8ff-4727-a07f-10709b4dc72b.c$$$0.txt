-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalTrue)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
30,33
30,34
30,35
30,36
30,37
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
61,64
62,63
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
106,109
106,110
106,111
107,108
109,110
111,112
112,113
112,114
115,116
115,117
116,117
118,119
120,121
122,123
123,124
124,125
124,126
125,126
128,129
128,130
129,130
131,132
132,133
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,8,10,14,16,19,24,25,28,34,36,38,42,44,45,48,51,53,54,56,60,63,65,66,70,72,77,78,83,84,87,91,92,94,97,103,105,108,110,113,114,117,119,121,126,127,130,135,137
-----computeFrom-----
12,13
12,14
22,23
22,24
58,59
58,60
68,69
68,70
81,82
81,83
85,86
85,87
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalTrue)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalTrue)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        /* FIX: Use a relatively small number */        count = 20;    }
globalTrue
globalTrue
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalTrue)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
globalTrue
globalTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(52,1,0)
(46,55,0)
(17,33,0)
(29,57,0)
(12,57,0)
(11,1,0)
(35,39,0)
(43,37,0)
(49,32,0)
(65,68,0)
(27,39,0)
(26,3,0)
(64,57,0)
(34,45,0)
(5,57,0)
(66,29,0)
(7,23,0)
(1,48,0)
(53,13,0)
(0,48,0)
(30,52,0)
(52,23,0)
(67,45,0)
(54,6,0)
(39,27,0)
(41,40,0)
(21,48,0)
(71,52,0)
(52,30,0)
(40,1,0)
(59,22,0)
(36,23,0)
(60,47,0)
(70,39,0)
(42,38,0)
(68,39,0)
(13,20,0)
(26,29,0)
(58,20,0)
(39,35,0)
(13,29,0)
(16,28,0)
(32,37,0)
(22,29,0)
(8,57,0)
(39,29,0)
(24,55,0)
(27,6,0)
(23,69,0)
(4,37,0)
(15,35,0)
(45,57,0)
(20,57,0)
(50,22,0)
(56,48,0)
(9,13,0)
(6,27,0)
(44,39,0)
(51,26,0)
(57,61,0)
(28,31,0)
(29,13,0)
(39,68,0)
(38,52,0)
(55,57,0)
(33,10,0)
(1,40,0)
(25,57,0)
(62,57,0)
(38,37,0)
(14,20,0)
(52,38,0)
(33,17,1)
(29,13,1)
(41,11,1)
(18,26,1)
(53,66,1)
(55,24,1)
(23,36,1)
(34,55,1)
(71,42,1)
(39,70,1)
(63,1,1)
(7,63,1)
(38,37,1)
(45,67,1)
(43,22,1)
(66,20,1)
(32,37,1)
(67,34,1)
(70,68,1)
(49,28,1)
(14,45,1)
(16,27,1)
(49,27,1)
(52,23,1)
(26,51,1)
(54,38,1)
(39,35,1)
(1,40,1)
(68,65,1)
(19,63,1)
(52,30,1)
(58,14,1)
(22,59,1)
(13,20,1)
(59,50,1)
(43,33,1)
(9,53,1)
(28,16,1)
(36,7,1)
(13,9,1)
(18,2,1)
(2,38,1)
(22,29,1)
(32,49,1)
(39,29,1)
(42,37,1)
(20,58,1)
(38,52,1)
(44,6,1)
(17,22,1)
(52,71,1)
(27,6,1)
(19,23,1)
(52,1,1)
(24,46,1)
(46,19,1)
(51,2,1)
(18,19,1)
(4,43,1)
(50,29,1)
(42,32,1)
(26,29,1)
(27,39,1)
(37,4,1)
(40,41,1)
(65,35,1)
(35,15,1)
(39,68,1)
(6,54,1)
(15,44,1)
(34,19,2)
(27,6,2)
(52,1,2)
(37,19,2)
(9,19,2)
(27,39,2)
(53,19,2)
(39,68,2)
(22,29,2)
(36,63,2)
(54,38,2)
(52,30,2)
(6,38,2)
(52,19,2)
(17,22,2)
(26,2,2)
(71,38,2)
(38,52,2)
(32,38,2)
(2,19,2)
(52,23,2)
(39,29,2)
(39,35,2)
(14,19,2)
(32,37,2)
(33,22,2)
(26,29,2)
(28,27,2)
(66,19,2)
(68,38,2)
(49,38,2)
(20,19,2)
(38,38,2)
(50,19,2)
(44,38,2)
(27,38,2)
(13,20,2)
(23,63,2)
(45,19,2)
(55,19,2)
(52,38,2)
(13,19,2)
(29,13,2)
(15,38,2)
(42,38,2)
(38,37,2)
(42,19,2)
(70,38,2)
(67,19,2)
(29,19,2)
(4,19,2)
(65,38,2)
(24,19,2)
(46,19,2)
(16,27,2)
(51,2,2)
(38,19,2)
(39,38,2)
(43,19,2)
(71,19,2)
(35,38,2)
(1,40,2)
(22,19,2)
(59,19,2)
(58,19,2)
(7,63,2)
-----------------------------------
(0,if(globalTrue)
(1,count = -1)
(2,pFile)
(3,)
(4,0)
(5,pFile)
(6,strlen(SENTENCE)
(7,count)
(8,filename)
(9,"w+")
(10,)
(11,count)
(12,if (pFile == NULL)
(13,fopen(filename, "w+")
(14,filename)
(15,char)
(16,1)
(17,1)
(18,RET)
(19,globalTrue)
(20,*filename = "output_bad.txt")
(21,if(globalTrue)
(22,pFile == NULL)
(23,count = 20)
(24,0)
(25,if (pFile)
(26,fclose(pFile)
(27,strlen(SENTENCE)
(28,exit(1)
(29,pFile = fopen(filename, "w+")
(30,size_t)
(31,)
(32,i++)
(33,exit(1)
(34,pFile)
(35,sizeof(char)
(36,20)
(37,i = 0)
(38,i < (size_t)
(39,fwrite(SENTENCE, sizeof(char)
(40,-1)
(41,1)
(42,i)
(43,i)
(44,SENTENCE)
(45,*pFile = NULL)
(46,i)
(47,)
(48,)
(49,i)
(50,pFile)
(51,pFile)
(52,(size_t)
(53,filename)
(54,SENTENCE)
(55,i = 0)
(56,count)
(57,)
(58,"output_bad.txt")
(59,NULL)
(60,if (strlen(SENTENCE)
(61,)
(62,i)
(63,globalTrue)
(64,for (i = 0; i < (size_t)
(65,SENTENCE)
(66,pFile)
(67,NULL)
(68,strlen(SENTENCE)
(69,)
(70,pFile)
(71,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^