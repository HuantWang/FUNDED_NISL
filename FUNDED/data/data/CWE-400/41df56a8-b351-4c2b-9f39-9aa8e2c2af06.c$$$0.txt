-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
22,25
22,26
22,27
22,28
22,29
23,24
24,25
24,26
25,26
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
98,101
98,102
98,103
99,100
101,102
103,104
104,105
104,106
107,108
107,109
108,109
110,111
112,113
114,115
115,116
116,117
116,118
117,118
120,121
120,122
121,122
123,124
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,30,34,36,37,40,43,45,46,48,52,55,57,58,62,64,69,70,75,76,79,83,84,86,89,95,97,100,102,105,106,109,111,113,118,119,122,127,129
-----computeFrom-----
12,13
12,14
18,19
18,20
50,51
50,52
60,61
60,62
73,74
73,75
77,78
77,79
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(57,9,0)
(2,6,0)
(4,54,0)
(9,57,0)
(25,4,0)
(7,53,0)
(63,4,0)
(44,46,0)
(41,62,0)
(53,54,0)
(22,19,0)
(49,4,0)
(20,15,0)
(40,58,0)
(19,22,0)
(65,38,0)
(57,8,0)
(60,26,0)
(53,41,0)
(28,0,0)
(5,1,0)
(4,38,0)
(19,0,0)
(16,62,0)
(39,5,0)
(46,8,0)
(17,65,0)
(34,13,0)
(55,46,0)
(42,26,0)
(24,19,0)
(0,19,0)
(38,4,0)
(43,62,0)
(32,15,0)
(5,54,0)
(37,20,0)
(11,15,0)
(4,13,0)
(6,54,0)
(29,62,0)
(64,57,0)
(18,62,0)
(23,6,0)
(54,53,0)
(52,41,0)
(47,12,0)
(54,62,0)
(38,65,0)
(13,4,0)
(62,8,0)
(26,62,0)
(0,15,0)
(48,59,0)
(45,62,0)
(56,25,0)
(14,9,0)
(4,25,0)
(12,31,0)
(59,62,0)
(21,53,0)
(3,54,0)
(19,46,0)
(61,8,0)
(51,62,0)
(35,41,0)
(10,36,0)
(50,59,0)
(36,30,0)
(2,23,1)
(19,46,1)
(35,59,1)
(27,33,1)
(6,2,1)
(21,7,1)
(4,63,1)
(26,42,1)
(4,54,1)
(59,48,1)
(37,38,1)
(56,13,1)
(63,25,1)
(23,54,1)
(36,10,1)
(37,12,1)
(39,33,1)
(28,15,1)
(54,53,1)
(5,39,1)
(52,35,1)
(49,65,1)
(48,50,1)
(47,38,1)
(14,64,1)
(38,65,1)
(55,44,1)
(7,3,1)
(33,0,1)
(25,56,1)
(20,37,1)
(0,19,1)
(27,5,1)
(42,60,1)
(50,26,1)
(34,49,1)
(11,6,1)
(5,54,1)
(4,13,1)
(19,22,1)
(46,55,1)
(11,36,1)
(0,15,1)
(38,4,1)
(20,15,1)
(12,47,1)
(60,46,1)
(32,11,1)
(24,28,1)
(6,54,1)
(44,57,1)
(53,21,1)
(28,20,1)
(15,32,1)
(4,25,1)
(41,52,1)
(3,41,1)
(53,41,1)
(13,34,1)
(17,0,1)
(19,24,1)
(10,6,1)
(57,9,1)
(65,17,1)
(9,14,1)
(5,54,2)
(63,0,2)
(36,6,2)
(0,0,2)
(56,0,2)
(10,6,2)
(54,53,2)
(49,0,2)
(53,41,2)
(19,22,2)
(28,0,2)
(20,15,2)
(57,9,2)
(6,54,2)
(4,0,2)
(0,15,2)
(24,0,2)
(5,33,2)
(4,25,2)
(20,0,2)
(47,38,2)
(38,4,2)
(38,65,2)
(34,0,2)
(19,46,2)
(13,0,2)
(37,0,2)
(65,0,2)
(38,0,2)
(17,0,2)
(12,38,2)
(0,19,2)
(25,0,2)
(4,13,2)
(39,33,2)
(19,0,2)
(4,54,2)
-----------------------------------
(0,i < (size_t)
(1,)
(2,NULL)
(3,pFile)
(4,fwrite(SENTENCE, sizeof(char)
(5,fclose(pFile)
(6,pFile == NULL)
(7,filename)
(8,)
(9,-1)
(10,1)
(11,i)
(12,exit(1)
(13,sizeof(char)
(14,1)
(15,i = 0)
(16,if (pFile == NULL)
(17,SENTENCE)
(18,if (pFile)
(19,(size_t)
(20,i++)
(21,"w+")
(22,size_t)
(23,pFile)
(24,count)
(25,strlen(SENTENCE)
(26,i = 0)
(27,RET)
(28,i)
(29,filename)
(30,)
(31,)
(32,0)
(33,pFile)
(34,char)
(35,filename)
(36,exit(1)
(37,i)
(38,strlen(SENTENCE)
(39,pFile)
(40,if (strlen(SENTENCE)
(41,*filename = "output_bad.txt")
(42,0)
(43,pFile)
(44,count)
(45,i)
(46,count = 20)
(47,1)
(48,NULL)
(49,SENTENCE)
(50,pFile)
(51,for (i = 0; i < (size_t)
(52,"output_bad.txt")
(53,fopen(filename, "w+")
(54,pFile = fopen(filename, "w+")
(55,20)
(56,SENTENCE)
(57,count = -1)
(58,)
(59,*pFile = NULL)
(60,i)
(61,count)
(62,)
(63,pFile)
(64,count)
(65,strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^