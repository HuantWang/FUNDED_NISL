-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
73,74
75,76
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,74,79,81
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(14,38,0)
(2,29,0)
(39,16,0)
(7,35,0)
(0,23,0)
(22,2,0)
(30,25,0)
(39,22,0)
(13,23,0)
(29,11,0)
(9,39,0)
(35,6,0)
(16,39,0)
(37,40,0)
(38,25,0)
(38,22,0)
(15,0,0)
(29,25,0)
(18,15,0)
(10,8,0)
(31,39,0)
(1,25,0)
(33,2,0)
(11,29,0)
(22,23,0)
(40,22,0)
(6,35,0)
(29,2,0)
(21,8,0)
(34,29,0)
(15,22,0)
(32,40,0)
(3,0,0)
(17,22,0)
(2,22,0)
(6,24,0)
(19,11,0)
(2,33,0)
(39,0,0)
(25,8,0)
(38,26,0)
(28,19,0)
(20,8,0)
(12,11,0)
(4,15,0)
(11,19,0)
(16,23,0)
(39,22,1)
(40,22,1)
(19,28,1)
(11,19,1)
(34,17,1)
(40,32,1)
(12,34,1)
(22,2,1)
(28,12,1)
(39,31,1)
(37,22,1)
(39,0,1)
(6,35,1)
(29,25,1)
(0,3,1)
(29,11,1)
(31,9,1)
(35,7,1)
(38,25,1)
(36,5,1)
(32,37,1)
(14,36,1)
(3,15,1)
(4,40,1)
(25,1,1)
(15,18,1)
(7,40,1)
(1,30,1)
(15,22,1)
(38,14,1)
(9,0,1)
(17,5,1)
(36,16,1)
(2,29,1)
(18,4,1)
(16,39,1)
(38,22,1)
(4,6,1)
(27,36,1)
(2,33,1)
(5,25,1)
(27,38,1)
(38,36,2)
(39,22,2)
(29,25,2)
(29,5,2)
(12,5,2)
(19,5,2)
(38,25,2)
(15,5,2)
(38,22,2)
(40,22,2)
(4,5,2)
(40,5,2)
(32,5,2)
(2,5,2)
(9,5,2)
(31,5,2)
(22,5,2)
(22,2,2)
(15,22,2)
(39,5,2)
(37,5,2)
(0,5,2)
(3,5,2)
(29,11,2)
(34,5,2)
(35,40,2)
(2,33,2)
(6,40,2)
(7,40,2)
(39,0,2)
(28,5,2)
(17,5,2)
(2,29,2)
(11,5,2)
(11,19,2)
(6,35,2)
(16,39,2)
(14,36,2)
(16,5,2)
(18,5,2)
-----------------------------------
(0,data[0] = 5)
(1,NULL)
(2,(int *)
(3,5)
(4,data)
(5,globalReturnsTrue()
(6,exit(-1)
(7,1)
(8,)
(9,data)
(10,if(globalReturnsTrue()
(11,100*sizeof(int)
(12,100)
(13,if (data == NULL)
(14,data)
(15,data[0])
(16,printIntLine(data[0])
(17,data)
(18,0)
(19,sizeof(int)
(20,data)
(21,if(globalReturnsTrue()
(22,data = (int *)
(23,)
(24,)
(25,data = NULL)
(26,)
(27,RET)
(28,int)
(29,realloc(data, 100*sizeof(int)
(30,data)
(31,0)
(32,NULL)
(33,int *)
(34,data)
(35,-1)
(36,globalReturnsTrue()
(37,data)
(38,free(data)
(39,data[0])
(40,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^