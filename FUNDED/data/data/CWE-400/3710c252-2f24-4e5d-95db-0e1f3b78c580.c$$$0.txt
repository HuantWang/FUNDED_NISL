-----label-----
0
-----code-----
static void goodG2B1()
{
    int * data;
    data = NULL;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
62,64
63,64
64,65
66,67
-----nextToken-----
2,4,8,10,11,15,17,21,26,27,32,35,37,40,42,45,46,51,52,53,57,60,61,65,67
-----computeFrom-----
13,14
13,15
30,31
30,32
41,42
41,43
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,23,0)
(25,11,0)
(2,7,0)
(28,23,0)
(6,28,0)
(20,15,0)
(19,2,0)
(0,7,0)
(20,28,0)
(7,0,0)
(9,20,0)
(21,25,0)
(3,11,0)
(16,18,0)
(12,25,0)
(16,15,0)
(29,30,0)
(0,16,0)
(1,20,0)
(24,28,0)
(31,15,0)
(18,16,0)
(8,24,0)
(20,9,0)
(10,20,0)
(4,11,0)
(16,0,0)
(24,15,0)
(22,11,0)
(27,24,0)
(15,23,0)
(26,29,0)
(17,7,0)
(15,16,0)
(7,2,0)
(24,8,1)
(15,16,1)
(24,15,1)
(20,15,1)
(17,31,1)
(1,28,1)
(14,9,1)
(19,17,1)
(8,27,1)
(14,29,1)
(12,21,1)
(25,12,1)
(31,13,1)
(6,24,1)
(0,7,1)
(27,15,1)
(16,0,1)
(5,14,1)
(20,10,1)
(26,13,1)
(13,25,1)
(2,19,1)
(20,28,1)
(7,2,1)
(28,6,1)
(29,26,1)
(9,20,1)
(10,1,1)
(16,18,1)
(6,13,2)
(9,20,2)
(8,13,2)
(10,13,2)
(16,13,2)
(9,13,2)
(15,16,2)
(0,7,2)
(1,13,2)
(2,13,2)
(20,13,2)
(20,15,2)
(15,13,2)
(26,13,2)
(16,0,2)
(24,13,2)
(16,18,2)
(31,13,2)
(20,28,2)
(17,13,2)
(7,13,2)
(24,15,2)
(29,13,2)
(7,2,2)
(19,13,2)
(27,13,2)
(28,13,2)
(0,13,2)
-----------------------------------
(0,ALLOCA(100*sizeof(int)
(1,data)
(2,sizeof(int)
(3,data)
(4,if(globalReturnsFalse()
(5,RET)
(6,5)
(7,100*sizeof(int)
(8,0)
(9,printIntLine(data[0])
(10,0)
(11,)
(12,NULL)
(13,globalReturnsFalse()
(14,globalReturnsTrue()
(15,data = (int *)
(16,(int *)
(17,100)
(18,int *)
(19,int)
(20,data[0])
(21,data)
(22,if(globalReturnsTrue()
(23,)
(24,data[0])
(25,data = NULL)
(26,"Benign, fixed string")
(27,data)
(28,data[0] = 5)
(29,printLine("Benign, fixed string")
(30,)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^