-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
46,48
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
47,56
47,57
47,58
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
59,60
61,62
61,63
62,63
62,64
63,64
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
74,75
77,78
78,79
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
108,110
109,110
111,112
113,114
113,115
114,115
114,116
115,116
115,117
115,118
115,119
116,117
118,119
120,121
120,122
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
133,134
135,136
137,138
138,139
138,140
139,140
141,142
141,143
141,144
141,145
141,146
142,143
144,145
146,147
148,149
148,150
149,150
153,154
153,155
154,155
154,156
155,156
155,157
156,157
158,159
160,161
160,162
161,162
164,165
166,167
167,168
167,169
168,169
168,170
169,170
171,172
174,175
175,176
175,177
176,177
178,179
178,180
179,180
181,182
184,185
184,186
185,186
185,187
186,187
188,189
190,191
191,192
192,193
192,194
193,194
195,196
197,198
197,199
197,200
198,199
199,200
199,201
201,202
201,203
203,204
204,205
206,207
207,208
207,209
209,210
209,211
211,212
212,213
214,215
214,216
214,217
214,218
214,219
214,220
214,221
215,216
216,217
216,218
217,218
219,220
219,221
221,222
223,224
224,225
224,226
225,226
227,228
227,229
227,230
230,231
231,232
233,234
234,235
234,236
236,237
236,238
236,239
239,240
241,242
242,243
242,244
243,244
245,246
245,247
245,248
246,247
248,249
251,252
251,253
252,253
252,254
253,254
255,256
257,258
258,259
259,260
259,261
260,261
263,264
263,265
263,266
263,267
264,265
265,266
265,267
266,267
269,270
269,271
270,271
272,273
272,274
273,274
273,275
274,275
277,278
279,280
280,281
282,283
283,284
283,285
284,285
284,286
285,286
285,287
286,287
288,289
290,291
290,292
290,293
290,294
290,295
291,292
293,294
295,296
296,297
296,298
299,300
299,301
300,301
302,303
304,305
306,307
307,308
308,309
308,310
309,310
312,313
312,314
313,314
315,316
316,317
317,318
317,319
318,319
320,321
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,37,40,42,45,51,54,56,58,60,64,66,68,72,75,76,80,85,86,88,94,95,96,99,101,106,107,110,112,117,119,123,125,128,132,134,136,140,143,145,147,150,151,152,157,159,162,163,165,170,172,173,177,180,182,183,187,189,194,196,200,202,205,208,210,213,218,220,222,226,228,229,232,235,237,238,240,244,247,249,250,254,256,261,262,267,268,271,275,276,278,281,287,289,292,294,297,298,301,303,305,310,311,314,319,321
-----computeFrom-----
12,13
12,14
49,50
49,51
62,63
62,64
82,83
82,84
90,91
90,92
103,104
103,105
114,115
114,116
138,139
138,140
148,149
148,150
154,155
154,156
155,156
155,157
160,161
160,162
167,168
167,169
175,176
175,177
185,186
185,187
242,243
242,244
252,253
252,254
265,266
265,267
269,270
269,271
284,285
284,286
-----guardedBy-----
187,196
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_31_bad(){    int count;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_31_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_31_bad
{    int count;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(19,66,0)
(108,90,0)
(96,59,0)
(90,176,0)
(173,72,0)
(144,46,0)
(77,142,0)
(141,32,0)
(178,168,0)
(0,15,0)
(6,180,0)
(118,8,0)
(78,91,0)
(52,2,0)
(123,127,0)
(94,32,0)
(177,173,0)
(154,186,0)
(23,32,0)
(116,44,0)
(72,100,0)
(50,83,0)
(21,60,0)
(48,119,0)
(85,162,0)
(158,100,0)
(92,2,0)
(12,27,0)
(129,179,0)
(73,23,0)
(189,26,0)
(63,2,0)
(109,125,0)
(69,83,0)
(156,32,0)
(103,2,0)
(160,87,0)
(143,72,0)
(57,60,0)
(30,94,0)
(184,70,0)
(45,146,0)
(127,2,0)
(36,176,0)
(84,106,0)
(132,22,0)
(166,44,0)
(26,100,0)
(2,165,0)
(14,156,0)
(54,96,0)
(59,100,0)
(50,186,0)
(95,70,0)
(15,72,0)
(86,42,0)
(29,33,0)
(36,179,0)
(183,72,0)
(151,70,0)
(81,100,0)
(110,173,0)
(153,142,0)
(190,2,0)
(125,159,0)
(61,100,0)
(165,28,0)
(51,58,0)
(20,81,0)
(131,90,0)
(146,168,0)
(137,70,0)
(39,98,0)
(16,72,0)
(66,93,0)
(25,176,0)
(11,46,0)
(167,70,0)
(135,18,0)
(90,72,0)
(24,16,0)
(124,134,0)
(176,90,0)
(55,114,0)
(40,23,0)
(180,32,0)
(8,99,0)
(46,158,0)
(161,98,0)
(32,2,0)
(183,91,0)
(162,20,0)
(9,2,0)
(47,173,0)
(114,186,0)
(1,70,0)
(75,28,0)
(106,28,0)
(98,161,0)
(175,77,0)
(70,28,0)
(101,106,0)
(115,125,0)
(138,165,0)
(129,176,0)
(176,100,0)
(174,162,0)
(23,40,0)
(94,127,0)
(142,58,0)
(89,92,0)
(23,161,0)
(79,180,0)
(102,129,0)
(26,189,0)
(158,34,0)
(3,58,0)
(96,176,0)
(99,27,0)
(50,185,0)
(183,139,0)
(117,23,0)
(80,59,0)
(181,159,0)
(164,20,0)
(7,151,0)
(142,77,0)
(27,99,0)
(41,86,0)
(18,100,0)
(125,100,0)
(60,2,0)
(99,8,0)
(152,127,0)
(56,81,0)
(161,23,0)
(5,42,0)
(74,3,0)
(81,33,0)
(148,129,0)
(83,50,0)
(77,175,0)
(10,27,0)
(128,23,0)
(140,117,0)
(62,20,0)
(133,91,0)
(188,185,0)
(163,92,0)
(186,114,0)
(71,132,0)
(169,15,0)
(37,99,0)
(107,70,0)
(159,125,0)
(44,90,0)
(43,151,0)
(145,36,0)
(150,115,0)
(172,170,0)
(97,183,0)
(33,81,0)
(53,70,0)
(182,70,0)
(185,50,0)
(156,147,0)
(91,70,0)
(168,100,0)
(179,36,0)
(106,101,0)
(31,113,0)
(162,165,0)
(76,100,0)
(155,36,0)
(49,42,0)
(120,165,0)
(149,16,0)
(42,86,0)
(17,18,0)
(88,90,0)
(23,117,0)
(86,26,0)
(77,162,0)
(187,94,0)
(67,189,0)
(20,106,0)
(34,158,0)
(38,40,0)
(90,44,0)
(32,94,0)
(104,34,0)
(130,70,0)
(15,91,0)
(186,50,0)
(68,2,0)
(50,72,0)
(179,129,0)
(157,146,0)
(125,115,0)
(171,100,0)
(65,100,0)
(99,37,0)
(121,101,0)
(112,77,0)
(20,165,0)
(105,37,0)
(35,96,0)
(4,111,0)
(126,58,0)
(64,50,0)
(72,173,0)
(186,154,0)
(54,35,1)
(173,47,1)
(125,159,1)
(158,34,1)
(20,81,1)
(20,62,1)
(179,36,1)
(109,159,1)
(0,4,1)
(50,83,1)
(127,123,1)
(56,59,1)
(15,72,1)
(179,129,1)
(72,173,1)
(157,45,1)
(86,41,1)
(29,56,1)
(117,140,1)
(146,157,1)
(185,188,1)
(145,129,1)
(60,57,1)
(40,38,1)
(71,161,1)
(58,51,1)
(128,98,1)
(34,104,1)
(153,3,1)
(3,74,1)
(89,162,1)
(98,39,1)
(15,169,1)
(3,58,1)
(85,20,1)
(14,136,1)
(77,175,1)
(25,185,1)
(55,64,1)
(88,131,1)
(45,125,1)
(160,16,1)
(23,40,1)
(102,176,1)
(0,13,1)
(181,16,1)
(140,128,1)
(15,91,1)
(6,32,1)
(161,23,1)
(67,86,1)
(183,97,1)
(116,88,1)
(23,73,1)
(80,96,1)
(37,105,1)
(143,18,1)
(126,180,1)
(82,156,1)
(122,183,1)
(13,81,1)
(86,42,1)
(176,90,1)
(101,121,1)
(106,101,1)
(129,148,1)
(185,50,1)
(129,176,1)
(172,8,1)
(152,60,1)
(77,162,1)
(153,58,1)
(12,10,1)
(133,78,1)
(141,127,1)
(162,20,1)
(38,117,1)
(11,26,1)
(178,146,1)
(48,122,1)
(39,142,1)
(108,44,1)
(94,127,1)
(163,89,1)
(186,154,1)
(96,176,1)
(164,48,1)
(151,7,1)
(46,144,1)
(186,114,1)
(73,40,1)
(148,102,1)
(33,29,1)
(83,69,1)
(112,153,1)
(47,177,1)
(77,112,1)
(50,72,1)
(92,163,1)
(174,85,1)
(62,164,1)
(23,117,1)
(124,185,1)
(183,72,1)
(19,180,1)
(50,186,1)
(188,50,1)
(168,178,1)
(164,122,1)
(155,145,1)
(79,6,1)
(81,33,1)
(125,115,1)
(136,142,1)
(27,12,1)
(90,108,1)
(8,118,1)
(91,133,1)
(17,135,1)
(142,58,1)
(110,143,1)
(66,19,1)
(159,181,1)
(187,141,1)
(51,126,1)
(0,172,1)
(115,150,1)
(32,94,1)
(4,179,1)
(150,109,1)
(74,132,1)
(30,187,1)
(104,46,1)
(41,42,1)
(74,161,1)
(183,91,1)
(24,72,1)
(114,55,1)
(135,8,1)
(57,21,1)
(156,32,1)
(118,99,1)
(131,25,1)
(189,67,1)
(82,136,1)
(16,72,1)
(99,37,1)
(16,149,1)
(35,179,1)
(69,186,1)
(122,15,1)
(169,0,1)
(0,124,1)
(78,151,1)
(166,116,1)
(94,30,1)
(20,106,1)
(96,54,1)
(149,24,1)
(144,11,1)
(162,174,1)
(21,92,1)
(99,27,1)
(132,71,1)
(36,176,1)
(42,5,1)
(8,99,1)
(142,77,1)
(180,79,1)
(156,14,1)
(161,98,1)
(10,91,1)
(36,155,1)
(90,72,1)
(43,106,1)
(64,158,1)
(126,66,1)
(97,15,1)
(44,166,1)
(0,160,1)
(7,43,1)
(180,32,1)
(23,32,1)
(59,80,1)
(10,13,1)
(177,110,1)
(90,44,1)
(121,84,1)
(49,168,1)
(5,49,1)
(123,152,1)
(105,27,1)
(26,189,1)
(18,17,1)
(42,16,2)
(23,32,2)
(185,16,2)
(149,8,2)
(83,16,2)
(20,106,2)
(153,142,2)
(23,142,2)
(90,44,2)
(161,23,2)
(35,179,2)
(124,185,2)
(97,15,2)
(25,185,2)
(49,16,2)
(98,142,2)
(125,16,2)
(47,8,2)
(4,179,2)
(88,185,2)
(99,37,2)
(17,8,2)
(3,142,2)
(50,16,2)
(135,8,2)
(50,72,2)
(39,142,2)
(36,129,2)
(179,185,2)
(132,161,2)
(179,129,2)
(77,162,2)
(5,16,2)
(99,27,2)
(38,142,2)
(99,13,2)
(128,142,2)
(27,13,2)
(81,179,2)
(186,114,2)
(188,16,2)
(179,36,2)
(33,179,2)
(183,72,2)
(3,58,2)
(67,16,2)
(189,16,2)
(96,176,2)
(145,129,2)
(71,161,2)
(158,34,2)
(181,16,2)
(14,136,2)
(37,13,2)
(186,16,2)
(15,91,2)
(10,13,2)
(12,13,2)
(86,42,2)
(186,154,2)
(116,185,2)
(102,185,2)
(146,16,2)
(55,16,2)
(23,117,2)
(105,13,2)
(66,180,2)
(77,175,2)
(56,179,2)
(104,16,2)
(142,58,2)
(24,8,2)
(11,16,2)
(117,142,2)
(161,98,2)
(172,8,2)
(156,136,2)
(50,186,2)
(72,8,2)
(129,176,2)
(158,16,2)
(80,179,2)
(64,16,2)
(73,142,2)
(159,16,2)
(34,16,2)
(166,185,2)
(69,16,2)
(183,91,2)
(183,15,2)
(90,72,2)
(155,129,2)
(114,16,2)
(148,185,2)
(46,16,2)
(44,185,2)
(26,16,2)
(94,127,2)
(81,33,2)
(50,83,2)
(176,90,2)
(177,8,2)
(125,115,2)
(168,16,2)
(54,179,2)
(20,81,2)
(161,142,2)
(109,16,2)
(19,180,2)
(41,16,2)
(36,176,2)
(115,16,2)
(131,185,2)
(108,185,2)
(162,20,2)
(45,16,2)
(142,77,2)
(16,72,2)
(32,94,2)
(160,16,2)
(18,8,2)
(23,40,2)
(16,8,2)
(15,72,2)
(157,16,2)
(150,16,2)
(178,16,2)
(72,173,2)
(144,16,2)
(180,32,2)
(110,8,2)
(8,13,2)
(59,179,2)
(86,16,2)
(90,185,2)
(173,8,2)
(112,142,2)
(13,179,2)
(40,142,2)
(96,179,2)
(106,101,2)
(142,142,2)
(29,179,2)
(125,159,2)
(26,189,2)
(176,185,2)
(156,32,2)
(74,142,2)
(118,13,2)
(143,8,2)
(8,99,2)
(77,142,2)
(129,185,2)
(185,50,2)
(140,142,2)
(48,122,2)
-----------------------------------
(0,connectSocket)
(1,inputBuffer)
(2,)
(3,i++)
(4,break;)
(5,sin_addr)
(6,pFile)
(7,0)
(8,WSAStartup(MAKEWORD(2,2)
(9,if (pFile == NULL)
(10,2)
(11,service)
(12,2)
(13,0)
(14,pFile)
(15,connectSocket != INVALID_SOCKET)
(16,connectSocket == INVALID_SOCKET)
(17,1)
(18,wsaDataInit = 1)
(19,1)
(20,countCopy = count)
(21,pFile)
(22,)
(23,fwrite(SENTENCE, sizeof(char)
(24,connectSocket)
(25,recvResult)
(26,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(27,MAKEWORD(2,2)
(28,)
(29,inputBuffer)
(30,"w+")
(31,if (strlen(SENTENCE)
(32,pFile = fopen(filename, "w+")
(33,atoi(inputBuffer)
(34,htons(TCP_PORT)
(35,inputBuffer)
(36,recvResult == 0)
(37,&wsaData)
(38,SENTENCE)
(39,SENTENCE)
(40,strlen(SENTENCE)
(41,s_addr)
(42,service.sin_addr)
(43,wsaDataInit)
(44,CHAR_ARRAY_SIZE - 1)
(45,service)
(46,service.sin_port)
(47,IPPROTO_TCP)
(48,WSACleanup()
(49,service)
(50,connect(connectSocket, (struct sockaddr*)
(51,0)
(52,i)
(53,wsaDataInit)
(54,recvResult)
(55,service)
(56,count)
(57,NULL)
(58,i = 0)
(59,inputBuffer[recvResult] = \'\\0\')
(60,*pFile = NULL)
(61,if (WSAStartup(MAKEWORD(2,2)
(62,count)
(63,if (pFile)
(64,connectSocket)
(65,if (connect(connectSocket, (struct sockaddr*)
(66,exit(1)
(67,IP_ADDRESS)
(68,for (i = 0; i < (size_t)
(69,service)
(70,)
(71,1)
(72,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(73,pFile)
(74,i)
(75,count)
(76,if (recvResult == SOCKET_ERROR || recvResult == 0)
(77,(size_t)
(78,connectSocket)
(79,NULL)
(80,\'\\0\')
(81,count = atoi(inputBuffer)
(82,RET)
(83,sizeof(service)
(84,count)
(85,count)
(86,service.sin_addr.s_addr)
(87,)
(88,inputBuffer)
(89,i)
(90,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(91,connectSocket = INVALID_SOCKET)
(92,i = 0)
(93,)
(94,fopen(filename, "w+")
(95,connectSocket)
(96,inputBuffer[recvResult])
(97,connectSocket)
(98,strlen(SENTENCE)
(99,WSAStartup(MAKEWORD(2,2)
(100,)
(101,-1)
(102,recvResult)
(103,filename)
(104,TCP_PORT)
(105,wsaData)
(106,count = -1)
(107,wsaData)
(108,0)
(109,0)
(110,AF_INET)
(111,)
(112,count)
(113,)
(114,&service)
(115,sizeof(service)
(116,CHAR_ARRAY_SIZE)
(117,sizeof(char)
(118,NO_ERROR)
(119,)
(120,count)
(121,1)
(122,wsaDataInit)
(123,"output_bad.txt")
(124,break;)
(125,memset(&service, 0, sizeof(service)
(126,i)
(127,*filename = "output_bad.txt")
(128,SENTENCE)
(129,recvResult == SOCKET_ERROR)
(130,do)
(131,connectSocket)
(132,exit(1)
(133,INVALID_SOCKET)
(134,)
(135,wsaDataInit)
(136,pFile)
(137,service)
(138,countCopy)
(139,)
(140,char)
(141,pFile)
(142,i < (size_t)
(143,connectSocket)
(144,sin_port)
(145,recvResult)
(146,service.sin_family)
(147,)
(148,SOCKET_ERROR)
(149,INVALID_SOCKET)
(150,service)
(151,wsaDataInit = 0)
(152,filename)
(153,i)
(154,struct sockaddr*)
(155,0)
(156,fclose(pFile)
(157,sin_family)
(158,service.sin_port = htons(TCP_PORT)
(159,&service)
(160,break;)
(161,strlen(SENTENCE)
(162,count = countCopy)
(163,0)
(164,countCopy)
(165,)
(166,1)
(167,if (connectSocket != INVALID_SOCKET)
(168,service.sin_family = AF_INET)
(169,INVALID_SOCKET)
(170,)
(171,if (connectSocket == INVALID_SOCKET)
(172,break;)
(173,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(174,countCopy)
(175,size_t)
(176,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(177,SOCK_STREAM)
(178,AF_INET)
(179,recvResult == SOCKET_ERROR || recvResult == 0)
(180,pFile == NULL)
(181,service)
(182,recvResult)
(183,CLOSE_SOCKET(connectSocket)
(184,if (wsaDataInit)
(185,connect(connectSocket, (struct sockaddr*)
(186,(struct sockaddr*)
(187,filename)
(188,SOCKET_ERROR)
(189,inet_addr(IP_ADDRESS)
(190,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^