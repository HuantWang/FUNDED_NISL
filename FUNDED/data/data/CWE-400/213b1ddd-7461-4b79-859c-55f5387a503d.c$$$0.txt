-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,63,65
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink(data);}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink(data);}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink(data);
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink(data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink
data
data
-----joern-----
(12,28,0)
(8,0,0)
(6,28,0)
(22,12,0)
(21,22,0)
(22,2,0)
(5,2,0)
(28,25,0)
(15,23,0)
(20,24,0)
(2,22,0)
(17,5,0)
(7,12,0)
(13,23,0)
(0,25,0)
(26,11,0)
(4,28,0)
(5,25,0)
(9,2,0)
(23,12,0)
(16,23,0)
(10,25,0)
(5,0,0)
(2,19,0)
(29,22,0)
(11,3,0)
(18,12,0)
(14,0,0)
(27,22,0)
(23,24,0)
(24,23,0)
(23,15,1)
(24,20,1)
(21,27,1)
(22,21,1)
(9,24,1)
(17,11,1)
(2,22,1)
(20,23,1)
(22,12,1)
(17,2,1)
(5,0,1)
(29,9,1)
(27,29,1)
(18,7,1)
(7,0,1)
(5,2,1)
(23,12,1)
(8,14,1)
(26,24,1)
(16,13,1)
(24,23,1)
(5,17,1)
(12,18,1)
(11,26,1)
(15,16,1)
(13,12,1)
(1,5,1)
(0,8,1)
(9,24,2)
(21,24,2)
(2,24,2)
(22,12,2)
(29,24,2)
(22,24,2)
(26,24,2)
(23,12,2)
(24,23,2)
(5,2,2)
(2,22,2)
(11,24,2)
(27,24,2)
(5,0,2)
-----------------------------------
(0,data = 0)
(1,RET)
(2,data = strtoul(inputBuffer, NULL, 0)
(3,)
(4,inputBuffer)
(5,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_53b_goodB2GSink(data)
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,inputBuffer)
(8,0)
(9,data)
(10,data)
(11,printLine("fgets()
(12,inputBuffer[CHAR_ARRAY_SIZE] = "")
(13,inputBuffer)
(14,data)
(15,stdin)
(16,CHAR_ARRAY_SIZE)
(17,data)
(18,"")
(19,)
(20,NULL)
(21,0)
(22,strtoul(inputBuffer, NULL, 0)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,)
(26,"fgets()
(27,NULL)
(28,)
(29,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^