-----label-----
1
-----code-----
FILE *attempt_open_write(const char *s, const char *suffixes)
{
   /*** spaces in name ***/
   while (isspace((int)(unsigned char)*s))
      s += 1;
   strcpyif(file_name, s);

   if (! strcmp(s, "$stdout"))
      return stdout;
   if (! strcmp(s, "$stderr"))
      return stderr;

   /*** pipes ***/
   if (*s == '|') {
      errno = 0;
      FILE *f = popen(s + 1, "w");
      if (!f && errno==EMFILE) {
         mm_collect_now();
         errno = 0;
         f = popen(s + 1, "w");
      }
      if (f) {
         FMODE_BINARY(f);
         return f;
      } else
         return NULL;
   }

   /*** suffix ***/
   if (access(s, W_OK) == -1) {
      s = add_suffix(s, suffixes);
      strcpy(file_name, s); // why?
   }

   /*** open ***/
   errno = 0;
   FILE *f = fopen(s, "w");
   if (!f && errno==EMFILE) {
      mm_collect_now();
      errno = 0;
      f = fopen(s, "w");
   }
   if (f) {
      FMODE_BINARY(f);
      return f;
   }
   return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
18,19
18,20
19,20
19,21
20,21
22,23
22,24
23,24
23,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
42,43
44,45
46,47
46,48
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
57,58
57,59
58,59
59,60
59,61
59,62
60,61
62,63
65,66
66,67
68,69
68,70
69,70
69,71
70,71
71,72
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
88,90
88,91
89,90
91,92
91,93
92,93
96,97
96,98
97,98
97,99
98,99
99,100
101,102
101,103
102,103
104,105
106,107
106,108
106,109
107,108
108,109
109,110
111,112
112,113
112,114
113,114
116,117
117,118
117,119
118,119
120,121
120,122
120,123
121,122
123,124
123,125
124,125
128,129
128,130
128,131
129,130
131,132
131,133
132,133
133,134
133,135
134,135
136,137
138,139
139,140
141,142
142,143
144,145
144,146
145,146
145,147
146,147
146,148
146,149
147,148
149,150
151,152
153,154
155,156
155,157
156,157
157,158
157,159
158,159
160,161
160,162
160,163
161,162
163,164
165,166
167,168
168,169
168,170
168,171
169,170
171,172
173,174
175,176
176,177
176,178
177,178
180,181
181,182
181,183
182,183
184,185
184,186
184,187
187,188
188,189
188,190
188,191
189,190
191,192
194,195
194,196
195,196
195,197
196,197
197,198
199,200
199,201
200,201
202,203
204,205
204,206
204,207
205,206
206,207
207,208
209,210
210,211
210,212
211,212
214,215
215,216
215,217
216,217
218,219
218,220
218,221
219,220
221,222
224,225
224,226
225,226
227,228
227,229
228,229
229,230
229,231
230,231
232,233
234,235
235,236
237,238
238,239
-----nextToken-----
3,5,6,8,10,11,13,15,16,21,24,25,28,29,32,36,37,41,43,45,50,52,53,56,61,63,64,67,72,73,78,79,83,85,86,90,93,94,95,100,103,105,110,114,115,119,122,125,126,127,130,135,137,140,143,148,150,152,154,159,162,164,166,170,172,174,178,179,183,185,186,190,192,193,198,201,203,208,212,213,217,220,222,223,226,231,233,236,239
-----computeFrom-----
34,35
34,36
69,70
69,71
76,77
76,78
91,92
91,93
97,98
97,99
101,102
101,103
112,113
112,114
117,118
117,119
123,124
123,125
145,146
145,147
157,158
157,159
176,177
176,178
195,196
195,197
199,200
199,201
210,211
210,212
215,216
215,217
-----guardedBy-----
72,125
103,114
100,119
150,174
201,212
198,217
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;WhileStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
FILE *attempt_open_write(const char *s, const char *suffixes){   /*** spaces in name ***/   while (isspace((int)(unsigned char)*s))      s += 1;   strcpyif(file_name, s);   if (! strcmp(s, "$stdout"))      return stdout;   if (! strcmp(s, "$stderr"))      return stderr;   /*** pipes ***/   if (*s == '|') {      errno = 0;      FILE *f = popen(s + 1, "w");      if (!f && errno==EMFILE) {         mm_collect_now();         errno = 0;         f = popen(s + 1, "w");      }      if (f) {         FMODE_BINARY(f);         return f;      } else         return NULL;   }   /*** suffix ***/   if (access(s, W_OK) == -1) {      s = add_suffix(s, suffixes);      strcpy(file_name, s); // why?   }   /*** open ***/   errno = 0;   FILE *f = fopen(s, "w");   if (!f && errno==EMFILE) {      mm_collect_now();      errno = 0;      f = fopen(s, "w");   }   if (f) {      FMODE_BINARY(f);      return f;   }   return NULL;}
FILE
FILE
*attempt_open_write(const char *s, const char *suffixes)
*
attempt_open_write
const char *s
const char
*s
*
s
const char *suffixes
const char
*suffixes
*
suffixes
{   /*** spaces in name ***/   while (isspace((int)(unsigned char)*s))      s += 1;   strcpyif(file_name, s);   if (! strcmp(s, "$stdout"))      return stdout;   if (! strcmp(s, "$stderr"))      return stderr;   /*** pipes ***/   if (*s == '|') {      errno = 0;      FILE *f = popen(s + 1, "w");      if (!f && errno==EMFILE) {         mm_collect_now();         errno = 0;         f = popen(s + 1, "w");      }      if (f) {         FMODE_BINARY(f);         return f;      } else         return NULL;   }   /*** suffix ***/   if (access(s, W_OK) == -1) {      s = add_suffix(s, suffixes);      strcpy(file_name, s); // why?   }   /*** open ***/   errno = 0;   FILE *f = fopen(s, "w");   if (!f && errno==EMFILE) {      mm_collect_now();      errno = 0;      f = fopen(s, "w");   }   if (f) {      FMODE_BINARY(f);      return f;   }   return NULL;}
while (isspace((int)(unsigned char)*s))      s += 1;
isspace((int)(unsigned char)*s)
isspace
isspace
(int)(unsigned char)*s
int
int

(unsigned char)*s
unsigned char
unsigned char

*s
s
s
s += 1;
s += 1
s
s
1
strcpyif(file_name, s);
strcpyif(file_name, s)
strcpyif
strcpyif
file_name
file_name
s
s
if (! strcmp(s, "$stdout"))      return stdout;
! strcmp(s, "$stdout")
strcmp(s, "$stdout")
strcmp
strcmp
s
s
"$stdout"
return stdout;
stdout
stdout
if (! strcmp(s, "$stderr"))      return stderr;
! strcmp(s, "$stderr")
strcmp(s, "$stderr")
strcmp
strcmp
s
s
"$stderr"
return stderr;
stderr
stderr
if (*s == '|') {      errno = 0;      FILE *f = popen(s + 1, "w");      if (!f && errno==EMFILE) {         mm_collect_now();         errno = 0;         f = popen(s + 1, "w");      }      if (f) {         FMODE_BINARY(f);         return f;      } else         return NULL;   }
*s == '|'
*s
s
s
'|'
{      errno = 0;      FILE *f = popen(s + 1, "w");      if (!f && errno==EMFILE) {         mm_collect_now();         errno = 0;         f = popen(s + 1, "w");      }      if (f) {         FMODE_BINARY(f);         return f;      } else         return NULL;   }
errno = 0;
errno = 0
errno
errno
0
FILE *f = popen(s + 1, "w");
FILE *f = popen(s + 1, "w");
FILE
FILE
*f = popen(s + 1, "w")
*
f
= popen(s + 1, "w")
popen(s + 1, "w")
popen
popen
s + 1
s
s
1
"w"
if (!f && errno==EMFILE) {         mm_collect_now();         errno = 0;         f = popen(s + 1, "w");      }
!f && errno==EMFILE
!f
f
f
errno==EMFILE
errno
errno
EMFILE
EMFILE
{         mm_collect_now();         errno = 0;         f = popen(s + 1, "w");      }
mm_collect_now();
mm_collect_now()
mm_collect_now
mm_collect_now
errno = 0;
errno = 0
errno
errno
0
f = popen(s + 1, "w");
f = popen(s + 1, "w")
f
f
popen(s + 1, "w")
popen
popen
s + 1
s
s
1
"w"
if (f) {         FMODE_BINARY(f);         return f;      } else         return NULL;
f
f
{         FMODE_BINARY(f);         return f;      }
FMODE_BINARY(f);
FMODE_BINARY(f)
FMODE_BINARY
FMODE_BINARY
f
f
return f;
f
f
return NULL;
NULL
NULL
if (access(s, W_OK) == -1) {      s = add_suffix(s, suffixes);      strcpy(file_name, s); // why?   }
access(s, W_OK) == -1
access(s, W_OK)
access
access
s
s
W_OK
W_OK
-1
1
{      s = add_suffix(s, suffixes);      strcpy(file_name, s); // why?   }
s = add_suffix(s, suffixes);
s = add_suffix(s, suffixes)
s
s
add_suffix(s, suffixes)
add_suffix
add_suffix
s
s
suffixes
suffixes
strcpy(file_name, s);
strcpy(file_name, s)
strcpy
strcpy
file_name
file_name
s
s
errno = 0;
errno = 0
errno
errno
0
FILE *f = fopen(s, "w");
FILE *f = fopen(s, "w");
FILE
FILE
*f = fopen(s, "w")
*
f
= fopen(s, "w")
fopen(s, "w")
fopen
fopen
s
s
"w"
if (!f && errno==EMFILE) {      mm_collect_now();      errno = 0;      f = fopen(s, "w");   }
!f && errno==EMFILE
!f
f
f
errno==EMFILE
errno
errno
EMFILE
EMFILE
{      mm_collect_now();      errno = 0;      f = fopen(s, "w");   }
mm_collect_now();
mm_collect_now()
mm_collect_now
mm_collect_now
errno = 0;
errno = 0
errno
errno
0
f = fopen(s, "w");
f = fopen(s, "w")
f
f
fopen(s, "w")
fopen
fopen
s
s
"w"
if (f) {      FMODE_BINARY(f);      return f;   }
f
f
{      FMODE_BINARY(f);      return f;   }
FMODE_BINARY(f);
FMODE_BINARY(f)
FMODE_BINARY
FMODE_BINARY
f
f
return f;
f
f
return NULL;
NULL
NULL
-----joern-----
(41,28,0)
(19,36,0)
(103,109,0)
(54,35,0)
(8,97,0)
(83,90,0)
(97,126,0)
(70,126,0)
(48,28,0)
(75,86,0)
(82,112,0)
(103,7,0)
(64,48,0)
(70,113,0)
(39,55,0)
(2,28,0)
(108,59,0)
(97,108,0)
(77,53,0)
(99,46,0)
(22,28,0)
(34,70,0)
(93,73,0)
(3,7,0)
(46,126,0)
(125,109,0)
(98,33,0)
(4,116,0)
(38,105,0)
(117,94,0)
(34,5,0)
(20,21,0)
(115,33,0)
(84,33,0)
(86,28,0)
(56,109,0)
(63,46,0)
(26,53,0)
(96,86,0)
(35,9,0)
(37,118,0)
(62,90,0)
(92,121,0)
(69,52,0)
(95,72,0)
(34,109,0)
(119,68,0)
(24,126,0)
(66,28,0)
(104,125,0)
(65,28,0)
(89,72,0)
(77,71,0)
(32,55,0)
(73,109,0)
(43,28,0)
(39,123,0)
(35,29,0)
(58,39,0)
(50,104,0)
(33,126,0)
(122,109,0)
(123,109,0)
(33,109,0)
(82,121,0)
(11,70,0)
(103,126,0)
(40,118,0)
(61,36,0)
(45,105,0)
(87,22,0)
(67,125,0)
(9,11,0)
(64,94,0)
(22,126,0)
(72,55,0)
(11,109,0)
(123,39,0)
(0,24,0)
(123,126,0)
(34,126,0)
(118,70,0)
(33,84,0)
(127,47,0)
(91,125,0)
(112,27,0)
(114,112,0)
(88,28,0)
(55,90,0)
(36,21,0)
(48,86,0)
(110,27,0)
(101,15,0)
(111,102,0)
(73,68,0)
(48,116,0)
(24,70,0)
(60,16,0)
(52,10,0)
(55,39,0)
(17,73,0)
(30,77,0)
(104,53,0)
(108,52,0)
(46,99,0)
(85,102,0)
(108,97,0)
(12,123,0)
(11,9,0)
(64,1,0)
(16,27,0)
(79,121,0)
(70,34,0)
(94,53,0)
(35,27,0)
(25,123,0)
(49,38,0)
(121,82,0)
(10,52,0)
(64,47,0)
(31,105,0)
(27,28,0)
(22,109,0)
(59,108,0)
(109,126,0)
(116,15,0)
(109,109,0)
(42,11,0)
(72,95,0)
(78,9,0)
(106,34,0)
(53,104,0)
(76,70,0)
(77,55,0)
(97,109,0)
(13,46,0)
(74,103,0)
(23,119,0)
(14,28,0)
(44,1,0)
(68,119,0)
(53,21,0)
(7,103,0)
(125,126,0)
(118,109,0)
(102,95,0)
(120,22,0)
(118,126,0)
(9,15,0)
(57,116,0)
(125,104,0)
(118,27,0)
(51,48,0)
(64,16,0)
(52,69,0)
(18,28,0)
(95,102,0)
(52,108,0)
(68,73,0)
(11,126,0)
(94,71,0)
(64,38,0)
(16,9,0)
(24,113,0)
(81,90,0)
(27,118,0)
(124,34,0)
(16,29,0)
(105,90,0)
(38,36,0)
(80,11,0)
(46,109,0)
(112,82,0)
(6,24,0)
(94,55,0)
(73,126,0)
(94,117,1)
(39,58,1)
(104,50,1)
(38,105,1)
(92,79,1)
(122,56,1)
(72,55,1)
(97,109,1)
(51,107,1)
(45,7,1)
(49,100,1)
(98,115,1)
(36,19,1)
(48,116,1)
(11,70,1)
(100,53,1)
(27,118,1)
(123,126,1)
(95,72,1)
(76,68,1)
(60,35,1)
(64,1,1)
(109,122,1)
(64,48,1)
(53,104,1)
(118,70,1)
(96,68,1)
(64,38,1)
(64,94,1)
(70,34,1)
(77,30,1)
(33,126,1)
(78,116,1)
(39,123,1)
(34,5,1)
(23,73,1)
(25,32,1)
(74,99,1)
(118,126,1)
(110,86,1)
(119,23,1)
(57,101,1)
(106,124,1)
(107,82,1)
(63,13,1)
(0,70,1)
(7,103,1)
(72,89,1)
(6,0,1)
(52,69,1)
(20,95,1)
(47,127,1)
(54,107,1)
(93,7,1)
(8,109,1)
(13,84,1)
(12,25,1)
(107,9,1)
(82,121,1)
(33,109,1)
(58,123,1)
(16,60,1)
(33,98,1)
(11,126,1)
(56,10,1)
(77,53,1)
(108,59,1)
(19,61,1)
(103,109,1)
(124,76,1)
(111,85,1)
(115,22,1)
(1,44,1)
(94,53,1)
(109,126,1)
(125,126,1)
(40,110,1)
(55,39,1)
(123,12,1)
(84,33,1)
(35,27,1)
(35,9,1)
(16,27,1)
(73,126,1)
(46,63,1)
(24,70,1)
(118,37,1)
(117,77,1)
(37,40,1)
(24,126,1)
(24,6,1)
(86,75,1)
(77,55,1)
(34,109,1)
(103,74,1)
(30,100,1)
(73,17,1)
(109,109,1)
(123,109,1)
(108,97,1)
(94,55,1)
(80,42,1)
(22,126,1)
(46,109,1)
(22,87,1)
(95,102,1)
(96,24,1)
(10,52,1)
(112,114,1)
(99,46,1)
(75,96,1)
(31,45,1)
(114,27,1)
(11,109,1)
(100,95,1)
(38,49,1)
(46,126,1)
(70,126,1)
(91,67,1)
(125,91,1)
(35,54,1)
(87,120,1)
(7,3,1)
(97,126,1)
(38,36,1)
(73,109,1)
(50,125,1)
(16,9,1)
(9,11,1)
(68,73,1)
(97,8,1)
(44,84,1)
(102,111,1)
(17,93,1)
(127,99,1)
(101,82,1)
(52,108,1)
(105,31,1)
(67,26,1)
(120,10,1)
(11,80,1)
(116,4,1)
(3,103,1)
(79,112,1)
(26,36,1)
(48,51,1)
(42,78,1)
(121,92,1)
(48,86,1)
(112,27,1)
(34,106,1)
(64,16,1)
(68,119,1)
(125,109,1)
(82,112,1)
(85,72,1)
(34,126,1)
(64,47,1)
(118,109,1)
(89,55,1)
(104,125,1)
(61,20,1)
(4,57,1)
(32,105,1)
(22,109,1)
(103,126,1)
(102,72,2)
(48,116,2)
(94,100,2)
(64,38,2)
(58,7,2)
(16,27,2)
(72,55,2)
(95,102,2)
(73,7,2)
(93,7,2)
(103,109,2)
(57,82,2)
(68,73,2)
(109,10,2)
(84,33,2)
(118,109,2)
(94,53,2)
(101,82,2)
(23,7,2)
(72,7,2)
(47,99,2)
(114,7,2)
(67,95,2)
(73,109,2)
(74,99,2)
(32,7,2)
(24,70,2)
(124,68,2)
(107,7,2)
(76,68,2)
(22,126,2)
(24,68,2)
(118,7,2)
(82,121,2)
(38,105,2)
(55,7,2)
(38,36,2)
(118,126,2)
(91,95,2)
(117,100,2)
(96,7,2)
(85,72,2)
(17,7,2)
(22,109,2)
(104,95,2)
(108,59,2)
(118,70,2)
(94,55,2)
(111,72,2)
(34,5,2)
(11,109,2)
(9,11,2)
(52,108,2)
(0,68,2)
(46,109,2)
(119,7,2)
(77,100,2)
(99,84,2)
(25,7,2)
(37,7,2)
(1,84,2)
(7,99,2)
(53,95,2)
(20,95,2)
(33,109,2)
(75,7,2)
(35,107,2)
(50,95,2)
(125,109,2)
(108,10,2)
(64,16,2)
(68,7,2)
(70,34,2)
(70,126,2)
(95,7,2)
(40,7,2)
(122,10,2)
(27,118,2)
(110,7,2)
(39,123,2)
(7,103,2)
(123,126,2)
(78,82,2)
(64,47,2)
(4,82,2)
(121,112,2)
(52,10,2)
(52,69,2)
(30,100,2)
(82,7,2)
(46,84,2)
(125,126,2)
(34,68,2)
(70,68,2)
(64,48,2)
(112,27,2)
(92,112,2)
(11,70,2)
(9,82,2)
(89,7,2)
(11,126,2)
(80,82,2)
(123,7,2)
(11,82,2)
(77,55,2)
(64,1,2)
(26,95,2)
(39,7,2)
(105,7,2)
(36,95,2)
(68,119,2)
(123,109,2)
(42,82,2)
(64,94,2)
(97,109,2)
(82,112,2)
(3,99,2)
(8,10,2)
(31,7,2)
(54,107,2)
(109,126,2)
(97,126,2)
(45,7,2)
(48,86,2)
(35,27,2)
(56,10,2)
(6,68,2)
(46,126,2)
(19,95,2)
(10,10,2)
(109,109,2)
(77,53,2)
(95,72,2)
(34,126,2)
(35,9,2)
(49,100,2)
(97,10,2)
(16,9,2)
(44,84,2)
(125,95,2)
(99,46,2)
(53,104,2)
(106,68,2)
(33,126,2)
(61,95,2)
(55,39,2)
(34,109,2)
(10,52,2)
(16,107,2)
(86,7,2)
(108,97,2)
(12,7,2)
(60,107,2)
(24,126,2)
(48,107,2)
(13,84,2)
(116,82,2)
(103,99,2)
(27,7,2)
(127,99,2)
(38,100,2)
(112,7,2)
(104,125,2)
(73,126,2)
(79,112,2)
(63,84,2)
(100,7,2)
(51,107,2)
(103,126,2)
-----------------------------------
(0,file_name)
(1,return stdout;)
(2,if (!f && errno==EMFILE)
(3,\'|\')
(4,0)
(5,const char *suffixes)
(6,s)
(7,*s == \'|\')
(8,s)
(9,f = fopen(s, "w")
(10,isspace((int)
(11,fopen(s, "w")
(12,1)
(13,s)
(14,if (! strcmp(s, "$stdout")
(15,)
(16,return f;)
(17,W_OK)
(18,if (access(s, W_OK)
(19,0)
(20,mm_collect_now()
(21,)
(22,strcpyif(file_name, s)
(23,1)
(24,strcpy(file_name, s)
(25,s)
(26,f)
(27,*f = fopen(s, "w")
(28,)
(29,)
(30,f)
(31,0)
(32,f)
(33,strcmp(s, "$stdout")
(34,add_suffix(s, suffixes)
(35,FMODE_BINARY(f)
(36,errno = 0)
(37,"w")
(38,return NULL;)
(39,popen(s + 1, "w")
(40,s)
(41,if (! strcmp(s, "$stderr")
(42,s)
(43,while (isspace((int)
(44,stdout)
(45,errno)
(46,strcmp(s, "$stderr")
(47,return stderr;)
(48,return NULL;)
(49,NULL)
(50,"w")
(51,NULL)
(52,(int)
(53,f = popen(s + 1, "w")
(54,f)
(55,*f = popen(s + 1, "w")
(56,s)
(57,errno)
(58,"w")
(59,unsigned char)
(60,f)
(61,errno)
(62,if (f)
(63,"$stderr")
(64,RET)
(65,if (f)
(66,if (*s == \'|\')
(67,s)
(68,access(s, W_OK)
(69,int)
(70,s = add_suffix(s, suffixes)
(71,)
(72,!f)
(73,access(s, W_OK)
(74,s)
(75,0)
(76,s)
(77,FMODE_BINARY(f)
(78,f)
(79,errno)
(80,"w")
(81,if (!f && errno==EMFILE)
(82,!f && errno==EMFILE)
(83,f)
(84,! strcmp(s, "$stdout")
(85,errno)
(86,errno = 0)
(87,s)
(88,f)
(89,f)
(90,)
(91,1)
(92,EMFILE)
(93,s)
(94,return f;)
(95,!f && errno==EMFILE)
(96,errno)
(97,*s)
(98,"$stdout")
(99,! strcmp(s, "$stderr")
(100,f)
(101,mm_collect_now()
(102,errno==EMFILE)
(103,*s)
(104,popen(s + 1, "w")
(105,errno = 0)
(106,suffixes)
(107,f)
(108,(unsigned char)
(109,s += 1)
(110,f)
(111,EMFILE)
(112,!f)
(113,)
(114,f)
(115,s)
(116,errno = 0)
(117,f)
(118,fopen(s, "w")
(119,-1)
(120,file_name)
(121,errno==EMFILE)
(122,1)
(123,s + 1)
(124,s)
(125,s + 1)
(126,const char *s)
(127,stderr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^