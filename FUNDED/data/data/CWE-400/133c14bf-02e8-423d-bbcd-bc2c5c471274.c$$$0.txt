-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,44,46,48,53,54,57,61,62,64,67,72,73
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(6,12,0)
(25,12,0)
(37,15,0)
(28,22,0)
(26,35,0)
(1,24,0)
(14,22,0)
(26,1,0)
(38,21,0)
(30,21,0)
(32,2,0)
(39,15,0)
(21,38,0)
(36,26,0)
(11,3,0)
(35,26,0)
(26,36,0)
(13,36,0)
(18,11,0)
(5,22,0)
(0,38,0)
(26,21,0)
(31,26,0)
(8,15,0)
(10,9,0)
(41,39,0)
(9,23,0)
(15,19,0)
(17,27,0)
(7,2,0)
(36,22,0)
(4,5,0)
(34,27,0)
(20,1,0)
(40,39,0)
(29,1,0)
(33,12,0)
(21,12,0)
(9,10,1)
(40,2,1)
(29,20,1)
(36,22,1)
(41,40,1)
(14,28,1)
(13,22,1)
(32,1,1)
(39,41,1)
(4,9,1)
(28,39,1)
(26,35,1)
(2,7,1)
(11,18,1)
(17,21,1)
(21,38,1)
(16,36,1)
(18,27,1)
(26,1,1)
(5,4,1)
(31,13,1)
(22,14,1)
(7,32,1)
(0,30,1)
(27,34,1)
(10,36,1)
(38,0,1)
(34,17,1)
(20,27,1)
(32,11,1)
(1,29,1)
(5,22,1)
(36,26,1)
(26,21,1)
(26,31,1)
(16,2,1)
(13,5,1)
(26,35,2)
(5,22,2)
(36,36,2)
(20,27,2)
(13,36,2)
(31,2,2)
(39,2,2)
(28,2,2)
(21,38,2)
(13,2,2)
(40,2,2)
(26,36,2)
(18,27,2)
(22,2,2)
(31,36,2)
(26,2,2)
(36,26,2)
(26,1,2)
(5,36,2)
(41,2,2)
(36,22,2)
(10,36,2)
(4,36,2)
(14,2,2)
(9,36,2)
(11,27,2)
(29,27,2)
(26,21,2)
(36,2,2)
(1,27,2)
-----------------------------------
(0,1)
(1,count = 20)
(2,GLOBAL_CONST_FIVE==5)
(3,)
(4,i)
(5,i++)
(6,count)
(7,5)
(8,for (i = 0; i < (size_t)
(9,printLine("Hello")
(10,"Hello")
(11,printLine("Benign, fixed string")
(12,)
(13,i)
(14,0)
(15,)
(16,RET)
(17,GLOBAL_CONST_FIVE)
(18,"Benign, fixed string")
(19,)
(20,count)
(21,count = -1)
(22,i = 0)
(23,)
(24,)
(25,if(GLOBAL_CONST_FIVE!=5)
(26,(size_t)
(27,GLOBAL_CONST_FIVE!=5)
(28,i)
(29,20)
(30,count)
(31,count)
(32,GLOBAL_CONST_FIVE)
(33,if(GLOBAL_CONST_FIVE==5)
(34,5)
(35,size_t)
(36,i < (size_t)
(37,i)
(38,-1)
(39,i = 0)
(40,i)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^