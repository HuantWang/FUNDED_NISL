-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
33,36
34,35
34,36
35,36
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
47,48
47,49
48,49
50,51
50,52
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
71,72
71,73
72,73
74,75
74,76
75,76
75,77
76,77
79,80
81,82
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,42,43,49,51,53,58,59,62,63,69,70,73,77,78,80,83,88,89
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
55,56
55,57
56,57
56,58
60,61
60,62
67,68
67,69
71,72
71,73
-----guardedBy-----
62,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,15,0)
(41,44,0)
(32,36,0)
(35,49,0)
(44,46,0)
(45,33,0)
(20,18,0)
(29,46,0)
(34,25,0)
(4,36,0)
(22,39,0)
(21,46,0)
(52,5,0)
(42,3,0)
(41,23,0)
(10,3,0)
(28,9,0)
(26,23,0)
(47,31,0)
(23,24,0)
(26,5,0)
(45,23,0)
(13,26,0)
(23,17,0)
(27,23,0)
(24,23,0)
(44,41,0)
(8,33,0)
(46,44,0)
(46,23,0)
(5,26,0)
(1,24,0)
(49,9,0)
(15,36,0)
(51,17,0)
(16,39,0)
(2,26,0)
(5,36,0)
(43,41,0)
(9,19,0)
(30,9,0)
(25,50,0)
(6,49,0)
(18,38,0)
(11,33,0)
(26,2,0)
(37,45,0)
(33,48,0)
(40,17,0)
(7,41,0)
(33,45,0)
(12,17,0)
(3,42,1)
(43,46,1)
(46,23,1)
(4,32,1)
(10,39,1)
(39,22,1)
(26,23,1)
(52,36,1)
(10,33,1)
(42,10,1)
(45,23,1)
(49,35,1)
(11,8,1)
(0,5,1)
(41,23,1)
(24,1,1)
(32,44,1)
(16,23,1)
(25,34,1)
(20,5,1)
(33,45,1)
(0,44,1)
(14,18,1)
(29,49,1)
(34,3,1)
(5,36,1)
(41,7,1)
(26,2,1)
(13,52,1)
(46,21,1)
(7,43,1)
(22,16,1)
(18,20,1)
(35,6,1)
(26,13,1)
(23,24,1)
(52,15,1)
(15,14,1)
(44,41,1)
(6,3,1)
(44,46,1)
(1,27,1)
(37,11,1)
(15,36,1)
(8,39,1)
(21,29,1)
(5,26,1)
(45,37,1)
(0,25,1)
(36,4,1)
(49,3,2)
(15,5,2)
(44,46,2)
(26,2,2)
(29,3,2)
(25,3,2)
(46,3,2)
(5,5,2)
(34,3,2)
(44,3,2)
(45,39,2)
(20,5,2)
(37,39,2)
(41,46,2)
(45,23,2)
(26,5,2)
(43,46,2)
(21,3,2)
(7,46,2)
(26,23,2)
(33,45,2)
(14,5,2)
(44,41,2)
(5,36,2)
(18,5,2)
(8,39,2)
(33,39,2)
(15,36,2)
(36,44,2)
(23,24,2)
(41,23,2)
(46,23,2)
(52,5,2)
(5,26,2)
(32,44,2)
(13,44,2)
(11,39,2)
(13,5,2)
(26,44,2)
(52,44,2)
(6,3,2)
(35,3,2)
(5,44,2)
(4,44,2)
-----------------------------------
(0,RET)
(1,1)
(2,size_t)
(3,staticFive!=5)
(4,0)
(5,i < (size_t)
(6,i)
(7,20)
(8,stdin)
(9,)
(10,staticFive)
(11,"%d")
(12,if(staticFive!=5)
(13,count)
(14,i)
(15,i++)
(16,staticFive)
(17,)
(18,printLine("Hello")
(19,)
(20,"Hello")
(21,0)
(22,5)
(23,count = -1)
(24,-1)
(25,printLine("Benign, fixed string")
(26,(size_t)
(27,count)
(28,i)
(29,count)
(30,if (count > 0 && count <= 20)
(31,)
(32,i)
(33,fscanf(stdin, "%d", &count)
(34,"Benign, fixed string")
(35,0)
(36,i = 0)
(37,count)
(38,)
(39,staticFive==5)
(40,count)
(41,count <= 20)
(42,5)
(43,count)
(44,count > 0 && count <= 20)
(45,&count)
(46,count > 0)
(47,for (i = 0; i < (size_t)
(48,)
(49,i = 0)
(50,)
(51,if(staticFive==5)
(52,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^