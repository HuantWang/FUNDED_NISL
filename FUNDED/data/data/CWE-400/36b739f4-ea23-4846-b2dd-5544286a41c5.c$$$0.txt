-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_08_bad()
CWE401_Memory_Leak__int_malloc_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(11,12,0)
(4,34,0)
(22,2,0)
(5,22,0)
(31,16,0)
(21,25,0)
(22,5,0)
(18,31,0)
(23,28,0)
(7,31,0)
(16,34,0)
(25,36,0)
(19,16,0)
(9,16,0)
(14,8,0)
(12,11,0)
(2,22,0)
(8,2,0)
(20,36,0)
(24,31,0)
(3,36,0)
(17,11,0)
(29,9,0)
(9,33,0)
(30,28,0)
(27,36,0)
(13,14,0)
(16,22,0)
(31,18,0)
(2,8,0)
(22,16,0)
(8,14,0)
(26,25,0)
(18,34,0)
(35,33,0)
(12,6,0)
(0,9,0)
(33,34,0)
(28,16,0)
(1,8,0)
(31,33,0)
(19,32,1)
(28,23,1)
(9,16,1)
(14,13,1)
(9,0,1)
(2,8,1)
(35,9,1)
(31,7,1)
(33,35,1)
(29,12,1)
(25,26,1)
(0,29,1)
(17,28,1)
(31,33,1)
(26,21,1)
(16,22,1)
(7,24,1)
(24,33,1)
(31,16,1)
(22,2,1)
(30,16,1)
(28,16,1)
(11,17,1)
(18,31,1)
(10,15,1)
(29,28,1)
(13,1,1)
(23,30,1)
(32,25,1)
(8,14,1)
(12,11,1)
(1,19,1)
(15,32,1)
(15,18,1)
(22,5,1)
(12,28,2)
(16,32,2)
(31,32,2)
(9,16,2)
(33,32,2)
(2,32,2)
(19,32,2)
(28,16,2)
(18,31,2)
(17,28,2)
(22,5,2)
(1,32,2)
(0,32,2)
(2,8,2)
(22,2,2)
(8,14,2)
(7,32,2)
(8,32,2)
(14,32,2)
(31,33,2)
(35,32,2)
(30,32,2)
(11,28,2)
(12,11,2)
(29,32,2)
(23,32,2)
(9,32,2)
(22,32,2)
(31,16,2)
(24,32,2)
(28,32,2)
(16,22,2)
(18,32,2)
(13,32,2)
-----------------------------------
(0,0)
(1,100)
(2,malloc(100*sizeof(int)
(3,if(staticReturnsTrue()
(4,if (data == NULL)
(5,int *)
(6,)
(7,0)
(8,100*sizeof(int)
(9,data[0])
(10,RET)
(11,-1)
(12,exit(-1)
(13,int)
(14,sizeof(int)
(15,staticReturnsTrue()
(16,data = (int *)
(17,1)
(18,printIntLine(data[0])
(19,data)
(20,data)
(21,data)
(22,(int *)
(23,NULL)
(24,data)
(25,data = NULL)
(26,NULL)
(27,if(staticReturnsTrue()
(28,data == NULL)
(29,data)
(30,data)
(31,data[0])
(32,staticReturnsTrue()
(33,data[0] = 5)
(34,)
(35,5)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^