-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalFive==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalFive==5)    {        /* FIX: Deallocate memory */        free(data);    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(19,33,0)
(9,34,0)
(2,33,0)
(27,24,0)
(36,19,0)
(6,24,0)
(31,17,0)
(20,33,0)
(33,29,0)
(14,17,0)
(7,13,0)
(11,13,0)
(5,1,0)
(14,15,0)
(4,34,0)
(13,7,0)
(21,10,0)
(18,29,0)
(3,29,0)
(28,7,0)
(15,17,0)
(27,22,0)
(5,7,0)
(10,15,0)
(12,35,0)
(19,26,0)
(8,15,0)
(5,15,0)
(24,27,0)
(1,5,0)
(16,10,0)
(15,5,0)
(30,14,0)
(7,5,0)
(19,15,0)
(23,35,0)
(32,29,0)
(36,34,1)
(19,15,1)
(19,36,1)
(4,9,1)
(14,15,1)
(24,6,1)
(8,35,1)
(19,33,1)
(35,12,1)
(30,27,1)
(10,15,1)
(12,23,1)
(5,1,1)
(27,24,1)
(9,35,1)
(34,4,1)
(11,28,1)
(21,15,1)
(14,30,1)
(16,21,1)
(9,14,1)
(25,34,1)
(6,10,1)
(25,19,1)
(33,20,1)
(15,5,1)
(13,11,1)
(23,33,1)
(28,8,1)
(30,10,1)
(20,2,1)
(5,7,1)
(7,13,1)
(10,16,1)
(28,35,2)
(7,13,2)
(21,35,2)
(24,10,2)
(11,35,2)
(5,35,2)
(19,34,2)
(15,5,2)
(14,15,2)
(19,33,2)
(13,35,2)
(36,34,2)
(14,35,2)
(7,35,2)
(16,35,2)
(8,35,2)
(6,10,2)
(15,35,2)
(19,15,2)
(30,35,2)
(10,35,2)
(27,24,2)
(5,1,2)
(10,15,2)
(27,10,2)
(5,7,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,wchar_t *)
(2,data)
(3,if(globalFive==5)
(4,5)
(5,(wchar_t *)
(6,1)
(7,calloc(100, sizeof(wchar_t)
(8,data)
(9,globalFive)
(10,data == NULL)
(11,wchar_t)
(12,5)
(13,sizeof(wchar_t)
(14,printWLine(data)
(15,data = (wchar_t *)
(16,NULL)
(17,)
(18,data)
(19,free(data)
(20,NULL)
(21,data)
(22,)
(23,globalFive)
(24,-1)
(25,RET)
(26,)
(27,exit(-1)
(28,100)
(29,)
(30,data)
(31,if (data == NULL)
(32,if(globalFive==5)
(33,data = NULL)
(34,globalFive==5)
(35,globalFive==5)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^