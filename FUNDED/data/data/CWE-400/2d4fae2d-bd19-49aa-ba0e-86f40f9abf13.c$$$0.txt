-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(1)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
71,72
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,58,59,60,64,67,68,70,75,77
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(1)    {        /* FIX: Deallocate memory */        free(data);    }
1
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(36,15,0)
(26,27,0)
(14,25,0)
(24,36,0)
(21,36,0)
(31,25,0)
(17,27,0)
(27,18,0)
(40,15,0)
(25,28,0)
(1,27,0)
(25,36,0)
(32,22,0)
(7,22,0)
(38,15,0)
(19,5,0)
(30,23,0)
(8,36,0)
(6,5,0)
(5,18,0)
(22,7,0)
(5,35,0)
(35,23,0)
(13,18,0)
(3,13,0)
(14,29,0)
(39,28,0)
(1,23,0)
(34,28,0)
(7,4,0)
(18,14,0)
(2,18,0)
(0,15,0)
(27,35,0)
(28,25,0)
(24,18,0)
(14,18,0)
(28,34,0)
(24,37,0)
(18,23,0)
(33,35,0)
(29,14,0)
(16,34,0)
(12,13,0)
(9,24,0)
(25,14,0)
(27,1,0)
(27,18,1)
(26,35,1)
(21,8,1)
(6,13,1)
(31,2,1)
(2,11,1)
(20,11,1)
(1,27,1)
(35,33,1)
(32,13,1)
(24,18,1)
(10,24,1)
(27,17,1)
(5,18,1)
(28,34,1)
(34,16,1)
(18,14,1)
(36,21,1)
(14,29,1)
(9,20,1)
(20,1,1)
(39,31,1)
(6,7,1)
(16,39,1)
(12,18,1)
(17,26,1)
(24,9,1)
(13,3,1)
(11,36,1)
(10,20,1)
(19,6,1)
(7,22,1)
(25,36,1)
(13,18,1)
(25,28,1)
(5,19,1)
(27,35,1)
(3,12,1)
(22,32,1)
(14,25,1)
(24,36,1)
(33,5,1)
(27,35,2)
(9,20,2)
(18,11,2)
(19,11,2)
(31,11,2)
(5,18,2)
(24,18,2)
(13,18,2)
(12,11,2)
(24,36,2)
(34,11,2)
(25,28,2)
(7,22,2)
(14,11,2)
(2,11,2)
(26,11,2)
(22,13,2)
(3,11,2)
(24,20,2)
(14,25,2)
(5,11,2)
(1,27,2)
(14,29,2)
(1,11,2)
(7,13,2)
(25,36,2)
(27,11,2)
(28,34,2)
(35,11,2)
(16,11,2)
(17,11,2)
(28,11,2)
(32,13,2)
(39,11,2)
(25,11,2)
(27,18,2)
(18,14,2)
(6,11,2)
(13,11,2)
(33,11,2)
-----------------------------------
(0,if(1)
(1,printIntLine(data[0])
(2,data)
(3,NULL)
(4,)
(5,data[0])
(6,data)
(7,exit(-1)
(8,data)
(9,data)
(10,RET)
(11,1)
(12,data)
(13,data == NULL)
(14,(int *)
(15,)
(16,int)
(17,0)
(18,data = (int *)
(19,0)
(20,1)
(21,NULL)
(22,-1)
(23,)
(24,free(data)
(25,realloc(data, 100*sizeof(int)
(26,data)
(27,data[0])
(28,100*sizeof(int)
(29,int *)
(30,if (data == NULL)
(31,data)
(32,1)
(33,5)
(34,sizeof(int)
(35,data[0] = 5)
(36,data = NULL)
(37,)
(38,if(1)
(39,100)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^