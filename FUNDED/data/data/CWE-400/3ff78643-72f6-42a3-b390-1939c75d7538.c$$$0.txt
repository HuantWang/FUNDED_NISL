-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_16_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
63,64
63,65
63,66
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,62,67,69,73,74,75
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_16_bad(){    int count;    /* Initialize count */    count = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_16_bad()
CWE400_Resource_Exhaustion__fgets_sleep_16_bad
{    int count;    /* Initialize count */    count = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }
1
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
-----joern-----
(5,11,0)
(29,26,0)
(26,14,0)
(14,10,0)
(32,10,0)
(21,0,0)
(31,11,0)
(34,31,0)
(7,31,0)
(37,15,0)
(30,2,0)
(24,31,0)
(2,14,0)
(31,24,0)
(35,11,0)
(36,12,0)
(1,14,0)
(35,36,0)
(8,4,0)
(15,0,0)
(13,35,0)
(16,11,0)
(17,33,0)
(22,17,0)
(36,35,0)
(18,10,0)
(19,10,0)
(6,8,0)
(9,8,0)
(26,0,0)
(38,24,0)
(26,36,0)
(27,36,0)
(3,4,0)
(14,2,0)
(11,8,0)
(25,31,0)
(20,28,1)
(28,3,1)
(34,7,1)
(31,11,1)
(21,15,1)
(37,26,1)
(20,21,1)
(31,34,1)
(5,16,1)
(17,22,1)
(16,23,1)
(27,24,1)
(26,36,1)
(35,13,1)
(13,27,1)
(24,31,1)
(23,14,1)
(26,29,1)
(30,1,1)
(35,11,1)
(38,31,1)
(7,25,1)
(25,11,1)
(29,28,1)
(11,5,1)
(26,14,1)
(36,35,1)
(28,23,1)
(22,24,1)
(15,37,1)
(3,17,1)
(24,38,1)
(14,2,1)
(3,36,1)
(2,30,1)
(36,24,2)
(36,35,2)
(29,28,2)
(11,23,2)
(3,23,2)
(14,2,2)
(26,36,2)
(5,23,2)
(16,23,2)
(35,11,2)
(34,23,2)
(26,14,2)
(31,11,2)
(24,31,2)
(21,28,2)
(13,24,2)
(7,23,2)
(22,24,2)
(35,24,2)
(38,23,2)
(26,28,2)
(15,28,2)
(24,23,2)
(31,23,2)
(27,24,2)
(17,24,2)
(37,28,2)
(25,23,2)
-----------------------------------
(0,)
(1,count)
(2,-1)
(3,break;)
(4,)
(5,"")
(6,inputBuffer)
(7,CHAR_ARRAY_SIZE)
(8,)
(9,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,)
(13,inputBuffer)
(14,count = -1)
(15,printLine("Sleep time possibly too long")
(16,inputBuffer)
(17,printLine("fgets()
(18,count)
(19,while(1)
(20,RET)
(21,break;)
(22,"fgets()
(23,1)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,inputBuffer)
(26,SLEEP(count)
(27,count)
(28,1)
(29,count)
(30,1)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,while(1)
(33,)
(34,stdin)
(35,atoi(inputBuffer)
(36,count = atoi(inputBuffer)
(37,"Sleep time possibly too long")
(38,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^