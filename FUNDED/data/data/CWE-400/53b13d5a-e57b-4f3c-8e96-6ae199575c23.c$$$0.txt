-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_02_bad()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
71,72
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,58,59,60,64,67,68,70,72
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_02_bad(){    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_02_bad()
CWE401_Memory_Leak__int_realloc_02_bad
{    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,22,0)
(35,9,0)
(19,9,0)
(1,9,0)
(35,25,0)
(9,22,0)
(17,22,0)
(16,22,0)
(34,29,0)
(37,28,0)
(27,6,0)
(17,6,0)
(26,34,0)
(5,6,0)
(6,17,0)
(15,29,0)
(7,1,0)
(35,14,0)
(14,35,0)
(13,11,0)
(2,10,0)
(14,34,0)
(14,37,0)
(12,28,0)
(21,19,0)
(6,10,0)
(25,35,0)
(0,37,0)
(28,37,0)
(24,14,0)
(3,36,0)
(4,34,0)
(8,1,0)
(11,3,0)
(23,19,0)
(6,9,0)
(9,35,0)
(37,14,0)
(19,10,0)
(33,9,0)
(3,11,0)
(30,29,0)
(20,29,0)
(23,1,1)
(6,9,1)
(35,14,1)
(35,25,1)
(23,3,1)
(13,1,1)
(24,33,1)
(1,7,1)
(12,0,1)
(2,19,1)
(37,28,1)
(6,5,1)
(21,23,1)
(6,10,1)
(7,8,1)
(31,17,1)
(17,6,1)
(14,37,1)
(28,12,1)
(5,27,1)
(14,34,1)
(11,13,1)
(1,9,1)
(19,9,1)
(27,10,1)
(9,35,1)
(8,9,1)
(31,32,1)
(19,21,1)
(4,26,1)
(10,2,1)
(33,32,1)
(3,11,1)
(32,34,1)
(18,31,1)
(0,24,1)
(34,4,1)
(7,32,2)
(12,32,2)
(11,1,2)
(23,32,2)
(17,32,2)
(6,9,2)
(14,37,2)
(3,11,2)
(2,32,2)
(10,32,2)
(14,34,2)
(13,1,2)
(37,32,2)
(19,32,2)
(3,1,2)
(37,28,2)
(1,32,2)
(21,32,2)
(28,32,2)
(0,32,2)
(35,25,2)
(27,32,2)
(35,32,2)
(19,9,2)
(9,35,2)
(1,9,2)
(6,10,2)
(8,32,2)
(35,14,2)
(5,32,2)
(6,32,2)
(14,32,2)
(24,32,2)
(33,32,2)
(17,6,2)
(9,32,2)
-----------------------------------
(0,100)
(1,data == NULL)
(2,5)
(3,exit(-1)
(4,NULL)
(5,0)
(6,data[0])
(7,NULL)
(8,data)
(9,data = (int *)
(10,data[0] = 5)
(11,-1)
(12,int)
(13,1)
(14,realloc(data, 100*sizeof(int)
(15,if(1)
(16,if (data == NULL)
(17,printIntLine(data[0])
(18,RET)
(19,data[0])
(20,if(1)
(21,0)
(22,)
(23,data)
(24,data)
(25,int *)
(26,data)
(27,data)
(28,sizeof(int)
(29,)
(30,data)
(31,1)
(32,1)
(33,data)
(34,data = NULL)
(35,(int *)
(36,)
(37,100*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^