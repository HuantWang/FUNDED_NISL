-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
60,61
61,62
62,63
62,64
63,64
66,67
67,68
67,69
68,69
68,70
69,70
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
83,84
86,87
86,88
87,88
88,89
88,90
90,91
90,92
93,94
93,95
93,96
94,95
94,96
95,96
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
102,107
103,104
104,105
104,106
105,106
107,108
107,109
108,109
108,110
110,111
112,113
112,114
113,114
115,116
115,117
116,117
118,119
119,120
119,121
122,123
122,124
123,124
123,125
124,125
126,127
128,129
129,130
130,131
130,132
131,132
133,134
135,136
136,137
136,138
136,139
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
149,150
150,151
150,152
151,152
153,154
155,156
156,157
157,158
157,159
158,159
-----nextToken-----
2,4,9,11,15,17,21,22,26,28,31,33,38,40,42,44,46,51,54,56,58,59,64,65,70,71,73,78,80,84,85,89,91,92,96,99,101,106,109,111,114,117,120,121,125,127,132,134,138,140,142,146,148,152,154,159,160
-----computeFrom-----
19,20
19,21
35,36
35,37
49,50
49,51
67,68
67,69
94,95
94,96
104,105
104,106
115,116
115,117
123,124
123,125
-----guardedBy-----
40,56
46,58
101,142
96,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(47,57,0)
(15,48,0)
(29,14,0)
(9,67,0)
(57,52,0)
(48,31,0)
(50,42,0)
(6,17,0)
(5,28,0)
(3,50,0)
(17,4,0)
(31,48,0)
(53,67,0)
(45,53,0)
(75,43,0)
(68,7,0)
(19,56,0)
(43,68,0)
(34,62,0)
(11,10,0)
(46,37,0)
(54,27,0)
(14,65,0)
(64,17,0)
(0,68,0)
(71,4,0)
(10,58,0)
(24,33,0)
(65,14,0)
(36,5,0)
(39,53,0)
(1,28,0)
(51,67,0)
(40,67,0)
(73,31,0)
(69,51,0)
(44,27,0)
(58,28,0)
(30,31,0)
(68,13,0)
(65,63,0)
(21,56,0)
(60,13,0)
(44,33,0)
(55,9,0)
(27,61,0)
(26,62,0)
(41,44,0)
(9,35,0)
(40,35,0)
(60,67,0)
(25,60,0)
(72,33,0)
(20,37,0)
(60,25,0)
(37,46,0)
(67,60,0)
(59,58,0)
(13,60,0)
(2,28,0)
(31,33,0)
(7,58,0)
(49,44,0)
(68,43,0)
(18,7,0)
(27,44,0)
(66,10,0)
(38,35,0)
(53,35,0)
(33,56,0)
(62,7,0)
(16,46,0)
(12,31,0)
(70,51,0)
(56,28,0)
(67,35,0)
(13,68,0)
(22,44,0)
(8,67,0)
(4,27,0)
(4,28,0)
(37,7,0)
(32,40,0)
(4,5,0)
(74,5,0)
(7,62,0)
(73,30,1)
(27,44,1)
(22,54,1)
(53,39,1)
(8,37,1)
(54,48,1)
(40,67,1)
(68,43,1)
(60,25,1)
(17,64,1)
(70,67,1)
(69,70,1)
(4,5,1)
(40,32,1)
(44,33,1)
(55,40,1)
(5,36,1)
(26,34,1)
(67,60,1)
(6,27,1)
(13,68,1)
(51,67,1)
(24,72,1)
(50,3,1)
(57,47,1)
(23,57,1)
(48,31,1)
(31,33,1)
(12,73,1)
(34,18,1)
(71,17,1)
(0,8,1)
(46,16,1)
(31,12,1)
(37,46,1)
(37,7,1)
(43,75,1)
(32,53,1)
(41,22,1)
(30,33,1)
(14,29,1)
(44,49,1)
(53,67,1)
(64,6,1)
(4,27,1)
(62,26,1)
(20,7,1)
(9,67,1)
(48,15,1)
(47,37,1)
(68,7,1)
(36,74,1)
(29,51,1)
(75,0,1)
(72,5,1)
(60,13,1)
(3,48,1)
(18,4,1)
(9,55,1)
(45,51,1)
(16,20,1)
(65,14,1)
(7,62,1)
(33,24,1)
(45,65,1)
(23,9,1)
(49,41,1)
(6,50,1)
(51,69,1)
(15,31,1)
(39,45,1)
(4,71,1)
(68,43,2)
(27,44,2)
(57,37,2)
(40,37,2)
(54,48,2)
(67,37,2)
(68,37,2)
(51,37,2)
(53,37,2)
(14,51,2)
(13,68,2)
(53,67,2)
(9,37,2)
(60,13,2)
(31,33,2)
(4,27,2)
(75,37,2)
(45,37,2)
(68,7,2)
(65,51,2)
(43,37,2)
(22,48,2)
(70,37,2)
(51,67,2)
(27,48,2)
(13,37,2)
(7,62,2)
(37,46,2)
(39,37,2)
(69,37,2)
(9,67,2)
(50,48,2)
(3,48,2)
(55,37,2)
(65,14,2)
(48,31,2)
(44,48,2)
(67,60,2)
(60,37,2)
(44,33,2)
(60,25,2)
(37,7,2)
(32,37,2)
(40,67,2)
(4,5,2)
(41,48,2)
(29,51,2)
(8,37,2)
(49,48,2)
(47,37,2)
(0,37,2)
-----------------------------------
(0,data)
(1,data)
(2,myUnion)
(3,"fgets()
(4,myUnion.unionFirst = data)
(5,data = 0)
(6,myUnion)
(7,data = myUnion.unionSecond)
(8,myString)
(9,free(myString)
(10,)
(11,myString)
(12,stdin)
(13,malloc(data*sizeof(char)
(14,-1)
(15,NULL)
(16,HELLO_STRING)
(17,myUnion.unionFirst)
(18,data)
(19,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,data)
(21,inputBuffer)
(22,inputBuffer)
(23,RET)
(24,"")
(25,char *)
(26,unionSecond)
(27,data = strtoul(inputBuffer, NULL, 0)
(28,)
(29,1)
(30,inputBuffer)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,myString)
(33,inputBuffer[CHAR_ARRAY_SIZE] = "")
(34,myUnion)
(35,)
(36,0)
(37,data > strlen(HELLO_STRING)
(38,if (myString == NULL)
(39,HELLO_STRING)
(40,printLine(myString)
(41,NULL)
(42,)
(43,sizeof(char)
(44,strtoul(inputBuffer, NULL, 0)
(45,myString)
(46,strlen(HELLO_STRING)
(47,"Input is less than the length of the source string")
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,0)
(50,printLine("fgets()
(51,myString == NULL)
(52,)
(53,strcpy(myString, HELLO_STRING)
(54,data)
(55,myString)
(56,)
(57,printLine("Input is less than the length of the source string")
(58,)
(59,data)
(60,(char *)
(61,)
(62,myUnion.unionSecond)
(63,)
(64,unionFirst)
(65,exit(-1)
(66,if (data > strlen(HELLO_STRING)
(67,myString = (char *)
(68,data*sizeof(char)
(69,NULL)
(70,myString)
(71,data)
(72,inputBuffer)
(73,CHAR_ARRAY_SIZE)
(74,data)
(75,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^