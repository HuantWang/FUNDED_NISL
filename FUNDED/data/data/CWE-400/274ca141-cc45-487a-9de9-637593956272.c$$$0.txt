-----label-----
0
-----code-----
static void goodB2G()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    else
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
76,79
77,78
80,81
81,82
81,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
99,100
101,102
104,105
105,106
105,107
106,107
108,109
110,111
110,112
110,113
111,112
112,113
114,115
115,116
116,117
116,118
117,118
119,120
121,122
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,70,73,75,78,79,82,83,87,89,94,96,100,102,103,107,109,113,118,120,125,127
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
68,69
68,70
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,39,0)
(39,11,0)
(50,28,0)
(41,50,0)
(58,28,0)
(47,21,0)
(43,49,0)
(39,7,0)
(42,8,0)
(60,52,0)
(51,23,0)
(13,24,0)
(12,4,0)
(38,8,0)
(10,27,0)
(25,58,0)
(23,59,0)
(14,49,0)
(12,22,0)
(20,37,0)
(45,0,0)
(28,59,0)
(16,27,0)
(4,29,0)
(56,55,0)
(1,58,0)
(60,21,0)
(55,56,0)
(5,7,0)
(49,21,0)
(46,60,0)
(48,8,0)
(29,4,0)
(19,22,0)
(47,40,0)
(24,36,0)
(26,28,0)
(24,13,0)
(21,52,0)
(2,12,0)
(50,53,0)
(17,59,0)
(4,21,0)
(44,54,0)
(3,34,0)
(56,0,0)
(4,12,0)
(49,52,0)
(33,34,0)
(37,0,0)
(22,12,0)
(18,54,0)
(32,52,0)
(50,21,0)
(54,59,0)
(6,21,0)
(28,56,0)
(0,37,0)
(0,56,0)
(47,28,0)
(21,4,0)
(9,13,0)
(34,8,0)
(56,28,0)
(54,28,0)
(23,28,0)
(27,21,0)
(15,47,0)
(43,39,1)
(19,2,1)
(13,9,1)
(18,24,1)
(5,27,1)
(31,47,1)
(56,55,1)
(22,19,1)
(30,23,1)
(54,28,1)
(49,14,1)
(0,37,1)
(3,33,1)
(30,60,1)
(47,21,1)
(12,22,1)
(58,28,1)
(45,26,1)
(16,21,1)
(46,49,1)
(18,58,1)
(31,50,1)
(15,30,1)
(26,57,1)
(44,18,1)
(56,0,1)
(4,12,1)
(9,58,1)
(24,13,1)
(23,51,1)
(23,28,1)
(41,30,1)
(27,21,1)
(50,21,1)
(7,5,1)
(39,7,1)
(28,56,1)
(47,28,1)
(2,6,1)
(51,54,1)
(20,45,1)
(60,21,1)
(34,3,1)
(60,46,1)
(57,34,1)
(27,10,1)
(6,57,1)
(21,4,1)
(4,29,1)
(54,44,1)
(58,1,1)
(47,15,1)
(49,21,1)
(43,27,1)
(10,16,1)
(1,25,1)
(25,28,1)
(14,43,1)
(50,41,1)
(37,20,1)
(50,28,1)
(28,56,2)
(7,27,2)
(56,55,2)
(0,37,2)
(13,58,2)
(54,28,2)
(4,29,2)
(4,12,2)
(15,30,2)
(20,57,2)
(24,13,2)
(19,57,2)
(60,57,2)
(49,57,2)
(26,57,2)
(44,57,2)
(1,57,2)
(18,57,2)
(58,28,2)
(51,57,2)
(22,57,2)
(5,27,2)
(47,28,2)
(58,57,2)
(50,28,2)
(50,30,2)
(27,57,2)
(16,57,2)
(49,21,2)
(60,21,2)
(9,58,2)
(21,4,2)
(27,21,2)
(6,57,2)
(50,21,2)
(45,57,2)
(39,7,2)
(2,57,2)
(14,57,2)
(56,0,2)
(12,22,2)
(23,28,2)
(47,21,2)
(4,57,2)
(39,27,2)
(54,57,2)
(21,57,2)
(43,57,2)
(23,57,2)
(0,57,2)
(41,30,2)
(46,57,2)
(25,57,2)
(56,57,2)
(24,58,2)
(28,57,2)
(12,57,2)
(37,57,2)
(47,30,2)
(10,57,2)
-----------------------------------
(0,calloc(100, sizeof(char)
(1,NULL)
(2,100)
(3,NULL)
(4,(char *)
(5,1)
(6,data)
(7,-1)
(8,)
(9,1)
(10,NULL)
(11,)
(12,calloc(100, sizeof(char)
(13,-1)
(14,"A String")
(15,data)
(16,data)
(17,if (data == NULL)
(18,data)
(19,char)
(20,char)
(21,data = (char *)
(22,sizeof(char)
(23,printLine(data)
(24,exit(-1)
(25,data)
(26,data)
(27,data == NULL)
(28,data = (char *)
(29,char *)
(30,globalReturnsTrueOrFalse()
(31,RET)
(32,if (data == NULL)
(33,data)
(34,data = NULL)
(35, sizeof(char)
(36,)
(37,sizeof(char)
(38,data)
(39,exit(-1)
(40,)
(41,data)
(42,if(globalReturnsTrueOrFalse()
(43,data)
(44,"A String")
(45,100)
(46,data)
(47,free(data)
(48,if(globalReturnsTrueOrFalse()
(49,strcpy(data, "A String")
(50,free(data)
(51,data)
(52,)
(53,)
(54,strcpy(data, "A String")
(55,char *)
(56,(char *)
(57,globalReturnsTrueOrFalse()
(58,data == NULL)
(59,)
(60,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^