-----label-----
0
-----code-----
static int driver_send_unicast(Peer *receiver, MatchFilter *filter, Message *message) {
        int r;

        /* for eavesdropping */
        r = bus_broadcast(receiver->bus, NULL, filter, message);
        if (r)
                return error_trace(r);

        r = connection_queue(&receiver->connection, 0, message);
        if (r)
                return error_fold(r);

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
33,37
33,38
34,35
36,37
36,38
37,38
40,41
42,43
44,45
46,47
46,48
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
59,62
59,63
60,61
62,63
63,64
63,65
64,65
68,69
70,71
70,72
71,72
73,74
74,75
74,76
75,76
77,78
79,80
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,26,28,32,35,38,39,41,43,45,48,52,54,58,61,65,66,67,69,72,76,78,80
-----computeFrom-----
30,31
30,32
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_send_unicast(Peer *receiver, MatchFilter *filter, Message *message) {        int r;        /* for eavesdropping */        r = bus_broadcast(receiver->bus, NULL, filter, message);        if (r)                return error_trace(r);        r = connection_queue(&receiver->connection, 0, message);        if (r)                return error_fold(r);        return 0;}
static int
driver_send_unicast(Peer *receiver, MatchFilter *filter, Message *message)
driver_send_unicast
Peer *receiver
Peer
Peer
*receiver
*
receiver
MatchFilter *filter
MatchFilter
MatchFilter
*filter
*
filter
Message *message
Message
Message
*message
*
message
{        int r;        /* for eavesdropping */        r = bus_broadcast(receiver->bus, NULL, filter, message);        if (r)                return error_trace(r);        r = connection_queue(&receiver->connection, 0, message);        if (r)                return error_fold(r);        return 0;}
int r;
int r;
int
r
r
r = bus_broadcast(receiver->bus, NULL, filter, message);
r = bus_broadcast(receiver->bus, NULL, filter, message)
r
r
bus_broadcast(receiver->bus, NULL, filter, message)
bus_broadcast
bus_broadcast
receiver->bus
receiver
receiver
bus
NULL
NULL
filter
filter
message
message
if (r)                return error_trace(r);
r
r
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
r = connection_queue(&receiver->connection, 0, message);
r = connection_queue(&receiver->connection, 0, message)
r
r
connection_queue(&receiver->connection, 0, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
0
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(11,13,0)
(34,8,0)
(26,34,0)
(4,14,0)
(23,10,0)
(13,6,0)
(0,17,0)
(5,34,0)
(31,12,0)
(13,11,0)
(31,0,0)
(6,8,0)
(19,17,0)
(24,6,0)
(20,17,0)
(27,17,0)
(9,31,0)
(25,11,0)
(3,19,0)
(21,34,0)
(3,14,0)
(11,33,0)
(0,6,0)
(10,17,0)
(29,0,0)
(6,0,0)
(15,11,0)
(4,10,0)
(34,10,0)
(2,5,0)
(18,4,0)
(34,35,0)
(3,12,0)
(6,13,0)
(1,19,0)
(30,17,0)
(34,5,0)
(7,6,0)
(16,34,0)
(32,5,0)
(5,33,0)
(10,34,0)
(34,5,1)
(3,14,1)
(7,24,1)
(14,4,1)
(12,31,1)
(28,0,1)
(6,13,1)
(31,0,1)
(18,22,1)
(6,7,1)
(5,33,1)
(11,33,1)
(2,23,1)
(32,2,1)
(13,11,1)
(4,18,1)
(34,26,1)
(3,19,1)
(34,35,1)
(22,10,1)
(5,32,1)
(10,34,1)
(34,8,1)
(16,5,1)
(19,1,1)
(25,29,1)
(4,10,1)
(6,8,1)
(24,13,1)
(21,16,1)
(1,28,1)
(15,25,1)
(0,6,1)
(29,22,1)
(3,12,1)
(31,9,1)
(11,15,1)
(26,21,1)
(9,28,1)
(4,22,2)
(3,19,2)
(3,12,2)
(11,33,2)
(11,22,2)
(18,22,2)
(28,22,2)
(24,22,2)
(13,22,2)
(6,22,2)
(14,22,2)
(9,28,2)
(25,22,2)
(34,5,2)
(5,33,2)
(13,11,2)
(4,10,2)
(34,35,2)
(3,14,2)
(0,6,2)
(1,28,2)
(10,34,2)
(7,22,2)
(0,22,2)
(6,13,2)
(12,28,2)
(34,8,2)
(31,28,2)
(31,0,2)
(15,22,2)
(29,22,2)
(19,28,2)
(6,8,2)
-----------------------------------
(0,r = connection_queue(&receiver->connection, 0, message)
(1,0)
(2,receiver)
(3,RET)
(4,error_trace(r)
(5,receiver->bus)
(6,connection_queue(&receiver->connection, 0, message)
(7,message)
(8,Message *message)
(9,r)
(10,r = bus_broadcast(receiver->bus, NULL, filter, message)
(11,receiver->connection)
(12,return error_fold(r)
(13,&receiver->connection)
(14,return error_trace(r)
(15,connection)
(16,NULL)
(17,)
(18,r)
(19,return 0;)
(20,if (r)
(21,filter)
(22,r)
(23,r)
(24,0)
(25,receiver)
(26,message)
(27,r)
(28,r)
(29,r)
(30,if (r)
(31,error_fold(r)
(32,bus)
(33,Peer *receiver)
(34,bus_broadcast(receiver->bus, NULL, filter, message)
(35,MatchFilter *filter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^