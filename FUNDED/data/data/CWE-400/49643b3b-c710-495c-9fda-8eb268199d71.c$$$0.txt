-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_32_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        twoIntsStruct * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
69,70
70,71
70,72
71,72
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
105,106
106,107
106,108
107,108
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
117,118
119,120
121,122
121,123
122,123
123,124
123,125
124,125
126,127
126,128
126,129
129,130
130,131
131,132
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,68,72,73,77,79,84,86,92,93,94,95,101,102,103,104,108,112,113,118,120,125,127,128,132,133
-----computeFrom-----
38,39
38,40
56,57
56,58
75,76
75,77
88,89
88,90
97,98
97,99
115,116
115,117
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_32_bad(){    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_32_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_32_bad
{    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }
twoIntsStruct * data = *dataPtr1;
twoIntsStruct * data = *dataPtr1;
twoIntsStruct
twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = *dataPtr2;
twoIntsStruct * data = *dataPtr2;
twoIntsStruct
twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(57,16,0)
(63,42,0)
(62,24,0)
(11,55,0)
(21,5,0)
(66,58,0)
(5,43,0)
(5,16,0)
(15,14,0)
(10,40,0)
(8,58,0)
(48,38,0)
(62,16,0)
(9,4,0)
(27,47,0)
(37,42,0)
(43,5,0)
(1,58,0)
(2,5,0)
(31,21,0)
(49,67,0)
(18,16,0)
(40,52,0)
(29,51,0)
(32,46,0)
(24,51,0)
(34,58,0)
(60,58,0)
(14,15,0)
(13,42,0)
(44,14,0)
(45,0,0)
(14,0,0)
(2,16,0)
(61,48,0)
(3,0,0)
(48,8,0)
(33,5,0)
(39,16,0)
(0,45,0)
(38,65,0)
(36,46,0)
(30,45,0)
(0,58,0)
(22,36,0)
(12,57,0)
(36,5,0)
(51,5,0)
(11,67,0)
(59,51,0)
(46,47,0)
(4,0,0)
(8,35,0)
(54,65,0)
(52,40,0)
(4,2,0)
(67,11,0)
(7,36,0)
(25,38,0)
(35,8,0)
(42,63,0)
(24,62,0)
(23,2,0)
(53,63,0)
(46,36,0)
(38,48,0)
(43,40,0)
(16,58,0)
(65,58,0)
(43,56,0)
(41,35,0)
(6,8,0)
(42,5,0)
(50,15,0)
(40,43,0)
(20,21,0)
(63,57,0)
(28,34,0)
(56,43,0)
(26,52,0)
(17,34,0)
(51,24,0)
(47,16,0)
(15,16,0)
(52,26,1)
(34,17,1)
(49,21,1)
(41,6,1)
(38,48,1)
(44,50,1)
(12,63,1)
(48,8,1)
(20,5,1)
(59,47,1)
(57,12,1)
(48,61,1)
(67,49,1)
(29,59,1)
(0,45,1)
(8,35,1)
(53,42,1)
(63,42,1)
(51,29,1)
(2,23,1)
(21,5,1)
(28,8,1)
(25,2,1)
(4,9,1)
(46,32,1)
(43,40,1)
(64,38,1)
(22,57,1)
(15,14,1)
(5,43,1)
(40,52,1)
(7,22,1)
(23,4,1)
(43,56,1)
(21,31,1)
(26,10,1)
(63,53,1)
(51,5,1)
(32,36,1)
(14,44,1)
(42,13,1)
(30,3,1)
(45,30,1)
(10,33,1)
(14,0,1)
(47,27,1)
(50,34,1)
(2,5,1)
(31,20,1)
(9,62,1)
(27,46,1)
(61,25,1)
(37,21,1)
(35,41,1)
(6,0,1)
(62,24,1)
(13,37,1)
(36,5,1)
(37,11,1)
(17,28,1)
(4,0,1)
(46,36,1)
(24,51,1)
(36,7,1)
(33,15,1)
(11,67,1)
(42,5,1)
(36,5,2)
(11,67,2)
(42,5,2)
(43,56,2)
(4,0,2)
(62,24,2)
(63,42,2)
(2,5,2)
(8,35,2)
(67,21,2)
(43,40,2)
(14,0,2)
(40,52,2)
(48,8,2)
(15,14,2)
(51,5,2)
(11,21,2)
(46,36,2)
(21,5,2)
(24,51,2)
(5,43,2)
(0,45,2)
(49,21,2)
(38,48,2)
-----------------------------------
(0,* *dataPtr1 = &data)
(1,dataPtr1)
(2,*dataPtr1 = data)
(3,dataPtr1)
(4,*dataPtr1)
(5,data = (twoIntsStruct *)
(6,dataPtr2)
(7,0)
(8,* *dataPtr2 = &data)
(9,dataPtr1)
(10,100)
(11,exit(-1)
(12,0)
(13,0)
(14,*dataPtr1)
(15,* data = *dataPtr1)
(16,)
(17,NULL)
(18,data)
(19, sizeof(twoIntsStruct)
(20,data)
(21,data == NULL)
(22,data)
(23,data)
(24,&data[0])
(25,data)
(26,twoIntsStruct)
(27,0)
(28,data)
(29,0)
(30,data)
(31,NULL)
(32,intTwo)
(33,data)
(34,data = NULL)
(35,&data)
(36,data[0])
(37,data)
(38,* data = *dataPtr2)
(39,if (data == NULL)
(40,calloc(100, sizeof(twoIntsStruct)
(41,data)
(42,data[0])
(43,(twoIntsStruct *)
(44,dataPtr1)
(45,&data)
(46,data[0].intTwo)
(47,data[0].intTwo = 0)
(48,*dataPtr2)
(49,1)
(50,data)
(51,data[0])
(52,sizeof(twoIntsStruct)
(53,intOne)
(54,data)
(55,)
(56,twoIntsStruct *)
(57,data[0].intOne = 0)
(58,)
(59,data)
(60,data)
(61,dataPtr2)
(62,printStructLine(&data[0])
(63,data[0].intOne)
(64,RET)
(65,)
(66,dataPtr2)
(67,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^