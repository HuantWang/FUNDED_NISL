-----label-----
1
-----code-----
void send_client(struct locks* l, const char* msg) {
	struct client_data* cli_data;
	if ( !msg ) return;

	cli_data = CLIENT_DATA_FROM_LOCKS(l);
	size_t len = strlen(msg);

	if ( send( cli_data->fd, msg, len, 0) != len ) {
		perror( "Something failed sending message" );
		incr_stats( failed_sends );
	}
	/* Wait for answer */
	event_add( &cli_data->ev, NULL );
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
17,18
18,19
18,20
19,20
21,22
21,23
24,25
24,26
25,26
26,27
29,30
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
52,54
52,55
52,56
52,57
53,54
55,56
55,57
56,57
59,60
61,62
64,65
66,67
66,68
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
77,78
79,80
80,81
80,82
80,83
81,82
83,84
84,85
84,86
85,86
88,89
-----nextToken-----
2,4,7,9,10,12,14,15,20,22,23,27,28,32,35,37,41,43,47,49,54,57,58,60,62,63,65,70,71,75,78,82,86,87,89
-----computeFrom-----
30,31
30,32
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
void send_client(struct locks* l, const char* msg) {	struct client_data* cli_data;	if ( !msg ) return;	cli_data = CLIENT_DATA_FROM_LOCKS(l);	size_t len = strlen(msg);	if ( send( cli_data->fd, msg, len, 0) != len ) {		perror( "Something failed sending message" );		incr_stats( failed_sends );	}	/* Wait for answer */	event_add( &cli_data->ev, NULL );}
void
send_client(struct locks* l, const char* msg)
send_client
struct locks* l
struct locks
locks
* l
*
l
const char* msg
const char
* msg
*
msg
{	struct client_data* cli_data;	if ( !msg ) return;	cli_data = CLIENT_DATA_FROM_LOCKS(l);	size_t len = strlen(msg);	if ( send( cli_data->fd, msg, len, 0) != len ) {		perror( "Something failed sending message" );		incr_stats( failed_sends );	}	/* Wait for answer */	event_add( &cli_data->ev, NULL );}
struct client_data* cli_data;
struct client_data* cli_data;
struct client_data
client_data
* cli_data
*
cli_data
if ( !msg ) return;
!msg
msg
msg
return;
cli_data = CLIENT_DATA_FROM_LOCKS(l);
cli_data = CLIENT_DATA_FROM_LOCKS(l)
cli_data
cli_data
CLIENT_DATA_FROM_LOCKS(l)
CLIENT_DATA_FROM_LOCKS
CLIENT_DATA_FROM_LOCKS
l
l
size_t len = strlen(msg);
size_t len = strlen(msg);
size_t
size_t
len = strlen(msg)
len
= strlen(msg)
strlen(msg)
strlen
strlen
msg
msg
if ( send( cli_data->fd, msg, len, 0) != len ) {		perror( "Something failed sending message" );		incr_stats( failed_sends );	}
send( cli_data->fd, msg, len, 0) != len
send( cli_data->fd, msg, len, 0)
send
send
cli_data->fd
cli_data
cli_data
fd
msg
msg
len
len
0
len
len
{		perror( "Something failed sending message" );		incr_stats( failed_sends );	}
perror( "Something failed sending message" );
perror( "Something failed sending message" )
perror
perror
"Something failed sending message"
incr_stats( failed_sends );
incr_stats( failed_sends );
incr_stats
incr_stats
( failed_sends )
failed_sends
failed_sends
event_add( &cli_data->ev, NULL );
event_add( &cli_data->ev, NULL )
event_add
event_add
&cli_data->ev
cli_data->ev
cli_data
cli_data
ev
NULL
NULL
-----joern-----
(23,14,0)
(5,23,0)
(7,38,0)
(19,29,0)
(38,22,0)
(31,17,0)
(26,17,0)
(15,37,0)
(11,35,0)
(25,29,0)
(28,25,0)
(23,5,0)
(28,17,0)
(30,11,0)
(12,14,0)
(6,23,0)
(4,37,0)
(29,25,0)
(35,12,0)
(5,13,0)
(18,10,0)
(20,15,0)
(9,14,0)
(10,17,0)
(17,28,0)
(17,22,0)
(11,23,0)
(3,28,0)
(27,12,0)
(17,10,0)
(8,14,0)
(35,11,0)
(32,10,0)
(36,11,0)
(29,22,0)
(17,25,0)
(12,35,0)
(0,25,0)
(25,14,0)
(16,14,0)
(33,14,0)
(1,4,0)
(2,17,0)
(24,34,0)
(21,5,0)
(10,23,0)
(30,28,1)
(17,10,1)
(34,38,1)
(38,22,1)
(29,19,1)
(31,26,1)
(4,1,1)
(11,23,1)
(10,18,1)
(5,21,1)
(24,34,1)
(18,32,1)
(35,11,1)
(10,23,1)
(0,23,1)
(32,25,1)
(6,38,1)
(17,25,1)
(3,17,1)
(26,10,1)
(17,22,1)
(11,36,1)
(23,5,1)
(36,30,1)
(30,4,1)
(12,27,1)
(21,6,1)
(28,17,1)
(20,28,1)
(28,3,1)
(12,35,1)
(28,25,1)
(2,31,1)
(29,22,1)
(5,13,1)
(24,12,1)
(38,7,1)
(17,2,1)
(15,20,1)
(27,35,1)
(1,15,1)
(25,29,1)
(19,0,1)
(36,38,2)
(11,38,2)
(18,38,2)
(28,25,2)
(15,28,2)
(20,28,2)
(28,17,2)
(17,10,2)
(35,38,2)
(23,5,2)
(24,34,2)
(6,38,2)
(38,22,2)
(32,38,2)
(29,38,2)
(0,38,2)
(31,38,2)
(34,38,2)
(11,23,2)
(27,38,2)
(28,38,2)
(4,28,2)
(17,22,2)
(26,38,2)
(19,38,2)
(10,23,2)
(2,38,2)
(29,22,2)
(1,28,2)
(3,38,2)
(10,38,2)
(23,38,2)
(25,29,2)
(5,13,2)
(30,38,2)
(17,25,2)
(21,38,2)
(35,11,2)
(12,38,2)
(5,38,2)
(25,38,2)
(17,38,2)
(12,35,2)
-----------------------------------
(0,len)
(1,failed_sends)
(2,0)
(3,len)
(4,incr_stats( failed_sends )
(5,CLIENT_DATA_FROM_LOCKS(l)
(6,cli_data)
(7,msg)
(8,if ( !msg )
(9,if ( send( cli_data->fd, msg, len, 0)
(10,cli_data->fd)
(11,cli_data->ev)
(12,event_add( &cli_data->ev, NULL )
(13,struct locks* l)
(14,)
(15,perror( "Something failed sending message" )
(16,len)
(17,send( cli_data->fd, msg, len, 0)
(18,fd)
(19,msg)
(20,"Something failed sending message")
(21,l)
(22,const char* msg)
(23,cli_data = CLIENT_DATA_FROM_LOCKS(l)
(24,RET)
(25,len = strlen(msg)
(26,msg)
(27,NULL)
(28,send( cli_data->fd, msg, len, 0)
(29,strlen(msg)
(30,cli_data)
(31,len)
(32,cli_data)
(33,cli_data)
(34,return;)
(35,&cli_data->ev)
(36,ev)
(37,)
(38,!msg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^