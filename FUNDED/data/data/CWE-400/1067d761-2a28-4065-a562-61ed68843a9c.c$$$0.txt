-----label-----
0
-----code-----
static void goodB2G2Sink(int count)
{
    if(goodB2G2Static)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
41,43
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
51,52
51,53
51,54
51,55
52,53
53,54
53,55
54,55
56,57
56,58
56,59
57,58
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
83,84
83,85
84,85
84,86
85,86
88,89
90,91
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
101,104
101,105
101,106
102,103
104,105
106,107
107,108
107,109
110,111
110,112
111,112
113,114
115,116
117,118
118,119
118,120
119,120
122,123
122,124
123,124
125,126
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,6,8,12,18,20,22,26,28,29,32,35,37,38,40,45,46,49,50,55,58,60,61,65,67,72,73,78,79,82,86,87,89,92,98,100,103,105,108,109,112,114,116,120,121,124,129,131
-----computeFrom-----
42,43
42,44
43,44
43,45
47,48
47,49
53,54
53,55
63,64
63,65
76,77
76,78
80,81
80,82
95,96
95,97
-----guardedBy-----
49,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2Sink(int count){    if(goodB2G2Static)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2Sink(int count)
goodB2G2Sink
int count
int
count
count
{    if(goodB2G2Static)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
if(goodB2G2Static)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
goodB2G2Static
goodB2G2Static
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(40,10,0)
(36,14,0)
(21,10,0)
(33,18,0)
(63,10,0)
(2,43,0)
(39,14,0)
(44,28,0)
(14,10,0)
(60,38,0)
(43,13,0)
(27,58,0)
(7,26,0)
(7,13,0)
(64,32,0)
(12,58,0)
(43,69,0)
(50,49,0)
(50,3,0)
(30,17,0)
(66,7,0)
(34,18,0)
(26,7,0)
(41,63,0)
(47,50,0)
(41,3,0)
(42,54,0)
(56,3,0)
(8,44,0)
(15,50,0)
(50,6,0)
(3,18,0)
(17,49,0)
(44,43,0)
(32,10,0)
(49,50,0)
(20,18,0)
(43,44,0)
(67,68,0)
(26,58,0)
(57,62,0)
(9,48,0)
(49,17,0)
(59,63,0)
(50,47,0)
(16,63,0)
(38,3,0)
(58,26,0)
(19,28,0)
(6,50,0)
(23,10,0)
(37,38,0)
(46,28,0)
(29,32,0)
(55,47,0)
(10,61,0)
(53,50,0)
(11,6,0)
(4,41,0)
(24,51,0)
(45,1,0)
(9,3,0)
(5,41,0)
(58,13,0)
(31,7,0)
(3,41,0)
(69,43,0)
(0,10,0)
(51,28,0)
(52,9,0)
(1,25,0)
(51,24,1)
(2,8,1)
(27,7,1)
(35,9,1)
(17,30,1)
(50,47,1)
(6,11,1)
(46,38,1)
(58,12,1)
(56,26,1)
(8,28,1)
(15,17,1)
(46,1,1)
(5,4,1)
(67,49,1)
(51,28,1)
(64,14,1)
(38,37,1)
(44,43,1)
(52,65,1)
(14,39,1)
(7,31,1)
(41,5,1)
(35,65,1)
(30,44,1)
(1,45,1)
(9,52,1)
(41,63,1)
(35,26,1)
(4,56,1)
(19,46,1)
(16,32,1)
(45,38,1)
(8,51,1)
(50,6,1)
(11,15,1)
(24,49,1)
(68,67,1)
(35,22,1)
(55,6,1)
(50,3,1)
(26,7,1)
(43,69,1)
(60,3,1)
(66,63,1)
(49,50,1)
(29,64,1)
(63,59,1)
(49,17,1)
(12,27,1)
(28,19,1)
(53,47,1)
(59,16,1)
(39,36,1)
(44,28,1)
(36,22,1)
(7,13,1)
(47,55,1)
(31,66,1)
(65,44,1)
(24,68,1)
(32,29,1)
(26,58,1)
(38,3,1)
(9,3,1)
(50,53,1)
(58,13,1)
(3,41,1)
(43,2,1)
(43,13,1)
(37,60,1)
(11,44,2)
(65,26,2)
(44,44,2)
(1,38,2)
(49,50,2)
(26,58,2)
(24,44,2)
(58,7,2)
(50,44,2)
(43,44,2)
(43,69,2)
(37,26,2)
(66,22,2)
(3,26,2)
(50,47,2)
(15,44,2)
(38,26,2)
(51,44,2)
(8,26,2)
(41,26,2)
(6,44,2)
(12,7,2)
(68,49,2)
(43,13,2)
(2,26,2)
(44,26,2)
(64,22,2)
(29,22,2)
(51,28,2)
(30,44,2)
(4,26,2)
(44,28,2)
(16,22,2)
(58,13,2)
(7,22,2)
(41,63,2)
(9,3,2)
(45,38,2)
(9,65,2)
(59,22,2)
(7,13,2)
(31,22,2)
(36,22,2)
(38,3,2)
(63,22,2)
(47,44,2)
(52,65,2)
(19,26,2)
(46,26,2)
(60,26,2)
(8,44,2)
(43,26,2)
(56,26,2)
(28,26,2)
(49,44,2)
(26,7,2)
(50,6,2)
(55,44,2)
(2,44,2)
(27,7,2)
(67,49,2)
(26,22,2)
(32,22,2)
(53,44,2)
(14,22,2)
(3,41,2)
(5,26,2)
(50,3,2)
(49,17,2)
(17,44,2)
(44,43,2)
(39,22,2)
-----------------------------------
(0,pFile)
(1,exit(1)
(2,count)
(3,pFile = fopen(filename, "w+")
(4,filename)
(5,"w+")
(6,sizeof(char)
(7,count > 0)
(8,i)
(9,fclose(pFile)
(10,)
(11,char)
(12,20)
(13,int count)
(14,i = 0)
(15,SENTENCE)
(16,filename)
(17,strlen(SENTENCE)
(18,)
(19,0)
(20,if (pFile)
(21,filename)
(22,goodB2G2Static)
(23,if (count > 0 && count <= 20)
(24,i)
(25,)
(26,count > 0 && count <= 20)
(27,count)
(28,i = 0)
(29,NULL)
(30,SENTENCE)
(31,0)
(32,*pFile = NULL)
(33,for (i = 0; i < (size_t)
(34,if (pFile == NULL)
(35,RET)
(36,i)
(37,NULL)
(38,pFile == NULL)
(39,0)
(40,i)
(41,fopen(filename, "w+")
(42,if (strlen(SENTENCE)
(43,(size_t)
(44,i < (size_t)
(45,1)
(46,i)
(47,strlen(SENTENCE)
(48,)
(49,strlen(SENTENCE)
(50,fwrite(SENTENCE, sizeof(char)
(51,i++)
(52,pFile)
(53,pFile)
(54,)
(55,SENTENCE)
(56,pFile)
(57,if(goodB2G2Static)
(58,count <= 20)
(59,"output_good.txt")
(60,pFile)
(61,)
(62,)
(63,*filename = "output_good.txt")
(64,pFile)
(65,pFile)
(66,count)
(67,1)
(68,exit(1)
(69,size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^