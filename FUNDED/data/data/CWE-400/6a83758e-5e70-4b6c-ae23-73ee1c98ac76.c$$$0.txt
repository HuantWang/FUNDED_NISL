-----label-----
1
-----code-----
static void
acl_cfg_update(struct acl* acl)
{
    /* Always translate/validate user input, so we can fail early
     * on unsupported values */

    char details[256];
    char status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0};
    unsigned int sequence_number = 0;
    struct ops_cls_list *list = ops_cls_list_new_from_acl(acl);

    if (!list) {
        snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,
                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),
                 acl->name);
        VLOG_WARN(status_str);

        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,
                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str);
        return;
    }

    /* delete old PI cache of API obj, and remember new one */
    ops_cls_list_delete(acl->cfg_pi);
    acl->cfg_pi = list;

    if (!list_is_empty(&acl->acl_port_map)) {
        /* Make the call down to the PD layer so it can change the
         * application of this ACL on all related ports.
         */
        struct ops_cls_pd_list_status status;
        memset(&status, 0, sizeof status);
        int rc = call_ofproto_ops_cls_list_update(acl, &status);

        if (rc == 0) {
            snprintf(details, sizeof(details),
                    "ACL %s -- PD list_update succeeded", acl->name);
            VLOG_DBG(details);
            ovsrec_acl_set_cur_aces(acl->ovsdb_row,
                                    acl->ovsdb_row->key_in_progress_aces,
                                    acl->ovsdb_row->value_in_progress_aces,
                                    acl->ovsdb_row->n_in_progress_aces);
            /* status_str will be NULL on success */
            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,
                               0, status_str);
        } else {
            snprintf(details, sizeof(details),
                    "ACL %s -- PD list_update failed for"
                    " acl entry = %u and port = %s", acl->name,
                     status.entry_id, netdev_get_name(status.port->netdev));
            VLOG_DBG(details);
            /* Convert entry_id to sequence_number using in_progress aces */
            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {
                sequence_number =
                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];
            }
            ops_cls_status_msgs_get(status.status_code,
                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,
                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,
                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,
                                    netdev_get_name(status.port->netdev),
                                    sequence_number,
                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);
            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,
                               status.status_code, status_str);
        }
    } else {
        snprintf(details, sizeof(details),
                "ACL %s -- Not applied. No PD call necessary",
                acl->name);
        VLOG_DBG(details);
        ovsrec_acl_set_cur_aces(acl->ovsdb_row,
                                acl->ovsdb_row->key_in_progress_aces,
                                acl->ovsdb_row->value_in_progress_aces,
                                acl->ovsdb_row->n_in_progress_aces);
        /* status_str will be NULL on success */
        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
22,23
22,24
22,25
24,25
25,26
27,28
28,29
30,31
31,32
31,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
51,52
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
56,59
56,60
56,61
57,58
59,60
61,62
63,64
63,65
64,65
66,67
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
79,84
80,81
82,83
82,84
83,84
86,87
88,89
90,91
93,94
94,95
94,96
95,96
97,98
97,99
98,99
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
109,111
109,112
110,111
111,112
111,113
112,113
114,115
115,116
115,117
116,117
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
127,130
127,131
128,129
130,131
131,132
134,135
135,136
137,138
138,139
138,140
140,141
140,142
142,143
143,144
143,145
143,146
144,145
146,147
148,149
149,150
151,152
151,153
151,154
152,153
152,154
153,154
156,157
156,158
156,159
156,160
157,158
158,159
158,160
158,161
158,162
158,163
159,160
161,162
163,164
164,165
165,166
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
178,179
179,180
179,181
179,182
179,183
179,184
180,181
182,183
182,184
183,184
186,187
186,188
187,188
187,189
188,189
192,193
192,194
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
204,205
205,206
205,207
205,208
205,209
205,210
206,207
208,209
208,210
209,210
212,213
215,216
217,218
217,219
217,220
217,221
217,222
218,219
219,220
219,221
219,222
219,223
219,224
219,225
219,226
220,221
222,223
224,225
225,226
226,227
229,230
229,231
230,231
233,234
233,235
234,235
237,238
237,239
238,239
240,241
240,242
241,242
241,243
242,243
246,247
247,248
247,249
248,249
250,251
252,253
252,254
253,254
253,255
254,255
254,256
255,256
258,259
258,260
259,260
259,261
260,261
264,265
265,266
266,267
266,268
267,268
269,270
269,271
270,271
270,272
271,272
271,273
272,273
276,277
276,278
277,278
280,281
281,282
281,283
281,284
281,285
281,286
281,287
281,288
281,289
281,290
282,283
284,285
284,286
285,286
288,289
290,291
292,293
294,295
294,296
295,296
297,298
297,299
298,299
298,300
299,300
303,304
305,306
307,308
309,310
310,311
310,312
310,313
310,314
310,315
311,312
313,314
313,315
314,315
317,318
319,320
319,321
320,321
323,324
325,326
325,327
325,328
325,329
326,327
327,328
327,329
327,330
327,331
327,332
328,329
330,331
332,333
333,334
334,335
337,338
337,339
338,339
341,342
342,343
342,344
343,344
345,346
347,348
348,349
348,350
348,351
348,352
348,353
349,350
351,352
351,353
352,353
355,356
355,357
356,357
356,358
357,358
361,362
361,363
362,363
362,364
363,364
367,368
367,369
368,369
368,370
369,370
373,374
374,375
374,376
374,377
374,378
374,379
375,376
377,378
377,379
378,379
381,382
384,385
-----nextToken-----
2,4,7,9,10,14,16,18,21,23,26,29,32,34,36,40,42,43,47,49,53,58,60,62,65,67,70,71,75,77,81,84,85,87,89,91,92,96,99,100,105,106,108,113,117,118,123,125,129,132,133,136,139,141,145,147,150,154,155,160,162,166,167,170,171,175,177,181,184,185,189,190,191,195,196,197,201,202,203,207,210,211,213,214,216,221,223,227,228,231,232,235,236,239,243,244,245,249,251,256,257,261,262,263,268,273,274,275,278,279,283,286,287,289,291,293,296,300,301,302,304,306,308,312,315,316,318,321,322,324,329,331,335,336,339,340,344,346,350,353,354,358,359,360,364,365,366,370,371,372,376,379,380,382,383,385
-----computeFrom-----
102,103
102,104
152,153
152,154
253,254
253,255
266,267
266,268
-----guardedBy-----
261,273
262,274
257,279
256,278
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
static voidacl_cfg_update(struct acl* acl){    /* Always translate/validate user input, so we can fail early     * on unsupported values */    char details[256];    char status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0};    unsigned int sequence_number = 0;    struct ops_cls_list *list = ops_cls_list_new_from_acl(acl);    if (!list) {        snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),                 acl->name);        VLOG_WARN(status_str);        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str);        return;    }    /* delete old PI cache of API obj, and remember new one */    ops_cls_list_delete(acl->cfg_pi);    acl->cfg_pi = list;    if (!list_is_empty(&acl->acl_port_map)) {        /* Make the call down to the PD layer so it can change the         * application of this ACL on all related ports.         */        struct ops_cls_pd_list_status status;        memset(&status, 0, sizeof status);        int rc = call_ofproto_ops_cls_list_update(acl, &status);        if (rc == 0) {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);            VLOG_DBG(details);            ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);            /* status_str will be NULL on success */            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);        } else {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));            VLOG_DBG(details);            /* Convert entry_id to sequence_number using in_progress aces */            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }            ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);        }    } else {        snprintf(details, sizeof(details),                "ACL %s -- Not applied. No PD call necessary",                acl->name);        VLOG_DBG(details);        ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                acl->ovsdb_row->key_in_progress_aces,                                acl->ovsdb_row->value_in_progress_aces,                                acl->ovsdb_row->n_in_progress_aces);        /* status_str will be NULL on success */        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str);    }}
static void
acl_cfg_update(struct acl* acl)
acl_cfg_update
struct acl* acl
struct acl
acl
* acl
*
acl
{    /* Always translate/validate user input, so we can fail early     * on unsupported values */    char details[256];    char status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0};    unsigned int sequence_number = 0;    struct ops_cls_list *list = ops_cls_list_new_from_acl(acl);    if (!list) {        snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),                 acl->name);        VLOG_WARN(status_str);        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str);        return;    }    /* delete old PI cache of API obj, and remember new one */    ops_cls_list_delete(acl->cfg_pi);    acl->cfg_pi = list;    if (!list_is_empty(&acl->acl_port_map)) {        /* Make the call down to the PD layer so it can change the         * application of this ACL on all related ports.         */        struct ops_cls_pd_list_status status;        memset(&status, 0, sizeof status);        int rc = call_ofproto_ops_cls_list_update(acl, &status);        if (rc == 0) {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);            VLOG_DBG(details);            ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);            /* status_str will be NULL on success */            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);        } else {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));            VLOG_DBG(details);            /* Convert entry_id to sequence_number using in_progress aces */            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }            ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);        }    } else {        snprintf(details, sizeof(details),                "ACL %s -- Not applied. No PD call necessary",                acl->name);        VLOG_DBG(details);        ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                acl->ovsdb_row->key_in_progress_aces,                                acl->ovsdb_row->value_in_progress_aces,                                acl->ovsdb_row->n_in_progress_aces);        /* status_str will be NULL on success */        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str);    }}
char details[256];
char details[256];
char
details[256]
details
[256]
256
char status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0};
char status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0};
char
status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0}
status_str
[OPS_CLS_STATUS_MSG_MAX_LEN]
OPS_CLS_STATUS_MSG_MAX_LEN
OPS_CLS_STATUS_MSG_MAX_LEN
= {0}
{0}
0
unsigned int sequence_number = 0;
unsigned int sequence_number = 0;
unsigned int
sequence_number = 0
sequence_number
= 0
0
struct ops_cls_list *list = ops_cls_list_new_from_acl(acl);
struct ops_cls_list *list = ops_cls_list_new_from_acl(acl);
struct ops_cls_list
ops_cls_list
*list = ops_cls_list_new_from_acl(acl)
*
list
= ops_cls_list_new_from_acl(acl)
ops_cls_list_new_from_acl(acl)
ops_cls_list_new_from_acl
ops_cls_list_new_from_acl
acl
acl
if (!list) {        snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),                 acl->name);        VLOG_WARN(status_str);        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str);        return;    }
!list
list
list
{        snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),                 acl->name);        VLOG_WARN(status_str);        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str);        return;    }
snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),                 acl->name);
snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR),                 acl->name)
snprintf
snprintf
status_str
status_str
OPS_CLS_STATUS_MSG_MAX_LEN
OPS_CLS_STATUS_MSG_MAX_LEN
ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR)
ops_cls_status_table_get
ops_cls_status_table_get
OPS_CLS_STATUS_LIST_PARSE_ERR
OPS_CLS_STATUS_LIST_PARSE_ERR
acl->name
acl
acl
name
VLOG_WARN(status_str);
VLOG_WARN(status_str)
VLOG_WARN
VLOG_WARN
status_str
status_str
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str);
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str)
acl_set_cfg_status
acl_set_cfg_status
acl->ovsdb_row
acl
acl
ovsdb_row
OPS_CLS_STATE_REJECTED_STR
OPS_CLS_STATE_REJECTED_STR
OPS_CLS_STATUS_LIST_PARSE_ERR
OPS_CLS_STATUS_LIST_PARSE_ERR
status_str
status_str
return;
ops_cls_list_delete(acl->cfg_pi);
ops_cls_list_delete(acl->cfg_pi)
ops_cls_list_delete
ops_cls_list_delete
acl->cfg_pi
acl
acl
cfg_pi
acl->cfg_pi = list;
acl->cfg_pi = list
acl->cfg_pi
acl
acl
cfg_pi
list
list
if (!list_is_empty(&acl->acl_port_map)) {        /* Make the call down to the PD layer so it can change the         * application of this ACL on all related ports.         */        struct ops_cls_pd_list_status status;        memset(&status, 0, sizeof status);        int rc = call_ofproto_ops_cls_list_update(acl, &status);        if (rc == 0) {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);            VLOG_DBG(details);            ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);            /* status_str will be NULL on success */            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);        } else {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));            VLOG_DBG(details);            /* Convert entry_id to sequence_number using in_progress aces */            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }            ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);        }    } else {        snprintf(details, sizeof(details),                "ACL %s -- Not applied. No PD call necessary",                acl->name);        VLOG_DBG(details);        ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                acl->ovsdb_row->key_in_progress_aces,                                acl->ovsdb_row->value_in_progress_aces,                                acl->ovsdb_row->n_in_progress_aces);        /* status_str will be NULL on success */        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str);    }
!list_is_empty(&acl->acl_port_map)
list_is_empty(&acl->acl_port_map)
list_is_empty
list_is_empty
&acl->acl_port_map
acl->acl_port_map
acl
acl
acl_port_map
{        /* Make the call down to the PD layer so it can change the         * application of this ACL on all related ports.         */        struct ops_cls_pd_list_status status;        memset(&status, 0, sizeof status);        int rc = call_ofproto_ops_cls_list_update(acl, &status);        if (rc == 0) {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);            VLOG_DBG(details);            ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);            /* status_str will be NULL on success */            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);        } else {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));            VLOG_DBG(details);            /* Convert entry_id to sequence_number using in_progress aces */            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }            ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);        }    }
struct ops_cls_pd_list_status status;
struct ops_cls_pd_list_status status;
struct ops_cls_pd_list_status
ops_cls_pd_list_status
status
status
memset(&status, 0, sizeof status);
memset(&status, 0, sizeof status)
memset
memset
&status
status
status
0
sizeof status
status
status
int rc = call_ofproto_ops_cls_list_update(acl, &status);
int rc = call_ofproto_ops_cls_list_update(acl, &status);
int
rc = call_ofproto_ops_cls_list_update(acl, &status)
rc
= call_ofproto_ops_cls_list_update(acl, &status)
call_ofproto_ops_cls_list_update(acl, &status)
call_ofproto_ops_cls_list_update
call_ofproto_ops_cls_list_update
acl
acl
&status
status
status
if (rc == 0) {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);            VLOG_DBG(details);            ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);            /* status_str will be NULL on success */            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);        } else {            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));            VLOG_DBG(details);            /* Convert entry_id to sequence_number using in_progress aces */            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }            ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);        }
rc == 0
rc
rc
0
{            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);            VLOG_DBG(details);            ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);            /* status_str will be NULL on success */            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);        }
snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name);
snprintf(details, sizeof(details),                    "ACL %s -- PD list_update succeeded", acl->name)
snprintf
snprintf
details
details
sizeof(details)
(details)
details
details
"ACL %s -- PD list_update succeeded"
acl->name
acl
acl
name
VLOG_DBG(details);
VLOG_DBG(details)
VLOG_DBG
VLOG_DBG
details
details
ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces);
ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                    acl->ovsdb_row->key_in_progress_aces,                                    acl->ovsdb_row->value_in_progress_aces,                                    acl->ovsdb_row->n_in_progress_aces)
ovsrec_acl_set_cur_aces
ovsrec_acl_set_cur_aces
acl->ovsdb_row
acl
acl
ovsdb_row
acl->ovsdb_row->key_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
key_in_progress_aces
acl->ovsdb_row->value_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
value_in_progress_aces
acl->ovsdb_row->n_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
n_in_progress_aces
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str);
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,                               0, status_str)
acl_set_cfg_status
acl_set_cfg_status
acl->ovsdb_row
acl
acl
ovsdb_row
OPS_CLS_STATE_APPLIED_STR
OPS_CLS_STATE_APPLIED_STR
0
status_str
status_str
{            snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));            VLOG_DBG(details);            /* Convert entry_id to sequence_number using in_progress aces */            if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }            ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);            acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);        }
snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev));
snprintf(details, sizeof(details),                    "ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s", acl->name,                     status.entry_id, netdev_get_name(status.port->netdev))
snprintf
snprintf
details
details
sizeof(details)
(details)
details
details
"ACL %s -- PD list_update failed for"                    " acl entry = %u and port = %s"
acl->name
acl
acl
name
status.entry_id
status
status
entry_id
netdev_get_name(status.port->netdev)
netdev_get_name
netdev_get_name
status.port->netdev
status.port
status
status
port
netdev
VLOG_DBG(details);
VLOG_DBG(details)
VLOG_DBG
VLOG_DBG
details
details
if(status.entry_id < acl->ovsdb_row->n_in_progress_aces) {                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }
status.entry_id < acl->ovsdb_row->n_in_progress_aces
status.entry_id
status
status
entry_id
acl->ovsdb_row->n_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
n_in_progress_aces
{                sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];            }
sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id];
sequence_number =                    acl->ovsdb_row->key_in_progress_aces[status.entry_id]
sequence_number
sequence_number
acl->ovsdb_row->key_in_progress_aces[status.entry_id]
acl->ovsdb_row->key_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
key_in_progress_aces
status.entry_id
status
status
entry_id
ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str);
ops_cls_status_msgs_get(status.status_code,                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,                                    netdev_get_name(status.port->netdev),                                    sequence_number,                                    OPS_CLS_STATUS_MSG_MAX_LEN,status_str)
ops_cls_status_msgs_get
ops_cls_status_msgs_get
status.status_code
status
status
status_code
OPS_CLS_STATUS_MSG_OP_UPDATE_STR
OPS_CLS_STATUS_MSG_OP_UPDATE_STR
OPS_CLS_STATUS_MSG_FEATURE_ACL_STR
OPS_CLS_STATUS_MSG_FEATURE_ACL_STR
OPS_CLS_STATUS_MSG_IFACE_PORT_STR
OPS_CLS_STATUS_MSG_IFACE_PORT_STR
netdev_get_name(status.port->netdev)
netdev_get_name
netdev_get_name
status.port->netdev
status.port
status
status
port
netdev
sequence_number
sequence_number
OPS_CLS_STATUS_MSG_MAX_LEN
OPS_CLS_STATUS_MSG_MAX_LEN
status_str
status_str
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str);
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,                               status.status_code, status_str)
acl_set_cfg_status
acl_set_cfg_status
acl->ovsdb_row
acl
acl
ovsdb_row
OPS_CLS_STATE_REJECTED_STR
OPS_CLS_STATE_REJECTED_STR
status.status_code
status
status
status_code
status_str
status_str
{        snprintf(details, sizeof(details),                "ACL %s -- Not applied. No PD call necessary",                acl->name);        VLOG_DBG(details);        ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                acl->ovsdb_row->key_in_progress_aces,                                acl->ovsdb_row->value_in_progress_aces,                                acl->ovsdb_row->n_in_progress_aces);        /* status_str will be NULL on success */        acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str);    }
snprintf(details, sizeof(details),                "ACL %s -- Not applied. No PD call necessary",                acl->name);
snprintf(details, sizeof(details),                "ACL %s -- Not applied. No PD call necessary",                acl->name)
snprintf
snprintf
details
details
sizeof(details)
(details)
details
details
"ACL %s -- Not applied. No PD call necessary"
acl->name
acl
acl
name
VLOG_DBG(details);
VLOG_DBG(details)
VLOG_DBG
VLOG_DBG
details
details
ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                acl->ovsdb_row->key_in_progress_aces,                                acl->ovsdb_row->value_in_progress_aces,                                acl->ovsdb_row->n_in_progress_aces);
ovsrec_acl_set_cur_aces(acl->ovsdb_row,                                acl->ovsdb_row->key_in_progress_aces,                                acl->ovsdb_row->value_in_progress_aces,                                acl->ovsdb_row->n_in_progress_aces)
ovsrec_acl_set_cur_aces
ovsrec_acl_set_cur_aces
acl->ovsdb_row
acl
acl
ovsdb_row
acl->ovsdb_row->key_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
key_in_progress_aces
acl->ovsdb_row->value_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
value_in_progress_aces
acl->ovsdb_row->n_in_progress_aces
acl->ovsdb_row
acl
acl
ovsdb_row
n_in_progress_aces
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str);
acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str)
acl_set_cfg_status
acl_set_cfg_status
acl->ovsdb_row
acl
acl
ovsdb_row
OPS_CLS_STATE_APPLIED_STR
OPS_CLS_STATE_APPLIED_STR
0
status_str
status_str
-----joern-----
(17,60,0)
(60,164,0)
(75,9,0)
(131,56,0)
(40,6,0)
(50,189,0)
(185,137,0)
(88,79,0)
(91,142,0)
(96,88,0)
(32,154,0)
(69,111,0)
(3,7,0)
(191,106,0)
(111,13,0)
(149,138,0)
(211,9,0)
(143,12,0)
(205,154,0)
(209,32,0)
(121,147,0)
(7,23,0)
(73,138,0)
(6,40,0)
(192,154,0)
(122,136,0)
(72,9,0)
(102,82,0)
(41,66,0)
(55,27,0)
(137,9,0)
(71,110,0)
(60,187,0)
(184,22,0)
(178,61,0)
(80,171,0)
(57,0,0)
(83,146,0)
(166,61,0)
(110,191,0)
(194,144,0)
(29,126,0)
(132,83,0)
(153,13,0)
(49,176,0)
(157,100,0)
(156,23,0)
(154,135,0)
(40,143,0)
(24,153,0)
(162,187,0)
(46,96,0)
(189,23,0)
(201,3,0)
(139,88,0)
(177,85,0)
(154,192,0)
(11,83,0)
(72,105,0)
(55,137,0)
(68,150,0)
(127,138,0)
(134,193,0)
(74,71,0)
(75,35,0)
(90,59,0)
(213,142,0)
(202,106,0)
(147,166,0)
(86,55,0)
(54,164,0)
(63,75,0)
(117,126,0)
(124,201,0)
(179,88,0)
(3,201,0)
(97,201,0)
(37,175,0)
(22,187,0)
(58,106,0)
(153,113,0)
(78,153,0)
(21,182,0)
(200,106,0)
(10,191,0)
(1,51,0)
(52,180,0)
(149,0,0)
(33,191,0)
(193,163,0)
(172,66,0)
(39,146,0)
(99,88,0)
(35,75,0)
(113,153,0)
(4,32,0)
(27,161,0)
(182,181,0)
(143,40,0)
(66,181,0)
(140,187,0)
(112,10,0)
(126,59,0)
(23,189,0)
(10,9,0)
(0,149,0)
(60,181,0)
(95,110,0)
(76,152,0)
(160,157,0)
(155,158,0)
(92,44,0)
(167,143,0)
(118,72,0)
(171,80,0)
(34,22,0)
(128,162,0)
(56,149,0)
(12,9,0)
(162,51,0)
(7,3,0)
(125,192,0)
(36,22,0)
(23,7,0)
(153,45,0)
(150,191,0)
(211,76,0)
(110,106,0)
(203,12,0)
(149,56,0)
(40,181,0)
(87,130,0)
(135,154,0)
(101,90,0)
(79,88,0)
(130,22,0)
(161,27,0)
(65,76,0)
(7,26,0)
(62,136,0)
(103,45,0)
(43,138,0)
(188,176,0)
(76,211,0)
(105,72,0)
(135,180,0)
(6,9,0)
(26,7,0)
(20,60,0)
(123,161,0)
(7,171,0)
(14,76,0)
(30,158,0)
(159,3,0)
(81,146,0)
(15,113,0)
(154,51,0)
(82,174,0)
(76,187,0)
(126,9,0)
(198,193,0)
(70,100,0)
(163,35,0)
(147,138,0)
(83,9,0)
(142,9,0)
(28,82,0)
(151,105,0)
(31,189,0)
(48,88,0)
(133,75,0)
(114,60,0)
(208,51,0)
(129,71,0)
(94,192,0)
(85,180,0)
(66,144,0)
(158,162,0)
(40,105,0)
(59,126,0)
(67,37,0)
(93,72,0)
(35,163,0)
(47,1,0)
(169,40,0)
(165,96,0)
(88,37,0)
(84,106,0)
(66,41,0)
(186,149,0)
(8,113,0)
(7,13,0)
(168,12,0)
(174,82,0)
(107,137,0)
(164,9,0)
(212,80,0)
(16,35,0)
(100,79,0)
(154,32,0)
(2,157,0)
(27,55,0)
(80,9,0)
(88,187,0)
(163,193,0)
(22,130,0)
(154,115,0)
(164,60,0)
(141,41,0)
(76,14,0)
(64,211,0)
(42,80,0)
(169,142,0)
(130,9,0)
(5,26,0)
(109,88,0)
(115,154,0)
(180,85,0)
(18,106,0)
(89,152,0)
(113,9,0)
(116,130,0)
(90,101,0)
(189,9,0)
(162,158,0)
(53,26,0)
(166,9,0)
(145,106,0)
(163,37,0)
(82,9,0)
(190,85,0)
(183,6,0)
(146,83,0)
(199,171,0)
(173,169,0)
(25,146,0)
(79,100,0)
(12,143,0)
(120,14,0)
(104,152,0)
(108,66,0)
(142,169,0)
(100,157,0)
(32,9,0)
(187,106,0)
(137,55,0)
(171,7,0)
(19,88,0)
(59,90,0)
(61,166,0)
(206,6,0)
(204,154,0)
(144,9,0)
(26,9,0)
(105,40,0)
(119,144,0)
(180,135,0)
(170,104,0)
(22,13,0)
(146,187,0)
(195,161,0)
(98,166,0)
(44,147,0)
(45,153,0)
(197,76,0)
(88,51,0)
(166,147,0)
(88,96,0)
(210,115,0)
(207,44,0)
(88,136,0)
(89,187,0)
(77,162,0)
(136,106,0)
(37,163,0)
(176,162,0)
(146,152,0)
(191,10,0)
(148,211,0)
(162,176,0)
(174,106,0)
(71,9,0)
(40,169,0)
(158,9,0)
(196,89,0)
(144,66,0)
(201,9,0)
(38,164,0)
(6,9,1)
(212,3,1)
(82,9,1)
(210,205,1)
(22,187,1)
(180,85,1)
(88,179,1)
(207,92,1)
(170,104,1)
(113,15,1)
(168,203,1)
(154,192,1)
(32,4,1)
(137,107,1)
(60,114,1)
(167,12,1)
(149,56,1)
(148,14,1)
(55,86,1)
(163,35,1)
(162,128,1)
(156,189,1)
(17,164,1)
(76,211,1)
(45,103,1)
(88,37,1)
(211,9,1)
(164,9,1)
(54,38,1)
(33,136,1)
(147,166,1)
(35,75,1)
(44,207,1)
(154,32,1)
(57,186,1)
(154,135,1)
(75,63,1)
(120,197,1)
(119,108,1)
(136,62,1)
(205,44,1)
(146,39,1)
(169,173,1)
(108,41,1)
(15,8,1)
(165,27,1)
(40,6,1)
(185,161,1)
(158,30,1)
(78,44,1)
(3,201,1)
(161,195,1)
(34,184,1)
(187,140,1)
(39,81,1)
(107,185,1)
(172,101,1)
(115,210,1)
(46,165,1)
(12,9,1)
(62,122,1)
(153,113,1)
(27,55,1)
(150,68,1)
(47,154,1)
(211,64,1)
(110,95,1)
(4,209,1)
(48,99,1)
(28,150,1)
(104,146,1)
(65,150,1)
(32,9,1)
(70,157,1)
(142,213,1)
(123,1,1)
(112,33,1)
(22,34,1)
(133,67,1)
(144,194,1)
(60,164,1)
(206,183,1)
(26,5,1)
(96,46,1)
(3,159,1)
(7,3,1)
(53,111,1)
(155,88,1)
(159,201,1)
(1,47,1)
(163,193,1)
(213,91,1)
(178,98,1)
(171,80,1)
(71,9,1)
(166,61,1)
(89,187,1)
(12,168,1)
(36,130,1)
(196,76,1)
(182,21,1)
(71,74,1)
(79,100,1)
(42,212,1)
(88,96,1)
(204,115,1)
(117,29,1)
(41,141,1)
(102,28,1)
(139,109,1)
(157,2,1)
(88,136,1)
(35,16,1)
(131,101,1)
(201,9,1)
(122,187,1)
(171,199,1)
(176,188,1)
(130,87,1)
(80,9,1)
(144,9,1)
(5,53,1)
(146,83,1)
(25,83,1)
(190,177,1)
(81,25,1)
(75,9,1)
(6,206,1)
(116,7,1)
(189,9,1)
(100,70,1)
(183,182,1)
(82,102,1)
(69,153,1)
(68,191,1)
(95,71,1)
(72,118,1)
(72,9,1)
(162,187,1)
(124,26,1)
(142,9,1)
(111,69,1)
(180,52,1)
(132,11,1)
(125,32,1)
(203,169,1)
(162,158,1)
(23,189,1)
(160,48,1)
(55,137,1)
(129,174,1)
(170,162,1)
(29,110,1)
(63,133,1)
(22,130,1)
(83,9,1)
(7,171,1)
(151,72,1)
(23,156,1)
(209,204,1)
(143,12,1)
(143,167,1)
(76,187,1)
(153,45,1)
(97,124,1)
(114,20,1)
(16,75,1)
(128,176,1)
(164,54,1)
(59,126,1)
(146,187,1)
(87,116,1)
(26,9,1)
(40,143,1)
(150,191,1)
(2,160,1)
(201,97,1)
(40,105,1)
(103,78,1)
(109,79,1)
(189,50,1)
(60,187,1)
(14,120,1)
(166,9,1)
(52,85,1)
(170,60,1)
(192,94,1)
(61,178,1)
(105,72,1)
(91,105,1)
(165,37,1)
(11,89,1)
(66,144,1)
(191,10,1)
(21,66,1)
(85,190,1)
(27,161,1)
(177,192,1)
(67,27,1)
(193,134,1)
(44,147,1)
(100,157,1)
(149,0,1)
(158,9,1)
(80,42,1)
(173,142,1)
(121,149,1)
(7,26,1)
(98,121,1)
(10,112,1)
(90,59,1)
(88,187,1)
(186,56,1)
(64,148,1)
(113,9,1)
(126,9,1)
(188,49,1)
(24,45,1)
(194,119,1)
(179,139,1)
(184,36,1)
(154,115,1)
(8,24,1)
(169,142,1)
(101,90,1)
(88,79,1)
(0,57,1)
(174,82,1)
(74,129,1)
(105,151,1)
(38,40,1)
(20,17,1)
(137,9,1)
(126,117,1)
(7,23,1)
(86,137,1)
(31,171,1)
(19,96,1)
(49,77,1)
(130,9,1)
(89,196,1)
(83,132,1)
(135,180,1)
(40,169,1)
(198,35,1)
(93,6,1)
(30,155,1)
(66,41,1)
(10,9,1)
(37,163,1)
(94,125,1)
(162,176,1)
(197,65,1)
(56,131,1)
(77,158,1)
(199,80,1)
(170,22,1)
(50,31,1)
(110,191,1)
(99,19,1)
(134,198,1)
(141,172,1)
(118,93,1)
(195,123,1)
(92,147,1)
(76,14,1)
(126,9,2)
(40,6,2)
(56,101,2)
(178,101,2)
(149,0,2)
(98,101,2)
(149,101,2)
(143,12,2)
(113,9,2)
(88,96,2)
(157,44,2)
(135,44,2)
(158,44,2)
(35,75,2)
(182,101,2)
(32,44,2)
(162,158,2)
(23,44,2)
(49,44,2)
(100,157,2)
(104,150,2)
(173,101,2)
(146,187,2)
(78,44,2)
(100,44,2)
(128,44,2)
(198,27,2)
(71,150,2)
(123,44,2)
(76,14,2)
(81,150,2)
(169,101,2)
(171,44,2)
(166,101,2)
(24,44,2)
(37,27,2)
(65,150,2)
(164,101,2)
(88,37,2)
(144,101,2)
(210,44,2)
(48,44,2)
(22,187,2)
(32,9,2)
(39,150,2)
(71,9,2)
(66,101,2)
(150,191,2)
(195,44,2)
(174,82,2)
(20,101,2)
(124,44,2)
(101,150,2)
(151,101,2)
(177,44,2)
(119,101,2)
(111,44,2)
(132,150,2)
(109,44,2)
(201,9,2)
(154,44,2)
(166,9,2)
(27,161,2)
(207,101,2)
(45,44,2)
(88,79,2)
(54,101,2)
(166,61,2)
(59,150,2)
(61,101,2)
(135,180,2)
(83,150,2)
(41,101,2)
(55,137,2)
(19,44,2)
(87,44,2)
(154,192,2)
(3,44,2)
(174,150,2)
(163,35,2)
(89,187,2)
(153,113,2)
(110,191,2)
(3,201,2)
(190,44,2)
(7,3,2)
(205,44,2)
(180,44,2)
(25,150,2)
(82,150,2)
(60,164,2)
(161,44,2)
(144,9,2)
(0,101,2)
(203,101,2)
(40,143,2)
(213,101,2)
(66,41,2)
(163,193,2)
(10,9,2)
(38,101,2)
(183,101,2)
(130,9,2)
(114,101,2)
(88,187,2)
(76,150,2)
(184,44,2)
(85,44,2)
(69,44,2)
(180,85,2)
(12,101,2)
(46,44,2)
(37,163,2)
(26,44,2)
(191,10,2)
(79,100,2)
(66,144,2)
(88,44,2)
(110,150,2)
(23,189,2)
(154,32,2)
(137,9,2)
(89,150,2)
(201,44,2)
(63,27,2)
(120,150,2)
(108,101,2)
(141,101,2)
(36,44,2)
(103,44,2)
(156,44,2)
(186,101,2)
(40,101,2)
(53,44,2)
(212,44,2)
(31,44,2)
(146,83,2)
(143,101,2)
(171,80,2)
(22,44,2)
(59,126,2)
(134,27,2)
(188,44,2)
(34,44,2)
(97,44,2)
(83,9,2)
(92,101,2)
(146,150,2)
(76,211,2)
(142,101,2)
(26,9,2)
(12,9,2)
(55,44,2)
(7,171,2)
(72,101,2)
(90,59,2)
(137,44,2)
(60,101,2)
(159,44,2)
(75,27,2)
(211,150,2)
(77,44,2)
(30,44,2)
(42,44,2)
(22,130,2)
(101,90,2)
(40,105,2)
(74,150,2)
(162,187,2)
(153,44,2)
(115,44,2)
(88,136,2)
(193,27,2)
(35,27,2)
(194,101,2)
(116,44,2)
(1,44,2)
(29,150,2)
(162,44,2)
(72,9,2)
(90,150,2)
(165,44,2)
(4,44,2)
(93,101,2)
(170,104,2)
(105,101,2)
(27,55,2)
(50,44,2)
(7,44,2)
(99,44,2)
(142,9,2)
(14,150,2)
(129,150,2)
(160,44,2)
(169,142,2)
(179,44,2)
(192,44,2)
(70,44,2)
(209,44,2)
(211,9,2)
(167,101,2)
(176,44,2)
(131,101,2)
(95,150,2)
(91,101,2)
(121,101,2)
(76,187,2)
(163,27,2)
(199,44,2)
(107,44,2)
(11,150,2)
(154,115,2)
(80,9,2)
(118,101,2)
(7,26,2)
(196,150,2)
(154,135,2)
(147,101,2)
(2,44,2)
(5,44,2)
(153,45,2)
(139,44,2)
(15,44,2)
(130,44,2)
(172,101,2)
(28,150,2)
(60,187,2)
(96,44,2)
(158,9,2)
(155,44,2)
(168,101,2)
(8,44,2)
(44,101,2)
(21,101,2)
(148,150,2)
(44,147,2)
(113,44,2)
(149,56,2)
(117,150,2)
(162,176,2)
(197,150,2)
(94,44,2)
(27,44,2)
(82,9,2)
(64,150,2)
(47,44,2)
(16,27,2)
(86,44,2)
(133,27,2)
(67,27,2)
(52,44,2)
(126,150,2)
(57,101,2)
(164,9,2)
(7,23,2)
(17,101,2)
(105,72,2)
(79,44,2)
(125,44,2)
(80,44,2)
(102,150,2)
(204,44,2)
(40,169,2)
(6,101,2)
(147,166,2)
(189,44,2)
(206,101,2)
(189,9,2)
(6,9,2)
(75,9,2)
(185,44,2)
-----------------------------------
(0,sizeof status)
(1,VLOG_DBG(details)
(2,port)
(3,acl->ovsdb_row->key_in_progress_aces)
(4,name)
(5,ovsdb_row)
(6,acl->ovsdb_row)
(7,ovsrec_acl_set_cur_aces(acl->ovsdb_row,\n\\n                                    acl->ovsdb_row->key_in_progress_aces,\n\\n                                    acl->ovsdb_row->value_in_progress_aces,\n\\n                                    acl->ovsdb_row->n_in_progress_aces)
(8,acl)
(9,struct acl* acl)
(10,ops_cls_list_new_from_acl(acl)
(11,acl)
(12,acl->ovsdb_row)
(13,)
(14,ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR)
(15,name)
(16,key_in_progress_aces)
(17,OPS_CLS_STATE_APPLIED_STR)
(18,details)
(19,OPS_CLS_STATUS_MSG_OP_UPDATE_STR)
(20,0)
(21,details)
(22,acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR,\n\\n                               0, status_str)
(23,acl->ovsdb_row->n_in_progress_aces)
(24,"ACL %s -- PD list_update succeeded")
(25,OPS_CLS_STATE_REJECTED_STR)
(26,acl->ovsdb_row)
(27,status.entry_id < acl->ovsdb_row->n_in_progress_aces)
(28,acl)
(29,acl)
(30,ovsdb_row)
(31,acl)
(32,acl->name)
(33,list)
(34,status_str)
(35,acl->ovsdb_row->key_in_progress_aces)
(36,OPS_CLS_STATE_APPLIED_STR)
(37,sequence_number =\n\\n                    acl->ovsdb_row->key_in_progress_aces[status.entry_id])
(38,acl)
(39,status_str)
(40,ovsrec_acl_set_cur_aces(acl->ovsdb_row,\n\\n                                acl->ovsdb_row->key_in_progress_aces,\n\\n                                acl->ovsdb_row->value_in_progress_aces,\n\\n                                acl->ovsdb_row->n_in_progress_aces)
(41,sizeof(details)
(42,ovsdb_row)
(43,status)
(44,rc == 0)
(45,sizeof(details)
(46,status_code)
(47,details)
(48,OPS_CLS_STATUS_MSG_IFACE_PORT_STR)
(49,status)
(50,ovsdb_row)
(51,)
(52,netdev)
(53,acl)
(54,ovsdb_row)
(55,acl->ovsdb_row->n_in_progress_aces)
(56,&status)
(57,status)
(58,list)
(59,&acl->acl_port_map)
(60,acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_APPLIED_STR, 0, status_str)
(61,&status)
(62,0)
(63,ovsdb_row)
(64,name)
(65,status_str)
(66,snprintf(details, sizeof(details)
(67,sequence_number)
(68,list)
(69,details)
(70,netdev)
(71,acl->cfg_pi)
(72,acl->ovsdb_row)
(73,rc)
(74,cfg_pi)
(75,acl->ovsdb_row)
(76,snprintf(status_str,OPS_CLS_STATUS_MSG_MAX_LEN,\n\\n                 ops_cls_status_table_get(OPS_CLS_STATUS_LIST_PARSE_ERR)
(77,OPS_CLS_STATE_REJECTED_STR)
(78,details)
(79,netdev_get_name(status.port->netdev)
(80,acl->ovsdb_row)
(81,OPS_CLS_STATUS_LIST_PARSE_ERR)
(82,acl->cfg_pi)
(83,acl->ovsdb_row)
(84,sequence_number)
(85,status.port)
(86,n_in_progress_aces)
(87,ovsdb_row)
(88,ops_cls_status_msgs_get(status.status_code,\n\\n                                    OPS_CLS_STATUS_MSG_OP_UPDATE_STR,\n\\n                                    OPS_CLS_STATUS_MSG_FEATURE_ACL_STR,\n\\n                                    OPS_CLS_STATUS_MSG_IFACE_PORT_STR,\n\\n                                    netdev_get_name(status.port->netdev)
(89,VLOG_WARN(status_str)
(90,list_is_empty(&acl->acl_port_map)
(91,acl)
(92,rc)
(93,acl)
(94,entry_id)
(95,list)
(96,status.status_code)
(97,ovsdb_row)
(98,acl)
(99,OPS_CLS_STATUS_MSG_FEATURE_ACL_STR)
(100,status.port->netdev)
(101,!list_is_empty(&acl->acl_port_map)
(102,cfg_pi)
(103,details)
(104,return;)
(105,acl->ovsdb_row->key_in_progress_aces)
(106,)
(107,ovsdb_row)
(108,"ACL %s -- Not applied. No PD call necessary")
(109,sequence_number)
(110,acl->cfg_pi = list)
(111,VLOG_DBG(details)
(112,acl)
(113,acl->name)
(114,status_str)
(115,sizeof(details)
(116,acl)
(117,acl_port_map)
(118,ovsdb_row)
(119,acl)
(120,OPS_CLS_STATUS_LIST_PARSE_ERR)
(121,rc)
(122,sequence_number)
(123,status)
(124,acl)
(125,status)
(126,acl->acl_port_map)
(127,if (rc == 0)
(128,status_str)
(129,acl)
(130,acl->ovsdb_row)
(131,status)
(132,ovsdb_row)
(133,acl)
(134,entry_id)
(135,netdev_get_name(status.port->netdev)
(136,sequence_number = 0)
(137,acl->ovsdb_row)
(138,)
(139,OPS_CLS_STATUS_MSG_MAX_LEN)
(140,status_str)
(141,details)
(142,acl->ovsdb_row)
(143,acl->ovsdb_row->n_in_progress_aces)
(144,acl->name)
(145,if (!list_is_empty(&acl->acl_port_map)
(146,acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,\n\\n                           OPS_CLS_STATUS_LIST_PARSE_ERR, status_str)
(147,rc = call_ofproto_ops_cls_list_update(acl, &status)
(148,acl)
(149,memset(&status, 0, sizeof status)
(150,!list)
(151,key_in_progress_aces)
(152,)
(153,snprintf(details, sizeof(details)
(154,snprintf(details, sizeof(details)
(155,acl)
(156,n_in_progress_aces)
(157,status.port)
(158,acl->ovsdb_row)
(159,key_in_progress_aces)
(160,status)
(161,status.entry_id)
(162,acl_set_cfg_status(acl->ovsdb_row, OPS_CLS_STATE_REJECTED_STR,\n\\n                               status.status_code, status_str)
(163,acl->ovsdb_row->key_in_progress_aces[status.entry_id])
(164,acl->ovsdb_row)
(165,status)
(166,call_ofproto_ops_cls_list_update(acl, &status)
(167,n_in_progress_aces)
(168,ovsdb_row)
(169,acl->ovsdb_row->value_in_progress_aces)
(170,RET)
(171,acl->ovsdb_row->value_in_progress_aces)
(172,details)
(173,value_in_progress_aces)
(174,ops_cls_list_delete(acl->cfg_pi)
(175,)
(176,status.status_code)
(177,status)
(178,status)
(179,status_str)
(180,status.port->netdev)
(181,)
(182,VLOG_DBG(details)
(183,acl)
(184,0)
(185,acl)
(186,0)
(187,status_str[OPS_CLS_STATUS_MSG_MAX_LEN] = {0})
(188,status_code)
(189,acl->ovsdb_row)
(190,port)
(191,*list = ops_cls_list_new_from_acl(acl)
(192,status.entry_id)
(193,status.entry_id)
(194,name)
(195,entry_id)
(196,status_str)
(197,OPS_CLS_STATUS_MSG_MAX_LEN)
(198,status)
(199,value_in_progress_aces)
(200,if (!list)
(201,acl->ovsdb_row)
(202,status_str)
(203,acl)
(204,"ACL %s -- PD list_update failed for"\n\\n                    " acl entry = %u and port = %s")
(205,details)
(206,ovsdb_row)
(207,0)
(208,if(status.entry_id < acl->ovsdb_row->n_in_progress_aces)
(209,acl)
(210,details)
(211,acl->name)
(212,acl)
(213,ovsdb_row)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^