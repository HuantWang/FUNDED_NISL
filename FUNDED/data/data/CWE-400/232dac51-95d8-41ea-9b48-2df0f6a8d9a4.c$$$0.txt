-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    struct _twoIntsStruct * data;
    data = NULL;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
103,104
104,105
106,107
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,65,66,67,68,74,75,76,77,81,85,87,91,92,97,98,101,102,105,107
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
70,71
70,72
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B(){    int h,j;    struct _twoIntsStruct * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    int h,j;    struct _twoIntsStruct * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int h,j;
int h,j;
int
h
h
j
j
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,20,0)
(23,31,0)
(21,49,0)
(0,39,0)
(4,30,0)
(8,20,0)
(18,43,0)
(43,18,0)
(12,29,0)
(52,29,0)
(53,1,0)
(25,23,0)
(40,44,0)
(1,17,0)
(2,37,0)
(16,43,0)
(40,34,0)
(5,51,0)
(43,26,0)
(36,51,0)
(11,29,0)
(49,34,0)
(48,40,0)
(39,31,0)
(44,40,0)
(47,4,0)
(30,4,0)
(35,32,0)
(15,20,0)
(55,20,0)
(43,16,0)
(16,31,0)
(1,34,0)
(44,47,0)
(13,32,0)
(34,31,0)
(38,54,0)
(10,20,0)
(3,32,0)
(34,40,0)
(54,34,0)
(54,50,0)
(50,39,0)
(27,54,0)
(41,11,0)
(46,17,0)
(56,50,0)
(4,47,0)
(17,1,0)
(40,48,0)
(26,49,0)
(6,49,0)
(26,43,0)
(37,29,0)
(33,22,0)
(28,37,0)
(19,22,0)
(51,32,0)
(14,20,0)
(17,23,0)
(24,34,0)
(7,47,0)
(49,26,0)
(42,1,0)
(47,44,0)
(45,35,0)
(50,54,0)
(38,27,1)
(4,30,1)
(21,6,1)
(51,32,1)
(45,16,1)
(5,32,1)
(42,53,1)
(12,51,1)
(40,48,1)
(35,32,1)
(27,23,1)
(17,46,1)
(29,52,1)
(28,2,1)
(0,50,1)
(4,7,1)
(3,13,1)
(50,54,1)
(52,12,1)
(32,3,1)
(6,39,1)
(9,37,1)
(53,34,1)
(16,43,1)
(1,34,1)
(44,47,1)
(19,33,1)
(37,28,1)
(2,11,1)
(54,34,1)
(23,25,1)
(39,0,1)
(46,1,1)
(41,37,1)
(5,35,1)
(24,51,1)
(11,29,1)
(13,22,1)
(1,42,1)
(37,29,1)
(54,38,1)
(49,21,1)
(2,29,1)
(26,49,1)
(35,45,1)
(56,54,1)
(47,4,1)
(51,36,1)
(22,19,1)
(11,41,1)
(7,24,1)
(36,5,1)
(25,17,1)
(17,1,1)
(50,56,1)
(34,40,1)
(49,34,1)
(40,44,1)
(43,18,1)
(43,26,1)
(49,51,2)
(34,40,2)
(43,51,2)
(7,51,2)
(37,37,2)
(34,51,2)
(28,37,2)
(49,34,2)
(1,34,2)
(47,51,2)
(24,51,2)
(16,51,2)
(51,51,2)
(50,51,2)
(35,32,2)
(54,34,2)
(26,49,2)
(47,4,2)
(43,26,2)
(35,51,2)
(44,47,2)
(40,51,2)
(53,51,2)
(23,51,2)
(46,51,2)
(11,37,2)
(37,29,2)
(43,18,2)
(56,51,2)
(17,51,2)
(0,51,2)
(38,51,2)
(42,51,2)
(1,51,2)
(25,51,2)
(16,43,2)
(44,51,2)
(39,51,2)
(50,54,2)
(6,51,2)
(54,51,2)
(36,51,2)
(2,37,2)
(21,51,2)
(17,1,2)
(45,51,2)
(26,51,2)
(51,32,2)
(40,44,2)
(5,51,2)
(40,48,2)
(41,37,2)
(27,51,2)
(4,30,2)
(4,51,2)
(11,29,2)
-----------------------------------
(0,0)
(1,data[0])
(2,j)
(3,0)
(4,sizeof(struct _twoIntsStruct)
(5,h)
(6,data)
(7,100)
(8,for(h = 0; h < 1; h++)
(9,RET)
(10,h)
(11,j++)
(12,j)
(13,h)
(14,for(j = 0; j < 1; j++)
(15,data)
(16,printStructLine((twoIntsStruct *)
(17,data[0].intOne)
(18,twoIntsStruct *)
(19,NULL)
(20,)
(21,0)
(22,data = NULL)
(23,data[0].intOne = 0)
(24,data)
(25,0)
(26,&data[0])
(27,data)
(28,1)
(29,j = 0)
(30,struct _twoIntsStruct)
(31,)
(32,h = 0)
(33,data)
(34,data = (struct _twoIntsStruct *)
(35,h++)
(36,1)
(37,j < 1)
(38,0)
(39,data[0].intTwo = 0)
(40,(struct _twoIntsStruct *)
(41,j)
(42,0)
(43,(twoIntsStruct *)
(44,ALLOCA(100*sizeof(struct _twoIntsStruct)
(45,h)
(46,intOne)
(47,100*sizeof(struct _twoIntsStruct)
(48,struct _twoIntsStruct *)
(49,data[0])
(50,data[0].intTwo)
(51,h < 1)
(52,0)
(53,data)
(54,data[0])
(55,j)
(56,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^