-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_10_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalTrue)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
50,52
51,52
51,53
52,53
55,56
57,58
58,59
60,61
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,16,19,24,27,30,36,38,40,45,46,49,53,54,56,59,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
43,44
43,45
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_10_bad(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_10_bad()
CWE400_Resource_Exhaustion__rand_for_loop_10_bad
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalTrue
globalTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(12,4,0)
(3,19,0)
(31,28,0)
(33,23,0)
(4,13,0)
(23,33,0)
(16,27,0)
(8,28,0)
(29,19,0)
(23,9,0)
(17,32,0)
(13,26,0)
(20,13,0)
(6,15,0)
(24,28,0)
(22,28,0)
(5,19,0)
(11,6,0)
(14,23,0)
(32,18,0)
(32,17,0)
(10,32,0)
(27,8,0)
(23,32,0)
(9,23,0)
(33,19,0)
(23,8,0)
(34,3,0)
(7,13,0)
(1,8,0)
(21,33,0)
(25,4,0)
(8,27,0)
(27,16,1)
(30,0,1)
(19,5,1)
(23,14,1)
(8,27,1)
(34,6,1)
(10,2,1)
(21,3,1)
(17,10,1)
(2,8,1)
(33,23,1)
(21,19,1)
(0,32,1)
(33,19,1)
(25,0,1)
(12,25,1)
(23,8,1)
(3,34,1)
(29,4,1)
(14,21,1)
(6,11,1)
(30,33,1)
(3,19,1)
(4,12,1)
(23,32,1)
(23,9,1)
(5,29,1)
(32,17,1)
(16,1,1)
(0,2,1)
(11,33,1)
(6,33,2)
(19,0,2)
(11,33,2)
(23,0,2)
(33,33,2)
(33,23,2)
(12,0,2)
(32,17,2)
(33,19,2)
(23,9,2)
(14,33,2)
(33,0,2)
(32,2,2)
(23,33,2)
(4,0,2)
(5,0,2)
(21,0,2)
(3,33,2)
(21,33,2)
(10,2,2)
(25,0,2)
(23,32,2)
(23,8,2)
(29,0,2)
(17,2,2)
(8,27,2)
(3,19,2)
(34,33,2)
(14,0,2)
-----------------------------------
(0,globalTrue)
(1,count)
(2,globalTrue)
(3,i++)
(4,i = 0)
(5,0)
(6,printLine("Hello")
(7,i)
(8,count = -1)
(9,size_t)
(10,count)
(11,"Hello")
(12,0)
(13,)
(14,count)
(15,)
(16,1)
(17,RAND32()
(18,)
(19,i = 0)
(20,for (i = 0; i < (size_t)
(21,i)
(22,count)
(23,(size_t)
(24,if(globalTrue)
(25,i)
(26,)
(27,-1)
(28,)
(29,i)
(30,RET)
(31,if(globalTrue)
(32,count = RAND32()
(33,i < (size_t)
(34,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^