-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
    else
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
116,117
116,118
118,119
118,120
121,122
121,123
121,124
122,123
122,124
123,124
125,126
125,127
126,127
128,129
130,131
130,132
130,133
130,134
130,135
131,132
132,133
132,134
133,134
135,136
135,137
136,137
136,138
138,139
140,141
140,142
141,142
143,144
143,145
144,145
146,147
147,148
147,149
150,151
150,152
151,152
151,153
152,153
154,155
156,157
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
164,167
165,166
167,168
169,170
171,172
172,173
172,174
173,174
175,176
177,178
178,179
178,180
179,180
181,182
183,184
184,185
185,186
185,187
186,187
-----nextToken-----
2,4,9,11,15,16,20,25,26,31,32,36,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112,117,119,120,124,127,129,134,137,139,142,145,148,149,153,155,160,162,166,168,170,174,176,180,182,187,188
-----computeFrom-----
13,14
13,15
23,24
23,25
29,30
29,31
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
122,123
122,124
132,133
132,134
143,144
143,145
151,152
151,153
-----guardedBy-----
53,94
48,69
129,170
124,145
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }    else    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(4,76,0)
(0,76,0)
(25,33,0)
(75,50,0)
(58,8,0)
(79,49,0)
(68,8,0)
(89,36,0)
(17,86,0)
(12,1,0)
(59,58,0)
(8,51,0)
(23,33,0)
(81,53,0)
(30,62,0)
(27,34,0)
(78,11,0)
(70,71,0)
(58,65,0)
(56,11,0)
(69,21,0)
(16,78,0)
(86,21,0)
(11,55,0)
(64,38,0)
(39,45,0)
(78,16,0)
(13,71,0)
(84,64,0)
(80,86,0)
(57,52,0)
(42,53,0)
(87,45,0)
(49,76,0)
(7,49,0)
(46,36,0)
(25,8,0)
(45,53,0)
(22,44,0)
(52,11,0)
(45,82,0)
(43,11,0)
(71,45,0)
(78,42,0)
(78,8,0)
(53,45,0)
(62,44,0)
(47,76,0)
(72,57,0)
(5,65,0)
(50,45,0)
(24,67,0)
(37,21,0)
(42,78,0)
(28,16,0)
(53,81,0)
(29,12,0)
(33,25,0)
(77,62,0)
(52,57,0)
(62,21,0)
(60,87,0)
(2,8,0)
(85,18,0)
(53,42,0)
(21,67,0)
(10,45,0)
(41,29,0)
(67,32,0)
(18,85,0)
(36,20,0)
(12,29,0)
(54,10,0)
(37,44,0)
(9,69,0)
(10,82,0)
(6,52,0)
(69,44,0)
(87,82,0)
(85,26,0)
(40,50,0)
(67,24,0)
(52,8,0)
(3,48,0)
(15,3,0)
(25,11,0)
(65,58,0)
(66,18,0)
(14,82,0)
(58,11,0)
(32,67,0)
(63,37,0)
(52,32,0)
(74,25,0)
(32,52,0)
(21,44,0)
(34,61,0)
(73,3,0)
(67,21,0)
(31,21,0)
(71,82,0)
(83,78,0)
(62,21,1)
(53,81,1)
(52,8,1)
(75,45,1)
(86,21,1)
(25,11,1)
(45,53,1)
(43,19,1)
(21,67,1)
(69,21,1)
(11,56,1)
(23,74,1)
(31,25,1)
(65,5,1)
(70,13,1)
(77,85,1)
(25,33,1)
(50,45,1)
(57,72,1)
(80,21,1)
(49,79,1)
(67,24,1)
(71,70,1)
(25,8,1)
(39,58,1)
(88,11,1)
(63,62,1)
(35,34,1)
(78,16,1)
(83,39,1)
(86,17,1)
(33,23,1)
(58,65,1)
(59,88,1)
(17,80,1)
(71,45,1)
(29,41,1)
(32,52,1)
(87,45,1)
(69,9,1)
(8,68,1)
(18,66,1)
(35,69,1)
(77,86,1)
(52,57,1)
(78,8,1)
(87,60,1)
(52,11,1)
(78,11,1)
(58,8,1)
(84,58,1)
(30,77,1)
(62,30,1)
(19,49,1)
(79,7,1)
(56,43,1)
(37,21,1)
(40,75,1)
(67,32,1)
(6,31,1)
(10,45,1)
(12,29,1)
(16,28,1)
(13,50,1)
(37,63,1)
(35,64,1)
(2,19,1)
(50,40,1)
(5,59,1)
(35,10,1)
(27,25,1)
(54,87,1)
(85,18,1)
(28,83,1)
(9,37,1)
(88,8,1)
(13,12,1)
(42,78,1)
(34,27,1)
(41,50,1)
(60,71,1)
(10,54,1)
(72,6,1)
(66,86,1)
(58,11,1)
(74,88,1)
(68,2,1)
(53,42,1)
(64,84,1)
(41,50,2)
(86,21,2)
(42,78,2)
(69,21,2)
(11,19,2)
(80,25,2)
(83,58,2)
(5,88,2)
(25,8,2)
(85,18,2)
(25,33,2)
(25,88,2)
(50,58,2)
(53,42,2)
(68,19,2)
(50,45,2)
(37,25,2)
(63,25,2)
(12,29,2)
(56,19,2)
(43,19,2)
(62,25,2)
(64,58,2)
(10,58,2)
(40,58,2)
(53,81,2)
(29,50,2)
(37,21,2)
(52,25,2)
(39,58,2)
(13,58,2)
(32,25,2)
(45,53,2)
(78,8,2)
(12,50,2)
(42,58,2)
(9,25,2)
(16,58,2)
(66,86,2)
(58,11,2)
(87,45,2)
(71,45,2)
(75,58,2)
(34,25,2)
(27,25,2)
(2,19,2)
(58,65,2)
(62,21,2)
(8,19,2)
(77,25,2)
(86,25,2)
(52,11,2)
(60,58,2)
(71,58,2)
(6,25,2)
(52,57,2)
(28,58,2)
(21,25,2)
(58,8,2)
(17,25,2)
(84,58,2)
(31,25,2)
(57,25,2)
(18,86,2)
(21,67,2)
(32,52,2)
(25,11,2)
(85,86,2)
(30,25,2)
(72,25,2)
(59,88,2)
(78,58,2)
(74,88,2)
(33,88,2)
(52,8,2)
(87,58,2)
(58,88,2)
(69,25,2)
(70,58,2)
(23,88,2)
(78,16,2)
(10,45,2)
(54,58,2)
(67,25,2)
(45,58,2)
(67,32,2)
(78,11,2)
(53,58,2)
(65,88,2)
(67,24,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,)
(4,if(globalReturnsTrueOrFalse()
(5,HELLO_STRING)
(6,data)
(7,data)
(8,data = 20)
(9,myString)
(10,free(myString)
(11,data = 20)
(12,exit(-1)
(13,myString)
(14,if (myString == NULL)
(15,if (data > strlen(HELLO_STRING)
(16,sizeof(char)
(17,NULL)
(18,-1)
(19,globalReturnsTrueOrFalse()
(20,)
(21,myString = (char *)
(22,if (myString == NULL)
(23,HELLO_STRING)
(24,char *)
(25,data > strlen(HELLO_STRING)
(26,)
(27,"Input is less than the length of the source string")
(28,char)
(29,-1)
(30,HELLO_STRING)
(31,myString)
(32,malloc(data*sizeof(char)
(33,strlen(HELLO_STRING)
(34,printLine("Input is less than the length of the source string")
(35,RET)
(36,)
(37,printLine(myString)
(38,)
(39,myString)
(40,NULL)
(41,1)
(42,malloc(data*sizeof(char)
(43,data)
(44,)
(45,myString = (char *)
(46,myString)
(47,if(globalReturnsTrueOrFalse()
(48,)
(49,data = 0)
(50,myString == NULL)
(51,)
(52,data*sizeof(char)
(53,(char *)
(54,myString)
(55,)
(56,20)
(57,sizeof(char)
(58,data > strlen(HELLO_STRING)
(59,data)
(60,myString)
(61,)
(62,strcpy(myString, HELLO_STRING)
(63,myString)
(64,printLine("Input is less than the length of the source string")
(65,strlen(HELLO_STRING)
(66,1)
(67,(char *)
(68,20)
(69,free(myString)
(70,HELLO_STRING)
(71,strcpy(myString, HELLO_STRING)
(72,char)
(73,myString)
(74,data)
(75,myString)
(76,)
(77,myString)
(78,data*sizeof(char)
(79,0)
(80,myString)
(81,char *)
(82,)
(83,data)
(84,"Input is less than the length of the source string")
(85,exit(-1)
(86,myString == NULL)
(87,printLine(myString)
(88,globalReturnsTrueOrFalse()
(89,if (data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^