-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_06_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
38,41
39,40
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,31,32,37,40,41,42,46,48,53,55
-----computeFrom-----
14,15
14,16
20,21
20,22
29,30
29,31
35,36
35,37
44,45
44,46
-----guardedBy-----
46,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_06_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_06_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_06_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(25,13,0)
(3,10,0)
(5,3,0)
(1,5,0)
(19,12,0)
(17,13,0)
(2,15,0)
(20,15,0)
(12,3,0)
(7,23,0)
(11,10,0)
(6,23,0)
(25,15,0)
(24,16,0)
(15,25,0)
(27,13,0)
(22,13,0)
(4,27,0)
(12,9,0)
(14,27,0)
(21,25,0)
(3,16,0)
(0,5,0)
(10,3,0)
(18,10,0)
(26,3,0)
(0,3,1)
(12,19,1)
(26,23,1)
(3,10,1)
(23,7,1)
(8,12,1)
(10,11,1)
(2,21,1)
(1,0,1)
(21,27,1)
(12,3,1)
(19,5,1)
(25,15,1)
(5,1,1)
(11,18,1)
(20,2,1)
(8,5,1)
(7,6,1)
(18,26,1)
(8,23,1)
(6,25,1)
(27,14,1)
(15,20,1)
(14,4,1)
(5,3,1)
(3,23,2)
(11,23,2)
(10,23,2)
(12,5,2)
(19,5,2)
(18,23,2)
(26,23,2)
(0,23,2)
(5,23,2)
(3,10,2)
(5,3,2)
(12,3,2)
(25,15,2)
(1,23,2)
-----------------------------------
(0,data)
(1,NULL)
(2,"BadSource_fopen.txt")
(3,data = fopen("BadSink_fopen.txt", "w+")
(4,data)
(5,data != NULL)
(6,STATIC_CONST_FIVE)
(7,5)
(8,RET)
(9,)
(10,fopen("BadSink_fopen.txt", "w+")
(11,"w+")
(12,fclose(data)
(13,)
(14,NULL)
(15,fopen("BadSource_fopen.txt", "w+")
(16,)
(17,data)
(18,"BadSink_fopen.txt")
(19,data)
(20,"w+")
(21,data)
(22,if(STATIC_CONST_FIVE==5)
(23,STATIC_CONST_FIVE==5)
(24,if (data != NULL)
(25,data = fopen("BadSource_fopen.txt", "w+")
(26,data)
(27,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^