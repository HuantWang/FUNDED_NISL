-----label-----
0
-----code-----
static void goodG2B1()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,20,25,26,31,34,36,39,41,44,45,50,51,52,56,59,60,63,65
-----computeFrom-----
13,14
13,15
29,30
29,31
40,41
40,42
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int * data;    data = NULL;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int * data;    data = NULL;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,14,0)
(22,3,0)
(20,31,0)
(18,23,0)
(28,30,0)
(17,26,0)
(13,3,0)
(16,28,0)
(29,5,0)
(5,3,0)
(18,30,0)
(4,20,0)
(15,30,0)
(12,18,0)
(1,15,0)
(7,3,0)
(0,5,0)
(30,15,0)
(26,14,0)
(6,30,0)
(20,4,0)
(8,31,0)
(28,26,0)
(15,4,0)
(31,20,0)
(27,19,0)
(2,27,0)
(15,1,0)
(9,28,0)
(25,20,0)
(23,18,0)
(24,18,0)
(23,14,0)
(4,15,0)
(18,26,0)
(12,24,1)
(6,10,1)
(11,27,1)
(31,8,1)
(11,23,1)
(8,25,1)
(18,26,1)
(18,12,1)
(15,1,1)
(15,4,1)
(16,30,1)
(27,2,1)
(2,10,1)
(24,26,1)
(28,9,1)
(21,11,1)
(4,20,1)
(28,30,1)
(10,5,1)
(18,30,1)
(17,28,1)
(25,6,1)
(29,0,1)
(9,16,1)
(20,31,1)
(30,15,1)
(23,18,1)
(5,29,1)
(26,17,1)
(17,10,2)
(30,10,2)
(25,10,2)
(6,10,2)
(4,10,2)
(18,30,2)
(8,10,2)
(15,4,2)
(18,10,2)
(4,20,2)
(16,10,2)
(23,18,2)
(15,1,2)
(26,10,2)
(15,10,2)
(31,10,2)
(20,10,2)
(23,10,2)
(30,15,2)
(12,10,2)
(28,10,2)
(18,26,2)
(24,10,2)
(2,10,2)
(9,10,2)
(27,10,2)
(28,30,2)
(20,31,2)
-----------------------------------
(0,data)
(1,int *)
(2,"Benign, fixed string")
(3,)
(4,ALLOCA(100*sizeof(int)
(5,data = NULL)
(6,data)
(7,data)
(8,int)
(9,0)
(10,GLOBAL_CONST_FALSE)
(11,GLOBAL_CONST_TRUE)
(12,0)
(13,if(GLOBAL_CONST_TRUE)
(14,)
(15,(int *)
(16,data)
(17,5)
(18,data[0])
(19,)
(20,100*sizeof(int)
(21,RET)
(22,if(GLOBAL_CONST_FALSE)
(23,printIntLine(data[0])
(24,data)
(25,100)
(26,data[0] = 5)
(27,printLine("Benign, fixed string")
(28,data[0])
(29,NULL)
(30,data = (int *)
(31,sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^