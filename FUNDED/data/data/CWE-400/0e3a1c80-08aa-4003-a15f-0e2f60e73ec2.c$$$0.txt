-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
97,98
99,100
101,102
101,103
102,103
103,104
103,105
105,106
105,107
105,108
108,109
109,110
110,111
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,66,67,71,73,78,80,84,86,87,91,93,98,100,104,106,107,111,112
-----computeFrom-----
35,36
35,37
52,53
52,54
69,70
69,71
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_32_bad()
CWE401_Memory_Leak__char_calloc_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(22,5,0)
(17,14,0)
(31,39,0)
(6,14,0)
(50,16,0)
(35,30,0)
(4,52,0)
(44,5,0)
(43,26,0)
(18,4,0)
(11,4,0)
(48,0,0)
(45,43,0)
(46,16,0)
(20,38,0)
(45,51,0)
(23,2,0)
(2,14,0)
(9,52,0)
(3,12,0)
(34,38,0)
(21,34,0)
(50,30,0)
(23,37,0)
(41,34,0)
(12,38,0)
(37,38,0)
(30,38,0)
(7,3,0)
(0,52,0)
(53,45,0)
(39,30,0)
(0,30,0)
(15,9,0)
(5,44,0)
(14,38,0)
(13,9,0)
(28,38,0)
(9,30,0)
(3,39,0)
(40,52,0)
(29,30,0)
(16,12,0)
(14,17,0)
(39,52,0)
(26,43,0)
(51,45,0)
(16,50,0)
(43,52,0)
(43,45,0)
(25,38,0)
(49,17,0)
(12,19,0)
(52,30,0)
(36,12,0)
(33,51,0)
(47,2,0)
(24,50,0)
(32,19,0)
(52,43,0)
(42,23,0)
(44,1,0)
(2,23,0)
(8,37,0)
(19,12,0)
(15,13,1)
(43,26,1)
(16,46,1)
(2,14,1)
(33,53,1)
(53,40,1)
(47,42,1)
(32,36,1)
(6,12,1)
(39,31,1)
(23,2,1)
(3,7,1)
(11,18,1)
(41,21,1)
(51,33,1)
(5,22,1)
(18,52,1)
(0,52,1)
(22,4,1)
(14,17,1)
(10,23,1)
(4,52,1)
(48,9,1)
(12,19,1)
(31,3,1)
(0,48,1)
(3,12,1)
(9,52,1)
(42,39,1)
(46,24,1)
(40,50,1)
(44,5,1)
(52,43,1)
(21,14,1)
(19,32,1)
(13,44,1)
(2,47,1)
(13,4,1)
(43,45,1)
(45,51,1)
(9,15,1)
(49,6,1)
(4,11,1)
(17,49,1)
(50,16,1)
(39,52,1)
(16,12,1)
(24,34,1)
(7,0,1)
(34,41,1)
(44,4,2)
(3,12,2)
(50,16,2)
(22,4,2)
(5,4,2)
(14,17,2)
(43,26,2)
(9,52,2)
(16,12,2)
(12,19,2)
(52,43,2)
(2,14,2)
(4,52,2)
(0,52,2)
(23,2,2)
(39,52,2)
(43,45,2)
(45,51,2)
(44,5,2)
-----------------------------------
(0,printLine(data)
(1,)
(2,*dataPtr2)
(3,*dataPtr1)
(4,data == NULL)
(5,-1)
(6,dataPtr2)
(7,dataPtr1)
(8,data)
(9,strcpy(data, "A String")
(10,RET)
(11,NULL)
(12,* *dataPtr1 = &data)
(13,data)
(14,* *dataPtr2 = &data)
(15,"A String")
(16,*dataPtr1)
(17,&data)
(18,data)
(19,&data)
(20,dataPtr2)
(21,data)
(22,1)
(23,* data = *dataPtr2)
(24,data)
(25,data)
(26,char *)
(27, sizeof(char)
(28,dataPtr1)
(29,if (data == NULL)
(30,)
(31,data)
(32,data)
(33,char)
(34,data = NULL)
(35,data)
(36,dataPtr1)
(37,)
(38,)
(39,*dataPtr1 = data)
(40,data)
(41,NULL)
(42,data)
(43,(char *)
(44,exit(-1)
(45,calloc(100, sizeof(char)
(46,dataPtr1)
(47,dataPtr2)
(48,data)
(49,data)
(50,* data = *dataPtr1)
(51,sizeof(char)
(52,data = (char *)
(53,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^