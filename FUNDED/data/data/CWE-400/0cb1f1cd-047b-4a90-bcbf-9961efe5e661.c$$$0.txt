-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(1)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
39,41
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,18,23,26,28,33,35,36,41,44,46,49,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
21,22
21,23
38,39
38,40
39,40
39,41
47,48
47,49
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
46,91
49,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
1
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(1,27,0)
(31,27,0)
(19,27,0)
(33,40,0)
(42,18,0)
(17,40,0)
(10,27,0)
(5,35,0)
(38,42,0)
(14,9,0)
(9,40,0)
(53,34,0)
(2,25,0)
(29,20,0)
(7,9,0)
(32,42,0)
(27,35,0)
(36,31,0)
(46,52,0)
(3,1,0)
(10,0,0)
(48,1,0)
(9,7,0)
(45,14,0)
(40,25,0)
(35,5,0)
(1,0,0)
(17,42,0)
(24,27,0)
(11,45,0)
(35,27,0)
(45,42,0)
(26,34,0)
(23,24,0)
(41,40,0)
(16,7,0)
(35,15,0)
(14,45,0)
(39,9,0)
(15,17,0)
(42,38,0)
(51,4,0)
(52,46,0)
(50,25,0)
(12,25,0)
(47,10,0)
(17,15,0)
(31,0,0)
(20,17,0)
(52,30,0)
(4,22,0)
(37,46,0)
(45,40,0)
(17,20,0)
(21,45,0)
(49,24,0)
(44,0,0)
(9,14,0)
(34,28,0)
(15,35,0)
(8,17,0)
(9,42,0)
(27,0,0)
(35,5,1)
(6,31,1)
(17,20,1)
(29,8,1)
(49,27,1)
(7,16,1)
(6,4,1)
(36,10,1)
(45,42,1)
(38,32,1)
(13,40,1)
(14,9,1)
(32,13,1)
(35,15,1)
(27,35,1)
(20,29,1)
(11,21,1)
(10,27,1)
(9,7,1)
(39,43,1)
(6,43,1)
(1,27,1)
(31,27,1)
(47,1,1)
(45,40,1)
(31,36,1)
(23,49,1)
(19,14,1)
(52,46,1)
(8,19,1)
(3,48,1)
(33,41,1)
(48,24,1)
(16,39,1)
(9,40,1)
(1,3,1)
(43,13,1)
(51,14,1)
(9,42,1)
(40,33,1)
(17,40,1)
(10,47,1)
(21,9,1)
(24,23,1)
(46,37,1)
(4,51,1)
(15,17,1)
(17,42,1)
(24,27,1)
(48,52,1)
(45,11,1)
(37,24,1)
(14,45,1)
(43,42,1)
(42,38,1)
(42,38,2)
(17,42,2)
(17,20,2)
(17,40,2)
(23,14,2)
(37,24,2)
(8,14,2)
(39,43,2)
(10,27,2)
(48,14,2)
(35,14,2)
(15,14,2)
(14,45,2)
(9,43,2)
(4,14,2)
(47,14,2)
(32,13,2)
(17,14,2)
(1,27,2)
(7,43,2)
(45,40,2)
(52,46,2)
(14,43,2)
(10,14,2)
(15,17,2)
(31,14,2)
(9,42,2)
(24,27,2)
(49,14,2)
(27,14,2)
(21,9,2)
(46,24,2)
(27,35,2)
(9,40,2)
(35,15,2)
(45,42,2)
(31,27,2)
(1,14,2)
(20,14,2)
(16,43,2)
(52,24,2)
(35,5,2)
(29,14,2)
(42,13,2)
(14,9,2)
(51,14,2)
(19,14,2)
(36,14,2)
(38,13,2)
(9,7,2)
(11,9,2)
(45,9,2)
(24,14,2)
(3,14,2)
-----------------------------------
(0,)
(1,strcpy(myString, HELLO_STRING)
(2,if(1)
(3,HELLO_STRING)
(4,printLine("Input is less than the length of the source string or too large")
(5,char *)
(6,RET)
(7,strlen(HELLO_STRING)
(8,data)
(9,data > strlen(HELLO_STRING)
(10,printLine(myString)
(11,100)
(12,if(1)
(13,1)
(14,data > strlen(HELLO_STRING)
(15,malloc(data*sizeof(char)
(16,HELLO_STRING)
(17,data*sizeof(char)
(18,)
(19,myString)
(20,sizeof(char)
(21,data)
(22,)
(23,NULL)
(24,myString == NULL)
(25,)
(26,myString)
(27,myString = (char *)
(28,)
(29,char)
(30,)
(31,free(myString)
(32,data)
(33,0)
(34,)
(35,(char *)
(36,myString)
(37,1)
(38,rand()
(39,data)
(40,data = 0)
(41,data)
(42,data = rand()
(43,1)
(44,if (myString == NULL)
(45,data < 100)
(46,-1)
(47,myString)
(48,myString)
(49,myString)
(50,data)
(51,"Input is less than the length of the source string or too large")
(52,exit(-1)
(53,if (data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^