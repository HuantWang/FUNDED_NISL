-----label-----
0
-----code-----
vm_page_t
vm_page_alloc(vm_object_t object, vm_pindex_t pindex, int req)
{
	vm_page_t m = NULL;
	int color, flags, page_req;

	page_req = req & VM_ALLOC_CLASS_MASK;
	KASSERT(curthread->td_intr_nesting_level == 0 ||
	    page_req == VM_ALLOC_INTERRUPT,
	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));

	if ((req & VM_ALLOC_NOOBJ) == 0) {
		KASSERT(object != NULL,
		    ("vm_page_alloc: NULL object."));
		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);
		color = (pindex + object->pg_color) & PQ_COLORMASK;
	} else
		color = pindex & PQ_COLORMASK;

	/*
	 * The pager is allowed to eat deeper into the free page list.
	 */
	if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {
		page_req = VM_ALLOC_SYSTEM;
	};

loop:
	mtx_lock_spin(&vm_page_queue_free_mtx);
	if (cnt.v_free_count > cnt.v_free_reserved ||
	    (page_req == VM_ALLOC_SYSTEM && 
	     cnt.v_cache_count == 0 && 
	     cnt.v_free_count > cnt.v_interrupt_free_min) ||
	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {
		/*
		 * Allocate from the free queue if the number of free pages
		 * exceeds the minimum for the request class.
		 */
		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);
	} else if (page_req != VM_ALLOC_INTERRUPT) {
		mtx_unlock_spin(&vm_page_queue_free_mtx);
		/*
		 * Allocatable from cache (non-interrupt only).  On success,
		 * we must free the page and try again, thus ensuring that
		 * cnt.v_*_free_min counters are replenished.
		 */
		vm_page_lock_queues();
		if ((m = vm_page_select_cache(color)) == NULL) {
			KASSERT(cnt.v_cache_count == 0,
			    ("vm_page_alloc: cache queue is missing %d pages",
			    cnt.v_cache_count));
			vm_page_unlock_queues();
			atomic_add_int(&vm_pageout_deficit, 1);
			pagedaemon_wakeup();

			if (page_req != VM_ALLOC_SYSTEM) 
				return NULL;

			mtx_lock_spin(&vm_page_queue_free_mtx);
			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {
				mtx_unlock_spin(&vm_page_queue_free_mtx);
				return (NULL);
			}
			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);
		} else {
			vm_page_unlock_queues();
			goto loop;
		}
	} else {
		/*
		 * Not allocatable from cache from interrupt, give up.
		 */
		mtx_unlock_spin(&vm_page_queue_free_mtx);
		atomic_add_int(&vm_pageout_deficit, 1);
		pagedaemon_wakeup();
		return (NULL);
	}

	/*
	 *  At this point we had better have found a good page.
	 */

	KASSERT(
	    m != NULL,
	    ("vm_page_alloc(): missing page on free queue")
	);

	/*
	 * Remove from free queue
	 */
	vm_pageq_remove_nowakeup(m);

	/*
	 * Initialize structure.  Only the PG_ZERO flag is inherited.
	 */
	flags = PG_BUSY;
	if (m->flags & PG_ZERO) {
		vm_page_zero_count--;
		if (req & VM_ALLOC_ZERO)
			flags = PG_ZERO | PG_BUSY;
	}
	if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))
		flags &= ~PG_BUSY;
	m->flags = flags;
	if (req & VM_ALLOC_WIRED) {
		atomic_add_int(&cnt.v_wire_count, 1);
		m->wire_count = 1;
	} else
		m->wire_count = 0;
	m->hold_count = 0;
	m->act_count = 0;
	m->busy = 0;
	m->valid = 0;
	KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));
	mtx_unlock_spin(&vm_page_queue_free_mtx);

	if ((req & VM_ALLOC_NOOBJ) == 0)
		vm_page_insert(m, object, pindex);
	else
		m->pindex = pindex;

	/*
	 * Don't wakeup too often - wakeup the pageout daemon when
	 * we would be nearly out of memory.
	 */
	if (vm_paging_needed())
		pagedaemon_wakeup();

	return (m);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
20,38
20,39
20,40
20,41
20,42
20,43
20,44
20,45
21,22
22,23
22,24
23,24
25,26
25,27
27,28
28,29
30,31
31,32
31,33
31,34
31,35
33,34
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
52,54
53,54
53,55
54,55
54,56
55,56
59,60
59,61
60,61
62,63
64,65
66,67
66,68
66,69
67,68
67,69
68,69
69,70
69,71
70,71
72,73
75,76
75,77
75,78
76,77
77,78
77,79
77,80
78,79
80,81
80,82
81,82
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
133,134
134,135
135,136
135,137
136,137
138,139
141,142
141,143
143,144
144,145
144,146
145,146
147,148
148,149
148,150
151,152
151,153
151,154
152,153
152,154
153,154
153,155
154,155
154,156
155,156
155,157
156,157
159,160
159,161
160,161
163,164
164,165
164,166
165,166
165,167
166,167
166,168
167,168
169,170
171,172
171,173
172,173
172,174
173,174
177,178
177,179
178,179
178,180
179,180
182,183
182,184
183,184
186,187
187,188
187,189
188,189
188,190
189,190
191,192
193,194
193,195
194,195
194,196
195,196
199,200
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
205,206
207,208
209,210
211,212
211,213
212,213
213,214
213,215
214,215
216,217
219,220
219,221
219,222
220,221
220,222
221,222
223,224
225,226
225,227
225,228
226,227
227,228
227,229
228,229
230,231
231,232
233,234
234,235
235,236
237,238
237,239
237,240
238,239
238,240
239,240
240,241
240,242
241,242
243,244
243,245
244,245
246,247
248,249
250,251
250,252
250,253
250,254
250,255
250,256
250,257
250,258
251,252
252,253
252,254
252,255
253,254
255,256
255,257
256,257
256,258
257,258
261,262
262,263
262,264
264,265
264,266
265,266
268,269
269,270
270,271
272,273
273,274
273,275
273,276
274,275
276,277
277,278
280,281
281,282
282,283
284,285
284,286
285,286
285,287
286,287
288,289
290,291
291,292
293,294
294,295
294,296
295,296
297,298
298,299
300,301
300,302
301,302
301,303
302,303
302,304
303,304
306,307
306,308
307,308
310,311
310,312
311,312
312,313
312,314
313,314
315,316
316,317
318,319
319,320
320,321
322,323
323,324
323,325
324,325
326,327
326,328
326,329
326,330
327,328
329,330
331,332
333,334
333,335
334,335
335,336
335,337
336,337
338,339
341,342
341,343
342,343
343,344
344,345
346,347
348,349
348,350
348,351
348,352
349,350
350,351
350,352
351,352
353,354
354,355
356,357
357,358
357,359
357,360
358,359
360,361
361,362
364,365
365,366
366,367
368,369
369,370
370,371
372,373
373,374
373,375
373,376
374,375
376,377
376,378
377,378
379,380
381,382
383,384
384,385
384,386
385,386
387,388
389,390
390,391
390,392
391,392
393,394
395,396
395,397
396,397
396,398
397,398
397,399
398,399
401,402
403,404
403,405
404,405
405,406
406,407
408,409
408,410
409,410
409,411
410,411
412,413
414,415
415,416
415,417
416,417
418,419
418,420
419,420
421,422
423,424
423,425
424,425
424,426
425,426
427,428
428,429
428,430
429,430
431,432
433,434
434,435
434,436
435,436
437,438
438,439
440,441
441,442
441,443
442,443
442,444
443,444
446,447
448,449
448,450
448,451
449,450
449,451
450,451
452,453
454,455
454,456
455,456
456,457
456,458
456,459
457,458
459,460
460,461
460,462
461,462
465,466
466,467
466,468
467,468
467,469
468,469
472,473
473,474
473,475
474,475
474,476
475,476
479,480
480,481
480,482
481,482
481,483
482,483
486,487
487,488
487,489
488,489
488,490
489,490
493,494
494,495
494,496
495,496
495,497
496,497
500,501
501,502
501,503
502,503
502,504
503,504
507,508
508,509
508,510
508,511
509,510
511,512
511,513
512,513
512,514
513,514
517,518
518,519
518,520
520,521
522,523
523,524
523,525
524,525
526,527
527,528
529,530
529,531
529,532
530,531
530,532
531,532
532,533
532,534
533,534
535,536
538,539
539,540
539,541
539,542
539,543
540,541
542,543
544,545
546,547
548,549
549,550
549,551
550,551
550,552
551,552
554,555
556,557
556,558
557,558
558,559
560,561
561,562
562,563
564,565
565,566
566,567
-----nextToken-----
3,5,8,10,13,15,17,19,24,26,29,32,34,36,38,42,45,47,51,56,57,58,61,63,65,71,73,74,79,82,84,86,90,92,94,98,103,106,107,109,113,116,118,124,126,130,132,137,139,140,142,146,149,150,157,158,161,162,168,170,174,175,176,180,181,184,185,190,192,196,197,198,203,206,208,210,215,217,218,222,224,229,232,236,242,245,247,249,254,258,259,260,263,266,267,271,275,278,279,283,287,289,292,296,299,304,305,308,309,314,317,321,325,328,330,332,337,339,340,345,347,352,355,359,362,363,367,371,375,378,380,382,386,388,392,394,399,400,402,407,411,413,417,420,422,426,430,432,436,439,444,445,447,451,453,458,462,463,464,469,470,471,476,477,478,483,484,485,490,491,492,497,498,499,504,505,506,510,514,515,516,519,521,525,528,534,536,537,541,543,545,547,552,553,555,559,563,567
-----computeFrom-----
40,41
40,42
43,44
43,45
52,53
52,54
53,54
53,55
59,60
59,61
67,68
67,69
69,70
69,71
80,81
80,82
96,97
96,98
99,100
99,101
101,102
101,103
111,112
111,113
114,115
114,116
120,121
120,122
122,123
122,124
128,129
128,130
135,136
135,137
152,153
152,154
153,154
153,155
154,155
154,156
164,165
164,166
165,166
165,167
166,167
166,168
171,172
171,173
177,178
177,179
187,188
187,189
188,189
188,190
193,194
193,195
201,202
201,203
211,212
211,213
213,214
213,215
220,221
220,222
238,239
238,240
240,241
240,242
255,256
255,257
285,286
285,287
301,302
301,303
323,324
323,325
333,334
333,335
335,336
335,337
376,377
376,378
390,391
390,392
396,397
396,398
409,410
409,411
415,416
415,417
418,419
418,420
424,425
424,426
428,429
428,430
434,435
434,436
441,442
441,443
449,450
449,451
466,467
466,468
473,474
473,475
480,481
480,482
487,488
487,489
494,495
494,496
501,502
501,503
511,512
511,513
530,531
530,532
532,533
532,534
549,550
549,551
-----guardedBy-----
130,137
222,287
249,321
247,332
242,325
400,417
402,420
-----guardedByNegation-----
190,287
170,289
196,308
197,305
175,267
192,224
185,309
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;NullStatement;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
vm_page_tvm_page_alloc(vm_object_t object, vm_pindex_t pindex, int req){	vm_page_t m = NULL;	int color, flags, page_req;	page_req = req & VM_ALLOC_CLASS_MASK;	KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));	if ((req & VM_ALLOC_NOOBJ) == 0) {		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_COLORMASK;	} else		color = pindex & PQ_COLORMASK;	/*	 * The pager is allowed to eat deeper into the free page list.	 */	if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {		page_req = VM_ALLOC_SYSTEM;	};loop:	mtx_lock_spin(&vm_page_queue_free_mtx);	if (cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	} else if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		} else {			vm_page_unlock_queues();			goto loop;		}	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}	/*	 *  At this point we had better have found a good page.	 */	KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	);	/*	 * Remove from free queue	 */	vm_pageq_remove_nowakeup(m);	/*	 * Initialize structure.  Only the PG_ZERO flag is inherited.	 */	flags = PG_BUSY;	if (m->flags & PG_ZERO) {		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}	if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))		flags &= ~PG_BUSY;	m->flags = flags;	if (req & VM_ALLOC_WIRED) {		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	} else		m->wire_count = 0;	m->hold_count = 0;	m->act_count = 0;	m->busy = 0;	m->valid = 0;	KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));	mtx_unlock_spin(&vm_page_queue_free_mtx);	if ((req & VM_ALLOC_NOOBJ) == 0)		vm_page_insert(m, object, pindex);	else		m->pindex = pindex;	/*	 * Don't wakeup too often - wakeup the pageout daemon when	 * we would be nearly out of memory.	 */	if (vm_paging_needed())		pagedaemon_wakeup();	return (m);}
vm_page_t
vm_page_t
vm_page_alloc(vm_object_t object, vm_pindex_t pindex, int req)
vm_page_alloc
vm_object_t object
vm_object_t
vm_object_t
object
object
vm_pindex_t pindex
vm_pindex_t
vm_pindex_t
pindex
pindex
int req
int
req
req
{	vm_page_t m = NULL;	int color, flags, page_req;	page_req = req & VM_ALLOC_CLASS_MASK;	KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));	if ((req & VM_ALLOC_NOOBJ) == 0) {		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_COLORMASK;	} else		color = pindex & PQ_COLORMASK;	/*	 * The pager is allowed to eat deeper into the free page list.	 */	if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {		page_req = VM_ALLOC_SYSTEM;	};loop:	mtx_lock_spin(&vm_page_queue_free_mtx);	if (cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	} else if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		} else {			vm_page_unlock_queues();			goto loop;		}	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}	/*	 *  At this point we had better have found a good page.	 */	KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	);	/*	 * Remove from free queue	 */	vm_pageq_remove_nowakeup(m);	/*	 * Initialize structure.  Only the PG_ZERO flag is inherited.	 */	flags = PG_BUSY;	if (m->flags & PG_ZERO) {		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}	if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))		flags &= ~PG_BUSY;	m->flags = flags;	if (req & VM_ALLOC_WIRED) {		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	} else		m->wire_count = 0;	m->hold_count = 0;	m->act_count = 0;	m->busy = 0;	m->valid = 0;	KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));	mtx_unlock_spin(&vm_page_queue_free_mtx);	if ((req & VM_ALLOC_NOOBJ) == 0)		vm_page_insert(m, object, pindex);	else		m->pindex = pindex;	/*	 * Don't wakeup too often - wakeup the pageout daemon when	 * we would be nearly out of memory.	 */	if (vm_paging_needed())		pagedaemon_wakeup();	return (m);}
vm_page_t m = NULL;
vm_page_t m = NULL;
vm_page_t
vm_page_t
m = NULL
m
= NULL
NULL
NULL
int color, flags, page_req;
int color, flags, page_req;
int
color
color
flags
flags
page_req
page_req
page_req = req & VM_ALLOC_CLASS_MASK;
page_req = req & VM_ALLOC_CLASS_MASK
page_req
page_req
req & VM_ALLOC_CLASS_MASK
req
req
VM_ALLOC_CLASS_MASK
VM_ALLOC_CLASS_MASK
KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));
KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"))
KASSERT
KASSERT
curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT
curthread->td_intr_nesting_level == 0
curthread->td_intr_nesting_level
curthread
curthread
td_intr_nesting_level
0
page_req == VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
("vm_page_alloc(NORMAL|SYSTEM) in interrupt context")
"vm_page_alloc(NORMAL|SYSTEM) in interrupt context"
if ((req & VM_ALLOC_NOOBJ) == 0) {		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_COLORMASK;	} else		color = pindex & PQ_COLORMASK;
(req & VM_ALLOC_NOOBJ) == 0
(req & VM_ALLOC_NOOBJ)
req & VM_ALLOC_NOOBJ
req
req
VM_ALLOC_NOOBJ
VM_ALLOC_NOOBJ
0
{		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_COLORMASK;	}
KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));
KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."))
KASSERT
KASSERT
object != NULL
object
object
NULL
NULL
("vm_page_alloc: NULL object.")
"vm_page_alloc: NULL object."
VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);
VM_OBJECT_LOCK_ASSERT(object, MA_OWNED)
VM_OBJECT_LOCK_ASSERT
VM_OBJECT_LOCK_ASSERT
object
object
MA_OWNED
MA_OWNED
color = (pindex + object->pg_color) & PQ_COLORMASK;
color = (pindex + object->pg_color) & PQ_COLORMASK
color
color
(pindex + object->pg_color) & PQ_COLORMASK
(pindex + object->pg_color)
pindex + object->pg_color
pindex
pindex
object->pg_color
object
object
pg_color
PQ_COLORMASK
PQ_COLORMASK
color = pindex & PQ_COLORMASK;
color = pindex & PQ_COLORMASK
color
color
pindex & PQ_COLORMASK
pindex
pindex
PQ_COLORMASK
PQ_COLORMASK
if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {		page_req = VM_ALLOC_SYSTEM;	}
(curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)
(curproc == pageproc)
curproc == pageproc
curproc
curproc
pageproc
pageproc
(page_req != VM_ALLOC_INTERRUPT)
page_req != VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
{		page_req = VM_ALLOC_SYSTEM;	}
page_req = VM_ALLOC_SYSTEM;
page_req = VM_ALLOC_SYSTEM
page_req
page_req
VM_ALLOC_SYSTEM
VM_ALLOC_SYSTEM
;
loop:	mtx_lock_spin(&vm_page_queue_free_mtx);
loop
mtx_lock_spin(&vm_page_queue_free_mtx);
mtx_lock_spin(&vm_page_queue_free_mtx);
mtx_lock_spin
mtx_lock_spin
(&vm_page_queue_free_mtx)
&vm_page_queue_free_mtx
&
vm_page_queue_free_mtx
if (cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	} else if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		} else {			vm_page_unlock_queues();			goto loop;		}	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}
cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)
cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min)
cnt.v_free_count > cnt.v_free_reserved
cnt.v_free_count
cnt
cnt
v_free_count
cnt.v_free_reserved
cnt
cnt
v_free_reserved
(page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min)
page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min
page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0
page_req == VM_ALLOC_SYSTEM
page_req
page_req
VM_ALLOC_SYSTEM
VM_ALLOC_SYSTEM
cnt.v_cache_count == 0
cnt.v_cache_count
cnt
cnt
v_cache_count
0
cnt.v_free_count > cnt.v_interrupt_free_min
cnt.v_free_count
cnt
cnt
v_free_count
cnt.v_interrupt_free_min
cnt
cnt
v_interrupt_free_min
(page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)
page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0
page_req == VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
cnt.v_free_count > 0
cnt.v_free_count
cnt
cnt
v_free_count
0
{		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	}
m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);
m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0)
m
m
vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0)
vm_pageq_find
vm_pageq_find
PQ_FREE
PQ_FREE
color
color
(req & VM_ALLOC_ZERO) != 0
(req & VM_ALLOC_ZERO)
req & VM_ALLOC_ZERO
req
req
VM_ALLOC_ZERO
VM_ALLOC_ZERO
0
if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		} else {			vm_page_unlock_queues();			goto loop;		}	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}
page_req != VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
{		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		} else {			vm_page_unlock_queues();			goto loop;		}	}
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_lock_queues();
vm_page_lock_queues()
vm_page_lock_queues
vm_page_lock_queues
if ((m = vm_page_select_cache(color)) == NULL) {			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		} else {			vm_page_unlock_queues();			goto loop;		}
(m = vm_page_select_cache(color)) == NULL
(m = vm_page_select_cache(color))
m = vm_page_select_cache(color)
m
m
vm_page_select_cache(color)
vm_page_select_cache
vm_page_select_cache
color
color
NULL
NULL
{			KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			if (page_req != VM_ALLOC_SYSTEM) 				return NULL;			mtx_lock_spin(&vm_page_queue_free_mtx);			if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}			m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);		}
KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count));
KASSERT(cnt.v_cache_count == 0,			    ("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count))
KASSERT
KASSERT
cnt.v_cache_count == 0
cnt.v_cache_count
cnt
cnt
v_cache_count
0
("vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count)
"vm_page_alloc: cache queue is missing %d pages",			    cnt.v_cache_count
"vm_page_alloc: cache queue is missing %d pages"
cnt.v_cache_count
cnt
cnt
v_cache_count
vm_page_unlock_queues();
vm_page_unlock_queues()
vm_page_unlock_queues
vm_page_unlock_queues
atomic_add_int(&vm_pageout_deficit, 1);
atomic_add_int(&vm_pageout_deficit, 1)
atomic_add_int
atomic_add_int
&vm_pageout_deficit
vm_pageout_deficit
vm_pageout_deficit
1
pagedaemon_wakeup();
pagedaemon_wakeup()
pagedaemon_wakeup
pagedaemon_wakeup
if (page_req != VM_ALLOC_SYSTEM) 				return NULL;
page_req != VM_ALLOC_SYSTEM
page_req
page_req
VM_ALLOC_SYSTEM
VM_ALLOC_SYSTEM
return NULL;
NULL
NULL
mtx_lock_spin(&vm_page_queue_free_mtx);
mtx_lock_spin(&vm_page_queue_free_mtx)
mtx_lock_spin
mtx_lock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
if (cnt.v_free_count <=  cnt.v_interrupt_free_min) {				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}
cnt.v_free_count <=  cnt.v_interrupt_free_min
cnt.v_free_count
cnt
cnt
v_free_count
cnt.v_interrupt_free_min
cnt
cnt
v_interrupt_free_min
{				mtx_unlock_spin(&vm_page_queue_free_mtx);				return (NULL);			}
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
return (NULL);
(NULL)
NULL
NULL
m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);
m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0)
m
m
vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0)
vm_pageq_find
vm_pageq_find
PQ_FREE
PQ_FREE
color
color
(req & VM_ALLOC_ZERO) != 0
(req & VM_ALLOC_ZERO)
req & VM_ALLOC_ZERO
req
req
VM_ALLOC_ZERO
VM_ALLOC_ZERO
0
{			vm_page_unlock_queues();			goto loop;		}
vm_page_unlock_queues();
vm_page_unlock_queues()
vm_page_unlock_queues
vm_page_unlock_queues
goto loop;
loop
{		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
atomic_add_int(&vm_pageout_deficit, 1);
atomic_add_int(&vm_pageout_deficit, 1)
atomic_add_int
atomic_add_int
&vm_pageout_deficit
vm_pageout_deficit
vm_pageout_deficit
1
pagedaemon_wakeup();
pagedaemon_wakeup()
pagedaemon_wakeup
pagedaemon_wakeup
return (NULL);
(NULL)
NULL
NULL
KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	);
KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	)
KASSERT
KASSERT
m != NULL
m
m
NULL
NULL
("vm_page_alloc(): missing page on free queue")
"vm_page_alloc(): missing page on free queue"
vm_pageq_remove_nowakeup(m);
vm_pageq_remove_nowakeup(m)
vm_pageq_remove_nowakeup
vm_pageq_remove_nowakeup
m
m
flags = PG_BUSY;
flags = PG_BUSY
flags
flags
PG_BUSY
PG_BUSY
if (m->flags & PG_ZERO) {		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}
m->flags & PG_ZERO
m->flags
m
m
flags
PG_ZERO
PG_ZERO
{		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}
vm_page_zero_count--;
vm_page_zero_count--
vm_page_zero_count
vm_page_zero_count
if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;
req & VM_ALLOC_ZERO
req
req
VM_ALLOC_ZERO
VM_ALLOC_ZERO
flags = PG_ZERO | PG_BUSY;
flags = PG_ZERO | PG_BUSY
flags
flags
PG_ZERO | PG_BUSY
PG_ZERO
PG_ZERO
PG_BUSY
PG_BUSY
if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))		flags &= ~PG_BUSY;
req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
req
req
(VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ
VM_ALLOC_NOBUSY
VM_ALLOC_NOBUSY
VM_ALLOC_NOOBJ
VM_ALLOC_NOOBJ
flags &= ~PG_BUSY;
flags &= ~PG_BUSY
flags
flags
~PG_BUSY
PG_BUSY
PG_BUSY
m->flags = flags;
m->flags = flags
m->flags
m
m
flags
flags
flags
if (req & VM_ALLOC_WIRED) {		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	} else		m->wire_count = 0;
req & VM_ALLOC_WIRED
req
req
VM_ALLOC_WIRED
VM_ALLOC_WIRED
{		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	}
atomic_add_int(&cnt.v_wire_count, 1);
atomic_add_int(&cnt.v_wire_count, 1)
atomic_add_int
atomic_add_int
&cnt.v_wire_count
cnt.v_wire_count
cnt
cnt
v_wire_count
1
m->wire_count = 1;
m->wire_count = 1
m->wire_count
m
m
wire_count
1
m->wire_count = 0;
m->wire_count = 0
m->wire_count
m
m
wire_count
0
m->hold_count = 0;
m->hold_count = 0
m->hold_count
m
m
hold_count
0
m->act_count = 0;
m->act_count = 0
m->act_count
m
m
act_count
0
m->busy = 0;
m->busy = 0
m->busy
m
m
busy
0
m->valid = 0;
m->valid = 0
m->valid
m
m
valid
0
KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));
KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m))
KASSERT
KASSERT
m->dirty == 0
m->dirty
m
m
dirty
0
("vm_page_alloc: free/cache page %p was dirty", m)
"vm_page_alloc: free/cache page %p was dirty", m
"vm_page_alloc: free/cache page %p was dirty"
m
m
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
if ((req & VM_ALLOC_NOOBJ) == 0)		vm_page_insert(m, object, pindex);	else		m->pindex = pindex;
(req & VM_ALLOC_NOOBJ) == 0
(req & VM_ALLOC_NOOBJ)
req & VM_ALLOC_NOOBJ
req
req
VM_ALLOC_NOOBJ
VM_ALLOC_NOOBJ
0
vm_page_insert(m, object, pindex);
vm_page_insert(m, object, pindex)
vm_page_insert
vm_page_insert
m
m
object
object
pindex
pindex
m->pindex = pindex;
m->pindex = pindex
m->pindex
m
m
pindex
pindex
pindex
if (vm_paging_needed())		pagedaemon_wakeup();
vm_paging_needed()
vm_paging_needed
vm_paging_needed
pagedaemon_wakeup();
pagedaemon_wakeup()
pagedaemon_wakeup
pagedaemon_wakeup
return (m);
(m)
m
m
-----joern-----
(35,161,0)
(162,264,0)
(105,281,0)
(169,213,0)
(36,56,0)
(107,86,0)
(154,34,0)
(276,257,0)
(181,83,0)
(17,39,0)
(131,147,0)
(79,189,0)
(7,302,0)
(224,194,0)
(216,49,0)
(135,270,0)
(206,49,0)
(5,63,0)
(57,146,0)
(84,247,0)
(240,49,0)
(172,109,0)
(65,189,0)
(208,244,0)
(106,16,0)
(9,236,0)
(124,269,0)
(175,49,0)
(126,24,0)
(286,59,0)
(90,160,0)
(6,173,0)
(288,176,0)
(253,259,0)
(31,49,0)
(121,49,0)
(88,288,0)
(94,98,0)
(45,182,0)
(123,203,0)
(67,237,0)
(66,86,0)
(54,115,0)
(100,83,0)
(14,11,0)
(301,185,0)
(132,75,0)
(80,94,0)
(78,102,0)
(43,47,0)
(27,245,0)
(22,139,0)
(167,284,0)
(148,49,0)
(292,160,0)
(61,49,0)
(302,49,0)
(153,276,0)
(158,257,0)
(34,238,0)
(301,160,0)
(91,146,0)
(102,188,0)
(282,60,0)
(222,72,0)
(189,160,0)
(133,114,0)
(284,167,0)
(247,267,0)
(298,203,0)
(189,42,0)
(313,118,0)
(129,52,0)
(289,241,0)
(93,299,0)
(300,244,0)
(212,284,0)
(38,173,0)
(299,66,0)
(312,242,0)
(217,299,0)
(189,56,0)
(244,296,0)
(0,139,0)
(47,168,0)
(157,102,0)
(23,282,0)
(292,242,0)
(147,36,0)
(174,300,0)
(281,226,0)
(275,94,0)
(271,63,0)
(8,47,0)
(202,124,0)
(269,124,0)
(272,257,0)
(101,156,0)
(32,194,0)
(84,160,0)
(67,218,0)
(275,160,0)
(264,237,0)
(271,102,0)
(18,269,0)
(123,185,0)
(5,296,0)
(40,176,0)
(296,221,0)
(91,42,0)
(145,62,0)
(63,272,0)
(129,22,0)
(142,283,0)
(81,160,0)
(53,255,0)
(290,103,0)
(291,70,0)
(13,123,0)
(195,124,0)
(71,118,0)
(156,96,0)
(1,156,0)
(303,125,0)
(21,49,0)
(173,8,0)
(296,244,0)
(84,185,0)
(168,269,0)
(118,313,0)
(74,76,0)
(241,15,0)
(82,267,0)
(255,265,0)
(86,66,0)
(285,272,0)
(119,245,0)
(103,240,0)
(72,69,0)
(311,49,0)
(29,63,0)
(96,156,0)
(89,26,0)
(256,83,0)
(163,237,0)
(57,147,0)
(98,94,0)
(180,42,0)
(263,36,0)
(114,313,0)
(308,182,0)
(259,295,0)
(138,39,0)
(85,49,0)
(295,49,0)
(75,104,0)
(166,221,0)
(66,43,0)
(103,160,0)
(295,302,0)
(234,8,0)
(46,69,0)
(47,43,0)
(90,206,0)
(196,49,0)
(231,284,0)
(114,63,0)
(274,84,0)
(244,300,0)
(24,41,0)
(240,103,0)
(262,49,0)
(246,214,0)
(26,160,0)
(144,114,0)
(125,303,0)
(221,49,0)
(215,213,0)
(213,169,0)
(207,52,0)
(261,26,0)
(24,234,0)
(4,72,0)
(228,220,0)
(165,91,0)
(187,265,0)
(173,63,0)
(83,100,0)
(271,168,0)
(163,39,0)
(193,84,0)
(223,49,0)
(61,160,0)
(239,223,0)
(170,76,0)
(111,176,0)
(61,185,0)
(273,226,0)
(160,275,0)
(103,185,0)
(48,41,0)
(191,307,0)
(310,49,0)
(100,143,0)
(213,69,0)
(97,151,0)
(43,66,0)
(47,8,0)
(280,271,0)
(228,257,0)
(294,301,0)
(155,292,0)
(98,257,0)
(30,180,0)
(232,162,0)
(291,139,0)
(58,259,0)
(64,276,0)
(12,218,0)
(200,62,0)
(104,139,0)
(197,228,0)
(278,237,0)
(277,42,0)
(164,289,0)
(220,228,0)
(120,189,0)
(167,245,0)
(109,56,0)
(2,16,0)
(266,301,0)
(194,302,0)
(99,143,0)
(26,185,0)
(194,303,0)
(185,72,0)
(178,109,0)
(251,277,0)
(275,69,0)
(72,57,0)
(11,160,0)
(59,169,0)
(238,34,0)
(199,22,0)
(309,240,0)
(96,82,0)
(159,49,0)
(108,308,0)
(76,102,0)
(169,59,0)
(147,57,0)
(149,220,0)
(128,90,0)
(66,299,0)
(234,24,0)
(296,5,0)
(258,104,0)
(11,185,0)
(116,2,0)
(243,272,0)
(16,2,0)
(225,302,0)
(40,49,0)
(37,143,0)
(313,114,0)
(227,78,0)
(72,185,0)
(255,257,0)
(62,40,0)
(185,237,0)
(8,173,0)
(245,167,0)
(192,158,0)
(28,56,0)
(306,206,0)
(204,185,0)
(260,11,0)
(55,5,0)
(90,185,0)
(281,160,0)
(40,62,0)
(140,275,0)
(209,237,0)
(36,147,0)
(117,67,0)
(219,138,0)
(87,247,0)
(143,100,0)
(122,271,0)
(129,223,0)
(69,109,0)
(279,158,0)
(115,49,0)
(259,185,0)
(293,246,0)
(269,168,0)
(26,121,0)
(100,234,0)
(10,57,0)
(259,160,0)
(248,265,0)
(305,102,0)
(160,229,0)
(95,49,0)
(307,180,0)
(3,115,0)
(295,303,0)
(270,49,0)
(77,125,0)
(129,161,0)
(198,61,0)
(109,69,0)
(137,15,0)
(236,148,0)
(283,49,0)
(235,238,0)
(33,277,0)
(184,275,0)
(76,63,0)
(223,160,0)
(201,180,0)
(189,185,0)
(233,292,0)
(221,296,0)
(307,146,0)
(186,98,0)
(94,275,0)
(272,63,0)
(213,57,0)
(78,63,0)
(179,2,0)
(203,123,0)
(265,255,0)
(104,75,0)
(52,314,0)
(39,163,0)
(41,24,0)
(238,163,0)
(123,160,0)
(19,60,0)
(70,291,0)
(2,257,0)
(25,125,0)
(252,281,0)
(264,162,0)
(250,98,0)
(301,270,0)
(150,123,0)
(211,295,0)
(72,16,0)
(168,271,0)
(176,288,0)
(214,246,0)
(44,121,0)
(304,70,0)
(230,28,0)
(288,185,0)
(183,138,0)
(16,72,0)
(281,185,0)
(36,277,0)
(152,237,0)
(134,103,0)
(277,36,0)
(287,5,0)
(234,100,0)
(180,307,0)
(275,57,0)
(50,169,0)
(11,28,0)
(141,303,0)
(92,49,0)
(163,238,0)
(82,96,0)
(242,49,0)
(268,288,0)
(254,86,0)
(68,118,0)
(210,78,0)
(127,142,0)
(168,47,0)
(205,300,0)
(182,257,0)
(177,34,0)
(20,182,0)
(292,185,0)
(130,49,0)
(73,15,0)
(241,289,0)
(112,228,0)
(176,40,0)
(214,314,0)
(288,160,0)
(182,308,0)
(171,151,0)
(136,237,0)
(190,82,0)
(223,185,0)
(173,102,0)
(218,67,0)
(63,49,0)
(110,41,0)
(8,234,0)
(148,236,0)
(113,90,0)
(297,91,0)
(283,142,0)
(135,301,1)
(35,76,1)
(23,203,1)
(134,160,1)
(78,102,1)
(76,63,1)
(231,245,1)
(256,181,1)
(147,36,1)
(148,236,1)
(78,210,1)
(161,35,1)
(108,182,1)
(244,300,1)
(308,108,1)
(292,160,1)
(309,103,1)
(277,42,1)
(55,244,1)
(16,2,1)
(259,185,1)
(149,228,1)
(123,185,1)
(288,185,1)
(200,176,1)
(94,98,1)
(136,163,1)
(89,226,1)
(189,185,1)
(211,259,1)
(163,238,1)
(119,27,1)
(182,257,1)
(173,6,1)
(40,62,1)
(303,125,1)
(158,279,1)
(44,26,1)
(288,88,1)
(228,257,1)
(219,183,1)
(252,276,1)
(167,284,1)
(33,263,1)
(9,102,1)
(100,83,1)
(97,59,1)
(70,304,1)
(255,257,1)
(137,241,1)
(79,120,1)
(0,104,1)
(51,28,1)
(129,223,1)
(131,36,1)
(295,302,1)
(298,123,1)
(292,233,1)
(253,58,1)
(295,303,1)
(101,276,1)
(289,164,1)
(301,185,1)
(84,185,1)
(142,127,1)
(24,41,1)
(145,200,1)
(305,313,1)
(133,118,1)
(166,296,1)
(271,102,1)
(155,270,1)
(68,71,1)
(67,218,1)
(272,257,1)
(112,197,1)
(103,185,1)
(239,51,1)
(228,112,1)
(36,277,1)
(126,41,1)
(26,185,1)
(295,211,1)
(290,134,1)
(226,273,1)
(43,47,1)
(46,308,1)
(8,173,1)
(120,220,1)
(28,56,1)
(61,185,1)
(223,185,1)
(181,143,1)
(99,37,1)
(7,225,1)
(111,288,1)
(66,86,1)
(169,213,1)
(238,34,1)
(78,63,1)
(275,69,1)
(293,167,1)
(189,42,1)
(50,137,1)
(63,272,1)
(58,255,1)
(138,219,1)
(129,52,1)
(11,185,1)
(121,44,1)
(273,281,1)
(64,153,1)
(65,79,1)
(308,182,1)
(205,63,1)
(83,256,1)
(245,119,1)
(167,245,1)
(104,75,1)
(297,165,1)
(268,242,1)
(236,9,1)
(189,56,1)
(180,42,1)
(208,300,1)
(276,64,1)
(191,180,1)
(109,178,1)
(76,102,1)
(90,160,1)
(26,261,1)
(77,141,1)
(288,160,1)
(144,133,1)
(261,89,1)
(168,271,1)
(98,257,1)
(277,251,1)
(114,63,1)
(230,11,1)
(243,285,1)
(129,22,1)
(182,45,1)
(190,96,1)
(173,102,1)
(32,224,1)
(304,78,1)
(260,14,1)
(3,54,1)
(210,227,1)
(59,169,1)
(283,142,1)
(123,150,1)
(292,185,1)
(195,202,1)
(275,94,1)
(47,8,1)
(12,136,1)
(114,144,1)
(281,105,1)
(86,107,1)
(2,257,1)
(259,160,1)
(173,63,1)
(186,184,1)
(87,84,1)
(244,208,1)
(254,299,1)
(90,185,1)
(189,160,1)
(183,17,1)
(53,303,1)
(102,157,1)
(172,46,1)
(8,234,1)
(127,40,1)
(124,195,1)
(53,158,1)
(5,287,1)
(170,74,1)
(67,117,1)
(91,42,1)
(220,228,1)
(285,29,1)
(202,271,1)
(275,57,1)
(2,116,1)
(160,275,1)
(84,274,1)
(291,70,1)
(206,306,1)
(223,239,1)
(75,132,1)
(103,290,1)
(212,231,1)
(270,135,1)
(185,72,1)
(296,244,1)
(25,77,1)
(224,255,1)
(28,230,1)
(71,57,1)
(189,65,1)
(251,33,1)
(20,221,1)
(286,169,1)
(281,160,1)
(163,39,1)
(247,87,1)
(223,160,1)
(157,305,1)
(294,266,1)
(213,215,1)
(80,98,1)
(4,222,1)
(147,131,1)
(306,90,1)
(123,160,1)
(16,106,1)
(246,293,1)
(40,145,1)
(81,43,1)
(36,56,1)
(272,243,1)
(176,111,1)
(156,1,1)
(113,121,1)
(221,166,1)
(61,160,1)
(9,171,1)
(282,23,1)
(284,212,1)
(30,201,1)
(89,247,1)
(58,194,1)
(164,78,1)
(103,160,1)
(61,198,1)
(271,280,1)
(90,128,1)
(184,140,1)
(51,189,1)
(207,214,1)
(14,220,1)
(53,203,1)
(215,50,1)
(72,16,1)
(279,192,1)
(115,3,1)
(93,217,1)
(307,180,1)
(106,2,1)
(201,308,1)
(248,53,1)
(203,298,1)
(43,66,1)
(6,38,1)
(280,122,1)
(18,124,1)
(239,249,1)
(96,156,1)
(150,13,1)
(13,302,1)
(233,155,1)
(17,238,1)
(110,173,1)
(84,160,1)
(178,172,1)
(214,246,1)
(266,206,1)
(158,257,1)
(250,186,1)
(204,167,1)
(187,248,1)
(72,69,1)
(118,68,1)
(26,160,1)
(193,82,1)
(197,283,1)
(213,69,1)
(259,253,1)
(194,302,1)
(69,109,1)
(255,265,1)
(162,232,1)
(299,93,1)
(100,143,1)
(241,289,1)
(122,8,1)
(179,4,1)
(57,147,1)
(1,101,1)
(134,185,1)
(117,218,1)
(91,297,1)
(52,207,1)
(45,20,1)
(287,55,1)
(143,99,1)
(312,292,1)
(227,43,1)
(274,193,1)
(132,291,1)
(269,124,1)
(199,0,1)
(192,282,1)
(232,76,1)
(163,138,1)
(125,25,1)
(38,66,1)
(24,126,1)
(307,191,1)
(264,162,1)
(104,258,1)
(269,18,1)
(41,48,1)
(82,96,1)
(22,199,1)
(234,100,1)
(271,63,1)
(165,307,1)
(109,56,1)
(37,24,1)
(94,80,1)
(313,114,1)
(59,286,1)
(105,252,1)
(301,160,1)
(129,161,1)
(220,149,1)
(107,254,1)
(74,152,1)
(47,168,1)
(9,313,1)
(153,295,1)
(258,75,1)
(82,190,1)
(296,5,1)
(265,187,1)
(177,154,1)
(313,118,1)
(34,177,1)
(11,160,1)
(29,115,1)
(180,30,1)
(174,205,1)
(249,51,1)
(176,288,1)
(27,264,1)
(11,260,1)
(234,24,1)
(76,170,1)
(171,97,1)
(141,158,1)
(140,81,1)
(40,176,1)
(48,110,1)
(88,268,1)
(154,59,1)
(66,299,1)
(198,240,1)
(240,103,1)
(225,61,1)
(168,269,1)
(238,235,1)
(281,185,1)
(218,12,1)
(72,57,1)
(222,204,1)
(152,67,1)
(217,148,1)
(194,32,1)
(240,309,1)
(263,10,1)
(276,257,1)
(98,250,1)
(235,34,1)
(213,57,1)
(203,123,1)
(10,91,1)
(116,179,1)
(5,63,1)
(194,303,1)
(242,312,1)
(301,294,1)
(128,113,1)
(71,69,1)
(300,174,1)
(302,7,1)
(221,296,1)
(64,43,2)
(57,308,2)
(9,59,2)
(201,308,2)
(100,24,2)
(2,167,2)
(37,24,2)
(134,167,2)
(64,167,2)
(24,41,2)
(84,185,2)
(303,158,2)
(17,59,2)
(168,269,2)
(248,167,2)
(299,59,2)
(78,102,2)
(199,78,2)
(271,63,2)
(292,167,2)
(275,69,2)
(253,43,2)
(228,257,2)
(32,255,2)
(101,276,2)
(234,100,2)
(176,288,2)
(297,308,2)
(259,43,2)
(58,167,2)
(203,123,2)
(294,43,2)
(59,169,2)
(203,43,2)
(289,78,2)
(89,167,2)
(223,43,2)
(113,167,2)
(271,8,2)
(236,59,2)
(233,43,2)
(246,167,2)
(100,143,2)
(293,167,2)
(165,308,2)
(295,303,2)
(51,167,2)
(13,43,2)
(88,43,2)
(152,59,2)
(47,8,2)
(294,167,2)
(182,257,2)
(178,308,2)
(235,59,2)
(121,167,2)
(189,220,2)
(1,276,2)
(291,78,2)
(279,203,2)
(91,42,2)
(69,308,2)
(69,109,2)
(43,66,2)
(184,43,2)
(263,308,2)
(129,161,2)
(129,223,2)
(46,308,2)
(149,43,2)
(172,308,2)
(187,43,2)
(265,43,2)
(90,185,2)
(170,59,2)
(53,167,2)
(133,118,2)
(189,160,2)
(113,43,2)
(283,142,2)
(6,66,2)
(123,185,2)
(306,167,2)
(114,118,2)
(66,86,2)
(72,57,2)
(25,158,2)
(145,43,2)
(185,72,2)
(221,296,2)
(10,308,2)
(309,43,2)
(61,167,2)
(238,59,2)
(255,265,2)
(176,167,2)
(198,43,2)
(163,39,2)
(102,313,2)
(112,43,2)
(16,2,2)
(58,43,2)
(141,158,2)
(220,167,2)
(302,167,2)
(112,167,2)
(96,276,2)
(72,16,2)
(148,236,2)
(160,275,2)
(259,167,2)
(164,78,2)
(76,63,2)
(34,59,2)
(36,277,2)
(116,167,2)
(7,43,2)
(94,43,2)
(127,43,2)
(193,276,2)
(79,220,2)
(117,59,2)
(284,76,2)
(283,43,2)
(72,69,2)
(155,167,2)
(198,167,2)
(82,276,2)
(291,70,2)
(259,160,2)
(67,59,2)
(18,271,2)
(47,66,2)
(128,167,2)
(264,76,2)
(238,34,2)
(57,147,2)
(36,56,2)
(143,24,2)
(286,78,2)
(84,160,2)
(119,76,2)
(88,167,2)
(157,313,2)
(272,257,2)
(215,78,2)
(74,59,2)
(296,5,2)
(253,167,2)
(189,185,2)
(301,185,2)
(140,43,2)
(306,43,2)
(89,43,2)
(274,276,2)
(231,76,2)
(233,167,2)
(218,59,2)
(61,160,2)
(185,167,2)
(265,167,2)
(103,167,2)
(187,167,2)
(249,51,2)
(8,173,2)
(8,234,2)
(109,56,2)
(126,173,2)
(67,218,2)
(190,276,2)
(123,160,2)
(61,43,2)
(219,59,2)
(33,308,2)
(213,69,2)
(290,43,2)
(66,299,2)
(40,167,2)
(268,167,2)
(302,43,2)
(206,43,2)
(111,43,2)
(292,185,2)
(179,167,2)
(8,66,2)
(97,59,2)
(191,308,2)
(268,43,2)
(44,43,2)
(78,63,2)
(169,213,2)
(148,59,2)
(120,220,2)
(222,167,2)
(90,167,2)
(204,167,2)
(313,114,2)
(283,167,2)
(280,8,2)
(0,78,2)
(44,167,2)
(90,43,2)
(277,42,2)
(266,43,2)
(210,43,2)
(220,228,2)
(171,59,2)
(14,220,2)
(55,244,2)
(155,43,2)
(183,59,2)
(173,63,2)
(298,167,2)
(105,276,2)
(223,185,2)
(40,62,2)
(292,43,2)
(261,167,2)
(189,42,2)
(128,43,2)
(50,78,2)
(295,43,2)
(163,238,2)
(206,167,2)
(158,203,2)
(269,124,2)
(93,59,2)
(12,59,2)
(135,43,2)
(86,59,2)
(227,43,2)
(134,43,2)
(261,43,2)
(153,167,2)
(270,167,2)
(81,43,2)
(5,63,2)
(232,76,2)
(226,276,2)
(240,43,2)
(173,102,2)
(123,167,2)
(288,43,2)
(147,308,2)
(90,160,2)
(186,43,2)
(234,173,2)
(109,308,2)
(309,167,2)
(100,83,2)
(228,167,2)
(147,36,2)
(2,257,2)
(111,167,2)
(107,59,2)
(200,43,2)
(7,167,2)
(129,52,2)
(43,47,2)
(122,8,2)
(168,8,2)
(104,78,2)
(99,24,2)
(125,158,2)
(239,43,2)
(275,57,2)
(96,156,2)
(61,185,2)
(52,167,2)
(295,167,2)
(28,56,2)
(264,162,2)
(156,276,2)
(271,102,2)
(260,220,2)
(104,75,2)
(98,257,2)
(251,308,2)
(301,160,2)
(78,43,2)
(194,302,2)
(255,167,2)
(98,43,2)
(48,173,2)
(180,308,2)
(106,167,2)
(127,167,2)
(47,168,2)
(276,257,2)
(137,78,2)
(142,167,2)
(254,59,2)
(82,96,2)
(252,276,2)
(207,167,2)
(40,43,2)
(173,66,2)
(22,78,2)
(245,76,2)
(83,24,2)
(214,167,2)
(38,66,2)
(203,167,2)
(197,43,2)
(138,59,2)
(167,284,2)
(312,43,2)
(72,167,2)
(80,43,2)
(124,271,2)
(163,59,2)
(161,76,2)
(41,173,2)
(40,176,2)
(281,185,2)
(30,308,2)
(35,76,2)
(189,56,2)
(259,185,2)
(13,167,2)
(177,59,2)
(202,271,2)
(153,43,2)
(296,244,2)
(192,203,2)
(241,289,2)
(167,76,2)
(131,308,2)
(28,220,2)
(110,173,2)
(53,43,2)
(167,245,2)
(240,103,2)
(160,43,2)
(103,185,2)
(244,300,2)
(63,272,2)
(51,43,2)
(75,78,2)
(145,167,2)
(212,76,2)
(27,76,2)
(154,59,2)
(248,43,2)
(84,276,2)
(292,160,2)
(5,244,2)
(150,43,2)
(287,244,2)
(4,167,2)
(228,43,2)
(234,24,2)
(26,43,2)
(288,185,2)
(158,257,2)
(273,276,2)
(70,78,2)
(281,276,2)
(308,182,2)
(11,220,2)
(76,102,2)
(36,308,2)
(275,94,2)
(66,59,2)
(91,308,2)
(270,43,2)
(230,220,2)
(23,203,2)
(24,173,2)
(290,167,2)
(307,180,2)
(59,78,2)
(276,43,2)
(162,76,2)
(214,246,2)
(301,43,2)
(76,59,2)
(223,167,2)
(295,302,2)
(223,160,2)
(194,255,2)
(114,63,2)
(225,167,2)
(87,276,2)
(298,43,2)
(269,271,2)
(241,78,2)
(149,167,2)
(121,43,2)
(313,118,2)
(256,24,2)
(129,22,2)
(194,303,2)
(250,43,2)
(150,167,2)
(132,78,2)
(276,167,2)
(224,255,2)
(195,271,2)
(169,78,2)
(103,160,2)
(240,167,2)
(247,276,2)
(288,160,2)
(220,43,2)
(303,125,2)
(11,160,2)
(255,257,2)
(304,78,2)
(312,167,2)
(282,203,2)
(211,167,2)
(77,158,2)
(242,43,2)
(168,271,2)
(11,185,2)
(305,313,2)
(200,167,2)
(144,118,2)
(217,59,2)
(239,167,2)
(197,167,2)
(123,43,2)
(266,167,2)
(225,43,2)
(94,98,2)
(258,78,2)
(211,43,2)
(16,167,2)
(277,308,2)
(103,43,2)
(180,42,2)
(213,78,2)
(142,43,2)
(43,59,2)
(288,167,2)
(275,43,2)
(181,24,2)
(213,57,2)
(136,59,2)
(255,43,2)
(307,308,2)
(26,185,2)
(242,167,2)
(135,167,2)
(26,160,2)
(281,160,2)
(301,167,2)
(65,220,2)
(176,43,2)
(26,167,2)
-----------------------------------
(0,pagedaemon_wakeup()
(1,v_wire_count)
(2,req & VM_ALLOC_ZERO)
(3,NULL)
(4,color)
(5,page_req == VM_ALLOC_INTERRUPT)
(6,VM_ALLOC_SYSTEM)
(7,PG_BUSY)
(8,page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(9,vm_page_queue_free_mtx)
(10,color)
(11,m->pindex)
(12,vm_pageout_deficit)
(13,m)
(14,m)
(15,)
(16,(req & VM_ALLOC_ZERO)
(17,"vm_page_alloc: cache queue is missing %d pages")
(18,0)
(19,if (req & VM_ALLOC_ZERO)
(20,req)
(21,loop:)
(22,return (NULL)
(23,vm_page_zero_count)
(24,cnt.v_cache_count == 0)
(25,PG_BUSY)
(26,m->hold_count)
(27,cnt)
(28,m->pindex = pindex)
(29,page_req)
(30,NULL)
(31,color)
(32,~PG_BUSY)
(33,object)
(34,cnt.v_cache_count)
(35,NULL)
(36,pindex + object->pg_color)
(37,cnt)
(38,page_req)
(39,)
(40,KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m)
(41,cnt.v_cache_count)
(42,vm_object_t object)
(43,cnt.v_free_count > cnt.v_free_reserved ||\n\\n\\t    (page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(44,0)
(45,VM_ALLOC_NOOBJ)
(46,color)
(47,(page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(48,v_cache_count)
(49,)
(50,m)
(51,vm_paging_needed()
(52,return (NULL)
(53,req)
(54,m)
(55,page_req)
(56,vm_pindex_t pindex)
(57,color = (pindex + object->pg_color)
(58,m)
(59,(m = vm_page_select_cache(color)
(60,)
(61,vm_pageq_remove_nowakeup(m)
(62,)
(63,page_req = req & VM_ALLOC_CLASS_MASK)
(64,VM_ALLOC_WIRED)
(65,pindex)
(66,cnt.v_free_count > cnt.v_free_reserved)
(67,atomic_add_int(&vm_pageout_deficit, 1)
(68,pageproc)
(69,color = pindex & PQ_COLORMASK)
(70,&vm_page_queue_free_mtx)
(71,curproc)
(72,vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO)
(73,if ((m = vm_page_select_cache(color)
(74,page_req)
(75,&vm_pageout_deficit)
(76,page_req != VM_ALLOC_SYSTEM)
(77,PG_ZERO)
(78,page_req != VM_ALLOC_INTERRUPT)
(79,object)
(80,0)
(81,m)
(82,atomic_add_int(&cnt.v_wire_count, 1)
(83,cnt.v_interrupt_free_min)
(84,m->wire_count)
(85,if ((curproc == pageproc)
(86,cnt.v_free_reserved)
(87,1)
(88,dirty)
(89,m)
(90,m->act_count)
(91,VM_OBJECT_LOCK_ASSERT(object, MA_OWNED)
(92,if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
(93,v_free_count)
(94,(req & VM_ALLOC_ZERO)
(95,page_req)
(96,&cnt.v_wire_count)
(97,vm_page_unlock_queues()
(98,req & VM_ALLOC_ZERO)
(99,v_free_count)
(100,cnt.v_free_count > cnt.v_interrupt_free_min)
(101,cnt)
(102,page_req = VM_ALLOC_SYSTEM)
(103,m != NULL)
(104,atomic_add_int(&vm_pageout_deficit, 1)
(105,wire_count)
(106,0)
(107,v_free_reserved)
(108,0)
(109,pindex & PQ_COLORMASK)
(110,cnt)
(111,0)
(112,VM_ALLOC_NOOBJ)
(113,m)
(114,page_req != VM_ALLOC_INTERRUPT)
(115,m = NULL)
(116,VM_ALLOC_ZERO)
(117,1)
(118,curproc == pageproc)
(119,v_free_count)
(120,m)
(121,m->hold_count = 0)
(122,page_req)
(123,m->flags)
(124,cnt.v_free_count)
(125,PG_ZERO | PG_BUSY)
(126,0)
(127,vm_page_queue_free_mtx)
(128,act_count)
(129,RET)
(130,m)
(131,PQ_COLORMASK)
(132,vm_pageout_deficit)
(133,page_req)
(134,m)
(135,0)
(136,vm_page_unlock_queues()
(137,vm_page_lock_queues()
(138,cnt.v_cache_count)
(139,)
(140,PQ_FREE)
(141,flags)
(142,&vm_page_queue_free_mtx)
(143,cnt.v_free_count)
(144,VM_ALLOC_INTERRUPT)
(145,m)
(146,)
(147,(pindex + object->pg_color)
(148,mtx_lock_spin(&vm_page_queue_free_mtx)
(149,0)
(150,flags)
(151,)
(152,pagedaemon_wakeup()
(153,req)
(154,cnt)
(155,m)
(156,cnt.v_wire_count)
(157,VM_ALLOC_SYSTEM)
(158,req & VM_ALLOC_ZERO)
(159,if ((req & VM_ALLOC_NOOBJ)
(160,m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO)
(161,return NULL;)
(162,&vm_page_queue_free_mtx)
(163,KASSERT(cnt.v_cache_count == 0,\n\\n\\t\\t\\t    ("vm_page_alloc: cache queue is missing %d pages",\n\\n\\t\\t\\t    cnt.v_cache_count)
(164,vm_page_queue_free_mtx)
(165,object)
(166,"vm_page_alloc(NORMAL|SYSTEM)
(167,cnt.v_free_count <=  cnt.v_interrupt_free_min)
(168,page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)
(169,m = vm_page_select_cache(color)
(170,VM_ALLOC_SYSTEM)
(171,goto loop;)
(172,pindex)
(173,page_req == VM_ALLOC_SYSTEM)
(174,td_intr_nesting_level)
(175,if ((req & VM_ALLOC_NOOBJ)
(176,m->dirty == 0)
(177,v_cache_count)
(178,PQ_COLORMASK)
(179,req)
(180,object != NULL)
(181,cnt)
(182,req & VM_ALLOC_NOOBJ)
(183,cnt)
(184,color)
(185,m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO)
(186,req)
(187,VM_ALLOC_NOOBJ)
(188,)
(189,vm_page_insert(m, object, pindex)
(190,1)
(191,"vm_page_alloc: NULL object.")
(192,req)
(193,m)
(194,flags &= ~PG_BUSY)
(195,v_free_count)
(196,if (vm_paging_needed()
(197,req)
(198,m)
(199,NULL)
(200,"vm_page_alloc: free/cache page %p was dirty")
(201,object)
(202,cnt)
(203,m->flags & PG_ZERO)
(204,m)
(205,curthread)
(206,m->act_count = 0)
(207,NULL)
(208,0)
(209,if (page_req != VM_ALLOC_SYSTEM)
(210,VM_ALLOC_INTERRUPT)
(211,flags)
(212,v_interrupt_free_min)
(213,vm_page_select_cache(color)
(214,mtx_unlock_spin(&vm_page_queue_free_mtx)
(215,color)
(216,if (req & VM_ALLOC_WIRED)
(217,cnt)
(218,&vm_pageout_deficit)
(219,v_cache_count)
(220,(req & VM_ALLOC_NOOBJ)
(221,KASSERT(curthread->td_intr_nesting_level == 0 ||\n\\n\\t    page_req == VM_ALLOC_INTERRUPT,\n\\n\\t    ("vm_page_alloc(NORMAL|SYSTEM)
(222,PQ_FREE)
(223,return (m)
(224,flags)
(225,flags)
(226,m->wire_count = 0)
(227,page_req)
(228,req & VM_ALLOC_NOOBJ)
(229,)
(230,pindex)
(231,cnt)
(232,vm_page_queue_free_mtx)
(233,valid)
(234,cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(235,0)
(236,&vm_page_queue_free_mtx)
(237,)
(238,cnt.v_cache_count == 0)
(239,m)
(240,KASSERT(\n\\n\\t    m != NULL,\n\\n\\t    ("vm_page_alloc()
(241,mtx_unlock_spin(&vm_page_queue_free_mtx)
(242,m->valid = 0)
(243,VM_ALLOC_CLASS_MASK)
(244,curthread->td_intr_nesting_level == 0)
(245,cnt.v_free_count)
(246,&vm_page_queue_free_mtx)
(247,m->wire_count = 1)
(248,VM_ALLOC_NOBUSY)
(249,pagedaemon_wakeup()
(250,VM_ALLOC_ZERO)
(251,pg_color)
(252,m)
(253,flags)
(254,cnt)
(255,req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
(256,v_interrupt_free_min)
(257,int req)
(258,1)
(259,m->flags)
(260,pindex)
(261,hold_count)
(262,if (cnt.v_free_count > cnt.v_free_reserved ||\n\\n\\t    (page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(263,pindex)
(264,mtx_lock_spin(&vm_page_queue_free_mtx)
(265,VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
(266,m)
(267,)
(268,m)
(269,cnt.v_free_count > 0)
(270,m->busy = 0)
(271,page_req == VM_ALLOC_INTERRUPT)
(272,req & VM_ALLOC_CLASS_MASK)
(273,0)
(274,wire_count)
(275,vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO)
(276,req & VM_ALLOC_WIRED)
(277,object->pg_color)
(278,if (cnt.v_free_count <=  cnt.v_interrupt_free_min)
(279,VM_ALLOC_ZERO)
(280,VM_ALLOC_INTERRUPT)
(281,m->wire_count)
(282,vm_page_zero_count--)
(283,mtx_unlock_spin(&vm_page_queue_free_mtx)
(284,cnt.v_interrupt_free_min)
(285,req)
(286,NULL)
(287,VM_ALLOC_INTERRUPT)
(288,m->dirty)
(289,&vm_page_queue_free_mtx)
(290,NULL)
(291,mtx_unlock_spin(&vm_page_queue_free_mtx)
(292,m->valid)
(293,vm_page_queue_free_mtx)
(294,busy)
(295,m->flags = flags)
(296,curthread->td_intr_nesting_level == 0 ||\n\\n\\t    page_req == VM_ALLOC_INTERRUPT)
(297,MA_OWNED)
(298,PG_ZERO)
(299,cnt.v_free_count)
(300,curthread->td_intr_nesting_level)
(301,m->busy)
(302,flags = PG_BUSY)
(303,flags = PG_ZERO | PG_BUSY)
(304,vm_page_queue_free_mtx)
(305,page_req)
(306,0)
(307,KASSERT(object != NULL,\n\\n\\t\\t    ("vm_page_alloc: NULL object.")
(308,(req & VM_ALLOC_NOOBJ)
(309,"vm_page_alloc()
(310,if (m->flags & PG_ZERO)
(311,flags)
(312,0)
(313,(curproc == pageproc)
(314,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^