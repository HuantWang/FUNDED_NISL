-----label-----
1
-----code-----
static int walk_hole(struct drm_i915_private *i915,
		     struct i915_address_space *vm,
		     u64 hole_start, u64 hole_end,
		     unsigned long end_time)
{
	const u64 hole_size = hole_end - hole_start;
	const unsigned long max_pages =
		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT);
	unsigned long flags;
	u64 size;

	/* Try binding a single VMA in different positions within the hole */

	flags = PIN_OFFSET_FIXED | PIN_USER;
	if (i915_is_ggtt(vm))
		flags |= PIN_GLOBAL;

	for_each_prime_number_from(size, 1, max_pages) {
		struct drm_i915_gem_object *obj;
		struct i915_vma *vma;
		u64 addr;
		int err = 0;

		obj = fake_dma_object(i915, size << PAGE_SHIFT);
		if (IS_ERR(obj))
			break;

		vma = i915_vma_instance(obj, vm, NULL);
		if (IS_ERR(vma)) {
			err = PTR_ERR(vma);
			goto err_put;
		}

		for (addr = hole_start;
		     addr + obj->base.size < hole_end;
		     addr += obj->base.size) {
			err = i915_vma_pin(vma, 0, 0, addr | flags);
			if (err) {
				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",
				       __func__, addr, vma->size,
				       hole_start, hole_end, err);
				goto err_close;
			}
			i915_vma_unpin(vma);

			if (!drm_mm_node_allocated(&vma->node) ||
			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {
				pr_err("%s incorrect at %llx + %llx\n",
				       __func__, addr, vma->size);
				err = -EINVAL;
				goto err_close;
			}

			err = i915_vma_unbind(vma);
			if (err) {
				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",
				       __func__, addr, vma->size, err);
				goto err_close;
			}

			GEM_BUG_ON(drm_mm_node_allocated(&vma->node));

			if (igt_timeout(end_time,
					"%s timed out at %llx\n",
					__func__, addr)) {
				err = -EINTR;
				goto err_close;
			}
		}

err_close:
		if (!i915_vma_is_ggtt(vma))
			i915_vma_close(vma);
err_put:
		i915_gem_object_put(obj);
		if (err)
			return err;

		cleanup_freed_objects(i915);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
31,41
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
50,53
50,54
51,52
53,54
55,56
55,57
56,57
59,60
59,61
60,61
62,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
103,104
105,106
106,107
106,108
106,109
106,110
106,111
106,112
106,113
106,114
106,115
106,116
106,117
106,118
106,119
107,108
108,109
108,110
109,110
111,112
111,113
114,115
115,116
115,117
116,117
118,119
118,120
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
130,131
130,132
132,133
134,135
135,136
135,137
136,137
138,139
138,140
138,141
139,140
141,142
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
152,153
155,156
156,157
156,158
157,158
159,160
159,161
159,162
159,163
160,161
162,163
164,165
166,167
168,169
168,170
169,170
169,171
170,171
172,173
174,175
174,176
175,176
176,177
176,178
177,178
179,180
179,181
180,181
182,183
184,185
186,187
186,188
186,189
186,190
187,188
188,189
188,190
189,190
191,192
193,194
193,195
194,195
194,196
195,196
197,198
197,199
198,199
198,200
199,200
203,204
205,206
205,207
206,207
208,209
208,210
209,210
209,211
210,211
214,215
214,216
214,217
214,218
214,219
214,220
214,221
214,222
215,216
216,217
216,218
217,218
219,220
219,221
219,222
219,223
219,224
220,221
222,223
226,227
226,228
227,228
229,230
231,232
231,233
232,233
234,235
234,236
235,236
236,237
236,238
236,239
236,240
236,241
236,242
236,243
236,244
237,238
240,241
242,243
244,245
244,246
245,246
248,249
250,251
252,253
254,255
256,257
257,258
257,259
258,259
260,261
262,263
262,264
263,264
263,265
264,265
265,266
265,267
266,267
268,269
269,270
269,271
270,271
273,274
273,275
273,276
273,277
273,278
274,275
276,277
280,281
280,282
281,282
283,284
285,286
285,287
285,288
286,287
287,288
287,289
287,290
287,291
287,292
288,289
291,292
293,294
295,296
295,297
296,297
299,300
300,301
300,302
301,302
303,304
304,305
306,307
308,309
309,310
309,311
310,311
312,313
312,314
313,314
315,316
317,318
317,319
318,319
320,321
320,322
321,322
322,323
322,324
322,325
322,326
322,327
322,328
323,324
326,327
328,329
330,331
330,332
331,332
334,335
336,337
338,339
339,340
339,341
340,341
342,343
342,344
343,344
345,346
346,347
346,348
347,348
350,351
350,352
351,352
351,353
351,354
351,355
351,356
352,353
354,355
357,358
359,360
361,362
361,363
362,363
363,364
363,365
364,365
366,367
367,368
369,370
371,372
371,373
373,374
373,375
374,375
375,376
375,377
376,377
378,379
380,381
381,382
381,383
382,383
384,385
386,387
386,388
388,389
389,390
389,391
390,391
392,393
394,395
394,396
395,396
397,398
398,399
400,401
401,402
401,403
402,403
404,405
406,407
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,28,30,35,37,41,43,46,48,52,54,57,58,61,63,66,68,72,74,78,81,83,87,89,93,95,99,101,102,104,110,112,113,117,119,120,124,126,129,131,133,137,140,142,145,147,151,153,154,158,161,163,165,167,171,173,178,181,183,185,190,192,196,200,201,202,204,207,211,212,213,218,221,223,224,225,228,230,233,238,239,241,243,246,247,249,251,253,255,259,261,267,271,272,275,277,278,279,282,284,289,290,292,294,297,298,302,305,307,311,314,316,319,324,325,327,329,332,333,335,337,341,344,348,349,353,355,356,358,360,365,368,370,372,377,379,383,385,387,391,393,396,399,403,405,407
-----computeFrom-----
39,40
39,41
55,56
55,57
59,60
59,61
76,77
76,78
79,80
79,81
91,92
91,93
135,136
135,137
143,144
143,145
156,157
156,158
176,177
176,178
188,189
188,190
193,194
193,195
194,195
194,196
205,206
205,207
216,217
216,218
226,227
226,228
263,264
263,265
280,281
280,282
300,301
300,302
309,310
309,311
363,364
363,365
-----guardedBy-----
277,297
282,294
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int walk_hole(struct drm_i915_private *i915,		     struct i915_address_space *vm,		     u64 hole_start, u64 hole_end,		     unsigned long end_time){	const u64 hole_size = hole_end - hole_start;	const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT);	unsigned long flags;	u64 size;	/* Try binding a single VMA in different positions within the hole */	flags = PIN_OFFSET_FIXED | PIN_USER;	if (i915_is_ggtt(vm))		flags |= PIN_GLOBAL;	for_each_prime_number_from(size, 1, max_pages) {		struct drm_i915_gem_object *obj;		struct i915_vma *vma;		u64 addr;		int err = 0;		obj = fake_dma_object(i915, size << PAGE_SHIFT);		if (IS_ERR(obj))			break;		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_put;		}		for (addr = hole_start;		     addr + obj->base.size < hole_end;		     addr += obj->base.size) {			err = i915_vma_pin(vma, 0, 0, addr | flags);			if (err) {				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}			i915_vma_unpin(vma);			if (!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}			err = i915_vma_unbind(vma);			if (err) {				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}			GEM_BUG_ON(drm_mm_node_allocated(&vma->node));			if (igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)) {				err = -EINTR;				goto err_close;			}		}err_close:		if (!i915_vma_is_ggtt(vma))			i915_vma_close(vma);err_put:		i915_gem_object_put(obj);		if (err)			return err;		cleanup_freed_objects(i915);	}	return 0;}
static int
walk_hole(struct drm_i915_private *i915,		     struct i915_address_space *vm,		     u64 hole_start, u64 hole_end,		     unsigned long end_time)
walk_hole
struct drm_i915_private *i915
struct drm_i915_private
drm_i915_private
*i915
*
i915
struct i915_address_space *vm
struct i915_address_space
i915_address_space
*vm
*
vm
u64 hole_start
u64
u64
hole_start
hole_start
u64 hole_end
u64
u64
hole_end
hole_end
unsigned long end_time
unsigned long
end_time
end_time
{	const u64 hole_size = hole_end - hole_start;	const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT);	unsigned long flags;	u64 size;	/* Try binding a single VMA in different positions within the hole */	flags = PIN_OFFSET_FIXED | PIN_USER;	if (i915_is_ggtt(vm))		flags |= PIN_GLOBAL;	for_each_prime_number_from(size, 1, max_pages) {		struct drm_i915_gem_object *obj;		struct i915_vma *vma;		u64 addr;		int err = 0;		obj = fake_dma_object(i915, size << PAGE_SHIFT);		if (IS_ERR(obj))			break;		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_put;		}		for (addr = hole_start;		     addr + obj->base.size < hole_end;		     addr += obj->base.size) {			err = i915_vma_pin(vma, 0, 0, addr | flags);			if (err) {				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}			i915_vma_unpin(vma);			if (!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}			err = i915_vma_unbind(vma);			if (err) {				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}			GEM_BUG_ON(drm_mm_node_allocated(&vma->node));			if (igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)) {				err = -EINTR;				goto err_close;			}		}err_close:		if (!i915_vma_is_ggtt(vma))			i915_vma_close(vma);err_put:		i915_gem_object_put(obj);		if (err)			return err;		cleanup_freed_objects(i915);	}	return 0;}
const u64 hole_size = hole_end - hole_start;
const u64 hole_size = hole_end - hole_start;
const u64
u64
hole_size = hole_end - hole_start
hole_size
= hole_end - hole_start
hole_end - hole_start
hole_end
hole_end
hole_start
hole_start
const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT);
const unsigned long max_pages =		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT);
const unsigned long
max_pages =		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT)
max_pages
=		min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT)
min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT)
min_t
min_t
u64
u64
ULONG_MAX - 1
ULONG_MAX
ULONG_MAX
1
hole_size >> PAGE_SHIFT
hole_size
hole_size
PAGE_SHIFT
PAGE_SHIFT
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
u64 size;
u64 size;
u64
u64
size
size
flags = PIN_OFFSET_FIXED | PIN_USER;
flags = PIN_OFFSET_FIXED | PIN_USER
flags
flags
PIN_OFFSET_FIXED | PIN_USER
PIN_OFFSET_FIXED
PIN_OFFSET_FIXED
PIN_USER
PIN_USER
if (i915_is_ggtt(vm))		flags |= PIN_GLOBAL;
i915_is_ggtt(vm)
i915_is_ggtt
i915_is_ggtt
vm
vm
flags |= PIN_GLOBAL;
flags |= PIN_GLOBAL
flags
flags
PIN_GLOBAL
PIN_GLOBAL
for_each_prime_number_from(size, 1, max_pages)
for_each_prime_number_from(size, 1, max_pages)
for_each_prime_number_from
for_each_prime_number_from
size
size
1
max_pages
max_pages
)
{		struct drm_i915_gem_object *obj;		struct i915_vma *vma;		u64 addr;		int err = 0;		obj = fake_dma_object(i915, size << PAGE_SHIFT);		if (IS_ERR(obj))			break;		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_put;		}		for (addr = hole_start;		     addr + obj->base.size < hole_end;		     addr += obj->base.size) {			err = i915_vma_pin(vma, 0, 0, addr | flags);			if (err) {				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}			i915_vma_unpin(vma);			if (!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}			err = i915_vma_unbind(vma);			if (err) {				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}			GEM_BUG_ON(drm_mm_node_allocated(&vma->node));			if (igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)) {				err = -EINTR;				goto err_close;			}		}err_close:		if (!i915_vma_is_ggtt(vma))			i915_vma_close(vma);err_put:		i915_gem_object_put(obj);		if (err)			return err;		cleanup_freed_objects(i915);	}
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object
drm_i915_gem_object
*obj
*
obj
struct i915_vma *vma;
struct i915_vma *vma;
struct i915_vma
i915_vma
*vma
*
vma
u64 addr;
u64 addr;
u64
u64
addr
addr
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
obj = fake_dma_object(i915, size << PAGE_SHIFT);
obj = fake_dma_object(i915, size << PAGE_SHIFT)
obj
obj
fake_dma_object(i915, size << PAGE_SHIFT)
fake_dma_object
fake_dma_object
i915
i915
size << PAGE_SHIFT
size
size
PAGE_SHIFT
PAGE_SHIFT
if (IS_ERR(obj))			break;
IS_ERR(obj)
IS_ERR
IS_ERR
obj
obj
break;
vma = i915_vma_instance(obj, vm, NULL);
vma = i915_vma_instance(obj, vm, NULL)
vma
vma
i915_vma_instance(obj, vm, NULL)
i915_vma_instance
i915_vma_instance
obj
obj
vm
vm
NULL
NULL
if (IS_ERR(vma)) {			err = PTR_ERR(vma);			goto err_put;		}
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
{			err = PTR_ERR(vma);			goto err_put;		}
err = PTR_ERR(vma);
err = PTR_ERR(vma)
err
err
PTR_ERR(vma)
PTR_ERR
PTR_ERR
vma
vma
goto err_put;
err_put
for (addr = hole_start;		     addr + obj->base.size < hole_end;		     addr += obj->base.size) {			err = i915_vma_pin(vma, 0, 0, addr | flags);			if (err) {				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}			i915_vma_unpin(vma);			if (!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}			err = i915_vma_unbind(vma);			if (err) {				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}			GEM_BUG_ON(drm_mm_node_allocated(&vma->node));			if (igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)) {				err = -EINTR;				goto err_close;			}		}
addr = hole_start;
addr = hole_start
addr
addr
hole_start
hole_start
addr + obj->base.size < hole_end
addr + obj->base.size
addr
addr
obj->base.size
obj->base
obj
obj
base
size
hole_end
hole_end
addr += obj->base.size
addr
addr
obj->base.size
obj->base
obj
obj
base
size
{			err = i915_vma_pin(vma, 0, 0, addr | flags);			if (err) {				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}			i915_vma_unpin(vma);			if (!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}			err = i915_vma_unbind(vma);			if (err) {				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}			GEM_BUG_ON(drm_mm_node_allocated(&vma->node));			if (igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)) {				err = -EINTR;				goto err_close;			}		}
err = i915_vma_pin(vma, 0, 0, addr | flags);
err = i915_vma_pin(vma, 0, 0, addr | flags)
err
err
i915_vma_pin(vma, 0, 0, addr | flags)
i915_vma_pin
i915_vma_pin
vma
vma
0
0
addr | flags
addr
addr
flags
flags
if (err) {				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}
err
err
{				pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);				goto err_close;			}
pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err);
pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n",				       __func__, addr, vma->size,				       hole_start, hole_end, err)
pr_err
pr_err
"%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\n"
__func__
__func__
addr
addr
vma->size
vma
vma
size
hole_start
hole_start
hole_end
hole_end
err
err
goto err_close;
err_close
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
if (!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)) {				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}
!drm_mm_node_allocated(&vma->node) ||			    i915_vma_misplaced(vma, 0, 0, addr | flags)
!drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
i915_vma_misplaced(vma, 0, 0, addr | flags)
i915_vma_misplaced
i915_vma_misplaced
vma
vma
0
0
addr | flags
addr
addr
flags
flags
{				pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);				err = -EINVAL;				goto err_close;			}
pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size);
pr_err("%s incorrect at %llx + %llx\n",				       __func__, addr, vma->size)
pr_err
pr_err
"%s incorrect at %llx + %llx\n"
__func__
__func__
addr
addr
vma->size
vma
vma
size
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err_close;
err_close
err = i915_vma_unbind(vma);
err = i915_vma_unbind(vma)
err
err
i915_vma_unbind(vma)
i915_vma_unbind
i915_vma_unbind
vma
vma
if (err) {				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}
err
err
{				pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);				goto err_close;			}
pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err);
pr_err("%s unbind failed at %llx + %llx  with err=%d\n",				       __func__, addr, vma->size, err)
pr_err
pr_err
"%s unbind failed at %llx + %llx  with err=%d\n"
__func__
__func__
addr
addr
vma->size
vma
vma
size
err
err
goto err_close;
err_close
GEM_BUG_ON(drm_mm_node_allocated(&vma->node));
GEM_BUG_ON(drm_mm_node_allocated(&vma->node))
GEM_BUG_ON
GEM_BUG_ON
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
if (igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)) {				err = -EINTR;				goto err_close;			}
igt_timeout(end_time,					"%s timed out at %llx\n",					__func__, addr)
igt_timeout
igt_timeout
end_time
end_time
"%s timed out at %llx\n"
__func__
__func__
addr
addr
{				err = -EINTR;				goto err_close;			}
err = -EINTR;
err = -EINTR
err
err
-EINTR
EINTR
EINTR
goto err_close;
err_close
err_close:		if (!i915_vma_is_ggtt(vma))			i915_vma_close(vma);
err_close
if (!i915_vma_is_ggtt(vma))			i915_vma_close(vma);
!i915_vma_is_ggtt(vma)
i915_vma_is_ggtt(vma)
i915_vma_is_ggtt
i915_vma_is_ggtt
vma
vma
i915_vma_close(vma);
i915_vma_close(vma)
i915_vma_close
i915_vma_close
vma
vma
err_put:		i915_gem_object_put(obj);
err_put
i915_gem_object_put(obj);
i915_gem_object_put(obj)
i915_gem_object_put
i915_gem_object_put
obj
obj
if (err)			return err;
err
err
return err;
err
err
cleanup_freed_objects(i915);
cleanup_freed_objects(i915)
cleanup_freed_objects
cleanup_freed_objects
i915
i915
return 0;
0
-----joern-----
(110,25,0)
(191,96,0)
(142,108,0)
(66,77,0)
(4,134,0)
(196,50,0)
(68,30,0)
(87,21,0)
(30,61,0)
(119,195,0)
(96,142,0)
(179,50,0)
(124,90,0)
(166,169,0)
(153,144,0)
(147,196,0)
(94,181,0)
(50,196,0)
(173,79,0)
(50,34,0)
(161,144,0)
(116,144,0)
(12,193,0)
(91,30,0)
(178,169,0)
(19,57,0)
(172,153,0)
(162,144,0)
(74,106,0)
(150,144,0)
(56,108,0)
(172,169,0)
(46,25,0)
(90,172,0)
(143,74,0)
(187,110,0)
(69,146,0)
(158,77,0)
(47,168,0)
(56,145,0)
(49,196,0)
(90,53,0)
(29,6,0)
(188,103,0)
(111,146,0)
(98,129,0)
(59,1,0)
(17,146,0)
(97,111,0)
(1,108,0)
(129,77,0)
(61,12,0)
(193,169,0)
(175,10,0)
(168,45,0)
(192,134,0)
(87,108,0)
(25,110,0)
(154,49,0)
(103,120,0)
(117,110,0)
(111,48,0)
(136,73,0)
(148,169,0)
(74,131,0)
(182,176,0)
(22,56,0)
(126,158,0)
(12,61,0)
(72,79,0)
(135,54,0)
(105,73,0)
(185,176,0)
(6,73,0)
(26,166,0)
(115,96,0)
(183,106,0)
(79,73,0)
(83,169,0)
(92,181,0)
(123,79,0)
(152,73,0)
(56,134,0)
(0,145,0)
(56,166,0)
(147,73,0)
(34,175,0)
(90,108,0)
(108,108,0)
(85,25,0)
(129,108,0)
(193,12,0)
(100,56,0)
(196,49,0)
(118,47,0)
(149,64,0)
(139,131,0)
(34,73,0)
(128,73,0)
(175,34,0)
(108,145,0)
(36,47,0)
(80,43,0)
(54,195,0)
(1,45,0)
(133,49,0)
(137,183,0)
(101,90,0)
(144,161,0)
(58,110,0)
(3,137,0)
(142,96,0)
(24,47,0)
(158,110,0)
(44,79,0)
(48,2,0)
(42,109,0)
(70,87,0)
(155,87,0)
(25,85,0)
(138,116,0)
(129,98,0)
(63,169,0)
(35,118,0)
(51,23,0)
(163,79,0)
(9,90,0)
(114,90,0)
(145,65,0)
(74,108,0)
(111,172,0)
(23,45,0)
(38,142,0)
(176,144,0)
(125,118,0)
(146,79,0)
(76,87,0)
(189,74,0)
(47,108,0)
(56,64,0)
(60,98,0)
(54,135,0)
(47,118,0)
(1,145,0)
(181,1,0)
(184,111,0)
(170,144,0)
(61,30,0)
(99,140,0)
(129,145,0)
(190,2,0)
(82,67,0)
(134,144,0)
(194,1,0)
(31,118,0)
(95,175,0)
(32,79,0)
(96,110,0)
(108,142,0)
(37,56,0)
(134,56,0)
(77,129,0)
(47,145,0)
(132,161,0)
(195,54,0)
(166,118,0)
(165,23,0)
(157,48,0)
(131,144,0)
(93,169,0)
(11,187,0)
(175,65,0)
(7,56,0)
(47,45,0)
(122,73,0)
(48,162,0)
(119,176,0)
(181,135,0)
(87,145,0)
(130,56,0)
(45,23,0)
(52,85,0)
(53,144,0)
(180,168,0)
(5,196,0)
(75,170,0)
(62,183,0)
(86,131,0)
(104,53,0)
(8,162,0)
(196,147,0)
(89,175,0)
(84,53,0)
(161,110,0)
(56,65,0)
(74,145,0)
(88,161,0)
(39,174,0)
(1,181,0)
(156,79,0)
(20,108,0)
(162,48,0)
(56,10,0)
(116,160,0)
(141,106,0)
(53,90,0)
(113,34,0)
(131,74,0)
(140,144,0)
(161,120,0)
(98,10,0)
(111,109,0)
(90,43,0)
(118,166,0)
(93,144,0)
(111,183,0)
(41,85,0)
(164,129,0)
(109,67,0)
(40,147,0)
(25,57,0)
(107,153,0)
(160,116,0)
(15,93,0)
(135,181,0)
(181,144,0)
(177,74,0)
(183,137,0)
(71,87,0)
(30,144,0)
(14,145,0)
(186,79,0)
(18,172,0)
(195,119,0)
(153,172,0)
(77,158,0)
(151,168,0)
(110,79,0)
(81,79,0)
(55,161,0)
(121,58,0)
(171,79,0)
(176,119,0)
(58,79,0)
(19,79,0)
(13,50,0)
(33,56,0)
(109,174,0)
(112,19,0)
(144,79,0)
(111,166,0)
(127,79,0)
(167,45,0)
(45,73,0)
(28,181,0)
(118,144,0)
(159,158,0)
(90,145,0)
(1,168,0)
(67,109,0)
(184,6,0)
(182,185,1)
(47,36,1)
(50,34,1)
(94,54,1)
(54,195,1)
(37,130,1)
(95,89,1)
(150,187,1)
(11,110,1)
(99,160,1)
(33,16,1)
(158,110,1)
(158,159,1)
(15,16,1)
(137,3,1)
(96,191,1)
(31,125,1)
(91,102,1)
(56,134,1)
(67,82,1)
(154,133,1)
(47,45,1)
(14,0,1)
(53,84,1)
(56,145,1)
(19,57,1)
(30,144,1)
(98,60,1)
(104,114,1)
(19,112,1)
(170,144,1)
(55,88,1)
(101,53,1)
(92,94,1)
(40,34,1)
(60,129,1)
(153,107,1)
(108,142,1)
(166,118,1)
(93,144,1)
(160,116,1)
(96,110,1)
(111,172,1)
(138,149,1)
(155,193,1)
(184,111,1)
(164,108,1)
(90,172,1)
(52,46,1)
(24,35,1)
(18,135,1)
(34,175,1)
(70,71,1)
(145,14,1)
(135,181,1)
(1,168,1)
(36,24,1)
(26,98,1)
(56,108,1)
(4,192,1)
(93,15,1)
(134,144,1)
(76,70,1)
(140,99,1)
(108,145,1)
(142,38,1)
(50,179,1)
(129,145,1)
(119,176,1)
(170,75,1)
(126,164,1)
(180,151,1)
(111,48,1)
(124,102,1)
(116,144,1)
(138,98,1)
(147,196,1)
(192,7,1)
(132,55,1)
(27,58,1)
(1,108,1)
(42,87,1)
(1,59,1)
(110,25,1)
(181,1,1)
(112,27,1)
(48,162,1)
(56,65,1)
(86,139,1)
(149,56,1)
(195,119,1)
(103,120,1)
(5,40,1)
(16,166,1)
(165,167,1)
(89,113,1)
(75,144,1)
(130,134,1)
(138,141,1)
(66,158,1)
(135,54,1)
(49,154,1)
(188,45,1)
(29,19,1)
(103,188,1)
(190,48,1)
(107,18,1)
(0,170,1)
(38,96,1)
(146,17,1)
(129,77,1)
(25,57,1)
(53,144,1)
(118,144,1)
(1,45,1)
(161,110,1)
(131,86,1)
(45,23,1)
(3,62,1)
(194,28,1)
(121,190,1)
(87,108,1)
(77,158,1)
(111,109,1)
(108,108,1)
(87,145,1)
(162,8,1)
(138,39,1)
(68,91,1)
(23,51,1)
(116,138,1)
(117,146,1)
(161,132,1)
(13,49,1)
(56,166,1)
(69,168,1)
(87,21,1)
(78,187,1)
(145,65,1)
(8,157,1)
(111,146,1)
(56,22,1)
(150,78,1)
(12,61,1)
(28,92,1)
(74,108,1)
(7,100,1)
(90,101,1)
(196,50,1)
(175,10,1)
(161,120,1)
(35,31,1)
(181,144,1)
(153,144,1)
(97,27,1)
(111,97,1)
(88,150,1)
(109,67,1)
(179,13,1)
(41,52,1)
(71,155,1)
(30,68,1)
(121,160,1)
(168,45,1)
(74,145,1)
(176,182,1)
(80,90,1)
(51,165,1)
(177,135,1)
(159,126,1)
(87,76,1)
(172,153,1)
(139,143,1)
(175,95,1)
(191,115,1)
(58,110,1)
(187,11,1)
(22,37,1)
(133,5,1)
(151,103,1)
(6,29,1)
(193,12,1)
(17,69,1)
(85,41,1)
(111,183,1)
(114,9,1)
(131,144,1)
(141,183,1)
(90,53,1)
(98,10,1)
(157,170,1)
(162,144,1)
(144,161,1)
(39,109,1)
(69,103,1)
(1,145,1)
(129,108,1)
(61,30,1)
(25,85,1)
(74,131,1)
(125,26,1)
(90,145,1)
(185,93,1)
(189,177,1)
(184,6,1)
(175,65,1)
(111,166,1)
(47,145,1)
(183,137,1)
(164,145,1)
(140,144,1)
(168,180,1)
(9,124,1)
(138,80,1)
(118,47,1)
(58,121,1)
(187,110,1)
(134,4,1)
(90,108,1)
(46,117,1)
(115,20,1)
(77,66,1)
(100,33,1)
(167,147,1)
(47,108,1)
(176,144,1)
(196,49,1)
(47,168,1)
(62,74,1)
(102,172,1)
(59,194,1)
(143,189,1)
(20,87,1)
(142,96,1)
(82,42,1)
(98,129,1)
(84,104,1)
(56,10,1)
(121,140,1)
(166,98,2)
(84,102,2)
(158,170,2)
(98,170,2)
(183,135,2)
(129,108,2)
(168,45,2)
(68,102,2)
(135,54,2)
(118,144,2)
(185,16,2)
(196,49,2)
(190,170,2)
(98,10,2)
(47,45,2)
(25,85,2)
(134,144,2)
(147,196,2)
(16,98,2)
(144,161,2)
(86,135,2)
(66,170,2)
(50,34,2)
(181,1,2)
(164,170,2)
(111,172,2)
(151,103,2)
(189,135,2)
(137,135,2)
(60,87,2)
(74,145,2)
(161,120,2)
(77,158,2)
(98,87,2)
(118,47,2)
(53,102,2)
(158,110,2)
(115,87,2)
(56,145,2)
(159,170,2)
(160,116,2)
(112,27,2)
(74,135,2)
(93,16,2)
(145,65,2)
(76,102,2)
(90,145,2)
(1,45,2)
(87,145,2)
(24,98,2)
(176,16,2)
(1,108,2)
(124,102,2)
(77,170,2)
(36,98,2)
(119,176,2)
(47,168,2)
(47,98,2)
(19,27,2)
(33,16,2)
(162,144,2)
(60,170,2)
(191,87,2)
(109,87,2)
(1,168,2)
(168,103,2)
(19,57,2)
(56,166,2)
(97,27,2)
(193,102,2)
(96,87,2)
(159,87,2)
(195,16,2)
(131,144,2)
(108,108,2)
(87,21,2)
(135,181,2)
(183,137,2)
(56,65,2)
(28,54,2)
(26,98,2)
(54,16,2)
(107,135,2)
(38,87,2)
(129,145,2)
(192,16,2)
(170,144,2)
(8,170,2)
(93,144,2)
(70,102,2)
(110,25,2)
(116,144,2)
(98,129,2)
(180,103,2)
(100,16,2)
(90,108,2)
(103,120,2)
(91,102,2)
(12,102,2)
(9,102,2)
(149,16,2)
(187,110,2)
(196,50,2)
(29,27,2)
(15,16,2)
(56,10,2)
(181,144,2)
(0,170,2)
(157,170,2)
(184,111,2)
(158,87,2)
(47,145,2)
(126,87,2)
(182,16,2)
(1,54,2)
(111,146,2)
(140,144,2)
(42,87,2)
(20,87,2)
(34,175,2)
(134,16,2)
(111,166,2)
(114,102,2)
(153,135,2)
(140,160,2)
(195,119,2)
(90,53,2)
(116,170,2)
(141,135,2)
(56,16,2)
(108,142,2)
(31,98,2)
(61,102,2)
(87,108,2)
(166,118,2)
(194,54,2)
(153,144,2)
(74,131,2)
(80,102,2)
(22,16,2)
(59,54,2)
(47,108,2)
(53,144,2)
(160,170,2)
(48,162,2)
(164,87,2)
(162,170,2)
(142,96,2)
(87,102,2)
(6,27,2)
(177,135,2)
(77,87,2)
(61,30,2)
(129,77,2)
(4,16,2)
(74,108,2)
(172,153,2)
(30,144,2)
(108,87,2)
(35,98,2)
(129,87,2)
(135,16,2)
(102,135,2)
(39,87,2)
(145,170,2)
(66,87,2)
(48,170,2)
(119,16,2)
(56,108,2)
(109,67,2)
(7,16,2)
(111,109,2)
(25,57,2)
(131,135,2)
(126,170,2)
(12,61,2)
(172,135,2)
(82,87,2)
(139,135,2)
(111,183,2)
(111,27,2)
(155,102,2)
(18,135,2)
(111,48,2)
(175,65,2)
(130,16,2)
(181,54,2)
(176,144,2)
(104,102,2)
(108,145,2)
(101,102,2)
(67,87,2)
(184,6,2)
(138,170,2)
(129,170,2)
(62,135,2)
(45,23,2)
(90,102,2)
(58,110,2)
(143,135,2)
(1,145,2)
(90,172,2)
(3,135,2)
(99,160,2)
(37,16,2)
(30,102,2)
(193,12,2)
(92,54,2)
(56,134,2)
(125,98,2)
(94,54,2)
(161,110,2)
(142,87,2)
(14,170,2)
(175,10,2)
(96,110,2)
(54,195,2)
(78,187,2)
(71,102,2)
(118,98,2)
-----------------------------------
(0,addr)
(1,addr | flags)
(2,)
(3,EINVAL)
(4,size)
(5,u64)
(6,return 0;)
(7,addr)
(8,vma)
(9,__func__)
(10,u64 hole_end)
(11,obj)
(12,drm_mm_node_allocated(&vma->node)
(13,hole_size)
(14,hole_start)
(15,vma)
(16,err)
(17,0)
(18,err)
(19,cleanup_freed_objects(i915)
(20,addr)
(21,unsigned long end_time)
(22,err)
(23,PIN_OFFSET_FIXED | PIN_USER)
(24,addr)
(25,fake_dma_object(i915, size << PAGE_SHIFT)
(26,err)
(27,err)
(28,0)
(29,0)
(30,vma->node)
(31,0)
(32,vma)
(33,"%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\\n")
(34,hole_size = hole_end - hole_start)
(35,0)
(36,flags)
(37,hole_end)
(38,size)
(39,goto err_close;)
(40,max_pages)
(41,PAGE_SHIFT)
(42,err)
(43,)
(44,if (IS_ERR(obj)
(45,flags = PIN_OFFSET_FIXED | PIN_USER)
(46,i915)
(47,addr | flags)
(48,err = PTR_ERR(vma)
(49,ULONG_MAX - 1)
(50,hole_size >> PAGE_SHIFT)
(51,PIN_USER)
(52,size)
(53,vma->size)
(54,!drm_mm_node_allocated(&vma->node)
(55,vm)
(56,pr_err("%s bind failed at %llx + %llx [hole %llx- %llx] with err=%d\\n",\n\\n\\t\\t\\t\\t       __func__, addr, vma->size,\n\\n\\t\\t\\t\\t       hole_start, hole_end, err)
(57,struct drm_i915_private *i915)
(58,i915_gem_object_put(obj)
(59,flags)
(60,hole_end)
(61,&vma->node)
(62,err)
(63,if (err)
(64,)
(65,u64 hole_start)
(66,size)
(67,-EINTR)
(68,node)
(69,err)
(70,__func__)
(71,"%s timed out at %llx\\n")
(72,if (err)
(73,)
(74,pr_err("%s incorrect at %llx + %llx\\n",\n\\n\\t\\t\\t\\t       __func__, addr, vma->size)
(75,vma)
(76,addr)
(77,obj->base.size)
(78,break;)
(79,)
(80,goto err_close;)
(81,err_put:)
(82,EINTR)
(83,if (igt_timeout(end_time,\n\\n\\t\\t\\t\\t\\t"%s timed out at %llx\\n",\n\\n\\t\\t\\t\\t\\t__func__, addr)
(84,size)
(85,size << PAGE_SHIFT)
(86,size)
(87,igt_timeout(end_time,\n\\n\\t\\t\\t\\t\\t"%s timed out at %llx\\n",\n\\n\\t\\t\\t\\t\\t__func__, addr)
(88,obj)
(89,hole_end)
(90,pr_err("%s unbind failed at %llx + %llx  with err=%d\\n",\n\\n\\t\\t\\t\\t       __func__, addr, vma->size, err)
(91,vma)
(92,0)
(93,i915_vma_unpin(vma)
(94,vma)
(95,hole_start)
(96,obj->base)
(97,err)
(98,addr + obj->base.size < hole_end)
(99,vma)
(100,__func__)
(101,err)
(102,err)
(103,i915_is_ggtt(vm)
(104,vma)
(105,if (i915_is_ggtt(vm)
(106,)
(107,vma)
(108,addr += obj->base.size)
(109,err = -EINTR)
(110,obj = fake_dma_object(i915, size << PAGE_SHIFT)
(111,return err;)
(112,i915)
(113,hole_size)
(114,addr)
(115,obj)
(116,i915_vma_is_ggtt(vma)
(117,obj)
(118,i915_vma_pin(vma, 0, 0, addr | flags)
(119,&vma->node)
(120,struct i915_address_space *vm)
(121,obj)
(122,hole_size)
(123,err_close:)
(124,"%s unbind failed at %llx + %llx  with err=%d\\n")
(125,vma)
(126,obj)
(127,for (addr = hole_start;\n\\n\\t\\t     addr + obj->base.size < hole_end;\n\\n\\t\\t     addr += obj->base.size)
(128,size)
(129,addr + obj->base.size)
(130,hole_start)
(131,vma->size)
(132,NULL)
(133,ULONG_MAX)
(134,vma->size)
(135,!drm_mm_node_allocated(&vma->node)
(136,max_pages)
(137,-EINVAL)
(138,vma)
(139,vma)
(140,i915_vma_close(vma)
(141,goto err_close;)
(142,obj->base.size)
(143,addr)
(144,vma = i915_vma_instance(obj, vm, NULL)
(145,addr = hole_start)
(146,err = 0)
(147,max_pages =\n\\n\\t\\tmin_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT)
(148,if (err)
(149,goto err_close;)
(150,vma)
(151,flags)
(152,flags)
(153,i915_vma_unbind(vma)
(154,1)
(155,end_time)
(156,if (IS_ERR(vma)
(157,err)
(158,obj->base)
(159,base)
(160,!i915_vma_is_ggtt(vma)
(161,i915_vma_instance(obj, vm, NULL)
(162,PTR_ERR(vma)
(163,err)
(164,addr)
(165,PIN_OFFSET_FIXED)
(166,err = i915_vma_pin(vma, 0, 0, addr | flags)
(167,flags)
(168,flags |= PIN_GLOBAL)
(169,)
(170,IS_ERR(vma)
(171,if (!i915_vma_is_ggtt(vma)
(172,err = i915_vma_unbind(vma)
(173,addr)
(174,)
(175,hole_end - hole_start)
(176,vma->node)
(177,"%s incorrect at %llx + %llx\\n")
(178,if (!drm_mm_node_allocated(&vma->node)
(179,PAGE_SHIFT)
(180,PIN_GLOBAL)
(181,i915_vma_misplaced(vma, 0, 0, addr | flags)
(182,node)
(183,err = -EINVAL)
(184,RET)
(185,vma)
(186,obj)
(187,IS_ERR(obj)
(188,vm)
(189,__func__)
(190,goto err_put;)
(191,base)
(192,vma)
(193,GEM_BUG_ON(drm_mm_node_allocated(&vma->node)
(194,addr)
(195,drm_mm_node_allocated(&vma->node)
(196,min_t(u64, ULONG_MAX - 1, hole_size >> PAGE_SHIFT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^