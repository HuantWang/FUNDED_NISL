-----label-----
0
-----code-----
static bool ravb_rx(struct net_device *ndev, int *quota, int q)
{
	struct ravb_private *priv = netdev_priv(ndev);
	int entry = priv->cur_rx[q] % priv->num_rx_ring[q];
	int boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q]) -
			priv->cur_rx[q];
	struct net_device_stats *stats = &priv->stats[q];
	struct ravb_ex_rx_desc *desc;
	struct sk_buff *skb;
	dma_addr_t dma_addr;
	struct timespec64 ts;
	u8  desc_status;
	u16 pkt_len;
	int limit;

	boguscnt = min(boguscnt, *quota);
	limit = boguscnt;
	desc = &priv->rx_ring[q][entry];
	while (desc->die_dt != DT_FEMPTY) {
		/* Descriptor type must be checked before all other reads */
		dma_rmb();
		desc_status = desc->msc;
		pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS;

		if (--boguscnt < 0)
			break;

		/* We use 0-byte descriptors to mark the DMA mapping errors */
		if (!pkt_len)
			continue;

		if (desc_status & MSC_MC)
			stats->multicast++;

		if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |
				   MSC_CEEF)) {
			stats->rx_errors++;
			if (desc_status & MSC_CRC)
				stats->rx_crc_errors++;
			if (desc_status & MSC_RFE)
				stats->rx_frame_errors++;
			if (desc_status & (MSC_RTLF | MSC_RTSF))
				stats->rx_length_errors++;
			if (desc_status & MSC_CEEF)
				stats->rx_missed_errors++;
		} else {
			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;

			skb = priv->rx_skb[q][entry];
			priv->rx_skb[q][entry] = NULL;
			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
					 priv->rx_buf_sz,
					 DMA_FROM_DEVICE);
			get_ts &= (q == RAVB_NC) ?
					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :
					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;
			if (get_ts) {
				struct skb_shared_hwtstamps *shhwtstamps;

				shhwtstamps = skb_hwtstamps(skb);
				memset(shhwtstamps, 0, sizeof(*shhwtstamps));
				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<
					     32) | le32_to_cpu(desc->ts_sl);
				ts.tv_nsec = le32_to_cpu(desc->ts_n);
				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);
			}

			skb_put(skb, pkt_len);
			skb->protocol = eth_type_trans(skb, ndev);
			if (ndev->features & NETIF_F_RXCSUM)
				ravb_rx_csum(skb);
			napi_gro_receive(&priv->napi[q], skb);
			stats->rx_packets++;
			stats->rx_bytes += pkt_len;
		}

		entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q];
		desc = &priv->rx_ring[q][entry];
	}

	/* Refill the RX ring buffers. */
	for (; priv->cur_rx[q] - priv->dirty_rx[q] > 0; priv->dirty_rx[q]++) {
		entry = priv->dirty_rx[q] % priv->num_rx_ring[q];
		desc = &priv->rx_ring[q][entry];
		desc->ds_cc = cpu_to_le16(priv->rx_buf_sz);

		if (!priv->rx_skb[q][entry]) {
			skb = netdev_alloc_skb(ndev,
					       priv->rx_buf_sz +
					       RAVB_ALIGN - 1);
			if (!skb)
				break;	/* Better luck next round. */
			ravb_set_buffer_align(skb);
			dma_addr = dma_map_single(ndev->dev.parent, skb->data,
						  le16_to_cpu(desc->ds_cc),
						  DMA_FROM_DEVICE);
			skb_checksum_none_assert(skb);
			/* We just set the data size to 0 for a failed mapping
			 * which should prevent DMA  from happening...
			 */
			if (dma_mapping_error(ndev->dev.parent, dma_addr))
				desc->ds_cc = cpu_to_le16(0);
			desc->dptr = cpu_to_le32(dma_addr);
			priv->rx_skb[q][entry] = skb;
		}
		/* Descriptor type must be set after all the above writes */
		dma_wmb();
		desc->die_dt = DT_FEMPTY;
	}

	*quota -= limit - (++boguscnt);

	return boguscnt <= 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
20,38
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
41,43
42,43
42,44
43,44
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
56,58
58,59
58,60
60,61
61,62
61,63
62,63
63,64
63,65
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
72,74
73,74
76,77
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
86,88
87,88
89,90
89,91
89,92
92,93
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
105,106
105,107
108,109
109,110
109,111
110,111
112,113
112,114
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
142,143
144,145
145,146
145,147
146,147
148,149
148,150
148,151
149,150
151,152
153,154
154,155
156,157
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
166,167
167,168
167,169
168,169
168,170
169,170
169,171
170,171
173,174
175,176
177,178
177,179
178,179
178,180
179,180
179,181
180,181
183,184
185,186
185,187
185,188
185,189
185,190
185,191
185,192
185,193
185,194
186,187
187,188
188,189
190,191
191,192
191,193
192,193
194,195
194,196
195,196
198,199
199,200
199,201
200,201
202,203
202,204
203,204
203,205
204,205
206,207
206,208
207,208
210,211
212,213
212,214
213,214
213,215
214,215
215,216
219,220
219,221
220,221
221,222
224,225
224,226
225,226
225,227
226,227
228,229
230,231
231,232
232,233
232,234
233,234
236,237
236,238
236,239
237,238
237,239
238,239
240,241
241,242
241,243
242,243
242,244
243,244
243,245
244,245
244,246
245,246
247,248
249,250
251,252
253,254
255,256
255,257
255,258
255,259
255,260
256,257
257,258
258,259
258,260
259,260
262,263
262,264
263,264
263,265
264,265
266,267
268,269
269,270
270,271
270,272
271,272
274,275
274,276
275,276
275,277
276,277
278,279
280,281
281,282
282,283
282,284
283,284
286,287
286,288
287,288
287,289
288,289
290,291
291,292
291,293
292,293
294,295
296,297
297,298
298,299
298,300
299,300
302,303
302,304
303,304
303,305
304,305
306,307
308,309
309,310
310,311
310,312
311,312
314,315
314,316
314,317
314,318
314,319
314,320
314,321
314,322
314,323
314,324
314,325
314,326
315,316
316,317
316,318
317,318
319,320
319,321
321,322
322,323
322,324
323,324
323,325
324,325
327,328
329,330
330,331
330,332
331,332
333,334
333,335
334,335
334,336
335,336
335,337
336,337
339,340
341,342
343,344
344,345
344,346
345,346
345,347
346,347
346,348
347,348
347,349
348,349
351,352
353,354
355,356
357,358
358,359
358,360
358,361
358,362
358,363
359,360
361,362
361,363
362,363
362,364
363,364
367,368
367,369
368,369
370,371
370,372
371,372
374,375
374,376
375,376
378,379
380,381
381,382
381,383
382,383
384,385
384,386
384,387
385,386
386,387
386,388
387,388
389,390
391,392
393,394
394,395
396,397
396,398
397,398
399,400
399,401
399,402
399,403
399,404
399,405
400,401
401,402
401,403
402,403
404,405
404,406
407,408
408,409
408,410
409,410
411,412
411,413
412,413
414,415
416,417
417,418
417,419
417,420
417,421
418,419
420,421
423,424
424,425
425,426
426,427
428,429
429,430
429,431
430,431
430,432
431,432
434,435
434,436
435,436
436,437
436,438
437,438
437,439
438,439
438,440
439,440
442,443
442,444
443,444
445,446
445,447
446,447
450,451
450,452
451,452
453,454
453,455
454,455
457,458
458,459
458,460
459,460
459,461
460,461
463,464
463,465
464,465
466,467
466,468
467,468
470,471
471,472
471,473
472,473
472,474
473,474
476,477
476,478
477,478
479,480
481,482
482,483
482,484
482,485
483,484
485,486
487,488
489,490
490,491
490,492
491,492
491,493
492,493
495,496
495,497
495,498
496,497
498,499
500,501
502,503
502,504
503,504
503,505
504,505
504,506
505,506
508,509
510,511
511,512
511,513
512,513
514,515
516,517
517,518
517,519
517,520
518,519
520,521
521,522
521,523
522,523
522,524
523,524
526,527
528,529
530,531
531,532
532,533
532,534
533,534
536,537
537,538
537,539
538,539
538,540
539,540
542,543
544,545
545,546
545,547
546,547
548,549
548,550
549,550
550,551
551,552
551,553
552,553
552,554
553,554
556,557
558,559
558,560
559,560
559,561
560,561
563,564
565,566
566,567
566,568
567,568
569,570
570,571
570,572
571,572
571,573
572,573
572,574
573,574
576,577
578,579
580,581
580,582
580,583
580,584
582,583
582,584
583,584
583,585
584,585
584,586
585,586
585,587
586,587
589,590
591,592
591,593
592,593
592,594
593,594
596,597
599,600
600,601
600,602
601,602
601,603
602,603
605,606
607,608
607,609
607,610
607,611
607,612
607,613
608,609
609,610
609,611
610,611
612,613
612,614
613,614
613,615
614,615
614,616
615,616
618,619
620,621
620,622
621,622
621,623
622,623
625,626
627,628
628,629
628,630
629,630
631,632
632,633
632,634
633,634
633,635
634,635
634,636
635,636
638,639
640,641
642,643
643,644
643,645
644,645
644,646
645,646
648,649
648,650
649,650
651,652
651,653
652,653
655,656
655,657
656,657
657,658
657,659
658,659
658,660
659,660
659,661
660,661
663,664
665,666
667,668
667,669
667,670
667,671
667,672
667,673
667,674
667,675
668,669
669,670
669,671
670,671
672,673
672,674
672,675
673,674
675,676
677,678
677,679
678,679
678,680
679,680
679,681
680,681
683,684
686,687
686,688
687,688
688,689
691,692
692,693
692,694
693,694
695,696
697,698
698,699
698,700
699,700
701,702
701,703
701,704
701,705
701,706
702,703
704,705
704,706
705,706
705,707
706,707
710,711
710,712
711,712
714,715
714,716
715,716
717,718
717,719
718,719
721,722
723,724
724,725
724,726
725,726
727,728
729,730
729,731
730,731
730,732
730,733
731,732
733,734
733,735
734,735
734,736
735,736
739,740
741,742
742,743
742,744
743,744
743,745
744,745
747,748
747,749
748,749
751,752
752,753
752,754
753,754
753,755
754,755
757,758
757,759
758,759
760,761
762,763
763,764
763,765
764,765
764,766
765,766
765,767
766,767
766,768
767,768
770,771
772,773
774,775
776,777
777,778
778,779
780,781
781,782
781,783
782,783
782,784
783,784
786,787
788,789
789,790
789,791
790,791
791,792
793,794
793,795
794,795
796,797
797,798
798,799
800,801
801,802
801,803
802,803
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,24,26,27,31,33,36,38,44,45,47,51,52,54,57,59,67,68,70,74,75,77,81,82,84,88,90,91,97,98,100,104,106,107,111,113,114,118,120,124,126,130,132,136,138,141,143,147,150,152,155,159,161,165,171,172,174,176,181,182,184,189,193,196,197,201,205,208,209,211,216,217,218,222,223,227,229,234,235,239,246,248,250,252,254,260,261,265,267,272,273,277,279,284,285,289,293,295,300,301,305,307,312,313,318,320,325,326,328,332,337,338,340,342,349,350,352,354,356,360,364,365,366,369,372,373,376,377,379,383,388,390,392,395,398,403,405,406,410,413,415,419,421,422,427,432,433,440,441,444,447,448,449,452,455,456,461,462,465,468,469,474,475,478,480,484,486,488,493,494,497,499,501,506,507,509,513,515,519,524,525,527,529,534,535,540,541,543,547,554,555,557,561,562,564,568,574,575,577,579,581,587,588,590,594,595,597,598,603,604,606,611,616,617,619,623,624,626,630,636,637,639,641,646,647,650,653,654,661,662,664,666,671,674,676,681,682,684,685,689,690,694,696,700,703,707,708,709,712,713,716,719,720,722,726,728,732,736,737,738,740,745,746,749,750,755,756,759,761,768,769,771,773,775,779,784,785,787,792,795,799,803,804
-----computeFrom-----
40,41
40,42
61,62
61,63
63,64
63,65
145,146
145,147
157,158
157,159
163,164
163,165
178,179
178,180
191,192
191,193
199,200
199,201
202,203
202,204
213,214
213,215
225,226
225,227
237,238
237,239
241,242
241,243
242,243
242,244
243,244
243,245
244,245
244,246
263,264
263,265
275,276
275,277
287,288
287,289
291,292
291,293
303,304
303,305
322,323
322,324
330,331
330,332
344,345
344,346
381,382
381,383
386,387
386,388
408,409
408,410
429,430
429,431
434,435
434,436
436,437
436,438
458,459
458,460
471,472
471,473
490,491
490,492
503,504
503,505
537,538
537,539
545,546
545,547
548,549
548,550
566,567
566,568
582,583
582,584
583,584
583,585
609,610
609,611
612,613
612,614
628,629
628,630
643,644
643,645
669,670
669,671
677,678
677,679
678,679
678,680
698,699
698,700
742,743
742,744
752,753
752,754
763,764
763,765
781,782
781,783
789,790
789,791
793,794
793,795
801,802
801,803
-----guardedBy-----
248,279
250,295
252,293
254,307
246,267
239,305
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static bool ravb_rx(struct net_device *ndev, int *quota, int q){	struct ravb_private *priv = netdev_priv(ndev);	int entry = priv->cur_rx[q] % priv->num_rx_ring[q];	int boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q];	struct net_device_stats *stats = &priv->stats[q];	struct ravb_ex_rx_desc *desc;	struct sk_buff *skb;	dma_addr_t dma_addr;	struct timespec64 ts;	u8  desc_status;	u16 pkt_len;	int limit;	boguscnt = min(boguscnt, *quota);	limit = boguscnt;	desc = &priv->rx_ring[q][entry];	while (desc->die_dt != DT_FEMPTY) {		/* Descriptor type must be checked before all other reads */		dma_rmb();		desc_status = desc->msc;		pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS;		if (--boguscnt < 0)			break;		/* We use 0-byte descriptors to mark the DMA mapping errors */		if (!pkt_len)			continue;		if (desc_status & MSC_MC)			stats->multicast++;		if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)) {			stats->rx_errors++;			if (desc_status & MSC_CRC)				stats->rx_crc_errors++;			if (desc_status & MSC_RFE)				stats->rx_frame_errors++;			if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;			if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;		} else {			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;			skb = priv->rx_skb[q][entry];			priv->rx_skb[q][entry] = NULL;			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);			get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;			if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}			skb_put(skb, pkt_len);			skb->protocol = eth_type_trans(skb, ndev);			if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);			napi_gro_receive(&priv->napi[q], skb);			stats->rx_packets++;			stats->rx_bytes += pkt_len;		}		entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];	}	/* Refill the RX ring buffers. */	for (; priv->cur_rx[q] - priv->dirty_rx[q] > 0; priv->dirty_rx[q]++) {		entry = priv->dirty_rx[q] % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];		desc->ds_cc = cpu_to_le16(priv->rx_buf_sz);		if (!priv->rx_skb[q][entry]) {			skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);			if (!skb)				break;	/* Better luck next round. */			ravb_set_buffer_align(skb);			dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);			skb_checksum_none_assert(skb);			/* We just set the data size to 0 for a failed mapping			 * which should prevent DMA  from happening...			 */			if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);			desc->dptr = cpu_to_le32(dma_addr);			priv->rx_skb[q][entry] = skb;		}		/* Descriptor type must be set after all the above writes */		dma_wmb();		desc->die_dt = DT_FEMPTY;	}	*quota -= limit - (++boguscnt);	return boguscnt <= 0;}
static bool
ravb_rx(struct net_device *ndev, int *quota, int q)
ravb_rx
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
int *quota
int
*quota
*
quota
int q
int
q
q
{	struct ravb_private *priv = netdev_priv(ndev);	int entry = priv->cur_rx[q] % priv->num_rx_ring[q];	int boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q];	struct net_device_stats *stats = &priv->stats[q];	struct ravb_ex_rx_desc *desc;	struct sk_buff *skb;	dma_addr_t dma_addr;	struct timespec64 ts;	u8  desc_status;	u16 pkt_len;	int limit;	boguscnt = min(boguscnt, *quota);	limit = boguscnt;	desc = &priv->rx_ring[q][entry];	while (desc->die_dt != DT_FEMPTY) {		/* Descriptor type must be checked before all other reads */		dma_rmb();		desc_status = desc->msc;		pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS;		if (--boguscnt < 0)			break;		/* We use 0-byte descriptors to mark the DMA mapping errors */		if (!pkt_len)			continue;		if (desc_status & MSC_MC)			stats->multicast++;		if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)) {			stats->rx_errors++;			if (desc_status & MSC_CRC)				stats->rx_crc_errors++;			if (desc_status & MSC_RFE)				stats->rx_frame_errors++;			if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;			if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;		} else {			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;			skb = priv->rx_skb[q][entry];			priv->rx_skb[q][entry] = NULL;			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);			get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;			if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}			skb_put(skb, pkt_len);			skb->protocol = eth_type_trans(skb, ndev);			if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);			napi_gro_receive(&priv->napi[q], skb);			stats->rx_packets++;			stats->rx_bytes += pkt_len;		}		entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];	}	/* Refill the RX ring buffers. */	for (; priv->cur_rx[q] - priv->dirty_rx[q] > 0; priv->dirty_rx[q]++) {		entry = priv->dirty_rx[q] % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];		desc->ds_cc = cpu_to_le16(priv->rx_buf_sz);		if (!priv->rx_skb[q][entry]) {			skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);			if (!skb)				break;	/* Better luck next round. */			ravb_set_buffer_align(skb);			dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);			skb_checksum_none_assert(skb);			/* We just set the data size to 0 for a failed mapping			 * which should prevent DMA  from happening...			 */			if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);			desc->dptr = cpu_to_le32(dma_addr);			priv->rx_skb[q][entry] = skb;		}		/* Descriptor type must be set after all the above writes */		dma_wmb();		desc->die_dt = DT_FEMPTY;	}	*quota -= limit - (++boguscnt);	return boguscnt <= 0;}
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private
ravb_private
*priv = netdev_priv(ndev)
*
priv
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
int entry = priv->cur_rx[q] % priv->num_rx_ring[q];
int entry = priv->cur_rx[q] % priv->num_rx_ring[q];
int
entry = priv->cur_rx[q] % priv->num_rx_ring[q]
entry
= priv->cur_rx[q] % priv->num_rx_ring[q]
priv->cur_rx[q] % priv->num_rx_ring[q]
priv->cur_rx[q]
priv->cur_rx
priv
priv
cur_rx
q
q
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
int boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q];
int boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q];
int
boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q]
boguscnt
= (priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q]
(priv->dirty_rx[q] + priv->num_rx_ring[q]) -			priv->cur_rx[q]
(priv->dirty_rx[q] + priv->num_rx_ring[q])
priv->dirty_rx[q] + priv->num_rx_ring[q]
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
priv->cur_rx[q]
priv->cur_rx
priv
priv
cur_rx
q
q
struct net_device_stats *stats = &priv->stats[q];
struct net_device_stats *stats = &priv->stats[q];
struct net_device_stats
net_device_stats
*stats = &priv->stats[q]
*
stats
= &priv->stats[q]
&priv->stats[q]
priv->stats[q]
priv->stats
priv
priv
stats
q
q
struct ravb_ex_rx_desc *desc;
struct ravb_ex_rx_desc *desc;
struct ravb_ex_rx_desc
ravb_ex_rx_desc
*desc
*
desc
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
dma_addr_t dma_addr;
dma_addr_t dma_addr;
dma_addr_t
dma_addr_t
dma_addr
dma_addr
struct timespec64 ts;
struct timespec64 ts;
struct timespec64
timespec64
ts
ts
u8  desc_status;
u8  desc_status;
u8
u8
desc_status
desc_status
u16 pkt_len;
u16 pkt_len;
u16
u16
pkt_len
pkt_len
int limit;
int limit;
int
limit
limit
boguscnt = min(boguscnt, *quota);
boguscnt = min(boguscnt, *quota)
boguscnt
boguscnt
min(boguscnt, *quota)
min
min
boguscnt
boguscnt
*quota
quota
quota
limit = boguscnt;
limit = boguscnt
limit
limit
boguscnt
boguscnt
desc = &priv->rx_ring[q][entry];
desc = &priv->rx_ring[q][entry]
desc
desc
&priv->rx_ring[q][entry]
priv->rx_ring[q][entry]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
entry
entry
while (desc->die_dt != DT_FEMPTY) {		/* Descriptor type must be checked before all other reads */		dma_rmb();		desc_status = desc->msc;		pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS;		if (--boguscnt < 0)			break;		/* We use 0-byte descriptors to mark the DMA mapping errors */		if (!pkt_len)			continue;		if (desc_status & MSC_MC)			stats->multicast++;		if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)) {			stats->rx_errors++;			if (desc_status & MSC_CRC)				stats->rx_crc_errors++;			if (desc_status & MSC_RFE)				stats->rx_frame_errors++;			if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;			if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;		} else {			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;			skb = priv->rx_skb[q][entry];			priv->rx_skb[q][entry] = NULL;			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);			get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;			if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}			skb_put(skb, pkt_len);			skb->protocol = eth_type_trans(skb, ndev);			if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);			napi_gro_receive(&priv->napi[q], skb);			stats->rx_packets++;			stats->rx_bytes += pkt_len;		}		entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];	}
desc->die_dt != DT_FEMPTY
desc->die_dt
desc
desc
die_dt
DT_FEMPTY
DT_FEMPTY
{		/* Descriptor type must be checked before all other reads */		dma_rmb();		desc_status = desc->msc;		pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS;		if (--boguscnt < 0)			break;		/* We use 0-byte descriptors to mark the DMA mapping errors */		if (!pkt_len)			continue;		if (desc_status & MSC_MC)			stats->multicast++;		if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)) {			stats->rx_errors++;			if (desc_status & MSC_CRC)				stats->rx_crc_errors++;			if (desc_status & MSC_RFE)				stats->rx_frame_errors++;			if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;			if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;		} else {			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;			skb = priv->rx_skb[q][entry];			priv->rx_skb[q][entry] = NULL;			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);			get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;			if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}			skb_put(skb, pkt_len);			skb->protocol = eth_type_trans(skb, ndev);			if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);			napi_gro_receive(&priv->napi[q], skb);			stats->rx_packets++;			stats->rx_bytes += pkt_len;		}		entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];	}
dma_rmb();
dma_rmb()
dma_rmb
dma_rmb
desc_status = desc->msc;
desc_status = desc->msc
desc_status
desc_status
desc->msc
desc
desc
msc
pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS;
pkt_len = le16_to_cpu(desc->ds_cc) & RX_DS
pkt_len
pkt_len
le16_to_cpu(desc->ds_cc) & RX_DS
le16_to_cpu(desc->ds_cc)
le16_to_cpu
le16_to_cpu
desc->ds_cc
desc
desc
ds_cc
RX_DS
RX_DS
if (--boguscnt < 0)			break;
--boguscnt < 0
--boguscnt
boguscnt
boguscnt
0
break;
if (!pkt_len)			continue;
!pkt_len
pkt_len
pkt_len
continue;
if (desc_status & MSC_MC)			stats->multicast++;
desc_status & MSC_MC
desc_status
desc_status
MSC_MC
MSC_MC
stats->multicast++;
stats->multicast++
stats->multicast
stats
stats
multicast
if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)) {			stats->rx_errors++;			if (desc_status & MSC_CRC)				stats->rx_crc_errors++;			if (desc_status & MSC_RFE)				stats->rx_frame_errors++;			if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;			if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;		} else {			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;			skb = priv->rx_skb[q][entry];			priv->rx_skb[q][entry] = NULL;			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);			get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;			if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}			skb_put(skb, pkt_len);			skb->protocol = eth_type_trans(skb, ndev);			if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);			napi_gro_receive(&priv->napi[q], skb);			stats->rx_packets++;			stats->rx_bytes += pkt_len;		}
desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)
desc_status
desc_status
(MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF)
MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |				   MSC_CEEF
MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF
MSC_CRC | MSC_RFE | MSC_RTSF
MSC_CRC | MSC_RFE
MSC_CRC
MSC_CRC
MSC_RFE
MSC_RFE
MSC_RTSF
MSC_RTSF
MSC_RTLF
MSC_RTLF
MSC_CEEF
MSC_CEEF
{			stats->rx_errors++;			if (desc_status & MSC_CRC)				stats->rx_crc_errors++;			if (desc_status & MSC_RFE)				stats->rx_frame_errors++;			if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;			if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;		}
stats->rx_errors++;
stats->rx_errors++
stats->rx_errors
stats
stats
rx_errors
if (desc_status & MSC_CRC)				stats->rx_crc_errors++;
desc_status & MSC_CRC
desc_status
desc_status
MSC_CRC
MSC_CRC
stats->rx_crc_errors++;
stats->rx_crc_errors++
stats->rx_crc_errors
stats
stats
rx_crc_errors
if (desc_status & MSC_RFE)				stats->rx_frame_errors++;
desc_status & MSC_RFE
desc_status
desc_status
MSC_RFE
MSC_RFE
stats->rx_frame_errors++;
stats->rx_frame_errors++
stats->rx_frame_errors
stats
stats
rx_frame_errors
if (desc_status & (MSC_RTLF | MSC_RTSF))				stats->rx_length_errors++;
desc_status & (MSC_RTLF | MSC_RTSF)
desc_status
desc_status
(MSC_RTLF | MSC_RTSF)
MSC_RTLF | MSC_RTSF
MSC_RTLF
MSC_RTLF
MSC_RTSF
MSC_RTSF
stats->rx_length_errors++;
stats->rx_length_errors++
stats->rx_length_errors
stats
stats
rx_length_errors
if (desc_status & MSC_CEEF)				stats->rx_missed_errors++;
desc_status & MSC_CEEF
desc_status
desc_status
MSC_CEEF
MSC_CEEF
stats->rx_missed_errors++;
stats->rx_missed_errors++
stats->rx_missed_errors
stats
stats
rx_missed_errors
{			u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;			skb = priv->rx_skb[q][entry];			priv->rx_skb[q][entry] = NULL;			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);			get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;			if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}			skb_put(skb, pkt_len);			skb->protocol = eth_type_trans(skb, ndev);			if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);			napi_gro_receive(&priv->napi[q], skb);			stats->rx_packets++;			stats->rx_bytes += pkt_len;		}
u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;
u32 get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE;
u32
u32
get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE
get_ts
= priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE
priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE
priv->tstamp_rx_ctrl
priv
priv
tstamp_rx_ctrl
RAVB_RXTSTAMP_TYPE
RAVB_RXTSTAMP_TYPE
skb = priv->rx_skb[q][entry];
skb = priv->rx_skb[q][entry]
skb
skb
priv->rx_skb[q][entry]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
entry
entry
priv->rx_skb[q][entry] = NULL;
priv->rx_skb[q][entry] = NULL
priv->rx_skb[q][entry]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
entry
entry
NULL
NULL
dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE);
dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),					 priv->rx_buf_sz,					 DMA_FROM_DEVICE)
dma_unmap_single
dma_unmap_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
le32_to_cpu(desc->dptr)
le32_to_cpu
le32_to_cpu
desc->dptr
desc
desc
dptr
priv->rx_buf_sz
priv
priv
rx_buf_sz
DMA_FROM_DEVICE
DMA_FROM_DEVICE
get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;
get_ts &= (q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
get_ts
get_ts
(q == RAVB_NC) ?					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
(q == RAVB_NC)
q == RAVB_NC
q
q
RAVB_NC
RAVB_NC
RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
RAVB_RXTSTAMP_TYPE_V2_L2_EVENT
if (get_ts) {				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}
get_ts
get_ts
{				struct skb_shared_hwtstamps *shhwtstamps;				shhwtstamps = skb_hwtstamps(skb);				memset(shhwtstamps, 0, sizeof(*shhwtstamps));				ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);				ts.tv_nsec = le32_to_cpu(desc->ts_n);				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);			}
struct skb_shared_hwtstamps *shhwtstamps;
struct skb_shared_hwtstamps *shhwtstamps;
struct skb_shared_hwtstamps
skb_shared_hwtstamps
*shhwtstamps
*
shhwtstamps
shhwtstamps = skb_hwtstamps(skb);
shhwtstamps = skb_hwtstamps(skb)
shhwtstamps
shhwtstamps
skb_hwtstamps(skb)
skb_hwtstamps
skb_hwtstamps
skb
skb
memset(shhwtstamps, 0, sizeof(*shhwtstamps));
memset(shhwtstamps, 0, sizeof(*shhwtstamps))
memset
memset
shhwtstamps
shhwtstamps
0
sizeof(*shhwtstamps)
(*shhwtstamps)
*shhwtstamps
shhwtstamps
shhwtstamps
ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl);
ts.tv_sec = ((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl)
ts.tv_sec
ts
ts
tv_sec
((u64) le16_to_cpu(desc->ts_sh) <<					     32) | le32_to_cpu(desc->ts_sl)
((u64) le16_to_cpu(desc->ts_sh) <<					     32)
(u64) le16_to_cpu(desc->ts_sh) <<					     32
(u64) le16_to_cpu(desc->ts_sh)
u64
u64
u64

le16_to_cpu(desc->ts_sh)
le16_to_cpu
le16_to_cpu
desc->ts_sh
desc
desc
ts_sh
32
le32_to_cpu(desc->ts_sl)
le32_to_cpu
le32_to_cpu
desc->ts_sl
desc
desc
ts_sl
ts.tv_nsec = le32_to_cpu(desc->ts_n);
ts.tv_nsec = le32_to_cpu(desc->ts_n)
ts.tv_nsec
ts
ts
tv_nsec
le32_to_cpu(desc->ts_n)
le32_to_cpu
le32_to_cpu
desc->ts_n
desc
desc
ts_n
shhwtstamps->hwtstamp = timespec64_to_ktime(ts);
shhwtstamps->hwtstamp = timespec64_to_ktime(ts)
shhwtstamps->hwtstamp
shhwtstamps
shhwtstamps
hwtstamp
timespec64_to_ktime(ts)
timespec64_to_ktime
timespec64_to_ktime
ts
ts
skb_put(skb, pkt_len);
skb_put(skb, pkt_len)
skb_put
skb_put
skb
skb
pkt_len
pkt_len
skb->protocol = eth_type_trans(skb, ndev);
skb->protocol = eth_type_trans(skb, ndev)
skb->protocol
skb
skb
protocol
eth_type_trans(skb, ndev)
eth_type_trans
eth_type_trans
skb
skb
ndev
ndev
if (ndev->features & NETIF_F_RXCSUM)				ravb_rx_csum(skb);
ndev->features & NETIF_F_RXCSUM
ndev->features
ndev
ndev
features
NETIF_F_RXCSUM
NETIF_F_RXCSUM
ravb_rx_csum(skb);
ravb_rx_csum(skb)
ravb_rx_csum
ravb_rx_csum
skb
skb
napi_gro_receive(&priv->napi[q], skb);
napi_gro_receive(&priv->napi[q], skb)
napi_gro_receive
napi_gro_receive
&priv->napi[q]
priv->napi[q]
priv->napi
priv
priv
napi
q
q
skb
skb
stats->rx_packets++;
stats->rx_packets++
stats->rx_packets
stats
stats
rx_packets
stats->rx_bytes += pkt_len;
stats->rx_bytes += pkt_len
stats->rx_bytes
stats
stats
rx_bytes
pkt_len
pkt_len
entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q];
entry = (++priv->cur_rx[q]) % priv->num_rx_ring[q]
entry
entry
(++priv->cur_rx[q]) % priv->num_rx_ring[q]
(++priv->cur_rx[q])
++priv->cur_rx[q]
priv->cur_rx[q]
priv->cur_rx
priv
priv
cur_rx
q
q
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
desc = &priv->rx_ring[q][entry];
desc = &priv->rx_ring[q][entry]
desc
desc
&priv->rx_ring[q][entry]
priv->rx_ring[q][entry]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
entry
entry
for (; priv->cur_rx[q] - priv->dirty_rx[q] > 0; priv->dirty_rx[q]++) {		entry = priv->dirty_rx[q] % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];		desc->ds_cc = cpu_to_le16(priv->rx_buf_sz);		if (!priv->rx_skb[q][entry]) {			skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);			if (!skb)				break;	/* Better luck next round. */			ravb_set_buffer_align(skb);			dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);			skb_checksum_none_assert(skb);			/* We just set the data size to 0 for a failed mapping			 * which should prevent DMA  from happening...			 */			if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);			desc->dptr = cpu_to_le32(dma_addr);			priv->rx_skb[q][entry] = skb;		}		/* Descriptor type must be set after all the above writes */		dma_wmb();		desc->die_dt = DT_FEMPTY;	}
;
priv->cur_rx[q] - priv->dirty_rx[q] > 0
priv->cur_rx[q] - priv->dirty_rx[q]
priv->cur_rx[q]
priv->cur_rx
priv
priv
cur_rx
q
q
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
0
priv->dirty_rx[q]++
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
{		entry = priv->dirty_rx[q] % priv->num_rx_ring[q];		desc = &priv->rx_ring[q][entry];		desc->ds_cc = cpu_to_le16(priv->rx_buf_sz);		if (!priv->rx_skb[q][entry]) {			skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);			if (!skb)				break;	/* Better luck next round. */			ravb_set_buffer_align(skb);			dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);			skb_checksum_none_assert(skb);			/* We just set the data size to 0 for a failed mapping			 * which should prevent DMA  from happening...			 */			if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);			desc->dptr = cpu_to_le32(dma_addr);			priv->rx_skb[q][entry] = skb;		}		/* Descriptor type must be set after all the above writes */		dma_wmb();		desc->die_dt = DT_FEMPTY;	}
entry = priv->dirty_rx[q] % priv->num_rx_ring[q];
entry = priv->dirty_rx[q] % priv->num_rx_ring[q]
entry
entry
priv->dirty_rx[q] % priv->num_rx_ring[q]
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
desc = &priv->rx_ring[q][entry];
desc = &priv->rx_ring[q][entry]
desc
desc
&priv->rx_ring[q][entry]
priv->rx_ring[q][entry]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
entry
entry
desc->ds_cc = cpu_to_le16(priv->rx_buf_sz);
desc->ds_cc = cpu_to_le16(priv->rx_buf_sz)
desc->ds_cc
desc
desc
ds_cc
cpu_to_le16(priv->rx_buf_sz)
cpu_to_le16
cpu_to_le16
priv->rx_buf_sz
priv
priv
rx_buf_sz
if (!priv->rx_skb[q][entry]) {			skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);			if (!skb)				break;	/* Better luck next round. */			ravb_set_buffer_align(skb);			dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);			skb_checksum_none_assert(skb);			/* We just set the data size to 0 for a failed mapping			 * which should prevent DMA  from happening...			 */			if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);			desc->dptr = cpu_to_le32(dma_addr);			priv->rx_skb[q][entry] = skb;		}
!priv->rx_skb[q][entry]
priv->rx_skb[q][entry]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
entry
entry
{			skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);			if (!skb)				break;	/* Better luck next round. */			ravb_set_buffer_align(skb);			dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);			skb_checksum_none_assert(skb);			/* We just set the data size to 0 for a failed mapping			 * which should prevent DMA  from happening...			 */			if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);			desc->dptr = cpu_to_le32(dma_addr);			priv->rx_skb[q][entry] = skb;		}
skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1);
skb = netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1)
skb
skb
netdev_alloc_skb(ndev,					       priv->rx_buf_sz +					       RAVB_ALIGN - 1)
netdev_alloc_skb
netdev_alloc_skb
ndev
ndev
priv->rx_buf_sz +					       RAVB_ALIGN - 1
priv->rx_buf_sz +					       RAVB_ALIGN
priv->rx_buf_sz
priv
priv
rx_buf_sz
RAVB_ALIGN
RAVB_ALIGN
1
if (!skb)				break;
!skb
skb
skb
break;
ravb_set_buffer_align(skb);
ravb_set_buffer_align(skb)
ravb_set_buffer_align
ravb_set_buffer_align
skb
skb
dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE);
dma_addr = dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE)
dma_addr
dma_addr
dma_map_single(ndev->dev.parent, skb->data,						  le16_to_cpu(desc->ds_cc),						  DMA_FROM_DEVICE)
dma_map_single
dma_map_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
skb->data
skb
skb
data
le16_to_cpu(desc->ds_cc)
le16_to_cpu
le16_to_cpu
desc->ds_cc
desc
desc
ds_cc
DMA_FROM_DEVICE
DMA_FROM_DEVICE
skb_checksum_none_assert(skb);
skb_checksum_none_assert(skb)
skb_checksum_none_assert
skb_checksum_none_assert
skb
skb
if (dma_mapping_error(ndev->dev.parent, dma_addr))				desc->ds_cc = cpu_to_le16(0);
dma_mapping_error(ndev->dev.parent, dma_addr)
dma_mapping_error
dma_mapping_error
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
dma_addr
dma_addr
desc->ds_cc = cpu_to_le16(0);
desc->ds_cc = cpu_to_le16(0)
desc->ds_cc
desc
desc
ds_cc
cpu_to_le16(0)
cpu_to_le16
cpu_to_le16
0
desc->dptr = cpu_to_le32(dma_addr);
desc->dptr = cpu_to_le32(dma_addr)
desc->dptr
desc
desc
dptr
cpu_to_le32(dma_addr)
cpu_to_le32
cpu_to_le32
dma_addr
dma_addr
priv->rx_skb[q][entry] = skb;
priv->rx_skb[q][entry] = skb
priv->rx_skb[q][entry]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
entry
entry
skb
skb
dma_wmb();
dma_wmb()
dma_wmb
dma_wmb
desc->die_dt = DT_FEMPTY;
desc->die_dt = DT_FEMPTY
desc->die_dt
desc
desc
die_dt
DT_FEMPTY
DT_FEMPTY
*quota -= limit - (++boguscnt);
*quota -= limit - (++boguscnt)
*quota
quota
quota
limit - (++boguscnt)
limit
limit
(++boguscnt)
++boguscnt
boguscnt
boguscnt
return boguscnt <= 0;
boguscnt <= 0
boguscnt
boguscnt
0
-----joern-----
(388,32,0)
(75,192,0)
(3,276,0)
(300,269,0)
(15,128,0)
(258,48,0)
(443,155,0)
(289,295,0)
(29,90,0)
(458,256,0)
(120,0,0)
(333,409,0)
(87,257,0)
(464,178,0)
(146,132,0)
(248,354,0)
(318,168,0)
(241,394,0)
(93,124,0)
(202,56,0)
(31,343,0)
(17,102,0)
(317,218,0)
(314,217,0)
(458,218,0)
(424,232,0)
(32,218,0)
(412,354,0)
(149,337,0)
(171,30,0)
(143,38,0)
(30,276,0)
(250,196,0)
(422,102,0)
(88,217,0)
(22,32,0)
(133,122,0)
(220,256,0)
(118,314,0)
(111,341,0)
(132,100,0)
(342,143,0)
(55,393,0)
(392,114,0)
(292,324,0)
(434,4,0)
(26,302,0)
(370,100,0)
(166,410,0)
(126,343,0)
(338,42,0)
(51,130,0)
(109,85,0)
(408,421,0)
(37,116,0)
(141,17,0)
(223,178,0)
(47,143,0)
(90,130,0)
(228,100,0)
(157,114,0)
(449,314,0)
(149,218,0)
(102,17,0)
(236,218,0)
(186,196,0)
(325,15,0)
(431,343,0)
(95,447,0)
(293,48,0)
(0,179,0)
(359,343,0)
(4,49,0)
(310,100,0)
(399,430,0)
(342,324,0)
(251,85,0)
(429,35,0)
(119,318,0)
(379,89,0)
(287,310,0)
(361,326,0)
(192,431,0)
(68,356,0)
(124,392,0)
(427,318,0)
(191,134,0)
(192,232,0)
(275,218,0)
(351,377,0)
(278,309,0)
(446,341,0)
(196,297,0)
(54,408,0)
(144,114,0)
(147,87,0)
(297,398,0)
(153,121,0)
(254,110,0)
(48,293,0)
(366,304,0)
(19,458,0)
(232,154,0)
(172,66,0)
(375,335,0)
(164,218,0)
(311,227,0)
(25,269,0)
(336,130,0)
(178,464,0)
(127,446,0)
(204,43,0)
(216,35,0)
(77,401,0)
(101,126,0)
(271,295,0)
(14,202,0)
(46,305,0)
(244,3,0)
(256,457,0)
(8,233,0)
(245,392,0)
(164,18,0)
(464,218,0)
(192,49,0)
(30,403,0)
(276,30,0)
(352,217,0)
(457,231,0)
(241,218,0)
(191,272,0)
(101,196,0)
(92,236,0)
(86,227,0)
(381,284,0)
(195,35,0)
(354,122,0)
(374,392,0)
(350,112,0)
(394,196,0)
(85,34,0)
(280,72,0)
(257,87,0)
(398,297,0)
(309,343,0)
(282,423,0)
(192,446,0)
(70,102,0)
(15,367,0)
(192,67,0)
(355,170,0)
(197,89,0)
(283,453,0)
(58,130,0)
(306,66,0)
(255,104,0)
(4,67,0)
(42,356,0)
(155,123,0)
(347,43,0)
(134,191,0)
(379,453,0)
(313,77,0)
(455,370,0)
(272,191,0)
(57,280,0)
(178,457,0)
(4,232,0)
(427,89,0)
(135,159,0)
(154,274,0)
(288,446,0)
(95,148,0)
(107,361,0)
(436,379,0)
(115,174,0)
(170,77,0)
(380,403,0)
(38,143,0)
(362,231,0)
(367,226,0)
(206,87,0)
(237,425,0)
(382,89,0)
(410,34,0)
(425,43,0)
(20,218,0)
(335,249,0)
(395,136,0)
(168,231,0)
(106,439,0)
(373,130,0)
(190,403,0)
(229,232,0)
(143,342,0)
(13,125,0)
(164,284,0)
(394,144,0)
(44,187,0)
(81,394,0)
(212,49,0)
(302,246,0)
(453,43,0)
(330,399,0)
(448,197,0)
(257,66,0)
(4,186,0)
(337,230,0)
(346,205,0)
(122,218,0)
(116,457,0)
(137,170,0)
(447,326,0)
(404,218,0)
(112,72,0)
(358,437,0)
(363,48,0)
(459,401,0)
(170,355,0)
(200,464,0)
(49,317,0)
(18,237,0)
(104,383,0)
(2,231,0)
(276,3,0)
(4,106,0)
(61,0,0)
(372,300,0)
(435,218,0)
(274,13,0)
(123,155,0)
(447,95,0)
(215,330,0)
(33,56,0)
(246,302,0)
(383,104,0)
(148,455,0)
(382,453,0)
(377,457,0)
(384,287,0)
(63,301,0)
(139,287,0)
(18,164,0)
(318,119,0)
(227,457,0)
(144,392,0)
(457,45,0)
(255,48,0)
(192,106,0)
(288,232,0)
(432,236,0)
(376,363,0)
(455,425,0)
(266,82,0)
(73,304,0)
(10,215,0)
(13,274,0)
(121,457,0)
(21,3,0)
(345,304,0)
(279,247,0)
(263,437,0)
(371,310,0)
(67,253,0)
(278,293,0)
(112,136,0)
(110,148,0)
(122,354,0)
(275,330,0)
(356,42,0)
(40,119,0)
(79,66,0)
(265,83,0)
(110,100,0)
(459,233,0)
(106,148,0)
(195,455,0)
(205,453,0)
(310,202,0)
(63,179,0)
(300,32,0)
(404,393,0)
(319,63,0)
(0,192,0)
(367,179,0)
(343,403,0)
(32,300,0)
(259,345,0)
(64,271,0)
(84,318,0)
(249,335,0)
(4,431,0)
(329,42,0)
(23,431,0)
(101,20,0)
(439,410,0)
(192,434,0)
(126,101,0)
(456,77,0)
(82,457,0)
(24,317,0)
(309,30,0)
(301,349,0)
(41,107,0)
(332,456,0)
(253,305,0)
(230,337,0)
(135,100,0)
(455,168,0)
(353,408,0)
(192,456,0)
(261,149,0)
(344,56,0)
(119,218,0)
(247,246,0)
(195,218,0)
(187,403,0)
(354,457,0)
(450,425,0)
(50,284,0)
(461,409,0)
(262,431,0)
(398,218,0)
(343,126,0)
(182,148,0)
(293,124,0)
(97,155,0)
(458,186,0)
(230,334,0)
(297,435,0)
(316,231,0)
(209,1,0)
(401,459,0)
(242,77,0)
(194,337,0)
(399,218,0)
(167,89,0)
(312,111,0)
(131,280,0)
(96,242,0)
(425,237,0)
(365,125,0)
(379,270,0)
(349,231,0)
(197,453,0)
(188,392,0)
(80,45,0)
(331,222,0)
(45,34,0)
(246,247,0)
(165,231,0)
(389,324,0)
(4,446,0)
(36,247,0)
(334,230,0)
(49,370,0)
(202,310,0)
(271,179,0)
(205,193,0)
(418,430,0)
(203,226,0)
(249,310,0)
(453,283,0)
(87,77,0)
(275,121,0)
(421,408,0)
(423,119,0)
(132,148,0)
(193,205,0)
(361,270,0)
(419,38,0)
(330,215,0)
(293,278,0)
(398,116,0)
(125,365,0)
(341,111,0)
(433,383,0)
(345,457,0)
(409,77,0)
(78,349,0)
(171,343,0)
(20,357,0)
(151,459,0)
(77,231,0)
(317,222,0)
(288,100,0)
(431,157,0)
(394,241,0)
(4,171,0)
(67,343,0)
(430,457,0)
(192,171,0)
(162,109,0)
(293,356,0)
(154,326,0)
(269,300,0)
(213,393,0)
(72,112,0)
(337,149,0)
(53,90,0)
(243,300,0)
(208,164,0)
(124,293,0)
(4,107,0)
(159,77,0)
(76,246,0)
(269,415,0)
(256,458,0)
(264,326,0)
(175,231,0)
(416,309,0)
(387,100,0)
(303,222,0)
(437,263,0)
(157,363,0)
(65,148,0)
(360,430,0)
(88,168,0)
(284,164,0)
(267,390,0)
(201,242,0)
(28,382,0)
(324,342,0)
(159,135,0)
(357,457,0)
(225,104,0)
(194,263,0)
(339,373,0)
(442,255,0)
(222,457,0)
(122,237,0)
(390,77,0)
(435,82,0)
(69,38,0)
(233,459,0)
(130,43,0)
(297,196,0)
(335,89,0)
(156,43,0)
(302,457,0)
(291,116,0)
(378,301,0)
(328,256,0)
(155,77,0)
(330,275,0)
(452,197,0)
(456,288,0)
(129,186,0)
(310,249,0)
(320,390,0)
(163,409,0)
(435,297,0)
(136,112,0)
(315,231,0)
(349,179,0)
(192,231,0)
(421,274,0)
(445,31,0)
(288,49,0)
(104,255,0)
(415,100,0)
(192,186,0)
(59,134,0)
(35,195,0)
(1,114,0)
(196,403,0)
(176,170,0)
(210,227,0)
(234,241,0)
(301,63,0)
(20,101,0)
(438,272,0)
(439,100,0)
(125,13,0)
(423,457,0)
(73,110,0)
(318,427,0)
(217,218,0)
(89,427,0)
(417,373,0)
(386,334,0)
(304,218,0)
(396,374,0)
(116,398,0)
(110,73,0)
(4,456,0)
(3,457,0)
(31,187,0)
(335,453,0)
(428,51,0)
(410,439,0)
(9,336,0)
(304,345,0)
(226,231,0)
(83,283,0)
(103,124,0)
(404,88,0)
(211,174,0)
(341,326,0)
(174,241,0)
(246,76,0)
(393,404,0)
(237,18,0)
(295,271,0)
(408,89,0)
(192,107,0)
(82,435,0)
(240,349,0)
(460,404,0)
(108,335,0)
(334,457,0)
(301,4,0)
(4,31,0)
(407,82,0)
(430,399,0)
(226,194,0)
(140,383,0)
(189,357,0)
(39,377,0)
(392,76,0)
(310,287,0)
(99,20,0)
(402,43,0)
(426,51,0)
(221,231,0)
(317,49,0)
(217,314,0)
(462,302,0)
(440,357,0)
(88,404,0)
(180,394,0)
(17,130,0)
(464,296,0)
(83,425,0)
(125,138,0)
(284,457,0)
(391,456,0)
(321,231,0)
(74,293,0)
(181,67,0)
(288,38,0)
(152,382,0)
(42,34,0)
(365,197,0)
(4,301,0)
(148,100,0)
(327,434,0)
(409,461,0)
(168,88,0)
(160,390,0)
(323,195,0)
(272,326,0)
(16,432,0)
(56,34,0)
(356,293,0)
(173,231,0)
(455,148,0)
(270,361,0)
(7,432,0)
(56,202,0)
(239,379,0)
(233,457,0)
(49,168,0)
(205,89,0)
(382,130,0)
(86,415,0)
(446,447,0)
(214,171,0)
(296,464,0)
(121,275,0)
(150,168,0)
(185,245,0)
(288,456,0)
(405,233,0)
(83,236,0)
(393,457,0)
(199,455,0)
(283,83,0)
(364,159,0)
(314,457,0)
(357,20,0)
(132,38,0)
(177,136,0)
(194,226,0)
(269,100,0)
(138,125,0)
(459,218,0)
(390,320,0)
(119,423,0)
(274,421,0)
(260,85,0)
(149,377,0)
(432,457,0)
(277,309,0)
(158,263,0)
(394,81,0)
(230,218,0)
(287,457,0)
(324,453,0)
(45,457,0)
(454,132,0)
(184,159,0)
(76,34,0)
(236,83,0)
(72,280,0)
(413,437,0)
(307,334,0)
(117,446,0)
(299,345,0)
(286,410,0)
(288,107,0)
(285,13,0)
(400,205,0)
(463,177,0)
(5,171,0)
(241,174,0)
(242,281,0)
(85,109,0)
(451,66,0)
(298,399,0)
(236,432,0)
(455,195,0)
(94,67,0)
(217,88,0)
(263,218,0)
(383,34,0)
(169,370,0)
(142,231,0)
(113,230,0)
(49,425,0)
(322,95,0)
(304,73,0)
(397,275,0)
(411,193,0)
(186,144,0)
(268,121,0)
(363,157,0)
(35,457,0)
(252,435,0)
(434,128,0)
(76,392,0)
(305,253,0)
(48,114,0)
(288,106,0)
(272,447,0)
(263,194,0)
(377,149,0)
(273,415,0)
(161,453,0)
(105,272,0)
(71,107,0)
(60,106,0)
(294,231,0)
(11,179,0)
(98,231,0)
(198,144,0)
(89,231,0)
(174,457,0)
(179,367,0)
(219,419,0)
(414,43,0)
(348,114,0)
(415,86,0)
(270,379,0)
(309,278,0)
(12,423,0)
(6,72,0)
(183,288,0)
(340,86,0)
(410,148,0)
(401,77,0)
(237,122,0)
(420,182,0)
(274,154,0)
(179,231,0)
(309,253,0)
(134,447,0)
(227,86,0)
(399,330,0)
(337,194,0)
(367,15,0)
(52,100,0)
(290,31,0)
(444,114,0)
(394,370,0)
(437,457,0)
(245,114,0)
(145,178,0)
(235,101,0)
(27,367,0)
(130,382,0)
(222,317,0)
(136,177,0)
(197,365,0)
(369,447,0)
(1,392,0)
(408,453,0)
(192,31,0)
(406,76,0)
(238,231,0)
(224,106,0)
(441,398,0)
(281,242,0)
(4,231,0)
(62,457,0)
(38,43,0)
(385,336,0)
(177,130,0)
(186,458,0)
(324,89,0)
(213,55,1)
(211,115,1)
(143,47,1)
(233,8,1)
(122,218,1)
(199,195,1)
(242,77,1)
(406,188,1)
(110,254,1)
(454,146,1)
(201,51,1)
(124,93,1)
(12,167,1)
(1,209,1)
(67,343,1)
(423,457,1)
(76,34,1)
(250,215,1)
(288,232,1)
(195,218,1)
(261,377,1)
(178,457,1)
(192,186,1)
(187,44,1)
(88,217,1)
(237,18,1)
(192,456,1)
(205,453,1)
(317,222,1)
(171,343,1)
(192,67,1)
(189,440,1)
(164,284,1)
(432,457,1)
(357,457,1)
(384,139,1)
(256,328,1)
(120,61,1)
(205,346,1)
(13,125,1)
(345,259,1)
(134,447,1)
(45,80,1)
(125,138,1)
(445,290,1)
(357,189,1)
(336,9,1)
(302,462,1)
(14,56,1)
(193,205,1)
(307,149,1)
(337,149,1)
(86,227,1)
(236,218,1)
(416,124,1)
(255,104,1)
(396,392,1)
(164,208,1)
(443,97,1)
(19,256,1)
(197,89,1)
(160,17,1)
(8,405,1)
(31,343,1)
(32,218,1)
(20,99,1)
(342,324,1)
(293,74,1)
(455,425,1)
(257,87,1)
(343,126,1)
(334,457,1)
(159,77,1)
(318,84,1)
(4,67,1)
(389,69,1)
(459,218,1)
(83,425,1)
(21,244,1)
(462,26,1)
(60,224,1)
(217,352,1)
(141,373,1)
(288,456,1)
(208,284,1)
(435,82,1)
(101,235,1)
(115,30,1)
(405,313,1)
(223,145,1)
(155,77,1)
(312,446,1)
(153,193,1)
(361,270,1)
(7,161,1)
(260,251,1)
(242,96,1)
(11,77,1)
(215,330,1)
(338,258,1)
(427,318,1)
(255,442,1)
(279,302,1)
(300,372,1)
(371,287,1)
(440,359,1)
(107,41,1)
(397,121,1)
(334,386,1)
(409,163,1)
(359,196,1)
(76,246,1)
(301,63,1)
(47,342,1)
(393,457,1)
(268,153,1)
(337,230,1)
(58,402,1)
(379,436,1)
(438,447,1)
(400,89,1)
(404,460,1)
(70,422,1)
(207,295,1)
(206,177,1)
(106,148,1)
(311,273,1)
(181,255,1)
(61,4,1)
(139,249,1)
(20,357,1)
(407,398,1)
(46,67,1)
(318,168,1)
(346,400,1)
(162,85,1)
(6,350,1)
(203,168,1)
(265,236,1)
(409,77,1)
(410,148,1)
(0,120,1)
(374,396,1)
(215,10,1)
(89,427,1)
(367,15,1)
(83,265,1)
(99,357,1)
(277,416,1)
(217,218,1)
(420,109,1)
(442,104,1)
(74,278,1)
(112,72,1)
(3,21,1)
(330,399,1)
(214,343,1)
(25,310,1)
(380,144,1)
(37,291,1)
(210,311,1)
(163,333,1)
(126,101,1)
(124,392,1)
(121,457,1)
(197,448,1)
(386,307,1)
(398,116,1)
(447,95,1)
(63,319,1)
(63,179,1)
(39,203,1)
(132,38,1)
(419,38,1)
(309,343,1)
(246,302,1)
(379,89,1)
(388,25,1)
(455,168,1)
(202,56,1)
(93,103,1)
(437,457,1)
(147,206,1)
(309,30,1)
(140,433,1)
(127,361,1)
(164,218,1)
(437,413,1)
(145,187,1)
(298,430,1)
(368,269,1)
(394,241,1)
(109,85,1)
(302,457,1)
(222,457,1)
(289,271,1)
(366,345,1)
(253,305,1)
(54,353,1)
(408,89,1)
(166,106,1)
(363,48,1)
(4,446,1)
(382,453,1)
(433,1,1)
(419,219,1)
(317,24,1)
(119,423,1)
(309,253,1)
(15,325,1)
(273,177,1)
(304,345,1)
(305,46,1)
(251,439,1)
(229,272,1)
(149,377,1)
(288,446,1)
(313,226,1)
(288,183,1)
(256,457,1)
(200,178,1)
(183,456,1)
(330,275,1)
(85,260,1)
(18,164,1)
(85,34,1)
(382,152,1)
(51,428,1)
(24,222,1)
(310,371,1)
(295,289,1)
(410,34,1)
(422,141,1)
(374,392,1)
(169,49,1)
(410,286,1)
(464,178,1)
(68,42,1)
(176,373,1)
(258,245,1)
(44,31,1)
(182,148,1)
(271,64,1)
(423,282,1)
(314,118,1)
(192,431,1)
(240,78,1)
(367,226,1)
(45,34,1)
(202,14,1)
(324,292,1)
(130,382,1)
(198,186,1)
(373,417,1)
(453,283,1)
(385,257,1)
(274,421,1)
(399,298,1)
(26,406,1)
(340,227,1)
(3,457,1)
(400,453,1)
(459,151,1)
(188,81,1)
(332,391,1)
(456,77,1)
(104,225,1)
(42,329,1)
(75,192,1)
(143,342,1)
(192,107,1)
(431,262,1)
(284,457,1)
(177,130,1)
(376,431,1)
(32,22,1)
(69,130,1)
(355,170,1)
(237,122,1)
(304,218,1)
(434,128,1)
(137,176,1)
(293,124,1)
(122,133,1)
(192,106,1)
(4,186,1)
(303,331,1)
(146,368,1)
(233,457,1)
(53,17,1)
(56,344,1)
(5,214,1)
(458,218,1)
(88,404,1)
(194,263,1)
(90,29,1)
(110,73,1)
(144,392,1)
(308,419,1)
(224,132,1)
(108,202,1)
(241,234,1)
(219,295,1)
(65,415,1)
(123,155,1)
(125,365,1)
(48,293,1)
(327,215,1)
(186,196,1)
(365,197,1)
(263,158,1)
(435,218,1)
(177,136,1)
(417,339,1)
(174,457,1)
(354,457,1)
(329,338,1)
(56,34,1)
(9,385,1)
(17,130,1)
(408,54,1)
(381,50,1)
(110,148,1)
(170,77,1)
(17,102,1)
(151,233,1)
(148,455,1)
(272,447,1)
(82,266,1)
(185,374,1)
(446,447,1)
(51,130,1)
(322,369,1)
(331,148,1)
(390,77,1)
(287,384,1)
(455,199,1)
(192,446,1)
(436,239,1)
(383,34,1)
(236,92,1)
(284,381,1)
(430,418,1)
(450,123,1)
(222,303,1)
(352,314,1)
(209,48,1)
(179,367,1)
(149,218,1)
(458,19,1)
(356,68,1)
(87,147,1)
(320,390,1)
(354,412,1)
(192,0,1)
(333,336,1)
(83,236,1)
(22,388,1)
(459,233,1)
(20,218,1)
(29,53,1)
(450,288,1)
(216,65,1)
(192,49,1)
(325,27,1)
(269,415,1)
(246,247,1)
(59,105,1)
(296,464,1)
(275,218,1)
(441,116,1)
(226,194,1)
(452,232,1)
(78,179,1)
(192,232,1)
(335,375,1)
(186,458,1)
(398,441,1)
(292,389,1)
(360,275,1)
(122,354,1)
(101,196,1)
(300,32,1)
(4,431,1)
(4,106,1)
(263,437,1)
(134,59,1)
(448,452,1)
(167,349,1)
(390,267,1)
(339,461,1)
(36,279,1)
(111,312,1)
(288,106,1)
(192,31,1)
(288,107,1)
(282,12,1)
(318,119,1)
(106,60,1)
(394,144,1)
(310,287,1)
(168,88,1)
(434,327,1)
(184,364,1)
(429,216,1)
(180,241,1)
(424,229,1)
(323,35,1)
(49,425,1)
(136,112,1)
(430,457,1)
(81,394,1)
(149,261,1)
(373,130,1)
(40,423,1)
(345,457,1)
(97,90,1)
(394,196,1)
(404,393,1)
(82,457,1)
(380,81,1)
(399,430,1)
(234,174,1)
(301,349,1)
(95,148,1)
(379,453,1)
(192,434,1)
(275,397,1)
(252,82,1)
(269,300,1)
(174,211,1)
(196,297,1)
(415,86,1)
(227,457,1)
(146,341,1)
(455,195,1)
(91,374,1)
(299,109,1)
(288,49,1)
(55,217,1)
(153,207,1)
(15,128,1)
(105,438,1)
(248,18,1)
(255,48,1)
(192,171,1)
(247,36,1)
(426,419,1)
(158,437,1)
(271,179,1)
(116,457,1)
(309,277,1)
(159,184,1)
(35,429,1)
(398,218,1)
(335,89,1)
(278,309,1)
(170,137,1)
(310,202,1)
(133,354,1)
(446,117,1)
(239,107,1)
(391,135,1)
(458,256,1)
(152,28,1)
(132,148,1)
(457,45,1)
(87,77,1)
(382,89,1)
(86,340,1)
(432,16,1)
(225,383,1)
(178,223,1)
(285,125,1)
(161,425,1)
(104,383,1)
(23,255,1)
(28,58,1)
(230,113,1)
(73,304,1)
(67,94,1)
(394,180,1)
(113,334,1)
(94,181,1)
(77,401,1)
(299,182,1)
(378,434,1)
(428,426,1)
(49,168,1)
(135,159,1)
(121,268,1)
(191,134,1)
(80,62,1)
(4,232,1)
(328,220,1)
(324,89,1)
(241,218,1)
(349,179,1)
(291,250,1)
(464,200,1)
(4,301,1)
(267,160,1)
(50,450,1)
(141,355,1)
(129,458,1)
(283,83,1)
(259,299,1)
(263,218,1)
(245,185,1)
(230,218,1)
(408,453,1)
(236,432,1)
(31,445,1)
(369,368,1)
(171,5,1)
(102,70,1)
(84,119,1)
(314,457,1)
(350,395,1)
(281,242,1)
(341,111,1)
(449,150,1)
(4,31,1)
(383,140,1)
(245,392,1)
(227,210,1)
(27,11,1)
(300,243,1)
(399,218,1)
(404,218,1)
(288,38,1)
(349,240,1)
(295,271,1)
(280,57,1)
(463,281,1)
(103,356,1)
(335,453,1)
(30,276,1)
(418,360,1)
(372,32,1)
(241,174,1)
(425,237,1)
(275,121,1)
(270,379,1)
(450,90,1)
(411,205,1)
(363,376,1)
(402,193,1)
(157,363,1)
(182,420,1)
(297,435,1)
(212,317,1)
(101,20,1)
(439,410,1)
(339,336,1)
(118,449,1)
(194,337,1)
(217,314,1)
(144,198,1)
(297,398,1)
(193,411,1)
(266,407,1)
(395,463,1)
(205,89,1)
(351,39,1)
(421,408,1)
(377,351,1)
(461,409,1)
(327,91,1)
(455,370,1)
(132,454,1)
(49,317,1)
(290,380,1)
(232,424,1)
(57,131,1)
(293,356,1)
(460,393,1)
(109,162,1)
(272,191,1)
(186,129,1)
(262,23,1)
(150,457,1)
(319,378,1)
(155,443,1)
(49,212,1)
(4,49,1)
(95,322,1)
(119,218,1)
(4,456,1)
(13,285,1)
(33,370,1)
(413,358,1)
(393,213,1)
(456,332,1)
(195,35,1)
(377,457,1)
(220,157,1)
(92,432,1)
(42,34,1)
(4,107,1)
(431,343,1)
(276,3,1)
(72,280,1)
(116,37,1)
(464,218,1)
(412,248,1)
(392,76,1)
(131,6,1)
(370,169,1)
(153,296,1)
(375,108,1)
(324,453,1)
(254,73,1)
(304,366,1)
(154,274,1)
(344,33,1)
(195,323,1)
(394,370,1)
(249,335,1)
(364,110,1)
(358,337,1)
(10,330,1)
(38,143,1)
(230,334,1)
(119,40,1)
(41,71,1)
(35,457,1)
(317,218,1)
(71,154,1)
(117,127,1)
(287,457,1)
(1,392,1)
(463,51,1)
(16,7,1)
(197,453,1)
(0,179,1)
(235,20,1)
(310,249,1)
(401,459,1)
(96,201,1)
(4,171,1)
(23,253,1)
(400,308,1)
(435,252,1)
(286,166,1)
(90,130,1)
(244,171,1)
(336,130,1)
(53,320,1)
(293,278,1)
(356,42,1)
(243,32,1)
(64,38,1)
(274,13,1)
(353,13,1)
(297,398,2)
(298,374,2)
(19,374,2)
(304,345,2)
(345,177,2)
(49,317,2)
(32,218,2)
(76,246,2)
(192,171,2)
(147,177,2)
(116,457,2)
(105,368,2)
(251,177,2)
(206,177,2)
(289,193,2)
(177,136,2)
(328,374,2)
(288,177,2)
(338,374,2)
(215,374,2)
(178,81,2)
(116,215,2)
(244,215,2)
(422,177,2)
(76,34,2)
(335,453,2)
(132,38,2)
(272,368,2)
(56,34,2)
(425,419,2)
(464,218,2)
(143,193,2)
(4,31,2)
(253,255,2)
(343,126,2)
(303,177,2)
(180,215,2)
(67,343,2)
(51,419,2)
(181,255,2)
(211,215,2)
(447,95,2)
(24,177,2)
(431,343,2)
(309,374,2)
(18,419,2)
(252,215,2)
(171,343,2)
(431,374,2)
(0,179,2)
(139,177,2)
(428,419,2)
(339,177,2)
(280,419,2)
(336,177,2)
(302,81,2)
(291,215,2)
(438,368,2)
(242,51,2)
(104,383,2)
(456,177,2)
(311,177,2)
(446,447,2)
(409,336,2)
(404,393,2)
(341,111,2)
(31,343,2)
(270,368,2)
(236,218,2)
(346,295,2)
(287,457,2)
(283,83,2)
(85,34,2)
(236,432,2)
(35,177,2)
(255,104,2)
(192,107,2)
(368,177,2)
(182,148,2)
(447,368,2)
(4,171,2)
(127,368,2)
(399,430,2)
(186,458,2)
(170,373,2)
(101,196,2)
(86,177,2)
(72,419,2)
(16,419,2)
(192,446,2)
(4,186,2)
(366,177,2)
(410,148,2)
(38,193,2)
(47,193,2)
(262,374,2)
(288,446,2)
(56,177,2)
(26,81,2)
(277,374,2)
(177,130,2)
(310,177,2)
(191,368,2)
(83,425,2)
(257,177,2)
(391,177,2)
(201,51,2)
(44,81,2)
(219,295,2)
(375,177,2)
(296,81,2)
(299,177,2)
(132,177,2)
(112,419,2)
(318,119,2)
(433,374,2)
(109,85,2)
(192,434,2)
(6,419,2)
(399,374,2)
(286,177,2)
(379,89,2)
(49,168,2)
(30,276,2)
(60,177,2)
(372,32,2)
(426,419,2)
(205,295,2)
(174,457,2)
(164,419,2)
(365,368,2)
(430,374,2)
(455,177,2)
(71,368,2)
(178,457,2)
(46,255,2)
(202,56,2)
(296,374,2)
(265,419,2)
(361,270,2)
(415,177,2)
(365,197,2)
(67,255,2)
(278,309,2)
(115,215,2)
(101,20,2)
(192,431,2)
(187,374,2)
(425,237,2)
(395,419,2)
(344,177,2)
(136,419,2)
(48,293,2)
(126,101,2)
(272,191,2)
(373,177,2)
(145,81,2)
(259,177,2)
(379,453,2)
(119,423,2)
(81,215,2)
(49,425,2)
(370,177,2)
(93,374,2)
(4,107,2)
(330,374,2)
(222,457,2)
(380,374,2)
(193,295,2)
(184,177,2)
(137,373,2)
(293,278,2)
(17,130,2)
(442,374,2)
(29,177,2)
(122,354,2)
(309,30,2)
(54,368,2)
(434,128,2)
(406,81,2)
(183,177,2)
(42,34,2)
(4,106,2)
(345,457,2)
(44,374,2)
(149,377,2)
(31,374,2)
(377,457,2)
(281,51,2)
(144,374,2)
(97,90,2)
(454,177,2)
(427,318,2)
(108,177,2)
(361,368,2)
(131,419,2)
(335,177,2)
(443,90,2)
(141,177,2)
(249,335,2)
(182,109,2)
(295,193,2)
(195,218,2)
(110,73,2)
(197,368,2)
(178,374,2)
(124,392,2)
(75,192,2)
(88,404,2)
(284,457,2)
(312,368,2)
(404,218,2)
(276,215,2)
(208,419,2)
(90,177,2)
(266,215,2)
(439,177,2)
(217,314,2)
(335,89,2)
(239,368,2)
(250,215,2)
(136,112,2)
(217,218,2)
(222,177,2)
(202,177,2)
(192,67,2)
(384,177,2)
(382,193,2)
(302,457,2)
(51,130,2)
(269,415,2)
(124,374,2)
(285,368,2)
(357,215,2)
(125,138,2)
(37,215,2)
(268,374,2)
(410,34,2)
(229,368,2)
(455,425,2)
(288,106,2)
(17,102,2)
(435,215,2)
(380,81,2)
(168,88,2)
(192,31,2)
(163,336,2)
(227,457,2)
(456,77,2)
(288,49,2)
(57,419,2)
(243,32,2)
(275,81,2)
(271,193,2)
(296,464,2)
(83,419,2)
(464,374,2)
(237,18,2)
(256,374,2)
(111,368,2)
(146,177,2)
(436,368,2)
(122,419,2)
(371,177,2)
(125,365,2)
(343,215,2)
(205,453,2)
(88,217,2)
(271,179,2)
(349,179,2)
(320,390,2)
(461,409,2)
(152,193,2)
(423,457,2)
(135,159,2)
(101,215,2)
(337,230,2)
(207,295,2)
(22,177,2)
(382,89,2)
(91,374,2)
(424,368,2)
(95,368,2)
(200,374,2)
(153,81,2)
(148,177,2)
(245,374,2)
(367,15,2)
(3,215,2)
(381,419,2)
(18,164,2)
(1,392,2)
(432,419,2)
(374,392,2)
(157,374,2)
(235,215,2)
(86,227,2)
(322,368,2)
(410,177,2)
(330,275,2)
(383,374,2)
(119,218,2)
(418,374,2)
(186,196,2)
(35,457,2)
(400,295,2)
(174,215,2)
(185,374,2)
(276,3,2)
(342,324,2)
(452,368,2)
(103,374,2)
(407,215,2)
(374,81,2)
(310,249,2)
(382,453,2)
(411,295,2)
(132,148,2)
(354,419,2)
(23,374,2)
(341,368,2)
(255,48,2)
(409,77,2)
(334,457,2)
(300,177,2)
(420,109,2)
(215,330,2)
(224,177,2)
(274,421,2)
(437,457,2)
(87,77,2)
(270,379,2)
(4,301,2)
(242,77,2)
(397,374,2)
(121,457,2)
(356,42,2)
(247,81,2)
(9,177,2)
(63,179,2)
(320,17,2)
(288,38,2)
(154,274,2)
(419,295,2)
(394,144,2)
(287,177,2)
(448,368,2)
(314,457,2)
(50,419,2)
(394,241,2)
(4,456,2)
(64,193,2)
(308,419,2)
(398,116,2)
(356,374,2)
(394,370,2)
(310,287,2)
(107,368,2)
(76,81,2)
(223,374,2)
(295,271,2)
(292,193,2)
(192,232,2)
(275,218,2)
(379,368,2)
(459,218,2)
(256,457,2)
(461,336,2)
(281,242,2)
(332,177,2)
(153,374,2)
(4,232,2)
(441,215,2)
(415,86,2)
(30,215,2)
(353,368,2)
(171,215,2)
(160,17,2)
(246,302,2)
(196,215,2)
(20,218,2)
(135,177,2)
(89,427,2)
(350,419,2)
(53,177,2)
(273,177,2)
(210,177,2)
(125,368,2)
(355,170,2)
(176,373,2)
(13,368,2)
(263,437,2)
(260,177,2)
(367,226,2)
(232,368,2)
(5,215,2)
(166,177,2)
(230,218,2)
(305,255,2)
(440,215,2)
(390,17,2)
(245,392,2)
(226,194,2)
(193,205,2)
(70,177,2)
(275,374,2)
(133,419,2)
(233,457,2)
(58,193,2)
(267,17,2)
(32,177,2)
(179,367,2)
(189,215,2)
(212,177,2)
(13,125,2)
(199,177,2)
(336,130,2)
(330,399,2)
(458,374,2)
(192,106,2)
(274,368,2)
(301,63,2)
(435,218,2)
(104,374,2)
(288,107,2)
(457,45,2)
(82,215,2)
(330,81,2)
(126,215,2)
(430,81,2)
(290,374,2)
(390,77,2)
(283,419,2)
(412,419,2)
(157,363,2)
(177,419,2)
(38,143,2)
(357,457,2)
(69,193,2)
(196,297,2)
(109,177,2)
(129,374,2)
(249,177,2)
(257,87,2)
(4,446,2)
(145,374,2)
(121,374,2)
(102,177,2)
(15,128,2)
(41,368,2)
(74,374,2)
(383,34,2)
(393,457,2)
(398,218,2)
(187,81,2)
(21,215,2)
(398,215,2)
(195,35,2)
(416,374,2)
(92,419,2)
(155,77,2)
(4,431,2)
(81,394,2)
(149,218,2)
(298,81,2)
(122,218,2)
(458,256,2)
(236,419,2)
(323,177,2)
(87,177,2)
(215,81,2)
(134,368,2)
(419,38,2)
(99,215,2)
(288,456,2)
(297,215,2)
(17,177,2)
(278,374,2)
(155,90,2)
(143,342,2)
(112,72,2)
(331,177,2)
(123,90,2)
(20,357,2)
(94,255,2)
(82,457,2)
(164,218,2)
(241,174,2)
(392,76,2)
(324,453,2)
(360,374,2)
(96,51,2)
(49,177,2)
(401,459,2)
(77,401,2)
(458,218,2)
(310,202,2)
(394,196,2)
(121,81,2)
(90,130,2)
(317,177,2)
(254,177,2)
(290,81,2)
(293,356,2)
(317,218,2)
(376,374,2)
(333,336,2)
(324,89,2)
(293,374,2)
(169,177,2)
(459,233,2)
(421,368,2)
(421,408,2)
(20,215,2)
(402,193,2)
(360,81,2)
(216,177,2)
(148,455,2)
(255,374,2)
(446,368,2)
(83,236,2)
(7,419,2)
(205,89,2)
(399,218,2)
(194,263,2)
(209,374,2)
(397,81,2)
(110,148,2)
(429,177,2)
(31,81,2)
(300,32,2)
(363,48,2)
(399,81,2)
(72,280,2)
(195,177,2)
(4,49,2)
(439,410,2)
(408,453,2)
(192,49,2)
(408,368,2)
(4,67,2)
(48,374,2)
(73,304,2)
(274,13,2)
(140,374,2)
(453,283,2)
(65,177,2)
(364,177,2)
(200,81,2)
(304,218,2)
(162,177,2)
(463,419,2)
(237,419,2)
(329,374,2)
(284,419,2)
(275,121,2)
(95,148,2)
(258,374,2)
(293,124,2)
(304,177,2)
(42,374,2)
(269,300,2)
(227,177,2)
(317,222,2)
(309,253,2)
(396,81,2)
(435,82,2)
(279,81,2)
(246,247,2)
(464,81,2)
(301,349,2)
(268,81,2)
(59,368,2)
(373,130,2)
(161,419,2)
(340,177,2)
(194,337,2)
(106,177,2)
(272,447,2)
(192,456,2)
(14,177,2)
(288,232,2)
(188,81,2)
(455,370,2)
(394,215,2)
(241,215,2)
(408,89,2)
(455,168,2)
(450,419,2)
(417,177,2)
(68,374,2)
(342,193,2)
(25,177,2)
(453,419,2)
(297,435,2)
(430,457,2)
(134,447,2)
(237,122,2)
(130,193,2)
(388,177,2)
(191,134,2)
(117,368,2)
(455,195,2)
(223,81,2)
(36,81,2)
(45,34,2)
(269,177,2)
(385,177,2)
(85,177,2)
(154,368,2)
(73,177,2)
(355,373,2)
(28,193,2)
(198,374,2)
(324,193,2)
(110,177,2)
(10,81,2)
(392,81,2)
(462,81,2)
(170,77,2)
(418,81,2)
(225,374,2)
(33,177,2)
(445,374,2)
(230,334,2)
(359,215,2)
(309,343,2)
(241,218,2)
(432,457,2)
(369,368,2)
(197,89,2)
(164,284,2)
(159,177,2)
(445,81,2)
(248,419,2)
(144,392,2)
(10,374,2)
(389,193,2)
(263,218,2)
(354,457,2)
(1,374,2)
(234,215,2)
(123,155,2)
(186,374,2)
(159,77,2)
(246,81,2)
(192,186,2)
(464,178,2)
(253,305,2)
(197,453,2)
(220,374,2)
(3,457,2)
(130,382,2)
(214,215,2)
(363,374,2)
(337,149,2)
(318,168,2)
(106,148,2)
-----------------------------------
(0,boguscnt <= 0)
(1,skb_checksum_none_assert(skb)
(2,stats)
(3,priv->rx_buf_sz)
(4,*quota -= limit - (++boguscnt)
(5,ds_cc)
(6,MSC_RTSF)
(7,priv)
(8,stats)
(9,MSC_CRC)
(10,0)
(11,boguscnt)
(12,priv)
(13,(u64)
(14,parent)
(15,*quota)
(16,rx_ring)
(17,desc_status & (MSC_RTLF | MSC_RTSF)
(18,++priv->cur_rx[q])
(19,q)
(20,priv->rx_ring[q])
(21,rx_buf_sz)
(22,RAVB_NC)
(23,desc)
(24,q)
(25,get_ts)
(26,priv)
(27,boguscnt)
(28,desc)
(29,MSC_CEEF)
(30,desc->ds_cc = cpu_to_le16(priv->rx_buf_sz)
(31,desc->die_dt)
(32,q == RAVB_NC)
(33,ndev)
(34,struct net_device *ndev)
(35,priv->rx_skb)
(36,1)
(37,dirty_rx)
(38,pkt_len = le16_to_cpu(desc->ds_cc)
(39,priv)
(40,q)
(41,tv_nsec)
(42,ndev->dev)
(43,)
(44,DT_FEMPTY)
(45,netdev_priv(ndev)
(46,0)
(47,RX_DS)
(48,dma_addr = dma_map_single(ndev->dev.parent, skb->data,\n\\n\\t\\t\\t\\t\\t\\t  le16_to_cpu(desc->ds_cc)
(49,priv->rx_skb[q][entry])
(50,priv)
(51,desc_status & MSC_MC)
(52,if (get_ts)
(53,desc_status)
(54,ts_sl)
(55,priv)
(56,ndev->dev)
(57,MSC_CEEF)
(58,desc_status)
(59,shhwtstamps)
(60,protocol)
(61,boguscnt)
(62,priv)
(63,++boguscnt)
(64,boguscnt)
(65,skb)
(66,)
(67,desc->ds_cc)
(68,parent)
(69,pkt_len)
(70,MSC_RTSF)
(71,ts)
(72,MSC_RTSF | MSC_RTLF |\n\\n\\t\\t\\t\\t   MSC_CEEF)
(73,&priv->napi[q])
(74,DMA_FROM_DEVICE)
(75,RET)
(76,netdev_alloc_skb(ndev,\n\\n\\t\\t\\t\\t\\t       priv->rx_buf_sz +\n\\n\\t\\t\\t\\t\\t       RAVB_ALIGN - 1)
(77,*stats = &priv->stats[q])
(78,limit)
(79,if (desc_status & (MSC_RTLF | MSC_RTSF)
(80,ndev)
(81,!priv->rx_skb[q][entry])
(82,priv->num_rx_ring)
(83,priv->rx_ring[q][entry])
(84,entry)
(85,ndev->features)
(86,priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE)
(87,stats->rx_errors)
(88,priv->cur_rx[q] % priv->num_rx_ring[q])
(89,desc = &priv->rx_ring[q][entry])
(90,desc_status & MSC_CEEF)
(91,break;)
(92,q)
(93,data)
(94,ds_cc)
(95,skb_hwtstamps(skb)
(96,multicast)
(97,stats)
(98,pkt_len)
(99,q)
(100,)
(101,priv->rx_ring[q][entry])
(102,MSC_RTLF | MSC_RTSF)
(103,skb)
(104,ndev->dev.parent)
(105,0)
(106,skb->protocol)
(107,ts.tv_nsec)
(108,desc)
(109,ndev->features & NETIF_F_RXCSUM)
(110,napi_gro_receive(&priv->napi[q], skb)
(111,timespec64_to_ktime(ts)
(112,MSC_RFE | MSC_RTSF | MSC_RTLF |\n\\n\\t\\t\\t\\t   MSC_CEEF)
(113,q)
(114,)
(115,priv)
(116,priv->dirty_rx)
(117,hwtstamp)
(118,cur_rx)
(119,priv->rx_ring[q])
(120,0)
(121,priv->cur_rx)
(122,priv->num_rx_ring[q])
(123,stats->rx_missed_errors++)
(124,skb->data)
(125,(u64)
(126,&priv->rx_ring[q][entry])
(127,shhwtstamps)
(128,int *quota)
(129,entry)
(130,desc_status = desc->msc)
(131,MSC_RTLF)
(132,skb_put(skb, pkt_len)
(133,q)
(134,*shhwtstamps)
(135,stats->rx_packets++)
(136,MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |\n\\n\\t\\t\\t\\t   MSC_CEEF)
(137,rx_frame_errors)
(138,u64)
(139,priv)
(140,dev)
(141,desc_status)
(142,skb)
(143,le16_to_cpu(desc->ds_cc)
(144,priv->rx_skb[q][entry] = skb)
(145,priv)
(146,skb)
(147,rx_errors)
(148,skb = priv->rx_skb[q][entry])
(149,priv->dirty_rx[q])
(150,entry)
(151,q)
(152,msc)
(153,priv)
(154,ts.tv_sec = ((u64)
(155,stats->rx_missed_errors)
(156,if (desc_status & MSC_MC)
(157,desc->dptr = cpu_to_le32(dma_addr)
(158,q)
(159,stats->rx_packets)
(160,stats)
(161,desc)
(162,NETIF_F_RXCSUM)
(163,rx_crc_errors)
(164,priv->cur_rx[q])
(165,ts)
(166,skb)
(167,desc)
(168,entry = priv->cur_rx[q] % priv->num_rx_ring[q])
(169,NULL)
(170,stats->rx_frame_errors)
(171,desc->ds_cc)
(172,if (desc_status & MSC_RFE)
(173,desc)
(174,priv->rx_skb)
(175,for (; priv->cur_rx[q] - priv->dirty_rx[q] > 0; priv->dirty_rx[q]++)
(176,stats)
(177,desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |\n\\n\\t\\t\\t\\t   MSC_CEEF)
(178,priv->dirty_rx)
(179,boguscnt = min(boguscnt, *quota)
(180,entry)
(181,desc)
(182,ravb_rx_csum(skb)
(183,pkt_len)
(184,rx_packets)
(185,skb)
(186,priv->rx_skb[q][entry])
(187,desc->die_dt = DT_FEMPTY)
(188,skb)
(189,rx_ring)
(190,if (!priv->rx_skb[q][entry])
(191,sizeof(*shhwtstamps)
(192,return boguscnt <= 0;)
(193,desc->die_dt != DT_FEMPTY)
(194,(priv->dirty_rx[q] + priv->num_rx_ring[q])
(195,priv->rx_skb[q])
(196,entry = priv->dirty_rx[q] % priv->num_rx_ring[q])
(197,desc->ts_sh)
(198,skb)
(199,entry)
(200,q)
(201,stats)
(202,ndev->dev.parent)
(203,boguscnt)
(204,if (!pkt_len)
(205,desc->die_dt)
(206,stats)
(207,break;)
(208,q)
(209,skb)
(210,tstamp_rx_ctrl)
(211,rx_skb)
(212,entry)
(213,num_rx_ring)
(214,desc)
(215,priv->cur_rx[q] - priv->dirty_rx[q] > 0)
(216,priv)
(217,priv->cur_rx[q])
(218,int q)
(219,pkt_len)
(220,priv)
(221,desc_status)
(222,priv->rx_skb)
(223,dirty_rx)
(224,skb)
(225,parent)
(226,boguscnt = (priv->dirty_rx[q] + priv->num_rx_ring[q])
(227,priv->tstamp_rx_ctrl)
(228,if (ndev->features & NETIF_F_RXCSUM)
(229,ts)
(230,priv->num_rx_ring[q])
(231,)
(232,ts.tv_sec)
(233,priv->stats)
(234,q)
(235,entry)
(236,priv->rx_ring[q])
(237,(++priv->cur_rx[q])
(238,boguscnt)
(239,desc)
(240,boguscnt)
(241,priv->rx_skb[q])
(242,stats->multicast)
(243,~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT)
(244,priv)
(245,ravb_set_buffer_align(skb)
(246,priv->rx_buf_sz +\n\\n\\t\\t\\t\\t\\t       RAVB_ALIGN - 1)
(247,RAVB_ALIGN - 1)
(248,priv)
(249,le32_to_cpu(desc->dptr)
(250,entry)
(251,ndev)
(252,q)
(253,desc->ds_cc = cpu_to_le16(0)
(254,skb)
(255,dma_mapping_error(ndev->dev.parent, dma_addr)
(256,priv->rx_skb)
(257,stats->rx_errors++)
(258,dma_addr)
(259,napi)
(260,features)
(261,q)
(262,dptr)
(263,priv->cur_rx[q])
(264,shhwtstamps)
(265,entry)
(266,num_rx_ring)
(267,rx_length_errors)
(268,cur_rx)
(269,get_ts &= (q == RAVB_NC)
(270,le32_to_cpu(desc->ts_n)
(271,--boguscnt)
(272,memset(shhwtstamps, 0, sizeof(*shhwtstamps)
(273,get_ts)
(274,((u64)
(275,priv->cur_rx[q])
(276,cpu_to_le16(priv->rx_buf_sz)
(277,ds_cc)
(278,le16_to_cpu(desc->ds_cc)
(279,RAVB_ALIGN)
(280,MSC_RTLF |\n\\n\\t\\t\\t\\t   MSC_CEEF)
(281,stats->multicast++)
(282,rx_ring)
(283,&priv->rx_ring[q][entry])
(284,priv->cur_rx)
(285,32)
(286,ndev)
(287,priv->rx_buf_sz)
(288,stats->rx_bytes += pkt_len)
(289,0)
(290,desc)
(291,priv)
(292,ds_cc)
(293,dma_map_single(ndev->dev.parent, skb->data,\n\\n\\t\\t\\t\\t\\t\\t  le16_to_cpu(desc->ds_cc)
(294,entry)
(295,--boguscnt < 0)
(296,priv->dirty_rx[q]++)
(297,priv->dirty_rx[q] % priv->num_rx_ring[q])
(298,q)
(299,priv)
(300,(q == RAVB_NC)
(301,limit - (++boguscnt)
(302,priv->rx_buf_sz)
(303,rx_skb)
(304,priv->napi[q])
(305,cpu_to_le16(0)
(306,if (desc_status & MSC_CRC)
(307,priv)
(308,continue;)
(309,desc->ds_cc)
(310,dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr)
(311,priv)
(312,ts)
(313,stats)
(314,priv->cur_rx)
(315,priv)
(316,dma_addr)
(317,priv->rx_skb[q])
(318,priv->rx_ring[q][entry])
(319,boguscnt)
(320,stats->rx_length_errors++)
(321,limit)
(322,skb)
(323,q)
(324,desc->ds_cc)
(325,quota)
(326,)
(327,quota)
(328,rx_skb)
(329,dev)
(330,priv->cur_rx[q] - priv->dirty_rx[q])
(331,priv)
(332,rx_bytes)
(333,stats)
(334,priv->num_rx_ring)
(335,desc->dptr)
(336,desc_status & MSC_CRC)
(337,priv->dirty_rx[q] + priv->num_rx_ring[q])
(338,ndev)
(339,desc_status)
(340,RAVB_RXTSTAMP_TYPE)
(341,shhwtstamps->hwtstamp = timespec64_to_ktime(ts)
(342,le16_to_cpu(desc->ds_cc)
(343,desc = &priv->rx_ring[q][entry])
(344,dev)
(345,priv->napi)
(346,die_dt)
(347,if (--boguscnt < 0)
(348,if (dma_mapping_error(ndev->dev.parent, dma_addr)
(349,limit = boguscnt)
(350,MSC_RFE)
(351,dirty_rx)
(352,q)
(353,desc)
(354,priv->num_rx_ring)
(355,stats->rx_frame_errors++)
(356,ndev->dev.parent)
(357,priv->rx_ring)
(358,priv)
(359,desc)
(360,priv)
(361,ts.tv_nsec = le32_to_cpu(desc->ts_n)
(362,while (desc->die_dt != DT_FEMPTY)
(363,cpu_to_le32(dma_addr)
(364,stats)
(365,le16_to_cpu(desc->ts_sh)
(366,q)
(367,min(boguscnt, *quota)
(368,get_ts)
(369,shhwtstamps)
(370,priv->rx_skb[q][entry] = NULL)
(371,DMA_FROM_DEVICE)
(372,RAVB_RXTSTAMP_TYPE_V2_L2_EVENT)
(373,desc_status & MSC_RFE)
(374,!skb)
(375,dptr)
(376,dma_addr)
(377,priv->dirty_rx)
(378,limit)
(379,desc->ts_n)
(380,dma_wmb()
(381,cur_rx)
(382,desc->msc)
(383,ndev->dev)
(384,rx_buf_sz)
(385,desc_status)
(386,num_rx_ring)
(387,get_ts)
(388,q)
(389,desc)
(390,stats->rx_length_errors)
(391,stats)
(392,skb = netdev_alloc_skb(ndev,\n\\n\\t\\t\\t\\t\\t       priv->rx_buf_sz +\n\\n\\t\\t\\t\\t\\t       RAVB_ALIGN - 1)
(393,priv->num_rx_ring)
(394,priv->rx_skb[q][entry])
(395,MSC_CRC)
(396,skb)
(397,q)
(398,priv->dirty_rx[q])
(399,priv->dirty_rx[q])
(400,desc)
(401,&priv->stats[q])
(402,dma_rmb()
(403,)
(404,priv->num_rx_ring[q])
(405,priv)
(406,ndev)
(407,priv)
(408,desc->ts_sl)
(409,stats->rx_crc_errors)
(410,eth_type_trans(skb, ndev)
(411,DT_FEMPTY)
(412,num_rx_ring)
(413,cur_rx)
(414,if (desc_status & (MSC_CRC | MSC_RFE | MSC_RTSF | MSC_RTLF |\n\\n\\t\\t\\t\\t   MSC_CEEF)
(415,get_ts = priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE)
(416,desc)
(417,MSC_RFE)
(418,dirty_rx)
(419,!pkt_len)
(420,skb)
(421,le32_to_cpu(desc->ts_sl)
(422,MSC_RTLF)
(423,priv->rx_ring)
(424,tv_sec)
(425,entry = (++priv->cur_rx[q])
(426,desc_status)
(427,&priv->rx_ring[q][entry])
(428,MSC_MC)
(429,rx_skb)
(430,priv->dirty_rx)
(431,desc->dptr)
(432,priv->rx_ring)
(433,ndev)
(434,*quota)
(435,priv->num_rx_ring[q])
(436,ts_n)
(437,priv->cur_rx)
(438,shhwtstamps)
(439,skb->protocol = eth_type_trans(skb, ndev)
(440,priv)
(441,q)
(442,dma_addr)
(443,rx_missed_errors)
(444,if (!skb)
(445,die_dt)
(446,shhwtstamps->hwtstamp)
(447,shhwtstamps = skb_hwtstamps(skb)
(448,ts_sh)
(449,priv)
(450,entry)
(451,if (desc_status & MSC_CEEF)
(452,desc)
(453,desc = &priv->rx_ring[q][entry])
(454,pkt_len)
(455,priv->rx_skb[q][entry])
(456,stats->rx_bytes)
(457,*priv = netdev_priv(ndev)
(458,priv->rx_skb[q])
(459,priv->stats[q])
(460,q)
(461,stats->rx_crc_errors++)
(462,rx_buf_sz)
(463,desc_status)
(464,priv->dirty_rx[q])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^