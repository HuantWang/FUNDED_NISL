-----label-----
0
-----code-----
static void jme_drop_tx_map(struct jme_adapter *jme, int startidx, int count)
{
	struct jme_ring *txring = &(jme->txring[0]);
	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
	int mask = jme->tx_ring_mask;
	int j;

	for (j = 0 ; j < count ; j++) {
		ctxbi = txbi + ((startidx + j + 2) & (mask));
		pci_unmap_page(jme->pdev,
				ctxbi->mapping,
				ctxbi->len,
				PCI_DMA_TODEVICE);

				ctxbi->mapping = 0;
				ctxbi->len = 0;
	}

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
19,24
20,21
21,22
21,23
22,23
24,25
24,26
24,27
27,28
28,29
29,30
30,31
30,32
31,32
31,33
32,33
36,37
37,38
37,39
37,40
38,39
40,41
40,42
40,43
43,44
44,45
44,46
45,46
48,49
48,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
72,73
72,74
73,74
75,76
77,78
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
85,86
85,87
86,87
88,89
89,90
89,91
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
101,102
102,103
102,104
102,105
102,106
102,107
103,104
105,106
105,107
106,107
109,110
109,111
110,111
113,114
113,115
114,115
117,118
119,120
120,121
120,122
121,122
121,123
122,123
126,127
127,128
127,129
128,129
128,130
129,130
-----nextToken-----
2,4,7,9,10,12,14,16,18,23,25,26,33,34,35,39,41,42,46,47,49,50,53,55,59,60,63,65,70,71,74,76,79,84,87,94,96,97,100,104,107,108,111,112,115,116,118,123,124,125,130,131,132
-----computeFrom-----
68,69
68,70
72,73
72,74
82,83
82,84
85,86
85,87
89,90
89,91
91,92
91,93
92,93
92,94
120,121
120,122
127,128
127,129
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static void jme_drop_tx_map(struct jme_adapter *jme, int startidx, int count){	struct jme_ring *txring = &(jme->txring[0]);	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;	int mask = jme->tx_ring_mask;	int j;	for (j = 0 ; j < count ; j++) {		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}}
static void
jme_drop_tx_map(struct jme_adapter *jme, int startidx, int count)
jme_drop_tx_map
struct jme_adapter *jme
struct jme_adapter
jme_adapter
*jme
*
jme
int startidx
int
startidx
startidx
int count
int
count
count
{	struct jme_ring *txring = &(jme->txring[0]);	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;	int mask = jme->tx_ring_mask;	int j;	for (j = 0 ; j < count ; j++) {		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}}
struct jme_ring *txring = &(jme->txring[0]);
struct jme_ring *txring = &(jme->txring[0]);
struct jme_ring
jme_ring
*txring = &(jme->txring[0])
*
txring
= &(jme->txring[0])
&(jme->txring[0])
(jme->txring[0])
jme->txring[0]
jme->txring
jme
jme
txring
0
struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
struct jme_buffer_info
jme_buffer_info
*txbi = txring->bufinf
*
txbi
= txring->bufinf
txring->bufinf
txring
txring
bufinf
*ctxbi
*
ctxbi
int mask = jme->tx_ring_mask;
int mask = jme->tx_ring_mask;
int
mask = jme->tx_ring_mask
mask
= jme->tx_ring_mask
jme->tx_ring_mask
jme
jme
tx_ring_mask
int j;
int j;
int
j
j
for (j = 0 ; j < count ; j++) {		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}
j = 0 ;
j = 0
j
j
0
j < count
j
j
count
count
j++
j
j
{		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}
ctxbi = txbi + ((startidx + j + 2) & (mask));
ctxbi = txbi + ((startidx + j + 2) & (mask))
ctxbi
ctxbi
txbi + ((startidx + j + 2) & (mask))
txbi
txbi
((startidx + j + 2) & (mask))
(startidx + j + 2) & (mask)
(startidx + j + 2)
startidx + j + 2
startidx + j
startidx
startidx
j
j
2
(mask)
mask
mask
pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);
pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE)
pci_unmap_page
pci_unmap_page
jme->pdev
jme
jme
pdev
ctxbi->mapping
ctxbi
ctxbi
mapping
ctxbi->len
ctxbi
ctxbi
len
PCI_DMA_TODEVICE
PCI_DMA_TODEVICE
ctxbi->mapping = 0;
ctxbi->mapping = 0
ctxbi->mapping
ctxbi
ctxbi
mapping
0
ctxbi->len = 0;
ctxbi->len = 0
ctxbi->len
ctxbi
ctxbi
len
0
-----joern-----
(33,39,0)
(42,33,0)
(10,50,0)
(68,21,0)
(32,28,0)
(31,43,0)
(55,36,0)
(26,9,0)
(21,39,0)
(24,55,0)
(17,5,0)
(26,28,0)
(54,44,0)
(28,33,0)
(9,26,0)
(57,5,0)
(37,25,0)
(66,22,0)
(30,43,0)
(23,28,0)
(28,35,0)
(11,5,0)
(62,47,0)
(8,50,0)
(46,36,0)
(65,8,0)
(27,35,0)
(10,26,0)
(64,36,0)
(63,9,0)
(9,21,0)
(47,57,0)
(35,39,0)
(43,54,0)
(57,47,0)
(51,26,0)
(7,25,0)
(54,60,0)
(29,54,0)
(28,26,0)
(60,54,0)
(58,5,0)
(20,10,0)
(38,9,0)
(2,8,0)
(16,21,0)
(3,52,0)
(43,36,0)
(9,33,0)
(61,25,0)
(49,59,0)
(25,37,0)
(48,16,0)
(56,57,0)
(55,18,0)
(59,5,0)
(53,36,0)
(14,60,0)
(16,33,0)
(69,33,0)
(61,50,0)
(12,52,0)
(15,61,0)
(13,47,0)
(54,43,0)
(33,42,0)
(67,5,0)
(40,16,0)
(8,59,0)
(1,42,0)
(22,37,0)
(6,10,0)
(37,22,0)
(0,5,0)
(42,57,0)
(47,22,0)
(59,8,0)
(42,60,0)
(4,64,0)
(52,35,0)
(60,59,0)
(45,61,0)
(26,39,0)
(26,10,0)
(52,33,0)
(25,61,0)
(22,5,0)
(41,55,0)
(19,5,0)
(60,42,0)
(49,57,1)
(33,42,1)
(30,29,1)
(8,2,1)
(1,69,1)
(24,64,1)
(45,15,1)
(26,10,1)
(23,9,1)
(36,53,1)
(14,54,1)
(15,66,1)
(43,31,1)
(20,33,1)
(4,35,1)
(25,7,1)
(26,28,1)
(42,60,1)
(62,56,1)
(48,40,1)
(59,8,1)
(42,57,1)
(64,4,1)
(47,22,1)
(3,12,1)
(28,35,1)
(10,50,1)
(26,51,1)
(12,21,1)
(21,68,1)
(41,24,1)
(35,27,1)
(43,36,1)
(47,13,1)
(65,49,1)
(28,33,1)
(28,32,1)
(6,20,1)
(31,30,1)
(61,50,1)
(9,21,1)
(52,3,1)
(34,55,1)
(38,63,1)
(9,38,1)
(46,59,1)
(29,1,1)
(8,50,1)
(60,59,1)
(16,33,1)
(51,28,1)
(64,36,1)
(54,44,1)
(26,9,1)
(2,65,1)
(69,55,1)
(55,18,1)
(60,14,1)
(24,36,1)
(60,54,1)
(10,6,1)
(22,37,1)
(53,46,1)
(55,41,1)
(52,33,1)
(9,33,1)
(54,43,1)
(56,22,1)
(25,61,1)
(68,16,1)
(32,23,1)
(7,61,1)
(61,45,1)
(57,47,1)
(13,62,1)
(40,26,1)
(16,48,1)
(27,52,1)
(37,25,1)
(63,10,1)
(55,36,1)
(41,55,2)
(8,50,2)
(60,54,2)
(48,55,2)
(24,55,2)
(10,50,2)
(28,35,2)
(69,55,2)
(12,55,2)
(9,55,2)
(61,50,2)
(55,36,2)
(9,33,2)
(30,55,2)
(57,47,2)
(32,55,2)
(52,55,2)
(23,55,2)
(14,55,2)
(68,55,2)
(55,18,2)
(64,55,2)
(27,55,2)
(42,55,2)
(52,33,2)
(4,55,2)
(22,37,2)
(51,55,2)
(55,55,2)
(60,59,2)
(33,55,2)
(28,33,2)
(9,21,2)
(64,36,2)
(25,61,2)
(60,55,2)
(40,55,2)
(26,55,2)
(38,55,2)
(59,8,2)
(16,55,2)
(37,25,2)
(33,42,2)
(10,55,2)
(42,60,2)
(6,55,2)
(26,28,2)
(54,43,2)
(1,55,2)
(31,55,2)
(26,9,2)
(54,55,2)
(42,57,2)
(3,55,2)
(26,10,2)
(21,55,2)
(16,33,2)
(54,44,2)
(28,55,2)
(63,55,2)
(47,22,2)
(20,55,2)
(35,55,2)
(43,55,2)
(43,36,2)
(29,55,2)
-----------------------------------
(0,txring)
(1,txbi)
(2,tx_ring_mask)
(3,len)
(4,j)
(5,)
(6,pdev)
(7,0)
(8,jme->tx_ring_mask)
(9,ctxbi->mapping)
(10,jme->pdev)
(11,mask)
(12,ctxbi)
(13,bufinf)
(14,mask)
(15,jme)
(16,ctxbi->mapping)
(17,txbi)
(18,int count)
(19,for (j = 0 ; j < count ; j++)
(20,jme)
(21,ctxbi->mapping = 0)
(22,*txring = &(jme->txring[0])
(23,ctxbi)
(24,j)
(25,jme->txring[0])
(26,pci_unmap_page(jme->pdev,\n\\n\\t\\t\\t\\tctxbi->mapping,\n\\n\\t\\t\\t\\tctxbi->len,\n\\n\\t\\t\\t\\tPCI_DMA_TODEVICE)
(27,0)
(28,ctxbi->len)
(29,startidx)
(30,j)
(31,2)
(32,len)
(33,ctxbi = txbi + ((startidx + j + 2)
(34,RET)
(35,ctxbi->len = 0)
(36,j = 0)
(37,&(jme->txring[0])
(38,mapping)
(39,)
(40,ctxbi)
(41,count)
(42,txbi + ((startidx + j + 2)
(43,j + 2)
(44,int startidx)
(45,txring)
(46,j)
(47,txring->bufinf)
(48,mapping)
(49,mask)
(50,struct jme_adapter *jme)
(51,PCI_DMA_TODEVICE)
(52,ctxbi->len)
(53,0)
(54,startidx + j + 2)
(55,j < count)
(56,txbi)
(57,*txbi = txring->bufinf)
(58,j)
(59,mask = jme->tx_ring_mask)
(60,(startidx + j + 2)
(61,jme->txring)
(62,txring)
(63,ctxbi)
(64,j++)
(65,jme)
(66,txring)
(67,ctxbi)
(68,0)
(69,ctxbi)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^