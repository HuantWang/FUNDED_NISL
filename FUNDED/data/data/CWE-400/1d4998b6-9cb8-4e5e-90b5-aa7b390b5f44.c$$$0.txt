-----label-----
0
-----code-----
int
socreate(int dom, struct socket **aso, int type,
	int proto, struct thread *td)
{
	struct proc *p = td->td_proc;
	struct protosw *prp;
	struct socket *so;
	struct pru_attach_info ai;
	int error;

	if (proto)
		prp = pffindproto(dom, proto, type);
	else
		prp = pffindtype(dom, type);

	if (prp == 0 || prp->pr_usrreqs->pru_attach == 0)
		return (EPROTONOSUPPORT);

	if (p->p_ucred->cr_prison && jail_socket_unixiproute_only &&
	    prp->pr_domain->dom_family != PF_LOCAL &&
	    prp->pr_domain->dom_family != PF_INET &&
	    prp->pr_domain->dom_family != PF_INET6 &&
	    prp->pr_domain->dom_family != PF_ROUTE) {
		return (EPROTONOSUPPORT);
	}

	if (prp->pr_type != type)
		return (EPROTOTYPE);
	so = soalloc(p != 0);
	if (so == 0)
		return (ENOBUFS);

	TAILQ_INIT(&so->so_incomp);
	TAILQ_INIT(&so->so_comp);
	so->so_type = type;
	so->so_cred = crhold(p->p_ucred);
	so->so_proto = prp;
	ai.sb_rlimit = &p->p_rlimit[RLIMIT_SBSIZE];
	ai.p_ucred = p->p_ucred;
	ai.fd_rdir = p->p_fd->fd_rdir;
	/*
	 * Auto-sizing of socket buffers is managed by the protocols and
	 * the appropriate flags must be set in the pru_attach function.
	 */
	error = so_pru_attach(so, proto, &ai);
	if (error) {
		so->so_state |= SS_NOFDREF;
		sofree(so);
		return (error);
	}
	*aso = so;
	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
12,15
16,17
16,18
18,19
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
30,40
30,41
30,42
30,43
30,44
30,45
30,46
30,47
30,48
30,49
30,50
30,51
30,52
30,53
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
47,49
50,51
51,52
51,53
52,53
54,55
54,56
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
89,90
91,92
93,94
95,96
95,97
96,97
96,98
97,98
97,99
98,99
101,102
101,103
102,103
102,104
103,104
103,105
104,105
109,110
110,111
111,112
113,114
113,115
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
118,120
119,120
119,121
120,121
120,122
121,122
125,126
127,128
127,129
128,129
128,130
129,130
129,131
130,131
134,135
136,137
136,138
137,138
137,139
138,139
138,140
139,140
143,144
145,146
145,147
146,147
146,148
147,148
147,149
148,149
152,153
154,155
154,156
155,156
155,157
156,157
156,158
157,158
161,162
163,164
164,165
165,166
166,167
168,169
168,170
169,170
169,171
170,171
170,172
171,172
174,175
176,177
177,178
178,179
180,181
181,182
181,183
182,183
184,185
184,186
185,186
187,188
187,189
188,189
191,192
191,193
192,193
192,194
193,194
196,197
197,198
198,199
200,201
201,202
201,203
202,203
204,205
205,206
205,207
206,207
209,210
210,211
210,212
211,212
213,214
214,215
214,216
215,216
218,219
219,220
219,221
220,221
220,222
221,222
224,225
226,227
227,228
227,229
228,229
228,230
229,230
232,233
232,234
233,234
235,236
235,237
236,237
239,240
240,241
240,242
241,242
241,243
242,243
245,246
247,248
248,249
248,250
249,250
249,251
250,251
253,254
254,255
254,256
255,256
255,257
256,257
259,260
261,262
262,263
262,264
263,264
263,265
264,265
267,268
267,269
268,269
271,272
272,273
272,274
273,274
273,275
274,275
277,278
277,279
278,279
278,280
279,280
283,284
284,285
284,286
285,286
287,288
287,289
287,290
287,291
288,289
290,291
292,293
294,295
295,296
297,298
297,299
298,299
300,301
300,302
300,303
301,302
302,303
302,304
303,304
303,305
304,305
307,308
309,310
310,311
310,312
311,312
313,314
315,316
316,317
317,318
319,320
320,321
320,322
321,322
322,323
324,325
326,327
327,328
-----nextToken-----
2,4,6,8,11,13,14,15,17,19,21,23,26,28,29,34,36,37,41,42,46,48,49,53,55,56,60,62,65,67,70,74,77,79,81,83,87,90,92,94,99,100,105,106,107,108,112,122,123,124,126,131,132,133,135,140,141,142,144,149,150,151,153,158,159,160,162,167,172,173,175,179,183,186,189,190,194,195,199,203,207,208,212,216,217,222,223,225,230,231,234,237,238,243,244,246,251,252,257,258,260,265,266,269,270,275,276,280,281,282,286,289,291,293,296,299,305,306,308,312,314,318,323,325,328
-----computeFrom-----
72,73
72,74
85,86
85,87
96,97
96,98
97,98
97,99
101,102
101,103
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
118,120
127,128
127,129
136,137
136,138
145,146
145,147
154,155
154,156
169,170
169,171
181,182
181,183
187,188
187,189
192,193
192,194
219,220
219,221
227,228
227,229
240,241
240,242
248,249
248,250
262,263
262,264
272,273
272,274
284,285
284,286
302,303
302,304
320,321
320,322
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
intsocreate(int dom, struct socket **aso, int type,	int proto, struct thread *td){	struct proc *p = td->td_proc;	struct protosw *prp;	struct socket *so;	struct pru_attach_info ai;	int error;	if (proto)		prp = pffindproto(dom, proto, type);	else		prp = pffindtype(dom, type);	if (prp == 0 || prp->pr_usrreqs->pru_attach == 0)		return (EPROTONOSUPPORT);	if (p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL &&	    prp->pr_domain->dom_family != PF_INET &&	    prp->pr_domain->dom_family != PF_INET6 &&	    prp->pr_domain->dom_family != PF_ROUTE) {		return (EPROTONOSUPPORT);	}	if (prp->pr_type != type)		return (EPROTOTYPE);	so = soalloc(p != 0);	if (so == 0)		return (ENOBUFS);	TAILQ_INIT(&so->so_incomp);	TAILQ_INIT(&so->so_comp);	so->so_type = type;	so->so_cred = crhold(p->p_ucred);	so->so_proto = prp;	ai.sb_rlimit = &p->p_rlimit[RLIMIT_SBSIZE];	ai.p_ucred = p->p_ucred;	ai.fd_rdir = p->p_fd->fd_rdir;	/*	 * Auto-sizing of socket buffers is managed by the protocols and	 * the appropriate flags must be set in the pru_attach function.	 */	error = so_pru_attach(so, proto, &ai);	if (error) {		so->so_state |= SS_NOFDREF;		sofree(so);		return (error);	}	*aso = so;	return (0);}
int
socreate(int dom, struct socket **aso, int type,	int proto, struct thread *td)
socreate
int dom
int
dom
dom
struct socket **aso
struct socket
socket
**aso
*
*
aso
int type
int
type
type
int proto
int
proto
proto
struct thread *td
struct thread
thread
*td
*
td
{	struct proc *p = td->td_proc;	struct protosw *prp;	struct socket *so;	struct pru_attach_info ai;	int error;	if (proto)		prp = pffindproto(dom, proto, type);	else		prp = pffindtype(dom, type);	if (prp == 0 || prp->pr_usrreqs->pru_attach == 0)		return (EPROTONOSUPPORT);	if (p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL &&	    prp->pr_domain->dom_family != PF_INET &&	    prp->pr_domain->dom_family != PF_INET6 &&	    prp->pr_domain->dom_family != PF_ROUTE) {		return (EPROTONOSUPPORT);	}	if (prp->pr_type != type)		return (EPROTOTYPE);	so = soalloc(p != 0);	if (so == 0)		return (ENOBUFS);	TAILQ_INIT(&so->so_incomp);	TAILQ_INIT(&so->so_comp);	so->so_type = type;	so->so_cred = crhold(p->p_ucred);	so->so_proto = prp;	ai.sb_rlimit = &p->p_rlimit[RLIMIT_SBSIZE];	ai.p_ucred = p->p_ucred;	ai.fd_rdir = p->p_fd->fd_rdir;	/*	 * Auto-sizing of socket buffers is managed by the protocols and	 * the appropriate flags must be set in the pru_attach function.	 */	error = so_pru_attach(so, proto, &ai);	if (error) {		so->so_state |= SS_NOFDREF;		sofree(so);		return (error);	}	*aso = so;	return (0);}
struct proc *p = td->td_proc;
struct proc *p = td->td_proc;
struct proc
proc
*p = td->td_proc
*
p
= td->td_proc
td->td_proc
td
td
td_proc
struct protosw *prp;
struct protosw *prp;
struct protosw
protosw
*prp
*
prp
struct socket *so;
struct socket *so;
struct socket
socket
*so
*
so
struct pru_attach_info ai;
struct pru_attach_info ai;
struct pru_attach_info
pru_attach_info
ai
ai
int error;
int error;
int
error
error
if (proto)		prp = pffindproto(dom, proto, type);	else		prp = pffindtype(dom, type);
proto
proto
prp = pffindproto(dom, proto, type);
prp = pffindproto(dom, proto, type)
prp
prp
pffindproto(dom, proto, type)
pffindproto
pffindproto
dom
dom
proto
proto
type
type
prp = pffindtype(dom, type);
prp = pffindtype(dom, type)
prp
prp
pffindtype(dom, type)
pffindtype
pffindtype
dom
dom
type
type
if (prp == 0 || prp->pr_usrreqs->pru_attach == 0)		return (EPROTONOSUPPORT);
prp == 0 || prp->pr_usrreqs->pru_attach == 0
prp == 0
prp
prp
0
prp->pr_usrreqs->pru_attach == 0
prp->pr_usrreqs->pru_attach
prp->pr_usrreqs
prp
prp
pr_usrreqs
pru_attach
0
return (EPROTONOSUPPORT);
(EPROTONOSUPPORT)
EPROTONOSUPPORT
EPROTONOSUPPORT
if (p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL &&	    prp->pr_domain->dom_family != PF_INET &&	    prp->pr_domain->dom_family != PF_INET6 &&	    prp->pr_domain->dom_family != PF_ROUTE) {		return (EPROTONOSUPPORT);	}
p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL &&	    prp->pr_domain->dom_family != PF_INET &&	    prp->pr_domain->dom_family != PF_INET6 &&	    prp->pr_domain->dom_family != PF_ROUTE
p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL &&	    prp->pr_domain->dom_family != PF_INET &&	    prp->pr_domain->dom_family != PF_INET6
p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL &&	    prp->pr_domain->dom_family != PF_INET
p->p_ucred->cr_prison && jail_socket_unixiproute_only &&	    prp->pr_domain->dom_family != PF_LOCAL
p->p_ucred->cr_prison && jail_socket_unixiproute_only
p->p_ucred->cr_prison
p->p_ucred
p
p
p_ucred
cr_prison
jail_socket_unixiproute_only
jail_socket_unixiproute_only
prp->pr_domain->dom_family != PF_LOCAL
prp->pr_domain->dom_family
prp->pr_domain
prp
prp
pr_domain
dom_family
PF_LOCAL
PF_LOCAL
prp->pr_domain->dom_family != PF_INET
prp->pr_domain->dom_family
prp->pr_domain
prp
prp
pr_domain
dom_family
PF_INET
PF_INET
prp->pr_domain->dom_family != PF_INET6
prp->pr_domain->dom_family
prp->pr_domain
prp
prp
pr_domain
dom_family
PF_INET6
PF_INET6
prp->pr_domain->dom_family != PF_ROUTE
prp->pr_domain->dom_family
prp->pr_domain
prp
prp
pr_domain
dom_family
PF_ROUTE
PF_ROUTE
{		return (EPROTONOSUPPORT);	}
return (EPROTONOSUPPORT);
(EPROTONOSUPPORT)
EPROTONOSUPPORT
EPROTONOSUPPORT
if (prp->pr_type != type)		return (EPROTOTYPE);
prp->pr_type != type
prp->pr_type
prp
prp
pr_type
type
type
return (EPROTOTYPE);
(EPROTOTYPE)
EPROTOTYPE
EPROTOTYPE
so = soalloc(p != 0);
so = soalloc(p != 0)
so
so
soalloc(p != 0)
soalloc
soalloc
p != 0
p
p
0
if (so == 0)		return (ENOBUFS);
so == 0
so
so
0
return (ENOBUFS);
(ENOBUFS)
ENOBUFS
ENOBUFS
TAILQ_INIT(&so->so_incomp);
TAILQ_INIT(&so->so_incomp)
TAILQ_INIT
TAILQ_INIT
&so->so_incomp
so->so_incomp
so
so
so_incomp
TAILQ_INIT(&so->so_comp);
TAILQ_INIT(&so->so_comp)
TAILQ_INIT
TAILQ_INIT
&so->so_comp
so->so_comp
so
so
so_comp
so->so_type = type;
so->so_type = type
so->so_type
so
so
so_type
type
type
so->so_cred = crhold(p->p_ucred);
so->so_cred = crhold(p->p_ucred)
so->so_cred
so
so
so_cred
crhold(p->p_ucred)
crhold
crhold
p->p_ucred
p
p
p_ucred
so->so_proto = prp;
so->so_proto = prp
so->so_proto
so
so
so_proto
prp
prp
ai.sb_rlimit = &p->p_rlimit[RLIMIT_SBSIZE];
ai.sb_rlimit = &p->p_rlimit[RLIMIT_SBSIZE]
ai.sb_rlimit
ai
ai
sb_rlimit
&p->p_rlimit[RLIMIT_SBSIZE]
p->p_rlimit[RLIMIT_SBSIZE]
p->p_rlimit
p
p
p_rlimit
RLIMIT_SBSIZE
RLIMIT_SBSIZE
ai.p_ucred = p->p_ucred;
ai.p_ucred = p->p_ucred
ai.p_ucred
ai
ai
p_ucred
p->p_ucred
p
p
p_ucred
ai.fd_rdir = p->p_fd->fd_rdir;
ai.fd_rdir = p->p_fd->fd_rdir
ai.fd_rdir
ai
ai
fd_rdir
p->p_fd->fd_rdir
p->p_fd
p
p
p_fd
fd_rdir
error = so_pru_attach(so, proto, &ai);
error = so_pru_attach(so, proto, &ai)
error
error
so_pru_attach(so, proto, &ai)
so_pru_attach
so_pru_attach
so
so
proto
proto
&ai
ai
ai
if (error) {		so->so_state |= SS_NOFDREF;		sofree(so);		return (error);	}
error
error
{		so->so_state |= SS_NOFDREF;		sofree(so);		return (error);	}
so->so_state |= SS_NOFDREF;
so->so_state |= SS_NOFDREF
so->so_state
so
so
so_state
SS_NOFDREF
SS_NOFDREF
sofree(so);
sofree(so)
sofree
sofree
so
so
return (error);
(error)
error
error
*aso = so;
*aso = so
*aso
aso
aso
so
so
return (0);
(0)
0
-----joern-----
(49,153,0)
(114,153,0)
(134,65,0)
(43,6,0)
(1,15,0)
(182,160,0)
(80,116,0)
(110,160,0)
(68,8,0)
(125,81,0)
(89,63,0)
(95,130,0)
(74,173,0)
(83,31,0)
(69,59,0)
(168,71,0)
(151,6,0)
(2,38,0)
(65,183,0)
(4,158,0)
(133,122,0)
(76,153,0)
(98,23,0)
(152,69,0)
(89,93,0)
(145,154,0)
(50,29,0)
(58,131,0)
(117,92,0)
(81,130,0)
(8,154,0)
(81,125,0)
(157,64,0)
(18,149,0)
(104,11,0)
(157,133,0)
(107,4,0)
(183,65,0)
(177,153,0)
(180,70,0)
(106,124,0)
(14,30,0)
(56,118,0)
(36,168,0)
(103,153,0)
(28,108,0)
(70,166,0)
(15,1,0)
(7,31,0)
(157,43,0)
(157,11,0)
(152,92,0)
(160,26,0)
(173,168,0)
(95,16,0)
(105,43,0)
(157,56,0)
(77,6,0)
(154,8,0)
(35,153,0)
(135,43,0)
(4,6,0)
(170,25,0)
(9,170,0)
(142,173,0)
(116,76,0)
(38,132,0)
(155,185,0)
(33,133,0)
(175,153,0)
(124,120,0)
(122,153,0)
(22,132,0)
(89,155,0)
(167,160,0)
(159,105,0)
(87,125,0)
(131,137,0)
(29,6,0)
(61,154,0)
(87,99,0)
(181,97,0)
(88,50,0)
(105,133,0)
(13,87,0)
(64,77,0)
(158,4,0)
(119,153,0)
(170,48,0)
(140,4,0)
(174,6,0)
(148,68,0)
(149,150,0)
(173,26,0)
(71,122,0)
(99,87,0)
(97,6,0)
(30,132,0)
(123,183,0)
(22,57,0)
(57,25,0)
(16,95,0)
(170,92,0)
(19,103,0)
(109,124,0)
(43,177,0)
(59,69,0)
(24,41,0)
(12,77,0)
(90,23,0)
(89,108,0)
(52,23,0)
(166,70,0)
(157,68,0)
(151,105,0)
(122,71,0)
(20,170,0)
(57,22,0)
(89,157,0)
(176,109,0)
(163,120,0)
(109,176,0)
(125,87,0)
(11,102,0)
(96,107,0)
(102,25,0)
(172,50,0)
(113,153,0)
(42,57,0)
(5,152,0)
(156,132,0)
(138,153,0)
(111,95,0)
(45,166,0)
(168,173,0)
(99,132,0)
(71,168,0)
(26,149,0)
(72,153,0)
(143,4,0)
(70,40,0)
(56,6,0)
(141,6,0)
(105,11,0)
(89,161,0)
(131,25,0)
(6,29,0)
(65,16,0)
(162,153,0)
(51,99,0)
(38,92,0)
(63,107,0)
(103,19,0)
(38,166,0)
(16,65,0)
(154,26,0)
(8,153,0)
(109,81,0)
(117,120,0)
(54,68,0)
(105,164,0)
(30,41,0)
(82,11,0)
(62,157,0)
(75,97,0)
(19,97,0)
(184,69,0)
(101,126,0)
(139,56,0)
(29,50,0)
(170,137,0)
(176,41,0)
(90,118,0)
(85,161,0)
(130,81,0)
(99,92,0)
(91,133,0)
(128,153,0)
(3,125,0)
(0,116,0)
(171,92,0)
(44,178,0)
(23,90,0)
(118,153,0)
(4,107,0)
(27,152,0)
(46,38,0)
(126,1,0)
(120,124,0)
(147,178,0)
(182,76,0)
(115,126,0)
(41,176,0)
(78,117,0)
(31,92,0)
(59,130,0)
(105,116,0)
(64,10,0)
(86,170,0)
(131,132,0)
(26,153,0)
(120,117,0)
(22,92,0)
(92,170,0)
(160,182,0)
(124,109,0)
(1,126,0)
(149,26,0)
(146,151,0)
(32,153,0)
(17,117,0)
(47,99,0)
(94,59,0)
(129,155,0)
(177,92,0)
(174,164,0)
(107,153,0)
(76,182,0)
(23,26,0)
(4,48,0)
(169,131,0)
(63,164,0)
(117,132,0)
(31,40,0)
(105,68,0)
(30,92,0)
(97,19,0)
(77,153,0)
(132,131,0)
(37,64,0)
(73,158,0)
(40,70,0)
(69,152,0)
(105,56,0)
(130,95,0)
(84,43,0)
(81,109,0)
(157,153,0)
(178,6,0)
(121,63,0)
(31,132,0)
(136,102,0)
(157,116,0)
(183,26,0)
(67,151,0)
(40,31,0)
(152,132,0)
(41,30,0)
(39,22,0)
(66,182,0)
(55,183,0)
(50,26,0)
(177,132,0)
(102,153,0)
(179,174,0)
(166,38,0)
(11,6,0)
(60,30,0)
(6,153,0)
(126,6,0)
(15,153,0)
(112,26,0)
(53,22,0)
(130,59,0)
(79,93,0)
(21,56,0)
(118,90,0)
(34,149,0)
(144,177,0)
(127,176,0)
(0,80,1)
(152,132,1)
(155,129,1)
(99,132,1)
(75,181,1)
(171,165,1)
(141,57,1)
(149,18,1)
(130,81,1)
(152,92,1)
(126,101,1)
(19,97,1)
(87,13,1)
(106,120,1)
(64,10,1)
(70,166,1)
(127,41,1)
(117,92,1)
(170,20,1)
(77,12,1)
(124,106,1)
(157,62,1)
(177,132,1)
(41,30,1)
(105,56,1)
(52,56,1)
(82,15,1)
(166,38,1)
(169,156,1)
(89,63,1)
(63,121,1)
(56,139,1)
(89,161,1)
(157,133,1)
(152,27,1)
(182,160,1)
(166,45,1)
(129,16,1)
(9,171,1)
(55,123,1)
(151,146,1)
(91,33,1)
(38,92,1)
(43,84,1)
(79,40,1)
(124,120,1)
(81,109,1)
(39,16,1)
(24,30,1)
(62,77,1)
(6,29,1)
(31,92,1)
(95,111,1)
(37,100,1)
(131,25,1)
(65,183,1)
(54,148,1)
(59,69,1)
(56,6,1)
(93,79,1)
(89,93,1)
(157,64,1)
(170,48,1)
(87,99,1)
(105,43,1)
(111,65,1)
(7,83,1)
(16,95,1)
(86,9,1)
(8,154,1)
(102,136,1)
(180,166,1)
(135,118,1)
(116,0,1)
(165,26,1)
(96,76,1)
(103,19,1)
(71,168,1)
(104,82,1)
(144,43,1)
(89,108,1)
(58,169,1)
(15,1,1)
(143,96,1)
(5,111,1)
(13,99,1)
(74,142,1)
(27,5,1)
(183,55,1)
(45,38,1)
(38,132,1)
(61,145,1)
(22,53,1)
(60,124,1)
(105,11,1)
(178,6,1)
(118,90,1)
(64,37,1)
(133,91,1)
(101,115,1)
(81,125,1)
(83,132,1)
(73,140,1)
(110,116,1)
(66,160,1)
(92,170,1)
(148,122,1)
(131,137,1)
(130,59,1)
(117,132,1)
(57,22,1)
(28,57,1)
(85,178,1)
(29,50,1)
(167,110,1)
(69,152,1)
(1,126,1)
(173,74,1)
(126,6,1)
(31,7,1)
(89,157,1)
(83,92,1)
(70,180,1)
(102,25,1)
(44,6,1)
(17,78,1)
(168,36,1)
(140,143,1)
(34,112,1)
(157,43,1)
(51,47,1)
(22,132,1)
(176,41,1)
(23,98,1)
(170,137,1)
(30,132,1)
(117,17,1)
(179,105,1)
(115,103,1)
(142,133,1)
(42,22,1)
(122,71,1)
(50,26,1)
(97,6,1)
(33,177,1)
(178,147,1)
(40,70,1)
(161,85,1)
(105,159,1)
(154,61,1)
(177,144,1)
(77,6,1)
(120,163,1)
(121,174,1)
(78,125,1)
(134,183,1)
(20,86,1)
(41,24,1)
(108,28,1)
(139,21,1)
(46,2,1)
(160,167,1)
(53,39,1)
(80,8,1)
(147,44,1)
(4,158,1)
(4,6,1)
(11,104,1)
(90,23,1)
(109,124,1)
(99,51,1)
(182,66,1)
(183,26,1)
(156,165,1)
(11,6,1)
(174,179,1)
(3,87,1)
(2,31,1)
(22,92,1)
(131,58,1)
(57,42,1)
(163,117,1)
(181,178,1)
(36,173,1)
(146,67,1)
(157,11,1)
(173,26,1)
(50,88,1)
(105,116,1)
(149,150,1)
(59,94,1)
(76,182,1)
(47,59,1)
(157,56,1)
(30,92,1)
(88,172,1)
(63,107,1)
(43,6,1)
(125,87,1)
(160,26,1)
(99,92,1)
(30,14,1)
(12,64,1)
(120,117,1)
(172,141,1)
(100,107,1)
(4,48,1)
(23,26,1)
(105,68,1)
(154,26,1)
(40,31,1)
(38,46,1)
(16,65,1)
(18,34,1)
(123,40,1)
(65,134,1)
(95,130,1)
(125,3,1)
(157,116,1)
(177,92,1)
(26,149,1)
(170,25,1)
(174,6,1)
(136,11,1)
(157,68,1)
(67,100,1)
(176,127,1)
(21,102,1)
(89,155,1)
(184,152,1)
(107,4,1)
(14,60,1)
(145,68,1)
(105,133,1)
(158,73,1)
(168,173,1)
(69,184,1)
(151,6,1)
(159,151,1)
(31,132,1)
(98,52,1)
(57,25,1)
(68,54,1)
(109,176,1)
(84,135,1)
(97,75,1)
(94,69,1)
(132,131,1)
(140,178,2)
(154,178,2)
(55,40,2)
(6,57,2)
(22,92,2)
(39,16,2)
(30,124,2)
(4,178,2)
(105,116,2)
(123,40,2)
(78,125,2)
(154,26,2)
(12,100,2)
(31,132,2)
(161,178,2)
(27,111,2)
(174,100,2)
(82,178,2)
(59,111,2)
(63,100,2)
(176,124,2)
(87,59,2)
(57,16,2)
(105,11,2)
(146,100,2)
(68,178,2)
(157,68,2)
(76,178,2)
(173,26,2)
(81,59,2)
(5,111,2)
(70,31,2)
(86,165,2)
(163,125,2)
(89,63,2)
(105,133,2)
(16,65,2)
(133,178,2)
(176,41,2)
(131,165,2)
(157,56,2)
(178,57,2)
(157,11,2)
(102,25,2)
(41,124,2)
(56,6,2)
(79,40,2)
(104,178,2)
(141,57,2)
(105,56,2)
(131,137,2)
(46,31,2)
(57,25,2)
(132,131,2)
(65,183,2)
(183,40,2)
(157,133,2)
(151,100,2)
(98,178,2)
(87,99,2)
(96,178,2)
(167,178,2)
(4,48,2)
(94,111,2)
(54,178,2)
(63,107,2)
(111,65,2)
(156,165,2)
(1,178,2)
(19,97,2)
(24,124,2)
(38,92,2)
(170,165,2)
(52,178,2)
(90,178,2)
(15,178,2)
(109,176,2)
(71,168,2)
(89,108,2)
(56,178,2)
(28,57,2)
(152,111,2)
(40,70,2)
(69,111,2)
(29,50,2)
(73,178,2)
(16,95,2)
(2,31,2)
(91,178,2)
(120,125,2)
(95,65,2)
(126,6,2)
(124,125,2)
(14,124,2)
(183,26,2)
(118,90,2)
(51,59,2)
(131,25,2)
(177,92,2)
(170,48,2)
(145,178,2)
(44,57,2)
(144,178,2)
(171,165,2)
(177,132,2)
(184,111,2)
(117,92,2)
(136,178,2)
(110,178,2)
(29,57,2)
(26,149,2)
(107,4,2)
(81,125,2)
(151,6,2)
(168,178,2)
(130,81,2)
(19,178,2)
(149,150,2)
(95,130,2)
(30,132,2)
(180,31,2)
(102,178,2)
(43,6,2)
(115,178,2)
(147,57,2)
(135,178,2)
(41,30,2)
(89,157,2)
(117,125,2)
(139,178,2)
(74,178,2)
(11,6,2)
(37,100,2)
(11,178,2)
(160,178,2)
(61,178,2)
(127,124,2)
(182,160,2)
(106,125,2)
(92,170,2)
(172,57,2)
(8,178,2)
(36,178,2)
(9,165,2)
(92,165,2)
(57,22,2)
(47,59,2)
(99,92,2)
(126,178,2)
(76,182,2)
(88,57,2)
(85,178,2)
(118,178,2)
(4,158,2)
(20,165,2)
(108,57,2)
(99,59,2)
(21,178,2)
(62,100,2)
(121,100,2)
(125,87,2)
(132,165,2)
(67,100,2)
(178,6,2)
(107,178,2)
(158,178,2)
(170,137,2)
(157,116,2)
(23,178,2)
(42,16,2)
(60,124,2)
(157,100,2)
(65,40,2)
(13,59,2)
(58,165,2)
(100,178,2)
(122,178,2)
(8,154,2)
(169,165,2)
(89,155,2)
(33,178,2)
(160,26,2)
(129,16,2)
(75,178,2)
(168,173,2)
(142,178,2)
(64,10,2)
(173,178,2)
(77,100,2)
(109,124,2)
(170,25,2)
(105,100,2)
(105,68,2)
(174,6,2)
(152,132,2)
(103,19,2)
(177,178,2)
(40,31,2)
(1,126,2)
(97,178,2)
(166,31,2)
(22,16,2)
(166,38,2)
(90,23,2)
(38,132,2)
(157,43,2)
(130,111,2)
(89,93,2)
(4,6,2)
(0,178,2)
(38,31,2)
(22,132,2)
(101,178,2)
(109,125,2)
(182,178,2)
(155,16,2)
(80,178,2)
(105,43,2)
(45,31,2)
(181,178,2)
(81,109,2)
(6,29,2)
(16,40,2)
(43,178,2)
(59,69,2)
(30,92,2)
(3,59,2)
(23,26,2)
(97,6,2)
(50,57,2)
(148,178,2)
(122,71,2)
(93,40,2)
(134,40,2)
(31,92,2)
(71,178,2)
(152,92,2)
(89,161,2)
(179,100,2)
(77,6,2)
(120,117,2)
(116,178,2)
(17,125,2)
(15,1,2)
(50,26,2)
(103,178,2)
(125,59,2)
(143,178,2)
(84,178,2)
(53,16,2)
(99,132,2)
(66,178,2)
(64,100,2)
(159,100,2)
(130,59,2)
(69,152,2)
(157,64,2)
(117,132,2)
(124,120,2)
(70,166,2)
-----------------------------------
(0,fd_rdir)
(1,&so->so_comp)
(2,prp)
(3,PF_INET)
(4,so_pru_attach(so, proto, &ai)
(5,prp)
(6,so = soalloc(p != 0)
(7,0)
(8,ai.p_ucred = p->p_ucred)
(9,dom)
(10,struct socket **aso)
(11,so->so_type)
(12,so)
(13,dom_family)
(14,pr_domain)
(15,TAILQ_INIT(&so->so_comp)
(16,p->p_ucred->cr_prison && jail_socket_unixiproute_only &&\n\\n\\t    prp->pr_domain->dom_family != PF_LOCAL &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET6 &&\n\\n\\t    prp->pr_domain->dom_family != PF_ROUTE)
(17,pr_domain)
(18,td_proc)
(19,&so->so_incomp)
(20,type)
(21,so)
(22,prp->pr_type)
(23,p->p_ucred)
(24,dom_family)
(25,int type)
(26,*p = td->td_proc)
(27,pr_domain)
(28,EPROTOTYPE)
(29,soalloc(p != 0)
(30,prp->pr_domain)
(31,prp == 0)
(32,if (prp->pr_type != type)
(33,ai)
(34,td)
(35,so)
(36,RLIMIT_SBSIZE)
(37,aso)
(38,prp->pr_usrreqs)
(39,prp)
(40,prp == 0 || prp->pr_usrreqs->pru_attach == 0)
(41,prp->pr_domain->dom_family)
(42,type)
(43,so->so_proto)
(44,so)
(45,pru_attach)
(46,pr_usrreqs)
(47,prp)
(48,int proto)
(49,ai)
(50,p != 0)
(51,pr_domain)
(52,p)
(53,pr_type)
(54,p_ucred)
(55,p_ucred)
(56,so->so_cred)
(57,prp->pr_type != type)
(58,type)
(59,prp->pr_domain->dom_family != PF_LOCAL)
(60,prp)
(61,p_ucred)
(62,0)
(63,return (error)
(64,*aso)
(65,p->p_ucred->cr_prison)
(66,fd_rdir)
(67,so)
(68,ai.p_ucred)
(69,prp->pr_domain->dom_family)
(70,prp->pr_usrreqs->pru_attach == 0)
(71,&p->p_rlimit[RLIMIT_SBSIZE])
(72,if (so == 0)
(73,ai)
(74,p_rlimit)
(75,so_incomp)
(76,ai.fd_rdir = p->p_fd->fd_rdir)
(77,*aso = so)
(78,prp)
(79,EPROTONOSUPPORT)
(80,ai)
(81,prp->pr_domain->dom_family != PF_INET &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET6 &&\n\\n\\t    prp->pr_domain->dom_family != PF_ROUTE)
(82,so)
(83,prp)
(84,so_proto)
(85,ENOBUFS)
(86,proto)
(87,prp->pr_domain->dom_family)
(88,0)
(89,RET)
(90,crhold(p->p_ucred)
(91,sb_rlimit)
(92,prp = pffindproto(dom, proto, type)
(93,return (EPROTONOSUPPORT)
(94,PF_LOCAL)
(95,jail_socket_unixiproute_only &&\n\\n\\t    prp->pr_domain->dom_family != PF_LOCAL &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET6 &&\n\\n\\t    prp->pr_domain->dom_family != PF_ROUTE)
(96,error)
(97,so->so_incomp)
(98,p_ucred)
(99,prp->pr_domain)
(100,error)
(101,so_comp)
(102,so->so_type = type)
(103,TAILQ_INIT(&so->so_incomp)
(104,so_type)
(105,so->so_state |= SS_NOFDREF)
(106,PF_INET6)
(107,error = so_pru_attach(so, proto, &ai)
(108,return (EPROTOTYPE)
(109,prp->pr_domain->dom_family != PF_INET6 &&\n\\n\\t    prp->pr_domain->dom_family != PF_ROUTE)
(110,p)
(111,jail_socket_unixiproute_only)
(112,p)
(113,if (error)
(114,p)
(115,so)
(116,ai.fd_rdir)
(117,prp->pr_domain)
(118,so->so_cred = crhold(p->p_ucred)
(119,prp)
(120,prp->pr_domain->dom_family)
(121,error)
(122,ai.sb_rlimit = &p->p_rlimit[RLIMIT_SBSIZE])
(123,p)
(124,prp->pr_domain->dom_family != PF_INET6)
(125,prp->pr_domain->dom_family != PF_INET)
(126,so->so_comp)
(127,PF_ROUTE)
(128,if (p->p_ucred->cr_prison && jail_socket_unixiproute_only &&\n\\n\\t    prp->pr_domain->dom_family != PF_LOCAL &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET6 &&\n\\n\\t    prp->pr_domain->dom_family != PF_ROUTE)
(129,EPROTONOSUPPORT)
(130,prp->pr_domain->dom_family != PF_LOCAL &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET &&\n\\n\\t    prp->pr_domain->dom_family != PF_INET6 &&\n\\n\\t    prp->pr_domain->dom_family != PF_ROUTE)
(131,pffindtype(dom, type)
(132,prp = pffindtype(dom, type)
(133,ai.sb_rlimit)
(134,cr_prison)
(135,so)
(136,type)
(137,int dom)
(138,error)
(139,so_cred)
(140,proto)
(141,so)
(142,p)
(143,so)
(144,prp)
(145,p)
(146,so_state)
(147,0)
(148,ai)
(149,td->td_proc)
(150,struct thread *td)
(151,so->so_state)
(152,prp->pr_domain)
(153,)
(154,p->p_ucred)
(155,return (EPROTONOSUPPORT)
(156,prp)
(157,return (0)
(158,&ai)
(159,SS_NOFDREF)
(160,p->p_fd)
(161,return (ENOBUFS)
(162,if (proto)
(163,dom_family)
(164,)
(165,proto)
(166,prp->pr_usrreqs->pru_attach)
(167,p_fd)
(168,p->p_rlimit[RLIMIT_SBSIZE])
(169,dom)
(170,pffindproto(dom, proto, type)
(171,prp)
(172,p)
(173,p->p_rlimit)
(174,sofree(so)
(175,if (prp == 0 || prp->pr_usrreqs->pru_attach == 0)
(176,prp->pr_domain->dom_family != PF_ROUTE)
(177,so->so_proto = prp)
(178,so == 0)
(179,so)
(180,0)
(181,so)
(182,p->p_fd->fd_rdir)
(183,p->p_ucred)
(184,dom_family)
(185,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^