-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink(int * countPtr)
{
    int count = *countPtr;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
54,55
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
96,101
97,98
99,100
101,102
102,103
102,104
105,106
105,107
106,107
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
118,120
119,120
121,122
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,6,8,9,13,15,19,24,26,28,32,34,35,38,41,43,44,46,50,53,55,56,60,62,67,68,73,74,77,81,82,84,87,93,95,98,100,103,104,107,109,111,116,117,120,125,127
-----computeFrom-----
48,49
48,50
58,59
58,60
71,72
71,73
75,76
75,77
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink(int * countPtr){    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink(int * countPtr)
CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(28,1,0)
(8,3,0)
(56,23,0)
(1,55,0)
(7,42,0)
(50,12,0)
(15,16,0)
(1,14,0)
(10,47,0)
(24,3,0)
(14,1,0)
(48,9,0)
(0,1,0)
(46,18,0)
(55,15,0)
(12,50,0)
(42,51,0)
(45,41,0)
(59,62,0)
(9,42,0)
(21,41,0)
(17,42,0)
(15,55,0)
(11,63,0)
(20,56,0)
(58,21,0)
(39,45,0)
(25,55,0)
(33,42,0)
(45,63,0)
(18,49,0)
(36,42,0)
(18,60,0)
(2,15,0)
(18,41,0)
(41,45,0)
(26,41,0)
(56,41,0)
(55,51,0)
(61,42,0)
(50,18,0)
(34,51,0)
(35,4,0)
(44,9,0)
(1,0,0)
(40,42,0)
(6,42,0)
(57,60,0)
(53,12,0)
(38,63,0)
(52,5,0)
(29,45,0)
(18,50,0)
(22,14,0)
(41,42,0)
(62,3,0)
(31,18,0)
(47,54,0)
(63,42,0)
(32,49,0)
(27,36,0)
(19,52,0)
(49,18,0)
(14,3,0)
(13,21,0)
(60,18,0)
(43,36,0)
(56,20,1)
(37,14,1)
(63,11,1)
(22,3,1)
(3,24,1)
(31,12,1)
(30,37,1)
(18,49,1)
(50,18,1)
(50,12,1)
(29,26,1)
(48,55,1)
(12,53,1)
(14,1,1)
(1,55,1)
(21,58,1)
(24,8,1)
(59,50,1)
(52,19,1)
(32,31,1)
(21,41,1)
(45,63,1)
(57,49,1)
(1,0,1)
(59,52,1)
(62,59,1)
(18,41,1)
(46,60,1)
(20,37,1)
(39,29,1)
(30,56,1)
(13,41,1)
(27,43,1)
(15,16,1)
(36,27,1)
(58,13,1)
(10,21,1)
(62,3,1)
(18,46,1)
(11,38,1)
(56,41,1)
(60,57,1)
(15,2,1)
(44,48,1)
(8,47,1)
(2,25,1)
(8,21,1)
(18,60,1)
(1,28,1)
(45,39,1)
(53,14,1)
(43,9,1)
(22,62,1)
(47,10,1)
(38,36,1)
(41,45,1)
(19,50,1)
(26,63,1)
(28,22,1)
(55,15,1)
(49,32,1)
(14,3,1)
(9,44,1)
(62,3,2)
(1,14,2)
(18,41,2)
(19,50,2)
(45,63,2)
(15,16,2)
(18,49,2)
(56,41,2)
(10,21,2)
(28,14,2)
(14,14,2)
(32,14,2)
(20,37,2)
(59,14,2)
(62,14,2)
(1,55,2)
(55,15,2)
(47,21,2)
(14,3,2)
(50,14,2)
(14,1,2)
(12,14,2)
(18,60,2)
(50,18,2)
(60,14,2)
(46,14,2)
(56,37,2)
(31,14,2)
(21,41,2)
(57,14,2)
(22,14,2)
(18,14,2)
(49,14,2)
(53,14,2)
(50,12,2)
(52,50,2)
(41,45,2)
(1,0,2)
-----------------------------------
(0,size_t)
(1,(size_t)
(2,countPtr)
(3,i = 0)
(4,)
(5,)
(6,pFile)
(7,i)
(8,i)
(9,i = 0)
(10,1)
(11,"output_bad.txt")
(12,strlen(SENTENCE)
(13,pFile)
(14,i < (size_t)
(15,*countPtr)
(16,int * countPtr)
(17,filename)
(18,fwrite(SENTENCE, sizeof(char)
(19,1)
(20,pFile)
(21,pFile == NULL)
(22,i)
(23,)
(24,0)
(25,count)
(26,pFile)
(27,NULL)
(28,count)
(29,filename)
(30,RET)
(31,SENTENCE)
(32,char)
(33,if (pFile)
(34,count)
(35,if (strlen(SENTENCE)
(36,*pFile = NULL)
(37,pFile)
(38,filename)
(39,"w+")
(40,for (i = 0; i < (size_t)
(41,pFile = fopen(filename, "w+")
(42,)
(43,pFile)
(44,0)
(45,fopen(filename, "w+")
(46,pFile)
(47,exit(1)
(48,i)
(49,sizeof(char)
(50,strlen(SENTENCE)
(51,)
(52,exit(1)
(53,SENTENCE)
(54,)
(55,count = *countPtr)
(56,fclose(pFile)
(57,SENTENCE)
(58,NULL)
(59,i)
(60,strlen(SENTENCE)
(61,if (pFile == NULL)
(62,i++)
(63,*filename = "output_bad.txt")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^