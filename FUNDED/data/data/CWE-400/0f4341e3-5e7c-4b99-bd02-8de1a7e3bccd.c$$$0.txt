-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
38,44
38,45
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
60,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
69,72
70,71
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
112,113
114,115
114,116
114,117
114,118
114,119
115,116
117,118
119,120
120,121
120,122
123,124
123,125
124,125
126,127
128,129
130,131
131,132
132,133
132,134
133,134
136,137
136,138
137,138
139,140
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,14,16,20,25,26,31,32,36,42,44,46,50,52,53,56,59,61,62,64,68,71,73,74,78,80,85,86,91,92,95,99,100,102,105,111,113,116,118,121,122,125,127,129,134,135,138,143,145
-----computeFrom-----
12,13
12,14
29,30
29,31
66,67
66,68
76,77
76,78
89,90
89,91
93,94
93,95
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(47,22,0)
(39,55,0)
(23,64,0)
(62,16,0)
(46,10,0)
(73,48,0)
(62,58,0)
(26,8,0)
(60,66,0)
(69,26,0)
(44,41,0)
(42,30,0)
(15,55,0)
(60,30,0)
(30,60,0)
(28,55,0)
(5,67,0)
(71,30,0)
(10,46,0)
(56,60,0)
(0,35,0)
(55,19,0)
(40,66,0)
(72,28,0)
(22,62,0)
(37,67,0)
(27,7,0)
(62,26,0)
(58,36,0)
(42,35,0)
(12,8,0)
(66,55,0)
(34,73,0)
(16,62,0)
(42,46,0)
(71,68,0)
(59,1,0)
(63,30,0)
(54,52,0)
(67,55,0)
(42,1,0)
(41,13,0)
(21,71,0)
(45,55,0)
(65,10,0)
(14,58,0)
(9,63,0)
(24,63,0)
(35,42,0)
(31,30,0)
(57,28,0)
(11,62,0)
(17,55,0)
(46,42,0)
(61,69,0)
(20,60,0)
(4,42,0)
(6,8,0)
(70,64,0)
(30,55,0)
(3,23,0)
(25,64,0)
(29,55,0)
(22,64,0)
(62,22,0)
(1,42,0)
(7,51,0)
(18,58,0)
(43,26,0)
(32,55,0)
(74,42,0)
(38,66,0)
(26,69,0)
(2,8,0)
(35,0,1)
(46,42,1)
(22,64,1)
(62,26,1)
(23,3,1)
(42,30,1)
(62,11,1)
(72,67,1)
(59,74,1)
(63,30,1)
(37,5,1)
(70,7,1)
(27,63,1)
(66,38,1)
(20,31,1)
(33,41,1)
(34,46,1)
(64,25,1)
(63,9,1)
(31,66,1)
(40,28,1)
(4,35,1)
(60,56,1)
(47,23,1)
(74,10,1)
(46,10,1)
(0,1,1)
(49,33,1)
(47,64,1)
(23,64,1)
(38,40,1)
(42,4,1)
(53,26,1)
(62,16,1)
(49,50,1)
(3,73,1)
(60,66,1)
(5,33,1)
(33,58,1)
(65,22,1)
(49,71,1)
(21,50,1)
(73,34,1)
(50,22,1)
(70,63,1)
(62,58,1)
(26,69,1)
(25,70,1)
(69,61,1)
(56,20,1)
(10,65,1)
(44,53,1)
(71,21,1)
(42,1,1)
(18,14,1)
(67,37,1)
(3,46,1)
(1,59,1)
(71,30,1)
(58,18,1)
(42,35,1)
(30,60,1)
(7,27,1)
(24,30,1)
(61,43,1)
(57,72,1)
(22,62,1)
(41,44,1)
(9,24,1)
(28,57,1)
(14,53,1)
(11,47,1)
(60,66,2)
(7,63,2)
(11,22,2)
(60,33,2)
(58,53,2)
(47,33,2)
(63,30,2)
(42,22,2)
(34,46,2)
(20,33,2)
(42,35,2)
(65,22,2)
(9,33,2)
(72,33,2)
(71,30,2)
(1,22,2)
(44,53,2)
(21,50,2)
(46,42,2)
(62,22,2)
(24,33,2)
(41,53,2)
(73,46,2)
(37,33,2)
(27,63,2)
(56,33,2)
(11,33,2)
(28,33,2)
(18,53,2)
(23,64,2)
(50,33,2)
(3,22,2)
(62,16,2)
(14,53,2)
(40,33,2)
(25,33,2)
(30,60,2)
(10,22,2)
(22,33,2)
(67,33,2)
(22,64,2)
(59,22,2)
(31,33,2)
(70,33,2)
(4,22,2)
(42,30,2)
(74,22,2)
(71,50,2)
(62,33,2)
(26,69,2)
(0,22,2)
(57,33,2)
(22,22,2)
(23,22,2)
(5,33,2)
(35,22,2)
(46,22,2)
(46,10,2)
(63,33,2)
(62,58,2)
(30,33,2)
(64,33,2)
(66,33,2)
(62,26,2)
(47,22,2)
(22,62,2)
(38,33,2)
(42,1,2)
-----------------------------------
(0,SENTENCE)
(1,sizeof(char)
(2,count)
(3,i)
(4,pFile)
(5,i)
(6,if(staticReturnsTrue()
(7,exit(1)
(8,)
(9,NULL)
(10,strlen(SENTENCE)
(11,count)
(12,if(staticReturnsFalse()
(13,)
(14,count)
(15,i)
(16,size_t)
(17,for (i = 0; i < (size_t)
(18,20)
(19,)
(20,filename)
(21,pFile)
(22,i < (size_t)
(23,i++)
(24,pFile)
(25,0)
(26,count = -1)
(27,1)
(28,*pFile = NULL)
(29,if (pFile)
(30,pFile = fopen(filename, "w+")
(31,pFile)
(32,filename)
(33,staticReturnsTrue()
(34,1)
(35,strlen(SENTENCE)
(36,)
(37,0)
(38,"output_bad.txt")
(39,pFile)
(40,filename)
(41,printLine("Benign, fixed string")
(42,fwrite(SENTENCE, sizeof(char)
(43,count)
(44,"Benign, fixed string")
(45,if (pFile == NULL)
(46,strlen(SENTENCE)
(47,i)
(48,)
(49,RET)
(50,pFile)
(51,)
(52,)
(53,staticReturnsFalse()
(54,if (strlen(SENTENCE)
(55,)
(56,"w+")
(57,NULL)
(58,count = 20)
(59,char)
(60,fopen(filename, "w+")
(61,1)
(62,(size_t)
(63,pFile == NULL)
(64,i = 0)
(65,SENTENCE)
(66,*filename = "output_bad.txt")
(67,i = 0)
(68,)
(69,-1)
(70,i)
(71,fclose(pFile)
(72,pFile)
(73,exit(1)
(74,SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^