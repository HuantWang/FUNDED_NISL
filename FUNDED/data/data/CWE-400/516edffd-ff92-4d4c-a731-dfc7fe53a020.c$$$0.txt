-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,21,26,27,32,36,38,41,43,47,48,54,55,56,57,63,64,65,66,70,74,75,78,80
-----computeFrom-----
14,15
14,16
30,31
30,32
42,43
42,44
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,41,0)
(5,16,0)
(39,34,0)
(8,20,0)
(36,40,0)
(15,16,0)
(17,20,0)
(12,1,0)
(0,23,0)
(38,16,0)
(10,20,0)
(26,37,0)
(29,38,0)
(15,10,0)
(16,15,0)
(6,39,0)
(34,37,0)
(12,35,0)
(23,40,0)
(11,30,0)
(1,31,0)
(15,9,0)
(2,32,0)
(20,17,0)
(34,39,0)
(14,2,0)
(35,16,0)
(19,38,0)
(40,31,0)
(23,38,0)
(18,35,0)
(10,15,0)
(1,12,0)
(38,23,0)
(7,34,0)
(39,16,0)
(27,17,0)
(4,41,0)
(35,12,0)
(3,41,0)
(9,15,0)
(33,30,0)
(16,31,0)
(20,10,0)
(37,31,0)
(13,41,0)
(22,39,0)
(21,35,0)
(39,16,1)
(26,34,1)
(22,16,1)
(38,29,1)
(18,40,1)
(15,10,1)
(10,20,1)
(23,38,1)
(5,25,1)
(17,27,1)
(23,0,1)
(0,38,1)
(29,19,1)
(35,21,1)
(7,39,1)
(12,35,1)
(35,16,1)
(36,23,1)
(33,11,1)
(34,7,1)
(28,24,1)
(6,22,1)
(39,6,1)
(25,30,1)
(1,12,1)
(27,8,1)
(24,1,1)
(19,37,1)
(8,5,1)
(34,39,1)
(37,26,1)
(14,25,1)
(21,18,1)
(40,36,1)
(38,16,1)
(15,9,1)
(16,15,1)
(24,2,1)
(20,17,1)
(2,14,1)
(30,33,1)
(20,25,2)
(15,10,2)
(12,35,2)
(5,25,2)
(35,16,2)
(8,25,2)
(29,25,2)
(34,39,2)
(21,25,2)
(16,15,2)
(15,25,2)
(1,12,2)
(34,25,2)
(12,25,2)
(18,25,2)
(10,25,2)
(19,25,2)
(39,16,2)
(15,9,2)
(38,25,2)
(39,25,2)
(20,17,2)
(35,25,2)
(7,25,2)
(16,25,2)
(14,25,2)
(6,25,2)
(23,38,2)
(1,25,2)
(37,25,2)
(26,25,2)
(0,25,2)
(27,25,2)
(23,25,2)
(40,25,2)
(10,20,2)
(36,25,2)
(22,25,2)
(38,16,2)
(17,25,2)
(2,25,2)
-----------------------------------
(0,intTwo)
(1,printStructLine(&data[0])
(2,printLine("Benign, fixed string")
(3,data)
(4,if(staticFalse)
(5,data)
(6,0)
(7,intOne)
(8,100)
(9,twoIntsStruct *)
(10,ALLOCA(100*sizeof(twoIntsStruct)
(11,data)
(12,&data[0])
(13,if(staticTrue)
(14,"Benign, fixed string")
(15,(twoIntsStruct *)
(16,data = (twoIntsStruct *)
(17,sizeof(twoIntsStruct)
(18,data)
(19,data)
(20,100*sizeof(twoIntsStruct)
(21,0)
(22,data)
(23,data[0].intTwo)
(24,staticTrue)
(25,staticFalse)
(26,0)
(27,twoIntsStruct)
(28,RET)
(29,0)
(30,data = NULL)
(31,)
(32,)
(33,NULL)
(34,data[0].intOne)
(35,data[0])
(36,0)
(37,data[0].intOne = 0)
(38,data[0])
(39,data[0])
(40,data[0].intTwo = 0)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^