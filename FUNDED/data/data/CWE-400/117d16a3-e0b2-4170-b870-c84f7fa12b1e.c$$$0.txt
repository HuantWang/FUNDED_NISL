-----label-----
0
-----code-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
{
	int res;
	int status;
	char tech[256];
	char *location;
	const char *macrocontext, *macroexten;
	enum ast_device_state newstate;

	/* on entry here, we know that tmp->chan == NULL */
	if (tmp->member->paused) {
		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||
		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {
		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",
				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if (!tmp->member->ringinuse) {
		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {
			newstate = ast_device_state(tmp->member->interface);
			if (newstate != tmp->member->status) {
				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",
					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);
			}
		}
		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {
			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
			if (ast_channel_cdr(qe->chan)) {
				ast_cdr_busy(ast_channel_cdr(qe->chan));
			}
			tmp->stillgoing = 0;
			(*busies)++;
			return 0;
		}
	}

	if (use_weight && compare_weight(qe->parent,tmp->member)) {
		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	ast_copy_string(tech, tmp->interface, sizeof(tech));
	if ((location = strchr(tech, '/'))) {
		*location++ = '\0';
	} else {
		location = "";
	}

	/* Request the peer */
	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
	if (!tmp->chan) {			/* If we can't, just go on to the next call */
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;

		ao2_lock(qe->parent);
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		qe->parent->rrpos++;
		qe->linpos++;
		ao2_unlock(qe->parent);

		(*busies)++;
		return 0;
	}

	ast_channel_lock_both(tmp->chan, qe->chan);

	if (qe->cancel_answered_elsewhere) {
		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
	}
	ast_channel_appl_set(tmp->chan, "AppQueue");
	ast_channel_data_set(tmp->chan, "(Outgoing Line)");
	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));

	/* If the new channel has no callerid, try to guess what it should be */
	if (!ast_channel_caller(tmp->chan)->id.number.valid) {
		if (ast_channel_connected(qe->chan)->id.number.valid) {
			struct ast_party_caller caller;

			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
			caller.id = ast_channel_connected(qe->chan)->id;
			caller.ani = ast_channel_connected(qe->chan)->ani;
			ast_channel_set_caller_event(tmp->chan, &caller, NULL);
		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {
			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {
			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 
		}
		tmp->dial_callerid_absent = 1;
	}

	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));

	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;

	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));

	/* Inherit specially named variables from parent channel */
	ast_channel_inherit_variables(qe->chan, tmp->chan);
	ast_channel_datastore_inherit(qe->chan, tmp->chan);

	/* Presense of ADSI CPE on outgoing channel follows ours */
	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));

	/* Inherit context and extension */
	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
	if (!ast_strlen_zero(macroexten)) {
		ast_channel_exten_set(tmp->chan, macroexten);
	} else {
		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
	}
	if (ast_cdr_isset_unanswered()) {
		/* they want to see the unanswered dial attempts! */
		/* set up the CDR fields on all the CDRs to give sensical information */
		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
	}

	ast_channel_unlock(tmp->chan);
	ast_channel_unlock(qe->chan);

	/* Place the call, but don't wait on the answer */
	if ((res = ast_call(tmp->chan, location, 0))) {
		/* Again, keep going even if there's an error */
		ast_verb(3, "Couldn't call %s\n", tmp->interface);
		do_hang(tmp);
		(*busies)++;
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		return 0;
	} else if (qe->parent->eventwhencalled) {
		char vars[2048];

		ast_channel_lock_both(tmp->chan, qe->chan);

		/*** DOCUMENTATION
		<managerEventInstance>
			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>
			<syntax>
				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
				<parameter name="AgentCalled">
					<para>The agent's technology or location.</para>
				</parameter>
				<parameter name="AgentName">
					<para>The name of the agent.</para>
				</parameter>
				<parameter name="Variable" required="no" multiple="yes">
					<para>Optional channel variables from the ChannelCalling channel</para>
				</parameter>
			</syntax>
			<see-also>
				<ref type="managerEvent">AgentRingNoAnswer</ref>
				<ref type="managerEvent">AgentComplete</ref>
				<ref type="managerEvent">AgentConnect</ref>
			</see-also>
		</managerEventInstance>
		***/
		manager_event(EVENT_FLAG_AGENT, "AgentCalled",
			"Queue: %s\r\n"
			"AgentCalled: %s\r\n"
			"AgentName: %s\r\n"
			"ChannelCalling: %s\r\n"
			"DestinationChannel: %s\r\n"
			"CallerIDNum: %s\r\n"
			"CallerIDName: %s\r\n"
			"ConnectedLineNum: %s\r\n"
			"ConnectedLineName: %s\r\n"
			"Context: %s\r\n"
			"Extension: %s\r\n"
			"Priority: %d\r\n"
			"Uniqueid: %s\r\n"
			"%s",
			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),
			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),
			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),
			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");

		ast_channel_unlock(tmp->chan);
		ast_channel_unlock(qe->chan);

		ast_verb(3, "Called %s\n", tmp->interface);
	}

	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
47,50
49,50
49,51
52,53
52,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
63,65
64,65
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
70,73
70,74
71,72
75,76
75,77
76,77
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
87,88
88,89
89,90
89,91
90,91
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
106,107
107,108
108,109
109,110
110,111
112,113
114,115
114,116
115,116
115,117
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
123,124
123,125
124,125
124,126
125,126
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
135,136
137,138
137,139
138,139
141,142
141,143
142,143
142,144
143,144
147,148
148,149
148,150
149,150
149,151
150,151
151,152
151,153
152,153
155,156
155,157
156,157
156,158
157,158
161,162
162,163
162,164
163,164
163,165
164,165
164,166
165,166
167,168
169,170
169,171
170,171
173,174
173,175
174,175
174,176
175,176
179,180
179,181
179,182
179,183
179,184
180,181
181,182
181,183
181,184
181,185
181,186
182,183
186,187
187,188
187,189
187,190
188,189
188,190
189,190
192,193
192,194
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
204,205
204,206
205,206
208,209
208,210
209,210
209,211
210,211
212,213
212,214
213,214
216,217
217,218
218,219
218,220
219,220
221,222
221,223
222,223
224,225
224,226
225,226
228,229
229,230
229,231
230,231
230,232
231,232
235,236
236,237
237,238
238,239
239,240
241,242
243,244
243,245
244,245
245,246
245,247
246,247
246,248
247,248
251,252
251,253
252,253
252,254
253,254
253,255
254,255
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
264,265
266,267
266,268
267,268
268,269
268,270
269,270
271,272
271,273
272,273
274,275
274,276
275,276
275,277
276,277
280,281
280,282
281,282
281,283
282,283
284,285
284,286
285,286
285,287
286,287
290,291
290,292
291,292
292,293
292,294
292,295
292,296
292,297
292,298
293,294
295,296
298,299
298,300
299,300
299,301
300,301
304,305
304,306
305,306
307,308
307,309
308,309
308,310
309,310
313,314
313,315
314,315
316,317
318,319
319,320
319,321
319,322
319,323
320,321
322,323
324,325
326,327
326,328
327,328
327,329
328,329
332,333
332,334
333,334
333,335
334,335
335,336
335,337
336,337
336,338
337,338
337,339
338,339
342,343
344,345
345,346
345,347
346,347
346,348
347,348
347,349
348,349
352,353
354,355
354,356
354,357
354,358
354,359
355,356
356,357
356,358
356,359
356,360
357,358
361,362
361,363
362,363
365,366
365,367
366,367
366,368
367,368
369,370
369,371
370,371
373,374
374,375
375,376
375,377
376,377
378,379
378,380
379,380
381,382
381,383
382,383
385,386
386,387
386,388
387,388
387,389
388,389
392,393
393,394
394,395
395,396
396,397
398,399
400,401
400,402
401,402
401,403
402,403
404,405
404,406
404,407
405,406
407,408
407,409
408,409
411,412
411,413
412,413
415,416
415,417
415,418
415,419
415,420
416,417
417,418
417,419
417,420
417,421
417,422
418,419
422,423
422,424
423,424
423,425
424,425
428,429
428,430
429,430
432,433
432,434
433,434
433,435
434,435
436,437
436,438
437,438
440,441
441,442
442,443
442,444
443,444
445,446
445,447
446,447
448,449
448,450
449,450
452,453
453,454
453,455
454,455
454,456
455,456
459,460
460,461
461,462
462,463
463,464
465,466
467,468
468,469
468,470
468,471
468,472
469,470
471,472
473,474
473,475
474,475
477,478
478,479
479,480
481,482
481,483
481,484
482,483
483,484
483,485
484,485
486,487
486,488
486,489
487,488
489,490
492,493
493,494
494,495
494,496
495,496
496,497
497,498
500,501
501,502
502,503
502,504
503,504
506,507
507,508
507,509
508,509
508,510
509,510
512,513
512,514
512,515
512,516
512,517
512,518
513,514
515,516
517,518
517,519
518,519
520,521
520,522
521,522
524,525
524,526
525,526
528,529
530,531
531,532
533,534
533,535
534,535
535,536
535,537
536,537
539,540
539,541
539,542
539,543
539,544
539,545
539,546
539,547
539,548
540,541
540,542
541,542
541,543
542,543
544,545
544,546
545,546
548,549
549,550
550,551
550,552
551,552
553,554
553,555
554,555
556,557
556,558
557,558
560,561
561,562
561,563
562,563
562,564
563,564
567,568
568,569
568,570
569,570
571,572
571,573
572,573
575,576
576,577
576,578
576,579
576,580
577,578
579,580
579,581
580,581
583,584
583,585
584,585
587,588
587,589
588,589
590,591
590,592
591,592
594,595
595,596
596,597
596,598
597,598
597,599
598,599
602,603
603,604
604,605
604,606
605,606
608,609
609,610
609,611
610,611
612,613
612,614
613,614
616,617
617,618
618,619
619,620
620,621
622,623
624,625
625,626
625,627
625,628
626,627
628,629
628,630
629,630
632,633
632,634
633,634
636,637
636,638
637,638
637,639
638,639
641,642
642,643
643,644
643,645
643,646
644,645
646,647
646,648
647,648
650,651
652,653
653,654
653,655
653,656
654,655
656,657
656,658
657,658
661,662
662,663
662,664
662,665
663,664
665,666
665,667
666,667
670,671
671,672
671,673
671,674
671,675
672,673
674,675
674,676
675,676
677,678
677,679
678,679
682,683
683,684
684,685
685,686
685,687
686,687
688,689
688,690
689,690
692,693
692,694
693,694
694,695
694,696
695,696
695,697
696,697
696,698
697,698
697,699
698,699
700,701
700,702
701,702
707,708
707,709
708,709
708,710
708,711
709,710
709,711
710,711
710,712
711,712
711,713
712,713
712,714
713,714
715,716
715,717
716,717
722,723
722,724
722,725
722,726
722,727
723,724
724,725
724,726
725,726
727,728
729,730
730,731
730,732
730,733
731,732
733,734
734,735
736,737
736,738
737,738
739,740
739,741
740,741
743,744
744,745
744,746
745,746
745,747
746,747
749,750
749,751
750,751
750,752
751,752
753,754
753,755
754,755
758,759
759,760
759,761
760,761
760,762
761,762
764,765
764,766
765,766
765,767
766,767
768,769
768,770
769,770
773,774
774,775
774,776
774,777
774,778
775,776
777,778
777,779
778,779
781,782
782,783
784,785
786,787
786,788
786,789
787,788
788,789
788,790
789,790
791,792
791,793
792,793
792,794
793,794
793,795
794,795
796,797
796,798
797,798
802,803
803,804
804,805
804,806
804,807
804,808
804,809
805,806
807,808
807,809
808,809
811,812
811,813
812,813
812,814
813,814
813,815
814,815
816,817
816,818
817,818
822,823
824,825
826,827
826,828
827,828
828,829
828,830
829,830
831,832
831,833
831,834
832,833
834,835
834,836
835,836
837,838
837,839
838,839
841,842
841,843
842,843
844,845
844,846
845,846
848,849
849,850
850,851
850,852
850,853
850,854
850,855
851,852
853,854
853,855
854,855
857,858
857,859
857,860
858,859
860,861
860,862
861,862
863,864
863,865
864,865
867,868
867,869
868,869
870,871
870,872
871,872
874,875
876,877
878,879
879,880
879,881
880,881
880,882
881,882
885,886
886,887
886,888
886,889
887,888
889,890
889,891
890,891
892,893
892,894
893,894
896,897
896,898
897,898
899,900
899,901
900,901
903,904
904,905
904,906
905,906
905,907
906,907
906,908
907,908
909,910
909,911
910,911
914,915
914,916
915,916
915,917
916,917
918,919
918,920
919,920
923,924
924,925
924,926
924,927
925,926
927,928
927,929
928,929
930,931
930,932
931,932
934,935
934,936
935,936
937,938
937,939
938,939
941,942
942,943
942,944
942,945
943,944
945,946
945,947
946,947
949,950
949,951
950,951
953,954
954,955
954,956
954,957
955,956
957,958
957,959
958,959
961,962
961,963
962,963
965,966
966,967
966,968
966,969
967,968
969,970
969,971
970,971
973,974
973,975
974,975
976,977
976,978
977,978
980,981
981,982
981,983
982,983
984,985
984,986
984,987
985,986
987,988
987,989
988,989
992,993
993,994
993,995
993,996
994,995
996,997
996,998
997,998
1000,1001
1000,1002
1000,1003
1001,1002
1001,1003
1002,1003
1004,1005
1006,1007
1006,1008
1007,1008
1009,1010
1009,1011
1010,1011
1013,1014
1015,1016
1016,1017
1016,1018
1017,1018
1019,1020
1019,1021
1019,1022
1020,1021
1022,1023
1022,1024
1023,1024
1027,1028
1027,1029
1027,1030
1028,1029
1029,1030
1029,1031
1030,1031
1032,1033
1034,1035
1035,1036
1036,1037
1036,1038
1036,1039
1037,1038
1039,1040
1039,1041
1040,1041
1043,1044
1045,1046
1046,1047
1047,1048
1047,1049
1047,1050
1048,1049
1050,1051
1050,1052
1051,1052
1054,1055
1054,1056
1055,1056
1057,1058
1057,1059
1058,1059
1061,1062
1061,1063
1062,1063
1063,1064
1065,1066
1065,1067
1065,1068
1065,1069
1065,1070
1065,1071
1065,1072
1065,1073
1065,1074
1065,1075
1065,1076
1066,1067
1067,1068
1067,1069
1067,1070
1068,1069
1070,1071
1070,1072
1071,1072
1073,1074
1073,1075
1074,1075
1077,1078
1077,1079
1078,1079
1080,1081
1080,1082
1081,1082
1084,1085
1085,1086
1085,1087
1085,1088
1086,1087
1088,1089
1088,1090
1089,1090
1089,1091
1090,1091
1092,1093
1092,1094
1093,1094
1097,1098
1097,1099
1098,1099
1098,1100
1099,1100
1101,1102
1101,1103
1102,1103
1106,1107
1107,1108
1107,1109
1107,1110
1108,1109
1110,1111
1110,1112
1111,1112
1111,1113
1112,1113
1114,1115
1114,1116
1115,1116
1119,1120
1119,1121
1120,1121
1120,1122
1121,1122
1123,1124
1123,1125
1124,1125
1128,1129
1129,1130
1129,1131
1129,1132
1130,1131
1132,1133
1132,1134
1133,1134
1133,1135
1134,1135
1136,1137
1136,1138
1137,1138
1141,1142
1141,1143
1142,1143
1142,1144
1143,1144
1145,1146
1145,1147
1146,1147
1150,1151
1151,1152
1151,1153
1151,1154
1152,1153
1154,1155
1154,1156
1155,1156
1155,1157
1156,1157
1158,1159
1158,1160
1159,1160
1163,1164
1163,1165
1164,1165
1166,1167
1166,1168
1167,1168
1170,1171
1171,1172
1171,1173
1171,1174
1172,1173
1174,1175
1174,1176
1175,1176
1175,1177
1176,1177
1178,1179
1178,1180
1179,1180
1183,1184
1183,1185
1184,1185
1186,1187
1186,1188
1187,1188
1190,1191
1191,1192
1191,1193
1191,1194
1192,1193
1194,1195
1194,1196
1195,1196
1195,1197
1196,1197
1198,1199
1198,1200
1199,1200
1203,1204
1203,1205
1204,1205
1204,1206
1205,1206
1207,1208
1207,1209
1208,1209
1212,1213
1213,1214
1213,1215
1213,1216
1214,1215
1216,1217
1216,1218
1217,1218
1217,1219
1218,1219
1220,1221
1220,1222
1221,1222
1225,1226
1225,1227
1226,1227
1226,1228
1227,1228
1229,1230
1229,1231
1230,1231
1234,1235
1235,1236
1235,1237
1236,1237
1236,1238
1237,1238
1237,1239
1238,1239
1240,1241
1240,1242
1241,1242
1245,1246
1245,1247
1246,1247
1246,1248
1247,1248
1249,1250
1249,1251
1250,1251
1254,1255
1255,1256
1255,1257
1255,1258
1256,1257
1258,1259
1258,1260
1259,1260
1259,1261
1260,1261
1262,1263
1262,1264
1263,1264
1267,1268
1267,1269
1268,1269
1268,1270
1269,1270
1271,1272
1271,1273
1272,1273
1276,1277
1277,1278
1277,1279
1277,1280
1278,1279
1280,1281
1280,1282
1281,1282
1281,1283
1282,1283
1284,1285
1284,1286
1285,1286
1289,1290
1289,1291
1290,1291
1290,1292
1291,1292
1293,1294
1293,1295
1294,1295
1298,1299
1299,1300
1299,1301
1300,1301
1302,1303
1302,1304
1303,1304
1306,1307
1307,1308
1307,1309
1308,1309
1310,1311
1310,1312
1311,1312
1314,1315
1314,1316
1314,1317
1315,1316
1316,1317
1316,1318
1317,1318
1319,1320
1319,1321
1319,1322
1319,1323
1320,1321
1322,1323
1322,1324
1323,1324
1326,1327
1329,1330
1329,1331
1329,1332
1329,1333
1329,1334
1330,1331
1331,1332
1331,1333
1331,1334
1331,1335
1332,1333
1336,1337
1336,1338
1337,1338
1340,1341
1341,1342
1341,1343
1342,1343
1344,1345
1346,1347
1347,1348
1348,1349
1349,1350
1350,1351
1352,1353
1353,1354
1353,1355
1353,1356
1353,1357
1354,1355
1356,1357
1356,1358
1357,1358
1360,1361
1360,1362
1361,1362
1364,1365
1364,1366
1365,1366
1367,1368
1367,1369
1368,1369
1371,1372
1373,1374
1373,1375
1374,1375
1374,1376
1375,1376
1375,1377
1376,1377
1380,1381
1380,1382
1380,1383
1380,1384
1380,1385
1380,1386
1381,1382
1382,1383
1382,1384
1384,1385
1384,1386
1386,1387
1388,1389
1389,1390
1389,1391
1389,1392
1390,1391
1392,1393
1392,1394
1393,1394
1396,1397
1396,1398
1397,1398
1400,1401
1401,1402
1401,1403
1401,1404
1401,1405
1401,1406
1401,1407
1401,1408
1401,1409
1401,1410
1401,1411
1401,1412
1401,1413
1401,1414
1401,1415
1401,1416
1401,1417
1401,1418
1401,1419
1402,1403
1404,1405
1408,1409
1408,1410
1409,1410
1409,1411
1410,1411
1414,1415
1414,1416
1415,1416
1418,1419
1418,1420
1419,1420
1419,1421
1420,1421
1424,1425
1424,1426
1425,1426
1427,1428
1427,1429
1428,1429
1431,1432
1431,1433
1432,1433
1434,1435
1434,1436
1435,1436
1438,1439
1438,1440
1438,1441
1438,1442
1439,1440
1441,1442
1441,1443
1442,1443
1442,1444
1443,1444
1443,1445
1444,1445
1444,1446
1445,1446
1447,1448
1447,1449
1448,1449
1454,1455
1454,1456
1455,1456
1455,1457
1456,1457
1456,1458
1457,1458
1457,1459
1458,1459
1460,1461
1460,1462
1461,1462
1468,1469
1468,1470
1468,1471
1468,1472
1469,1470
1471,1472
1471,1473
1472,1473
1472,1474
1473,1474
1473,1475
1474,1475
1474,1476
1475,1476
1477,1478
1477,1479
1478,1479
1484,1485
1484,1486
1485,1486
1485,1487
1486,1487
1486,1488
1487,1488
1487,1489
1488,1489
1490,1491
1490,1492
1491,1492
1498,1499
1498,1500
1498,1501
1498,1502
1499,1500
1501,1502
1501,1503
1502,1503
1502,1504
1503,1504
1503,1505
1504,1505
1504,1506
1505,1506
1507,1508
1507,1509
1508,1509
1514,1515
1514,1516
1515,1516
1515,1517
1516,1517
1516,1518
1517,1518
1517,1519
1518,1519
1520,1521
1520,1522
1521,1522
1528,1529
1528,1530
1528,1531
1528,1532
1529,1530
1531,1532
1531,1533
1532,1533
1532,1534
1533,1534
1533,1535
1534,1535
1534,1536
1535,1536
1537,1538
1537,1539
1538,1539
1544,1545
1544,1546
1545,1546
1545,1547
1546,1547
1546,1548
1547,1548
1547,1549
1548,1549
1550,1551
1550,1552
1551,1552
1558,1559
1558,1560
1559,1560
1561,1562
1561,1563
1562,1563
1565,1566
1565,1567
1566,1567
1568,1569
1568,1570
1569,1570
1572,1573
1572,1574
1573,1574
1575,1576
1575,1577
1576,1577
1579,1580
1579,1581
1580,1581
1582,1583
1582,1584
1583,1584
1586,1587
1586,1588
1586,1589
1587,1588
1587,1589
1588,1589
1588,1590
1589,1590
1589,1591
1590,1591
1594,1595
1596,1597
1596,1598
1596,1599
1596,1600
1597,1598
1599,1600
1599,1601
1600,1601
1603,1604
1605,1606
1606,1607
1607,1608
1610,1611
1611,1612
1611,1613
1612,1613
1614,1615
1614,1616
1615,1616
1618,1619
1619,1620
1619,1621
1620,1621
1622,1623
1622,1624
1623,1624
1626,1627
1627,1628
1627,1629
1627,1630
1627,1631
1628,1629
1632,1633
1632,1634
1633,1634
1636,1637
1637,1638
1637,1639
1637,1640
1637,1641
1638,1639
1640,1641
1640,1642
1641,1642
1644,1645
1644,1646
1645,1646
1648,1649
1648,1650
1649,1650
1651,1652
1651,1653
1652,1653
1655,1656
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,25,27,30,32,35,37,39,42,44,45,48,50,51,53,54,58,60,65,66,67,72,73,74,77,78,82,85,86,91,94,97,98,103,104,105,111,113,121,122,126,127,128,134,136,139,140,144,145,146,153,154,158,159,160,166,168,171,172,176,177,178,183,184,185,190,191,195,196,197,201,202,203,206,207,211,214,215,220,223,226,227,232,233,234,240,242,248,249,250,255,261,262,263,265,270,273,277,278,279,283,287,288,289,294,296,297,301,302,303,306,310,311,312,315,317,321,323,325,329,330,331,339,340,341,343,349,350,351,353,358,359,360,363,364,368,371,372,377,380,383,384,389,390,391,397,399,403,406,409,410,413,414,419,420,421,425,426,427,430,431,435,438,439,444,447,450,451,456,457,458,464,466,470,472,475,476,480,485,488,490,491,498,499,504,505,510,511,514,516,519,522,523,526,527,529,532,537,538,543,546,547,552,555,558,559,564,565,566,570,573,574,578,581,582,585,586,589,592,593,599,600,601,606,607,611,614,615,621,623,627,630,631,634,635,639,640,645,648,649,651,655,658,659,660,664,667,668,669,673,676,679,680,681,687,690,691,699,702,703,704,705,706,714,717,718,719,720,721,726,728,732,735,738,741,742,747,748,752,755,756,757,762,763,767,770,771,772,776,779,780,783,785,790,795,798,799,800,801,806,809,810,815,818,819,820,821,823,825,830,833,836,839,840,843,846,847,852,855,856,859,862,865,866,869,872,873,875,877,882,883,884,888,891,894,895,898,901,902,908,911,912,913,917,920,921,922,926,929,932,933,936,939,940,944,947,948,951,952,956,959,960,963,964,968,971,972,975,978,979,983,986,989,990,991,995,998,999,1003,1005,1008,1011,1012,1014,1018,1021,1024,1025,1026,1031,1033,1038,1041,1042,1044,1049,1052,1053,1056,1059,1060,1064,1069,1072,1075,1076,1079,1082,1083,1087,1091,1094,1095,1096,1100,1103,1104,1105,1109,1113,1116,1117,1118,1122,1125,1126,1127,1131,1135,1138,1139,1140,1144,1147,1148,1149,1153,1157,1160,1161,1162,1165,1168,1169,1173,1177,1180,1181,1182,1185,1188,1189,1193,1197,1200,1201,1202,1206,1209,1210,1211,1215,1219,1222,1223,1224,1228,1231,1232,1233,1239,1242,1243,1244,1248,1251,1252,1253,1257,1261,1264,1265,1266,1270,1273,1274,1275,1279,1283,1286,1287,1288,1292,1295,1296,1297,1301,1304,1305,1309,1312,1313,1318,1321,1324,1325,1327,1328,1333,1334,1335,1338,1339,1343,1345,1351,1355,1358,1359,1362,1363,1366,1369,1370,1372,1377,1378,1379,1383,1385,1387,1391,1394,1395,1398,1399,1403,1405,1406,1407,1411,1412,1413,1416,1417,1421,1422,1423,1426,1429,1430,1433,1436,1437,1440,1446,1449,1450,1451,1452,1453,1459,1462,1463,1464,1465,1466,1467,1470,1476,1479,1480,1481,1482,1483,1489,1492,1493,1494,1495,1496,1497,1500,1506,1509,1510,1511,1512,1513,1519,1522,1523,1524,1525,1526,1527,1530,1536,1539,1540,1541,1542,1543,1549,1552,1553,1554,1555,1556,1557,1560,1563,1564,1567,1570,1571,1574,1577,1578,1581,1584,1585,1591,1592,1593,1595,1598,1601,1602,1604,1608,1609,1613,1616,1617,1621,1624,1625,1629,1630,1631,1634,1635,1639,1642,1643,1646,1647,1650,1653,1654,1656
-----computeFrom-----
100,101
100,102
115,116
115,117
117,118
117,119
118,119
118,120
130,131
130,132
131,132
131,133
148,149
148,150
149,150
149,151
162,163
162,164
163,164
163,165
229,230
229,231
253,254
253,255
257,258
257,259
268,269
268,270
281,282
281,283
333,334
333,335
335,336
335,337
345,346
345,347
386,387
386,388
401,402
401,403
453,454
453,455
483,484
483,485
494,495
494,496
502,503
502,504
507,508
507,509
561,562
561,563
744,745
744,746
759,760
759,761
879,880
879,881
904,905
904,906
981,982
981,983
1016,1017
1016,1018
1235,1236
1235,1237
1316,1317
1316,1318
1587,1588
1587,1589
-----guardedBy-----
177,202
176,226
154,196
171,232
261,329
262,330
263,312
283,323
287,329
288,330
289,312
349,389
410,426
409,450
413,456
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies){	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
static int
ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
ring_entry
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
struct callattempt *tmp
struct callattempt
callattempt
*tmp
*
tmp
int *busies
int
*busies
*
busies
{	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
int res;
int res;
int
res
res
int status;
int status;
int
status
status
char tech[256];
char tech[256];
char
tech[256]
tech
[256]
256
char *location;
char *location;
char
*location
*
location
const char *macrocontext, *macroexten;
const char *macrocontext, *macroexten;
const char
*macrocontext
*
macrocontext
*macroexten
*
macroexten
enum ast_device_state newstate;
enum ast_device_state newstate;
enum ast_device_state
ast_device_state
newstate
newstate
if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
tmp->member->paused
tmp->member
tmp
tmp
member
paused
{		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
ast_debug(1, "%s paused, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s paused, can't receive call\n"
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime))
tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
tmp->lastqueue && tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
!tmp->lastqueue && qe->parent->wrapuptime
!tmp->lastqueue
tmp->lastqueue
tmp
tmp
lastqueue
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
(time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
time(NULL) - tmp->lastcall < qe->parent->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
{		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface)
ast_debug
ast_debug
1
"Wrapuptime not yet expired on queue %s for %s\n"
(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->name
tmp->lastqueue
tmp
tmp
lastqueue
name
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
!tmp->member->ringinuse
tmp->member->ringinuse
tmp->member
tmp
tmp
member
ringinuse
{		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}
check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
check_state_unknown
check_state_unknown
(tmp->member->status == AST_DEVICE_UNKNOWN)
tmp->member->status == AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}
newstate = ast_device_state(tmp->member->interface);
newstate = ast_device_state(tmp->member->interface)
newstate
newstate
ast_device_state(tmp->member->interface)
ast_device_state
ast_device_state
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}
newstate != tmp->member->status
newstate
newstate
tmp->member->status
tmp->member
tmp
tmp
member
status
{				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Found a channel matching iterface %s while status was %s changed to %s\n"
tmp->member->interface
tmp->member
tmp
tmp
member
interface
ast_devstate2str(tmp->member->status)
ast_devstate2str
ast_devstate2str
tmp->member->status
tmp->member
tmp
tmp
member
status
ast_devstate2str(newstate)
ast_devstate2str
ast_devstate2str
newstate
newstate
ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);
ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface)
ast_devstate_changed_literal
ast_devstate_changed_literal
newstate
newstate
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
(tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)
(tmp->member->status != AST_DEVICE_NOT_INUSE)
tmp->member->status != AST_DEVICE_NOT_INUSE
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
(tmp->member->status != AST_DEVICE_UNKNOWN)
tmp->member->status != AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
ast_debug(1, "%s in use, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s in use, can't receive call\n"
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{				ast_cdr_busy(ast_channel_cdr(qe->chan));			}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
use_weight && compare_weight(qe->parent,tmp->member)
use_weight
use_weight
compare_weight(qe->parent,tmp->member)
compare_weight
compare_weight
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
{		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface)
ast_debug
ast_debug
1
"Priority queue delaying call to %s:%s\n"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_copy_string(tech, tmp->interface, sizeof(tech));
ast_copy_string(tech, tmp->interface, sizeof(tech))
ast_copy_string
ast_copy_string
tech
tech
tmp->interface
tmp
tmp
interface
sizeof(tech)
(tech)
tech
tech
if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}
(location = strchr(tech, '/'))
location = strchr(tech, '/')
location
location
strchr(tech, '/')
strchr
strchr
tech
tech
'/'
{		*location++ = '\0';	}
*location++ = '\0';
*location++ = '\0'
*location++
location++
location
location
'\0'
{		location = "";	}
location = "";
location = ""
location
location
""
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
tmp->chan
tmp
tmp
chan
ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
ast_request
ast_request
tech
tech
ast_channel_nativeformats(qe->chan)
ast_channel_nativeformats
ast_channel_nativeformats
qe->chan
qe
qe
chan
qe->chan
qe
qe
chan
location
location
&status
status
status
if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
!tmp->chan
tmp->chan
tmp
tmp
chan
{			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
ao2_lock(qe->parent);
ao2_lock(qe->parent)
ao2_lock
ao2_lock
qe->parent
qe
qe
parent
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
qe->parent->rrpos++;
qe->parent->rrpos++
qe->parent->rrpos
qe->parent
qe
qe
parent
rrpos
qe->linpos++;
qe->linpos++
qe->linpos
qe
qe
linpos
ao2_unlock(qe->parent);
ao2_unlock(qe->parent)
ao2_unlock
ao2_unlock
qe->parent
qe
qe
parent
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
qe->cancel_answered_elsewhere
qe
qe
cancel_answered_elsewhere
{		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
ast_channel_hangupcause_set
ast_channel_hangupcause_set
tmp->chan
tmp
tmp
chan
AST_CAUSE_ANSWERED_ELSEWHERE
AST_CAUSE_ANSWERED_ELSEWHERE
ast_channel_appl_set(tmp->chan, "AppQueue");
ast_channel_appl_set(tmp->chan, "AppQueue")
ast_channel_appl_set
ast_channel_appl_set
tmp->chan
tmp
tmp
chan
"AppQueue"
ast_channel_data_set(tmp->chan, "(Outgoing Line)");
ast_channel_data_set(tmp->chan, "(Outgoing Line)")
ast_channel_data_set
ast_channel_data_set
tmp->chan
tmp
tmp
chan
"(Outgoing Line)"
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)))
memset
memset
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
0
sizeof(*ast_channel_whentohangup(tmp->chan))
(*ast_channel_whentohangup(tmp->chan))
*ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
!ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number
ast_channel_caller(tmp->chan)->id
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
id
number
valid
{		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
{			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		}
struct ast_party_caller caller;
struct ast_party_caller caller;
struct ast_party_caller
ast_party_caller
caller
caller
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan))
ast_party_caller_set_init
ast_party_caller_set_init
&caller
caller
caller
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
caller.id = ast_channel_connected(qe->chan)->id;
caller.id = ast_channel_connected(qe->chan)->id
caller.id
caller
caller
id
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
caller.ani = ast_channel_connected(qe->chan)->ani;
caller.ani = ast_channel_connected(qe->chan)->ani
caller.ani
caller
caller
ani
ast_channel_connected(qe->chan)->ani
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
ani
ast_channel_set_caller_event(tmp->chan, &caller, NULL);
ast_channel_set_caller_event(tmp->chan, &caller, NULL)
ast_channel_set_caller_event
ast_channel_set_caller_event
tmp->chan
tmp
tmp
chan
&caller
caller
caller
NULL
NULL
if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero
ast_strlen_zero
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
{			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		}
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
NULL
NULL
NULL
NULL
if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero
ast_strlen_zero
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
{			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL);
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
NULL
NULL
NULL
NULL
tmp->dial_callerid_absent = 1;
tmp->dial_callerid_absent = 1
tmp->dial_callerid_absent
tmp
tmp
dial_callerid_absent
1
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan))
ast_party_redirecting_copy
ast_party_redirecting_copy
ast_channel_redirecting(tmp->chan)
ast_channel_redirecting
ast_channel_redirecting
tmp->chan
tmp
tmp
chan
ast_channel_redirecting(qe->chan)
ast_channel_redirecting
ast_channel_redirecting
qe->chan
qe
qe
chan
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(tmp->chan)->transit_network_select
ast_channel_dialed(tmp->chan)
ast_channel_dialed
ast_channel_dialed
tmp->chan
tmp
tmp
chan
transit_network_select
ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
transit_network_select
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan))
ast_connected_line_copy_from_caller
ast_connected_line_copy_from_caller
ast_channel_connected(tmp->chan)
ast_channel_connected
ast_channel_connected
tmp->chan
tmp
tmp
chan
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
ast_channel_inherit_variables(qe->chan, tmp->chan);
ast_channel_inherit_variables(qe->chan, tmp->chan)
ast_channel_inherit_variables
ast_channel_inherit_variables
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_datastore_inherit(qe->chan, tmp->chan);
ast_channel_datastore_inherit(qe->chan, tmp->chan)
ast_channel_datastore_inherit
ast_channel_datastore_inherit
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan))
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe(qe->chan)
ast_channel_adsicpe
ast_channel_adsicpe
qe->chan
qe
qe
chan
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
macrocontext
macrocontext
pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_CONTEXT"
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext)
ast_channel_dialcontext_set
ast_channel_dialcontext_set
tmp->chan
tmp
tmp
chan
ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext
ast_strlen_zero(macrocontext)
ast_strlen_zero
ast_strlen_zero
macrocontext
macrocontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
macrocontext
macrocontext
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
macroexten
macroexten
pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_EXTEN"
if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
!ast_strlen_zero(macroexten)
ast_strlen_zero(macroexten)
ast_strlen_zero
ast_strlen_zero
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, macroexten);	}
ast_channel_exten_set(tmp->chan, macroexten);
ast_channel_exten_set(tmp->chan, macroexten)
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan))
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_isset_unanswered()
ast_cdr_isset_unanswered
ast_cdr_isset_unanswered
{		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan))
ast_cdr_setdestchan
ast_cdr_setdestchan
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->clid
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
clid
ast_channel_cdr(qe->chan)->clid
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
clid
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->channel
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
channel
ast_channel_cdr(qe->chan)->channel
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
channel
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->src
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
src
ast_channel_cdr(qe->chan)->src
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
src
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dst
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dst
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dcontext
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dcontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastapp
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastapp
ast_channel_cdr(qe->chan)->lastapp
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastapp
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastdata
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastdata
ast_channel_cdr(qe->chan)->lastdata
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastdata
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(tmp->chan)->amaflags
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
amaflags
ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
amaflags
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->accountcode
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
accountcode
ast_channel_cdr(qe->chan)->accountcode
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
accountcode
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->userfield
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
userfield
ast_channel_cdr(qe->chan)->userfield
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
userfield
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
(res = ast_call(tmp->chan, location, 0))
res = ast_call(tmp->chan, location, 0)
res
res
ast_call(tmp->chan, location, 0)
ast_call
ast_call
tmp->chan
tmp
tmp
chan
location
location
0
{		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	}
ast_verb(3, "Couldn't call %s\n", tmp->interface);
ast_verb(3, "Couldn't call %s\n", tmp->interface)
ast_verb
ast_verb
3
"Couldn't call %s\n"
tmp->interface
tmp
tmp
interface
do_hang(tmp);
do_hang(tmp)
do_hang
do_hang
tmp
tmp
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 0;
0
if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
{		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
char vars[2048];
char vars[2048];
char
vars[2048]
vars
[2048]
2048
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "")
manager_event
manager_event
EVENT_FLAG_AGENT
EVENT_FLAG_AGENT
"AgentCalled"
"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->member->membername
tmp->member
tmp
tmp
member
membername
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.number.valid
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
valid
ast_channel_caller(qe->chan)->id.number.str
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.name.valid
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
valid
ast_channel_caller(qe->chan)->id.name.str
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
ast_channel_connected(qe->chan)->id.number.str
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.name.valid
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
valid
ast_channel_connected(qe->chan)->id.name.str
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
str
"unknown"
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
ast_channel_priority(qe->chan)
ast_channel_priority
ast_channel_priority
qe->chan
qe
qe
chan
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : ""
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
QUEUE_EVENT_VARIABLES
QUEUE_EVENT_VARIABLES
vars2manager(qe->chan, vars, sizeof(vars))
vars2manager
vars2manager
qe->chan
qe
qe
chan
vars
vars
sizeof(vars)
(vars)
vars
vars
""
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
ast_verb(3, "Called %s\n", tmp->interface);
ast_verb(3, "Called %s\n", tmp->interface)
ast_verb
ast_verb
3
"Called %s\n"
tmp->interface
tmp
tmp
interface
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 1;
1
-----joern-----
(849,0,0)
(111,531,0)
(685,524,0)
(895,647,0)
(361,380,0)
(902,487,0)
(388,708,0)
(261,177,0)
(309,298,0)
(940,608,0)
(285,464,0)
(453,129,0)
(549,702,0)
(528,740,0)
(17,915,0)
(403,681,0)
(273,195,0)
(932,755,0)
(926,284,0)
(340,509,0)
(169,763,0)
(155,338,0)
(956,493,0)
(382,326,0)
(183,830,0)
(919,451,0)
(469,791,0)
(560,794,0)
(174,210,0)
(355,891,0)
(622,355,0)
(670,909,0)
(530,886,0)
(51,478,0)
(1,571,0)
(636,239,0)
(245,248,0)
(609,752,0)
(402,151,0)
(595,571,0)
(317,436,0)
(324,195,0)
(936,172,0)
(3,708,0)
(772,708,0)
(395,708,0)
(160,690,0)
(965,849,0)
(78,613,0)
(766,37,0)
(628,181,0)
(552,849,0)
(600,355,0)
(431,932,0)
(842,607,0)
(710,745,0)
(143,895,0)
(536,980,0)
(583,282,0)
(632,123,0)
(783,832,0)
(741,206,0)
(691,450,0)
(934,659,0)
(890,885,0)
(825,708,0)
(980,784,0)
(609,571,0)
(528,571,0)
(808,484,0)
(298,309,0)
(754,71,0)
(984,173,0)
(311,456,0)
(206,741,0)
(517,761,0)
(37,571,0)
(994,647,0)
(464,708,0)
(194,941,0)
(311,333,0)
(301,177,0)
(542,708,0)
(463,737,0)
(361,692,0)
(736,56,0)
(791,775,0)
(273,129,0)
(428,92,0)
(757,299,0)
(947,133,0)
(839,421,0)
(398,154,0)
(295,146,0)
(494,437,0)
(688,223,0)
(759,571,0)
(784,965,0)
(734,510,0)
(182,733,0)
(215,109,0)
(26,542,0)
(168,655,0)
(683,569,0)
(919,931,0)
(715,499,0)
(177,562,0)
(305,421,0)
(261,649,0)
(768,388,0)
(585,571,0)
(686,313,0)
(734,429,0)
(269,224,0)
(898,402,0)
(272,708,0)
(427,953,0)
(542,26,0)
(0,849,0)
(628,432,0)
(960,147,0)
(65,936,0)
(891,355,0)
(804,622,0)
(493,195,0)
(755,932,0)
(653,804,0)
(892,924,0)
(557,763,0)
(94,413,0)
(455,775,0)
(828,34,0)
(951,292,0)
(172,708,0)
(524,495,0)
(425,571,0)
(207,496,0)
(817,682,0)
(441,57,0)
(16,85,0)
(157,708,0)
(228,571,0)
(599,244,0)
(795,172,0)
(616,708,0)
(893,912,0)
(260,509,0)
(312,916,0)
(598,616,0)
(90,390,0)
(92,144,0)
(475,708,0)
(107,451,0)
(771,63,0)
(307,567,0)
(147,421,0)
(967,391,0)
(885,849,0)
(891,649,0)
(553,381,0)
(114,836,0)
(333,311,0)
(261,104,0)
(785,630,0)
(380,361,0)
(869,355,0)
(541,282,0)
(52,871,0)
(75,887,0)
(328,676,0)
(689,464,0)
(259,993,0)
(457,59,0)
(434,826,0)
(14,708,0)
(236,355,0)
(309,607,0)
(627,362,0)
(22,37,0)
(98,623,0)
(535,385,0)
(15,486,0)
(357,772,0)
(863,571,0)
(374,497,0)
(63,771,0)
(635,453,0)
(60,263,0)
(12,965,0)
(276,859,0)
(334,92,0)
(526,100,0)
(136,115,0)
(937,849,0)
(826,989,0)
(513,868,0)
(472,492,0)
(756,614,0)
(242,879,0)
(602,478,0)
(678,270,0)
(939,220,0)
(621,476,0)
(763,557,0)
(237,326,0)
(363,774,0)
(468,571,0)
(77,503,0)
(104,261,0)
(143,708,0)
(193,548,0)
(551,849,0)
(84,929,0)
(46,292,0)
(653,691,0)
(633,38,0)
(466,524,0)
(683,27,0)
(511,600,0)
(265,728,0)
(347,761,0)
(39,550,0)
(187,276,0)
(198,682,0)
(770,830,0)
(761,207,0)
(86,34,0)
(5,242,0)
(770,962,0)
(704,157,0)
(719,993,0)
(993,636,0)
(776,356,0)
(730,968,0)
(938,792,0)
(699,268,0)
(117,586,0)
(453,708,0)
(740,55,0)
(646,342,0)
(915,559,0)
(62,891,0)
(614,756,0)
(995,867,0)
(198,830,0)
(70,691,0)
(836,114,0)
(625,569,0)
(775,571,0)
(489,879,0)
(385,531,0)
(934,595,0)
(749,585,0)
(499,715,0)
(74,622,0)
(889,460,0)
(343,752,0)
(849,973,0)
(716,143,0)
(222,287,0)
(299,757,0)
(116,708,0)
(236,520,0)
(662,499,0)
(971,825,0)
(58,709,0)
(935,912,0)
(668,114,0)
(940,882,0)
(520,613,0)
(924,42,0)
(672,202,0)
(427,378,0)
(579,794,0)
(411,104,0)
(659,421,0)
(314,285,0)
(322,290,0)
(676,511,0)
(235,688,0)
(482,708,0)
(167,421,0)
(812,247,0)
(220,939,0)
(617,571,0)
(141,420,0)
(23,759,0)
(218,708,0)
(953,571,0)
(38,708,0)
(444,373,0)
(531,708,0)
(286,898,0)
(315,891,0)
(662,551,0)
(161,286,0)
(806,267,0)
(486,15,0)
(640,257,0)
(406,390,0)
(181,863,0)
(849,937,0)
(691,214,0)
(746,627,0)
(767,649,0)
(849,378,0)
(574,421,0)
(988,834,0)
(638,187,0)
(128,609,0)
(291,271,0)
(493,956,0)
(658,151,0)
(740,601,0)
(717,849,0)
(228,355,0)
(903,916,0)
(103,708,0)
(423,56,0)
(553,708,0)
(771,571,0)
(438,530,0)
(849,623,0)
(647,876,0)
(534,879,0)
(71,571,0)
(393,51,0)
(714,607,0)
(535,208,0)
(408,830,0)
(145,149,0)
(155,483,0)
(43,390,0)
(721,733,0)
(178,338,0)
(561,342,0)
(680,272,0)
(624,436,0)
(554,174,0)
(478,51,0)
(435,548,0)
(859,147,0)
(283,355,0)
(239,741,0)
(319,571,0)
(241,571,0)
(103,226,0)
(431,849,0)
(538,898,0)
(399,824,0)
(45,315,0)
(314,198,0)
(212,571,0)
(244,599,0)
(219,500,0)
(197,181,0)
(118,935,0)
(373,346,0)
(655,660,0)
(518,703,0)
(114,65,0)
(0,491,0)
(277,950,0)
(917,380,0)
(313,393,0)
(283,817,0)
(566,692,0)
(404,727,0)
(116,777,0)
(937,225,0)
(738,63,0)
(846,708,0)
(631,210,0)
(861,986,0)
(626,851,0)
(835,763,0)
(777,116,0)
(642,218,0)
(56,954,0)
(353,743,0)
(784,218,0)
(468,833,0)
(965,784,0)
(4,152,0)
(325,781,0)
(690,373,0)
(469,176,0)
(777,515,0)
(676,708,0)
(699,334,0)
(715,462,0)
(914,825,0)
(148,816,0)
(132,47,0)
(656,495,0)
(330,71,0)
(653,149,0)
(423,649,0)
(176,708,0)
(334,830,0)
(670,257,0)
(617,741,0)
(53,369,0)
(736,319,0)
(908,421,0)
(271,571,0)
(212,54,0)
(516,388,0)
(973,548,0)
(946,629,0)
(443,771,0)
(581,948,0)
(464,285,0)
(412,429,0)
(400,246,0)
(853,27,0)
(975,530,0)
(437,708,0)
(752,598,0)
(955,57,0)
(144,681,0)
(130,425,0)
(841,599,0)
(530,484,0)
(622,571,0)
(216,255,0)
(417,760,0)
(702,549,0)
(181,628,0)
(723,845,0)
(514,851,0)
(595,355,0)
(588,591,0)
(426,294,0)
(888,528,0)
(727,404,0)
(35,742,0)
(513,759,0)
(797,397,0)
(837,223,0)
(499,662,0)
(40,450,0)
(530,570,0)
(695,631,0)
(113,780,0)
(124,442,0)
(618,421,0)
(488,926,0)
(297,814,0)
(487,372,0)
(590,421,0)
(681,355,0)
(44,607,0)
(292,46,0)
(950,708,0)
(329,831,0)
(27,683,0)
(477,887,0)
(885,71,0)
(294,333,0)
(112,282,0)
(210,174,0)
(653,968,0)
(390,355,0)
(267,515,0)
(272,213,0)
(909,293,0)
(50,979,0)
(551,941,0)
(557,115,0)
(648,611,0)
(597,177,0)
(991,602,0)
(331,952,0)
(962,770,0)
(968,761,0)
(393,313,0)
(543,38,0)
(209,14,0)
(380,381,0)
(440,929,0)
(200,622,0)
(416,551,0)
(287,708,0)
(4,742,0)
(69,53,0)
(300,838,0)
(880,468,0)
(359,708,0)
(854,571,0)
(520,236,0)
(891,315,0)
(479,602,0)
(876,245,0)
(475,131,0)
(849,431,0)
(105,542,0)
(280,868,0)
(688,235,0)
(239,636,0)
(575,319,0)
(629,946,0)
(780,372,0)
(944,715,0)
(27,421,0)
(79,830,0)
(509,133,0)
(602,355,0)
(796,772,0)
(942,610,0)
(91,792,0)
(474,727,0)
(332,566,0)
(608,592,0)
(511,421,0)
(115,136,0)
(587,294,0)
(875,188,0)
(956,708,0)
(275,231,0)
(905,355,0)
(92,334,0)
(869,571,0)
(211,772,0)
(471,952,0)
(929,571,0)
(415,287,0)
(316,283,0)
(321,302,0)
(9,692,0)
(682,198,0)
(360,589,0)
(57,571,0)
(57,355,0)
(727,355,0)
(924,892,0)
(744,263,0)
(523,794,0)
(72,37,0)
(214,618,0)
(341,1,0)
(846,456,0)
(831,208,0)
(601,740,0)
(324,100,0)
(59,398,0)
(901,950,0)
(761,571,0)
(781,811,0)
(898,286,0)
(829,986,0)
(843,188,0)
(31,449,0)
(276,187,0)
(814,378,0)
(765,522,0)
(591,571,0)
(149,585,0)
(115,152,0)
(916,708,0)
(931,919,0)
(22,912,0)
(831,708,0)
(429,734,0)
(792,938,0)
(943,421,0)
(918,932,0)
(65,114,0)
(820,638,0)
(504,976,0)
(645,413,0)
(792,495,0)
(153,34,0)
(311,373,0)
(85,611,0)
(968,496,0)
(485,756,0)
(847,784,0)
(611,708,0)
(800,826,0)
(525,571,0)
(170,585,0)
(104,355,0)
(703,522,0)
(180,933,0)
(784,980,0)
(449,714,0)
(736,450,0)
(895,143,0)
(865,726,0)
(970,804,0)
(348,512,0)
(926,571,0)
(805,769,0)
(420,492,0)
(509,340,0)
(462,157,0)
(736,622,0)
(726,865,0)
(32,629,0)
(868,513,0)
(794,579,0)
(935,854,0)
(8,816,0)
(986,571,0)
(373,311,0)
(665,664,0)
(644,454,0)
(881,571,0)
(417,161,0)
(81,774,0)
(743,843,0)
(209,55,0)
(167,241,0)
(867,649,0)
(356,610,0)
(953,427,0)
(620,104,0)
(684,421,0)
(981,268,0)
(817,283,0)
(244,905,0)
(599,421,0)
(318,432,0)
(745,213,0)
(752,935,0)
(251,297,0)
(106,421,0)
(832,131,0)
(191,841,0)
(735,881,0)
(263,60,0)
(700,705,0)
(962,226,0)
(760,708,0)
(294,708,0)
(270,708,0)
(136,348,0)
(83,951,0)
(753,214,0)
(836,337,0)
(945,28,0)
(249,500,0)
(927,103,0)
(825,971,0)
(862,613,0)
(250,530,0)
(543,442,0)
(142,396,0)
(54,438,0)
(33,420,0)
(608,940,0)
(270,573,0)
(613,520,0)
(691,871,0)
(146,183,0)
(512,571,0)
(525,705,0)
(449,355,0)
(794,571,0)
(992,579,0)
(705,700,0)
(213,745,0)
(491,708,0)
(298,708,0)
(302,154,0)
(7,414,0)
(690,355,0)
(849,529,0)
(110,950,0)
(461,421,0)
(564,427,0)
(826,355,0)
(53,708,0)
(729,896,0)
(165,745,0)
(613,708,0)
(219,460,0)
(876,830,0)
(718,298,0)
(315,708,0)
(396,142,0)
(871,165,0)
(650,223,0)
(258,849,0)
(99,76,0)
(344,388,0)
(259,571,0)
(9,331,0)
(801,527,0)
(659,934,0)
(913,241,0)
(724,617,0)
(745,165,0)
(959,896,0)
(859,276,0)
(589,855,0)
(515,777,0)
(541,421,0)
(355,421,0)
(578,567,0)
(131,475,0)
(976,708,0)
(833,468,0)
(49,676,0)
(348,636,0)
(297,708,0)
(951,708,0)
(158,742,0)
(849,865,0)
(381,380,0)
(630,696,0)
(55,740,0)
(610,356,0)
(780,610,0)
(482,933,0)
(696,916,0)
(466,496,0)
(629,708,0)
(878,869,0)
(579,985,0)
(372,487,0)
(946,849,0)
(782,421,0)
(184,825,0)
(963,541,0)
(432,28,0)
(268,699,0)
(659,26,0)
(15,99,0)
(410,359,0)
(395,299,0)
(865,849,0)
(54,212,0)
(452,207,0)
(368,514,0)
(214,418,0)
(264,14,0)
(101,147,0)
(96,391,0)
(891,796,0)
(522,703,0)
(186,518,0)
(80,53,0)
(691,56,0)
(709,355,0)
(520,421,0)
(389,637,0)
(671,571,0)
(711,824,0)
(987,38,0)
(1,355,0)
(61,57,0)
(599,841,0)
(185,153,0)
(36,736,0)
(802,962,0)
(151,402,0)
(342,646,0)
(376,487,0)
(87,905,0)
(519,542,0)
(246,412,0)
(541,963,0)
(510,827,0)
(25,498,0)
(566,202,0)
(465,849,0)
(593,492,0)
(429,412,0)
(351,153,0)
(690,571,0)
(636,993,0)
(819,419,0)
(375,497,0)
(410,943,0)
(436,708,0)
(750,491,0)
(905,571,0)
(669,395,0)
(899,638,0)
(550,9,0)
(431,356,0)
(248,869,0)
(458,421,0)
(152,4,0)
(131,832,0)
(973,849,0)
(95,591,0)
(813,616,0)
(41,886,0)
(367,236,0)
(121,98,0)
(527,571,0)
(516,421,0)
(654,340,0)
(756,770,0)
(582,225,0)
(227,760,0)
(239,63,0)
(42,924,0)
(720,453,0)
(446,389,0)
(290,851,0)
(348,136,0)
(266,611,0)
(598,752,0)
(521,193,0)
(226,103,0)
(592,989,0)
(356,431,0)
(235,618,0)
(972,549,0)
(543,737,0)
(218,784,0)
(952,331,0)
(63,239,0)
(736,214,0)
(507,454,0)
(811,973,0)
(422,320,0)
(632,580,0)
(397,891,0)
(470,421,0)
(122,755,0)
(55,209,0)
(774,708,0)
(47,418,0)
(842,757,0)
(894,395,0)
(173,708,0)
(559,737,0)
(469,195,0)
(778,863,0)
(334,699,0)
(790,429,0)
(349,327,0)
(369,53,0)
(512,348,0)
(570,432,0)
(923,729,0)
(679,953,0)
(814,297,0)
(891,177,0)
(248,245,0)
(618,235,0)
(343,986,0)
(283,571,0)
(752,609,0)
(459,176,0)
(41,432,0)
(849,838,0)
(989,592,0)
(442,571,0)
(866,94,0)
(928,554,0)
(527,529,0)
(559,915,0)
(491,0,0)
(976,705,0)
(604,340,0)
(255,513,0)
(832,355,0)
(765,664,0)
(567,571,0)
(530,438,0)
(422,708,0)
(240,600,0)
(964,59,0)
(369,325,0)
(558,891,0)
(713,153,0)
(671,355,0)
(79,498,0)
(540,846,0)
(605,629,0)
(979,46,0)
(125,193,0)
(108,948,0)
(623,98,0)
(933,180,0)
(299,395,0)
(261,476,0)
(127,589,0)
(304,528,0)
(401,482,0)
(759,513,0)
(340,571,0)
(841,191,0)
(79,320,0)
(979,941,0)
(941,551,0)
(816,486,0)
(303,510,0)
(961,3,0)
(906,963,0)
(798,195,0)
(786,497,0)
(370,726,0)
(743,571,0)
(757,421,0)
(815,228,0)
(478,602,0)
(438,54,0)
(199,41,0)
(741,617,0)
(439,236,0)
(634,27,0)
(799,4,0)
(310,116,0)
(840,775,0)
(171,734,0)
(77,355,0)
(473,683,0)
(891,397,0)
(245,876,0)
(345,855,0)
(933,482,0)
(115,557,0)
(656,489,0)
(81,195,0)
(487,708,0)
(500,219,0)
(268,708,0)
(350,872,0)
(643,315,0)
(230,257,0)
(100,324,0)
(238,631,0)
(607,757,0)
(90,728,0)
(545,359,0)
(935,752,0)
(863,181,0)
(327,584,0)
(279,270,0)
(579,302,0)
(804,195,0)
(948,581,0)
(490,609,0)
(714,449,0)
(187,638,0)
(99,15,0)
(425,700,0)
(51,393,0)
(234,46,0)
(869,248,0)
(556,853,0)
(164,268,0)
(653,736,0)
(38,543,0)
(524,466,0)
(292,951,0)
(129,273,0)
(228,943,0)
(909,670,0)
(390,571,0)
(666,872,0)
(725,695,0)
(323,103,0)
(849,258,0)
(664,571,0)
(966,666,0)
(824,708,0)
(691,632,0)
(408,500,0)
(974,327,0)
(667,41,0)
(131,378,0)
(14,209,0)
(242,929,0)
(288,225,0)
(681,144,0)
(484,530,0)
(950,901,0)
(939,586,0)
(674,591,0)
(456,846,0)
(920,228,0)
(233,769,0)
(853,556,0)
(306,726,0)
(697,246,0)
(497,374,0)
(682,817,0)
(333,294,0)
(392,832,0)
(3,627,0)
(821,421,0)
(66,259,0)
(289,191,0)
(709,58,0)
(838,571,0)
(282,541,0)
(149,879,0)
(284,195,0)
(126,662,0)
(727,571,0)
(921,525,0)
(157,462,0)
(486,816,0)
(285,314,0)
(41,581,0)
(24,491,0)
(101,231,0)
(349,355,0)
(596,512,0)
(174,554,0)
(696,630,0)
(594,425,0)
(603,869,0)
(419,220,0)
(320,422,0)
(21,319,0)
(140,475,0)
(503,533,0)
(30,65,0)
(681,571,0)
(910,359,0)
(900,879,0)
(274,22,0)
(9,550,0)
(271,355,0)
(142,535,0)
(146,374,0)
(236,571,0)
(762,99,0)
(123,1,0)
(67,781,0)
(826,571,0)
(930,98,0)
(941,979,0)
(379,512,0)
(586,139,0)
(611,85,0)
(887,708,0)
(733,571,0)
(82,1,0)
(476,261,0)
(366,896,0)
(948,571,0)
(714,421,0)
(308,157,0)
(664,765,0)
(243,541,0)
(883,674,0)
(173,185,0)
(213,272,0)
(133,509,0)
(591,290,0)
(154,302,0)
(854,935,0)
(616,598,0)
(258,695,0)
(377,231,0)
(231,355,0)
(123,632,0)
(993,259,0)
(849,946,0)
(736,632,0)
(675,595,0)
(492,420,0)
(342,708,0)
(433,210,0)
(887,477,0)
(418,214,0)
(391,967,0)
(231,571,0)
(241,167,0)
(600,511,0)
(100,495,0)
(73,338,0)
(804,56,0)
(451,571,0)
(657,143,0)
(447,570,0)
(450,361,0)
(610,780,0)
(703,518,0)
(911,272,0)
(952,571,0)
(365,247,0)
(607,842,0)
(860,259,0)
(660,655,0)
(189,743,0)
(849,965,0)
(630,580,0)
(938,851,0)
(153,185,0)
(2,956,0)
(11,527,0)
(257,670,0)
(135,656,0)
(172,936,0)
(796,891,0)
(46,979,0)
(34,571,0)
(47,355,0)
(986,343,0)
(752,343,0)
(58,498,0)
(37,414,0)
(779,939,0)
(500,408,0)
(551,662,0)
(872,666,0)
(527,355,0)
(614,671,0)
(660,543,0)
(832,571,0)
(165,692,0)
(119,212,0)
(391,708,0)
(120,601,0)
(615,139,0)
(608,830,0)
(337,836,0)
(691,319,0)
(489,656,0)
(34,153,0)
(833,421,0)
(398,59,0)
(436,446,0)
(374,146,0)
(548,193,0)
(372,780,0)
(409,206,0)
(385,535,0)
(760,417,0)
(153,496,0)
(133,432,0)
(151,571,0)
(652,953,0)
(967,125,0)
(327,27,0)
(262,3,0)
(388,516,0)
(384,258,0)
(454,495,0)
(518,729,0)
(775,791,0)
(68,617,0)
(102,297,0)
(954,547,0)
(13,343,0)
(253,935,0)
(481,176,0)
(383,212,0)
(76,258,0)
(358,287,0)
(693,872,0)
(607,714,0)
(147,101,0)
(698,313,0)
(56,423,0)
(134,460,0)
(252,172,0)
(513,255,0)
(287,358,0)
(125,967,0)
(977,976,0)
(644,912,0)
(529,527,0)
(916,696,0)
(331,9,0)
(855,589,0)
(338,155,0)
(198,314,0)
(804,926,0)
(736,421,0)
(257,708,0)
(225,937,0)
(856,449,0)
(271,566,0)
(407,709,0)
(258,76,0)
(849,901,0)
(915,495,0)
(231,101,0)
(602,571,0)
(748,185,0)
(585,900,0)
(631,695,0)
(166,283,0)
(359,410,0)
(881,355,0)
(855,421,0)
(702,421,0)
(402,898,0)
(728,90,0)
(539,154,0)
(152,115,0)
(446,436,0)
(510,734,0)
(787,325,0)
(809,284,0)
(185,173,0)
(210,631,0)
(424,314,0)
(456,311,0)
(751,553,0)
(418,47,0)
(882,940,0)
(548,973,0)
(196,437,0)
(247,571,0)
(791,469,0)
(858,463,0)
(647,895,0)
(901,849,0)
(463,571,0)
(163,261,0)
(566,271,0)
(430,422,0)
(810,42,0)
(586,939,0)
(150,948,0)
(763,571,0)
(349,571,0)
(693,571,0)
(191,708,0)
(152,55,0)
(636,348,0)
(267,355,0)
(420,737,0)
(651,709,0)
(176,469,0)
(649,867,0)
(202,566,0)
(498,79,0)
(811,781,0)
(281,421,0)
(506,600,0)
(326,708,0)
(641,553,0)
(936,65,0)
(147,859,0)
(161,417,0)
(387,349,0)
(205,854,0)
(849,885,0)
(729,518,0)
(695,258,0)
(700,425,0)
(595,934,0)
(286,161,0)
(712,693,0)
(246,571,0)
(568,503,0)
(773,846,0)
(949,881,0)
(619,421,0)
(870,525,0)
(483,546,0)
(884,421,0)
(247,109,0)
(607,309,0)
(674,851,0)
(770,756,0)
(904,671,0)
(129,453,0)
(709,571,0)
(848,757,0)
(965,362,0)
(905,244,0)
(677,887,0)
(874,871,0)
(741,239,0)
(653,674,0)
(563,919,0)
(412,246,0)
(502,209,0)
(71,885,0)
(589,355,0)
(419,708,0)
(576,42,0)
(336,690,0)
(151,355,0)
(480,554,0)
(483,155,0)
(705,421,0)
(394,419,0)
(818,771,0)
(6,671,0)
(263,755,0)
(468,355,0)
(850,842,0)
(952,355,0)
(335,954,0)
(220,419,0)
(522,765,0)
(554,708,0)
(1,123,0)
(338,708,0)
(501,47,0)
(432,628,0)
(739,655,0)
(732,632,0)
(469,733,0)
(565,845,0)
(844,475,0)
(203,973,0)
(701,727,0)
(224,571,0)
(580,630,0)
(467,349,0)
(823,867,0)
(386,218,0)
(405,362,0)
(76,99,0)
(969,759,0)
(722,271,0)
(705,976,0)
(535,142,0)
(971,195,0)
(543,660,0)
(515,267,0)
(896,729,0)
(223,708,0)
(77,571,0)
(958,522,0)
(907,951,0)
(691,622,0)
(743,355,0)
(881,702,0)
(97,692,0)
(104,571,0)
(882,437,0)
(313,355,0)
(764,245,0)
(705,525,0)
(822,422,0)
(254,235,0)
(982,125,0)
(555,595,0)
(592,608,0)
(19,811,0)
(742,708,0)
(742,4,0)
(877,427,0)
(653,22,0)
(872,693,0)
(454,644,0)
(627,3,0)
(673,129,0)
(364,760,0)
(246,355,0)
(381,553,0)
(229,54,0)
(267,571,0)
(313,571,0)
(623,849,0)
(824,60,0)
(484,567,0)
(42,708,0)
(505,421,0)
(569,708,0)
(60,824,0)
(600,571,0)
(139,586,0)
(990,391,0)
(462,715,0)
(414,912,0)
(733,469,0)
(515,175,0)
(834,666,0)
(581,41,0)
(655,571,0)
(286,830,0)
(612,482,0)
(569,683,0)
(26,659,0)
(180,371,0)
(445,514,0)
(929,242,0)
(639,693,0)
(192,421,0)
(232,342,0)
(793,579,0)
(957,854,0)
(55,152,0)
(827,510,0)
(498,58,0)
(925,956,0)
(408,188,0)
(193,125,0)
(570,530,0)
(691,737,0)
(511,676,0)
(758,77,0)
(978,853,0)
(223,688,0)
(663,242,0)
(707,499,0)
(736,871,0)
(843,743,0)
(973,811,0)
(225,708,0)
(144,92,0)
(772,796,0)
(162,464,0)
(217,765,0)
(138,549,0)
(190,863,0)
(93,161,0)
(726,708,0)
(789,569,0)
(989,826,0)
(339,0,0)
(755,263,0)
(390,90,0)
(529,849,0)
(671,614,0)
(508,838,0)
(159,15,0)
(864,900,0)
(204,378,0)
(731,868,0)
(794,355,0)
(544,682,0)
(706,76,0)
(47,571,0)
(179,831,0)
(10,267,0)
(803,940,0)
(362,627,0)
(61,378,0)
(451,919,0)
(497,708,0)
(88,224,0)
(20,191,0)
(460,219,0)
(208,831,0)
(580,830,0)
(302,579,0)
(437,882,0)
(57,61,0)
(29,116,0)
(354,905,0)
(943,410,0)
(154,398,0)
(567,484,0)
(769,708,0)
(241,355,0)
(442,543,0)
(532,664,0)
(788,241,0)
(897,451,0)
(460,708,0)
(362,965,0)
(319,94,0)
(531,385,0)
(156,496,0)
(449,571,0)
(577,298,0)
(325,369,0)
(18,173,0)
(389,446,0)
(352,833,0)
(589,571,0)
(492,571,0)
(857,598,0)
(64,926,0)
(694,77,0)
(326,237,0)
(740,528,0)
(781,325,0)
(922,261,0)
(573,270,0)
(256,774,0)
(876,647,0)
(996,952,0)
(816,708,0)
(728,183,0)
(549,708,0)
(943,228,0)
(98,708,0)
(221,299,0)
(278,423,0)
(896,571,0)
(137,431,0)
(48,450,0)
(892,852,0)
(666,834,0)
(983,373,0)
(201,592,0)
(774,81,0)
(514,224,0)
(503,77,0)
(702,881,0)
(868,708,0)
(188,408,0)
(188,843,0)
(807,581,0)
(208,535,0)
(296,681,0)
(183,146,0)
(448,468,0)
(873,151,0)
(320,79,0)
(849,551,0)
(638,355,0)
(282,571,0)
(373,690,0)
(183,728,0)
(89,442,0)
(747,326,0)
(687,14,0)
(661,616,0)
(838,849,0)
(932,431,0)
(224,514,0)
(572,531,0)
(51,830,0)
(638,571,0)
(226,962,0)
(606,421,0)
(109,247,0)
(59,708,0)
(327,349,0)
(29,267,1)
(849,865,1)
(944,462,1)
(664,665,1)
(761,517,1)
(559,915,1)
(872,693,1)
(674,883,1)
(280,731,1)
(735,949,1)
(530,570,1)
(77,571,1)
(95,909,1)
(182,176,1)
(76,99,1)
(34,571,1)
(197,863,1)
(183,728,1)
(810,576,1)
(81,774,1)
(283,355,1)
(880,503,1)
(191,289,1)
(991,393,1)
(362,405,1)
(824,708,1)
(513,868,1)
(206,409,1)
(42,810,1)
(882,437,1)
(93,417,1)
(65,30,1)
(794,355,1)
(715,944,1)
(849,965,1)
(518,186,1)
(187,638,1)
(736,36,1)
(214,418,1)
(269,445,1)
(355,891,1)
(905,571,1)
(494,592,1)
(231,355,1)
(583,112,1)
(96,990,1)
(572,208,1)
(389,446,1)
(691,214,1)
(509,260,1)
(973,548,1)
(417,760,1)
(47,132,1)
(605,32,1)
(453,720,1)
(960,101,1)
(780,113,1)
(476,261,1)
(923,896,1)
(188,875,1)
(400,147,1)
(635,469,1)
(922,163,1)
(451,571,1)
(917,381,1)
(517,347,1)
(193,125,1)
(599,841,1)
(354,827,1)
(309,298,1)
(824,399,1)
(312,903,1)
(33,141,1)
(241,571,1)
(278,649,1)
(833,468,1)
(51,393,1)
(341,82,1)
(715,462,1)
(145,489,1)
(209,14,1)
(695,725,1)
(396,142,1)
(710,213,1)
(13,986,1)
(943,410,1)
(973,811,1)
(21,575,1)
(69,80,1)
(931,919,1)
(118,253,1)
(497,708,1)
(887,708,1)
(675,618,1)
(758,694,1)
(157,308,1)
(511,676,1)
(184,273,1)
(501,599,1)
(35,557,1)
(241,355,1)
(738,771,1)
(474,701,1)
(338,708,1)
(46,292,1)
(672,271,1)
(524,495,1)
(558,315,1)
(158,35,1)
(257,708,1)
(975,250,1)
(178,646,1)
(662,499,1)
(977,85,1)
(510,303,1)
(656,135,1)
(353,189,1)
(63,738,1)
(64,358,1)
(249,219,1)
(695,631,1)
(408,500,1)
(503,77,1)
(236,439,1)
(78,236,1)
(177,597,1)
(816,8,1)
(811,781,1)
(510,734,1)
(297,102,1)
(994,895,1)
(959,133,1)
(335,56,1)
(442,571,1)
(763,571,1)
(956,925,1)
(146,295,1)
(63,771,1)
(370,901,1)
(151,571,1)
(551,941,1)
(828,86,1)
(937,225,1)
(143,657,1)
(556,853,1)
(657,716,1)
(57,441,1)
(794,571,1)
(756,485,1)
(356,610,1)
(75,677,1)
(14,708,1)
(71,571,1)
(214,753,1)
(406,43,1)
(812,365,1)
(174,554,1)
(67,325,1)
(950,708,1)
(729,896,1)
(37,571,1)
(550,39,1)
(661,609,1)
(264,740,1)
(860,66,1)
(631,238,1)
(673,453,1)
(729,923,1)
(915,495,1)
(905,355,1)
(201,989,1)
(718,577,1)
(773,690,1)
(818,443,1)
(285,464,1)
(377,275,1)
(792,495,1)
(66,512,1)
(601,120,1)
(826,571,1)
(104,355,1)
(482,708,1)
(343,986,1)
(681,355,1)
(573,270,1)
(965,12,1)
(688,223,1)
(832,355,1)
(670,257,1)
(749,170,1)
(205,752,1)
(939,220,1)
(179,329,1)
(363,256,1)
(286,161,1)
(622,571,1)
(896,571,1)
(977,427,1)
(543,442,1)
(512,571,1)
(696,916,1)
(566,271,1)
(515,777,1)
(791,775,1)
(795,139,1)
(863,190,1)
(864,585,1)
(624,317,1)
(804,970,1)
(133,509,1)
(369,53,1)
(514,224,1)
(62,622,1)
(319,571,1)
(916,708,1)
(334,92,1)
(592,989,1)
(287,222,1)
(82,608,1)
(222,415,1)
(506,676,1)
(500,249,1)
(443,741,1)
(844,832,1)
(690,160,1)
(297,708,1)
(984,713,1)
(665,532,1)
(344,167,1)
(964,457,1)
(198,314,1)
(560,337,1)
(266,476,1)
(462,157,1)
(881,735,1)
(872,350,1)
(255,216,1)
(166,316,1)
(274,644,1)
(449,355,1)
(903,632,1)
(771,571,1)
(99,762,1)
(642,362,1)
(412,246,1)
(170,180,1)
(542,708,1)
(380,381,1)
(842,850,1)
(871,874,1)
(100,526,1)
(176,708,1)
(508,0,1)
(54,229,1)
(849,0,1)
(89,124,1)
(553,708,1)
(905,87,1)
(258,384,1)
(268,981,1)
(303,734,1)
(169,835,1)
(338,73,1)
(431,137,1)
(511,600,1)
(589,127,1)
(757,299,1)
(699,268,1)
(295,374,1)
(804,56,1)
(628,181,1)
(736,622,1)
(576,573,1)
(258,76,1)
(422,708,1)
(149,145,1)
(397,797,1)
(740,528,1)
(957,205,1)
(418,47,1)
(298,718,1)
(974,349,1)
(904,6,1)
(528,888,1)
(237,326,1)
(261,922,1)
(607,309,1)
(55,740,1)
(752,343,1)
(566,332,1)
(772,708,1)
(979,50,1)
(986,571,1)
(825,708,1)
(221,395,1)
(946,629,1)
(83,662,1)
(323,756,1)
(731,216,1)
(469,176,1)
(869,355,1)
(581,948,1)
(948,108,1)
(441,955,1)
(831,179,1)
(592,201,1)
(854,957,1)
(55,209,1)
(887,75,1)
(114,65,1)
(306,370,1)
(60,824,1)
(383,484,1)
(564,877,1)
(963,906,1)
(113,372,1)
(755,263,1)
(575,579,1)
(527,801,1)
(907,83,1)
(261,177,1)
(689,682,1)
(958,765,1)
(800,434,1)
(750,24,1)
(153,34,1)
(257,640,1)
(697,400,1)
(142,535,1)
(653,149,1)
(435,193,1)
(292,951,1)
(853,27,1)
(170,237,1)
(442,89,1)
(568,77,1)
(167,241,1)
(104,620,1)
(497,375,1)
(566,202,1)
(832,571,1)
(838,300,1)
(61,57,1)
(966,872,1)
(485,614,1)
(532,518,1)
(705,976,1)
(86,185,1)
(537,327,1)
(866,319,1)
(351,255,1)
(492,472,1)
(989,826,1)
(766,573,1)
(910,545,1)
(850,449,1)
(817,283,1)
(786,728,1)
(837,650,1)
(164,92,1)
(778,318,1)
(173,708,1)
(146,374,1)
(84,440,1)
(742,708,1)
(431,356,1)
(313,571,1)
(481,459,1)
(976,708,1)
(95,477,1)
(724,206,1)
(714,449,1)
(765,217,1)
(325,369,1)
(959,834,1)
(247,571,1)
(743,571,1)
(423,278,1)
(258,695,1)
(348,512,1)
(27,683,1)
(638,571,1)
(630,785,1)
(313,355,1)
(314,285,1)
(951,708,1)
(294,426,1)
(163,104,1)
(155,338,1)
(586,117,1)
(387,467,1)
(659,934,1)
(597,301,1)
(591,571,1)
(849,973,1)
(423,649,1)
(399,711,1)
(98,930,1)
(630,696,1)
(349,387,1)
(39,139,1)
(516,388,1)
(211,357,1)
(753,418,1)
(103,708,1)
(52,9,1)
(792,91,1)
(1,571,1)
(557,763,1)
(26,542,1)
(464,708,1)
(352,468,1)
(627,3,1)
(835,348,1)
(319,21,1)
(368,109,1)
(98,708,1)
(793,302,1)
(959,41,1)
(995,767,1)
(54,212,1)
(185,173,1)
(104,571,1)
(768,344,1)
(326,708,1)
(267,355,1)
(819,394,1)
(183,146,1)
(208,831,1)
(116,310,1)
(608,940,1)
(16,611,1)
(219,460,1)
(490,128,1)
(308,704,1)
(436,624,1)
(640,230,1)
(253,136,1)
(388,708,1)
(395,894,1)
(728,265,1)
(736,319,1)
(539,398,1)
(150,199,1)
(603,408,1)
(330,838,1)
(333,294,1)
(300,508,1)
(125,967,1)
(878,603,1)
(247,812,1)
(538,402,1)
(136,115,1)
(189,51,1)
(781,325,1)
(263,744,1)
(901,950,1)
(390,406,1)
(129,453,1)
(173,18,1)
(135,900,1)
(881,571,1)
(122,263,1)
(74,954,1)
(403,296,1)
(712,988,1)
(415,404,1)
(149,585,1)
(915,17,1)
(141,476,1)
(107,136,1)
(4,799,1)
(690,355,1)
(128,118,1)
(390,571,1)
(521,125,1)
(849,431,1)
(775,840,1)
(227,898,1)
(50,46,1)
(947,432,1)
(454,495,1)
(868,708,1)
(551,416,1)
(332,202,1)
(270,279,1)
(139,586,1)
(117,939,1)
(747,382,1)
(691,70,1)
(290,322,1)
(611,708,1)
(147,101,1)
(390,355,1)
(891,315,1)
(588,95,1)
(115,152,1)
(600,240,1)
(853,978,1)
(543,38,1)
(769,708,1)
(359,910,1)
(526,493,1)
(507,414,1)
(549,708,1)
(76,706,1)
(416,941,1)
(188,843,1)
(889,134,1)
(311,456,1)
(99,15,1)
(961,262,1)
(151,658,1)
(553,751,1)
(594,525,1)
(691,56,1)
(595,571,1)
(691,622,1)
(379,109,1)
(849,529,1)
(980,536,1)
(234,292,1)
(131,475,1)
(238,210,1)
(636,993,1)
(677,514,1)
(393,313,1)
(875,843,1)
(452,761,1)
(531,708,1)
(540,773,1)
(38,708,1)
(741,206,1)
(772,211,1)
(231,571,1)
(898,402,1)
(304,601,1)
(327,349,1)
(728,90,1)
(890,71,1)
(203,548,1)
(746,3,1)
(913,788,1)
(629,708,1)
(47,571,1)
(804,926,1)
(468,448,1)
(428,144,1)
(632,123,1)
(736,56,1)
(891,796,1)
(638,820,1)
(785,696,1)
(865,726,1)
(53,69,1)
(432,628,1)
(925,2,1)
(593,33,1)
(649,867,1)
(769,233,1)
(228,571,1)
(623,98,1)
(834,988,1)
(926,488,1)
(498,25,1)
(939,779,1)
(752,598,1)
(967,391,1)
(602,571,1)
(709,355,1)
(541,282,1)
(242,929,1)
(283,166,1)
(721,182,1)
(682,817,1)
(655,571,1)
(855,589,1)
(15,486,1)
(225,288,1)
(759,571,1)
(751,641,1)
(245,764,1)
(598,857,1)
(429,412,1)
(139,615,1)
(894,669,1)
(468,571,1)
(638,355,1)
(298,708,1)
(271,355,1)
(987,633,1)
(709,571,1)
(261,649,1)
(140,844,1)
(3,708,1)
(581,807,1)
(859,276,1)
(932,918,1)
(671,355,1)
(932,755,1)
(244,905,1)
(962,802,1)
(392,783,1)
(144,681,1)
(868,280,1)
(450,40,1)
(41,432,1)
(434,770,1)
(653,804,1)
(938,792,1)
(105,934,1)
(282,571,1)
(968,730,1)
(829,861,1)
(809,926,1)
(609,490,1)
(691,319,1)
(454,507,1)
(503,568,1)
(541,963,1)
(639,712,1)
(633,559,1)
(322,591,1)
(929,571,1)
(676,49,1)
(216,931,1)
(109,215,1)
(391,96,1)
(918,755,1)
(296,79,1)
(870,976,1)
(803,882,1)
(310,29,1)
(826,800,1)
(40,48,1)
(686,537,1)
(706,99,1)
(120,4,1)
(482,612,1)
(691,450,1)
(224,88,1)
(463,858,1)
(339,491,1)
(185,748,1)
(425,571,1)
(518,729,1)
(896,366,1)
(375,786,1)
(430,822,1)
(277,937,1)
(862,78,1)
(152,4,1)
(891,177,1)
(286,898,1)
(519,105,1)
(653,22,1)
(233,805,1)
(337,836,1)
(133,432,1)
(863,571,1)
(64,389,1)
(447,438,1)
(840,455,1)
(561,153,1)
(73,178,1)
(161,93,1)
(229,212,1)
(676,708,1)
(579,794,1)
(653,674,1)
(77,355,1)
(165,745,1)
(981,164,1)
(892,924,1)
(17,463,1)
(580,630,1)
(709,651,1)
(43,580,1)
(88,269,1)
(209,502,1)
(327,974,1)
(953,571,1)
(784,218,1)
(701,355,1)
(148,695,1)
(774,363,1)
(350,693,1)
(493,956,1)
(9,331,1)
(431,932,1)
(320,422,1)
(784,980,1)
(717,465,1)
(124,38,1)
(130,594,1)
(743,355,1)
(674,591,1)
(834,666,1)
(487,376,1)
(681,571,1)
(480,928,1)
(582,431,1)
(607,842,1)
(77,758,1)
(921,870,1)
(993,719,1)
(58,709,1)
(952,471,1)
(12,362,1)
(348,636,1)
(935,752,1)
(838,571,1)
(761,571,1)
(551,662,1)
(653,968,1)
(951,907,1)
(223,837,1)
(437,708,1)
(900,864,1)
(920,511,1)
(822,498,1)
(196,494,1)
(543,660,1)
(444,983,1)
(703,518,1)
(59,708,1)
(463,571,1)
(419,819,1)
(733,721,1)
(705,525,1)
(345,589,1)
(554,708,1)
(405,627,1)
(982,967,1)
(520,613,1)
(836,114,1)
(891,649,1)
(569,708,1)
(366,959,1)
(953,679,1)
(394,827,1)
(484,808,1)
(398,59,1)
(671,904,1)
(271,722,1)
(614,671,1)
(45,796,1)
(325,787,1)
(719,259,1)
(161,417,1)
(698,686,1)
(745,213,1)
(138,659,1)
(604,654,1)
(19,781,1)
(329,337,1)
(691,871,1)
(367,404,1)
(755,122,1)
(491,750,1)
(8,148,1)
(745,710,1)
(190,778,1)
(644,454,1)
(210,174,1)
(492,571,1)
(653,691,1)
(760,708,1)
(472,593,1)
(302,154,1)
(748,173,1)
(299,395,1)
(653,736,1)
(224,571,1)
(770,756,1)
(736,450,1)
(990,811,1)
(283,571,1)
(616,708,1)
(357,62,1)
(460,889,1)
(906,282,1)
(783,85,1)
(587,456,1)
(681,403,1)
(570,447,1)
(153,185,1)
(30,936,1)
(599,244,1)
(373,690,1)
(315,708,1)
(881,355,1)
(102,251,1)
(956,708,1)
(108,150,1)
(487,708,1)
(643,45,1)
(596,379,1)
(456,846,1)
(267,571,1)
(952,571,1)
(779,220,1)
(256,284,1)
(232,561,1)
(271,571,1)
(771,818,1)
(103,927,1)
(726,306,1)
(941,194,1)
(858,420,1)
(212,119,1)
(301,649,1)
(651,407,1)
(478,602,1)
(172,252,1)
(621,516,1)
(648,266,1)
(704,258,1)
(591,588,1)
(861,609,1)
(123,1,1)
(14,687,1)
(223,708,1)
(246,355,1)
(6,334,1)
(843,743,1)
(542,519,1)
(380,917,1)
(127,360,1)
(0,491,1)
(48,165,1)
(228,355,1)
(570,432,1)
(272,708,1)
(940,882,1)
(847,218,1)
(94,866,1)
(548,435,1)
(815,920,1)
(897,107,1)
(5,663,1)
(876,245,1)
(607,757,1)
(218,708,1)
(31,856,1)
(372,487,1)
(386,642,1)
(51,478,1)
(207,452,1)
(334,699,1)
(439,367,1)
(246,697,1)
(151,355,1)
(799,742,1)
(658,873,1)
(291,361,1)
(71,754,1)
(885,71,1)
(186,729,1)
(199,667,1)
(162,689,1)
(600,355,1)
(171,429,1)
(849,901,1)
(814,297,1)
(331,952,1)
(849,258,1)
(846,708,1)
(433,174,1)
(270,708,1)
(172,708,1)
(395,708,1)
(276,187,1)
(895,143,1)
(289,20,1)
(79,320,1)
(914,184,1)
(328,702,1)
(693,639,1)
(714,607,1)
(216,703,1)
(841,191,1)
(362,627,1)
(327,27,1)
(109,247,1)
(159,486,1)
(215,247,1)
(744,60,1)
(849,937,1)
(579,302,1)
(407,286,1)
(823,995,1)
(727,355,1)
(1,355,1)
(722,291,1)
(373,311,1)
(595,555,1)
(410,359,1)
(359,708,1)
(181,863,1)
(110,277,1)
(342,232,1)
(702,881,1)
(726,708,1)
(849,946,1)
(373,444,1)
(618,235,1)
(440,5,1)
(475,140,1)
(609,571,1)
(261,104,1)
(422,430,1)
(449,31,1)
(91,290,1)
(384,76,1)
(833,352,1)
(610,942,1)
(978,27,1)
(888,304,1)
(100,495,1)
(776,610,1)
(453,708,1)
(515,267,1)
(579,992,1)
(548,193,1)
(500,219,1)
(801,11,1)
(37,72,1)
(10,556,1)
(79,498,1)
(87,354,1)
(59,964,1)
(690,571,1)
(101,231,1)
(767,541,1)
(404,727,1)
(326,747,1)
(549,972,1)
(486,816,1)
(531,111,1)
(488,64,1)
(299,221,1)
(873,876,1)
(535,385,1)
(18,984,1)
(794,523,1)
(612,401,1)
(522,958,1)
(358,287,1)
(854,571,1)
(314,424,1)
(522,765,1)
(788,198,1)
(342,708,1)
(210,433,1)
(536,847,1)
(993,259,1)
(711,551,1)
(49,328,1)
(284,809,1)
(263,60,1)
(409,993,1)
(154,539,1)
(668,65,1)
(391,708,1)
(530,484,1)
(647,895,1)
(349,571,1)
(720,635,1)
(56,423,1)
(72,766,1)
(973,203,1)
(468,355,1)
(846,540,1)
(826,355,1)
(168,442,1)
(360,833,1)
(217,664,1)
(1,341,1)
(589,571,1)
(759,23,1)
(20,244,1)
(479,991,1)
(0,339,1)
(970,324,1)
(965,784,1)
(885,890,1)
(307,578,1)
(742,158,1)
(424,285,1)
(11,623,1)
(760,364,1)
(2,971,1)
(754,330,1)
(445,368,1)
(361,380,1)
(469,733,1)
(569,625,1)
(385,531,1)
(928,973,1)
(663,703,1)
(315,643,1)
(459,81,1)
(632,732,1)
(787,369,1)
(774,708,1)
(602,355,1)
(465,131,1)
(869,571,1)
(259,860,1)
(805,520,1)
(32,865,1)
(202,672,1)
(807,948,1)
(631,210,1)
(788,537,1)
(613,708,1)
(469,791,1)
(713,351,1)
(92,428,1)
(80,529,1)
(646,342,1)
(741,617,1)
(595,355,1)
(899,960,1)
(935,854,1)
(74,177,1)
(683,473,1)
(919,451,1)
(119,383,1)
(976,504,1)
(622,200,1)
(952,355,1)
(321,154,1)
(655,739,1)
(736,871,1)
(891,397,1)
(650,214,1)
(662,126,1)
(732,123,1)
(664,571,1)
(627,746,1)
(402,151,1)
(831,708,1)
(727,571,1)
(602,479,1)
(471,996,1)
(877,814,1)
(147,859,1)
(941,979,1)
(473,569,1)
(880,769,1)
(857,616,1)
(527,355,1)
(617,571,1)
(425,130,1)
(53,708,1)
(969,868,1)
(191,708,1)
(23,969,1)
(610,780,1)
(607,44,1)
(578,975,1)
(316,183,1)
(160,336,1)
(849,551,1)
(855,345,1)
(820,899,1)
(929,84,1)
(585,571,1)
(311,333,1)
(44,842,1)
(600,571,1)
(780,372,1)
(193,521,1)
(962,226,1)
(132,501,1)
(930,121,1)
(764,248,1)
(275,855,1)
(7,37,1)
(15,159,1)
(911,680,1)
(667,530,1)
(972,138,1)
(730,466,1)
(484,567,1)
(46,234,1)
(577,842,1)
(4,742,1)
(491,708,1)
(867,823,1)
(874,52,1)
(671,571,1)
(57,571,1)
(641,450,1)
(356,776,1)
(255,513,1)
(41,581,1)
(448,880,1)
(678,935,1)
(919,563,1)
(545,228,1)
(763,169,1)
(420,492,1)
(259,571,1)
(796,772,1)
(143,708,1)
(765,664,1)
(245,248,1)
(680,871,1)
(586,939,1)
(611,648,1)
(615,586,1)
(68,724,1)
(194,979,1)
(734,429,1)
(797,558,1)
(525,571,1)
(575,396,1)
(85,16,1)
(804,622,1)
(354,94,1)
(705,700,1)
(902,932,1)
(608,592,1)
(235,688,1)
(429,790,1)
(294,708,1)
(213,272,1)
(157,708,1)
(9,550,1)
(965,362,1)
(585,749,1)
(617,68,1)
(235,254,1)
(115,557,1)
(273,129,1)
(374,497,1)
(239,63,1)
(262,946,1)
(733,571,1)
(265,90,1)
(883,938,1)
(856,757,1)
(241,913,1)
(682,544,1)
(230,477,1)
(85,611,1)
(636,239,1)
(528,571,1)
(687,264,1)
(349,355,1)
(464,162,1)
(504,977,1)
(544,817,1)
(849,623,1)
(948,571,1)
(154,398,1)
(240,506,1)
(317,358,1)
(126,499,1)
(613,862,1)
(411,621,1)
(218,386,1)
(740,601,1)
(125,982,1)
(656,495,1)
(225,708,1)
(181,197,1)
(382,242,1)
(246,571,1)
(825,914,1)
(426,587,1)
(236,571,1)
(248,869,1)
(477,887,1)
(766,892,1)
(954,335,1)
(940,803,1)
(524,685,1)
(992,793,1)
(789,634,1)
(324,100,1)
(849,838,1)
(467,556,1)
(22,274,1)
(388,768,1)
(347,483,1)
(134,188,1)
(427,953,1)
(816,708,1)
(200,74,1)
(777,116,1)
(679,652,1)
(616,813,1)
(971,825,1)
(949,549,1)
(92,144,1)
(457,794,1)
(381,553,1)
(176,481,1)
(502,14,1)
(220,419,1)
(228,815,1)
(408,188,1)
(625,789,1)
(743,353,1)
(535,208,1)
(239,741,1)
(898,538,1)
(460,708,1)
(703,522,1)
(813,661,1)
(802,226,1)
(979,46,1)
(364,227,1)
(288,582,1)
(226,103,1)
(268,708,1)
(152,55,1)
(968,761,1)
(252,795,1)
(537,515,1)
(725,631,1)
(231,377,1)
(489,656,1)
(376,902,1)
(498,58,1)
(212,571,1)
(24,552,1)
(575,373,1)
(243,255,1)
(34,828,1)
(790,412,1)
(909,670,1)
(669,848,1)
(942,780,1)
(666,872,1)
(318,834,1)
(734,171,1)
(620,411,1)
(287,708,1)
(527,571,1)
(466,524,1)
(499,707,1)
(752,609,1)
(114,668,1)
(236,355,1)
(660,655,1)
(279,678,1)
(659,26,1)
(983,311,1)
(25,58,1)
(629,605,1)
(446,436,1)
(685,207,1)
(523,560,1)
(111,572,1)
(401,237,1)
(694,769,1)
(848,943,1)
(943,228,1)
(251,61,1)
(598,616,1)
(437,196,1)
(131,832,1)
(736,214,1)
(525,921,1)
(808,567,1)
(530,438,1)
(438,54,1)
(451,897,1)
(267,806,1)
(509,340,1)
(652,564,1)
(449,571,1)
(691,632,1)
(736,632,1)
(250,133,1)
(483,155,1)
(666,966,1)
(336,396,1)
(70,543,1)
(282,583,1)
(700,425,1)
(129,673,1)
(513,759,1)
(520,236,1)
(955,849,1)
(116,708,1)
(654,947,1)
(575,566,1)
(842,757,1)
(589,355,1)
(934,595,1)
(647,994,1)
(986,829,1)
(693,571,1)
(770,962,1)
(57,355,1)
(419,708,1)
(455,733,1)
(260,340,1)
(343,13,1)
(47,355,1)
(996,550,1)
(198,682,1)
(254,688,1)
(876,647,1)
(707,715,1)
(811,19,1)
(554,480,1)
(22,37,1)
(933,482,1)
(347,646,1)
(916,312,1)
(634,714,1)
(775,571,1)
(756,614,1)
(475,708,1)
(121,885,1)
(563,451,1)
(272,911,1)
(436,708,1)
(529,527,1)
(65,936,1)
(936,172,1)
(3,961,1)
(499,715,1)
(781,67,1)
(137,356,1)
(313,698,1)
(512,596,1)
(136,348,1)
(762,15,1)
(988,931,1)
(702,549,1)
(567,307,1)
(340,604,1)
(552,717,1)
(36,705,1)
(827,510,1)
(112,243,1)
(340,571,1)
(90,390,1)
(567,571,1)
(927,323,1)
(739,168,1)
(555,675,1)
(806,10,1)
(869,878,1)
(716,245,1)
(38,987,1)
(950,110,1)
(302,321,1)
(849,885,1)
(926,571,1)
(42,708,1)
(727,474,1)
(683,569,1)
(180,933,1)
(924,42,1)
(832,392,1)
(414,7,1)
(65,936,2)
(714,607,2)
(862,404,2)
(221,404,2)
(47,355,2)
(799,557,2)
(94,827,2)
(343,609,2)
(79,537,2)
(550,139,2)
(239,63,2)
(631,85,2)
(929,703,2)
(932,755,2)
(46,292,2)
(55,740,2)
(409,993,2)
(566,271,2)
(58,709,2)
(867,255,2)
(925,404,2)
(811,781,2)
(230,477,2)
(551,662,2)
(286,537,2)
(613,404,2)
(36,476,2)
(17,476,2)
(940,882,2)
(161,537,2)
(326,708,2)
(326,703,2)
(788,404,2)
(953,571,2)
(351,255,2)
(63,771,2)
(849,258,2)
(172,139,2)
(408,500,2)
(691,632,2)
(472,476,2)
(391,85,2)
(398,337,2)
(80,85,2)
(727,355,2)
(449,404,2)
(892,573,2)
(770,537,2)
(678,136,2)
(869,537,2)
(958,518,2)
(674,109,2)
(607,842,2)
(295,537,2)
(760,708,2)
(220,419,2)
(976,708,2)
(510,734,2)
(190,834,2)
(54,133,2)
(129,453,2)
(450,139,2)
(212,571,2)
(402,151,2)
(460,708,2)
(185,255,2)
(702,881,2)
(900,703,2)
(251,85,2)
(989,826,2)
(956,708,2)
(390,537,2)
(827,510,2)
(660,655,2)
(544,537,2)
(668,139,2)
(931,136,2)
(943,410,2)
(164,537,2)
(245,248,2)
(219,537,2)
(88,109,2)
(792,495,2)
(600,355,2)
(267,556,2)
(743,355,2)
(424,537,2)
(254,404,2)
(9,550,2)
(743,537,2)
(585,703,2)
(669,404,2)
(410,359,2)
(705,976,2)
(12,362,2)
(364,537,2)
(525,476,2)
(826,571,2)
(349,355,2)
(493,956,2)
(355,255,2)
(321,337,2)
(543,442,2)
(780,85,2)
(944,85,2)
(705,700,2)
(682,817,2)
(826,355,2)
(493,404,2)
(789,404,2)
(141,476,2)
(482,237,2)
(759,571,2)
(18,255,2)
(482,708,2)
(578,133,2)
(338,646,2)
(705,525,2)
(374,537,2)
(92,537,2)
(653,22,2)
(132,404,2)
(437,708,2)
(859,276,2)
(34,255,2)
(267,571,2)
(512,109,2)
(843,537,2)
(987,476,2)
(417,760,2)
(838,571,2)
(537,404,2)
(224,571,2)
(368,109,2)
(804,926,2)
(927,537,2)
(599,404,2)
(207,255,2)
(104,571,2)
(282,571,2)
(287,404,2)
(854,571,2)
(605,85,2)
(350,988,2)
(568,769,2)
(126,85,2)
(337,139,2)
(139,827,2)
(312,537,2)
(372,85,2)
(259,571,2)
(804,404,2)
(935,136,2)
(869,355,2)
(756,537,2)
(529,85,2)
(792,109,2)
(519,404,2)
(308,85,2)
(34,571,2)
(5,703,2)
(951,85,2)
(595,571,2)
(881,355,2)
(22,37,2)
(746,85,2)
(913,404,2)
(151,355,2)
(755,263,2)
(834,931,2)
(863,571,2)
(686,537,2)
(115,348,2)
(37,571,2)
(790,404,2)
(454,495,2)
(802,537,2)
(924,42,2)
(441,85,2)
(449,355,2)
(427,85,2)
(147,404,2)
(846,708,2)
(356,610,2)
(287,708,2)
(995,255,2)
(296,537,2)
(616,609,2)
(874,139,2)
(849,865,2)
(806,556,2)
(337,836,2)
(280,216,2)
(257,477,2)
(567,133,2)
(359,404,2)
(359,708,2)
(316,537,2)
(502,4,2)
(763,348,2)
(73,646,2)
(0,491,2)
(234,85,2)
(841,191,2)
(241,404,2)
(355,891,2)
(748,255,2)
(478,537,2)
(738,993,2)
(670,257,2)
(885,71,2)
(993,512,2)
(377,404,2)
(542,404,2)
(691,476,2)
(515,777,2)
(528,4,2)
(702,404,2)
(787,85,2)
(446,358,2)
(152,55,2)
(923,931,2)
(690,355,2)
(849,901,2)
(936,172,2)
(618,404,2)
(559,915,2)
(299,404,2)
(173,708,2)
(492,571,2)
(984,255,2)
(319,827,2)
(757,299,2)
(330,85,2)
(838,85,2)
(664,571,2)
(177,649,2)
(632,537,2)
(290,109,2)
(536,362,2)
(469,733,2)
(231,355,2)
(935,854,2)
(235,688,2)
(292,85,2)
(140,85,2)
(51,537,2)
(861,609,2)
(315,255,2)
(795,139,2)
(469,404,2)
(216,703,2)
(707,85,2)
(957,136,2)
(616,708,2)
(777,556,2)
(631,210,2)
(653,736,2)
(376,85,2)
(724,993,2)
(926,571,2)
(159,85,2)
(390,355,2)
(98,708,2)
(936,139,2)
(993,259,2)
(33,476,2)
(174,554,2)
(210,174,2)
(929,571,2)
(266,476,2)
(486,85,2)
(124,476,2)
(66,512,2)
(483,646,2)
(455,404,2)
(292,951,2)
(405,85,2)
(218,708,2)
(781,325,2)
(258,76,2)
(9,139,2)
(711,85,2)
(833,404,2)
(477,109,2)
(511,600,2)
(643,255,2)
(691,56,2)
(572,337,2)
(23,216,2)
(940,537,2)
(990,85,2)
(629,85,2)
(548,85,2)
(510,404,2)
(989,537,2)
(144,681,2)
(781,85,2)
(549,708,2)
(887,109,2)
(333,396,2)
(828,255,2)
(747,703,2)
(982,85,2)
(778,834,2)
(448,404,2)
(432,628,2)
(165,139,2)
(262,85,2)
(657,537,2)
(579,302,2)
(369,85,2)
(199,133,2)
(286,161,2)
(973,85,2)
(602,355,2)
(950,708,2)
(520,236,2)
(592,537,2)
(168,476,2)
(137,85,2)
(244,404,2)
(518,931,2)
(349,556,2)
(961,85,2)
(21,827,2)
(952,355,2)
(691,622,2)
(849,946,2)
(322,109,2)
(752,343,2)
(197,834,2)
(176,708,2)
(714,449,2)
(934,595,2)
(358,404,2)
(969,216,2)
(499,85,2)
(904,537,2)
(160,396,2)
(924,573,2)
(849,937,2)
(849,0,2)
(27,404,2)
(641,139,2)
(427,953,2)
(774,708,2)
(979,85,2)
(700,425,2)
(865,85,2)
(70,476,2)
(986,571,2)
(978,404,2)
(683,404,2)
(914,404,2)
(880,404,2)
(173,255,2)
(815,404,2)
(35,557,2)
(933,237,2)
(90,537,2)
(271,571,2)
(962,226,2)
(194,85,2)
(876,647,2)
(327,349,2)
(325,85,2)
(198,314,2)
(848,404,2)
(309,842,2)
(824,85,2)
(352,404,2)
(602,537,2)
(986,609,2)
(591,571,2)
(129,404,2)
(485,537,2)
(465,85,2)
(489,656,2)
(466,255,2)
(979,46,2)
(655,571,2)
(649,255,2)
(690,571,2)
(599,841,2)
(46,85,2)
(452,255,2)
(3,85,2)
(103,537,2)
(373,396,2)
(180,237,2)
(397,255,2)
(538,537,2)
(367,404,2)
(804,622,2)
(548,193,2)
(849,885,2)
(411,404,2)
(392,85,2)
(916,537,2)
(418,47,2)
(780,372,2)
(938,792,2)
(622,571,2)
(309,298,2)
(489,703,2)
(213,139,2)
(604,834,2)
(876,537,2)
(125,967,2)
(92,144,2)
(331,139,2)
(811,85,2)
(741,617,2)
(972,404,2)
(246,355,2)
(785,537,2)
(100,404,2)
(398,59,2)
(530,438,2)
(342,708,2)
(483,155,2)
(327,27,2)
(187,638,2)
(609,136,2)
(64,404,2)
(43,537,2)
(42,573,2)
(670,477,2)
(238,85,2)
(817,537,2)
(535,385,2)
(911,139,2)
(696,537,2)
(201,537,2)
(882,537,2)
(653,674,2)
(384,85,2)
(965,85,2)
(267,355,2)
(324,100,2)
(919,451,2)
(653,804,2)
(389,446,2)
(422,708,2)
(82,537,2)
(118,136,2)
(313,571,2)
(506,404,2)
(63,993,2)
(976,476,2)
(625,404,2)
(226,103,2)
(38,476,2)
(575,827,2)
(278,649,2)
(825,708,2)
(646,342,2)
(228,355,2)
(773,396,2)
(901,85,2)
(246,571,2)
(855,589,2)
(933,482,2)
(49,404,2)
(971,404,2)
(297,85,2)
(528,571,2)
(255,513,2)
(2,404,2)
(794,355,2)
(90,390,2)
(589,355,2)
(636,993,2)
(623,98,2)
(357,255,2)
(404,727,2)
(769,708,2)
(228,404,2)
(749,703,2)
(86,255,2)
(243,255,2)
(620,404,2)
(595,404,2)
(702,549,2)
(127,404,2)
(577,842,2)
(410,404,2)
(342,255,2)
(791,775,2)
(971,825,2)
(114,65,2)
(154,337,2)
(600,404,2)
(93,537,2)
(573,136,2)
(301,649,2)
(135,703,2)
(449,571,2)
(636,239,2)
(299,395,2)
(527,355,2)
(372,487,2)
(324,404,2)
(224,109,2)
(391,708,2)
(671,355,2)
(180,933,2)
(229,133,2)
(800,537,2)
(772,708,2)
(552,85,2)
(741,993,2)
(431,85,2)
(836,139,2)
(143,708,2)
(948,133,2)
(847,362,2)
(898,537,2)
(41,581,2)
(638,404,2)
(258,85,2)
(451,571,2)
(956,404,2)
(677,109,2)
(171,404,2)
(638,355,2)
(673,404,2)
(634,404,2)
(498,537,2)
(980,362,2)
(469,791,2)
(627,3,2)
(573,270,2)
(650,404,2)
(954,649,2)
(115,557,2)
(814,85,2)
(241,355,2)
(891,177,2)
(759,216,2)
(617,993,2)
(703,522,2)
(511,404,2)
(261,104,2)
(813,609,2)
(484,567,2)
(647,537,2)
(994,537,2)
(531,337,2)
(710,139,2)
(246,404,2)
(752,136,2)
(689,537,2)
(618,235,2)
(915,495,2)
(436,708,2)
(607,309,2)
(853,27,2)
(116,708,2)
(218,362,2)
(796,772,2)
(366,931,2)
(0,85,2)
(695,631,2)
(208,831,2)
(146,374,2)
(611,476,2)
(567,571,2)
(731,216,2)
(147,859,2)
(54,212,2)
(225,708,2)
(62,255,2)
(261,649,2)
(225,85,2)
(162,537,2)
(443,993,2)
(967,391,2)
(736,622,2)
(236,355,2)
(733,404,2)
(344,404,2)
(919,136,2)
(467,556,2)
(918,85,2)
(248,537,2)
(655,476,2)
(877,85,2)
(681,571,2)
(926,404,2)
(776,85,2)
(843,743,2)
(895,537,2)
(841,404,2)
(85,476,2)
(671,537,2)
(794,571,2)
(517,255,2)
(725,85,2)
(429,412,2)
(169,348,2)
(498,58,2)
(823,255,2)
(532,518,2)
(891,796,2)
(530,484,2)
(736,476,2)
(726,708,2)
(7,136,2)
(208,337,2)
(503,77,2)
(892,924,2)
(909,670,2)
(553,139,2)
(356,85,2)
(612,237,2)
(598,609,2)
(78,404,2)
(22,136,2)
(314,285,2)
(348,512,2)
(917,139,2)
(136,115,2)
(468,404,2)
(387,556,2)
(770,962,2)
(524,255,2)
(742,708,2)
(52,139,2)
(327,556,2)
(419,827,2)
(283,571,2)
(418,404,2)
(353,537,2)
(345,404,2)
(302,337,2)
(176,404,2)
(610,85,2)
(361,380,2)
(694,769,2)
(872,988,2)
(509,340,2)
(185,173,2)
(849,431,2)
(675,404,2)
(245,537,2)
(339,85,2)
(399,85,2)
(499,715,2)
(453,404,2)
(68,993,2)
(772,255,2)
(579,337,2)
(973,548,2)
(818,993,2)
(859,404,2)
(836,114,2)
(270,136,2)
(379,109,2)
(422,537,2)
(699,268,2)
(247,571,2)
(155,646,2)
(745,213,2)
(720,404,2)
(142,535,2)
(188,537,2)
(107,136,2)
(494,537,2)
(380,381,2)
(214,418,2)
(718,842,2)
(585,571,2)
(314,537,2)
(688,404,2)
(909,477,2)
(816,85,2)
(628,181,2)
(182,404,2)
(340,571,2)
(777,116,2)
(662,499,2)
(408,537,2)
(704,85,2)
(319,571,2)
(943,228,2)
(522,765,2)
(764,537,2)
(742,557,2)
(609,571,2)
(239,993,2)
(996,139,2)
(553,708,2)
(784,218,2)
(715,462,2)
(153,34,2)
(453,708,2)
(608,940,2)
(333,294,2)
(325,369,2)
(656,703,2)
(71,85,2)
(488,404,2)
(549,404,2)
(775,404,2)
(263,85,2)
(865,726,2)
(607,404,2)
(589,404,2)
(402,537,2)
(551,85,2)
(960,404,2)
(57,355,2)
(829,609,2)
(819,827,2)
(382,703,2)
(959,931,2)
(360,404,2)
(644,454,2)
(531,708,2)
(817,283,2)
(298,842,2)
(257,708,2)
(416,85,2)
(639,988,2)
(652,85,2)
(77,769,2)
(466,524,2)
(835,348,2)
(260,834,2)
(856,404,2)
(59,708,2)
(857,609,2)
(148,85,2)
(222,404,2)
(151,571,2)
(693,571,2)
(770,756,2)
(881,404,2)
(53,85,2)
(824,708,2)
(320,537,2)
(681,355,2)
(291,139,2)
(236,571,2)
(320,422,2)
(4,742,2)
(754,85,2)
(551,941,2)
(166,537,2)
(761,255,2)
(712,988,2)
(152,4,2)
(600,571,2)
(153,255,2)
(30,139,2)
(484,133,2)
(624,358,2)
(48,139,2)
(131,475,2)
(786,537,2)
(733,571,2)
(855,404,2)
(240,404,2)
(286,898,2)
(679,85,2)
(4,557,2)
(412,246,2)
(791,404,2)
(629,708,2)
(112,255,2)
(760,537,2)
(514,224,2)
(831,708,2)
(941,85,2)
(740,4,2)
(543,38,2)
(653,968,2)
(890,85,2)
(209,4,2)
(922,404,2)
(682,537,2)
(463,476,2)
(74,255,2)
(275,404,2)
(1,571,2)
(55,209,2)
(390,571,2)
(174,85,2)
(315,708,2)
(329,337,2)
(136,109,2)
(44,842,2)
(804,56,2)
(736,319,2)
(358,287,2)
(276,404,2)
(736,56,2)
(463,571,2)
(938,109,2)
(882,437,2)
(891,315,2)
(259,512,2)
(255,703,2)
(714,404,2)
(521,85,2)
(236,404,2)
(844,85,2)
(664,518,2)
(671,571,2)
(475,85,2)
(973,811,2)
(433,85,2)
(508,85,2)
(435,85,2)
(953,85,2)
(146,537,2)
(526,404,2)
(756,614,2)
(676,404,2)
(297,708,2)
(438,54,2)
(471,139,2)
(446,436,2)
(442,571,2)
(81,404,2)
(24,85,2)
(313,355,2)
(968,255,2)
(765,664,2)
(808,133,2)
(361,139,2)
(242,703,2)
(779,827,2)
(67,85,2)
(948,571,2)
(661,609,2)
(586,827,2)
(683,569,2)
(334,537,2)
(38,708,2)
(147,101,2)
(556,404,2)
(47,404,2)
(688,223,2)
(273,404,2)
(653,691,2)
(511,676,2)
(95,109,2)
(323,537,2)
(729,896,2)
(558,255,2)
(445,109,2)
(114,139,2)
(581,948,2)
(556,853,2)
(962,537,2)
(907,85,2)
(283,355,2)
(464,537,2)
(952,139,2)
(123,537,2)
(849,529,2)
(284,404,2)
(428,537,2)
(417,537,2)
(220,827,2)
(253,136,2)
(478,602,2)
(621,404,2)
(475,708,2)
(743,571,2)
(1,537,2)
(72,136,2)
(500,537,2)
(656,495,2)
(341,537,2)
(967,85,2)
(362,627,2)
(420,492,2)
(396,337,2)
(500,219,2)
(310,556,2)
(627,85,2)
(541,255,2)
(896,931,2)
(375,537,2)
(501,404,2)
(51,393,2)
(50,85,2)
(311,396,2)
(503,769,2)
(666,872,2)
(765,518,2)
(231,404,2)
(596,109,2)
(955,85,2)
(415,404,2)
(432,834,2)
(863,834,2)
(263,60,2)
(131,832,2)
(298,708,2)
(727,571,2)
(564,85,2)
(134,537,2)
(457,337,2)
(104,355,2)
(610,780,2)
(871,139,2)
(876,245,2)
(983,396,2)
(570,133,2)
(659,934,2)
(41,133,2)
(527,85,2)
(119,133,2)
(758,769,2)
(834,666,2)
(157,708,2)
(766,136,2)
(878,537,2)
(71,571,2)
(145,703,2)
(554,85,2)
(810,573,2)
(648,476,2)
(19,85,2)
(273,129,2)
(721,404,2)
(580,537,2)
(477,887,2)
(336,396,2)
(151,537,2)
(690,396,2)
(105,404,2)
(150,133,2)
(589,571,2)
(887,708,2)
(241,571,2)
(269,109,2)
(419,708,2)
(474,255,2)
(265,537,2)
(383,133,2)
(736,214,2)
(628,834,2)
(767,255,2)
(761,571,2)
(849,973,2)
(487,708,2)
(261,177,2)
(947,834,2)
(420,476,2)
(437,537,2)
(84,703,2)
(530,570,2)
(910,404,2)
(937,225,2)
(393,313,2)
(950,85,2)
(591,109,2)
(77,355,2)
(60,85,2)
(235,404,2)
(705,476,2)
(525,571,2)
(440,703,2)
(184,404,2)
(57,571,2)
(768,404,2)
(522,518,2)
(47,571,2)
(507,136,2)
(189,537,2)
(934,404,2)
(191,708,2)
(842,757,2)
(76,85,2)
(635,404,2)
(101,404,2)
(99,15,2)
(8,85,2)
(833,468,2)
(516,404,2)
(974,556,2)
(300,85,2)
(456,396,2)
(729,931,2)
(653,149,2)
(603,537,2)
(133,509,2)
(516,388,2)
(881,571,2)
(651,537,2)
(853,404,2)
(154,398,2)
(389,358,2)
(726,85,2)
(223,708,2)
(13,609,2)
(404,255,2)
(16,476,2)
(252,139,2)
(451,136,2)
(479,537,2)
(304,4,2)
(400,404,2)
(699,537,2)
(271,139,2)
(801,85,2)
(935,752,2)
(11,85,2)
(891,649,2)
(826,537,2)
(486,816,2)
(385,531,2)
(757,404,2)
(535,337,2)
(294,708,2)
(412,404,2)
(274,136,2)
(701,255,2)
(632,123,2)
(348,109,2)
(311,456,2)
(186,931,2)
(741,206,2)
(860,512,2)
(763,571,2)
(179,337,2)
(258,695,2)
(497,708,2)
(569,708,2)
(122,85,2)
(930,85,2)
(395,404,2)
(623,85,2)
(165,745,2)
(732,537,2)
(771,993,2)
(349,571,2)
(946,629,2)
(638,571,2)
(25,537,2)
(26,404,2)
(674,591,2)
(868,708,2)
(354,404,2)
(163,404,2)
(332,139,2)
(388,708,2)
(491,708,2)
(447,133,2)
(20,404,2)
(15,85,2)
(32,85,2)
(277,85,2)
(588,109,2)
(734,429,2)
(55,4,2)
(335,649,2)
(205,136,2)
(65,139,2)
(921,476,2)
(334,699,2)
(431,356,2)
(514,109,2)
(666,988,2)
(920,404,2)
(223,404,2)
(120,4,2)
(178,646,2)
(750,85,2)
(149,703,2)
(374,497,2)
(425,571,2)
(530,133,2)
(554,708,2)
(283,537,2)
(81,774,2)
(203,85,2)
(509,834,2)
(37,136,2)
(946,85,2)
(434,537,2)
(454,136,2)
(89,476,2)
(700,476,2)
(227,537,2)
(464,708,2)
(928,85,2)
(676,708,2)
(117,827,2)
(793,337,2)
(214,404,2)
(734,404,2)
(570,432,2)
(100,495,2)
(698,537,2)
(41,432,2)
(289,404,2)
(172,708,2)
(56,423,2)
(598,616,2)
(563,136,2)
(870,476,2)
(193,85,2)
(736,632,2)
(14,4,2)
(885,85,2)
(311,333,2)
(113,85,2)
(903,537,2)
(529,527,2)
(783,85,2)
(285,464,2)
(970,404,2)
(340,834,2)
(439,404,2)
(576,573,2)
(231,571,2)
(10,556,2)
(932,85,2)
(949,404,2)
(739,476,2)
(825,404,2)
(487,85,2)
(703,931,2)
(459,404,2)
(520,613,2)
(492,476,2)
(891,397,2)
(237,703,2)
(931,919,2)
(167,241,2)
(183,537,2)
(3,708,2)
(233,404,2)
(15,486,2)
(26,542,2)
(313,537,2)
(691,450,2)
(206,993,2)
(849,85,2)
(633,476,2)
(569,404,2)
(527,571,2)
(285,537,2)
(966,988,2)
(158,557,2)
(873,537,2)
(820,404,2)
(101,231,2)
(593,476,2)
(362,85,2)
(752,609,2)
(187,404,2)
(706,85,2)
(317,358,2)
(442,476,2)
(373,690,2)
(209,14,2)
(607,757,2)
(57,85,2)
(348,636,2)
(832,85,2)
(279,136,2)
(210,85,2)
(685,255,2)
(31,404,2)
(216,931,2)
(513,868,2)
(515,267,2)
(115,152,2)
(647,895,2)
(898,402,2)
(51,478,2)
(905,355,2)
(264,4,2)
(85,611,2)
(586,939,2)
(149,585,2)
(414,136,2)
(640,477,2)
(968,761,2)
(809,404,2)
(696,916,2)
(430,537,2)
(369,53,2)
(822,537,2)
(133,834,2)
(722,139,2)
(667,133,2)
(583,255,2)
(630,696,2)
(703,518,2)
(87,404,2)
(901,950,2)
(213,272,2)
(951,708,2)
(249,537,2)
(658,537,2)
(130,476,2)
(888,4,2)
(719,512,2)
(99,85,2)
(200,255,2)
(636,512,2)
(613,708,2)
(211,255,2)
(83,85,2)
(850,404,2)
(775,571,2)
(373,311,2)
(370,85,2)
(663,703,2)
(170,703,2)
(282,255,2)
(294,396,2)
(103,708,2)
(905,404,2)
(480,85,2)
(539,337,2)
(858,476,2)
(943,404,2)
(561,255,2)
(654,834,2)
(897,136,2)
(460,537,2)
(580,630,2)
(102,85,2)
(60,824,2)
(895,143,2)
(116,556,2)
(131,85,2)
(196,537,2)
(582,85,2)
(736,871,2)
(328,404,2)
(456,846,2)
(91,109,2)
(964,337,2)
(599,244,2)
(543,660,2)
(188,843,2)
(894,404,2)
(393,537,2)
(331,952,2)
(868,216,2)
(363,404,2)
(752,598,2)
(303,404,2)
(796,255,2)
(660,476,2)
(889,537,2)
(659,404,2)
(981,537,2)
(587,396,2)
(462,85,2)
(557,348,2)
(386,362,2)
(617,571,2)
(716,537,2)
(543,476,2)
(473,404,2)
(727,255,2)
(615,827,2)
(649,867,2)
(408,188,2)
(268,708,2)
(338,708,2)
(198,537,2)
(992,337,2)
(965,362,2)
(816,708,2)
(681,537,2)
(524,495,2)
(736,450,2)
(481,404,2)
(219,460,2)
(504,476,2)
(61,85,2)
(735,404,2)
(109,247,2)
(977,476,2)
(133,432,2)
(272,139,2)
(469,176,2)
(963,255,2)
(883,109,2)
(541,963,2)
(837,404,2)
(167,404,2)
(905,571,2)
(108,133,2)
(691,319,2)
(14,708,2)
(121,85,2)
(744,85,2)
(595,355,2)
(468,355,2)
(123,1,2)
(429,404,2)
(426,396,2)
(406,537,2)
(76,99,2)
(268,537,2)
(622,255,2)
(693,988,2)
(318,834,2)
(125,85,2)
(139,586,2)
(271,355,2)
(226,537,2)
(307,133,2)
(965,784,2)
(939,220,2)
(425,476,2)
(217,518,2)
(630,537,2)
(96,85,2)
(431,932,2)
(136,348,2)
(380,139,2)
(407,537,2)
(250,133,2)
(462,157,2)
(896,571,2)
(728,537,2)
(110,85,2)
(143,537,2)
(803,537,2)
(79,498,2)
(444,396,2)
(559,476,2)
(991,537,2)
(662,85,2)
(614,537,2)
(942,85,2)
(611,708,2)
(111,337,2)
(161,417,2)
(183,146,2)
(515,556,2)
(61,57,2)
(1,355,2)
(557,763,2)
(642,362,2)
(42,708,2)
(98,85,2)
(784,980,2)
(228,571,2)
(153,185,2)
(56,649,2)
(272,708,2)
(476,404,2)
(762,85,2)
(436,358,2)
(202,139,2)
(774,404,2)
(832,571,2)
(181,834,2)
(740,601,2)
(687,4,2)
(491,85,2)
(769,404,2)
(513,759,2)
(152,557,2)
(520,404,2)
(77,571,2)
(691,871,2)
(915,476,2)
(807,133,2)
(237,326,2)
(144,537,2)
(709,355,2)
(608,592,2)
(191,404,2)
(872,693,2)
(497,537,2)
(476,261,2)
(601,4,2)
(902,85,2)
(939,827,2)
(842,404,2)
(560,337,2)
(490,136,2)
(608,537,2)
(104,404,2)
(849,838,2)
(784,362,2)
(906,255,2)
(864,703,2)
(713,255,2)
(334,92,2)
(401,237,2)
(239,741,2)
(29,556,2)
(513,216,2)
(535,208,2)
(9,331,2)
(256,404,2)
(753,404,2)
(276,187,2)
(592,989,2)
(157,85,2)
(128,136,2)
(395,708,2)
(614,671,2)
(644,136,2)
(937,85,2)
(512,571,2)
(730,255,2)
(40,139,2)
(581,133,2)
(242,929,2)
(579,794,2)
(58,537,2)
(69,85,2)
(695,85,2)
(952,571,2)
(709,571,2)
(771,571,2)
(646,255,2)
(832,355,2)
(566,202,2)
(248,869,2)
(381,553,2)
(751,139,2)
(193,125,2)
(854,136,2)
(79,320,2)
(849,551,2)
(831,337,2)
(594,476,2)
(232,255,2)
(288,85,2)
(717,85,2)
(659,26,2)
(846,396,2)
(540,396,2)
(523,337,2)
(255,931,2)
(518,729,2)
(745,139,2)
(566,139,2)
(805,404,2)
(840,404,2)
(198,682,2)
(388,404,2)
(672,139,2)
(27,683,2)
(183,728,2)
(665,518,2)
(709,537,2)
(916,708,2)
(849,965,2)
(270,708,2)
(423,649,2)
(138,404,2)
(866,827,2)
(941,979,2)
(794,337,2)
(827,404,2)
(545,404,2)
(975,133,2)
(75,109,2)
(541,282,2)
(869,571,2)
(468,571,2)
(875,537,2)
(39,139,2)
(555,404,2)
(697,404,2)
(347,255,2)
(403,537,2)
(891,255,2)
(302,154,2)
(755,85,2)
(680,139,2)
(381,139,2)
(343,986,2)
(597,649,2)
(740,528,2)
(899,404,2)
(797,255,2)
(814,297,2)
(396,142,2)
(728,90,2)
(59,337,2)
(438,133,2)
(212,133,2)
(691,214,2)
(849,623,2)
(306,85,2)
(394,827,2)
(602,571,2)
(155,338,2)
(244,905,2)
(715,85,2)
(261,404,2)
(385,337,2)
(53,708,2)
(142,337,2)
(988,931,2)
(45,255,2)
(6,537,2)
(181,863,2)
(542,708,2)
-----------------------------------
(0,qe->parent->name)
(1,tmp->chan)
(2,qe)
(3,qe->parent)
(4,qe->parent->wrapuptime)
(5,"%s in use, can\'t receive call\\n")
(6,tmp)
(7,0)
(8,chan)
(9,ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan)
(10,tmp)
(11,tmp)
(12,"")
(13,name)
(14,qe->parent)
(15,ast_channel_caller(qe->chan)
(16,eventwhencalled)
(17,busies)
(18,parent)
(19,valid)
(20,qe)
(21,dial_callerid_absent)
(22,return 0;)
(23,member)
(24,qe)
(25,dst)
(26,ast_channel_caller(qe->chan)
(27,macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(28,)
(29,qe)
(30,number)
(31,chan)
(32,qe)
(33,"Couldn\'t call %s\\n")
(34,tmp->interface)
(35,qe)
(36,1)
(37,tmp->stillgoing)
(38,qe->parent)
(39,caller)
(40,ani)
(41,ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface)
(42,qe->chan)
(43,tmp)
(44,macrocontext)
(45,qe)
(46,ast_channel_connected(qe->chan)
(47,tmp->chan)
(48,caller)
(49,chan)
(50,number)
(51,ast_cdr_setdestchan(ast_channel_cdr(tmp->chan)
(52,caller)
(53,qe->chan)
(54,tmp->member->status)
(55,time(NULL)
(56,*location++)
(57,tmp->chan)
(58,ast_channel_cdr(tmp->chan)
(59,qe->chan)
(60,ast_channel_connected(qe->chan)
(61,ast_channel_unlock(tmp->chan)
(62,tech)
(63,tmp->lastqueue->wrapuptime)
(64,tmp)
(65,ast_channel_dialed(qe->chan)
(66,tmp)
(67,number)
(68,lastcall)
(69,chan)
(70,0)
(71,tmp->member)
(72,stillgoing)
(73,chan)
(74,tmp)
(75,chan)
(76,ast_channel_caller(qe->chan)
(77,tmp->chan)
(78,qe)
(79,strcpy(ast_channel_cdr(tmp->chan)
(80,qe)
(81,ao2_lock(qe->parent)
(82,tmp)
(83,qe)
(84,interface)
(85,qe->parent->eventwhencalled)
(86,tmp)
(87,chan)
(88,interface)
(89,member)
(90,ast_channel_cdr(tmp->chan)
(91,busies)
(92,ast_channel_cdr(tmp->chan)
(93,src)
(94,tmp->dial_callerid_absent = 1)
(95,tmp)
(96,chan)
(97,caller)
(98,qe->chan)
(99,ast_channel_caller(qe->chan)
(100,*busies)
(101,ast_channel_whentohangup(tmp->chan)
(102,chan)
(103,qe->chan)
(104,tmp->chan)
(105,qe)
(106,if (!ast_strlen_zero(macroexten)
(107,tmp)
(108,member)
(109,tmp->member->paused)
(110,chan)
(111,chan)
(112,tmp)
(113,id)
(114,ast_channel_dialed(qe->chan)
(115,!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL)
(116,qe->chan)
(117,number)
(118,"Wrapuptime not yet expired on queue %s for %s\\n")
(119,member)
(120,NULL)
(121,qe)
(122,name)
(123,ast_channel_cdr(tmp->chan)
(124,tmp)
(125,ast_channel_caller(qe->chan)
(126,valid)
(127,chan)
(128,tmp)
(129,qe->parent->rrpos)
(130,member)
(131,ast_channel_lock_both(tmp->chan, qe->chan)
(132,chan)
(133,newstate != tmp->member->status)
(134,qe)
(135,busies)
(136,(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(137,"unknown")
(138,qe)
(139,ast_channel_connected(qe->chan)
(140,chan)
(141,3)
(142,ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(143,qe->chan)
(144,ast_channel_cdr(tmp->chan)
(145,0)
(146,ast_channel_cdr(qe->chan)
(147,memset(ast_channel_whentohangup(tmp->chan)
(148,qe)
(149,return 0;)
(150,tmp)
(151,tmp->chan)
(152,qe->parent->wrapuptime && (time(NULL)
(153,ast_debug(1, "Priority queue delaying call to %s:%s\\n", qe->parent->name, tmp->interface)
(154,ast_channel_dialed(qe->chan)
(155,ast_channel_cdr(qe->chan)
(156,if (ast_channel_cdr(qe->chan)
(157,qe->chan)
(158,parent)
(159,id)
(160,chan)
(161,ast_channel_cdr(qe->chan)
(162,chan)
(163,location)
(164,qe)
(165,caller.id = ast_channel_connected(qe->chan)
(166,chan)
(167,ast_channel_unlock(tmp->chan)
(168,tmp)
(169,lastqueue)
(170,tmp)
(171,number)
(172,qe->chan)
(173,qe->parent)
(174,ast_channel_caller(qe->chan)
(175,)
(176,qe->parent)
(177,location = "")
(178,qe)
(179,chan)
(180,ast_cdr_busy(ast_channel_cdr(qe->chan)
(181,tmp->member->interface)
(182,tmp)
(183,strcpy(ast_channel_cdr(tmp->chan)
(184,qe)
(185,qe->parent->name)
(186,AST_DEVICE_NOT_INUSE)
(187,ast_channel_whentohangup(tmp->chan)
(188,ast_channel_cdr(tmp->chan)
(189,tmp)
(190,member)
(191,qe->chan)
(192,if ((res = ast_call(tmp->chan, location, 0)
(193,ast_channel_caller(qe->chan)
(194,str)
(195,)
(196,chan)
(197,interface)
(198,strcpy(ast_channel_cdr(tmp->chan)
(199,AST_DEVSTATE_CACHABLE)
(200,chan)
(201,lastdata)
(202,&caller)
(203,"unknown")
(204,vars)
(205,tmp)
(206,time(NULL)
(207,tmp->stillgoing = 0)
(208,ast_channel_macroexten(qe->chan)
(209,qe->parent->wrapuptime)
(210,ast_channel_caller(qe->chan)
(211,chan)
(212,tmp->member)
(213,ast_channel_connected(qe->chan)
(214,ast_channel_dialed(tmp->chan)
(215,paused)
(216,use_weight)
(217,status)
(218,qe->chan)
(219,ast_channel_cdr(qe->chan)
(220,ast_channel_connected(qe->chan)
(221,"MACRO_CONTEXT")
(222,chan)
(223,qe->chan)
(224,tmp->interface)
(225,qe->chan)
(226,ast_channel_cdr(qe->chan)
(227,qe)
(228,tmp->chan)
(229,status)
(230,qe)
(231,tmp->chan)
(232,chan)
(233,cancel_answered_elsewhere)
(234,id)
(235,ast_channel_dialed(qe->chan)
(236,tmp->chan)
(237,ast_channel_cdr(qe->chan)
(238,name)
(239,time(NULL)
(240,chan)
(241,tmp->chan)
(242,ast_debug(1, "%s in use, can\'t receive call\\n", tmp->interface)
(243,tech)
(244,ast_channel_redirecting(tmp->chan)
(245,ast_channel_cdr(tmp->chan)
(246,tmp->chan)
(247,tmp->member)
(248,ast_channel_cdr(tmp->chan)
(249,clid)
(250,LOG_WARNING)
(251,qe)
(252,chan)
(253,1)
(254,transit_network_select)
(255,use_weight && compare_weight(qe->parent,tmp->member)
(256,qe)
(257,qe->chan)
(258,S_COR(ast_channel_caller(qe->chan)
(259,tmp->lastqueue)
(260,status)
(261,ast_call(tmp->chan, location, 0)
(262,qe)
(263,ast_channel_connected(qe->chan)
(264,qe)
(265,accountcode)
(266,qe)
(267,tmp->chan)
(268,qe->chan)
(269,tmp)
(270,qe->chan)
(271,tmp->chan)
(272,qe->chan)
(273,qe->parent->rrpos++)
(274,0)
(275,tmp)
(276,*ast_channel_whentohangup(tmp->chan)
(277,qe)
(278,location)
(279,chan)
(280,parent)
(281,location)
(282,tmp->interface)
(283,tmp->chan)
(284,tmp->stillgoing = 0)
(285,ast_channel_cdr(qe->chan)
(286,strcpy(ast_channel_cdr(tmp->chan)
(287,qe->chan)
(288,chan)
(289,chan)
(290,tmp->stillgoing = 0)
(291,tmp)
(292,ast_channel_connected(qe->chan)
(293,)
(294,qe->chan)
(295,accountcode)
(296,tmp)
(297,qe->chan)
(298,qe->chan)
(299,pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(300,interface)
(301,location)
(302,ast_channel_dialed(qe->chan)
(303,valid)
(304,tmp)
(305,if (!tmp->member->ringinuse)
(306,chan)
(307,member)
(308,chan)
(309,ast_channel_context(qe->chan)
(310,chan)
(311,S_OR(ast_channel_macroexten(qe->chan)
(312,chan)
(313,tmp->chan)
(314,ast_channel_cdr(qe->chan)
(315,qe->chan)
(316,tmp)
(317,qe)
(318,newstate)
(319,tmp->dial_callerid_absent)
(320,ast_channel_exten(qe->chan)
(321,str)
(322,0)
(323,qe)
(324,(*busies)
(325,ast_channel_caller(qe->chan)
(326,qe->chan)
(327,ast_channel_exten_set(tmp->chan, macroexten)
(328,qe)
(329,qe)
(330,tmp)
(331,ast_channel_caller(tmp->chan)
(332,NULL)
(333,ast_channel_exten(qe->chan)
(334,strcpy(ast_channel_cdr(tmp->chan)
(335,\'\\0\')
(336,tmp)
(337,!ast_strlen_zero(ast_channel_dialed(qe->chan)
(338,qe->chan)
(339,name)
(340,tmp->member)
(341,chan)
(342,qe->chan)
(343,tmp->lastqueue->name)
(344,qe)
(345,"(Outgoing Line)
(346,)
(347,tmp)
(348,tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(349,tmp->chan)
(350,status)
(351,1)
(352,"AppQueue")
(353,chan)
(354,tmp)
(355,tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan)
(356,ast_channel_connected(qe->chan)
(357,qe)
(358,ast_channel_cdr(qe->chan)
(359,qe->chan)
(360,tmp)
(361,caller.ani = ast_channel_connected(qe->chan)
(362,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES)
(363,parent)
(364,chan)
(365,tmp)
(366,member)
(367,tmp)
(368,1)
(369,ast_channel_caller(qe->chan)
(370,qe)
(371,)
(372,ast_channel_connected(qe->chan)
(373,ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan)
(374,ast_channel_cdr(qe->chan)
(375,chan)
(376,chan)
(377,chan)
(378,)
(379,tmp)
(380,ast_channel_connected(qe->chan)
(381,ast_channel_connected(qe->chan)
(382,qe)
(383,tmp)
(384,"unknown")
(385,ast_channel_exten(qe->chan)
(386,chan)
(387,chan)
(388,qe->chan)
(389,ast_cdr_busy(ast_channel_cdr(qe->chan)
(390,tmp->chan)
(391,qe->chan)
(392,chan)
(393,ast_channel_cdr(tmp->chan)
(394,qe)
(395,qe->chan)
(396,!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(397,&status)
(398,ast_channel_dialed(qe->chan)
(399,chan)
(400,tmp)
(401,qe)
(402,ast_channel_cdr(tmp->chan)
(403,chan)
(404,!tmp->chan)
(405,QUEUE_EVENT_VARIABLES)
(406,chan)
(407,tmp)
(408,strcpy(ast_channel_cdr(tmp->chan)
(409,NULL)
(410,ast_channel_adsicpe(qe->chan)
(411,tmp)
(412,ast_channel_caller(tmp->chan)
(413,)
(414,tmp->stillgoing = 0)
(415,qe)
(416,"unknown")
(417,ast_channel_cdr(qe->chan)
(418,ast_channel_dialed(tmp->chan)
(419,qe->chan)
(420,ast_verb(3, "Couldn\'t call %s\\n", tmp->interface)
(421,)
(422,qe->chan)
(423,location++)
(424,userfield)
(425,tmp->member)
(426,chan)
(427,ast_verb(3, "Called %s\\n", tmp->interface)
(428,dcontext)
(429,ast_channel_caller(tmp->chan)
(430,chan)
(431,S_COR(ast_channel_connected(qe->chan)
(432,newstate = ast_device_state(tmp->member->interface)
(433,id)
(434,tmp)
(435,str)
(436,qe->chan)
(437,qe->chan)
(438,ast_devstate2str(tmp->member->status)
(439,chan)
(440,tmp)
(441,chan)
(442,tmp->member)
(443,tmp)
(444,NULL)
(445,"%s paused, can\'t receive call\\n")
(446,ast_channel_cdr(qe->chan)
(447,newstate)
(448,chan)
(449,tmp->chan)
(450,caller.ani)
(451,tmp->member)
(452,0)
(453,qe->parent)
(454,*busies)
(455,tmp)
(456,ast_channel_macroexten(qe->chan)
(457,qe)
(458,macrocontext)
(459,qe)
(460,qe->chan)
(461,if (ast_cdr_isset_unanswered()
(462,ast_channel_connected(qe->chan)
(463,do_hang(tmp)
(464,qe->chan)
(465,EVENT_FLAG_AGENT)
(466,(*busies)
(467,tmp)
(468,tmp->chan)
(469,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(470,tech)
(471,chan)
(472,interface)
(473,"MACRO_EXTEN")
(474,chan)
(475,qe->chan)
(476,res = ast_call(tmp->chan, location, 0)
(477,ast_channel_cdr(qe->chan)
(478,ast_channel_name(tmp->chan)
(479,chan)
(480,chan)
(481,parent)
(482,qe->chan)
(483,ast_cdr_busy(ast_channel_cdr(qe->chan)
(484,tmp->member->interface)
(485,lastapp)
(486,ast_channel_caller(qe->chan)
(487,qe->chan)
(488,stillgoing)
(489,(*busies)
(490,lastqueue)
(491,qe->parent)
(492,tmp->interface)
(493,ao2_unlock(qe->parent)
(494,qe)
(495,int *busies)
(496,)
(497,qe->chan)
(498,ast_channel_cdr(tmp->chan)
(499,ast_channel_connected(qe->chan)
(500,ast_channel_cdr(qe->chan)
(501,tmp)
(502,wrapuptime)
(503,ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
(504,parent)
(505,status)
(506,tmp)
(507,busies)
(508,tmp)
(509,tmp->member->status)
(510,ast_channel_caller(tmp->chan)
(511,ast_channel_datastore_inherit(qe->chan, tmp->chan)
(512,tmp->lastqueue)
(513,compare_weight(qe->parent,tmp->member)
(514,ast_debug(1, "%s paused, can\'t receive call\\n", tmp->interface)
(515,ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan)
(516,ast_channel_unlock(qe->chan)
(517,stillgoing)
(518,tmp->member->status != AST_DEVICE_NOT_INUSE)
(519,chan)
(520,ast_channel_lock_both(tmp->chan, qe->chan)
(521,number)
(522,tmp->member->status != AST_DEVICE_UNKNOWN)
(523,chan)
(524,*busies)
(525,tmp->member)
(526,busies)
(527,tmp->chan)
(528,tmp->lastcall)
(529,ast_channel_name(tmp->chan)
(530,ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\\n",\n\\n\\t\\t\\t\\t\\ttmp->member->interface, ast_devstate2str(tmp->member->status)
(531,qe->chan)
(532,tmp)
(533,)
(534,if (ast_channel_cdr(qe->chan)
(535,S_OR(ast_channel_macroexten(qe->chan)
(536,vars)
(537,ast_cdr_isset_unanswered()
(538,src)
(539,number)
(540,chan)
(541,ast_copy_string(tech, tmp->interface, sizeof(tech)
(542,qe->chan)
(543,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(544,userfield)
(545,qe)
(546,)
(547,)
(548,ast_channel_caller(qe->chan)
(549,qe->chan)
(550,&caller)
(551,S_COR(ast_channel_connected(qe->chan)
(552,"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s")
(553,qe->chan)
(554,qe->chan)
(555,chan)
(556,!ast_strlen_zero(macroexten)
(557,!tmp->lastqueue)
(558,location)
(559,(*busies)
(560,tmp)
(561,qe)
(562,)
(563,ringinuse)
(564,"Called %s\\n")
(565,if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(566,ast_channel_set_caller_event(tmp->chan, &caller, NULL)
(567,tmp->member)
(568,AST_CAUSE_ANSWERED_ELSEWHERE)
(569,qe->chan)
(570,ast_devstate2str(newstate)
(571,struct callattempt *tmp)
(572,qe)
(573,ast_channel_cdr(qe->chan)
(574,if (qe->cancel_answered_elsewhere)
(575,tmp)
(576,qe)
(577,qe)
(578,tmp)
(579,ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)
(580,ast_channel_cdr(tmp->chan)
(581,tmp->member->interface)
(582,qe)
(583,interface)
(584,)
(585,tmp->stillgoing)
(586,ast_channel_connected(qe->chan)
(587,qe)
(588,stillgoing)
(589,tmp->chan)
(590,if ((location = strchr(tech, \'/\')
(591,tmp->stillgoing)
(592,ast_channel_cdr(tmp->chan)
(593,tmp)
(594,tmp)
(595,tmp->chan)
(596,lastqueue)
(597,"")
(598,qe->parent->name)
(599,ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan)
(600,tmp->chan)
(601,time(NULL)
(602,tmp->chan)
(603,tmp)
(604,member)
(605,chan)
(606,if (!ast_channel_caller(tmp->chan)
(607,ast_strlen_zero(macrocontext)
(608,strcpy(ast_channel_cdr(tmp->chan)
(609,tmp->lastqueue)
(610,ast_channel_connected(qe->chan)
(611,qe->parent)
(612,chan)
(613,qe->chan)
(614,ast_channel_cdr(tmp->chan)
(615,valid)
(616,qe->parent)
(617,tmp->lastcall)
(618,ast_channel_dialed(tmp->chan)
(619,if (use_weight && compare_weight(qe->parent,tmp->member)
(620,chan)
(621,res)
(622,tmp->chan)
(623,ast_channel_name(qe->chan)
(624,chan)
(625,chan)
(626,if (ast_channel_cdr(qe->chan)
(627,qe->parent->eventwhencalled)
(628,ast_device_state(tmp->member->interface)
(629,qe->chan)
(630,ast_channel_cdr(qe->chan)
(631,ast_channel_caller(qe->chan)
(632,ast_channel_cdr(tmp->chan)
(633,qe)
(634,macroexten)
(635,qe)
(636,tmp->lastqueue->wrapuptime && (time(NULL)
(637,)
(638,tmp->chan)
(639,member)
(640,chan)
(641,qe)
(642,qe)
(643,chan)
(644,(*busies)
(645,if (ast_channel_connected(qe->chan)
(646,ast_channel_cdr(qe->chan)
(647,ast_channel_cdr(qe->chan)
(648,parent)
(649,location = strchr(tech, \'/\')
(650,qe)
(651,chan)
(652,tmp)
(653,RET)
(654,tmp)
(655,tmp->member)
(656,*busies)
(657,chan)
(658,chan)
(659,ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan)
(660,get_queue_member_status(tmp->member)
(661,qe)
(662,ast_channel_connected(qe->chan)
(663,1)
(664,tmp->member)
(665,member)
(666,tmp->member->status == AST_DEVICE_UNKNOWN)
(667,newstate)
(668,str)
(669,qe)
(670,ast_channel_cdr(qe->chan)
(671,tmp->chan)
(672,caller)
(673,rrpos)
(674,return 0;)
(675,tmp)
(676,qe->chan)
(677,qe)
(678,qe)
(679,interface)
(680,qe)
(681,tmp->chan)
(682,ast_channel_cdr(tmp->chan)
(683,pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(684,if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(685,busies)
(686,tmp)
(687,parent)
(688,ast_channel_dialed(qe->chan)
(689,qe)
(690,tmp->chan)
(691,return 0;)
(692,)
(693,tmp->member)
(694,tmp)
(695,ast_channel_caller(qe->chan)
(696,ast_channel_cdr(qe->chan)
(697,chan)
(698,chan)
(699,ast_channel_context(qe->chan)
(700,get_queue_member_status(tmp->member)
(701,tmp)
(702,ast_channel_inherit_variables(qe->chan, tmp->chan)
(703,(tmp->member->status != AST_DEVICE_NOT_INUSE)
(704,qe)
(705,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(706,str)
(707,number)
(708,struct queue_ent *qe)
(709,tmp->chan)
(710,id)
(711,qe)
(712,tmp)
(713,"Priority queue delaying call to %s:%s\\n")
(714,ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext)
(715,ast_channel_connected(qe->chan)
(716,qe)
(717,"AgentCalled")
(718,chan)
(719,wrapuptime)
(720,parent)
(721,member)
(722,chan)
(723,if ((tmp->member->status != AST_DEVICE_NOT_INUSE)
(724,tmp)
(725,valid)
(726,qe->chan)
(727,tmp->chan)
(728,ast_channel_cdr(tmp->chan)
(729,tmp->member->status)
(730,0)
(731,qe)
(732,amaflags)
(733,tmp->member)
(734,ast_channel_caller(tmp->chan)
(735,chan)
(736,return 1;)
(737,)
(738,wrapuptime)
(739,member)
(740,time(NULL)
(741,time(NULL)
(742,qe->parent)
(743,tmp->chan)
(744,id)
(745,ast_channel_connected(qe->chan)
(746,eventwhencalled)
(747,chan)
(748,name)
(749,stillgoing)
(750,parent)
(751,chan)
(752,tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(753,transit_network_select)
(754,member)
(755,ast_channel_connected(qe->chan)
(756,ast_channel_cdr(tmp->chan)
(757,macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(758,chan)
(759,tmp->member)
(760,qe->chan)
(761,tmp->stillgoing)
(762,name)
(763,tmp->lastqueue)
(764,channel)
(765,tmp->member->status)
(766,tmp)
(767,location)
(768,chan)
(769,qe->cancel_answered_elsewhere)
(770,strcpy(ast_channel_cdr(tmp->chan)
(771,tmp->lastqueue)
(772,qe->chan)
(773,qe)
(774,qe->parent)
(775,tmp->member)
(776,str)
(777,ast_channel_exten(qe->chan)
(778,tmp)
(779,id)
(780,ast_channel_connected(qe->chan)
(781,ast_channel_caller(qe->chan)
(782,newstate)
(783,tmp)
(784,vars2manager(qe->chan, vars, sizeof(vars)
(785,amaflags)
(786,qe)
(787,id)
(788,tmp)
(789,qe)
(790,id)
(791,get_queue_member_status(tmp->member)
(792,*busies)
(793,NULL)
(794,tmp->chan)
(795,qe)
(796,ast_channel_nativeformats(qe->chan)
(797,status)
(798,if (ast_channel_cdr(qe->chan)
(799,wrapuptime)
(800,chan)
(801,chan)
(802,lastapp)
(803,lastdata)
(804,return 0;)
(805,qe)
(806,chan)
(807,interface)
(808,interface)
(809,0)
(810,chan)
(811,ast_channel_caller(qe->chan)
(812,member)
(813,parent)
(814,ast_channel_unlock(qe->chan)
(815,chan)
(816,qe->chan)
(817,ast_channel_cdr(tmp->chan)
(818,lastqueue)
(819,chan)
(820,chan)
(821,res)
(822,qe)
(823,\'/\')
(824,qe->chan)
(825,qe->linpos)
(826,tmp->chan)
(827,!ast_channel_caller(tmp->chan)
(828,interface)
(829,lastqueue)
(830,)
(831,qe->chan)
(832,tmp->chan)
(833,ast_channel_appl_set(tmp->chan, "AppQueue")
(834,check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(835,tmp)
(836,ast_strlen_zero(ast_channel_dialed(qe->chan)
(837,chan)
(838,tmp->interface)
(839,if (!tmp->chan)
(840,member)
(841,ast_channel_redirecting(qe->chan)
(842,ast_strlen_zero(macrocontext)
(843,ast_channel_cdr(tmp->chan)
(844,qe)
(845,)
(846,qe->chan)
(847,vars)
(848,macrocontext)
(849,manager_event(EVENT_FLAG_AGENT, "AgentCalled",\n\\n\\t\\t\\t"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s",\n\\n\\t\\t\\tqe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan)
(850,macrocontext)
(851,)
(852,)
(853,ast_strlen_zero(macroexten)
(854,tmp->interface)
(855,ast_channel_data_set(tmp->chan, "(Outgoing Line)
(856,tmp)
(857,name)
(858,tmp)
(859,sizeof(*ast_channel_whentohangup(tmp->chan)
(860,lastqueue)
(861,tmp)
(862,chan)
(863,tmp->member)
(864,0)
(865,ast_channel_priority(qe->chan)
(866,1)
(867,strchr(tech, \'/\')
(868,qe->parent)
(869,tmp->chan)
(870,tmp)
(871,caller.id)
(872,tmp->member->status)
(873,tmp)
(874,id)
(875,clid)
(876,strcpy(ast_channel_cdr(tmp->chan)
(877,3)
(878,chan)
(879,)
(880,tmp)
(881,tmp->chan)
(882,ast_channel_cdr(qe->chan)
(883,0)
(884,macroexten)
(885,tmp->member->membername)
(886,)
(887,qe->chan)
(888,lastcall)
(889,chan)
(890,membername)
(891,ast_request(tech, ast_channel_nativeformats(qe->chan)
(892,ast_cdr_busy(ast_channel_cdr(qe->chan)
(893,if (ast_channel_cdr(qe->chan)
(894,chan)
(895,ast_channel_cdr(qe->chan)
(896,tmp->member)
(897,member)
(898,ast_channel_cdr(tmp->chan)
(899,tmp)
(900,tmp->stillgoing = 0)
(901,ast_channel_exten(qe->chan)
(902,qe)
(903,qe)
(904,chan)
(905,tmp->chan)
(906,tech)
(907,chan)
(908,if (tmp->member->paused)
(909,ast_cdr_busy(ast_channel_cdr(qe->chan)
(910,chan)
(911,chan)
(912,)
(913,chan)
(914,linpos)
(915,*busies)
(916,qe->chan)
(917,ani)
(918,valid)
(919,tmp->member->ringinuse)
(920,tmp)
(921,member)
(922,0)
(923,status)
(924,ast_channel_cdr(qe->chan)
(925,parent)
(926,tmp->stillgoing)
(927,chan)
(928,qe)
(929,tmp->interface)
(930,chan)
(931,!tmp->member->ringinuse)
(932,ast_channel_connected(qe->chan)
(933,ast_channel_cdr(qe->chan)
(934,ast_channel_connected(tmp->chan)
(935,ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\\n",\n\\n\\t\\t\\t\\t(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(936,ast_channel_dialed(qe->chan)
(937,ast_channel_context(qe->chan)
(938,(*busies)
(939,ast_channel_connected(qe->chan)
(940,ast_channel_cdr(qe->chan)
(941,ast_channel_connected(qe->chan)
(942,name)
(943,ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan)
(944,id)
(945,if (newstate != tmp->member->status)
(946,ast_channel_uniqueid(qe->chan)
(947,newstate)
(948,tmp->member)
(949,tmp)
(950,qe->chan)
(951,qe->chan)
(952,tmp->chan)
(953,tmp->interface)
(954,*location++ = \'\\0\')
(955,tmp)
(956,qe->parent)
(957,interface)
(958,AST_DEVICE_UNKNOWN)
(959,tmp)
(960,0)
(961,parent)
(962,ast_channel_cdr(qe->chan)
(963,sizeof(tech)
(964,chan)
(965,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)
(966,AST_DEVICE_UNKNOWN)
(967,ast_channel_caller(qe->chan)
(968,return 0;)
(969,tmp)
(970,0)
(971,qe->linpos++)
(972,chan)
(973,S_COR(ast_channel_caller(qe->chan)
(974,macroexten)
(975,"Found a channel matching iterface %s while status was %s changed to %s\\n")
(976,qe->parent)
(977,qe)
(978,macroexten)
(979,ast_channel_connected(qe->chan)
(980,sizeof(vars)
(981,chan)
(982,id)
(983,NULL)
(984,qe)
(985,)
(986,tmp->lastqueue)
(987,parent)
(988,check_state_unknown)
(989,ast_channel_cdr(tmp->chan)
(990,qe)
(991,tmp)
(992,NULL)
(993,tmp->lastqueue->wrapuptime)
(994,channel)
(995,tech)
(996,tmp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^