-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad()
{
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
7,8
8,9
8,10
10,11
10,12
10,13
13,14
14,15
14,16
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
63,66
64,65
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,9,11,12,16,18,21,23,26,27,31,33,38,40,44,46,47,51,53,57,60,62,65,67,70,73,74,78,80,85,87,88,92,94,98,100
-----computeFrom-----
22,23
22,24
29,30
29,31
55,56
55,57
68,69
68,70
76,77
76,78
-----guardedBy-----
78,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad(){    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad
{    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }}
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(29,23,0)
(8,16,0)
(17,23,0)
(16,29,0)
(7,28,0)
(35,34,0)
(28,7,0)
(7,11,0)
(38,17,0)
(5,34,0)
(14,21,0)
(39,0,0)
(11,7,0)
(39,21,0)
(40,34,0)
(15,35,0)
(3,35,0)
(36,41,0)
(23,6,0)
(23,29,0)
(16,1,0)
(6,23,0)
(29,16,0)
(7,35,0)
(29,35,0)
(24,37,0)
(27,35,0)
(37,11,0)
(20,27,0)
(9,2,0)
(38,13,0)
(30,17,0)
(10,1,0)
(31,38,0)
(19,30,0)
(15,34,0)
(41,13,0)
(33,30,0)
(34,12,0)
(37,2,0)
(32,27,0)
(21,39,0)
(2,37,0)
(4,17,0)
(17,34,0)
(22,15,0)
(35,7,0)
(25,34,0)
(41,17,0)
(1,16,0)
(18,29,0)
(23,17,0)
(11,37,0)
(15,35,1)
(11,37,1)
(7,11,1)
(41,17,1)
(1,10,1)
(30,19,1)
(14,27,1)
(37,2,1)
(38,17,1)
(18,4,1)
(16,1,1)
(32,35,1)
(26,38,1)
(39,21,1)
(17,23,1)
(22,27,1)
(8,18,1)
(30,17,1)
(35,7,1)
(21,14,1)
(10,8,1)
(27,35,1)
(29,16,1)
(38,31,1)
(24,3,1)
(33,17,1)
(23,6,1)
(27,20,1)
(41,36,1)
(19,33,1)
(26,30,1)
(22,39,1)
(7,28,1)
(31,41,1)
(36,30,1)
(20,32,1)
(2,9,1)
(29,35,1)
(23,29,1)
(4,15,1)
(15,22,1)
(9,24,1)
(29,16,2)
(31,30,2)
(29,35,2)
(38,17,2)
(37,2,2)
(39,27,2)
(11,37,2)
(7,11,2)
(15,35,2)
(23,29,2)
(23,6,2)
(35,7,2)
(7,28,2)
(16,1,2)
(14,27,2)
(17,23,2)
(30,17,2)
(38,30,2)
(41,30,2)
(39,21,2)
(36,30,2)
(27,35,2)
(41,17,2)
(21,27,2)
-----------------------------------
(0,)
(1,sizeof(wchar_t)
(2,sizeof(wchar_t)
(3,data)
(4,data)
(5,if (data == NULL)
(6,wchar_t *)
(7,(wchar_t *)
(8,130000)
(9,wchar_t)
(10,wchar_t)
(11,malloc(100*sizeof(wchar_t)
(12,)
(13,)
(14,1)
(15,printWLine(data)
(16,(130000)
(17,data = (wchar_t *)
(18,data)
(19,NULL)
(20,NULL)
(21,-1)
(22,data)
(23,(wchar_t *)
(24,100)
(25,data)
(26,RET)
(27,data == NULL)
(28,wchar_t *)
(29,realloc(data, (130000)
(30,data != NULL)
(31,data)
(32,data)
(33,data)
(34,)
(35,* data = (wchar_t *)
(36,data)
(37,100*sizeof(wchar_t)
(38,free(data)
(39,exit(-1)
(40,if (data != NULL)
(41,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^