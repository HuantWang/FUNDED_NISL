-----label-----
1
-----code-----
int all_unlocked(struct client_data* cli_data) {
	int i;
	for ( i = 0; i < MAX_LOCKS_PER_CLIENT; i++ ) {
		if ( cli_data->client_locks[i].state != UNLOCKED ) {
			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",
				i, cli_data->next_lock, cli_data->client_locks[i].state );
			return 0;
		}
	}
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
15,16
17,18
17,19
17,20
17,21
18,19
19,20
19,21
20,21
23,24
23,25
24,25
26,27
28,29
29,30
31,32
32,33
32,34
33,34
33,35
34,35
34,36
35,36
35,37
36,37
36,38
37,38
40,41
43,44
45,46
45,47
46,47
47,48
47,49
47,50
47,51
47,52
47,53
48,49
50,51
53,54
55,56
55,57
56,57
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
68,69
70,71
-----nextToken-----
2,4,7,9,10,14,16,21,22,25,27,30,38,39,41,42,44,49,51,52,54,57,58,63,64,66,67,69,71
-----computeFrom-----
19,20
19,21
23,24
23,25
33,34
33,35
-----guardedBy-----
38,63
39,64
41,66
42,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int all_unlocked(struct client_data* cli_data) {	int i;	for ( i = 0; i < MAX_LOCKS_PER_CLIENT; i++ ) {		if ( cli_data->client_locks[i].state != UNLOCKED ) {			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );			return 0;		}	}	return 1;}
int
all_unlocked(struct client_data* cli_data)
all_unlocked
struct client_data* cli_data
struct client_data
client_data
* cli_data
*
cli_data
{	int i;	for ( i = 0; i < MAX_LOCKS_PER_CLIENT; i++ ) {		if ( cli_data->client_locks[i].state != UNLOCKED ) {			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );			return 0;		}	}	return 1;}
int i;
int i;
int
i
i
for ( i = 0; i < MAX_LOCKS_PER_CLIENT; i++ ) {		if ( cli_data->client_locks[i].state != UNLOCKED ) {			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );			return 0;		}	}
i = 0;
i = 0
i
i
0
i < MAX_LOCKS_PER_CLIENT
i
i
MAX_LOCKS_PER_CLIENT
MAX_LOCKS_PER_CLIENT
i++
i
i
{		if ( cli_data->client_locks[i].state != UNLOCKED ) {			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );			return 0;		}	}
if ( cli_data->client_locks[i].state != UNLOCKED ) {			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );			return 0;		}
cli_data->client_locks[i].state != UNLOCKED
cli_data->client_locks[i].state
cli_data->client_locks[i]
cli_data->client_locks
cli_data
cli_data
client_locks
i
i
state
UNLOCKED
UNLOCKED
{			fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );			return 0;		}
fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state );
fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n",				i, cli_data->next_lock, cli_data->client_locks[i].state )
fprintf
fprintf
stderr
stderr
"%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\n"
i
i
cli_data->next_lock
cli_data
cli_data
next_lock
cli_data->client_locks[i].state
cli_data->client_locks[i]
cli_data->client_locks
cli_data
cli_data
client_locks
i
i
state
return 0;
0
return 1;
1
-----joern-----
(42,21,0)
(21,35,0)
(30,15,0)
(6,36,0)
(27,15,0)
(28,21,0)
(13,26,0)
(21,42,0)
(35,17,0)
(16,39,0)
(1,36,0)
(5,34,0)
(4,12,0)
(32,17,0)
(11,29,0)
(40,36,0)
(10,33,0)
(18,34,0)
(36,31,0)
(22,18,0)
(23,35,0)
(37,42,0)
(21,19,0)
(36,6,0)
(27,6,0)
(15,26,0)
(12,14,0)
(39,19,0)
(15,19,0)
(26,31,0)
(15,27,0)
(42,31,0)
(41,19,0)
(6,27,0)
(35,21,0)
(15,14,0)
(17,35,0)
(26,15,0)
(4,18,0)
(0,29,0)
(7,19,0)
(29,19,0)
(2,6,0)
(20,34,0)
(9,42,0)
(24,12,0)
(38,15,0)
(6,19,0)
(8,27,0)
(3,15,0)
(25,26,0)
(28,42,1)
(15,26,1)
(18,22,1)
(36,40,1)
(39,16,1)
(4,18,1)
(15,19,1)
(21,42,1)
(11,39,1)
(9,29,1)
(27,6,1)
(35,23,1)
(15,27,1)
(29,0,1)
(26,31,1)
(17,32,1)
(7,41,1)
(6,36,1)
(2,36,1)
(42,31,1)
(39,19,1)
(4,12,1)
(8,6,1)
(27,8,1)
(24,15,1)
(26,25,1)
(22,29,1)
(32,35,1)
(19,7,1)
(0,11,1)
(6,19,1)
(12,24,1)
(29,19,1)
(36,31,1)
(1,26,1)
(16,17,1)
(40,1,1)
(25,13,1)
(42,37,1)
(21,28,1)
(3,17,1)
(21,19,1)
(38,3,1)
(23,21,1)
(6,2,1)
(17,35,1)
(11,19,1)
(13,30,1)
(30,38,1)
(37,9,1)
(35,21,1)
(2,17,2)
(16,17,2)
(22,29,2)
(6,36,2)
(8,17,2)
(17,29,2)
(36,31,2)
(0,17,2)
(35,21,2)
(11,17,2)
(36,17,2)
(30,17,2)
(15,26,2)
(13,17,2)
(6,19,2)
(40,17,2)
(35,29,2)
(26,17,2)
(6,17,2)
(21,42,2)
(25,17,2)
(27,17,2)
(39,19,2)
(42,31,2)
(37,29,2)
(39,17,2)
(21,19,2)
(4,12,2)
(15,17,2)
(21,29,2)
(12,17,2)
(17,35,2)
(23,29,2)
(32,29,2)
(29,19,2)
(24,17,2)
(26,31,2)
(29,17,2)
(18,29,2)
(4,18,2)
(15,27,2)
(42,29,2)
(38,17,2)
(1,17,2)
(27,6,2)
(28,29,2)
(9,29,2)
(3,17,2)
(15,19,2)
-----------------------------------
(0,MAX_LOCKS_PER_CLIENT)
(1,cli_data)
(2,i)
(3,stderr)
(4,RET)
(5,for ( i = 0; i < MAX_LOCKS_PER_CLIENT; i++ )
(6,cli_data->client_locks[i])
(7,0)
(8,state)
(9,cli_data)
(10,if ( cli_data->client_locks[i].state != UNLOCKED )
(11,i)
(12,return 0;)
(13,cli_data)
(14,)
(15,fprintf( stderr, "%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\\n",\n\\n\\t\\t\\t\\ti, cli_data->next_lock, cli_data->client_locks[i].state )
(16,i)
(17,cli_data->client_locks[i].state != UNLOCKED)
(18,return 1;)
(19,i = 0)
(20,i)
(21,cli_data->client_locks[i])
(22,1)
(23,state)
(24,0)
(25,next_lock)
(26,cli_data->next_lock)
(27,cli_data->client_locks[i].state)
(28,i)
(29,i < MAX_LOCKS_PER_CLIENT)
(30,i)
(31,struct client_data* cli_data)
(32,UNLOCKED)
(33,)
(34,)
(35,cli_data->client_locks[i].state)
(36,cli_data->client_locks)
(37,client_locks)
(38,"%d lock still locked after free_client_data.  next_lock is %d.  State is %d.\\n")
(39,i++)
(40,client_locks)
(41,i)
(42,cli_data->client_locks)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^