-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticFive==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(20,19,0)
(29,22,0)
(39,26,0)
(16,12,0)
(15,32,0)
(47,35,0)
(51,48,0)
(6,32,0)
(23,17,0)
(53,6,0)
(6,20,0)
(34,20,0)
(36,18,0)
(5,6,0)
(37,2,0)
(25,22,0)
(17,49,0)
(19,20,0)
(9,13,0)
(5,39,0)
(11,35,0)
(16,40,0)
(2,27,0)
(14,52,0)
(43,27,0)
(3,53,0)
(41,52,0)
(18,45,0)
(46,12,0)
(27,20,0)
(27,32,0)
(33,49,0)
(21,8,0)
(12,16,0)
(14,49,0)
(8,49,0)
(50,22,0)
(6,53,0)
(28,32,0)
(32,22,0)
(26,39,0)
(49,52,0)
(39,49,0)
(13,4,0)
(31,14,0)
(39,5,0)
(30,6,0)
(49,39,0)
(20,24,0)
(27,2,0)
(7,14,0)
(10,49,0)
(33,52,0)
(1,48,0)
(17,52,0)
(6,5,0)
(42,8,0)
(0,13,0)
(44,33,0)
(37,43,1)
(6,20,1)
(6,53,1)
(14,49,1)
(7,16,1)
(11,47,1)
(34,48,1)
(35,11,1)
(8,49,1)
(16,12,1)
(27,32,1)
(19,34,1)
(31,7,1)
(2,37,1)
(23,14,1)
(30,10,1)
(33,44,1)
(7,8,1)
(10,27,1)
(38,33,1)
(27,20,1)
(49,39,1)
(39,26,1)
(14,31,1)
(5,6,1)
(18,36,1)
(33,49,1)
(6,32,1)
(51,1,1)
(8,42,1)
(44,17,1)
(38,35,1)
(36,27,1)
(1,32,1)
(3,30,1)
(39,5,1)
(17,49,1)
(32,15,1)
(17,23,1)
(27,2,1)
(53,3,1)
(42,21,1)
(15,28,1)
(47,20,1)
(43,35,1)
(38,18,1)
(20,19,1)
(47,48,1)
(48,51,1)
(12,46,1)
(21,49,1)
(46,8,1)
(16,12,2)
(36,27,2)
(17,49,2)
(12,8,2)
(8,27,2)
(7,27,2)
(8,49,2)
(20,19,2)
(53,27,2)
(19,48,2)
(23,27,2)
(5,6,2)
(10,27,2)
(27,20,2)
(49,27,2)
(39,5,2)
(27,35,2)
(27,2,2)
(44,27,2)
(6,53,2)
(46,8,2)
(3,27,2)
(6,20,2)
(39,26,2)
(6,32,2)
(14,27,2)
(16,8,2)
(5,27,2)
(14,49,2)
(6,27,2)
(49,39,2)
(33,49,2)
(18,27,2)
(37,35,2)
(33,27,2)
(39,27,2)
(30,27,2)
(20,48,2)
(17,27,2)
(21,27,2)
(42,27,2)
(34,48,2)
(43,35,2)
(31,27,2)
(27,32,2)
(2,35,2)
-----------------------------------
(0,myString)
(1,staticFive)
(2,strlen(HELLO_STRING)
(3,char)
(4,)
(5,malloc(data*sizeof(char)
(6,data*sizeof(char)
(7,myString)
(8,myString == NULL)
(9,if (data > strlen(HELLO_STRING)
(10,myString)
(11,5)
(12,-1)
(13,)
(14,strcpy(myString, HELLO_STRING)
(15,0)
(16,exit(-1)
(17,printLine(myString)
(18,printLine("Input is less than the length of the source string")
(19,rand()
(20,data = rand()
(21,myString)
(22,)
(23,myString)
(24,)
(25,if(staticFive==5)
(26,char *)
(27,data > strlen(HELLO_STRING)
(28,data)
(29,if(staticFive==5)
(30,data)
(31,HELLO_STRING)
(32,data = 0)
(33,free(myString)
(34,data)
(35,staticFive==5)
(36,"Input is less than the length of the source string")
(37,HELLO_STRING)
(38,RET)
(39,(char *)
(40,)
(41,if (myString == NULL)
(42,NULL)
(43,data)
(44,myString)
(45,)
(46,1)
(47,staticFive)
(48,staticFive==5)
(49,myString = (char *)
(50,data)
(51,5)
(52,)
(53,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^