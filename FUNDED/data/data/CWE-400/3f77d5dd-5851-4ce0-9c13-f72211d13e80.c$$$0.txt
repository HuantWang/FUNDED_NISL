-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
70,71
70,72
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,66,67,69,71,72
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_18_bad(){    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_malloc_18_bad()
CWE401_Memory_Leak__int_malloc_18_bad
{    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));
source
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(28,23,0)
(23,2,0)
(13,32,0)
(11,1,0)
(19,4,0)
(3,1,0)
(20,2,0)
(13,27,0)
(32,25,0)
(5,30,0)
(33,1,0)
(35,4,0)
(4,1,0)
(10,1,0)
(29,18,0)
(24,1,0)
(12,15,0)
(18,25,0)
(31,1,0)
(21,3,0)
(26,2,0)
(34,23,0)
(14,5,0)
(25,32,0)
(32,13,0)
(9,25,0)
(6,26,0)
(15,12,0)
(5,14,0)
(22,26,0)
(27,13,0)
(0,1,0)
(2,13,0)
(15,3,0)
(17,15,0)
(7,15,0)
(2,1,0)
(15,2,0)
(12,1,0)
(25,18,0)
(16,14,0)
(13,2,0)
(26,3,0)
(3,21,1)
(25,18,1)
(14,16,1)
(15,2,1)
(2,13,1)
(4,19,1)
(16,23,1)
(12,15,1)
(23,2,1)
(22,5,1)
(15,17,1)
(19,35,1)
(9,20,1)
(26,2,1)
(18,29,1)
(5,14,1)
(20,10,1)
(29,9,1)
(17,7,1)
(34,2,1)
(13,27,1)
(7,3,1)
(23,28,1)
(26,6,1)
(28,34,1)
(15,3,1)
(10,4,1)
(13,32,1)
(32,25,1)
(31,12,1)
(8,31,1)
(21,26,1)
(6,22,1)
(22,23,1)
(14,23,2)
(13,27,2)
(32,25,2)
(26,2,2)
(13,32,2)
(15,3,2)
(15,2,2)
(5,14,2)
(5,23,2)
(25,18,2)
(2,13,2)
(16,23,2)
(23,2,2)
(12,15,2)
-----------------------------------
(0,sink:)
(1,)
(2,data = (int *)
(3,data[0] = 5)
(4,data = NULL)
(5,exit(-1)
(6,0)
(7,data)
(8,RET)
(9,100)
(10,goto source;)
(11,if (data == NULL)
(12,printIntLine(data[0])
(13,(int *)
(14,-1)
(15,data[0])
(16,1)
(17,0)
(18,sizeof(int)
(19,NULL)
(20,data)
(21,5)
(22,data)
(23,data == NULL)
(24,source:)
(25,100*sizeof(int)
(26,data[0])
(27,int *)
(28,NULL)
(29,int)
(30,)
(31,goto sink;)
(32,malloc(100*sizeof(int)
(33,data)
(34,data)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^