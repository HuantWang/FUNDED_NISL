-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_sleep_12_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
42,44
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
77,78
78,79
79,80
79,81
80,81
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,37,41,46,48,52,53,59,60,63,64,69,71,75,76,81,82
-----computeFrom-----
12,13
12,14
34,35
34,36
56,57
56,58
57,58
57,59
61,62
61,63
-----guardedBy-----
63,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_sleep_12_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
void
CWE400_Resource_Exhaustion__fscanf_sleep_12_bad()
CWE400_Resource_Exhaustion__fscanf_sleep_12_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(37,9,0)
(16,4,0)
(31,7,0)
(21,24,0)
(2,21,0)
(9,28,0)
(16,28,0)
(32,28,0)
(9,20,0)
(28,7,0)
(21,20,0)
(42,32,0)
(8,11,0)
(13,17,0)
(25,32,0)
(29,20,0)
(11,28,0)
(1,20,0)
(30,16,0)
(19,23,0)
(24,32,0)
(14,7,0)
(40,28,0)
(24,21,0)
(6,28,0)
(5,26,0)
(28,6,0)
(9,39,0)
(23,10,0)
(12,27,0)
(18,6,0)
(41,7,0)
(32,24,0)
(33,0,0)
(20,35,0)
(11,26,0)
(22,26,0)
(17,39,0)
(26,15,0)
(26,11,0)
(16,20,0)
(32,20,0)
(21,28,0)
(0,4,0)
(36,21,0)
(17,13,1)
(21,20,1)
(9,28,1)
(18,40,1)
(6,18,1)
(5,22,1)
(34,17,1)
(0,33,1)
(30,24,1)
(20,29,1)
(34,23,1)
(23,19,1)
(22,3,1)
(32,20,1)
(37,38,1)
(38,20,1)
(36,38,1)
(21,28,1)
(8,5,1)
(21,2,1)
(32,25,1)
(42,21,1)
(24,32,1)
(11,8,1)
(13,9,1)
(24,21,1)
(16,28,1)
(9,20,1)
(1,3,1)
(26,11,1)
(38,26,1)
(9,37,1)
(11,28,1)
(16,30,1)
(3,28,1)
(34,0,1)
(19,24,1)
(29,1,1)
(16,20,1)
(32,28,1)
(33,16,1)
(28,6,1)
(25,42,1)
(2,36,1)
(23,24,2)
(2,38,2)
(42,21,2)
(1,3,2)
(21,20,2)
(8,3,2)
(17,38,2)
(21,38,2)
(25,21,2)
(9,28,2)
(5,3,2)
(32,21,2)
(11,3,2)
(26,3,2)
(0,24,2)
(21,28,2)
(9,38,2)
(26,11,2)
(24,21,2)
(37,38,2)
(16,24,2)
(36,38,2)
(13,38,2)
(11,28,2)
(28,6,2)
(16,20,2)
(16,28,2)
(29,3,2)
(19,24,2)
(24,32,2)
(32,20,2)
(30,24,2)
(33,24,2)
(24,38,2)
(9,20,2)
(20,3,2)
(32,28,2)
(22,3,2)
-----------------------------------
(0,printLine("Sleep time OK")
(1,count)
(2,0)
(3,globalReturnsTrueOrFalse()
(4,)
(5,"%d")
(6,-1)
(7,)
(8,count)
(9,SLEEP(count)
(10,)
(11,&count)
(12,if (count > 0 && count <= 2000)
(13,"Sleep time possibly too long")
(14,if(globalReturnsTrueOrFalse()
(15,)
(16,SLEEP(count)
(17,printLine("Sleep time possibly too long")
(18,1)
(19,"Sleep time too long")
(20,count = 20)
(21,count > 0)
(22,stdin)
(23,printLine("Sleep time too long")
(24,count > 0 && count <= 2000)
(25,2000)
(26,fscanf(stdin, "%d", &count)
(27,)
(28,count = -1)
(29,20)
(30,count)
(31,count)
(32,count <= 2000)
(33,"Sleep time OK")
(34,RET)
(35,)
(36,count)
(37,count)
(38,globalReturnsTrueOrFalse()
(39,)
(40,count)
(41,if(globalReturnsTrueOrFalse()
(42,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^