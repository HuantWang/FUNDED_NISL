-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_16_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
52,53
52,54
53,54
53,55
54,55
57,58
59,60
60,61
62,63
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,29,30,32,38,40,42,47,48,51,55,56,58,61,66,67,68
-----computeFrom-----
12,13
12,14
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_16_bad(){    int count;    /* Initialize count */    count = -1;    while(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    }    while(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_16_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_16_bad
{    int count;    /* Initialize count */    count = -1;    while(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    }    while(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    }
1
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
break;
while(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
-----joern-----
(0,35,0)
(23,22,0)
(18,22,0)
(4,9,0)
(8,33,0)
(8,11,0)
(37,23,0)
(14,10,0)
(12,10,0)
(33,23,0)
(19,10,0)
(37,21,0)
(30,2,0)
(31,9,0)
(7,15,0)
(29,11,0)
(13,37,0)
(6,23,0)
(20,23,0)
(9,2,0)
(33,8,0)
(15,10,0)
(34,35,0)
(27,22,0)
(1,33,0)
(26,6,0)
(21,37,0)
(17,22,0)
(15,37,0)
(32,16,0)
(24,19,0)
(3,8,0)
(35,9,0)
(23,6,0)
(37,15,0)
(38,32,0)
(36,8,0)
(15,10,1)
(5,29,1)
(1,36,1)
(3,28,1)
(0,34,1)
(35,0,1)
(37,23,1)
(24,32,1)
(12,14,1)
(6,26,1)
(32,38,1)
(19,24,1)
(14,35,1)
(7,19,1)
(13,7,1)
(28,23,1)
(37,21,1)
(34,5,1)
(25,5,1)
(36,3,1)
(7,10,1)
(25,30,1)
(8,33,1)
(15,37,1)
(19,10,1)
(30,15,1)
(33,23,1)
(5,28,1)
(37,13,1)
(26,20,1)
(33,1,1)
(23,6,1)
(38,15,1)
(29,8,1)
(10,12,1)
(13,5,2)
(37,15,2)
(15,10,2)
(12,5,2)
(36,28,2)
(37,5,2)
(0,5,2)
(8,33,2)
(37,23,2)
(15,15,2)
(10,5,2)
(14,5,2)
(33,23,2)
(38,15,2)
(24,15,2)
(8,28,2)
(13,15,2)
(19,10,2)
(23,6,2)
(29,28,2)
(35,5,2)
(32,15,2)
(7,15,2)
(15,37,2)
(34,5,2)
(33,28,2)
(3,28,2)
(1,28,2)
(7,5,2)
(19,15,2)
(37,21,2)
(30,5,2)
(15,5,2)
-----------------------------------
(0,0)
(1,count)
(2,)
(3,stdin)
(4,for (i = 0; i < (size_t)
(5,1)
(6,-1)
(7,i)
(8,fscanf(stdin, "%d", &count)
(9,)
(10,i = 0)
(11,)
(12,0)
(13,count)
(14,i)
(15,i < (size_t)
(16,)
(17,count)
(18,while(1)
(19,i++)
(20,count)
(21,size_t)
(22,)
(23,count = -1)
(24,i)
(25,RET)
(26,1)
(27,while(1)
(28,1)
(29,break;)
(30,break;)
(31,i)
(32,printLine("Hello")
(33,&count)
(34,i)
(35,i = 0)
(36,"%d")
(37,(size_t)
(38,"Hello")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^