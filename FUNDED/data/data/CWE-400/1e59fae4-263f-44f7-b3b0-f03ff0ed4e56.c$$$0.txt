-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_53d_goodB2GSink(size_t data)
{
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_53d_goodB2GSink(size_t data){    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_53d_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_53d_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(16,18,0)
(17,29,0)
(5,26,0)
(39,14,0)
(36,35,0)
(11,18,0)
(29,30,0)
(6,14,0)
(13,16,0)
(7,23,0)
(26,41,0)
(31,35,0)
(4,21,0)
(9,8,0)
(25,7,0)
(3,37,0)
(18,41,0)
(34,4,0)
(8,9,0)
(22,19,0)
(12,41,0)
(19,21,0)
(40,7,0)
(16,21,0)
(28,19,0)
(36,23,0)
(0,8,0)
(38,5,0)
(27,36,0)
(5,2,0)
(15,36,0)
(26,5,0)
(5,23,0)
(27,7,0)
(7,27,0)
(4,18,0)
(19,18,0)
(1,2,0)
(37,33,0)
(41,26,0)
(14,18,0)
(41,12,0)
(2,5,0)
(36,27,0)
(18,21,0)
(41,18,0)
(9,10,0)
(20,21,0)
(24,37,0)
(35,36,0)
(36,23,1)
(16,13,1)
(22,14,1)
(1,38,1)
(18,41,1)
(41,12,1)
(31,15,1)
(4,34,1)
(7,23,1)
(27,7,1)
(17,27,1)
(36,35,1)
(32,4,1)
(26,5,1)
(22,9,1)
(41,26,1)
(9,8,1)
(16,18,1)
(38,11,1)
(8,0,1)
(25,40,1)
(28,22,1)
(11,27,1)
(34,16,1)
(19,28,1)
(19,18,1)
(40,36,1)
(2,1,1)
(29,17,1)
(5,23,1)
(14,18,1)
(27,36,1)
(5,2,1)
(14,6,1)
(4,18,1)
(7,25,1)
(35,31,1)
(39,18,1)
(32,29,1)
(6,39,1)
(0,14,1)
(13,19,1)
(4,27,2)
(26,5,2)
(14,18,2)
(7,23,2)
(36,23,2)
(8,14,2)
(41,26,2)
(22,27,2)
(18,27,2)
(0,14,2)
(9,14,2)
(34,27,2)
(26,27,2)
(14,27,2)
(19,27,2)
(36,35,2)
(41,27,2)
(25,36,2)
(16,18,2)
(9,8,2)
(5,27,2)
(1,27,2)
(17,27,2)
(27,7,2)
(16,27,2)
(39,27,2)
(27,36,2)
(2,27,2)
(5,2,2)
(41,12,2)
(18,41,2)
(5,23,2)
(40,36,2)
(28,27,2)
(11,27,2)
(38,27,2)
(4,18,2)
(19,18,2)
(29,27,2)
(6,27,2)
(13,27,2)
(7,36,2)
-----------------------------------
(0,1)
(1,wchar_t)
(2,sizeof(wchar_t)
(3,if (data > wcslen(HELLO_STRING)
(4,free(myString)
(5,data*sizeof(wchar_t)
(6,NULL)
(7,data < 100)
(8,-1)
(9,exit(-1)
(10,)
(11,myString)
(12,wchar_t *)
(13,myString)
(14,myString == NULL)
(15,data)
(16,printWLine(myString)
(17,"Input is less than the length of the source string or too large")
(18,myString = (wchar_t *)
(19,wcscpy(myString, HELLO_STRING)
(20,if (myString == NULL)
(21,)
(22,myString)
(23,size_t data)
(24,myString)
(25,100)
(26,malloc(data*sizeof(wchar_t)
(27,data > wcslen(HELLO_STRING)
(28,HELLO_STRING)
(29,printLine("Input is less than the length of the source string or too large")
(30,)
(31,HELLO_STRING)
(32,RET)
(33,)
(34,myString)
(35,wcslen(HELLO_STRING)
(36,data > wcslen(HELLO_STRING)
(37,)
(38,data)
(39,myString)
(40,data)
(41,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^