-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
48,49
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
74,75
75,76
77,78
78,79
78,80
80,81
80,82
82,83
83,84
85,86
85,87
86,87
86,88
86,89
86,90
86,91
86,92
86,93
86,94
86,95
86,96
86,97
86,98
86,99
86,100
87,88
88,89
88,90
89,90
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
113,114
116,117
117,118
118,119
120,121
121,122
121,123
122,123
122,124
123,124
126,127
128,129
129,130
129,131
130,131
130,132
131,132
131,133
132,133
136,137
138,139
139,140
139,141
140,141
140,142
141,142
144,145
144,146
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
151,155
152,153
154,155
156,157
156,158
157,158
157,159
158,159
160,161
162,163
163,164
165,166
166,167
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
175,177
175,178
176,177
178,179
180,181
182,183
184,185
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
191,192
193,194
195,196
197,198
199,200
199,201
200,201
200,202
201,202
203,204
205,206
207,208
208,209
208,210
209,210
211,212
211,213
211,214
211,215
211,216
212,213
214,215
216,217
218,219
218,220
219,220
223,224
223,225
224,225
224,226
225,226
225,227
226,227
228,229
230,231
230,232
231,232
234,235
236,237
237,238
237,239
238,239
238,240
239,240
241,242
244,245
245,246
245,247
246,247
248,249
248,250
249,250
251,252
254,255
254,256
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
265,266
267,268
267,269
268,269
268,270
269,270
271,272
273,274
274,275
275,276
275,277
276,277
278,279
280,281
281,282
281,283
282,283
283,284
285,286
287,288
287,289
288,289
289,290
289,291
291,292
291,293
293,294
294,295
295,296
297,298
297,299
297,300
297,301
298,299
299,300
299,301
300,301
302,303
302,304
304,305
306,307
307,308
307,309
308,309
310,311
310,312
310,313
313,314
314,315
316,317
317,318
317,319
319,320
319,321
319,322
322,323
324,325
324,326
325,326
325,327
326,327
326,328
327,328
330,331
330,332
331,332
334,335
334,336
334,337
334,338
335,336
336,337
336,338
337,338
339,340
339,341
339,342
340,341
342,343
345,346
345,347
346,347
346,348
347,348
349,350
351,352
352,353
353,354
353,355
354,355
357,358
357,359
357,360
357,361
358,359
359,360
359,361
360,361
363,364
363,365
364,365
366,367
366,368
367,368
367,369
368,369
371,372
373,374
374,375
376,377
377,378
377,379
378,379
378,380
379,380
379,381
380,381
382,383
384,385
384,386
384,387
384,388
384,389
385,386
387,388
389,390
390,391
390,392
393,394
393,395
394,395
396,397
398,399
400,401
401,402
401,403
402,403
405,406
405,407
406,407
408,409
409,410
410,411
410,412
411,412
413,414
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,56,58,62,64,67,71,73,76,79,81,84,90,93,95,97,99,103,105,107,111,114,115,119,124,125,127,133,134,135,137,142,143,146,148,153,155,159,161,164,168,170,172,177,179,181,183,185,189,192,194,196,198,202,204,206,210,213,215,217,220,221,222,227,229,232,233,235,240,242,243,247,250,252,253,257,259,264,266,270,272,277,279,284,286,290,292,296,301,303,305,309,311,312,315,318,320,321,323,328,329,332,333,338,341,343,344,348,350,355,356,361,362,365,369,370,372,375,381,383,386,388,391,392,395,397,399,403,404,407,412,414
-----computeFrom-----
32,33
32,34
88,89
88,90
101,102
101,103
121,122
121,123
129,130
129,131
139,140
139,141
150,151
150,152
174,175
174,176
187,188
187,189
200,201
200,202
208,209
208,210
218,219
218,220
224,225
224,226
225,226
225,227
230,231
230,232
237,238
237,239
245,246
245,247
255,256
255,257
268,269
268,270
281,282
281,283
325,326
325,327
326,327
326,328
330,331
330,332
336,337
336,338
346,347
346,348
359,360
359,361
363,364
363,365
378,379
378,380
-----guardedBy-----
257,266
270,279
332,372
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G()
goodB2G
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(80,245,0)
(113,139,0)
(100,109,0)
(212,194,0)
(83,124,0)
(57,223,0)
(41,111,0)
(92,64,0)
(159,136,0)
(162,152,0)
(105,201,0)
(84,163,0)
(183,66,0)
(77,98,0)
(134,5,0)
(2,219,0)
(73,194,0)
(156,165,0)
(136,87,0)
(119,132,0)
(198,48,0)
(169,15,0)
(161,26,0)
(23,219,0)
(12,109,0)
(139,147,0)
(103,245,0)
(163,116,0)
(49,189,0)
(132,143,0)
(99,103,0)
(62,220,0)
(96,97,0)
(154,41,0)
(38,66,0)
(27,204,0)
(94,100,0)
(32,200,0)
(139,209,0)
(131,54,0)
(170,38,0)
(144,9,0)
(135,87,0)
(196,43,0)
(124,15,0)
(109,100,0)
(45,9,0)
(187,192,0)
(63,204,0)
(4,178,0)
(193,50,0)
(36,93,0)
(220,108,0)
(26,219,0)
(55,82,0)
(200,103,0)
(59,12,0)
(110,208,0)
(16,181,0)
(102,164,0)
(210,87,0)
(189,9,0)
(152,66,0)
(188,9,0)
(67,106,0)
(25,54,0)
(239,34,0)
(97,178,0)
(142,153,0)
(54,25,0)
(22,136,0)
(33,244,0)
(184,163,0)
(157,97,0)
(181,82,0)
(195,1,0)
(217,9,0)
(14,126,0)
(72,85,0)
(31,216,0)
(147,139,0)
(102,25,0)
(21,242,0)
(87,135,0)
(168,203,0)
(204,27,0)
(155,145,0)
(41,201,0)
(174,192,0)
(96,160,0)
(172,170,0)
(209,139,0)
(75,9,0)
(79,236,0)
(212,242,0)
(222,135,0)
(243,71,0)
(127,153,0)
(179,80,0)
(132,245,0)
(245,26,0)
(43,85,0)
(37,9,0)
(34,191,0)
(76,28,0)
(164,152,0)
(245,15,0)
(227,206,0)
(219,15,0)
(90,66,0)
(69,2,0)
(236,219,0)
(240,42,0)
(223,169,0)
(53,26,0)
(27,111,0)
(3,116,0)
(213,25,0)
(169,223,0)
(95,219,0)
(205,191,0)
(87,210,0)
(182,9,0)
(201,128,0)
(35,5,0)
(220,62,0)
(58,23,0)
(211,55,0)
(28,219,0)
(71,86,0)
(201,66,0)
(166,43,0)
(146,191,0)
(204,98,0)
(242,212,0)
(71,96,0)
(129,182,0)
(122,74,0)
(140,109,0)
(197,181,0)
(165,9,0)
(70,15,0)
(23,165,0)
(220,96,0)
(242,48,0)
(65,220,0)
(127,25,0)
(103,48,0)
(55,111,0)
(89,220,0)
(164,169,0)
(87,219,0)
(153,127,0)
(225,165,0)
(23,123,0)
(107,15,0)
(18,194,0)
(9,152,0)
(48,103,0)
(125,113,0)
(114,182,0)
(233,236,0)
(192,15,0)
(180,38,0)
(87,136,0)
(164,153,0)
(101,0,0)
(190,245,0)
(29,202,0)
(13,200,0)
(20,160,0)
(19,146,0)
(80,182,0)
(230,164,0)
(225,219,0)
(111,183,0)
(215,225,0)
(11,183,0)
(40,27,0)
(17,189,0)
(81,191,0)
(26,245,0)
(224,178,0)
(108,0,0)
(25,66,0)
(48,15,0)
(141,242,0)
(232,160,0)
(2,64,0)
(221,169,0)
(111,41,0)
(5,14,0)
(68,26,0)
(115,62,0)
(133,2,0)
(117,146,0)
(132,182,0)
(121,66,0)
(148,15,0)
(27,40,0)
(237,190,0)
(108,220,0)
(116,15,0)
(231,15,0)
(7,203,0)
(14,15,0)
(118,165,0)
(181,111,0)
(91,9,0)
(203,96,0)
(149,210,0)
(153,152,0)
(126,14,0)
(82,55,0)
(234,98,0)
(186,113,0)
(208,124,0)
(85,43,0)
(97,96,0)
(138,220,0)
(109,12,0)
(176,15,0)
(175,191,0)
(220,138,0)
(219,236,0)
(151,191,0)
(208,48,0)
(199,9,0)
(241,96,0)
(120,160,0)
(74,51,0)
(150,28,0)
(88,207,0)
(52,159,0)
(137,80,0)
(61,127,0)
(216,98,0)
(173,9,0)
(194,48,0)
(0,108,0)
(109,15,0)
(136,22,0)
(145,15,0)
(238,9,0)
(214,55,0)
(130,97,0)
(8,9,0)
(56,236,0)
(139,113,0)
(104,208,0)
(103,200,0)
(47,103,0)
(158,15,0)
(218,225,0)
(177,126,0)
(6,27,0)
(64,2,0)
(235,103,0)
(10,128,0)
(226,209,0)
(128,201,0)
(46,87,0)
(78,245,0)
(194,212,0)
(39,102,0)
(38,170,0)
(178,191,0)
(171,190,0)
(185,138,0)
(24,66,0)
(82,181,0)
(136,159,0)
(112,147,0)
(191,183,0)
(60,34,0)
(85,145,0)
(44,111,0)
(181,197,1)
(203,96,1)
(242,48,1)
(204,27,1)
(185,62,1)
(115,89,1)
(65,138,1)
(132,182,1)
(136,159,1)
(179,23,1)
(23,219,1)
(103,235,1)
(6,63,1)
(31,106,1)
(129,114,1)
(72,43,1)
(63,98,1)
(241,82,1)
(154,44,1)
(168,96,1)
(174,147,1)
(220,62,1)
(209,226,1)
(234,203,1)
(240,190,1)
(62,115,1)
(105,25,1)
(190,171,1)
(200,32,1)
(87,219,1)
(29,210,1)
(204,98,1)
(74,122,1)
(82,55,1)
(114,165,1)
(27,6,1)
(26,68,1)
(73,18,1)
(220,65,1)
(17,49,1)
(184,109,1)
(235,200,1)
(155,85,1)
(85,43,1)
(203,7,1)
(4,146,1)
(10,105,1)
(126,177,1)
(76,219,1)
(141,194,1)
(164,230,1)
(104,110,1)
(157,241,1)
(245,26,1)
(124,83,1)
(145,155,1)
(179,225,1)
(108,220,1)
(210,87,1)
(100,94,1)
(236,56,1)
(134,35,1)
(103,200,1)
(243,228,1)
(23,58,1)
(215,227,1)
(110,212,1)
(150,76,1)
(170,172,1)
(189,17,1)
(52,46,1)
(71,243,1)
(39,88,1)
(119,80,1)
(68,161,1)
(164,169,1)
(186,125,1)
(178,224,1)
(19,117,1)
(234,74,1)
(2,69,1)
(177,5,1)
(215,240,1)
(48,103,1)
(215,30,1)
(97,178,1)
(166,196,1)
(222,136,1)
(102,25,1)
(147,139,1)
(97,130,1)
(215,195,1)
(139,113,1)
(182,129,1)
(28,150,1)
(208,104,1)
(12,59,1)
(172,180,1)
(211,178,1)
(36,212,1)
(25,54,1)
(127,61,1)
(167,132,1)
(113,186,1)
(230,102,1)
(92,2,1)
(153,127,1)
(225,219,1)
(187,174,1)
(95,192,1)
(225,165,1)
(59,140,1)
(60,239,1)
(210,149,1)
(14,126,1)
(214,211,1)
(35,145,1)
(229,228,1)
(38,170,1)
(146,19,1)
(196,116,1)
(101,204,1)
(87,135,1)
(163,84,1)
(117,34,1)
(215,29,1)
(64,2,1)
(131,213,1)
(138,185,1)
(180,201,1)
(192,187,1)
(116,3,1)
(165,118,1)
(149,87,1)
(229,71,1)
(159,52,1)
(239,111,1)
(27,40,1)
(109,100,1)
(78,64,1)
(228,204,1)
(102,39,1)
(49,153,1)
(137,179,1)
(156,189,1)
(118,156,1)
(212,194,1)
(136,22,1)
(3,163,1)
(26,219,1)
(41,201,1)
(190,245,1)
(142,38,1)
(225,218,1)
(98,77,1)
(5,134,1)
(28,219,1)
(139,209,1)
(242,21,1)
(56,79,1)
(198,190,1)
(212,242,1)
(125,182,1)
(140,100,1)
(13,47,1)
(237,245,1)
(80,182,1)
(82,181,1)
(229,82,1)
(167,80,1)
(164,153,1)
(218,215,1)
(61,142,1)
(181,111,1)
(109,12,1)
(96,97,1)
(233,95,1)
(220,138,1)
(94,28,1)
(44,164,1)
(43,166,1)
(215,33,1)
(226,113,1)
(30,169,1)
(64,92,1)
(208,48,1)
(132,245,1)
(216,31,1)
(171,237,1)
(7,168,1)
(216,98,1)
(161,53,1)
(221,124,1)
(87,136,1)
(224,4,1)
(85,72,1)
(0,101,1)
(31,108,1)
(197,16,1)
(135,222,1)
(16,55,1)
(220,96,1)
(34,60,1)
(54,131,1)
(46,14,1)
(33,28,1)
(58,225,1)
(71,96,1)
(128,10,1)
(27,111,1)
(169,223,1)
(130,157,1)
(69,133,1)
(53,78,1)
(2,219,1)
(194,48,1)
(88,167,1)
(41,154,1)
(79,233,1)
(132,119,1)
(57,221,1)
(21,141,1)
(194,73,1)
(55,214,1)
(39,167,1)
(112,139,1)
(103,245,1)
(32,13,1)
(23,165,1)
(80,245,1)
(83,208,1)
(125,30,1)
(106,67,1)
(111,41,1)
(215,36,1)
(63,216,1)
(127,25,1)
(195,147,1)
(147,112,1)
(84,184,1)
(201,128,1)
(89,0,1)
(67,108,1)
(219,236,1)
(77,234,1)
(227,64,1)
(108,0,1)
(18,48,1)
(55,111,1)
(47,99,1)
(122,203,1)
(99,198,1)
(80,137,1)
(223,57,1)
(133,210,1)
(46,28,2)
(13,190,2)
(36,212,2)
(227,64,2)
(32,190,2)
(88,167,2)
(92,210,2)
(200,190,2)
(155,28,2)
(139,113,2)
(7,82,2)
(72,28,2)
(71,228,2)
(198,190,2)
(132,245,2)
(241,82,2)
(164,169,2)
(134,28,2)
(27,111,2)
(28,219,2)
(181,111,2)
(174,147,2)
(149,28,2)
(43,28,2)
(177,28,2)
(194,48,2)
(222,28,2)
(97,82,2)
(64,2,2)
(220,62,2)
(87,219,2)
(212,190,2)
(53,64,2)
(159,28,2)
(16,55,2)
(212,242,2)
(147,30,2)
(97,178,2)
(138,204,2)
(185,204,2)
(168,82,2)
(110,212,2)
(190,64,2)
(194,190,2)
(119,80,2)
(108,0,2)
(226,30,2)
(113,30,2)
(209,30,2)
(150,147,2)
(245,64,2)
(31,204,2)
(133,210,2)
(210,87,2)
(98,82,2)
(169,223,2)
(69,210,2)
(35,28,2)
(48,103,2)
(220,138,2)
(103,245,2)
(104,212,2)
(184,28,2)
(30,212,2)
(83,212,2)
(109,12,2)
(125,30,2)
(2,219,2)
(28,147,2)
(223,212,2)
(157,82,2)
(216,204,2)
(147,139,2)
(195,147,2)
(23,225,2)
(166,28,2)
(23,165,2)
(48,190,2)
(212,194,2)
(136,28,2)
(124,212,2)
(233,147,2)
(141,194,2)
(84,28,2)
(101,204,2)
(38,170,2)
(225,165,2)
(163,28,2)
(82,55,2)
(219,147,2)
(116,28,2)
(210,28,2)
(47,190,2)
(122,203,2)
(59,28,2)
(96,97,2)
(109,28,2)
(14,28,2)
(240,190,2)
(64,210,2)
(65,204,2)
(225,219,2)
(85,28,2)
(26,64,2)
(74,203,2)
(94,28,2)
(204,27,2)
(127,25,2)
(171,64,2)
(77,82,2)
(130,82,2)
(79,147,2)
(242,194,2)
(109,100,2)
(220,204,2)
(21,194,2)
(242,48,2)
(73,190,2)
(136,22,2)
(56,147,2)
(132,80,2)
(14,126,2)
(126,28,2)
(89,204,2)
(26,219,2)
(192,147,2)
(27,40,2)
(111,41,2)
(181,55,2)
(235,190,2)
(204,98,2)
(12,28,2)
(87,136,2)
(58,225,2)
(52,28,2)
(164,153,2)
(95,147,2)
(27,204,2)
(186,30,2)
(220,96,2)
(236,147,2)
(82,181,2)
(197,55,2)
(208,212,2)
(87,135,2)
(6,204,2)
(112,30,2)
(204,204,2)
(187,147,2)
(132,182,2)
(99,190,2)
(234,82,2)
(203,82,2)
(145,28,2)
(80,182,2)
(102,25,2)
(140,28,2)
(0,204,2)
(85,43,2)
(25,54,2)
(5,28,2)
(108,220,2)
(67,108,2)
(3,28,2)
(221,212,2)
(100,28,2)
(6,82,2)
(216,98,2)
(80,245,2)
(78,64,2)
(76,147,2)
(161,64,2)
(169,212,2)
(208,48,2)
(153,127,2)
(196,28,2)
(136,159,2)
(96,82,2)
(63,204,2)
(62,204,2)
(243,228,2)
(55,111,2)
(103,200,2)
(106,108,2)
(71,96,2)
(228,82,2)
(219,236,2)
(18,190,2)
(27,82,2)
(87,28,2)
(108,204,2)
(57,212,2)
(139,209,2)
(190,245,2)
(237,64,2)
(2,210,2)
(33,28,2)
(201,128,2)
(23,219,2)
(41,201,2)
(139,30,2)
(63,82,2)
(245,26,2)
(135,28,2)
(203,96,2)
(103,190,2)
(204,82,2)
(68,64,2)
(115,204,2)
(29,210,2)
-----------------------------------
(0,strlen(SENTENCE)
(1,)
(2,listen(listenSocket, LISTEN_BACKLOG)
(3,AF_INET)
(4,filename)
(5,service.sin_port)
(6,count)
(7,NULL)
(8,service)
(9,)
(10,count)
(11,count)
(12,sizeof(service)
(13,CHAR_ARRAY_SIZE)
(14,service.sin_port = htons(TCP_PORT)
(15,)
(16,count)
(17,0)
(18,recvResult)
(19,NULL)
(20,if (pFile == NULL)
(21,0)
(22,struct sockaddr*)
(23,CLOSE_SOCKET(listenSocket)
(24,countPtr2)
(25,*countPtr1 = &count)
(26,accept(listenSocket, NULL, NULL)
(27,(size_t)
(28,listenSocket == INVALID_SOCKET)
(29,break;)
(30,0)
(31,i)
(32,1)
(33,break;)
(34,i = 0)
(35,service)
(36,break;)
(37,if (listenSocket != INVALID_SOCKET)
(38,count = -1)
(39,countPtr1)
(40,size_t)
(41,*countPtr2)
(42,)
(43,service.sin_addr)
(44,count)
(45,recvResult)
(46,listenSocket)
(47,inputBuffer)
(48,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(49,wsaDataInit)
(50,)
(51,)
(52,service)
(53,listenSocket)
(54,&count)
(55,count > 0)
(56,IPPROTO_TCP)
(57,inputBuffer)
(58,listenSocket)
(59,service)
(60,0)
(61,countPtr1)
(62,sizeof(char)
(63,i)
(64,listen(listenSocket, LISTEN_BACKLOG)
(65,pFile)
(66,)
(67,1)
(68,NULL)
(69,LISTEN_BACKLOG)
(70,if (bind(listenSocket, (struct sockaddr*)
(71,fclose(pFile)
(72,s_addr)
(73,SOCKET_ERROR)
(74,exit(1)
(75,inputBuffer)
(76,listenSocket)
(77,0)
(78,acceptSocket)
(79,SOCK_STREAM)
(80,acceptSocket != INVALID_SOCKET)
(81,filename)
(82,count > 0 && count <= 20)
(83,\'\\0\')
(84,sin_family)
(85,service.sin_addr.s_addr)
(86,)
(87,bind(listenSocket, (struct sockaddr*)
(88,WSACleanup()
(89,SENTENCE)
(90,count)
(91,listenSocket)
(92,SOCKET_ERROR)
(93,)
(94,service)
(95,listenSocket)
(96,pFile = fopen(filename, "w+")
(97,fopen(filename, "w+")
(98,i = 0)
(99,acceptSocket)
(100,&service)
(101,SENTENCE)
(102,*countPtr1)
(103,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(104,recvResult)
(105,countPtr2)
(106,exit(1)
(107,if (listenSocket == INVALID_SOCKET)
(108,strlen(SENTENCE)
(109,memset(&service, 0, sizeof(service)
(110,inputBuffer)
(111,count = *countPtr2)
(112,NO_ERROR)
(113,MAKEWORD(2,2)
(114,acceptSocket)
(115,char)
(116,service.sin_family = AF_INET)
(117,pFile)
(118,INVALID_SOCKET)
(119,acceptSocket)
(120,for (i = 0; i < (size_t)
(121,countPtr1)
(122,1)
(123,)
(124,inputBuffer[recvResult] = \'\\0\')
(125,2)
(126,htons(TCP_PORT)
(127,*countPtr1)
(128,&count)
(129,INVALID_SOCKET)
(130,"w+")
(131,count)
(132,CLOSE_SOCKET(acceptSocket)
(133,listenSocket)
(134,sin_port)
(135,sizeof(service)
(136,(struct sockaddr*)
(137,INVALID_SOCKET)
(138,strlen(SENTENCE)
(139,WSAStartup(MAKEWORD(2,2)
(140,0)
(141,recvResult)
(142,count)
(143,)
(144,acceptSocket)
(145,service.sin_addr.s_addr = INADDR_ANY)
(146,*pFile = NULL)
(147,WSAStartup(MAKEWORD(2,2)
(148,if (WSAStartup(MAKEWORD(2,2)
(149,SOCKET_ERROR)
(150,INVALID_SOCKET)
(151,pFile)
(152,)
(153,count = *countPtr1)
(154,countPtr2)
(155,INADDR_ANY)
(156,listenSocket)
(157,filename)
(158,if (recvResult == SOCKET_ERROR || recvResult == 0)
(159,&service)
(160,)
(161,NULL)
(162,count)
(163,service.sin_family)
(164,*countPtr1 = count)
(165,listenSocket = INVALID_SOCKET)
(166,sin_addr)
(167,wsaDataInit)
(168,pFile)
(169,count = atoi(inputBuffer)
(170,-1)
(171,SOCKET_ERROR)
(172,1)
(173,if (acceptSocket != INVALID_SOCKET)
(174,wsaDataInit)
(175,i)
(176,if (listen(listenSocket, LISTEN_BACKLOG)
(177,TCP_PORT)
(178,*filename = "output_good.txt")
(179,acceptSocket)
(180,count)
(181,count <= 20)
(182,acceptSocket = INVALID_SOCKET)
(183,)
(184,service)
(185,SENTENCE)
(186,2)
(187,1)
(188,wsaDataInit)
(189,wsaDataInit = 0)
(190,acceptSocket == SOCKET_ERROR)
(191,)
(192,wsaDataInit = 1)
(193,if (strlen(SENTENCE)
(194,recvResult == SOCKET_ERROR)
(195,break;)
(196,service)
(197,20)
(198,recvResult)
(199,wsaData)
(200,CHAR_ARRAY_SIZE - 1)
(201,*countPtr2 = &count)
(202,)
(203,pFile == NULL)
(204,i < (size_t)
(205,if (count > 0 && count <= 20)
(206,)
(207,)
(208,inputBuffer[recvResult])
(209,&wsaData)
(210,bind(listenSocket, (struct sockaddr*)
(211,count)
(212,recvResult == SOCKET_ERROR || recvResult == 0)
(213,countPtr1)
(214,0)
(215,listenSocket)
(216,i++)
(217,if (wsaDataInit)
(218,INVALID_SOCKET)
(219,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(220,fwrite(SENTENCE, sizeof(char)
(221,count)
(222,service)
(223,atoi(inputBuffer)
(224,"output_good.txt")
(225,listenSocket != INVALID_SOCKET)
(226,wsaData)
(227,break;)
(228,pFile)
(229,RET)
(230,count)
(231,if (acceptSocket == SOCKET_ERROR)
(232,if (pFile)
(233,AF_INET)
(234,i)
(235,0)
(236,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(237,acceptSocket)
(238,do)
(239,i)
(240,break;)
(241,pFile)
(242,recvResult == 0)
(243,pFile)
(244,)
(245,acceptSocket = accept(listenSocket, NULL, NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^