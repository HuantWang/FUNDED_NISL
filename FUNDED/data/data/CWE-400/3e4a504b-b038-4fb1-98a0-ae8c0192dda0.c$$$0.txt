-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(1)
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
49,50
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
64,65
66,67
67,68
69,70
70,71
71,72
71,73
72,73
-----nextToken-----
2,4,8,10,14,16,18,23,26,28,34,36,38,43,44,47,48,54,55,58,62,63,65,68,73,74
-----computeFrom-----
12,13
12,14
21,22
21,23
40,41
40,42
41,42
41,43
45,46
45,47
52,53
52,54
56,57
56,58
-----guardedBy-----
47,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(1)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(1)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
1
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(1)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
1
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(17,1,0)
(39,7,0)
(2,5,0)
(3,5,0)
(0,2,0)
(10,5,0)
(21,22,0)
(18,15,0)
(1,17,0)
(19,25,0)
(24,39,0)
(22,21,0)
(35,21,0)
(13,2,0)
(17,5,0)
(2,21,0)
(12,8,0)
(25,32,0)
(17,21,0)
(28,3,0)
(4,21,0)
(42,15,0)
(20,15,0)
(7,27,0)
(14,4,0)
(21,11,0)
(17,23,0)
(43,18,0)
(38,8,0)
(41,39,0)
(5,3,0)
(2,6,0)
(16,4,0)
(34,7,0)
(23,17,0)
(9,8,0)
(26,36,0)
(23,15,0)
(40,23,0)
(4,5,0)
(6,2,0)
(4,6,0)
(6,4,0)
(31,17,0)
(5,8,0)
(29,7,0)
(30,23,1)
(17,21,1)
(30,33,1)
(39,41,1)
(2,21,1)
(13,39,1)
(40,18,1)
(6,4,1)
(23,17,1)
(18,15,1)
(25,19,1)
(31,40,1)
(37,5,1)
(40,15,1)
(19,23,1)
(4,5,1)
(15,20,1)
(20,42,1)
(17,31,1)
(6,2,1)
(14,16,1)
(16,2,1)
(30,6,1)
(18,43,1)
(33,21,1)
(43,25,1)
(4,14,1)
(42,6,1)
(21,22,1)
(17,5,1)
(2,0,1)
(17,1,1)
(33,37,1)
(0,13,1)
(24,33,1)
(41,24,1)
(22,35,1)
(4,21,1)
(2,5,1)
(28,10,1)
(23,15,1)
(5,3,1)
(3,28,1)
(35,37,1)
(31,6,2)
(6,2,2)
(15,6,2)
(40,6,2)
(20,6,2)
(4,21,2)
(35,37,2)
(4,5,2)
(16,2,2)
(23,17,2)
(17,5,2)
(21,22,2)
(17,21,2)
(2,33,2)
(17,23,2)
(23,15,2)
(24,33,2)
(6,33,2)
(42,6,2)
(18,23,2)
(0,33,2)
(22,37,2)
(5,3,2)
(43,23,2)
(18,15,2)
(31,23,2)
(23,23,2)
(13,33,2)
(17,1,2)
(41,33,2)
(4,2,2)
(6,4,2)
(2,5,2)
(25,23,2)
(39,33,2)
(19,23,2)
(14,2,2)
(17,6,2)
(23,6,2)
(21,37,2)
(40,23,2)
(2,21,2)
-----------------------------------
(0,0)
(1,size_t)
(2,count > 0)
(3,-1)
(4,count <= 20)
(5,count = -1)
(6,count > 0 && count <= 20)
(7,)
(8,)
(9,count)
(10,count)
(11,)
(12,if(1)
(13,count)
(14,20)
(15,i = 0)
(16,count)
(17,(size_t)
(18,i++)
(19,"Hello")
(20,0)
(21,count = RAND32()
(22,RAND32()
(23,i < (size_t)
(24,i)
(25,printLine("Hello")
(26,for (i = 0; i < (size_t)
(27,)
(28,1)
(29,if (count > 0 && count <= 20)
(30,RET)
(31,count)
(32,)
(33,1)
(34,i)
(35,count)
(36,)
(37,1)
(38,if(1)
(39,i = 0)
(40,i)
(41,0)
(42,i)
(43,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^