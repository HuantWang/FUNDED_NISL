-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_03_bad()
{
    int64_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,73,74,76
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
44,45
44,46
57,58
57,59
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_03_bad(){    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_03_bad()
CWE401_Memory_Leak__int64_t_calloc_03_bad
{    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,4,0)
(22,21,0)
(25,14,0)
(26,3,0)
(4,24,0)
(11,16,0)
(27,24,0)
(6,12,0)
(23,3,0)
(20,35,0)
(15,20,0)
(12,5,0)
(2,35,0)
(30,4,0)
(7,18,0)
(14,1,0)
(16,24,0)
(5,12,0)
(18,24,0)
(4,30,0)
(34,35,0)
(9,21,0)
(13,21,0)
(5,17,0)
(31,20,0)
(18,13,0)
(24,21,0)
(33,1,0)
(19,16,0)
(1,14,0)
(29,28,0)
(4,1,0)
(36,35,0)
(13,18,0)
(8,18,0)
(24,4,0)
(0,28,0)
(8,22,1)
(32,3,1)
(27,28,1)
(16,19,1)
(26,23,1)
(4,30,1)
(23,13,1)
(33,27,1)
(29,20,1)
(5,12,1)
(6,16,1)
(22,16,1)
(22,5,1)
(25,33,1)
(18,24,1)
(0,29,1)
(14,25,1)
(15,31,1)
(24,4,1)
(28,0,1)
(20,15,1)
(18,7,1)
(4,1,1)
(23,28,1)
(13,18,1)
(1,14,1)
(19,11,1)
(16,24,1)
(11,24,1)
(3,26,1)
(12,6,1)
(7,8,1)
(8,28,2)
(16,24,2)
(12,16,2)
(24,4,2)
(27,28,2)
(24,28,2)
(6,16,2)
(13,18,2)
(19,28,2)
(33,28,2)
(5,12,2)
(7,28,2)
(25,28,2)
(16,28,2)
(22,28,2)
(4,28,2)
(1,28,2)
(4,1,2)
(4,30,2)
(11,28,2)
(14,28,2)
(18,24,2)
(13,28,2)
(1,14,2)
(5,16,2)
(18,28,2)
-----------------------------------
(0,5)
(1,calloc(100, sizeof(int64_t)
(2,data)
(3,5==5)
(4,(int64_t *)
(5,exit(-1)
(6,1)
(7,0)
(8,data)
(9,if (data == NULL)
(10, sizeof(int64_t)
(11,data)
(12,-1)
(13,printLongLongLine(data[0])
(14,sizeof(int64_t)
(15,NULL)
(16,data == NULL)
(17,)
(18,data[0])
(19,NULL)
(20,data = NULL)
(21,)
(22,L)
(23,5)
(24,data = (int64_t *)
(25,int64_t)
(26,5)
(27,data)
(28,5==5)
(29,5)
(30,int64_t *)
(31,data)
(32,RET)
(33,100)
(34,if(5==5)
(35,)
(36,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^