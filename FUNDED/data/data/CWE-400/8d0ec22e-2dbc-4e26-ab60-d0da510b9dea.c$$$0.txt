-----label-----
1
-----code-----
static void
_socket_open(SOCKET *sockp, CCS call)
{
    struct sockaddr_in dest_addr;
    const char *host;
    const char *portstr;
    char *nextport;
    u_short port;
    char host_port[256] = "???";
    int tries;

    UNUSED(call);

    if (*sockp != INVALID_SOCKET) {
	return;
    }

    util_socket_lib_init();

    if (((*sockp = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)) {
	putil_syserr(2, "socket");
    }

    host = prop_get_str(P_MONITOR_HOST);
    portstr = prop_get_str(P_MONITOR_PORT);

    for (tries = 0; portstr && *portstr; tries++) {
	port = (u_short)strtoul(portstr, &nextport, 0);
	portstr = nextport + 1;
	snprintf(host_port, charlen(host_port), "%s:%u", host, port);

	if (tries) {
	    vb_printf(VB_MON, "Retrying on %s in %lu",
		host_port, (unsigned long)getpid());
	}

	memset(&dest_addr, 0, sizeof(dest_addr));
	dest_addr.sin_family = PF_INET;
	dest_addr.sin_addr.s_addr = inet_addr(host);
	dest_addr.sin_port = htons(port);

	if (!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))) {
	    return;
	}

#if defined(_WIN32)
	if (WSAGetLastError() == WSAETIMEDOUT) {
	    continue;
	}
#else				/*!_WIN32 */
	if (errno == ETIMEDOUT || errno == EINTR) {
	    vb_printf(VB_STD, "RETRY CONNECT");
	    continue;
	} else if (errno == EISCONN) {
	    return;
	}
#endif	/*_WIN32*/
    }

    putil_syserr(2, host_port);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
26,27
26,28
29,30
30,31
30,32
32,33
32,34
35,36
36,37
36,38
38,39
38,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
52,53
54,55
56,57
57,58
57,59
59,60
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
70,71
72,73
74,75
76,77
77,78
78,79
80,81
80,82
81,82
82,83
82,84
83,84
84,85
84,86
85,86
86,87
88,89
88,90
88,91
88,92
89,90
91,92
93,94
96,97
98,99
99,100
100,101
100,102
100,103
101,102
105,106
106,107
106,108
107,108
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
118,120
119,120
121,122
123,124
123,125
123,126
123,127
124,125
125,126
125,127
126,127
129,130
129,131
130,131
132,133
133,134
135,136
136,137
138,139
138,140
138,141
138,142
138,143
138,144
138,145
138,146
138,147
138,148
139,140
140,141
140,142
141,142
143,144
143,145
144,145
144,146
145,146
148,149
148,150
148,151
148,152
149,150
151,152
153,154
154,155
157,158
158,159
158,160
159,160
161,162
161,163
162,163
165,166
166,167
166,168
166,169
166,170
166,171
166,172
167,168
169,170
171,172
171,173
172,173
174,175
177,178
179,180
181,182
181,183
182,183
184,185
185,186
186,187
186,188
186,189
186,190
186,191
187,188
189,190
192,193
194,195
194,196
195,196
195,197
198,199
199,200
201,202
202,203
202,204
202,205
202,206
203,204
205,206
206,207
209,210
210,211
211,212
213,214
214,215
214,216
215,216
215,217
216,217
219,220
221,222
222,223
222,224
223,224
223,225
224,225
224,226
225,226
229,230
229,231
230,231
232,233
234,235
235,236
235,237
236,237
236,238
237,238
240,241
240,242
241,242
243,244
245,246
245,247
246,247
247,248
247,249
247,250
247,251
248,249
250,251
251,252
253,254
253,255
254,255
254,256
255,256
257,258
259,260
260,261
262,263
263,264
263,265
264,265
267,268
269,270
269,271
269,272
270,271
270,272
271,272
271,273
272,273
274,275
276,277
276,278
277,278
279,280
281,282
281,283
282,283
283,284
283,285
283,286
284,285
286,287
290,291
290,292
291,292
291,293
292,293
294,295
296,297
298,299
299,300
299,301
299,302
300,301
303,304
-----nextToken-----
2,4,7,9,10,13,15,20,22,25,27,28,31,33,34,37,39,40,44,46,49,51,53,55,58,60,64,66,71,73,75,79,87,90,92,94,95,97,102,103,104,108,111,113,117,120,122,127,128,131,134,137,142,146,147,150,152,155,156,160,163,164,168,170,173,175,176,178,180,183,188,190,191,193,196,197,200,204,207,208,212,217,218,220,226,227,228,231,233,238,239,242,244,249,252,256,258,261,265,266,268,273,275,278,280,285,287,288,289,293,295,297,301,302,304
-----computeFrom-----
68,69
68,70
82,83
82,84
84,85
84,86
106,107
106,108
115,116
115,117
125,126
125,127
129,130
129,131
140,141
140,142
158,159
158,160
161,162
161,163
214,215
214,216
222,223
222,224
235,236
235,237
270,271
270,272
271,272
271,273
276,277
276,278
291,292
291,293
-----guardedBy-----
-----guardedByNegation-----
278,293
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
static void_socket_open(SOCKET *sockp, CCS call){    struct sockaddr_in dest_addr;    const char *host;    const char *portstr;    char *nextport;    u_short port;    char host_port[256] = "???";    int tries;    UNUSED(call);    if (*sockp != INVALID_SOCKET) {	return;    }    util_socket_lib_init();    if (((*sockp = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)) {	putil_syserr(2, "socket");    }    host = prop_get_str(P_MONITOR_HOST);    portstr = prop_get_str(P_MONITOR_PORT);    for (tries = 0; portstr && *portstr; tries++) {	port = (u_short)strtoul(portstr, &nextport, 0);	portstr = nextport + 1;	snprintf(host_port, charlen(host_port), "%s:%u", host, port);	if (tries) {	    vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());	}	memset(&dest_addr, 0, sizeof(dest_addr));	dest_addr.sin_family = PF_INET;	dest_addr.sin_addr.s_addr = inet_addr(host);	dest_addr.sin_port = htons(port);	if (!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))) {	    return;	}#if defined(_WIN32)	if (WSAGetLastError() == WSAETIMEDOUT) {	    continue;	}#else				/*!_WIN32 */	if (errno == ETIMEDOUT || errno == EINTR) {	    vb_printf(VB_STD, "RETRY CONNECT");	    continue;	} else if (errno == EISCONN) {	    return;	}#endif	/*_WIN32*/    }    putil_syserr(2, host_port);}
static void
_socket_open(SOCKET *sockp, CCS call)
_socket_open
SOCKET *sockp
SOCKET
SOCKET
*sockp
*
sockp
CCS call
CCS
CCS
call
call
{    struct sockaddr_in dest_addr;    const char *host;    const char *portstr;    char *nextport;    u_short port;    char host_port[256] = "???";    int tries;    UNUSED(call);    if (*sockp != INVALID_SOCKET) {	return;    }    util_socket_lib_init();    if (((*sockp = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)) {	putil_syserr(2, "socket");    }    host = prop_get_str(P_MONITOR_HOST);    portstr = prop_get_str(P_MONITOR_PORT);    for (tries = 0; portstr && *portstr; tries++) {	port = (u_short)strtoul(portstr, &nextport, 0);	portstr = nextport + 1;	snprintf(host_port, charlen(host_port), "%s:%u", host, port);	if (tries) {	    vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());	}	memset(&dest_addr, 0, sizeof(dest_addr));	dest_addr.sin_family = PF_INET;	dest_addr.sin_addr.s_addr = inet_addr(host);	dest_addr.sin_port = htons(port);	if (!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))) {	    return;	}#if defined(_WIN32)	if (WSAGetLastError() == WSAETIMEDOUT) {	    continue;	}#else				/*!_WIN32 */	if (errno == ETIMEDOUT || errno == EINTR) {	    vb_printf(VB_STD, "RETRY CONNECT");	    continue;	} else if (errno == EISCONN) {	    return;	}#endif	/*_WIN32*/    }    putil_syserr(2, host_port);}
struct sockaddr_in dest_addr;
struct sockaddr_in dest_addr;
struct sockaddr_in
sockaddr_in
dest_addr
dest_addr
const char *host;
const char *host;
const char
*host
*
host
const char *portstr;
const char *portstr;
const char
*portstr
*
portstr
char *nextport;
char *nextport;
char
*nextport
*
nextport
u_short port;
u_short port;
u_short
u_short
port
port
char host_port[256] = "???";
char host_port[256] = "???";
char
host_port[256] = "???"
host_port
[256]
256
= "???"
"???"
int tries;
int tries;
int
tries
tries
UNUSED(call);
UNUSED(call)
UNUSED
UNUSED
call
call
if (*sockp != INVALID_SOCKET) {	return;    }
*sockp != INVALID_SOCKET
*sockp
sockp
sockp
INVALID_SOCKET
INVALID_SOCKET
{	return;    }
return;
util_socket_lib_init();
util_socket_lib_init()
util_socket_lib_init
util_socket_lib_init
if (((*sockp = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)) {	putil_syserr(2, "socket");    }
((*sockp = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)
(*sockp = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET
(*sockp = socket(PF_INET, SOCK_STREAM, 0))
*sockp = socket(PF_INET, SOCK_STREAM, 0)
*sockp
sockp
sockp
socket(PF_INET, SOCK_STREAM, 0)
socket
socket
PF_INET
PF_INET
SOCK_STREAM
SOCK_STREAM
0
INVALID_SOCKET
INVALID_SOCKET
{	putil_syserr(2, "socket");    }
putil_syserr(2, "socket");
putil_syserr(2, "socket")
putil_syserr
putil_syserr
2
"socket"
host = prop_get_str(P_MONITOR_HOST);
host = prop_get_str(P_MONITOR_HOST)
host
host
prop_get_str(P_MONITOR_HOST)
prop_get_str
prop_get_str
P_MONITOR_HOST
P_MONITOR_HOST
portstr = prop_get_str(P_MONITOR_PORT);
portstr = prop_get_str(P_MONITOR_PORT)
portstr
portstr
prop_get_str(P_MONITOR_PORT)
prop_get_str
prop_get_str
P_MONITOR_PORT
P_MONITOR_PORT
for (tries = 0; portstr && *portstr; tries++) {	port = (u_short)strtoul(portstr, &nextport, 0);	portstr = nextport + 1;	snprintf(host_port, charlen(host_port), "%s:%u", host, port);	if (tries) {	    vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());	}	memset(&dest_addr, 0, sizeof(dest_addr));	dest_addr.sin_family = PF_INET;	dest_addr.sin_addr.s_addr = inet_addr(host);	dest_addr.sin_port = htons(port);	if (!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))) {	    return;	}#if defined(_WIN32)	if (WSAGetLastError() == WSAETIMEDOUT) {	    continue;	}#else				/*!_WIN32 */	if (errno == ETIMEDOUT || errno == EINTR) {	    vb_printf(VB_STD, "RETRY CONNECT");	    continue;	} else if (errno == EISCONN) {	    return;	}#endif	/*_WIN32*/    }
tries = 0;
tries = 0
tries
tries
0
portstr && *portstr
portstr
portstr
*portstr
portstr
portstr
tries++
tries
tries
{	port = (u_short)strtoul(portstr, &nextport, 0);	portstr = nextport + 1;	snprintf(host_port, charlen(host_port), "%s:%u", host, port);	if (tries) {	    vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());	}	memset(&dest_addr, 0, sizeof(dest_addr));	dest_addr.sin_family = PF_INET;	dest_addr.sin_addr.s_addr = inet_addr(host);	dest_addr.sin_port = htons(port);	if (!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))) {	    return;	}#if defined(_WIN32)	if (WSAGetLastError() == WSAETIMEDOUT) {	    continue;	}#else				/*!_WIN32 */	if (errno == ETIMEDOUT || errno == EINTR) {	    vb_printf(VB_STD, "RETRY CONNECT");	    continue;	} else if (errno == EISCONN) {	    return;	}#endif	/*_WIN32*/    }
port = (u_short)strtoul(portstr, &nextport, 0);
port = (u_short)strtoul(portstr, &nextport, 0)
port
port
(u_short)strtoul(portstr, &nextport, 0)
u_short
u_short
u_short

strtoul(portstr, &nextport, 0)
strtoul
strtoul
portstr
portstr
&nextport
nextport
nextport
0
portstr = nextport + 1;
portstr = nextport + 1
portstr
portstr
nextport + 1
nextport
nextport
1
snprintf(host_port, charlen(host_port), "%s:%u", host, port);
snprintf(host_port, charlen(host_port), "%s:%u", host, port)
snprintf
snprintf
host_port
host_port
charlen(host_port)
charlen
charlen
host_port
host_port
"%s:%u"
host
host
port
port
if (tries) {	    vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());	}
tries
tries
{	    vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());	}
vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid());
vb_printf(VB_MON, "Retrying on %s in %lu",		host_port, (unsigned long)getpid())
vb_printf
vb_printf
VB_MON
VB_MON
"Retrying on %s in %lu"
host_port
host_port
(unsigned long)getpid()
unsigned long
unsigned long

getpid()
getpid
getpid
memset(&dest_addr, 0, sizeof(dest_addr));
memset(&dest_addr, 0, sizeof(dest_addr))
memset
memset
&dest_addr
dest_addr
dest_addr
0
sizeof(dest_addr)
(dest_addr)
dest_addr
dest_addr
dest_addr.sin_family = PF_INET;
dest_addr.sin_family = PF_INET
dest_addr.sin_family
dest_addr
dest_addr
sin_family
PF_INET
PF_INET
dest_addr.sin_addr.s_addr = inet_addr(host);
dest_addr.sin_addr.s_addr = inet_addr(host)
dest_addr.sin_addr.s_addr
dest_addr.sin_addr
dest_addr
dest_addr
sin_addr
s_addr
inet_addr(host)
inet_addr
inet_addr
host
host
dest_addr.sin_port = htons(port);
dest_addr.sin_port = htons(port)
dest_addr.sin_port
dest_addr
dest_addr
sin_port
htons(port)
htons
htons
port
port
if (!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))) {	    return;	}
!connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))
connect(*sockp, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr))
connect
connect
*sockp
sockp
sockp
(struct sockaddr *)&dest_addr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&dest_addr
dest_addr
dest_addr
sizeof(struct sockaddr)
struct sockaddr
struct sockaddr
sockaddr

{	    return;	}
return;
if (errno == ETIMEDOUT || errno == EINTR) {	    vb_printf(VB_STD, "RETRY CONNECT");	    continue;	} else if (errno == EISCONN) {	    return;	}
errno == ETIMEDOUT || errno == EINTR
errno == ETIMEDOUT
errno
errno
ETIMEDOUT
ETIMEDOUT
errno == EINTR
errno
errno
EINTR
EINTR
{	    vb_printf(VB_STD, "RETRY CONNECT");	    continue;	}
vb_printf(VB_STD, "RETRY CONNECT");
vb_printf(VB_STD, "RETRY CONNECT")
vb_printf
vb_printf
VB_STD
VB_STD
"RETRY CONNECT"
continue;
if (errno == EISCONN) {	    return;	}
errno == EISCONN
errno
errno
EISCONN
EISCONN
{	    return;	}
return;
putil_syserr(2, host_port);
putil_syserr(2, host_port)
putil_syserr
putil_syserr
2
host_port
host_port
-----joern-----
(25,56,0)
(125,36,0)
(91,11,0)
(101,21,0)
(22,15,0)
(50,11,0)
(124,10,0)
(36,58,0)
(65,15,0)
(105,54,0)
(2,45,0)
(67,72,0)
(118,27,0)
(116,105,0)
(78,85,0)
(120,11,0)
(38,83,0)
(66,107,0)
(83,70,0)
(20,22,0)
(64,72,0)
(69,15,0)
(46,72,0)
(60,8,0)
(115,34,0)
(36,125,0)
(116,119,0)
(97,8,0)
(2,76,0)
(51,18,0)
(12,122,0)
(119,48,0)
(105,72,0)
(55,48,0)
(62,72,0)
(80,70,0)
(76,2,0)
(18,109,0)
(99,72,0)
(81,12,0)
(90,86,0)
(113,40,0)
(84,72,0)
(17,60,0)
(32,106,0)
(65,69,0)
(34,48,0)
(22,72,0)
(54,105,0)
(40,109,0)
(125,108,0)
(35,72,0)
(16,90,0)
(106,32,0)
(101,61,0)
(30,21,0)
(90,75,0)
(82,80,0)
(18,8,0)
(19,57,0)
(18,52,0)
(124,31,0)
(29,12,0)
(70,11,0)
(13,5,0)
(109,18,0)
(37,40,0)
(2,48,0)
(128,76,0)
(127,48,0)
(37,110,0)
(117,72,0)
(28,18,0)
(52,18,0)
(41,26,0)
(134,68,0)
(132,126,0)
(110,37,0)
(30,36,0)
(45,2,0)
(24,55,0)
(93,69,0)
(61,101,0)
(77,75,0)
(94,61,0)
(3,69,0)
(8,72,0)
(36,56,0)
(110,48,0)
(1,116,0)
(75,15,0)
(75,90,0)
(112,69,0)
(69,48,0)
(69,40,0)
(35,47,0)
(109,40,0)
(130,57,0)
(4,22,0)
(71,106,0)
(92,34,0)
(126,57,0)
(5,60,0)
(55,24,0)
(70,80,0)
(49,54,0)
(6,72,0)
(44,72,0)
(30,70,0)
(96,110,0)
(121,24,0)
(10,74,0)
(27,8,0)
(14,96,0)
(26,85,0)
(133,35,0)
(86,90,0)
(85,26,0)
(63,37,0)
(18,55,0)
(69,105,0)
(123,48,0)
(23,75,0)
(68,56,0)
(5,55,0)
(88,52,0)
(39,92,0)
(26,119,0)
(87,105,0)
(95,45,0)
(5,8,0)
(59,24,0)
(11,70,0)
(36,30,0)
(40,48,0)
(15,72,0)
(75,9,0)
(73,65,0)
(83,21,0)
(109,129,0)
(103,30,0)
(89,96,0)
(104,101,0)
(79,15,0)
(53,72,0)
(43,2,0)
(33,92,0)
(56,25,0)
(7,72,0)
(42,15,0)
(0,55,0)
(8,27,0)
(56,36,0)
(108,125,0)
(111,48,0)
(90,16,0)
(60,5,0)
(98,69,0)
(129,109,0)
(69,65,0)
(131,75,0)
(102,85,0)
(58,36,0)
(56,68,0)
(60,55,0)
(119,116,0)
(31,114,0)
(112,55,1)
(45,95,1)
(40,109,1)
(5,13,1)
(30,70,1)
(38,84,1)
(18,28,1)
(83,38,1)
(75,15,1)
(50,120,1)
(90,86,1)
(69,105,1)
(30,103,1)
(100,69,1)
(92,39,1)
(31,61,1)
(91,50,1)
(97,105,1)
(102,78,1)
(132,106,1)
(80,70,1)
(84,61,1)
(65,15,1)
(69,65,1)
(17,126,1)
(34,115,1)
(2,45,1)
(126,57,1)
(35,47,1)
(69,40,1)
(94,101,1)
(125,56,1)
(98,93,1)
(5,8,1)
(60,5,1)
(93,3,1)
(65,73,1)
(59,121,1)
(20,4,1)
(89,119,1)
(73,112,1)
(52,88,1)
(113,60,1)
(54,49,1)
(39,33,1)
(35,133,1)
(3,65,1)
(22,20,1)
(87,12,1)
(77,100,1)
(124,31,1)
(101,104,1)
(70,11,1)
(24,59,1)
(121,0,1)
(41,85,1)
(18,55,1)
(132,66,1)
(103,110,1)
(49,87,1)
(32,58,1)
(128,43,1)
(85,102,1)
(37,63,1)
(18,8,1)
(109,129,1)
(69,15,1)
(27,118,1)
(18,52,1)
(96,14,1)
(2,76,1)
(29,81,1)
(56,25,1)
(76,128,1)
(36,56,1)
(43,45,1)
(134,30,1)
(116,105,1)
(116,1,1)
(110,37,1)
(14,89,1)
(104,35,1)
(15,42,1)
(22,15,1)
(130,8,1)
(42,79,1)
(82,70,1)
(87,80,1)
(51,113,1)
(11,91,1)
(58,36,1)
(68,134,1)
(57,19,1)
(78,34,1)
(106,32,1)
(126,132,1)
(30,21,1)
(19,130,1)
(90,16,1)
(17,57,1)
(95,75,1)
(95,100,1)
(60,17,1)
(109,18,1)
(101,21,1)
(36,125,1)
(124,22,1)
(55,24,1)
(12,29,1)
(56,68,1)
(118,97,1)
(8,27,1)
(33,2,1)
(105,54,1)
(81,80,1)
(88,51,1)
(36,30,1)
(125,108,1)
(115,92,1)
(119,116,1)
(23,77,1)
(60,55,1)
(28,52,1)
(71,32,1)
(80,82,1)
(66,106,1)
(75,90,1)
(131,23,1)
(26,41,1)
(16,131,1)
(4,60,1)
(61,101,1)
(61,94,1)
(10,58,1)
(0,40,1)
(63,96,1)
(1,26,1)
(124,10,1)
(83,21,1)
(5,55,1)
(120,83,1)
(133,15,1)
(69,98,1)
(26,85,1)
(13,17,1)
(106,71,1)
(60,8,1)
(37,40,1)
(110,37,2)
(82,61,2)
(34,60,2)
(102,60,2)
(37,60,2)
(100,60,2)
(85,60,2)
(109,18,2)
(60,5,2)
(18,60,2)
(90,86,2)
(60,8,2)
(5,17,2)
(119,60,2)
(17,61,2)
(105,54,2)
(60,58,2)
(83,61,2)
(65,15,2)
(54,61,2)
(71,58,2)
(120,61,2)
(2,45,2)
(105,61,2)
(24,60,2)
(56,25,2)
(69,40,2)
(10,58,2)
(78,60,2)
(116,60,2)
(40,60,2)
(1,60,2)
(40,109,2)
(69,15,2)
(124,31,2)
(0,60,2)
(29,80,2)
(106,32,2)
(30,21,2)
(17,58,2)
(106,58,2)
(37,40,2)
(22,15,2)
(92,60,2)
(115,60,2)
(125,108,2)
(39,60,2)
(93,60,2)
(2,76,2)
(75,90,2)
(30,70,2)
(4,60,2)
(32,58,2)
(60,61,2)
(27,61,2)
(45,60,2)
(58,60,2)
(18,8,2)
(75,100,2)
(91,61,2)
(31,61,2)
(69,60,2)
(130,61,2)
(90,100,2)
(103,60,2)
(58,36,2)
(18,52,2)
(109,129,2)
(128,60,2)
(41,60,2)
(59,60,2)
(66,106,2)
(61,101,2)
(3,60,2)
(55,24,2)
(28,60,2)
(126,57,2)
(8,61,2)
(14,60,2)
(116,105,2)
(56,68,2)
(101,21,2)
(83,21,2)
(50,61,2)
(89,60,2)
(126,58,2)
(98,60,2)
(36,125,2)
(124,10,2)
(65,60,2)
(2,60,2)
(110,60,2)
(13,17,2)
(68,60,2)
(57,61,2)
(51,60,2)
(76,60,2)
(119,116,2)
(84,61,2)
(5,8,2)
(33,60,2)
(70,11,2)
(96,60,2)
(30,60,2)
(36,56,2)
(87,61,2)
(60,55,2)
(20,60,2)
(8,27,2)
(81,80,2)
(56,60,2)
(70,61,2)
(132,58,2)
(52,60,2)
(23,100,2)
(80,61,2)
(118,61,2)
(90,16,2)
(55,60,2)
(35,47,2)
(19,61,2)
(63,60,2)
(75,15,2)
(16,100,2)
(26,85,2)
(5,55,2)
(49,61,2)
(97,61,2)
(69,105,2)
(73,60,2)
(11,61,2)
(69,65,2)
(12,80,2)
(43,60,2)
(112,60,2)
(95,60,2)
(77,100,2)
(121,60,2)
(88,60,2)
(26,60,2)
(36,60,2)
(134,60,2)
(18,55,2)
(36,30,2)
(109,60,2)
(113,60,2)
(38,61,2)
(22,60,2)
(80,70,2)
(131,100,2)
(125,60,2)
-----------------------------------
(0,portstr)
(1,host)
(2,memset(&dest_addr, 0, sizeof(dest_addr)
(3,"%s:%u")
(4,2)
(5,*portstr)
(6,nextport)
(7,if (*sockp != INVALID_SOCKET)
(8,portstr = prop_get_str(P_MONITOR_PORT)
(9,)
(10,return;)
(11,socket(PF_INET, SOCK_STREAM, 0)
(12,putil_syserr(2, "socket")
(13,portstr)
(14,sin_port)
(15,host_port[256] = "???")
(16,getpid()
(17,portstr)
(18,strtoul(portstr, &nextport, 0)
(19,0)
(20,host_port)
(21,SOCKET *sockp)
(22,putil_syserr(2, host_port)
(23,"Retrying on %s in %lu")
(24,nextport + 1)
(25,struct sockaddr *)
(26,dest_addr.sin_addr.s_addr)
(27,prop_get_str(P_MONITOR_PORT)
(28,0)
(29,"socket")
(30,*sockp)
(31,return;)
(32,WSAGetLastError()
(33,dest_addr)
(34,dest_addr.sin_family = PF_INET)
(35,UNUSED(call)
(36,connect(*sockp, (struct sockaddr *)
(37,htons(port)
(38,sockp)
(39,sin_family)
(40,port = (u_short)
(41,s_addr)
(42,"???")
(43,0)
(44,portstr)
(45,&dest_addr)
(46,host_port)
(47,CCS call)
(48,)
(49,P_MONITOR_HOST)
(50,SOCK_STREAM)
(51,portstr)
(52,&nextport)
(53,dest_addr)
(54,prop_get_str(P_MONITOR_HOST)
(55,portstr = nextport + 1)
(56,(struct sockaddr *)
(57,tries = 0)
(58,!connect(*sockp, (struct sockaddr *)
(59,1)
(60,portstr && *portstr)
(61,*sockp != INVALID_SOCKET)
(62,host)
(63,port)
(64,if (((*sockp = socket(PF_INET, SOCK_STREAM, 0)
(65,charlen(host_port)
(66,continue;)
(67,for (tries = 0; portstr && *portstr; tries++)
(68,&dest_addr)
(69,snprintf(host_port, charlen(host_port)
(70,*sockp = socket(PF_INET, SOCK_STREAM, 0)
(71,WSAETIMEDOUT)
(72,)
(73,host_port)
(74,)
(75,vb_printf(VB_MON, "Retrying on %s in %lu",\n\\n\\t\\thost_port, (unsigned long)
(76,sizeof(dest_addr)
(77,VB_MON)
(78,dest_addr)
(79,host_port)
(80,(*sockp = socket(PF_INET, SOCK_STREAM, 0)
(81,2)
(82,INVALID_SOCKET)
(83,*sockp)
(84,util_socket_lib_init()
(85,dest_addr.sin_addr)
(86,unsigned long)
(87,host)
(88,nextport)
(89,dest_addr)
(90,(unsigned long)
(91,0)
(92,dest_addr.sin_family)
(93,host)
(94,INVALID_SOCKET)
(95,dest_addr)
(96,dest_addr.sin_port)
(97,portstr)
(98,port)
(99,port)
(100,tries)
(101,*sockp)
(102,sin_addr)
(103,sockp)
(104,sockp)
(105,host = prop_get_str(P_MONITOR_HOST)
(106,WSAGetLastError()
(107,)
(108,struct sockaddr)
(109,(u_short)
(110,dest_addr.sin_port = htons(port)
(111,if (tries)
(112,host_port)
(113,port)
(114,)
(115,PF_INET)
(116,inet_addr(host)
(117,tries)
(118,P_MONITOR_PORT)
(119,dest_addr.sin_addr.s_addr = inet_addr(host)
(120,PF_INET)
(121,nextport)
(122,)
(123,if (!connect(*sockp, (struct sockaddr *)
(124,RET)
(125,sizeof(struct sockaddr)
(126,tries++)
(127,if (WSAGetLastError()
(128,dest_addr)
(129,u_short)
(130,tries)
(131,host_port)
(132,tries)
(133,call)
(134,dest_addr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^