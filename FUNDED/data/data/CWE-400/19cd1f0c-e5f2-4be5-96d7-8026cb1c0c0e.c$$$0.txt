-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
70,71
70,72
70,73
71,72
73,74
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
85,86
87,88
89,90
89,91
90,91
91,92
91,93
93,94
93,95
93,96
96,97
97,98
98,99
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,75,79,81,86,88,92,94,95,99,100
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(7,21,0)
(27,12,0)
(6,19,0)
(41,13,0)
(13,31,0)
(21,7,0)
(7,33,0)
(8,14,0)
(40,21,0)
(12,21,0)
(1,21,0)
(34,13,0)
(18,15,0)
(34,25,0)
(10,13,0)
(39,23,0)
(23,31,0)
(35,31,0)
(16,31,0)
(0,23,0)
(14,31,0)
(25,34,0)
(22,40,0)
(44,3,0)
(7,28,0)
(3,38,0)
(36,31,0)
(25,23,0)
(21,23,0)
(45,25,0)
(42,40,0)
(30,15,0)
(11,31,0)
(30,31,0)
(19,28,0)
(0,21,0)
(29,6,0)
(3,11,0)
(5,30,0)
(40,23,0)
(43,26,0)
(33,7,0)
(13,26,0)
(28,7,0)
(19,6,0)
(38,3,0)
(12,23,0)
(26,13,0)
(28,19,0)
(2,19,0)
(9,10,0)
(17,38,0)
(20,34,0)
(4,11,0)
(15,30,0)
(10,12,0)
(37,14,0)
(24,0,0)
(38,30,0)
(7,28,1)
(25,34,1)
(40,21,1)
(17,44,1)
(37,30,1)
(38,17,1)
(2,1,1)
(30,15,1)
(32,3,1)
(43,41,1)
(34,20,1)
(0,21,1)
(45,14,1)
(6,29,1)
(18,5,1)
(28,19,1)
(13,26,1)
(20,45,1)
(14,8,1)
(26,43,1)
(10,9,1)
(19,6,1)
(38,30,1)
(29,2,1)
(9,0,1)
(12,27,1)
(24,40,1)
(15,18,1)
(22,21,1)
(0,24,1)
(44,12,1)
(34,13,1)
(8,37,1)
(3,38,1)
(27,10,1)
(12,21,1)
(5,13,1)
(7,33,1)
(42,22,1)
(10,13,1)
(1,25,1)
(21,7,1)
(40,42,1)
(19,6,2)
(12,21,2)
(7,33,2)
(7,28,2)
(0,21,2)
(10,13,2)
(21,7,2)
(34,13,2)
(13,26,2)
(38,30,2)
(30,15,2)
(25,34,2)
(3,38,2)
(40,21,2)
(28,19,2)
-----------------------------------
(0,printLine(data)
(1,data)
(2,100)
(3,* data = *dataPtr2)
(4,data)
(5,dataPtr2)
(6,sizeof(char)
(7,(char *)
(8,NULL)
(9,dataPtr1)
(10,*dataPtr1)
(11,)
(12,*dataPtr1 = data)
(13,* *dataPtr1 = &data)
(14,data = NULL)
(15,&data)
(16,dataPtr1)
(17,dataPtr2)
(18,data)
(19,100*sizeof(char)
(20,dataPtr1)
(21,data = (char *)
(22,data)
(23,)
(24,data)
(25,* data = *dataPtr1)
(26,&data)
(27,data)
(28,ALLOCA(100*sizeof(char)
(29,char)
(30,* *dataPtr2 = &data)
(31,)
(32,RET)
(33,char *)
(34,*dataPtr1)
(35,dataPtr2)
(36,data)
(37,data)
(38,*dataPtr2)
(39,data)
(40,strcpy(data, "A String")
(41,dataPtr1)
(42,"A String")
(43,data)
(44,data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^