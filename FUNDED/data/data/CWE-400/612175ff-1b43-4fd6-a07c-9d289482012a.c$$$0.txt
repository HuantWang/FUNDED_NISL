-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,87
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(39,31,0)
(5,35,0)
(17,31,0)
(13,5,0)
(8,0,0)
(28,21,0)
(23,17,0)
(9,39,0)
(20,10,0)
(2,42,0)
(19,31,0)
(10,43,0)
(1,4,0)
(0,8,0)
(0,10,0)
(18,39,0)
(21,3,0)
(7,17,0)
(25,17,0)
(31,8,0)
(11,37,0)
(30,23,0)
(37,11,0)
(16,37,0)
(46,42,0)
(33,3,0)
(17,23,0)
(35,5,0)
(34,8,0)
(37,16,0)
(2,40,0)
(35,15,0)
(22,42,0)
(23,21,0)
(29,40,0)
(27,2,0)
(32,1,0)
(16,3,0)
(42,31,0)
(26,4,0)
(10,0,0)
(11,31,0)
(44,1,0)
(40,3,0)
(42,2,0)
(38,11,0)
(43,10,0)
(8,31,0)
(6,43,0)
(24,4,0)
(41,11,0)
(8,34,0)
(12,4,0)
(31,3,0)
(31,8,1)
(43,6,1)
(23,30,1)
(37,11,1)
(22,46,1)
(17,31,1)
(5,13,1)
(36,14,1)
(14,45,1)
(27,42,1)
(1,44,1)
(30,17,1)
(42,31,1)
(6,20,1)
(19,45,1)
(8,34,1)
(7,25,1)
(10,43,1)
(44,32,1)
(18,9,1)
(21,28,1)
(39,31,1)
(41,38,1)
(45,1,1)
(9,31,1)
(11,41,1)
(42,22,1)
(0,10,1)
(25,35,1)
(13,39,1)
(39,18,1)
(25,39,1)
(2,27,1)
(46,21,1)
(28,23,1)
(20,19,1)
(8,0,1)
(23,17,1)
(40,29,1)
(38,40,1)
(16,37,1)
(11,31,1)
(17,7,1)
(29,2,1)
(2,42,1)
(14,16,1)
(35,5,1)
(8,45,2)
(37,11,2)
(40,45,2)
(11,31,2)
(43,45,2)
(13,39,2)
(28,45,2)
(23,45,2)
(46,45,2)
(7,45,2)
(2,42,2)
(29,45,2)
(10,43,2)
(30,45,2)
(17,45,2)
(8,0,2)
(35,39,2)
(9,45,2)
(16,37,2)
(25,45,2)
(18,45,2)
(27,45,2)
(39,45,2)
(41,45,2)
(17,31,2)
(0,10,2)
(22,45,2)
(19,45,2)
(38,45,2)
(35,5,2)
(0,45,2)
(20,45,2)
(16,45,2)
(37,45,2)
(42,45,2)
(31,8,2)
(5,39,2)
(8,34,2)
(11,45,2)
(39,31,2)
(6,45,2)
(31,45,2)
(2,45,2)
(23,17,2)
(21,45,2)
(42,31,2)
(10,45,2)
-----------------------------------
(0,malloc(100*sizeof(twoIntsStruct)
(1,data = NULL)
(2,data[0].intTwo)
(3,)
(4,)
(5,-1)
(6,twoIntsStruct)
(7,0)
(8,(twoIntsStruct *)
(9,data)
(10,100*sizeof(twoIntsStruct)
(11,data[0])
(12,data)
(13,1)
(14,staticTrue)
(15,)
(16,printStructLine(&data[0])
(17,data[0])
(18,NULL)
(19,data)
(20,100)
(21,data[0].intOne = 0)
(22,0)
(23,data[0].intOne)
(24,if(staticTrue)
(25,data)
(26,if(staticTrue)
(27,intTwo)
(28,0)
(29,0)
(30,intOne)
(31,data = (twoIntsStruct *)
(32,data)
(33,if (data == NULL)
(34,twoIntsStruct *)
(35,exit(-1)
(36,RET)
(37,&data[0])
(38,data)
(39,data == NULL)
(40,data[0].intTwo = 0)
(41,0)
(42,data[0])
(43,sizeof(twoIntsStruct)
(44,NULL)
(45,staticTrue)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^