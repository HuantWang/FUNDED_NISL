-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(globalFive==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_14_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,25,0)
(38,17,0)
(19,27,0)
(21,39,0)
(18,3,0)
(4,49,0)
(32,50,0)
(2,27,0)
(4,24,0)
(31,49,0)
(2,5,0)
(27,16,0)
(47,49,0)
(30,28,0)
(9,5,0)
(52,15,0)
(40,48,0)
(24,20,0)
(46,6,0)
(15,52,0)
(24,4,0)
(15,24,0)
(6,49,0)
(10,25,0)
(22,52,0)
(20,24,0)
(52,17,0)
(24,15,0)
(52,3,0)
(36,13,0)
(1,27,0)
(11,4,0)
(25,30,0)
(5,2,0)
(44,47,0)
(52,27,0)
(53,50,0)
(17,50,0)
(3,52,0)
(33,45,0)
(12,13,0)
(41,0,0)
(2,17,0)
(45,4,0)
(34,39,0)
(26,43,0)
(6,4,0)
(23,50,0)
(14,40,0)
(47,4,0)
(7,17,0)
(13,4,0)
(29,45,0)
(0,8,0)
(37,43,0)
(42,40,0)
(51,2,0)
(45,49,0)
(27,19,0)
(22,11,1)
(35,43,1)
(47,44,1)
(6,4,1)
(33,13,1)
(12,4,1)
(18,22,1)
(7,38,1)
(52,17,1)
(30,25,1)
(4,24,1)
(6,46,1)
(24,20,1)
(39,34,1)
(33,30,1)
(5,9,1)
(45,29,1)
(9,51,1)
(25,10,1)
(11,2,1)
(36,12,1)
(41,2,1)
(3,18,1)
(13,4,1)
(24,15,1)
(47,4,1)
(13,36,1)
(10,13,1)
(44,6,1)
(51,43,1)
(15,52,1)
(2,27,1)
(21,17,1)
(26,37,1)
(45,4,1)
(0,41,1)
(46,45,1)
(29,33,1)
(27,19,1)
(37,27,1)
(34,21,1)
(19,1,1)
(52,3,1)
(17,7,1)
(2,17,1)
(37,39,1)
(35,47,1)
(1,39,1)
(43,26,1)
(2,5,1)
(52,27,1)
(35,0,1)
(45,4,2)
(24,15,2)
(27,39,2)
(13,4,2)
(12,2,2)
(15,52,2)
(2,43,2)
(29,2,2)
(47,4,2)
(2,5,2)
(13,2,2)
(0,2,2)
(25,13,2)
(51,43,2)
(6,2,2)
(52,27,2)
(33,2,2)
(36,2,2)
(24,20,2)
(19,39,2)
(30,13,2)
(2,17,2)
(27,19,2)
(1,39,2)
(4,2,2)
(2,27,2)
(52,17,2)
(6,4,2)
(52,3,2)
(4,24,2)
(22,2,2)
(44,2,2)
(5,43,2)
(10,13,2)
(30,25,2)
(11,2,2)
(46,2,2)
(52,2,2)
(9,43,2)
(45,2,2)
(47,2,2)
(24,2,2)
(41,2,2)
(3,2,2)
(18,2,2)
(15,2,2)
-----------------------------------
(0,printLine("Input is less than the length of the source string")
(1,data)
(2,data > wcslen(HELLO_STRING)
(3,sizeof(wchar_t)
(4,myString = (wchar_t *)
(5,wcslen(HELLO_STRING)
(6,printWLine(myString)
(7,0)
(8,)
(9,HELLO_STRING)
(10,1)
(11,myString)
(12,myString)
(13,myString == NULL)
(14,myString)
(15,malloc(data*sizeof(wchar_t)
(16,)
(17,data = 0)
(18,wchar_t)
(19,rand()
(20,wchar_t *)
(21,globalFive)
(22,data)
(23,if(globalFive==5)
(24,(wchar_t *)
(25,-1)
(26,5)
(27,data = rand()
(28,)
(29,HELLO_STRING)
(30,exit(-1)
(31,if (myString == NULL)
(32,data)
(33,myString)
(34,5)
(35,RET)
(36,NULL)
(37,globalFive)
(38,data)
(39,globalFive==5)
(40,)
(41,"Input is less than the length of the source string")
(42,if (data > wcslen(HELLO_STRING)
(43,globalFive==5)
(44,myString)
(45,wcscpy(myString, HELLO_STRING)
(46,myString)
(47,free(myString)
(48,)
(49,)
(50,)
(51,data)
(52,data*sizeof(wchar_t)
(53,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^