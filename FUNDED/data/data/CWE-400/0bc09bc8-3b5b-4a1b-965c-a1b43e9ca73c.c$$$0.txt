-----label-----
1
-----code-----
unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len,
				     unsigned long pgoff, unsigned long flags)
{
	struct vm_area_struct *vma;
	unsigned long limit;

	if (len > TASK_SIZE)
		return -ENOMEM;

	/* handle MAP_FIXED */
	if (flags & MAP_FIXED)
		return addr;

	/* only honour a hint if we're not going to clobber something doing so */
	if (addr) {
		addr = PAGE_ALIGN(addr);
		vma = find_vma(current->mm, addr);
		if (TASK_SIZE - len >= addr &&
		    (!vma || addr + len <= vm_start_gap(vma)))
			goto success;
	}

	/* search between the bottom of user VM and the stack grow area */
	addr = PAGE_SIZE;
	limit = (current->mm->start_stack - 0x00200000);
	if (addr + len <= limit) {
		limit -= len;

		if (addr <= limit) {
			vma = find_vma(current->mm, PAGE_SIZE);
			for (; vma; vma = vma->vm_next) {
				if (addr > limit)
					break;
				if (addr + len <= vma->vm_start)
					goto success;
				addr = vma->vm_end;
			}
		}
	}

	/* search from just above the WorkRAM area to the top of memory */
	addr = PAGE_ALIGN(0x80000000);
	limit = TASK_SIZE - len;
	if (addr <= limit) {
		vma = find_vma(current->mm, addr);
		for (; vma; vma = vma->vm_next) {
			if (addr > limit)
				break;
			if (addr + len <= vma->vm_start)
				goto success;
			addr = vma->vm_end;
		}

		if (!vma && addr <= limit)
			goto success;
	}

#if 0
	printk("[area] l=%lx (ENOMEM) f='%s'\n",
	       len, filp ? filp->f_path.dentry->d_name.name : "");
#endif
	return -ENOMEM;

 success:
#if 0
	printk("[area] l=%lx ad=%lx f='%s'\n",
	       len, addr, filp ? filp->f_path.dentry->d_name.name : "");
#endif
	return addr;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
38,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
59,60
59,61
60,61
62,63
62,64
62,65
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
76,78
76,79
77,78
79,80
79,81
80,81
83,84
85,86
85,87
86,87
86,88
87,88
87,89
88,89
88,90
89,90
91,92
93,94
95,96
96,97
96,98
97,98
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
107,108
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
124,125
124,126
125,126
125,127
126,127
126,128
127,128
132,133
132,134
133,134
133,135
134,135
134,136
135,136
137,138
139,140
141,142
141,143
142,143
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
152,153
154,155
154,156
155,156
156,157
156,158
157,158
159,160
159,161
159,162
160,161
162,163
162,164
163,164
166,167
168,169
168,170
168,171
168,172
170,171
172,173
172,174
173,174
175,176
175,177
176,177
179,180
179,181
179,182
180,181
180,182
181,182
181,183
182,183
184,185
187,188
187,189
188,189
188,190
189,190
189,191
190,191
192,193
194,195
194,196
195,196
198,199
200,201
201,202
201,203
202,203
204,205
204,206
205,206
208,209
209,210
209,211
210,211
212,213
212,214
213,214
216,217
217,218
217,219
218,219
220,221
220,222
221,222
223,224
225,226
225,227
226,227
226,228
227,228
229,230
231,232
231,233
231,234
232,233
233,234
233,235
234,235
236,237
236,238
236,239
237,238
239,240
239,241
240,241
243,244
245,246
245,247
245,248
245,249
247,248
249,250
249,251
250,251
252,253
252,254
253,254
256,257
256,258
256,259
257,258
257,259
258,259
258,260
259,260
261,262
264,265
264,266
265,266
265,267
266,267
266,268
267,268
269,270
271,272
271,273
272,273
275,276
277,278
278,279
278,280
279,280
281,282
281,283
282,283
285,286
285,287
286,287
286,288
287,288
288,289
290,291
290,292
291,292
293,294
295,296
297,298
298,299
299,300
301,302
301,303
303,304
304,305
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,31,33,34,37,39,43,45,49,53,55,58,61,66,69,71,75,78,81,82,84,90,92,94,99,103,105,108,110,112,116,118,122,128,129,130,131,136,138,140,145,147,151,153,158,161,164,165,167,169,171,174,177,178,183,185,186,191,193,196,197,199,203,206,207,211,214,215,219,222,224,228,230,235,238,241,242,244,246,248,251,254,255,260,262,263,268,270,273,274,276,280,283,284,289,292,294,296,300,302,305
-----computeFrom-----
41,42
41,43
51,52
51,53
64,65
64,66
73,74
73,75
86,87
86,88
87,88
87,89
88,89
88,90
96,97
96,98
100,101
100,102
101,102
101,103
114,115
114,116
120,121
120,122
124,125
124,126
133,134
133,135
134,135
134,136
143,144
143,145
149,150
149,151
156,157
156,158
172,173
172,174
181,182
181,183
188,189
188,190
189,190
189,191
201,202
201,203
209,210
209,211
217,218
217,219
220,221
220,222
226,227
226,228
233,234
233,235
249,250
249,251
258,259
258,260
265,266
265,267
266,267
266,268
278,279
278,280
286,287
286,288
290,291
290,292
-----guardedBy-----
138,193
140,185
136,203
153,185
151,203
230,294
228,292
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;NullStatement;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;NullStatement;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len,				     unsigned long pgoff, unsigned long flags){	struct vm_area_struct *vma;	unsigned long limit;	if (len > TASK_SIZE)		return -ENOMEM;	/* handle MAP_FIXED */	if (flags & MAP_FIXED)		return addr;	/* only honour a hint if we're not going to clobber something doing so */	if (addr) {		addr = PAGE_ALIGN(addr);		vma = find_vma(current->mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			goto success;	}	/* search between the bottom of user VM and the stack grow area */	addr = PAGE_SIZE;	limit = (current->mm->start_stack - 0x00200000);	if (addr + len <= limit) {		limit -= len;		if (addr <= limit) {			vma = find_vma(current->mm, PAGE_SIZE);			for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}		}	}	/* search from just above the WorkRAM area to the top of memory */	addr = PAGE_ALIGN(0x80000000);	limit = TASK_SIZE - len;	if (addr <= limit) {		vma = find_vma(current->mm, addr);		for (; vma; vma = vma->vm_next) {			if (addr > limit)				break;			if (addr + len <= vma->vm_start)				goto success;			addr = vma->vm_end;		}		if (!vma && addr <= limit)			goto success;	}#if 0	printk("[area] l=%lx (ENOMEM) f='%s'\n",	       len, filp ? filp->f_path.dentry->d_name.name : "");#endif	return -ENOMEM; success:#if 0	printk("[area] l=%lx ad=%lx f='%s'\n",	       len, addr, filp ? filp->f_path.dentry->d_name.name : "");#endif	return addr;}
unsigned long
arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len,				     unsigned long pgoff, unsigned long flags)
arch_get_unmapped_area
struct file *filp
struct file
file
*filp
*
filp
unsigned long addr
unsigned long
addr
addr
unsigned long len
unsigned long
len
len
unsigned long pgoff
unsigned long
pgoff
pgoff
unsigned long flags
unsigned long
flags
flags
{	struct vm_area_struct *vma;	unsigned long limit;	if (len > TASK_SIZE)		return -ENOMEM;	/* handle MAP_FIXED */	if (flags & MAP_FIXED)		return addr;	/* only honour a hint if we're not going to clobber something doing so */	if (addr) {		addr = PAGE_ALIGN(addr);		vma = find_vma(current->mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			goto success;	}	/* search between the bottom of user VM and the stack grow area */	addr = PAGE_SIZE;	limit = (current->mm->start_stack - 0x00200000);	if (addr + len <= limit) {		limit -= len;		if (addr <= limit) {			vma = find_vma(current->mm, PAGE_SIZE);			for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}		}	}	/* search from just above the WorkRAM area to the top of memory */	addr = PAGE_ALIGN(0x80000000);	limit = TASK_SIZE - len;	if (addr <= limit) {		vma = find_vma(current->mm, addr);		for (; vma; vma = vma->vm_next) {			if (addr > limit)				break;			if (addr + len <= vma->vm_start)				goto success;			addr = vma->vm_end;		}		if (!vma && addr <= limit)			goto success;	}#if 0	printk("[area] l=%lx (ENOMEM) f='%s'\n",	       len, filp ? filp->f_path.dentry->d_name.name : "");#endif	return -ENOMEM; success:#if 0	printk("[area] l=%lx ad=%lx f='%s'\n",	       len, addr, filp ? filp->f_path.dentry->d_name.name : "");#endif	return addr;}
struct vm_area_struct *vma;
struct vm_area_struct *vma;
struct vm_area_struct
vm_area_struct
*vma
*
vma
unsigned long limit;
unsigned long limit;
unsigned long
limit
limit
if (len > TASK_SIZE)		return -ENOMEM;
len > TASK_SIZE
len
len
TASK_SIZE
TASK_SIZE
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (flags & MAP_FIXED)		return addr;
flags & MAP_FIXED
flags
flags
MAP_FIXED
MAP_FIXED
return addr;
addr
addr
if (addr) {		addr = PAGE_ALIGN(addr);		vma = find_vma(current->mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			goto success;	}
addr
addr
{		addr = PAGE_ALIGN(addr);		vma = find_vma(current->mm, addr);		if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			goto success;	}
addr = PAGE_ALIGN(addr);
addr = PAGE_ALIGN(addr)
addr
addr
PAGE_ALIGN(addr)
PAGE_ALIGN
PAGE_ALIGN
addr
addr
vma = find_vma(current->mm, addr);
vma = find_vma(current->mm, addr)
vma
vma
find_vma(current->mm, addr)
find_vma
find_vma
current->mm
current
current
mm
addr
addr
if (TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			goto success;
TASK_SIZE - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma))
TASK_SIZE - len >= addr
TASK_SIZE - len
TASK_SIZE
TASK_SIZE
len
len
addr
addr
(!vma || addr + len <= vm_start_gap(vma))
!vma || addr + len <= vm_start_gap(vma)
!vma
vma
vma
addr + len <= vm_start_gap(vma)
addr + len
addr
addr
len
len
vm_start_gap(vma)
vm_start_gap
vm_start_gap
vma
vma
goto success;
success
addr = PAGE_SIZE;
addr = PAGE_SIZE
addr
addr
PAGE_SIZE
PAGE_SIZE
limit = (current->mm->start_stack - 0x00200000);
limit = (current->mm->start_stack - 0x00200000)
limit
limit
(current->mm->start_stack - 0x00200000)
current->mm->start_stack - 0x00200000
current->mm->start_stack
current->mm
current
current
mm
start_stack
0x00200000
if (addr + len <= limit) {		limit -= len;		if (addr <= limit) {			vma = find_vma(current->mm, PAGE_SIZE);			for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}		}	}
addr + len <= limit
addr + len
addr
addr
len
len
limit
limit
{		limit -= len;		if (addr <= limit) {			vma = find_vma(current->mm, PAGE_SIZE);			for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}		}	}
limit -= len;
limit -= len
limit
limit
len
len
if (addr <= limit) {			vma = find_vma(current->mm, PAGE_SIZE);			for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}		}
addr <= limit
addr
addr
limit
limit
{			vma = find_vma(current->mm, PAGE_SIZE);			for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}		}
vma = find_vma(current->mm, PAGE_SIZE);
vma = find_vma(current->mm, PAGE_SIZE)
vma
vma
find_vma(current->mm, PAGE_SIZE)
find_vma
find_vma
current->mm
current
current
mm
PAGE_SIZE
PAGE_SIZE
for (; vma; vma = vma->vm_next) {				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}
;
vma
vma
vma = vma->vm_next
vma
vma
vma->vm_next
vma
vma
vm_next
{				if (addr > limit)					break;				if (addr + len <= vma->vm_start)					goto success;				addr = vma->vm_end;			}
if (addr > limit)					break;
addr > limit
addr
addr
limit
limit
break;
if (addr + len <= vma->vm_start)					goto success;
addr + len <= vma->vm_start
addr + len
addr
addr
len
len
vma->vm_start
vma
vma
vm_start
goto success;
success
addr = vma->vm_end;
addr = vma->vm_end
addr
addr
vma->vm_end
vma
vma
vm_end
addr = PAGE_ALIGN(0x80000000);
addr = PAGE_ALIGN(0x80000000)
addr
addr
PAGE_ALIGN(0x80000000)
PAGE_ALIGN
PAGE_ALIGN
0x80000000
limit = TASK_SIZE - len;
limit = TASK_SIZE - len
limit
limit
TASK_SIZE - len
TASK_SIZE
TASK_SIZE
len
len
if (addr <= limit) {		vma = find_vma(current->mm, addr);		for (; vma; vma = vma->vm_next) {			if (addr > limit)				break;			if (addr + len <= vma->vm_start)				goto success;			addr = vma->vm_end;		}		if (!vma && addr <= limit)			goto success;	}
addr <= limit
addr
addr
limit
limit
{		vma = find_vma(current->mm, addr);		for (; vma; vma = vma->vm_next) {			if (addr > limit)				break;			if (addr + len <= vma->vm_start)				goto success;			addr = vma->vm_end;		}		if (!vma && addr <= limit)			goto success;	}
vma = find_vma(current->mm, addr);
vma = find_vma(current->mm, addr)
vma
vma
find_vma(current->mm, addr)
find_vma
find_vma
current->mm
current
current
mm
addr
addr
for (; vma; vma = vma->vm_next) {			if (addr > limit)				break;			if (addr + len <= vma->vm_start)				goto success;			addr = vma->vm_end;		}
;
vma
vma
vma = vma->vm_next
vma
vma
vma->vm_next
vma
vma
vm_next
{			if (addr > limit)				break;			if (addr + len <= vma->vm_start)				goto success;			addr = vma->vm_end;		}
if (addr > limit)				break;
addr > limit
addr
addr
limit
limit
break;
if (addr + len <= vma->vm_start)				goto success;
addr + len <= vma->vm_start
addr + len
addr
addr
len
len
vma->vm_start
vma
vma
vm_start
goto success;
success
addr = vma->vm_end;
addr = vma->vm_end
addr
addr
vma->vm_end
vma
vma
vm_end
if (!vma && addr <= limit)			goto success;
!vma && addr <= limit
!vma
vma
vma
addr <= limit
addr
addr
limit
limit
goto success;
success
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
success:#if 0	printk("[area] l=%lx ad=%lx f='%s'\n",	       len, addr, filp ? filp->f_path.dentry->d_name.name : "");#endif	return addr;
success
return addr;
addr
addr
-----joern-----
(141,0,0)
(23,61,0)
(44,97,0)
(71,53,0)
(93,175,0)
(135,181,0)
(31,118,0)
(145,106,0)
(3,174,0)
(46,83,0)
(86,116,0)
(164,166,0)
(179,54,0)
(65,90,0)
(70,60,0)
(108,82,0)
(170,26,0)
(140,106,0)
(115,137,0)
(69,12,0)
(141,2,0)
(8,119,0)
(99,12,0)
(169,157,0)
(172,119,0)
(9,104,0)
(59,80,0)
(54,171,0)
(139,93,0)
(169,80,0)
(191,136,0)
(17,118,0)
(24,135,0)
(50,121,0)
(4,181,0)
(180,12,0)
(163,17,0)
(132,76,0)
(18,20,0)
(33,157,0)
(101,144,0)
(20,18,0)
(180,54,0)
(175,93,0)
(130,17,0)
(116,180,0)
(46,107,0)
(118,181,0)
(113,88,0)
(168,35,0)
(118,23,0)
(123,80,0)
(103,135,0)
(194,76,0)
(193,80,0)
(82,80,0)
(205,181,0)
(180,116,0)
(6,157,0)
(97,136,0)
(102,56,0)
(199,137,0)
(48,60,0)
(4,85,0)
(17,57,0)
(166,100,0)
(119,136,0)
(16,57,0)
(103,157,0)
(137,107,0)
(146,128,0)
(98,85,0)
(29,181,0)
(25,181,0)
(138,193,0)
(63,53,0)
(42,89,0)
(162,48,0)
(1,59,0)
(95,61,0)
(191,80,0)
(64,135,0)
(186,180,0)
(191,123,0)
(152,60,0)
(200,85,0)
(131,4,0)
(66,70,0)
(15,155,0)
(171,80,0)
(97,123,0)
(30,169,0)
(20,179,0)
(193,115,0)
(133,4,0)
(97,23,0)
(196,141,0)
(92,16,0)
(64,80,0)
(71,88,0)
(118,17,0)
(174,73,0)
(197,48,0)
(110,17,0)
(46,39,0)
(114,135,0)
(83,46,0)
(38,132,0)
(74,116,0)
(132,181,0)
(185,181,0)
(37,70,0)
(2,57,0)
(33,160,0)
(178,83,0)
(97,44,0)
(46,80,0)
(157,120,0)
(179,20,0)
(107,46,0)
(60,48,0)
(150,0,0)
(182,181,0)
(40,107,0)
(39,80,0)
(91,118,0)
(70,90,0)
(149,97,0)
(38,191,0)
(5,108,0)
(71,104,0)
(16,93,0)
(125,33,0)
(158,73,0)
(85,57,0)
(78,46,0)
(144,160,0)
(175,110,0)
(124,99,0)
(156,98,0)
(81,2,0)
(118,157,0)
(82,204,0)
(169,181,0)
(0,141,0)
(15,136,0)
(117,33,0)
(56,12,0)
(202,73,0)
(61,23,0)
(118,80,0)
(71,169,0)
(51,166,0)
(193,135,0)
(191,38,0)
(183,24,0)
(165,179,0)
(54,128,0)
(167,24,0)
(151,15,0)
(68,87,0)
(12,180,0)
(22,123,0)
(204,82,0)
(59,15,0)
(15,132,0)
(189,39,0)
(192,179,0)
(11,63,0)
(188,171,0)
(33,136,0)
(144,107,0)
(142,82,0)
(33,80,0)
(100,166,0)
(47,110,0)
(144,174,0)
(203,174,0)
(193,39,0)
(151,123,0)
(169,39,0)
(41,193,0)
(129,123,0)
(108,136,0)
(10,35,0)
(173,85,0)
(17,110,0)
(85,4,0)
(204,18,0)
(103,80,0)
(184,97,0)
(36,100,0)
(72,181,0)
(106,44,0)
(59,123,0)
(137,115,0)
(169,23,0)
(203,157,0)
(106,70,0)
(190,103,0)
(96,151,0)
(157,80,0)
(160,144,0)
(203,107,0)
(18,99,0)
(56,20,0)
(195,9,0)
(21,191,0)
(61,70,0)
(44,106,0)
(198,191,0)
(12,128,0)
(97,80,0)
(32,15,0)
(52,2,0)
(88,80,0)
(75,144,0)
(98,0,0)
(143,175,0)
(176,64,0)
(171,54,0)
(111,155,0)
(118,123,0)
(39,181,0)
(62,61,0)
(76,132,0)
(100,76,0)
(49,203,0)
(112,83,0)
(110,175,0)
(160,33,0)
(77,108,0)
(54,80,0)
(180,80,0)
(118,39,0)
(26,39,0)
(73,174,0)
(58,37,0)
(20,56,0)
(23,121,0)
(27,103,0)
(118,54,0)
(107,87,0)
(60,70,0)
(157,203,0)
(123,181,0)
(23,80,0)
(151,23,0)
(2,141,0)
(193,157,0)
(76,100,0)
(61,89,0)
(64,39,0)
(4,136,0)
(82,108,0)
(89,37,0)
(73,107,0)
(37,89,0)
(93,16,0)
(179,80,0)
(177,120,0)
(106,89,0)
(179,136,0)
(122,203,0)
(151,80,0)
(109,120,0)
(33,39,0)
(0,98,0)
(159,118,0)
(115,193,0)
(79,132,0)
(118,136,0)
(34,54,0)
(104,181,0)
(35,134,0)
(99,18,0)
(105,181,0)
(85,98,0)
(24,136,0)
(39,26,0)
(94,23,0)
(201,151,0)
(43,181,0)
(45,59,0)
(55,64,0)
(7,16,0)
(147,37,0)
(161,38,0)
(82,54,0)
(148,15,0)
(187,87,0)
(103,39,0)
(169,123,0)
(169,54,0)
(137,174,0)
(135,24,0)
(18,204,0)
(13,121,0)
(180,116,1)
(100,166,1)
(38,191,1)
(115,193,1)
(97,136,1)
(196,2,1)
(38,161,1)
(149,151,1)
(62,95,1)
(49,122,1)
(33,117,1)
(79,123,1)
(15,32,1)
(35,10,1)
(163,130,1)
(93,16,1)
(183,114,1)
(189,38,1)
(118,157,1)
(162,66,1)
(144,101,1)
(116,74,1)
(40,64,1)
(99,12,1)
(98,0,1)
(27,190,1)
(64,135,1)
(157,80,1)
(70,60,1)
(173,200,1)
(118,136,1)
(56,102,1)
(56,12,1)
(82,80,1)
(167,183,1)
(179,80,1)
(106,89,1)
(190,67,1)
(142,108,1)
(20,179,1)
(191,123,1)
(115,137,1)
(193,157,1)
(101,75,1)
(164,51,1)
(6,160,1)
(191,80,1)
(88,80,1)
(178,40,1)
(112,178,1)
(73,158,1)
(52,200,1)
(76,100,1)
(67,174,1)
(14,151,1)
(156,0,1)
(179,192,1)
(41,138,1)
(23,80,1)
(170,189,1)
(17,163,1)
(8,172,1)
(99,124,1)
(126,70,1)
(71,88,1)
(1,15,1)
(95,94,1)
(22,204,1)
(33,80,1)
(73,107,1)
(166,164,1)
(58,147,1)
(97,23,1)
(141,2,1)
(180,186,1)
(127,35,1)
(71,53,1)
(59,45,1)
(46,80,1)
(77,12,1)
(54,80,1)
(69,54,1)
(171,80,1)
(66,59,1)
(103,80,1)
(39,80,1)
(114,39,1)
(73,174,1)
(129,22,1)
(46,78,1)
(23,61,1)
(180,80,1)
(171,188,1)
(5,77,1)
(31,154,1)
(169,80,1)
(0,150,1)
(199,84,1)
(203,174,1)
(176,135,1)
(113,35,1)
(16,57,1)
(89,37,1)
(151,123,1)
(168,119,1)
(82,108,1)
(175,93,1)
(24,136,1)
(118,123,1)
(51,79,1)
(125,103,1)
(103,157,1)
(63,11,1)
(75,33,1)
(18,20,1)
(82,142,1)
(186,116,1)
(61,89,1)
(139,16,1)
(85,57,1)
(64,80,1)
(179,136,1)
(82,54,1)
(44,97,1)
(160,33,1)
(110,175,1)
(108,136,1)
(192,165,1)
(16,92,1)
(37,58,1)
(93,139,1)
(103,27,1)
(122,6,1)
(193,39,1)
(24,167,1)
(74,86,1)
(119,8,1)
(61,62,1)
(85,98,1)
(157,203,1)
(123,129,1)
(148,38,1)
(21,132,1)
(47,175,1)
(59,123,1)
(39,26,1)
(198,21,1)
(96,126,1)
(10,168,1)
(85,173,1)
(151,80,1)
(118,17,1)
(4,136,1)
(191,136,1)
(46,83,1)
(144,174,1)
(30,118,1)
(15,132,1)
(169,39,1)
(17,110,1)
(71,169,1)
(106,140,1)
(28,160,1)
(117,125,1)
(37,70,1)
(9,195,1)
(42,23,1)
(169,54,1)
(97,123,1)
(31,153,1)
(38,132,1)
(169,23,1)
(98,156,1)
(103,135,1)
(17,57,1)
(118,80,1)
(154,204,1)
(78,83,1)
(97,80,1)
(84,103,1)
(33,39,1)
(201,96,1)
(135,24,1)
(200,133,1)
(54,171,1)
(151,201,1)
(31,19,1)
(61,70,1)
(107,46,1)
(118,23,1)
(137,174,1)
(169,123,1)
(59,80,1)
(97,184,1)
(33,136,1)
(202,3,1)
(92,7,1)
(153,44,1)
(104,9,1)
(33,157,1)
(83,112,1)
(133,131,1)
(34,127,1)
(91,159,1)
(45,1,1)
(191,198,1)
(189,59,1)
(18,99,1)
(130,91,1)
(193,80,1)
(0,141,1)
(31,28,1)
(145,97,1)
(131,64,1)
(169,157,1)
(165,99,1)
(189,126,1)
(106,70,1)
(118,54,1)
(175,143,1)
(11,119,1)
(203,107,1)
(137,107,1)
(123,80,1)
(151,23,1)
(152,48,1)
(140,145,1)
(151,15,1)
(2,57,1)
(19,115,1)
(64,55,1)
(46,39,1)
(174,73,1)
(199,67,1)
(108,5,1)
(60,152,1)
(124,82,1)
(7,130,1)
(137,199,1)
(195,4,1)
(36,166,1)
(126,89,1)
(71,104,1)
(188,34,1)
(150,141,1)
(67,107,1)
(81,52,1)
(12,180,1)
(60,48,1)
(132,76,1)
(35,134,1)
(44,106,1)
(119,136,1)
(88,113,1)
(55,176,1)
(59,15,1)
(15,136,1)
(197,162,1)
(141,196,1)
(144,107,1)
(159,31,1)
(203,49,1)
(32,148,1)
(204,18,1)
(189,14,1)
(193,135,1)
(76,194,1)
(94,44,1)
(102,179,1)
(143,93,1)
(158,202,1)
(86,69,1)
(131,115,1)
(4,85,1)
(2,81,1)
(20,56,1)
(110,47,1)
(100,36,1)
(138,137,1)
(22,127,1)
(53,63,1)
(160,144,1)
(64,39,1)
(179,54,1)
(194,100,1)
(37,89,1)
(48,197,1)
(3,157,1)
(184,149,1)
(180,54,1)
(26,170,1)
(169,30,1)
(118,39,1)
(161,191,1)
(193,41,1)
(204,82,1)
(147,42,1)
(103,39,1)
(32,38,2)
(26,59,2)
(99,82,2)
(132,204,2)
(200,115,2)
(22,127,2)
(175,93,2)
(33,39,2)
(141,200,2)
(140,151,2)
(1,38,2)
(64,135,2)
(39,38,2)
(10,119,2)
(151,126,2)
(46,39,2)
(159,204,2)
(47,130,2)
(152,59,2)
(40,64,2)
(33,157,2)
(88,35,2)
(160,33,2)
(157,203,2)
(166,127,2)
(160,144,2)
(11,119,2)
(186,127,2)
(137,67,2)
(183,59,2)
(190,67,2)
(37,70,2)
(193,157,2)
(46,80,2)
(132,76,2)
(85,115,2)
(151,123,2)
(103,157,2)
(118,17,2)
(4,64,2)
(133,64,2)
(82,80,2)
(61,44,2)
(55,38,2)
(46,83,2)
(92,130,2)
(106,151,2)
(197,59,2)
(118,23,2)
(38,132,2)
(5,127,2)
(44,97,2)
(61,70,2)
(180,80,2)
(169,157,2)
(156,200,2)
(118,160,2)
(170,126,2)
(30,115,2)
(2,57,2)
(27,67,2)
(196,200,2)
(110,175,2)
(151,15,2)
(126,59,2)
(115,103,2)
(7,130,2)
(15,136,2)
(38,191,2)
(101,103,2)
(135,126,2)
(138,137,2)
(77,127,2)
(4,85,2)
(56,12,2)
(180,116,2)
(191,127,2)
(170,59,2)
(199,103,2)
(28,160,2)
(176,151,2)
(184,151,2)
(18,20,2)
(195,115,2)
(118,80,2)
(192,99,2)
(102,99,2)
(23,61,2)
(124,82,2)
(174,160,2)
(17,57,2)
(108,136,2)
(31,44,2)
(30,204,2)
(59,123,2)
(39,26,2)
(15,132,2)
(135,24,2)
(167,151,2)
(26,38,2)
(135,59,2)
(59,38,2)
(71,169,2)
(133,115,2)
(144,103,2)
(176,38,2)
(189,38,2)
(129,127,2)
(151,23,2)
(46,64,2)
(91,44,2)
(64,80,2)
(199,67,2)
(200,64,2)
(64,39,2)
(118,204,2)
(113,35,2)
(6,160,2)
(131,64,2)
(110,130,2)
(204,127,2)
(33,103,2)
(107,46,2)
(191,80,2)
(169,160,2)
(114,126,2)
(78,64,2)
(157,80,2)
(176,126,2)
(159,115,2)
(88,80,2)
(93,130,2)
(20,99,2)
(4,136,2)
(130,44,2)
(84,103,2)
(35,134,2)
(153,44,2)
(164,204,2)
(169,204,2)
(173,200,2)
(123,204,2)
(118,157,2)
(169,54,2)
(31,204,2)
(154,204,2)
(71,88,2)
(16,57,2)
(193,80,2)
(158,160,2)
(115,137,2)
(180,127,2)
(203,174,2)
(145,151,2)
(189,126,2)
(100,166,2)
(130,204,2)
(79,127,2)
(48,59,2)
(55,59,2)
(148,38,2)
(64,126,2)
(17,110,2)
(91,115,2)
(97,136,2)
(19,115,2)
(143,130,2)
(159,160,2)
(70,59,2)
(97,151,2)
(167,38,2)
(97,123,2)
(150,200,2)
(91,160,2)
(131,115,2)
(169,44,2)
(194,127,2)
(114,38,2)
(107,64,2)
(167,126,2)
(56,99,2)
(21,127,2)
(115,67,2)
(62,44,2)
(49,160,2)
(108,127,2)
(0,141,2)
(149,151,2)
(137,107,2)
(58,44,2)
(161,127,2)
(103,39,2)
(23,44,2)
(157,160,2)
(118,136,2)
(169,39,2)
(119,136,2)
(55,126,2)
(31,115,2)
(38,204,2)
(98,200,2)
(59,80,2)
(168,119,2)
(103,80,2)
(135,151,2)
(54,171,2)
(44,151,2)
(91,204,2)
(126,44,2)
(81,200,2)
(85,98,2)
(122,160,2)
(55,151,2)
(167,59,2)
(9,64,2)
(171,80,2)
(142,127,2)
(26,126,2)
(36,127,2)
(194,204,2)
(179,80,2)
(39,80,2)
(16,130,2)
(137,103,2)
(18,82,2)
(202,160,2)
(198,127,2)
(42,44,2)
(51,127,2)
(45,38,2)
(35,119,2)
(37,44,2)
(130,160,2)
(52,200,2)
(14,151,2)
(93,16,2)
(127,35,2)
(24,136,2)
(198,204,2)
(178,64,2)
(17,115,2)
(38,127,2)
(64,59,2)
(95,44,2)
(170,151,2)
(118,54,2)
(204,18,2)
(141,2,2)
(24,59,2)
(36,204,2)
(179,99,2)
(175,130,2)
(73,160,2)
(54,80,2)
(163,130,2)
(97,80,2)
(67,160,2)
(103,67,2)
(104,64,2)
(71,104,2)
(176,59,2)
(100,204,2)
(82,108,2)
(34,127,2)
(201,126,2)
(20,56,2)
(33,136,2)
(147,44,2)
(161,204,2)
(17,160,2)
(17,44,2)
(61,89,2)
(179,136,2)
(159,44,2)
(166,204,2)
(24,126,2)
(71,53,2)
(97,23,2)
(59,15,2)
(100,127,2)
(203,107,2)
(130,115,2)
(118,115,2)
(164,127,2)
(66,59,2)
(79,204,2)
(117,103,2)
(144,107,2)
(22,204,2)
(114,151,2)
(12,180,2)
(96,126,2)
(20,179,2)
(169,115,2)
(51,204,2)
(85,64,2)
(191,123,2)
(125,103,2)
(30,160,2)
(135,38,2)
(193,135,2)
(129,204,2)
(103,135,2)
(98,0,2)
(116,127,2)
(26,151,2)
(193,39,2)
(39,59,2)
(3,160,2)
(115,193,2)
(39,151,2)
(183,38,2)
(191,136,2)
(160,103,2)
(83,64,2)
(193,137,2)
(189,59,2)
(169,23,2)
(41,137,2)
(114,59,2)
(104,115,2)
(169,80,2)
(76,127,2)
(189,151,2)
(82,127,2)
(64,151,2)
(89,37,2)
(67,64,2)
(139,130,2)
(179,54,2)
(24,151,2)
(73,174,2)
(23,80,2)
(54,127,2)
(53,119,2)
(63,119,2)
(123,127,2)
(76,100,2)
(70,60,2)
(195,64,2)
(106,70,2)
(170,38,2)
(112,64,2)
(37,89,2)
(24,38,2)
(94,44,2)
(151,80,2)
(4,115,2)
(86,127,2)
(174,73,2)
(203,160,2)
(89,44,2)
(18,99,2)
(165,99,2)
(0,200,2)
(31,160,2)
(74,127,2)
(188,127,2)
(73,107,2)
(85,57,2)
(69,127,2)
(17,204,2)
(76,204,2)
(39,126,2)
(118,44,2)
(180,54,2)
(132,127,2)
(64,38,2)
(60,48,2)
(21,204,2)
(60,59,2)
(191,204,2)
(169,123,2)
(99,12,2)
(171,127,2)
(15,38,2)
(137,174,2)
(75,103,2)
(204,82,2)
(106,89,2)
(183,126,2)
(123,80,2)
(144,174,2)
(2,200,2)
(9,115,2)
(30,44,2)
(183,151,2)
(82,54,2)
(33,80,2)
(162,59,2)
(12,127,2)
(118,123,2)
(118,39,2)
(44,106,2)
-----------------------------------
(0,filp->f_path.dentry->d_name)
(1,addr)
(2,filp->f_path)
(3,vma)
(4,printk("[area] l=%lx (ENOMEM)
(5,len)
(6,addr)
(7,filp)
(8,TASK_SIZE)
(9,-ENOMEM)
(10,MAP_FIXED)
(11,ENOMEM)
(12,vma = find_vma(current->mm, addr)
(13,if (addr > limit)
(14,break;)
(15,limit -= len)
(16,filp->f_path)
(17,filp ? filp->f_path.dentry->d_name.name : "")
(18,!vma || addr + len <= vm_start_gap(vma)
(19,goto success;)
(20,addr + len <= vm_start_gap(vma)
(21,addr)
(22,addr)
(23,addr = vma->vm_end)
(24,TASK_SIZE - len)
(25,limit)
(26,PAGE_ALIGN(0x80000000)
(27,limit)
(28,goto success;)
(29,if (len > TASK_SIZE)
(30,addr)
(31,"[area] l=%lx ad=%lx f=\'%s\'\\n")
(32,len)
(33,addr + len)
(34,addr)
(35,flags & MAP_FIXED)
(36,start_stack)
(37,vma->vm_next)
(38,addr + len <= limit)
(39,addr = PAGE_ALIGN(0x80000000)
(40,vma)
(41,limit)
(42,vma)
(43,if (addr + len <= limit)
(44,addr + len <= vma->vm_start)
(45,limit)
(46,find_vma(current->mm, addr)
(47,name)
(48,current->mm)
(49,vm_end)
(50,if (addr + len <= vma->vm_start)
(51,current)
(52,filp)
(53,return -ENOMEM;)
(54,addr = PAGE_ALIGN(addr)
(55,limit)
(56,vm_start_gap(vma)
(57,struct file *filp)
(58,vm_next)
(59,addr <= limit)
(60,find_vma(current->mm, PAGE_SIZE)
(61,vma->vm_end)
(62,vm_end)
(63,-ENOMEM)
(64,addr <= limit)
(65,for (; vma; vma = vma->vm_next)
(66,vma)
(67,vma)
(68,for (; vma; vma = vma->vm_next)
(69,vma)
(70,vma = find_vma(current->mm, PAGE_SIZE)
(71,RET)
(72,if (addr <= limit)
(73,vma->vm_next)
(74,mm)
(75,vma)
(76,current->mm->start_stack - 0x00200000)
(77,TASK_SIZE)
(78,addr)
(79,limit)
(80,unsigned long addr)
(81,f_path)
(82,TASK_SIZE - len >= addr)
(83,current->mm)
(84,break;)
(85,filp ? filp->f_path.dentry->d_name.name : "")
(86,current)
(87,)
(88,return addr;)
(89,vma = vma->vm_next)
(90,)
(91,addr)
(92,f_path)
(93,filp->f_path.dentry)
(94,addr)
(95,vma)
(96,addr)
(97,addr + len)
(98,filp->f_path.dentry->d_name.name)
(99,!vma)
(100,current->mm->start_stack)
(101,vm_start)
(102,vma)
(103,addr > limit)
(104,return -ENOMEM;)
(105,if (flags & MAP_FIXED)
(106,vma->vm_start)
(107,vma = find_vma(current->mm, addr)
(108,TASK_SIZE - len)
(109,if (addr > limit)
(110,filp->f_path.dentry->d_name.name)
(111,if (addr <= limit)
(112,mm)
(113,addr)
(114,limit)
(115,!vma && addr <= limit)
(116,current->mm)
(117,len)
(118,printk("[area] l=%lx ad=%lx f=\'%s\'\\n",\n\\n\\t       len, addr, filp ? filp->f_path.dentry->d_name.name : "")
(119,len > TASK_SIZE)
(120,)
(121,)
(122,vma)
(123,addr = PAGE_SIZE)
(124,vma)
(125,addr)
(126,vma)
(127,addr)
(128,)
(129,PAGE_SIZE)
(130,filp)
(131,"[area] l=%lx (ENOMEM)
(132,limit = (current->mm->start_stack - 0x00200000)
(133,len)
(134,unsigned long flags)
(135,limit = TASK_SIZE - len)
(136,unsigned long len)
(137,!vma)
(138,addr)
(139,dentry)
(140,vm_start)
(141,filp->f_path.dentry)
(142,addr)
(143,d_name)
(144,vma->vm_start)
(145,vma)
(146,if (TASK_SIZE - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vm_start_gap(vma)
(147,vma)
(148,limit)
(149,addr)
(150,d_name)
(151,addr > limit)
(152,PAGE_SIZE)
(153,goto success;)
(154,goto success;)
(155,)
(156,name)
(157,addr = vma->vm_end)
(158,vm_next)
(159,len)
(160,addr + len <= vma->vm_start)
(161,limit)
(162,current)
(163,"")
(164,mm)
(165,addr)
(166,current->mm)
(167,len)
(168,flags)
(169,return addr;)
(170,0x80000000)
(171,PAGE_ALIGN(addr)
(172,len)
(173,"")
(174,vma = vma->vm_next)
(175,filp->f_path.dentry->d_name)
(176,addr)
(177,if (addr + len <= vma->vm_start)
(178,current)
(179,addr + len)
(180,find_vma(current->mm, addr)
(181,)
(182,vma)
(183,TASK_SIZE)
(184,len)
(185,success:)
(186,addr)
(187,if (!vma && addr <= limit)
(188,addr)
(189,addr)
(190,addr)
(191,addr + len)
(192,len)
(193,addr <= limit)
(194,0x00200000)
(195,ENOMEM)
(196,dentry)
(197,mm)
(198,len)
(199,vma)
(200,filp)
(201,limit)
(202,vma)
(203,vma->vm_end)
(204,TASK_SIZE - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vm_start_gap(vma)
(205,if (addr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^