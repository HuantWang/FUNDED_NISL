-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
29,32
30,31
31,32
33,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
95,98
96,97
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
-----nextToken-----
2,4,9,11,15,16,20,25,28,32,37,38,43,45,46,51,54,56,59,60,65,68,70,73,76,79,80,84,86,91,93,97,99,101,105,107,111,113,118,119
-----computeFrom-----
13,14
13,15
23,24
23,25
48,49
48,50
49,50
49,51
57,58
57,59
63,64
63,65
74,75
74,76
82,83
82,84
-----guardedBy-----
56,101
59,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(47,18,0)
(29,44,0)
(51,18,0)
(37,33,0)
(45,51,0)
(21,20,0)
(34,37,0)
(50,40,0)
(40,17,0)
(17,36,0)
(55,49,0)
(22,14,0)
(11,10,0)
(5,39,0)
(33,12,0)
(34,18,0)
(1,28,0)
(24,6,0)
(52,48,0)
(1,9,0)
(37,17,0)
(15,33,0)
(40,50,0)
(18,51,0)
(18,33,0)
(56,42,0)
(20,48,0)
(25,2,0)
(26,17,0)
(0,36,0)
(18,17,0)
(31,52,0)
(46,48,0)
(32,6,0)
(23,36,0)
(20,2,0)
(27,36,0)
(10,2,0)
(3,52,0)
(35,42,0)
(33,15,0)
(6,43,0)
(29,2,0)
(14,41,0)
(2,48,0)
(40,33,0)
(19,40,0)
(16,17,0)
(54,33,0)
(10,48,0)
(44,29,0)
(52,2,0)
(18,34,0)
(30,37,0)
(8,28,0)
(50,29,0)
(37,34,0)
(40,39,0)
(28,1,0)
(39,40,0)
(29,50,0)
(38,37,0)
(42,2,0)
(2,29,0)
(53,55,0)
(17,16,1)
(42,35,1)
(34,18,1)
(37,17,1)
(31,42,1)
(35,56,1)
(28,8,1)
(40,33,1)
(18,33,1)
(40,17,1)
(52,3,1)
(7,10,1)
(21,52,1)
(45,47,1)
(2,29,1)
(40,39,1)
(19,25,1)
(33,15,1)
(34,37,1)
(50,40,1)
(18,51,1)
(38,30,1)
(10,11,1)
(13,4,1)
(39,5,1)
(52,2,1)
(11,20,1)
(31,1,1)
(3,31,1)
(4,17,1)
(37,38,1)
(7,14,1)
(55,53,1)
(20,2,1)
(1,28,1)
(25,34,1)
(14,22,1)
(42,2,1)
(22,34,1)
(47,13,1)
(7,55,1)
(18,17,1)
(29,50,1)
(37,33,1)
(8,42,1)
(54,4,1)
(30,18,1)
(13,33,1)
(51,45,1)
(56,2,1)
(10,2,1)
(53,13,1)
(29,44,1)
(15,54,1)
(20,21,1)
(5,19,1)
(16,26,1)
(37,33,2)
(29,44,2)
(40,33,2)
(29,34,2)
(40,17,2)
(33,4,2)
(53,13,2)
(42,2,2)
(21,34,2)
(56,34,2)
(40,39,2)
(37,18,2)
(20,34,2)
(14,34,2)
(28,42,2)
(37,17,2)
(25,34,2)
(38,18,2)
(55,13,2)
(2,34,2)
(47,13,2)
(39,34,2)
(51,13,2)
(8,42,2)
(34,13,2)
(33,15,2)
(30,18,2)
(15,4,2)
(5,34,2)
(31,34,2)
(22,34,2)
(45,13,2)
(19,34,2)
(18,33,2)
(11,34,2)
(50,34,2)
(52,2,2)
(29,50,2)
(35,34,2)
(40,34,2)
(34,18,2)
(18,17,2)
(42,34,2)
(20,2,2)
(18,51,2)
(1,28,2)
(18,13,2)
(3,34,2)
(1,42,2)
(52,34,2)
(10,34,2)
(34,37,2)
(10,2,2)
(2,29,2)
(54,4,2)
(50,40,2)
-----------------------------------
(0,if(staticReturnsFalse()
(1,exit(-1)
(2,myString = (char *)
(3,HELLO_STRING)
(4,staticReturnsTrue()
(5,char)
(6,)
(7,RET)
(8,1)
(9,)
(10,free(myString)
(11,myString)
(12,)
(13,staticReturnsFalse()
(14,printLine("Input is less than the length of the source string or too large")
(15,rand()
(16,0)
(17,data = 0)
(18,data > strlen(HELLO_STRING)
(19,data)
(20,printLine(myString)
(21,myString)
(22,"Input is less than the length of the source string or too large")
(23,data)
(24,myString)
(25,myString)
(26,data)
(27,if(staticReturnsTrue()
(28,-1)
(29,(char *)
(30,data)
(31,myString)
(32,if (data > strlen(HELLO_STRING)
(33,data = rand()
(34,data > strlen(HELLO_STRING)
(35,NULL)
(36,)
(37,data < 100)
(38,100)
(39,sizeof(char)
(40,data*sizeof(char)
(41,)
(42,myString == NULL)
(43,)
(44,char *)
(45,HELLO_STRING)
(46,if (myString == NULL)
(47,data)
(48,)
(49,)
(50,malloc(data*sizeof(char)
(51,strlen(HELLO_STRING)
(52,strcpy(myString, HELLO_STRING)
(53,"Benign, fixed string")
(54,data)
(55,printLine("Benign, fixed string")
(56,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^