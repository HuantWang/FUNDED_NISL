-----label-----
0
-----code-----
static void goodB2G1()
{
    int64_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
66,67
66,68
67,68
69,70
69,71
70,71
73,74
73,75
73,76
74,75
76,77
77,78
78,79
78,80
79,80
82,83
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,62,63,64,68,71,72,75,80,81,86,88
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int64_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int64_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(30,6,0)
(37,11,0)
(21,10,0)
(36,22,0)
(19,20,0)
(25,8,0)
(18,17,0)
(18,13,0)
(6,13,0)
(13,7,0)
(31,13,0)
(23,15,0)
(1,38,0)
(27,6,0)
(20,17,0)
(20,38,0)
(20,23,0)
(0,7,0)
(26,7,0)
(18,5,0)
(17,8,0)
(34,9,0)
(28,8,0)
(10,13,0)
(33,10,0)
(2,8,0)
(38,35,0)
(38,20,0)
(6,3,0)
(23,13,0)
(15,23,0)
(16,17,0)
(23,20,0)
(3,6,0)
(37,9,0)
(9,37,0)
(14,35,0)
(39,36,0)
(29,18,0)
(13,23,0)
(3,7,0)
(32,17,0)
(35,38,0)
(24,3,1)
(35,14,1)
(30,27,1)
(33,21,1)
(9,34,1)
(34,10,1)
(26,10,1)
(6,30,1)
(6,13,1)
(17,16,1)
(37,9,1)
(31,12,1)
(20,17,1)
(24,12,1)
(18,29,1)
(20,38,1)
(18,17,1)
(4,36,1)
(18,13,1)
(23,15,1)
(4,18,1)
(13,23,1)
(1,19,1)
(3,6,1)
(21,13,1)
(39,24,1)
(36,39,1)
(10,33,1)
(12,17,1)
(38,35,1)
(27,26,1)
(16,32,1)
(26,37,1)
(23,20,1)
(29,24,1)
(14,1,1)
(10,13,1)
(19,31,1)
(9,10,2)
(38,35,2)
(33,12,2)
(37,9,2)
(34,10,2)
(35,12,2)
(30,12,2)
(18,17,2)
(26,12,2)
(10,13,2)
(20,38,2)
(13,12,2)
(19,12,2)
(36,24,2)
(13,23,2)
(3,12,2)
(10,12,2)
(18,24,2)
(20,12,2)
(6,12,2)
(23,12,2)
(14,12,2)
(18,13,2)
(6,13,2)
(1,12,2)
(27,12,2)
(23,15,2)
(31,12,2)
(3,6,2)
(39,24,2)
(38,12,2)
(21,12,2)
(37,10,2)
(29,24,2)
(23,20,2)
(20,17,2)
-----------------------------------
(0,if (data == NULL)
(1,100)
(2,if(globalTrue)
(3,printLongLongLine(data[0])
(4,RET)
(5,)
(6,data[0])
(7,)
(8,)
(9,-1)
(10,data == NULL)
(11,)
(12,globalTrue)
(13,data = (int64_t *)
(14,int64_t)
(15,int64_t *)
(16,NULL)
(17,data = NULL)
(18,free(data)
(19,data)
(20,realloc(data, 100*sizeof(int64_t)
(21,data)
(22,)
(23,(int64_t *)
(24,globalFalse)
(25,if(globalFalse)
(26,L)
(27,data)
(28,data)
(29,data)
(30,0)
(31,data)
(32,data)
(33,NULL)
(34,1)
(35,sizeof(int64_t)
(36,printLine("Benign, fixed string")
(37,exit(-1)
(38,100*sizeof(int64_t)
(39,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^