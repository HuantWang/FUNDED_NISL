-----label-----
0
-----code-----
int
socreate(int dom, struct socket **aso, int type, int proto)
{
	struct proc	*p;
	struct protosw	*prp;
	struct socket	*so;
	int		error, s;

	p = curproc;		/* XXX */
	if (proto)
		prp = pffindproto(dom, proto, type);
	else
		prp = pffindtype(dom, type);
	if (prp == 0 || prp->pr_usrreq == 0)
		return (EPROTONOSUPPORT);
	if (prp->pr_type != type)
		return (EPROTOTYPE);
	s = splsoftnet();
	so = pool_get(&socket_pool, PR_WAITOK);
	memset((caddr_t)so, 0, sizeof(*so));
	TAILQ_INIT(&so->so_q0);
	TAILQ_INIT(&so->so_q);
	so->so_type = type;
	so->so_proto = prp;
	so->so_send = sosend;
	so->so_receive = soreceive;
#ifdef MBUFTRACE
	so->so_rcv.sb_mowner = &prp->pr_domain->dom_mowner;
	so->so_snd.sb_mowner = &prp->pr_domain->dom_mowner;
	so->so_mowner = &prp->pr_domain->dom_mowner;
#endif
	if (p != 0)
		so->so_uid = p->p_ucred->cr_uid;
	else
		so->so_uid = UID_MAX;
	error = (*prp->pr_usrreq)(so, PRU_ATTACH, (struct mbuf *)0,
	    (struct mbuf *)(long)proto, (struct mbuf *)0, p);
	if (error) {
		so->so_state |= SS_NOFDREF;
		sofree(so);
		splx(s);
		return (error);
	}
	splx(s);
	*aso = so;
	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
12,15
16,17
16,18
18,19
20,21
20,22
22,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
24,38
24,39
24,40
24,41
24,42
24,43
24,44
24,45
24,46
24,47
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
47,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
59,62
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
79,82
80,81
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
93,95
94,95
98,99
99,100
100,101
102,103
102,104
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
112,113
114,115
115,116
115,117
116,117
118,119
119,120
121,122
122,123
122,124
123,124
125,126
125,127
125,128
126,127
128,129
129,130
131,132
133,134
134,135
134,136
134,137
134,138
135,136
137,138
137,139
138,139
138,140
139,140
142,143
145,146
146,147
147,148
148,149
150,151
151,152
151,153
152,153
154,155
155,156
155,157
156,157
159,160
160,161
160,162
161,162
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
170,172
171,172
174,175
176,177
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
186,188
187,188
190,191
192,193
193,194
193,195
194,195
194,196
195,196
198,199
200,201
200,202
200,203
201,202
201,203
202,203
205,206
206,207
206,208
207,208
207,209
208,209
211,212
211,213
212,213
212,214
213,214
217,218
218,219
218,220
219,220
219,221
220,221
223,224
225,226
226,227
226,228
227,228
229,230
229,231
229,232
229,233
229,234
229,235
229,236
230,231
231,232
232,233
232,234
233,234
236,237
238,239
240,241
240,242
241,242
241,243
242,243
244,245
247,248
247,249
248,249
248,250
249,250
251,252
253,254
253,255
254,255
254,256
257,258
259,260
259,261
260,261
260,262
261,262
263,264
266,267
268,269
268,270
269,270
271,272
271,273
271,274
271,275
272,273
273,274
273,275
274,275
274,276
275,276
278,279
280,281
281,282
281,283
282,283
284,285
286,287
287,288
287,289
288,289
290,291
292,293
293,294
294,295
296,297
297,298
297,299
298,299
300,301
302,303
303,304
303,305
304,305
305,306
307,308
309,310
310,311
-----nextToken-----
2,4,6,8,11,13,14,15,17,19,21,23,28,30,31,35,37,38,42,44,45,48,50,52,56,58,61,65,68,70,72,74,78,81,83,85,90,91,95,96,97,101,106,107,109,113,117,120,124,127,130,132,136,140,141,143,144,149,153,157,158,162,166,167,172,173,175,180,181,183,188,189,191,196,197,199,203,204,209,210,214,215,216,221,222,224,228,234,235,237,239,243,245,246,250,252,255,256,258,262,264,265,267,270,276,277,279,283,285,289,291,295,299,301,306,308,311
-----computeFrom-----
54,55
54,56
63,64
63,65
76,77
76,78
87,88
87,89
88,89
88,90
92,93
92,94
103,104
103,105
115,116
115,117
122,123
122,124
169,170
169,171
177,178
177,179
185,186
185,187
193,194
193,195
201,202
201,203
206,207
206,208
218,219
218,220
226,227
226,228
273,274
273,275
303,304
303,305
-----guardedBy-----
203,214
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
intsocreate(int dom, struct socket **aso, int type, int proto){	struct proc	*p;	struct protosw	*prp;	struct socket	*so;	int		error, s;	p = curproc;		/* XXX */	if (proto)		prp = pffindproto(dom, proto, type);	else		prp = pffindtype(dom, type);	if (prp == 0 || prp->pr_usrreq == 0)		return (EPROTONOSUPPORT);	if (prp->pr_type != type)		return (EPROTOTYPE);	s = splsoftnet();	so = pool_get(&socket_pool, PR_WAITOK);	memset((caddr_t)so, 0, sizeof(*so));	TAILQ_INIT(&so->so_q0);	TAILQ_INIT(&so->so_q);	so->so_type = type;	so->so_proto = prp;	so->so_send = sosend;	so->so_receive = soreceive;#ifdef MBUFTRACE	so->so_rcv.sb_mowner = &prp->pr_domain->dom_mowner;	so->so_snd.sb_mowner = &prp->pr_domain->dom_mowner;	so->so_mowner = &prp->pr_domain->dom_mowner;#endif	if (p != 0)		so->so_uid = p->p_ucred->cr_uid;	else		so->so_uid = UID_MAX;	error = (*prp->pr_usrreq)(so, PRU_ATTACH, (struct mbuf *)0,	    (struct mbuf *)(long)proto, (struct mbuf *)0, p);	if (error) {		so->so_state |= SS_NOFDREF;		sofree(so);		splx(s);		return (error);	}	splx(s);	*aso = so;	return (0);}
int
socreate(int dom, struct socket **aso, int type, int proto)
socreate
int dom
int
dom
dom
struct socket **aso
struct socket
socket
**aso
*
*
aso
int type
int
type
type
int proto
int
proto
proto
{	struct proc	*p;	struct protosw	*prp;	struct socket	*so;	int		error, s;	p = curproc;		/* XXX */	if (proto)		prp = pffindproto(dom, proto, type);	else		prp = pffindtype(dom, type);	if (prp == 0 || prp->pr_usrreq == 0)		return (EPROTONOSUPPORT);	if (prp->pr_type != type)		return (EPROTOTYPE);	s = splsoftnet();	so = pool_get(&socket_pool, PR_WAITOK);	memset((caddr_t)so, 0, sizeof(*so));	TAILQ_INIT(&so->so_q0);	TAILQ_INIT(&so->so_q);	so->so_type = type;	so->so_proto = prp;	so->so_send = sosend;	so->so_receive = soreceive;#ifdef MBUFTRACE	so->so_rcv.sb_mowner = &prp->pr_domain->dom_mowner;	so->so_snd.sb_mowner = &prp->pr_domain->dom_mowner;	so->so_mowner = &prp->pr_domain->dom_mowner;#endif	if (p != 0)		so->so_uid = p->p_ucred->cr_uid;	else		so->so_uid = UID_MAX;	error = (*prp->pr_usrreq)(so, PRU_ATTACH, (struct mbuf *)0,	    (struct mbuf *)(long)proto, (struct mbuf *)0, p);	if (error) {		so->so_state |= SS_NOFDREF;		sofree(so);		splx(s);		return (error);	}	splx(s);	*aso = so;	return (0);}
struct proc	*p;
struct proc	*p;
struct proc
proc
*p
*
p
struct protosw	*prp;
struct protosw	*prp;
struct protosw
protosw
*prp
*
prp
struct socket	*so;
struct socket	*so;
struct socket
socket
*so
*
so
int		error, s;
int		error, s;
int
error
error
s
s
p = curproc;
p = curproc
p
p
curproc
curproc
if (proto)		prp = pffindproto(dom, proto, type);	else		prp = pffindtype(dom, type);
proto
proto
prp = pffindproto(dom, proto, type);
prp = pffindproto(dom, proto, type)
prp
prp
pffindproto(dom, proto, type)
pffindproto
pffindproto
dom
dom
proto
proto
type
type
prp = pffindtype(dom, type);
prp = pffindtype(dom, type)
prp
prp
pffindtype(dom, type)
pffindtype
pffindtype
dom
dom
type
type
if (prp == 0 || prp->pr_usrreq == 0)		return (EPROTONOSUPPORT);
prp == 0 || prp->pr_usrreq == 0
prp == 0
prp
prp
0
prp->pr_usrreq == 0
prp->pr_usrreq
prp
prp
pr_usrreq
0
return (EPROTONOSUPPORT);
(EPROTONOSUPPORT)
EPROTONOSUPPORT
EPROTONOSUPPORT
if (prp->pr_type != type)		return (EPROTOTYPE);
prp->pr_type != type
prp->pr_type
prp
prp
pr_type
type
type
return (EPROTOTYPE);
(EPROTOTYPE)
EPROTOTYPE
EPROTOTYPE
s = splsoftnet();
s = splsoftnet()
s
s
splsoftnet()
splsoftnet
splsoftnet
so = pool_get(&socket_pool, PR_WAITOK);
so = pool_get(&socket_pool, PR_WAITOK)
so
so
pool_get(&socket_pool, PR_WAITOK)
pool_get
pool_get
&socket_pool
socket_pool
socket_pool
PR_WAITOK
PR_WAITOK
memset((caddr_t)so, 0, sizeof(*so));
memset((caddr_t)so, 0, sizeof(*so))
memset
memset
(caddr_t)so
caddr_t
caddr_t
caddr_t

so
so
0
sizeof(*so)
(*so)
*so
so
so
TAILQ_INIT(&so->so_q0);
TAILQ_INIT(&so->so_q0)
TAILQ_INIT
TAILQ_INIT
&so->so_q0
so->so_q0
so
so
so_q0
TAILQ_INIT(&so->so_q);
TAILQ_INIT(&so->so_q)
TAILQ_INIT
TAILQ_INIT
&so->so_q
so->so_q
so
so
so_q
so->so_type = type;
so->so_type = type
so->so_type
so
so
so_type
type
type
so->so_proto = prp;
so->so_proto = prp
so->so_proto
so
so
so_proto
prp
prp
so->so_send = sosend;
so->so_send = sosend
so->so_send
so
so
so_send
sosend
sosend
so->so_receive = soreceive;
so->so_receive = soreceive
so->so_receive
so
so
so_receive
soreceive
soreceive
if (p != 0)		so->so_uid = p->p_ucred->cr_uid;	else		so->so_uid = UID_MAX;
p != 0
p
p
0
so->so_uid = p->p_ucred->cr_uid;
so->so_uid = p->p_ucred->cr_uid
so->so_uid
so
so
so_uid
p->p_ucred->cr_uid
p->p_ucred
p
p
p_ucred
cr_uid
so->so_uid = UID_MAX;
so->so_uid = UID_MAX
so->so_uid
so
so
so_uid
UID_MAX
UID_MAX
error = (*prp->pr_usrreq)(so, PRU_ATTACH, (struct mbuf *)0,	    (struct mbuf *)(long)proto, (struct mbuf *)0, p);
error = (*prp->pr_usrreq)(so, PRU_ATTACH, (struct mbuf *)0,	    (struct mbuf *)(long)proto, (struct mbuf *)0, p)
error
error
(*prp->pr_usrreq)(so, PRU_ATTACH, (struct mbuf *)0,	    (struct mbuf *)(long)proto, (struct mbuf *)0, p)
(*prp->pr_usrreq)
*prp->pr_usrreq
prp->pr_usrreq
prp
prp
pr_usrreq
so
so
PRU_ATTACH
PRU_ATTACH
(struct mbuf *)0
struct mbuf *
struct mbuf
mbuf
*
*
0
(struct mbuf *)(long)proto
struct mbuf *
struct mbuf
mbuf
*
*
(long)proto
long
long

proto
proto
(struct mbuf *)0
struct mbuf *
struct mbuf
mbuf
*
*
0
p
p
if (error) {		so->so_state |= SS_NOFDREF;		sofree(so);		splx(s);		return (error);	}
error
error
{		so->so_state |= SS_NOFDREF;		sofree(so);		splx(s);		return (error);	}
so->so_state |= SS_NOFDREF;
so->so_state |= SS_NOFDREF
so->so_state
so
so
so_state
SS_NOFDREF
SS_NOFDREF
sofree(so);
sofree(so)
sofree
sofree
so
so
splx(s);
splx(s)
splx
splx
s
s
return (error);
(error)
error
error
splx(s);
splx(s)
splx
splx
s
s
*aso = so;
*aso = so
*aso
aso
aso
so
so
return (0);
(0)
0
-----joern-----
(75,84,0)
(152,3,0)
(49,72,0)
(78,36,0)
(120,144,0)
(183,130,0)
(3,171,0)
(110,175,0)
(47,42,0)
(87,112,0)
(94,105,0)
(129,59,0)
(169,60,0)
(11,169,0)
(121,59,0)
(150,20,0)
(116,182,0)
(40,22,0)
(5,112,0)
(35,76,0)
(98,110,0)
(113,55,0)
(94,182,0)
(109,112,0)
(181,169,0)
(98,76,0)
(153,152,0)
(0,147,0)
(124,52,0)
(105,108,0)
(152,119,0)
(26,112,0)
(169,181,0)
(70,98,0)
(75,167,0)
(44,182,0)
(42,75,0)
(43,149,0)
(9,49,0)
(72,49,0)
(79,171,0)
(47,118,0)
(4,99,0)
(137,150,0)
(107,182,0)
(154,42,0)
(178,67,0)
(173,147,0)
(167,37,0)
(24,56,0)
(62,44,0)
(15,78,0)
(78,60,0)
(147,173,0)
(40,179,0)
(2,76,0)
(133,77,0)
(45,84,0)
(1,159,0)
(168,141,0)
(71,72,0)
(141,168,0)
(91,112,0)
(72,71,0)
(152,123,0)
(78,56,0)
(86,62,0)
(127,112,0)
(75,182,0)
(47,50,0)
(67,112,0)
(96,123,0)
(69,94,0)
(71,112,0)
(82,122,0)
(102,115,0)
(12,91,0)
(125,182,0)
(107,159,0)
(176,125,0)
(60,78,0)
(46,24,0)
(175,112,0)
(55,104,0)
(174,116,0)
(22,172,0)
(98,119,0)
(168,182,0)
(146,75,0)
(165,104,0)
(48,91,0)
(98,125,0)
(98,121,0)
(67,75,0)
(33,54,0)
(85,75,0)
(126,175,0)
(18,172,0)
(54,33,0)
(33,26,0)
(13,84,0)
(182,168,0)
(118,47,0)
(43,179,0)
(117,43,0)
(136,92,0)
(161,84,0)
(17,102,0)
(100,155,0)
(58,49,0)
(65,138,0)
(108,149,0)
(131,112,0)
(130,67,0)
(139,47,0)
(143,167,0)
(6,40,0)
(149,43,0)
(103,107,0)
(77,60,0)
(138,182,0)
(175,60,0)
(128,60,0)
(70,144,0)
(152,94,0)
(152,110,0)
(122,101,0)
(77,172,0)
(78,50,0)
(110,182,0)
(114,122,0)
(53,104,0)
(61,169,0)
(66,44,0)
(88,119,0)
(119,114,0)
(155,20,0)
(12,112,0)
(135,112,0)
(8,3,0)
(37,167,0)
(26,33,0)
(98,102,0)
(27,112,0)
(150,182,0)
(89,101,0)
(115,112,0)
(41,168,0)
(55,113,0)
(25,141,0)
(51,52,0)
(52,124,0)
(102,32,0)
(147,182,0)
(52,75,0)
(75,52,0)
(14,112,0)
(166,13,0)
(57,121,0)
(63,115,0)
(34,110,0)
(19,40,0)
(29,13,0)
(149,108,0)
(98,94,0)
(98,3,0)
(49,182,0)
(76,182,0)
(123,151,0)
(23,149,0)
(152,20,0)
(97,43,0)
(10,171,0)
(116,86,0)
(164,92,0)
(172,22,0)
(42,154,0)
(152,107,0)
(170,86,0)
(16,123,0)
(21,16,0)
(95,132,0)
(157,12,0)
(142,138,0)
(106,110,0)
(75,42,0)
(155,91,0)
(148,75,0)
(74,24,0)
(59,56,0)
(27,173,0)
(24,179,0)
(73,179,0)
(54,92,0)
(123,16,0)
(83,91,0)
(152,125,0)
(181,56,0)
(134,182,0)
(151,113,0)
(138,152,0)
(104,60,0)
(160,112,0)
(175,179,0)
(151,112,0)
(81,77,0)
(163,119,0)
(91,48,0)
(7,131,0)
(130,20,0)
(68,101,0)
(180,107,0)
(116,174,0)
(92,179,0)
(76,131,0)
(98,112,0)
(140,94,0)
(30,54,0)
(92,60,0)
(42,47,0)
(44,62,0)
(121,182,0)
(152,76,0)
(158,112,0)
(172,77,0)
(122,114,0)
(145,55,0)
(115,182,0)
(101,84,0)
(92,54,0)
(24,36,0)
(98,123,0)
(40,60,0)
(111,181,0)
(70,132,0)
(39,147,0)
(64,98,0)
(177,78,0)
(113,151,0)
(156,112,0)
(86,116,0)
(98,107,0)
(22,40,0)
(104,55,0)
(182,112,0)
(62,86,0)
(125,99,0)
(169,179,0)
(70,130,0)
(159,112,0)
(171,182,0)
(101,122,0)
(77,179,0)
(84,112,0)
(90,112,0)
(16,182,0)
(43,60,0)
(105,112,0)
(173,27,0)
(171,3,0)
(86,112,0)
(31,121,0)
(28,16,0)
(108,105,0)
(59,112,0)
(119,182,0)
(167,75,0)
(3,26,0)
(75,67,0)
(152,121,0)
(104,179,0)
(184,78,0)
(179,24,0)
(38,116,0)
(80,125,0)
(170,116,1)
(102,17,1)
(98,107,1)
(3,8,1)
(77,81,1)
(96,16,1)
(143,42,1)
(21,26,1)
(47,118,1)
(178,99,1)
(104,179,1)
(95,181,1)
(107,180,1)
(155,100,1)
(41,141,1)
(23,43,1)
(98,123,1)
(166,105,1)
(76,2,1)
(125,182,1)
(159,1,1)
(152,107,1)
(110,106,1)
(24,56,1)
(47,139,1)
(152,110,1)
(173,147,1)
(59,56,1)
(34,59,1)
(105,108,1)
(172,77,1)
(85,146,1)
(155,91,1)
(104,60,1)
(129,121,1)
(122,101,1)
(145,104,1)
(49,58,1)
(98,125,1)
(183,155,1)
(70,132,1)
(25,134,1)
(94,182,1)
(97,117,1)
(78,184,1)
(100,150,1)
(169,11,1)
(98,110,1)
(178,114,1)
(150,182,1)
(40,60,1)
(11,61,1)
(167,143,1)
(184,15,1)
(10,79,1)
(122,82,1)
(70,98,1)
(28,21,1)
(121,57,1)
(147,182,1)
(152,3,1)
(54,30,1)
(22,172,1)
(152,94,1)
(113,55,1)
(102,32,1)
(104,53,1)
(73,162,1)
(123,96,1)
(78,56,1)
(176,80,1)
(30,92,1)
(62,44,1)
(111,169,1)
(180,103,1)
(144,120,1)
(57,31,1)
(114,122,1)
(152,153,1)
(149,43,1)
(83,181,1)
(91,48,1)
(46,74,1)
(29,166,1)
(150,137,1)
(9,86,1)
(175,179,1)
(101,68,1)
(17,12,1)
(86,62,1)
(134,91,1)
(75,148,1)
(13,84,1)
(48,83,1)
(42,154,1)
(153,138,1)
(15,177,1)
(182,168,1)
(47,50,1)
(98,3,1)
(152,125,1)
(152,123,1)
(80,13,1)
(140,69,1)
(81,133,1)
(65,93,1)
(172,18,1)
(76,182,1)
(33,54,1)
(55,145,1)
(142,65,1)
(40,6,1)
(71,72,1)
(157,93,1)
(7,76,1)
(120,22,1)
(175,60,1)
(43,179,1)
(75,84,1)
(66,170,1)
(70,130,1)
(168,41,1)
(116,182,1)
(0,71,1)
(128,162,1)
(99,4,1)
(103,175,1)
(43,97,1)
(115,63,1)
(137,152,1)
(31,27,1)
(27,173,1)
(44,66,1)
(12,157,1)
(92,164,1)
(116,38,1)
(2,35,1)
(51,85,1)
(93,67,1)
(94,140,1)
(70,144,1)
(169,179,1)
(22,40,1)
(16,28,1)
(171,182,1)
(63,102,1)
(82,101,1)
(75,42,1)
(126,110,1)
(133,40,1)
(92,179,1)
(115,182,1)
(110,182,1)
(55,104,1)
(16,182,1)
(74,73,1)
(131,7,1)
(58,9,1)
(125,176,1)
(75,182,1)
(19,60,1)
(177,128,1)
(92,60,1)
(19,179,1)
(130,67,1)
(59,129,1)
(61,22,1)
(163,13,1)
(8,171,1)
(171,10,1)
(12,91,1)
(108,149,1)
(64,115,1)
(79,131,1)
(98,76,1)
(24,46,1)
(77,179,1)
(162,84,1)
(43,60,1)
(89,119,1)
(117,94,1)
(4,125,1)
(75,52,1)
(169,60,1)
(6,19,1)
(116,174,1)
(181,56,1)
(152,119,1)
(161,45,1)
(78,50,1)
(149,23,1)
(130,183,1)
(168,141,1)
(49,182,1)
(132,95,1)
(179,24,1)
(42,47,1)
(84,161,1)
(98,94,1)
(175,126,1)
(75,167,1)
(53,165,1)
(181,111,1)
(3,171,1)
(18,77,1)
(98,64,1)
(119,88,1)
(69,151,1)
(151,113,1)
(44,182,1)
(138,182,1)
(24,36,1)
(98,119,1)
(164,136,1)
(136,3,1)
(60,78,1)
(106,34,1)
(148,167,1)
(39,0,1)
(98,121,1)
(165,123,1)
(72,49,1)
(13,29,1)
(139,52,1)
(68,89,1)
(35,159,1)
(67,75,1)
(121,182,1)
(138,142,1)
(146,178,1)
(101,84,1)
(152,76,1)
(38,182,1)
(52,51,1)
(167,37,1)
(78,36,1)
(107,182,1)
(123,16,1)
(52,124,1)
(98,102,1)
(152,121,1)
(119,182,1)
(54,92,1)
(40,179,1)
(1,107,1)
(26,33,1)
(181,169,1)
(77,60,1)
(141,25,1)
(147,39,1)
(86,116,1)
(88,163,1)
(98,121,2)
(169,60,2)
(150,182,2)
(138,93,2)
(181,22,2)
(138,182,2)
(108,181,2)
(178,181,2)
(26,33,2)
(166,181,2)
(27,173,2)
(164,181,2)
(110,182,2)
(142,93,2)
(75,52,2)
(28,181,2)
(143,181,2)
(107,181,2)
(129,181,2)
(102,93,2)
(147,182,2)
(149,43,2)
(77,40,2)
(94,182,2)
(60,78,2)
(57,181,2)
(40,179,2)
(148,181,2)
(107,182,2)
(33,181,2)
(35,181,2)
(79,181,2)
(152,110,2)
(40,60,2)
(171,182,2)
(54,92,2)
(96,181,2)
(59,181,2)
(165,181,2)
(3,181,2)
(105,108,2)
(163,13,2)
(151,181,2)
(34,181,2)
(13,84,2)
(25,181,2)
(101,13,2)
(76,181,2)
(73,162,2)
(128,162,2)
(184,162,2)
(78,36,2)
(98,94,2)
(31,181,2)
(22,40,2)
(131,181,2)
(152,123,2)
(113,181,2)
(159,181,2)
(170,181,2)
(4,13,2)
(120,22,2)
(80,13,2)
(122,101,2)
(141,181,2)
(94,181,2)
(126,181,2)
(47,50,2)
(78,162,2)
(68,13,2)
(125,182,2)
(102,32,2)
(175,181,2)
(59,56,2)
(75,42,2)
(10,181,2)
(98,102,2)
(98,76,2)
(70,130,2)
(155,93,2)
(66,181,2)
(12,93,2)
(86,181,2)
(179,24,2)
(98,119,2)
(52,124,2)
(181,169,2)
(1,181,2)
(92,179,2)
(98,107,2)
(86,62,2)
(119,13,2)
(61,22,2)
(116,181,2)
(123,16,2)
(78,56,2)
(76,182,2)
(115,93,2)
(179,162,2)
(152,76,2)
(78,50,2)
(9,181,2)
(113,55,2)
(95,181,2)
(155,91,2)
(153,93,2)
(149,181,2)
(122,13,2)
(91,48,2)
(91,181,2)
(125,13,2)
(75,181,2)
(75,84,2)
(53,181,2)
(104,179,2)
(29,181,2)
(181,56,2)
(0,181,2)
(3,171,2)
(172,77,2)
(152,121,2)
(18,40,2)
(183,93,2)
(119,182,2)
(98,93,2)
(151,113,2)
(152,93,2)
(24,36,2)
(71,181,2)
(48,181,2)
(176,13,2)
(17,93,2)
(173,147,2)
(65,93,2)
(168,141,2)
(81,40,2)
(49,182,2)
(27,181,2)
(130,67,2)
(123,181,2)
(104,60,2)
(173,181,2)
(182,168,2)
(55,181,2)
(175,60,2)
(67,75,2)
(103,181,2)
(101,84,2)
(2,181,2)
(134,181,2)
(16,181,2)
(172,40,2)
(54,181,2)
(75,167,2)
(98,125,2)
(60,162,2)
(62,44,2)
(70,98,2)
(144,22,2)
(24,56,2)
(41,181,2)
(44,181,2)
(63,93,2)
(72,181,2)
(117,181,2)
(152,107,2)
(147,181,2)
(69,181,2)
(58,181,2)
(51,181,2)
(182,181,2)
(42,47,2)
(75,182,2)
(67,181,2)
(93,181,2)
(15,162,2)
(11,22,2)
(43,179,2)
(146,181,2)
(83,181,2)
(12,91,2)
(43,181,2)
(152,125,2)
(16,182,2)
(89,13,2)
(139,181,2)
(62,181,2)
(169,22,2)
(133,40,2)
(88,13,2)
(49,181,2)
(77,179,2)
(130,93,2)
(26,181,2)
(42,181,2)
(8,181,2)
(92,60,2)
(145,181,2)
(100,93,2)
(39,181,2)
(115,182,2)
(168,181,2)
(136,181,2)
(43,60,2)
(38,181,2)
(108,149,2)
(140,181,2)
(116,182,2)
(175,179,2)
(42,154,2)
(104,181,2)
(152,3,2)
(70,132,2)
(132,181,2)
(99,13,2)
(86,116,2)
(157,93,2)
(114,13,2)
(167,37,2)
(85,181,2)
(152,94,2)
(52,181,2)
(121,182,2)
(150,93,2)
(152,119,2)
(13,181,2)
(24,162,2)
(72,49,2)
(169,179,2)
(171,181,2)
(177,162,2)
(47,181,2)
(114,122,2)
(7,181,2)
(92,181,2)
(137,93,2)
(55,104,2)
(106,181,2)
(121,181,2)
(47,118,2)
(98,110,2)
(110,181,2)
(74,162,2)
(98,3,2)
(71,72,2)
(21,181,2)
(105,181,2)
(116,174,2)
(64,93,2)
(167,181,2)
(23,181,2)
(77,60,2)
(30,181,2)
(98,123,2)
(111,22,2)
(44,182,2)
(82,13,2)
(70,144,2)
(97,181,2)
(22,172,2)
(33,54,2)
(46,162,2)
(180,181,2)
-----------------------------------
(0,so)
(1,sosend)
(2,so_receive)
(3,so->so_rcv.sb_mowner)
(4,UID_MAX)
(5,so)
(6,0)
(7,soreceive)
(8,sb_mowner)
(9,so)
(10,so_rcv)
(11,pr_type)
(12,splx(s)
(13,p != 0)
(14,if (prp == 0 || prp->pr_usrreq == 0)
(15,proto)
(16,so->so_snd)
(17,aso)
(18,0)
(19,prp)
(20,)
(21,so)
(22,prp == 0 || prp->pr_usrreq == 0)
(23,dom_mowner)
(24,pffindtype(dom, type)
(25,socket_pool)
(26,so->so_rcv.sb_mowner = &prp->pr_domain->dom_mowner)
(27,TAILQ_INIT(&so->so_q)
(28,so_snd)
(29,0)
(30,dom_mowner)
(31,so)
(32,struct socket **aso)
(33,&prp->pr_domain->dom_mowner)
(34,so)
(35,so)
(36,int dom)
(37,struct mbuf *)
(38,so)
(39,so_q)
(40,prp == 0)
(41,PR_WAITOK)
(42,(struct mbuf *)
(43,prp->pr_domain)
(44,*so)
(45,p)
(46,type)
(47,(long)
(48,splsoftnet()
(49,so->so_q0)
(50,int proto)
(51,0)
(52,(struct mbuf *)
(53,pr_domain)
(54,prp->pr_domain->dom_mowner)
(55,prp->pr_domain->dom_mowner)
(56,int type)
(57,so_type)
(58,so_q0)
(59,so->so_type = type)
(60,prp = pffindproto(dom, proto, type)
(61,prp)
(62,sizeof(*so)
(63,so)
(64,0)
(65,so)
(66,so)
(67,error = (*prp->pr_usrreq)
(68,p_ucred)
(69,so)
(70,RET)
(71,TAILQ_INIT(&so->so_q0)
(72,&so->so_q0)
(73,prp)
(74,dom)
(75,(*prp->pr_usrreq)
(76,so->so_receive)
(77,prp->pr_usrreq)
(78,pffindproto(dom, proto, type)
(79,so)
(80,so)
(81,pr_usrreq)
(82,cr_uid)
(83,s)
(84,p = curproc)
(85,PRU_ATTACH)
(86,memset((caddr_t)
(87,s)
(88,so_uid)
(89,p)
(90,if (prp->pr_type != type)
(91,s = splsoftnet()
(92,prp->pr_domain)
(93,error)
(94,so->so_mowner)
(95,EPROTOTYPE)
(96,sb_mowner)
(97,pr_domain)
(98,return (0)
(99,so->so_uid = UID_MAX)
(100,s)
(101,p->p_ucred)
(102,*aso)
(103,so)
(104,prp->pr_domain)
(105,so->so_mowner = &prp->pr_domain->dom_mowner)
(106,so_proto)
(107,so->so_send)
(108,&prp->pr_domain->dom_mowner)
(109,prp)
(110,so->so_proto)
(111,type)
(112,)
(113,&prp->pr_domain->dom_mowner)
(114,so->so_uid = p->p_ucred->cr_uid)
(115,*aso = so)
(116,(caddr_t)
(117,prp)
(118,long)
(119,so->so_uid)
(120,EPROTONOSUPPORT)
(121,so->so_type)
(122,p->p_ucred->cr_uid)
(123,so->so_snd.sb_mowner)
(124,struct mbuf *)
(125,so->so_uid)
(126,prp)
(127,p)
(128,prp)
(129,type)
(130,return (error)
(131,so->so_receive = soreceive)
(132,return (EPROTOTYPE)
(133,prp)
(134,so)
(135,if (proto)
(136,prp)
(137,so)
(138,so->so_state)
(139,proto)
(140,so_mowner)
(141,&socket_pool)
(142,so_state)
(143,0)
(144,return (EPROTONOSUPPORT)
(145,dom_mowner)
(146,so)
(147,so->so_q)
(148,p)
(149,prp->pr_domain->dom_mowner)
(150,sofree(so)
(151,so->so_snd.sb_mowner = &prp->pr_domain->dom_mowner)
(152,so->so_state |= SS_NOFDREF)
(153,SS_NOFDREF)
(154,struct mbuf *)
(155,splx(s)
(156,if (error)
(157,s)
(158,error)
(159,so->so_send = sosend)
(160,if (p != 0)
(161,curproc)
(162,proto)
(163,so)
(164,pr_domain)
(165,prp)
(166,p)
(167,(struct mbuf *)
(168,pool_get(&socket_pool, PR_WAITOK)
(169,prp->pr_type)
(170,0)
(171,so->so_rcv)
(172,prp->pr_usrreq == 0)
(173,&so->so_q)
(174,caddr_t)
(175,so->so_proto = prp)
(176,so_uid)
(177,dom)
(178,error)
(179,prp = pffindtype(dom, type)
(180,so_send)
(181,prp->pr_type != type)
(182,so = pool_get(&socket_pool, PR_WAITOK)
(183,error)
(184,type)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^