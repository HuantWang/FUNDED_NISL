-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
74,75
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,75
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_07_bad()
CWE401_Memory_Leak__int_calloc_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(25,14,0)
(27,29,0)
(22,19,0)
(8,39,0)
(1,7,0)
(15,29,0)
(38,34,0)
(0,30,0)
(20,37,0)
(7,31,0)
(8,35,0)
(9,32,0)
(21,34,0)
(2,30,0)
(36,7,0)
(11,29,0)
(29,11,0)
(19,38,0)
(19,10,0)
(31,11,0)
(17,11,0)
(31,34,0)
(29,27,0)
(16,14,0)
(28,19,0)
(30,14,0)
(35,8,0)
(11,31,0)
(19,31,0)
(11,17,0)
(26,23,0)
(18,31,0)
(32,10,0)
(3,27,0)
(32,31,0)
(12,32,0)
(4,10,0)
(6,14,0)
(10,34,0)
(13,23,0)
(33,35,0)
(24,37,0)
(38,19,0)
(4,32,1)
(10,4,1)
(27,3,1)
(22,10,1)
(0,2,1)
(15,18,1)
(19,10,1)
(7,31,1)
(7,1,1)
(32,31,1)
(31,11,1)
(18,23,1)
(12,8,1)
(8,35,1)
(24,23,1)
(13,26,1)
(19,31,1)
(37,20,1)
(11,17,1)
(38,19,1)
(29,27,1)
(12,7,1)
(30,0,1)
(9,12,1)
(24,38,1)
(35,33,1)
(23,13,1)
(26,30,1)
(1,36,1)
(33,7,1)
(32,9,1)
(3,15,1)
(11,29,1)
(19,28,1)
(40,37,1)
(36,31,1)
(20,24,1)
(28,22,1)
(29,27,2)
(27,23,2)
(33,7,2)
(32,31,2)
(22,23,2)
(8,35,2)
(10,23,2)
(11,29,2)
(11,23,2)
(11,17,2)
(18,23,2)
(7,23,2)
(38,19,2)
(15,23,2)
(31,11,2)
(7,31,2)
(19,31,2)
(9,23,2)
(1,23,2)
(35,7,2)
(28,23,2)
(8,7,2)
(3,23,2)
(32,23,2)
(4,23,2)
(38,23,2)
(19,10,2)
(31,23,2)
(12,23,2)
(19,23,2)
(36,23,2)
(29,23,2)
-----------------------------------
(0,NULL)
(1,NULL)
(2,data)
(3,int)
(4,5)
(5, sizeof(int)
(6,data)
(7,data == NULL)
(8,exit(-1)
(9,0)
(10,data[0] = 5)
(11,(int *)
(12,data)
(13,5)
(14,)
(15,100)
(16,if(staticFive==5)
(17,int *)
(18,data)
(19,data[0])
(20,5)
(21,if (data == NULL)
(22,data)
(23,staticFive==5)
(24,staticFive)
(25,if(staticFive==5)
(26,staticFive)
(27,sizeof(int)
(28,0)
(29,calloc(100, sizeof(int)
(30,data = NULL)
(31,data = (int *)
(32,data[0])
(33,1)
(34,)
(35,-1)
(36,data)
(37,staticFive==5)
(38,printIntLine(data[0])
(39,)
(40,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^