-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
67,68
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,62,64,66,68
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_02_bad(){    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_02_bad()
CWE401_Memory_Leak__char_malloc_02_bad
{    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(14,0,0)
(0,6,0)
(8,32,0)
(30,21,0)
(24,4,0)
(17,3,0)
(6,0,0)
(0,29,0)
(2,14,0)
(14,19,0)
(31,4,0)
(13,15,0)
(21,20,0)
(20,21,0)
(9,3,0)
(23,14,0)
(2,19,0)
(3,4,0)
(16,2,0)
(32,8,0)
(27,4,0)
(10,19,0)
(28,20,0)
(12,18,0)
(7,32,0)
(25,18,0)
(26,2,0)
(15,19,0)
(29,0,0)
(15,14,0)
(6,20,0)
(18,14,0)
(0,14,0)
(20,6,0)
(8,5,0)
(11,22,1)
(15,14,1)
(30,28,1)
(15,13,1)
(14,0,1)
(21,30,1)
(20,21,1)
(9,17,1)
(32,7,1)
(16,18,1)
(23,1,1)
(25,12,1)
(18,14,1)
(13,2,1)
(28,23,1)
(12,14,1)
(6,20,1)
(2,26,1)
(18,25,1)
(26,16,1)
(3,9,1)
(22,1,1)
(7,18,1)
(0,29,1)
(0,6,1)
(8,32,1)
(22,15,1)
(1,3,1)
(2,14,1)
(16,8,1)
(0,6,2)
(2,1,2)
(28,1,2)
(20,21,2)
(14,1,2)
(30,1,2)
(25,1,2)
(18,14,2)
(6,1,2)
(20,1,2)
(16,1,2)
(7,18,2)
(8,18,2)
(15,1,2)
(12,1,2)
(6,20,2)
(21,1,2)
(8,32,2)
(13,1,2)
(18,1,2)
(23,1,2)
(26,1,2)
(15,14,2)
(0,1,2)
(2,14,2)
(0,29,2)
(32,18,2)
(14,0,2)
-----------------------------------
(0,(char *)
(1,1)
(2,strcpy(data, "A String")
(3,data = NULL)
(4,)
(5,)
(6,malloc(100*sizeof(char)
(7,1)
(8,exit(-1)
(9,NULL)
(10,if (data == NULL)
(11,RET)
(12,data)
(13,data)
(14,data = (char *)
(15,printLine(data)
(16,data)
(17,data)
(18,data == NULL)
(19,)
(20,100*sizeof(char)
(21,sizeof(char)
(22,1)
(23,data)
(24,data)
(25,NULL)
(26,"A String")
(27,if(1)
(28,100)
(29,char *)
(30,char)
(31,if(1)
(32,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^