-----label-----
0
-----code-----
static void goodB2G()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    /* FIX: Deallocate memory */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,78,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    /* FIX: Deallocate memory */    free(data);}
static void
goodB2G()
goodB2G
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    /* FIX: Deallocate memory */    free(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(10,15,0)
(30,29,0)
(15,40,0)
(25,33,0)
(31,0,0)
(24,26,0)
(19,26,0)
(24,17,0)
(19,35,0)
(6,43,0)
(26,35,0)
(26,12,0)
(21,28,0)
(23,35,0)
(43,6,0)
(34,13,0)
(28,27,0)
(20,10,0)
(41,12,0)
(2,28,0)
(32,6,0)
(33,35,0)
(13,35,0)
(5,24,0)
(17,24,0)
(29,26,0)
(17,13,0)
(37,8,0)
(42,35,0)
(28,26,0)
(27,28,0)
(38,17,0)
(7,27,0)
(16,12,0)
(36,42,0)
(12,41,0)
(0,8,0)
(14,33,0)
(43,18,0)
(41,8,0)
(8,0,0)
(27,42,0)
(6,26,0)
(18,35,0)
(22,19,0)
(18,43,0)
(8,41,0)
(4,26,0)
(11,6,0)
(3,35,0)
(12,26,0)
(1,24,0)
(12,16,0)
(9,29,0)
(15,10,0)
(12,41,1)
(31,37,1)
(15,10,1)
(27,28,1)
(21,2,1)
(36,27,1)
(24,1,1)
(7,28,1)
(32,42,1)
(33,14,1)
(42,36,1)
(24,26,1)
(28,26,1)
(13,34,1)
(4,33,1)
(37,4,1)
(2,13,1)
(39,19,1)
(41,8,1)
(30,26,1)
(8,0,1)
(34,17,1)
(20,29,1)
(10,20,1)
(19,26,1)
(28,21,1)
(9,30,1)
(6,11,1)
(27,7,1)
(12,16,1)
(38,24,1)
(43,6,1)
(14,25,1)
(22,18,1)
(5,29,1)
(17,24,1)
(6,26,1)
(18,43,1)
(26,12,1)
(5,15,1)
(11,32,1)
(19,22,1)
(1,5,1)
(29,9,1)
(0,31,1)
(29,26,1)
(17,38,1)
(20,29,2)
(41,8,2)
(19,26,2)
(18,43,2)
(15,29,2)
(29,26,2)
(24,26,2)
(43,6,2)
(10,29,2)
(26,12,2)
(17,24,2)
(12,16,2)
(8,0,2)
(6,26,2)
(12,41,2)
(28,26,2)
(27,28,2)
(15,10,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,0)
(2,data)
(3,data)
(4,data)
(5,data)
(6,data[0])
(7,intTwo)
(8,100*sizeof(twoIntsStruct)
(9,NULL)
(10,-1)
(11,0)
(12,(twoIntsStruct *)
(13,data[0].intOne = 0)
(14,NULL)
(15,exit(-1)
(16,twoIntsStruct *)
(17,data[0].intOne)
(18,printStructLine(&data[0])
(19,free(data)
(20,1)
(21,0)
(22,data)
(23,if (data == NULL)
(24,data[0])
(25,data)
(26,data = (twoIntsStruct *)
(27,data[0].intTwo)
(28,data[0])
(29,data == NULL)
(30,data)
(31,twoIntsStruct)
(32,data)
(33,data = NULL)
(34,0)
(35,)
(36,0)
(37,100)
(38,intOne)
(39,RET)
(40,)
(41,malloc(100*sizeof(twoIntsStruct)
(42,data[0].intTwo = 0)
(43,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^