-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int64_t_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5LL;
            printLongLongLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10LL;
                printLongLongLine(data[0]);
                free(data);
            }
        }
    }
    else
    {
        {
            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
            if (data == NULL) {exit(-1);}
            int64_t * tmpData;
            /* Initialize and make use of data */
            data[0] = 5LL;
            printLongLongLine(data[0]);
            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10LL;
                printLongLongLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
74,76
74,77
75,76
77,78
79,80
79,81
80,81
82,83
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
93,94
93,95
93,96
94,95
95,96
95,97
96,97
96,98
97,98
101,102
102,103
102,104
103,104
105,106
105,107
106,107
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
116,119
116,120
116,121
116,122
116,123
116,124
117,118
118,119
118,120
119,120
121,122
121,123
121,124
124,125
125,126
125,127
126,127
126,128
127,128
129,130
131,132
131,133
132,133
134,135
134,136
136,137
137,138
137,139
138,139
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
149,150
149,151
150,151
152,153
154,155
155,156
155,157
156,157
158,159
158,160
161,162
162,163
162,164
163,164
163,165
164,165
168,169
169,170
169,171
170,171
172,173
172,174
173,174
176,177
177,178
177,179
178,179
180,181
180,182
181,182
181,183
182,183
184,185
186,187
186,188
186,189
187,188
189,190
191,192
191,193
192,193
194,195
195,196
195,197
196,197
199,200
199,201
200,201
200,202
201,202
203,204
205,206
205,207
205,208
206,207
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
214,216
215,216
219,220
220,221
220,222
221,222
223,224
223,225
224,225
227,228
228,229
228,230
229,230
231,232
-----nextToken-----
2,4,9,15,17,18,23,25,28,30,34,35,39,41,46,48,53,54,55,59,62,63,67,71,73,76,78,81,85,86,90,92,98,99,100,104,107,108,112,114,120,122,123,128,130,133,135,139,140,144,146,151,153,157,159,160,165,166,167,171,174,175,179,183,185,188,190,193,197,198,202,204,209,211,216,217,218,222,225,226,230,232
-----computeFrom-----
29,30
29,31
37,38
37,39
50,51
50,52
65,66
65,67
79,80
79,81
88,89
88,90
95,96
95,97
134,135
134,136
142,143
142,144
162,163
162,164
177,178
177,179
191,192
191,193
200,201
200,202
207,208
207,209
213,214
213,215
-----guardedBy-----
90,114
202,211
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int64_t_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }        }    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int64_t_12_bad()
CWE401_Memory_Leak__malloc_realloc_int64_t_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }        }    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }}
if(globalReturnsTrueOrFalse())    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }        }    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }        }    }
{            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }        }
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t
int64_t
* data = (int64_t *)malloc(100*sizeof(int64_t))
*
data
= (int64_t *)malloc(100*sizeof(int64_t))
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
data = (int64_t *)realloc(data, (130000)*sizeof(int64_t))
data
data
(int64_t *)realloc(data, (130000)*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, (130000)*sizeof(int64_t))
realloc
realloc
data
data
(130000)*sizeof(int64_t)
(130000)
130000
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);                free(data);            }
data[0] = 10LL;
data[0] = 10LL
data[0]
data
data
0
10LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
{        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }
{            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t
int64_t
* data = (int64_t *)malloc(100*sizeof(int64_t))
*
data
= (int64_t *)malloc(100*sizeof(int64_t))
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int64_t * tmpData;
int64_t * tmpData;
int64_t
int64_t
* tmpData
*
tmpData
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t))
tmpData
tmpData
(int64_t *)realloc(data, (130000)*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, (130000)*sizeof(int64_t))
realloc
realloc
data
data
(130000)*sizeof(int64_t)
(130000)
130000
sizeof(int64_t)
int64_t
int64_t
int64_t

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10LL;
data[0] = 10LL
data[0]
data
data
0
10LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(78,90,0)
(95,47,0)
(57,32,0)
(82,7,0)
(29,6,0)
(50,34,0)
(66,63,0)
(97,78,0)
(0,30,0)
(45,30,0)
(88,42,0)
(66,35,0)
(28,10,0)
(34,11,0)
(63,60,0)
(63,66,0)
(74,44,0)
(80,99,0)
(62,96,0)
(55,65,0)
(6,42,0)
(87,85,0)
(86,101,0)
(22,73,0)
(93,22,0)
(14,5,0)
(83,101,0)
(66,90,0)
(30,22,0)
(1,82,0)
(53,25,0)
(37,73,0)
(11,13,0)
(4,73,0)
(10,14,0)
(74,42,0)
(79,32,0)
(18,96,0)
(82,1,0)
(24,73,0)
(75,42,0)
(77,13,0)
(15,69,0)
(6,81,0)
(58,6,0)
(11,34,0)
(21,74,0)
(71,60,0)
(91,85,0)
(22,50,0)
(31,1,0)
(46,64,0)
(76,47,0)
(33,42,0)
(55,81,0)
(10,99,0)
(90,66,0)
(52,94,0)
(39,81,0)
(67,69,0)
(99,74,0)
(49,16,0)
(81,55,0)
(90,73,0)
(8,60,0)
(13,11,0)
(19,16,0)
(25,65,0)
(35,66,0)
(67,92,0)
(42,54,0)
(61,10,0)
(9,65,0)
(101,6,0)
(26,73,0)
(81,39,0)
(99,5,0)
(51,42,0)
(60,8,0)
(70,99,0)
(29,62,0)
(59,91,0)
(100,62,0)
(84,73,0)
(98,90,0)
(65,55,0)
(101,88,0)
(91,22,0)
(48,78,0)
(50,2,0)
(14,10,0)
(88,101,0)
(56,42,0)
(23,94,0)
(96,62,0)
(3,99,0)
(60,63,0)
(89,42,0)
(30,45,0)
(50,22,0)
(45,85,0)
(73,72,0)
(34,90,0)
(32,22,0)
(81,6,0)
(84,16,0)
(43,34,0)
(3,42,0)
(44,40,0)
(16,90,0)
(40,44,0)
(2,50,0)
(65,25,0)
(3,6,0)
(62,29,0)
(44,74,0)
(12,29,0)
(17,3,0)
(36,11,0)
(27,8,0)
(38,5,0)
(47,74,0)
(69,67,0)
(94,6,0)
(16,84,0)
(44,29,0)
(68,30,0)
(34,50,0)
(29,44,0)
(96,18,1)
(4,78,1)
(100,12,1)
(6,81,1)
(63,60,1)
(80,70,1)
(19,4,1)
(29,6,1)
(32,22,1)
(16,49,1)
(31,94,1)
(3,6,1)
(60,8,1)
(98,20,1)
(41,3,1)
(50,34,1)
(66,63,1)
(87,32,1)
(58,20,1)
(76,95,1)
(78,97,1)
(74,44,1)
(23,6,1)
(30,68,1)
(3,99,1)
(89,94,1)
(30,22,1)
(10,99,1)
(86,83,1)
(78,90,1)
(79,57,1)
(89,82,1)
(45,30,1)
(12,21,1)
(1,31,1)
(9,58,1)
(47,74,1)
(16,90,1)
(94,6,1)
(17,47,1)
(36,43,1)
(34,90,1)
(93,84,1)
(99,74,1)
(17,14,1)
(22,50,1)
(94,52,1)
(3,17,1)
(14,10,1)
(4,67,1)
(71,98,1)
(68,0,1)
(21,88,1)
(62,96,1)
(61,38,1)
(99,80,1)
(84,16,1)
(11,13,1)
(97,48,1)
(57,22,1)
(34,11,1)
(48,90,1)
(67,69,1)
(88,101,1)
(101,86,1)
(10,28,1)
(52,23,1)
(95,74,1)
(0,87,1)
(77,36,1)
(69,15,1)
(81,39,1)
(41,32,1)
(44,40,1)
(55,65,1)
(101,6,1)
(25,53,1)
(91,22,1)
(18,100,1)
(41,91,1)
(82,1,1)
(28,61,1)
(29,62,1)
(81,55,1)
(49,19,1)
(83,89,1)
(32,79,1)
(91,59,1)
(43,93,1)
(38,99,1)
(27,71,1)
(66,35,1)
(44,29,1)
(50,2,1)
(59,45,1)
(15,78,1)
(90,66,1)
(13,77,1)
(47,76,1)
(70,47,1)
(53,9,1)
(65,25,1)
(8,27,1)
(6,81,2)
(77,20,2)
(4,20,2)
(95,20,2)
(66,35,2)
(17,20,2)
(1,94,2)
(53,20,2)
(90,66,2)
(88,20,2)
(36,20,2)
(0,32,2)
(63,60,2)
(30,32,2)
(11,20,2)
(83,20,2)
(78,90,2)
(11,13,2)
(22,50,2)
(16,90,2)
(66,63,2)
(21,20,2)
(30,22,2)
(61,47,2)
(93,20,2)
(25,20,2)
(3,99,2)
(10,99,2)
(101,20,2)
(22,20,2)
(45,30,2)
(67,78,2)
(65,25,2)
(18,20,2)
(43,20,2)
(29,20,2)
(12,20,2)
(15,78,2)
(69,78,2)
(31,94,2)
(66,20,2)
(23,20,2)
(90,20,2)
(57,20,2)
(101,6,2)
(60,8,2)
(99,47,2)
(68,32,2)
(58,20,2)
(94,20,2)
(94,6,2)
(82,1,2)
(38,47,2)
(19,20,2)
(81,55,2)
(97,20,2)
(29,62,2)
(50,2,2)
(13,20,2)
(16,20,2)
(63,20,2)
(99,74,2)
(84,20,2)
(32,22,2)
(80,47,2)
(50,20,2)
(52,20,2)
(62,20,2)
(89,20,2)
(44,29,2)
(76,20,2)
(96,20,2)
(91,32,2)
(82,94,2)
(47,20,2)
(47,74,2)
(59,32,2)
(32,20,2)
(3,6,2)
(86,20,2)
(10,47,2)
(84,16,2)
(44,40,2)
(79,20,2)
(70,47,2)
(67,69,2)
(55,20,2)
(100,20,2)
(81,39,2)
(74,20,2)
(27,20,2)
(45,32,2)
(88,101,2)
(65,20,2)
(28,47,2)
(78,20,2)
(29,6,2)
(34,90,2)
(81,20,2)
(8,20,2)
(9,20,2)
(60,20,2)
(55,65,2)
(34,11,2)
(98,20,2)
(71,20,2)
(34,20,2)
(6,20,2)
(3,20,2)
(14,47,2)
(44,20,2)
(50,34,2)
(49,20,2)
(74,44,2)
(62,96,2)
(91,22,2)
(48,20,2)
(87,32,2)
(14,10,2)
-----------------------------------
(0,data)
(1,-1)
(2,int64_t *)
(3,free(data)
(4,L)
(5,)
(6,* data = (int64_t *)
(7,)
(8,sizeof(int64_t)
(9,100)
(10,data[0])
(11,(130000)
(12,data)
(13,sizeof(int64_t)
(14,printLongLongLine(data[0])
(15,1)
(16,data[0])
(17,data)
(18,int64_t)
(19,data)
(20,globalReturnsTrueOrFalse()
(21,tmpData)
(22,data = (int64_t *)
(23,data)
(24,if (data == NULL)
(25,sizeof(int64_t)
(26,data)
(27,int64_t)
(28,0)
(29,realloc(data, (130000)
(30,data[0])
(31,1)
(32,data != NULL)
(33,data)
(34,realloc(data, (130000)
(35,int64_t *)
(36,130000)
(37,if (data != NULL)
(38,L)
(39,int64_t *)
(40,int64_t *)
(41,RET)
(42,)
(43,data)
(44,(int64_t *)
(45,printLongLongLine(data[0])
(46,if(globalReturnsTrueOrFalse()
(47,tmpData != NULL)
(48,data)
(49,0)
(50,(int64_t *)
(51,tmpData)
(52,NULL)
(53,int64_t)
(54,)
(55,malloc(100*sizeof(int64_t)
(56,if (data == NULL)
(57,data)
(58,data)
(59,data)
(60,100*sizeof(int64_t)
(61,data)
(62,(130000)
(63,malloc(100*sizeof(int64_t)
(64,)
(65,100*sizeof(int64_t)
(66,(int64_t *)
(67,exit(-1)
(68,0)
(69,-1)
(70,data)
(71,100)
(72,)
(73,)
(74,tmpData = (int64_t *)
(75,if (tmpData != NULL)
(76,NULL)
(77,int64_t)
(78,data == NULL)
(79,NULL)
(80,tmpData)
(81,(int64_t *)
(82,exit(-1)
(83,data)
(84,printLongLongLine(data[0])
(85,)
(86,0)
(87,L)
(88,printLongLongLine(data[0])
(89,L)
(90,* data = (int64_t *)
(91,free(data)
(92,)
(93,data)
(94,data == NULL)
(95,tmpData)
(96,sizeof(int64_t)
(97,NULL)
(98,data)
(99,data = tmpData)
(100,130000)
(101,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^