-----label-----
0
-----code-----
static int send_noncontig_pkt(MPIDI_VC_t *vc, MPID_Request *sreq, void **vhdr_p, int *complete)
{
    int mpi_errno = MPI_SUCCESS;
    MPID_nem_ptl_sendbuf_t *sb;
    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
    int ret;
    MPIDI_msg_sz_t last;
    MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;
    MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);

    MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);

    *complete = 0;
    MPID_nem_ptl_init_req(sreq);

    if (!vc_ptl->id_initialized) {
        mpi_errno = MPID_nem_ptl_init_id(vc);
        if (mpi_errno) MPIU_ERR_POP(mpi_errno);
    }

    if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {
        /* send header and first chunk of data */
        FREE_POP(&sb);
        sb->buf.hp.hdr = **hdr_p;

        MPIU_Assert(sreq->dev.segment_first == 0);

        last = sreq->dev.segment_size;
        if (last > PTL_MAX_EAGER)
            last = PTL_MAX_EAGER;
        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);
        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,
                     MPIDI_Process.my_pg_rank);
        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",
                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,
                                                vc_ptl->ptc, sb));
        *vhdr_p = NULL;

        if (last == sreq->dev.segment_size) {
            *complete = 1;
            goto fn_exit;
        }
        
        /* send additional data chunks */
        sreq->dev.segment_first = last;

        while (!FREE_EMPTY()) {
            FREE_POP(&sb);
            
            last = sreq->dev.segment_size;
            if (last > sreq->dev.segment_first+BUFLEN)
                last = sreq->dev.segment_first+BUFLEN;

            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);
            sreq->dev.segment_first = last;
            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,
                         MPIDI_Process.my_pg_rank);
            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",
                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,
                                                    vc_ptl->ptc, sb));

            if (last == sreq->dev.segment_size) {
                *complete = 1;
                goto fn_exit;
            }
        }
    }

 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
19,22
23,24
23,25
25,26
25,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
28,36
28,37
28,38
28,39
28,40
28,41
28,42
28,43
29,30
30,31
30,32
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
72,76
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
84,85
86,87
87,88
87,89
88,89
90,91
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
102,103
105,106
106,107
106,108
107,108
109,110
111,112
111,113
112,113
113,114
113,115
114,115
117,118
117,119
118,119
119,120
119,121
120,121
122,123
122,124
123,124
125,126
127,128
127,129
128,129
130,131
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
139,140
141,142
143,144
144,145
145,146
147,148
147,149
147,150
147,151
147,152
147,153
147,154
147,155
147,156
147,157
147,158
147,159
147,160
148,149
149,150
149,151
150,151
152,153
153,154
155,156
156,157
156,158
157,158
157,159
158,159
158,160
159,160
159,161
160,161
165,166
166,167
167,168
169,170
170,171
170,172
171,172
173,174
173,175
174,175
174,176
175,176
175,177
176,177
181,182
182,183
182,184
183,184
185,186
185,187
186,187
186,188
187,188
191,192
191,193
192,193
192,194
193,194
195,196
197,198
198,199
198,200
199,200
201,202
203,204
204,205
204,206
204,207
204,208
204,209
204,210
205,206
207,208
207,209
208,209
208,210
209,210
214,215
216,217
216,218
217,218
217,219
218,219
218,220
219,220
224,225
225,226
225,227
226,227
226,228
227,228
227,229
228,229
230,231
234,235
235,236
235,237
236,237
238,239
238,240
238,241
238,242
238,243
238,244
238,245
238,246
238,247
238,248
238,249
239,240
241,242
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
249,251
250,251
254,255
254,256
255,256
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
265,266
267,268
269,270
269,271
270,271
273,274
273,275
274,275
279,280
281,282
281,283
282,283
285,286
286,287
286,288
286,289
286,290
286,291
286,292
286,293
287,288
289,290
291,292
293,294
297,298
297,299
298,299
300,301
302,303
303,304
303,305
303,306
303,307
304,305
306,307
308,309
310,311
311,312
311,313
311,314
311,315
311,316
311,317
311,318
312,313
315,316
315,317
316,317
317,318
318,319
318,320
319,320
319,321
320,321
320,322
321,322
326,327
328,329
328,330
329,330
329,331
330,331
330,332
331,332
336,337
336,338
337,338
337,339
338,339
338,340
339,340
344,345
344,346
345,346
348,349
350,351
351,352
351,353
352,353
353,354
355,356
357,358
357,359
358,359
358,360
359,360
361,362
361,363
362,363
362,364
363,364
367,368
367,369
368,369
369,370
369,371
370,371
371,372
374,375
376,377
377,378
377,379
378,379
378,380
379,380
379,381
380,381
384,385
386,387
386,388
387,388
388,389
389,390
391,392
391,393
391,394
391,395
391,396
391,397
391,398
391,399
391,400
392,393
393,394
393,395
394,395
396,397
397,398
399,400
400,401
400,402
401,402
403,404
403,405
404,405
404,406
405,406
409,410
409,411
410,411
410,412
411,412
413,414
413,415
414,415
414,416
415,416
415,417
416,417
420,421
422,423
423,424
423,425
424,425
426,427
426,428
427,428
427,429
428,429
428,430
429,430
433,434
435,436
436,437
436,438
436,439
436,440
436,441
436,442
437,438
439,440
439,441
440,441
440,442
441,442
445,446
445,447
446,447
446,448
447,448
451,452
453,454
453,455
454,455
454,456
455,456
459,460
460,461
460,462
461,462
461,463
462,463
462,464
463,464
465,466
469,470
470,471
470,472
471,472
471,473
472,473
472,474
473,474
477,478
479,480
480,481
480,482
481,482
483,484
483,485
483,486
483,487
483,488
483,489
483,490
483,491
483,492
483,493
483,494
484,485
486,487
488,489
488,490
489,490
489,491
490,491
493,494
493,495
494,495
494,496
495,496
499,500
499,501
500,501
502,503
502,504
503,504
503,505
504,505
508,509
510,511
510,512
511,512
514,515
514,516
515,516
520,521
522,523
522,524
523,524
526,527
527,528
527,529
527,530
527,531
527,532
527,533
527,534
528,529
530,531
532,533
534,535
538,539
538,540
539,540
541,542
543,544
544,545
544,546
544,547
544,548
545,546
547,548
549,550
551,552
552,553
552,554
552,555
552,556
552,557
552,558
552,559
553,554
556,557
556,558
557,558
559,560
559,561
560,561
560,562
561,562
565,566
565,567
566,567
566,568
567,568
567,569
568,569
573,574
573,575
574,575
574,576
575,576
575,577
576,577
581,582
581,583
582,583
585,586
587,588
587,589
588,589
588,590
589,590
591,592
591,593
592,593
592,594
593,594
597,598
597,599
598,599
599,600
599,601
600,601
601,602
604,605
606,607
606,608
608,609
609,610
609,611
610,611
612,613
614,615
615,616
617,618
617,619
619,620
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,22,24,26,27,31,33,36,40,42,43,47,49,50,54,56,59,61,65,67,71,73,74,75,80,82,83,85,89,92,96,98,103,104,108,110,115,116,121,124,126,129,133,135,140,142,146,151,154,161,162,163,164,168,172,177,178,179,180,184,188,189,190,194,196,200,202,206,210,211,212,213,215,220,221,222,223,229,231,232,233,237,240,242,246,247,251,252,253,261,262,263,264,266,268,271,272,275,276,277,278,280,283,284,288,290,292,294,295,296,299,301,305,307,309,313,314,322,323,324,325,327,332,333,334,335,340,341,342,343,346,347,349,354,356,360,364,365,366,372,373,375,381,382,383,385,390,395,398,402,406,407,408,412,417,418,419,421,425,430,431,432,434,438,442,443,444,448,449,450,452,456,457,458,464,466,467,468,474,475,476,478,482,485,487,491,492,496,497,498,501,505,506,507,509,512,513,516,517,518,519,521,524,525,529,531,533,535,536,537,540,542,546,548,550,554,555,558,562,563,564,569,570,571,572,577,578,579,580,583,584,586,590,594,595,596,602,603,605,607,611,613,616,618,620
-----computeFrom-----
100,101
100,102
119,120
119,121
137,138
137,139
156,157
156,158
173,174
173,175
182,183
182,184
192,193
192,194
198,199
198,200
235,236
235,237
254,255
254,256
315,316
315,317
351,352
351,353
358,359
358,360
369,370
369,371
377,378
377,379
400,401
400,402
410,411
410,412
413,414
413,415
423,424
423,425
426,427
426,428
470,471
470,472
480,481
480,482
499,500
499,501
556,557
556,558
588,589
588,590
599,600
599,601
-----guardedBy-----
146,390
194,200
196,202
412,425
418,431
421,434
417,430
419,432
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;WhileStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int send_noncontig_pkt(MPIDI_VC_t *vc, MPID_Request *sreq, void **vhdr_p, int *complete){    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_sendbuf_t *sb;    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);    int ret;    MPIDI_msg_sz_t last;    MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;    MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);    MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);    *complete = 0;    MPID_nem_ptl_init_req(sreq);    if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }    if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
send_noncontig_pkt(MPIDI_VC_t *vc, MPID_Request *sreq, void **vhdr_p, int *complete)
send_noncontig_pkt
MPIDI_VC_t *vc
MPIDI_VC_t
MPIDI_VC_t
*vc
*
vc
MPID_Request *sreq
MPID_Request
MPID_Request
*sreq
*
sreq
void **vhdr_p
void
**vhdr_p
*
*
vhdr_p
int *complete
int
*complete
*
complete
{    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_sendbuf_t *sb;    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);    int ret;    MPIDI_msg_sz_t last;    MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;    MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);    MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);    *complete = 0;    MPID_nem_ptl_init_req(sreq);    if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }    if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
MPID_nem_ptl_sendbuf_t *sb;
MPID_nem_ptl_sendbuf_t *sb;
MPID_nem_ptl_sendbuf_t
MPID_nem_ptl_sendbuf_t
*sb
*
sb
MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
MPID_nem_ptl_vc_area
MPID_nem_ptl_vc_area
*const vc_ptl = VC_PTL(vc)
*const
vc_ptl
= VC_PTL(vc)
VC_PTL(vc)
VC_PTL
VC_PTL
vc
vc
int ret;
int ret;
int
ret
ret
MPIDI_msg_sz_t last;
MPIDI_msg_sz_t last;
MPIDI_msg_sz_t
MPIDI_msg_sz_t
last
last
MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;
MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;
MPIDI_CH3_Pkt_t
MPIDI_CH3_Pkt_t
**hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p
*
*
hdr_p
= (MPIDI_CH3_Pkt_t **)vhdr_p
(MPIDI_CH3_Pkt_t **)vhdr_p
MPIDI_CH3_Pkt_t **
MPIDI_CH3_Pkt_t
MPIDI_CH3_Pkt_t
**
*
*
vhdr_p
vhdr_p
MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_SEND_NONCONTIG_PKT)
MPID_STATE_SEND_NONCONTIG_PKT
MPID_STATE_SEND_NONCONTIG_PKT
MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_SEND_NONCONTIG_PKT
MPID_STATE_SEND_NONCONTIG_PKT
*complete = 0;
*complete = 0
*complete
complete
complete
0
MPID_nem_ptl_init_req(sreq);
MPID_nem_ptl_init_req(sreq)
MPID_nem_ptl_init_req
MPID_nem_ptl_init_req
sreq
sreq
if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }
!vc_ptl->id_initialized
vc_ptl->id_initialized
vc_ptl
vc_ptl
id_initialized
{        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }
mpi_errno = MPID_nem_ptl_init_id(vc);
mpi_errno = MPID_nem_ptl_init_id(vc)
mpi_errno
mpi_errno
MPID_nem_ptl_init_id(vc)
MPID_nem_ptl_init_id
MPID_nem_ptl_init_id
vc
vc
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    }
MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()
MPIDI_CH3I_Sendq_empty(send_queue)
MPIDI_CH3I_Sendq_empty
MPIDI_CH3I_Sendq_empty
send_queue
send_queue
!FREE_EMPTY()
FREE_EMPTY()
FREE_EMPTY
FREE_EMPTY
{        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    }
FREE_POP(&sb);
FREE_POP(&sb)
FREE_POP
FREE_POP
&sb
sb
sb
sb->buf.hp.hdr = **hdr_p;
sb->buf.hp.hdr = **hdr_p
sb->buf.hp.hdr
sb->buf.hp
sb->buf
sb
sb
buf
hp
hdr
**hdr_p
*hdr_p
hdr_p
hdr_p
MPIU_Assert(sreq->dev.segment_first == 0);
MPIU_Assert(sreq->dev.segment_first == 0)
MPIU_Assert
MPIU_Assert
sreq->dev.segment_first == 0
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
0
last = sreq->dev.segment_size;
last = sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;
last > PTL_MAX_EAGER
last
last
PTL_MAX_EAGER
PTL_MAX_EAGER
last = PTL_MAX_EAGER;
last = PTL_MAX_EAGER
last
last
PTL_MAX_EAGER
PTL_MAX_EAGER
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0])
MPI_nem_ptl_pack_byte
MPI_nem_ptl_pack_byte
sreq->dev.segment_ptr
sreq->dev
sreq
sreq
dev
segment_ptr
0
last
last
sb->buf.hp.payload
sb->buf.hp
sb->buf
sb
sb
buf
hp
payload
&REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow
REQ_PTL(sreq)
REQ_PTL
REQ_PTL
sreq
sreq
overflow
0
ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);
ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank)
ret
ret
PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank)
PtlPut
PtlPut
MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
(ptl_size_t)sb->buf.p
ptl_size_t
ptl_size_t
ptl_size_t

sb->buf.p
sb->buf
sb
sb
buf
p
sizeof(sb->buf.hp.hdr) + last
sizeof(sb->buf.hp.hdr)
(sb->buf.hp.hdr)
sb->buf.hp.hdr
sb->buf.hp
sb->buf
sb
sb
buf
hp
hdr
last
last
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
vc_ptl->id
vc_ptl
vc_ptl
id
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
0
0
sb
sb
MPIDI_Process.my_pg_rank
MPIDI_Process
MPIDI_Process
my_pg_rank
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlput"
"**ptlput %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb))
MPIU_DBG_MSG_FMT
MPIU_DBG_MSG_FMT
CH3_CHANNEL
CH3_CHANNEL
VERBOSE
VERBOSE
(MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb)
MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb
MPIU_DBG_FDEST
MPIU_DBG_FDEST
"PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p"
sizeof(sb->buf.hp.hdr) + last
sizeof(sb->buf.hp.hdr)
(sb->buf.hp.hdr)
sb->buf.hp.hdr
sb->buf.hp
sb->buf
sb
sb
buf
hp
hdr
last
last
vc_ptl->id.phys.nid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
nid
vc_ptl->id.phys.pid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
pid
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
sb
sb
*vhdr_p = NULL;
*vhdr_p = NULL
*vhdr_p
vhdr_p
vhdr_p
NULL
NULL
if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }
last == sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
{            *complete = 1;            goto fn_exit;        }
*complete = 1;
*complete = 1
*complete
complete
complete
1
goto fn_exit;
fn_exit
sreq->dev.segment_first = last;
sreq->dev.segment_first = last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }
!FREE_EMPTY()
FREE_EMPTY()
FREE_EMPTY
FREE_EMPTY
{            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }
FREE_POP(&sb);
FREE_POP(&sb)
FREE_POP
FREE_POP
&sb
sb
sb
last = sreq->dev.segment_size;
last = sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;
last > sreq->dev.segment_first+BUFLEN
last
last
sreq->dev.segment_first+BUFLEN
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
BUFLEN
BUFLEN
last = sreq->dev.segment_first+BUFLEN;
last = sreq->dev.segment_first+BUFLEN
last
last
sreq->dev.segment_first+BUFLEN
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
BUFLEN
BUFLEN
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0])
MPI_nem_ptl_pack_byte
MPI_nem_ptl_pack_byte
sreq->dev.segment_ptr
sreq->dev
sreq
sreq
dev
segment_ptr
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
sb->buf.p
sb->buf
sb
sb
buf
p
&REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow
REQ_PTL(sreq)
REQ_PTL
REQ_PTL
sreq
sreq
overflow
0
sreq->dev.segment_first = last;
sreq->dev.segment_first = last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank);
ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank)
ret
ret
PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                         MPIDI_Process.my_pg_rank)
PtlPut
PtlPut
MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
(ptl_size_t)sb->buf.p
ptl_size_t
ptl_size_t
ptl_size_t

sb->buf.p
sb->buf
sb
sb
buf
p
last - sreq->dev.segment_first
last
last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
vc_ptl->id
vc_ptl
vc_ptl
id
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
0
0
sb
sb
MPIDI_Process.my_pg_rank
MPIDI_Process
MPIDI_Process
my_pg_rank
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlput"
"**ptlput %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb))
MPIU_DBG_MSG_FMT
MPIU_DBG_MSG_FMT
CH3_CHANNEL
CH3_CHANNEL
VERBOSE
VERBOSE
(MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb)
MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb
MPIU_DBG_FDEST
MPIU_DBG_FDEST
"PtlPut(size=%lu id=(%#x,%#x) pt=%#x) sb=%p"
last - sreq->dev.segment_first
last
last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
vc_ptl->id.phys.nid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
nid
vc_ptl->id.phys.pid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
pid
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
sb
sb
if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }
last == sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
{                *complete = 1;                goto fn_exit;            }
*complete = 1;
*complete = 1
*complete
complete
complete
1
goto fn_exit;
fn_exit
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_SEND_NONCONTIG_PKT
MPID_STATE_SEND_NONCONTIG_PKT
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(299,201,0)
(234,60,0)
(150,82,0)
(272,243,0)
(281,349,0)
(360,315,0)
(220,257,0)
(149,144,0)
(146,321,0)
(270,117,0)
(175,283,0)
(343,56,0)
(3,41,0)
(48,9,0)
(11,300,0)
(289,374,0)
(275,184,0)
(87,92,0)
(27,9,0)
(154,82,0)
(370,263,0)
(312,151,0)
(55,184,0)
(105,302,0)
(314,60,0)
(116,66,0)
(44,263,0)
(207,56,0)
(32,228,0)
(302,187,0)
(25,55,0)
(350,210,0)
(57,192,0)
(140,9,0)
(291,282,0)
(178,85,0)
(374,254,0)
(18,99,0)
(33,228,0)
(210,350,0)
(265,329,0)
(169,81,0)
(4,2,0)
(89,168,0)
(364,156,0)
(31,3,0)
(117,188,0)
(94,295,0)
(14,21,0)
(234,186,0)
(69,206,0)
(337,308,0)
(279,20,0)
(311,277,0)
(285,92,0)
(187,302,0)
(268,81,0)
(154,365,0)
(8,229,0)
(267,325,0)
(273,223,0)
(136,333,0)
(351,221,0)
(266,364,0)
(143,246,0)
(150,58,0)
(101,272,0)
(353,329,0)
(9,48,0)
(221,93,0)
(142,326,0)
(20,50,0)
(26,36,0)
(279,153,0)
(111,315,0)
(227,35,0)
(77,362,0)
(316,240,0)
(173,22,0)
(377,50,0)
(229,329,0)
(100,287,0)
(164,182,0)
(250,187,0)
(219,294,0)
(185,206,0)
(54,136,0)
(274,87,0)
(99,67,0)
(42,48,0)
(222,263,0)
(212,222,0)
(60,223,0)
(190,366,0)
(165,314,0)
(64,5,0)
(321,299,0)
(62,68,0)
(277,282,0)
(153,279,0)
(366,140,0)
(201,206,0)
(128,182,0)
(347,289,0)
(218,183,0)
(193,174,0)
(368,186,0)
(138,52,0)
(324,22,0)
(223,140,0)
(63,279,0)
(12,187,0)
(340,253,0)
(275,191,0)
(126,240,0)
(118,150,0)
(131,183,0)
(173,220,0)
(93,260,0)
(139,226,0)
(19,60,0)
(355,151,0)
(108,272,0)
(359,226,0)
(203,160,0)
(150,253,0)
(335,350,0)
(329,265,0)
(371,64,0)
(115,186,0)
(265,368,0)
(365,157,0)
(37,316,0)
(127,67,0)
(141,138,0)
(73,155,0)
(47,46,0)
(16,263,0)
(214,206,0)
(133,349,0)
(112,178,0)
(93,375,0)
(82,154,0)
(208,76,0)
(180,245,0)
(168,323,0)
(294,222,0)
(83,234,0)
(160,1,0)
(68,209,0)
(365,375,0)
(194,137,0)
(110,301,0)
(119,52,0)
(116,241,0)
(125,265,0)
(38,119,0)
(321,168,0)
(240,86,0)
(138,186,0)
(258,163,0)
(21,40,0)
(189,315,0)
(67,127,0)
(326,263,0)
(46,358,0)
(79,360,0)
(184,55,0)
(233,209,0)
(365,260,0)
(255,143,0)
(58,150,0)
(20,279,0)
(176,361,0)
(129,312,0)
(329,229,0)
(332,5,0)
(161,253,0)
(22,173,0)
(236,260,0)
(224,40,0)
(60,2,0)
(286,70,0)
(375,140,0)
(67,99,0)
(342,132,0)
(151,209,0)
(376,137,0)
(200,308,0)
(360,260,0)
(153,70,0)
(164,137,0)
(249,40,0)
(309,73,0)
(20,375,0)
(36,22,0)
(364,286,0)
(369,314,0)
(66,116,0)
(21,176,0)
(248,87,0)
(294,301,0)
(99,206,0)
(156,209,0)
(293,241,0)
(296,132,0)
(48,209,0)
(150,70,0)
(345,72,0)
(52,138,0)
(299,321,0)
(319,157,0)
(16,168,0)
(115,350,0)
(24,72,0)
(235,366,0)
(216,67,0)
(365,154,0)
(254,374,0)
(7,68,0)
(97,201,0)
(363,70,0)
(40,21,0)
(60,226,0)
(183,123,0)
(206,295,0)
(223,86,0)
(348,93,0)
(147,150,0)
(0,91,0)
(356,104,0)
(280,372,0)
(223,60,0)
(168,24,0)
(10,308,0)
(99,18,0)
(252,358,0)
(143,225,0)
(300,70,0)
(151,312,0)
(215,20,0)
(210,245,0)
(163,258,0)
(265,288,0)
(20,260,0)
(349,283,0)
(88,321,0)
(102,295,0)
(195,101,0)
(345,13,0)
(282,277,0)
(289,347,0)
(28,365,0)
(243,272,0)
(368,271,0)
(107,257,0)
(288,265,0)
(251,233,0)
(15,263,0)
(81,268,0)
(13,345,0)
(161,5,0)
(133,304,0)
(103,241,0)
(123,181,0)
(192,35,0)
(138,140,0)
(80,286,0)
(16,222,0)
(269,48,0)
(22,36,0)
(138,86,0)
(237,186,0)
(307,24,0)
(203,304,0)
(56,58,0)
(286,82,0)
(71,119,0)
(65,104,0)
(197,86,0)
(68,147,0)
(278,60,0)
(177,337,0)
(232,206,0)
(362,168,0)
(157,209,0)
(5,161,0)
(179,174,0)
(246,186,0)
(166,263,0)
(310,302,0)
(194,150,0)
(344,203,0)
(29,121,0)
(325,298,0)
(271,218,0)
(138,191,0)
(35,192,0)
(350,115,0)
(294,234,0)
(176,21,0)
(196,222,0)
(261,253,0)
(35,31,0)
(95,263,0)
(192,17,0)
(306,16,0)
(375,86,0)
(231,156,0)
(174,179,0)
(92,87,0)
(6,294,0)
(147,375,0)
(217,161,0)
(39,152,0)
(147,68,0)
(50,20,0)
(238,60,0)
(182,164,0)
(318,140,0)
(244,254,0)
(339,243,0)
(373,358,0)
(49,60,0)
(150,147,0)
(150,194,0)
(90,147,0)
(213,107,0)
(331,161,0)
(230,258,0)
(239,325,0)
(124,138,0)
(188,117,0)
(352,367,0)
(43,210,0)
(179,70,0)
(206,99,0)
(74,81,0)
(286,364,0)
(205,58,0)
(84,263,0)
(226,60,0)
(162,206,0)
(240,140,0)
(107,140,0)
(60,176,0)
(59,321,0)
(334,218,0)
(286,206,0)
(182,209,0)
(60,314,0)
(55,209,0)
(114,84,0)
(123,183,0)
(241,116,0)
(245,210,0)
(144,316,0)
(66,368,0)
(170,153,0)
(183,263,0)
(325,186,0)
(375,186,0)
(78,2,0)
(206,367,0)
(2,60,0)
(50,209,0)
(46,375,0)
(257,152,0)
(98,221,0)
(357,321,0)
(284,246,0)
(113,263,0)
(120,310,0)
(70,253,0)
(135,229,0)
(121,29,0)
(297,275,0)
(358,209,0)
(179,82,0)
(61,13,0)
(206,286,0)
(221,209,0)
(287,31,0)
(156,364,0)
(300,93,0)
(13,263,0)
(206,201,0)
(158,277,0)
(191,138,0)
(367,206,0)
(204,186,0)
(272,101,0)
(346,36,0)
(364,260,0)
(155,73,0)
(155,186,0)
(300,82,0)
(75,263,0)
(288,107,0)
(302,310,0)
(295,206,0)
(372,337,0)
(199,263,0)
(218,271,0)
(258,368,0)
(328,86,0)
(354,179,0)
(130,157,0)
(372,138,0)
(243,333,0)
(178,304,0)
(277,209,0)
(321,201,0)
(327,321,0)
(290,164,0)
(172,156,0)
(338,299,0)
(276,294,0)
(330,127,0)
(321,253,0)
(137,194,0)
(315,209,0)
(122,91,0)
(316,144,0)
(188,253,0)
(184,275,0)
(76,263,0)
(34,52,0)
(138,372,0)
(17,192,0)
(294,186,0)
(134,151,0)
(171,17,0)
(93,300,0)
(262,116,0)
(30,186,0)
(24,168,0)
(144,209,0)
(159,17,0)
(305,323,0)
(271,368,0)
(315,360,0)
(163,223,0)
(259,133,0)
(312,70,0)
(106,1,0)
(104,206,0)
(202,154,0)
(123,225,0)
(132,287,0)
(201,253,0)
(51,184,0)
(298,325,0)
(321,222,0)
(92,258,0)
(147,260,0)
(361,176,0)
(292,298,0)
(96,345,0)
(322,60,0)
(264,375,0)
(174,228,0)
(150,282,0)
(41,64,0)
(191,275,0)
(317,85,0)
(181,123,0)
(107,86,0)
(53,160,0)
(300,41,0)
(107,288,0)
(137,164,0)
(119,209,0)
(198,123,0)
(313,294,0)
(260,82,0)
(245,209,0)
(58,56,0)
(211,294,0)
(310,3,0)
(85,263,0)
(333,220,0)
(374,289,0)
(228,209,0)
(258,92,0)
(206,104,0)
(60,234,0)
(242,263,0)
(93,221,0)
(109,144,0)
(176,60,0)
(336,173,0)
(337,372,0)
(152,298,0)
(23,127,0)
(9,140,0)
(303,101,0)
(364,375,0)
(282,150,0)
(341,245,0)
(70,312,0)
(301,294,0)
(240,316,0)
(223,163,0)
(260,70,0)
(45,50,0)
(301,234,0)
(140,186,0)
(233,263,0)
(157,365,0)
(260,253,0)
(320,82,0)
(256,16,0)
(52,119,0)
(358,46,0)
(294,168,0)
(308,337,0)
(247,367,0)
(228,174,0)
(167,263,0)
(145,66,0)
(91,136,0)
(240,316,1)
(265,329,1)
(10,124,1)
(158,311,1)
(84,114,1)
(109,126,1)
(4,226,1)
(154,365,1)
(301,234,1)
(269,318,1)
(147,68,1)
(376,164,1)
(322,223,1)
(243,272,1)
(281,133,1)
(58,205,1)
(374,254,1)
(375,86,1)
(251,85,1)
(124,141,1)
(153,70,1)
(46,358,1)
(299,201,1)
(180,368,1)
(260,82,1)
(68,62,1)
(107,86,1)
(245,209,1)
(208,29,1)
(134,355,1)
(285,87,1)
(335,210,1)
(314,165,1)
(246,284,1)
(230,92,1)
(27,48,1)
(226,359,1)
(284,143,1)
(312,151,1)
(155,73,1)
(93,221,1)
(231,172,1)
(227,192,1)
(318,115,1)
(93,260,1)
(275,297,1)
(307,89,1)
(20,215,1)
(7,282,1)
(80,99,1)
(182,128,1)
(290,182,1)
(179,174,1)
(297,184,1)
(206,99,1)
(111,189,1)
(241,293,1)
(262,241,1)
(116,262,1)
(161,5,1)
(163,258,1)
(150,282,1)
(70,312,1)
(112,84,1)
(357,201,1)
(165,369,1)
(364,375,1)
(138,372,1)
(365,28,1)
(235,190,1)
(294,168,1)
(366,140,1)
(151,209,1)
(16,168,1)
(232,162,1)
(14,40,1)
(55,209,1)
(11,371,1)
(102,214,1)
(341,180,1)
(218,183,1)
(182,209,1)
(192,17,1)
(334,66,1)
(352,232,1)
(184,51,1)
(52,119,1)
(130,320,1)
(224,249,1)
(265,125,1)
(358,252,1)
(250,12,1)
(282,277,1)
(369,238,1)
(207,343,1)
(264,46,1)
(371,332,1)
(105,187,1)
(53,203,1)
(329,353,1)
(148,168,1)
(90,68,1)
(20,260,1)
(223,273,1)
(336,22,1)
(365,260,1)
(300,93,1)
(365,375,1)
(291,277,1)
(286,82,1)
(122,0,1)
(20,375,1)
(29,121,1)
(321,201,1)
(34,119,1)
(192,57,1)
(294,234,1)
(66,116,1)
(61,222,1)
(150,194,1)
(143,255,1)
(157,209,1)
(325,298,1)
(194,137,1)
(272,101,1)
(94,102,1)
(325,54,1)
(228,32,1)
(144,149,1)
(138,86,1)
(115,350,1)
(319,130,1)
(78,4,1)
(302,105,1)
(40,224,1)
(205,56,1)
(309,374,1)
(35,192,1)
(366,235,1)
(139,322,1)
(196,212,1)
(215,50,1)
(123,198,1)
(301,110,1)
(350,210,1)
(206,104,1)
(183,123,1)
(303,173,1)
(119,209,1)
(135,39,1)
(101,195,1)
(16,256,1)
(6,219,1)
(24,307,1)
(60,176,1)
(327,88,1)
(260,70,1)
(92,87,1)
(229,8,1)
(85,317,1)
(82,154,1)
(310,302,1)
(211,276,1)
(164,290,1)
(132,296,1)
(316,37,1)
(59,146,1)
(156,231,1)
(96,61,1)
(66,145,1)
(35,227,1)
(351,98,1)
(321,168,1)
(273,163,1)
(123,181,1)
(244,148,1)
(348,221,1)
(37,144,1)
(153,279,1)
(311,82,1)
(260,236,1)
(275,184,1)
(244,268,1)
(57,17,1)
(308,200,1)
(363,188,1)
(157,319,1)
(16,222,1)
(362,168,1)
(140,9,1)
(355,363,1)
(256,76,1)
(216,127,1)
(321,299,1)
(282,291,1)
(221,209,1)
(129,151,1)
(22,324,1)
(79,315,1)
(337,308,1)
(236,360,1)
(131,13,1)
(22,36,1)
(247,352,1)
(60,2,1)
(223,86,1)
(91,122,1)
(210,245,1)
(161,100,1)
(243,339,1)
(146,357,1)
(356,295,1)
(302,187,1)
(206,367,1)
(21,40,1)
(97,260,1)
(345,96,1)
(26,346,1)
(63,20,1)
(289,347,1)
(118,147,1)
(315,209,1)
(221,351,1)
(310,120,1)
(92,285,1)
(276,6,1)
(233,251,1)
(156,209,1)
(169,74,1)
(279,63,1)
(324,36,1)
(71,86,1)
(126,246,1)
(2,78,1)
(203,304,1)
(279,20,1)
(107,140,1)
(88,59,1)
(223,163,1)
(154,202,1)
(375,140,1)
(320,153,1)
(150,82,1)
(272,108,1)
(347,254,1)
(141,52,1)
(164,182,1)
(345,72,1)
(33,354,1)
(178,304,1)
(137,164,1)
(198,131,1)
(65,356,1)
(178,112,1)
(306,16,1)
(266,156,1)
(375,264,1)
(177,308,1)
(149,109,1)
(274,176,1)
(150,70,1)
(222,196,1)
(174,228,1)
(67,216,1)
(294,222,1)
(179,70,1)
(128,58,1)
(147,375,1)
(342,35,1)
(278,19,1)
(104,65,1)
(359,139,1)
(374,289,1)
(268,81,1)
(69,97,1)
(277,158,1)
(210,43,1)
(160,53,1)
(219,234,1)
(173,336,1)
(175,349,1)
(313,211,1)
(60,314,1)
(203,344,1)
(233,209,1)
(83,138,1)
(271,218,1)
(293,103,1)
(121,375,1)
(248,274,1)
(187,250,1)
(195,303,1)
(339,272,1)
(100,132,1)
(71,366,1)
(32,33,1)
(127,330,1)
(315,111,1)
(300,70,1)
(365,157,1)
(252,373,1)
(13,345,1)
(206,295,1)
(191,275,1)
(54,91,1)
(76,208,1)
(93,375,1)
(48,209,1)
(138,191,1)
(73,309,1)
(56,207,1)
(286,364,1)
(38,71,1)
(223,140,1)
(311,153,1)
(296,342,1)
(258,368,1)
(364,266,1)
(344,179,1)
(49,83,1)
(87,248,1)
(147,260,1)
(200,10,1)
(86,197,1)
(107,213,1)
(206,286,1)
(329,229,1)
(147,90,1)
(144,209,1)
(0,243,1)
(142,183,1)
(170,70,1)
(286,70,1)
(328,366,1)
(208,113,1)
(362,77,1)
(133,304,1)
(360,315,1)
(360,79,1)
(208,175,1)
(168,24,1)
(176,21,1)
(108,101,1)
(277,209,1)
(350,335,1)
(317,178,1)
(103,155,1)
(240,86,1)
(150,147,1)
(99,18,1)
(280,337,1)
(299,338,1)
(330,23,1)
(214,286,1)
(255,325,1)
(349,281,1)
(133,259,1)
(213,288,1)
(36,26,1)
(300,82,1)
(98,11,1)
(174,193,1)
(25,372,1)
(8,135,1)
(190,140,1)
(138,140,1)
(353,229,1)
(249,49,1)
(9,27,1)
(107,288,1)
(162,185,1)
(121,179,1)
(28,157,1)
(331,321,1)
(295,94,1)
(217,331,1)
(176,361,1)
(52,34,1)
(138,52,1)
(294,301,1)
(364,260,1)
(12,300,1)
(234,60,1)
(50,209,1)
(106,160,1)
(89,268,1)
(143,225,1)
(9,48,1)
(47,358,1)
(119,38,1)
(208,106,1)
(137,376,1)
(21,14,1)
(99,67,1)
(171,310,1)
(270,29,1)
(117,270,1)
(338,327,1)
(238,278,1)
(20,50,1)
(254,244,1)
(321,222,1)
(218,334,1)
(332,217,1)
(172,80,1)
(364,156,1)
(245,341,1)
(240,140,1)
(259,240,1)
(17,159,1)
(77,148,1)
(93,348,1)
(267,294,1)
(114,326,1)
(202,365,1)
(145,116,1)
(185,104,1)
(74,233,1)
(23,69,1)
(258,92,1)
(110,313,1)
(50,377,1)
(354,161,1)
(60,223,1)
(189,150,1)
(265,368,1)
(372,280,1)
(48,42,1)
(19,2,1)
(45,170,1)
(42,269,1)
(337,177,1)
(123,225,1)
(288,265,1)
(68,209,1)
(159,171,1)
(60,226,1)
(67,127,1)
(58,56,1)
(358,209,1)
(201,206,1)
(184,55,1)
(326,142,1)
(193,228,1)
(343,118,1)
(81,169,1)
(39,292,1)
(228,209,1)
(188,117,1)
(373,240,1)
(62,7,1)
(24,72,1)
(244,362,1)
(125,329,1)
(197,328,1)
(292,239,1)
(377,45,1)
(173,22,1)
(116,241,1)
(367,247,1)
(43,245,1)
(258,230,1)
(51,55,1)
(312,129,1)
(239,267,1)
(46,47,1)
(151,134,1)
(368,271,1)
(55,25,1)
(179,82,1)
(150,58,1)
(120,302,1)
(372,337,1)
(316,144,1)
(346,107,1)
(208,374,1)
(360,315,2)
(23,29,2)
(20,50,2)
(351,29,2)
(22,36,2)
(243,272,2)
(193,29,2)
(140,9,2)
(278,374,2)
(259,240,2)
(336,374,2)
(119,374,2)
(134,29,2)
(194,137,2)
(179,82,2)
(165,374,2)
(185,29,2)
(188,117,2)
(366,140,2)
(369,374,2)
(252,240,2)
(119,209,2)
(137,164,2)
(125,374,2)
(174,228,2)
(294,222,2)
(294,374,2)
(155,73,2)
(206,104,2)
(144,374,2)
(302,187,2)
(308,374,2)
(150,29,2)
(93,375,2)
(143,225,2)
(178,304,2)
(210,374,2)
(168,268,2)
(22,374,2)
(51,374,2)
(194,29,2)
(288,374,2)
(234,60,2)
(239,374,2)
(52,374,2)
(206,286,2)
(151,209,2)
(255,374,2)
(29,121,2)
(327,29,2)
(162,29,2)
(272,374,2)
(123,225,2)
(86,366,2)
(126,374,2)
(329,229,2)
(107,140,2)
(163,374,2)
(218,183,2)
(249,374,2)
(319,153,2)
(344,179,2)
(127,29,2)
(297,374,2)
(321,299,2)
(286,29,2)
(358,240,2)
(65,29,2)
(153,29,2)
(243,374,2)
(375,86,2)
(350,374,2)
(100,29,2)
(197,366,2)
(151,29,2)
(161,5,2)
(271,374,2)
(149,374,2)
(171,29,2)
(180,374,2)
(306,16,2)
(357,29,2)
(269,374,2)
(248,374,2)
(375,140,2)
(260,82,2)
(24,72,2)
(334,374,2)
(300,70,2)
(20,29,2)
(182,209,2)
(367,29,2)
(330,29,2)
(89,268,2)
(132,29,2)
(69,29,2)
(70,312,2)
(228,29,2)
(155,374,2)
(145,374,2)
(9,374,2)
(68,209,2)
(187,29,2)
(315,29,2)
(99,18,2)
(301,374,2)
(97,29,2)
(150,147,2)
(98,29,2)
(176,21,2)
(156,29,2)
(364,375,2)
(284,374,2)
(71,374,2)
(137,29,2)
(184,374,2)
(11,29,2)
(303,374,2)
(9,48,2)
(133,304,2)
(365,157,2)
(16,168,2)
(24,268,2)
(213,374,2)
(124,374,2)
(311,29,2)
(60,2,2)
(191,275,2)
(229,374,2)
(138,86,2)
(321,201,2)
(102,29,2)
(182,29,2)
(55,209,2)
(174,29,2)
(364,156,2)
(27,374,2)
(302,29,2)
(341,374,2)
(135,374,2)
(153,279,2)
(331,29,2)
(301,234,2)
(321,29,2)
(179,174,2)
(329,374,2)
(240,374,2)
(271,218,2)
(106,179,2)
(223,140,2)
(275,374,2)
(139,374,2)
(318,374,2)
(140,374,2)
(315,209,2)
(364,260,2)
(231,29,2)
(280,374,2)
(286,82,2)
(153,70,2)
(268,81,2)
(275,184,2)
(58,56,2)
(90,29,2)
(138,52,2)
(48,209,2)
(129,29,2)
(110,374,2)
(121,179,2)
(364,29,2)
(192,17,2)
(221,209,2)
(320,153,2)
(93,260,2)
(87,374,2)
(50,209,2)
(359,374,2)
(291,29,2)
(54,374,2)
(273,374,2)
(215,29,2)
(219,374,2)
(368,271,2)
(322,374,2)
(37,374,2)
(366,374,2)
(138,374,2)
(277,209,2)
(282,277,2)
(109,374,2)
(47,240,2)
(12,29,2)
(206,99,2)
(230,374,2)
(189,29,2)
(10,374,2)
(19,374,2)
(120,29,2)
(205,29,2)
(223,86,2)
(50,29,2)
(99,67,2)
(115,350,2)
(211,374,2)
(45,29,2)
(293,374,2)
(88,29,2)
(34,374,2)
(7,29,2)
(277,29,2)
(339,374,2)
(337,374,2)
(241,374,2)
(60,374,2)
(117,29,2)
(163,258,2)
(328,366,2)
(157,153,2)
(115,374,2)
(354,29,2)
(288,265,2)
(118,29,2)
(296,29,2)
(179,70,2)
(73,374,2)
(32,29,2)
(300,82,2)
(150,194,2)
(121,240,2)
(200,374,2)
(355,29,2)
(218,374,2)
(93,29,2)
(42,374,2)
(201,29,2)
(40,374,2)
(8,374,2)
(279,20,2)
(203,179,2)
(154,153,2)
(314,374,2)
(313,374,2)
(265,374,2)
(60,314,2)
(107,86,2)
(46,240,2)
(28,153,2)
(138,372,2)
(324,374,2)
(188,29,2)
(122,374,2)
(67,29,2)
(116,374,2)
(25,374,2)
(294,168,2)
(206,367,2)
(310,29,2)
(0,374,2)
(16,222,2)
(270,29,2)
(191,374,2)
(210,245,2)
(82,153,2)
(300,29,2)
(217,29,2)
(146,29,2)
(363,29,2)
(55,374,2)
(343,29,2)
(148,268,2)
(107,288,2)
(274,374,2)
(360,29,2)
(35,192,2)
(373,240,2)
(56,29,2)
(226,374,2)
(52,119,2)
(2,374,2)
(216,29,2)
(240,316,2)
(299,201,2)
(48,374,2)
(374,254,2)
(346,374,2)
(221,29,2)
(345,72,2)
(128,29,2)
(376,29,2)
(312,151,2)
(70,29,2)
(147,375,2)
(57,29,2)
(14,374,2)
(228,209,2)
(192,29,2)
(66,374,2)
(358,209,2)
(175,240,2)
(227,29,2)
(33,29,2)
(147,68,2)
(161,29,2)
(176,374,2)
(147,260,2)
(233,209,2)
(356,29,2)
(195,374,2)
(49,374,2)
(46,358,2)
(176,361,2)
(300,93,2)
(172,29,2)
(294,301,2)
(362,168,2)
(170,29,2)
(223,163,2)
(80,29,2)
(157,209,2)
(99,29,2)
(150,82,2)
(58,29,2)
(316,144,2)
(183,123,2)
(190,374,2)
(321,222,2)
(144,209,2)
(258,368,2)
(365,153,2)
(158,29,2)
(372,374,2)
(309,374,2)
(349,240,2)
(203,304,2)
(335,374,2)
(78,374,2)
(236,29,2)
(36,374,2)
(214,29,2)
(156,209,2)
(150,70,2)
(13,345,2)
(264,240,2)
(160,179,2)
(325,298,2)
(292,374,2)
(68,29,2)
(150,282,2)
(39,374,2)
(123,181,2)
(79,29,2)
(202,153,2)
(138,191,2)
(107,374,2)
(276,374,2)
(294,234,2)
(321,168,2)
(6,374,2)
(365,260,2)
(232,29,2)
(35,29,2)
(60,176,2)
(365,375,2)
(281,240,2)
(289,254,2)
(53,179,2)
(352,29,2)
(207,29,2)
(316,374,2)
(258,374,2)
(348,29,2)
(138,140,2)
(310,302,2)
(312,29,2)
(150,58,2)
(164,182,2)
(91,374,2)
(141,374,2)
(63,29,2)
(289,347,2)
(82,154,2)
(164,29,2)
(258,92,2)
(267,374,2)
(282,29,2)
(60,223,2)
(59,29,2)
(347,254,2)
(286,364,2)
(147,29,2)
(133,240,2)
(179,29,2)
(374,289,2)
(201,206,2)
(116,241,2)
(368,374,2)
(272,101,2)
(260,29,2)
(168,24,2)
(67,127,2)
(105,29,2)
(143,374,2)
(17,29,2)
(4,374,2)
(29,240,2)
(286,70,2)
(104,29,2)
(307,268,2)
(103,374,2)
(260,70,2)
(371,29,2)
(247,29,2)
(177,374,2)
(93,221,2)
(60,226,2)
(223,374,2)
(262,374,2)
(238,374,2)
(94,29,2)
(66,116,2)
(21,40,2)
(299,29,2)
(353,374,2)
(26,374,2)
(111,29,2)
(372,337,2)
(154,365,2)
(130,153,2)
(295,29,2)
(377,29,2)
(266,29,2)
(173,374,2)
(245,374,2)
(101,374,2)
(92,374,2)
(337,308,2)
(246,374,2)
(250,29,2)
(92,87,2)
(240,140,2)
(173,22,2)
(285,374,2)
(325,374,2)
(38,374,2)
(206,295,2)
(108,374,2)
(342,29,2)
(375,240,2)
(350,210,2)
(290,29,2)
(83,374,2)
(235,374,2)
(234,374,2)
(159,29,2)
(265,329,2)
(338,29,2)
(62,29,2)
(265,368,2)
(43,374,2)
(240,86,2)
(20,260,2)
(20,375,2)
(245,209,2)
(362,148,2)
(224,374,2)
(206,29,2)
(332,29,2)
(279,29,2)
(184,55,2)
(21,374,2)
(29,179,2)
(77,148,2)
-----------------------------------
(0,vc_ptl)
(1,)
(2,vc_ptl->ptc)
(3,)
(4,vc_ptl)
(5,)
(6,mpi_errno)
(7,sreq)
(8,buf)
(9,sreq->dev.segment_size)
(10,sb)
(11,last)
(12,vc_ptl)
(13,vc_ptl = VC_PTL(vc)
(14,p)
(15,fn_fail:)
(16,return mpi_errno;)
(17,vc_ptl->id)
(18,ptl_size_t)
(19,0)
(20,sreq->dev.segment_first)
(21,sb->buf.p)
(22,vc_ptl->id.phys)
(23,sb)
(24,MPID_nem_ptl_init_id(vc)
(25,sreq)
(26,id)
(27,segment_size)
(28,segment_first)
(29,!FREE_EMPTY()
(30,if (last == sreq->dev.segment_size)
(31,)
(32,dev)
(33,sreq)
(34,segment_ptr)
(35,vc_ptl->id.phys.pid)
(36,vc_ptl->id)
(37,segment_size)
(38,dev)
(39,"PtlPut(size=%lu id=(%#x,%#x)
(40,sb->buf)
(41,)
(42,dev)
(43,segment_first)
(44,if (!vc_ptl->id_initialized)
(45,sreq)
(46,sreq->dev.segment_first)
(47,segment_first)
(48,sreq->dev)
(49,MPIDI_nem_ptl_global_md)
(50,sreq->dev)
(51,overflow)
(52,sreq->dev.segment_ptr)
(53,1)
(54,sb)
(55,REQ_PTL(sreq)
(56,sb->buf)
(57,phys)
(58,sb->buf.p)
(59,MPI_ERR_OTHER)
(60,PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)
(61,vc_ptl)
(62,dev)
(63,BUFLEN)
(64,)
(65,ptc)
(66,sb->buf.hp.hdr)
(67,sb->buf.p)
(68,sreq->dev)
(69,MPIDI_nem_ptl_global_md)
(70,last = sreq->dev.segment_size)
(71,sreq)
(72,MPIDI_VC_t *vc)
(73,&sb)
(74,vc_ptl)
(75,ret)
(76,MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT)
(77,mpi_errno)
(78,ptc)
(79,segment_first)
(80,last)
(81,vc_ptl->id_initialized)
(82,last = sreq->dev.segment_first+BUFLEN)
(83,ret)
(84,MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT)
(85,*complete = 0)
(86,last = PTL_MAX_EAGER)
(87,sb->buf)
(88,"**ptlput")
(89,mpi_errno)
(90,segment_first)
(91,vc_ptl->ptc)
(92,sb->buf.hp)
(93,sreq->dev.segment_first)
(94,id)
(95,if (MPIDI_CH3I_Sendq_empty(send_queue)
(96,vc)
(97,ret)
(98,sreq)
(99,(ptl_size_t)
(100,sb)
(101,vc_ptl->id)
(102,vc_ptl)
(103,sb)
(104,vc_ptl->ptc)
(105,phys)
(106,goto fn_exit;)
(107,sizeof(sb->buf.hp.hdr)
(108,phys)
(109,sreq)
(110,ret)
(111,dev)
(112,complete)
(113,goto fn_exit;)
(114,MPID_STATE_SEND_NONCONTIG_PKT)
(115,MPIU_Assert(sreq->dev.segment_first == 0)
(116,sb->buf.hp)
(117,&sb)
(118,last)
(119,sreq->dev)
(120,nid)
(121,FREE_EMPTY()
(122,ptc)
(123,(MPIDI_CH3_Pkt_t **)
(124,last)
(125,hdr)
(126,last)
(127,sb->buf)
(128,sreq)
(129,segment_size)
(130,sreq)
(131,hdr_p)
(132,vc_ptl->ptc)
(133,*complete)
(134,dev)
(135,sb)
(136,)
(137,REQ_PTL(sreq)
(138,MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)
(139,vc_ptl)
(140,last = sreq->dev.segment_size)
(141,0)
(142,MPID_STATE_SEND_NONCONTIG_PKT)
(143,*vhdr_p)
(144,sreq->dev)
(145,hdr)
(146,mpi_errno)
(147,sreq->dev.segment_first)
(148,mpi_errno)
(149,dev)
(150,MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)
(151,sreq->dev)
(152,)
(153,last > sreq->dev.segment_first+BUFLEN)
(154,sreq->dev.segment_first+BUFLEN)
(155,FREE_POP(&sb)
(156,sreq->dev)
(157,sreq->dev)
(158,dev)
(159,id)
(160,*complete = 1)
(161,MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x)
(162,0)
(163,sizeof(sb->buf.hp.hdr)
(164,REQ_PTL(sreq)
(165,my_pg_rank)
(166,mpi_errno)
(167,last)
(168,mpi_errno = MPID_nem_ptl_init_id(vc)
(169,id_initialized)
(170,last)
(171,vc_ptl)
(172,sreq)
(173,vc_ptl->id.phys.nid)
(174,sreq->dev.segment_size)
(175,goto fn_exit;)
(176,(ptl_size_t)
(177,hp)
(178,*complete)
(179,last == sreq->dev.segment_size)
(180,sreq)
(181,MPIDI_CH3_Pkt_t **)
(182,REQ_PTL(sreq)
(183,**hdr_p = (MPIDI_CH3_Pkt_t **)
(184,REQ_PTL(sreq)
(185,0)
(186,)
(187,vc_ptl->id)
(188,FREE_POP(&sb)
(189,sreq)
(190,last)
(191,&REQ_PTL(sreq)
(192,vc_ptl->id.phys)
(193,segment_size)
(194,&REQ_PTL(sreq)
(195,id)
(196,MPI_SUCCESS)
(197,PTL_MAX_EAGER)
(198,vhdr_p)
(199,sb)
(200,buf)
(201,ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)
(202,BUFLEN)
(203,*complete)
(204,while (!FREE_EMPTY()
(205,p)
(206,PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)
(207,buf)
(208,MPID_STATE_SEND_NONCONTIG_PKT)
(209,MPID_Request *sreq)
(210,sreq->dev.segment_first)
(211,"**ptlput")
(212,mpi_errno)
(213,last)
(214,PTL_NO_ACK_REQ)
(215,segment_first)
(216,p)
(217,VERBOSE)
(218,*hdr_p)
(219,ret)
(220,)
(221,sreq->dev)
(222,mpi_errno = MPI_SUCCESS)
(223,sizeof(sb->buf.hp.hdr)
(224,buf)
(225,void **vhdr_p)
(226,vc_ptl->id)
(227,pid)
(228,sreq->dev)
(229,sb->buf)
(230,hdr)
(231,dev)
(232,sb)
(233,MPID_nem_ptl_init_req(sreq)
(234,ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)
(235,PTL_MAX_EAGER)
(236,last)
(237,if (last > PTL_MAX_EAGER)
(238,sb)
(239,VERBOSE)
(240,last == sreq->dev.segment_size)
(241,sb->buf)
(242,hdr_p)
(243,vc_ptl->id.phys.pid)
(244,send_queue)
(245,sreq->dev)
(246,*vhdr_p = NULL)
(247,my_pg_rank)
(248,buf)
(249,sb)
(250,id)
(251,sreq)
(252,dev)
(253,)
(254,MPIDI_CH3I_Sendq_empty(send_queue)
(255,vhdr_p)
(256,mpi_errno)
(257,)
(258,sb->buf.hp.hdr)
(259,complete)
(260,sreq->dev.segment_first = last)
(261,if (last == sreq->dev.segment_size)
(262,hp)
(263,)
(264,last)
(265,sb->buf.hp.hdr)
(266,segment_first)
(267,CH3_CHANNEL)
(268,!vc_ptl->id_initialized)
(269,sreq)
(270,sb)
(271,**hdr_p)
(272,vc_ptl->id.phys)
(273,last)
(274,sb)
(275,REQ_PTL(sreq)
(276,MPI_ERR_OTHER)
(277,sreq->dev)
(278,0)
(279,sreq->dev.segment_first+BUFLEN)
(280,payload)
(281,1)
(282,sreq->dev.segment_ptr)
(283,)
(284,NULL)
(285,hp)
(286,last - sreq->dev.segment_first)
(287,)
(288,sizeof(sb->buf.hp.hdr)
(289,!FREE_EMPTY()
(290,overflow)
(291,segment_ptr)
(292,MPIU_DBG_FDEST)
(293,buf)
(294,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret)
(295,vc_ptl->id)
(296,ptc)
(297,0)
(298,)
(299,MPID_nem_ptl_strerror(ret)
(300,last - sreq->dev.segment_first)
(301,MPID_nem_ptl_strerror(ret)
(302,vc_ptl->id.phys)
(303,vc_ptl)
(304,int *complete)
(305,if (mpi_errno)
(306,RET)
(307,vc)
(308,sb->buf)
(309,sb)
(310,vc_ptl->id.phys.nid)
(311,sreq)
(312,sreq->dev.segment_size)
(313,"**ptlput %s")
(314,MPIDI_Process.my_pg_rank)
(315,sreq->dev)
(316,sreq->dev.segment_size)
(317,0)
(318,last)
(319,dev)
(320,last)
(321,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret)
(322,PTL_NO_ACK_REQ)
(323,)
(324,phys)
(325,MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "PtlPut(size=%lu id=(%#x,%#x)
(326,MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT)
(327,"**ptlput %s")
(328,last)
(329,sb->buf.hp)
(330,buf)
(331,CH3_CHANNEL)
(332,MPIU_DBG_FDEST)
(333,)
(334,hdr_p)
(335,0)
(336,nid)
(337,sb->buf.hp)
(338,ret)
(339,pid)
(340,if (last > sreq->dev.segment_first+BUFLEN)
(341,dev)
(342,vc_ptl)
(343,sb)
(344,complete)
(345,VC_PTL(vc)
(346,vc_ptl)
(347,FREE_EMPTY()
(348,segment_first)
(349,*complete = 1)
(350,sreq->dev.segment_first == 0)
(351,dev)
(352,MPIDI_Process)
(353,hp)
(354,last)
(355,sreq)
(356,vc_ptl)
(357,ret)
(358,sreq->dev)
(359,id)
(360,sreq->dev.segment_first)
(361,ptl_size_t)
(362,MPIU_ERR_POP(mpi_errno)
(363,last)
(364,sreq->dev.segment_first)
(365,sreq->dev.segment_first)
(366,last > PTL_MAX_EAGER)
(367,MPIDI_Process.my_pg_rank)
(368,sb->buf.hp.hdr = **hdr_p)
(369,MPIDI_Process)
(370,fn_exit:)
(371,"PtlPut(size=%lu id=(%#x,%#x)
(372,sb->buf.hp.payload)
(373,sreq)
(374,MPIDI_CH3I_Sendq_empty(send_queue)
(375,sreq->dev.segment_first = last)
(376,0)
(377,dev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^