-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_31_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)realloc(data, 100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    {
        int * dataCopy = data;
        int * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
66,69
67,68
68,69
68,70
70,71
70,72
70,73
73,74
74,75
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,33,36,37,41,43,48,50,55,56,57,61,64,65,69,71,72,75,78,80,81,84,85
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
39,40
39,41
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_31_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_31_bad()
CWE401_Memory_Leak__int_realloc_31_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * dataCopy = data;
int * dataCopy = data;
int
* dataCopy = data
*
dataCopy
= data
data
data
int * data = dataCopy;
int * data = dataCopy;
int
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(16,33,0)
(16,14,0)
(14,5,0)
(2,38,0)
(0,25,0)
(14,16,0)
(10,26,0)
(5,14,0)
(27,29,0)
(21,23,0)
(22,29,0)
(25,33,0)
(33,16,0)
(18,10,0)
(15,33,0)
(40,29,0)
(29,23,0)
(11,19,0)
(8,16,0)
(17,26,0)
(1,11,0)
(24,32,0)
(35,34,0)
(14,23,0)
(9,10,0)
(41,9,0)
(33,25,0)
(16,38,0)
(6,26,0)
(20,23,0)
(40,26,0)
(9,34,0)
(34,10,0)
(36,10,0)
(4,32,0)
(12,9,0)
(37,26,0)
(7,20,0)
(13,17,0)
(30,20,0)
(28,38,0)
(19,39,0)
(38,26,0)
(31,34,0)
(20,17,0)
(29,17,0)
(23,14,0)
(19,11,0)
(23,26,0)
(29,40,0)
(34,23,0)
(32,23,0)
(33,25,1)
(15,8,1)
(38,2,1)
(12,34,1)
(16,38,1)
(7,19,1)
(2,28,1)
(20,30,1)
(32,24,1)
(29,23,1)
(17,13,1)
(23,14,1)
(34,35,1)
(20,23,1)
(29,22,1)
(40,29,1)
(25,0,1)
(31,40,1)
(34,23,1)
(0,15,1)
(32,23,1)
(13,20,1)
(27,17,1)
(1,32,1)
(7,32,1)
(14,5,1)
(8,21,1)
(35,31,1)
(4,23,1)
(16,33,1)
(11,1,1)
(22,27,1)
(30,7,1)
(24,4,1)
(9,41,1)
(14,16,1)
(3,9,1)
(21,38,1)
(41,12,1)
(9,34,1)
(19,11,1)
(29,17,1)
(20,23,2)
(40,29,2)
(32,23,2)
(29,17,2)
(14,5,2)
(9,34,2)
(33,25,2)
(29,23,2)
(19,11,2)
(14,16,2)
(1,32,2)
(16,33,2)
(34,23,2)
(11,32,2)
(19,32,2)
(23,14,2)
(16,38,2)
-----------------------------------
(0,int)
(1,1)
(2,NULL)
(3,RET)
(4,data)
(5,int *)
(6,if (data == NULL)
(7,data)
(8,data)
(9,* data = dataCopy)
(10,)
(11,-1)
(12,data)
(13,5)
(14,(int *)
(15,100)
(16,realloc(data, 100*sizeof(int)
(17,data[0] = 5)
(18,data)
(19,exit(-1)
(20,data[0])
(21,data)
(22,0)
(23,data = (int *)
(24,NULL)
(25,sizeof(int)
(26,)
(27,data)
(28,data)
(29,data[0])
(30,0)
(31,dataCopy)
(32,data == NULL)
(33,100*sizeof(int)
(34,* dataCopy = data)
(35,data)
(36,dataCopy)
(37,data)
(38,data = NULL)
(39,)
(40,printIntLine(data[0])
(41,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^