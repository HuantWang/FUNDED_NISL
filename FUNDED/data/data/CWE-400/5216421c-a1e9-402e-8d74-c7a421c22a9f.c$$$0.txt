-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,32,33,37,38,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
35,36
35,37
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(2,53,0)
(17,20,0)
(38,37,0)
(11,12,0)
(56,20,0)
(3,16,0)
(42,51,0)
(32,40,0)
(50,51,0)
(41,2,0)
(35,34,0)
(51,20,0)
(49,16,0)
(51,12,0)
(17,6,0)
(54,16,0)
(40,37,0)
(1,9,0)
(53,2,0)
(7,14,0)
(31,40,0)
(21,44,0)
(18,44,0)
(36,29,0)
(12,51,0)
(45,54,0)
(24,14,0)
(40,16,0)
(51,42,0)
(16,37,0)
(28,49,0)
(16,11,0)
(9,44,0)
(11,16,0)
(49,37,0)
(20,25,0)
(27,20,0)
(52,9,0)
(5,26,0)
(4,26,0)
(11,8,0)
(51,9,0)
(39,44,0)
(17,9,0)
(23,13,0)
(13,33,0)
(15,17,0)
(22,6,0)
(46,30,0)
(34,10,0)
(43,29,0)
(55,42,0)
(12,11,0)
(14,16,0)
(0,30,0)
(6,17,0)
(8,11,0)
(54,37,0)
(53,19,0)
(29,47,0)
(17,6,1)
(48,34,1)
(11,8,1)
(35,17,1)
(11,12,1)
(4,5,1)
(5,20,1)
(5,13,1)
(17,20,1)
(22,15,1)
(51,9,1)
(55,50,1)
(26,4,1)
(23,30,1)
(50,3,1)
(28,40,1)
(17,9,1)
(32,53,1)
(53,2,1)
(46,9,1)
(49,16,1)
(2,41,1)
(14,7,1)
(15,26,1)
(34,35,1)
(52,1,1)
(45,49,1)
(24,16,1)
(27,56,1)
(14,16,1)
(12,51,1)
(16,11,1)
(41,14,1)
(54,16,1)
(56,30,1)
(40,16,1)
(0,46,1)
(13,23,1)
(51,20,1)
(48,26,1)
(32,14,1)
(30,0,1)
(49,28,1)
(3,17,1)
(6,22,1)
(42,55,1)
(31,32,1)
(48,54,1)
(9,52,1)
(54,45,1)
(7,24,1)
(40,31,1)
(20,27,1)
(51,42,1)
(14,17,2)
(23,30,2)
(28,17,2)
(17,20,2)
(15,26,2)
(42,17,2)
(16,17,2)
(2,14,2)
(22,26,2)
(14,16,2)
(11,17,2)
(16,11,2)
(55,17,2)
(51,20,2)
(40,17,2)
(56,30,2)
(24,17,2)
(51,9,2)
(45,17,2)
(12,51,2)
(17,9,2)
(11,12,2)
(20,30,2)
(31,17,2)
(54,17,2)
(50,17,2)
(3,17,2)
(34,17,2)
(32,17,2)
(54,16,2)
(35,17,2)
(51,17,2)
(17,6,2)
(7,17,2)
(12,17,2)
(49,17,2)
(51,42,2)
(27,30,2)
(40,16,2)
(6,26,2)
(53,2,2)
(49,16,2)
(11,8,2)
(41,14,2)
(17,26,2)
(13,30,2)
(53,14,2)
-----------------------------------
(0,5)
(1,data)
(2,-1)
(3,myString)
(4,5)
(5,STATIC_CONST_FIVE)
(6,strlen(HELLO_STRING)
(7,NULL)
(8,char *)
(9,data = 0)
(10,)
(11,(char *)
(12,malloc(data*sizeof(char)
(13,printLine("Benign, fixed string")
(14,myString == NULL)
(15,data)
(16,myString = (char *)
(17,data > strlen(HELLO_STRING)
(18,if(STATIC_CONST_FIVE!=5)
(19,)
(20,data = 20)
(21,if(STATIC_CONST_FIVE==5)
(22,HELLO_STRING)
(23,"Benign, fixed string")
(24,myString)
(25,)
(26,STATIC_CONST_FIVE==5)
(27,20)
(28,myString)
(29,)
(30,STATIC_CONST_FIVE!=5)
(31,HELLO_STRING)
(32,myString)
(33,)
(34,printLine("Input is less than the length of the source string")
(35,"Input is less than the length of the source string")
(36,myString)
(37,)
(38,if (myString == NULL)
(39,data)
(40,strcpy(myString, HELLO_STRING)
(41,1)
(42,sizeof(char)
(43,if (data > strlen(HELLO_STRING)
(44,)
(45,myString)
(46,STATIC_CONST_FIVE)
(47,)
(48,RET)
(49,printLine(myString)
(50,data)
(51,data*sizeof(char)
(52,0)
(53,exit(-1)
(54,free(myString)
(55,char)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^