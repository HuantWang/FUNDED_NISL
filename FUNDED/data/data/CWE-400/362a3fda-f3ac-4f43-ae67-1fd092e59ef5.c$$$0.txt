-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_51b_goodB2GSink(size_t data)
{
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_51b_goodB2GSink(size_t data){    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_51b_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_51b_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(12,8,0)
(7,26,0)
(38,7,0)
(33,27,0)
(31,35,0)
(24,28,0)
(3,2,0)
(5,10,0)
(5,31,0)
(25,10,0)
(40,29,0)
(14,7,0)
(32,40,0)
(11,31,0)
(9,10,0)
(39,34,0)
(4,10,0)
(0,36,0)
(31,5,0)
(18,4,0)
(16,34,0)
(28,5,0)
(41,25,0)
(7,35,0)
(7,38,0)
(13,5,0)
(6,13,0)
(4,5,0)
(29,8,0)
(29,40,0)
(37,4,0)
(28,10,0)
(21,13,0)
(27,22,0)
(17,38,0)
(40,26,0)
(2,8,0)
(30,33,0)
(8,26,0)
(1,0,0)
(8,2,0)
(27,33,0)
(23,5,0)
(25,5,0)
(8,29,0)
(31,11,0)
(35,31,0)
(15,40,0)
(34,20,0)
(35,7,0)
(27,33,1)
(4,5,1)
(13,5,1)
(29,8,1)
(41,4,1)
(2,3,1)
(8,2,1)
(18,37,1)
(31,11,1)
(19,0,1)
(25,41,1)
(28,5,1)
(19,28,1)
(7,38,1)
(4,18,1)
(24,25,1)
(8,26,1)
(25,5,1)
(40,15,1)
(3,12,1)
(35,7,1)
(37,27,1)
(23,29,1)
(38,17,1)
(30,13,1)
(13,6,1)
(33,30,1)
(0,1,1)
(7,26,1)
(17,14,1)
(15,32,1)
(31,35,1)
(6,21,1)
(14,23,1)
(5,31,1)
(40,26,1)
(37,13,1)
(1,29,1)
(29,40,1)
(21,5,1)
(28,24,1)
(32,8,1)
(18,29,2)
(15,8,2)
(14,29,2)
(7,38,2)
(7,29,2)
(40,26,2)
(35,29,2)
(33,13,2)
(25,29,2)
(5,31,2)
(23,29,2)
(29,8,2)
(0,29,2)
(25,5,2)
(27,13,2)
(30,13,2)
(5,29,2)
(31,29,2)
(4,5,2)
(8,26,2)
(13,29,2)
(17,29,2)
(40,8,2)
(32,8,2)
(1,29,2)
(35,7,2)
(8,2,2)
(31,11,2)
(24,29,2)
(27,33,2)
(7,26,2)
(37,29,2)
(4,29,2)
(31,35,2)
(21,29,2)
(29,40,2)
(6,29,2)
(28,29,2)
(28,5,2)
(13,5,2)
(38,29,2)
(41,29,2)
-----------------------------------
(0,printLine("Input is less than the length of the source string or too large")
(1,"Input is less than the length of the source string or too large")
(2,wcslen(HELLO_STRING)
(3,HELLO_STRING)
(4,wcscpy(myString, HELLO_STRING)
(5,myString = (wchar_t *)
(6,NULL)
(7,data*sizeof(wchar_t)
(8,data > wcslen(HELLO_STRING)
(9,if (myString == NULL)
(10,)
(11,wchar_t *)
(12,data)
(13,myString == NULL)
(14,data)
(15,100)
(16,myString)
(17,wchar_t)
(18,HELLO_STRING)
(19,RET)
(20,)
(21,myString)
(22,)
(23,myString)
(24,myString)
(25,printWLine(myString)
(26,size_t data)
(27,exit(-1)
(28,free(myString)
(29,data > wcslen(HELLO_STRING)
(30,1)
(31,(wchar_t *)
(32,data)
(33,-1)
(34,)
(35,malloc(data*sizeof(wchar_t)
(36,)
(37,myString)
(38,sizeof(wchar_t)
(39,if (data > wcslen(HELLO_STRING)
(40,data < 100)
(41,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^