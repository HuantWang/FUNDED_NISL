-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_03_bad()
{
    if(5==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_03_bad(){    if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_03_bad()
CWE401_Memory_Leak__malloc_realloc_char_03_bad
{    if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
5==5
5
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(5,24,0)
(22,29,0)
(21,6,0)
(36,24,0)
(37,26,0)
(29,51,0)
(23,10,0)
(47,20,0)
(1,18,0)
(10,28,0)
(43,29,0)
(44,12,0)
(18,6,0)
(17,42,0)
(2,5,0)
(49,4,0)
(48,35,0)
(4,6,0)
(27,31,0)
(24,30,0)
(42,6,0)
(40,34,0)
(28,4,0)
(51,37,0)
(19,47,0)
(16,45,0)
(31,27,0)
(12,51,0)
(13,51,0)
(6,24,0)
(15,39,0)
(32,31,0)
(0,42,0)
(29,20,0)
(7,20,0)
(3,18,0)
(5,6,0)
(38,40,0)
(8,24,0)
(4,28,0)
(18,24,0)
(4,49,0)
(7,51,0)
(6,4,0)
(41,38,0)
(50,7,0)
(35,6,0)
(40,38,0)
(35,27,0)
(28,10,0)
(27,35,0)
(47,51,0)
(9,45,0)
(37,35,0)
(14,24,0)
(11,10,0)
(26,37,0)
(25,12,0)
(37,51,0)
(35,37,0)
(33,27,0)
(10,11,0)
(52,11,0)
(51,24,0)
(4,49,1)
(12,51,1)
(40,38,1)
(32,33,1)
(27,31,1)
(1,42,1)
(48,13,1)
(43,22,1)
(0,17,1)
(52,23,1)
(41,42,1)
(7,50,1)
(29,43,1)
(50,47,1)
(42,6,1)
(38,41,1)
(11,52,1)
(47,51,1)
(31,32,1)
(46,45,1)
(45,9,1)
(35,27,1)
(2,18,1)
(9,16,1)
(22,12,1)
(21,45,1)
(33,48,1)
(35,6,1)
(1,40,1)
(51,37,1)
(23,21,1)
(5,2,1)
(37,26,1)
(5,6,1)
(29,51,1)
(19,29,1)
(10,11,1)
(6,4,1)
(7,51,1)
(4,28,1)
(18,6,1)
(28,10,1)
(46,12,1)
(42,0,1)
(13,5,1)
(44,51,1)
(25,44,1)
(18,3,1)
(3,1,1)
(46,7,1)
(37,35,1)
(47,19,1)
(17,6,1)
(12,25,1)
(52,45,2)
(40,42,2)
(22,12,2)
(29,51,2)
(51,37,2)
(40,38,2)
(11,45,2)
(25,45,2)
(28,10,2)
(12,45,2)
(4,45,2)
(10,45,2)
(29,12,2)
(37,35,2)
(28,45,2)
(17,45,2)
(37,45,2)
(43,12,2)
(32,45,2)
(1,45,2)
(7,51,2)
(38,42,2)
(27,31,2)
(6,4,2)
(2,45,2)
(41,42,2)
(50,12,2)
(47,12,2)
(4,49,2)
(3,45,2)
(18,6,2)
(18,45,2)
(35,6,2)
(33,45,2)
(7,12,2)
(21,45,2)
(27,45,2)
(35,27,2)
(0,45,2)
(44,45,2)
(12,51,2)
(42,45,2)
(37,26,2)
(31,45,2)
(35,45,2)
(5,45,2)
(47,51,2)
(4,28,2)
(42,6,2)
(13,45,2)
(23,45,2)
(10,11,2)
(19,12,2)
(51,45,2)
(5,6,2)
(6,45,2)
(48,45,2)
-----------------------------------
(0,NULL)
(1,data)
(2,data)
(3,"A String")
(4,(char *)
(5,printLine(data)
(6,* data = (char *)
(7,free(data)
(8,if (data == NULL)
(9,5)
(10,100*sizeof(char)
(11,sizeof(char)
(12,data != NULL)
(13,data)
(14,if (data != NULL)
(15,if(5==5)
(16,5)
(17,data)
(18,strcpy(data, "A String")
(19,data)
(20,)
(21,data)
(22,data)
(23,100)
(24,)
(25,NULL)
(26,char *)
(27,(130000)
(28,malloc(100*sizeof(char)
(29,strcpy(data, "New String")
(30,)
(31,sizeof(char)
(32,char)
(33,130000)
(34,)
(35,realloc(data, (130000)
(36,data)
(37,(char *)
(38,-1)
(39,)
(40,exit(-1)
(41,1)
(42,data == NULL)
(43,"New String")
(44,data)
(45,5==5)
(46,RET)
(47,printLine(data)
(48,data)
(49,char *)
(50,data)
(51,data = (char *)
(52,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^