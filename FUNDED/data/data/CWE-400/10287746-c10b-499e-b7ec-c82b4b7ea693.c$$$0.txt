-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    /* FIX: Use a relatively small number */
    count = 20;
    goto sink;
sink:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
23,24
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,18,20,24,25,27,29,34,36,38,43,44,47,51,52,54,57,62,63
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    goto source;source:    /* FIX: Use a relatively small number */    count = 20;    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    goto source;source:    /* FIX: Use a relatively small number */    count = 20;    goto sink;sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    /* FIX: Use a relatively small number */    count = 20;
source
count = 20;
count = 20
count
count
20
goto sink;
sink
sink:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
sink
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(21,1,0)
(6,0,0)
(14,17,0)
(26,1,0)
(22,25,0)
(24,1,0)
(10,28,0)
(30,6,0)
(13,15,0)
(8,0,0)
(28,1,0)
(29,19,0)
(15,1,0)
(17,1,0)
(7,2,0)
(19,28,0)
(0,2,0)
(27,31,0)
(5,1,0)
(20,1,0)
(15,18,0)
(6,30,0)
(11,19,0)
(4,6,0)
(18,15,0)
(6,17,0)
(32,2,0)
(16,18,0)
(12,28,0)
(3,17,0)
(0,6,0)
(31,2,0)
(23,22,0)
(2,32,1)
(16,13,1)
(4,8,1)
(3,14,1)
(19,11,1)
(27,22,1)
(8,31,1)
(5,15,1)
(31,2,1)
(6,4,1)
(32,7,1)
(15,18,1)
(9,0,1)
(8,2,1)
(0,2,1)
(18,16,1)
(23,0,1)
(31,27,1)
(0,6,1)
(7,19,1)
(26,17,1)
(29,26,1)
(22,23,1)
(6,17,1)
(11,29,1)
(17,3,1)
(14,5,1)
(6,30,1)
(31,0,2)
(6,30,2)
(15,18,2)
(27,0,2)
(0,6,2)
(0,0,2)
(0,2,2)
(6,0,2)
(8,0,2)
(23,0,2)
(22,0,2)
(4,0,2)
(6,17,2)
(31,2,2)
-----------------------------------
(0,i < (size_t)
(1,)
(2,i = 0)
(3,20)
(4,count)
(5,goto source;)
(6,(size_t)
(7,i)
(8,i)
(9,RET)
(10,i)
(11,0)
(12,for (i = 0; i < (size_t)
(13,count)
(14,count)
(15,count = -1)
(16,1)
(17,count = 20)
(18,-1)
(19,i = 0)
(20,count)
(21,source:)
(22,printLine("Hello")
(23,"Hello")
(24,sink:)
(25,)
(26,goto sink;)
(27,i)
(28,)
(29,i)
(30,size_t)
(31,i++)
(32,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^