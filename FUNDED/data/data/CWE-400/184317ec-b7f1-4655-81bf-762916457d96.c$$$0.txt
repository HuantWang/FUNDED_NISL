-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct)
{
    size_t data = myStruct.structFirst;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,14,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct){    size_t data = myStruct.structFirst;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType
myStruct
myStruct
{    size_t data = myStruct.structFirst;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = myStruct.structFirst;
size_t data = myStruct.structFirst;
size_t
size_t
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(32,33,0)
(16,30,0)
(41,19,0)
(31,16,0)
(29,16,0)
(43,5,0)
(21,24,0)
(37,14,0)
(14,24,0)
(28,2,0)
(34,4,0)
(27,5,0)
(24,14,0)
(11,39,0)
(10,12,0)
(23,20,0)
(19,40,0)
(6,41,0)
(36,39,0)
(35,2,0)
(3,8,0)
(29,8,0)
(5,24,0)
(0,24,0)
(38,35,0)
(35,38,0)
(42,32,0)
(1,29,0)
(14,37,0)
(21,12,0)
(39,12,0)
(18,10,0)
(38,14,0)
(35,16,0)
(15,20,0)
(10,24,0)
(13,21,0)
(16,4,0)
(7,30,0)
(26,35,0)
(24,12,0)
(20,30,0)
(4,9,0)
(14,38,0)
(2,35,0)
(8,29,0)
(39,24,0)
(19,41,0)
(4,16,0)
(17,4,0)
(25,12,0)
(22,32,1)
(14,37,1)
(14,38,1)
(18,21,1)
(1,16,1)
(35,16,1)
(38,35,1)
(42,29,1)
(29,8,1)
(39,11,1)
(16,4,1)
(10,18,1)
(29,16,1)
(41,6,1)
(36,5,1)
(17,31,1)
(0,29,1)
(27,24,1)
(21,24,1)
(43,27,1)
(34,17,1)
(5,24,1)
(4,9,1)
(10,24,1)
(24,14,1)
(6,5,1)
(8,3,1)
(22,10,1)
(3,1,1)
(28,26,1)
(26,0,1)
(4,34,1)
(32,42,1)
(19,41,1)
(35,2,1)
(11,36,1)
(36,19,1)
(39,24,1)
(2,28,1)
(21,13,1)
(13,39,1)
(5,43,1)
(14,37,2)
(28,29,2)
(35,2,2)
(21,24,2)
(36,29,2)
(35,29,2)
(39,29,2)
(43,29,2)
(14,29,2)
(42,29,2)
(0,29,2)
(38,29,2)
(10,29,2)
(38,35,2)
(24,14,2)
(14,38,2)
(27,29,2)
(26,29,2)
(29,16,2)
(6,5,2)
(41,5,2)
(5,29,2)
(4,9,2)
(35,16,2)
(39,24,2)
(19,41,2)
(2,29,2)
(29,8,2)
(21,29,2)
(5,24,2)
(32,29,2)
(19,5,2)
(11,29,2)
(16,4,2)
(10,24,2)
(18,29,2)
(24,29,2)
(13,29,2)
-----------------------------------
(0,myString)
(1,data)
(2,sizeof(char)
(3,HELLO_STRING)
(4,myStruct.structFirst)
(5,myString == NULL)
(6,1)
(7,data)
(8,strlen(HELLO_STRING)
(9,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct)
(10,free(myString)
(11,HELLO_STRING)
(12,)
(13,myString)
(14,(char *)
(15,myString)
(16,data = myStruct.structFirst)
(17,myStruct)
(18,myString)
(19,exit(-1)
(20,)
(21,printLine(myString)
(22,RET)
(23,if (data > strlen(HELLO_STRING)
(24,myString = (char *)
(25,if (myString == NULL)
(26,data)
(27,myString)
(28,char)
(29,data > strlen(HELLO_STRING)
(30,)
(31,data)
(32,printLine("Input is less than the length of the source string")
(33,)
(34,structFirst)
(35,data*sizeof(char)
(36,myString)
(37,char *)
(38,malloc(data*sizeof(char)
(39,strcpy(myString, HELLO_STRING)
(40,)
(41,-1)
(42,"Input is less than the length of the source string")
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^