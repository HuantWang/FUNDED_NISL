-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = data;
    goodB2GSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
66,67
67,68
68,69
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,63,65,69
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
61,62
61,63
-----guardedBy-----
34,50
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = data;    goodB2GSink();}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = data;    goodB2GSink();}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = data;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData
data
data
goodB2GSink();
goodB2GSink()
goodB2GSink
goodB2GSink
-----joern-----
(16,9,0)
(7,11,0)
(18,0,0)
(20,15,0)
(30,15,0)
(23,11,0)
(19,25,0)
(15,30,0)
(9,11,0)
(8,24,0)
(21,14,0)
(3,30,0)
(5,24,0)
(27,14,0)
(12,28,0)
(22,15,0)
(6,25,0)
(0,24,0)
(17,16,0)
(25,14,0)
(13,9,0)
(24,0,0)
(29,24,0)
(15,16,0)
(25,11,0)
(24,16,0)
(31,12,0)
(4,9,0)
(25,30,0)
(10,16,0)
(1,15,0)
(30,2,0)
(14,11,0)
(25,19,1)
(24,8,1)
(29,16,1)
(5,29,1)
(24,16,1)
(23,25,1)
(21,27,1)
(1,22,1)
(18,24,1)
(8,5,1)
(10,14,1)
(0,24,1)
(15,16,1)
(6,12,1)
(6,30,1)
(22,3,1)
(31,0,1)
(25,14,1)
(15,20,1)
(16,17,1)
(25,30,1)
(14,21,1)
(3,0,1)
(0,18,1)
(26,23,1)
(12,31,1)
(19,6,1)
(17,10,1)
(30,15,1)
(20,1,1)
(20,0,2)
(31,0,2)
(22,0,2)
(25,30,2)
(1,0,2)
(15,16,2)
(24,16,2)
(15,0,2)
(30,0,2)
(0,24,2)
(12,0,2)
(3,0,2)
(30,15,2)
(25,14,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,NULL)
(2,)
(3,data)
(4,inputBuffer)
(5,CHAR_ARRAY_SIZE)
(6,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData)
(7,data)
(8,stdin)
(9,)
(10,inputBuffer)
(11,)
(12,printLine("fgets()
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,data = 0)
(15,strtoul(inputBuffer, NULL, 0)
(16,inputBuffer[CHAR_ARRAY_SIZE] = "")
(17,"")
(18,NULL)
(19,data)
(20,0)
(21,0)
(22,inputBuffer)
(23,goodB2GSink()
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = data)
(26,RET)
(27,data)
(28,)
(29,inputBuffer)
(30,data = strtoul(inputBuffer, NULL, 0)
(31,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^