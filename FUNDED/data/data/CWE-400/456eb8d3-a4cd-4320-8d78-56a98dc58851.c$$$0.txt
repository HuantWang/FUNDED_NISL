-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    int count;
    /* Initialize count */
    count = -1;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,42,47,48,51,52,55,60,62,66,67
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B()
goodG2B
{    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int h,j;
int h,j;
int
h
h
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(12,9,0)
(6,26,0)
(14,33,0)
(26,21,0)
(11,14,0)
(22,0,0)
(25,9,0)
(0,28,0)
(26,3,0)
(34,28,0)
(32,15,0)
(7,1,0)
(8,14,0)
(17,2,0)
(1,3,0)
(15,21,0)
(21,9,0)
(31,33,0)
(21,15,0)
(26,2,0)
(5,21,0)
(19,9,0)
(23,2,0)
(16,33,0)
(30,4,0)
(20,9,0)
(10,28,0)
(29,33,0)
(4,28,0)
(27,9,0)
(24,31,0)
(2,35,0)
(13,4,0)
(18,14,1)
(24,1,1)
(4,13,1)
(26,2,1)
(17,4,1)
(26,21,1)
(30,0,1)
(8,31,1)
(10,21,1)
(4,28,1)
(2,23,1)
(7,26,1)
(16,4,1)
(34,10,1)
(11,8,1)
(0,28,1)
(28,34,1)
(15,32,1)
(23,17,1)
(14,33,1)
(6,14,1)
(31,33,1)
(30,28,1)
(22,2,1)
(31,24,1)
(29,16,1)
(21,15,1)
(26,6,1)
(33,29,1)
(13,30,1)
(0,22,1)
(8,33,1)
(32,5,1)
(14,11,1)
(1,7,1)
(11,14,2)
(26,2,2)
(23,4,2)
(4,28,2)
(6,14,2)
(13,4,2)
(17,4,2)
(14,14,2)
(26,21,2)
(2,4,2)
(0,28,2)
(30,4,2)
(26,14,2)
(4,4,2)
(31,33,2)
(1,14,2)
(8,14,2)
(24,14,2)
(21,15,2)
(0,4,2)
(22,4,2)
(14,33,2)
(31,14,2)
(7,14,2)
-----------------------------------
(0,h++)
(1,printLine("Sleep time possibly too long")
(2,count = 20)
(3,)
(4,h < 1)
(5,count)
(6,count)
(7,"Sleep time possibly too long")
(8,j)
(9,)
(10,h)
(11,1)
(12,for(h = 0; h < 1; h++)
(13,1)
(14,j < 1)
(15,-1)
(16,j)
(17,count)
(18,RET)
(19,for(j = 0; j < 1; j++)
(20,j)
(21,count = -1)
(22,h)
(23,20)
(24,j)
(25,h)
(26,SLEEP(count)
(27,count)
(28,h = 0)
(29,0)
(30,h)
(31,j++)
(32,1)
(33,j = 0)
(34,0)
(35,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^