-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,77,79
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(8,21,0)
(31,32,0)
(2,34,0)
(9,28,0)
(28,23,0)
(32,18,0)
(2,11,0)
(11,2,0)
(10,21,0)
(29,9,0)
(15,24,0)
(9,33,0)
(26,3,0)
(20,18,0)
(12,18,0)
(28,9,0)
(3,26,0)
(3,16,0)
(14,32,0)
(4,9,0)
(34,2,0)
(24,9,0)
(0,32,0)
(7,11,0)
(27,26,0)
(5,0,0)
(17,24,0)
(36,2,0)
(25,34,0)
(13,33,0)
(1,29,0)
(0,9,0)
(29,33,0)
(21,9,0)
(0,35,0)
(6,18,0)
(11,28,0)
(11,32,0)
(21,33,0)
(28,11,0)
(23,28,0)
(0,32,1)
(4,22,1)
(28,23,1)
(29,9,1)
(22,32,1)
(27,24,1)
(32,14,1)
(11,2,1)
(3,26,1)
(8,24,1)
(30,22,1)
(11,32,1)
(8,3,1)
(14,31,1)
(19,30,1)
(1,21,1)
(21,9,1)
(17,9,1)
(7,4,1)
(2,34,1)
(30,29,1)
(0,5,1)
(29,1,1)
(24,15,1)
(5,30,1)
(26,27,1)
(34,25,1)
(10,8,1)
(9,28,1)
(21,10,1)
(19,0,1)
(28,11,1)
(0,9,1)
(15,17,1)
(25,36,1)
(24,9,1)
(36,7,1)
(27,24,2)
(2,22,2)
(7,22,2)
(11,32,2)
(4,22,2)
(15,22,2)
(28,23,2)
(28,11,2)
(24,22,2)
(26,24,2)
(36,22,2)
(11,2,2)
(0,9,2)
(21,9,2)
(0,32,2)
(0,30,2)
(5,30,2)
(24,9,2)
(17,22,2)
(29,9,2)
(3,26,2)
(1,22,2)
(3,24,2)
(28,22,2)
(8,22,2)
(11,22,2)
(29,22,2)
(2,34,2)
(25,22,2)
(10,22,2)
(21,22,2)
(9,28,2)
(9,22,2)
(34,22,2)
-----------------------------------
(0,free(data)
(1,data)
(2,100*sizeof(char)
(3,exit(-1)
(4,data)
(5,data)
(6,if(globalReturnsTrue()
(7,data)
(8,data)
(9,data = (char *)
(10,"A String")
(11,realloc(data, 100*sizeof(char)
(12,data)
(13,if (data == NULL)
(14,NULL)
(15,NULL)
(16,)
(17,data)
(18,)
(19,RET)
(20,if(globalReturnsTrue()
(21,strcpy(data, "A String")
(22,globalReturnsTrue()
(23,char *)
(24,data == NULL)
(25,char)
(26,-1)
(27,1)
(28,(char *)
(29,printLine(data)
(30,globalReturnsTrue()
(31,data)
(32,data = NULL)
(33,)
(34,sizeof(char)
(35,)
(36,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^