-----label-----
0
-----code-----
static unsigned int fanout_demux_rollover(struct packet_fanout *f,
					  struct sk_buff *skb,
					  unsigned int idx, bool try_self,
					  unsigned int num)
{
	struct packet_sock *po, *po_next;
	unsigned int i, j, room = ROOM_NONE;

	po = pkt_sk(f->arr[idx]);

	if (try_self) {
		room = packet_rcv_has_room(po, skb);
		if (room == ROOM_NORMAL ||
		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))
			return idx;
	}

	i = j = min_t(int, po->rollover->sock, num - 1);
	do {
		po_next = pkt_sk(f->arr[i]);
		if (po_next != po && !po_next->pressure &&
		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL) {
			if (i != j)
				po->rollover->sock = i;
			atomic_long_inc(&po->rollover->num);
			if (room == ROOM_LOW)
				atomic_long_inc(&po->rollover->num_huge);
			return i;
		}

		if (++i == num)
			i = 0;
	} while (i != j);

	atomic_long_inc(&po->rollover->num_failed);
	return idx;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
27,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
30,31
31,32
31,33
31,34
32,33
34,35
34,36
37,38
37,39
40,41
41,42
41,43
41,44
41,45
43,44
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
64,65
66,67
66,68
67,68
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
74,77
75,76
77,78
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
96,98
96,99
97,98
99,100
101,102
103,104
104,105
106,107
107,108
107,109
108,109
108,110
108,111
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
116,118
117,118
117,119
118,119
121,122
123,124
123,125
124,125
124,126
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
136,137
136,138
137,138
137,139
137,140
138,139
140,141
142,143
144,145
146,147
146,148
146,149
146,150
147,148
147,149
148,149
148,150
149,150
151,152
153,154
154,155
154,156
155,156
155,157
156,157
156,158
157,158
161,162
163,164
164,165
164,166
165,166
167,168
168,169
168,170
169,170
169,171
170,171
174,175
174,176
175,176
175,177
176,177
178,179
180,181
181,182
181,183
182,183
184,185
185,186
185,187
186,187
186,188
187,188
191,192
192,193
194,195
194,196
195,196
195,197
196,197
197,198
199,200
201,202
202,203
202,204
203,204
206,207
206,208
207,208
209,210
211,212
212,213
212,214
213,214
215,216
216,217
216,218
217,218
217,219
218,219
222,223
223,224
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,22,24,26,28,33,35,36,38,39,42,44,46,48,51,55,58,62,63,65,68,73,76,78,80,85,87,92,94,98,100,102,105,112,115,119,120,122,128,130,134,135,139,141,143,145,150,152,158,159,160,162,166,171,172,173,177,179,183,188,189,190,193,198,200,204,205,208,210,214,219,220,221,224
-----computeFrom-----
53,54
53,55
71,72
71,73
82,83
82,84
83,84
83,85
89,90
89,91
90,91
90,92
110,111
110,112
124,125
124,126
125,126
125,127
126,127
126,128
136,137
136,138
148,149
148,150
154,155
154,156
175,176
175,177
195,196
195,197
202,203
202,204
206,207
206,208
-----guardedBy-----
130,188
150,162
198,204
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ProblemStatement;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static unsigned int fanout_demux_rollover(struct packet_fanout *f,					  struct sk_buff *skb,					  unsigned int idx, bool try_self,					  unsigned int num){	struct packet_sock *po, *po_next;	unsigned int i, j, room = ROOM_NONE;	po = pkt_sk(f->arr[idx]);	if (try_self) {		room = packet_rcv_has_room(po, skb);		if (room == ROOM_NORMAL ||		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))			return idx;	}	i = j = min_t(int, po->rollover->sock, num - 1);	do {		po_next = pkt_sk(f->arr[i]);		if (po_next != po && !po_next->pressure &&		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL) {			if (i != j)				po->rollover->sock = i;			atomic_long_inc(&po->rollover->num);			if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);			return i;		}		if (++i == num)			i = 0;	} while (i != j);	atomic_long_inc(&po->rollover->num_failed);	return idx;}
static unsigned int
fanout_demux_rollover(struct packet_fanout *f,					  struct sk_buff *skb,					  unsigned int idx, bool try_self,					  unsigned int num)
fanout_demux_rollover
struct packet_fanout *f
struct packet_fanout
packet_fanout
*f
*
f
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
unsigned int idx
unsigned int
idx
idx
bool try_self
bool
try_self
try_self
unsigned int num
unsigned int
num
num
{	struct packet_sock *po, *po_next;	unsigned int i, j, room = ROOM_NONE;	po = pkt_sk(f->arr[idx]);	if (try_self) {		room = packet_rcv_has_room(po, skb);		if (room == ROOM_NORMAL ||		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))			return idx;	}	i = j = min_t(int, po->rollover->sock, num - 1);	do {		po_next = pkt_sk(f->arr[i]);		if (po_next != po && !po_next->pressure &&		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL) {			if (i != j)				po->rollover->sock = i;			atomic_long_inc(&po->rollover->num);			if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);			return i;		}		if (++i == num)			i = 0;	} while (i != j);	atomic_long_inc(&po->rollover->num_failed);	return idx;}
struct packet_sock *po, *po_next;
struct packet_sock *po, *po_next;
struct packet_sock
packet_sock
*po
*
po
*po_next
*
po_next
unsigned int i, j, room = ROOM_NONE;
unsigned int i, j, room = ROOM_NONE;
unsigned int
i
i
j
j
room = ROOM_NONE
room
= ROOM_NONE
ROOM_NONE
ROOM_NONE
po = pkt_sk(f->arr[idx]);
po = pkt_sk(f->arr[idx])
po
po
pkt_sk(f->arr[idx])
pkt_sk
pkt_sk
f->arr[idx]
f->arr
f
f
arr
idx
idx
if (try_self) {		room = packet_rcv_has_room(po, skb);		if (room == ROOM_NORMAL ||		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))			return idx;	}
try_self
try_self
{		room = packet_rcv_has_room(po, skb);		if (room == ROOM_NORMAL ||		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))			return idx;	}
room = packet_rcv_has_room(po, skb);
room = packet_rcv_has_room(po, skb)
room
room
packet_rcv_has_room(po, skb)
packet_rcv_has_room
packet_rcv_has_room
po
po
skb
skb
if (room == ROOM_NORMAL ||		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)))			return idx;
room == ROOM_NORMAL ||		    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb))
room == ROOM_NORMAL
room
room
ROOM_NORMAL
ROOM_NORMAL
(room == ROOM_LOW && !fanout_flow_is_huge(po, skb))
room == ROOM_LOW && !fanout_flow_is_huge(po, skb)
room == ROOM_LOW
room
room
ROOM_LOW
ROOM_LOW
!fanout_flow_is_huge(po, skb)
fanout_flow_is_huge(po, skb)
fanout_flow_is_huge
fanout_flow_is_huge
po
po
skb
skb
return idx;
idx
idx
i = j = min_t(int, po->rollover->sock, num - 1);
do {		po_next = pkt_sk(f->arr[i]);		if (po_next != po && !po_next->pressure &&		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL) {			if (i != j)				po->rollover->sock = i;			atomic_long_inc(&po->rollover->num);			if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);			return i;		}		if (++i == num)			i = 0;	} while (i != j);
{		po_next = pkt_sk(f->arr[i]);		if (po_next != po && !po_next->pressure &&		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL) {			if (i != j)				po->rollover->sock = i;			atomic_long_inc(&po->rollover->num);			if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);			return i;		}		if (++i == num)			i = 0;	}
po_next = pkt_sk(f->arr[i]);
po_next = pkt_sk(f->arr[i])
po_next
po_next
pkt_sk(f->arr[i])
pkt_sk
pkt_sk
f->arr[i]
f->arr
f
f
arr
i
i
if (po_next != po && !po_next->pressure &&		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL) {			if (i != j)				po->rollover->sock = i;			atomic_long_inc(&po->rollover->num);			if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);			return i;		}
po_next != po && !po_next->pressure &&		    packet_rcv_has_room(po_next, skb) == ROOM_NORMAL
po_next != po && !po_next->pressure
po_next != po
po_next
po_next
po
po
!po_next->pressure
po_next->pressure
po_next
po_next
pressure
packet_rcv_has_room(po_next, skb) == ROOM_NORMAL
packet_rcv_has_room(po_next, skb)
packet_rcv_has_room
packet_rcv_has_room
po_next
po_next
skb
skb
ROOM_NORMAL
ROOM_NORMAL
{			if (i != j)				po->rollover->sock = i;			atomic_long_inc(&po->rollover->num);			if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);			return i;		}
if (i != j)				po->rollover->sock = i;
i != j
i
i
j
j
po->rollover->sock = i;
po->rollover->sock = i
po->rollover->sock
po->rollover
po
po
rollover
sock
i
i
atomic_long_inc(&po->rollover->num);
atomic_long_inc(&po->rollover->num)
atomic_long_inc
atomic_long_inc
&po->rollover->num
po->rollover->num
po->rollover
po
po
rollover
num
if (room == ROOM_LOW)				atomic_long_inc(&po->rollover->num_huge);
room == ROOM_LOW
room
room
ROOM_LOW
ROOM_LOW
atomic_long_inc(&po->rollover->num_huge);
atomic_long_inc(&po->rollover->num_huge)
atomic_long_inc
atomic_long_inc
&po->rollover->num_huge
po->rollover->num_huge
po->rollover
po
po
rollover
num_huge
return i;
i
i
if (++i == num)			i = 0;
++i == num
++i
i
i
num
num
i = 0;
i = 0
i
i
0
i != j
i
i
j
j
atomic_long_inc(&po->rollover->num_failed);
atomic_long_inc(&po->rollover->num_failed)
atomic_long_inc
atomic_long_inc
&po->rollover->num_failed
po->rollover->num_failed
po->rollover
po
po
rollover
num_failed
return idx;
idx
idx
-----joern-----
(100,3,0)
(35,50,0)
(52,73,0)
(96,31,0)
(49,134,0)
(59,52,0)
(85,62,0)
(123,81,0)
(46,2,0)
(36,73,0)
(69,105,0)
(59,75,0)
(70,105,0)
(60,132,0)
(135,75,0)
(48,46,0)
(59,81,0)
(62,100,0)
(124,123,0)
(33,37,0)
(24,2,0)
(16,101,0)
(68,2,0)
(114,60,0)
(54,64,0)
(29,58,0)
(33,110,0)
(55,31,0)
(118,3,0)
(34,24,0)
(45,72,0)
(79,62,0)
(55,28,0)
(119,58,0)
(50,101,0)
(49,132,0)
(122,132,0)
(63,100,0)
(108,24,0)
(111,60,0)
(27,29,0)
(112,97,0)
(52,81,0)
(87,70,0)
(21,7,0)
(18,2,0)
(49,68,0)
(19,75,0)
(91,112,0)
(6,75,0)
(129,75,0)
(131,96,0)
(130,30,0)
(96,71,0)
(105,70,0)
(26,5,0)
(1,21,0)
(66,39,0)
(31,55,0)
(73,10,0)
(41,110,0)
(58,29,0)
(53,105,0)
(110,33,0)
(95,100,0)
(24,108,0)
(9,3,0)
(10,73,0)
(61,30,0)
(30,61,0)
(38,128,0)
(31,113,0)
(99,15,0)
(20,108,0)
(50,35,0)
(30,37,0)
(81,52,0)
(71,96,0)
(15,81,0)
(70,20,0)
(39,66,0)
(28,51,0)
(127,76,0)
(84,122,0)
(60,3,0)
(12,15,0)
(11,134,0)
(64,125,0)
(109,10,0)
(94,76,0)
(37,5,0)
(94,17,0)
(72,45,0)
(18,7,0)
(71,20,0)
(93,6,0)
(120,3,0)
(117,28,0)
(110,61,0)
(35,45,0)
(10,128,0)
(44,125,0)
(73,64,0)
(78,18,0)
(28,81,0)
(73,52,0)
(97,39,0)
(51,74,0)
(114,6,0)
(57,59,0)
(115,129,0)
(20,71,0)
(65,97,0)
(58,129,0)
(129,81,0)
(76,46,0)
(28,75,0)
(41,21,0)
(42,46,0)
(32,31,0)
(21,2,0)
(77,3,0)
(37,18,0)
(40,30,0)
(8,3,0)
(133,18,0)
(86,37,0)
(64,73,0)
(68,49,0)
(107,10,0)
(92,51,0)
(89,96,0)
(123,75,0)
(134,49,0)
(13,38,0)
(121,101,0)
(6,101,0)
(88,72,0)
(51,28,0)
(108,20,0)
(15,52,0)
(112,2,0)
(17,94,0)
(114,122,0)
(39,97,0)
(103,29,0)
(83,59,0)
(125,2,0)
(47,49,0)
(90,134,0)
(2,68,0)
(105,31,0)
(97,112,0)
(82,51,0)
(61,110,0)
(25,33,0)
(56,113,0)
(21,41,0)
(22,113,0)
(38,123,0)
(81,3,0)
(2,3,0)
(0,112,0)
(18,37,0)
(17,3,0)
(104,2,0)
(105,7,0)
(6,81,0)
(126,125,0)
(43,52,0)
(72,2,0)
(110,41,0)
(80,81,0)
(45,35,0)
(76,94,0)
(46,76,0)
(15,75,0)
(29,2,0)
(24,31,0)
(102,24,0)
(28,55,0)
(125,64,0)
(23,21,0)
(62,37,0)
(67,45,0)
(116,3,0)
(106,72,0)
(123,38,0)
(134,74,0)
(20,70,0)
(14,3,0)
(98,33,0)
(10,109,1)
(125,2,1)
(123,124,1)
(54,125,1)
(84,61,1)
(59,75,1)
(86,4,1)
(21,2,1)
(88,129,1)
(79,85,1)
(129,81,1)
(34,102,1)
(18,78,1)
(45,72,1)
(51,74,1)
(105,31,1)
(100,63,1)
(63,95,1)
(33,98,1)
(108,24,1)
(68,49,1)
(94,76,1)
(35,45,1)
(28,81,1)
(32,15,1)
(41,21,1)
(76,127,1)
(112,2,1)
(53,71,1)
(12,38,1)
(122,84,1)
(130,37,1)
(83,108,1)
(19,135,1)
(28,51,1)
(49,47,1)
(20,71,1)
(125,126,1)
(64,54,1)
(99,12,1)
(80,4,1)
(23,33,1)
(129,75,1)
(90,11,1)
(87,105,1)
(30,40,1)
(36,43,1)
(67,72,1)
(78,133,1)
(46,2,1)
(59,57,1)
(127,46,1)
(15,52,1)
(24,31,1)
(70,105,1)
(123,75,1)
(55,28,1)
(29,2,1)
(58,29,1)
(33,37,1)
(119,29,1)
(48,42,1)
(66,39,1)
(80,61,1)
(44,36,1)
(108,20,1)
(58,119,1)
(10,128,1)
(40,130,1)
(50,35,1)
(21,7,1)
(62,79,1)
(47,134,1)
(18,7,1)
(92,32,1)
(45,67,1)
(12,75,1)
(96,31,1)
(18,2,1)
(61,30,1)
(65,112,1)
(24,2,1)
(57,83,1)
(49,134,1)
(93,62,1)
(6,81,1)
(114,60,1)
(51,82,1)
(15,99,1)
(96,131,1)
(134,74,1)
(109,107,1)
(28,117,1)
(2,68,1)
(123,81,1)
(37,18,1)
(6,75,1)
(73,64,1)
(32,81,1)
(15,81,1)
(102,31,1)
(52,73,1)
(38,128,1)
(73,10,1)
(0,62,1)
(85,50,1)
(30,37,1)
(114,122,1)
(106,88,1)
(82,92,1)
(60,111,1)
(104,100,1)
(110,33,1)
(6,93,1)
(110,41,1)
(60,132,1)
(15,75,1)
(89,24,1)
(76,46,1)
(131,89,1)
(17,94,1)
(97,112,1)
(25,30,1)
(11,104,1)
(107,64,1)
(103,59,1)
(81,52,1)
(42,15,1)
(70,87,1)
(72,2,1)
(129,115,1)
(1,23,1)
(111,17,1)
(20,70,1)
(59,52,1)
(38,123,1)
(4,2,1)
(117,51,1)
(38,13,1)
(59,81,1)
(122,132,1)
(98,25,1)
(124,108,1)
(13,123,1)
(105,7,1)
(69,53,1)
(43,80,1)
(91,0,1)
(29,27,1)
(134,90,1)
(114,6,1)
(97,65,1)
(71,96,1)
(62,37,1)
(135,38,1)
(88,59,1)
(133,86,1)
(27,103,1)
(126,44,1)
(105,69,1)
(61,110,1)
(72,106,1)
(93,66,1)
(39,97,1)
(112,91,1)
(64,125,1)
(31,55,1)
(115,58,1)
(24,34,1)
(28,75,1)
(21,1,1)
(75,19,1)
(49,132,1)
(46,48,1)
(62,100,1)
(134,74,2)
(36,4,2)
(39,62,2)
(110,30,2)
(127,15,2)
(92,15,2)
(13,108,2)
(73,10,2)
(55,15,2)
(41,33,2)
(122,132,2)
(35,108,2)
(30,4,2)
(33,37,2)
(18,4,2)
(41,21,2)
(70,105,2)
(52,61,2)
(44,61,2)
(61,110,2)
(80,4,2)
(57,108,2)
(61,30,2)
(24,15,2)
(19,38,2)
(114,122,2)
(28,61,2)
(129,75,2)
(110,41,2)
(123,81,2)
(114,60,2)
(0,62,2)
(109,61,2)
(21,7,2)
(88,108,2)
(94,76,2)
(17,94,2)
(80,61,2)
(52,73,2)
(111,15,2)
(102,15,2)
(15,108,2)
(32,4,2)
(10,128,2)
(65,62,2)
(59,81,2)
(61,4,2)
(92,61,2)
(82,4,2)
(107,4,2)
(25,30,2)
(40,4,2)
(93,108,2)
(32,61,2)
(72,108,2)
(49,132,2)
(62,100,2)
(29,59,2)
(122,61,2)
(29,2,2)
(55,4,2)
(6,108,2)
(76,46,2)
(49,134,2)
(131,24,2)
(2,68,2)
(23,33,2)
(15,81,2)
(55,61,2)
(10,4,2)
(117,15,2)
(84,61,2)
(75,38,2)
(44,4,2)
(62,108,2)
(12,108,2)
(125,4,2)
(53,71,2)
(97,62,2)
(83,108,2)
(81,4,2)
(92,4,2)
(96,31,2)
(18,7,2)
(107,61,2)
(39,97,2)
(59,75,2)
(50,108,2)
(108,20,2)
(34,15,2)
(98,30,2)
(87,71,2)
(81,61,2)
(31,55,2)
(82,15,2)
(109,4,2)
(31,15,2)
(76,15,2)
(91,62,2)
(108,15,2)
(6,75,2)
(99,108,2)
(119,59,2)
(37,18,2)
(51,74,2)
(135,38,2)
(102,4,2)
(59,52,2)
(48,15,2)
(31,61,2)
(36,61,2)
(114,6,2)
(117,61,2)
(124,108,2)
(108,24,2)
(1,33,2)
(32,15,2)
(43,61,2)
(64,125,2)
(37,4,2)
(31,4,2)
(38,123,2)
(125,2,2)
(117,4,2)
(20,70,2)
(27,59,2)
(130,4,2)
(20,24,2)
(46,2,2)
(102,61,2)
(58,29,2)
(34,61,2)
(73,64,2)
(126,61,2)
(62,37,2)
(96,24,2)
(38,128,2)
(78,4,2)
(89,24,2)
(24,61,2)
(58,59,2)
(43,4,2)
(30,37,2)
(110,33,2)
(28,15,2)
(112,62,2)
(24,4,2)
(105,71,2)
(6,81,2)
(73,4,2)
(33,30,2)
(50,35,2)
(67,108,2)
(129,81,2)
(79,108,2)
(105,7,2)
(54,61,2)
(24,2,2)
(72,2,2)
(82,61,2)
(38,108,2)
(21,33,2)
(15,52,2)
(64,4,2)
(59,108,2)
(21,2,2)
(10,61,2)
(17,15,2)
(133,4,2)
(52,4,2)
(66,62,2)
(103,59,2)
(45,108,2)
(97,112,2)
(35,45,2)
(34,4,2)
(112,2,2)
(68,49,2)
(108,4,2)
(86,4,2)
(85,108,2)
(51,61,2)
(46,15,2)
(125,61,2)
(18,2,2)
(42,15,2)
(129,59,2)
(71,96,2)
(71,24,2)
(123,108,2)
(94,15,2)
(28,4,2)
(60,15,2)
(24,31,2)
(73,61,2)
(66,39,2)
(51,15,2)
(28,51,2)
(70,71,2)
(105,31,2)
(108,61,2)
(64,61,2)
(60,132,2)
(55,28,2)
(20,71,2)
(69,71,2)
(123,75,2)
(45,72,2)
(115,59,2)
(106,108,2)
(81,52,2)
(126,4,2)
(54,4,2)
(15,75,2)
(51,4,2)
(28,81,2)
(28,75,2)
-----------------------------------
(0,po)
(1,skb)
(2,po = pkt_sk(f->arr[idx])
(3,)
(4,try_self)
(5,)
(6,return i;)
(7,struct sk_buff *skb)
(8,j)
(9,po)
(10,num - 1)
(11,f)
(12,i)
(13,num)
(14,room)
(15,i != j)
(16,if (i != j)
(17,atomic_long_inc(&po->rollover->num_failed)
(18,packet_rcv_has_room(po, skb)
(19,0)
(20,!po_next->pressure &&\n\\n\\t\\t    packet_rcv_has_room(po_next, skb)
(21,fanout_flow_is_huge(po, skb)
(22,if (po_next != po && !po_next->pressure &&\n\\n\\t\\t    packet_rcv_has_room(po_next, skb)
(23,po)
(24,po_next != po)
(25,room)
(26,if (room == ROOM_NORMAL ||\n\\n\\t\\t    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)
(27,rollover)
(28,f->arr[i])
(29,po->rollover)
(30,room == ROOM_NORMAL)
(31,po_next = pkt_sk(f->arr[i])
(32,po_next)
(33,room == ROOM_LOW)
(34,po)
(35,&po->rollover->num)
(36,int)
(37,room = packet_rcv_has_room(po, skb)
(38,++i == num)
(39,&po->rollover->num_huge)
(40,ROOM_NORMAL)
(41,!fanout_flow_is_huge(po, skb)
(42,po)
(43,j)
(44,po)
(45,po->rollover->num)
(46,po->rollover)
(47,idx)
(48,rollover)
(49,f->arr[idx])
(50,atomic_long_inc(&po->rollover->num)
(51,f->arr)
(52,j = min_t(int, po->rollover->sock, num - 1)
(53,po_next)
(54,sock)
(55,pkt_sk(f->arr[i])
(56,if (++i == num)
(57,j)
(58,po->rollover->sock)
(59,i != j)
(60,return idx;)
(61,room == ROOM_NORMAL ||\n\\n\\t\\t    (room == ROOM_LOW && !fanout_flow_is_huge(po, skb)
(62,room == ROOM_LOW)
(63,ROOM_NONE)
(64,po->rollover->sock)
(65,num_huge)
(66,atomic_long_inc(&po->rollover->num_huge)
(67,num)
(68,pkt_sk(f->arr[idx])
(69,skb)
(70,packet_rcv_has_room(po_next, skb)
(71,!po_next->pressure)
(72,po->rollover)
(73,min_t(int, po->rollover->sock, num - 1)
(74,struct packet_fanout *f)
(75,i = 0)
(76,po->rollover->num_failed)
(77,i)
(78,skb)
(79,ROOM_LOW)
(80,i)
(81,i = j = min_t(int, po->rollover->sock, num - 1)
(82,arr)
(83,i)
(84,idx)
(85,room)
(86,room)
(87,ROOM_NORMAL)
(88,po)
(89,po_next)
(90,arr)
(91,rollover)
(92,f)
(93,i)
(94,&po->rollover->num_failed)
(95,room)
(96,po_next->pressure)
(97,po->rollover->num_huge)
(98,ROOM_LOW)
(99,j)
(100,room = ROOM_NONE)
(101,)
(102,po_next)
(103,po)
(104,po)
(105,packet_rcv_has_room(po_next, skb)
(106,rollover)
(107,num)
(108,po_next != po && !po_next->pressure &&\n\\n\\t\\t    packet_rcv_has_room(po_next, skb)
(109,1)
(110,room == ROOM_LOW && !fanout_flow_is_huge(po, skb)
(111,idx)
(112,po->rollover)
(113,)
(114,RET)
(115,i)
(116,if (try_self)
(117,i)
(118,po_next)
(119,sock)
(120,do)
(121,if (room == ROOM_LOW)
(122,return idx;)
(123,++i)
(124,i)
(125,po->rollover)
(126,rollover)
(127,num_failed)
(128,unsigned int num)
(129,po->rollover->sock = i)
(130,room)
(131,pressure)
(132,unsigned int idx)
(133,po)
(134,f->arr)
(135,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^