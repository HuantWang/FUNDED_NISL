-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* FIX: Use a relatively small number for memory allocation */
    data = 20;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,9,11,15,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = 20;
data = 20
data
data
20
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(9,27,0)
(25,33,0)
(34,23,0)
(41,15,0)
(20,42,0)
(27,8,0)
(26,8,0)
(33,25,0)
(1,27,0)
(11,31,0)
(15,30,0)
(21,33,0)
(2,27,0)
(33,23,0)
(36,5,0)
(29,8,0)
(40,6,0)
(10,29,0)
(39,2,0)
(43,17,0)
(0,17,0)
(12,40,0)
(35,21,0)
(42,8,0)
(24,33,0)
(31,37,0)
(33,21,0)
(25,1,0)
(9,8,0)
(17,37,0)
(18,36,0)
(14,23,0)
(38,12,0)
(4,29,0)
(28,37,0)
(23,37,0)
(1,16,0)
(13,9,0)
(1,25,0)
(7,2,0)
(30,15,0)
(16,1,0)
(32,31,0)
(27,1,0)
(19,30,0)
(29,27,0)
(3,27,0)
(42,27,0)
(15,23,0)
(40,12,0)
(4,10,1)
(2,27,1)
(40,12,1)
(0,43,1)
(20,9,1)
(24,3,1)
(2,39,1)
(27,1,1)
(35,24,1)
(33,21,1)
(1,25,1)
(12,38,1)
(29,27,1)
(29,4,1)
(13,29,1)
(21,35,1)
(42,20,1)
(10,2,1)
(3,15,1)
(23,34,1)
(18,15,1)
(38,2,1)
(9,27,1)
(41,23,1)
(7,27,1)
(15,30,1)
(15,23,1)
(36,18,1)
(25,33,1)
(39,7,1)
(10,40,1)
(9,13,1)
(17,0,1)
(22,42,1)
(19,41,1)
(30,19,1)
(1,16,1)
(33,23,1)
(42,27,1)
(34,14,1)
(22,36,1)
(14,17,1)
(15,23,2)
(12,2,2)
(25,15,2)
(2,15,2)
(24,15,2)
(33,23,2)
(35,15,2)
(15,30,2)
(29,15,2)
(1,16,2)
(29,27,2)
(40,12,2)
(2,27,2)
(33,21,2)
(20,15,2)
(18,15,2)
(4,15,2)
(13,15,2)
(21,15,2)
(39,15,2)
(3,15,2)
(42,15,2)
(38,2,2)
(10,15,2)
(33,15,2)
(7,15,2)
(40,2,2)
(27,1,2)
(25,33,2)
(42,27,2)
(36,15,2)
(1,15,2)
(9,15,2)
(9,27,2)
(27,15,2)
(1,25,2)
-----------------------------------
(0,0)
(1,(wchar_t *)
(2,myString == NULL)
(3,myString)
(4,HELLO_STRING)
(5,)
(6,)
(7,myString)
(8,)
(9,printWLine(myString)
(10,myString)
(11,if (data > wcslen(HELLO_STRING)
(12,-1)
(13,myString)
(14,data)
(15,data > wcslen(HELLO_STRING)
(16,wchar_t *)
(17,data = 0)
(18,"Input is less than the length of the source string")
(19,HELLO_STRING)
(20,myString)
(21,sizeof(wchar_t)
(22,RET)
(23,data = 20)
(24,data)
(25,malloc(data*sizeof(wchar_t)
(26,if (myString == NULL)
(27,myString = (wchar_t *)
(28,data)
(29,wcscpy(myString, HELLO_STRING)
(30,wcslen(HELLO_STRING)
(31,)
(32,myString)
(33,data*sizeof(wchar_t)
(34,20)
(35,wchar_t)
(36,printLine("Input is less than the length of the source string")
(37,)
(38,1)
(39,NULL)
(40,exit(-1)
(41,data)
(42,free(myString)
(43,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^