-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    for(k = 0; k < 1; k++)
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,44,45,47,51,54,56,60,62,67,68,71,72,75,80,82
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
49,50
49,51
65,66
65,67
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int i,k;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G()
goodB2G
{    int i,k;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
int i,k;
int i,k;
int
i
i
k
k
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(33,14,0)
(16,40,0)
(29,5,0)
(14,5,0)
(31,4,0)
(25,13,0)
(13,38,0)
(1,40,0)
(39,24,0)
(36,38,0)
(26,27,0)
(4,28,0)
(24,40,0)
(20,31,0)
(7,19,0)
(9,31,0)
(27,4,0)
(18,5,0)
(17,38,0)
(6,13,0)
(27,19,0)
(34,40,0)
(39,35,0)
(15,38,0)
(22,24,0)
(32,5,0)
(2,32,0)
(19,20,0)
(30,31,0)
(12,36,0)
(0,20,0)
(8,40,0)
(37,39,0)
(11,4,0)
(20,19,0)
(10,40,0)
(19,4,0)
(23,24,0)
(39,19,0)
(21,14,0)
(20,31,1)
(30,9,1)
(26,19,1)
(39,37,1)
(5,18,1)
(19,20,1)
(33,21,1)
(39,19,1)
(12,39,1)
(14,33,1)
(2,27,1)
(39,24,1)
(32,2,1)
(36,38,1)
(24,22,1)
(27,19,1)
(13,6,1)
(15,14,1)
(21,32,1)
(32,5,1)
(9,14,1)
(6,25,1)
(27,26,1)
(20,0,1)
(36,12,1)
(31,30,1)
(3,13,1)
(29,24,1)
(13,38,1)
(25,36,1)
(18,29,1)
(0,7,1)
(14,5,1)
(38,17,1)
(17,15,1)
(25,38,1)
(37,13,1)
(21,5,1)
(7,31,1)
(22,23,1)
(36,38,2)
(13,38,2)
(13,13,2)
(30,14,2)
(0,14,2)
(33,14,2)
(20,31,2)
(36,13,2)
(27,14,2)
(19,14,2)
(39,13,2)
(32,14,2)
(14,5,2)
(2,14,2)
(39,24,2)
(21,14,2)
(7,14,2)
(14,14,2)
(9,14,2)
(39,19,2)
(19,20,2)
(37,13,2)
(31,14,2)
(27,19,2)
(6,13,2)
(25,13,2)
(26,14,2)
(20,14,2)
(12,13,2)
(32,5,2)
-----------------------------------
(0,myString)
(1,data)
(2,i)
(3,RET)
(4,)
(5,i = 0)
(6,1)
(7,data)
(8,for(i = 0; i < 1; i++)
(9,myString)
(10,for(k = 0; k < 1; k++)
(11,myString)
(12,k)
(13,k < 1)
(14,i < 1)
(15,k)
(16,i)
(17,0)
(18,0)
(19,data = strdup(myString)
(20,strdup(myString)
(21,i)
(22,NULL)
(23,data)
(24,data = NULL)
(25,k)
(26,data)
(27,printLine(data)
(28,)
(29,i)
(30,"myString")
(31,myString[] = "myString")
(32,i++)
(33,1)
(34,k)
(35,)
(36,k++)
(37,data)
(38,k = 0)
(39,free(data)
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^