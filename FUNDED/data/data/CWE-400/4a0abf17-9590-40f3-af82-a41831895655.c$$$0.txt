-----label-----
1
-----code-----
int forkpty(int *m, char *name, const struct termios *tio, const struct winsize *ws)
{
	int s;
	pid_t pid;

	if (openpty(m, &s, name, tio, ws) < 0) return -1;
	pid = fork();
	if (!pid) {
		close(*m);
		setsid();
		ioctl(s, TIOCSCTTY, (char *)0);
		dup2(s, 0);
		dup2(s, 1);
		dup2(s, 2);
		if (s>2) close(s);
		return 0;
	}
	close(s);
	if (pid < 0) close(*m);
	return pid;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
39,41
40,41
40,42
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
46,47
47,48
49,50
51,52
53,54
56,57
57,58
59,60
60,61
60,62
61,62
63,64
64,65
66,67
66,68
67,68
68,69
70,71
70,72
70,73
70,74
70,75
70,76
70,77
70,78
71,72
72,73
72,74
73,74
75,76
76,77
78,79
79,80
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
90,92
91,92
91,93
93,94
96,97
97,98
97,99
97,100
98,99
100,101
103,104
104,105
104,106
104,107
105,106
107,108
110,111
111,112
111,113
111,114
112,113
114,115
117,118
117,119
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
128,129
130,131
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
141,142
142,143
142,144
143,144
145,146
146,147
148,149
149,150
-----nextToken-----
2,4,6,8,9,11,13,14,17,19,20,23,25,26,30,32,36,38,43,45,48,50,52,54,55,58,62,65,69,74,77,81,85,87,89,92,94,95,99,101,102,106,108,109,113,115,116,120,121,125,127,129,133,135,139,140,144,147,150
-----computeFrom-----
40,41
40,42
60,61
60,62
118,119
118,120
137,138
137,139
-----guardedBy-----
120,127
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int forkpty(int *m, char *name, const struct termios *tio, const struct winsize *ws){	int s;	pid_t pid;	if (openpty(m, &s, name, tio, ws) < 0) return -1;	pid = fork();	if (!pid) {		close(*m);		setsid();		ioctl(s, TIOCSCTTY, (char *)0);		dup2(s, 0);		dup2(s, 1);		dup2(s, 2);		if (s>2) close(s);		return 0;	}	close(s);	if (pid < 0) close(*m);	return pid;}
int
forkpty(int *m, char *name, const struct termios *tio, const struct winsize *ws)
forkpty
int *m
int
*m
*
m
char *name
char
*name
*
name
const struct termios *tio
const struct termios
termios
*tio
*
tio
const struct winsize *ws
const struct winsize
winsize
*ws
*
ws
{	int s;	pid_t pid;	if (openpty(m, &s, name, tio, ws) < 0) return -1;	pid = fork();	if (!pid) {		close(*m);		setsid();		ioctl(s, TIOCSCTTY, (char *)0);		dup2(s, 0);		dup2(s, 1);		dup2(s, 2);		if (s>2) close(s);		return 0;	}	close(s);	if (pid < 0) close(*m);	return pid;}
int s;
int s;
int
s
s
pid_t pid;
pid_t pid;
pid_t
pid_t
pid
pid
if (openpty(m, &s, name, tio, ws) < 0) return -1;
openpty(m, &s, name, tio, ws) < 0
openpty(m, &s, name, tio, ws)
openpty
openpty
m
m
&s
s
s
name
name
tio
tio
ws
ws
0
return -1;
-1
1
pid = fork();
pid = fork()
pid
pid
fork()
fork
fork
if (!pid) {		close(*m);		setsid();		ioctl(s, TIOCSCTTY, (char *)0);		dup2(s, 0);		dup2(s, 1);		dup2(s, 2);		if (s>2) close(s);		return 0;	}
!pid
pid
pid
{		close(*m);		setsid();		ioctl(s, TIOCSCTTY, (char *)0);		dup2(s, 0);		dup2(s, 1);		dup2(s, 2);		if (s>2) close(s);		return 0;	}
close(*m);
close(*m)
close
close
*m
m
m
setsid();
setsid()
setsid
setsid
ioctl(s, TIOCSCTTY, (char *)0);
ioctl(s, TIOCSCTTY, (char *)0)
ioctl
ioctl
s
s
TIOCSCTTY
TIOCSCTTY
(char *)0
char *
char
*
*
0
dup2(s, 0);
dup2(s, 0)
dup2
dup2
s
s
0
dup2(s, 1);
dup2(s, 1)
dup2
dup2
s
s
1
dup2(s, 2);
dup2(s, 2)
dup2
dup2
s
s
2
if (s>2) close(s);
s>2
s
s
2
close(s);
close(s)
close
close
s
s
return 0;
0
close(s);
close(s)
close
close
s
s
if (pid < 0) close(*m);
pid < 0
pid
pid
0
close(*m);
close(*m)
close
close
*m
m
m
return pid;
pid
pid
-----joern-----
(41,49,0)
(11,17,0)
(55,13,0)
(51,43,0)
(65,57,0)
(34,30,0)
(31,17,0)
(2,17,0)
(50,40,0)
(42,6,0)
(9,45,0)
(58,17,0)
(63,62,0)
(46,45,0)
(7,65,0)
(47,17,0)
(39,44,0)
(6,27,0)
(45,30,0)
(14,45,0)
(5,44,0)
(1,62,0)
(52,15,0)
(6,10,0)
(38,31,0)
(21,58,0)
(18,4,0)
(0,6,0)
(36,33,0)
(50,3,0)
(5,14,0)
(48,50,0)
(15,40,0)
(13,45,0)
(28,30,0)
(44,17,0)
(53,30,0)
(62,24,0)
(32,14,0)
(6,12,0)
(29,30,0)
(22,47,0)
(12,6,0)
(3,17,0)
(16,30,0)
(59,4,0)
(6,8,0)
(56,15,0)
(3,50,0)
(43,45,0)
(35,28,0)
(62,63,0)
(64,30,0)
(25,13,0)
(6,49,0)
(24,17,0)
(14,30,0)
(5,57,0)
(19,6,0)
(54,58,0)
(6,40,0)
(60,24,0)
(23,47,0)
(26,6,0)
(24,62,0)
(49,6,0)
(15,56,0)
(61,24,0)
(45,9,0)
(20,31,0)
(37,12,0)
(45,9,1)
(48,43,1)
(49,41,1)
(65,7,1)
(6,10,1)
(15,40,1)
(55,25,1)
(42,0,1)
(13,55,1)
(0,19,1)
(14,45,1)
(32,56,1)
(54,21,1)
(44,39,1)
(19,12,1)
(13,45,1)
(38,47,1)
(6,42,1)
(5,14,1)
(21,24,1)
(62,63,1)
(33,36,1)
(28,35,1)
(59,18,1)
(46,49,1)
(23,58,1)
(22,23,1)
(36,4,1)
(6,27,1)
(31,20,1)
(25,28,1)
(11,3,1)
(4,59,1)
(41,6,1)
(32,13,1)
(39,4,1)
(18,31,1)
(52,13,1)
(58,54,1)
(47,22,1)
(39,33,1)
(5,44,1)
(1,61,1)
(56,15,1)
(12,37,1)
(49,6,1)
(50,40,1)
(61,60,1)
(3,50,1)
(43,51,1)
(7,49,1)
(51,45,1)
(57,65,1)
(6,8,1)
(14,32,1)
(24,62,1)
(62,1,1)
(6,12,1)
(9,46,1)
(5,57,1)
(50,48,1)
(60,11,1)
(35,43,1)
(6,40,1)
(20,38,1)
(37,26,1)
(43,45,1)
(15,52,1)
(36,4,2)
(39,43,2)
(6,27,2)
(3,50,2)
(15,13,2)
(47,43,2)
(50,40,2)
(21,43,2)
(6,10,2)
(48,43,2)
(54,43,2)
(6,12,2)
(13,43,2)
(31,43,2)
(61,43,2)
(24,43,2)
(22,43,2)
(5,57,2)
(38,43,2)
(13,45,2)
(46,49,2)
(62,43,2)
(60,43,2)
(5,14,2)
(7,49,2)
(1,43,2)
(56,15,2)
(45,49,2)
(51,49,2)
(44,43,2)
(43,45,2)
(9,49,2)
(58,43,2)
(62,63,2)
(32,43,2)
(18,43,2)
(65,49,2)
(6,40,2)
(14,45,2)
(11,43,2)
(3,43,2)
(43,49,2)
(57,49,2)
(15,40,2)
(35,43,2)
(5,44,2)
(50,43,2)
(14,43,2)
(56,13,2)
(24,62,2)
(49,6,2)
(23,43,2)
(33,4,2)
(4,43,2)
(55,43,2)
(6,8,2)
(28,43,2)
(45,9,2)
(52,13,2)
(20,43,2)
(59,43,2)
(25,43,2)
-----------------------------------
(0,tio)
(1,0)
(2,if (s>2)
(3,close(*m)
(4,s>2)
(5,RET)
(6,openpty(m, &s, name, tio, ws)
(7,1)
(8,const struct termios *tio)
(9,fork()
(10,const struct winsize *ws)
(11,setsid()
(12,&s)
(13,pid < 0)
(14,return pid;)
(15,*m)
(16,if (openpty(m, &s, name, tio, ws)
(17,)
(18,s)
(19,name)
(20,2)
(21,s)
(22,1)
(23,s)
(24,ioctl(s, TIOCSCTTY, (char *)
(25,pid)
(26,m)
(27,char *name)
(28,close(s)
(29,if (pid < 0)
(30,)
(31,dup2(s, 2)
(32,pid)
(33,close(s)
(34,pid)
(35,s)
(36,s)
(37,s)
(38,s)
(39,0)
(40,int *m)
(41,0)
(42,ws)
(43,!pid)
(44,return 0;)
(45,pid = fork()
(46,pid)
(47,dup2(s, 1)
(48,m)
(49,openpty(m, &s, name, tio, ws)
(50,*m)
(51,pid)
(52,m)
(53,s)
(54,0)
(55,0)
(56,close(*m)
(57,return -1;)
(58,dup2(s, 0)
(59,2)
(60,s)
(61,TIOCSCTTY)
(62,(char *)
(63,char *)
(64,if (!pid)
(65,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^