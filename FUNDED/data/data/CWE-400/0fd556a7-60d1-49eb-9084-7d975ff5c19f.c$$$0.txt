-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
71,74
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,69,75,76,79,80,85,87,91,92,97,98
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
72,73
72,74
73,74
73,75
77,78
77,79
-----guardedBy-----
38,54
79,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(1,33,0)
(4,37,0)
(9,7,0)
(33,20,0)
(28,38,0)
(44,38,0)
(22,12,0)
(25,33,0)
(2,34,0)
(38,44,0)
(35,22,0)
(48,0,0)
(26,39,0)
(17,37,0)
(37,4,0)
(1,37,0)
(18,31,0)
(1,36,0)
(37,7,0)
(51,44,0)
(34,45,0)
(16,3,0)
(49,0,0)
(46,26,0)
(11,7,0)
(50,47,0)
(6,38,0)
(24,4,0)
(23,7,0)
(33,49,0)
(43,45,0)
(47,36,0)
(21,22,0)
(49,33,0)
(45,34,0)
(45,37,0)
(5,2,0)
(45,33,0)
(10,1,0)
(2,33,0)
(38,0,0)
(8,45,0)
(34,2,0)
(19,40,0)
(40,32,0)
(14,49,0)
(42,18,0)
(2,37,0)
(41,0,0)
(30,2,0)
(15,38,0)
(0,22,0)
(15,28,1)
(29,26,1)
(13,40,1)
(24,17,1)
(29,18,1)
(8,43,1)
(44,38,1)
(6,15,1)
(45,37,1)
(43,13,1)
(13,33,1)
(50,1,1)
(46,13,1)
(26,46,1)
(14,25,1)
(1,33,1)
(41,48,1)
(2,33,1)
(25,44,1)
(45,8,1)
(42,34,1)
(19,44,1)
(34,2,1)
(28,0,1)
(27,37,1)
(1,37,1)
(40,19,1)
(48,27,1)
(13,27,1)
(1,10,1)
(18,42,1)
(47,50,1)
(0,41,1)
(34,45,1)
(2,37,1)
(10,34,1)
(49,14,1)
(33,49,1)
(2,30,1)
(49,0,1)
(30,5,1)
(45,33,1)
(5,45,1)
(38,6,1)
(38,0,1)
(29,47,1)
(51,38,1)
(44,51,1)
(37,4,1)
(4,24,1)
(49,0,2)
(50,34,2)
(25,44,2)
(30,45,2)
(33,49,2)
(18,34,2)
(1,34,2)
(5,45,2)
(34,45,2)
(47,34,2)
(1,37,2)
(8,13,2)
(51,27,2)
(34,2,2)
(43,13,2)
(34,13,2)
(2,37,2)
(46,13,2)
(2,33,2)
(37,4,2)
(15,27,2)
(19,44,2)
(45,37,2)
(42,34,2)
(28,27,2)
(14,44,2)
(48,27,2)
(44,27,2)
(38,0,2)
(33,44,2)
(26,13,2)
(45,13,2)
(1,33,2)
(41,27,2)
(49,44,2)
(0,27,2)
(45,33,2)
(44,38,2)
(40,44,2)
(38,27,2)
(2,45,2)
(6,27,2)
(10,34,2)
-----------------------------------
(0,inputBuffer[CHAR_ARRAY_SIZE] = "")
(1,SLEEP(count)
(2,count <= 2000)
(3,)
(4,-1)
(5,count)
(6,stdin)
(7,)
(8,0)
(9,count)
(10,count)
(11,if(STATIC_CONST_FALSE)
(12,)
(13,STATIC_CONST_FALSE)
(14,inputBuffer)
(15,CHAR_ARRAY_SIZE)
(16,if (count > 0 && count <= 2000)
(17,count)
(18,printLine("Sleep time too long")
(19,"fgets()
(20,)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,)
(23,if(STATIC_CONST_TRUE)
(24,1)
(25,count)
(26,printLine("Benign, fixed string")
(27,STATIC_CONST_TRUE)
(28,inputBuffer)
(29,RET)
(30,2000)
(31,)
(32,)
(33,count = atoi(inputBuffer)
(34,count > 0 && count <= 2000)
(35,inputBuffer)
(36,)
(37,count = -1)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,)
(40,printLine("fgets()
(41,"")
(42,"Sleep time too long")
(43,count)
(44,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,count > 0)
(46,"Benign, fixed string")
(47,printLine("Sleep time OK")
(48,inputBuffer)
(49,atoi(inputBuffer)
(50,"Sleep time OK")
(51,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^