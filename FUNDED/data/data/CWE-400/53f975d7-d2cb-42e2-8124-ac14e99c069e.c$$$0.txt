-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_63b_goodG2BSink(int * countPtr)
{
    int count = *countPtr;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
54,55
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
96,101
97,98
99,100
101,102
102,103
102,104
105,106
105,107
106,107
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
118,120
119,120
121,122
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,6,8,9,13,15,19,24,26,28,32,34,35,38,41,43,44,46,50,53,55,56,60,62,67,68,73,74,77,81,82,84,87,93,95,98,100,103,104,107,109,111,116,117,120,125,127
-----computeFrom-----
48,49
48,50
58,59
58,60
71,72
71,73
75,76
75,77
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_63b_goodG2BSink(int * countPtr){    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_63b_goodG2BSink(int * countPtr)
CWE400_Resource_Exhaustion__fgets_fwrite_63b_goodG2BSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(51,28,0)
(35,50,0)
(27,18,0)
(3,42,0)
(35,18,0)
(51,16,0)
(19,0,0)
(25,13,0)
(28,51,0)
(29,16,0)
(19,38,0)
(62,6,0)
(38,19,0)
(17,19,0)
(18,35,0)
(20,0,0)
(53,55,0)
(2,56,0)
(39,52,0)
(10,19,0)
(56,38,0)
(49,61,0)
(57,42,0)
(9,52,0)
(43,16,0)
(18,27,0)
(41,11,0)
(16,26,0)
(46,0,0)
(23,18,0)
(48,38,0)
(14,28,0)
(59,35,0)
(24,38,0)
(18,52,0)
(9,15,0)
(5,50,0)
(24,7,0)
(30,8,0)
(16,38,0)
(63,54,0)
(21,24,0)
(44,42,0)
(26,16,0)
(12,26,0)
(61,42,0)
(60,42,0)
(42,8,0)
(37,41,0)
(33,61,0)
(13,36,0)
(45,42,0)
(34,55,0)
(52,9,0)
(58,42,0)
(4,50,0)
(1,9,0)
(38,42,0)
(0,42,0)
(52,8,0)
(31,50,0)
(32,5,0)
(16,51,0)
(6,16,0)
(16,6,0)
(55,42,0)
(40,56,0)
(1,39,1)
(26,12,1)
(5,50,1)
(9,15,1)
(41,37,1)
(16,38,1)
(19,10,1)
(47,24,1)
(6,62,1)
(2,40,1)
(18,27,1)
(52,9,1)
(16,26,1)
(38,19,1)
(21,22,1)
(4,31,1)
(53,61,1)
(51,16,1)
(16,6,1)
(34,53,1)
(13,25,1)
(47,22,1)
(37,51,1)
(32,51,1)
(35,18,1)
(48,0,1)
(59,50,1)
(18,52,1)
(9,1,1)
(31,13,1)
(25,56,1)
(62,26,1)
(56,38,1)
(29,28,1)
(24,38,1)
(43,6,1)
(0,20,1)
(35,50,1)
(55,34,1)
(19,0,1)
(49,52,1)
(31,56,1)
(18,23,1)
(40,38,1)
(14,35,1)
(23,59,1)
(28,14,1)
(50,4,1)
(24,21,1)
(22,35,1)
(33,49,1)
(32,41,1)
(56,2,1)
(10,17,1)
(16,43,1)
(51,28,1)
(46,55,1)
(20,46,1)
(5,32,1)
(12,29,1)
(17,48,1)
(59,5,1)
(61,33,1)
(59,35,2)
(13,56,2)
(12,35,2)
(56,38,2)
(35,50,2)
(52,9,2)
(16,26,2)
(24,22,2)
(35,18,2)
(32,35,2)
(29,35,2)
(18,52,2)
(16,35,2)
(43,35,2)
(51,28,2)
(5,50,2)
(28,35,2)
(37,51,2)
(35,35,2)
(26,35,2)
(25,56,2)
(18,27,2)
(51,35,2)
(51,16,2)
(16,6,2)
(23,35,2)
(5,35,2)
(14,35,2)
(18,35,2)
(41,51,2)
(6,35,2)
(24,38,2)
(38,19,2)
(16,38,2)
(19,0,2)
(62,35,2)
(21,22,2)
(9,15,2)
-----------------------------------
(0,*filename = "output_bad.txt")
(1,countPtr)
(2,NULL)
(3,for (i = 0; i < (size_t)
(4,0)
(5,i++)
(6,strlen(SENTENCE)
(7,)
(8,)
(9,*countPtr)
(10,"w+")
(11,)
(12,char)
(13,exit(1)
(14,SENTENCE)
(15,int * countPtr)
(16,fwrite(SENTENCE, sizeof(char)
(17,filename)
(18,(size_t)
(19,fopen(filename, "w+")
(20,"output_bad.txt")
(21,pFile)
(22,pFile)
(23,count)
(24,fclose(pFile)
(25,1)
(26,sizeof(char)
(27,size_t)
(28,strlen(SENTENCE)
(29,SENTENCE)
(30,count)
(31,i)
(32,i)
(33,0)
(34,NULL)
(35,i < (size_t)
(36,)
(37,1)
(38,pFile = fopen(filename, "w+")
(39,count)
(40,pFile)
(41,exit(1)
(42,)
(43,pFile)
(44,filename)
(45,pFile)
(46,filename)
(47,RET)
(48,pFile)
(49,i)
(50,i = 0)
(51,strlen(SENTENCE)
(52,count = *countPtr)
(53,pFile)
(54,)
(55,*pFile = NULL)
(56,pFile == NULL)
(57,i)
(58,if (pFile == NULL)
(59,i)
(60,if (pFile)
(61,i = 0)
(62,SENTENCE)
(63,if (strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^