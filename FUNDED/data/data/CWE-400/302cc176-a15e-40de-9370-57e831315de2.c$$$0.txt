-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    int count;
    /* Initialize count */
    count = -1;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    for(k = 0; k < 1; k++)
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
64,65
65,66
67,68
67,69
68,69
68,70
68,71
68,72
68,73
68,74
68,75
68,76
68,77
68,78
68,79
69,70
70,71
70,72
71,72
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
95,96
98,99
99,100
100,101
102,103
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
125,127
126,127
129,130
129,131
130,131
132,133
134,135
134,136
135,136
135,137
136,137
136,138
136,139
136,140
137,138
139,140
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
150,151
151,152
152,153
154,155
156,157
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
162,167
163,164
165,166
167,168
169,170
169,171
170,171
174,175
174,176
175,176
175,177
176,177
176,178
177,178
179,180
181,182
181,183
182,183
185,186
187,188
188,189
188,190
189,190
189,191
190,191
192,193
195,196
196,197
196,198
197,198
199,200
199,201
200,201
202,203
205,206
205,207
206,207
206,208
207,208
209,210
211,212
212,213
213,214
213,215
214,215
216,217
218,219
218,220
218,221
218,222
219,220
220,221
220,222
221,222
224,225
224,226
225,226
228,229
229,230
231,232
232,233
232,234
232,235
233,234
233,235
234,235
234,236
235,236
238,239
238,240
239,240
242,243
242,244
243,244
244,245
244,246
245,246
247,248
249,250
250,251
250,252
251,252
254,255
255,256
256,257
256,258
257,258
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,43,47,49,53,55,58,61,63,66,72,75,77,79,81,85,87,89,93,96,97,101,106,107,109,115,116,117,120,122,127,128,131,133,138,140,144,146,149,153,155,157,161,164,166,168,171,172,173,178,180,183,184,186,191,193,194,198,201,203,204,208,210,215,217,222,223,226,227,230,236,237,240,241,246,248,252,253,258,259
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
70,71
70,72
83,84
83,85
103,104
103,105
111,112
111,113
124,125
124,126
135,136
135,137
159,160
159,161
169,170
169,171
175,176
175,177
176,177
176,178
181,182
181,183
188,189
188,190
196,197
196,198
206,207
206,208
220,221
220,222
224,225
224,226
233,234
233,235
234,235
234,236
238,239
238,240
-----guardedBy-----
208,217
240,248
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int i,k;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(k = 0; k < 1; k++)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G()
goodB2G
{    int i,k;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(k = 0; k < 1; k++)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int i,k;
int i,k;
int
i
i
k
k
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
for(k = 0; k < 1; k++)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(105,77,0)
(64,0,0)
(137,8,0)
(148,4,0)
(122,16,0)
(43,8,0)
(85,24,0)
(96,88,0)
(159,9,0)
(101,163,0)
(40,163,0)
(22,105,0)
(107,77,0)
(68,108,0)
(106,163,0)
(158,103,0)
(17,110,0)
(151,67,0)
(142,104,0)
(77,105,0)
(108,115,0)
(118,47,0)
(97,16,0)
(4,94,0)
(103,16,0)
(47,118,0)
(94,4,0)
(145,103,0)
(70,44,0)
(112,115,0)
(99,57,0)
(121,33,0)
(92,16,0)
(58,163,0)
(27,161,0)
(90,152,0)
(53,127,0)
(29,152,0)
(61,89,0)
(77,107,0)
(76,110,0)
(115,125,0)
(43,47,0)
(7,20,0)
(115,112,0)
(42,114,0)
(123,13,0)
(116,110,0)
(46,104,0)
(152,29,0)
(15,18,0)
(151,103,0)
(34,98,0)
(74,128,0)
(16,103,0)
(110,103,0)
(73,13,0)
(59,157,0)
(59,25,0)
(127,103,0)
(135,117,0)
(146,84,0)
(136,43,0)
(51,137,0)
(138,1,0)
(133,91,0)
(161,25,0)
(91,0,0)
(80,137,0)
(47,104,0)
(41,83,0)
(128,74,0)
(49,110,0)
(23,125,0)
(127,1,0)
(100,104,0)
(160,9,0)
(109,158,0)
(110,116,0)
(56,44,0)
(52,67,0)
(77,151,0)
(18,15,0)
(6,163,0)
(44,56,0)
(56,114,0)
(140,121,0)
(130,118,0)
(79,59,0)
(93,127,0)
(43,24,0)
(18,137,0)
(10,1,0)
(103,125,0)
(74,31,0)
(147,125,0)
(55,88,0)
(71,114,0)
(66,132,0)
(15,47,0)
(65,72,0)
(15,8,0)
(84,82,0)
(72,13,0)
(1,163,0)
(161,29,0)
(54,116,0)
(151,30,0)
(162,112,0)
(19,116,0)
(9,0,0)
(25,110,0)
(8,125,0)
(81,163,0)
(60,31,0)
(12,125,0)
(26,1,0)
(69,94,0)
(11,15,0)
(114,56,0)
(137,47,0)
(37,13,0)
(129,73,0)
(143,161,0)
(28,151,0)
(74,125,0)
(3,15,0)
(5,30,0)
(2,124,0)
(126,113,0)
(154,56,0)
(89,163,0)
(119,125,0)
(150,108,0)
(50,163,0)
(156,104,0)
(45,128,0)
(32,104,0)
(67,151,0)
(29,161,0)
(113,8,0)
(157,125,0)
(48,12,0)
(111,8,0)
(33,125,0)
(110,25,0)
(10,141,0)
(134,59,0)
(86,94,0)
(152,25,0)
(36,152,0)
(63,163,0)
(35,85,0)
(151,77,0)
(62,47,0)
(38,125,0)
(75,25,0)
(102,74,0)
(137,18,0)
(21,0,0)
(87,157,0)
(31,74,0)
(10,103,0)
(8,113,0)
(163,39,0)
(4,33,0)
(120,89,0)
(33,121,0)
(98,125,0)
(56,154,0)
(88,12,0)
(139,163,0)
(30,151,0)
(144,98,0)
(95,72,0)
(153,10,0)
(131,154,0)
(78,158,0)
(25,125,0)
(14,9,1)
(52,151,1)
(115,112,1)
(7,154,1)
(148,94,1)
(94,69,1)
(96,74,1)
(67,52,1)
(8,113,1)
(102,31,1)
(152,36,1)
(26,138,1)
(97,122,1)
(118,130,1)
(149,10,1)
(146,18,1)
(151,103,1)
(53,93,1)
(112,162,1)
(29,161,1)
(22,28,1)
(162,108,1)
(71,155,1)
(128,45,1)
(103,16,1)
(133,84,1)
(93,99,1)
(29,152,1)
(116,54,1)
(126,111,1)
(19,17,1)
(72,13,1)
(13,37,1)
(68,150,1)
(99,29,1)
(66,158,1)
(15,47,1)
(140,4,1)
(56,114,1)
(15,11,1)
(93,7,1)
(108,68,1)
(35,43,1)
(0,64,1)
(151,77,1)
(3,137,1)
(31,60,1)
(75,67,1)
(41,149,1)
(55,96,1)
(72,95,1)
(43,47,1)
(64,21,1)
(10,103,1)
(28,115,1)
(71,1,1)
(87,59,1)
(111,157,1)
(152,25,1)
(105,22,1)
(5,77,1)
(123,47,1)
(51,9,1)
(137,80,1)
(45,102,1)
(9,0,1)
(73,129,1)
(61,72,1)
(109,78,1)
(34,144,1)
(98,34,1)
(91,133,1)
(77,105,1)
(145,98,1)
(74,128,1)
(12,48,1)
(84,146,1)
(85,35,1)
(56,44,1)
(18,137,1)
(79,134,1)
(92,145,1)
(9,159,1)
(161,25,1)
(149,127,1)
(67,151,1)
(127,1,1)
(78,103,1)
(133,85,1)
(88,55,1)
(134,29,1)
(154,56,1)
(151,30,1)
(144,154,1)
(161,143,1)
(113,126,1)
(158,109,1)
(154,131,1)
(21,72,1)
(33,121,1)
(77,107,1)
(65,13,1)
(159,160,1)
(158,103,1)
(36,90,1)
(129,149,1)
(137,47,1)
(65,73,1)
(153,127,1)
(44,70,1)
(91,0,1)
(10,1,1)
(4,148,1)
(80,51,1)
(76,75,1)
(93,66,1)
(59,25,1)
(59,79,1)
(130,62,1)
(150,33,1)
(157,87,1)
(155,8,1)
(90,25,1)
(43,8,1)
(110,116,1)
(73,13,1)
(4,94,1)
(48,88,1)
(127,53,1)
(143,27,1)
(114,42,1)
(18,15,1)
(74,31,1)
(120,61,1)
(16,97,1)
(110,49,1)
(49,116,1)
(43,136,1)
(70,114,1)
(10,153,1)
(15,8,1)
(95,65,1)
(122,92,1)
(60,158,1)
(138,89,1)
(137,8,1)
(160,0,1)
(11,3,1)
(25,110,1)
(37,123,1)
(121,140,1)
(47,118,1)
(127,103,1)
(69,86,1)
(30,5,1)
(131,56,1)
(27,152,1)
(17,76,1)
(54,19,1)
(86,12,1)
(89,120,1)
(93,2,1)
(1,26,1)
(129,41,1)
(42,71,1)
(2,67,1)
(93,155,1)
(136,18,1)
(110,103,1)
(160,91,1)
(88,158,2)
(51,9,2)
(19,67,2)
(127,1,2)
(74,128,2)
(71,155,2)
(33,121,2)
(98,154,2)
(143,152,2)
(158,103,2)
(15,8,2)
(60,158,2)
(137,47,2)
(42,72,2)
(66,158,2)
(25,67,2)
(80,9,2)
(105,158,2)
(150,158,2)
(56,155,2)
(94,158,2)
(127,103,2)
(74,158,2)
(70,72,2)
(126,29,2)
(29,152,2)
(134,29,2)
(91,9,2)
(97,154,2)
(73,13,2)
(148,158,2)
(77,105,2)
(161,25,2)
(54,67,2)
(4,158,2)
(10,1,2)
(44,72,2)
(4,94,2)
(8,29,2)
(74,31,2)
(9,9,2)
(2,67,2)
(154,155,2)
(122,154,2)
(151,77,2)
(73,72,2)
(42,155,2)
(36,67,2)
(8,113,2)
(161,152,2)
(91,0,2)
(45,158,2)
(145,154,2)
(77,107,2)
(136,18,2)
(56,114,2)
(59,25,2)
(116,67,2)
(137,8,2)
(7,154,2)
(18,9,2)
(153,127,2)
(79,29,2)
(3,137,2)
(131,72,2)
(55,158,2)
(152,25,2)
(61,72,2)
(146,18,2)
(137,9,2)
(49,67,2)
(18,15,2)
(9,0,2)
(16,154,2)
(110,116,2)
(151,30,2)
(96,158,2)
(157,29,2)
(89,72,2)
(151,158,2)
(112,158,2)
(111,29,2)
(26,72,2)
(114,72,2)
(59,29,2)
(72,13,2)
(151,103,2)
(56,44,2)
(160,9,2)
(5,158,2)
(113,29,2)
(90,67,2)
(102,158,2)
(69,158,2)
(31,158,2)
(18,137,2)
(84,18,2)
(110,103,2)
(67,158,2)
(29,161,2)
(1,72,2)
(154,56,2)
(133,9,2)
(70,155,2)
(152,67,2)
(15,47,2)
(127,72,2)
(15,137,2)
(30,158,2)
(115,158,2)
(68,158,2)
(72,72,2)
(158,154,2)
(144,154,2)
(33,158,2)
(131,155,2)
(10,103,2)
(11,137,2)
(43,8,2)
(44,155,2)
(92,154,2)
(128,158,2)
(25,110,2)
(162,158,2)
(56,72,2)
(121,158,2)
(34,154,2)
(35,18,2)
(48,158,2)
(109,154,2)
(52,158,2)
(17,67,2)
(99,29,2)
(12,158,2)
(65,72,2)
(93,72,2)
(22,158,2)
(138,72,2)
(78,154,2)
(159,9,2)
(71,72,2)
(95,72,2)
(108,158,2)
(67,151,2)
(43,18,2)
(86,158,2)
(76,67,2)
(41,149,2)
(43,47,2)
(10,127,2)
(77,158,2)
(114,155,2)
(85,18,2)
(29,67,2)
(103,16,2)
(27,152,2)
(110,67,2)
(155,29,2)
(103,154,2)
(154,72,2)
(87,29,2)
(47,118,2)
(129,72,2)
(75,67,2)
(53,72,2)
(140,158,2)
(115,112,2)
(28,158,2)
(149,72,2)
(120,72,2)
-----------------------------------
(0,k = 0)
(1,connectSocket = INVALID_SOCKET)
(2,break;)
(3,count)
(4,service.sin_addr.s_addr)
(5,service)
(6,recvResult)
(7,break;)
(8,count = atoi(inputBuffer)
(9,k < 1)
(10,CLOSE_SOCKET(connectSocket)
(11,2000)
(12,service.sin_family = AF_INET)
(13,i = 0)
(14,RET)
(15,count <= 2000)
(16,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(17,inputBuffer)
(18,count > 0 && count <= 2000)
(19,CHAR_ARRAY_SIZE)
(20,)
(21,k)
(22,service)
(23,if (connect(connectSocket, (struct sockaddr*)
(24,)
(25,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(26,INVALID_SOCKET)
(27,recvResult)
(28,connectSocket)
(29,recvResult == SOCKET_ERROR || recvResult == 0)
(30,sizeof(service)
(31,&service)
(32,count)
(33,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(34,1)
(35,"Sleep time OK")
(36,SOCKET_ERROR)
(37,0)
(38,if (WSAStartup(MAKEWORD(2,2)
(39,)
(40,wsaDataInit)
(41,WSACleanup()
(42,2)
(43,SLEEP(count)
(44,&wsaData)
(45,service)
(46,for(i = 0; i < 1; i++)
(47,count = -1)
(48,AF_INET)
(49,0)
(50,do)
(51,count)
(52,SOCKET_ERROR)
(53,INVALID_SOCKET)
(54,1)
(55,sin_family)
(56,WSAStartup(MAKEWORD(2,2)
(57,)
(58,connectSocket)
(59,inputBuffer[recvResult])
(60,service)
(61,wsaDataInit)
(62,count)
(63,if (wsaDataInit)
(64,0)
(65,i)
(66,break;)
(67,connect(connectSocket, (struct sockaddr*)
(68,sin_port)
(69,sin_addr)
(70,wsaData)
(71,2)
(72,i < 1)
(73,i++)
(74,memset(&service, 0, sizeof(service)
(75,recvResult)
(76,connectSocket)
(77,(struct sockaddr*)
(78,connectSocket)
(79,recvResult)
(80,0)
(81,service)
(82,)
(83,)
(84,printLine("Sleep time too long")
(85,printLine("Sleep time OK")
(86,service)
(87,\'\\0\')
(88,service.sin_family)
(89,wsaDataInit = 0)
(90,recvResult)
(91,k++)
(92,AF_INET)
(93,connectSocket)
(94,service.sin_addr)
(95,1)
(96,service)
(97,IPPROTO_TCP)
(98,wsaDataInit = 1)
(99,break;)
(100,for(k = 0; k < 1; k++)
(101,wsaData)
(102,0)
(103,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(104,)
(105,&service)
(106,if (connectSocket != INVALID_SOCKET)
(107,struct sockaddr*)
(108,service.sin_port)
(109,INVALID_SOCKET)
(110,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(111,count)
(112,htons(TCP_PORT)
(113,atoi(inputBuffer)
(114,MAKEWORD(2,2)
(115,service.sin_port = htons(TCP_PORT)
(116,CHAR_ARRAY_SIZE - 1)
(117,)
(118,-1)
(119,if (recvResult == SOCKET_ERROR || recvResult == 0)
(120,0)
(121,inet_addr(IP_ADDRESS)
(122,SOCK_STREAM)
(123,i)
(124,)
(125,)
(126,inputBuffer)
(127,connectSocket != INVALID_SOCKET)
(128,sizeof(service)
(129,i)
(130,1)
(131,NO_ERROR)
(132,)
(133,k)
(134,inputBuffer)
(135,if (count > 0 && count <= 2000)
(136,count)
(137,count > 0)
(138,connectSocket)
(139,inputBuffer)
(140,IP_ADDRESS)
(141,)
(142,i)
(143,0)
(144,wsaDataInit)
(145,connectSocket)
(146,"Sleep time too long")
(147,if (connectSocket == INVALID_SOCKET)
(148,s_addr)
(149,wsaDataInit)
(150,service)
(151,connect(connectSocket, (struct sockaddr*)
(152,recvResult == SOCKET_ERROR)
(153,connectSocket)
(154,WSAStartup(MAKEWORD(2,2)
(155,0)
(156,k)
(157,inputBuffer[recvResult] = \'\\0\')
(158,connectSocket == INVALID_SOCKET)
(159,1)
(160,k)
(161,recvResult == 0)
(162,TCP_PORT)
(163,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^