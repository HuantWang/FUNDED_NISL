-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_12_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
35,36
35,37
35,38
36,37
37,38
39,40
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
77,78
77,79
78,79
80,81
80,82
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
94,95
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
104,105
104,106
105,106
105,107
106,107
109,110
111,112
112,113
114,115
115,116
116,117
116,118
117,118
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,34,38,44,46,48,53,54,57,61,62,64,67,72,73,79,81,83,88,89,92,93,99,100,103,107,108,110,113,118,119
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
51,52
51,53
55,56
55,57
85,86
85,87
86,87
86,88
90,91
90,92
97,98
97,99
101,102
101,103
-----guardedBy-----
92,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_12_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_12_bad()
CWE400_Resource_Exhaustion__rand_for_loop_12_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(60,5,0)
(2,56,0)
(57,23,0)
(50,57,0)
(17,10,0)
(30,11,0)
(26,49,0)
(44,65,0)
(3,35,0)
(42,33,0)
(58,33,0)
(27,54,0)
(60,11,0)
(24,25,0)
(18,65,0)
(10,64,0)
(59,65,0)
(1,8,0)
(50,56,0)
(63,32,0)
(54,61,0)
(38,49,0)
(5,54,0)
(52,18,0)
(67,21,0)
(21,41,0)
(0,25,0)
(37,3,0)
(25,6,0)
(55,11,0)
(41,21,0)
(56,50,0)
(47,18,0)
(10,49,0)
(53,51,0)
(50,54,0)
(20,0,0)
(7,53,0)
(62,63,0)
(8,33,0)
(5,57,0)
(21,54,0)
(31,57,0)
(12,4,0)
(36,0,0)
(11,60,0)
(56,33,0)
(13,34,0)
(15,64,0)
(34,32,0)
(29,32,0)
(54,43,0)
(21,57,0)
(48,32,0)
(5,60,0)
(50,45,0)
(65,40,0)
(14,5,0)
(19,57,0)
(66,5,0)
(22,49,0)
(11,57,0)
(9,25,0)
(21,63,0)
(63,21,0)
(64,10,0)
(45,50,0)
(61,54,0)
(39,50,0)
(11,54,0)
(34,32,1)
(67,62,1)
(50,54,1)
(10,64,1)
(3,37,1)
(62,32,1)
(62,34,1)
(29,48,1)
(57,31,1)
(21,54,1)
(37,56,1)
(34,13,1)
(42,60,1)
(66,11,1)
(63,32,1)
(36,20,1)
(18,47,1)
(53,7,1)
(5,57,1)
(50,39,1)
(0,36,1)
(52,46,1)
(8,33,1)
(13,53,1)
(60,5,1)
(15,17,1)
(5,54,1)
(11,54,1)
(21,67,1)
(16,63,1)
(11,55,1)
(56,33,1)
(60,11,1)
(7,63,1)
(21,41,1)
(64,15,1)
(46,54,1)
(5,14,1)
(58,42,1)
(32,29,1)
(47,52,1)
(63,21,1)
(50,45,1)
(61,27,1)
(2,8,1)
(46,57,1)
(48,0,1)
(28,10,1)
(8,1,1)
(1,3,1)
(27,28,1)
(11,57,1)
(30,18,1)
(14,66,1)
(19,28,1)
(16,56,1)
(21,57,1)
(33,58,1)
(50,57,1)
(54,61,1)
(55,30,1)
(20,46,1)
(31,19,1)
(56,50,1)
(16,60,1)
(2,33,1)
(39,2,1)
(63,32,2)
(33,60,2)
(39,60,2)
(32,46,2)
(5,57,2)
(21,46,2)
(54,28,2)
(13,63,2)
(39,56,2)
(56,56,2)
(54,61,2)
(50,54,2)
(56,50,2)
(53,63,2)
(37,56,2)
(56,33,2)
(58,60,2)
(5,54,2)
(67,46,2)
(30,46,2)
(31,28,2)
(66,11,2)
(67,63,2)
(29,46,2)
(62,46,2)
(21,54,2)
(0,46,2)
(8,56,2)
(20,46,2)
(11,46,2)
(34,63,2)
(55,46,2)
(2,60,2)
(21,57,2)
(61,28,2)
(48,46,2)
(21,41,2)
(42,60,2)
(36,46,2)
(27,28,2)
(50,57,2)
(56,60,2)
(1,56,2)
(34,32,2)
(60,46,2)
(60,5,2)
(10,64,2)
(63,63,2)
(11,54,2)
(2,56,2)
(18,46,2)
(5,11,2)
(52,46,2)
(57,28,2)
(63,21,2)
(8,33,2)
(50,45,2)
(50,60,2)
(62,63,2)
(7,63,2)
(63,46,2)
(50,56,2)
(3,56,2)
(14,11,2)
(19,28,2)
(47,46,2)
(11,57,2)
(21,63,2)
(60,11,2)
-----------------------------------
(0,i = 0)
(1,i)
(2,i)
(3,printLine("Hello")
(4,)
(5,count <= 20)
(6,)
(7,"Hello")
(8,i++)
(9,for (i = 0; i < (size_t)
(10,count = -1)
(11,count > 0)
(12,for (i = 0; i < (size_t)
(13,i)
(14,20)
(15,1)
(16,RET)
(17,count)
(18,i = 0)
(19,count)
(20,i)
(21,(size_t)
(22,count)
(23,)
(24,i)
(25,)
(26,if(globalReturnsTrueOrFalse()
(27,count)
(28,globalReturnsTrueOrFalse()
(29,0)
(30,count)
(31,20)
(32,i = 0)
(33,i = 0)
(34,i++)
(35,)
(36,0)
(37,"Hello")
(38,if(globalReturnsTrueOrFalse()
(39,count)
(40,)
(41,size_t)
(42,i)
(43,)
(44,i)
(45,size_t)
(46,globalReturnsTrueOrFalse()
(47,0)
(48,i)
(49,)
(50,(size_t)
(51,)
(52,i)
(53,printLine("Hello")
(54,count = RAND32()
(55,0)
(56,i < (size_t)
(57,count = 20)
(58,0)
(59,if (count > 0 && count <= 20)
(60,count > 0 && count <= 20)
(61,RAND32()
(62,i)
(63,i < (size_t)
(64,-1)
(65,)
(66,count)
(67,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^