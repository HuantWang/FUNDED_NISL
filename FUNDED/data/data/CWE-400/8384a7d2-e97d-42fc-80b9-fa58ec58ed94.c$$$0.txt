-----label-----
1
-----code-----
static int
_http_action_connect(char **uptr, CS const *argv, int statfiles)
{
    CURL *curl;
    CCS rwd;
    CS projname = NULL;
    CCS ofile;
    int rc = 0;

    // Special case - these flags are known to both client and server
    // (with the same semantics) so in order to avoid confusion for
    // users we pass client-side settings along to the server.
    if (prop_is_true(P_ABSOLUTE_PATHS)) {
	http_add_param(uptr, ACTION_ARGS_PARAM, "-a");
    }

    if (prop_is_true(P_MEMBERS_ONLY)) {
	http_add_param(uptr, ACTION_ARGS_PARAM, "-m");
    }

    curl = http_get_curl_handle(1);

    // We parse through all remaining cmdline args looking for
    // "standard" options such as -p|--project-name. The rest
    // get thrown onto the URL as ARGS parameters. In fact, and
    // simply because it's easier than picking them apart, even
    // flags parsed by getopt are set redundantly as parameters.
    if (argv && *argv) {
	int argc, c;

	// Re-create a valid argc value.
	for (argc = 0; argv[argc]; argc++);

	for (bsd_getopt_reset(), bsd_opterr = 0; ;) {
	    // *INDENT-OFF*
	    static CS short_opts = "+p:";
	    static struct option long_opts[] = {
		{"project-name",	required_argument, NULL, 'p'},
		{0,			0,		   NULL,  0 },
	    };
	    // *INDENT-ON*

	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);
	    if (c == -1) {
		break;
	    }

	    switch (c) {
		case 'p':
		    projname = bsd_optarg;
		    break;
		default:
		    break;
	    }
	}

	// Stick the argv onto the URL as the "ARGS" array.
	for (; *argv; argv++) {
	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);

	    if (statfiles) {
		ps_o ps;
		CCS psbuf;

		ps = ps_newFromPath(*argv);
		if (ps_stat(ps, 1)) {
		    rc = 1;
		} else {
		    psbuf = ps_toCSVString(ps);
		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);
		    putil_free(psbuf);
		}
		ps_destroy(ps);
	    }
	}
    } else {
	http_add_param(uptr, ACTION_ARGS_PARAM, "");
    }

    // The server must be told how to format paths (/ or \).
    http_add_param(uptr, HTTP_CLIENT_PLATFORM_PARAM,
			prop_get_str(P_MONITOR_PLATFORM));

    // Add any other generic params the server may be interested in ...

    if (projname) {
	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname);
    } else {
	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,
		       prop_get_str(P_PROJECT_NAME));
    }

    http_add_param(uptr, HTTP_RWD_PARAM, rwd = util_get_rwd());
    putil_free(rwd);

    // This will set the output file pointer to either stdout or
    // the path specified by the property.
    if ((ofile = prop_get_str(P_OUTPUT_FILE))) {
	Output_FP = util_open_output_file(ofile);
    } else {
	Output_FP = stdout;
    }

    curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, _http_action_headers);
    curl_easy_setopt(curl, CURLOPT_WRITEHEADER, NULL);

    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &rc);

    if (http_connect(curl, *uptr, 1) && rc == 0) {
	rc = 2;
    }

    return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
7,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
22,23
23,24
23,25
24,25
26,27
26,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
53,54
53,55
55,56
57,58
57,59
58,59
58,60
59,60
61,62
62,63
64,65
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
74,75
74,76
75,76
75,77
76,77
78,79
79,80
81,82
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
99,101
99,102
100,101
100,102
101,102
103,104
104,105
106,107
106,108
106,109
106,110
107,108
108,109
108,110
108,111
110,111
112,113
114,115
114,116
114,117
114,118
115,116
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
126,127
129,130
129,131
130,131
131,132
131,133
132,133
133,134
135,136
135,137
136,137
139,140
139,141
139,142
139,143
139,144
140,141
141,142
141,143
142,143
144,145
144,146
146,147
148,149
149,150
149,151
150,151
152,153
152,154
152,155
155,156
156,157
156,158
157,158
157,159
157,160
157,161
159,160
161,162
164,165
164,166
164,167
164,168
167,168
170,171
171,172
171,173
172,173
174,175
174,176
174,177
174,178
174,179
174,180
175,176
177,178
177,179
178,179
181,182
181,183
182,183
185,186
187,188
189,190
191,192
191,193
192,193
192,194
193,194
195,196
197,198
199,200
199,201
200,201
202,203
202,204
202,205
202,206
202,207
203,204
205,206
206,207
206,208
207,208
209,210
214,215
214,216
214,217
214,218
216,217
217,218
219,220
220,221
222,223
222,224
223,224
224,225
224,226
224,227
224,228
225,226
227,228
229,230
231,232
232,233
234,235
234,236
235,236
237,238
237,239
237,240
237,241
237,242
238,239
239,240
239,241
240,241
242,243
244,245
245,246
245,247
246,247
248,249
250,251
251,252
251,253
252,253
254,255
254,256
255,256
257,258
258,259
260,261
260,262
260,263
261,262
261,263
261,264
262,263
264,265
267,268
268,269
269,270
269,271
270,271
273,274
273,275
273,276
274,275
275,276
275,277
276,277
278,279
278,280
279,280
281,282
283,284
284,285
284,286
284,287
284,288
285,286
287,288
289,290
291,292
293,294
294,295
294,296
295,296
297,298
299,300
300,301
300,302
301,302
303,304
305,306
306,307
307,308
307,309
307,310
307,311
308,309
310,311
312,313
315,316
316,317
316,318
316,319
316,320
317,318
319,320
321,322
323,324
323,325
324,325
326,327
328,329
328,330
328,331
329,330
331,332
332,333
333,334
333,335
333,336
333,337
334,335
336,337
338,339
340,341
342,343
343,344
344,345
344,346
344,347
344,348
345,346
347,348
349,350
351,352
351,353
352,353
354,355
356,357
357,358
357,359
357,360
357,361
358,359
360,361
362,363
364,365
364,366
365,366
367,368
368,369
370,371
371,372
371,373
372,373
374,375
376,377
376,378
376,379
377,378
378,379
378,380
379,380
381,382
381,383
382,383
384,385
386,387
387,388
388,389
388,390
389,390
391,392
391,393
392,393
394,395
396,397
397,398
398,399
398,400
399,400
401,402
403,404
404,405
404,406
404,407
404,408
405,406
407,408
409,410
411,412
413,414
414,415
414,416
414,417
414,418
415,416
417,418
419,420
421,422
423,424
424,425
424,426
424,427
424,428
425,426
427,428
429,430
431,432
432,433
434,435
434,436
435,436
435,437
436,437
436,438
436,439
436,440
437,438
439,440
441,442
442,443
445,446
445,447
446,447
449,450
450,451
451,452
451,453
452,453
455,456
456,457
-----nextToken-----
2,4,6,8,9,10,13,15,16,18,20,25,27,28,32,34,38,40,43,47,49,52,54,56,60,63,68,70,72,73,77,80,85,87,89,90,94,97,98,102,105,109,111,113,118,119,122,124,127,128,134,137,138,143,145,147,151,153,154,158,160,162,163,165,166,168,169,173,176,179,180,183,184,186,188,190,194,196,198,201,204,208,210,211,212,213,215,218,221,226,228,230,233,236,241,243,247,249,253,256,259,263,265,266,271,272,277,280,282,286,288,290,292,296,298,302,304,309,311,313,314,318,320,322,325,327,330,335,337,339,341,346,348,350,353,355,359,361,363,366,369,373,375,380,383,385,390,393,395,400,402,406,408,410,412,416,418,420,422,426,428,430,433,438,440,443,444,447,448,453,454,457
-----computeFrom-----
92,93
92,94
100,101
100,102
116,117
116,118
135,136
135,137
171,172
171,173
177,178
177,179
181,182
181,183
192,193
192,194
206,207
206,208
251,252
251,253
269,270
269,271
275,276
275,277
364,365
364,366
378,379
378,380
388,389
388,390
398,399
398,400
435,436
435,437
445,446
445,447
451,452
451,453
-----guardedBy-----
105,259
447,453
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ForStatement;ExpressionStatement;ExpressionList;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;BreakStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;BreakStatement;ForStatement;NullStatement;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int_http_action_connect(char **uptr, CS const *argv, int statfiles){    CURL *curl;    CCS rwd;    CS projname = NULL;    CCS ofile;    int rc = 0;    // Special case - these flags are known to both client and server    // (with the same semantics) so in order to avoid confusion for    // users we pass client-side settings along to the server.    if (prop_is_true(P_ABSOLUTE_PATHS)) {	http_add_param(uptr, ACTION_ARGS_PARAM, "-a");    }    if (prop_is_true(P_MEMBERS_ONLY)) {	http_add_param(uptr, ACTION_ARGS_PARAM, "-m");    }    curl = http_get_curl_handle(1);    // We parse through all remaining cmdline args looking for    // "standard" options such as -p|--project-name. The rest    // get thrown onto the URL as ARGS parameters. In fact, and    // simply because it's easier than picking them apart, even    // flags parsed by getopt are set redundantly as parameters.    if (argv && *argv) {	int argc, c;	// Re-create a valid argc value.	for (argc = 0; argv[argc]; argc++);	for (bsd_getopt_reset(), bsd_opterr = 0; ;) {	    // *INDENT-OFF*	    static CS short_opts = "+p:";	    static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };	    // *INDENT-ON*	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);	    if (c == -1) {		break;	    }	    switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }	}	// Stick the argv onto the URL as the "ARGS" array.	for (; *argv; argv++) {	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);	    if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }	}    } else {	http_add_param(uptr, ACTION_ARGS_PARAM, "");    }    // The server must be told how to format paths (/ or \).    http_add_param(uptr, HTTP_CLIENT_PLATFORM_PARAM,			prop_get_str(P_MONITOR_PLATFORM));    // Add any other generic params the server may be interested in ...    if (projname) {	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname);    } else {	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,		       prop_get_str(P_PROJECT_NAME));    }    http_add_param(uptr, HTTP_RWD_PARAM, rwd = util_get_rwd());    putil_free(rwd);    // This will set the output file pointer to either stdout or    // the path specified by the property.    if ((ofile = prop_get_str(P_OUTPUT_FILE))) {	Output_FP = util_open_output_file(ofile);    } else {	Output_FP = stdout;    }    curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, _http_action_headers);    curl_easy_setopt(curl, CURLOPT_WRITEHEADER, NULL);    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &rc);    if (http_connect(curl, *uptr, 1) && rc == 0) {	rc = 2;    }    return rc;}
static int
_http_action_connect(char **uptr, CS const *argv, int statfiles)
_http_action_connect
char **uptr
char
**uptr
*
*
uptr
CS const *argv
CS const
CS
*argv
*
argv
int statfiles
int
statfiles
statfiles
{    CURL *curl;    CCS rwd;    CS projname = NULL;    CCS ofile;    int rc = 0;    // Special case - these flags are known to both client and server    // (with the same semantics) so in order to avoid confusion for    // users we pass client-side settings along to the server.    if (prop_is_true(P_ABSOLUTE_PATHS)) {	http_add_param(uptr, ACTION_ARGS_PARAM, "-a");    }    if (prop_is_true(P_MEMBERS_ONLY)) {	http_add_param(uptr, ACTION_ARGS_PARAM, "-m");    }    curl = http_get_curl_handle(1);    // We parse through all remaining cmdline args looking for    // "standard" options such as -p|--project-name. The rest    // get thrown onto the URL as ARGS parameters. In fact, and    // simply because it's easier than picking them apart, even    // flags parsed by getopt are set redundantly as parameters.    if (argv && *argv) {	int argc, c;	// Re-create a valid argc value.	for (argc = 0; argv[argc]; argc++);	for (bsd_getopt_reset(), bsd_opterr = 0; ;) {	    // *INDENT-OFF*	    static CS short_opts = "+p:";	    static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };	    // *INDENT-ON*	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);	    if (c == -1) {		break;	    }	    switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }	}	// Stick the argv onto the URL as the "ARGS" array.	for (; *argv; argv++) {	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);	    if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }	}    } else {	http_add_param(uptr, ACTION_ARGS_PARAM, "");    }    // The server must be told how to format paths (/ or \).    http_add_param(uptr, HTTP_CLIENT_PLATFORM_PARAM,			prop_get_str(P_MONITOR_PLATFORM));    // Add any other generic params the server may be interested in ...    if (projname) {	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname);    } else {	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,		       prop_get_str(P_PROJECT_NAME));    }    http_add_param(uptr, HTTP_RWD_PARAM, rwd = util_get_rwd());    putil_free(rwd);    // This will set the output file pointer to either stdout or    // the path specified by the property.    if ((ofile = prop_get_str(P_OUTPUT_FILE))) {	Output_FP = util_open_output_file(ofile);    } else {	Output_FP = stdout;    }    curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, _http_action_headers);    curl_easy_setopt(curl, CURLOPT_WRITEHEADER, NULL);    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &rc);    if (http_connect(curl, *uptr, 1) && rc == 0) {	rc = 2;    }    return rc;}
CURL *curl;
CURL *curl;
CURL
CURL
*curl
*
curl
CCS rwd;
CCS rwd;
CCS
CCS
rwd
rwd
CS projname = NULL;
CS projname = NULL;
CS
CS
projname = NULL
projname
= NULL
NULL
NULL
CCS ofile;
CCS ofile;
CCS
CCS
ofile
ofile
int rc = 0;
int rc = 0;
int
rc = 0
rc
= 0
0
if (prop_is_true(P_ABSOLUTE_PATHS)) {	http_add_param(uptr, ACTION_ARGS_PARAM, "-a");    }
prop_is_true(P_ABSOLUTE_PATHS)
prop_is_true
prop_is_true
(P_ABSOLUTE_PATHS)
P_ABSOLUTE_PATHS
P_ABSOLUTE_PATHS
{	http_add_param(uptr, ACTION_ARGS_PARAM, "-a");    }
http_add_param(uptr, ACTION_ARGS_PARAM, "-a");
http_add_param(uptr, ACTION_ARGS_PARAM, "-a")
http_add_param
http_add_param
uptr
uptr
ACTION_ARGS_PARAM
ACTION_ARGS_PARAM
"-a"
if (prop_is_true(P_MEMBERS_ONLY)) {	http_add_param(uptr, ACTION_ARGS_PARAM, "-m");    }
prop_is_true(P_MEMBERS_ONLY)
prop_is_true
prop_is_true
(P_MEMBERS_ONLY)
P_MEMBERS_ONLY
P_MEMBERS_ONLY
{	http_add_param(uptr, ACTION_ARGS_PARAM, "-m");    }
http_add_param(uptr, ACTION_ARGS_PARAM, "-m");
http_add_param(uptr, ACTION_ARGS_PARAM, "-m")
http_add_param
http_add_param
uptr
uptr
ACTION_ARGS_PARAM
ACTION_ARGS_PARAM
"-m"
curl = http_get_curl_handle(1);
curl = http_get_curl_handle(1)
curl
curl
http_get_curl_handle(1)
http_get_curl_handle
http_get_curl_handle
1
if (argv && *argv) {	int argc, c;	// Re-create a valid argc value.	for (argc = 0; argv[argc]; argc++);	for (bsd_getopt_reset(), bsd_opterr = 0; ;) {	    // *INDENT-OFF*	    static CS short_opts = "+p:";	    static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };	    // *INDENT-ON*	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);	    if (c == -1) {		break;	    }	    switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }	}	// Stick the argv onto the URL as the "ARGS" array.	for (; *argv; argv++) {	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);	    if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }	}    } else {	http_add_param(uptr, ACTION_ARGS_PARAM, "");    }
argv && *argv
argv
argv
*argv
argv
argv
{	int argc, c;	// Re-create a valid argc value.	for (argc = 0; argv[argc]; argc++);	for (bsd_getopt_reset(), bsd_opterr = 0; ;) {	    // *INDENT-OFF*	    static CS short_opts = "+p:";	    static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };	    // *INDENT-ON*	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);	    if (c == -1) {		break;	    }	    switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }	}	// Stick the argv onto the URL as the "ARGS" array.	for (; *argv; argv++) {	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);	    if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }	}    }
int argc, c;
int argc, c;
int
argc
argc
c
c
for (argc = 0; argv[argc]; argc++);
argc = 0;
argc = 0
argc
argc
0
argv[argc]
argv
argv
argc
argc
argc++
argc
argc
;
for (bsd_getopt_reset(), bsd_opterr = 0; ;) {	    // *INDENT-OFF*	    static CS short_opts = "+p:";	    static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };	    // *INDENT-ON*	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);	    if (c == -1) {		break;	    }	    switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }	}
bsd_getopt_reset(), bsd_opterr = 0;
bsd_getopt_reset(), bsd_opterr = 0
bsd_getopt_reset()
bsd_getopt_reset
bsd_getopt_reset
bsd_opterr = 0
bsd_opterr
bsd_opterr
0
{	    // *INDENT-OFF*	    static CS short_opts = "+p:";	    static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };	    // *INDENT-ON*	    c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);	    if (c == -1) {		break;	    }	    switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }	}
static CS short_opts = "+p:";
static CS short_opts = "+p:";
static CS
CS
short_opts = "+p:"
short_opts
= "+p:"
"+p:"
static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };
static struct option long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    };
static struct option
option
long_opts[] = {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    }
long_opts
[]
= {		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    }
{		{"project-name",	required_argument, NULL, 'p'},		{0,			0,		   NULL,  0 },	    }
{"project-name",	required_argument, NULL, 'p'}
"project-name"
required_argument
required_argument
NULL
NULL
'p'
{0,			0,		   NULL,  0 }
0
0
NULL
NULL
0
c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL);
c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL)
c
c
bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL)
bsd_getopt
bsd_getopt
argc + 1
argc
argc
1
argv - 1
argv
argv
1
short_opts
short_opts
long_opts
long_opts
NULL
NULL
if (c == -1) {		break;	    }
c == -1
c
c
-1
1
{		break;	    }
break;
switch (c) {		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }
c
c
{		case 'p':		    projname = bsd_optarg;		    break;		default:		    break;	    }
case 'p':
'p'
projname = bsd_optarg;
projname = bsd_optarg
projname
projname
bsd_optarg
bsd_optarg
break;
default:
break;
for (; *argv; argv++) {	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);	    if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }	}
;
*argv
argv
argv
argv++
argv
argv
{	    http_add_param(uptr, ACTION_ARGS_PARAM, *argv);	    if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }	}
http_add_param(uptr, ACTION_ARGS_PARAM, *argv);
http_add_param(uptr, ACTION_ARGS_PARAM, *argv)
http_add_param
http_add_param
uptr
uptr
ACTION_ARGS_PARAM
ACTION_ARGS_PARAM
*argv
argv
argv
if (statfiles) {		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }
statfiles
statfiles
{		ps_o ps;		CCS psbuf;		ps = ps_newFromPath(*argv);		if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}		ps_destroy(ps);	    }
ps_o ps;
ps_o ps;
ps_o
ps_o
ps
ps
CCS psbuf;
CCS psbuf;
CCS
CCS
psbuf
psbuf
ps = ps_newFromPath(*argv);
ps = ps_newFromPath(*argv)
ps
ps
ps_newFromPath(*argv)
ps_newFromPath
ps_newFromPath
*argv
argv
argv
if (ps_stat(ps, 1)) {		    rc = 1;		} else {		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}
ps_stat(ps, 1)
ps_stat
ps_stat
ps
ps
1
{		    rc = 1;		}
rc = 1;
rc = 1
rc
rc
1
{		    psbuf = ps_toCSVString(ps);		    http_add_header(curl, X_PATHSTATE_HEADER, psbuf);		    putil_free(psbuf);		}
psbuf = ps_toCSVString(ps);
psbuf = ps_toCSVString(ps)
psbuf
psbuf
ps_toCSVString(ps)
ps_toCSVString
ps_toCSVString
ps
ps
http_add_header(curl, X_PATHSTATE_HEADER, psbuf);
http_add_header(curl, X_PATHSTATE_HEADER, psbuf)
http_add_header
http_add_header
curl
curl
X_PATHSTATE_HEADER
X_PATHSTATE_HEADER
psbuf
psbuf
putil_free(psbuf);
putil_free(psbuf)
putil_free
putil_free
psbuf
psbuf
ps_destroy(ps);
ps_destroy(ps)
ps_destroy
ps_destroy
ps
ps
{	http_add_param(uptr, ACTION_ARGS_PARAM, "");    }
http_add_param(uptr, ACTION_ARGS_PARAM, "");
http_add_param(uptr, ACTION_ARGS_PARAM, "")
http_add_param
http_add_param
uptr
uptr
ACTION_ARGS_PARAM
ACTION_ARGS_PARAM
""
http_add_param(uptr, HTTP_CLIENT_PLATFORM_PARAM,			prop_get_str(P_MONITOR_PLATFORM));
http_add_param(uptr, HTTP_CLIENT_PLATFORM_PARAM,			prop_get_str(P_MONITOR_PLATFORM))
http_add_param
http_add_param
uptr
uptr
HTTP_CLIENT_PLATFORM_PARAM
HTTP_CLIENT_PLATFORM_PARAM
prop_get_str(P_MONITOR_PLATFORM)
prop_get_str
prop_get_str
P_MONITOR_PLATFORM
P_MONITOR_PLATFORM
if (projname) {	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname);    } else {	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,		       prop_get_str(P_PROJECT_NAME));    }
projname
projname
{	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname);    }
http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname);
http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname)
http_add_param
http_add_param
uptr
uptr
HTTP_PROJECT_NAME_PARAM
HTTP_PROJECT_NAME_PARAM
projname
projname
{	http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,		       prop_get_str(P_PROJECT_NAME));    }
http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,		       prop_get_str(P_PROJECT_NAME));
http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,		       prop_get_str(P_PROJECT_NAME))
http_add_param
http_add_param
uptr
uptr
HTTP_PROJECT_NAME_PARAM
HTTP_PROJECT_NAME_PARAM
prop_get_str(P_PROJECT_NAME)
prop_get_str
prop_get_str
P_PROJECT_NAME
P_PROJECT_NAME
http_add_param(uptr, HTTP_RWD_PARAM, rwd = util_get_rwd());
http_add_param(uptr, HTTP_RWD_PARAM, rwd = util_get_rwd())
http_add_param
http_add_param
uptr
uptr
HTTP_RWD_PARAM
HTTP_RWD_PARAM
rwd = util_get_rwd()
rwd
rwd
util_get_rwd()
util_get_rwd
util_get_rwd
putil_free(rwd);
putil_free(rwd)
putil_free
putil_free
rwd
rwd
if ((ofile = prop_get_str(P_OUTPUT_FILE))) {	Output_FP = util_open_output_file(ofile);    } else {	Output_FP = stdout;    }
(ofile = prop_get_str(P_OUTPUT_FILE))
ofile = prop_get_str(P_OUTPUT_FILE)
ofile
ofile
prop_get_str(P_OUTPUT_FILE)
prop_get_str
prop_get_str
P_OUTPUT_FILE
P_OUTPUT_FILE
{	Output_FP = util_open_output_file(ofile);    }
Output_FP = util_open_output_file(ofile);
Output_FP = util_open_output_file(ofile)
Output_FP
Output_FP
util_open_output_file(ofile)
util_open_output_file
util_open_output_file
ofile
ofile
{	Output_FP = stdout;    }
Output_FP = stdout;
Output_FP = stdout
Output_FP
Output_FP
stdout
stdout
curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, _http_action_headers);
curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, _http_action_headers)
curl_easy_setopt
curl_easy_setopt
curl
curl
CURLOPT_HEADERFUNCTION
CURLOPT_HEADERFUNCTION
_http_action_headers
_http_action_headers
curl_easy_setopt(curl, CURLOPT_WRITEHEADER, NULL);
curl_easy_setopt(curl, CURLOPT_WRITEHEADER, NULL)
curl_easy_setopt
curl_easy_setopt
curl
curl
CURLOPT_WRITEHEADER
CURLOPT_WRITEHEADER
NULL
NULL
curl_easy_setopt(curl, CURLOPT_WRITEDATA, &rc);
curl_easy_setopt(curl, CURLOPT_WRITEDATA, &rc)
curl_easy_setopt
curl_easy_setopt
curl
curl
CURLOPT_WRITEDATA
CURLOPT_WRITEDATA
&rc
rc
rc
if (http_connect(curl, *uptr, 1) && rc == 0) {	rc = 2;    }
http_connect(curl, *uptr, 1) && rc == 0
http_connect(curl, *uptr, 1)
http_connect
http_connect
curl
curl
*uptr
uptr
uptr
1
rc == 0
rc
rc
0
{	rc = 2;    }
rc = 2;
rc = 2
rc
rc
2
return rc;
rc
rc
-----joern-----
(26,124,0)
(29,27,0)
(191,173,0)
(184,16,0)
(116,90,0)
(48,76,0)
(65,137,0)
(70,135,0)
(140,202,0)
(128,15,0)
(95,195,0)
(192,133,0)
(55,72,0)
(177,76,0)
(189,195,0)
(51,64,0)
(53,150,0)
(151,48,0)
(162,202,0)
(1,114,0)
(174,52,0)
(18,1,0)
(163,135,0)
(85,133,0)
(34,36,0)
(75,153,0)
(17,27,0)
(180,104,0)
(200,142,0)
(81,206,0)
(59,73,0)
(159,151,0)
(72,195,0)
(203,36,0)
(106,28,0)
(6,209,0)
(104,153,0)
(158,114,0)
(50,124,0)
(198,153,0)
(157,104,0)
(174,195,0)
(179,33,0)
(49,198,0)
(9,172,0)
(64,135,0)
(165,109,0)
(14,71,0)
(175,196,0)
(38,76,0)
(174,153,0)
(210,29,0)
(25,73,0)
(145,99,0)
(56,195,0)
(72,29,0)
(32,174,0)
(130,173,0)
(107,209,0)
(37,195,0)
(163,137,0)
(197,142,0)
(170,167,0)
(192,168,0)
(117,142,0)
(2,195,0)
(129,82,0)
(91,72,0)
(111,196,0)
(133,6,0)
(121,65,0)
(168,63,0)
(138,85,0)
(112,92,0)
(183,128,0)
(90,79,0)
(115,167,0)
(3,75,0)
(152,163,0)
(45,15,0)
(123,147,0)
(181,133,0)
(99,96,0)
(54,195,0)
(1,153,0)
(103,198,0)
(110,137,0)
(190,113,0)
(43,135,0)
(148,14,0)
(66,139,0)
(209,6,0)
(75,77,0)
(97,10,0)
(93,39,0)
(136,119,0)
(119,137,0)
(206,7,0)
(155,195,0)
(6,133,0)
(188,133,0)
(90,39,0)
(8,36,0)
(143,195,0)
(147,137,0)
(65,15,0)
(27,29,0)
(24,193,0)
(7,153,0)
(201,181,0)
(126,104,0)
(29,195,0)
(7,206,0)
(64,15,0)
(102,195,0)
(182,40,0)
(151,195,0)
(176,85,0)
(57,195,0)
(69,173,0)
(60,173,0)
(178,204,0)
(120,206,0)
(199,173,0)
(14,139,0)
(134,52,0)
(169,90,0)
(122,66,0)
(108,136,0)
(96,153,0)
(4,110,0)
(35,189,0)
(61,75,0)
(101,96,0)
(161,73,0)
(160,208,0)
(73,59,0)
(28,109,0)
(206,81,0)
(36,153,0)
(15,65,0)
(146,15,0)
(10,168,0)
(15,128,0)
(125,196,0)
(76,195,0)
(86,198,0)
(99,29,0)
(13,136,0)
(187,64,0)
(52,174,0)
(71,80,0)
(48,39,0)
(147,123,0)
(47,99,0)
(59,99,0)
(128,202,0)
(114,1,0)
(10,63,0)
(151,29,0)
(90,76,0)
(23,79,0)
(198,12,0)
(87,174,0)
(194,71,0)
(74,113,0)
(42,196,0)
(105,7,0)
(36,33,0)
(31,160,0)
(98,40,0)
(99,59,0)
(149,19,0)
(33,196,0)
(172,202,0)
(21,195,0)
(0,151,0)
(109,28,0)
(142,195,0)
(22,1,0)
(141,15,0)
(92,135,0)
(142,29,0)
(124,29,0)
(104,58,0)
(166,20,0)
(36,167,0)
(30,75,0)
(11,124,0)
(36,131,0)
(132,139,0)
(119,136,0)
(62,33,0)
(167,195,0)
(88,168,0)
(136,153,0)
(189,206,0)
(41,65,0)
(44,39,0)
(156,195,0)
(73,76,0)
(46,147,0)
(124,63,0)
(73,39,0)
(139,66,0)
(136,193,0)
(168,192,0)
(133,40,0)
(83,163,0)
(48,151,0)
(90,195,0)
(209,137,0)
(113,16,0)
(15,150,0)
(94,72,0)
(96,99,0)
(127,119,0)
(144,160,0)
(5,123,0)
(100,40,0)
(84,150,0)
(71,14,0)
(171,48,0)
(15,64,0)
(205,79,0)
(82,137,0)
(79,89,0)
(207,192,0)
(67,202,0)
(154,7,0)
(124,168,0)
(185,172,0)
(28,128,0)
(1,186,0)
(123,137,0)
(39,118,0)
(181,40,0)
(7,195,0)
(150,202,0)
(31,139,1)
(146,141,1)
(171,0,1)
(188,68,1)
(145,96,1)
(163,83,1)
(189,206,1)
(35,7,1)
(62,78,1)
(49,103,1)
(76,38,1)
(103,86,1)
(105,1,1)
(3,30,1)
(201,10,1)
(108,13,1)
(122,132,1)
(73,76,1)
(134,87,1)
(169,90,1)
(82,137,1)
(84,125,1)
(209,137,1)
(125,33,1)
(82,129,1)
(15,64,1)
(192,133,1)
(13,82,1)
(136,119,1)
(7,206,1)
(135,70,1)
(4,68,1)
(120,154,1)
(92,112,1)
(197,71,1)
(123,5,1)
(48,39,1)
(15,65,1)
(151,29,1)
(72,29,1)
(90,76,1)
(33,179,1)
(181,201,1)
(66,122,1)
(96,101,1)
(176,138,1)
(8,164,1)
(107,188,1)
(83,152,1)
(59,99,1)
(119,127,1)
(59,73,1)
(164,174,1)
(147,46,1)
(18,164,1)
(90,39,1)
(72,55,1)
(163,137,1)
(129,149,1)
(4,181,1)
(73,25,1)
(187,51,1)
(111,78,1)
(149,28,1)
(116,79,1)
(25,161,1)
(7,153,1)
(97,124,1)
(133,6,1)
(101,47,1)
(201,39,1)
(43,147,1)
(113,74,1)
(150,53,1)
(85,133,1)
(142,29,1)
(99,96,1)
(121,41,1)
(128,15,1)
(68,136,1)
(174,52,1)
(209,107,1)
(93,44,1)
(142,117,1)
(167,170,1)
(204,178,1)
(194,139,1)
(192,207,1)
(106,128,1)
(90,79,1)
(147,123,1)
(48,76,1)
(50,168,1)
(198,153,1)
(10,97,1)
(52,134,1)
(92,135,1)
(180,20,1)
(114,158,1)
(184,163,1)
(53,84,1)
(157,126,1)
(48,171,1)
(75,3,1)
(124,168,1)
(86,204,1)
(178,104,1)
(36,33,1)
(116,59,1)
(168,192,1)
(104,157,1)
(123,137,1)
(10,168,1)
(105,36,1)
(15,150,1)
(78,28,1)
(129,110,1)
(158,22,1)
(32,82,1)
(28,109,1)
(28,128,1)
(110,137,1)
(64,187,1)
(190,184,1)
(200,197,1)
(47,151,1)
(17,210,1)
(15,45,1)
(160,144,1)
(14,148,1)
(30,61,1)
(104,153,1)
(11,50,1)
(87,32,1)
(22,18,1)
(152,92,1)
(85,176,1)
(32,75,1)
(51,183,1)
(1,153,1)
(84,111,1)
(38,177,1)
(181,133,1)
(5,46,1)
(174,153,1)
(165,106,1)
(29,27,1)
(207,88,1)
(166,76,1)
(61,147,1)
(151,48,1)
(65,121,1)
(64,135,1)
(46,29,1)
(36,167,1)
(36,153,1)
(161,99,1)
(119,137,1)
(112,163,1)
(178,20,1)
(127,108,1)
(147,137,1)
(124,29,1)
(198,49,1)
(99,29,1)
(183,150,1)
(124,26,1)
(206,81,1)
(109,165,1)
(26,11,1)
(159,72,1)
(126,180,1)
(205,23,1)
(154,105,1)
(44,85,1)
(144,31,1)
(81,120,1)
(14,139,1)
(96,153,1)
(88,85,1)
(177,167,1)
(1,114,1)
(70,43,1)
(90,116,1)
(55,91,1)
(210,204,1)
(73,39,1)
(189,35,1)
(203,34,1)
(94,142,1)
(45,146,1)
(74,190,1)
(117,200,1)
(163,135,1)
(23,59,1)
(79,205,1)
(99,145,1)
(110,4,1)
(20,166,1)
(141,65,1)
(84,113,1)
(71,14,1)
(179,62,1)
(65,137,1)
(39,93,1)
(148,194,1)
(0,159,1)
(34,8,1)
(6,209,1)
(36,203,1)
(138,133,1)
(91,94,1)
(27,17,1)
(136,153,1)
(132,189,1)
(139,66,1)
(197,160,1)
(75,153,1)
(152,135,1)
(210,198,1)
(170,115,1)
(41,64,1)
(36,164,2)
(82,82,2)
(90,79,2)
(106,28,2)
(90,76,2)
(110,82,2)
(126,20,2)
(64,147,2)
(61,147,2)
(129,147,2)
(147,137,2)
(192,85,2)
(43,147,2)
(152,163,2)
(49,204,2)
(187,147,2)
(133,6,2)
(124,29,2)
(150,147,2)
(85,68,2)
(50,85,2)
(29,27,2)
(15,28,2)
(142,29,2)
(3,147,2)
(41,147,2)
(110,137,2)
(163,147,2)
(34,164,2)
(161,99,2)
(151,48,2)
(168,192,2)
(205,59,2)
(73,99,2)
(146,28,2)
(18,164,2)
(33,78,2)
(71,139,2)
(25,99,2)
(74,147,2)
(176,68,2)
(64,135,2)
(135,147,2)
(39,85,2)
(144,139,2)
(163,135,2)
(22,164,2)
(5,46,2)
(48,39,2)
(71,14,2)
(103,204,2)
(183,28,2)
(92,163,2)
(124,85,2)
(119,82,2)
(10,168,2)
(121,147,2)
(136,119,2)
(151,29,2)
(203,164,2)
(62,78,2)
(194,139,2)
(64,28,2)
(181,133,2)
(128,147,2)
(125,78,2)
(147,123,2)
(65,137,2)
(84,147,2)
(108,82,2)
(68,82,2)
(28,28,2)
(51,147,2)
(7,206,2)
(149,147,2)
(4,82,2)
(206,81,2)
(129,82,2)
(174,153,2)
(36,167,2)
(148,139,2)
(190,147,2)
(99,96,2)
(119,137,2)
(198,153,2)
(88,85,2)
(114,164,2)
(15,64,2)
(192,133,2)
(13,82,2)
(53,147,2)
(104,153,2)
(92,135,2)
(82,137,2)
(51,28,2)
(104,20,2)
(179,78,2)
(138,68,2)
(79,59,2)
(1,164,2)
(11,85,2)
(198,204,2)
(139,66,2)
(112,163,2)
(183,147,2)
(31,139,2)
(180,20,2)
(99,29,2)
(152,147,2)
(23,59,2)
(189,206,2)
(150,28,2)
(187,28,2)
(111,78,2)
(48,76,2)
(84,28,2)
(78,28,2)
(128,15,2)
(45,28,2)
(188,68,2)
(26,85,2)
(85,133,2)
(109,147,2)
(106,147,2)
(165,28,2)
(41,28,2)
(123,46,2)
(158,164,2)
(1,153,2)
(128,28,2)
(59,99,2)
(65,28,2)
(107,68,2)
(86,204,2)
(10,85,2)
(160,139,2)
(136,82,2)
(207,85,2)
(7,153,2)
(209,137,2)
(83,147,2)
(90,39,2)
(123,137,2)
(184,147,2)
(73,76,2)
(127,82,2)
(75,147,2)
(141,28,2)
(70,147,2)
(201,68,2)
(15,65,2)
(28,147,2)
(109,28,2)
(45,147,2)
(28,128,2)
(30,147,2)
(181,68,2)
(1,114,2)
(8,164,2)
(72,29,2)
(6,68,2)
(146,147,2)
(14,139,2)
(169,90,2)
(165,147,2)
(163,163,2)
(93,85,2)
(174,52,2)
(53,28,2)
(121,28,2)
(83,163,2)
(163,137,2)
(141,147,2)
(136,153,2)
(6,209,2)
(157,20,2)
(36,33,2)
(133,68,2)
(96,153,2)
(75,153,2)
(15,150,2)
(73,39,2)
(82,147,2)
(65,147,2)
(97,85,2)
(36,153,2)
(59,73,2)
(209,68,2)
(44,85,2)
(28,109,2)
(168,85,2)
(124,168,2)
(15,147,2)
(113,147,2)
-----------------------------------
(0,CURLOPT_WRITEDATA)
(1,http_add_param(uptr, HTTP_PROJECT_NAME_PARAM,\n\\n\\t\\t       prop_get_str(P_PROJECT_NAME)
(2,rc)
(3,"")
(4,argv)
(5,argv)
(6,ps_newFromPath(*argv)
(7,http_add_param(uptr, HTTP_RWD_PARAM, rwd = util_get_rwd()
(8,uptr)
(9,)
(10,putil_free(psbuf)
(11,X_PATHSTATE_HEADER)
(12,)
(13,uptr)
(14,util_open_output_file(ofile)
(15,bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL)
(16,)
(17,1)
(18,uptr)
(19,)
(20,prop_is_true(P_ABSOLUTE_PATHS)
(21,if (projname)
(22,HTTP_PROJECT_NAME_PARAM)
(23,rc)
(24,if (statfiles)
(25,0)
(26,psbuf)
(27,http_get_curl_handle(1)
(28,c == -1)
(29,curl = http_get_curl_handle(1)
(30,ACTION_ARGS_PARAM)
(31,Output_FP)
(32,uptr)
(33,projname = bsd_optarg)
(34,HTTP_PROJECT_NAME_PARAM)
(35,rwd)
(36,http_add_param(uptr, HTTP_PROJECT_NAME_PARAM, projname)
(37,ofile)
(38,0)
(39,rc = 1)
(40,)
(41,argv)
(42,case \'p\':)
(43,argc)
(44,rc)
(45,NULL)
(46,argv)
(47,curl)
(48,&rc)
(49,"-m")
(50,curl)
(51,argc)
(52,prop_get_str(P_MONITOR_PLATFORM)
(53,"+p:")
(54,if (argv && *argv)
(55,NULL)
(56,curl)
(57,rwd)
(58,)
(59,http_connect(curl, *uptr, 1)
(60,for (bsd_getopt_reset()
(61,uptr)
(62,projname)
(63,)
(64,argc + 1)
(65,argv - 1)
(66,prop_get_str(P_OUTPUT_FILE)
(67,switch (c)
(68,statfiles)
(69,argc)
(70,0)
(71,Output_FP = util_open_output_file(ofile)
(72,curl_easy_setopt(curl, CURLOPT_WRITEHEADER, NULL)
(73,rc == 0)
(74,0)
(75,http_add_param(uptr, ACTION_ARGS_PARAM, "")
(76,rc = 0)
(77,)
(78,c)
(79,rc = 2)
(80,)
(81,util_get_rwd()
(82,*argv)
(83,argc)
(84,short_opts)
(85,ps_stat(ps, 1)
(86,uptr)
(87,HTTP_CLIENT_PLATFORM_PARAM)
(88,psbuf)
(89,)
(90,return rc;)
(91,CURLOPT_WRITEHEADER)
(92,argc++)
(93,1)
(94,curl)
(95,if (prop_is_true(P_MEMBERS_ONLY)
(96,*uptr)
(97,psbuf)
(98,ps)
(99,http_connect(curl, *uptr, 1)
(100,psbuf)
(101,uptr)
(102,projname)
(103,ACTION_ARGS_PARAM)
(104,http_add_param(uptr, ACTION_ARGS_PARAM, "-a")
(105,uptr)
(106,c)
(107,argv)
(108,ACTION_ARGS_PARAM)
(109,-1)
(110,argv++)
(111,break;)
(112,argc)
(113,bsd_opterr = 0)
(114,prop_get_str(P_PROJECT_NAME)
(115,projname)
(116,rc)
(117,_http_action_headers)
(118,)
(119,*argv)
(120,rwd)
(121,1)
(122,P_OUTPUT_FILE)
(123,*argv)
(124,http_add_header(curl, X_PATHSTATE_HEADER, psbuf)
(125,break;)
(126,ACTION_ARGS_PARAM)
(127,argv)
(128,c = bsd_getopt(argc + 1, argv - 1, short_opts, long_opts, NULL)
(129,argv)
(130,for (argc = 0; argv[argc]; argc++)
(131,)
(132,ofile)
(133,ps = ps_newFromPath(*argv)
(134,P_MONITOR_PLATFORM)
(135,argc = 0)
(136,http_add_param(uptr, ACTION_ARGS_PARAM, *argv)
(137,CS const *argv)
(138,ps)
(139,ofile = prop_get_str(P_OUTPUT_FILE)
(140,if (c == -1)
(141,short_opts)
(142,curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, _http_action_headers)
(143,if (prop_is_true(P_ABSOLUTE_PATHS)
(144,stdout)
(145,1)
(146,long_opts)
(147,argv && *argv)
(148,ofile)
(149,break;)
(150,short_opts = "+p:")
(151,curl_easy_setopt(curl, CURLOPT_WRITEDATA, &rc)
(152,argv)
(153,char **uptr)
(154,HTTP_RWD_PARAM)
(155,if ((ofile = prop_get_str(P_OUTPUT_FILE)
(156,if (http_connect(curl, *uptr, 1)
(157,"-a")
(158,P_PROJECT_NAME)
(159,curl)
(160,Output_FP = stdout)
(161,rc)
(162,short_opts)
(163,argv[argc])
(164,projname)
(165,1)
(166,P_ABSOLUTE_PATHS)
(167,projname = NULL)
(168,psbuf = ps_toCSVString(ps)
(169,RET)
(170,NULL)
(171,rc)
(172,)
(173,)
(174,http_add_param(uptr, HTTP_CLIENT_PLATFORM_PARAM,\n\\n\\t\\t\\tprop_get_str(P_MONITOR_PLATFORM)
(175,default:)
(176,1)
(177,rc)
(178,P_MEMBERS_ONLY)
(179,bsd_optarg)
(180,uptr)
(181,ps_destroy(ps)
(182,if (ps_stat(ps, 1)
(183,c)
(184,bsd_getopt_reset()
(185,)
(186,)
(187,1)
(188,ps)
(189,putil_free(rwd)
(190,bsd_opterr)
(191,for (; *argv; argv++)
(192,ps_toCSVString(ps)
(193,)
(194,Output_FP)
(195,)
(196,)
(197,curl)
(198,http_add_param(uptr, ACTION_ARGS_PARAM, "-m")
(199,c)
(200,CURLOPT_HEADERFUNCTION)
(201,ps)
(202,)
(203,projname)
(204,prop_is_true(P_MEMBERS_ONLY)
(205,2)
(206,rwd = util_get_rwd()
(207,ps)
(208,)
(209,*argv)
(210,curl)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^