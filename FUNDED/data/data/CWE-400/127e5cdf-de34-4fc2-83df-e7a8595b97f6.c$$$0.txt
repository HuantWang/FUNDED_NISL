-----label-----
1
-----code-----
static int parse_chain(const char **p, bool usec, CalendarComponent **c) {
        const char *t;
        CalendarComponent *cc = NULL;
        int r;

        assert(p);
        assert(c);

        t = *p;

        if (t[0] == '*') {
                if (usec) {
                        r = const_chain(0, c);
                        if (r < 0)
                                return r;
                        (*c)->repeat = USEC_PER_SEC;
                } else
                        *c = NULL;

                *p = t + 1;
                return 0;
        }

        r = prepend_component(&t, usec, 0, &cc);
        if (r < 0) {
                free_chain(cc);
                return r;
        }

        *p = t;
        *c = cc;
        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
7,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
18,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
23,24
24,25
24,26
26,27
26,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
61,62
63,64
63,65
64,65
64,66
65,66
65,67
66,67
70,71
70,72
70,73
71,72
71,73
71,74
72,73
74,75
74,76
74,77
75,76
76,77
76,78
77,78
79,80
79,81
79,82
80,81
83,84
85,86
85,87
86,87
86,88
87,88
90,91
91,92
93,94
94,95
94,96
95,96
95,97
96,97
97,98
98,99
101,102
103,104
104,105
104,106
105,106
106,107
108,109
110,111
111,112
111,113
112,113
113,114
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
125,126
125,127
125,128
125,129
125,130
126,127
128,129
129,130
131,132
134,135
135,136
137,138
137,139
138,139
138,140
139,140
142,143
142,144
143,144
144,145
144,146
145,146
147,148
149,150
150,151
152,153
153,154
153,155
154,155
155,156
157,158
159,160
160,161
160,162
161,162
162,163
164,165
166,167
-----nextToken-----
2,4,6,8,9,10,12,14,17,19,20,21,25,27,28,32,34,35,38,41,43,47,49,53,55,59,62,67,68,69,73,78,81,82,84,88,89,92,99,100,102,107,109,114,117,118,120,124,127,130,132,133,136,140,141,146,148,151,156,158,163,165,167
-----computeFrom-----
57,58
57,59
64,65
64,66
76,77
76,78
86,87
86,88
94,95
94,96
104,105
104,106
111,112
111,113
115,116
115,117
122,123
122,124
138,139
138,140
153,154
153,155
160,161
160,162
-----guardedBy-----
67,117
88,92
140,151
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;UnaryExpression;UnaryExpression;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int parse_chain(const char **p, bool usec, CalendarComponent **c) {        const char *t;        CalendarComponent *cc = NULL;        int r;        assert(p);        assert(c);        t = *p;        if (t[0] == '*') {                if (usec) {                        r = const_chain(0, c);                        if (r < 0)                                return r;                        (*c)->repeat = USEC_PER_SEC;                } else                        *c = NULL;                *p = t + 1;                return 0;        }        r = prepend_component(&t, usec, 0, &cc);        if (r < 0) {                free_chain(cc);                return r;        }        *p = t;        *c = cc;        return 0;}
static int
parse_chain(const char **p, bool usec, CalendarComponent **c)
parse_chain
const char **p
const char
**p
*
*
p
bool usec
bool
usec
usec
CalendarComponent **c
CalendarComponent
CalendarComponent
**c
*
*
c
{        const char *t;        CalendarComponent *cc = NULL;        int r;        assert(p);        assert(c);        t = *p;        if (t[0] == '*') {                if (usec) {                        r = const_chain(0, c);                        if (r < 0)                                return r;                        (*c)->repeat = USEC_PER_SEC;                } else                        *c = NULL;                *p = t + 1;                return 0;        }        r = prepend_component(&t, usec, 0, &cc);        if (r < 0) {                free_chain(cc);                return r;        }        *p = t;        *c = cc;        return 0;}
const char *t;
const char *t;
const char
*t
*
t
CalendarComponent *cc = NULL;
CalendarComponent *cc = NULL;
CalendarComponent
CalendarComponent
*cc = NULL
*
cc
= NULL
NULL
NULL
int r;
int r;
int
r
r
assert(p);
assert(p)
assert
assert
p
p
assert(c);
assert(c)
assert
assert
c
c
t = *p;
t = *p
t
t
*p
p
p
if (t[0] == '*') {                if (usec) {                        r = const_chain(0, c);                        if (r < 0)                                return r;                        (*c)->repeat = USEC_PER_SEC;                } else                        *c = NULL;                *p = t + 1;                return 0;        }
t[0] == '*'
t[0]
t
t
0
'*'
{                if (usec) {                        r = const_chain(0, c);                        if (r < 0)                                return r;                        (*c)->repeat = USEC_PER_SEC;                } else                        *c = NULL;                *p = t + 1;                return 0;        }
if (usec) {                        r = const_chain(0, c);                        if (r < 0)                                return r;                        (*c)->repeat = USEC_PER_SEC;                } else                        *c = NULL;
usec
usec
{                        r = const_chain(0, c);                        if (r < 0)                                return r;                        (*c)->repeat = USEC_PER_SEC;                }
r = const_chain(0, c);
r = const_chain(0, c)
r
r
const_chain(0, c)
const_chain
const_chain
0
c
c
if (r < 0)                                return r;
r < 0
r
r
0
return r;
r
r
(*c)->repeat = USEC_PER_SEC;
(*c)->repeat = USEC_PER_SEC
(*c)->repeat
(*c)
*c
c
c
repeat
USEC_PER_SEC
USEC_PER_SEC
*c = NULL;
*c = NULL
*c
c
c
NULL
NULL
*p = t + 1;
*p = t + 1
*p
p
p
t + 1
t
t
1
return 0;
0
r = prepend_component(&t, usec, 0, &cc);
r = prepend_component(&t, usec, 0, &cc)
r
r
prepend_component(&t, usec, 0, &cc)
prepend_component
prepend_component
&t
t
t
usec
usec
0
&cc
cc
cc
if (r < 0) {                free_chain(cc);                return r;        }
r < 0
r
r
0
{                free_chain(cc);                return r;        }
free_chain(cc);
free_chain(cc)
free_chain
free_chain
cc
cc
return r;
r
r
*p = t;
*p = t
*p
p
p
t
t
*c = cc;
*c = cc
*c
c
c
cc
cc
return 0;
0
-----joern-----
(34,18,0)
(85,25,0)
(40,16,0)
(72,83,0)
(71,16,0)
(76,80,0)
(79,85,0)
(49,60,0)
(39,72,0)
(56,18,0)
(55,11,0)
(68,46,0)
(19,25,0)
(59,46,0)
(42,73,0)
(16,59,0)
(9,46,0)
(15,80,0)
(32,16,0)
(12,41,0)
(20,69,0)
(84,59,0)
(34,22,0)
(77,64,0)
(78,59,0)
(6,22,0)
(43,83,0)
(18,21,0)
(51,85,0)
(59,84,0)
(82,64,0)
(71,70,0)
(60,76,0)
(50,79,0)
(47,76,0)
(3,38,0)
(28,46,0)
(65,46,0)
(55,46,0)
(76,60,0)
(74,11,0)
(73,46,0)
(14,70,0)
(0,47,0)
(7,41,0)
(62,39,0)
(52,72,0)
(77,52,0)
(19,46,0)
(31,10,0)
(73,59,0)
(52,46,0)
(79,38,0)
(5,22,0)
(38,21,0)
(45,11,0)
(0,77,0)
(58,77,0)
(54,69,0)
(68,21,0)
(4,69,0)
(72,24,0)
(37,13,0)
(34,70,0)
(17,76,0)
(39,59,0)
(61,34,0)
(63,19,0)
(2,4,0)
(84,21,0)
(83,11,0)
(22,6,0)
(53,72,0)
(29,44,0)
(72,52,0)
(72,39,0)
(10,80,0)
(69,59,0)
(75,84,0)
(57,82,0)
(18,71,0)
(35,72,0)
(0,79,0)
(13,33,0)
(36,47,0)
(38,73,0)
(16,71,0)
(44,76,0)
(6,25,0)
(60,25,0)
(22,10,0)
(8,68,0)
(1,55,0)
(26,6,0)
(83,72,0)
(81,33,0)
(48,52,0)
(82,11,0)
(27,46,0)
(11,46,0)
(41,52,0)
(85,55,0)
(30,60,0)
(0,34,0)
(34,13,0)
(66,44,0)
(79,46,0)
(67,46,0)
(69,4,0)
(13,25,0)
(56,33,1)
(72,39,1)
(34,13,1)
(61,71,1)
(84,75,1)
(72,83,1)
(69,59,1)
(34,18,1)
(41,52,1)
(53,35,1)
(0,77,1)
(49,17,1)
(10,31,1)
(6,25,1)
(0,34,1)
(84,21,1)
(73,42,1)
(42,38,1)
(79,85,1)
(79,38,1)
(48,4,1)
(82,11,1)
(57,41,1)
(77,58,1)
(13,37,1)
(76,60,1)
(26,44,1)
(74,45,1)
(69,54,1)
(83,11,1)
(30,49,1)
(39,62,1)
(63,68,1)
(23,4,1)
(47,36,1)
(18,56,1)
(16,40,1)
(40,32,1)
(7,12,1)
(4,2,1)
(0,47,1)
(71,16,1)
(68,21,1)
(62,48,1)
(59,84,1)
(33,81,1)
(36,44,1)
(55,1,1)
(35,39,1)
(58,82,1)
(81,13,1)
(56,10,1)
(75,78,1)
(60,30,1)
(19,25,1)
(5,6,1)
(16,59,1)
(55,11,1)
(85,51,1)
(79,50,1)
(66,76,1)
(72,24,1)
(20,59,1)
(32,18,1)
(41,7,1)
(39,59,1)
(51,73,1)
(8,11,1)
(18,21,1)
(2,69,1)
(13,25,1)
(37,23,1)
(34,22,1)
(29,66,1)
(47,76,1)
(78,19,1)
(85,25,1)
(4,69,1)
(44,29,1)
(82,57,1)
(60,25,1)
(0,79,1)
(83,43,1)
(43,53,1)
(31,22,1)
(44,76,1)
(6,26,1)
(38,21,1)
(22,5,1)
(19,63,1)
(34,61,1)
(54,20,1)
(1,85,1)
(12,52,1)
(68,8,1)
(73,59,1)
(50,55,1)
(3,41,1)
(11,74,1)
(52,72,1)
(22,6,1)
(38,3,1)
(77,52,1)
(17,23,1)
(72,39,2)
(32,23,2)
(76,23,2)
(17,23,2)
(51,41,2)
(59,84,2)
(18,21,2)
(52,72,2)
(71,16,2)
(55,11,2)
(19,25,2)
(36,44,2)
(13,23,2)
(18,44,2)
(6,25,2)
(60,23,2)
(83,11,2)
(84,21,2)
(16,44,2)
(40,23,2)
(12,4,2)
(57,41,2)
(77,52,2)
(22,44,2)
(38,41,2)
(41,4,2)
(79,38,2)
(73,41,2)
(0,77,2)
(34,22,2)
(83,4,2)
(41,52,2)
(71,44,2)
(81,23,2)
(13,25,2)
(47,76,2)
(31,44,2)
(61,23,2)
(85,25,2)
(7,4,2)
(48,4,2)
(29,23,2)
(22,6,2)
(30,23,2)
(44,76,2)
(39,4,2)
(72,4,2)
(39,59,2)
(40,44,2)
(42,41,2)
(49,23,2)
(37,23,2)
(76,60,2)
(66,23,2)
(60,25,2)
(38,21,2)
(32,44,2)
(47,44,2)
(18,23,2)
(34,13,2)
(44,23,2)
(50,41,2)
(71,23,2)
(82,11,2)
(34,44,2)
(6,44,2)
(34,18,2)
(26,44,2)
(23,4,2)
(5,44,2)
(0,79,2)
(10,44,2)
(52,4,2)
(53,4,2)
(3,41,2)
(79,85,2)
(34,23,2)
(73,59,2)
(68,21,2)
(43,4,2)
(82,41,2)
(72,24,2)
(33,23,2)
(62,4,2)
(56,44,2)
(58,41,2)
(0,47,2)
(79,41,2)
(0,34,2)
(77,41,2)
(16,23,2)
(85,41,2)
(55,41,2)
(56,23,2)
(1,41,2)
(35,4,2)
(61,44,2)
(4,69,2)
(72,83,2)
(69,59,2)
(16,59,2)
-----------------------------------
(0,RET)
(1,cc)
(2,'*')
(3,p)
(4,t[0] == '*')
(5,repeat)
(6,*c)
(7,0)
(8,p)
(9,t)
(10,(*c)
(11,*cc = NULL)
(12,r)
(13,*c)
(14,if (usec)
(15,if (r < 0)
(16,t + 1)
(17,r)
(18,*p)
(19,assert(c)
(20,t)
(21,const char **p)
(22,(*c)
(23,usec)
(24,bool usec)
(25,CalendarComponent **c)
(26,c)
(27,cc)
(28,r)
(29,0)
(30,c)
(31,USEC_PER_SEC)
(32,t)
(33,*c = NULL)
(34,return 0;)
(35,usec)
(36,r)
(37,c)
(38,*p)
(39,&t)
(40,1)
(41,r < 0)
(42,t)
(43,cc)
(44,r < 0)
(45,cc)
(46,)
(47,return r;)
(48,r)
(49,0)
(50,0)
(51,c)
(52,r = prepend_component(&t, usec, 0, &cc)
(53,0)
(54,0)
(55,*c = cc)
(56,p)
(57,cc)
(58,r)
(59,t = *p)
(60,const_chain(0, c)
(61,0)
(62,t)
(63,c)
(64,)
(65,if (t[0] == '*')
(66,r)
(67,if (r < 0)
(68,assert(p)
(69,t[0])
(70,)
(71,*p = t + 1)
(72,prepend_component(&t, usec, 0, &cc)
(73,*p = t)
(74,NULL)
(75,p)
(76,r = const_chain(0, c)
(77,return r;)
(78,t)
(79,return 0;)
(80,)
(81,NULL)
(82,free_chain(cc)
(83,&cc)
(84,*p)
(85,*c)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^