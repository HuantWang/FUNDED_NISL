-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_goodB2GSink(size_t data)
{
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_goodB2GSink(size_t data){    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(16,14,0)
(4,26,0)
(12,2,0)
(35,33,0)
(14,22,0)
(20,25,0)
(14,33,0)
(41,0,0)
(26,0,0)
(23,3,0)
(14,27,0)
(32,11,0)
(26,4,0)
(37,40,0)
(25,20,0)
(22,14,0)
(10,36,0)
(25,26,0)
(23,0,0)
(21,13,0)
(26,25,0)
(36,18,0)
(28,0,0)
(8,3,0)
(27,14,0)
(6,20,0)
(17,23,0)
(24,35,0)
(13,3,0)
(15,22,0)
(37,9,0)
(11,0,0)
(39,11,0)
(5,19,0)
(20,19,0)
(31,9,0)
(28,3,0)
(0,26,0)
(0,3,0)
(20,33,0)
(30,35,0)
(19,20,0)
(13,0,0)
(27,35,0)
(2,38,0)
(34,36,0)
(9,37,0)
(7,23,0)
(35,27,0)
(29,28,0)
(27,14,1)
(20,33,1)
(9,31,1)
(7,17,1)
(28,29,1)
(21,23,1)
(30,14,1)
(28,0,1)
(17,11,1)
(5,6,1)
(29,13,1)
(23,7,1)
(27,35,1)
(1,28,1)
(26,4,1)
(11,0,1)
(12,27,1)
(6,41,1)
(14,33,1)
(15,16,1)
(23,0,1)
(22,15,1)
(41,27,1)
(25,20,1)
(13,0,1)
(37,9,1)
(26,25,1)
(13,21,1)
(32,0,1)
(0,26,1)
(1,2,1)
(31,11,1)
(14,22,1)
(2,12,1)
(19,5,1)
(11,39,1)
(35,33,1)
(17,37,1)
(24,30,1)
(35,24,1)
(20,19,1)
(39,32,1)
(29,27,2)
(0,27,2)
(39,27,2)
(27,35,2)
(26,4,2)
(28,27,2)
(21,27,2)
(30,14,2)
(9,11,2)
(27,14,2)
(11,0,2)
(19,27,2)
(13,0,2)
(20,19,2)
(14,22,2)
(28,0,2)
(26,27,2)
(11,27,2)
(26,25,2)
(5,27,2)
(13,27,2)
(17,27,2)
(6,27,2)
(23,0,2)
(37,11,2)
(25,27,2)
(20,27,2)
(41,27,2)
(31,11,2)
(7,27,2)
(2,27,2)
(0,26,2)
(35,33,2)
(14,33,2)
(37,9,2)
(23,27,2)
(20,33,2)
(12,27,2)
(24,14,2)
(35,14,2)
(25,20,2)
(32,27,2)
-----------------------------------
(0,myString = (wchar_t *)
(1,RET)
(2,printLine("Input is less than the length of the source string or too large")
(3,)
(4,wchar_t *)
(5,wchar_t)
(6,data)
(7,HELLO_STRING)
(8,if (myString == NULL)
(9,-1)
(10,if (data > wcslen(HELLO_STRING)
(11,myString == NULL)
(12,"Input is less than the length of the source string or too large")
(13,printWLine(myString)
(14,data > wcslen(HELLO_STRING)
(15,HELLO_STRING)
(16,data)
(17,myString)
(18,)
(19,sizeof(wchar_t)
(20,data*sizeof(wchar_t)
(21,myString)
(22,wcslen(HELLO_STRING)
(23,wcscpy(myString, HELLO_STRING)
(24,100)
(25,malloc(data*sizeof(wchar_t)
(26,(wchar_t *)
(27,data > wcslen(HELLO_STRING)
(28,free(myString)
(29,myString)
(30,data)
(31,1)
(32,myString)
(33,size_t data)
(34,myString)
(35,data < 100)
(36,)
(37,exit(-1)
(38,)
(39,NULL)
(40,)
(41,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^