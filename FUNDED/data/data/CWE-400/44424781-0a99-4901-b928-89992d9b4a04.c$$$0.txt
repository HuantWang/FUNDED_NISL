-----label-----
1
-----code-----
void ops_cls_status_msgs_get(enum ops_cls_list_status_code status_code,
                         const char *op_str, const char *feature_str,
                         const char *iface_str, const char *iface_num,
                         unsigned int seq_num,  unsigned int len,
                         char *status_msg_str)
{
    const char *status_table_str;
    char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];
    status_table_str = ops_cls_status_table_get(status_code);

    if(status_table_str != NULL) {
        if(seq_num == 0) {
            /* invalid entry sequence number, so format the string without
             * entry sequence number string.
             */
            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,
                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);
        } else {
            /* valid entry sequence number, so format the string using
             * entry sequence number.
             */
            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,
                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);

            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,
                     iface_str,iface_num,seq_num_str);

        } /* end if seq_num == 0 */
    } /* end if status_table_str != NULL */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
10,11
10,12
12,13
12,14
15,16
15,17
17,18
17,19
20,21
20,22
22,23
22,24
25,26
25,27
27,28
27,29
30,31
30,32
32,33
34,35
34,36
36,37
38,39
38,40
40,41
40,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
47,48
47,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
74,76
74,77
75,76
75,77
76,77
79,80
80,81
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
82,83
84,85
86,87
88,89
90,91
92,93
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
102,105
102,106
102,107
103,104
105,106
107,108
109,110
111,112
113,114
114,115
114,116
114,117
114,118
114,119
114,120
114,121
114,122
114,123
115,116
117,118
119,120
121,122
123,124
125,126
127,128
129,130
131,132
-----nextToken-----
2,4,7,9,11,13,14,16,18,19,21,23,24,26,28,29,31,33,35,37,39,41,42,46,48,49,52,54,57,61,64,66,70,72,77,78,83,85,87,89,91,93,95,97,99,104,106,108,110,112,116,118,120,122,124,126,128,130,132
-----computeFrom-----
59,60
59,61
68,69
68,70
75,76
75,77
-----guardedBy-----
70,122
-----guardedByNegation-----
77,112
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void ops_cls_status_msgs_get(enum ops_cls_list_status_code status_code,                         const char *op_str, const char *feature_str,                         const char *iface_str, const char *iface_num,                         unsigned int seq_num,  unsigned int len,                         char *status_msg_str){    const char *status_table_str;    char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];    status_table_str = ops_cls_status_table_get(status_code);    if(status_table_str != NULL) {        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);        } /* end if seq_num == 0 */    } /* end if status_table_str != NULL */}
void
ops_cls_status_msgs_get(enum ops_cls_list_status_code status_code,                         const char *op_str, const char *feature_str,                         const char *iface_str, const char *iface_num,                         unsigned int seq_num,  unsigned int len,                         char *status_msg_str)
ops_cls_status_msgs_get
enum ops_cls_list_status_code status_code
enum ops_cls_list_status_code
ops_cls_list_status_code
status_code
status_code
const char *op_str
const char
*op_str
*
op_str
const char *feature_str
const char
*feature_str
*
feature_str
const char *iface_str
const char
*iface_str
*
iface_str
const char *iface_num
const char
*iface_num
*
iface_num
unsigned int seq_num
unsigned int
seq_num
seq_num
unsigned int len
unsigned int
len
len
char *status_msg_str
char
*status_msg_str
*
status_msg_str
{    const char *status_table_str;    char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];    status_table_str = ops_cls_status_table_get(status_code);    if(status_table_str != NULL) {        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);        } /* end if seq_num == 0 */    } /* end if status_table_str != NULL */}
const char *status_table_str;
const char *status_table_str;
const char
*status_table_str
*
status_table_str
char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];
char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];
char
seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN]
seq_num_str
[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN]
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
status_table_str = ops_cls_status_table_get(status_code);
status_table_str = ops_cls_status_table_get(status_code)
status_table_str
status_table_str
ops_cls_status_table_get(status_code)
ops_cls_status_table_get
ops_cls_status_table_get
status_code
status_code
if(status_table_str != NULL) {        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);        } /* end if seq_num == 0 */    }
status_table_str != NULL
status_table_str
status_table_str
NULL
NULL
{        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);        } /* end if seq_num == 0 */    }
if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);        }
seq_num == 0
seq_num
seq_num
0
{            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);        }
snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);
snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
snprintf
snprintf
status_msg_str
status_msg_str
len
len
status_table_str
status_table_str
op_str
op_str
feature_str
feature_str
iface_str
iface_str
iface_num
iface_num
OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID
OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID
{            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);        }
snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);
snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num)
snprintf
snprintf
seq_num_str
seq_num_str
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
OPS_CLS_STATUS_MSG_SEQ_NUM_VALID
OPS_CLS_STATUS_MSG_SEQ_NUM_VALID
seq_num
seq_num
snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str);
snprintf(status_msg_str,len,status_table_str,op_str,feature_str,                     iface_str,iface_num,seq_num_str)
snprintf
snprintf
status_msg_str
status_msg_str
len
len
status_table_str
status_table_str
op_str
op_str
feature_str
feature_str
iface_str
iface_str
iface_num
iface_num
seq_num_str
seq_num_str
-----joern-----
(4,31,0)
(28,3,0)
(11,12,0)
(3,26,0)
(38,11,0)
(23,3,0)
(0,11,0)
(2,4,0)
(3,34,0)
(14,3,0)
(3,10,0)
(41,11,0)
(11,44,0)
(3,46,0)
(45,3,0)
(3,42,0)
(35,40,0)
(11,10,0)
(25,3,0)
(43,22,0)
(48,6,0)
(30,11,0)
(33,48,0)
(3,12,0)
(4,6,0)
(11,46,0)
(1,11,0)
(24,22,0)
(11,42,0)
(29,4,0)
(5,3,0)
(32,3,0)
(8,48,0)
(49,35,0)
(17,22,0)
(36,13,0)
(21,7,0)
(27,4,0)
(11,31,0)
(3,44,0)
(47,3,0)
(13,10,0)
(11,20,0)
(16,10,0)
(9,4,0)
(11,34,0)
(10,22,0)
(37,11,0)
(10,35,0)
(35,10,0)
(19,11,0)
(18,13,0)
(3,20,0)
(15,11,0)
(39,13,1)
(38,19,1)
(14,5,1)
(37,38,1)
(48,8,1)
(11,15,1)
(4,6,1)
(39,11,1)
(15,41,1)
(11,10,1)
(35,40,1)
(11,12,1)
(30,37,1)
(29,2,1)
(35,49,1)
(13,18,1)
(33,13,1)
(47,48,1)
(36,10,1)
(1,30,1)
(11,46,1)
(28,32,1)
(48,6,1)
(27,29,1)
(41,1,1)
(3,20,1)
(39,3,1)
(3,42,1)
(4,9,1)
(32,14,1)
(25,47,1)
(11,44,1)
(3,46,1)
(11,42,1)
(11,34,1)
(5,45,1)
(18,36,1)
(3,10,1)
(3,23,1)
(19,0,1)
(23,28,1)
(3,34,1)
(3,44,1)
(8,33,1)
(49,16,1)
(9,27,1)
(3,12,1)
(10,35,1)
(11,20,1)
(0,4,1)
(13,10,1)
(2,48,1)
(45,25,1)
(11,42,2)
(14,48,2)
(4,48,2)
(9,48,2)
(45,48,2)
(11,46,2)
(3,44,2)
(32,48,2)
(11,34,2)
(0,48,2)
(11,20,2)
(23,48,2)
(33,13,2)
(11,48,2)
(11,12,2)
(48,6,2)
(47,48,2)
(11,44,2)
(3,34,2)
(37,48,2)
(10,35,2)
(28,48,2)
(3,48,2)
(29,48,2)
(5,48,2)
(38,48,2)
(13,10,2)
(3,42,2)
(15,48,2)
(3,12,2)
(3,20,2)
(11,10,2)
(41,48,2)
(3,46,2)
(19,48,2)
(35,40,2)
(2,48,2)
(25,48,2)
(4,6,2)
(1,48,2)
(27,48,2)
(30,48,2)
(48,13,2)
(8,13,2)
(3,10,2)
-----------------------------------
(0,status_msg_str)
(1,iface_str)
(2,seq_num_str)
(3,snprintf(status_msg_str,len,status_table_str,op_str,feature_str,\n\\n                     iface_str,iface_num,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
(4,snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,\n\\n                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num)
(5,op_str)
(6,unsigned int seq_num)
(7,)
(8,0)
(9,seq_num)
(10,status_table_str = ops_cls_status_table_get(status_code)
(11,snprintf(status_msg_str,len,status_table_str,op_str,feature_str,\n\\n                     iface_str,iface_num,seq_num_str)
(12,unsigned int len)
(13,status_table_str != NULL)
(14,feature_str)
(15,seq_num_str)
(16,status_table_str)
(17,seq_num_str)
(18,NULL)
(19,len)
(20,const char *feature_str)
(21,if(seq_num == 0)
(22,)
(23,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
(24,status_table_str)
(25,len)
(26,)
(27,OPS_CLS_STATUS_MSG_SEQ_NUM_VALID)
(28,iface_num)
(29,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN)
(30,feature_str)
(31,)
(32,iface_str)
(33,seq_num)
(34,const char *iface_str)
(35,ops_cls_status_table_get(status_code)
(36,status_table_str)
(37,op_str)
(38,status_table_str)
(39,RET)
(40,enum ops_cls_list_status_code status_code)
(41,iface_num)
(42,const char *iface_num)
(43,if(status_table_str != NULL)
(44,const char *op_str)
(45,status_table_str)
(46,char *status_msg_str)
(47,status_msg_str)
(48,seq_num == 0)
(49,status_code)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^