-----label-----
0
-----code-----
static void jme_drop_tx_map(struct jme_adapter *jme, int startidx, int endidx)
{
	struct jme_ring *txring = &(jme->txring[0]);
	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
	int mask = jme->tx_ring_mask;
	int j;

	for (j = startidx ; j < endidx ; ++j) {
		ctxbi = txbi + ((startidx + j + 2) & (mask));
		pci_unmap_page(jme->pdev,
				ctxbi->mapping,
				ctxbi->len,
				PCI_DMA_TODEVICE);

				ctxbi->mapping = 0;
				ctxbi->len = 0;
	}

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
19,24
20,21
21,22
21,23
22,23
24,25
24,26
24,27
27,28
28,29
29,30
30,31
30,32
31,32
31,33
32,33
36,37
37,38
37,39
37,40
38,39
40,41
40,42
40,43
43,44
44,45
44,46
45,46
48,49
48,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
73,74
73,75
74,75
76,77
78,79
79,80
81,82
81,83
81,84
81,85
82,83
83,84
83,85
84,85
86,87
86,88
87,88
89,90
90,91
90,92
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
100,101
102,103
103,104
103,105
103,106
103,107
103,108
104,105
106,107
106,108
107,108
110,111
110,112
111,112
114,115
114,116
115,116
118,119
120,121
121,122
121,123
122,123
122,124
123,124
127,128
128,129
128,130
129,130
129,131
130,131
-----nextToken-----
2,4,7,9,10,12,14,16,18,23,25,26,33,34,35,39,41,42,46,47,49,50,53,55,59,60,63,65,70,72,75,77,80,85,88,95,97,98,101,105,108,109,112,113,116,117,119,124,125,126,131,132,133
-----computeFrom-----
68,69
68,70
73,74
73,75
83,84
83,85
86,87
86,88
90,91
90,92
92,93
92,94
93,94
93,95
121,122
121,123
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static void jme_drop_tx_map(struct jme_adapter *jme, int startidx, int endidx){	struct jme_ring *txring = &(jme->txring[0]);	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;	int mask = jme->tx_ring_mask;	int j;	for (j = startidx ; j < endidx ; ++j) {		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}}
static void
jme_drop_tx_map(struct jme_adapter *jme, int startidx, int endidx)
jme_drop_tx_map
struct jme_adapter *jme
struct jme_adapter
jme_adapter
*jme
*
jme
int startidx
int
startidx
startidx
int endidx
int
endidx
endidx
{	struct jme_ring *txring = &(jme->txring[0]);	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;	int mask = jme->tx_ring_mask;	int j;	for (j = startidx ; j < endidx ; ++j) {		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}}
struct jme_ring *txring = &(jme->txring[0]);
struct jme_ring *txring = &(jme->txring[0]);
struct jme_ring
jme_ring
*txring = &(jme->txring[0])
*
txring
= &(jme->txring[0])
&(jme->txring[0])
(jme->txring[0])
jme->txring[0]
jme->txring
jme
jme
txring
0
struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
struct jme_buffer_info
jme_buffer_info
*txbi = txring->bufinf
*
txbi
= txring->bufinf
txring->bufinf
txring
txring
bufinf
*ctxbi
*
ctxbi
int mask = jme->tx_ring_mask;
int mask = jme->tx_ring_mask;
int
mask = jme->tx_ring_mask
mask
= jme->tx_ring_mask
jme->tx_ring_mask
jme
jme
tx_ring_mask
int j;
int j;
int
j
j
for (j = startidx ; j < endidx ; ++j) {		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}
j = startidx ;
j = startidx
j
j
startidx
startidx
j < endidx
j
j
endidx
endidx
++j
j
j
{		ctxbi = txbi + ((startidx + j + 2) & (mask));		pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);				ctxbi->mapping = 0;				ctxbi->len = 0;	}
ctxbi = txbi + ((startidx + j + 2) & (mask));
ctxbi = txbi + ((startidx + j + 2) & (mask))
ctxbi
ctxbi
txbi + ((startidx + j + 2) & (mask))
txbi
txbi
((startidx + j + 2) & (mask))
(startidx + j + 2) & (mask)
(startidx + j + 2)
startidx + j + 2
startidx + j
startidx
startidx
j
j
2
(mask)
mask
mask
pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE);
pci_unmap_page(jme->pdev,				ctxbi->mapping,				ctxbi->len,				PCI_DMA_TODEVICE)
pci_unmap_page
pci_unmap_page
jme->pdev
jme
jme
pdev
ctxbi->mapping
ctxbi
ctxbi
mapping
ctxbi->len
ctxbi
ctxbi
len
PCI_DMA_TODEVICE
PCI_DMA_TODEVICE
ctxbi->mapping = 0;
ctxbi->mapping = 0
ctxbi->mapping
ctxbi
ctxbi
mapping
0
ctxbi->len = 0;
ctxbi->len = 0
ctxbi->len
ctxbi
ctxbi
len
0
-----joern-----
(18,22,0)
(19,23,0)
(68,6,0)
(51,16,0)
(14,6,0)
(22,18,0)
(1,64,0)
(47,12,0)
(13,23,0)
(35,60,0)
(50,5,0)
(29,16,0)
(34,30,0)
(41,60,0)
(37,4,0)
(4,18,0)
(5,50,0)
(9,1,0)
(15,42,0)
(66,6,0)
(18,4,0)
(18,69,0)
(58,62,0)
(7,6,0)
(45,57,0)
(31,34,0)
(38,18,0)
(25,34,0)
(17,19,0)
(56,15,0)
(65,3,0)
(62,61,0)
(66,50,0)
(23,13,0)
(39,4,0)
(30,64,0)
(59,5,0)
(23,64,0)
(36,1,0)
(32,36,0)
(53,13,0)
(63,30,0)
(10,33,0)
(11,22,0)
(20,16,0)
(60,23,0)
(22,12,0)
(22,57,0)
(1,12,0)
(49,19,0)
(12,20,0)
(5,2,0)
(20,6,0)
(57,6,0)
(23,60,0)
(2,61,0)
(0,6,0)
(33,42,0)
(13,3,0)
(40,20,0)
(12,22,0)
(26,6,0)
(62,57,0)
(54,66,0)
(55,2,0)
(36,3,0)
(13,1,0)
(46,2,0)
(27,6,0)
(4,42,0)
(60,61,0)
(44,33,0)
(16,66,0)
(33,43,0)
(3,64,0)
(52,42,0)
(2,5,0)
(21,62,0)
(67,23,0)
(23,19,0)
(19,30,0)
(42,69,0)
(12,1,0)
(28,42,0)
(50,66,0)
(19,1,0)
(34,1,0)
(48,13,0)
(57,62,0)
(24,36,0)
(16,20,0)
(23,19,1)
(62,58,1)
(36,32,1)
(33,44,1)
(2,55,1)
(16,51,1)
(13,1,1)
(39,37,1)
(34,31,1)
(18,69,1)
(10,42,1)
(10,15,1)
(66,50,1)
(21,45,1)
(58,21,1)
(23,13,1)
(67,13,1)
(50,5,1)
(15,42,1)
(35,1,1)
(4,39,1)
(65,36,1)
(13,3,1)
(28,57,1)
(31,25,1)
(60,61,1)
(33,43,1)
(23,60,1)
(46,54,1)
(34,1,1)
(37,38,1)
(45,20,1)
(22,57,1)
(16,66,1)
(42,69,1)
(55,46,1)
(13,48,1)
(63,34,1)
(30,63,1)
(53,19,1)
(5,59,1)
(52,28,1)
(22,11,1)
(12,20,1)
(56,3,1)
(17,60,1)
(20,16,1)
(19,30,1)
(40,66,1)
(19,1,1)
(47,9,1)
(23,67,1)
(36,1,1)
(18,4,1)
(25,23,1)
(49,17,1)
(3,65,1)
(22,18,1)
(15,56,1)
(4,42,1)
(24,30,1)
(19,49,1)
(59,2,1)
(5,2,1)
(29,40,1)
(11,18,1)
(48,53,1)
(38,47,1)
(8,33,1)
(9,33,1)
(42,52,1)
(57,62,1)
(2,61,1)
(33,42,1)
(62,61,1)
(60,41,1)
(1,12,1)
(12,22,1)
(51,29,1)
(44,10,1)
(32,24,1)
(41,35,1)
(18,33,2)
(66,50,2)
(23,33,2)
(12,22,2)
(23,19,2)
(19,33,2)
(1,33,2)
(32,33,2)
(4,33,2)
(15,42,2)
(39,33,2)
(31,33,2)
(12,33,2)
(20,16,2)
(49,33,2)
(67,33,2)
(17,33,2)
(23,13,2)
(38,33,2)
(22,18,2)
(57,62,2)
(33,33,2)
(60,61,2)
(15,33,2)
(25,33,2)
(22,57,2)
(13,1,2)
(9,33,2)
(36,1,2)
(11,33,2)
(41,33,2)
(18,4,2)
(4,42,2)
(23,60,2)
(3,33,2)
(47,33,2)
(60,33,2)
(18,69,2)
(37,33,2)
(10,33,2)
(1,12,2)
(50,5,2)
(56,33,2)
(48,33,2)
(13,3,2)
(33,42,2)
(22,33,2)
(42,69,2)
(62,61,2)
(13,33,2)
(30,33,2)
(36,33,2)
(35,33,2)
(19,1,2)
(34,33,2)
(33,43,2)
(53,33,2)
(24,33,2)
(19,30,2)
(65,33,2)
(5,2,2)
(2,61,2)
(12,20,2)
(34,1,2)
(44,33,2)
(16,66,2)
(63,33,2)
-----------------------------------
(0,for (j = startidx ; j < endidx ; ++j)
(1,ctxbi = txbi + ((startidx + j + 2)
(2,jme->txring)
(3,ctxbi->len = 0)
(4,j + 2)
(5,jme->txring[0])
(6,)
(7,ctxbi)
(8,RET)
(9,ctxbi)
(10,j)
(11,mask)
(12,txbi + ((startidx + j + 2)
(13,ctxbi->len)
(14,txbi)
(15,++j)
(16,txring->bufinf)
(17,ctxbi)
(18,startidx + j + 2)
(19,ctxbi->mapping)
(20,*txbi = txring->bufinf)
(21,jme)
(22,(startidx + j + 2)
(23,pci_unmap_page(jme->pdev,\n\\n\\t\\t\\t\\tctxbi->mapping,\n\\n\\t\\t\\t\\tctxbi->len,\n\\n\\t\\t\\t\\tPCI_DMA_TODEVICE)
(24,ctxbi)
(25,ctxbi)
(26,j)
(27,txring)
(28,j)
(29,txring)
(30,ctxbi->mapping = 0)
(31,mapping)
(32,len)
(33,j < endidx)
(34,ctxbi->mapping)
(35,jme)
(36,ctxbi->len)
(37,j)
(38,startidx)
(39,2)
(40,txbi)
(41,pdev)
(42,j = startidx)
(43,int endidx)
(44,endidx)
(45,mask)
(46,jme)
(47,txbi)
(48,len)
(49,mapping)
(50,&(jme->txring[0])
(51,bufinf)
(52,startidx)
(53,ctxbi)
(54,txring)
(55,txring)
(56,j)
(57,mask = jme->tx_ring_mask)
(58,tx_ring_mask)
(59,0)
(60,jme->pdev)
(61,struct jme_adapter *jme)
(62,jme->tx_ring_mask)
(63,0)
(64,)
(65,0)
(66,*txring = &(jme->txring[0])
(67,PCI_DMA_TODEVICE)
(68,mask)
(69,int startidx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^