-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,89,91
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(18,22,0)
(34,1,0)
(44,41,0)
(37,1,0)
(3,44,0)
(38,32,0)
(5,32,0)
(30,20,0)
(43,37,0)
(15,39,0)
(26,29,0)
(27,41,0)
(1,6,0)
(28,25,0)
(1,41,0)
(46,2,0)
(2,29,0)
(29,2,0)
(6,29,0)
(7,20,0)
(21,6,0)
(39,28,0)
(40,22,0)
(32,38,0)
(12,27,0)
(9,34,0)
(22,1,0)
(28,39,0)
(4,8,0)
(34,35,0)
(23,4,0)
(35,47,0)
(0,27,0)
(4,1,0)
(36,0,0)
(31,8,0)
(19,37,0)
(0,22,0)
(6,21,0)
(49,34,0)
(32,1,0)
(6,1,0)
(22,0,0)
(47,41,0)
(4,11,0)
(38,44,0)
(47,35,0)
(8,20,0)
(10,32,0)
(42,8,0)
(48,1,0)
(35,34,0)
(45,41,0)
(16,38,0)
(33,20,0)
(29,6,0)
(24,8,1)
(29,2,1)
(38,32,1)
(22,40,1)
(16,32,1)
(37,19,1)
(43,1,1)
(18,28,1)
(28,39,1)
(13,17,1)
(0,36,1)
(46,26,1)
(32,1,1)
(18,37,1)
(2,46,1)
(37,1,1)
(27,12,1)
(39,15,1)
(3,38,1)
(4,1,1)
(4,23,1)
(0,22,1)
(6,21,1)
(31,42,1)
(15,37,1)
(9,44,1)
(48,24,1)
(4,8,1)
(44,3,1)
(12,0,1)
(34,49,1)
(17,24,1)
(22,1,1)
(40,18,1)
(19,43,1)
(49,9,1)
(32,10,1)
(47,35,1)
(10,5,1)
(35,34,1)
(23,17,1)
(13,4,1)
(8,31,1)
(1,6,1)
(38,16,1)
(26,48,1)
(34,1,1)
(36,22,1)
(17,47,1)
(5,27,1)
(6,29,1)
(18,24,2)
(22,1,2)
(38,24,2)
(9,24,2)
(4,8,2)
(0,24,2)
(10,24,2)
(34,1,2)
(47,24,2)
(37,1,2)
(27,24,2)
(36,24,2)
(6,24,2)
(49,24,2)
(28,37,2)
(4,17,2)
(46,24,2)
(16,24,2)
(29,24,2)
(19,24,2)
(39,37,2)
(29,2,2)
(4,1,2)
(23,17,2)
(3,24,2)
(43,24,2)
(2,24,2)
(47,35,2)
(44,24,2)
(38,32,2)
(32,24,2)
(35,24,2)
(1,24,2)
(12,24,2)
(6,29,2)
(15,37,2)
(40,24,2)
(22,24,2)
(37,24,2)
(34,24,2)
(0,22,2)
(28,39,2)
(5,24,2)
(48,24,2)
(32,1,2)
(1,6,2)
(35,34,2)
(6,21,2)
(26,24,2)
-----------------------------------
(0,data[0].intOne)
(1,data = (twoIntsStruct *)
(2,sizeof(twoIntsStruct)
(3,0)
(4,free(data)
(5,data)
(6,(twoIntsStruct *)
(7,data)
(8,data = NULL)
(9,data)
(10,0)
(11,)
(12,0)
(13,RET)
(14, sizeof(twoIntsStruct)
(15,1)
(16,intTwo)
(17,GLOBAL_CONST_TRUE)
(18,data)
(19,NULL)
(20,)
(21,twoIntsStruct *)
(22,data[0])
(23,data)
(24,GLOBAL_CONST_TRUE)
(25,)
(26,100)
(27,data[0].intOne = 0)
(28,exit(-1)
(29,calloc(100, sizeof(twoIntsStruct)
(30,if(GLOBAL_CONST_TRUE)
(31,NULL)
(32,data[0])
(33,if(GLOBAL_CONST_TRUE)
(34,data[0])
(35,&data[0])
(36,intOne)
(37,data == NULL)
(38,data[0].intTwo)
(39,-1)
(40,0)
(41,)
(42,data)
(43,data)
(44,data[0].intTwo = 0)
(45,if (data == NULL)
(46,twoIntsStruct)
(47,printStructLine(&data[0])
(48,data)
(49,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^