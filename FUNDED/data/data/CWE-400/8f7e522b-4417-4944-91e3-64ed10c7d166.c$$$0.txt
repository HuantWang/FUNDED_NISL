-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
46,47
46,48
46,49
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,44,45,49,52,54,59,62,64,67,70,73,74,78,80,85,87,91,93,95,99,101,105,107,112,113
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
47,48
47,49
57,58
57,59
68,69
68,70
76,77
76,78
-----guardedBy-----
54,95
49,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(26,38,0)
(28,7,0)
(24,42,0)
(32,5,0)
(9,21,0)
(45,2,0)
(0,9,0)
(16,43,0)
(25,21,0)
(33,53,0)
(4,2,0)
(40,10,0)
(41,9,0)
(22,53,0)
(38,16,0)
(25,9,0)
(9,38,0)
(39,36,0)
(31,13,0)
(38,9,0)
(13,34,0)
(34,13,0)
(47,5,0)
(37,0,0)
(42,35,0)
(53,33,0)
(52,43,0)
(14,36,0)
(17,43,0)
(16,38,0)
(10,55,0)
(8,27,0)
(33,54,0)
(43,5,0)
(38,26,0)
(42,24,0)
(43,52,0)
(5,36,0)
(6,21,0)
(0,21,0)
(27,9,0)
(20,12,0)
(30,11,0)
(48,10,0)
(13,5,0)
(19,25,0)
(44,0,0)
(15,36,0)
(1,24,0)
(29,33,0)
(18,52,0)
(50,11,0)
(53,5,0)
(49,12,0)
(46,28,0)
(51,33,0)
(23,34,0)
(43,16,0)
(12,9,0)
(27,21,0)
(12,9,1)
(50,2,1)
(41,13,1)
(30,50,1)
(31,11,1)
(38,26,1)
(43,52,1)
(3,27,1)
(20,9,1)
(8,25,1)
(34,23,1)
(22,51,1)
(38,16,1)
(37,12,1)
(11,30,1)
(53,22,1)
(4,45,1)
(1,12,1)
(33,53,1)
(25,9,1)
(12,49,1)
(29,2,1)
(17,41,1)
(52,18,1)
(37,42,1)
(13,34,1)
(27,9,1)
(16,43,1)
(13,5,1)
(2,4,1)
(24,1,1)
(25,19,1)
(46,13,1)
(42,24,1)
(0,44,1)
(32,47,1)
(51,29,1)
(43,5,1)
(44,37,1)
(28,46,1)
(23,31,1)
(27,8,1)
(50,33,1)
(19,0,1)
(9,38,1)
(18,17,1)
(5,32,1)
(3,11,1)
(53,5,1)
(0,9,1)
(49,20,1)
(3,28,1)
(45,5,1)
(25,9,2)
(9,38,2)
(34,11,2)
(13,34,2)
(20,13,2)
(24,12,2)
(42,24,2)
(31,11,2)
(28,13,2)
(25,13,2)
(52,13,2)
(19,13,2)
(0,9,2)
(44,13,2)
(38,26,2)
(16,13,2)
(51,2,2)
(41,13,2)
(53,2,2)
(12,9,2)
(46,13,2)
(27,13,2)
(12,13,2)
(49,13,2)
(42,12,2)
(1,12,2)
(43,52,2)
(18,13,2)
(43,13,2)
(33,53,2)
(13,5,2)
(22,2,2)
(17,13,2)
(38,13,2)
(29,2,2)
(13,11,2)
(9,13,2)
(0,13,2)
(23,11,2)
(33,2,2)
(38,16,2)
(16,43,2)
(27,9,2)
(8,13,2)
(43,5,2)
(37,13,2)
(53,5,2)
-----------------------------------
(0,strcpy(myString, HELLO_STRING)
(1,1)
(2,STATIC_CONST_FIVE==5)
(3,RET)
(4,5)
(5,data = 0)
(6,if (myString == NULL)
(7,)
(8,myString)
(9,myString = (char *)
(10,)
(11,STATIC_CONST_FIVE==5)
(12,myString == NULL)
(13,data > strlen(HELLO_STRING)
(14,if(STATIC_CONST_FIVE==5)
(15,data)
(16,malloc(data*sizeof(char)
(17,data)
(18,char)
(19,myString)
(20,myString)
(21,)
(22,data)
(23,HELLO_STRING)
(24,-1)
(25,printLine(myString)
(26,char *)
(27,free(myString)
(28,printLine("Input is less than the length of the source string")
(29,stdin)
(30,5)
(31,data)
(32,0)
(33,fscanf(stdin, "%zu", &data)
(34,strlen(HELLO_STRING)
(35,)
(36,)
(37,myString)
(38,(char *)
(39,if(STATIC_CONST_FIVE==5)
(40,myString)
(41,myString)
(42,exit(-1)
(43,data*sizeof(char)
(44,HELLO_STRING)
(45,STATIC_CONST_FIVE)
(46,"Input is less than the length of the source string")
(47,data)
(48,if (data > strlen(HELLO_STRING)
(49,NULL)
(50,STATIC_CONST_FIVE)
(51,"%zu")
(52,sizeof(char)
(53,&data)
(54,)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^