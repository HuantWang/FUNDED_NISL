-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
    break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
46,47
46,48
47,48
52,53
52,54
53,54
54,55
54,56
55,56
57,58
57,59
59,60
61,62
61,63
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
86,87
88,89
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,41,44,48,49,50,51,56,58,60,65,66,69,70,76,77,80,84,85,87,90,95,96,97
-----computeFrom-----
12,13
12,14
62,63
62,64
63,64
63,65
67,68
67,69
74,75
74,76
78,79
78,80
-----guardedBy-----
69,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
-----joern-----
(25,27,0)
(57,27,0)
(36,22,0)
(23,37,0)
(4,39,0)
(22,36,0)
(1,19,0)
(7,36,0)
(38,5,0)
(27,25,0)
(15,57,0)
(24,54,0)
(57,17,0)
(19,39,0)
(54,28,0)
(10,28,0)
(26,54,0)
(14,5,0)
(17,57,0)
(27,5,0)
(16,28,0)
(32,48,0)
(33,44,0)
(52,26,0)
(44,11,0)
(39,19,0)
(47,8,0)
(45,26,0)
(36,27,0)
(51,32,0)
(56,28,0)
(55,5,0)
(31,54,0)
(42,9,0)
(3,8,0)
(50,8,0)
(21,3,0)
(43,25,0)
(17,49,0)
(49,27,0)
(36,32,0)
(19,27,0)
(37,28,0)
(18,48,0)
(35,8,0)
(6,48,0)
(13,48,0)
(41,27,0)
(12,57,0)
(20,13,0)
(30,8,0)
(49,17,0)
(39,8,0)
(46,49,0)
(32,36,0)
(40,39,0)
(2,28,0)
(0,49,0)
(49,27,1)
(34,50,1)
(51,13,1)
(6,18,1)
(27,25,1)
(13,20,1)
(23,34,1)
(26,45,1)
(57,12,1)
(51,48,1)
(50,3,1)
(29,56,1)
(53,27,1)
(40,53,1)
(36,7,1)
(49,0,1)
(2,37,1)
(32,36,1)
(3,21,1)
(7,51,1)
(20,44,1)
(52,34,1)
(39,19,1)
(56,32,1)
(29,2,1)
(17,49,1)
(4,40,1)
(19,1,1)
(0,46,1)
(46,57,1)
(43,41,1)
(12,15,1)
(57,27,1)
(48,6,1)
(25,43,1)
(36,27,1)
(56,17,1)
(34,47,1)
(33,32,1)
(13,48,1)
(18,17,1)
(37,23,1)
(21,53,1)
(15,26,1)
(1,4,1)
(19,27,1)
(45,52,1)
(36,22,1)
(32,48,1)
(47,39,1)
(44,33,1)
(17,57,1)
(40,53,2)
(37,34,2)
(23,34,2)
(47,53,2)
(46,57,2)
(57,34,2)
(51,17,2)
(44,32,2)
(45,34,2)
(17,49,2)
(39,53,2)
(17,57,2)
(50,53,2)
(36,17,2)
(19,53,2)
(51,32,2)
(49,57,2)
(27,25,2)
(13,32,2)
(36,32,2)
(1,53,2)
(12,34,2)
(6,17,2)
(17,34,2)
(4,53,2)
(7,17,2)
(52,34,2)
(18,17,2)
(36,27,2)
(36,22,2)
(33,32,2)
(13,48,2)
(15,34,2)
(32,32,2)
(32,36,2)
(20,32,2)
(32,17,2)
(21,53,2)
(0,57,2)
(39,19,2)
(49,27,2)
(48,17,2)
(7,32,2)
(32,48,2)
(2,34,2)
(57,27,2)
(56,34,2)
(26,34,2)
(19,27,2)
(3,53,2)
-----------------------------------
(0,20)
(1,count)
(2,break;)
(3,printLine("Benign, fixed string")
(4,"%d")
(5,)
(6,0)
(7,count)
(8,)
(9,)
(10,case 7:)
(11,)
(12,0)
(13,i++)
(14,switch(8)
(15,count)
(16,default:)
(17,count > 0 && count <= 20)
(18,i)
(19,&count)
(20,i)
(21,"Benign, fixed string")
(22,size_t)
(23,"Benign, fixed string")
(24,i)
(25,-1)
(26,i = 0)
(27,count = -1)
(28,)
(29,RET)
(30,case 6:)
(31,if (count > 0 && count <= 20)
(32,i < (size_t)
(33,"Hello")
(34,8)
(35,default:)
(36,(size_t)
(37,printLine("Benign, fixed string")
(38,switch(6)
(39,fscanf(stdin, "%d", &count)
(40,stdin)
(41,count)
(42,for (i = 0; i < (size_t)
(43,1)
(44,printLine("Hello")
(45,0)
(46,count)
(47,break;)
(48,i = 0)
(49,count <= 20)
(50,break;)
(51,i)
(52,i)
(53,6)
(54,)
(55,count)
(56,break;)
(57,count > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^