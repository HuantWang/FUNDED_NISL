-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad()
{
    twoIntsStruct * data;
    CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
93,95
94,95
95,96
95,97
96,97
98,99
98,100
98,101
101,102
102,103
102,104
103,104
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,89,90,92,97,99,100,104,105,106
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad(){    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad
{    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(19,43,0)
(2,29,0)
(14,34,0)
(11,47,0)
(22,20,0)
(28,15,0)
(43,29,0)
(52,5,0)
(39,45,0)
(21,20,0)
(52,17,0)
(3,1,0)
(45,39,0)
(27,5,0)
(49,9,0)
(1,40,0)
(25,15,0)
(48,19,0)
(44,52,0)
(9,15,0)
(10,23,0)
(0,12,0)
(8,22,0)
(31,43,0)
(53,1,0)
(32,29,0)
(19,48,0)
(36,22,0)
(5,52,0)
(9,2,0)
(47,29,0)
(43,19,0)
(26,8,0)
(16,29,0)
(34,14,0)
(6,47,0)
(42,40,0)
(37,29,0)
(12,0,0)
(0,41,0)
(54,41,0)
(17,29,0)
(31,34,0)
(15,9,0)
(18,23,0)
(13,31,0)
(7,17,0)
(5,43,0)
(51,0,0)
(46,2,0)
(41,0,0)
(33,5,0)
(8,43,0)
(34,31,0)
(4,8,0)
(14,29,0)
(40,43,0)
(24,31,0)
(50,39,0)
(40,29,0)
(23,43,0)
(22,8,0)
(45,35,0)
(20,29,0)
(19,12,0)
(12,19,0)
(38,43,0)
(18,10,1)
(53,3,1)
(41,54,1)
(28,25,1)
(11,6,1)
(20,21,1)
(19,48,1)
(43,19,1)
(52,44,1)
(51,38,1)
(7,52,1)
(14,34,1)
(52,5,1)
(30,9,1)
(24,13,1)
(27,33,1)
(38,47,1)
(40,42,1)
(3,14,1)
(45,39,1)
(8,43,1)
(15,28,1)
(5,43,1)
(12,0,1)
(50,23,1)
(22,8,1)
(26,4,1)
(44,5,1)
(4,45,1)
(31,24,1)
(8,26,1)
(31,43,1)
(19,12,1)
(1,53,1)
(39,50,1)
(10,43,1)
(36,8,1)
(13,17,1)
(40,43,1)
(4,23,1)
(17,7,1)
(0,41,1)
(23,18,1)
(22,36,1)
(42,1,1)
(33,20,1)
(9,15,1)
(34,31,1)
(5,27,1)
(49,40,1)
(23,43,1)
(25,49,1)
(54,51,1)
(21,22,1)
(47,11,1)
(45,39,2)
(14,34,2)
(34,31,2)
(43,19,2)
(12,0,2)
(50,23,2)
(40,43,2)
(5,43,2)
(0,41,2)
(52,5,2)
(8,43,2)
(19,48,2)
(23,43,2)
(39,23,2)
(9,15,2)
(31,43,2)
(22,8,2)
(45,23,2)
(19,12,2)
-----------------------------------
(0,100*sizeof(twoIntsStruct)
(1,myUnion.unionFirst)
(2,)
(3,myUnion)
(4,data)
(5,data[0])
(6,data)
(7,0)
(8,data[0])
(9,* data = myUnion.unionSecond)
(10,data)
(11,NULL)
(12,malloc(100*sizeof(twoIntsStruct)
(13,data)
(14,printStructLine(&data[0])
(15,myUnion.unionSecond)
(16,data)
(17,data[0].intTwo = 0)
(18,NULL)
(19,(twoIntsStruct *)
(20,data[0].intOne = 0)
(21,0)
(22,data[0].intOne)
(23,data == NULL)
(24,0)
(25,myUnion)
(26,0)
(27,0)
(28,unionSecond)
(29,)
(30,RET)
(31,data[0])
(32,myUnion)
(33,data)
(34,&data[0])
(35,)
(36,intOne)
(37,if (data == NULL)
(38,data)
(39,-1)
(40,myUnion.unionFirst = data)
(41,sizeof(twoIntsStruct)
(42,data)
(43,data = (twoIntsStruct *)
(44,intTwo)
(45,exit(-1)
(46,data)
(47,data = NULL)
(48,twoIntsStruct *)
(49,data)
(50,1)
(51,100)
(52,data[0].intTwo)
(53,unionFirst)
(54,twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^