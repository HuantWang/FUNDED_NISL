-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,86,87,89
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad(){    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad
{    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,9,0)
(5,16,0)
(3,49,0)
(43,49,0)
(0,19,0)
(40,25,0)
(32,20,0)
(36,49,0)
(18,20,0)
(10,1,0)
(32,12,0)
(16,20,0)
(17,41,0)
(30,2,0)
(46,49,0)
(38,46,0)
(24,26,0)
(42,27,0)
(13,19,0)
(32,33,0)
(17,19,0)
(15,26,0)
(28,2,0)
(7,9,0)
(31,24,0)
(27,41,0)
(45,29,0)
(9,20,0)
(27,20,0)
(40,16,0)
(41,27,0)
(44,20,0)
(12,32,0)
(20,19,0)
(22,9,0)
(48,25,0)
(33,26,0)
(33,32,0)
(14,0,0)
(35,46,0)
(2,28,0)
(37,1,0)
(8,44,0)
(47,16,0)
(25,19,0)
(41,17,0)
(20,32,0)
(34,6,0)
(6,0,0)
(50,44,0)
(11,29,0)
(26,33,0)
(39,27,0)
(26,24,0)
(16,40,0)
(4,40,0)
(28,21,0)
(9,6,0)
(7,25,1)
(8,50,1)
(22,7,1)
(26,24,1)
(10,29,1)
(25,48,1)
(5,28,1)
(39,42,1)
(11,46,1)
(16,20,1)
(0,14,1)
(20,32,1)
(2,30,1)
(16,47,1)
(27,39,1)
(4,16,1)
(23,1,1)
(40,4,1)
(17,41,1)
(44,8,1)
(47,5,1)
(34,9,1)
(35,38,1)
(24,31,1)
(9,22,1)
(42,0,1)
(9,20,1)
(1,37,1)
(28,2,1)
(18,29,1)
(45,11,1)
(27,20,1)
(31,15,1)
(32,12,1)
(46,35,1)
(37,10,1)
(44,20,1)
(5,44,1)
(40,16,1)
(10,17,1)
(15,18,1)
(14,6,1)
(29,45,1)
(33,26,1)
(48,40,1)
(32,33,1)
(6,9,1)
(50,20,1)
(41,27,1)
(30,44,1)
(6,34,1)
(33,29,2)
(9,29,2)
(40,29,2)
(16,20,2)
(9,20,2)
(15,29,2)
(0,29,2)
(32,33,2)
(6,29,2)
(41,29,2)
(32,29,2)
(28,44,2)
(33,26,2)
(44,20,2)
(16,29,2)
(27,20,2)
(34,29,2)
(25,29,2)
(8,29,2)
(20,29,2)
(39,29,2)
(30,44,2)
(47,29,2)
(26,29,2)
(22,29,2)
(40,16,2)
(4,29,2)
(41,27,2)
(6,9,2)
(17,29,2)
(18,29,2)
(24,29,2)
(5,29,2)
(27,29,2)
(28,2,2)
(44,29,2)
(17,41,2)
(14,29,2)
(2,44,2)
(48,29,2)
(42,29,2)
(50,29,2)
(31,29,2)
(20,32,2)
(26,24,2)
(32,12,2)
(7,29,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,5==5)
(2,-1)
(3,data)
(4,intOne)
(5,data)
(6,data[0].intTwo)
(7,data)
(8,NULL)
(9,data[0])
(10,5)
(11,5)
(12,twoIntsStruct *)
(13,if (data == NULL)
(14,0)
(15,100)
(16,data[0])
(17,printStructLine(&data[0])
(18,data)
(19,)
(20,data = (twoIntsStruct *)
(21,)
(22,0)
(23,RET)
(24,sizeof(twoIntsStruct)
(25,data[0].intOne = 0)
(26,100*sizeof(twoIntsStruct)
(27,data[0])
(28,exit(-1)
(29,5==5)
(30,1)
(31,twoIntsStruct)
(32,(twoIntsStruct *)
(33,malloc(100*sizeof(twoIntsStruct)
(34,intTwo)
(35,NULL)
(36,if(5==5)
(37,5)
(38,data)
(39,0)
(40,data[0].intOne)
(41,&data[0])
(42,data)
(43,if(5==5)
(44,data == NULL)
(45,5)
(46,data = NULL)
(47,0)
(48,0)
(49,)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^