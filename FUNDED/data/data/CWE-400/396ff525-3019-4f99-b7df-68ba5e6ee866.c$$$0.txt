-----label-----
1
-----code-----
static void
timerupcall(struct lwp *l, void *arg)
{
	struct ptimers *pt = (struct ptimers *)arg;
	unsigned int i, fired, done;
	extern struct pool siginfo_pool;	/* XXX Ew. */

	KDASSERT(l->l_proc->p_sa);
	/* Bail out if we do not own the virtual processor */
	if (l->l_savp->savp_lwp != l)
		return ;

	KERNEL_PROC_LOCK(l);

	fired = pt->pts_fired;
	done = 0;
	while ((i = ffs(fired)) != 0) {
		siginfo_t *si;
		int mask = 1 << --i;
		int f;

		f = l->l_flag & L_SA;
		l->l_flag &= ~L_SA;
		si = pool_get(&siginfo_pool, PR_WAITOK);
		si->_info = pt->pts_timers[i]->pt_info.ksi_info;
		if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,
		    sizeof(*si), si) != 0) {
			pool_put(&siginfo_pool, si);
			/* XXX What do we do here?? */
		} else
			done |= mask;
		fired &= ~mask;
		l->l_flag |= f;
	}
	pt->pts_fired &= ~done;
	if (pt->pts_fired == 0)
		l->l_proc->p_userret = NULL;

	KERNEL_PROC_UNLOCK(l);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
17,18
18,19
18,20
19,20
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
27,28
29,30
31,32
33,34
34,35
34,36
34,37
34,38
36,37
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
54,55
58,59
58,60
59,60
59,61
60,61
60,62
61,62
61,63
62,63
66,67
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
91,92
91,93
92,93
94,95
94,96
95,96
97,98
100,101
100,102
100,103
100,104
100,105
100,106
100,107
100,108
100,109
100,110
101,102
102,103
102,104
103,104
105,106
105,107
108,109
109,110
109,111
111,112
111,113
113,114
114,115
114,116
116,117
117,118
119,120
120,121
120,122
122,123
124,125
125,126
125,127
126,127
128,129
128,130
129,130
129,131
130,131
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
142,143
144,145
145,146
145,147
146,147
148,149
148,150
148,151
149,150
151,152
152,153
154,155
156,157
157,158
157,159
158,159
158,160
159,160
162,163
162,164
163,164
163,165
164,165
164,166
165,166
165,167
166,167
169,170
173,174
173,175
173,176
174,175
174,176
175,176
175,177
175,178
175,179
175,180
175,181
175,182
176,177
178,179
180,181
180,182
181,182
183,184
185,186
187,188
189,190
190,191
191,192
192,193
194,195
197,198
198,199
199,200
199,201
199,202
200,201
202,203
203,204
205,206
207,208
208,209
208,210
209,210
211,212
213,214
214,215
214,216
215,216
217,218
218,219
220,221
221,222
221,223
222,223
222,224
223,224
226,227
228,229
229,230
229,231
230,231
230,232
231,232
234,235
235,236
237,238
237,239
238,239
238,240
239,240
239,241
240,241
244,245
245,246
245,247
246,247
246,248
247,248
247,249
248,249
252,253
254,255
255,256
255,257
256,257
258,259
-----nextToken-----
2,4,7,9,10,12,14,15,20,22,23,28,30,32,35,37,39,41,45,47,51,55,56,57,63,64,65,67,68,72,74,78,81,82,86,87,93,96,98,99,104,106,107,110,112,115,118,121,123,127,131,132,134,139,140,143,147,150,153,155,160,161,167,168,170,171,172,177,179,182,184,186,188,193,195,196,201,204,206,210,212,216,219,224,225,227,232,233,236,241,242,243,249,250,251,253,257,259
-----computeFrom-----
59,60
59,61
76,77
76,78
84,85
84,86
89,90
89,91
91,92
91,93
114,115
114,116
125,126
125,127
128,129
128,130
136,137
136,138
145,146
145,147
157,158
157,159
174,175
174,176
180,181
180,182
208,209
208,210
214,215
214,216
221,222
221,223
229,230
229,231
238,239
238,240
245,246
245,247
-----guardedBy-----
195,206
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;LiteralExpression;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static voidtimerupcall(struct lwp *l, void *arg){	struct ptimers *pt = (struct ptimers *)arg;	unsigned int i, fired, done;	extern struct pool siginfo_pool;	/* XXX Ew. */	KDASSERT(l->l_proc->p_sa);	/* Bail out if we do not own the virtual processor */	if (l->l_savp->savp_lwp != l)		return ;	KERNEL_PROC_LOCK(l);	fired = pt->pts_fired;	done = 0;	while ((i = ffs(fired)) != 0) {		siginfo_t *si;		int mask = 1 << --i;		int f;		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = pt->pts_timers[i]->pt_info.ksi_info;		if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			/* XXX What do we do here?? */		} else			done |= mask;		fired &= ~mask;		l->l_flag |= f;	}	pt->pts_fired &= ~done;	if (pt->pts_fired == 0)		l->l_proc->p_userret = NULL;	KERNEL_PROC_UNLOCK(l);}
static void
timerupcall(struct lwp *l, void *arg)
timerupcall
struct lwp *l
struct lwp
lwp
*l
*
l
void *arg
void
*arg
*
arg
{	struct ptimers *pt = (struct ptimers *)arg;	unsigned int i, fired, done;	extern struct pool siginfo_pool;	/* XXX Ew. */	KDASSERT(l->l_proc->p_sa);	/* Bail out if we do not own the virtual processor */	if (l->l_savp->savp_lwp != l)		return ;	KERNEL_PROC_LOCK(l);	fired = pt->pts_fired;	done = 0;	while ((i = ffs(fired)) != 0) {		siginfo_t *si;		int mask = 1 << --i;		int f;		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = pt->pts_timers[i]->pt_info.ksi_info;		if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			/* XXX What do we do here?? */		} else			done |= mask;		fired &= ~mask;		l->l_flag |= f;	}	pt->pts_fired &= ~done;	if (pt->pts_fired == 0)		l->l_proc->p_userret = NULL;	KERNEL_PROC_UNLOCK(l);}
struct ptimers *pt = (struct ptimers *)arg;
struct ptimers *pt = (struct ptimers *)arg;
struct ptimers
ptimers
*pt = (struct ptimers *)arg
*
pt
= (struct ptimers *)arg
(struct ptimers *)arg
struct ptimers *
struct ptimers
ptimers
*
*
arg
arg
unsigned int i, fired, done;
unsigned int i, fired, done;
unsigned int
i
i
fired
fired
done
done
extern struct pool siginfo_pool;
extern struct pool siginfo_pool;
extern struct pool
pool
siginfo_pool
siginfo_pool
KDASSERT(l->l_proc->p_sa);
KDASSERT(l->l_proc->p_sa)
KDASSERT
KDASSERT
l->l_proc->p_sa
l->l_proc
l
l
l_proc
p_sa
if (l->l_savp->savp_lwp != l)		return ;
l->l_savp->savp_lwp != l
l->l_savp->savp_lwp
l->l_savp
l
l
l_savp
savp_lwp
l
l
return ;
KERNEL_PROC_LOCK(l);
KERNEL_PROC_LOCK(l)
KERNEL_PROC_LOCK
KERNEL_PROC_LOCK
l
l
fired = pt->pts_fired;
fired = pt->pts_fired
fired
fired
pt->pts_fired
pt
pt
pts_fired
done = 0;
done = 0
done
done
0
while ((i = ffs(fired)) != 0) {		siginfo_t *si;		int mask = 1 << --i;		int f;		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = pt->pts_timers[i]->pt_info.ksi_info;		if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			/* XXX What do we do here?? */		} else			done |= mask;		fired &= ~mask;		l->l_flag |= f;	}
(i = ffs(fired)) != 0
(i = ffs(fired))
i = ffs(fired)
i
i
ffs(fired)
ffs
ffs
fired
fired
0
{		siginfo_t *si;		int mask = 1 << --i;		int f;		f = l->l_flag & L_SA;		l->l_flag &= ~L_SA;		si = pool_get(&siginfo_pool, PR_WAITOK);		si->_info = pt->pts_timers[i]->pt_info.ksi_info;		if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			/* XXX What do we do here?? */		} else			done |= mask;		fired &= ~mask;		l->l_flag |= f;	}
siginfo_t *si;
siginfo_t *si;
siginfo_t
siginfo_t
*si
*
si
int mask = 1 << --i;
int mask = 1 << --i;
int
mask = 1 << --i
mask
= 1 << --i
1 << --i
1
--i
i
i
int f;
int f;
int
f
f
f = l->l_flag & L_SA;
f = l->l_flag & L_SA
f
f
l->l_flag & L_SA
l->l_flag
l
l
l_flag
L_SA
L_SA
l->l_flag &= ~L_SA;
l->l_flag &= ~L_SA
l->l_flag
l
l
l_flag
~L_SA
L_SA
L_SA
si = pool_get(&siginfo_pool, PR_WAITOK);
si = pool_get(&siginfo_pool, PR_WAITOK)
si
si
pool_get(&siginfo_pool, PR_WAITOK)
pool_get
pool_get
&siginfo_pool
siginfo_pool
siginfo_pool
PR_WAITOK
PR_WAITOK
si->_info = pt->pts_timers[i]->pt_info.ksi_info;
si->_info = pt->pts_timers[i]->pt_info.ksi_info
si->_info
si
si
_info
pt->pts_timers[i]->pt_info.ksi_info
pt->pts_timers[i]->pt_info
pt->pts_timers[i]
pt->pts_timers
pt
pt
pts_timers
i
i
pt_info
ksi_info
if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si) != 0) {			pool_put(&siginfo_pool, si);			/* XXX What do we do here?? */		} else			done |= mask;
sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si) != 0
sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,		    sizeof(*si), si)
sa_upcall
sa_upcall
l
l
SA_UPCALL_SIGEV | SA_UPCALL_DEFER
SA_UPCALL_SIGEV
SA_UPCALL_SIGEV
SA_UPCALL_DEFER
SA_UPCALL_DEFER
NULL
NULL
l
l
sizeof(*si)
(*si)
*si
si
si
si
si
0
{			pool_put(&siginfo_pool, si);			/* XXX What do we do here?? */		}
pool_put(&siginfo_pool, si);
pool_put(&siginfo_pool, si)
pool_put
pool_put
&siginfo_pool
siginfo_pool
siginfo_pool
si
si
done |= mask;
done |= mask
done
done
mask
mask
fired &= ~mask;
fired &= ~mask
fired
fired
~mask
mask
mask
l->l_flag |= f;
l->l_flag |= f
l->l_flag
l
l
l_flag
f
f
pt->pts_fired &= ~done;
pt->pts_fired &= ~done
pt->pts_fired
pt
pt
pts_fired
~done
done
done
if (pt->pts_fired == 0)		l->l_proc->p_userret = NULL;
pt->pts_fired == 0
pt->pts_fired
pt
pt
pts_fired
0
l->l_proc->p_userret = NULL;
l->l_proc->p_userret = NULL
l->l_proc->p_userret
l->l_proc
l
l
l_proc
p_userret
NULL
NULL
KERNEL_PROC_UNLOCK(l);
KERNEL_PROC_UNLOCK(l)
KERNEL_PROC_UNLOCK
KERNEL_PROC_UNLOCK
l
l
-----joern-----
(98,17,0)
(14,71,0)
(112,107,0)
(83,19,0)
(47,38,0)
(119,20,0)
(35,15,0)
(60,110,0)
(124,84,0)
(51,52,0)
(41,23,0)
(7,65,0)
(34,17,0)
(114,65,0)
(30,76,0)
(12,76,0)
(108,134,0)
(15,20,0)
(122,20,0)
(2,19,0)
(0,52,0)
(120,58,0)
(134,134,0)
(82,78,0)
(130,67,0)
(14,62,0)
(22,84,0)
(91,55,0)
(87,1,0)
(36,103,0)
(80,23,0)
(115,23,0)
(67,106,0)
(128,15,0)
(61,30,0)
(17,34,0)
(67,55,0)
(110,60,0)
(28,51,0)
(69,106,0)
(117,67,0)
(104,131,0)
(73,32,0)
(132,17,0)
(119,30,0)
(32,20,0)
(29,89,0)
(87,102,0)
(60,121,0)
(64,78,0)
(120,55,0)
(27,33,0)
(56,52,0)
(39,37,0)
(29,22,0)
(93,55,0)
(125,23,0)
(75,123,0)
(87,55,0)
(30,119,0)
(92,0,0)
(39,67,0)
(51,78,0)
(37,55,0)
(103,115,0)
(106,67,0)
(40,84,0)
(6,0,0)
(55,120,0)
(88,115,0)
(31,7,0)
(129,23,0)
(131,84,0)
(65,52,0)
(35,22,0)
(66,87,0)
(100,105,0)
(99,23,0)
(17,20,0)
(38,33,0)
(9,58,0)
(19,83,0)
(133,119,0)
(19,105,0)
(85,110,0)
(22,29,0)
(135,84,0)
(127,43,0)
(78,51,0)
(24,103,0)
(74,93,0)
(63,82,0)
(107,115,0)
(105,19,0)
(71,14,0)
(97,15,0)
(18,23,0)
(118,82,0)
(15,35,0)
(67,43,0)
(96,129,0)
(3,134,0)
(67,39,0)
(134,129,0)
(11,22,0)
(35,93,0)
(33,38,0)
(45,67,0)
(58,120,0)
(101,115,0)
(125,20,0)
(72,35,0)
(53,120,0)
(105,20,0)
(88,84,0)
(70,65,0)
(115,103,0)
(89,29,0)
(102,87,0)
(121,60,0)
(90,121,0)
(6,23,0)
(21,89,0)
(16,105,0)
(57,102,0)
(89,35,0)
(77,89,0)
(107,38,0)
(113,67,0)
(78,38,0)
(123,34,0)
(59,51,0)
(123,20,0)
(83,23,0)
(79,34,0)
(126,125,0)
(49,23,0)
(122,131,0)
(122,35,0)
(94,84,0)
(55,84,0)
(93,124,0)
(4,93,0)
(14,52,0)
(52,23,0)
(109,88,0)
(110,84,0)
(67,20,0)
(50,0,0)
(26,37,0)
(43,67,0)
(95,119,0)
(38,107,0)
(42,122,0)
(10,23,0)
(52,14,0)
(8,14,0)
(63,124,0)
(44,63,0)
(78,82,0)
(134,110,0)
(13,23,0)
(116,84,0)
(37,39,0)
(65,7,0)
(89,20,0)
(5,122,0)
(81,129,0)
(46,6,0)
(32,23,0)
(131,122,0)
(136,23,0)
(86,106,0)
(34,123,0)
(111,88,0)
(54,29,0)
(25,48,0)
(124,63,0)
(82,63,0)
(0,6,0)
(35,84,0)
(121,38,0)
(103,52,0)
(68,60,0)
(5,42,1)
(89,77,1)
(78,64,1)
(134,110,1)
(79,17,1)
(24,36,1)
(127,67,1)
(15,20,1)
(48,123,1)
(121,90,1)
(120,58,1)
(19,2,1)
(60,121,1)
(118,78,1)
(88,115,1)
(120,53,1)
(22,29,1)
(8,56,1)
(87,55,1)
(43,67,1)
(107,115,1)
(4,74,1)
(98,83,1)
(114,6,1)
(34,79,1)
(133,7,1)
(65,70,1)
(89,20,1)
(122,5,1)
(75,34,1)
(111,134,1)
(95,133,1)
(27,38,1)
(17,132,1)
(14,8,1)
(125,20,1)
(42,22,1)
(47,129,1)
(0,92,1)
(52,14,1)
(123,34,1)
(63,82,1)
(14,71,1)
(11,110,1)
(129,81,1)
(131,104,1)
(32,73,1)
(63,44,1)
(29,89,1)
(70,114,1)
(35,22,1)
(67,130,1)
(101,32,1)
(132,98,1)
(3,43,1)
(37,26,1)
(15,97,1)
(77,21,1)
(97,128,1)
(92,50,1)
(86,69,1)
(112,47,1)
(58,9,1)
(72,15,1)
(46,0,1)
(87,102,1)
(35,72,1)
(91,131,1)
(103,24,1)
(47,35,1)
(117,113,1)
(61,119,1)
(39,37,1)
(33,38,1)
(32,20,1)
(50,33,1)
(104,122,1)
(38,107,1)
(7,65,1)
(131,122,1)
(30,61,1)
(126,7,1)
(28,59,1)
(35,15,1)
(113,106,1)
(2,105,1)
(69,45,1)
(54,89,1)
(85,33,1)
(67,55,1)
(34,17,1)
(82,78,1)
(67,106,1)
(57,43,1)
(29,54,1)
(100,16,1)
(17,20,1)
(109,111,1)
(76,12,1)
(119,20,1)
(73,123,1)
(67,39,1)
(37,55,1)
(33,27,1)
(51,28,1)
(119,95,1)
(6,0,1)
(78,38,1)
(93,55,1)
(30,119,1)
(21,11,1)
(67,20,1)
(25,125,1)
(19,105,1)
(123,75,1)
(124,63,1)
(25,48,1)
(53,58,1)
(107,112,1)
(103,52,1)
(74,55,1)
(65,52,1)
(9,91,1)
(68,85,1)
(45,124,1)
(134,134,1)
(78,51,1)
(123,20,1)
(134,108,1)
(128,88,1)
(93,4,1)
(66,102,1)
(36,101,1)
(96,115,1)
(12,30,1)
(51,52,1)
(126,76,1)
(31,65,1)
(122,35,1)
(134,129,1)
(35,93,1)
(125,126,1)
(7,31,1)
(26,117,1)
(110,60,1)
(106,86,1)
(122,20,1)
(89,35,1)
(115,103,1)
(87,66,1)
(105,20,1)
(16,52,1)
(90,68,1)
(82,118,1)
(108,3,1)
(121,38,1)
(0,52,1)
(81,96,1)
(111,87,1)
(55,120,1)
(44,82,1)
(83,19,1)
(14,62,1)
(59,93,1)
(130,39,1)
(88,109,1)
(102,57,1)
(64,51,1)
(105,100,1)
(43,127,1)
(6,46,1)
(22,29,2)
(109,33,2)
(51,33,2)
(65,52,2)
(39,37,2)
(15,20,2)
(27,123,2)
(36,123,2)
(35,33,2)
(124,33,2)
(93,55,2)
(66,43,2)
(104,33,2)
(101,123,2)
(26,33,2)
(63,82,2)
(43,67,2)
(78,51,2)
(87,43,2)
(88,115,2)
(35,93,2)
(123,34,2)
(57,43,2)
(58,33,2)
(95,7,2)
(60,33,2)
(55,33,2)
(76,7,2)
(125,20,2)
(112,33,2)
(68,33,2)
(29,89,2)
(74,33,2)
(112,123,2)
(119,7,2)
(134,134,2)
(85,33,2)
(127,33,2)
(44,33,2)
(46,123,2)
(14,71,2)
(31,123,2)
(7,123,2)
(67,39,2)
(55,120,2)
(32,20,2)
(39,33,2)
(35,22,2)
(45,33,2)
(131,122,2)
(12,7,2)
(81,123,2)
(87,102,2)
(67,55,2)
(77,33,2)
(4,33,2)
(134,43,2)
(53,33,2)
(14,62,2)
(50,123,2)
(61,7,2)
(72,33,2)
(38,33,2)
(64,33,2)
(102,43,2)
(96,123,2)
(121,33,2)
(92,123,2)
(122,20,2)
(67,106,2)
(122,35,2)
(128,33,2)
(25,48,2)
(134,110,2)
(103,123,2)
(89,33,2)
(35,15,2)
(48,123,2)
(0,123,2)
(115,103,2)
(105,20,2)
(30,7,2)
(22,33,2)
(90,33,2)
(37,55,2)
(43,33,2)
(47,123,2)
(106,33,2)
(33,33,2)
(38,107,2)
(30,119,2)
(33,38,2)
(54,33,2)
(78,33,2)
(6,0,2)
(29,33,2)
(113,33,2)
(19,105,2)
(0,52,2)
(59,33,2)
(86,33,2)
(11,33,2)
(97,33,2)
(121,38,2)
(118,33,2)
(133,7,2)
(89,20,2)
(9,33,2)
(107,123,2)
(73,123,2)
(126,123,2)
(28,33,2)
(33,123,2)
(120,33,2)
(103,52,2)
(37,33,2)
(32,123,2)
(107,33,2)
(21,33,2)
(69,33,2)
(24,123,2)
(15,33,2)
(52,14,2)
(51,52,2)
(70,123,2)
(122,33,2)
(82,78,2)
(82,33,2)
(114,123,2)
(120,58,2)
(129,123,2)
(67,20,2)
(89,35,2)
(6,123,2)
(83,19,2)
(134,129,2)
(131,33,2)
(125,123,2)
(87,55,2)
(60,121,2)
(47,33,2)
(93,33,2)
(27,33,2)
(88,33,2)
(5,33,2)
(38,123,2)
(34,17,2)
(63,33,2)
(110,33,2)
(130,33,2)
(117,33,2)
(111,33,2)
(67,33,2)
(91,33,2)
(110,60,2)
(42,33,2)
(108,43,2)
(115,123,2)
(107,115,2)
(119,20,2)
(78,38,2)
(17,20,2)
(65,123,2)
(124,63,2)
(7,65,2)
(3,43,2)
(123,20,2)
-----------------------------------
(0,pt->pts_fired)
(1,)
(2,p_sa)
(3,done)
(4,_info)
(5,l_flag)
(6,pt->pts_fired &= ~done)
(7,pt->pts_fired == 0)
(8,arg)
(9,siginfo_pool)
(10,while ((i = ffs(fired)
(11,f)
(12,NULL)
(13,if (l->l_savp->savp_lwp != l)
(14,(struct ptimers *)
(15,l->l_flag)
(16,l)
(17,l->l_savp)
(18,siginfo_pool)
(19,l->l_proc->p_sa)
(20,struct lwp *l)
(21,l)
(22,f = l->l_flag & L_SA)
(23,)
(24,pts_fired)
(25,RET)
(26,si)
(27,0)
(28,pts_timers)
(29,l->l_flag & L_SA)
(30,l->l_proc->p_userret)
(31,0)
(32,KERNEL_PROC_LOCK(l)
(33,(i = ffs(fired)
(34,l->l_savp->savp_lwp)
(35,l->l_flag |= f)
(36,pt)
(37,*si)
(38,i = ffs(fired)
(39,sizeof(*si)
(40,si)
(41,if (pt->pts_fired == 0)
(42,l)
(43,sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,\n\\n\\t\\t    sizeof(*si)
(44,ksi_info)
(45,l)
(46,~done)
(47,i)
(48,return ;)
(49,fired)
(50,pt)
(51,pt->pts_timers)
(52,*pt = (struct ptimers *)
(53,PR_WAITOK)
(54,L_SA)
(55,si = pool_get(&siginfo_pool, PR_WAITOK)
(56,pt)
(57,siginfo_pool)
(58,&siginfo_pool)
(59,pt)
(60,1 << --i)
(61,p_userret)
(62,void *arg)
(63,pt->pts_timers[i]->pt_info.ksi_info)
(64,i)
(65,pt->pts_fired)
(66,si)
(67,sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,\n\\n\\t\\t    sizeof(*si)
(68,1)
(69,SA_UPCALL_SIGEV)
(70,pts_fired)
(71,struct ptimers *)
(72,f)
(73,l)
(74,si)
(75,l)
(76,l->l_proc->p_userret = NULL)
(77,l_flag)
(78,pt->pts_timers[i])
(79,savp_lwp)
(80,pt)
(81,0)
(82,pt->pts_timers[i]->pt_info)
(83,KDASSERT(l->l_proc->p_sa)
(84,)
(85,mask)
(86,SA_UPCALL_DEFER)
(87,pool_put(&siginfo_pool, si)
(88,fired &= ~mask)
(89,l->l_flag)
(90,i)
(91,si)
(92,pts_fired)
(93,si->_info)
(94,mask)
(95,l_proc)
(96,done)
(97,l_flag)
(98,l)
(99,i)
(100,l_proc)
(101,fired)
(102,&siginfo_pool)
(103,pt->pts_fired)
(104,~L_SA)
(105,l->l_proc)
(106,SA_UPCALL_SIGEV | SA_UPCALL_DEFER)
(107,ffs(fired)
(108,mask)
(109,~mask)
(110,mask = 1 << --i)
(111,fired)
(112,fired)
(113,NULL)
(114,pt)
(115,fired = pt->pts_fired)
(116,if (sa_upcall(l, SA_UPCALL_SIGEV | SA_UPCALL_DEFER, NULL, l,\n\\n\\t\\t    sizeof(*si)
(117,l)
(118,pt_info)
(119,l->l_proc)
(120,pool_get(&siginfo_pool, PR_WAITOK)
(121,--i)
(122,l->l_flag)
(123,l->l_savp->savp_lwp != l)
(124,si->_info = pt->pts_timers[i]->pt_info.ksi_info)
(125,KERNEL_PROC_UNLOCK(l)
(126,l)
(127,0)
(128,l)
(129,done = 0)
(130,si)
(131,l->l_flag &= ~L_SA)
(132,l_savp)
(133,l)
(134,done |= mask)
(135,f)
(136,done)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^