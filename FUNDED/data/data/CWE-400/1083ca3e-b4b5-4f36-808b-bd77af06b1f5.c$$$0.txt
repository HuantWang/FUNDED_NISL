-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,18,23,26,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(28,34,0)
(30,29,0)
(5,4,0)
(32,37,0)
(20,47,0)
(46,2,0)
(37,16,0)
(17,36,0)
(33,13,0)
(38,47,0)
(7,27,0)
(46,42,0)
(27,14,0)
(11,37,0)
(25,47,0)
(15,25,0)
(14,16,0)
(22,25,0)
(41,29,0)
(14,27,0)
(10,48,0)
(4,49,0)
(27,23,0)
(22,24,0)
(16,14,0)
(34,23,0)
(36,27,0)
(26,24,0)
(29,27,0)
(22,13,0)
(37,13,0)
(43,14,0)
(14,43,0)
(40,27,0)
(3,40,0)
(44,22,0)
(37,25,0)
(19,25,0)
(40,23,0)
(45,32,0)
(42,46,0)
(12,42,0)
(37,32,0)
(36,23,0)
(35,13,0)
(13,35,0)
(13,31,0)
(1,10,0)
(21,4,0)
(39,40,0)
(16,37,0)
(34,27,0)
(24,22,0)
(18,47,0)
(0,23,0)
(37,25,1)
(14,43,1)
(36,17,1)
(26,44,1)
(39,46,1)
(8,25,1)
(9,10,1)
(33,8,1)
(10,1,1)
(37,32,1)
(22,24,1)
(14,16,1)
(22,25,1)
(12,29,1)
(25,15,1)
(24,26,1)
(29,30,1)
(34,28,1)
(9,36,1)
(44,6,1)
(3,39,1)
(1,22,1)
(9,6,1)
(29,27,1)
(16,37,1)
(36,27,1)
(46,42,1)
(34,27,1)
(39,29,1)
(17,34,1)
(35,33,1)
(6,8,1)
(32,45,1)
(11,7,1)
(27,14,1)
(37,13,1)
(42,12,1)
(30,41,1)
(41,27,1)
(40,27,1)
(22,13,1)
(13,35,1)
(45,11,1)
(15,19,1)
(6,13,1)
(40,3,1)
(28,40,1)
(7,22,1)
(46,42,2)
(34,27,2)
(11,22,2)
(27,22,2)
(7,22,2)
(27,14,2)
(44,6,2)
(24,6,2)
(16,37,2)
(29,22,2)
(32,22,2)
(34,22,2)
(16,22,2)
(40,27,2)
(12,29,2)
(22,24,2)
(37,25,2)
(26,6,2)
(28,22,2)
(14,43,2)
(29,27,2)
(36,22,2)
(3,22,2)
(30,22,2)
(39,22,2)
(22,6,2)
(42,29,2)
(37,13,2)
(10,22,2)
(14,16,2)
(36,27,2)
(40,22,2)
(37,32,2)
(13,8,2)
(1,22,2)
(41,22,2)
(14,22,2)
(33,8,2)
(35,8,2)
(17,22,2)
(45,22,2)
(22,13,2)
(46,29,2)
(22,25,2)
(13,35,2)
(37,22,2)
-----------------------------------
(0,if (myString == NULL)
(1,"Input is less than the length of the source string")
(2,)
(3,HELLO_STRING)
(4,)
(5,myString)
(6,1)
(7,myString)
(8,1)
(9,RET)
(10,printLine("Input is less than the length of the source string")
(11,data)
(12,1)
(13,data = rand()
(14,(wchar_t *)
(15,0)
(16,malloc(data*sizeof(wchar_t)
(17,myString)
(18,if(1)
(19,data)
(20,data)
(21,if (data > wcslen(HELLO_STRING)
(22,data > wcslen(HELLO_STRING)
(23,)
(24,wcslen(HELLO_STRING)
(25,data = 0)
(26,HELLO_STRING)
(27,myString = (wchar_t *)
(28,myString)
(29,myString == NULL)
(30,NULL)
(31,)
(32,sizeof(wchar_t)
(33,data)
(34,printWLine(myString)
(35,rand()
(36,free(myString)
(37,data*sizeof(wchar_t)
(38,if(1)
(39,myString)
(40,wcscpy(myString, HELLO_STRING)
(41,myString)
(42,-1)
(43,wchar_t *)
(44,data)
(45,wchar_t)
(46,exit(-1)
(47,)
(48,)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^