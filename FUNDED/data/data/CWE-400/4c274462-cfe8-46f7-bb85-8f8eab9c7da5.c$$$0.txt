-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
71,72
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,66,67,70,75,77
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(28,33,0)
(4,0,0)
(23,7,0)
(34,4,0)
(28,38,0)
(24,13,0)
(28,26,0)
(23,13,0)
(16,26,0)
(13,23,0)
(17,33,0)
(13,36,0)
(30,37,0)
(26,10,0)
(37,26,0)
(6,15,0)
(8,10,0)
(19,2,0)
(14,15,0)
(12,28,0)
(7,21,0)
(37,1,0)
(22,2,0)
(26,7,0)
(37,35,0)
(1,37,0)
(21,7,0)
(33,15,0)
(3,26,0)
(1,10,0)
(35,10,0)
(9,36,0)
(31,37,0)
(11,3,0)
(3,35,0)
(36,13,0)
(32,3,0)
(18,35,0)
(2,26,0)
(0,4,0)
(7,23,0)
(20,33,0)
(7,26,0)
(39,15,0)
(0,5,0)
(27,29,1)
(37,35,1)
(28,33,1)
(9,24,1)
(27,1,1)
(26,7,1)
(0,4,1)
(19,26,1)
(32,2,1)
(24,16,1)
(25,27,1)
(28,26,1)
(29,33,1)
(23,13,1)
(4,34,1)
(32,0,1)
(18,3,1)
(36,9,1)
(3,11,1)
(34,2,1)
(12,27,1)
(33,17,1)
(37,26,1)
(22,19,1)
(2,26,1)
(35,18,1)
(1,37,1)
(17,20,1)
(7,21,1)
(30,35,1)
(3,26,1)
(2,22,1)
(16,29,1)
(28,12,1)
(25,28,1)
(13,36,1)
(7,23,1)
(37,31,1)
(11,32,1)
(31,30,1)
(23,13,2)
(23,29,2)
(7,21,2)
(16,29,2)
(30,29,2)
(3,29,2)
(1,29,2)
(32,29,2)
(3,26,2)
(0,2,2)
(36,29,2)
(31,29,2)
(35,29,2)
(28,26,2)
(28,33,2)
(7,23,2)
(19,29,2)
(2,26,2)
(37,29,2)
(7,29,2)
(24,29,2)
(26,7,2)
(22,29,2)
(37,35,2)
(4,2,2)
(1,37,2)
(37,26,2)
(34,2,2)
(9,29,2)
(26,29,2)
(28,27,2)
(11,29,2)
(13,29,2)
(2,29,2)
(0,4,2)
(18,29,2)
(13,36,2)
(12,27,2)
-----------------------------------
(0,exit(-1)
(1,printIntLine(data[0])
(2,data == NULL)
(3,data[0])
(4,-1)
(5,)
(6,data)
(7,(int *)
(8,if (data == NULL)
(9,int)
(10,)
(11,0)
(12,data)
(13,100*sizeof(int)
(14,if(staticTrue)
(15,)
(16,data)
(17,NULL)
(18,5)
(19,data)
(20,data)
(21,int *)
(22,NULL)
(23,malloc(100*sizeof(int)
(24,100)
(25,RET)
(26,data = (int *)
(27,staticTrue)
(28,free(data)
(29,staticTrue)
(30,data)
(31,0)
(32,data)
(33,data = NULL)
(34,1)
(35,data[0] = 5)
(36,sizeof(int)
(37,data[0])
(38,)
(39,if(staticTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^