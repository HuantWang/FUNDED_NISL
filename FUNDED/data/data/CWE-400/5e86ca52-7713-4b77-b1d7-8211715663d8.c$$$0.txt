-----label-----
1
-----code-----
static int packet_create(struct net *net, struct socket *sock, int protocol,
			 int kern)
{
	struct sock *sk;
	struct packet_sock *po;
	__be16 proto = (__force __be16)protocol; /* weird, but documented */
	int err;

	if (!ns_capable(net->user_ns, CAP_NET_RAW))
		return -EPERM;
	if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&
	    sock->type != SOCK_PACKET)
		return -ESOCKTNOSUPPORT;

	sock->state = SS_UNCONNECTED;

	err = -ENOBUFS;
	sk = sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern);
	if (sk == NULL)
		goto out;

	sock->ops = &packet_ops;
	if (sock->type == SOCK_PACKET)
		sock->ops = &packet_ops_spkt;

	sock_init_data(sock, sk);

	po = pkt_sk(sk);
	sk->sk_family = PF_PACKET;
	po->num = proto;
	po->xmit = dev_queue_xmit;

	err = packet_alloc_pending(po);
	if (err)
		goto out2;

	packet_cached_dev_reset(po);

	sk->sk_destruct = packet_sock_destruct;
	sk_refcnt_debug_inc(sk);

	/*
	 *	Attach a protocol block
	 */

	spin_lock_init(&po->bind_lock);
	mutex_init(&po->pg_vec_lock);
	po->rollover = NULL;
	po->prot_hook.func = packet_rcv;

	if (sock->type == SOCK_PACKET)
		po->prot_hook.func = packet_rcv_spkt;

	po->prot_hook.af_packet_priv = sk;

	if (proto) {
		po->prot_hook.type = proto;
		register_prot_hook(sk);
	}

	mutex_lock(&net->packet.sklist_lock);
	sk_add_node_rcu(sk, &net->packet.sklist);
	mutex_unlock(&net->packet.sklist_lock);

	preempt_disable();
	sock_prot_inuse_add(net, &packet_proto, 1);
	preempt_enable();

	return 0;
out2:
	sk_free(sk);
out:
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
25,38
25,39
25,40
25,41
25,42
25,43
25,44
25,45
25,46
25,47
25,48
25,49
25,50
25,51
25,52
25,53
25,54
25,55
25,56
25,57
25,58
25,59
25,60
25,61
25,62
25,63
25,64
25,65
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
43,44
44,45
45,46
46,47
46,48
48,49
50,51
50,52
51,52
52,53
52,54
52,55
53,54
55,56
55,57
56,57
59,60
61,62
62,63
63,64
65,66
65,67
66,67
66,68
67,68
67,69
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
76,78
77,78
80,81
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
105,106
106,107
108,109
109,110
109,111
110,111
112,113
112,114
112,115
112,116
112,117
112,118
113,114
115,116
117,118
119,120
121,122
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
141,142
143,144
143,145
144,145
144,146
145,146
145,147
146,147
149,150
151,152
152,153
152,154
153,154
153,155
154,155
157,158
158,159
160,161
161,162
161,163
161,164
162,163
164,165
166,167
168,169
169,170
169,171
170,171
172,173
172,174
173,174
175,176
177,178
178,179
178,180
179,180
179,181
180,181
183,184
185,186
186,187
186,188
187,188
187,189
188,189
191,192
193,194
194,195
194,196
195,196
195,197
196,197
199,200
201,202
202,203
202,204
203,204
205,206
205,207
206,207
208,209
210,211
210,212
211,212
213,214
215,216
216,217
216,218
217,218
219,220
221,222
222,223
222,224
223,224
223,225
224,225
227,228
229,230
230,231
230,232
231,232
233,234
235,236
236,237
236,238
237,238
239,240
240,241
240,242
241,242
244,245
245,246
245,247
246,247
248,249
249,250
249,251
250,251
253,254
254,255
254,256
255,256
255,257
256,257
259,260
261,262
262,263
262,264
263,264
263,265
264,265
264,266
265,266
269,270
271,272
271,273
272,273
272,274
273,274
273,275
274,275
277,278
279,280
280,281
280,282
281,282
281,283
282,283
282,284
283,284
287,288
289,290
290,291
290,292
291,292
291,293
292,293
292,294
293,294
297,298
299,300
299,301
300,301
302,303
302,304
303,304
304,305
304,306
305,306
305,307
306,307
306,308
307,308
311,312
313,314
314,315
314,316
315,316
317,318
319,320
320,321
320,322
321,322
323,324
324,325
324,326
325,326
325,327
326,327
330,331
331,332
331,333
331,334
332,333
334,335
336,337
337,338
337,339
338,339
338,340
339,340
343,344
344,345
344,346
345,346
347,348
348,349
348,350
349,350
349,351
350,351
354,355
355,356
356,357
358,359
359,360
359,361
359,362
359,363
360,361
362,363
364,365
365,366
368,369
369,370
370,371
372,373
374,375
374,376
376,377
377,378
377,379
378,379
380,381
382,383
382,384
384,385
385,386
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,22,24,29,31,32,36,38,39,42,47,49,54,57,58,60,64,71,72,74,78,79,81,85,86,88,92,97,98,100,104,107,111,114,116,118,120,123,125,129,131,133,138,139,142,147,148,150,155,156,159,163,165,167,171,174,176,181,182,184,189,190,192,197,198,200,204,207,209,212,214,218,220,225,226,228,232,234,238,242,243,247,251,252,257,258,260,266,267,268,270,275,276,278,284,285,286,288,294,295,296,298,301,308,309,310,312,316,318,322,327,328,329,333,335,340,341,342,346,351,352,353,357,361,363,366,367,371,373,375,379,381,383,386
-----computeFrom-----
66,67
66,68
67,68
67,69
68,69
68,70
75,76
75,77
82,83
82,84
94,95
94,96
102,103
102,104
109,110
109,111
127,128
127,129
135,136
135,137
144,145
144,146
152,153
152,154
169,170
169,171
178,179
178,180
186,187
186,188
194,195
194,196
202,203
202,204
222,223
222,224
254,255
254,256
262,263
262,264
272,273
272,274
280,281
280,282
290,291
290,292
304,305
304,306
-----guardedBy-----
147,155
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;IdExpression;Name;ProblemStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int packet_create(struct net *net, struct socket *sock, int protocol,			 int kern){	struct sock *sk;	struct packet_sock *po;	__be16 proto = (__force __be16)protocol; /* weird, but documented */	int err;	if (!ns_capable(net->user_ns, CAP_NET_RAW))		return -EPERM;	if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&	    sock->type != SOCK_PACKET)		return -ESOCKTNOSUPPORT;	sock->state = SS_UNCONNECTED;	err = -ENOBUFS;	sk = sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern);	if (sk == NULL)		goto out;	sock->ops = &packet_ops;	if (sock->type == SOCK_PACKET)		sock->ops = &packet_ops_spkt;	sock_init_data(sock, sk);	po = pkt_sk(sk);	sk->sk_family = PF_PACKET;	po->num = proto;	po->xmit = dev_queue_xmit;	err = packet_alloc_pending(po);	if (err)		goto out2;	packet_cached_dev_reset(po);	sk->sk_destruct = packet_sock_destruct;	sk_refcnt_debug_inc(sk);	/*	 *	Attach a protocol block	 */	spin_lock_init(&po->bind_lock);	mutex_init(&po->pg_vec_lock);	po->rollover = NULL;	po->prot_hook.func = packet_rcv;	if (sock->type == SOCK_PACKET)		po->prot_hook.func = packet_rcv_spkt;	po->prot_hook.af_packet_priv = sk;	if (proto) {		po->prot_hook.type = proto;		register_prot_hook(sk);	}	mutex_lock(&net->packet.sklist_lock);	sk_add_node_rcu(sk, &net->packet.sklist);	mutex_unlock(&net->packet.sklist_lock);	preempt_disable();	sock_prot_inuse_add(net, &packet_proto, 1);	preempt_enable();	return 0;out2:	sk_free(sk);out:	return err;}
static int
packet_create(struct net *net, struct socket *sock, int protocol,			 int kern)
packet_create
struct net *net
struct net
net
*net
*
net
struct socket *sock
struct socket
socket
*sock
*
sock
int protocol
int
protocol
protocol
int kern
int
kern
kern
{	struct sock *sk;	struct packet_sock *po;	__be16 proto = (__force __be16)protocol; /* weird, but documented */	int err;	if (!ns_capable(net->user_ns, CAP_NET_RAW))		return -EPERM;	if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&	    sock->type != SOCK_PACKET)		return -ESOCKTNOSUPPORT;	sock->state = SS_UNCONNECTED;	err = -ENOBUFS;	sk = sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern);	if (sk == NULL)		goto out;	sock->ops = &packet_ops;	if (sock->type == SOCK_PACKET)		sock->ops = &packet_ops_spkt;	sock_init_data(sock, sk);	po = pkt_sk(sk);	sk->sk_family = PF_PACKET;	po->num = proto;	po->xmit = dev_queue_xmit;	err = packet_alloc_pending(po);	if (err)		goto out2;	packet_cached_dev_reset(po);	sk->sk_destruct = packet_sock_destruct;	sk_refcnt_debug_inc(sk);	/*	 *	Attach a protocol block	 */	spin_lock_init(&po->bind_lock);	mutex_init(&po->pg_vec_lock);	po->rollover = NULL;	po->prot_hook.func = packet_rcv;	if (sock->type == SOCK_PACKET)		po->prot_hook.func = packet_rcv_spkt;	po->prot_hook.af_packet_priv = sk;	if (proto) {		po->prot_hook.type = proto;		register_prot_hook(sk);	}	mutex_lock(&net->packet.sklist_lock);	sk_add_node_rcu(sk, &net->packet.sklist);	mutex_unlock(&net->packet.sklist_lock);	preempt_disable();	sock_prot_inuse_add(net, &packet_proto, 1);	preempt_enable();	return 0;out2:	sk_free(sk);out:	return err;}
struct sock *sk;
struct sock *sk;
struct sock
sock
*sk
*
sk
struct packet_sock *po;
struct packet_sock *po;
struct packet_sock
packet_sock
*po
*
po
__be16
__be16
__be16
6
proto = (__force __be16)protocol;
int err;
int err;
int
err
err
if (!ns_capable(net->user_ns, CAP_NET_RAW))		return -EPERM;
!ns_capable(net->user_ns, CAP_NET_RAW)
ns_capable(net->user_ns, CAP_NET_RAW)
ns_capable
ns_capable
net->user_ns
net
net
user_ns
CAP_NET_RAW
CAP_NET_RAW
return -EPERM;
-EPERM
EPERM
EPERM
if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&	    sock->type != SOCK_PACKET)		return -ESOCKTNOSUPPORT;
sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&	    sock->type != SOCK_PACKET
sock->type != SOCK_DGRAM && sock->type != SOCK_RAW
sock->type != SOCK_DGRAM
sock->type
sock
sock
type
SOCK_DGRAM
SOCK_DGRAM
sock->type != SOCK_RAW
sock->type
sock
sock
type
SOCK_RAW
SOCK_RAW
sock->type != SOCK_PACKET
sock->type
sock
sock
type
SOCK_PACKET
SOCK_PACKET
return -ESOCKTNOSUPPORT;
-ESOCKTNOSUPPORT
ESOCKTNOSUPPORT
ESOCKTNOSUPPORT
sock->state = SS_UNCONNECTED;
sock->state = SS_UNCONNECTED
sock->state
sock
sock
state
SS_UNCONNECTED
SS_UNCONNECTED
err = -ENOBUFS;
err = -ENOBUFS
err
err
-ENOBUFS
ENOBUFS
ENOBUFS
sk = sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern);
sk = sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern)
sk
sk
sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern)
sk_alloc
sk_alloc
net
net
PF_PACKET
PF_PACKET
GFP_KERNEL
GFP_KERNEL
&packet_proto
packet_proto
packet_proto
kern
kern
if (sk == NULL)		goto out;
sk == NULL
sk
sk
NULL
NULL
goto out;
out
sock->ops = &packet_ops;
sock->ops = &packet_ops
sock->ops
sock
sock
ops
&packet_ops
packet_ops
packet_ops
if (sock->type == SOCK_PACKET)		sock->ops = &packet_ops_spkt;
sock->type == SOCK_PACKET
sock->type
sock
sock
type
SOCK_PACKET
SOCK_PACKET
sock->ops = &packet_ops_spkt;
sock->ops = &packet_ops_spkt
sock->ops
sock
sock
ops
&packet_ops_spkt
packet_ops_spkt
packet_ops_spkt
sock_init_data(sock, sk);
sock_init_data(sock, sk)
sock_init_data
sock_init_data
sock
sock
sk
sk
po = pkt_sk(sk);
po = pkt_sk(sk)
po
po
pkt_sk(sk)
pkt_sk
pkt_sk
sk
sk
sk->sk_family = PF_PACKET;
sk->sk_family = PF_PACKET
sk->sk_family
sk
sk
sk_family
PF_PACKET
PF_PACKET
po->num = proto;
po->num = proto
po->num
po
po
num
proto
proto
po->xmit = dev_queue_xmit;
po->xmit = dev_queue_xmit
po->xmit
po
po
xmit
dev_queue_xmit
dev_queue_xmit
err = packet_alloc_pending(po);
err = packet_alloc_pending(po)
err
err
packet_alloc_pending(po)
packet_alloc_pending
packet_alloc_pending
po
po
if (err)		goto out2;
err
err
goto out2;
out2
packet_cached_dev_reset(po);
packet_cached_dev_reset(po)
packet_cached_dev_reset
packet_cached_dev_reset
po
po
sk->sk_destruct = packet_sock_destruct;
sk->sk_destruct = packet_sock_destruct
sk->sk_destruct
sk
sk
sk_destruct
packet_sock_destruct
packet_sock_destruct
sk_refcnt_debug_inc(sk);
sk_refcnt_debug_inc(sk)
sk_refcnt_debug_inc
sk_refcnt_debug_inc
sk
sk
spin_lock_init(&po->bind_lock);
spin_lock_init(&po->bind_lock)
spin_lock_init
spin_lock_init
&po->bind_lock
po->bind_lock
po
po
bind_lock
mutex_init(&po->pg_vec_lock);
mutex_init(&po->pg_vec_lock)
mutex_init
mutex_init
&po->pg_vec_lock
po->pg_vec_lock
po
po
pg_vec_lock
po->rollover = NULL;
po->rollover = NULL
po->rollover
po
po
rollover
NULL
NULL
po->prot_hook.func = packet_rcv;
po->prot_hook.func = packet_rcv
po->prot_hook.func
po->prot_hook
po
po
prot_hook
func
packet_rcv
packet_rcv
if (sock->type == SOCK_PACKET)		po->prot_hook.func = packet_rcv_spkt;
sock->type == SOCK_PACKET
sock->type
sock
sock
type
SOCK_PACKET
SOCK_PACKET
po->prot_hook.func = packet_rcv_spkt;
po->prot_hook.func = packet_rcv_spkt
po->prot_hook.func
po->prot_hook
po
po
prot_hook
func
packet_rcv_spkt
packet_rcv_spkt
po->prot_hook.af_packet_priv = sk;
po->prot_hook.af_packet_priv = sk
po->prot_hook.af_packet_priv
po->prot_hook
po
po
prot_hook
af_packet_priv
sk
sk
if (proto) {		po->prot_hook.type = proto;		register_prot_hook(sk);	}
proto
proto
{		po->prot_hook.type = proto;		register_prot_hook(sk);	}
po->prot_hook.type = proto;
po->prot_hook.type = proto
po->prot_hook.type
po->prot_hook
po
po
prot_hook
type
proto
proto
register_prot_hook(sk);
register_prot_hook(sk)
register_prot_hook
register_prot_hook
sk
sk
mutex_lock(&net->packet.sklist_lock);
mutex_lock(&net->packet.sklist_lock)
mutex_lock
mutex_lock
&net->packet.sklist_lock
net->packet.sklist_lock
net->packet
net
net
packet
sklist_lock
sk_add_node_rcu(sk, &net->packet.sklist);
sk_add_node_rcu(sk, &net->packet.sklist)
sk_add_node_rcu
sk_add_node_rcu
sk
sk
&net->packet.sklist
net->packet.sklist
net->packet
net
net
packet
sklist
mutex_unlock(&net->packet.sklist_lock);
mutex_unlock(&net->packet.sklist_lock)
mutex_unlock
mutex_unlock
&net->packet.sklist_lock
net->packet.sklist_lock
net->packet
net
net
packet
sklist_lock
preempt_disable();
preempt_disable()
preempt_disable
preempt_disable
sock_prot_inuse_add(net, &packet_proto, 1);
sock_prot_inuse_add(net, &packet_proto, 1)
sock_prot_inuse_add
sock_prot_inuse_add
net
net
&packet_proto
packet_proto
packet_proto
1
preempt_enable();
preempt_enable()
preempt_enable
preempt_enable
return 0;
0
out2:	sk_free(sk);
out2
sk_free(sk);
sk_free(sk)
sk_free
sk_free
sk
sk
out:	return err;
out
return err;
err
err
-----joern-----
(1,197,0)
(59,162,0)
(179,136,0)
(34,23,0)
(133,196,0)
(159,197,0)
(189,151,0)
(163,136,0)
(214,13,0)
(209,161,0)
(154,84,0)
(38,30,0)
(163,197,0)
(86,154,0)
(192,31,0)
(142,109,0)
(67,98,0)
(11,94,0)
(14,197,0)
(7,117,0)
(6,142,0)
(196,133,0)
(17,135,0)
(72,14,0)
(50,30,0)
(170,88,0)
(68,196,0)
(86,142,0)
(45,213,0)
(140,212,0)
(183,197,0)
(204,95,0)
(56,13,0)
(35,159,0)
(194,17,0)
(198,72,0)
(164,170,0)
(185,60,0)
(71,197,0)
(150,169,0)
(146,197,0)
(195,102,0)
(142,86,0)
(103,112,0)
(95,204,0)
(89,142,0)
(160,102,0)
(151,189,0)
(91,6,0)
(186,11,0)
(6,165,0)
(81,197,0)
(131,94,0)
(150,213,0)
(11,87,0)
(6,157,0)
(48,145,0)
(57,204,0)
(25,2,0)
(107,84,0)
(99,197,0)
(33,123,0)
(176,128,0)
(183,145,0)
(104,162,0)
(147,19,0)
(155,2,0)
(92,41,0)
(203,44,0)
(41,87,0)
(157,76,0)
(70,90,0)
(124,197,0)
(19,87,0)
(162,104,0)
(188,179,0)
(155,102,0)
(78,13,0)
(150,13,0)
(125,197,0)
(81,204,0)
(168,72,0)
(24,197,0)
(41,70,0)
(123,197,0)
(200,87,0)
(70,197,0)
(187,197,0)
(170,13,0)
(88,170,0)
(31,64,0)
(201,133,0)
(202,11,0)
(110,56,0)
(98,67,0)
(167,125,0)
(6,199,0)
(206,148,0)
(62,210,0)
(193,86,0)
(135,112,0)
(162,154,0)
(91,100,0)
(138,104,0)
(94,11,0)
(207,1,0)
(210,49,0)
(190,206,0)
(165,123,0)
(192,197,0)
(34,214,0)
(91,83,0)
(84,136,0)
(6,185,0)
(73,41,0)
(6,49,0)
(49,210,0)
(119,6,0)
(31,192,0)
(117,134,0)
(8,150,0)
(93,64,0)
(166,60,0)
(79,196,0)
(122,78,0)
(55,195,0)
(6,17,0)
(58,184,0)
(20,199,0)
(2,25,0)
(22,195,0)
(175,197,0)
(129,210,0)
(101,154,0)
(136,197,0)
(182,197,0)
(108,185,0)
(143,86,0)
(199,136,0)
(156,90,0)
(141,25,0)
(121,167,0)
(58,125,0)
(127,136,0)
(201,197,0)
(76,154,0)
(95,154,0)
(47,13,0)
(6,104,0)
(204,197,0)
(74,25,0)
(124,154,0)
(98,78,0)
(136,150,0)
(58,18,0)
(6,197,0)
(75,197,0)
(128,187,0)
(145,183,0)
(215,187,0)
(5,151,0)
(49,51,0)
(159,23,0)
(158,214,0)
(82,47,0)
(200,136,0)
(63,173,0)
(60,125,0)
(1,136,0)
(6,206,0)
(132,150,0)
(6,72,0)
(210,154,0)
(10,150,0)
(15,76,0)
(56,48,0)
(185,154,0)
(6,128,0)
(71,173,0)
(214,34,0)
(199,211,0)
(6,41,0)
(139,56,0)
(4,49,0)
(16,124,0)
(76,157,0)
(150,136,0)
(3,197,0)
(165,87,0)
(172,211,0)
(23,159,0)
(102,195,0)
(25,87,0)
(106,136,0)
(69,197,0)
(213,150,0)
(114,163,0)
(9,47,0)
(177,200,0)
(26,214,0)
(65,95,0)
(96,19,0)
(78,98,0)
(61,151,0)
(167,134,0)
(133,201,0)
(77,58,0)
(148,197,0)
(19,212,0)
(152,165,0)
(178,125,0)
(81,71,0)
(80,150,0)
(181,30,0)
(53,197,0)
(189,118,0)
(118,189,0)
(144,197,0)
(196,154,0)
(171,2,0)
(130,157,0)
(46,128,0)
(60,197,0)
(118,197,0)
(21,199,0)
(161,100,0)
(104,167,0)
(117,136,0)
(43,98,0)
(115,76,0)
(173,71,0)
(48,56,0)
(113,109,0)
(126,148,0)
(128,136,0)
(159,136,0)
(191,206,0)
(64,31,0)
(184,58,0)
(111,78,0)
(28,50,0)
(37,185,0)
(50,87,0)
(64,47,0)
(211,197,0)
(208,51,0)
(27,179,0)
(125,58,0)
(102,155,0)
(42,197,0)
(181,155,0)
(174,127,0)
(112,135,0)
(2,155,0)
(47,64,0)
(0,48,0)
(54,197,0)
(137,88,0)
(145,48,0)
(127,197,0)
(90,70,0)
(155,181,0)
(30,50,0)
(23,34,0)
(180,71,0)
(109,197,0)
(84,154,0)
(151,154,0)
(154,197,0)
(12,197,0)
(66,34,0)
(157,1,0)
(17,87,0)
(85,170,0)
(205,50,0)
(206,154,0)
(30,181,0)
(153,197,0)
(29,17,0)
(170,197,0)
(52,162,0)
(91,81,0)
(116,197,0)
(105,165,0)
(72,154,0)
(44,83,0)
(120,200,0)
(200,197,0)
(36,81,0)
(149,14,0)
(212,19,0)
(195,87,0)
(58,18,1)
(6,41,1)
(159,23,1)
(51,208,1)
(60,125,1)
(150,169,1)
(6,128,1)
(188,27,1)
(165,87,1)
(154,84,1)
(162,52,1)
(50,205,1)
(120,135,1)
(49,4,1)
(6,17,1)
(25,141,1)
(4,210,1)
(11,87,1)
(0,56,1)
(83,44,1)
(193,143,1)
(143,14,1)
(45,8,1)
(102,195,1)
(91,83,1)
(215,128,1)
(1,207,1)
(187,215,1)
(110,139,1)
(95,65,1)
(47,9,1)
(81,36,1)
(40,97,1)
(191,190,1)
(26,35,1)
(80,10,1)
(127,136,1)
(1,136,1)
(127,174,1)
(171,25,1)
(111,125,1)
(112,103,1)
(58,77,1)
(101,200,1)
(205,28,1)
(147,96,1)
(59,32,1)
(117,7,1)
(19,147,1)
(124,154,1)
(44,203,1)
(49,210,1)
(151,5,1)
(74,102,1)
(114,187,1)
(68,163,1)
(55,22,1)
(137,85,1)
(210,129,1)
(77,178,1)
(37,108,1)
(76,154,1)
(102,160,1)
(214,13,1)
(150,213,1)
(121,104,1)
(202,109,1)
(126,206,1)
(84,107,1)
(35,183,1)
(120,212,1)
(41,87,1)
(70,90,1)
(200,136,1)
(15,94,1)
(86,154,1)
(174,40,1)
(131,11,1)
(136,150,1)
(16,97,1)
(6,72,1)
(81,71,1)
(88,137,1)
(185,154,1)
(142,89,1)
(14,149,1)
(91,100,1)
(38,50,1)
(97,204,1)
(57,148,1)
(179,188,1)
(7,167,1)
(172,199,1)
(176,124,1)
(98,78,1)
(30,38,1)
(190,60,1)
(103,17,1)
(141,74,1)
(122,111,1)
(46,176,1)
(48,56,1)
(69,192,1)
(17,87,1)
(118,189,1)
(211,172,1)
(2,171,1)
(95,154,1)
(128,136,1)
(155,2,1)
(56,110,1)
(96,70,1)
(158,26,1)
(181,30,1)
(167,121,1)
(148,126,1)
(43,78,1)
(65,57,1)
(165,105,1)
(104,138,1)
(135,112,1)
(32,1,1)
(179,136,1)
(9,82,1)
(29,194,1)
(189,151,1)
(6,199,1)
(132,213,1)
(17,29,1)
(91,81,1)
(142,86,1)
(36,39,1)
(123,33,1)
(129,62,1)
(150,132,1)
(47,13,1)
(159,136,1)
(48,0,1)
(125,58,1)
(6,185,1)
(167,125,1)
(200,177,1)
(151,154,1)
(23,34,1)
(72,198,1)
(86,193,1)
(79,68,1)
(166,185,1)
(73,92,1)
(36,127,1)
(209,181,1)
(20,154,1)
(170,164,1)
(85,69,1)
(106,71,1)
(195,87,1)
(124,16,1)
(76,115,1)
(160,195,1)
(212,19,1)
(41,73,1)
(6,104,1)
(6,119,1)
(93,47,1)
(194,212,1)
(173,63,1)
(138,162,1)
(52,59,1)
(162,154,1)
(109,113,1)
(157,76,1)
(149,72,1)
(207,157,1)
(214,158,1)
(140,19,1)
(82,159,1)
(199,136,1)
(177,120,1)
(33,165,1)
(185,37,1)
(50,87,1)
(19,87,1)
(139,32,1)
(34,214,1)
(196,79,1)
(198,168,1)
(107,101,1)
(98,43,1)
(64,93,1)
(22,30,1)
(130,76,1)
(157,130,1)
(100,161,1)
(6,49,1)
(71,173,1)
(6,206,1)
(206,191,1)
(67,98,1)
(181,155,1)
(61,201,1)
(139,117,1)
(6,165,1)
(204,95,1)
(163,114,1)
(63,180,1)
(168,118,1)
(30,50,1)
(119,24,1)
(213,45,1)
(56,13,1)
(5,61,1)
(78,13,1)
(164,88,1)
(108,211,1)
(113,142,1)
(201,133,1)
(155,102,1)
(25,87,1)
(91,6,1)
(94,11,1)
(27,136,1)
(117,136,1)
(28,67,1)
(21,20,1)
(212,140,1)
(133,196,1)
(170,13,1)
(89,86,1)
(128,46,1)
(163,136,1)
(104,162,1)
(31,64,1)
(58,184,1)
(115,15,1)
(78,122,1)
(196,154,1)
(145,48,1)
(64,47,1)
(206,154,1)
(200,87,1)
(210,154,1)
(183,145,1)
(24,170,1)
(60,166,1)
(72,154,1)
(92,179,1)
(66,214,1)
(94,131,1)
(199,21,1)
(208,49,1)
(170,88,1)
(2,25,1)
(90,156,1)
(15,51,1)
(186,202,1)
(203,67,1)
(6,157,1)
(152,181,1)
(6,142,1)
(34,66,1)
(62,94,1)
(180,123,1)
(10,106,1)
(39,179,1)
(195,55,1)
(156,41,1)
(192,31,1)
(105,152,1)
(150,13,1)
(81,204,1)
(8,80,1)
(11,186,1)
(84,136,1)
(161,209,1)
(85,97,2)
(174,97,2)
(194,212,2)
(27,181,2)
(129,94,2)
(198,97,2)
(73,179,2)
(177,179,2)
(66,97,2)
(159,136,2)
(189,151,2)
(117,32,2)
(155,2,2)
(6,128,2)
(196,97,2)
(132,181,2)
(120,179,2)
(60,125,2)
(70,90,2)
(203,67,2)
(155,102,2)
(49,210,2)
(28,67,2)
(109,97,2)
(50,87,2)
(102,30,2)
(0,97,2)
(154,84,2)
(48,97,2)
(199,136,2)
(185,179,2)
(6,104,2)
(98,78,2)
(196,154,2)
(210,94,2)
(92,179,2)
(152,181,2)
(100,181,2)
(25,102,2)
(81,204,2)
(6,185,2)
(80,181,2)
(6,206,2)
(86,154,2)
(76,97,2)
(23,97,2)
(95,154,2)
(110,97,2)
(193,97,2)
(60,179,2)
(24,97,2)
(173,181,2)
(208,94,2)
(133,196,2)
(151,154,2)
(128,136,2)
(6,142,2)
(186,97,2)
(2,25,2)
(49,94,2)
(133,97,2)
(205,67,2)
(16,97,2)
(142,86,2)
(135,212,2)
(165,87,2)
(113,97,2)
(162,32,2)
(41,87,2)
(210,154,2)
(163,136,2)
(90,179,2)
(179,136,2)
(183,97,2)
(200,179,2)
(195,87,2)
(6,165,2)
(131,97,2)
(149,97,2)
(91,83,2)
(96,179,2)
(45,181,2)
(91,100,2)
(207,97,2)
(1,97,2)
(57,179,2)
(91,6,2)
(36,97,2)
(148,179,2)
(211,179,2)
(157,97,2)
(72,97,2)
(150,169,2)
(84,136,2)
(58,184,2)
(17,212,2)
(58,18,2)
(199,179,2)
(176,97,2)
(204,95,2)
(55,30,2)
(191,179,2)
(138,32,2)
(63,181,2)
(166,179,2)
(46,97,2)
(93,97,2)
(11,97,2)
(142,97,2)
(201,133,2)
(181,155,2)
(162,154,2)
(33,181,2)
(213,181,2)
(143,97,2)
(201,97,2)
(56,13,2)
(163,97,2)
(123,181,2)
(121,32,2)
(209,181,2)
(95,179,2)
(155,30,2)
(10,181,2)
(6,157,2)
(14,97,2)
(114,97,2)
(71,181,2)
(115,97,2)
(71,173,2)
(94,11,2)
(38,67,2)
(214,13,2)
(170,13,2)
(32,97,2)
(151,97,2)
(154,179,2)
(183,145,2)
(139,97,2)
(50,67,2)
(19,87,2)
(70,179,2)
(76,154,2)
(94,97,2)
(167,32,2)
(30,50,2)
(6,17,2)
(6,41,2)
(200,136,2)
(101,179,2)
(5,97,2)
(81,97,2)
(83,67,2)
(97,179,2)
(8,181,2)
(31,97,2)
(147,179,2)
(141,102,2)
(180,181,2)
(41,179,2)
(206,154,2)
(78,13,2)
(140,179,2)
(17,87,2)
(195,30,2)
(159,23,2)
(214,97,2)
(204,179,2)
(81,179,2)
(107,179,2)
(150,13,2)
(11,87,2)
(189,97,2)
(124,97,2)
(181,30,2)
(102,195,2)
(36,179,2)
(137,97,2)
(159,97,2)
(48,56,2)
(125,58,2)
(19,179,2)
(47,97,2)
(51,94,2)
(31,64,2)
(88,97,2)
(171,102,2)
(44,67,2)
(202,97,2)
(200,87,2)
(26,97,2)
(21,179,2)
(145,48,2)
(61,97,2)
(103,212,2)
(69,97,2)
(34,214,2)
(15,97,2)
(6,97,2)
(47,13,2)
(39,179,2)
(56,97,2)
(89,97,2)
(117,136,2)
(22,30,2)
(185,154,2)
(67,98,2)
(187,97,2)
(170,97,2)
(168,97,2)
(192,97,2)
(62,94,2)
(118,97,2)
(37,179,2)
(106,181,2)
(160,30,2)
(136,150,2)
(6,199,2)
(6,49,2)
(7,32,2)
(29,212,2)
(158,97,2)
(35,97,2)
(20,179,2)
(150,213,2)
(167,125,2)
(130,97,2)
(157,76,2)
(150,181,2)
(6,72,2)
(108,179,2)
(215,97,2)
(9,97,2)
(164,97,2)
(64,97,2)
(81,71,2)
(172,179,2)
(72,154,2)
(124,154,2)
(79,97,2)
(161,181,2)
(104,32,2)
(74,102,2)
(59,32,2)
(84,179,2)
(188,181,2)
(91,81,2)
(181,67,2)
(52,32,2)
(127,97,2)
(86,97,2)
(136,181,2)
(23,34,2)
(4,94,2)
(128,97,2)
(135,112,2)
(65,179,2)
(2,102,2)
(82,97,2)
(1,136,2)
(179,181,2)
(165,181,2)
(206,179,2)
(64,47,2)
(25,87,2)
(34,97,2)
(105,181,2)
(68,97,2)
(119,97,2)
(212,19,2)
(118,189,2)
(192,31,2)
(145,97,2)
(40,97,2)
(170,88,2)
(212,179,2)
(190,179,2)
(104,162,2)
(30,67,2)
(126,179,2)
(156,179,2)
(112,212,2)
(127,136,2)
-----------------------------------
(0,sklist_lock)
(1,po->prot_hook.af_packet_priv = sk)
(2,sock->type != SOCK_PACKET)
(3,if (!ns_capable(net->user_ns, CAP_NET_RAW)
(4,func)
(5,pg_vec_lock)
(6,return 0;)
(7,sk)
(8,GFP_KERNEL)
(9,packet)
(10,net)
(11,sock->type)
(12,if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&\n\\n\\t    sock->type != SOCK_PACKET)
(13,struct net *net)
(14,po->rollover = NULL)
(15,po)
(16,po)
(17,sock->ops)
(18,int protocol)
(19,sock->type)
(20,sk)
(21,sk_family)
(22,sock)
(23,&net->packet.sklist)
(24,preempt_enable()
(25,sock->type)
(26,net)
(27,sk)
(28,sock)
(29,ops)
(30,sock->type != SOCK_DGRAM)
(31,&net->packet.sklist_lock)
(32,proto)
(33,SS_UNCONNECTED)
(34,net->packet.sklist)
(35,sk)
(36,err)
(37,num)
(38,SOCK_DGRAM)
(39,goto out;)
(40,goto out2;)
(41,sock->ops)
(42,if (proto)
(43,CAP_NET_RAW)
(44,-EPERM)
(45,packet_proto)
(46,sk_destruct)
(47,net->packet)
(48,net->packet.sklist_lock)
(49,po->prot_hook.func)
(50,sock->type)
(51,po->prot_hook.func = packet_rcv_spkt)
(52,prot_hook)
(53,if (sock->type == SOCK_PACKET)
(54,if (sk == NULL)
(55,type)
(56,net->packet)
(57,err)
(58,(__force __be16)
(59,po)
(60,po->num = proto)
(61,po)
(62,po)
(63,ENOBUFS)
(64,net->packet.sklist_lock)
(65,po)
(66,sklist)
(67,!ns_capable(net->user_ns, CAP_NET_RAW)
(68,po)
(69,preempt_disable()
(70,sock->ops = &packet_ops)
(71,err = -ENOBUFS)
(72,po->rollover)
(73,ops)
(74,sock)
(75,out:)
(76,po->prot_hook)
(77,protocol)
(78,net->user_ns)
(79,bind_lock)
(80,PF_PACKET)
(81,return err;)
(82,net)
(83,return -EPERM;)
(84,pkt_sk(sk)
(85,net)
(86,po->prot_hook)
(87,struct socket *sock)
(88,&packet_proto)
(89,func)
(90,&packet_ops)
(91,RET)
(92,sock)
(93,sklist_lock)
(94,sock->type == SOCK_PACKET)
(95,packet_alloc_pending(po)
(96,sock)
(97,err)
(98,ns_capable(net->user_ns, CAP_NET_RAW)
(99,sk)
(100,return -ESOCKTNOSUPPORT;)
(101,po)
(102,sock->type != SOCK_RAW)
(103,packet_ops_spkt)
(104,po->prot_hook.type)
(105,state)
(106,sk)
(107,sk)
(108,po)
(109,po->prot_hook.func = packet_rcv)
(110,packet)
(111,net)
(112,&packet_ops_spkt)
(113,packet_rcv)
(114,sk)
(115,prot_hook)
(116,if (sock->type == SOCK_PACKET)
(117,register_prot_hook(sk)
(118,mutex_init(&po->pg_vec_lock)
(119,0)
(120,sock)
(121,proto)
(122,user_ns)
(123,sock->state = SS_UNCONNECTED)
(124,packet_cached_dev_reset(po)
(125,proto = (__force __be16)
(126,dev_queue_xmit)
(127,sk_free(sk)
(128,sk->sk_destruct)
(129,prot_hook)
(130,af_packet_priv)
(131,SOCK_PACKET)
(132,kern)
(133,&po->bind_lock)
(134,)
(135,sock->ops = &packet_ops_spkt)
(136,sk = sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern)
(137,packet_proto)
(138,type)
(139,net)
(140,SOCK_PACKET)
(141,type)
(142,po->prot_hook.func)
(143,po)
(144,out2:)
(145,&net->packet.sklist_lock)
(146,po)
(147,type)
(148,po->xmit = dev_queue_xmit)
(149,NULL)
(150,sk_alloc(net, PF_PACKET, GFP_KERNEL, &packet_proto, kern)
(151,po->pg_vec_lock)
(152,sock)
(153,proto)
(154,po = pkt_sk(sk)
(155,sock->type != SOCK_RAW &&\n\\n\\t    sock->type != SOCK_PACKET)
(156,packet_ops)
(157,po->prot_hook.af_packet_priv)
(158,packet)
(159,sk_add_node_rcu(sk, &net->packet.sklist)
(160,SOCK_RAW)
(161,-ESOCKTNOSUPPORT)
(162,po->prot_hook)
(163,sk_refcnt_debug_inc(sk)
(164,1)
(165,sock->state)
(166,proto)
(167,po->prot_hook.type = proto)
(168,po)
(169,int kern)
(170,sock_prot_inuse_add(net, &packet_proto, 1)
(171,SOCK_PACKET)
(172,PF_PACKET)
(173,-ENOBUFS)
(174,sk)
(175,if (err)
(176,sk)
(177,sk)
(178,proto)
(179,sk == NULL)
(180,err)
(181,sock->type != SOCK_DGRAM && sock->type != SOCK_RAW &&\n\\n\\t    sock->type != SOCK_PACKET)
(182,err)
(183,mutex_lock(&net->packet.sklist_lock)
(184,__force __be16)
(185,po->num)
(186,type)
(187,sk->sk_destruct = packet_sock_destruct)
(188,NULL)
(189,&po->pg_vec_lock)
(190,po)
(191,xmit)
(192,mutex_unlock(&net->packet.sklist_lock)
(193,prot_hook)
(194,sock)
(195,sock->type)
(196,po->bind_lock)
(197,)
(198,rollover)
(199,sk->sk_family)
(200,sock_init_data(sock, sk)
(201,spin_lock_init(&po->bind_lock)
(202,sock)
(203,EPERM)
(204,err = packet_alloc_pending(po)
(205,type)
(206,po->xmit)
(207,sk)
(208,packet_rcv_spkt)
(209,ESOCKTNOSUPPORT)
(210,po->prot_hook)
(211,sk->sk_family = PF_PACKET)
(212,sock->type == SOCK_PACKET)
(213,&packet_proto)
(214,net->packet)
(215,packet_sock_destruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^