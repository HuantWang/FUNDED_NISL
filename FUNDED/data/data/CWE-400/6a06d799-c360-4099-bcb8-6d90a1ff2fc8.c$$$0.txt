-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_for_loop_12_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
186,187
189,190
189,191
190,191
190,192
191,192
193,194
195,196
196,197
197,198
197,199
198,199
200,201
202,203
203,204
204,205
204,206
205,206
208,209
208,210
208,211
209,210
210,211
212,213
213,214
213,215
214,215
215,216
215,217
216,217
218,219
218,220
220,221
222,223
222,224
222,225
222,226
223,224
224,225
224,226
225,226
228,229
228,230
229,230
231,232
231,233
232,233
232,234
233,234
236,237
238,239
239,240
241,242
242,243
243,244
243,245
244,245
247,248
248,249
248,250
249,250
250,251
250,252
251,252
253,254
253,255
255,256
257,258
257,259
258,259
258,260
259,260
259,261
260,261
263,264
263,265
264,265
267,268
268,269
268,270
268,271
268,272
269,270
270,271
270,272
271,272
274,275
274,276
275,276
277,278
277,279
278,279
278,280
279,280
282,283
284,285
285,286
287,288
288,289
289,290
289,291
290,291
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,188,192,194,199,201,206,207,211,217,219,221,226,227,230,234,235,237,240,245,246,252,254,256,261,262,265,266,272,273,276,280,281,283,286,291,292
-----computeFrom-----
12,13
12,14
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
190,191
190,192
204,205
204,206
224,225
224,226
228,229
228,230
258,259
258,260
259,260
259,261
263,264
263,265
270,271
270,272
274,275
274,276
-----guardedBy-----
192,201
265,283
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_for_loop_12_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_for_loop_12_bad()
CWE400_Resource_Exhaustion__connect_socket_for_loop_12_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(136,122,0)
(97,3,0)
(109,69,0)
(32,72,0)
(159,57,0)
(106,159,0)
(48,57,0)
(21,142,0)
(96,159,0)
(112,156,0)
(174,109,0)
(78,26,0)
(68,163,0)
(160,43,0)
(91,116,0)
(138,135,0)
(118,17,0)
(145,174,0)
(136,95,0)
(90,119,0)
(72,32,0)
(93,74,0)
(35,11,0)
(61,163,0)
(118,138,0)
(64,32,0)
(67,57,0)
(47,91,0)
(177,147,0)
(42,28,0)
(162,70,0)
(115,18,0)
(45,183,0)
(16,11,0)
(82,160,0)
(63,120,0)
(169,103,0)
(103,174,0)
(45,109,0)
(110,69,0)
(129,11,0)
(183,11,0)
(181,114,0)
(143,11,0)
(122,136,0)
(57,67,0)
(11,12,0)
(116,163,0)
(88,119,0)
(173,109,0)
(19,114,0)
(139,76,0)
(174,172,0)
(113,30,0)
(6,71,0)
(127,163,0)
(149,74,0)
(86,136,0)
(33,109,0)
(0,122,0)
(74,3,0)
(124,95,0)
(126,153,0)
(135,138,0)
(154,163,0)
(152,63,0)
(167,158,0)
(134,31,0)
(76,139,0)
(128,24,0)
(22,20,0)
(79,67,0)
(40,158,0)
(29,11,0)
(159,17,0)
(20,57,0)
(125,34,0)
(159,38,0)
(13,119,0)
(60,62,0)
(3,133,0)
(30,113,0)
(111,49,0)
(147,24,0)
(34,83,0)
(20,72,0)
(103,148,0)
(2,82,0)
(45,131,0)
(44,20,0)
(92,139,0)
(170,169,0)
(175,33,0)
(166,11,0)
(14,115,0)
(59,68,0)
(25,11,0)
(164,1,0)
(172,174,0)
(83,62,0)
(77,32,0)
(123,118,0)
(10,135,0)
(54,24,0)
(69,109,0)
(37,17,0)
(24,147,0)
(23,172,0)
(174,156,0)
(81,28,0)
(65,5,0)
(32,17,0)
(101,33,0)
(32,138,0)
(57,119,0)
(114,65,0)
(33,183,0)
(153,4,0)
(68,147,0)
(148,103,0)
(8,3,0)
(118,117,0)
(105,17,0)
(168,45,0)
(36,117,0)
(9,30,0)
(118,57,0)
(182,46,0)
(109,163,0)
(147,109,0)
(83,34,0)
(120,63,0)
(34,68,0)
(71,163,0)
(144,65,0)
(132,147,0)
(98,143,0)
(53,183,0)
(31,1,0)
(157,34,0)
(146,138,0)
(176,43,0)
(28,71,0)
(27,109,0)
(108,113,0)
(142,76,0)
(52,11,0)
(43,160,0)
(155,118,0)
(120,163,0)
(140,158,0)
(159,138,0)
(75,38,0)
(161,91,0)
(174,103,0)
(20,17,0)
(76,100,0)
(160,163,0)
(137,55,0)
(130,183,0)
(56,69,0)
(99,15,0)
(113,120,0)
(17,107,0)
(150,65,0)
(87,27,0)
(66,147,0)
(171,70,0)
(28,68,0)
(138,163,0)
(151,40,0)
(141,30,0)
(159,106,0)
(38,1,0)
(20,138,0)
(147,68,0)
(80,143,0)
(156,174,0)
(100,76,0)
(179,1,0)
(136,163,0)
(76,142,0)
(50,104,0)
(118,155,0)
(70,163,0)
(62,68,0)
(102,69,0)
(178,116,0)
(117,158,0)
(72,20,0)
(51,27,0)
(94,139,0)
(117,118,0)
(103,169,0)
(84,11,0)
(180,100,0)
(38,159,0)
(62,83,0)
(73,11,0)
(58,82,0)
(32,57,0)
(89,163,0)
(165,62,0)
(95,136,0)
(159,96,1)
(136,95,1)
(175,101,1)
(43,176,1)
(83,62,1)
(117,118,1)
(172,23,1)
(99,142,1)
(140,72,1)
(93,41,1)
(31,1,1)
(50,83,1)
(141,116,1)
(14,117,1)
(79,48,1)
(85,45,1)
(32,17,1)
(28,42,1)
(20,17,1)
(157,68,1)
(147,132,1)
(113,30,1)
(179,74,1)
(32,138,1)
(1,164,1)
(138,135,1)
(85,33,1)
(134,153,1)
(41,78,1)
(62,68,1)
(74,149,1)
(76,139,1)
(80,7,1)
(41,17,1)
(124,27,1)
(45,109,1)
(68,147,1)
(32,77,1)
(136,122,1)
(142,76,1)
(147,24,1)
(128,54,1)
(121,138,1)
(67,79,1)
(143,98,1)
(135,10,1)
(152,113,1)
(101,50,1)
(40,158,1)
(10,146,1)
(161,47,1)
(19,181,1)
(109,69,1)
(75,31,1)
(174,172,1)
(23,103,1)
(162,171,1)
(118,57,1)
(112,174,1)
(139,94,1)
(78,85,1)
(32,57,1)
(137,27,1)
(126,38,1)
(36,40,1)
(54,66,1)
(57,67,1)
(71,6,1)
(27,87,1)
(147,109,1)
(183,53,1)
(20,138,1)
(77,64,1)
(173,70,1)
(180,139,1)
(130,143,1)
(9,141,1)
(156,112,1)
(103,148,1)
(114,19,1)
(159,57,1)
(34,68,1)
(101,137,1)
(153,126,1)
(177,59,1)
(82,58,1)
(159,138,1)
(24,128,1)
(151,115,1)
(47,136,1)
(33,183,1)
(86,95,1)
(174,103,1)
(145,160,1)
(39,72,1)
(70,162,1)
(159,106,1)
(45,183,1)
(101,121,1)
(39,38,1)
(72,32,1)
(87,51,1)
(33,175,1)
(51,109,1)
(110,56,1)
(108,30,1)
(6,28,1)
(81,83,1)
(45,168,1)
(60,165,1)
(44,22,1)
(31,134,1)
(7,57,1)
(174,109,1)
(102,110,1)
(17,37,1)
(56,173,1)
(42,81,1)
(36,158,1)
(34,125,1)
(105,7,1)
(101,99,1)
(69,102,1)
(132,24,1)
(76,100,1)
(92,183,1)
(115,14,1)
(37,105,1)
(122,0,1)
(103,169,1)
(98,80,1)
(118,17,1)
(96,75,1)
(164,179,1)
(20,44,1)
(159,17,1)
(63,152,1)
(40,151,1)
(72,20,1)
(171,142,1)
(53,130,1)
(118,138,1)
(165,34,1)
(120,63,1)
(125,157,1)
(91,161,1)
(149,93,1)
(38,1,1)
(95,124,1)
(30,9,1)
(118,155,1)
(168,33,1)
(27,109,1)
(0,86,1)
(123,36,1)
(101,182,1)
(113,108,1)
(28,68,1)
(178,91,1)
(92,121,1)
(38,159,1)
(94,92,1)
(59,156,1)
(158,167,1)
(66,177,1)
(33,109,1)
(41,85,1)
(39,117,1)
(169,170,1)
(62,60,1)
(83,34,1)
(64,20,1)
(167,140,1)
(20,57,1)
(116,178,1)
(146,71,1)
(181,41,1)
(170,145,1)
(176,82,1)
(58,2,1)
(100,180,1)
(117,158,1)
(22,114,1)
(142,21,1)
(2,120,1)
(160,43,1)
(156,174,1)
(21,76,1)
(75,1,1)
(118,123,1)
(182,156,1)
(86,27,2)
(174,103,2)
(10,83,2)
(71,83,2)
(92,7,2)
(181,41,2)
(179,41,2)
(108,27,2)
(176,27,2)
(169,27,2)
(20,41,2)
(105,7,2)
(20,57,2)
(156,27,2)
(62,34,2)
(165,34,2)
(21,121,2)
(57,67,2)
(58,27,2)
(159,57,2)
(83,156,2)
(162,142,2)
(22,41,2)
(72,32,2)
(109,142,2)
(174,109,2)
(66,156,2)
(138,83,2)
(123,72,2)
(183,7,2)
(167,72,2)
(180,121,2)
(123,117,2)
(122,27,2)
(17,7,2)
(125,156,2)
(28,68,2)
(171,142,2)
(30,27,2)
(159,17,2)
(50,83,2)
(115,117,2)
(2,27,2)
(83,62,2)
(74,41,2)
(118,17,2)
(83,34,2)
(175,7,2)
(38,1,2)
(159,38,2)
(138,135,2)
(137,27,2)
(147,24,2)
(182,156,2)
(34,68,2)
(139,7,2)
(70,142,2)
(109,69,2)
(177,156,2)
(38,38,2)
(93,41,2)
(113,30,2)
(20,17,2)
(117,72,2)
(118,72,2)
(60,34,2)
(134,38,2)
(101,7,2)
(45,33,2)
(120,63,2)
(100,121,2)
(149,41,2)
(103,169,2)
(117,118,2)
(100,7,2)
(151,117,2)
(82,27,2)
(124,27,2)
(92,121,2)
(145,27,2)
(75,41,2)
(75,38,2)
(32,57,2)
(62,68,2)
(76,7,2)
(72,41,2)
(19,41,2)
(128,156,2)
(130,7,2)
(21,7,2)
(32,138,2)
(24,156,2)
(117,158,2)
(136,95,2)
(120,27,2)
(136,122,2)
(117,117,2)
(78,85,2)
(37,7,2)
(77,20,2)
(118,138,2)
(72,20,2)
(142,76,2)
(42,83,2)
(40,158,2)
(158,72,2)
(76,100,2)
(147,109,2)
(112,27,2)
(31,38,2)
(136,27,2)
(23,27,2)
(103,27,2)
(45,183,2)
(159,41,2)
(27,142,2)
(126,38,2)
(118,155,2)
(102,142,2)
(157,156,2)
(147,156,2)
(170,27,2)
(94,121,2)
(159,138,2)
(64,20,2)
(98,7,2)
(91,27,2)
(80,7,2)
(113,27,2)
(96,41,2)
(6,83,2)
(32,17,2)
(174,172,2)
(173,142,2)
(47,27,2)
(38,41,2)
(121,83,2)
(51,142,2)
(99,142,2)
(45,109,2)
(63,27,2)
(38,159,2)
(178,27,2)
(160,27,2)
(40,117,2)
(139,121,2)
(132,156,2)
(180,7,2)
(76,121,2)
(103,148,2)
(69,142,2)
(114,41,2)
(95,27,2)
(36,72,2)
(54,156,2)
(59,156,2)
(142,121,2)
(14,117,2)
(118,117,2)
(164,41,2)
(56,142,2)
(142,7,2)
(143,7,2)
(146,83,2)
(33,7,2)
(33,183,2)
(31,1,2)
(152,27,2)
(110,142,2)
(43,27,2)
(68,156,2)
(94,7,2)
(153,38,2)
(0,27,2)
(85,7,2)
(141,27,2)
(168,33,2)
(33,109,2)
(9,27,2)
(76,139,2)
(174,27,2)
(135,83,2)
(36,117,2)
(44,41,2)
(68,147,2)
(81,83,2)
(20,138,2)
(161,27,2)
(1,41,2)
(118,57,2)
(27,109,2)
(159,106,2)
(53,7,2)
(160,43,2)
(156,174,2)
(28,83,2)
(87,142,2)
(140,72,2)
(34,156,2)
(96,38,2)
(172,27,2)
(32,20,2)
(116,27,2)
-----------------------------------
(0,service)
(1,i = 0)
(2,service)
(3,)
(4,)
(5,)
(6,\'\\0\')
(7,globalReturnsTrueOrFalse()
(8,for (i = 0; i < (size_t)
(9,sin_addr)
(10,inputBuffer)
(11,)
(12,)
(13,count)
(14,"Hello")
(15,)
(16,recvResult)
(17,count = 20)
(18,)
(19,0)
(20,count > 0)
(21,NO_ERROR)
(22,count)
(23,service)
(24,CHAR_ARRAY_SIZE - 1)
(25,wsaData)
(26,)
(27,connectSocket == INVALID_SOCKET)
(28,inputBuffer[recvResult])
(29,if (connectSocket != INVALID_SOCKET)
(30,service.sin_addr)
(31,i++)
(32,count <= 20)
(33,connectSocket != INVALID_SOCKET)
(34,recvResult == SOCKET_ERROR)
(35,wsaDataInit)
(36,i)
(37,20)
(38,i < (size_t)
(39,RET)
(40,i++)
(41,globalReturnsTrueOrFalse()
(42,recvResult)
(43,htons(TCP_PORT)
(44,0)
(45,CLOSE_SOCKET(connectSocket)
(46,)
(47,service)
(48,count)
(49,)
(50,break;)
(51,connectSocket)
(52,service)
(53,INVALID_SOCKET)
(54,CHAR_ARRAY_SIZE)
(55,)
(56,AF_INET)
(57,count = -1)
(58,sin_port)
(59,recvResult)
(60,0)
(61,if (connectSocket == INVALID_SOCKET)
(62,recvResult == 0)
(63,inet_addr(IP_ADDRESS)
(64,count)
(65,)
(66,inputBuffer)
(67,-1)
(68,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(69,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(70,wsaDataInit = 1)
(71,inputBuffer[recvResult] = \'\\0\')
(72,count > 0 && count <= 20)
(73,inputBuffer)
(74,i = 0)
(75,i)
(76,WSAStartup(MAKEWORD(2,2)
(77,20)
(78,WSACleanup()
(79,1)
(80,wsaDataInit)
(81,inputBuffer)
(82,service.sin_port)
(83,recvResult == SOCKET_ERROR || recvResult == 0)
(84,do)
(85,wsaDataInit)
(86,0)
(87,INVALID_SOCKET)
(88,if(globalReturnsTrueOrFalse()
(89,if (connect(connectSocket, (struct sockaddr*)
(90,if(globalReturnsTrueOrFalse()
(91,service.sin_family)
(92,2)
(93,i)
(94,2)
(95,&service)
(96,count)
(97,i)
(98,0)
(99,break;)
(100,&wsaData)
(101,connectSocket)
(102,IPPROTO_TCP)
(103,(struct sockaddr*)
(104,)
(105,count)
(106,size_t)
(107,)
(108,s_addr)
(109,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(110,SOCK_STREAM)
(111,for (i = 0; i < (size_t)
(112,SOCKET_ERROR)
(113,service.sin_addr.s_addr)
(114,i = 0)
(115,printLine("Hello")
(116,service.sin_family = AF_INET)
(117,i < (size_t)
(118,(size_t)
(119,)
(120,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(121,0)
(122,sizeof(service)
(123,count)
(124,service)
(125,SOCKET_ERROR)
(126,"Hello")
(127,if (recvResult == SOCKET_ERROR || recvResult == 0)
(128,1)
(129,connectSocket)
(130,connectSocket)
(131,)
(132,0)
(133,)
(134,i)
(135,atoi(inputBuffer)
(136,memset(&service, 0, sizeof(service)
(137,break;)
(138,count = atoi(inputBuffer)
(139,MAKEWORD(2,2)
(140,i)
(141,service)
(142,WSAStartup(MAKEWORD(2,2)
(143,wsaDataInit = 0)
(144,if (count > 0 && count <= 20)
(145,connectSocket)
(146,count)
(147,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(148,struct sockaddr*)
(149,0)
(150,i)
(151,i)
(152,IP_ADDRESS)
(153,printLine("Hello")
(154,if (WSAStartup(MAKEWORD(2,2)
(155,size_t)
(156,connect(connectSocket, (struct sockaddr*)
(157,recvResult)
(158,i = 0)
(159,(size_t)
(160,service.sin_port = htons(TCP_PORT)
(161,sin_family)
(162,1)
(163,)
(164,0)
(165,recvResult)
(166,if (wsaDataInit)
(167,0)
(168,connectSocket)
(169,&service)
(170,service)
(171,wsaDataInit)
(172,sizeof(service)
(173,connectSocket)
(174,connect(connectSocket, (struct sockaddr*)
(175,INVALID_SOCKET)
(176,TCP_PORT)
(177,connectSocket)
(178,AF_INET)
(179,i)
(180,wsaData)
(181,i)
(182,break;)
(183,connectSocket = INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^