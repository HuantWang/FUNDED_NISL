-----label-----
1
-----code-----
static pid_t
tapdisk_daemon_wait(int *_status)
{
	tapdisk_channel_t *channel;
	pid_t pid;
	int status;

	pid = waitpid(-1, &status, WNOHANG);
	if (pid == 0)
		return -1; /* No state changes */

	if (pid < 0) {
		if (errno != ECHILD) /* No children */
			PERROR("waitpid");
		return -1;
	}

	*_status = status;

	if (WIFEXITED(status)) {
		DPRINTF("child %d exited with status %d", pid,
			WEXITSTATUS(status));
		return pid;
	}

	if (WIFSIGNALED(status)) {
		DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status));
		return pid;
	}

	/* WIFSTOPPED? Oh well. */
	DPRINTF("ignoring child %d transition to state 0x%x.", pid, status);

	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
34,38
35,36
37,38
39,40
40,41
42,43
44,45
44,46
45,46
45,47
46,47
49,50
50,51
52,53
52,54
53,54
53,55
54,55
57,58
57,59
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
69,70
70,71
72,73
73,74
73,75
74,75
75,76
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
86,87
87,88
87,89
87,90
87,91
88,89
91,92
93,94
93,95
94,95
96,97
98,99
99,100
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
109,110
109,111
109,112
109,113
110,111
113,114
115,116
115,117
116,117
118,119
120,121
121,122
123,124
124,125
124,126
124,127
124,128
125,126
128,129
130,131
132,133
-----nextToken-----
3,5,7,9,10,15,17,18,22,24,27,29,33,36,38,41,43,47,48,51,55,56,61,63,67,68,71,76,78,82,84,89,90,92,95,97,100,104,106,111,112,114,117,119,122,126,127,129,131,133
-----computeFrom-----
31,32
31,33
45,46
45,47
53,54
53,55
59,60
59,61
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static pid_ttapdisk_daemon_wait(int *_status){	tapdisk_channel_t *channel;	pid_t pid;	int status;	pid = waitpid(-1, &status, WNOHANG);	if (pid == 0)		return -1; /* No state changes */	if (pid < 0) {		if (errno != ECHILD) /* No children */			PERROR("waitpid");		return -1;	}	*_status = status;	if (WIFEXITED(status)) {		DPRINTF("child %d exited with status %d", pid,			WEXITSTATUS(status));		return pid;	}	if (WIFSIGNALED(status)) {		DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status));		return pid;	}	/* WIFSTOPPED? Oh well. */	DPRINTF("ignoring child %d transition to state 0x%x.", pid, status);	return 0;}
static pid_t
pid_t
tapdisk_daemon_wait(int *_status)
tapdisk_daemon_wait
int *_status
int
*_status
*
_status
{	tapdisk_channel_t *channel;	pid_t pid;	int status;	pid = waitpid(-1, &status, WNOHANG);	if (pid == 0)		return -1; /* No state changes */	if (pid < 0) {		if (errno != ECHILD) /* No children */			PERROR("waitpid");		return -1;	}	*_status = status;	if (WIFEXITED(status)) {		DPRINTF("child %d exited with status %d", pid,			WEXITSTATUS(status));		return pid;	}	if (WIFSIGNALED(status)) {		DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status));		return pid;	}	/* WIFSTOPPED? Oh well. */	DPRINTF("ignoring child %d transition to state 0x%x.", pid, status);	return 0;}
tapdisk_channel_t *channel;
tapdisk_channel_t *channel;
tapdisk_channel_t
tapdisk_channel_t
*channel
*
channel
pid_t pid;
pid_t pid;
pid_t
pid_t
pid
pid
int status;
int status;
int
status
status
pid = waitpid(-1, &status, WNOHANG);
pid = waitpid(-1, &status, WNOHANG)
pid
pid
waitpid(-1, &status, WNOHANG)
waitpid
waitpid
-1
1
&status
status
status
WNOHANG
WNOHANG
if (pid == 0)		return -1;
pid == 0
pid
pid
0
return -1;
-1
1
if (pid < 0) {		if (errno != ECHILD) /* No children */			PERROR("waitpid");		return -1;	}
pid < 0
pid
pid
0
{		if (errno != ECHILD) /* No children */			PERROR("waitpid");		return -1;	}
if (errno != ECHILD) /* No children */			PERROR("waitpid");
errno != ECHILD
errno
errno
ECHILD
ECHILD
PERROR("waitpid");
PERROR("waitpid")
PERROR
PERROR
"waitpid"
return -1;
-1
1
*_status = status;
*_status = status
*_status
_status
_status
status
status
if (WIFEXITED(status)) {		DPRINTF("child %d exited with status %d", pid,			WEXITSTATUS(status));		return pid;	}
WIFEXITED(status)
WIFEXITED
WIFEXITED
status
status
{		DPRINTF("child %d exited with status %d", pid,			WEXITSTATUS(status));		return pid;	}
DPRINTF("child %d exited with status %d", pid,			WEXITSTATUS(status));
DPRINTF("child %d exited with status %d", pid,			WEXITSTATUS(status))
DPRINTF
DPRINTF
"child %d exited with status %d"
pid
pid
WEXITSTATUS(status)
WEXITSTATUS
WEXITSTATUS
status
status
return pid;
pid
pid
if (WIFSIGNALED(status)) {		DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status));		return pid;	}
WIFSIGNALED(status)
WIFSIGNALED
WIFSIGNALED
status
status
{		DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status));		return pid;	}
DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status));
DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status))
DPRINTF
DPRINTF
"child %d killed by signal %d"
pid
pid
WTERMSIG(status)
WTERMSIG
WTERMSIG
status
status
return pid;
pid
pid
DPRINTF("ignoring child %d transition to state 0x%x.", pid, status);
DPRINTF("ignoring child %d transition to state 0x%x.", pid, status)
DPRINTF
DPRINTF
"ignoring child %d transition to state 0x%x."
pid
pid
status
status
return 0;
0
-----joern-----
(40,12,0)
(1,3,0)
(4,11,0)
(42,7,0)
(9,12,0)
(60,61,0)
(10,12,0)
(64,21,0)
(45,4,0)
(66,40,0)
(50,40,0)
(53,7,0)
(25,12,0)
(29,12,0)
(54,5,0)
(48,5,0)
(46,12,0)
(11,0,0)
(18,17,0)
(6,42,0)
(21,63,0)
(62,44,0)
(38,42,0)
(51,59,0)
(31,39,0)
(27,7,0)
(5,32,0)
(26,61,0)
(36,34,0)
(7,12,0)
(61,7,0)
(52,48,0)
(30,27,0)
(65,27,0)
(40,7,0)
(22,49,0)
(30,31,0)
(15,59,0)
(5,37,0)
(8,23,0)
(43,13,0)
(30,15,0)
(21,7,0)
(21,35,0)
(0,11,0)
(11,7,0)
(30,48,0)
(44,3,0)
(11,4,0)
(16,11,0)
(56,41,0)
(58,23,0)
(7,11,0)
(47,0,0)
(30,2,0)
(28,31,0)
(32,12,0)
(3,39,0)
(57,21,0)
(27,63,0)
(13,15,0)
(31,7,0)
(19,12,0)
(24,35,0)
(3,7,0)
(35,21,0)
(20,3,0)
(33,40,0)
(55,12,0)
(48,12,0)
(49,2,0)
(3,44,0)
(14,32,0)
(13,43,1)
(27,7,1)
(3,7,1)
(22,42,1)
(43,41,1)
(47,4,1)
(2,49,1)
(42,7,1)
(21,35,1)
(8,58,1)
(11,0,1)
(5,54,1)
(52,40,1)
(60,26,1)
(49,22,1)
(40,7,1)
(56,23,1)
(24,64,1)
(32,14,1)
(27,65,1)
(66,33,1)
(21,7,1)
(4,45,1)
(30,27,1)
(0,47,1)
(57,17,1)
(65,21,1)
(7,11,1)
(44,62,1)
(11,4,1)
(23,8,1)
(30,2,1)
(6,38,1)
(26,42,1)
(42,6,1)
(3,44,1)
(31,28,1)
(48,52,1)
(18,34,1)
(16,0,1)
(38,7,1)
(62,20,1)
(5,37,1)
(36,32,1)
(14,5,1)
(15,13,1)
(11,16,1)
(61,60,1)
(30,15,1)
(30,48,1)
(40,66,1)
(28,3,1)
(61,7,1)
(34,36,1)
(45,53,1)
(58,61,1)
(30,31,1)
(1,34,1)
(50,17,1)
(31,7,1)
(64,57,1)
(17,18,1)
(48,5,1)
(43,23,1)
(54,61,1)
(33,50,1)
(41,56,1)
(35,24,1)
(20,1,1)
(33,17,2)
(21,35,2)
(3,44,2)
(26,42,2)
(36,61,2)
(1,34,2)
(61,42,2)
(14,61,2)
(30,2,2)
(58,61,2)
(34,61,2)
(60,42,2)
(43,61,2)
(44,34,2)
(30,31,2)
(61,7,2)
(27,17,2)
(31,34,2)
(40,17,2)
(50,17,2)
(66,17,2)
(48,17,2)
(11,4,2)
(5,61,2)
(40,7,2)
(30,15,2)
(52,17,2)
(35,17,2)
(64,17,2)
(8,61,2)
(21,7,2)
(24,17,2)
(30,48,2)
(23,61,2)
(3,7,2)
(41,23,2)
(17,34,2)
(27,7,2)
(13,61,2)
(32,61,2)
(22,42,2)
(42,7,2)
(21,17,2)
(3,34,2)
(28,34,2)
(2,42,2)
(65,17,2)
(20,34,2)
(5,37,2)
(49,42,2)
(48,5,2)
(15,61,2)
(31,7,2)
(56,23,2)
(57,17,2)
(18,34,2)
(62,34,2)
(54,61,2)
(11,0,2)
(30,27,2)
(7,11,2)
-----------------------------------
(0,&status)
(1,"child %d exited with status %d")
(2,return -1;)
(3,DPRINTF("child %d exited with status %d", pid,\n\\n\\t\\t\\tWEXITSTATUS(status)
(4,-1)
(5,*_status)
(6,0)
(7,pid = waitpid(-1, &status, WNOHANG)
(8,ECHILD)
(9,status)
(10,pid)
(11,waitpid(-1, &status, WNOHANG)
(12,)
(13,-1)
(14,status)
(15,return -1;)
(16,WNOHANG)
(17,WIFSIGNALED(status)
(18,status)
(19,if (WIFEXITED(status)
(20,pid)
(21,DPRINTF("child %d killed by signal %d", pid, WTERMSIG(status)
(22,1)
(23,errno != ECHILD)
(24,status)
(25,if (WIFSIGNALED(status)
(26,pid)
(27,return pid;)
(28,pid)
(29,if (pid < 0)
(30,RET)
(31,return pid;)
(32,*_status = status)
(33,pid)
(34,WIFEXITED(status)
(35,WTERMSIG(status)
(36,status)
(37,int *_status)
(38,pid)
(39,)
(40,DPRINTF("ignoring child %d transition to state 0x%x.", pid, status)
(41,PERROR("waitpid")
(42,pid == 0)
(43,1)
(44,WEXITSTATUS(status)
(45,1)
(46,channel)
(47,status)
(48,return 0;)
(49,-1)
(50,"ignoring child %d transition to state 0x%x.")
(51,if (errno != ECHILD)
(52,0)
(53,pid)
(54,_status)
(55,if (pid == 0)
(56,"waitpid")
(57,"child %d killed by signal %d")
(58,errno)
(59,)
(60,0)
(61,pid < 0)
(62,status)
(63,)
(64,pid)
(65,pid)
(66,status)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^