-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(staticFive==5)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
53,54
54,55
55,56
55,57
56,57
59,60
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,29,30,32,36,39,41,45,47,51,52,57,58,63,65
-----computeFrom-----
13,14
13,15
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(staticFive==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(staticFive==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
staticFive==5
staticFive
staticFive
5
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(25,11,0)
(25,28,0)
(26,19,0)
(14,26,0)
(17,16,0)
(4,22,0)
(7,17,0)
(6,23,0)
(9,23,0)
(18,16,0)
(2,24,0)
(22,28,0)
(17,28,0)
(17,27,0)
(28,11,0)
(12,24,0)
(21,1,0)
(20,16,0)
(11,5,0)
(3,11,0)
(16,23,0)
(10,25,0)
(0,28,0)
(8,23,0)
(28,22,0)
(15,1,0)
(24,12,1)
(10,28,1)
(7,1,1)
(13,17,1)
(18,20,1)
(25,10,1)
(13,26,1)
(28,22,1)
(0,3,1)
(3,24,1)
(21,25,1)
(21,24,1)
(17,28,1)
(1,15,1)
(17,16,1)
(25,28,1)
(12,2,1)
(26,14,1)
(4,0,1)
(2,16,1)
(17,7,1)
(15,21,1)
(14,1,1)
(16,18,1)
(22,4,1)
(10,24,2)
(14,1,2)
(17,16,2)
(3,24,2)
(25,28,2)
(25,24,2)
(17,28,2)
(28,22,2)
(28,24,2)
(0,24,2)
(22,24,2)
(4,24,2)
(26,1,2)
(7,1,2)
(17,1,2)
-----------------------------------
(0,data)
(1,staticFive!=5)
(2,staticFive)
(3,"myString")
(4,myString)
(5,)
(6,if(staticFive!=5)
(7,data)
(8,data)
(9,if(staticFive==5)
(10,data)
(11,)
(12,5)
(13,RET)
(14,"Benign, fixed string")
(15,5)
(16,data = NULL)
(17,free(data)
(18,NULL)
(19,)
(20,data)
(21,staticFive)
(22,wcsdup(myString)
(23,)
(24,staticFive==5)
(25,printWLine(data)
(26,printLine("Benign, fixed string")
(27,)
(28,data = wcsdup(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^