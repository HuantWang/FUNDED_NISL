-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
90,93
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
101,102
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,99,100,105,107
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(25,7,0)
(17,39,0)
(4,36,0)
(44,49,0)
(39,17,0)
(10,51,0)
(8,40,0)
(35,5,0)
(31,17,0)
(19,9,0)
(48,25,0)
(33,55,0)
(17,31,0)
(0,51,0)
(49,44,0)
(58,32,0)
(1,4,0)
(9,31,0)
(3,51,0)
(18,16,0)
(21,13,0)
(37,18,0)
(14,31,0)
(16,17,0)
(17,16,0)
(36,4,0)
(27,40,0)
(12,0,0)
(42,15,0)
(0,31,0)
(31,15,0)
(36,42,0)
(9,49,0)
(18,37,0)
(5,35,0)
(45,24,0)
(28,14,0)
(46,16,0)
(49,9,0)
(52,32,0)
(43,14,0)
(53,4,0)
(41,42,0)
(38,31,0)
(34,40,0)
(11,9,0)
(26,7,0)
(54,15,0)
(44,54,0)
(54,44,0)
(23,13,0)
(47,33,0)
(5,20,0)
(7,24,0)
(51,40,0)
(6,15,0)
(16,18,0)
(7,25,0)
(4,31,0)
(50,36,0)
(44,30,0)
(0,57,0)
(22,25,0)
(25,31,0)
(24,15,0)
(29,35,0)
(30,44,0)
(44,49,1)
(25,31,1)
(52,13,1)
(52,54,1)
(17,16,1)
(53,1,1)
(19,24,1)
(9,31,1)
(36,4,1)
(49,9,1)
(58,52,1)
(4,31,1)
(18,37,1)
(5,35,1)
(7,26,1)
(26,25,1)
(13,23,1)
(51,10,1)
(56,0,1)
(46,38,1)
(18,46,1)
(32,58,1)
(10,3,1)
(43,31,1)
(0,31,1)
(1,14,1)
(47,32,1)
(9,11,1)
(48,42,1)
(14,28,1)
(16,18,1)
(0,51,1)
(23,21,1)
(35,29,1)
(44,30,1)
(14,31,1)
(56,33,1)
(7,25,1)
(24,45,1)
(41,36,1)
(21,51,1)
(22,48,1)
(17,39,1)
(25,22,1)
(11,19,1)
(45,7,1)
(31,17,1)
(1,5,1)
(38,13,1)
(42,41,1)
(33,47,1)
(0,12,1)
(4,53,1)
(50,4,1)
(29,14,1)
(54,44,1)
(36,50,1)
(12,32,1)
(28,43,1)
(53,13,2)
(14,13,2)
(4,31,2)
(0,31,2)
(36,13,2)
(44,49,2)
(25,13,2)
(5,35,2)
(18,37,2)
(49,13,2)
(1,13,2)
(17,39,2)
(35,14,2)
(31,13,2)
(11,13,2)
(50,13,2)
(43,13,2)
(25,31,2)
(22,13,2)
(7,25,2)
(9,31,2)
(5,14,2)
(38,13,2)
(17,16,2)
(18,13,2)
(41,13,2)
(47,32,2)
(26,13,2)
(44,30,2)
(19,13,2)
(48,13,2)
(31,17,2)
(0,51,2)
(29,14,2)
(12,32,2)
(14,31,2)
(24,13,2)
(28,13,2)
(49,9,2)
(46,13,2)
(17,13,2)
(44,13,2)
(54,44,2)
(36,4,2)
(0,32,2)
(9,13,2)
(42,13,2)
(7,13,2)
(4,13,2)
(16,18,2)
(33,32,2)
(16,13,2)
(45,13,2)
(54,13,2)
-----------------------------------
(0,free(data)
(1,data)
(2, sizeof(struct _twoIntsStruct)
(3,data)
(4,data[0])
(5,exit(-1)
(6,if (data == NULL)
(7,data[0].intTwo)
(8,if(STATIC_CONST_FIVE==5)
(9,data[0])
(10,NULL)
(11,0)
(12,data)
(13,STATIC_CONST_FIVE==5)
(14,data == NULL)
(15,)
(16,calloc(100, sizeof(struct _twoIntsStruct)
(17,(struct _twoIntsStruct *)
(18,sizeof(struct _twoIntsStruct)
(19,data)
(20,)
(21,STATIC_CONST_FIVE)
(22,0)
(23,5)
(24,data[0].intTwo = 0)
(25,data[0])
(26,intTwo)
(27,if(STATIC_CONST_FIVE!=5)
(28,NULL)
(29,1)
(30,twoIntsStruct *)
(31,data = (struct _twoIntsStruct *)
(32,STATIC_CONST_FIVE!=5)
(33,printLine("Benign, fixed string")
(34,data)
(35,-1)
(36,data[0].intOne)
(37,struct _twoIntsStruct)
(38,data)
(39,struct _twoIntsStruct *)
(40,)
(41,0)
(42,data[0].intOne = 0)
(43,data)
(44,(twoIntsStruct *)
(45,0)
(46,100)
(47,"Benign, fixed string")
(48,data)
(49,&data[0])
(50,intOne)
(51,data = NULL)
(52,STATIC_CONST_FIVE)
(53,0)
(54,printStructLine((twoIntsStruct *)
(55,)
(56,RET)
(57,)
(58,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^