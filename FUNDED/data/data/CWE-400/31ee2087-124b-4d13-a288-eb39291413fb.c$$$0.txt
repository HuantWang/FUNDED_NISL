-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticTrue)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
20,21
21,22
22,23
22,24
23,24
26,27
27,28
28,29
28,30
29,30
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,19,24,25,30,31,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
28,29
28,30
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(19,24,0)
(23,3,0)
(26,28,0)
(28,38,0)
(42,51,0)
(18,23,0)
(32,42,0)
(29,47,0)
(1,14,0)
(20,23,0)
(36,32,0)
(23,51,0)
(2,3,0)
(1,36,0)
(51,5,0)
(46,27,0)
(23,18,0)
(6,39,0)
(3,24,0)
(43,49,0)
(27,1,0)
(21,18,0)
(50,33,0)
(42,49,0)
(50,41,0)
(0,47,0)
(48,42,0)
(39,1,0)
(47,14,0)
(27,14,0)
(36,1,0)
(8,24,0)
(32,36,0)
(15,39,0)
(36,12,0)
(42,32,0)
(45,25,0)
(35,31,0)
(22,31,0)
(11,17,0)
(49,42,0)
(37,51,0)
(42,3,0)
(44,1,0)
(41,50,0)
(12,36,0)
(17,14,0)
(52,41,0)
(4,45,0)
(17,1,0)
(31,10,0)
(30,3,0)
(16,24,0)
(9,51,0)
(47,1,0)
(40,14,0)
(23,51,1)
(0,39,1)
(50,41,1)
(23,3,1)
(41,52,1)
(28,26,1)
(17,1,1)
(34,3,1)
(13,45,1)
(7,28,1)
(45,4,1)
(37,34,1)
(11,47,1)
(13,51,1)
(42,3,1)
(26,23,1)
(47,29,1)
(7,27,1)
(46,17,1)
(36,32,1)
(17,11,1)
(47,1,1)
(51,9,1)
(21,20,1)
(52,39,1)
(30,2,1)
(39,15,1)
(23,18,1)
(36,12,1)
(27,1,1)
(20,13,1)
(3,30,1)
(42,51,1)
(42,49,1)
(7,13,1)
(0,50,1)
(44,23,1)
(27,46,1)
(39,1,1)
(9,37,1)
(18,21,1)
(1,36,1)
(6,1,1)
(4,34,1)
(32,42,1)
(15,6,1)
(29,0,1)
(43,48,1)
(48,44,1)
(49,43,1)
(43,23,2)
(23,51,2)
(0,23,2)
(23,13,2)
(1,36,2)
(39,1,2)
(20,13,2)
(41,39,2)
(36,32,2)
(44,23,2)
(23,3,2)
(49,23,2)
(17,23,2)
(50,41,2)
(6,23,2)
(1,23,2)
(47,23,2)
(42,3,2)
(32,42,2)
(36,12,2)
(42,49,2)
(27,23,2)
(21,13,2)
(46,23,2)
(28,23,2)
(48,23,2)
(23,18,2)
(39,23,2)
(32,23,2)
(9,34,2)
(36,23,2)
(47,1,2)
(51,34,2)
(18,13,2)
(4,34,2)
(15,23,2)
(50,39,2)
(17,1,2)
(42,51,2)
(29,23,2)
(42,23,2)
(37,34,2)
(52,39,2)
(11,23,2)
(27,1,2)
(45,34,2)
(26,23,2)
-----------------------------------
(0,myString)
(1,myString = (char *)
(2,data)
(3,data = 0)
(4,"Benign, fixed string")
(5,)
(6,myString)
(7,RET)
(8,if(staticTrue)
(9,20)
(10,)
(11,myString)
(12,char *)
(13,staticTrue)
(14,)
(15,NULL)
(16,if(staticFalse)
(17,printLine(myString)
(18,strlen(HELLO_STRING)
(19,data)
(20,data)
(21,HELLO_STRING)
(22,if (data > strlen(HELLO_STRING)
(23,data > strlen(HELLO_STRING)
(24,)
(25,)
(26,"Input is less than the length of the source string")
(27,free(myString)
(28,printLine("Input is less than the length of the source string")
(29,HELLO_STRING)
(30,0)
(31,)
(32,malloc(data*sizeof(char)
(33,)
(34,staticFalse)
(35,myString)
(36,(char *)
(37,data)
(38,)
(39,myString == NULL)
(40,if (myString == NULL)
(41,-1)
(42,data*sizeof(char)
(43,char)
(44,myString)
(45,printLine("Benign, fixed string")
(46,myString)
(47,strcpy(myString, HELLO_STRING)
(48,data)
(49,sizeof(char)
(50,exit(-1)
(51,data = 20)
(52,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^