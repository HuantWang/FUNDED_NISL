-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,69,70,74,75,76,78,81,82,83,84,88,89,90
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int_malloc_15_bad()
CWE401_Memory_Leak__int_malloc_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(22,38,0)
(19,33,0)
(14,43,0)
(27,5,0)
(11,6,0)
(5,34,0)
(8,38,0)
(9,39,0)
(48,43,0)
(0,26,0)
(44,6,0)
(28,16,0)
(10,15,0)
(7,39,0)
(37,38,0)
(5,37,0)
(42,49,0)
(46,37,0)
(34,5,0)
(35,6,0)
(5,1,0)
(43,48,0)
(17,6,0)
(26,1,0)
(36,5,0)
(10,1,0)
(40,3,0)
(45,38,0)
(34,38,0)
(15,10,0)
(26,37,0)
(16,19,0)
(13,6,0)
(41,26,0)
(30,13,0)
(24,39,0)
(25,24,0)
(1,38,0)
(32,24,0)
(23,49,0)
(31,39,0)
(1,10,0)
(48,10,0)
(47,38,0)
(3,43,0)
(43,3,0)
(20,1,0)
(2,38,0)
(18,38,0)
(19,16,0)
(49,1,0)
(10,48,0)
(12,8,0)
(8,12,1)
(4,45,1)
(43,3,1)
(42,23,1)
(5,37,1)
(1,10,1)
(36,27,1)
(10,48,1)
(19,16,1)
(37,46,1)
(48,43,1)
(23,1,1)
(5,36,1)
(27,37,1)
(28,49,1)
(30,4,1)
(14,20,1)
(13,30,1)
(32,25,1)
(49,42,1)
(0,41,1)
(16,28,1)
(45,8,1)
(41,19,1)
(46,26,1)
(29,44,1)
(11,13,1)
(34,5,1)
(24,32,1)
(49,1,1)
(26,0,1)
(18,34,1)
(41,49,1)
(40,14,1)
(26,1,1)
(44,4,1)
(21,24,1)
(10,15,1)
(20,21,1)
(5,1,1)
(4,18,1)
(29,11,1)
(3,40,1)
(12,21,1)
(14,21,2)
(10,21,2)
(12,21,2)
(10,48,2)
(11,4,2)
(0,21,2)
(13,4,2)
(49,21,2)
(18,21,2)
(48,21,2)
(40,21,2)
(42,21,2)
(1,21,2)
(43,3,2)
(5,37,2)
(19,49,2)
(26,21,2)
(30,4,2)
(1,10,2)
(34,21,2)
(28,49,2)
(49,1,2)
(3,21,2)
(27,21,2)
(19,16,2)
(37,21,2)
(20,21,2)
(23,21,2)
(36,21,2)
(48,43,2)
(44,4,2)
(34,5,2)
(26,1,2)
(10,15,2)
(5,21,2)
(46,21,2)
(41,21,2)
(5,1,2)
(16,49,2)
(45,21,2)
(8,21,2)
(43,21,2)
-----------------------------------
(0,0)
(1,data = (int *)
(2,if (data == NULL)
(3,sizeof(int)
(4,7)
(5,data[0])
(6,)
(7,data)
(8,printLine("Benign, fixed string")
(9,switch(6)
(10,(int *)
(11,break;)
(12,"Benign, fixed string")
(13,printLine("Benign, fixed string")
(14,100)
(15,int *)
(16,-1)
(17,case 7:)
(18,break;)
(19,exit(-1)
(20,data)
(21,6)
(22,default:)
(23,data)
(24,data = NULL)
(25,data)
(26,data[0])
(27,data)
(28,1)
(29,RET)
(30,"Benign, fixed string")
(31,switch(7)
(32,NULL)
(33,)
(34,printIntLine(data[0])
(35,default:)
(36,0)
(37,data[0] = 5)
(38,)
(39,)
(40,int)
(41,data)
(42,NULL)
(43,100*sizeof(int)
(44,break;)
(45,break;)
(46,5)
(47,case 6:)
(48,malloc(100*sizeof(int)
(49,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^