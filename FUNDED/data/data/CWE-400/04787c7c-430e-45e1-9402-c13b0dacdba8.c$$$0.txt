-----label-----
1
-----code-----
static int
peer_svc_add(struct peer *peer, const struct ble_gatt_svc *gatt_svc)
{
    struct peer_svc *prev;
    struct peer_svc *svc;

    svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);
    if (svc != NULL) {
        /* Service already discovered. */
        return 0;
    }

    svc = os_memblock_get(&peer_svc_pool);
    if (svc == NULL) {
        /* Out of memory. */
        return BLE_HS_ENOMEM;
    }
    memset(svc, 0, sizeof *svc);

    svc->svc = *gatt_svc;
    SLIST_INIT(&svc->chrs);

    if (prev == NULL) {
        SLIST_INSERT_HEAD(&peer->svcs, svc, next);
    } else {
        SLIST_INSERT_AFTER(prev, svc, next);
    }

    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
36,39
36,40
37,38
39,40
41,42
41,43
42,43
45,46
46,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
94,95
95,96
97,98
98,99
98,100
99,100
101,102
102,103
102,104
103,104
106,107
106,108
106,109
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
114,117
114,118
115,116
117,118
118,119
118,120
119,120
122,123
124,125
126,127
127,128
128,129
128,130
128,131
128,132
129,130
131,132
133,134
135,136
137,138
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,31,35,38,40,43,44,47,51,53,56,60,63,66,70,72,76,80,82,83,87,92,93,96,100,104,105,109,111,116,120,121,123,125,130,132,134,136,138
-----computeFrom-----
33,34
33,35
49,50
49,51
58,59
58,60
68,69
68,70
89,90
89,91
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
109,132
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intpeer_svc_add(struct peer *peer, const struct ble_gatt_svc *gatt_svc){    struct peer_svc *prev;    struct peer_svc *svc;    svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);    if (svc != NULL) {        /* Service already discovered. */        return 0;    }    svc = os_memblock_get(&peer_svc_pool);    if (svc == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }    memset(svc, 0, sizeof *svc);    svc->svc = *gatt_svc;    SLIST_INIT(&svc->chrs);    if (prev == NULL) {        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    } else {        SLIST_INSERT_AFTER(prev, svc, next);    }    return 0;}
static int
peer_svc_add(struct peer *peer, const struct ble_gatt_svc *gatt_svc)
peer_svc_add
struct peer *peer
struct peer
peer
*peer
*
peer
const struct ble_gatt_svc *gatt_svc
const struct ble_gatt_svc
ble_gatt_svc
*gatt_svc
*
gatt_svc
{    struct peer_svc *prev;    struct peer_svc *svc;    svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);    if (svc != NULL) {        /* Service already discovered. */        return 0;    }    svc = os_memblock_get(&peer_svc_pool);    if (svc == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }    memset(svc, 0, sizeof *svc);    svc->svc = *gatt_svc;    SLIST_INIT(&svc->chrs);    if (prev == NULL) {        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    } else {        SLIST_INSERT_AFTER(prev, svc, next);    }    return 0;}
struct peer_svc *prev;
struct peer_svc *prev;
struct peer_svc
peer_svc
*prev
*
prev
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);
svc = peer_svc_find(peer, gatt_svc->start_handle, &prev)
svc
svc
peer_svc_find(peer, gatt_svc->start_handle, &prev)
peer_svc_find
peer_svc_find
peer
peer
gatt_svc->start_handle
gatt_svc
gatt_svc
start_handle
&prev
prev
prev
if (svc != NULL) {        /* Service already discovered. */        return 0;    }
svc != NULL
svc
svc
NULL
NULL
{        /* Service already discovered. */        return 0;    }
return 0;
0
svc = os_memblock_get(&peer_svc_pool);
svc = os_memblock_get(&peer_svc_pool)
svc
svc
os_memblock_get(&peer_svc_pool)
os_memblock_get
os_memblock_get
&peer_svc_pool
peer_svc_pool
peer_svc_pool
if (svc == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }
svc == NULL
svc
svc
NULL
NULL
{        /* Out of memory. */        return BLE_HS_ENOMEM;    }
return BLE_HS_ENOMEM;
BLE_HS_ENOMEM
BLE_HS_ENOMEM
memset(svc, 0, sizeof *svc);
memset(svc, 0, sizeof *svc)
memset
memset
svc
svc
0
sizeof *svc
*svc
svc
svc
svc->svc = *gatt_svc;
svc->svc = *gatt_svc
svc->svc
svc
svc
svc
*gatt_svc
gatt_svc
gatt_svc
SLIST_INIT(&svc->chrs);
SLIST_INIT(&svc->chrs)
SLIST_INIT
SLIST_INIT
&svc->chrs
svc->chrs
svc
svc
chrs
if (prev == NULL) {        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    } else {        SLIST_INSERT_AFTER(prev, svc, next);    }
prev == NULL
prev
prev
NULL
NULL
{        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    }
SLIST_INSERT_HEAD(&peer->svcs, svc, next);
SLIST_INSERT_HEAD(&peer->svcs, svc, next)
SLIST_INSERT_HEAD
SLIST_INSERT_HEAD
&peer->svcs
peer->svcs
peer
peer
svcs
svc
svc
next
next
{        SLIST_INSERT_AFTER(prev, svc, next);    }
SLIST_INSERT_AFTER(prev, svc, next);
SLIST_INSERT_AFTER(prev, svc, next)
SLIST_INSERT_AFTER
SLIST_INSERT_AFTER
prev
prev
svc
svc
next
next
return 0;
0
-----joern-----
(46,44,0)
(22,65,0)
(5,69,0)
(44,0,0)
(22,35,0)
(28,62,0)
(10,24,0)
(50,25,0)
(52,43,0)
(48,8,0)
(39,7,0)
(58,3,0)
(17,63,0)
(64,49,0)
(11,63,0)
(26,42,0)
(30,45,0)
(8,48,0)
(50,63,0)
(9,56,0)
(41,48,0)
(8,24,0)
(6,42,0)
(48,35,0)
(38,58,0)
(54,45,0)
(8,40,0)
(25,50,0)
(18,25,0)
(3,65,0)
(31,63,0)
(37,63,0)
(21,49,0)
(65,63,0)
(55,7,0)
(19,7,0)
(66,18,0)
(36,37,0)
(0,44,0)
(43,24,0)
(56,61,0)
(50,37,0)
(58,63,0)
(69,37,0)
(7,37,0)
(45,37,0)
(49,21,0)
(47,50,0)
(20,12,0)
(7,1,0)
(18,37,0)
(2,22,0)
(24,63,0)
(56,37,0)
(49,40,0)
(6,58,0)
(0,37,0)
(45,20,0)
(16,23,0)
(3,37,0)
(51,8,0)
(12,20,0)
(12,63,0)
(27,3,0)
(34,50,0)
(33,49,0)
(32,23,0)
(56,21,0)
(20,45,0)
(37,0,0)
(65,22,0)
(4,63,0)
(57,63,0)
(29,3,0)
(53,8,0)
(14,28,0)
(13,53,0)
(60,56,0)
(24,8,0)
(68,69,0)
(42,67,0)
(8,53,0)
(6,28,0)
(25,18,0)
(15,43,0)
(59,48,0)
(21,56,0)
(19,23,1)
(38,7,1)
(24,8,1)
(51,10,1)
(64,23,1)
(22,2,1)
(13,48,1)
(22,35,1)
(8,40,1)
(14,43,1)
(7,39,1)
(34,69,1)
(69,37,1)
(43,24,1)
(30,54,1)
(39,55,1)
(43,52,1)
(47,34,1)
(29,50,1)
(2,3,1)
(45,30,1)
(41,59,1)
(25,18,1)
(66,47,1)
(21,49,1)
(58,38,1)
(59,51,1)
(9,60,1)
(50,37,1)
(55,19,1)
(48,41,1)
(60,21,1)
(53,13,1)
(54,65,1)
(38,56,1)
(42,26,1)
(65,22,1)
(8,53,1)
(3,37,1)
(50,25,1)
(7,37,1)
(5,68,1)
(56,9,1)
(18,37,1)
(45,37,1)
(32,12,1)
(33,64,1)
(23,16,1)
(68,37,1)
(46,36,1)
(6,28,1)
(56,21,1)
(69,5,1)
(26,69,1)
(49,33,1)
(58,3,1)
(36,43,1)
(28,14,1)
(20,45,1)
(3,27,1)
(8,48,1)
(52,15,1)
(6,58,1)
(48,35,1)
(15,24,1)
(37,0,1)
(27,29,1)
(56,37,1)
(6,42,1)
(18,66,1)
(12,20,1)
(49,40,1)
(16,32,1)
(44,46,1)
(0,44,1)
(56,37,2)
(55,23,2)
(64,23,2)
(49,23,2)
(26,69,2)
(18,37,2)
(54,69,2)
(28,43,2)
(45,37,2)
(6,58,2)
(6,28,2)
(18,69,2)
(8,40,2)
(0,43,2)
(5,43,2)
(58,69,2)
(20,45,2)
(12,20,2)
(37,43,2)
(37,0,2)
(65,69,2)
(2,69,2)
(39,23,2)
(48,35,2)
(60,23,2)
(44,43,2)
(20,69,2)
(24,8,2)
(69,43,2)
(65,22,2)
(22,69,2)
(12,69,2)
(66,69,2)
(6,42,2)
(7,23,2)
(21,23,2)
(32,69,2)
(25,18,2)
(68,43,2)
(25,69,2)
(43,24,2)
(30,69,2)
(50,25,2)
(3,37,2)
(23,69,2)
(0,44,2)
(8,48,2)
(50,69,2)
(22,35,2)
(50,37,2)
(45,69,2)
(33,23,2)
(9,23,2)
(38,69,2)
(3,69,2)
(19,23,2)
(56,21,2)
(16,69,2)
(34,69,2)
(56,23,2)
(42,69,2)
(27,69,2)
(47,69,2)
(36,43,2)
(46,43,2)
(21,49,2)
(14,43,2)
(69,37,2)
(29,69,2)
(7,37,2)
(58,3,2)
(49,40,2)
(8,53,2)
-----------------------------------
(0,os_memblock_get(&peer_svc_pool)
(1,)
(2,gatt_svc)
(3,svc->svc)
(4,if (prev == NULL)
(5,NULL)
(6,RET)
(7,SLIST_INSERT_AFTER(prev, svc, next)
(8,peer_svc_find(peer, gatt_svc->start_handle, &prev)
(9,next)
(10,svc)
(11,if (svc == NULL)
(12,SLIST_INIT(&svc->chrs)
(13,prev)
(14,0)
(15,svc)
(16,NULL)
(17,prev)
(18,*svc)
(19,prev)
(20,&svc->chrs)
(21,&peer->svcs)
(22,*gatt_svc)
(23,prev == NULL)
(24,svc = peer_svc_find(peer, gatt_svc->start_handle, &prev)
(25,sizeof *svc)
(26,BLE_HS_ENOMEM)
(27,svc)
(28,return 0;)
(29,svc)
(30,chrs)
(31,svc)
(32,prev)
(33,svcs)
(34,svc)
(35,const struct ble_gatt_svc *gatt_svc)
(36,svc)
(37,svc = os_memblock_get(&peer_svc_pool)
(38,0)
(39,next)
(40,struct peer *peer)
(41,start_handle)
(42,return BLE_HS_ENOMEM;)
(43,svc != NULL)
(44,&peer_svc_pool)
(45,svc->chrs)
(46,peer_svc_pool)
(47,0)
(48,gatt_svc->start_handle)
(49,peer->svcs)
(50,memset(svc, 0, sizeof *svc)
(51,peer)
(52,NULL)
(53,&prev)
(54,svc)
(55,svc)
(56,SLIST_INSERT_HEAD(&peer->svcs, svc, next)
(57,if (svc != NULL)
(58,return 0;)
(59,gatt_svc)
(60,svc)
(61,)
(62,)
(63,)
(64,peer)
(65,svc->svc = *gatt_svc)
(66,svc)
(67,)
(68,svc)
(69,svc == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^