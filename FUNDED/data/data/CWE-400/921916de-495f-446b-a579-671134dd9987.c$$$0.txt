-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    goto sink;
sink:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
30,31
30,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,18,20,24,27,29,31,35,37,38,42,45,47,52,55,57,60,63,66,67,71,73,78,80,84,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
22,23
22,24
40,41
40,42
50,51
50,52
61,62
61,63
69,70
69,71
-----guardedBy-----
47,88
42,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Set data to a random value */    data = rand();
source
data = rand();
data = rand()
data
data
rand()
rand
rand
goto sink;
sink
sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
sink
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(14,2,0)
(29,2,0)
(9,39,0)
(42,6,0)
(32,9,0)
(10,17,0)
(7,41,0)
(34,43,0)
(27,26,0)
(44,10,0)
(20,28,0)
(23,28,0)
(24,8,0)
(10,44,0)
(5,18,0)
(26,18,0)
(10,9,0)
(14,30,0)
(45,27,0)
(31,10,0)
(35,43,0)
(22,26,0)
(37,22,0)
(39,9,0)
(40,18,0)
(8,26,0)
(17,10,0)
(27,17,0)
(21,6,0)
(6,21,0)
(17,27,0)
(12,25,0)
(11,26,0)
(0,21,0)
(43,28,0)
(13,33,0)
(38,28,0)
(46,8,0)
(47,44,0)
(19,40,0)
(3,22,0)
(27,45,0)
(26,27,0)
(16,28,0)
(2,14,0)
(6,9,0)
(25,26,0)
(41,28,0)
(15,41,0)
(9,28,0)
(22,18,0)
(25,18,0)
(1,28,0)
(40,26,0)
(4,13,0)
(25,12,1)
(10,9,1)
(0,42,1)
(46,24,1)
(12,22,1)
(36,13,1)
(37,3,1)
(44,47,1)
(6,9,1)
(11,6,1)
(10,44,1)
(8,26,1)
(3,14,1)
(8,46,1)
(25,26,1)
(47,31,1)
(3,8,1)
(1,41,1)
(7,15,1)
(36,40,1)
(19,25,1)
(27,45,1)
(31,11,1)
(6,21,1)
(39,32,1)
(4,6,1)
(26,27,1)
(17,10,1)
(29,8,1)
(32,1,1)
(41,7,1)
(42,16,1)
(22,37,1)
(9,39,1)
(13,4,1)
(21,0,1)
(22,26,1)
(14,2,1)
(16,9,1)
(27,17,1)
(2,29,1)
(24,26,1)
(40,19,1)
(40,26,1)
(6,21,2)
(8,26,2)
(27,17,2)
(9,39,2)
(40,6,2)
(19,6,2)
(8,6,2)
(46,6,2)
(10,44,2)
(47,6,2)
(17,10,2)
(4,6,2)
(37,6,2)
(26,6,2)
(25,6,2)
(10,9,2)
(40,26,2)
(14,2,2)
(26,27,2)
(3,6,2)
(29,8,2)
(12,6,2)
(31,6,2)
(24,6,2)
(27,45,2)
(14,8,2)
(17,6,2)
(44,6,2)
(2,8,2)
(25,26,2)
(22,6,2)
(6,9,2)
(13,6,2)
(10,6,2)
(11,6,2)
(22,26,2)
(27,6,2)
-----------------------------------
(0,HELLO_STRING)
(1,goto source;)
(2,-1)
(3,myString)
(4,"Input is less than the length of the source string")
(5,if (myString == NULL)
(6,data > strlen(HELLO_STRING)
(7,0)
(8,myString == NULL)
(9,data = rand()
(10,data*sizeof(char)
(11,myString)
(12,myString)
(13,printLine("Input is less than the length of the source string")
(14,exit(-1)
(15,data)
(16,goto sink;)
(17,malloc(data*sizeof(char)
(18,)
(19,myString)
(20,sink:)
(21,strlen(HELLO_STRING)
(22,strcpy(myString, HELLO_STRING)
(23,source:)
(24,myString)
(25,printLine(myString)
(26,myString = (char *)
(27,(char *)
(28,)
(29,1)
(30,)
(31,data)
(32,data)
(33,)
(34,if (data > strlen(HELLO_STRING)
(35,myString)
(36,RET)
(37,HELLO_STRING)
(38,data)
(39,rand()
(40,free(myString)
(41,data = 0)
(42,data)
(43,)
(44,sizeof(char)
(45,char *)
(46,NULL)
(47,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^