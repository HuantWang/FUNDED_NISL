-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalFive==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,31,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
29,30
29,31
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(7,46,0)
(53,22,0)
(16,36,0)
(47,7,0)
(19,31,0)
(0,8,0)
(34,51,0)
(35,8,0)
(41,52,0)
(5,46,0)
(15,36,0)
(9,11,0)
(28,46,0)
(17,1,0)
(31,29,0)
(33,22,0)
(10,7,0)
(36,45,0)
(51,22,0)
(33,40,0)
(28,1,0)
(43,46,0)
(11,23,0)
(23,25,0)
(52,22,0)
(13,20,0)
(39,33,0)
(52,40,0)
(22,17,0)
(38,48,0)
(26,14,0)
(28,0,0)
(21,18,0)
(14,22,0)
(1,28,0)
(17,3,0)
(12,18,0)
(3,17,0)
(7,47,0)
(2,47,0)
(37,8,0)
(20,28,0)
(7,0,0)
(50,48,0)
(23,11,0)
(27,51,0)
(17,22,0)
(46,30,0)
(6,40,0)
(24,28,0)
(44,0,0)
(51,40,0)
(32,0,0)
(28,20,0)
(42,14,0)
(4,8,0)
(1,17,0)
(22,40,0)
(7,0,1)
(20,13,1)
(33,22,1)
(17,1,1)
(34,23,1)
(12,21,1)
(50,38,1)
(7,47,1)
(17,3,1)
(33,39,1)
(18,12,1)
(51,27,1)
(34,14,1)
(46,5,1)
(43,18,1)
(22,17,1)
(39,51,1)
(47,2,1)
(5,43,1)
(14,26,1)
(28,0,1)
(26,42,1)
(14,22,1)
(13,24,1)
(42,22,1)
(44,32,1)
(52,41,1)
(53,7,1)
(27,34,1)
(48,50,1)
(51,22,1)
(2,10,1)
(38,18,1)
(31,19,1)
(38,46,1)
(7,46,1)
(19,7,1)
(41,33,1)
(10,48,1)
(21,0,1)
(49,31,1)
(28,20,1)
(0,44,1)
(28,46,1)
(1,28,1)
(11,9,1)
(49,52,1)
(49,48,1)
(52,22,1)
(24,53,1)
(23,11,1)
(9,14,1)
(22,7,2)
(28,46,2)
(33,22,2)
(17,3,2)
(7,47,2)
(41,7,2)
(39,7,2)
(10,48,2)
(52,7,2)
(52,22,2)
(28,20,2)
(51,7,2)
(23,11,2)
(17,7,2)
(13,7,2)
(1,28,2)
(19,7,2)
(20,7,2)
(7,48,2)
(17,1,2)
(34,7,2)
(27,7,2)
(5,18,2)
(14,7,2)
(28,7,2)
(23,14,2)
(51,22,2)
(11,14,2)
(43,18,2)
(22,17,2)
(42,7,2)
(28,0,2)
(7,46,2)
(24,7,2)
(53,7,2)
(46,18,2)
(26,7,2)
(1,7,2)
(2,48,2)
(7,0,2)
(31,7,2)
(33,7,2)
(47,48,2)
(9,14,2)
(14,22,2)
-----------------------------------
(0,data = 0)
(1,malloc(data*sizeof(wchar_t)
(2,HELLO_STRING)
(3,wchar_t *)
(4,if(globalFive==5)
(5,20)
(6,if (myString == NULL)
(7,data > wcslen(HELLO_STRING)
(8,)
(9,1)
(10,data)
(11,-1)
(12,5)
(13,wchar_t)
(14,myString == NULL)
(15,if (data > wcslen(HELLO_STRING)
(16,myString)
(17,(wchar_t *)
(18,globalFive==5)
(19,"Input is less than the length of the source string")
(20,sizeof(wchar_t)
(21,globalFive)
(22,myString = (wchar_t *)
(23,exit(-1)
(24,data)
(25,)
(26,NULL)
(27,HELLO_STRING)
(28,data*sizeof(wchar_t)
(29,)
(30,)
(31,printLine("Input is less than the length of the source string")
(32,data)
(33,printWLine(myString)
(34,myString)
(35,if(globalFive==5)
(36,)
(37,data)
(38,globalFive)
(39,myString)
(40,)
(41,myString)
(42,myString)
(43,data)
(44,0)
(45,)
(46,data = 20)
(47,wcslen(HELLO_STRING)
(48,globalFive==5)
(49,RET)
(50,5)
(51,wcscpy(myString, HELLO_STRING)
(52,free(myString)
(53,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^