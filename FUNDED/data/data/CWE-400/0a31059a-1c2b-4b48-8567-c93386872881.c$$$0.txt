-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
81,82
83,84
83,85
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
100,101
100,102
101,102
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
113,114
114,115
115,116
115,117
116,117
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,65,68,70,73,78,80,82,87,88,91,92,98,99,102,106,107,109,112,117,118
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
84,85
84,86
85,86
85,87
89,90
89,91
96,97
96,98
100,101
100,102
-----guardedBy-----
34,50
91,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(42,51,0)
(55,42,0)
(0,19,0)
(32,31,0)
(47,31,0)
(32,46,0)
(13,40,0)
(49,2,0)
(15,34,0)
(38,45,0)
(25,57,0)
(17,24,0)
(22,4,0)
(40,31,0)
(3,38,0)
(60,8,0)
(11,34,0)
(14,27,0)
(56,17,0)
(4,28,0)
(8,46,0)
(35,45,0)
(61,34,0)
(19,2,0)
(23,39,0)
(53,11,0)
(50,31,0)
(17,57,0)
(6,4,0)
(36,7,0)
(52,63,0)
(2,35,0)
(41,51,0)
(30,40,0)
(20,37,0)
(8,38,0)
(48,46,0)
(21,8,0)
(12,32,0)
(19,28,0)
(39,38,0)
(24,17,0)
(59,42,0)
(57,17,0)
(33,2,0)
(40,7,0)
(2,8,0)
(43,19,0)
(46,10,0)
(29,35,0)
(1,35,0)
(54,45,0)
(46,32,0)
(26,45,0)
(17,2,0)
(44,54,0)
(28,4,0)
(4,2,0)
(58,20,0)
(8,35,0)
(38,39,0)
(57,34,0)
(18,51,0)
(16,54,0)
(7,40,0)
(31,54,0)
(9,14,0)
(51,35,0)
(28,19,0)
(62,40,0)
(57,17,1)
(59,2,1)
(50,38,1)
(28,19,1)
(9,57,1)
(34,15,1)
(13,30,1)
(5,57,1)
(8,60,1)
(4,2,1)
(60,21,1)
(2,8,1)
(20,58,1)
(57,34,1)
(62,31,1)
(19,2,1)
(19,43,1)
(8,46,1)
(56,25,1)
(32,12,1)
(7,40,1)
(4,22,1)
(33,49,1)
(48,7,1)
(2,33,1)
(38,39,1)
(8,38,1)
(39,23,1)
(53,14,1)
(11,53,1)
(58,7,1)
(17,2,1)
(0,4,1)
(5,28,1)
(12,48,1)
(15,61,1)
(21,20,1)
(11,34,1)
(46,32,1)
(43,0,1)
(31,47,1)
(40,13,1)
(28,4,1)
(22,6,1)
(30,62,1)
(55,59,1)
(61,28,1)
(25,11,1)
(6,42,1)
(36,40,1)
(42,55,1)
(17,24,1)
(21,46,1)
(40,31,1)
(47,50,1)
(23,3,1)
(14,9,1)
(7,36,1)
(49,8,1)
(32,31,1)
(25,34,1)
(17,56,1)
(57,34,2)
(61,28,2)
(56,28,2)
(57,57,2)
(46,32,2)
(56,57,2)
(4,2,2)
(57,28,2)
(9,57,2)
(2,8,2)
(53,57,2)
(17,28,2)
(25,28,2)
(32,7,2)
(20,7,2)
(17,57,2)
(8,46,2)
(57,17,2)
(17,24,2)
(17,2,2)
(58,7,2)
(32,31,2)
(12,7,2)
(11,57,2)
(25,57,2)
(48,7,2)
(28,4,2)
(43,4,2)
(8,38,2)
(0,4,2)
(34,28,2)
(15,28,2)
(28,19,2)
(19,2,2)
(14,57,2)
(46,7,2)
(40,31,2)
(19,4,2)
(38,39,2)
(7,40,2)
(11,34,2)
-----------------------------------
(0,count)
(1,countCopy)
(2,count = countCopy)
(3,count)
(4,count > 0)
(5,RET)
(6,count)
(7,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,countCopy = count)
(9,"Hello")
(10,)
(11,i++)
(12,inputBuffer)
(13,stdin)
(14,printLine("Hello")
(15,0)
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,(size_t)
(18,i)
(19,count <= 20)
(20,printLine("fgets()
(21,countCopy)
(22,0)
(23,1)
(24,size_t)
(25,i)
(26,count)
(27,)
(28,count > 0 && count <= 20)
(29,count)
(30,CHAR_ARRAY_SIZE)
(31,inputBuffer[CHAR_ARRAY_SIZE] = "")
(32,atoi(inputBuffer)
(33,countCopy)
(34,i = 0)
(35,)
(36,NULL)
(37,)
(38,count = -1)
(39,-1)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,if (count > 0 && count <= 20)
(42,i = 0)
(43,20)
(44,inputBuffer)
(45,)
(46,count = atoi(inputBuffer)
(47,"")
(48,count)
(49,count)
(50,inputBuffer)
(51,)
(52,for (i = 0; i < (size_t)
(53,i)
(54,)
(55,0)
(56,count)
(57,i < (size_t)
(58,"fgets()
(59,i)
(60,count)
(61,i)
(62,inputBuffer)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^