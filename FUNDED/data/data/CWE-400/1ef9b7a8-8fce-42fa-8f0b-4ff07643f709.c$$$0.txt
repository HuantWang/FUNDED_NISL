-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,71
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_08_bad()
CWE401_Memory_Leak__char_calloc_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,15,0)
(20,12,0)
(18,29,0)
(23,11,0)
(8,13,0)
(3,32,0)
(24,4,0)
(16,30,0)
(25,4,0)
(17,4,0)
(15,24,0)
(2,11,0)
(28,4,0)
(8,29,0)
(28,30,0)
(6,21,0)
(9,32,0)
(24,7,0)
(15,21,0)
(4,30,0)
(4,24,0)
(29,8,0)
(32,4,0)
(26,25,0)
(27,12,0)
(1,25,0)
(7,24,0)
(31,15,0)
(19,28,0)
(10,11,0)
(32,30,0)
(24,15,0)
(12,11,0)
(24,7,1)
(5,28,1)
(1,4,1)
(29,18,1)
(24,15,1)
(5,22,1)
(28,19,1)
(18,25,1)
(9,25,1)
(32,4,1)
(12,27,1)
(8,29,1)
(25,4,1)
(0,5,1)
(22,12,1)
(15,21,1)
(21,6,1)
(6,31,1)
(3,9,1)
(26,1,1)
(9,8,1)
(27,20,1)
(19,32,1)
(28,4,1)
(17,22,1)
(4,24,1)
(32,3,1)
(25,26,1)
(31,17,1)
(24,22,2)
(6,22,2)
(17,22,2)
(31,22,2)
(18,25,2)
(8,29,2)
(24,15,2)
(28,22,2)
(32,22,2)
(26,22,2)
(25,22,2)
(15,21,2)
(24,7,2)
(19,22,2)
(25,4,2)
(4,24,2)
(29,25,2)
(15,22,2)
(1,22,2)
(28,4,2)
(32,4,2)
(8,25,2)
(9,22,2)
(21,22,2)
(3,22,2)
(4,22,2)
-----------------------------------
(0,RET)
(1,data)
(2,if(staticReturnsTrue()
(3,"A String")
(4,data = (char *)
(5,staticReturnsTrue()
(6,char)
(7,char *)
(8,exit(-1)
(9,data)
(10,if(staticReturnsTrue()
(11,)
(12,data = NULL)
(13,)
(14, sizeof(char)
(15,calloc(100, sizeof(char)
(16,if (data == NULL)
(17,data)
(18,1)
(19,data)
(20,data)
(21,sizeof(char)
(22,staticReturnsTrue()
(23,data)
(24,(char *)
(25,data == NULL)
(26,NULL)
(27,NULL)
(28,printLine(data)
(29,-1)
(30,)
(31,100)
(32,strcpy(data, "A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^