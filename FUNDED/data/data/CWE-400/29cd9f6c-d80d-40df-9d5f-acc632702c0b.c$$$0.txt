-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
27,28
29,30
29,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
50,51
50,52
50,53
51,52
51,53
52,53
52,54
53,54
55,56
55,57
56,57
58,59
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
72,73
74,75
74,76
75,76
77,78
77,79
78,79
80,81
81,82
81,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
99,100
101,102
103,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
-----nextToken-----
2,4,9,11,15,16,20,23,28,30,33,37,39,42,46,48,49,54,57,59,62,63,68,71,73,76,79,82,83,87,89,94,96,100,102,104,108,110,114,116,121,122
-----computeFrom-----
13,14
13,15
18,19
18,20
51,52
51,53
52,53
52,54
60,61
60,62
66,67
66,68
77,78
77,79
85,86
85,87
-----guardedBy-----
59,104
62,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
{        size_t dataCopy = data;        size_t data = dataCopy;        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(7,19,0)
(55,52,0)
(44,8,0)
(43,48,0)
(35,15,0)
(7,10,0)
(55,29,0)
(0,2,0)
(32,33,0)
(7,2,0)
(20,14,0)
(16,19,0)
(11,14,0)
(48,15,0)
(51,2,0)
(28,4,0)
(2,48,0)
(13,7,0)
(6,28,0)
(31,48,0)
(33,40,0)
(40,33,0)
(25,40,0)
(41,21,0)
(52,55,0)
(46,40,0)
(30,31,0)
(33,32,0)
(25,4,0)
(36,48,0)
(8,44,0)
(34,38,0)
(42,31,0)
(33,10,0)
(44,22,0)
(14,40,0)
(23,35,0)
(40,4,0)
(18,35,0)
(38,15,0)
(26,40,0)
(29,55,0)
(45,55,0)
(10,7,0)
(27,4,0)
(9,52,0)
(28,40,0)
(49,25,0)
(39,48,0)
(10,33,0)
(24,21,0)
(47,15,0)
(50,53,0)
(53,54,0)
(46,4,0)
(12,43,0)
(38,1,0)
(19,7,0)
(1,38,0)
(37,43,0)
(56,8,0)
(21,29,0)
(55,2,0)
(21,2,0)
(31,38,0)
(2,31,0)
(17,46,0)
(3,46,0)
(29,21,0)
(46,3,1)
(42,38,1)
(25,40,1)
(20,40,1)
(18,23,1)
(0,51,1)
(24,55,1)
(55,52,1)
(17,44,1)
(55,2,1)
(56,14,1)
(50,29,1)
(29,21,1)
(14,11,1)
(21,41,1)
(35,18,1)
(13,26,1)
(8,56,1)
(33,32,1)
(6,46,1)
(26,29,1)
(53,50,1)
(41,24,1)
(17,14,1)
(9,45,1)
(45,2,1)
(46,40,1)
(28,40,1)
(30,42,1)
(51,31,1)
(2,31,1)
(3,17,1)
(16,13,1)
(31,30,1)
(19,16,1)
(11,20,1)
(10,7,1)
(25,49,1)
(7,19,1)
(21,2,1)
(28,6,1)
(1,34,1)
(52,9,1)
(33,10,1)
(44,8,1)
(7,2,1)
(5,53,1)
(2,0,1)
(40,33,1)
(49,28,1)
(14,40,1)
(31,38,1)
(29,55,1)
(5,25,1)
(34,35,1)
(38,1,1)
(50,29,2)
(6,29,2)
(28,40,2)
(14,29,2)
(33,32,2)
(55,52,2)
(53,29,2)
(31,38,2)
(25,29,2)
(38,1,2)
(44,8,2)
(17,29,2)
(56,14,2)
(10,29,2)
(7,2,2)
(7,19,2)
(49,29,2)
(21,55,2)
(33,29,2)
(19,29,2)
(46,40,2)
(26,29,2)
(40,29,2)
(41,55,2)
(10,7,2)
(40,33,2)
(20,29,2)
(8,14,2)
(46,29,2)
(16,29,2)
(2,31,2)
(21,2,2)
(28,29,2)
(29,21,2)
(25,40,2)
(55,2,2)
(14,40,2)
(29,55,2)
(7,29,2)
(24,55,2)
(44,14,2)
(11,29,2)
(3,29,2)
(33,10,2)
(13,29,2)
-----------------------------------
(0,dataCopy)
(1,rand()
(2,data = dataCopy)
(3,HELLO_STRING)
(4,)
(5,RET)
(6,myString)
(7,data*sizeof(wchar_t)
(8,-1)
(9,HELLO_STRING)
(10,malloc(data*sizeof(wchar_t)
(11,NULL)
(12,myString)
(13,data)
(14,myString == NULL)
(15,)
(16,wchar_t)
(17,myString)
(18,0)
(19,sizeof(wchar_t)
(20,myString)
(21,data < 100)
(22,)
(23,data)
(24,data)
(25,free(myString)
(26,myString)
(27,if (myString == NULL)
(28,printWLine(myString)
(29,data > wcslen(HELLO_STRING)
(30,data)
(31,dataCopy = data)
(32,wchar_t *)
(33,(wchar_t *)
(34,data)
(35,data = 0)
(36,dataCopy)
(37,if (data > wcslen(HELLO_STRING)
(38,data = rand()
(39,data)
(40,myString = (wchar_t *)
(41,100)
(42,dataCopy)
(43,)
(44,exit(-1)
(45,data)
(46,wcscpy(myString, HELLO_STRING)
(47,data)
(48,)
(49,myString)
(50,"Input is less than the length of the source string or too large")
(51,data)
(52,wcslen(HELLO_STRING)
(53,printLine("Input is less than the length of the source string or too large")
(54,)
(55,data > wcslen(HELLO_STRING)
(56,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^