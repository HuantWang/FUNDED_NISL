-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
102,103
104,105
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,70,73,75,78,80,83,84,88,90,91,95,97,101,103,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
68,69
68,70
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__char_calloc_12_bad()
CWE401_Memory_Leak__char_calloc_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(32,12,0)
(16,45,0)
(13,10,0)
(6,12,0)
(34,31,0)
(20,13,0)
(41,27,0)
(18,8,0)
(47,18,0)
(31,34,0)
(37,27,0)
(4,49,0)
(3,47,0)
(8,25,0)
(45,49,0)
(48,9,0)
(10,13,0)
(8,18,0)
(38,30,0)
(50,2,0)
(1,7,0)
(10,21,0)
(32,49,0)
(7,11,0)
(11,8,0)
(27,41,0)
(43,45,0)
(30,2,0)
(24,47,0)
(0,11,0)
(39,0,0)
(0,49,0)
(35,41,0)
(41,31,0)
(17,2,0)
(6,49,0)
(15,3,0)
(31,49,0)
(25,8,0)
(9,11,0)
(29,30,0)
(8,11,0)
(11,5,0)
(47,3,0)
(14,6,0)
(42,2,0)
(26,12,0)
(9,5,0)
(18,47,0)
(23,7,0)
(7,5,0)
(0,19,0)
(46,6,0)
(33,32,0)
(40,11,0)
(31,41,0)
(49,31,0)
(49,12,0)
(8,18,1)
(4,22,1)
(46,45,1)
(20,45,1)
(11,8,1)
(13,20,1)
(36,44,1)
(49,31,1)
(40,22,1)
(7,11,1)
(27,37,1)
(7,1,1)
(31,34,1)
(33,6,1)
(18,47,1)
(46,10,1)
(37,35,1)
(32,49,1)
(1,23,1)
(41,27,1)
(10,13,1)
(43,49,1)
(6,49,1)
(31,41,1)
(23,11,1)
(15,24,1)
(0,49,1)
(39,44,1)
(9,11,1)
(0,11,1)
(32,33,1)
(45,16,1)
(3,15,1)
(0,39,1)
(14,46,1)
(8,25,1)
(47,3,1)
(44,32,1)
(29,38,1)
(44,9,1)
(24,40,1)
(35,4,1)
(45,49,1)
(6,14,1)
(36,0,1)
(48,7,1)
(16,43,1)
(22,30,1)
(30,29,1)
(9,48,1)
(39,44,2)
(13,45,2)
(9,11,2)
(14,22,2)
(3,22,2)
(45,49,2)
(23,22,2)
(8,18,2)
(33,22,2)
(8,22,2)
(6,49,2)
(18,22,2)
(11,22,2)
(37,22,2)
(46,22,2)
(20,45,2)
(31,22,2)
(41,27,2)
(32,49,2)
(0,49,2)
(6,22,2)
(16,22,2)
(49,22,2)
(8,25,2)
(10,13,2)
(31,41,2)
(7,22,2)
(0,44,2)
(47,3,2)
(7,11,2)
(40,22,2)
(43,22,2)
(24,22,2)
(18,47,2)
(10,45,2)
(9,22,2)
(27,22,2)
(32,22,2)
(35,22,2)
(47,22,2)
(0,11,2)
(31,34,2)
(1,22,2)
(45,22,2)
(4,22,2)
(49,31,2)
(11,8,2)
(41,22,2)
(15,22,2)
(48,22,2)
-----------------------------------
(0,free(data)
(1,"A String")
(2,)
(3,sizeof(char)
(4,data)
(5,)
(6,strcpy(data, "A String")
(7,strcpy(data, "A String")
(8,(char *)
(9,printLine(data)
(10,exit(-1)
(11,data = (char *)
(12,)
(13,-1)
(14,"A String")
(15,char)
(16,NULL)
(17,data)
(18,ALLOCA(100*sizeof(char)
(19,)
(20,1)
(21,)
(22,globalReturnsTrueOrFalse()
(23,data)
(24,100)
(25,char *)
(26,if (data == NULL)
(27,sizeof(char)
(28, sizeof(char)
(29,NULL)
(30,data = NULL)
(31,(char *)
(32,printLine(data)
(33,data)
(34,char *)
(35,100)
(36,RET)
(37,char)
(38,data)
(39,data)
(40,data)
(41,calloc(100, sizeof(char)
(42,if(globalReturnsTrueOrFalse()
(43,data)
(44,globalReturnsTrueOrFalse()
(45,data == NULL)
(46,data)
(47,100*sizeof(char)
(48,data)
(49,data = (char *)
(50,if(globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^