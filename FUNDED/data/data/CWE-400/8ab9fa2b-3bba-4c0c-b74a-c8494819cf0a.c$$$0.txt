-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_17_bad()
{
    int i,j;
    int count;
    /* Initialize count */
    count = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
58,59
59,60
59,61
59,62
59,63
59,64
59,65
59,66
60,61
61,62
61,63
62,63
64,65
64,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
75,76
76,77
78,79
79,80
79,81
81,82
81,83
81,84
84,85
86,87
87,88
87,89
88,89
90,91
90,92
90,93
91,92
93,94
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
108,109
108,110
108,111
108,112
109,110
110,111
110,112
111,112
114,115
114,116
115,116
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
127,128
128,129
128,130
129,130
129,131
130,131
130,132
131,132
133,134
135,136
135,137
135,138
135,139
135,140
136,137
138,139
140,141
141,142
141,143
144,145
144,146
145,146
147,148
149,150
151,152
152,153
153,154
153,155
154,155
157,158
157,159
158,159
160,161
161,162
162,163
162,164
163,164
165,166
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,44,49,50,53,54,57,63,65,67,71,73,74,77,80,82,83,85,89,92,94,95,99,101,106,107,112,113,116,120,121,123,126,132,134,137,139,142,143,146,148,150,155,156,159,164,166
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
47,48
47,49
51,52
51,53
87,88
87,89
97,98
97,99
110,111
110,112
114,115
114,116
129,130
129,131
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_17_bad(){    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_17_bad()
CWE400_Resource_Exhaustion__rand_fwrite_17_bad
{    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(52,21,0)
(62,69,0)
(13,71,0)
(84,67,0)
(62,8,0)
(60,52,0)
(26,61,0)
(12,65,0)
(56,16,0)
(11,61,0)
(46,29,0)
(18,12,0)
(29,39,0)
(47,61,0)
(20,54,0)
(50,7,0)
(82,65,0)
(2,61,0)
(55,50,0)
(54,34,0)
(18,24,0)
(72,34,0)
(8,62,0)
(81,6,0)
(19,37,0)
(41,33,0)
(0,38,0)
(9,37,0)
(45,34,0)
(4,15,0)
(84,62,0)
(39,61,0)
(73,39,0)
(14,54,0)
(28,31,0)
(74,61,0)
(42,31,0)
(50,39,0)
(18,53,0)
(64,87,0)
(36,62,0)
(27,15,0)
(76,40,0)
(49,66,0)
(24,18,0)
(48,78,0)
(80,84,0)
(17,78,0)
(30,78,0)
(61,79,0)
(23,16,0)
(68,56,0)
(54,39,0)
(75,17,0)
(38,84,0)
(40,71,0)
(10,66,0)
(84,38,0)
(70,66,0)
(3,56,0)
(40,66,0)
(83,53,0)
(84,40,0)
(35,29,0)
(37,61,0)
(25,6,0)
(34,61,0)
(1,81,0)
(53,18,0)
(43,18,0)
(15,78,0)
(12,18,0)
(59,16,0)
(87,16,0)
(44,41,0)
(18,39,0)
(63,66,0)
(71,40,0)
(77,66,0)
(31,61,0)
(38,6,0)
(5,32,0)
(51,61,0)
(85,18,0)
(67,84,0)
(58,24,0)
(39,54,0)
(65,12,0)
(86,6,0)
(84,80,1)
(20,73,1)
(57,38,1)
(60,29,1)
(36,56,1)
(27,17,1)
(13,76,1)
(80,0,1)
(9,19,1)
(40,71,1)
(16,59,1)
(22,15,1)
(29,46,1)
(56,16,1)
(23,40,1)
(38,6,1)
(31,28,1)
(27,78,1)
(58,43,1)
(78,48,1)
(12,18,1)
(44,12,1)
(55,57,1)
(81,6,1)
(3,16,1)
(59,23,1)
(14,20,1)
(35,39,1)
(82,38,1)
(48,30,1)
(18,53,1)
(17,75,1)
(43,65,1)
(1,41,1)
(17,78,1)
(65,82,1)
(84,67,1)
(1,12,1)
(73,34,1)
(85,53,1)
(56,68,1)
(42,15,1)
(45,72,1)
(52,60,1)
(0,6,1)
(4,27,1)
(28,42,1)
(84,40,1)
(50,55,1)
(24,58,1)
(75,57,1)
(62,8,1)
(19,31,1)
(8,36,1)
(54,34,1)
(12,65,1)
(53,83,1)
(41,44,1)
(38,84,1)
(6,86,1)
(0,81,1)
(18,85,1)
(87,16,1)
(18,24,1)
(25,29,1)
(87,64,1)
(30,56,1)
(81,1,1)
(68,3,1)
(64,62,1)
(54,14,1)
(37,9,1)
(18,39,1)
(75,50,1)
(15,78,1)
(86,25,1)
(25,52,1)
(29,39,1)
(3,87,1)
(50,39,1)
(46,35,1)
(83,24,1)
(71,13,1)
(34,45,1)
(72,37,1)
(15,4,1)
(39,54,1)
(84,62,1)
(17,15,2)
(87,16,2)
(3,56,2)
(80,38,2)
(75,15,2)
(57,15,2)
(56,16,2)
(44,12,2)
(34,15,2)
(62,8,2)
(81,6,2)
(82,38,2)
(39,54,2)
(39,15,2)
(84,40,2)
(19,15,2)
(68,56,2)
(43,38,2)
(20,15,2)
(25,15,2)
(29,15,2)
(27,15,2)
(0,15,2)
(53,38,2)
(42,15,2)
(18,38,2)
(28,15,2)
(29,39,2)
(84,15,2)
(54,15,2)
(6,15,2)
(12,18,2)
(84,67,2)
(15,78,2)
(17,78,2)
(60,29,2)
(80,15,2)
(8,56,2)
(35,15,2)
(72,15,2)
(1,38,2)
(18,24,2)
(37,15,2)
(12,38,2)
(64,56,2)
(58,38,2)
(86,15,2)
(12,65,2)
(9,15,2)
(4,15,2)
(52,29,2)
(18,53,2)
(38,38,2)
(73,15,2)
(84,38,2)
(85,38,2)
(24,38,2)
(65,38,2)
(18,39,2)
(83,38,2)
(14,15,2)
(50,57,2)
(87,56,2)
(55,57,2)
(38,84,2)
(45,15,2)
(0,38,2)
(15,15,2)
(41,12,2)
(36,56,2)
(40,71,2)
(56,56,2)
(31,15,2)
(84,62,2)
(38,15,2)
(46,15,2)
(81,38,2)
(62,56,2)
(50,39,2)
(54,34,2)
(38,6,2)
-----------------------------------
(0,i)
(1,i)
(2,if (pFile)
(3,i)
(4,1)
(5,if (strlen(SENTENCE)
(6,i = 0)
(7,)
(8,RAND32()
(9,NULL)
(10,i)
(11,pFile)
(12,strlen(SENTENCE)
(13,1)
(14,"w+")
(15,j < 1)
(16,i = 0)
(17,j++)
(18,fwrite(SENTENCE, sizeof(char)
(19,pFile)
(20,filename)
(21,)
(22,RET)
(23,i)
(24,sizeof(char)
(25,i)
(26,filename)
(27,j)
(28,0)
(29,pFile == NULL)
(30,j)
(31,i = 0)
(32,)
(33,)
(34,*filename = "output_bad.txt")
(35,pFile)
(36,count)
(37,*pFile = NULL)
(38,i < (size_t)
(39,pFile = fopen(filename, "w+")
(40,count = -1)
(41,exit(1)
(42,i)
(43,SENTENCE)
(44,1)
(45,"output_bad.txt")
(46,NULL)
(47,i)
(48,0)
(49,for(j = 0; j < 1; j++)
(50,fclose(pFile)
(51,for (i = 0; i < (size_t)
(52,exit(1)
(53,strlen(SENTENCE)
(54,fopen(filename, "w+")
(55,pFile)
(56,i < 1)
(57,pFile)
(58,char)
(59,0)
(60,1)
(61,)
(62,count = RAND32()
(63,count)
(64,i)
(65,strlen(SENTENCE)
(66,)
(67,size_t)
(68,1)
(69,)
(70,for(i = 0; i < 1; i++)
(71,-1)
(72,filename)
(73,pFile)
(74,if (pFile == NULL)
(75,j)
(76,count)
(77,j)
(78,j = 0)
(79,)
(80,count)
(81,i++)
(82,SENTENCE)
(83,SENTENCE)
(84,(size_t)
(85,pFile)
(86,0)
(87,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^