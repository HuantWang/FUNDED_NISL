-----label-----
1
-----code-----
static void badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
badSink(size_t data)
badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(6,36,0)
(11,6,0)
(3,25,0)
(24,23,0)
(15,24,0)
(28,24,0)
(14,20,0)
(2,34,0)
(29,14,0)
(8,20,0)
(32,27,0)
(18,26,0)
(19,10,0)
(12,27,0)
(18,20,0)
(27,23,0)
(10,20,0)
(17,21,0)
(21,17,0)
(22,33,0)
(1,9,0)
(7,26,0)
(14,26,0)
(36,0,0)
(36,6,0)
(34,31,0)
(33,24,0)
(24,33,0)
(24,28,0)
(27,12,0)
(37,18,0)
(17,28,0)
(16,3,0)
(30,10,0)
(20,17,0)
(17,20,0)
(13,9,0)
(20,26,0)
(4,12,0)
(28,17,0)
(35,3,0)
(9,26,0)
(9,20,0)
(19,20,1)
(4,32,1)
(24,23,1)
(11,10,1)
(34,2,1)
(18,20,1)
(29,9,1)
(24,33,1)
(33,22,1)
(22,15,1)
(14,20,1)
(13,36,1)
(15,8,1)
(30,19,1)
(8,27,1)
(27,23,1)
(14,29,1)
(17,21,1)
(6,11,1)
(1,13,1)
(37,14,1)
(28,24,1)
(5,34,1)
(9,20,1)
(10,30,1)
(13,10,1)
(12,4,1)
(36,6,1)
(18,37,1)
(17,28,1)
(2,27,1)
(9,1,1)
(20,17,1)
(10,20,1)
(27,12,1)
(5,18,1)
(36,10,2)
(33,27,2)
(29,27,2)
(24,23,2)
(13,27,2)
(27,23,2)
(20,27,2)
(30,27,2)
(6,10,2)
(28,27,2)
(10,27,2)
(1,27,2)
(19,27,2)
(2,27,2)
(14,20,2)
(14,27,2)
(22,27,2)
(17,21,2)
(24,27,2)
(20,17,2)
(34,27,2)
(37,27,2)
(24,33,2)
(28,24,2)
(9,20,2)
(36,6,2)
(10,20,2)
(9,27,2)
(11,10,2)
(15,27,2)
(18,27,2)
(8,27,2)
(18,20,2)
(27,12,2)
(17,28,2)
(17,27,2)
-----------------------------------
(0,)
(1,HELLO_STRING)
(2,"Input is less than the length of the source string")
(3,)
(4,HELLO_STRING)
(5,RET)
(6,-1)
(7,if (myString == NULL)
(8,myString)
(9,strcpy(myString, HELLO_STRING)
(10,myString == NULL)
(11,1)
(12,strlen(HELLO_STRING)
(13,myString)
(14,printLine(myString)
(15,data)
(16,if (data > strlen(HELLO_STRING)
(17,(char *)
(18,free(myString)
(19,myString)
(20,myString = (char *)
(21,char *)
(22,char)
(23,size_t data)
(24,data*sizeof(char)
(25,)
(26,)
(27,data > strlen(HELLO_STRING)
(28,malloc(data*sizeof(char)
(29,myString)
(30,NULL)
(31,)
(32,data)
(33,sizeof(char)
(34,printLine("Input is less than the length of the source string")
(35,myString)
(36,exit(-1)
(37,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^