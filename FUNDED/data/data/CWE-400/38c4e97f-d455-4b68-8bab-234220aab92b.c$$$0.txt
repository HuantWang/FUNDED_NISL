-----label-----
0
-----code-----
static void good1()
{
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
65,67
66,67
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
95,96
96,97
96,98
97,98
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
105,108
106,107
108,109
110,111
110,112
111,112
113,114
114,115
114,116
115,116
118,119
118,120
119,120
119,121
120,121
122,123
124,125
124,126
124,127
124,128
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
133,135
134,135
134,136
135,136
140,141
141,142
141,143
142,143
142,144
143,144
143,145
144,145
149,150
150,151
150,152
151,152
153,154
153,155
154,155
154,156
155,156
157,158
159,160
160,161
160,162
161,162
164,165
165,166
165,167
166,167
168,169
-----nextToken-----
2,4,9,14,15,21,23,24,29,31,34,36,40,41,45,47,52,54,58,60,61,67,68,69,70,76,77,78,79,83,87,89,93,94,98,102,104,107,109,112,116,117,121,123,128,130,136,137,138,139,145,146,147,148,152,156,158,162,163,167,169
-----computeFrom-----
35,36
35,37
43,44
43,45
63,64
63,65
72,73
72,74
96,97
96,98
110,111
110,112
119,120
119,121
126,127
126,128
132,133
132,134
141,142
141,143
-----guardedBy-----
121,130
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(31,0,0)
(71,50,0)
(48,70,0)
(88,44,0)
(16,41,0)
(50,5,0)
(86,4,0)
(22,42,0)
(60,65,0)
(50,73,0)
(58,15,0)
(87,3,0)
(24,30,0)
(3,4,0)
(21,6,0)
(30,24,0)
(81,42,0)
(78,45,0)
(41,61,0)
(3,51,0)
(68,87,0)
(26,87,0)
(35,80,0)
(88,51,0)
(4,86,0)
(52,69,0)
(73,50,0)
(63,61,0)
(87,68,0)
(2,58,0)
(53,1,0)
(2,51,0)
(56,21,0)
(27,25,0)
(4,22,0)
(68,18,0)
(65,80,0)
(49,3,0)
(33,0,0)
(0,51,0)
(37,15,0)
(9,45,0)
(51,42,0)
(88,39,0)
(80,41,0)
(29,89,0)
(20,82,0)
(83,82,0)
(39,30,0)
(24,40,0)
(45,41,0)
(18,68,0)
(73,42,0)
(42,77,0)
(82,51,0)
(44,88,0)
(38,66,0)
(11,80,0)
(57,2,0)
(43,41,0)
(80,65,0)
(36,41,0)
(28,42,0)
(84,22,0)
(70,52,0)
(55,70,0)
(19,25,0)
(52,70,0)
(17,30,0)
(51,88,0)
(45,75,0)
(75,45,0)
(85,16,0)
(16,51,0)
(23,61,0)
(82,71,0)
(3,87,0)
(5,50,0)
(75,63,0)
(6,34,0)
(16,42,0)
(58,2,0)
(69,32,0)
(12,19,0)
(8,7,0)
(46,75,0)
(54,58,0)
(25,42,0)
(40,24,0)
(19,7,0)
(23,69,0)
(74,2,0)
(41,22,0)
(64,63,0)
(65,1,0)
(39,88,0)
(7,19,0)
(62,42,0)
(14,66,0)
(1,61,0)
(67,51,0)
(66,22,0)
(69,52,0)
(6,21,0)
(76,47,0)
(89,79,0)
(71,82,0)
(10,7,0)
(32,69,0)
(15,42,0)
(22,4,0)
(50,71,0)
(69,23,0)
(4,3,0)
(30,39,0)
(7,51,0)
(70,41,0)
(59,42,0)
(15,37,1)
(46,45,1)
(65,80,1)
(82,20,1)
(56,0,1)
(73,50,1)
(69,32,1)
(88,44,1)
(37,58,1)
(2,74,1)
(31,33,1)
(45,78,1)
(89,29,1)
(39,30,1)
(20,83,1)
(58,54,1)
(51,88,1)
(11,63,1)
(19,12,1)
(55,48,1)
(50,71,1)
(24,17,1)
(49,84,1)
(70,41,1)
(23,69,1)
(68,18,1)
(7,10,1)
(63,64,1)
(82,51,1)
(52,70,1)
(3,87,1)
(10,8,1)
(83,15,1)
(30,24,1)
(85,23,1)
(41,43,1)
(88,39,1)
(71,82,1)
(27,19,1)
(45,41,1)
(54,2,1)
(75,46,1)
(72,89,1)
(33,51,1)
(22,4,1)
(21,56,1)
(4,3,1)
(35,11,1)
(65,60,1)
(87,68,1)
(16,85,1)
(9,41,1)
(3,51,1)
(68,26,1)
(8,0,1)
(64,75,1)
(66,22,1)
(50,5,1)
(0,51,1)
(78,9,1)
(41,22,1)
(66,38,1)
(58,2,1)
(53,65,1)
(29,13,1)
(70,55,1)
(74,57,1)
(8,6,1)
(80,35,1)
(85,66,1)
(25,27,1)
(1,53,1)
(48,1,1)
(72,16,1)
(69,52,1)
(17,67,1)
(67,13,1)
(2,51,1)
(43,36,1)
(36,66,1)
(57,25,1)
(12,7,1)
(84,73,1)
(19,7,1)
(75,45,1)
(80,41,1)
(14,22,1)
(16,41,1)
(4,86,1)
(24,40,1)
(0,31,1)
(26,49,1)
(16,51,1)
(60,80,1)
(6,21,1)
(7,51,1)
(38,14,1)
(35,66,2)
(9,66,2)
(29,13,2)
(57,13,2)
(22,13,2)
(69,32,2)
(54,13,2)
(0,13,2)
(65,66,2)
(87,13,2)
(10,13,2)
(39,30,2)
(63,66,2)
(15,13,2)
(8,13,2)
(58,13,2)
(4,86,2)
(66,13,2)
(68,18,2)
(20,13,2)
(3,13,2)
(51,13,2)
(6,0,2)
(74,13,2)
(53,66,2)
(25,13,2)
(23,69,2)
(73,13,2)
(24,13,2)
(17,13,2)
(30,24,2)
(2,13,2)
(39,13,2)
(60,66,2)
(11,66,2)
(85,13,2)
(31,13,2)
(51,88,2)
(23,66,2)
(4,13,2)
(68,13,2)
(71,13,2)
(88,39,2)
(12,13,2)
(73,50,2)
(14,13,2)
(58,2,2)
(89,13,2)
(80,41,2)
(30,13,2)
(66,22,2)
(26,13,2)
(19,7,2)
(33,13,2)
(52,70,2)
(88,44,2)
(16,41,2)
(38,13,2)
(3,87,2)
(21,0,2)
(24,40,2)
(27,13,2)
(56,0,2)
(65,80,2)
(50,13,2)
(50,71,2)
(48,66,2)
(0,51,2)
(52,66,2)
(19,13,2)
(2,51,2)
(84,13,2)
(45,66,2)
(64,66,2)
(50,5,2)
(82,13,2)
(75,45,2)
(1,66,2)
(78,66,2)
(71,82,2)
(80,66,2)
(3,51,2)
(16,51,2)
(7,51,2)
(75,66,2)
(69,66,2)
(36,66,2)
(41,22,2)
(83,13,2)
(4,3,2)
(70,66,2)
(69,52,2)
(22,4,2)
(37,13,2)
(46,66,2)
(41,66,2)
(43,66,2)
(87,68,2)
(55,66,2)
(67,13,2)
(88,13,2)
(82,51,2)
(45,41,2)
(70,41,2)
(7,13,2)
(49,13,2)
(16,13,2)
(6,21,2)
-----------------------------------
(0,data == NULL)
(1,data[0].intTwo = 1)
(2,data[0])
(3,realloc(data, (130000)
(4,(struct _twoIntsStruct *)
(5,twoIntsStruct *)
(6,exit(-1)
(7,data[0])
(8,data)
(9,data)
(10,0)
(11,data)
(12,intOne)
(13,globalReturnsFalse()
(14,tmpData)
(15,data[0].intTwo = 0)
(16,free(data)
(17,100)
(18,struct _twoIntsStruct)
(19,data[0].intOne)
(20,0)
(21,-1)
(22,tmpData = (struct _twoIntsStruct *)
(23,printStructLine((twoIntsStruct *)
(24,sizeof(struct _twoIntsStruct)
(25,data[0].intOne = 0)
(26,130000)
(27,0)
(28,if (data == NULL)
(29,"Benign, fixed string")
(30,100*sizeof(struct _twoIntsStruct)
(31,NULL)
(32,twoIntsStruct *)
(33,data)
(34,)
(35,0)
(36,data)
(37,0)
(38,NULL)
(39,malloc(100*sizeof(struct _twoIntsStruct)
(40,struct _twoIntsStruct)
(41,data = tmpData)
(42,)
(43,tmpData)
(44,struct _twoIntsStruct *)
(45,data[0])
(46,intOne)
(47,)
(48,data)
(49,data)
(50,(twoIntsStruct *)
(51,* data = (struct _twoIntsStruct *)
(52,&data[0])
(53,1)
(54,intTwo)
(55,0)
(56,1)
(57,data)
(58,data[0].intTwo)
(59,if (tmpData != NULL)
(60,intTwo)
(61,)
(62,data)
(63,data[0].intOne = 1)
(64,1)
(65,data[0].intTwo)
(66,tmpData != NULL)
(67,data)
(68,sizeof(struct _twoIntsStruct)
(69,(twoIntsStruct *)
(70,data[0])
(71,&data[0])
(72,RET)
(73,printStructLine((twoIntsStruct *)
(74,0)
(75,data[0].intOne)
(76,if(globalReturnsFalse()
(77,)
(78,0)
(79,)
(80,data[0])
(81,tmpData)
(82,data[0])
(83,data)
(84,tmpData)
(85,data)
(86,struct _twoIntsStruct *)
(87,(130000)
(88,(struct _twoIntsStruct *)
(89,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^