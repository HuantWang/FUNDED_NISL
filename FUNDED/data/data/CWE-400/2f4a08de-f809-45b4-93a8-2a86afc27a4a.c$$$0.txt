-----label-----
0
-----code-----
static void goodB2G()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    else
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
79,82
80,81
82,83
84,85
84,86
86,87
87,88
87,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
104,107
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
116,118
116,119
117,118
118,119
120,121
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,73,76,78,81,83,85,88,89,93,95,100,102,106,108,109,113,115,119,124,126,131,133
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
71,72
71,73
84,85
84,86
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(49,54,0)
(58,48,0)
(54,14,0)
(41,7,0)
(41,22,0)
(27,54,0)
(56,32,0)
(33,54,0)
(36,49,0)
(42,21,0)
(61,30,0)
(29,57,0)
(22,28,0)
(47,34,0)
(35,41,0)
(14,52,0)
(57,29,0)
(50,30,0)
(41,11,0)
(32,52,0)
(13,7,0)
(31,46,0)
(16,1,0)
(30,2,0)
(3,61,0)
(9,43,0)
(45,1,0)
(29,24,0)
(32,48,0)
(18,44,0)
(62,14,0)
(60,21,0)
(15,2,0)
(22,41,0)
(4,34,0)
(63,57,0)
(33,30,0)
(46,2,0)
(51,33,0)
(46,30,0)
(0,28,0)
(6,22,0)
(26,37,0)
(43,53,0)
(19,34,0)
(54,37,0)
(53,43,0)
(52,14,0)
(23,38,0)
(1,37,0)
(44,30,0)
(28,22,0)
(52,7,0)
(44,54,0)
(30,11,0)
(48,32,0)
(14,62,0)
(21,54,0)
(1,54,0)
(7,34,0)
(11,30,0)
(20,7,0)
(8,52,0)
(33,25,0)
(14,54,0)
(5,11,0)
(49,37,0)
(44,17,0)
(12,46,0)
(38,30,0)
(11,5,0)
(11,41,0)
(52,32,0)
(40,38,0)
(61,2,0)
(53,55,0)
(21,42,1)
(3,46,1)
(44,54,1)
(50,39,1)
(6,35,1)
(51,59,1)
(33,30,1)
(58,56,1)
(31,12,1)
(9,38,1)
(0,6,1)
(61,3,1)
(39,7,1)
(61,30,1)
(48,58,1)
(36,1,1)
(16,45,1)
(10,44,1)
(29,57,1)
(46,30,1)
(57,63,1)
(10,33,1)
(33,51,1)
(40,23,1)
(18,59,1)
(12,53,1)
(28,0,1)
(38,40,1)
(53,43,1)
(63,21,1)
(14,62,1)
(42,60,1)
(52,32,1)
(44,30,1)
(1,54,1)
(43,9,1)
(59,49,1)
(11,41,1)
(38,30,1)
(7,20,1)
(41,22,1)
(22,28,1)
(1,16,1)
(52,7,1)
(45,29,1)
(20,13,1)
(30,11,1)
(14,52,1)
(41,7,1)
(33,54,1)
(60,54,1)
(46,31,1)
(21,54,1)
(54,14,1)
(8,27,1)
(49,36,1)
(49,54,1)
(35,50,1)
(56,8,1)
(59,61,1)
(11,5,1)
(44,18,1)
(12,38,1)
(27,39,1)
(45,21,1)
(23,30,1)
(32,48,1)
(60,39,2)
(8,39,2)
(32,48,2)
(41,7,2)
(52,7,2)
(51,59,2)
(14,62,2)
(43,38,2)
(56,39,2)
(58,39,2)
(52,39,2)
(28,39,2)
(42,39,2)
(46,39,2)
(0,39,2)
(11,41,2)
(61,30,2)
(30,39,2)
(9,38,2)
(12,39,2)
(1,54,2)
(18,59,2)
(21,54,2)
(14,39,2)
(30,11,2)
(38,30,2)
(49,39,2)
(31,39,2)
(14,52,2)
(11,5,2)
(53,43,2)
(44,30,2)
(22,39,2)
(48,39,2)
(41,39,2)
(53,38,2)
(6,39,2)
(45,39,2)
(63,21,2)
(38,39,2)
(33,54,2)
(35,39,2)
(23,39,2)
(52,32,2)
(33,30,2)
(57,21,2)
(21,39,2)
(41,22,2)
(61,39,2)
(22,28,2)
(32,39,2)
(27,39,2)
(29,21,2)
(44,59,2)
(1,39,2)
(44,54,2)
(36,39,2)
(29,57,2)
(50,39,2)
(40,39,2)
(16,39,2)
(54,39,2)
(54,14,2)
(33,59,2)
(3,39,2)
(11,39,2)
(49,54,2)
(46,30,2)
-----------------------------------
(0,char)
(1,strcpy(data, "A String")
(2,)
(3,data)
(4,if(globalReturnsTrueOrFalse()
(5,char *)
(6,100)
(7,data = NULL)
(8,data)
(9,1)
(10,RET)
(11,(char *)
(12,data)
(13,data)
(14,(char *)
(15,if (data == NULL)
(16,"A String")
(17,)
(18,data)
(19,data)
(20,NULL)
(21,data == NULL)
(22,100*sizeof(char)
(23,data)
(24,)
(25,)
(26,if (data == NULL)
(27,data)
(28,sizeof(char)
(29,exit(-1)
(30,data = (char *)
(31,"A String")
(32,100*sizeof(char)
(33,free(data)
(34,)
(35,data)
(36,data)
(37,)
(38,data == NULL)
(39,globalReturnsTrueOrFalse()
(40,NULL)
(41,realloc(data, 100*sizeof(char)
(42,NULL)
(43,-1)
(44,free(data)
(45,data)
(46,strcpy(data, "A String")
(47,if(globalReturnsTrueOrFalse()
(48,sizeof(char)
(49,printLine(data)
(50,data)
(51,data)
(52,realloc(data, 100*sizeof(char)
(53,exit(-1)
(54,data = (char *)
(55,)
(56,100)
(57,-1)
(58,char)
(59,globalReturnsTrueOrFalse()
(60,data)
(61,printLine(data)
(62,char *)
(63,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^