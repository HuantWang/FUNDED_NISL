-----label-----
1
-----code-----
int qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type)
{
	int i, index, err;
	u8 max_ints;
	u32 val, temp, type;
	struct qlcnic_cmd_args cmd;

	max_ints = adapter->ahw->num_msix - 1;
	qlcnic_alloc_mbx_args(&cmd, adapter, QLCNIC_CMD_CONFIG_INTRPT);
	cmd.req.arg[1] = max_ints;
	for (i = 0, index = 2; i < max_ints; i++) {
		type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL;
		val = type | (adapter->ahw->intr_tbl[i].type << 4);
		if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)
			val |= (adapter->ahw->intr_tbl[i].id << 16);
		cmd.req.arg[index++] = val;
	}
	err = qlcnic_issue_cmd(adapter, &cmd);
	if (err) {
		dev_err(&adapter->pdev->dev,
			"Failed to configure interrupts 0x%x\n", err);
		goto out;
	}

	max_ints = cmd.rsp.arg[1];
	for (i = 0, index = 2; i < max_ints; i++, index += 2) {
		val = cmd.rsp.arg[index];
		if (LSB(val)) {
			dev_info(&adapter->pdev->dev,
				 "Can't configure interrupt %d\n",
				 adapter->ahw->intr_tbl[i].id);
			continue;
		}
		if (op_type) {
			adapter->ahw->intr_tbl[i].id = MSW(val);
			adapter->ahw->intr_tbl[i].enabled = 1;
			temp = cmd.rsp.arg[index + 1];
			adapter->ahw->intr_tbl[i].src = temp;
		} else {
			adapter->ahw->intr_tbl[i].id = i;
			adapter->ahw->intr_tbl[i].enabled = 0;
			adapter->ahw->intr_tbl[i].src = 0;
		}
	}
out:
	qlcnic_free_mbx_args(&cmd);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
16,17
17,18
17,19
17,20
17,21
19,20
21,22
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
60,63
60,64
61,62
63,64
64,65
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
73,75
74,75
74,76
75,76
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
93,94
93,95
94,95
96,97
98,99
99,100
101,102
101,103
101,104
101,105
102,103
103,104
103,105
104,105
106,107
106,108
106,109
107,108
109,110
111,112
113,114
114,115
114,116
115,116
117,118
117,119
118,119
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
124,126
125,126
125,127
126,127
130,131
134,135
134,136
135,136
135,137
136,137
136,138
137,138
137,139
138,139
138,140
139,140
139,141
140,141
144,145
147,148
149,150
150,151
150,152
151,152
153,154
154,155
154,156
155,156
155,157
156,157
156,158
157,158
157,159
158,159
158,160
159,160
163,164
167,168
168,169
168,170
169,170
169,171
170,171
170,172
171,172
171,173
172,173
176,177
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
186,187
188,189
190,191
191,192
193,194
193,195
194,195
196,197
196,198
197,198
198,199
198,200
198,201
198,202
199,200
201,202
202,203
202,204
203,204
203,205
204,205
209,210
211,212
213,214
214,215
214,216
215,216
217,218
217,219
218,219
218,220
219,220
219,221
220,221
225,226
225,227
225,228
225,229
226,227
227,228
227,229
228,229
228,230
229,230
232,233
232,234
233,234
236,237
236,238
237,238
239,240
241,242
241,243
242,243
243,244
245,246
245,247
246,247
249,250
249,251
249,252
250,251
251,252
251,253
252,253
254,255
254,256
255,256
255,257
256,257
256,258
257,258
261,262
263,264
263,265
264,265
264,266
265,266
267,268
269,270
269,271
270,271
271,272
271,273
271,274
271,275
272,273
274,275
275,276
275,277
276,277
276,278
277,278
282,283
282,284
283,284
283,285
284,285
284,286
285,286
285,287
286,287
290,291
294,295
294,296
294,297
295,296
297,298
297,299
297,300
297,301
298,299
299,300
299,301
300,301
300,302
301,302
301,303
302,303
302,304
303,304
303,305
304,305
308,309
311,312
311,313
312,313
314,315
316,317
317,318
317,319
318,319
318,320
319,320
319,321
320,321
320,322
321,322
321,323
322,323
326,327
330,331
331,332
331,333
332,333
334,335
334,336
335,336
335,337
336,337
336,338
337,338
341,342
341,343
342,343
345,346
346,347
346,348
347,348
347,349
348,349
348,350
349,350
349,351
350,351
350,352
351,352
355,356
358,359
360,361
360,362
360,363
361,362
362,363
362,364
363,364
363,365
364,365
364,366
365,366
365,367
366,367
366,368
367,368
371,372
374,375
376,377
377,378
377,379
378,379
378,380
379,380
379,381
380,381
380,382
381,382
381,383
382,383
386,387
390,391
391,392
391,393
392,393
392,394
393,394
393,395
394,395
394,396
395,396
395,397
396,397
400,401
404,405
404,406
406,407
407,408
407,409
408,409
410,411
411,412
413,414
414,415
-----nextToken-----
2,4,7,9,10,12,14,18,20,22,24,28,30,34,36,38,40,44,46,50,55,56,57,58,62,65,67,69,76,77,78,79,81,87,88,91,92,95,97,100,105,108,110,112,116,119,127,128,129,131,132,133,141,142,143,145,146,148,152,160,161,162,164,165,166,173,174,175,178,180,184,187,189,192,195,200,205,206,207,208,210,212,216,221,222,223,224,230,231,234,235,238,240,244,247,248,253,258,259,260,262,266,268,273,278,279,280,281,287,288,289,291,292,293,296,305,306,307,309,310,313,315,323,324,325,327,328,329,333,338,339,340,343,344,352,353,354,356,357,359,368,369,370,372,373,375,383,384,385,387,388,389,397,398,399,401,402,403,405,409,412,415
-----computeFrom-----
48,49
48,50
51,52
51,53
71,72
71,73
85,86
85,87
89,90
89,91
93,94
93,95
103,104
103,105
114,115
114,116
117,118
117,119
121,122
121,123
135,136
135,137
150,151
150,152
154,155
154,156
168,169
168,170
182,183
182,184
214,215
214,216
228,229
228,230
232,233
232,234
236,237
236,238
245,246
245,247
251,252
251,253
299,300
299,301
317,318
317,319
331,332
331,333
341,342
341,343
346,347
346,348
362,363
362,364
377,378
377,379
391,392
391,393
-----guardedBy-----
142,161
141,160
145,164
143,162
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;ContinueStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type){	int i, index, err;	u8 max_ints;	u32 val, temp, type;	struct qlcnic_cmd_args cmd;	max_ints = adapter->ahw->num_msix - 1;	qlcnic_alloc_mbx_args(&cmd, adapter, QLCNIC_CMD_CONFIG_INTRPT);	cmd.req.arg[1] = max_ints;	for (i = 0, index = 2; i < max_ints; i++) {		type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL;		val = type | (adapter->ahw->intr_tbl[i].type << 4);		if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)			val |= (adapter->ahw->intr_tbl[i].id << 16);		cmd.req.arg[index++] = val;	}	err = qlcnic_issue_cmd(adapter, &cmd);	if (err) {		dev_err(&adapter->pdev->dev,			"Failed to configure interrupts 0x%x\n", err);		goto out;	}	max_ints = cmd.rsp.arg[1];	for (i = 0, index = 2; i < max_ints; i++, index += 2) {		val = cmd.rsp.arg[index];		if (LSB(val)) {			dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);			continue;		}		if (op_type) {			adapter->ahw->intr_tbl[i].id = MSW(val);			adapter->ahw->intr_tbl[i].enabled = 1;			temp = cmd.rsp.arg[index + 1];			adapter->ahw->intr_tbl[i].src = temp;		} else {			adapter->ahw->intr_tbl[i].id = i;			adapter->ahw->intr_tbl[i].enabled = 0;			adapter->ahw->intr_tbl[i].src = 0;		}	}out:	qlcnic_free_mbx_args(&cmd);	return err;}
int
qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type)
qlcnic_83xx_config_intrpt
struct qlcnic_adapter *adapter
struct qlcnic_adapter
qlcnic_adapter
*adapter
*
adapter
bool op_type
bool
op_type
op_type
{	int i, index, err;	u8 max_ints;	u32 val, temp, type;	struct qlcnic_cmd_args cmd;	max_ints = adapter->ahw->num_msix - 1;	qlcnic_alloc_mbx_args(&cmd, adapter, QLCNIC_CMD_CONFIG_INTRPT);	cmd.req.arg[1] = max_ints;	for (i = 0, index = 2; i < max_ints; i++) {		type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL;		val = type | (adapter->ahw->intr_tbl[i].type << 4);		if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)			val |= (adapter->ahw->intr_tbl[i].id << 16);		cmd.req.arg[index++] = val;	}	err = qlcnic_issue_cmd(adapter, &cmd);	if (err) {		dev_err(&adapter->pdev->dev,			"Failed to configure interrupts 0x%x\n", err);		goto out;	}	max_ints = cmd.rsp.arg[1];	for (i = 0, index = 2; i < max_ints; i++, index += 2) {		val = cmd.rsp.arg[index];		if (LSB(val)) {			dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);			continue;		}		if (op_type) {			adapter->ahw->intr_tbl[i].id = MSW(val);			adapter->ahw->intr_tbl[i].enabled = 1;			temp = cmd.rsp.arg[index + 1];			adapter->ahw->intr_tbl[i].src = temp;		} else {			adapter->ahw->intr_tbl[i].id = i;			adapter->ahw->intr_tbl[i].enabled = 0;			adapter->ahw->intr_tbl[i].src = 0;		}	}out:	qlcnic_free_mbx_args(&cmd);	return err;}
int i, index, err;
int i, index, err;
int
i
i
index
index
err
err
u8 max_ints;
u8 max_ints;
u8
u8
max_ints
max_ints
u32 val, temp, type;
u32 val, temp, type;
u32
u32
val
val
temp
temp
type
type
struct qlcnic_cmd_args cmd;
struct qlcnic_cmd_args cmd;
struct qlcnic_cmd_args
qlcnic_cmd_args
cmd
cmd
max_ints = adapter->ahw->num_msix - 1;
max_ints = adapter->ahw->num_msix - 1
max_ints
max_ints
adapter->ahw->num_msix - 1
adapter->ahw->num_msix
adapter->ahw
adapter
adapter
ahw
num_msix
1
qlcnic_alloc_mbx_args(&cmd, adapter, QLCNIC_CMD_CONFIG_INTRPT);
qlcnic_alloc_mbx_args(&cmd, adapter, QLCNIC_CMD_CONFIG_INTRPT)
qlcnic_alloc_mbx_args
qlcnic_alloc_mbx_args
&cmd
cmd
cmd
adapter
adapter
QLCNIC_CMD_CONFIG_INTRPT
QLCNIC_CMD_CONFIG_INTRPT
cmd.req.arg[1] = max_ints;
cmd.req.arg[1] = max_ints
cmd.req.arg[1]
cmd.req.arg
cmd.req
cmd
cmd
req
arg
1
max_ints
max_ints
for (i = 0, index = 2; i < max_ints; i++) {		type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL;		val = type | (adapter->ahw->intr_tbl[i].type << 4);		if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)			val |= (adapter->ahw->intr_tbl[i].id << 16);		cmd.req.arg[index++] = val;	}
i = 0, index = 2;
i = 0, index = 2
i = 0
i
i
0
index = 2
index
index
2
i < max_ints
i
i
max_ints
max_ints
i++
i
i
{		type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL;		val = type | (adapter->ahw->intr_tbl[i].type << 4);		if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)			val |= (adapter->ahw->intr_tbl[i].id << 16);		cmd.req.arg[index++] = val;	}
type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL;
type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL
type
type
op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL
op_type
op_type
QLCNIC_INTRPT_ADD
QLCNIC_INTRPT_ADD
QLCNIC_INTRPT_DEL
QLCNIC_INTRPT_DEL
val = type | (adapter->ahw->intr_tbl[i].type << 4);
val = type | (adapter->ahw->intr_tbl[i].type << 4)
val
val
type | (adapter->ahw->intr_tbl[i].type << 4)
type
type
(adapter->ahw->intr_tbl[i].type << 4)
adapter->ahw->intr_tbl[i].type << 4
adapter->ahw->intr_tbl[i].type
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
type
4
if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)			val |= (adapter->ahw->intr_tbl[i].id << 16);
adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX
adapter->ahw->intr_tbl[i].type
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
type
QLCNIC_INTRPT_MSIX
QLCNIC_INTRPT_MSIX
val |= (adapter->ahw->intr_tbl[i].id << 16);
val |= (adapter->ahw->intr_tbl[i].id << 16)
val
val
(adapter->ahw->intr_tbl[i].id << 16)
adapter->ahw->intr_tbl[i].id << 16
adapter->ahw->intr_tbl[i].id
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
id
16
cmd.req.arg[index++] = val;
cmd.req.arg[index++] = val
cmd.req.arg[index++]
cmd.req.arg
cmd.req
cmd
cmd
req
arg
index++
index
index
val
val
err = qlcnic_issue_cmd(adapter, &cmd);
err = qlcnic_issue_cmd(adapter, &cmd)
err
err
qlcnic_issue_cmd(adapter, &cmd)
qlcnic_issue_cmd
qlcnic_issue_cmd
adapter
adapter
&cmd
cmd
cmd
if (err) {		dev_err(&adapter->pdev->dev,			"Failed to configure interrupts 0x%x\n", err);		goto out;	}
err
err
{		dev_err(&adapter->pdev->dev,			"Failed to configure interrupts 0x%x\n", err);		goto out;	}
dev_err(&adapter->pdev->dev,			"Failed to configure interrupts 0x%x\n", err);
dev_err(&adapter->pdev->dev,			"Failed to configure interrupts 0x%x\n", err)
dev_err
dev_err
&adapter->pdev->dev
adapter->pdev->dev
adapter->pdev
adapter
adapter
pdev
dev
"Failed to configure interrupts 0x%x\n"
err
err
goto out;
out
max_ints = cmd.rsp.arg[1];
max_ints = cmd.rsp.arg[1]
max_ints
max_ints
cmd.rsp.arg[1]
cmd.rsp.arg
cmd.rsp
cmd
cmd
rsp
arg
1
for (i = 0, index = 2; i < max_ints; i++, index += 2) {		val = cmd.rsp.arg[index];		if (LSB(val)) {			dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);			continue;		}		if (op_type) {			adapter->ahw->intr_tbl[i].id = MSW(val);			adapter->ahw->intr_tbl[i].enabled = 1;			temp = cmd.rsp.arg[index + 1];			adapter->ahw->intr_tbl[i].src = temp;		} else {			adapter->ahw->intr_tbl[i].id = i;			adapter->ahw->intr_tbl[i].enabled = 0;			adapter->ahw->intr_tbl[i].src = 0;		}	}
i = 0, index = 2;
i = 0, index = 2
i = 0
i
i
0
index = 2
index
index
2
i < max_ints
i
i
max_ints
max_ints
i++, index += 2
i++
i
i
index += 2
index
index
2
{		val = cmd.rsp.arg[index];		if (LSB(val)) {			dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);			continue;		}		if (op_type) {			adapter->ahw->intr_tbl[i].id = MSW(val);			adapter->ahw->intr_tbl[i].enabled = 1;			temp = cmd.rsp.arg[index + 1];			adapter->ahw->intr_tbl[i].src = temp;		} else {			adapter->ahw->intr_tbl[i].id = i;			adapter->ahw->intr_tbl[i].enabled = 0;			adapter->ahw->intr_tbl[i].src = 0;		}	}
val = cmd.rsp.arg[index];
val = cmd.rsp.arg[index]
val
val
cmd.rsp.arg[index]
cmd.rsp.arg
cmd.rsp
cmd
cmd
rsp
arg
index
index
if (LSB(val)) {			dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);			continue;		}
LSB(val)
LSB
LSB
val
val
{			dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);			continue;		}
dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id);
dev_info(&adapter->pdev->dev,				 "Can't configure interrupt %d\n",				 adapter->ahw->intr_tbl[i].id)
dev_info
dev_info
&adapter->pdev->dev
adapter->pdev->dev
adapter->pdev
adapter
adapter
pdev
dev
"Can't configure interrupt %d\n"
adapter->ahw->intr_tbl[i].id
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
id
continue;
if (op_type) {			adapter->ahw->intr_tbl[i].id = MSW(val);			adapter->ahw->intr_tbl[i].enabled = 1;			temp = cmd.rsp.arg[index + 1];			adapter->ahw->intr_tbl[i].src = temp;		} else {			adapter->ahw->intr_tbl[i].id = i;			adapter->ahw->intr_tbl[i].enabled = 0;			adapter->ahw->intr_tbl[i].src = 0;		}
op_type
op_type
{			adapter->ahw->intr_tbl[i].id = MSW(val);			adapter->ahw->intr_tbl[i].enabled = 1;			temp = cmd.rsp.arg[index + 1];			adapter->ahw->intr_tbl[i].src = temp;		}
adapter->ahw->intr_tbl[i].id = MSW(val);
adapter->ahw->intr_tbl[i].id = MSW(val)
adapter->ahw->intr_tbl[i].id
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
id
MSW(val)
MSW
MSW
val
val
adapter->ahw->intr_tbl[i].enabled = 1;
adapter->ahw->intr_tbl[i].enabled = 1
adapter->ahw->intr_tbl[i].enabled
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
enabled
1
temp = cmd.rsp.arg[index + 1];
temp = cmd.rsp.arg[index + 1]
temp
temp
cmd.rsp.arg[index + 1]
cmd.rsp.arg
cmd.rsp
cmd
cmd
rsp
arg
index + 1
index
index
1
adapter->ahw->intr_tbl[i].src = temp;
adapter->ahw->intr_tbl[i].src = temp
adapter->ahw->intr_tbl[i].src
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
src
temp
temp
{			adapter->ahw->intr_tbl[i].id = i;			adapter->ahw->intr_tbl[i].enabled = 0;			adapter->ahw->intr_tbl[i].src = 0;		}
adapter->ahw->intr_tbl[i].id = i;
adapter->ahw->intr_tbl[i].id = i
adapter->ahw->intr_tbl[i].id
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
id
i
i
adapter->ahw->intr_tbl[i].enabled = 0;
adapter->ahw->intr_tbl[i].enabled = 0
adapter->ahw->intr_tbl[i].enabled
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
enabled
0
adapter->ahw->intr_tbl[i].src = 0;
adapter->ahw->intr_tbl[i].src = 0
adapter->ahw->intr_tbl[i].src
adapter->ahw->intr_tbl[i]
adapter->ahw->intr_tbl
adapter->ahw
adapter
adapter
ahw
intr_tbl
i
i
src
0
out:	qlcnic_free_mbx_args(&cmd);
out
qlcnic_free_mbx_args(&cmd);
qlcnic_free_mbx_args(&cmd)
qlcnic_free_mbx_args
qlcnic_free_mbx_args
&cmd
cmd
cmd
return err;
err
err
-----joern-----
(131,188,0)
(262,93,0)
(203,133,0)
(250,254,0)
(45,23,0)
(74,149,0)
(261,207,0)
(105,132,0)
(269,93,0)
(264,229,0)
(50,221,0)
(71,21,0)
(258,78,0)
(63,74,0)
(26,177,0)
(181,232,0)
(248,92,0)
(166,196,0)
(87,222,0)
(210,204,0)
(49,3,0)
(200,53,0)
(155,254,0)
(228,197,0)
(103,231,0)
(185,18,0)
(242,94,0)
(196,31,0)
(66,190,0)
(82,211,0)
(260,215,0)
(119,29,0)
(10,13,0)
(87,258,0)
(197,228,0)
(5,169,0)
(256,154,0)
(182,265,0)
(109,223,0)
(95,113,0)
(47,258,0)
(254,265,0)
(112,78,0)
(228,151,0)
(173,266,0)
(222,44,0)
(154,256,0)
(212,58,0)
(133,236,0)
(1,132,0)
(81,168,0)
(114,175,0)
(93,269,0)
(159,193,0)
(148,207,0)
(1,149,0)
(55,59,0)
(88,236,0)
(268,102,0)
(27,210,0)
(96,238,0)
(86,113,0)
(158,222,0)
(205,117,0)
(256,188,0)
(229,134,0)
(252,153,0)
(160,61,0)
(208,188,0)
(207,148,0)
(52,35,0)
(175,3,0)
(69,103,0)
(183,149,0)
(46,94,0)
(164,21,0)
(48,186,0)
(167,248,0)
(29,269,0)
(137,188,0)
(253,258,0)
(219,67,0)
(153,21,0)
(40,20,0)
(35,190,0)
(263,133,0)
(92,248,0)
(241,134,0)
(196,220,0)
(232,43,0)
(102,235,0)
(187,60,0)
(60,187,0)
(147,206,0)
(117,15,0)
(21,153,0)
(100,48,0)
(163,201,0)
(141,232,0)
(110,156,0)
(199,222,0)
(216,206,0)
(102,268,0)
(251,124,0)
(20,6,0)
(62,23,0)
(103,94,0)
(191,29,0)
(23,62,0)
(124,188,0)
(237,188,0)
(72,229,0)
(132,15,0)
(103,259,0)
(190,35,0)
(3,175,0)
(217,228,0)
(165,1,0)
(207,149,0)
(58,220,0)
(225,143,0)
(32,223,0)
(53,188,0)
(213,87,0)
(233,242,0)
(83,263,0)
(97,57,0)
(119,149,0)
(106,210,0)
(187,149,0)
(230,54,0)
(73,215,0)
(143,62,0)
(70,44,0)
(187,188,0)
(134,162,0)
(113,106,0)
(123,62,0)
(102,36,0)
(11,15,0)
(248,159,0)
(194,188,0)
(181,54,0)
(126,143,0)
(53,124,0)
(72,156,0)
(21,71,0)
(157,38,0)
(236,238,0)
(120,158,0)
(29,119,0)
(176,201,0)
(214,188,0)
(226,196,0)
(35,147,0)
(138,61,0)
(116,92,0)
(93,124,0)
(215,73,0)
(91,59,0)
(85,211,0)
(152,18,0)
(54,181,0)
(18,36,0)
(232,181,0)
(0,85,0)
(92,85,0)
(218,177,0)
(246,107,0)
(87,31,0)
(87,266,0)
(108,39,0)
(144,231,0)
(3,157,0)
(43,30,0)
(247,235,0)
(61,16,0)
(107,74,0)
(35,157,0)
(168,220,0)
(106,113,0)
(28,247,0)
(206,147,0)
(151,228,0)
(94,103,0)
(94,2,0)
(84,61,0)
(204,169,0)
(124,207,0)
(161,181,0)
(9,197,0)
(23,215,0)
(31,38,0)
(259,265,0)
(169,188,0)
(177,156,0)
(265,259,0)
(125,44,0)
(4,206,0)
(93,89,0)
(244,107,0)
(180,211,0)
(223,149,0)
(18,149,0)
(76,119,0)
(56,106,0)
(92,157,0)
(268,55,0)
(65,73,0)
(234,188,0)
(75,183,0)
(3,209,0)
(184,48,0)
(99,53,0)
(129,188,0)
(266,39,0)
(258,258,0)
(62,188,0)
(127,188,0)
(12,154,0)
(2,157,0)
(183,175,0)
(221,149,0)
(239,246,0)
(209,2,0)
(85,92,0)
(94,79,0)
(142,134,0)
(220,58,0)
(15,117,0)
(196,258,0)
(7,43,0)
(67,79,0)
(197,79,0)
(227,1,0)
(17,30,0)
(143,157,0)
(195,31,0)
(130,6,0)
(80,60,0)
(34,221,0)
(186,48,0)
(236,133,0)
(2,193,0)
(58,121,0)
(160,57,0)
(5,20,0)
(41,22,0)
(246,238,0)
(33,73,0)
(156,177,0)
(228,157,0)
(242,157,0)
(104,74,0)
(209,3,0)
(22,121,0)
(267,2,0)
(175,183,0)
(39,266,0)
(140,204,0)
(220,168,0)
(174,205,0)
(79,121,0)
(171,5,0)
(55,268,0)
(146,235,0)
(240,187,0)
(101,54,0)
(61,160,0)
(201,168,0)
(247,169,0)
(6,20,0)
(25,102,0)
(257,57,0)
(235,162,0)
(238,236,0)
(128,235,0)
(139,151,0)
(36,102,0)
(190,22,0)
(192,128,0)
(112,157,0)
(178,247,0)
(204,188,0)
(254,149,0)
(147,35,0)
(79,67,0)
(90,188,0)
(37,157,0)
(249,187,0)
(67,222,0)
(265,254,0)
(51,183,0)
(36,18,0)
(64,93,0)
(257,263,0)
(202,268,0)
(42,235,0)
(13,121,0)
(255,36,0)
(68,6,0)
(243,188,0)
(211,149,0)
(170,31,0)
(224,186,0)
(24,160,0)
(172,119,0)
(258,31,0)
(117,205,0)
(151,221,0)
(269,29,0)
(22,58,0)
(257,59,0)
(186,242,0)
(59,263,0)
(145,112,0)
(221,151,0)
(98,148,0)
(263,57,0)
(20,5,0)
(259,103,0)
(220,196,0)
(122,209,0)
(21,157,0)
(133,160,0)
(246,235,0)
(232,157,0)
(59,55,0)
(169,5,0)
(72,257,0)
(19,55,0)
(132,1,0)
(150,157,0)
(48,149,0)
(153,13,0)
(179,71,0)
(238,246,0)
(207,124,0)
(135,39,0)
(206,149,0)
(245,61,0)
(222,87,0)
(107,246,0)
(168,201,0)
(156,72,0)
(15,132,0)
(133,263,0)
(54,149,0)
(77,257,0)
(223,71,0)
(14,188,0)
(215,23,0)
(94,242,0)
(198,159,0)
(43,232,0)
(30,193,0)
(266,87,0)
(71,223,0)
(6,149,0)
(115,89,0)
(111,169,0)
(242,186,0)
(211,85,0)
(189,117,0)
(229,72,0)
(118,147,0)
(210,106,0)
(15,235,0)
(74,107,0)
(160,61,1)
(158,120,1)
(49,175,1)
(120,222,1)
(2,267,1)
(81,201,1)
(133,236,1)
(68,130,1)
(109,79,1)
(168,81,1)
(244,74,1)
(219,197,1)
(204,140,1)
(265,254,1)
(145,22,1)
(146,42,1)
(3,157,1)
(103,94,1)
(175,183,1)
(48,184,1)
(36,255,1)
(64,269,1)
(74,63,1)
(55,268,1)
(26,59,1)
(15,235,1)
(91,205,1)
(258,47,1)
(28,134,1)
(93,124,1)
(74,149,1)
(126,225,1)
(22,58,1)
(22,41,1)
(159,198,1)
(115,93,1)
(63,104,1)
(150,62,1)
(17,43,1)
(232,141,1)
(138,84,1)
(29,191,1)
(116,85,1)
(242,233,1)
(83,160,1)
(205,117,1)
(59,55,1)
(206,216,1)
(210,106,1)
(53,99,1)
(157,37,1)
(56,113,1)
(13,10,1)
(155,158,1)
(232,181,1)
(75,136,1)
(8,124,1)
(211,82,1)
(35,52,1)
(139,221,1)
(26,205,1)
(51,75,1)
(112,157,1)
(54,149,1)
(25,36,1)
(18,185,1)
(58,220,1)
(239,107,1)
(187,60,1)
(66,35,1)
(119,149,1)
(225,258,1)
(24,247,1)
(230,101,1)
(207,149,1)
(213,266,1)
(87,31,1)
(88,238,1)
(60,80,1)
(246,239,1)
(257,77,1)
(249,60,1)
(92,85,1)
(151,139,1)
(99,256,1)
(151,221,1)
(182,254,1)
(201,176,1)
(207,148,1)
(228,157,1)
(28,128,1)
(196,258,1)
(236,238,1)
(117,189,1)
(153,21,1)
(37,150,1)
(164,71,1)
(141,181,1)
(55,19,1)
(229,264,1)
(258,258,1)
(259,265,1)
(174,117,1)
(158,222,1)
(260,73,1)
(204,169,1)
(3,175,1)
(180,2,1)
(232,157,1)
(85,211,1)
(147,206,1)
(34,50,1)
(69,259,1)
(96,246,1)
(221,149,1)
(102,25,1)
(148,98,1)
(118,206,1)
(29,119,1)
(61,138,1)
(245,84,1)
(94,46,1)
(5,20,1)
(47,253,1)
(247,235,1)
(181,54,1)
(71,179,1)
(128,192,1)
(256,154,1)
(172,8,1)
(183,51,1)
(186,48,1)
(171,20,1)
(223,32,1)
(226,168,1)
(42,204,1)
(190,35,1)
(242,157,1)
(94,242,1)
(221,34,1)
(61,245,1)
(197,9,1)
(48,149,1)
(215,73,1)
(15,132,1)
(167,92,1)
(200,53,1)
(4,58,1)
(43,232,1)
(257,263,1)
(67,219,1)
(39,135,1)
(211,149,1)
(209,3,1)
(46,242,1)
(253,112,1)
(228,217,1)
(1,165,1)
(267,209,1)
(23,215,1)
(266,173,1)
(268,202,1)
(71,223,1)
(132,1,1)
(105,1,1)
(20,40,1)
(72,229,1)
(205,174,1)
(84,24,1)
(102,235,1)
(143,126,1)
(156,110,1)
(53,124,1)
(206,149,1)
(152,91,1)
(220,196,1)
(7,232,1)
(235,146,1)
(135,108,1)
(175,114,1)
(161,54,1)
(258,31,1)
(189,15,1)
(65,33,1)
(20,6,1)
(21,157,1)
(92,116,1)
(268,102,1)
(147,118,1)
(112,145,1)
(225,31,1)
(153,252,1)
(106,113,1)
(228,151,1)
(9,228,1)
(247,178,1)
(108,199,1)
(124,207,1)
(176,163,1)
(185,152,1)
(101,159,1)
(93,269,1)
(269,29,1)
(61,16,1)
(12,115,1)
(166,226,1)
(233,186,1)
(248,92,1)
(6,149,1)
(218,26,1)
(95,187,1)
(43,7,1)
(197,228,1)
(186,224,1)
(130,111,1)
(104,203,1)
(107,244,1)
(117,15,1)
(168,201,1)
(87,213,1)
(154,12,1)
(257,59,1)
(195,170,1)
(223,149,1)
(50,136,1)
(33,123,1)
(241,142,1)
(106,56,1)
(59,263,1)
(122,3,1)
(177,218,1)
(209,122,1)
(0,211,1)
(98,261,1)
(246,235,1)
(210,27,1)
(76,172,1)
(190,66,1)
(1,149,1)
(265,182,1)
(31,195,1)
(242,186,1)
(35,157,1)
(21,164,1)
(254,149,1)
(170,157,1)
(191,119,1)
(220,168,1)
(123,8,1)
(12,143,1)
(87,258,1)
(142,235,1)
(144,103,1)
(128,235,1)
(41,190,1)
(247,169,1)
(40,6,1)
(156,177,1)
(215,260,1)
(250,155,1)
(262,64,1)
(72,156,1)
(178,28,1)
(266,39,1)
(236,88,1)
(73,65,1)
(15,11,1)
(102,36,1)
(67,222,1)
(169,5,1)
(86,95,1)
(198,248,1)
(92,157,1)
(27,106,1)
(110,177,1)
(36,18,1)
(145,144,1)
(21,71,1)
(136,158,1)
(187,240,1)
(143,157,1)
(18,149,1)
(145,30,1)
(79,67,1)
(54,230,1)
(199,143,1)
(192,257,1)
(263,133,1)
(181,161,1)
(134,241,1)
(82,180,1)
(94,79,1)
(113,86,1)
(202,102,1)
(216,4,1)
(2,157,1)
(30,17,1)
(103,259,1)
(133,160,1)
(10,153,1)
(222,87,1)
(5,171,1)
(140,210,1)
(203,83,1)
(246,107,1)
(32,109,1)
(94,2,1)
(227,263,1)
(264,156,1)
(212,13,1)
(114,183,1)
(100,69,1)
(179,223,1)
(87,266,1)
(23,45,1)
(238,96,1)
(80,169,1)
(251,247,1)
(165,227,1)
(132,105,1)
(229,134,1)
(119,76,1)
(45,215,1)
(254,250,1)
(85,0,1)
(93,262,1)
(196,166,1)
(187,149,1)
(143,62,1)
(217,151,1)
(240,249,1)
(248,167,1)
(11,132,1)
(173,39,1)
(52,147,1)
(77,72,1)
(183,149,1)
(238,246,1)
(184,100,1)
(224,48,1)
(196,31,1)
(163,212,1)
(35,147,1)
(19,268,1)
(252,21,1)
(107,74,1)
(255,18,1)
(261,251,1)
(6,68,1)
(3,49,1)
(62,23,1)
(213,143,2)
(260,8,2)
(242,158,2)
(26,247,2)
(222,143,2)
(61,247,2)
(74,149,2)
(223,149,2)
(263,133,2)
(132,1,2)
(196,136,2)
(169,5,2)
(258,31,2)
(203,247,2)
(135,143,2)
(192,247,2)
(11,247,2)
(53,124,2)
(9,136,2)
(153,21,2)
(1,247,2)
(147,206,2)
(166,136,2)
(112,143,2)
(190,35,2)
(65,8,2)
(46,158,2)
(43,136,2)
(21,71,2)
(120,143,2)
(206,149,2)
(247,169,2)
(71,136,2)
(128,247,2)
(175,183,2)
(258,258,2)
(228,157,2)
(59,55,2)
(202,205,2)
(117,247,2)
(168,136,2)
(67,136,2)
(257,247,2)
(103,158,2)
(176,136,2)
(82,136,2)
(3,157,2)
(253,143,2)
(155,158,2)
(196,258,2)
(4,136,2)
(264,247,2)
(236,238,2)
(195,8,2)
(1,149,2)
(205,117,2)
(18,149,2)
(151,221,2)
(100,158,2)
(6,149,2)
(200,53,2)
(23,215,2)
(54,136,2)
(96,247,2)
(22,58,2)
(21,157,2)
(189,247,2)
(156,247,2)
(255,205,2)
(247,235,2)
(36,205,2)
(13,136,2)
(37,8,2)
(236,247,2)
(25,205,2)
(23,8,2)
(108,143,2)
(174,247,2)
(178,247,2)
(88,247,2)
(220,196,2)
(55,205,2)
(7,136,2)
(93,269,2)
(133,160,2)
(265,254,2)
(180,136,2)
(71,223,2)
(3,175,2)
(266,39,2)
(269,29,2)
(198,136,2)
(215,73,2)
(246,235,2)
(117,15,2)
(29,8,2)
(227,247,2)
(181,136,2)
(238,246,2)
(48,158,2)
(219,136,2)
(119,8,2)
(102,36,2)
(72,247,2)
(28,247,2)
(259,265,2)
(153,136,2)
(15,132,2)
(230,136,2)
(151,136,2)
(132,247,2)
(172,8,2)
(143,8,2)
(160,61,2)
(104,247,2)
(218,247,2)
(123,8,2)
(159,136,2)
(217,136,2)
(257,59,2)
(201,136,2)
(126,143,2)
(185,205,2)
(31,8,2)
(161,136,2)
(15,247,2)
(143,62,2)
(168,201,2)
(254,149,2)
(20,6,2)
(254,158,2)
(39,143,2)
(124,207,2)
(152,205,2)
(262,8,2)
(156,177,2)
(92,157,2)
(112,157,2)
(197,228,2)
(256,154,2)
(101,136,2)
(196,31,2)
(222,87,2)
(74,247,2)
(268,205,2)
(265,158,2)
(181,54,2)
(79,67,2)
(246,247,2)
(252,136,2)
(85,211,2)
(190,136,2)
(186,48,2)
(205,247,2)
(48,149,2)
(49,136,2)
(232,136,2)
(17,136,2)
(36,18,2)
(167,136,2)
(158,222,2)
(15,235,2)
(94,158,2)
(158,143,2)
(81,136,2)
(87,31,2)
(29,119,2)
(119,149,2)
(2,157,2)
(175,136,2)
(163,136,2)
(228,151,2)
(10,136,2)
(3,136,2)
(215,8,2)
(43,232,2)
(259,158,2)
(32,136,2)
(92,136,2)
(62,23,2)
(87,266,2)
(267,136,2)
(257,263,2)
(138,84,2)
(77,247,2)
(206,136,2)
(141,136,2)
(18,205,2)
(58,220,2)
(54,149,2)
(143,157,2)
(69,158,2)
(191,8,2)
(76,8,2)
(228,136,2)
(182,158,2)
(94,2,2)
(186,158,2)
(85,136,2)
(268,102,2)
(216,136,2)
(50,136,2)
(187,60,2)
(87,258,2)
(221,136,2)
(91,205,2)
(211,136,2)
(102,235,2)
(221,149,2)
(72,229,2)
(114,136,2)
(247,247,2)
(239,247,2)
(170,8,2)
(133,236,2)
(139,136,2)
(126,8,2)
(258,143,2)
(211,149,2)
(242,186,2)
(52,136,2)
(66,136,2)
(103,259,2)
(184,158,2)
(35,157,2)
(224,158,2)
(83,247,2)
(160,247,2)
(232,181,2)
(269,8,2)
(220,136,2)
(87,143,2)
(63,247,2)
(248,136,2)
(59,263,2)
(58,136,2)
(107,247,2)
(55,268,2)
(107,74,2)
(183,136,2)
(164,136,2)
(225,143,2)
(75,136,2)
(59,205,2)
(64,8,2)
(67,222,2)
(238,247,2)
(30,136,2)
(177,247,2)
(35,147,2)
(79,136,2)
(207,148,2)
(209,3,2)
(2,136,2)
(24,247,2)
(118,136,2)
(62,8,2)
(232,157,2)
(19,205,2)
(103,94,2)
(229,134,2)
(72,156,2)
(144,158,2)
(204,169,2)
(223,136,2)
(183,149,2)
(136,158,2)
(61,16,2)
(197,136,2)
(250,158,2)
(173,143,2)
(21,136,2)
(263,247,2)
(106,113,2)
(248,92,2)
(116,136,2)
(41,136,2)
(210,106,2)
(150,8,2)
(73,8,2)
(229,247,2)
(199,143,2)
(133,247,2)
(244,247,2)
(110,247,2)
(94,242,2)
(220,168,2)
(207,149,2)
(242,157,2)
(187,149,2)
(115,8,2)
(22,136,2)
(109,136,2)
(212,136,2)
(45,8,2)
(51,136,2)
(47,143,2)
(93,124,2)
(165,247,2)
(94,79,2)
(246,107,2)
(209,136,2)
(147,136,2)
(179,136,2)
(33,8,2)
(157,8,2)
(225,8,2)
(35,136,2)
(145,143,2)
(105,247,2)
(226,136,2)
(233,158,2)
(5,20,2)
(92,85,2)
(0,136,2)
(128,235,2)
(245,84,2)
(266,143,2)
(122,136,2)
(93,8,2)
(143,143,2)
(84,247,2)
(102,205,2)
(34,136,2)
-----------------------------------
(0,intr_tbl)
(1,adapter->ahw)
(2,adapter->ahw->intr_tbl[i].id = i)
(3,adapter->ahw->intr_tbl[i])
(4,adapter)
(5,adapter->ahw->num_msix - 1)
(6,adapter->ahw)
(7,src)
(8,err)
(9,id)
(10,1)
(11,i)
(12,cmd)
(13,adapter->ahw->intr_tbl[i].enabled = 1)
(14,i)
(15,adapter->ahw->intr_tbl[i])
(16,bool op_type)
(17,0)
(18,adapter->ahw)
(19,16)
(20,adapter->ahw->num_msix)
(21,adapter->ahw->intr_tbl[i])
(22,adapter->ahw->intr_tbl[i].src = temp)
(23,cmd.rsp.arg[1])
(24,type)
(25,i)
(26,cmd)
(27,1)
(28,i)
(29,adapter->pdev->dev)
(30,adapter->ahw->intr_tbl[i].src = 0)
(31,index = 2)
(32,ahw)
(33,cmd)
(34,ahw)
(35,adapter->ahw->intr_tbl[i])
(36,adapter->ahw->intr_tbl)
(37,0)
(38,)
(39,cmd.rsp)
(40,num_msix)
(41,temp)
(42,i)
(43,adapter->ahw->intr_tbl[i].src)
(44,)
(45,1)
(46,id)
(47,2)
(48,adapter->ahw)
(49,i)
(50,adapter)
(51,ahw)
(52,i)
(53,return err;)
(54,adapter->ahw)
(55,adapter->ahw->intr_tbl[i].id << 16)
(56,arg)
(57,)
(58,temp = cmd.rsp.arg[index + 1])
(59,val |= (adapter->ahw->intr_tbl[i].id << 16)
(60,&cmd)
(61,op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL)
(62,max_ints = cmd.rsp.arg[1])
(63,ahw)
(64,"Failed to configure interrupts 0x%x\\n")
(65,rsp)
(66,src)
(67,MSW(val)
(68,ahw)
(69,"Can\'t configure interrupt %d\\n")
(70,if (LSB(val)
(71,adapter->ahw->intr_tbl)
(72,cmd.req.arg[index++])
(73,cmd.rsp)
(74,adapter->ahw)
(75,adapter)
(76,pdev)
(77,val)
(78,)
(79,adapter->ahw->intr_tbl[i].id = MSW(val)
(80,cmd)
(81,arg)
(82,ahw)
(83,val)
(84,op_type)
(85,adapter->ahw->intr_tbl)
(86,req)
(87,cmd.rsp.arg[index])
(88,4)
(89,)
(90,if (err)
(91,val)
(92,adapter->ahw->intr_tbl[i])
(93,dev_err(&adapter->pdev->dev,\n\\n\\t\\t\\t"Failed to configure interrupts 0x%x\\n", err)
(94,adapter->ahw->intr_tbl[i].id)
(95,cmd)
(96,type)
(97,if (adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)
(98,cmd)
(99,err)
(100,adapter)
(101,adapter)
(102,adapter->ahw->intr_tbl[i])
(103,dev_info(&adapter->pdev->dev,\n\\n\\t\\t\\t\\t "Can\'t configure interrupt %d\\n",\n\\n\\t\\t\\t\\t adapter->ahw->intr_tbl[i].id)
(104,adapter)
(105,intr_tbl)
(106,cmd.req.arg)
(107,adapter->ahw->intr_tbl)
(108,cmd)
(109,adapter)
(110,arg)
(111,max_ints)
(112,i++)
(113,cmd.req)
(114,intr_tbl)
(115,goto out;)
(116,i)
(117,adapter->ahw->intr_tbl[i].type)
(118,intr_tbl)
(119,adapter->pdev)
(120,val)
(121,)
(122,id)
(123,max_ints)
(124,err = qlcnic_issue_cmd(adapter, &cmd)
(125,if (op_type)
(126,max_ints)
(127,out:)
(128,i++)
(129,err)
(130,adapter)
(131,cmd)
(132,adapter->ahw->intr_tbl)
(133,type | (adapter->ahw->intr_tbl[i].type << 4)
(134,index = 2)
(135,rsp)
(136,op_type)
(137,type)
(138,QLCNIC_INTRPT_DEL)
(139,intr_tbl)
(140,max_ints)
(141,i)
(142,index)
(143,i < max_ints)
(144,continue;)
(145,i)
(146,0)
(147,adapter->ahw->intr_tbl)
(148,&cmd)
(149,struct qlcnic_adapter *adapter)
(150,i)
(151,adapter->ahw->intr_tbl)
(152,adapter)
(153,adapter->ahw->intr_tbl[i].enabled)
(154,&cmd)
(155,adapter)
(156,cmd.req.arg)
(157,i = 0)
(158,LSB(val)
(159,adapter->ahw->intr_tbl[i].enabled = 0)
(160,type = op_type ? QLCNIC_INTRPT_ADD : QLCNIC_INTRPT_DEL)
(161,intr_tbl)
(162,)
(163,cmd)
(164,i)
(165,ahw)
(166,1)
(167,enabled)
(168,cmd.rsp.arg)
(169,max_ints = adapter->ahw->num_msix - 1)
(170,index)
(171,1)
(172,adapter)
(173,arg)
(174,QLCNIC_INTRPT_MSIX)
(175,adapter->ahw->intr_tbl)
(176,rsp)
(177,cmd.req)
(178,max_ints)
(179,intr_tbl)
(180,adapter)
(181,adapter->ahw->intr_tbl)
(182,dev)
(183,adapter->ahw)
(184,ahw)
(185,ahw)
(186,adapter->ahw->intr_tbl)
(187,qlcnic_alloc_mbx_args(&cmd, adapter, QLCNIC_CMD_CONFIG_INTRPT)
(188,)
(189,type)
(190,adapter->ahw->intr_tbl[i].src)
(191,dev)
(192,i)
(193,)
(194,index)
(195,2)
(196,index + 1)
(197,adapter->ahw->intr_tbl[i].id)
(198,0)
(199,val)
(200,RET)
(201,cmd.rsp)
(202,id)
(203,type)
(204,cmd.req.arg[1] = max_ints)
(205,adapter->ahw->intr_tbl[i].type == QLCNIC_INTRPT_MSIX)
(206,adapter->ahw)
(207,qlcnic_issue_cmd(adapter, &cmd)
(208,max_ints)
(209,adapter->ahw->intr_tbl[i].id)
(210,cmd.req.arg[1])
(211,adapter->ahw)
(212,temp)
(213,index)
(214,val)
(215,cmd.rsp.arg)
(216,ahw)
(217,i)
(218,req)
(219,val)
(220,cmd.rsp.arg[index + 1])
(221,adapter->ahw)
(222,val = cmd.rsp.arg[index])
(223,adapter->ahw)
(224,intr_tbl)
(225,i)
(226,index)
(227,adapter)
(228,adapter->ahw->intr_tbl[i])
(229,index++)
(230,ahw)
(231,)
(232,adapter->ahw->intr_tbl[i])
(233,i)
(234,temp)
(235,i = 0)
(236,adapter->ahw->intr_tbl[i].type << 4)
(237,for (i = 0, index = 2; i < max_ints; i++, index += 2)
(238,adapter->ahw->intr_tbl[i].type)
(239,i)
(240,QLCNIC_CMD_CONFIG_INTRPT)
(241,2)
(242,adapter->ahw->intr_tbl[i])
(243,for (i = 0, index = 2; i < max_ints; i++)
(244,intr_tbl)
(245,QLCNIC_INTRPT_ADD)
(246,adapter->ahw->intr_tbl[i])
(247,i < max_ints)
(248,adapter->ahw->intr_tbl[i].enabled)
(249,adapter)
(250,pdev)
(251,err)
(252,enabled)
(253,index)
(254,adapter->pdev)
(255,intr_tbl)
(256,qlcnic_free_mbx_args(&cmd)
(257,cmd.req.arg[index++] = val)
(258,index += 2)
(259,&adapter->pdev->dev)
(260,arg)
(261,adapter)
(262,err)
(263,val = type | (adapter->ahw->intr_tbl[i].type << 4)
(264,index)
(265,adapter->pdev->dev)
(266,cmd.rsp.arg)
(267,i)
(268,adapter->ahw->intr_tbl[i].id)
(269,&adapter->pdev->dev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^