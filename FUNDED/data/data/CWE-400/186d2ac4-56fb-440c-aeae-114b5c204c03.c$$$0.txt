-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,49,50,51,52,58,59,60,61,65,69,70,73,74,76
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
54,55
54,56
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5==5
5
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,4,0)
(41,31,0)
(4,17,0)
(16,11,0)
(28,17,0)
(21,7,0)
(22,4,0)
(0,33,0)
(4,22,0)
(17,4,0)
(12,24,0)
(32,5,0)
(39,36,0)
(20,16,0)
(2,5,0)
(3,14,0)
(25,8,0)
(19,7,0)
(42,5,0)
(40,5,0)
(36,14,0)
(13,28,0)
(37,16,0)
(1,24,0)
(35,1,0)
(11,33,0)
(24,1,0)
(30,17,0)
(15,2,0)
(28,38,0)
(19,36,0)
(10,2,0)
(17,14,0)
(16,17,0)
(29,7,0)
(24,6,0)
(7,19,0)
(18,19,0)
(3,38,0)
(27,8,0)
(4,6,0)
(23,31,0)
(33,14,0)
(7,17,0)
(38,3,0)
(34,11,0)
(38,28,0)
(9,28,0)
(6,24,0)
(11,16,0)
(25,31,1)
(4,6,1)
(17,4,1)
(12,30,1)
(30,31,1)
(34,16,1)
(2,10,1)
(13,9,1)
(9,36,1)
(38,28,1)
(36,39,1)
(21,33,1)
(20,37,1)
(25,3,1)
(37,17,1)
(26,8,1)
(18,7,1)
(16,20,1)
(10,15,1)
(11,34,1)
(33,0,1)
(3,38,1)
(41,23,1)
(35,12,1)
(16,17,1)
(7,29,1)
(39,19,1)
(8,27,1)
(29,21,1)
(28,13,1)
(28,17,1)
(0,11,1)
(27,25,1)
(1,35,1)
(19,7,1)
(11,16,1)
(31,41,1)
(7,17,1)
(6,24,1)
(23,2,1)
(4,22,1)
(19,18,1)
(24,1,1)
(19,7,2)
(24,1,2)
(30,31,2)
(33,31,2)
(17,31,2)
(7,17,2)
(20,31,2)
(9,31,2)
(28,31,2)
(0,31,2)
(12,31,2)
(4,22,2)
(34,31,2)
(37,31,2)
(21,31,2)
(1,31,2)
(35,31,2)
(18,31,2)
(16,31,2)
(39,31,2)
(6,24,2)
(3,38,2)
(6,31,2)
(13,31,2)
(28,17,2)
(3,31,2)
(29,31,2)
(11,31,2)
(38,28,2)
(4,31,2)
(19,31,2)
(38,31,2)
(16,17,2)
(7,31,2)
(36,31,2)
(24,31,2)
(17,4,2)
(4,6,2)
(11,16,2)
-----------------------------------
(0,0)
(1,sizeof(twoIntsStruct)
(2,data = NULL)
(3,printStructLine(&data[0])
(4,(twoIntsStruct *)
(5,)
(6,ALLOCA(100*sizeof(twoIntsStruct)
(7,data[0])
(8,5==5)
(9,data)
(10,NULL)
(11,data[0].intOne)
(12,100)
(13,0)
(14,)
(15,data)
(16,data[0])
(17,data = (twoIntsStruct *)
(18,intTwo)
(19,data[0].intTwo)
(20,0)
(21,data)
(22,twoIntsStruct *)
(23,5)
(24,100*sizeof(twoIntsStruct)
(25,5)
(26,RET)
(27,5)
(28,data[0])
(29,0)
(30,data)
(31,5==5)
(32,data)
(33,data[0].intOne = 0)
(34,intOne)
(35,twoIntsStruct)
(36,data[0].intTwo = 0)
(37,data)
(38,&data[0])
(39,0)
(40,if(5==5)
(41,5)
(42,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^