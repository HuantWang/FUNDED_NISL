-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
37,39
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
-----nextToken-----
2,4,8,10,14,16,20,25,26,31,32,36,41,43,47,48
-----computeFrom-----
12,13
12,14
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(21,0,0)
(18,10,0)
(10,13,0)
(22,2,0)
(10,19,0)
(15,11,0)
(13,10,0)
(1,13,0)
(11,7,0)
(2,7,0)
(6,19,0)
(8,19,0)
(11,10,0)
(11,0,0)
(16,0,0)
(12,19,0)
(0,5,0)
(20,9,0)
(9,4,0)
(17,10,1)
(14,9,1)
(11,10,1)
(11,0,1)
(11,15,1)
(21,16,1)
(3,14,1)
(15,14,1)
(3,2,1)
(2,22,1)
(1,18,1)
(14,0,1)
(9,20,1)
(10,13,1)
(13,1,1)
(0,21,1)
(22,11,1)
(16,17,1)
(20,17,1)
(11,14,2)
(21,17,2)
(11,10,2)
(11,0,2)
(2,14,2)
(22,14,2)
(9,17,2)
(0,17,2)
(15,14,2)
(10,13,2)
(16,17,2)
(20,17,2)
-----------------------------------
(0,count = 20)
(1,1)
(2,printLine("Sleep time possibly too long")
(3,RET)
(4,)
(5,)
(6,if(globalReturnsTrue()
(7,)
(8,if(globalReturnsFalse()
(9,printLine("Benign, fixed string")
(10,count = -1)
(11,SLEEP(count)
(12,count)
(13,-1)
(14,globalReturnsTrue()
(15,count)
(16,count)
(17,globalReturnsFalse()
(18,count)
(19,)
(20,"Benign, fixed string")
(21,20)
(22,"Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^