-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
57,58
57,59
57,60
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
-----nextToken-----
2,4,9,11,15,17,21,22,26,29,34,35,37,42,44,48,49,53,55,56,60,63,65,70,73,75,78,81,84,85,89,91,96,98,102,104,106,110,112,116,118,123,124
-----computeFrom-----
19,20
19,21
24,25
24,26
31,32
31,33
58,59
58,60
68,69
68,70
79,80
79,81
87,88
87,89
-----guardedBy-----
65,106
60,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(27,40,0)
(41,26,0)
(14,44,0)
(1,45,0)
(13,36,0)
(45,55,0)
(49,22,0)
(47,40,0)
(40,22,0)
(18,37,0)
(19,24,0)
(29,43,0)
(35,28,0)
(10,53,0)
(34,40,0)
(30,44,0)
(30,14,0)
(22,49,0)
(26,45,0)
(5,47,0)
(16,54,0)
(0,20,0)
(7,8,0)
(9,36,0)
(14,39,0)
(10,15,0)
(52,28,0)
(12,53,0)
(6,8,0)
(28,45,0)
(32,38,0)
(8,40,0)
(3,43,0)
(28,35,0)
(37,40,0)
(50,26,0)
(24,30,0)
(8,38,0)
(22,35,0)
(45,26,0)
(22,40,0)
(35,22,0)
(39,14,0)
(4,37,0)
(31,44,0)
(27,38,0)
(42,27,0)
(54,1,0)
(53,10,0)
(48,24,0)
(23,44,0)
(56,30,0)
(55,44,0)
(2,45,0)
(43,55,0)
(51,55,0)
(46,1,0)
(21,11,0)
(40,38,0)
(28,20,0)
(25,21,0)
(1,54,0)
(47,38,0)
(20,28,0)
(33,14,0)
(36,44,0)
(30,56,1)
(37,4,1)
(21,25,1)
(54,16,1)
(30,14,1)
(36,13,1)
(48,19,1)
(7,37,1)
(27,42,1)
(12,37,1)
(33,36,1)
(22,35,1)
(1,45,1)
(42,8,1)
(4,18,1)
(26,41,1)
(1,54,1)
(16,46,1)
(10,53,1)
(20,0,1)
(45,26,1)
(27,40,1)
(17,21,1)
(8,6,1)
(8,40,1)
(52,34,1)
(47,40,1)
(28,20,1)
(34,1,1)
(47,5,1)
(6,7,1)
(5,27,1)
(39,33,1)
(56,24,1)
(25,1,1)
(22,49,1)
(24,48,1)
(28,45,1)
(13,9,1)
(40,22,1)
(18,40,1)
(0,52,1)
(46,45,1)
(35,28,1)
(53,12,1)
(2,30,1)
(14,39,1)
(50,2,1)
(17,47,1)
(37,40,1)
(41,50,1)
(19,14,1)
(7,10,1)
(20,1,2)
(4,1,2)
(8,40,2)
(28,20,2)
(53,37,2)
(14,39,2)
(34,1,2)
(10,37,2)
(28,1,2)
(12,37,2)
(47,1,2)
(30,14,2)
(22,49,2)
(37,1,2)
(10,53,2)
(37,40,2)
(27,40,2)
(47,40,2)
(52,1,2)
(1,54,2)
(22,35,2)
(7,1,2)
(40,22,2)
(8,1,2)
(42,1,2)
(5,1,2)
(45,26,2)
(21,1,2)
(22,1,2)
(40,1,2)
(27,1,2)
(6,1,2)
(28,45,2)
(1,45,2)
(35,1,2)
(35,28,2)
(18,1,2)
(0,1,2)
(25,1,2)
-----------------------------------
(0,char)
(1,data > strlen(HELLO_STRING)
(2,data)
(3,myString)
(4,NULL)
(5,myString)
(6,HELLO_STRING)
(7,myString)
(8,strcpy(myString, HELLO_STRING)
(9,data)
(10,exit(-1)
(11,)
(12,1)
(13,0)
(14,data = rand()
(15,)
(16,HELLO_STRING)
(17,RET)
(18,myString)
(19,myUnion)
(20,sizeof(char)
(21,printLine("Input is less than the length of the source string")
(22,(char *)
(23,data)
(24,myUnion.unionFirst)
(25,"Input is less than the length of the source string")
(26,myUnion.unionSecond)
(27,printLine(myString)
(28,data*sizeof(char)
(29,if (data > strlen(HELLO_STRING)
(30,myUnion.unionFirst = data)
(31,myUnion)
(32,if (myString == NULL)
(33,data)
(34,myString)
(35,malloc(data*sizeof(char)
(36,data = 0)
(37,myString == NULL)
(38,)
(39,rand()
(40,myString = (char *)
(41,unionSecond)
(42,myString)
(43,)
(44,)
(45,data = myUnion.unionSecond)
(46,data)
(47,free(myString)
(48,unionFirst)
(49,char *)
(50,myUnion)
(51,data)
(52,data)
(53,-1)
(54,strlen(HELLO_STRING)
(55,)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^