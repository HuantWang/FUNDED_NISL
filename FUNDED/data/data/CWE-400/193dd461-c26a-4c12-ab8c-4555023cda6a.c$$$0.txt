-----label-----
0
-----code-----
size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource(size_t data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
11,12
11,13
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
50,52
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
51,63
51,64
51,65
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
78,79
81,82
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
101,102
103,104
104,105
104,106
105,106
105,107
106,107
109,110
109,111
110,111
112,113
114,115
114,116
115,116
115,117
116,117
116,118
116,119
116,120
117,118
119,120
121,122
121,123
122,123
122,124
123,124
125,126
127,128
128,129
130,131
131,132
132,133
134,135
136,137
138,139
138,140
139,140
139,141
140,141
140,142
140,143
141,142
143,144
145,146
147,148
149,150
151,152
152,153
152,154
153,154
155,156
155,157
155,158
155,159
156,157
158,159
160,161
162,163
164,165
164,166
165,166
165,167
166,167
168,169
170,171
172,173
173,174
173,175
174,175
176,177
176,178
176,179
176,180
176,181
177,178
179,180
181,182
183,184
183,185
184,185
188,189
188,190
189,190
189,191
190,191
190,192
191,192
193,194
195,196
195,197
196,197
199,200
201,202
202,203
202,204
203,204
203,205
204,205
206,207
209,210
210,211
210,212
211,212
213,214
213,215
213,216
213,217
214,215
216,217
218,219
222,223
222,224
223,224
223,225
224,225
226,227
228,229
229,230
230,231
230,232
231,232
233,234
235,236
235,237
236,237
236,238
237,238
239,240
241,242
242,243
243,244
243,245
244,245
246,247
248,249
249,250
-----nextToken-----
3,5,8,10,15,17,21,23,27,29,32,36,38,41,44,46,49,55,58,60,62,64,68,70,72,76,79,80,84,89,90,92,98,99,100,102,107,108,111,113,118,120,124,126,129,133,135,137,142,144,146,148,150,154,157,159,161,163,167,169,171,175,178,180,182,185,186,187,192,194,197,198,200,205,207,208,212,215,217,219,220,221,225,227,232,234,238,240,245,247,250
-----computeFrom-----
53,54
53,55
66,67
66,68
86,87
86,88
94,95
94,96
104,105
104,106
115,116
115,117
139,140
139,141
152,153
152,154
165,166
165,167
173,174
173,175
183,184
183,185
189,190
189,191
190,191
190,192
195,196
195,197
202,203
202,204
210,211
210,212
223,224
223,225
236,237
236,238
-----guardedBy-----
225,234
238,247
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource(size_t data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
size_t
size_t
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource
size_t data
size_t
size_t
data
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
return data;
data
data
-----joern-----
(35,147,0)
(51,16,0)
(22,37,0)
(111,144,0)
(105,55,0)
(60,37,0)
(7,60,0)
(67,37,0)
(25,101,0)
(34,37,0)
(63,25,0)
(139,37,0)
(19,152,0)
(24,38,0)
(31,15,0)
(32,25,0)
(101,37,0)
(29,64,0)
(47,155,0)
(54,127,0)
(64,19,0)
(147,152,0)
(147,106,0)
(68,130,0)
(143,147,0)
(82,132,0)
(140,0,0)
(70,107,0)
(86,31,0)
(4,139,0)
(107,106,0)
(46,107,0)
(22,127,0)
(101,25,0)
(6,151,0)
(40,142,0)
(115,133,0)
(59,148,0)
(56,38,0)
(65,64,0)
(132,82,0)
(119,132,0)
(18,146,0)
(131,6,0)
(93,6,0)
(113,151,0)
(102,149,0)
(15,31,0)
(137,61,0)
(85,124,0)
(0,140,0)
(26,15,0)
(62,130,0)
(72,21,0)
(126,128,0)
(74,62,0)
(4,145,0)
(17,89,0)
(151,6,0)
(60,7,0)
(132,89,0)
(42,107,0)
(2,81,0)
(79,87,0)
(19,64,0)
(14,88,0)
(10,149,0)
(20,25,0)
(3,59,0)
(69,64,0)
(21,37,0)
(73,110,0)
(71,148,0)
(108,1,0)
(109,31,0)
(87,37,0)
(132,0,0)
(148,1,0)
(77,101,0)
(98,25,0)
(28,107,0)
(6,131,0)
(0,155,0)
(128,55,0)
(96,19,0)
(24,148,0)
(23,107,0)
(19,37,0)
(123,20,0)
(122,37,0)
(5,137,0)
(38,107,0)
(16,60,0)
(153,62,0)
(128,15,0)
(81,148,0)
(15,37,0)
(78,131,0)
(61,36,0)
(1,148,0)
(103,145,0)
(66,48,0)
(13,49,0)
(145,4,0)
(33,38,0)
(48,22,0)
(55,107,0)
(22,48,0)
(75,93,0)
(132,148,0)
(25,20,0)
(94,139,0)
(147,19,0)
(117,105,0)
(36,61,0)
(91,145,0)
(121,37,0)
(41,55,0)
(148,37,0)
(138,1,0)
(0,132,0)
(6,93,0)
(8,129,0)
(53,24,0)
(146,101,0)
(89,132,0)
(134,137,0)
(76,107,0)
(114,105,0)
(125,82,0)
(100,146,0)
(39,31,0)
(127,22,0)
(59,88,0)
(24,150,0)
(116,20,0)
(30,7,0)
(9,37,0)
(88,59,0)
(44,107,0)
(136,55,0)
(31,148,0)
(149,15,0)
(50,36,0)
(92,95,0)
(52,107,0)
(43,110,0)
(142,148,0)
(130,37,0)
(61,137,0)
(84,118,0)
(105,15,0)
(45,142,0)
(137,101,0)
(128,57,0)
(154,22,0)
(104,151,0)
(135,107,0)
(90,59,0)
(155,0,0)
(12,36,0)
(146,87,0)
(120,1,0)
(25,15,0)
(110,107,0)
(112,37,0)
(27,21,0)
(36,101,0)
(11,107,0)
(141,4,0)
(97,16,0)
(81,38,0)
(80,81,0)
(83,107,0)
(103,130,1)
(24,38,1)
(25,20,1)
(90,89,1)
(130,68,1)
(36,101,1)
(147,19,1)
(91,103,1)
(64,29,1)
(45,40,1)
(89,17,1)
(12,50,1)
(117,81,1)
(48,66,1)
(153,22,1)
(22,127,1)
(147,143,1)
(2,111,1)
(105,15,1)
(94,4,1)
(117,24,1)
(132,82,1)
(31,148,1)
(53,81,1)
(5,101,1)
(18,61,1)
(109,26,1)
(84,149,1)
(89,132,1)
(19,152,1)
(80,2,1)
(86,39,1)
(2,85,1)
(15,31,1)
(100,18,1)
(47,119,1)
(142,148,1)
(35,147,1)
(115,61,1)
(102,10,1)
(154,127,1)
(59,148,1)
(88,59,1)
(58,105,1)
(134,5,1)
(141,145,1)
(10,15,1)
(2,115,1)
(61,137,1)
(98,20,1)
(81,80,1)
(81,38,1)
(14,59,1)
(147,152,1)
(143,58,1)
(138,108,1)
(131,6,1)
(123,32,1)
(77,149,1)
(24,148,1)
(88,14,1)
(85,142,1)
(38,33,1)
(146,100,1)
(0,140,1)
(79,146,1)
(66,154,1)
(26,88,1)
(2,8,1)
(2,84,1)
(65,96,1)
(82,125,1)
(61,36,1)
(63,77,1)
(6,93,1)
(3,90,1)
(22,48,1)
(104,113,1)
(4,141,1)
(55,41,1)
(126,105,1)
(30,16,1)
(1,120,1)
(96,87,1)
(0,155,1)
(131,78,1)
(58,128,1)
(31,86,1)
(111,88,1)
(21,72,1)
(136,38,1)
(120,138,1)
(132,0,1)
(113,55,1)
(116,123,1)
(93,75,1)
(32,63,1)
(127,54,1)
(4,145,1)
(25,98,1)
(71,21,1)
(7,30,1)
(143,13,1)
(41,136,1)
(56,110,1)
(108,71,1)
(68,62,1)
(128,126,1)
(149,102,1)
(92,131,1)
(142,45,1)
(19,64,1)
(51,139,1)
(29,69,1)
(99,19,1)
(39,109,1)
(33,56,1)
(132,148,1)
(81,148,1)
(128,15,1)
(24,53,1)
(87,79,1)
(43,73,1)
(27,131,1)
(69,65,1)
(110,43,1)
(16,97,1)
(60,7,1)
(113,99,1)
(105,114,1)
(151,104,1)
(149,15,1)
(6,151,1)
(36,12,1)
(146,101,1)
(78,6,1)
(2,99,1)
(2,92,1)
(54,142,1)
(59,3,1)
(139,94,1)
(75,151,1)
(148,1,1)
(20,116,1)
(101,25,1)
(17,132,1)
(62,74,1)
(40,148,1)
(25,15,1)
(13,58,1)
(50,137,1)
(97,51,1)
(8,89,1)
(145,91,1)
(128,55,1)
(119,60,1)
(125,0,1)
(105,55,1)
(72,27,1)
(137,134,1)
(74,153,1)
(137,101,1)
(155,47,1)
(114,117,1)
(127,142,2)
(61,137,2)
(104,99,2)
(7,142,2)
(132,82,2)
(92,131,2)
(53,81,2)
(48,142,2)
(119,142,2)
(131,99,2)
(25,15,2)
(86,88,2)
(78,99,2)
(60,7,2)
(5,149,2)
(12,137,2)
(27,131,2)
(105,55,2)
(17,142,2)
(6,151,2)
(16,142,2)
(59,148,2)
(22,127,2)
(0,142,2)
(13,58,2)
(96,61,2)
(77,149,2)
(74,142,2)
(18,61,2)
(116,149,2)
(105,15,2)
(84,149,2)
(102,88,2)
(120,131,2)
(142,148,2)
(128,55,2)
(88,89,2)
(29,61,2)
(141,142,2)
(128,105,2)
(128,15,2)
(39,88,2)
(88,59,2)
(146,61,2)
(8,89,2)
(65,61,2)
(148,131,2)
(32,149,2)
(26,88,2)
(1,131,2)
(134,149,2)
(132,142,2)
(22,48,2)
(54,142,2)
(123,149,2)
(25,20,2)
(21,131,2)
(68,142,2)
(71,131,2)
(100,61,2)
(139,142,2)
(148,1,2)
(109,88,2)
(40,131,2)
(59,89,2)
(142,131,2)
(147,152,2)
(101,149,2)
(45,131,2)
(0,140,2)
(72,131,2)
(69,61,2)
(24,38,2)
(64,61,2)
(115,61,2)
(85,142,2)
(111,88,2)
(89,142,2)
(103,142,2)
(130,142,2)
(36,101,2)
(137,101,2)
(10,88,2)
(35,147,2)
(113,99,2)
(132,148,2)
(0,155,2)
(108,131,2)
(63,149,2)
(145,142,2)
(125,142,2)
(47,142,2)
(3,89,2)
(4,145,2)
(137,149,2)
(98,149,2)
(154,142,2)
(155,142,2)
(31,88,2)
(149,88,2)
(153,142,2)
(51,142,2)
(66,142,2)
(20,149,2)
(81,38,2)
(90,89,2)
(50,137,2)
(6,93,2)
(75,99,2)
(19,64,2)
(99,61,2)
(126,105,2)
(91,142,2)
(6,99,2)
(36,137,2)
(132,0,2)
(24,148,2)
(79,61,2)
(149,15,2)
(19,152,2)
(93,99,2)
(146,101,2)
(60,142,2)
(61,36,2)
(19,61,2)
(82,142,2)
(15,88,2)
(138,131,2)
(87,61,2)
(30,142,2)
(89,132,2)
(25,149,2)
(131,6,2)
(151,99,2)
(15,31,2)
(147,19,2)
(101,25,2)
(62,142,2)
(4,142,2)
(97,142,2)
(81,148,2)
(22,142,2)
(24,81,2)
(31,148,2)
(14,89,2)
(94,142,2)
(61,149,2)
-----------------------------------
(0,(struct sockaddr*)
(1,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(2,listenSocket)
(3,LISTEN_BACKLOG)
(4,service.sin_addr.s_addr)
(5,recvResult)
(6,WSAStartup(MAKEWORD(2,2)
(7,htons(TCP_PORT)
(8,break;)
(9,if (listen(listenSocket, LISTEN_BACKLOG)
(10,acceptSocket)
(11,service)
(12,0)
(13,WSACleanup()
(14,SOCKET_ERROR)
(15,acceptSocket = accept(listenSocket, NULL, NULL)
(16,service.sin_port)
(17,SOCKET_ERROR)
(18,inputBuffer)
(19,data = strtoul(inputBuffer, NULL, 0)
(20,CHAR_ARRAY_SIZE - 1)
(21,wsaDataInit = 1)
(22,memset(&service, 0, sizeof(service)
(23,if (wsaDataInit)
(24,CLOSE_SOCKET(listenSocket)
(25,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(26,acceptSocket)
(27,wsaDataInit)
(28,inputBuffer)
(29,0)
(30,TCP_PORT)
(31,accept(listenSocket, NULL, NULL)
(32,inputBuffer)
(33,INVALID_SOCKET)
(34,if (bind(listenSocket, (struct sockaddr*)
(35,RET)
(36,recvResult == 0)
(37,)
(38,listenSocket = INVALID_SOCKET)
(39,NULL)
(40,listenSocket)
(41,INVALID_SOCKET)
(42,if (acceptSocket != INVALID_SOCKET)
(43,0)
(44,do)
(45,INVALID_SOCKET)
(46,wsaDataInit)
(47,service)
(48,sizeof(service)
(49,)
(50,recvResult)
(51,service)
(52,if (listenSocket != INVALID_SOCKET)
(53,listenSocket)
(54,service)
(55,acceptSocket = INVALID_SOCKET)
(56,listenSocket)
(57,)
(58,wsaDataInit)
(59,listen(listenSocket, LISTEN_BACKLOG)
(60,service.sin_port = htons(TCP_PORT)
(61,recvResult == SOCKET_ERROR || recvResult == 0)
(62,service.sin_family)
(63,acceptSocket)
(64,strtoul(inputBuffer, NULL, 0)
(65,inputBuffer)
(66,service)
(67,if (listenSocket == INVALID_SOCKET)
(68,AF_INET)
(69,NULL)
(70,wsaData)
(71,listenSocket)
(72,1)
(73,wsaDataInit)
(74,sin_family)
(75,wsaData)
(76,recvResult)
(77,recvResult)
(78,NO_ERROR)
(79,'\\0')
(80,INVALID_SOCKET)
(81,listenSocket != INVALID_SOCKET)
(82,sizeof(service)
(83,listenSocket)
(84,break;)
(85,break;)
(86,NULL)
(87,inputBuffer[recvResult] = '\\0')
(88,listen(listenSocket, LISTEN_BACKLOG)
(89,bind(listenSocket, (struct sockaddr*)
(90,listenSocket)
(91,sin_addr)
(92,break;)
(93,&wsaData)
(94,INADDR_ANY)
(95,)
(96,data)
(97,sin_port)
(98,0)
(99,0)
(100,recvResult)
(101,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(102,SOCKET_ERROR)
(103,service)
(104,2)
(105,acceptSocket != INVALID_SOCKET)
(106,)
(107,)
(108,AF_INET)
(109,listenSocket)
(110,wsaDataInit = 0)
(111,break;)
(112,if (recvResult == SOCKET_ERROR || recvResult == 0)
(113,2)
(114,INVALID_SOCKET)
(115,break;)
(116,1)
(117,acceptSocket)
(118,)
(119,listenSocket)
(120,IPPROTO_TCP)
(121,if (WSAStartup(MAKEWORD(2,2)
(122,if (acceptSocket == SOCKET_ERROR)
(123,CHAR_ARRAY_SIZE)
(124,)
(125,service)
(126,acceptSocket)
(127,&service)
(128,CLOSE_SOCKET(acceptSocket)
(129,)
(130,service.sin_family = AF_INET)
(131,WSAStartup(MAKEWORD(2,2)
(132,bind(listenSocket, (struct sockaddr*)
(133,)
(134,SOCKET_ERROR)
(135,acceptSocket)
(136,acceptSocket)
(137,recvResult == SOCKET_ERROR)
(138,SOCK_STREAM)
(139,service.sin_addr.s_addr = INADDR_ANY)
(140,struct sockaddr*)
(141,s_addr)
(142,listenSocket == INVALID_SOCKET)
(143,data)
(144,)
(145,service.sin_addr)
(146,inputBuffer[recvResult])
(147,return data;)
(148,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(149,acceptSocket == SOCKET_ERROR)
(150,)
(151,MAKEWORD(2,2)
(152,size_t data)
(153,service)
(154,0)
(155,&service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^