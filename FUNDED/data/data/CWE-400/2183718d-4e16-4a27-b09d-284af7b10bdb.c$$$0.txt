-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
32,35
33,34
34,35
36,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
65,68
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
85,86
85,87
85,88
86,87
88,89
91,92
91,93
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
109,110
109,111
110,111
112,113
112,114
113,114
113,115
114,115
117,118
119,120
120,121
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
128,129
130,131
130,132
130,133
130,134
130,135
131,132
133,134
135,136
136,137
136,138
139,140
139,141
140,141
142,143
144,145
146,147
147,148
147,149
148,149
151,152
151,153
152,153
154,155
155,156
156,157
156,158
157,158
159,160
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,40,41,47,49,51,55,57,58,61,64,66,67,69,74,75,78,79,84,87,89,90,94,96,101,102,107,108,111,115,116,118,121,127,129,132,134,137,138,141,143,145,149,150,153,158,160
-----computeFrom-----
12,13
12,14
71,72
71,73
72,73
72,74
76,77
76,78
82,83
82,84
92,93
92,94
105,106
105,107
109,110
109,111
124,125
124,126
-----guardedBy-----
78,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(81,21,0)
(60,52,0)
(83,58,0)
(67,83,0)
(82,43,0)
(17,70,0)
(70,64,0)
(58,21,0)
(52,16,0)
(69,21,0)
(50,20,0)
(69,22,0)
(8,33,0)
(21,43,0)
(40,50,0)
(57,16,0)
(33,13,0)
(4,59,0)
(58,78,0)
(51,37,0)
(21,70,0)
(47,16,0)
(10,52,0)
(13,33,0)
(42,12,0)
(60,13,0)
(58,55,0)
(6,18,0)
(39,27,0)
(24,60,0)
(58,83,0)
(38,60,0)
(31,37,0)
(75,78,0)
(13,60,0)
(27,21,0)
(74,58,0)
(71,52,0)
(28,43,0)
(54,37,0)
(64,37,0)
(55,58,0)
(80,0,0)
(9,58,0)
(63,43,0)
(34,64,0)
(15,25,0)
(0,37,0)
(20,52,0)
(32,33,0)
(48,16,0)
(77,20,0)
(18,37,0)
(62,50,0)
(50,79,0)
(59,52,0)
(66,37,0)
(33,52,0)
(59,41,0)
(1,73,0)
(73,14,0)
(37,11,0)
(30,69,0)
(61,46,0)
(4,19,0)
(55,84,0)
(12,53,0)
(5,19,0)
(49,84,0)
(65,18,0)
(59,4,0)
(68,70,0)
(70,21,0)
(78,58,0)
(41,59,0)
(3,0,0)
(46,19,0)
(23,10,0)
(44,64,0)
(26,27,0)
(56,7,0)
(52,10,0)
(36,59,0)
(72,19,0)
(76,4,0)
(20,50,0)
(84,55,0)
(1,27,1)
(62,45,1)
(67,78,1)
(27,21,1)
(64,34,1)
(72,5,1)
(3,18,1)
(75,9,1)
(70,64,1)
(20,52,1)
(26,39,1)
(5,73,1)
(17,81,1)
(60,38,1)
(34,44,1)
(70,68,1)
(7,56,1)
(69,21,1)
(59,52,1)
(59,36,1)
(58,78,1)
(2,35,1)
(21,70,1)
(81,13,1)
(32,64,1)
(52,10,1)
(39,21,1)
(29,45,1)
(29,50,1)
(68,17,1)
(58,74,1)
(4,19,1)
(46,19,1)
(83,67,1)
(19,72,1)
(30,35,1)
(12,42,1)
(49,4,1)
(50,20,1)
(58,21,1)
(44,0,1)
(4,59,1)
(23,71,1)
(74,83,1)
(2,13,1)
(0,80,1)
(78,75,1)
(45,52,1)
(13,33,1)
(60,52,1)
(5,27,1)
(6,29,1)
(73,1,1)
(42,29,1)
(56,55,1)
(36,76,1)
(24,33,1)
(2,12,1)
(35,4,1)
(40,62,1)
(33,52,1)
(46,61,1)
(2,69,1)
(10,23,1)
(33,8,1)
(58,83,1)
(13,60,1)
(59,41,1)
(61,55,1)
(77,40,1)
(80,3,1)
(55,58,1)
(38,24,1)
(84,49,1)
(20,77,1)
(8,32,1)
(76,46,1)
(18,65,1)
(69,30,1)
(76,19,1)
(55,84,1)
(65,6,1)
(27,26,1)
(9,84,1)
(61,7,1)
(17,13,2)
(75,4,2)
(18,29,2)
(4,59,2)
(40,45,2)
(59,13,2)
(7,55,2)
(58,21,2)
(33,29,2)
(73,27,2)
(72,13,2)
(26,13,2)
(13,33,2)
(58,78,2)
(20,45,2)
(3,29,2)
(50,20,2)
(59,4,2)
(77,45,2)
(35,13,2)
(4,19,2)
(83,4,2)
(21,13,2)
(42,29,2)
(74,4,2)
(27,13,2)
(38,33,2)
(33,52,2)
(52,10,2)
(58,83,2)
(67,4,2)
(0,29,2)
(59,52,2)
(55,4,2)
(19,13,2)
(13,29,2)
(32,29,2)
(55,84,2)
(59,41,2)
(13,60,2)
(1,27,2)
(70,13,2)
(62,45,2)
(39,13,2)
(58,4,2)
(81,13,2)
(49,4,2)
(84,4,2)
(20,52,2)
(6,29,2)
(46,4,2)
(61,4,2)
(44,29,2)
(24,33,2)
(60,52,2)
(55,58,2)
(12,29,2)
(56,55,2)
(8,29,2)
(36,13,2)
(65,29,2)
(36,4,2)
(30,35,2)
(27,21,2)
(76,4,2)
(5,13,2)
(76,13,2)
(4,4,2)
(34,29,2)
(69,35,2)
(64,29,2)
(70,64,2)
(21,70,2)
(78,4,2)
(9,4,2)
(68,13,2)
(69,21,2)
(46,19,2)
(4,13,2)
(80,29,2)
(60,33,2)
(50,45,2)
-----------------------------------
(0,*pFile = NULL)
(1,1)
(2,RET)
(3,pFile)
(4,i < (size_t)
(5,i)
(6,i)
(7,exit(1)
(8,0)
(9,SENTENCE)
(10,-1)
(11,)
(12,printLine("Benign, fixed string")
(13,count > 0 && count <= 20)
(14,)
(15,if (strlen(SENTENCE)
(16,)
(17,filename)
(18,i = 0)
(19,i = 0)
(20,&count)
(21,pFile = fopen(filename, "w+")
(22,)
(23,1)
(24,count)
(25,)
(26,NULL)
(27,pFile == NULL)
(28,if (pFile == NULL)
(29,staticReturnsFalse()
(30,pFile)
(31,i)
(32,count)
(33,count > 0)
(34,"output_good.txt")
(35,pFile)
(36,count)
(37,)
(38,20)
(39,pFile)
(40,"%d")
(41,size_t)
(42,"Benign, fixed string")
(43,)
(44,filename)
(45,staticReturnsTrue()
(46,i++)
(47,if(staticReturnsFalse()
(48,if(staticReturnsTrue()
(49,SENTENCE)
(50,fscanf(stdin, "%d", &count)
(51,pFile)
(52,count = -1)
(53,)
(54,if (count > 0 && count <= 20)
(55,strlen(SENTENCE)
(56,1)
(57,count)
(58,fwrite(SENTENCE, sizeof(char)
(59,(size_t)
(60,count <= 20)
(61,i)
(62,stdin)
(63,for (i = 0; i < (size_t)
(64,*filename = "output_good.txt")
(65,0)
(66,filename)
(67,SENTENCE)
(68,"w+")
(69,fclose(pFile)
(70,fopen(filename, "w+")
(71,count)
(72,0)
(73,exit(1)
(74,pFile)
(75,char)
(76,i)
(77,count)
(78,sizeof(char)
(79,)
(80,NULL)
(81,pFile)
(82,if (pFile)
(83,strlen(SENTENCE)
(84,strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^