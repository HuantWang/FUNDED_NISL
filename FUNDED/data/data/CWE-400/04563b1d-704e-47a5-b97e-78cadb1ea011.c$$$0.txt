-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticFive==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,32,33,37,38,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
35,36
35,37
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(20,42,0)
(6,1,0)
(25,20,0)
(24,11,0)
(17,19,0)
(34,42,0)
(18,24,0)
(16,27,0)
(19,45,0)
(56,12,0)
(36,28,0)
(28,52,0)
(39,2,0)
(22,47,0)
(35,42,0)
(8,55,0)
(7,12,0)
(19,17,0)
(43,12,0)
(34,55,0)
(10,43,0)
(31,20,0)
(16,17,0)
(37,10,0)
(13,47,0)
(23,38,0)
(21,34,0)
(30,12,0)
(42,19,0)
(48,16,0)
(50,37,0)
(44,42,0)
(47,14,0)
(39,1,0)
(33,55,0)
(42,55,0)
(16,47,0)
(54,5,0)
(17,16,0)
(0,24,0)
(53,43,0)
(15,43,0)
(10,47,0)
(46,35,0)
(41,5,0)
(9,27,0)
(3,34,0)
(35,55,0)
(27,16,0)
(4,10,0)
(32,40,0)
(19,42,0)
(33,42,0)
(51,23,0)
(45,19,0)
(1,39,0)
(26,40,0)
(16,43,0)
(29,33,0)
(10,37,0)
(16,43,1)
(36,10,1)
(10,47,1)
(21,20,1)
(43,53,1)
(10,37,1)
(34,42,1)
(29,35,1)
(19,45,1)
(21,39,1)
(23,51,1)
(20,25,1)
(31,42,1)
(49,28,1)
(46,34,1)
(54,41,1)
(5,54,1)
(16,47,1)
(19,17,1)
(44,10,1)
(34,3,1)
(26,32,1)
(37,50,1)
(33,42,1)
(35,46,1)
(40,26,1)
(17,16,1)
(28,36,1)
(42,19,1)
(16,27,1)
(6,20,1)
(13,22,1)
(9,48,1)
(35,42,1)
(41,23,1)
(1,6,1)
(53,15,1)
(22,40,1)
(25,31,1)
(32,43,1)
(10,43,1)
(39,1,1)
(49,33,1)
(33,29,1)
(47,13,1)
(48,44,1)
(3,21,1)
(51,40,1)
(4,5,1)
(27,9,1)
(50,4,1)
(41,47,1)
(20,42,1)
(49,5,1)
(39,1,2)
(27,10,2)
(25,10,2)
(46,10,2)
(33,42,2)
(10,47,2)
(39,20,2)
(17,16,2)
(35,42,2)
(34,42,2)
(19,17,2)
(36,10,2)
(10,43,2)
(10,37,2)
(9,10,2)
(34,10,2)
(42,19,2)
(16,47,2)
(48,10,2)
(50,5,2)
(31,10,2)
(16,43,2)
(22,40,2)
(44,10,2)
(42,10,2)
(19,10,2)
(4,5,2)
(23,40,2)
(13,40,2)
(51,40,2)
(19,45,2)
(37,5,2)
(33,10,2)
(16,27,2)
(20,10,2)
(6,20,2)
(10,5,2)
(3,10,2)
(35,10,2)
(17,10,2)
(28,10,2)
(1,20,2)
(29,10,2)
(21,10,2)
(20,42,2)
(47,40,2)
(16,10,2)
-----------------------------------
(0,myString)
(1,-1)
(2,)
(3,HELLO_STRING)
(4,data)
(5,staticFive==5)
(6,1)
(7,if(staticFive==5)
(8,if (myString == NULL)
(9,char)
(10,data > strlen(HELLO_STRING)
(11,)
(12,)
(13,20)
(14,)
(15,data)
(16,data*sizeof(char)
(17,malloc(data*sizeof(char)
(18,if (data > strlen(HELLO_STRING)
(19,(char *)
(20,myString == NULL)
(21,myString)
(22,data)
(23,printLine("Benign, fixed string")
(24,)
(25,NULL)
(26,5)
(27,sizeof(char)
(28,printLine("Input is less than the length of the source string")
(29,myString)
(30,data)
(31,myString)
(32,staticFive)
(33,free(myString)
(34,strcpy(myString, HELLO_STRING)
(35,printLine(myString)
(36,"Input is less than the length of the source string")
(37,strlen(HELLO_STRING)
(38,)
(39,exit(-1)
(40,staticFive!=5)
(41,staticFive)
(42,myString = (char *)
(43,data = 0)
(44,myString)
(45,char *)
(46,myString)
(47,data = 20)
(48,data)
(49,RET)
(50,HELLO_STRING)
(51,"Benign, fixed string")
(52,)
(53,0)
(54,5)
(55,)
(56,if(staticFive!=5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^