-----label-----
1
-----code-----
FILE *fopen(const char *path, const char *mode)
{
	struct rmonitor_msg msg;

	FILE *file;
	typeof(fopen) *original_fopen = dlsym(RTLD_NEXT, "fopen");

	debug(D_DEBUG, "fopen %s mode %s from %d.\n", path, mode, getpid());

	PUSH_ERRNO
		file = original_fopen(path, mode);
	POP_ERRNO(msg)

	if(file)
	{
		struct rmonitor_msg msg;

		if(open_for_writing(fileno(file))) {
			msg.type   = OPEN_OUTPUT;
		} else {
			msg.type   = OPEN_INPUT;
		}
	}

	msg.origin = getpid();
	strcpy(msg.data.s, path);

	send_monitor_msg(&msg);

	return file;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
34,35
35,36
37,38
37,39
37,40
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
48,51
48,52
48,53
48,54
49,50
51,52
54,55
56,57
58,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
68,70
68,71
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
80,81
82,83
83,84
83,85
84,85
86,87
86,88
87,88
88,89
88,90
89,90
91,92
93,94
93,95
93,96
94,95
94,96
95,96
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
105,107
106,107
109,110
111,112
112,113
113,114
113,115
114,115
114,116
115,116
118,119
120,121
121,122
121,123
122,123
122,124
123,124
126,127
127,128
129,130
130,131
130,132
130,133
131,132
133,134
133,135
134,135
134,136
135,136
139,140
141,142
142,143
142,144
143,144
145,146
146,147
148,149
149,150
-----nextToken-----
3,5,6,8,10,11,13,15,16,21,23,27,29,30,36,38,39,43,45,46,50,52,53,55,57,60,64,66,70,72,74,78,81,85,90,92,96,99,101,107,108,110,116,117,119,124,125,128,132,136,137,138,140,144,147,150
-----computeFrom-----
104,105
104,106
113,114
113,115
121,122
121,123
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;UnaryExpression;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
FILE *fopen(const char *path, const char *mode){	struct rmonitor_msg msg;	FILE *file;	typeof(fopen) *original_fopen = dlsym(RTLD_NEXT, "fopen");	debug(D_DEBUG, "fopen %s mode %s from %d.\n", path, mode, getpid());	PUSH_ERRNO		file = original_fopen(path, mode);	POP_ERRNO(msg)	if(file)	{		struct rmonitor_msg msg;		if(open_for_writing(fileno(file))) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}	msg.origin = getpid();	strcpy(msg.data.s, path);	send_monitor_msg(&msg);	return file;}
FILE
FILE
*fopen(const char *path, const char *mode)
*
fopen
const char *path
const char
*path
*
path
const char *mode
const char
*mode
*
mode
{	struct rmonitor_msg msg;	FILE *file;	typeof(fopen) *original_fopen = dlsym(RTLD_NEXT, "fopen");	debug(D_DEBUG, "fopen %s mode %s from %d.\n", path, mode, getpid());	PUSH_ERRNO		file = original_fopen(path, mode);	POP_ERRNO(msg)	if(file)	{		struct rmonitor_msg msg;		if(open_for_writing(fileno(file))) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}	msg.origin = getpid();	strcpy(msg.data.s, path);	send_monitor_msg(&msg);	return file;}
struct rmonitor_msg msg;
struct rmonitor_msg msg;
struct rmonitor_msg
rmonitor_msg
msg
msg
FILE *file;
FILE *file;
FILE
FILE
*file
*
file
typeof(fopen) *original_fopen = dlsym(RTLD_NEXT, "fopen");
typeof(fopen) *original_fopen = dlsym(RTLD_NEXT, "fopen");
typeof(fopen)
(fopen)
fopen
fopen
*original_fopen = dlsym(RTLD_NEXT, "fopen")
*
original_fopen
= dlsym(RTLD_NEXT, "fopen")
dlsym(RTLD_NEXT, "fopen")
dlsym
dlsym
RTLD_NEXT
RTLD_NEXT
"fopen"
debug(D_DEBUG, "fopen %s mode %s from %d.\n", path, mode, getpid());
debug(D_DEBUG, "fopen %s mode %s from %d.\n", path, mode, getpid())
debug
debug
D_DEBUG
D_DEBUG
"fopen %s mode %s from %d.\n"
path
path
mode
mode
getpid()
getpid
getpid
PUSH_ERRNO		file = original_fopen(path, mode);
PUSH_ERRNO		file = original_fopen(path, mode);
PUSH_ERRNO
PUSH_ERRNO
file = original_fopen(path, mode)
file
= original_fopen(path, mode)
original_fopen(path, mode)
original_fopen
original_fopen
path
path
mode
mode
POP_ERRNO(msg)
POP_ERRNO(msg)
POP_ERRNO
POP_ERRNO
(msg)
msg
msg
)
if(file)	{		struct rmonitor_msg msg;		if(open_for_writing(fileno(file))) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}
file
file
{		struct rmonitor_msg msg;		if(open_for_writing(fileno(file))) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}	}
struct rmonitor_msg msg;
struct rmonitor_msg msg;
struct rmonitor_msg
rmonitor_msg
msg
msg
if(open_for_writing(fileno(file))) {			msg.type   = OPEN_OUTPUT;		} else {			msg.type   = OPEN_INPUT;		}
open_for_writing(fileno(file))
open_for_writing
open_for_writing
fileno(file)
fileno
fileno
file
file
{			msg.type   = OPEN_OUTPUT;		}
msg.type   = OPEN_OUTPUT;
msg.type   = OPEN_OUTPUT
msg.type
msg
msg
type
OPEN_OUTPUT
OPEN_OUTPUT
{			msg.type   = OPEN_INPUT;		}
msg.type   = OPEN_INPUT;
msg.type   = OPEN_INPUT
msg.type
msg
msg
type
OPEN_INPUT
OPEN_INPUT
msg.origin = getpid();
msg.origin = getpid()
msg.origin
msg
msg
origin
getpid()
getpid
getpid
strcpy(msg.data.s, path);
strcpy(msg.data.s, path)
strcpy
strcpy
msg.data.s
msg.data
msg
msg
data
s
path
path
send_monitor_msg(&msg);
send_monitor_msg(&msg)
send_monitor_msg
send_monitor_msg
&msg
msg
msg
return file;
file
file
-----joern-----
(24,4,0)
(8,17,0)
(29,13,0)
(17,39,0)
(33,17,0)
(52,13,0)
(53,17,0)
(55,39,0)
(45,9,0)
(61,39,0)
(37,4,0)
(59,57,0)
(59,1,0)
(32,39,0)
(7,17,0)
(3,61,0)
(30,0,0)
(16,3,0)
(46,22,0)
(52,35,0)
(10,18,0)
(62,10,0)
(44,25,0)
(40,39,0)
(20,9,0)
(31,0,0)
(9,39,0)
(49,17,0)
(43,62,0)
(13,59,0)
(25,41,0)
(4,56,0)
(2,50,0)
(18,10,0)
(59,13,0)
(42,61,0)
(17,1,0)
(60,24,0)
(27,41,0)
(62,39,0)
(47,59,0)
(51,50,0)
(14,0,0)
(5,28,0)
(10,62,0)
(17,57,0)
(25,14,0)
(9,13,0)
(12,39,0)
(19,24,0)
(48,46,0)
(17,7,0)
(28,5,0)
(62,1,0)
(38,18,0)
(11,5,0)
(0,14,0)
(26,46,0)
(61,42,0)
(35,52,0)
(13,39,0)
(54,18,0)
(14,39,0)
(36,3,0)
(23,59,0)
(6,22,0)
(41,25,0)
(21,10,0)
(34,52,0)
(28,39,0)
(22,15,0)
(35,52,1)
(5,11,1)
(49,33,1)
(48,26,1)
(16,4,1)
(25,44,1)
(7,49,1)
(19,60,1)
(34,58,1)
(4,37,1)
(30,31,1)
(3,36,1)
(17,57,1)
(22,6,1)
(53,8,1)
(10,18,1)
(59,47,1)
(0,30,1)
(38,61,1)
(33,53,1)
(62,43,1)
(23,29,1)
(25,41,1)
(17,7,1)
(17,1,1)
(14,0,1)
(59,57,1)
(61,42,1)
(8,14,1)
(45,9,1)
(9,13,1)
(37,24,1)
(20,28,1)
(58,13,1)
(54,38,1)
(16,58,1)
(43,10,1)
(6,46,1)
(24,19,1)
(18,54,1)
(52,13,1)
(9,20,1)
(29,17,1)
(46,48,1)
(31,25,1)
(59,1,1)
(41,27,1)
(10,21,1)
(52,34,1)
(26,35,1)
(21,18,1)
(62,1,1)
(44,41,1)
(28,5,1)
(11,62,1)
(60,35,1)
(13,59,1)
(36,16,1)
(47,23,1)
(42,3,1)
(62,10,1)
(16,22,1)
(28,5,2)
(60,35,2)
(48,35,2)
(25,41,2)
(59,57,2)
(61,42,2)
(14,0,2)
(45,9,2)
(24,35,2)
(35,58,2)
(19,35,2)
(62,10,2)
(52,13,2)
(9,13,2)
(6,35,2)
(62,1,2)
(37,35,2)
(46,35,2)
(17,7,2)
(22,35,2)
(13,59,2)
(4,35,2)
(59,1,2)
(26,35,2)
(10,18,2)
(35,52,2)
(52,58,2)
(17,57,2)
(34,58,2)
(17,1,2)
-----------------------------------
(0,dlsym(RTLD_NEXT, "fopen")
(1,const char *path)
(2,msg)
(3,msg.origin)
(4,msg.type   = OPEN_OUTPUT)
(5,&msg)
(6,OPEN_INPUT)
(7,getpid()
(8,D_DEBUG)
(9,return file;)
(10,msg.data.s)
(11,msg)
(12,file)
(13,file = original_fopen(path, mode)
(14,typeof(fopen)
(15,)
(16,msg)
(17,debug(D_DEBUG, "fopen %s mode %s from %d.\\n", path, mode, getpid()
(18,msg.data)
(19,type)
(20,file)
(21,s)
(22,msg.type   = OPEN_INPUT)
(23,path)
(24,msg.type)
(25,typeof(fopen)
(26,msg)
(27,fopen)
(28,send_monitor_msg(&msg)
(29,file)
(30,"fopen")
(31,RTLD_NEXT)
(32,file)
(33,path)
(34,file)
(35,open_for_writing(fileno(file)
(36,origin)
(37,OPEN_OUTPUT)
(38,msg)
(39,)
(40,msg)
(41,typeof(fopen)
(42,getpid()
(43,path)
(44,original_fopen)
(45,RET)
(46,msg.type)
(47,mode)
(48,type)
(49,mode)
(50,)
(51,if(open_for_writing(fileno(file)
(52,fileno(file)
(53,"fopen %s mode %s from %d.\\n")
(54,data)
(55,if(file)
(56,)
(57,const char *mode)
(58,file)
(59,original_fopen(path, mode)
(60,msg)
(61,msg.origin = getpid()
(62,strcpy(msg.data.s, path)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^