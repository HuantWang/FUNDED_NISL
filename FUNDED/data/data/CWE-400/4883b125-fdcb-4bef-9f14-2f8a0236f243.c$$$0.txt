-----label-----
0
-----code-----
static void goodB2GSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
50,51
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,9,11,14,18,20,21,26,29,31,34,35,40,43,45,48,51,54,55,59,61,66,68,72,74,76,80,82,86,88,93,94
-----computeFrom-----
23,24
23,25
24,25
24,26
32,33
32,34
38,39
38,40
49,50
49,51
57,58
57,59
-----guardedBy-----
31,76
34,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2GSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
static void
goodB2GSink()
goodB2GSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(33,9,0)
(30,24,0)
(31,4,0)
(25,18,0)
(41,12,0)
(28,32,0)
(15,10,0)
(37,13,0)
(3,4,0)
(39,15,0)
(24,2,0)
(19,15,0)
(5,29,0)
(26,42,0)
(6,31,0)
(22,42,0)
(4,3,0)
(25,10,0)
(21,3,0)
(8,40,0)
(26,23,0)
(27,25,0)
(44,2,0)
(3,9,0)
(16,5,0)
(3,24,0)
(38,13,0)
(18,37,0)
(9,3,0)
(20,2,0)
(31,24,0)
(25,27,0)
(14,32,0)
(35,10,0)
(40,12,0)
(10,25,0)
(10,12,0)
(37,24,0)
(35,12,0)
(40,10,0)
(34,24,0)
(7,35,0)
(18,25,0)
(11,20,0)
(1,10,0)
(42,26,0)
(36,31,0)
(37,18,0)
(4,31,0)
(0,37,0)
(32,12,0)
(17,20,0)
(13,37,0)
(32,10,0)
(25,18,1)
(26,42,1)
(21,24,1)
(18,37,1)
(3,24,1)
(15,10,1)
(32,10,1)
(37,24,1)
(1,4,1)
(16,4,1)
(4,3,1)
(14,15,1)
(14,26,1)
(40,8,1)
(25,27,1)
(36,3,1)
(31,6,1)
(35,10,1)
(9,33,1)
(10,25,1)
(6,36,1)
(32,28,1)
(42,22,1)
(4,31,1)
(43,35,1)
(37,13,1)
(30,34,1)
(22,15,1)
(43,5,1)
(28,14,1)
(38,0,1)
(0,1,1)
(13,38,1)
(39,10,1)
(24,30,1)
(19,39,1)
(31,24,1)
(8,32,1)
(35,7,1)
(3,9,1)
(15,19,1)
(7,40,1)
(5,16,1)
(33,21,1)
(40,10,1)
(19,4,2)
(1,4,2)
(26,15,2)
(39,4,2)
(15,10,2)
(18,37,2)
(4,31,2)
(25,4,2)
(32,10,2)
(22,15,2)
(25,27,2)
(3,9,2)
(36,3,2)
(15,4,2)
(42,15,2)
(37,13,2)
(0,4,2)
(25,18,2)
(7,4,2)
(5,4,2)
(28,4,2)
(6,3,2)
(26,42,2)
(18,4,2)
(13,4,2)
(4,3,2)
(3,24,2)
(35,10,2)
(31,24,2)
(38,4,2)
(14,4,2)
(37,24,2)
(10,25,2)
(16,4,2)
(10,4,2)
(31,3,2)
(37,4,2)
(40,10,2)
(40,4,2)
(8,4,2)
(35,4,2)
(32,4,2)
-----------------------------------
(0,data)
(1,myString)
(2,)
(3,data > strlen(HELLO_STRING)
(4,data > strlen(HELLO_STRING)
(5,printLine("Input is less than the length of the source string or too large")
(6,100)
(7,myString)
(8,myString)
(9,strlen(HELLO_STRING)
(10,myString = (char *)
(11,myString)
(12,)
(13,sizeof(char)
(14,myString)
(15,myString == NULL)
(16,"Input is less than the length of the source string or too large")
(17,if (data > strlen(HELLO_STRING)
(18,malloc(data*sizeof(char)
(19,NULL)
(20,)
(21,data)
(22,1)
(23,)
(24,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData)
(25,(char *)
(26,exit(-1)
(27,char *)
(28,HELLO_STRING)
(29,)
(30,CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData)
(31,data < 100)
(32,strcpy(myString, HELLO_STRING)
(33,HELLO_STRING)
(34,data)
(35,free(myString)
(36,data)
(37,data*sizeof(char)
(38,char)
(39,myString)
(40,printLine(myString)
(41,if (myString == NULL)
(42,-1)
(43,RET)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^