-----label-----
0
-----code-----
static void goodG2B1()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
56,58
57,58
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,28,33,36,38,41,43,46,47,52,53,54,58,61,62,66,67,69
-----computeFrom-----
13,14
13,15
19,20
19,21
31,32
31,33
42,43
42,44
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(27,33,0)
(35,31,0)
(30,29,0)
(21,27,0)
(35,15,0)
(20,0,0)
(34,31,0)
(17,20,0)
(31,35,0)
(27,23,0)
(7,6,0)
(14,33,0)
(12,35,0)
(11,8,0)
(4,7,0)
(19,33,0)
(18,10,0)
(27,30,0)
(32,0,0)
(23,27,0)
(2,8,0)
(22,20,0)
(15,29,0)
(28,10,0)
(29,3,0)
(29,30,0)
(14,30,0)
(15,35,0)
(30,9,0)
(29,15,0)
(3,29,0)
(33,9,0)
(25,14,0)
(26,0,0)
(5,27,0)
(24,0,0)
(1,14,0)
(23,9,0)
(13,30,0)
(29,15,1)
(21,5,1)
(25,1,1)
(34,12,1)
(22,17,1)
(4,8,1)
(35,31,1)
(19,14,1)
(18,23,1)
(10,28,1)
(14,30,1)
(20,22,1)
(28,18,1)
(29,3,1)
(2,11,1)
(27,21,1)
(27,33,1)
(12,13,1)
(13,8,1)
(30,29,1)
(23,27,1)
(7,4,1)
(16,10,1)
(31,34,1)
(18,7,1)
(27,30,1)
(33,19,1)
(8,2,1)
(1,30,1)
(11,20,1)
(15,35,1)
(14,25,1)
(5,33,1)
(14,8,2)
(30,29,2)
(12,8,2)
(31,8,2)
(23,27,2)
(15,8,2)
(29,3,2)
(27,33,2)
(19,8,2)
(15,35,2)
(1,8,2)
(30,8,2)
(23,8,2)
(29,15,2)
(25,8,2)
(7,8,2)
(13,8,2)
(35,31,2)
(33,8,2)
(27,30,2)
(4,8,2)
(29,8,2)
(21,8,2)
(5,8,2)
(35,8,2)
(27,8,2)
(34,8,2)
(14,30,2)
-----------------------------------
(0,)
(1,data)
(2,5)
(3,int *)
(4,"Benign, fixed string")
(5,data)
(6,)
(7,printLine("Benign, fixed string")
(8,GLOBAL_CONST_FIVE!=5)
(9,)
(10,GLOBAL_CONST_FIVE==5)
(11,GLOBAL_CONST_FIVE)
(12,100)
(13,data)
(14,data[0])
(15,ALLOCA(100*sizeof(int)
(16,RET)
(17,data)
(18,GLOBAL_CONST_FIVE)
(19,5)
(20,data = NULL)
(21,0)
(22,NULL)
(23,printIntLine(data[0])
(24,if(GLOBAL_CONST_FIVE==5)
(25,0)
(26,data)
(27,data[0])
(28,5)
(29,(int *)
(30,data = (int *)
(31,sizeof(int)
(32,if(GLOBAL_CONST_FIVE!=5)
(33,data[0] = 5)
(34,int)
(35,100*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^