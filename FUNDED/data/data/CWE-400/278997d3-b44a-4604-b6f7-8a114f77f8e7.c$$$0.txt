-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
24,25
25,26
25,27
26,27
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
79,80
79,81
81,82
81,83
81,84
81,85
81,86
81,87
82,83
87,88
88,89
88,90
89,90
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,28,29,30,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,77,78,80,83,84,85,86,90,91,92
-----computeFrom-----
14,15
14,16
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(17,44,0)
(30,37,0)
(18,23,0)
(3,0,0)
(23,49,0)
(4,15,0)
(42,39,0)
(10,12,0)
(12,11,0)
(16,21,0)
(43,2,0)
(1,44,0)
(31,16,0)
(24,1,0)
(36,2,0)
(24,49,0)
(15,13,0)
(47,0,0)
(4,44,0)
(25,44,0)
(21,39,0)
(41,2,0)
(1,6,0)
(22,0,0)
(34,25,0)
(49,24,0)
(32,0,0)
(38,34,0)
(28,4,0)
(8,12,0)
(20,29,0)
(27,16,0)
(13,0,0)
(19,25,0)
(49,23,0)
(21,16,0)
(35,11,0)
(50,49,0)
(6,1,0)
(14,41,0)
(25,34,0)
(45,11,0)
(26,25,0)
(37,0,0)
(1,24,0)
(44,1,0)
(48,2,0)
(33,11,0)
(44,0,0)
(7,21,0)
(15,4,0)
(29,0,0)
(51,4,0)
(13,15,0)
(39,0,0)
(34,37,0)
(16,44,0)
(5,2,0)
(16,44,1)
(32,29,1)
(31,27,1)
(49,23,1)
(4,44,1)
(43,40,1)
(20,46,1)
(9,48,1)
(48,41,1)
(9,43,1)
(38,25,1)
(25,26,1)
(46,12,1)
(19,44,1)
(47,13,1)
(23,18,1)
(44,1,1)
(28,51,1)
(7,16,1)
(50,17,1)
(41,14,1)
(51,39,1)
(30,34,1)
(26,19,1)
(21,16,1)
(8,10,1)
(24,49,1)
(18,50,1)
(1,24,1)
(37,30,1)
(34,25,1)
(39,42,1)
(15,4,1)
(4,28,1)
(14,40,1)
(25,44,1)
(27,37,1)
(17,46,1)
(40,47,1)
(16,31,1)
(34,38,1)
(21,7,1)
(13,15,1)
(29,20,1)
(12,8,1)
(40,32,1)
(1,6,1)
(42,21,1)
(34,25,2)
(50,46,2)
(1,46,2)
(31,46,2)
(18,46,2)
(17,46,2)
(24,46,2)
(13,46,2)
(24,49,2)
(38,46,2)
(1,6,2)
(32,46,2)
(27,46,2)
(16,44,2)
(25,46,2)
(13,15,2)
(43,40,2)
(1,24,2)
(16,46,2)
(26,46,2)
(21,46,2)
(44,46,2)
(47,46,2)
(51,46,2)
(44,1,2)
(37,46,2)
(15,46,2)
(4,44,2)
(15,4,2)
(23,46,2)
(34,46,2)
(49,46,2)
(41,40,2)
(28,46,2)
(25,44,2)
(7,46,2)
(29,46,2)
(39,46,2)
(20,46,2)
(4,46,2)
(14,40,2)
(49,23,2)
(48,40,2)
(21,16,2)
(30,46,2)
(42,46,2)
(19,46,2)
-----------------------------------
(0,)
(1,(twoIntsStruct *)
(2,)
(3,case 6:)
(4,data[0])
(5,default:)
(6,twoIntsStruct *)
(7,intTwo)
(8,NULL)
(9,RET)
(10,data)
(11,)
(12,data = NULL)
(13,printStructLine(&data[0])
(14,"Benign, fixed string")
(15,&data[0])
(16,data[0])
(17,data)
(18,twoIntsStruct)
(19,data)
(20,"Benign, fixed string")
(21,data[0].intTwo)
(22,default:)
(23,sizeof(twoIntsStruct)
(24,ALLOCA(100*sizeof(twoIntsStruct)
(25,data[0])
(26,0)
(27,data)
(28,0)
(29,printLine("Benign, fixed string")
(30,0)
(31,0)
(32,break;)
(33,switch(7)
(34,data[0].intOne)
(35,data)
(36,case 7:)
(37,data[0].intOne = 0)
(38,intOne)
(39,data[0].intTwo = 0)
(40,7)
(41,printLine("Benign, fixed string")
(42,0)
(43,break;)
(44,data = (twoIntsStruct *)
(45,switch(5)
(46,5)
(47,break;)
(48,break;)
(49,100*sizeof(twoIntsStruct)
(50,100)
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^