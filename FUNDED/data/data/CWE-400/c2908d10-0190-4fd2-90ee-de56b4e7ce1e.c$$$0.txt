-----label-----
0
-----code-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
{
	int res;
	int status;
	char tech[256];
	char *location;
	const char *macrocontext, *macroexten;
	enum ast_device_state newstate;

	/* on entry here, we know that tmp->chan == NULL */
	if (tmp->member->paused) {
		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||
		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {
		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",
				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if (!tmp->member->ringinuse) {
		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {
			newstate = ast_device_state(tmp->member->interface);
			if (newstate != tmp->member->status) {
				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",
					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);
			}
		}
		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {
			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
			tmp->stillgoing = 0;
			(*busies)++;
			return 0;
		}
	}

	if (use_weight && compare_weight(qe->parent,tmp->member)) {
		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	ast_copy_string(tech, tmp->interface, sizeof(tech));
	if ((location = strchr(tech, '/'))) {
		*location++ = '\0';
	} else {
		location = "";
	}

	/* Request the peer */
	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
	if (!tmp->chan) {			/* If we can't, just go on to the next call */
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;

		ao2_lock(qe->parent);
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		qe->parent->rrpos++;
		qe->linpos++;
		ao2_unlock(qe->parent);

		(*busies)++;
		return 0;
	}

	ast_channel_lock_both(tmp->chan, qe->chan);

	if (qe->cancel_answered_elsewhere) {
		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
	}
	ast_channel_appl_set(tmp->chan, "AppQueue");
	ast_channel_data_set(tmp->chan, "(Outgoing Line)");
	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));

	/* If the new channel has no callerid, try to guess what it should be */
	if (!ast_channel_caller(tmp->chan)->id.number.valid) {
		if (ast_channel_connected(qe->chan)->id.number.valid) {
			struct ast_party_caller caller;

			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
			caller.id = ast_channel_connected(qe->chan)->id;
			caller.ani = ast_channel_connected(qe->chan)->ani;
			ast_channel_set_caller_event(tmp->chan, &caller, NULL);
		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {
			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {
			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 
		}
		tmp->dial_callerid_absent = 1;
	}

	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));

	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;

	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));

	/* Inherit specially named variables from parent channel */
	ast_channel_inherit_variables(qe->chan, tmp->chan);
	ast_channel_datastore_inherit(qe->chan, tmp->chan);

	/* Presense of ADSI CPE on outgoing channel follows ours */
	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));

	/* Inherit context and extension */
	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
	if (!ast_strlen_zero(macroexten)) {
		ast_channel_exten_set(tmp->chan, macroexten);
	} else {
		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
	}
	if (ast_cdr_isset_unanswered()) {
		/* they want to see the unanswered dial attempts! */
		/* set up the CDR fields on all the CDRs to give sensical information */
		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
	}

	ast_channel_unlock(tmp->chan);
	ast_channel_unlock(qe->chan);

	/* Place the call, but don't wait on the answer */
	if ((res = ast_call(tmp->chan, location, 0))) {
		/* Again, keep going even if there's an error */
		ast_verb(3, "Couldn't call %s\n", tmp->interface);
		do_hang(tmp);
		(*busies)++;
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		return 0;
	} else if (qe->parent->eventwhencalled) {
		char vars[2048];

		ast_channel_lock_both(tmp->chan, qe->chan);

		/*** DOCUMENTATION
		<managerEventInstance>
			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>
			<syntax>
				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
				<parameter name="AgentCalled">
					<para>The agent's technology or location.</para>
				</parameter>
				<parameter name="AgentName">
					<para>The name of the agent.</para>
				</parameter>
				<parameter name="Variable" required="no" multiple="yes">
					<para>Optional channel variables from the ChannelCalling channel</para>
				</parameter>
			</syntax>
			<see-also>
				<ref type="managerEvent">AgentRingNoAnswer</ref>
				<ref type="managerEvent">AgentComplete</ref>
				<ref type="managerEvent">AgentConnect</ref>
			</see-also>
		</managerEventInstance>
		***/
		manager_event(EVENT_FLAG_AGENT, "AgentCalled",
			"Queue: %s\r\n"
			"AgentCalled: %s\r\n"
			"AgentName: %s\r\n"
			"ChannelCalling: %s\r\n"
			"DestinationChannel: %s\r\n"
			"CallerIDNum: %s\r\n"
			"CallerIDName: %s\r\n"
			"ConnectedLineNum: %s\r\n"
			"ConnectedLineName: %s\r\n"
			"Context: %s\r\n"
			"Extension: %s\r\n"
			"Priority: %d\r\n"
			"Uniqueid: %s\r\n"
			"%s",
			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),
			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),
			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),
			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");

		ast_channel_unlock(tmp->chan);
		ast_channel_unlock(qe->chan);

		ast_verb(3, "Called %s\n", tmp->interface);
	}

	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
47,50
49,50
49,51
52,53
52,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
63,65
64,65
68,69
68,70
68,71
68,72
69,70
70,71
70,72
70,73
70,74
71,72
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
86,87
87,88
88,89
89,90
90,91
92,93
94,95
94,96
95,96
95,97
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
127,128
128,129
128,130
129,130
129,131
130,131
131,132
131,133
132,133
135,136
135,137
136,137
136,138
137,138
141,142
142,143
142,144
143,144
143,145
144,145
144,146
145,146
147,148
149,150
149,151
150,151
153,154
153,155
154,155
154,156
155,156
159,160
159,161
159,162
159,163
160,161
161,162
161,163
161,164
161,165
161,166
162,163
166,167
167,168
167,169
167,170
168,169
168,170
169,170
172,173
172,174
173,174
173,175
174,175
178,179
178,180
179,180
179,181
180,181
184,185
184,186
185,186
188,189
189,190
189,191
190,191
190,192
191,192
195,196
196,197
197,198
198,199
199,200
201,202
203,204
203,205
204,205
205,206
205,207
206,207
206,208
207,208
211,212
211,213
212,213
212,214
213,214
213,215
214,215
216,217
217,218
217,219
218,219
218,220
219,220
219,221
220,221
224,225
226,227
226,228
227,228
228,229
228,230
229,230
231,232
231,233
232,233
234,235
234,236
235,236
235,237
236,237
240,241
240,242
241,242
241,243
242,243
244,245
244,246
245,246
245,247
246,247
250,251
250,252
251,252
252,253
252,254
252,255
252,256
252,257
252,258
253,254
255,256
258,259
258,260
259,260
259,261
260,261
264,265
264,266
265,266
267,268
267,269
268,269
268,270
269,270
273,274
273,275
274,275
276,277
278,279
279,280
279,281
279,282
279,283
280,281
282,283
284,285
286,287
286,288
287,288
287,289
288,289
292,293
292,294
293,294
293,295
294,295
295,296
295,297
296,297
296,298
297,298
297,299
298,299
302,303
304,305
305,306
305,307
306,307
306,308
307,308
307,309
308,309
312,313
314,315
314,316
314,317
314,318
315,316
316,317
316,318
316,319
316,320
317,318
321,322
321,323
322,323
325,326
326,327
326,328
327,328
327,329
328,329
332,333
333,334
334,335
335,336
336,337
338,339
340,341
340,342
341,342
341,343
342,343
344,345
344,346
344,347
345,346
347,348
347,349
348,349
351,352
351,353
352,353
355,356
355,357
355,358
355,359
356,357
357,358
357,359
357,360
357,361
357,362
358,359
362,363
362,364
363,364
363,365
364,365
368,369
368,370
369,370
372,373
373,374
373,375
374,375
374,376
375,376
379,380
380,381
381,382
382,383
383,384
385,386
387,388
388,389
388,390
388,391
388,392
389,390
391,392
393,394
393,395
394,395
397,398
398,399
399,400
401,402
401,403
401,404
402,403
403,404
403,405
404,405
406,407
406,408
406,409
407,408
409,410
412,413
413,414
414,415
414,416
415,416
416,417
417,418
420,421
421,422
422,423
422,424
423,424
426,427
427,428
427,429
428,429
428,430
429,430
432,433
432,434
432,435
432,436
432,437
432,438
433,434
435,436
437,438
437,439
438,439
440,441
440,442
441,442
444,445
444,446
445,446
448,449
450,451
451,452
453,454
453,455
454,455
455,456
455,457
456,457
459,460
459,461
459,462
459,463
459,464
459,465
459,466
459,467
459,468
460,461
460,462
461,462
461,463
462,463
464,465
464,466
465,466
468,469
469,470
470,471
470,472
471,472
473,474
473,475
474,475
476,477
476,478
477,478
480,481
481,482
481,483
482,483
482,484
483,484
487,488
488,489
488,490
489,490
491,492
491,493
492,493
495,496
496,497
496,498
496,499
496,500
497,498
499,500
499,501
500,501
503,504
503,505
504,505
507,508
507,509
508,509
510,511
510,512
511,512
514,515
515,516
516,517
516,518
517,518
517,519
518,519
522,523
523,524
524,525
524,526
525,526
528,529
529,530
529,531
530,531
532,533
532,534
533,534
536,537
537,538
538,539
539,540
540,541
542,543
544,545
545,546
545,547
545,548
546,547
548,549
548,550
549,550
552,553
552,554
553,554
556,557
556,558
557,558
557,559
558,559
561,562
562,563
563,564
563,565
563,566
564,565
566,567
566,568
567,568
570,571
572,573
573,574
573,575
573,576
574,575
576,577
576,578
577,578
581,582
582,583
582,584
582,585
583,584
585,586
585,587
586,587
590,591
591,592
591,593
591,594
591,595
592,593
594,595
594,596
595,596
597,598
597,599
598,599
602,603
603,604
604,605
605,606
605,607
606,607
608,609
608,610
609,610
612,613
612,614
613,614
614,615
614,616
615,616
615,617
616,617
616,618
617,618
617,619
618,619
620,621
620,622
621,622
627,628
627,629
628,629
628,630
628,631
629,630
629,631
630,631
630,632
631,632
631,633
632,633
632,634
633,634
635,636
635,637
636,637
642,643
642,644
642,645
642,646
642,647
643,644
644,645
644,646
645,646
647,648
649,650
650,651
650,652
650,653
651,652
653,654
654,655
656,657
656,658
657,658
659,660
659,661
660,661
663,664
664,665
664,666
665,666
665,667
666,667
669,670
669,671
670,671
670,672
671,672
673,674
673,675
674,675
678,679
679,680
679,681
680,681
680,682
681,682
684,685
684,686
685,686
685,687
686,687
688,689
688,690
689,690
693,694
694,695
694,696
694,697
694,698
695,696
697,698
697,699
698,699
701,702
702,703
704,705
706,707
706,708
706,709
707,708
708,709
708,710
709,710
711,712
711,713
712,713
712,714
713,714
713,715
714,715
716,717
716,718
717,718
722,723
723,724
724,725
724,726
724,727
724,728
724,729
725,726
727,728
727,729
728,729
731,732
731,733
732,733
732,734
733,734
733,735
734,735
736,737
736,738
737,738
742,743
744,745
746,747
746,748
747,748
748,749
748,750
749,750
751,752
751,753
751,754
752,753
754,755
754,756
755,756
757,758
757,759
758,759
761,762
761,763
762,763
764,765
764,766
765,766
768,769
769,770
770,771
770,772
770,773
770,774
770,775
771,772
773,774
773,775
774,775
777,778
777,779
777,780
778,779
780,781
780,782
781,782
783,784
783,785
784,785
787,788
787,789
788,789
790,791
790,792
791,792
794,795
796,797
798,799
799,800
799,801
800,801
800,802
801,802
805,806
806,807
806,808
806,809
807,808
809,810
809,811
810,811
812,813
812,814
813,814
816,817
816,818
817,818
819,820
819,821
820,821
823,824
824,825
824,826
825,826
825,827
826,827
826,828
827,828
829,830
829,831
830,831
834,835
834,836
835,836
835,837
836,837
838,839
838,840
839,840
843,844
844,845
844,846
844,847
845,846
847,848
847,849
848,849
850,851
850,852
851,852
854,855
854,856
855,856
857,858
857,859
858,859
861,862
862,863
862,864
862,865
863,864
865,866
865,867
866,867
869,870
869,871
870,871
873,874
874,875
874,876
874,877
875,876
877,878
877,879
878,879
881,882
881,883
882,883
885,886
886,887
886,888
886,889
887,888
889,890
889,891
890,891
893,894
893,895
894,895
896,897
896,898
897,898
900,901
901,902
901,903
902,903
904,905
904,906
904,907
905,906
907,908
907,909
908,909
912,913
913,914
913,915
913,916
914,915
916,917
916,918
917,918
920,921
920,922
920,923
921,922
921,923
922,923
924,925
926,927
926,928
927,928
929,930
929,931
930,931
933,934
935,936
936,937
936,938
937,938
939,940
939,941
939,942
940,941
942,943
942,944
943,944
947,948
947,949
947,950
948,949
949,950
949,951
950,951
952,953
954,955
955,956
956,957
956,958
956,959
957,958
959,960
959,961
960,961
963,964
965,966
966,967
967,968
967,969
967,970
968,969
970,971
970,972
971,972
974,975
974,976
975,976
977,978
977,979
978,979
981,982
981,983
982,983
983,984
985,986
985,987
985,988
985,989
985,990
985,991
985,992
985,993
985,994
985,995
985,996
986,987
987,988
987,989
987,990
988,989
990,991
990,992
991,992
993,994
993,995
994,995
997,998
997,999
998,999
1000,1001
1000,1002
1001,1002
1004,1005
1005,1006
1005,1007
1005,1008
1006,1007
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1012,1013
1012,1014
1013,1014
1017,1018
1017,1019
1018,1019
1018,1020
1019,1020
1021,1022
1021,1023
1022,1023
1026,1027
1027,1028
1027,1029
1027,1030
1028,1029
1030,1031
1030,1032
1031,1032
1031,1033
1032,1033
1034,1035
1034,1036
1035,1036
1039,1040
1039,1041
1040,1041
1040,1042
1041,1042
1043,1044
1043,1045
1044,1045
1048,1049
1049,1050
1049,1051
1049,1052
1050,1051
1052,1053
1052,1054
1053,1054
1053,1055
1054,1055
1056,1057
1056,1058
1057,1058
1061,1062
1061,1063
1062,1063
1062,1064
1063,1064
1065,1066
1065,1067
1066,1067
1070,1071
1071,1072
1071,1073
1071,1074
1072,1073
1074,1075
1074,1076
1075,1076
1075,1077
1076,1077
1078,1079
1078,1080
1079,1080
1083,1084
1083,1085
1084,1085
1086,1087
1086,1088
1087,1088
1090,1091
1091,1092
1091,1093
1091,1094
1092,1093
1094,1095
1094,1096
1095,1096
1095,1097
1096,1097
1098,1099
1098,1100
1099,1100
1103,1104
1103,1105
1104,1105
1106,1107
1106,1108
1107,1108
1110,1111
1111,1112
1111,1113
1111,1114
1112,1113
1114,1115
1114,1116
1115,1116
1115,1117
1116,1117
1118,1119
1118,1120
1119,1120
1123,1124
1123,1125
1124,1125
1124,1126
1125,1126
1127,1128
1127,1129
1128,1129
1132,1133
1133,1134
1133,1135
1133,1136
1134,1135
1136,1137
1136,1138
1137,1138
1137,1139
1138,1139
1140,1141
1140,1142
1141,1142
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1149,1150
1149,1151
1150,1151
1154,1155
1155,1156
1155,1157
1156,1157
1156,1158
1157,1158
1157,1159
1158,1159
1160,1161
1160,1162
1161,1162
1165,1166
1165,1167
1166,1167
1166,1168
1167,1168
1169,1170
1169,1171
1170,1171
1174,1175
1175,1176
1175,1177
1175,1178
1176,1177
1178,1179
1178,1180
1179,1180
1179,1181
1180,1181
1182,1183
1182,1184
1183,1184
1187,1188
1187,1189
1188,1189
1188,1190
1189,1190
1191,1192
1191,1193
1192,1193
1196,1197
1197,1198
1197,1199
1197,1200
1198,1199
1200,1201
1200,1202
1201,1202
1201,1203
1202,1203
1204,1205
1204,1206
1205,1206
1209,1210
1209,1211
1210,1211
1210,1212
1211,1212
1213,1214
1213,1215
1214,1215
1218,1219
1219,1220
1219,1221
1220,1221
1222,1223
1222,1224
1223,1224
1226,1227
1227,1228
1227,1229
1228,1229
1230,1231
1230,1232
1231,1232
1234,1235
1234,1236
1234,1237
1235,1236
1236,1237
1236,1238
1237,1238
1239,1240
1239,1241
1239,1242
1239,1243
1240,1241
1242,1243
1242,1244
1243,1244
1246,1247
1249,1250
1249,1251
1249,1252
1249,1253
1249,1254
1250,1251
1251,1252
1251,1253
1251,1254
1251,1255
1252,1253
1256,1257
1256,1258
1257,1258
1260,1261
1261,1262
1261,1263
1262,1263
1264,1265
1266,1267
1267,1268
1268,1269
1269,1270
1270,1271
1272,1273
1273,1274
1273,1275
1273,1276
1273,1277
1274,1275
1276,1277
1276,1278
1277,1278
1280,1281
1280,1282
1281,1282
1284,1285
1284,1286
1285,1286
1287,1288
1287,1289
1288,1289
1291,1292
1293,1294
1293,1295
1294,1295
1294,1296
1295,1296
1295,1297
1296,1297
1300,1301
1300,1302
1300,1303
1300,1304
1300,1305
1300,1306
1301,1302
1302,1303
1302,1304
1304,1305
1304,1306
1306,1307
1308,1309
1309,1310
1309,1311
1309,1312
1310,1311
1312,1313
1312,1314
1313,1314
1316,1317
1316,1318
1317,1318
1320,1321
1321,1322
1321,1323
1321,1324
1321,1325
1321,1326
1321,1327
1321,1328
1321,1329
1321,1330
1321,1331
1321,1332
1321,1333
1321,1334
1321,1335
1321,1336
1321,1337
1321,1338
1321,1339
1322,1323
1324,1325
1328,1329
1328,1330
1329,1330
1329,1331
1330,1331
1334,1335
1334,1336
1335,1336
1338,1339
1338,1340
1339,1340
1339,1341
1340,1341
1344,1345
1344,1346
1345,1346
1347,1348
1347,1349
1348,1349
1351,1352
1351,1353
1352,1353
1354,1355
1354,1356
1355,1356
1358,1359
1358,1360
1358,1361
1358,1362
1359,1360
1361,1362
1361,1363
1362,1363
1362,1364
1363,1364
1363,1365
1364,1365
1364,1366
1365,1366
1367,1368
1367,1369
1368,1369
1374,1375
1374,1376
1375,1376
1375,1377
1376,1377
1376,1378
1377,1378
1377,1379
1378,1379
1380,1381
1380,1382
1381,1382
1388,1389
1388,1390
1388,1391
1388,1392
1389,1390
1391,1392
1391,1393
1392,1393
1392,1394
1393,1394
1393,1395
1394,1395
1394,1396
1395,1396
1397,1398
1397,1399
1398,1399
1404,1405
1404,1406
1405,1406
1405,1407
1406,1407
1406,1408
1407,1408
1407,1409
1408,1409
1410,1411
1410,1412
1411,1412
1418,1419
1418,1420
1418,1421
1418,1422
1419,1420
1421,1422
1421,1423
1422,1423
1422,1424
1423,1424
1423,1425
1424,1425
1424,1426
1425,1426
1427,1428
1427,1429
1428,1429
1434,1435
1434,1436
1435,1436
1435,1437
1436,1437
1436,1438
1437,1438
1437,1439
1438,1439
1440,1441
1440,1442
1441,1442
1448,1449
1448,1450
1448,1451
1448,1452
1449,1450
1451,1452
1451,1453
1452,1453
1452,1454
1453,1454
1453,1455
1454,1455
1454,1456
1455,1456
1457,1458
1457,1459
1458,1459
1464,1465
1464,1466
1465,1466
1465,1467
1466,1467
1466,1468
1467,1468
1467,1469
1468,1469
1470,1471
1470,1472
1471,1472
1478,1479
1478,1480
1479,1480
1481,1482
1481,1483
1482,1483
1485,1486
1485,1487
1486,1487
1488,1489
1488,1490
1489,1490
1492,1493
1492,1494
1493,1494
1495,1496
1495,1497
1496,1497
1499,1500
1499,1501
1500,1501
1502,1503
1502,1504
1503,1504
1506,1507
1506,1508
1506,1509
1507,1508
1507,1509
1508,1509
1508,1510
1509,1510
1509,1511
1510,1511
1514,1515
1516,1517
1516,1518
1516,1519
1516,1520
1517,1518
1519,1520
1519,1521
1520,1521
1523,1524
1525,1526
1526,1527
1527,1528
1530,1531
1531,1532
1531,1533
1532,1533
1534,1535
1534,1536
1535,1536
1538,1539
1539,1540
1539,1541
1540,1541
1542,1543
1542,1544
1543,1544
1546,1547
1547,1548
1547,1549
1547,1550
1547,1551
1548,1549
1552,1553
1552,1554
1553,1554
1556,1557
1557,1558
1557,1559
1557,1560
1557,1561
1558,1559
1560,1561
1560,1562
1561,1562
1564,1565
1564,1566
1565,1566
1568,1569
1568,1570
1569,1570
1571,1572
1571,1573
1572,1573
1575,1576
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,25,27,30,32,35,37,39,42,44,45,48,50,51,53,54,58,60,65,66,67,72,73,74,77,78,83,84,85,91,93,101,102,106,107,108,114,116,119,120,124,125,126,133,134,138,139,140,146,148,151,152,156,157,158,163,164,165,170,171,175,176,177,181,182,183,186,187,192,193,194,200,202,208,209,210,215,221,222,223,225,230,233,237,238,239,243,247,248,249,254,256,257,261,262,263,266,270,271,272,275,277,281,283,285,289,290,291,299,300,301,303,309,310,311,313,318,319,320,323,324,329,330,331,337,339,343,346,349,350,353,354,359,360,361,365,366,367,370,371,376,377,378,384,386,390,392,395,396,400,405,408,410,411,418,419,424,425,430,431,434,436,439,442,443,446,447,449,452,457,458,463,466,467,472,475,478,479,484,485,486,490,493,494,498,501,502,505,506,509,512,513,519,520,521,526,527,531,534,535,541,543,547,550,551,554,555,559,560,565,568,569,571,575,578,579,580,584,587,588,589,593,596,599,600,601,607,610,611,619,622,623,624,625,626,634,637,638,639,640,641,646,648,652,655,658,661,662,667,668,672,675,676,677,682,683,687,690,691,692,696,699,700,703,705,710,715,718,719,720,721,726,729,730,735,738,739,740,741,743,745,750,753,756,759,760,763,766,767,772,775,776,779,782,785,786,789,792,793,795,797,802,803,804,808,811,814,815,818,821,822,828,831,832,833,837,840,841,842,846,849,852,853,856,859,860,864,867,868,871,872,876,879,880,883,884,888,891,892,895,898,899,903,906,909,910,911,915,918,919,923,925,928,931,932,934,938,941,944,945,946,951,953,958,961,962,964,969,972,973,976,979,980,984,989,992,995,996,999,1002,1003,1007,1011,1014,1015,1016,1020,1023,1024,1025,1029,1033,1036,1037,1038,1042,1045,1046,1047,1051,1055,1058,1059,1060,1064,1067,1068,1069,1073,1077,1080,1081,1082,1085,1088,1089,1093,1097,1100,1101,1102,1105,1108,1109,1113,1117,1120,1121,1122,1126,1129,1130,1131,1135,1139,1142,1143,1144,1148,1151,1152,1153,1159,1162,1163,1164,1168,1171,1172,1173,1177,1181,1184,1185,1186,1190,1193,1194,1195,1199,1203,1206,1207,1208,1212,1215,1216,1217,1221,1224,1225,1229,1232,1233,1238,1241,1244,1245,1247,1248,1253,1254,1255,1258,1259,1263,1265,1271,1275,1278,1279,1282,1283,1286,1289,1290,1292,1297,1298,1299,1303,1305,1307,1311,1314,1315,1318,1319,1323,1325,1326,1327,1331,1332,1333,1336,1337,1341,1342,1343,1346,1349,1350,1353,1356,1357,1360,1366,1369,1370,1371,1372,1373,1379,1382,1383,1384,1385,1386,1387,1390,1396,1399,1400,1401,1402,1403,1409,1412,1413,1414,1415,1416,1417,1420,1426,1429,1430,1431,1432,1433,1439,1442,1443,1444,1445,1446,1447,1450,1456,1459,1460,1461,1462,1463,1469,1472,1473,1474,1475,1476,1477,1480,1483,1484,1487,1490,1491,1494,1497,1498,1501,1504,1505,1511,1512,1513,1515,1518,1521,1522,1524,1528,1529,1533,1536,1537,1541,1544,1545,1549,1550,1551,1554,1555,1559,1562,1563,1566,1567,1570,1573,1574,1576
-----computeFrom-----
80,81
80,82
95,96
95,97
97,98
97,99
98,99
98,100
110,111
110,112
111,112
111,113
128,129
128,130
129,130
129,131
142,143
142,144
143,144
143,145
189,190
189,191
213,214
213,215
217,218
217,219
228,229
228,230
241,242
241,243
293,294
293,295
295,296
295,297
305,306
305,307
326,327
326,328
341,342
341,343
373,374
373,375
403,404
403,405
414,415
414,416
422,423
422,424
427,428
427,429
481,482
481,483
664,665
664,666
679,680
679,681
799,800
799,801
824,825
824,826
901,902
901,903
936,937
936,938
1155,1156
1155,1157
1236,1237
1236,1238
1507,1508
1507,1509
-----guardedBy-----
157,182
156,181
134,176
151,192
221,289
222,290
223,272
243,283
247,289
248,290
249,272
309,329
350,366
349,365
353,376
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies){	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
static int
ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
ring_entry
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
struct callattempt *tmp
struct callattempt
callattempt
*tmp
*
tmp
int *busies
int
*busies
*
busies
{	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
int res;
int res;
int
res
res
int status;
int status;
int
status
status
char tech[256];
char tech[256];
char
tech[256]
tech
[256]
256
char *location;
char *location;
char
*location
*
location
const char *macrocontext, *macroexten;
const char *macrocontext, *macroexten;
const char
*macrocontext
*
macrocontext
*macroexten
*
macroexten
enum ast_device_state newstate;
enum ast_device_state newstate;
enum ast_device_state
ast_device_state
newstate
newstate
if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
tmp->member->paused
tmp->member
tmp
tmp
member
paused
{		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
ast_debug(1, "%s paused, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s paused, can't receive call\n"
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime))
tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
tmp->lastqueue && tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
!tmp->lastqueue && qe->parent->wrapuptime
!tmp->lastqueue
tmp->lastqueue
tmp
tmp
lastqueue
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
(time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
time(NULL) - tmp->lastcall < qe->parent->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
{		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface)
ast_debug
ast_debug
1
"Wrapuptime not yet expired on queue %s for %s\n"
(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->name
tmp->lastqueue
tmp
tmp
lastqueue
name
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
!tmp->member->ringinuse
tmp->member->ringinuse
tmp->member
tmp
tmp
member
ringinuse
{		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}
check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
check_state_unknown
check_state_unknown
(tmp->member->status == AST_DEVICE_UNKNOWN)
tmp->member->status == AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}		}
newstate = ast_device_state(tmp->member->interface);
newstate = ast_device_state(tmp->member->interface)
newstate
newstate
ast_device_state(tmp->member->interface)
ast_device_state
ast_device_state
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}
newstate != tmp->member->status
newstate
newstate
tmp->member->status
tmp->member
tmp
tmp
member
status
{				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);			}
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Found a channel matching iterface %s while status was %s changed to %s\n"
tmp->member->interface
tmp->member
tmp
tmp
member
interface
ast_devstate2str(tmp->member->status)
ast_devstate2str
ast_devstate2str
tmp->member->status
tmp->member
tmp
tmp
member
status
ast_devstate2str(newstate)
ast_devstate2str
ast_devstate2str
newstate
newstate
ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface);
ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface)
ast_devstate_changed_literal
ast_devstate_changed_literal
newstate
newstate
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
(tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)
(tmp->member->status != AST_DEVICE_NOT_INUSE)
tmp->member->status != AST_DEVICE_NOT_INUSE
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
(tmp->member->status != AST_DEVICE_UNKNOWN)
tmp->member->status != AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
ast_debug(1, "%s in use, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s in use, can't receive call\n"
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
use_weight && compare_weight(qe->parent,tmp->member)
use_weight
use_weight
compare_weight(qe->parent,tmp->member)
compare_weight
compare_weight
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
{		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface)
ast_debug
ast_debug
1
"Priority queue delaying call to %s:%s\n"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_copy_string(tech, tmp->interface, sizeof(tech));
ast_copy_string(tech, tmp->interface, sizeof(tech))
ast_copy_string
ast_copy_string
tech
tech
tmp->interface
tmp
tmp
interface
sizeof(tech)
(tech)
tech
tech
if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}
(location = strchr(tech, '/'))
location = strchr(tech, '/')
location
location
strchr(tech, '/')
strchr
strchr
tech
tech
'/'
{		*location++ = '\0';	}
*location++ = '\0';
*location++ = '\0'
*location++
location++
location
location
'\0'
{		location = "";	}
location = "";
location = ""
location
location
""
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
tmp->chan
tmp
tmp
chan
ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
ast_request
ast_request
tech
tech
ast_channel_nativeformats(qe->chan)
ast_channel_nativeformats
ast_channel_nativeformats
qe->chan
qe
qe
chan
qe->chan
qe
qe
chan
location
location
&status
status
status
if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
!tmp->chan
tmp->chan
tmp
tmp
chan
{			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
ao2_lock(qe->parent);
ao2_lock(qe->parent)
ao2_lock
ao2_lock
qe->parent
qe
qe
parent
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
qe->parent->rrpos++;
qe->parent->rrpos++
qe->parent->rrpos
qe->parent
qe
qe
parent
rrpos
qe->linpos++;
qe->linpos++
qe->linpos
qe
qe
linpos
ao2_unlock(qe->parent);
ao2_unlock(qe->parent)
ao2_unlock
ao2_unlock
qe->parent
qe
qe
parent
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
qe->cancel_answered_elsewhere
qe
qe
cancel_answered_elsewhere
{		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
ast_channel_hangupcause_set
ast_channel_hangupcause_set
tmp->chan
tmp
tmp
chan
AST_CAUSE_ANSWERED_ELSEWHERE
AST_CAUSE_ANSWERED_ELSEWHERE
ast_channel_appl_set(tmp->chan, "AppQueue");
ast_channel_appl_set(tmp->chan, "AppQueue")
ast_channel_appl_set
ast_channel_appl_set
tmp->chan
tmp
tmp
chan
"AppQueue"
ast_channel_data_set(tmp->chan, "(Outgoing Line)");
ast_channel_data_set(tmp->chan, "(Outgoing Line)")
ast_channel_data_set
ast_channel_data_set
tmp->chan
tmp
tmp
chan
"(Outgoing Line)"
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)))
memset
memset
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
0
sizeof(*ast_channel_whentohangup(tmp->chan))
(*ast_channel_whentohangup(tmp->chan))
*ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
!ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number
ast_channel_caller(tmp->chan)->id
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
id
number
valid
{		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
{			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		}
struct ast_party_caller caller;
struct ast_party_caller caller;
struct ast_party_caller
ast_party_caller
caller
caller
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan))
ast_party_caller_set_init
ast_party_caller_set_init
&caller
caller
caller
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
caller.id = ast_channel_connected(qe->chan)->id;
caller.id = ast_channel_connected(qe->chan)->id
caller.id
caller
caller
id
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
caller.ani = ast_channel_connected(qe->chan)->ani;
caller.ani = ast_channel_connected(qe->chan)->ani
caller.ani
caller
caller
ani
ast_channel_connected(qe->chan)->ani
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
ani
ast_channel_set_caller_event(tmp->chan, &caller, NULL);
ast_channel_set_caller_event(tmp->chan, &caller, NULL)
ast_channel_set_caller_event
ast_channel_set_caller_event
tmp->chan
tmp
tmp
chan
&caller
caller
caller
NULL
NULL
if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero
ast_strlen_zero
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
{			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		}
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
NULL
NULL
NULL
NULL
if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero
ast_strlen_zero
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
{			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL);
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
NULL
NULL
NULL
NULL
tmp->dial_callerid_absent = 1;
tmp->dial_callerid_absent = 1
tmp->dial_callerid_absent
tmp
tmp
dial_callerid_absent
1
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan))
ast_party_redirecting_copy
ast_party_redirecting_copy
ast_channel_redirecting(tmp->chan)
ast_channel_redirecting
ast_channel_redirecting
tmp->chan
tmp
tmp
chan
ast_channel_redirecting(qe->chan)
ast_channel_redirecting
ast_channel_redirecting
qe->chan
qe
qe
chan
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(tmp->chan)->transit_network_select
ast_channel_dialed(tmp->chan)
ast_channel_dialed
ast_channel_dialed
tmp->chan
tmp
tmp
chan
transit_network_select
ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
transit_network_select
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan))
ast_connected_line_copy_from_caller
ast_connected_line_copy_from_caller
ast_channel_connected(tmp->chan)
ast_channel_connected
ast_channel_connected
tmp->chan
tmp
tmp
chan
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
ast_channel_inherit_variables(qe->chan, tmp->chan);
ast_channel_inherit_variables(qe->chan, tmp->chan)
ast_channel_inherit_variables
ast_channel_inherit_variables
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_datastore_inherit(qe->chan, tmp->chan);
ast_channel_datastore_inherit(qe->chan, tmp->chan)
ast_channel_datastore_inherit
ast_channel_datastore_inherit
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan))
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe(qe->chan)
ast_channel_adsicpe
ast_channel_adsicpe
qe->chan
qe
qe
chan
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
macrocontext
macrocontext
pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_CONTEXT"
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext)
ast_channel_dialcontext_set
ast_channel_dialcontext_set
tmp->chan
tmp
tmp
chan
ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext
ast_strlen_zero(macrocontext)
ast_strlen_zero
ast_strlen_zero
macrocontext
macrocontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
macrocontext
macrocontext
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
macroexten
macroexten
pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_EXTEN"
if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
!ast_strlen_zero(macroexten)
ast_strlen_zero(macroexten)
ast_strlen_zero
ast_strlen_zero
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, macroexten);	}
ast_channel_exten_set(tmp->chan, macroexten);
ast_channel_exten_set(tmp->chan, macroexten)
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan))
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_isset_unanswered()
ast_cdr_isset_unanswered
ast_cdr_isset_unanswered
{		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan))
ast_cdr_setdestchan
ast_cdr_setdestchan
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->clid
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
clid
ast_channel_cdr(qe->chan)->clid
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
clid
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->channel
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
channel
ast_channel_cdr(qe->chan)->channel
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
channel
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->src
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
src
ast_channel_cdr(qe->chan)->src
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
src
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dst
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dst
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dcontext
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dcontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastapp
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastapp
ast_channel_cdr(qe->chan)->lastapp
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastapp
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastdata
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastdata
ast_channel_cdr(qe->chan)->lastdata
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastdata
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(tmp->chan)->amaflags
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
amaflags
ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
amaflags
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->accountcode
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
accountcode
ast_channel_cdr(qe->chan)->accountcode
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
accountcode
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->userfield
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
userfield
ast_channel_cdr(qe->chan)->userfield
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
userfield
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
(res = ast_call(tmp->chan, location, 0))
res = ast_call(tmp->chan, location, 0)
res
res
ast_call(tmp->chan, location, 0)
ast_call
ast_call
tmp->chan
tmp
tmp
chan
location
location
0
{		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	}
ast_verb(3, "Couldn't call %s\n", tmp->interface);
ast_verb(3, "Couldn't call %s\n", tmp->interface)
ast_verb
ast_verb
3
"Couldn't call %s\n"
tmp->interface
tmp
tmp
interface
do_hang(tmp);
do_hang(tmp)
do_hang
do_hang
tmp
tmp
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 0;
0
if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
{		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
char vars[2048];
char vars[2048];
char
vars[2048]
vars
[2048]
2048
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "")
manager_event
manager_event
EVENT_FLAG_AGENT
EVENT_FLAG_AGENT
"AgentCalled"
"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->member->membername
tmp->member
tmp
tmp
member
membername
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.number.valid
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
valid
ast_channel_caller(qe->chan)->id.number.str
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.name.valid
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
valid
ast_channel_caller(qe->chan)->id.name.str
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
ast_channel_connected(qe->chan)->id.number.str
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.name.valid
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
valid
ast_channel_connected(qe->chan)->id.name.str
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
str
"unknown"
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
ast_channel_priority(qe->chan)
ast_channel_priority
ast_channel_priority
qe->chan
qe
qe
chan
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : ""
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
QUEUE_EVENT_VARIABLES
QUEUE_EVENT_VARIABLES
vars2manager(qe->chan, vars, sizeof(vars))
vars2manager
vars2manager
qe->chan
qe
qe
chan
vars
vars
sizeof(vars)
(vars)
vars
vars
""
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
ast_verb(3, "Called %s\n", tmp->interface);
ast_verb(3, "Called %s\n", tmp->interface)
ast_verb
ast_verb
3
"Called %s\n"
tmp->interface
tmp
tmp
interface
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 1;
1
-----joern-----
(269,6,0)
(113,666,0)
(482,663,0)
(644,864,0)
(647,781,0)
(671,572,0)
(51,14,0)
(730,706,0)
(24,928,0)
(700,602,0)
(712,851,0)
(788,791,0)
(613,930,0)
(69,461,0)
(638,602,0)
(888,260,0)
(508,661,0)
(65,718,0)
(725,874,0)
(172,247,0)
(684,478,0)
(948,361,0)
(287,205,0)
(601,352,0)
(198,178,0)
(291,180,0)
(406,512,0)
(394,465,0)
(368,46,0)
(692,462,0)
(330,826,0)
(897,334,0)
(238,247,0)
(131,484,0)
(748,223,0)
(402,664,0)
(667,274,0)
(430,208,0)
(481,951,0)
(434,718,0)
(37,489,0)
(315,108,0)
(362,472,0)
(951,481,0)
(189,206,0)
(684,398,0)
(789,515,0)
(801,614,0)
(133,140,0)
(610,506,0)
(225,247,0)
(917,386,0)
(18,527,0)
(20,602,0)
(403,501,0)
(257,291,0)
(533,602,0)
(690,138,0)
(769,76,0)
(146,351,0)
(206,517,0)
(367,16,0)
(585,88,0)
(634,423,0)
(682,172,0)
(787,513,0)
(109,871,0)
(772,180,0)
(505,140,0)
(263,212,0)
(670,247,0)
(778,515,0)
(461,69,0)
(853,404,0)
(797,249,0)
(624,926,0)
(521,40,0)
(553,428,0)
(886,103,0)
(349,515,0)
(138,800,0)
(90,469,0)
(40,170,0)
(223,748,0)
(159,772,0)
(274,667,0)
(581,56,0)
(798,150,0)
(718,247,0)
(87,79,0)
(283,785,0)
(843,247,0)
(804,122,0)
(705,328,0)
(547,349,0)
(822,385,0)
(768,649,0)
(18,481,0)
(810,371,0)
(49,247,0)
(890,697,0)
(176,799,0)
(494,602,0)
(632,527,0)
(454,853,0)
(582,376,0)
(78,648,0)
(498,349,0)
(531,319,0)
(754,333,0)
(907,180,0)
(609,130,0)
(484,180,0)
(521,843,0)
(47,410,0)
(116,138,0)
(610,8,0)
(274,247,0)
(914,343,0)
(104,18,0)
(854,776,0)
(11,247,0)
(533,736,0)
(581,103,0)
(933,930,0)
(340,148,0)
(283,84,0)
(723,59,0)
(264,518,0)
(316,180,0)
(382,184,0)
(259,247,0)
(52,66,0)
(532,527,0)
(479,65,0)
(871,109,0)
(464,579,0)
(15,654,0)
(61,843,0)
(587,856,0)
(762,37,0)
(614,801,0)
(708,642,0)
(678,149,0)
(558,602,0)
(18,263,0)
(588,387,0)
(911,598,0)
(18,652,0)
(515,602,0)
(98,130,0)
(348,339,0)
(551,18,0)
(626,858,0)
(66,52,0)
(380,624,0)
(937,58,0)
(898,219,0)
(925,805,0)
(231,429,0)
(459,247,0)
(628,809,0)
(8,610,0)
(1,180,0)
(379,802,0)
(462,247,0)
(270,952,0)
(227,925,0)
(483,343,0)
(324,791,0)
(336,668,0)
(917,169,0)
(521,616,0)
(914,615,0)
(118,410,0)
(56,854,0)
(837,374,0)
(631,463,0)
(426,152,0)
(122,435,0)
(402,840,0)
(649,515,0)
(365,608,0)
(721,736,0)
(453,706,0)
(625,167,0)
(659,180,0)
(769,149,0)
(894,860,0)
(186,247,0)
(259,515,0)
(399,600,0)
(534,632,0)
(384,272,0)
(825,838,0)
(164,487,0)
(942,778,0)
(130,609,0)
(157,947,0)
(435,122,0)
(372,304,0)
(143,602,0)
(947,157,0)
(194,280,0)
(771,247,0)
(220,180,0)
(284,32,0)
(0,606,0)
(84,283,0)
(369,550,0)
(604,572,0)
(799,176,0)
(681,601,0)
(736,180,0)
(741,840,0)
(395,273,0)
(586,907,0)
(516,532,0)
(112,329,0)
(821,247,0)
(513,45,0)
(599,687,0)
(488,580,0)
(715,72,0)
(915,904,0)
(755,606,0)
(836,479,0)
(851,18,0)
(31,602,0)
(154,663,0)
(134,789,0)
(475,879,0)
(897,843,0)
(916,428,0)
(489,34,0)
(856,587,0)
(777,78,0)
(560,256,0)
(295,272,0)
(200,247,0)
(811,1,0)
(249,515,0)
(333,247,0)
(148,247,0)
(188,515,0)
(191,601,0)
(532,691,0)
(882,711,0)
(841,289,0)
(269,123,0)
(565,238,0)
(889,128,0)
(374,837,0)
(53,184,0)
(781,180,0)
(904,915,0)
(251,393,0)
(909,247,0)
(302,656,0)
(900,88,0)
(178,247,0)
(527,532,0)
(88,18,0)
(611,849,0)
(127,909,0)
(861,155,0)
(282,84,0)
(897,553,0)
(527,632,0)
(752,296,0)
(594,220,0)
(113,413,0)
(693,208,0)
(935,926,0)
(651,139,0)
(460,683,0)
(490,881,0)
(100,633,0)
(18,28,0)
(62,184,0)
(778,350,0)
(188,21,0)
(706,247,0)
(4,139,0)
(776,247,0)
(794,283,0)
(548,858,0)
(359,932,0)
(286,469,0)
(903,631,0)
(696,938,0)
(664,402,0)
(507,312,0)
(338,330,0)
(915,504,0)
(879,475,0)
(924,453,0)
(568,179,0)
(520,180,0)
(2,659,0)
(388,651,0)
(574,572,0)
(37,0,0)
(689,181,0)
(917,106,0)
(123,614,0)
(9,408,0)
(163,867,0)
(897,40,0)
(299,280,0)
(641,20,0)
(172,597,0)
(63,140,0)
(298,334,0)
(72,371,0)
(74,771,0)
(685,400,0)
(805,925,0)
(23,506,0)
(292,809,0)
(341,782,0)
(707,383,0)
(187,611,0)
(661,508,0)
(396,247,0)
(76,515,0)
(387,523,0)
(273,247,0)
(785,283,0)
(814,736,0)
(580,18,0)
(415,179,0)
(555,416,0)
(456,29,0)
(912,247,0)
(226,212,0)
(475,109,0)
(880,172,0)
(873,103,0)
(18,580,0)
(796,509,0)
(182,539,0)
(385,703,0)
(76,247,0)
(208,693,0)
(485,758,0)
(484,806,0)
(173,180,0)
(7,634,0)
(901,928,0)
(620,869,0)
(912,515,0)
(879,928,0)
(1,811,0)
(137,180,0)
(924,26,0)
(156,602,0)
(791,247,0)
(674,691,0)
(353,130,0)
(13,419,0)
(557,541,0)
(532,516,0)
(852,180,0)
(439,71,0)
(800,515,0)
(18,851,0)
(624,50,0)
(713,261,0)
(202,652,0)
(225,931,0)
(325,648,0)
(846,541,0)
(553,350,0)
(817,413,0)
(289,355,0)
(273,515,0)
(33,137,0)
(542,487,0)
(208,180,0)
(262,855,0)
(952,270,0)
(357,230,0)
(583,167,0)
(756,200,0)
(622,855,0)
(806,633,0)
(564,256,0)
(693,838,0)
(280,194,0)
(527,18,0)
(859,156,0)
(464,897,0)
(556,786,0)
(875,187,0)
(118,805,0)
(640,50,0)
(375,786,0)
(859,247,0)
(788,486,0)
(135,765,0)
(103,602,0)
(639,789,0)
(608,652,0)
(162,113,0)
(844,375,0)
(355,289,0)
(42,857,0)
(341,465,0)
(219,523,0)
(828,403,0)
(204,474,0)
(949,560,0)
(361,180,0)
(440,52,0)
(151,50,0)
(724,838,0)
(812,648,0)
(891,894,0)
(54,772,0)
(621,211,0)
(476,49,0)
(650,403,0)
(222,685,0)
(623,186,0)
(477,244,0)
(579,601,0)
(462,515,0)
(20,641,0)
(20,698,0)
(747,398,0)
(326,461,0)
(346,579,0)
(205,247,0)
(823,448,0)
(691,532,0)
(480,330,0)
(432,58,0)
(11,351,0)
(0,460,0)
(215,268,0)
(474,247,0)
(533,150,0)
(521,165,0)
(811,149,0)
(719,18,0)
(786,375,0)
(793,947,0)
(67,78,0)
(892,518,0)
(45,207,0)
(3,180,0)
(772,828,0)
(634,219,0)
(763,524,0)
(826,18,0)
(143,259,0)
(504,597,0)
(855,180,0)
(499,6,0)
(871,756,0)
(315,308,0)
(321,437,0)
(273,631,0)
(36,817,0)
(328,247,0)
(722,60,0)
(464,59,0)
(140,247,0)
(510,912,0)
(6,510,0)
(130,247,0)
(421,520,0)
(928,879,0)
(646,949,0)
(220,129,0)
(833,425,0)
(104,32,0)
(491,224,0)
(235,602,0)
(563,514,0)
(109,184,0)
(450,440,0)
(685,368,0)
(10,173,0)
(215,867,0)
(169,861,0)
(153,247,0)
(311,141,0)
(549,319,0)
(573,390,0)
(260,180,0)
(811,396,0)
(294,735,0)
(238,876,0)
(144,897,0)
(62,524,0)
(640,539,0)
(76,769,0)
(5,49,0)
(559,186,0)
(88,247,0)
(893,917,0)
(289,304,0)
(84,247,0)
(554,938,0)
(479,836,0)
(177,155,0)
(122,515,0)
(589,698,0)
(110,589,0)
(240,851,0)
(173,10,0)
(406,802,0)
(909,515,0)
(518,515,0)
(904,247,0)
(837,247,0)
(523,219,0)
(720,907,0)
(366,631,0)
(607,578,0)
(840,402,0)
(65,479,0)
(946,228,0)
(614,123,0)
(347,220,0)
(514,242,0)
(419,709,0)
(828,772,0)
(496,3,0)
(867,215,0)
(645,176,0)
(923,76,0)
(185,532,0)
(60,180,0)
(734,881,0)
(826,330,0)
(791,788,0)
(432,184,0)
(50,624,0)
(57,339,0)
(717,462,0)
(831,781,0)
(179,247,0)
(21,406,0)
(732,602,0)
(260,87,0)
(462,692,0)
(781,886,0)
(373,904,0)
(792,280,0)
(401,575,0)
(230,240,0)
(788,114,0)
(249,247,0)
(572,515,0)
(355,531,0)
(685,586,0)
(50,640,0)
(89,550,0)
(539,640,0)
(677,548,0)
(800,138,0)
(550,369,0)
(693,410,0)
(513,787,0)
(619,927,0)
(293,56,0)
(790,918,0)
(666,113,0)
(37,843,0)
(661,199,0)
(56,103,0)
(838,247,0)
(18,88,0)
(487,247,0)
(616,482,0)
(153,700,0)
(659,470,0)
(457,912,0)
(728,925,0)
(75,16,0)
(69,765,0)
(703,247,0)
(28,789,0)
(868,437,0)
(601,247,0)
(608,365,0)
(590,243,0)
(451,436,0)
(731,869,0)
(595,914,0)
(290,748,0)
(212,263,0)
(504,915,0)
(546,8,0)
(256,180,0)
(196,225,0)
(771,298,0)
(687,829,0)
(767,545,0)
(567,853,0)
(275,780,0)
(304,289,0)
(234,173,0)
(916,420,0)
(883,777,0)
(463,416,0)
(584,461,0)
(82,334,0)
(472,247,0)
(186,276,0)
(737,89,0)
(367,487,0)
(12,189,0)
(922,11,0)
(418,668,0)
(528,595,0)
(521,334,0)
(439,180,0)
(703,385,0)
(419,180,0)
(201,773,0)
(654,796,0)
(869,620,0)
(276,186,0)
(845,402,0)
(779,602,0)
(329,369,0)
(821,847,0)
(114,809,0)
(414,84,0)
(902,709,0)
(649,247,0)
(339,348,0)
(508,180,0)
(878,467,0)
(312,247,0)
(420,520,0)
(603,607,0)
(186,515,0)
(258,795,0)
(618,706,0)
(809,114,0)
(436,451,0)
(593,18,0)
(741,180,0)
(127,561,0)
(470,887,0)
(370,165,0)
(181,719,0)
(228,247,0)
(468,274,0)
(636,649,0)
(64,843,0)
(802,406,0)
(827,654,0)
(897,165,0)
(37,410,0)
(218,243,0)
(176,515,0)
(570,166,0)
(44,133,0)
(244,477,0)
(465,247,0)
(926,624,0)
(714,685,0)
(197,1,0)
(429,906,0)
(245,501,0)
(400,180,0)
(358,60,0)
(739,400,0)
(230,570,0)
(709,419,0)
(503,787,0)
(899,69,0)
(352,578,0)
(881,490,0)
(918,712,0)
(656,247,0)
(243,180,0)
(909,127,0)
(478,498,0)
(910,212,0)
(281,776,0)
(668,180,0)
(509,796,0)
(702,800,0)
(544,679,0)
(275,504,0)
(34,410,0)
(161,474,0)
(766,352,0)
(850,312,0)
(654,247,0)
(312,515,0)
(53,692,0)
(928,180,0)
(693,629,0)
(120,593,0)
(631,273,0)
(673,215,0)
(70,907,0)
(539,180,0)
(694,150,0)
(773,515,0)
(632,331,0)
(392,539,0)
(78,777,0)
(158,228,0)
(150,533,0)
(189,247,0)
(519,486,0)
(291,700,0)
(586,685,0)
(343,818,0)
(65,408,0)
(869,748,0)
(884,390,0)
(80,701,0)
(19,89,0)
(124,111,0)
(615,914,0)
(99,581,0)
(577,410,0)
(386,531,0)
(411,602,0)
(872,803,0)
(569,668,0)
(200,515,0)
(770,714,0)
(104,930,0)
(303,851,0)
(787,385,0)
(789,28,0)
(865,155,0)
(170,512,0)
(127,602,0)
(501,858,0)
(866,181,0)
(178,486,0)
(886,781,0)
(183,508,0)
(649,268,0)
(214,463,0)
(949,382,0)
(334,298,0)
(72,512,0)
(941,514,0)
(627,824,0)
(596,153,0)
(68,482,0)
(862,29,0)
(140,133,0)
(337,156,0)
(304,247,0)
(834,387,0)
(255,259,0)
(344,437,0)
(938,180,0)
(425,32,0)
(706,515,0)
(914,711,0)
(929,104,0)
(803,410,0)
(92,388,0)
(641,515,0)
(664,512,0)
(862,502,0)
(611,187,0)
(729,200,0)
(229,436,0)
(56,157,0)
(205,515,0)
(48,670,0)
(656,515,0)
(445,859,0)
(902,425,0)
(776,515,0)
(117,531,0)
(824,180,0)
(367,602,0)
(919,199,0)
(616,247,0)
(695,80,0)
(854,56,0)
(924,602,0)
(440,180,0)
(847,821,0)
(939,256,0)
(241,874,0)
(336,856,0)
(662,786,0)
(103,886,0)
(857,156,0)
(921,837,0)
(686,684,0)
(309,249,0)
(524,62,0)
(851,240,0)
(424,415,0)
(927,128,0)
(55,316,0)
(934,519,0)
(228,711,0)
(552,315,0)
(699,791,0)
(77,34,0)
(79,799,0)
(200,756,0)
(895,304,0)
(141,247,0)
(345,587,0)
(167,247,0)
(652,18,0)
(864,148,0)
(631,368,0)
(422,179,0)
(349,498,0)
(908,261,0)
(169,917,0)
(829,687,0)
(593,272,0)
(765,652,0)
(744,871,0)
(371,72,0)
(408,65,0)
(448,111,0)
(455,575,0)
(660,312,0)
(849,161,0)
(239,393,0)
(301,472,0)
(376,180,0)
(348,249,0)
(278,909,0)
(656,877,0)
(855,168,0)
(142,462,0)
(6,269,0)
(548,18,0)
(504,275,0)
(560,949,0)
(945,703,0)
(712,918,0)
(297,398,0)
(526,137,0)
(878,413,0)
(579,578,0)
(487,367,0)
(448,247,0)
(18,719,0)
(489,247,0)
(107,152,0)
(444,8,0)
(509,742,0)
(306,435,0)
(85,741,0)
(912,510,0)
(438,478,0)
(396,515,0)
(848,951,0)
(363,602,0)
(433,859,0)
(459,515,0)
(166,316,0)
(719,181,0)
(190,165,0)
(698,589,0)
(81,331,0)
(906,524,0)
(224,128,0)
(161,643,0)
(749,122,0)
(685,714,0)
(711,228,0)
(813,609,0)
(951,180,0)
(341,477,0)
(889,817,0)
(382,949,0)
(285,909,0)
(680,339,0)
(18,548,0)
(738,947,0)
(49,777,0)
(441,794,0)
(121,423,0)
(39,240,0)
(30,273,0)
(45,513,0)
(212,180,0)
(396,811,0)
(244,600,0)
(697,126,0)
(691,180,0)
(38,244,0)
(219,634,0)
(897,0,0)
(881,168,0)
(818,343,0)
(716,416,0)
(600,244,0)
(932,631,0)
(270,494,0)
(644,531,0)
(170,199,0)
(925,180,0)
(94,365,0)
(780,742,0)
(571,773,0)
(383,432,0)
(642,597,0)
(780,472,0)
(108,735,0)
(320,835,0)
(591,459,0)
(139,247,0)
(529,260,0)
(605,933,0)
(333,515,0)
(515,685,0)
(550,89,0)
(377,143,0)
(386,917,0)
(836,545,0)
(174,777,0)
(66,407,0)
(298,771,0)
(398,297,0)
(788,361,0)
(543,886,0)
(443,225,0)
(211,578,0)
(887,470,0)
(18,593,0)
(706,453,0)
(856,216,0)
(651,388,0)
(86,18,0)
(437,344,0)
(644,106,0)
(773,310,0)
(209,656,0)
(415,917,0)
(726,208,0)
(332,633,0)
(740,484,0)
(633,806,0)
(753,602,0)
(944,795,0)
(521,0,0)
(930,104,0)
(313,602,0)
(887,360,0)
(8,180,0)
(493,847,0)
(225,515,0)
(621,413,0)
(572,247,0)
(21,188,0)
(374,602,0)
(423,121,0)
(167,927,0)
(369,329,0)
(452,519,0)
(592,188,0)
(524,906,0)
(171,878,0)
(897,616,0)
(16,180,0)
(885,489,0)
(856,336,0)
(635,703,0)
(538,376,0)
(356,344,0)
(631,932,0)
(655,904,0)
(453,924,0)
(469,180,0)
(600,180,0)
(237,711,0)
(364,274,0)
(59,502,0)
(175,137,0)
(60,105,0)
(449,460,0)
(668,336,0)
(115,917,0)
(854,602,0)
(474,161,0)
(570,230,0)
(428,184,0)
(501,403,0)
(806,484,0)
(917,415,0)
(838,693,0)
(861,169,0)
(521,553,0)
(18,826,0)
(80,180,0)
(356,933,0)
(354,1,0)
(389,189,0)
(72,459,0)
(850,53,0)
(805,118,0)
(876,238,0)
(265,741,0)
(150,247,0)
(308,315,0)
(252,396,0)
(233,818,0)
(375,479,0)
(950,602,0)
(26,924,0)
(205,308,0)
(58,432,0)
(746,494,0)
(506,57,0)
(425,902,0)
(123,269,0)
(598,247,0)
(417,188,0)
(305,259,0)
(216,3,0)
(523,387,0)
(122,247,0)
(381,602,0)
(133,149,0)
(66,333,0)
(784,238,0)
(801,180,0)
(32,425,0)
(540,223,0)
(268,649,0)
(350,553,0)
(145,801,0)
(572,671,0)
(795,247,0)
(938,26,0)
(416,463,0)
(168,855,0)
(758,531,0)
(218,835,0)
(89,180,0)
(328,629,0)
(261,247,0)
(56,581,0)
(261,195,0)
(629,328,0)
(153,515,0)
(195,126,0)
(14,918,0)
(79,602,0)
(464,224,0)
(242,514,0)
(18,10,0)
(152,180,0)
(530,821,0)
(510,6,0)
(776,854,0)
(577,469,0)
(464,697,0)
(187,180,0)
(248,651,0)
(701,80,0)
(240,230,0)
(16,367,0)
(279,876,0)
(105,849,0)
(733,659,0)
(807,602,0)
(851,712,0)
(52,440,0)
(648,180,0)
(351,11,0)
(224,167,0)
(775,276,0)
(595,247,0)
(423,634,0)
(442,291,0)
(688,58,0)
(156,859,0)
(685,463,0)
(137,175,0)
(310,773,0)
(479,375,0)
(518,688,0)
(458,148,0)
(26,938,0)
(641,247,0)
(79,87,0)
(97,567,0)
(561,180,0)
(545,296,0)
(32,104,0)
(518,247,0)
(757,322,0)
(819,3,0)
(521,486,0)
(318,439,0)
(815,440,0)
(166,570,0)
(387,180,0)
(268,215,0)
(597,172,0)
(847,758,0)
(280,180,0)
(168,881,0)
(685,515,0)
(188,247,0)
(931,494,0)
(108,315,0)
(83,333,0)
(310,329,0)
(207,45,0)
(35,243,0)
(897,602,0)
(490,138,0)
(743,439,0)
(562,368,0)
(466,712,0)
(465,341,0)
(129,602,0)
(710,419,0)
(18,104,0)
(800,247,0)
(155,861,0)
(531,355,0)
(748,869,0)
(335,589,0)
(567,247,0)
(87,260,0)
(403,828,0)
(10,18,0)
(809,247,0)
(829,383,0)
(533,667,0)
(331,632,0)
(808,328,0)
(350,778,0)
(765,69,0)
(672,161,0)
(652,608,0)
(836,509,0)
(835,218,0)
(860,894,0)
(863,771,0)
(727,615,0)
(517,62,0)
(818,180,0)
(500,860,0)
(308,205,0)
(18,149,0)
(918,14,0)
(840,741,0)
(820,45,0)
(952,242,0)
(464,521,0)
(361,788,0)
(824,331,0)
(852,816,0)
(406,21,0)
(136,785,0)
(598,607,0)
(148,864,0)
(874,180,0)
(758,847,0)
(157,56,0)
(96,561,0)
(658,465,0)
(905,602,0)
(470,659,0)
(390,180,0)
(101,40,0)
(210,356,0)
(536,818,0)
(296,545,0)
(175,14,0)
(700,291,0)
(711,126,0)
(405,141,0)
(437,180,0)
(860,180,0)
(697,261,0)
(105,60,0)
(494,270,0)
(839,173,0)
(242,952,0)
(609,128,0)
(670,207,0)
(322,382,0)
(461,584,0)
(459,72,0)
(160,602,0)
(344,356,0)
(323,76,0)
(525,80,0)
(511,161,0)
(789,247,0)
(383,829,0)
(138,490,0)
(947,180,0)
(393,477,0)
(165,664,0)
(465,515,0)
(283,794,0)
(391,607,0)
(17,776,0)
(630,567,0)
(404,853,0)
(487,515,0)
(872,413,0)
(926,548,0)
(267,641,0)
(711,914,0)
(519,141,0)
(378,872,0)
(587,345,0)
(334,332,0)
(933,356,0)
(913,837,0)
(606,463,0)
(147,40,0)
(259,143,0)
(409,516,0)
(742,509,0)
(877,656,0)
(176,247,0)
(735,108,0)
(849,105,0)
(59,448,0)
(606,0,0)
(71,439,0)
(275,876,0)
(365,835,0)
(514,515,0)
(835,365,0)
(114,788,0)
(109,475,0)
(73,341,0)
(216,856,0)
(138,246,0)
(756,871,0)
(206,189,0)
(141,519,0)
(816,852,0)
(498,478,0)
(272,593,0)
(940,396,0)
(95,133,0)
(750,508,0)
(535,600,0)
(57,184,0)
(736,533,0)
(575,163,0)
(774,205,0)
(612,16,0)
(179,415,0)
(545,836,0)
(704,361,0)
(473,805,0)
(777,49,0)
(637,602,0)
(742,780,0)
(679,388,0)
(907,586,0)
(629,693,0)
(698,20,0)
(243,218,0)
(429,180,0)
(780,275,0)
(469,577,0)
(272,247,0)
(213,349,0)
(91,801,0)
(29,862,0)
(412,644,0)
(139,651,0)
(497,429,0)
(250,902,0)
(803,872,0)
(427,861,0)
(477,602,0)
(786,180,0)
(53,850,0)
(688,518,0)
(342,778,0)
(431,608,0)
(620,390,0)
(27,561,0)
(385,787,0)
(597,642,0)
(648,78,0)
(332,602,0)
(333,66,0)
(853,567,0)
(111,502,0)
(931,225,0)
(843,515,0)
(936,200,0)
(657,18,0)
(300,916,0)
(316,166,0)
(666,486,0)
(211,621,0)
(837,515,0)
(29,413,0)
(785,180,0)
(718,65,0)
(576,386,0)
(858,501,0)
(943,718,0)
(520,420,0)
(522,598,0)
(773,247,0)
(317,915,0)
(665,621,0)
(28,18,0)
(759,821,0)
(633,332,0)
(400,685,0)
(132,951,0)
(842,296,0)
(288,520,0)
(795,615,0)
(514,247,0)
(217,687,0)
(451,410,0)
(382,322,0)
(653,139,0)
(745,436,0)
(331,824,0)
(464,37,0)
(390,620,0)
(266,475,0)
(481,18,0)
(156,857,0)
(25,521,0)
(584,874,0)
(3,216,0)
(735,71,0)
(796,654,0)
(181,180,0)
(783,685,0)
(236,207,0)
(57,506,0)
(71,735,0)
(687,180,0)
(276,602,0)
(163,575,0)
(393,251,0)
(467,126,0)
(269,184,0)
(675,517,0)
(14,175,0)
(877,322,0)
(435,397,0)
(906,429,0)
(575,180,0)
(492,459,0)
(771,515,0)
(474,515,0)
(537,616,0)
(249,348,0)
(43,11,0)
(761,912,0)
(152,580,0)
(271,316,0)
(432,383,0)
(207,670,0)
(517,206,0)
(495,670,0)
(652,765,0)
(327,644,0)
(277,864,0)
(830,123,0)
(388,679,0)
(125,609,0)
(232,368,0)
(349,247,0)
(192,187,0)
(436,180,0)
(263,18,0)
(896,512,0)
(832,400,0)
(709,902,0)
(41,602,0)
(369,184,0)
(777,502,0)
(751,490,0)
(339,57,0)
(254,616,0)
(129,220,0)
(597,504,0)
(307,448,0)
(447,553,0)
(867,163,0)
(874,584,0)
(561,127,0)
(617,595,0)
(589,180,0)
(700,153,0)
(478,684,0)
(930,933,0)
(296,180,0)
(194,149,0)
(849,611,0)
(858,548,0)
(199,661,0)
(161,849,0)
(446,477,0)
(870,785,0)
(566,800,0)
(467,878,0)
(314,489,0)
(119,176,0)
(312,850,0)
(676,860,0)
(256,560,0)
(778,247,0)
(867,184,0)
(330,180,0)
(667,533,0)
(221,852,0)
(509,836,0)
(398,684,0)
(817,889,0)
(428,916,0)
(108,184,0)
(58,688,0)
(580,152,0)
(548,926,0)
(189,515,0)
(199,170,0)
(692,53,0)
(472,780,0)
(920,824,0)
(155,247,0)
(607,598,0)
(343,914,0)
(193,691,0)
(22,527,0)
(253,602,0)
(799,79,0)
(329,310,0)
(322,877,0)
(876,275,0)
(506,610,0)
(615,795,0)
(764,641,0)
(864,644,0)
(760,474,0)
(102,852,0)
(494,931,0)
(669,195,0)
(471,153,0)
(420,916,0)
(816,410,0)
(203,570,0)
(914,595,0)
(62,517,0)
(281,103,1)
(906,429,1)
(377,259,1)
(749,376,1)
(616,537,1)
(938,180,1)
(356,344,1)
(83,251,1)
(839,234,1)
(315,552,1)
(750,40,1)
(567,630,1)
(679,544,1)
(298,771,1)
(428,916,1)
(772,180,1)
(318,315,1)
(167,247,1)
(521,40,1)
(485,531,1)
(560,256,1)
(22,632,1)
(52,440,1)
(926,935,1)
(90,286,1)
(914,615,1)
(254,345,1)
(64,61,1)
(280,180,1)
(387,180,1)
(511,672,1)
(787,503,1)
(291,442,1)
(952,242,1)
(452,934,1)
(93,341,1)
(305,376,1)
(556,65,1)
(9,545,1)
(215,268,1)
(774,287,1)
(794,283,1)
(553,350,1)
(386,576,1)
(535,446,1)
(607,598,1)
(805,925,1)
(527,22,1)
(423,634,1)
(670,495,1)
(156,859,1)
(827,15,1)
(789,247,1)
(78,648,1)
(181,866,1)
(805,473,1)
(934,932,1)
(38,600,1)
(847,493,1)
(148,247,1)
(70,720,1)
(589,110,1)
(49,5,1)
(474,760,1)
(283,785,1)
(415,179,1)
(529,888,1)
(418,121,1)
(63,95,1)
(696,453,1)
(238,247,1)
(646,560,1)
(345,587,1)
(325,883,1)
(457,369,1)
(622,800,1)
(680,348,1)
(51,175,1)
(139,247,1)
(88,900,1)
(459,247,1)
(21,188,1)
(461,326,1)
(669,261,1)
(273,515,1)
(3,496,1)
(211,621,1)
(762,803,1)
(815,450,1)
(518,515,1)
(37,762,1)
(520,288,1)
(147,664,1)
(367,16,1)
(350,778,1)
(902,250,1)
(256,939,1)
(383,829,1)
(101,147,1)
(112,310,1)
(850,312,1)
(187,180,1)
(137,180,1)
(188,515,1)
(544,404,1)
(138,690,1)
(437,180,1)
(482,68,1)
(109,475,1)
(626,501,1)
(286,451,1)
(587,856,1)
(289,841,1)
(401,455,1)
(618,730,1)
(545,296,1)
(810,459,1)
(240,39,1)
(852,180,1)
(800,515,1)
(654,827,1)
(497,517,1)
(872,413,1)
(801,91,1)
(475,879,1)
(773,571,1)
(864,277,1)
(239,477,1)
(706,515,1)
(933,356,1)
(458,327,1)
(644,864,1)
(513,787,1)
(775,186,1)
(304,372,1)
(73,465,1)
(225,247,1)
(462,515,1)
(408,9,1)
(487,515,1)
(293,581,1)
(11,247,1)
(837,247,1)
(475,266,1)
(777,49,1)
(349,515,1)
(289,304,1)
(403,650,1)
(869,620,1)
(790,14,1)
(330,180,1)
(143,377,1)
(136,441,1)
(480,481,1)
(909,247,1)
(464,59,1)
(924,26,1)
(776,515,1)
(500,676,1)
(791,699,1)
(443,196,1)
(337,794,1)
(62,517,1)
(914,343,1)
(674,632,1)
(859,433,1)
(916,300,1)
(297,398,1)
(311,452,1)
(818,180,1)
(201,867,1)
(581,103,1)
(467,878,1)
(944,595,1)
(689,548,1)
(432,383,1)
(150,247,1)
(208,726,1)
(290,869,1)
(275,504,1)
(18,28,1)
(152,180,1)
(182,858,1)
(335,641,1)
(800,702,1)
(598,522,1)
(463,416,1)
(243,180,1)
(659,2,1)
(270,952,1)
(18,719,1)
(685,714,1)
(642,708,1)
(364,150,1)
(765,69,1)
(666,113,1)
(606,755,1)
(259,255,1)
(569,418,1)
(881,734,1)
(938,554,1)
(37,843,1)
(760,204,1)
(757,877,1)
(287,109,1)
(123,830,1)
(285,671,1)
(651,139,1)
(132,719,1)
(811,1,1)
(72,715,1)
(80,180,1)
(771,247,1)
(227,728,1)
(661,508,1)
(727,795,1)
(419,710,1)
(489,247,1)
(773,247,1)
(426,551,1)
(711,914,1)
(921,93,1)
(771,863,1)
(278,285,1)
(30,359,1)
(876,238,1)
(108,315,1)
(453,706,1)
(701,80,1)
(341,73,1)
(50,151,1)
(245,403,1)
(89,737,1)
(92,651,1)
(484,740,1)
(165,190,1)
(56,293,1)
(824,920,1)
(95,44,1)
(14,51,1)
(261,247,1)
(832,586,1)
(390,573,1)
(138,800,1)
(254,138,1)
(723,862,1)
(817,36,1)
(465,515,1)
(617,528,1)
(53,692,1)
(930,613,1)
(780,472,1)
(931,225,1)
(162,178,1)
(769,76,1)
(629,328,1)
(802,379,1)
(69,461,1)
(326,584,1)
(494,931,1)
(89,180,1)
(871,756,1)
(359,129,1)
(639,10,1)
(459,591,1)
(464,37,1)
(685,463,1)
(521,334,1)
(854,776,1)
(20,698,1)
(11,43,1)
(220,180,1)
(809,292,1)
(503,385,1)
(241,725,1)
(122,515,1)
(548,858,1)
(26,938,1)
(341,465,1)
(874,180,1)
(200,936,1)
(456,111,1)
(848,132,1)
(580,152,1)
(76,247,1)
(634,7,1)
(619,167,1)
(200,247,1)
(406,802,1)
(509,836,1)
(29,413,1)
(856,216,1)
(851,240,1)
(40,101,1)
(594,347,1)
(32,425,1)
(367,487,1)
(533,150,1)
(525,695,1)
(18,593,1)
(715,371,1)
(735,294,1)
(837,913,1)
(800,247,1)
(873,20,1)
(465,394,1)
(97,742,1)
(851,712,1)
(825,208,1)
(532,516,1)
(419,180,1)
(784,565,1)
(130,247,1)
(932,631,1)
(448,823,1)
(894,860,1)
(949,646,1)
(537,254,1)
(566,121,1)
(213,494,1)
(274,247,1)
(593,272,1)
(838,247,1)
(199,919,1)
(18,263,1)
(847,821,1)
(220,594,1)
(789,134,1)
(904,247,1)
(295,384,1)
(758,847,1)
(835,218,1)
(171,195,1)
(942,382,1)
(448,247,1)
(29,456,1)
(868,321,1)
(814,894,1)
(158,946,1)
(897,334,1)
(564,322,1)
(308,205,1)
(34,77,1)
(916,420,1)
(609,130,1)
(599,217,1)
(742,509,1)
(930,933,1)
(189,389,1)
(589,180,1)
(912,515,1)
(860,500,1)
(801,180,1)
(632,331,1)
(380,50,1)
(574,515,1)
(776,247,1)
(901,871,1)
(307,777,1)
(829,687,1)
(110,335,1)
(918,14,1)
(872,378,1)
(96,909,1)
(845,840,1)
(169,861,1)
(665,352,1)
(400,739,1)
(505,63,1)
(140,247,1)
(341,477,1)
(391,603,1)
(543,781,1)
(123,614,1)
(331,81,1)
(882,742,1)
(273,247,1)
(429,180,1)
(50,640,1)
(565,472,1)
(355,289,1)
(605,356,1)
(378,577,1)
(786,662,1)
(647,831,1)
(329,112,1)
(571,201,1)
(728,693,1)
(365,94,1)
(18,548,1)
(429,231,1)
(74,924,1)
(572,515,1)
(322,877,1)
(592,802,1)
(471,596,1)
(135,69,1)
(615,795,1)
(385,822,1)
(62,524,1)
(730,297,1)
(706,247,1)
(786,180,1)
(116,490,1)
(948,704,1)
(876,279,1)
(912,247,1)
(724,825,1)
(788,114,1)
(119,332,1)
(254,72,1)
(66,333,1)
(15,780,1)
(949,560,1)
(155,865,1)
(27,96,1)
(483,818,1)
(655,373,1)
(244,38,1)
(44,194,1)
(649,247,1)
(262,622,1)
(548,926,1)
(1,197,1)
(510,912,1)
(396,515,1)
(237,882,1)
(517,206,1)
(109,871,1)
(830,614,1)
(405,311,1)
(892,264,1)
(718,247,1)
(399,535,1)
(344,437,1)
(334,82,1)
(870,136,1)
(59,448,1)
(737,19,1)
(366,903,1)
(127,909,1)
(823,307,1)
(215,673,1)
(555,214,1)
(18,104,1)
(795,247,1)
(277,148,1)
(120,272,1)
(781,180,1)
(588,223,1)
(940,894,1)
(670,247,1)
(59,723,1)
(702,566,1)
(230,570,1)
(851,303,1)
(12,432,1)
(828,772,1)
(841,304,1)
(125,813,1)
(611,187,1)
(533,667,1)
(432,58,1)
(396,252,1)
(449,0,1)
(69,899,1)
(221,34,1)
(35,590,1)
(645,119,1)
(142,93,1)
(398,747,1)
(103,886,1)
(269,123,1)
(249,515,1)
(758,531,1)
(57,339,1)
(603,351,1)
(333,515,1)
(895,117,1)
(708,876,1)
(222,843,1)
(192,474,1)
(273,395,1)
(228,247,1)
(797,62,1)
(679,388,1)
(268,649,1)
(703,945,1)
(0,606,1)
(351,11,1)
(591,492,1)
(697,261,1)
(229,118,1)
(85,165,1)
(478,498,1)
(361,948,1)
(260,529,1)
(282,414,1)
(275,876,1)
(351,146,1)
(151,640,1)
(837,515,1)
(4,653,1)
(153,247,1)
(504,915,1)
(393,477,1)
(883,174,1)
(720,222,1)
(917,169,1)
(437,868,1)
(741,265,1)
(685,400,1)
(203,166,1)
(608,431,1)
(844,786,1)
(705,808,1)
(859,247,1)
(49,247,1)
(346,211,1)
(10,173,1)
(474,515,1)
(871,744,1)
(606,463,1)
(130,98,1)
(624,380,1)
(595,617,1)
(421,553,1)
(283,84,1)
(490,881,1)
(425,833,1)
(575,401,1)
(947,793,1)
(292,628,1)
(259,247,1)
(195,669,1)
(340,458,1)
(333,754,1)
(316,271,1)
(441,513,1)
(464,579,1)
(610,8,1)
(93,66,1)
(780,275,1)
(493,821,1)
(656,515,1)
(798,736,1)
(60,180,1)
(716,555,1)
(869,731,1)
(181,180,1)
(515,685,1)
(369,550,1)
(186,559,1)
(785,180,1)
(417,592,1)
(835,320,1)
(910,226,1)
(897,144,1)
(477,244,1)
(473,925,1)
(389,12,1)
(917,386,1)
(464,897,1)
(435,306,1)
(748,290,1)
(115,758,1)
(612,700,1)
(469,90,1)
(218,243,1)
(526,33,1)
(28,789,1)
(183,750,1)
(199,661,1)
(926,624,1)
(409,185,1)
(633,100,1)
(166,316,1)
(373,597,1)
(754,83,1)
(349,247,1)
(550,89,1)
(681,191,1)
(99,776,1)
(803,872,1)
(858,501,1)
(504,597,1)
(18,851,1)
(37,0,1)
(288,421,1)
(636,57,1)
(479,65,1)
(746,931,1)
(913,921,1)
(625,609,1)
(238,784,1)
(536,595,1)
(628,791,1)
(137,526,1)
(146,11,1)
(75,612,1)
(590,765,1)
(174,794,1)
(849,611,1)
(224,491,1)
(433,445,1)
(257,79,1)
(296,180,1)
(489,314,1)
(501,403,1)
(269,6,1)
(788,791,1)
(16,75,1)
(654,247,1)
(668,180,1)
(66,52,1)
(838,724,1)
(717,142,1)
(516,409,1)
(514,515,1)
(316,180,1)
(25,788,1)
(371,810,1)
(209,269,1)
(521,843,1)
(45,207,1)
(68,616,1)
(356,210,1)
(777,78,1)
(118,805,1)
(693,629,1)
(924,453,1)
(82,298,1)
(469,180,1)
(176,515,1)
(3,180,1)
(197,354,1)
(772,54,1)
(897,616,1)
(852,102,1)
(572,604,1)
(212,180,1)
(508,180,1)
(186,515,1)
(242,514,1)
(577,469,1)
(547,213,1)
(582,127,1)
(718,943,1)
(113,413,1)
(488,152,1)
(219,898,1)
(783,400,1)
(885,887,1)
(6,510,1)
(900,585,1)
(677,926,1)
(53,850,1)
(474,247,1)
(604,574,1)
(54,159,1)
(711,228,1)
(398,684,1)
(736,180,1)
(299,792,1)
(422,893,1)
(763,906,1)
(704,666,1)
(819,336,1)
(442,257,1)
(250,709,1)
(518,892,1)
(726,430,1)
(771,515,1)
(936,729,1)
(598,247,1)
(361,180,1)
(667,274,1)
(388,92,1)
(814,133,1)
(39,230,1)
(172,682,1)
(56,103,1)
(7,219,1)
(563,941,1)
(376,538,1)
(743,318,1)
(172,247,1)
(415,424,1)
(684,478,1)
(332,633,1)
(787,385,1)
(186,247,1)
(321,652,1)
(384,88,1)
(631,366,1)
(836,479,1)
(117,679,1)
(60,358,1)
(312,515,1)
(600,399,1)
(388,651,1)
(76,923,1)
(216,3,1)
(225,443,1)
(400,180,1)
(652,608,1)
(656,247,1)
(214,156,1)
(818,233,1)
(494,270,1)
(812,325,1)
(138,490,1)
(584,874,1)
(748,869,1)
(551,86,1)
(693,838,1)
(440,815,1)
(572,247,1)
(635,644,1)
(672,849,1)
(291,180,1)
(79,799,1)
(539,180,1)
(14,175,1)
(357,570,1)
(207,236,1)
(436,180,1)
(730,482,1)
(134,639,1)
(234,593,1)
(438,498,1)
(98,353,1)
(861,155,1)
(447,350,1)
(709,419,1)
(310,773,1)
(517,675,1)
(280,299,1)
(773,515,1)
(343,818,1)
(570,203,1)
(856,336,1)
(881,168,1)
(651,248,1)
(778,515,1)
(821,530,1)
(18,481,1)
(745,229,1)
(649,768,1)
(231,497,1)
(744,756,1)
(527,532,1)
(271,55,1)
(439,180,1)
(941,746,1)
(568,422,1)
(272,247,1)
(699,324,1)
(392,182,1)
(532,691,1)
(122,247,1)
(322,757,1)
(187,875,1)
(751,881,1)
(248,139,1)
(509,796,1)
(205,515,1)
(853,567,1)
(635,758,1)
(121,423,1)
(831,873,1)
(834,588,1)
(714,770,1)
(441,404,1)
(80,525,1)
(349,547,1)
(61,460,1)
(439,743,1)
(888,799,1)
(127,561,1)
(615,727,1)
(358,722,1)
(167,583,1)
(383,707,1)
(785,870,1)
(799,176,1)
(196,276,1)
(631,368,1)
(595,247,1)
(719,181,1)
(685,368,1)
(520,180,1)
(284,425,1)
(656,302,1)
(111,124,1)
(583,625,1)
(206,189,1)
(499,510,1)
(491,889,1)
(104,930,1)
(507,692,1)
(244,600,1)
(843,247,1)
(81,824,1)
(265,85,1)
(334,298,1)
(65,408,1)
(796,654,1)
(768,636,1)
(140,505,1)
(840,741,1)
(849,105,1)
(694,798,1)
(395,30,1)
(202,608,1)
(929,32,1)
(519,141,1)
(470,659,1)
(897,553,1)
(778,247,1)
(652,202,1)
(33,104,1)
(102,221,1)
(597,172,1)
(387,834,1)
(579,601,1)
(631,273,1)
(61,368,1)
(305,435,1)
(105,60,1)
(108,735,1)
(18,88,1)
(596,291,1)
(77,489,1)
(530,759,1)
(76,515,1)
(806,484,1)
(304,247,1)
(153,515,1)
(899,461,1)
(725,28,1)
(933,605,1)
(734,168,1)
(729,428,1)
(767,296,1)
(920,627,1)
(534,331,1)
(864,148,1)
(874,241,1)
(462,717,1)
(306,122,1)
(573,884,1)
(230,357,1)
(575,180,1)
(813,513,1)
(472,301,1)
(673,268,1)
(72,371,1)
(889,817,1)
(431,365,1)
(687,599,1)
(404,853,1)
(161,511,1)
(223,540,1)
(885,701,1)
(740,131,1)
(129,220,1)
(189,515,1)
(650,828,1)
(72,459,1)
(861,427,1)
(794,441,1)
(808,838,1)
(210,344,1)
(652,765,1)
(817,413,1)
(522,911,1)
(320,218,1)
(894,891,1)
(548,677,1)
(249,309,1)
(946,914,1)
(156,857,1)
(914,595,1)
(309,797,1)
(706,618,1)
(56,157,1)
(908,711,1)
(539,392,1)
(104,32,1)
(641,515,1)
(939,564,1)
(531,355,1)
(255,305,1)
(37,489,1)
(20,641,1)
(660,507,1)
(703,247,1)
(55,712,1)
(455,215,1)
(339,348,1)
(194,280,1)
(710,13,1)
(601,681,1)
(301,362,1)
(393,239,1)
(233,536,1)
(336,668,1)
(649,515,1)
(374,837,1)
(791,247,1)
(553,447,1)
(240,230,1)
(490,751,1)
(676,932,1)
(1,180,1)
(144,533,1)
(435,122,1)
(693,208,1)
(761,457,1)
(691,180,1)
(173,839,1)
(444,546,1)
(742,780,1)
(191,607,1)
(94,835,1)
(362,351,1)
(113,162,1)
(561,27,1)
(904,655,1)
(451,436,1)
(57,506,1)
(170,199,1)
(18,10,1)
(43,922,1)
(863,74,1)
(481,951,1)
(434,408,1)
(261,713,1)
(659,180,1)
(877,656,1)
(721,814,1)
(193,674,1)
(185,691,1)
(163,575,1)
(324,361,1)
(579,346,1)
(266,879,1)
(177,415,1)
(353,125,1)
(878,171,1)
(855,262,1)
(365,835,1)
(886,543,1)
(32,284,1)
(139,4,1)
(890,467,1)
(623,143,1)
(735,71,1)
(420,520,1)
(274,468,1)
(258,944,1)
(778,342,1)
(157,947,1)
(521,25,1)
(390,180,1)
(131,334,1)
(133,140,1)
(567,247,1)
(631,463,1)
(379,223,1)
(917,415,1)
(891,860,1)
(315,308,1)
(352,766,1)
(58,937,1)
(396,247,1)
(114,809,1)
(217,58,1)
(88,247,1)
(464,224,1)
(521,0,1)
(100,806,1)
(414,785,1)
(145,6,1)
(633,806,1)
(164,542,1)
(478,438,1)
(690,116,1)
(915,904,1)
(342,942,1)
(254,161,1)
(276,186,1)
(252,940,1)
(148,340,1)
(279,238,1)
(329,310,1)
(465,247,1)
(461,584,1)
(188,247,1)
(375,844,1)
(427,155,1)
(178,247,1)
(789,515,1)
(741,180,1)
(524,906,1)
(179,568,1)
(524,763,1)
(843,64,1)
(386,531,1)
(540,748,1)
(897,843,1)
(430,816,1)
(518,247,1)
(912,761,1)
(168,855,1)
(205,247,1)
(506,23,1)
(416,716,1)
(770,783,1)
(820,207,1)
(738,581,1)
(866,689,1)
(733,701,1)
(263,212,1)
(951,848,1)
(198,519,1)
(879,928,1)
(621,413,1)
(161,849,1)
(67,648,1)
(561,180,1)
(425,902,1)
(923,323,1)
(915,317,1)
(23,610,1)
(822,703,1)
(159,851,1)
(84,282,1)
(338,480,1)
(18,580,1)
(585,580,1)
(454,567,1)
(691,193,1)
(323,18,1)
(376,180,1)
(713,908,1)
(860,180,1)
(466,918,1)
(446,854,1)
(78,67,1)
(533,736,1)
(528,237,1)
(303,240,1)
(909,515,1)
(487,164,1)
(412,917,1)
(224,167,1)
(937,688,1)
(368,562,1)
(498,349,1)
(204,345,1)
(200,515,1)
(613,933,1)
(16,180,1)
(514,563,1)
(909,278,1)
(506,610,1)
(648,180,1)
(42,859,1)
(675,206,1)
(624,50,1)
(684,686,1)
(302,209,1)
(765,135,1)
(328,247,1)
(48,787,1)
(501,245,1)
(219,523,1)
(495,48,1)
(927,619,1)
(450,333,1)
(824,180,1)
(179,247,1)
(764,267,1)
(331,824,1)
(107,426,1)
(867,163,1)
(554,696,1)
(759,485,1)
(317,904,1)
(464,521,1)
(259,515,1)
(333,247,1)
(462,247,1)
(86,657,1)
(459,515,1)
(682,880,1)
(314,885,1)
(375,786,1)
(24,901,1)
(884,297,1)
(686,478,1)
(232,463,1)
(460,449,1)
(91,145,1)
(747,684,1)
(886,781,1)
(527,632,1)
(330,338,1)
(552,308,1)
(468,364,1)
(17,281,1)
(925,227,1)
(793,738,1)
(580,488,1)
(472,247,1)
(816,852,1)
(45,820,1)
(641,764,1)
(776,17,1)
(251,393,1)
(402,840,1)
(918,790,1)
(487,247,1)
(71,439,1)
(893,115,1)
(207,670,1)
(700,153,1)
(189,247,1)
(947,180,1)
(236,670,1)
(36,927,1)
(833,902,1)
(925,180,1)
(492,170,1)
(523,387,1)
(692,462,1)
(403,828,1)
(862,29,1)
(141,405,1)
(597,642,1)
(842,752,1)
(226,826,1)
(178,198,1)
(707,829,1)
(104,929,1)
(858,626,1)
(792,769,1)
(223,748,1)
(328,705,1)
(836,545,1)
(875,192,1)
(124,448,1)
(208,180,1)
(632,534,1)
(621,665,1)
(586,907,1)
(56,581,1)
(722,611,1)
(479,375,1)
(640,539,1)
(697,890,1)
(228,158,1)
(2,733,1)
(627,263,1)
(173,180,1)
(347,374,1)
(857,42,1)
(907,180,1)
(84,247,1)
(339,680,1)
(880,642,1)
(370,406,1)
(653,544,1)
(249,247,1)
(312,247,1)
(935,624,1)
(668,569,1)
(620,390,1)
(18,527,1)
(616,247,1)
(887,470,1)
(826,330,1)
(260,180,1)
(898,523,1)
(766,601,1)
(272,295,1)
(695,671,1)
(943,434,1)
(865,177,1)
(276,775,1)
(385,703,1)
(369,329,1)
(545,767,1)
(671,572,1)
(878,413,1)
(79,87,1)
(641,247,1)
(755,463,1)
(687,180,1)
(513,45,1)
(372,895,1)
(225,515,1)
(406,21,1)
(648,812,1)
(945,635,1)
(928,180,1)
(951,180,1)
(928,24,1)
(581,99,1)
(243,35,1)
(343,483,1)
(897,165,1)
(382,949,1)
(867,215,1)
(176,645,1)
(122,804,1)
(464,697,1)
(795,258,1)
(348,249,1)
(608,365,1)
(521,553,1)
(476,78,1)
(855,180,1)
(440,180,1)
(6,499,1)
(8,444,1)
(143,259,1)
(712,466,1)
(327,412,1)
(296,842,1)
(788,361,1)
(804,749,1)
(601,247,1)
(736,721,1)
(382,322,1)
(161,474,1)
(153,471,1)
(538,582,1)
(267,367,1)
(700,291,1)
(484,180,1)
(698,589,1)
(521,616,1)
(514,247,1)
(496,819,1)
(294,71,1)
(685,586,1)
(919,661,1)
(436,745,1)
(205,774,1)
(752,796,1)
(731,620,1)
(445,337,1)
(559,623,1)
(521,165,1)
(508,183,1)
(664,402,1)
(688,518,1)
(402,845,1)
(897,0,1)
(542,16,1)
(657,811,1)
(8,180,1)
(593,120,1)
(5,476,1)
(155,247,1)
(902,709,1)
(256,180,1)
(853,454,1)
(18,652,1)
(546,339,1)
(821,247,1)
(907,70,1)
(176,247,1)
(903,273,1)
(188,417,1)
(570,166,1)
(630,97,1)
(756,200,1)
(394,658,1)
(13,930,1)
(19,329,1)
(18,826,1)
(190,370,1)
(150,694,1)
(911,391,1)
(781,647,1)
(576,169,1)
(897,40,1)
(739,832,1)
(635,679,1)
(87,260,1)
(300,420,1)
(65,718,1)
(152,107,1)
(634,219,1)
(264,53,1)
(212,910,1)
(141,247,1)
(658,251,1)
(921,108,1)
(58,688,1)
(354,396,1)
(712,918,1)
(854,56,1)
(175,137,1)
(809,247,1)
(424,179,1)
(562,232,1)
(811,396,1)
(662,556,1)
(644,531,1)
(312,660,1)
(614,801,1)
(600,180,1)
(889,817,2)
(839,894,2)
(60,345,2)
(513,787,2)
(162,932,2)
(275,876,2)
(78,648,2)
(156,859,2)
(576,758,2)
(325,794,2)
(914,615,2)
(236,787,2)
(654,247,2)
(275,504,2)
(127,671,2)
(518,515,2)
(886,671,2)
(80,671,2)
(120,894,2)
(89,93,2)
(244,671,2)
(18,104,2)
(824,894,2)
(909,515,2)
(520,93,2)
(811,396,2)
(168,855,2)
(446,671,2)
(719,894,2)
(437,180,2)
(776,671,2)
(923,894,2)
(488,894,2)
(396,894,2)
(201,93,2)
(59,448,2)
(906,93,2)
(333,251,2)
(211,621,2)
(144,932,2)
(461,894,2)
(256,180,2)
(513,404,2)
(610,8,2)
(7,223,2)
(10,894,2)
(476,794,2)
(658,251,2)
(344,894,2)
(538,671,2)
(574,794,2)
(941,671,2)
(606,463,2)
(725,894,2)
(18,481,2)
(237,742,2)
(67,794,2)
(438,671,2)
(439,93,2)
(501,894,2)
(531,355,2)
(137,894,2)
(855,180,2)
(159,894,2)
(234,894,2)
(432,93,2)
(607,598,2)
(163,575,2)
(228,247,2)
(842,796,2)
(515,794,2)
(616,247,2)
(190,223,2)
(584,894,2)
(533,150,2)
(204,345,2)
(836,796,2)
(293,581,2)
(851,894,2)
(233,595,2)
(827,780,2)
(932,631,2)
(398,684,2)
(166,894,2)
(587,121,2)
(18,580,2)
(484,180,2)
(498,349,2)
(383,829,2)
(473,671,2)
(856,336,2)
(464,697,2)
(459,223,2)
(570,894,2)
(587,856,2)
(150,932,2)
(490,121,2)
(818,180,2)
(68,297,2)
(787,385,2)
(706,247,2)
(139,247,2)
(14,175,2)
(304,679,2)
(852,671,2)
(27,671,2)
(334,671,2)
(548,926,2)
(453,706,2)
(310,773,2)
(382,949,2)
(597,876,2)
(681,351,2)
(553,93,2)
(15,780,2)
(537,297,2)
(298,771,2)
(274,932,2)
(108,93,2)
(29,794,2)
(629,328,2)
(26,938,2)
(523,223,2)
(933,356,2)
(501,403,2)
(205,515,2)
(62,93,2)
(72,459,2)
(264,93,2)
(625,513,2)
(881,168,2)
(181,180,2)
(740,671,2)
(225,247,2)
(400,794,2)
(73,251,2)
(544,404,2)
(179,247,2)
(925,671,2)
(930,933,2)
(188,223,2)
(904,876,2)
(29,413,2)
(171,742,2)
(349,671,2)
(143,671,2)
(254,297,2)
(754,251,2)
(432,383,2)
(450,251,2)
(599,93,2)
(259,671,2)
(252,894,2)
(138,490,2)
(18,826,2)
(748,869,2)
(716,794,2)
(37,671,2)
(297,398,2)
(789,515,2)
(583,513,2)
(903,671,2)
(435,376,2)
(400,180,2)
(926,624,2)
(66,52,2)
(404,853,2)
(385,703,2)
(581,671,2)
(248,544,2)
(45,207,2)
(641,247,2)
(377,671,2)
(214,794,2)
(241,894,2)
(210,894,2)
(72,223,2)
(882,742,2)
(219,523,2)
(113,413,2)
(911,351,2)
(504,876,2)
(794,283,2)
(349,515,2)
(227,671,2)
(691,180,2)
(105,345,2)
(32,425,2)
(200,93,2)
(632,331,2)
(685,400,2)
(432,58,2)
(731,297,2)
(278,671,2)
(553,350,2)
(758,531,2)
(391,351,2)
(749,376,2)
(628,932,2)
(854,776,2)
(577,671,2)
(464,37,2)
(157,581,2)
(344,437,2)
(420,520,2)
(359,671,2)
(343,818,2)
(847,821,2)
(268,649,2)
(147,223,2)
(78,794,2)
(66,251,2)
(433,794,2)
(52,440,2)
(550,93,2)
(44,894,2)
(169,758,2)
(572,794,2)
(498,671,2)
(702,121,2)
(518,247,2)
(470,701,2)
(463,794,2)
(713,742,2)
(703,247,2)
(441,513,2)
(767,796,2)
(545,296,2)
(875,345,2)
(604,794,2)
(416,794,2)
(947,180,2)
(167,247,2)
(263,894,2)
(758,847,2)
(355,289,2)
(640,894,2)
(205,93,2)
(897,932,2)
(902,894,2)
(28,894,2)
(84,441,2)
(434,545,2)
(460,463,2)
(178,247,2)
(717,93,2)
(780,472,2)
(421,93,2)
(2,701,2)
(145,93,2)
(365,835,2)
(526,894,2)
(403,894,2)
(153,247,2)
(38,671,2)
(270,671,2)
(652,894,2)
(18,548,2)
(309,93,2)
(742,509,2)
(671,572,2)
(887,701,2)
(843,794,2)
(238,472,2)
(396,247,2)
(74,671,2)
(435,122,2)
(240,894,2)
(357,894,2)
(18,851,2)
(907,794,2)
(464,897,2)
(815,251,2)
(423,223,2)
(862,29,2)
(712,894,2)
(521,165,2)
(835,894,2)
(787,404,2)
(567,247,2)
(742,351,2)
(664,402,2)
(517,206,2)
(466,894,2)
(361,180,2)
(947,581,2)
(118,805,2)
(562,463,2)
(650,894,2)
(840,223,2)
(603,351,2)
(837,247,2)
(69,461,2)
(786,180,2)
(803,671,2)
(239,671,2)
(660,93,2)
(1,180,2)
(107,894,2)
(26,671,2)
(462,247,2)
(315,93,2)
(631,273,2)
(76,894,2)
(939,93,2)
(624,894,2)
(94,894,2)
(188,515,2)
(335,671,2)
(902,709,2)
(100,671,2)
(771,515,2)
(163,93,2)
(529,671,2)
(706,671,2)
(467,742,2)
(265,223,2)
(406,802,2)
(524,93,2)
(5,794,2)
(81,894,2)
(228,742,2)
(521,40,2)
(349,247,2)
(809,247,2)
(393,477,2)
(230,570,2)
(291,180,2)
(772,894,2)
(216,3,2)
(878,413,2)
(755,463,2)
(568,758,2)
(200,247,2)
(469,180,2)
(656,93,2)
(250,894,2)
(114,809,2)
(32,894,2)
(721,932,2)
(924,671,2)
(867,163,2)
(330,894,2)
(789,894,2)
(223,297,2)
(66,333,2)
(687,93,2)
(104,930,2)
(240,230,2)
(358,345,2)
(756,200,2)
(806,671,2)
(388,651,2)
(463,416,2)
(401,93,2)
(611,345,2)
(874,180,2)
(931,671,2)
(18,894,2)
(897,334,2)
(621,351,2)
(917,386,2)
(71,439,2)
(425,902,2)
(927,513,2)
(109,475,2)
(320,894,2)
(646,93,2)
(10,173,2)
(545,796,2)
(123,93,2)
(634,219,2)
(262,121,2)
(249,247,2)
(805,925,2)
(353,513,2)
(336,121,2)
(746,671,2)
(847,679,2)
(169,861,2)
(8,180,2)
(92,544,2)
(298,671,2)
(848,894,2)
(327,758,2)
(194,894,2)
(195,742,2)
(131,671,2)
(496,121,2)
(800,121,2)
(539,180,2)
(346,351,2)
(299,894,2)
(372,679,2)
(18,10,2)
(122,247,2)
(703,404,2)
(640,539,2)
(181,894,2)
(857,794,2)
(393,671,2)
(891,932,2)
(619,513,2)
(817,413,2)
(461,584,2)
(825,671,2)
(196,671,2)
(644,531,2)
(249,93,2)
(462,93,2)
(284,894,2)
(231,93,2)
(177,758,2)
(213,671,2)
(444,93,2)
(720,794,2)
(207,787,2)
(812,794,2)
(62,524,2)
(449,463,2)
(451,671,2)
(458,758,2)
(800,515,2)
(493,679,2)
(676,932,2)
(494,270,2)
(816,671,2)
(543,671,2)
(521,843,2)
(811,1,2)
(113,932,2)
(808,671,2)
(415,179,2)
(661,223,2)
(464,521,2)
(564,93,2)
(52,251,2)
(103,671,2)
(933,894,2)
(879,928,2)
(491,513,2)
(705,671,2)
(301,351,2)
(866,894,2)
(595,742,2)
(656,515,2)
(718,247,2)
(773,93,2)
(376,180,2)
(796,780,2)
(575,180,2)
(795,595,2)
(856,121,2)
(303,894,2)
(380,894,2)
(174,794,2)
(21,188,2)
(952,671,2)
(399,671,2)
(108,735,2)
(914,595,2)
(811,894,2)
(797,93,2)
(951,894,2)
(280,180,2)
(20,641,2)
(532,632,2)
(206,189,2)
(296,180,2)
(712,918,2)
(511,345,2)
(142,93,2)
(290,297,2)
(893,758,2)
(506,93,2)
(854,56,2)
(597,172,2)
(426,894,2)
(657,894,2)
(3,180,2)
(707,93,2)
(89,180,2)
(188,247,2)
(598,351,2)
(788,932,2)
(915,904,2)
(77,671,2)
(49,247,2)
(198,932,2)
(40,223,2)
(364,932,2)
(633,671,2)
(855,121,2)
(136,441,2)
(62,517,2)
(487,515,2)
(273,515,2)
(385,404,2)
(897,553,2)
(244,600,2)
(500,932,2)
(276,671,2)
(531,679,2)
(464,579,2)
(479,545,2)
(367,16,2)
(273,671,2)
(624,50,2)
(225,515,2)
(912,93,2)
(121,223,2)
(916,420,2)
(497,93,2)
(935,894,2)
(679,388,2)
(586,794,2)
(776,247,2)
(161,849,2)
(50,640,2)
(909,247,2)
(925,180,2)
(850,312,2)
(85,223,2)
(322,93,2)
(175,137,2)
(431,894,2)
(829,687,2)
(166,316,2)
(693,208,2)
(649,93,2)
(715,223,2)
(669,742,2)
(272,894,2)
(311,932,2)
(854,671,2)
(0,463,2)
(129,671,2)
(917,169,2)
(934,932,2)
(339,93,2)
(50,894,2)
(733,701,2)
(133,140,2)
(56,157,2)
(108,315,2)
(478,671,2)
(684,671,2)
(940,894,2)
(347,671,2)
(373,876,2)
(312,247,2)
(756,93,2)
(897,0,2)
(18,88,2)
(341,465,2)
(270,952,2)
(96,671,2)
(366,671,2)
(547,671,2)
(350,778,2)
(326,894,2)
(48,787,2)
(172,247,2)
(64,794,2)
(780,275,2)
(436,180,2)
(838,671,2)
(465,247,2)
(257,671,2)
(30,671,2)
(618,671,2)
(352,351,2)
(938,671,2)
(936,93,2)
(612,671,2)
(110,671,2)
(354,894,2)
(869,620,2)
(873,671,2)
(37,843,2)
(97,742,2)
(648,794,2)
(158,742,2)
(861,155,2)
(503,404,2)
(395,671,2)
(271,894,2)
(329,93,2)
(152,894,2)
(419,894,2)
(28,789,2)
(949,93,2)
(879,93,2)
(356,894,2)
(567,742,2)
(687,180,2)
(369,329,2)
(281,671,2)
(182,894,2)
(719,181,2)
(469,671,2)
(742,780,2)
(289,679,2)
(387,180,2)
(688,93,2)
(300,93,2)
(323,894,2)
(535,671,2)
(368,463,2)
(666,113,2)
(315,308,2)
(53,93,2)
(642,876,2)
(457,93,2)
(704,932,2)
(589,180,2)
(926,894,2)
(212,894,2)
(644,864,2)
(351,11,2)
(90,671,2)
(189,247,2)
(87,671,2)
(9,545,2)
(161,474,2)
(897,616,2)
(127,909,2)
(243,894,2)
(690,121,2)
(296,796,2)
(24,93,2)
(910,894,2)
(242,671,2)
(504,915,2)
(343,595,2)
(785,441,2)
(527,632,2)
(593,894,2)
(698,589,2)
(570,166,2)
(519,141,2)
(559,671,2)
(348,93,2)
(522,351,2)
(853,567,2)
(601,351,2)
(1,894,2)
(115,758,2)
(897,40,2)
(98,513,2)
(801,93,2)
(504,597,2)
(515,685,2)
(788,114,2)
(623,671,2)
(836,479,2)
(801,180,2)
(765,69,2)
(809,932,2)
(530,679,2)
(791,932,2)
(634,223,2)
(723,794,2)
(539,894,2)
(406,223,2)
(355,679,2)
(858,894,2)
(93,671,2)
(751,121,2)
(405,932,2)
(259,515,2)
(272,247,2)
(185,632,2)
(462,515,2)
(909,671,2)
(605,894,2)
(584,874,2)
(83,251,2)
(374,671,2)
(176,247,2)
(191,351,2)
(8,93,2)
(224,167,2)
(821,679,2)
(610,93,2)
(770,794,2)
(316,894,2)
(398,671,2)
(786,545,2)
(109,871,2)
(918,894,2)
(906,429,2)
(764,671,2)
(140,247,2)
(652,608,2)
(389,93,2)
(694,932,2)
(828,772,2)
(826,330,2)
(105,60,2)
(917,415,2)
(904,247,2)
(386,531,2)
(283,441,2)
(39,894,2)
(127,561,2)
(392,894,2)
(362,351,2)
(314,671,2)
(803,872,2)
(521,932,2)
(874,894,2)
(679,404,2)
(308,93,2)
(485,679,2)
(482,297,2)
(745,671,2)
(260,180,2)
(608,365,2)
(474,247,2)
(478,498,2)
(863,671,2)
(849,345,2)
(65,408,2)
(53,850,2)
(33,894,2)
(245,894,2)
(748,297,2)
(819,121,2)
(823,794,2)
(339,348,2)
(189,93,2)
(487,247,2)
(527,894,2)
(521,553,2)
(508,180,2)
(156,857,2)
(838,247,2)
(114,932,2)
(197,894,2)
(17,671,2)
(573,297,2)
(661,508,2)
(948,932,2)
(685,586,2)
(345,121,2)
(736,932,2)
(776,515,2)
(121,423,2)
(71,93,2)
(447,93,2)
(548,858,2)
(747,671,2)
(153,671,2)
(203,894,2)
(836,545,2)
(170,199,2)
(761,93,2)
(76,247,2)
(82,671,2)
(172,876,2)
(892,93,2)
(789,247,2)
(655,876,2)
(12,93,2)
(464,59,2)
(672,345,2)
(514,515,2)
(218,894,2)
(566,121,2)
(734,121,2)
(741,223,2)
(510,912,2)
(331,894,2)
(914,742,2)
(419,180,2)
(667,274,2)
(708,876,2)
(443,671,2)
(711,742,2)
(951,180,2)
(116,121,2)
(794,404,2)
(930,894,2)
(773,515,2)
(206,93,2)
(348,249,2)
(600,671,2)
(626,894,2)
(829,93,2)
(778,515,2)
(269,93,2)
(667,932,2)
(885,671,2)
(153,515,2)
(448,247,2)
(844,545,2)
(199,223,2)
(11,247,2)
(920,894,2)
(924,26,2)
(456,794,2)
(328,247,2)
(897,165,2)
(633,806,2)
(781,180,2)
(479,375,2)
(404,742,2)
(924,453,2)
(322,877,2)
(523,387,2)
(670,247,2)
(750,223,2)
(641,515,2)
(474,515,2)
(888,671,2)
(791,247,2)
(429,180,2)
(822,404,2)
(514,247,2)
(883,794,2)
(225,671,2)
(16,671,2)
(79,671,2)
(673,93,2)
(467,878,2)
(649,515,2)
(178,932,2)
(824,180,2)
(208,671,2)
(729,93,2)
(532,691,2)
(291,671,2)
(711,228,2)
(864,758,2)
(261,742,2)
(212,180,2)
(367,487,2)
(560,256,2)
(224,513,2)
(674,632,2)
(470,659,2)
(890,742,2)
(342,93,2)
(813,513,2)
(675,93,2)
(798,932,2)
(437,894,2)
(330,180,2)
(371,223,2)
(95,894,2)
(165,223,2)
(867,93,2)
(481,894,2)
(453,671,2)
(918,14,2)
(914,343,2)
(609,130,2)
(826,894,2)
(494,671,2)
(494,931,2)
(220,671,2)
(777,78,2)
(329,310,2)
(251,671,2)
(802,223,2)
(155,758,2)
(307,794,2)
(340,758,2)
(743,93,2)
(542,671,2)
(420,93,2)
(54,894,2)
(652,765,2)
(168,121,2)
(220,180,2)
(263,212,2)
(859,794,2)
(550,89,2)
(79,87,2)
(872,413,2)
(375,786,2)
(601,247,2)
(752,796,2)
(14,894,2)
(656,247,2)
(737,93,2)
(229,671,2)
(835,218,2)
(785,180,2)
(387,223,2)
(886,781,2)
(894,860,2)
(321,894,2)
(555,794,2)
(477,671,2)
(129,220,2)
(693,838,2)
(738,581,2)
(817,513,2)
(849,105,2)
(183,223,2)
(534,894,2)
(837,515,2)
(0,606,2)
(711,914,2)
(607,351,2)
(598,247,2)
(790,894,2)
(898,223,2)
(439,180,2)
(356,344,2)
(223,748,2)
(459,515,2)
(390,180,2)
(943,545,2)
(140,894,2)
(551,894,2)
(157,947,2)
(305,671,2)
(894,932,2)
(370,223,2)
(871,93,2)
(773,247,2)
(440,251,2)
(777,794,2)
(649,247,2)
(533,667,2)
(383,93,2)
(454,742,2)
(560,93,2)
(312,515,2)
(709,894,2)
(445,794,2)
(189,515,2)
(608,894,2)
(843,247,2)
(268,93,2)
(565,472,2)
(546,93,2)
(614,801,2)
(242,514,2)
(499,93,2)
(686,671,2)
(3,121,2)
(700,671,2)
(306,376,2)
(170,223,2)
(167,513,2)
(6,510,2)
(938,180,2)
(837,671,2)
(700,153,2)
(243,180,2)
(579,351,2)
(596,671,2)
(207,670,2)
(222,794,2)
(592,223,2)
(489,247,2)
(109,93,2)
(682,876,2)
(691,632,2)
(103,886,2)
(887,470,2)
(520,180,2)
(205,247,2)
(91,93,2)
(585,894,2)
(772,180,2)
(701,80,2)
(155,247,2)
(698,671,2)
(692,93,2)
(783,794,2)
(521,334,2)
(877,93,2)
(769,894,2)
(771,247,2)
(718,545,2)
(317,876,2)
(69,894,2)
(591,223,2)
(724,671,2)
(509,780,2)
(490,881,2)
(735,71,2)
(232,463,2)
(414,441,2)
(867,215,2)
(76,515,2)
(297,671,2)
(331,824,2)
(4,544,2)
(42,794,2)
(639,894,2)
(215,93,2)
(945,404,2)
(671,794,2)
(821,247,2)
(267,671,2)
(739,794,2)
(684,478,2)
(505,894,2)
(259,247,2)
(692,462,2)
(931,225,2)
(744,93,2)
(792,894,2)
(99,671,2)
(580,894,2)
(118,671,2)
(845,223,2)
(872,671,2)
(804,376,2)
(148,758,2)
(554,671,2)
(332,633,2)
(104,894,2)
(949,560,2)
(45,787,2)
(384,894,2)
(860,180,2)
(57,339,2)
(540,297,2)
(696,671,2)
(913,671,2)
(80,180,2)
(318,93,2)
(448,794,2)
(141,247,2)
(75,671,2)
(294,93,2)
(484,671,2)
(277,758,2)
(345,587,2)
(72,371,2)
(588,223,2)
(617,742,2)
(795,247,2)
(192,345,2)
(631,463,2)
(597,642,2)
(627,894,2)
(620,390,2)
(37,0,2)
(768,93,2)
(788,791,2)
(830,93,2)
(774,93,2)
(757,93,2)
(63,894,2)
(579,601,2)
(518,93,2)
(615,795,2)
(302,93,2)
(455,93,2)
(60,180,2)
(869,297,2)
(929,894,2)
(868,894,2)
(283,785,2)
(65,545,2)
(361,932,2)
(871,756,2)
(932,671,2)
(442,671,2)
(593,272,2)
(280,894,2)
(202,894,2)
(765,894,2)
(654,780,2)
(276,186,2)
(269,123,2)
(762,671,2)
(173,180,2)
(440,180,2)
(647,671,2)
(492,223,2)
(286,671,2)
(714,794,2)
(659,701,2)
(388,544,2)
(641,671,2)
(509,836,2)
(312,93,2)
(561,671,2)
(820,787,2)
(527,532,2)
(561,180,2)
(112,93,2)
(852,180,2)
(209,93,2)
(390,297,2)
(594,671,2)
(328,671,2)
(850,93,2)
(53,692,2)
(693,671,2)
(784,472,2)
(800,247,2)
(430,671,2)
(422,758,2)
(104,32,2)
(187,345,2)
(659,180,2)
(575,93,2)
(616,297,2)
(912,515,2)
(406,21,2)
(532,516,2)
(124,794,2)
(685,794,2)
(730,671,2)
(620,297,2)
(521,0,2)
(506,610,2)
(378,671,2)
(425,894,2)
(577,469,2)
(424,758,2)
(57,93,2)
(528,742,2)
(176,515,2)
(946,742,2)
(279,472,2)
(216,121,2)
(403,828,2)
(710,894,2)
(582,671,2)
(622,121,2)
(631,368,2)
(781,671,2)
(451,436,2)
(193,632,2)
(952,242,2)
(524,906,2)
(758,679,2)
(230,894,2)
(186,515,2)
(805,671,2)
(367,671,2)
(70,794,2)
(215,268,2)
(283,84,2)
(226,894,2)
(810,223,2)
(130,247,2)
(310,93,2)
(211,351,2)
(636,93,2)
(600,180,2)
(917,758,2)
(133,894,2)
(88,894,2)
(878,742,2)
(701,671,2)
(689,894,2)
(150,247,2)
(519,932,2)
(55,894,2)
(338,894,2)
(876,238,2)
(333,247,2)
(569,121,2)
(143,259,2)
(806,484,2)
(760,345,2)
(23,93,2)
(382,322,2)
(164,671,2)
(780,351,2)
(292,932,2)
(472,247,2)
(877,656,2)
(908,742,2)
(219,223,2)
(580,152,2)
(777,49,2)
(130,513,2)
(697,261,2)
(509,796,2)
(937,93,2)
(727,595,2)
(621,413,2)
(644,758,2)
(56,581,2)
(736,180,2)
(58,93,2)
(899,894,2)
(208,180,2)
(365,894,2)
(722,345,2)
(350,93,2)
(818,595,2)
(919,223,2)
(870,441,2)
(341,477,2)
(139,544,2)
(495,787,2)
(615,595,2)
(194,280,2)
(572,247,2)
(396,515,2)
(84,247,2)
(841,679,2)
(840,741,2)
(775,671,2)
(429,93,2)
(79,799,2)
(700,291,2)
(199,661,2)
(581,103,2)
(138,121,2)
(186,671,2)
(533,932,2)
(122,376,2)
(726,671,2)
(255,671,2)
(572,515,2)
(472,351,2)
(697,742,2)
(57,506,2)
(771,671,2)
(22,632,2)
(122,515,2)
(221,671,2)
(653,544,2)
(664,223,2)
(865,758,2)
(256,93,2)
(548,894,2)
(516,632,2)
(87,260,2)
(176,671,2)
(428,93,2)
(20,671,2)
(249,515,2)
(589,671,2)
(295,894,2)
(475,879,2)
(507,93,2)
(369,93,2)
(332,671,2)
(766,351,2)
(125,513,2)
(665,351,2)
(793,581,2)
(59,794,2)
(18,527,2)
(187,180,2)
(412,758,2)
(788,361,2)
(688,518,2)
(261,247,2)
(417,223,2)
(645,671,2)
(251,393,2)
(238,247,2)
(778,93,2)
(333,515,2)
(175,894,2)
(834,223,2)
(88,247,2)
(186,247,2)
(376,671,2)
(928,93,2)
(464,224,2)
(631,671,2)
(695,671,2)
(590,894,2)
(916,93,2)
(630,742,2)
(895,679,2)
(379,223,2)
(814,932,2)
(334,298,2)
(728,671,2)
(308,205,2)
(415,758,2)
(677,894,2)
(632,894,2)
(900,894,2)
(907,180,2)
(629,671,2)
(517,93,2)
(102,671,2)
(409,632,2)
(609,513,2)
(6,93,2)
(942,93,2)
(408,545,2)
(828,894,2)
(18,652,2)
(778,247,2)
(816,852,2)
(901,93,2)
(651,139,2)
(418,121,2)
(480,894,2)
(799,176,2)
(525,671,2)
(876,472,2)
(912,247,2)
(151,894,2)
(533,736,2)
(374,837,2)
(117,679,2)
(337,794,2)
(513,45,2)
(382,93,2)
(101,223,2)
(769,76,2)
(304,247,2)
(915,876,2)
(20,698,2)
(859,247,2)
(452,932,2)
(556,545,2)
(856,216,2)
(341,251,2)
(200,515,2)
(860,932,2)
(18,593,2)
(428,916,2)
(86,894,2)
(685,463,2)
(369,550,2)
(668,180,2)
(662,545,2)
(402,223,2)
(465,251,2)
(832,794,2)
(111,794,2)
(56,671,2)
(135,894,2)
(614,93,2)
(217,93,2)
(889,513,2)
(685,714,2)
(138,800,2)
(849,611,2)
(884,297,2)
(119,671,2)
(508,223,2)
(680,93,2)
(563,671,2)
(668,121,2)
(670,787,2)
(483,595,2)
(521,616,2)
(18,263,2)
(173,894,2)
(468,932,2)
(489,671,2)
(858,501,2)
(260,671,2)
(613,894,2)
(161,345,2)
(51,894,2)
(706,515,2)
(651,544,2)
(65,718,2)
(18,719,2)
(921,671,2)
(156,794,2)
(386,758,2)
(285,671,2)
(137,180,2)
(218,243,2)
(479,65,2)
(474,345,2)
(423,634,2)
(287,93,2)
(427,758,2)
(394,251,2)
(862,794,2)
(13,894,2)
(258,595,2)
(799,671,2)
(21,223,2)
(19,93,2)
(465,515,2)
(514,671,2)
(763,93,2)
(402,840,2)
(796,654,2)
(685,368,2)
(861,758,2)
(552,93,2)
(36,513,2)
(134,894,2)
(881,121,2)
(56,103,2)
(864,148,2)
(471,671,2)
(35,894,2)
(441,404,2)
(148,247,2)
(851,712,2)
(289,304,2)
(699,932,2)
(179,758,2)
(477,244,2)
(288,93,2)
(944,595,2)
(459,247,2)
(123,614,2)
(586,907,2)
(282,441,2)
(34,671,2)
(436,671,2)
(709,419,2)
(928,180,2)
(152,180,2)
(595,247,2)
(897,843,2)
(741,180,2)
(274,247,2)
(269,6,2)
(58,688,2)
(880,876,2)
(37,489,2)
(324,932,2)
(853,742,2)
(275,472,2)
(536,595,2)
(141,932,2)
(273,247,2)
(475,93,2)
(49,794,2)
(336,668,2)
(16,180,2)
(25,932,2)
(266,93,2)
(132,894,2)
(375,545,2)
(648,180,2)
(759,679,2)
(510,93,2)
(571,93,2)
(18,28,2)
(833,894,2)
(635,404,2)
(316,180,2)
(851,240,2)
(61,794,2)
(611,187,2)
(487,671,2)
(831,671,2)
(735,93,2)
(666,932,2)
(481,951,2)
(693,629,2)
(794,513,2)
-----------------------------------
(0,*location++)
(1,qe->chan)
(2,chan)
(3,qe->chan)
(4,member)
(5,interface)
(6,ast_channel_cdr(tmp->chan)
(7,str)
(8,qe->chan)
(9,NULL)
(10,ast_channel_name(qe->chan)
(11,tmp->member)
(12,tmp)
(13,qe)
(14,ast_channel_connected(qe->chan)
(15,tmp)
(16,qe->chan)
(17,chan)
(18,manager_event(EVENT_FLAG_AGENT, "AgentCalled",\n\\n\\t\\t\\t"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s",\n\\n\\t\\t\\tqe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan)
(19,qe)
(20,ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan)
(21,ast_channel_caller(tmp->chan)
(22,"")
(23,src)
(24,chan)
(25,0)
(26,ast_channel_redirecting(qe->chan)
(27,chan)
(28,ast_channel_name(tmp->chan)
(29,*busies)
(30,tmp)
(31,if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(32,ast_channel_caller(qe->chan)
(33,qe)
(34,tmp->stillgoing = 0)
(35,chan)
(36,busies)
(37,return 0;)
(38,"MACRO_EXTEN")
(39,str)
(40,caller.ani)
(41,tech)
(42,tech)
(43,member)
(44,3)
(45,tmp->member->status != AST_DEVICE_UNKNOWN)
(46,)
(47,if (ast_channel_cdr(qe->chan)
(48,tmp)
(49,tmp->interface)
(50,ast_channel_connected(qe->chan)
(51,id)
(52,ast_channel_exten(qe->chan)
(53,ast_cdr_setdestchan(ast_channel_cdr(tmp->chan)
(54,chan)
(55,qe)
(56,ast_strlen_zero(macrocontext)
(57,strcpy(ast_channel_cdr(tmp->chan)
(58,ast_channel_cdr(tmp->chan)
(59,return 0;)
(60,qe->chan)
(61,tmp)
(62,strcpy(ast_channel_cdr(tmp->chan)
(63,tmp)
(64,chan)
(65,time(NULL)
(66,ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan)
(67,name)
(68,1)
(69,ast_channel_caller(qe->chan)
(70,chan)
(71,ast_channel_cdr(qe->chan)
(72,ast_channel_set_caller_event(tmp->chan, &caller, NULL)
(73,macroexten)
(74,tmp)
(75,chan)
(76,tmp->chan)
(77,0)
(78,qe->parent->name)
(79,ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan)
(80,qe->chan)
(81,eventwhencalled)
(82,transit_network_select)
(83,tmp)
(84,tmp->member)
(85,qe)
(86,"AgentCalled")
(87,ast_channel_caller(qe->chan)
(88,tmp->interface)
(89,qe->chan)
(90,parent)
(91,chan)
(92,AST_DEVICE_UNKNOWN)
(93,ast_cdr_isset_unanswered()
(94,number)
(95,"Called %s\\n")
(96,qe)
(97,tmp)
(98,interface)
(99,macrocontext)
(100,transit_network_select)
(101,ani)
(102,parent)
(103,macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(104,S_COR(ast_channel_caller(qe->chan)
(105,ast_channel_exten(qe->chan)
(106,)
(107,parent)
(108,strcpy(ast_channel_cdr(tmp->chan)
(109,strcpy(ast_channel_cdr(tmp->chan)
(110,chan)
(111,tmp->stillgoing = 0)
(112,dcontext)
(113,*busies)
(114,get_queue_member_status(tmp->member)
(115,LOG_WARNING)
(116,NULL)
(117,newstate)
(118,qe->parent->rrpos++)
(119,tmp)
(120,membername)
(121,!ast_strlen_zero(ast_channel_dialed(qe->chan)
(122,tmp->chan)
(123,ast_channel_cdr(qe->chan)
(124,0)
(125,"%s in use, can\'t receive call\\n")
(126,)
(127,ast_channel_lock_both(tmp->chan, qe->chan)
(128,)
(129,ast_channel_unlock(qe->chan)
(130,tmp->interface)
(131,qe)
(132,qe)
(133,ast_verb(3, "Called %s\\n", tmp->interface)
(134,chan)
(135,valid)
(136,qe)
(137,qe->chan)
(138,ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)
(139,tmp->member)
(140,tmp->interface)
(141,tmp->interface)
(142,tmp)
(143,ast_channel_appl_set(tmp->chan, "AppQueue")
(144,1)
(145,qe)
(146,paused)
(147,caller)
(148,tmp->member)
(149,)
(150,tmp->member)
(151,id)
(152,qe->parent)
(153,tmp->chan)
(154,if (ast_channel_connected(qe->chan)
(155,tmp->member)
(156,ast_copy_string(tech, tmp->interface, sizeof(tech)
(157,ast_channel_context(qe->chan)
(158,interface)
(159,qe)
(160,if (!ast_channel_caller(tmp->chan)
(161,ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan)
(162,busies)
(163,ast_channel_exten(qe->chan)
(164,chan)
(165,caller.id)
(166,ast_channel_connected(qe->chan)
(167,tmp->stillgoing)
(168,ast_channel_dialed(qe->chan)
(169,ast_devstate2str(tmp->member->status)
(170,caller.ani = ast_channel_connected(qe->chan)
(171,busies)
(172,tmp->lastcall)
(173,qe->chan)
(174,1)
(175,ast_channel_connected(qe->chan)
(176,tmp->chan)
(177,tmp)
(178,do_hang(tmp)
(179,tmp->member)
(180,struct queue_ent *qe)
(181,qe->chan)
(182,qe)
(183,chan)
(184,)
(185,vars)
(186,tmp->chan)
(187,qe->chan)
(188,tmp->chan)
(189,tmp->chan)
(190,id)
(191,tmp)
(192,qe)
(193,chan)
(194,ast_channel_unlock(qe->chan)
(195,tmp->stillgoing = 0)
(196,tmp)
(197,chan)
(198,tmp)
(199,ast_channel_connected(qe->chan)
(200,tmp->chan)
(201,tmp)
(202,"unknown")
(203,id)
(204,tmp)
(205,tmp->chan)
(206,ast_channel_cdr(tmp->chan)
(207,tmp->member->status)
(208,qe->parent)
(209,tmp)
(210,id)
(211,(*busies)
(212,qe->chan)
(213,tmp)
(214,location)
(215,ast_channel_cdr(tmp->chan)
(216,ast_channel_exten(qe->chan)
(217,qe)
(218,ast_channel_caller(qe->chan)
(219,ast_channel_dialed(qe->chan)
(220,qe->chan)
(221,qe)
(222,tech)
(223,ast_channel_connected(qe->chan)
(224,return 0;)
(225,tmp->chan)
(226,qe)
(227,parent)
(228,tmp->interface)
(229,qe)
(230,ast_channel_connected(qe->chan)
(231,chan)
(232,location)
(233,parent)
(234,qe)
(235,newstate)
(236,status)
(237,"Wrapuptime not yet expired on queue %s for %s\\n")
(238,tmp->lastqueue)
(239,macroexten)
(240,ast_channel_connected(qe->chan)
(241,chan)
(242,ast_channel_whentohangup(tmp->chan)
(243,qe->chan)
(244,pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(245,name)
(246,)
(247,struct callattempt *tmp)
(248,status)
(249,tmp->chan)
(250,id)
(251,!ast_strlen_zero(macroexten)
(252,chan)
(253,res)
(254,tmp)
(255,chan)
(256,qe->chan)
(257,qe)
(258,lastqueue)
(259,tmp->chan)
(260,qe->chan)
(261,tmp->stillgoing)
(262,chan)
(263,ast_channel_uniqueid(qe->chan)
(264,tmp)
(265,chan)
(266,accountcode)
(267,tmp)
(268,ast_channel_cdr(tmp->chan)
(269,strcpy(ast_channel_cdr(tmp->chan)
(270,sizeof(*ast_channel_whentohangup(tmp->chan)
(271,chan)
(272,tmp->member)
(273,tmp->chan)
(274,tmp->member)
(275,tmp->lastqueue->wrapuptime && (time(NULL)
(276,ast_channel_data_set(tmp->chan, "(Outgoing Line)
(277,interface)
(278,chan)
(279,wrapuptime)
(280,qe->chan)
(281,tmp)
(282,member)
(283,compare_weight(qe->parent,tmp->member)
(284,str)
(285,tmp)
(286,qe)
(287,tmp)
(288,chan)
(289,tmp->member->interface)
(290,number)
(291,qe->chan)
(292,member)
(293,macrocontext)
(294,userfield)
(295,member)
(296,qe->parent)
(297,!ast_channel_caller(tmp->chan)
(298,ast_channel_dialed(tmp->chan)
(299,chan)
(300,amaflags)
(301,lastqueue)
(302,chan)
(303,"unknown")
(304,tmp->member)
(305,tmp)
(306,AST_CAUSE_ANSWERED_ELSEWHERE)
(307,tmp)
(308,ast_channel_cdr(tmp->chan)
(309,chan)
(310,ast_channel_cdr(tmp->chan)
(311,tmp)
(312,tmp->chan)
(313,if ((res = ast_call(tmp->chan, location, 0)
(314,stillgoing)
(315,ast_channel_cdr(tmp->chan)
(316,qe->chan)
(317,wrapuptime)
(318,qe)
(319,)
(320,id)
(321,qe)
(322,ast_channel_cdr(tmp->chan)
(323,tmp)
(324,tmp)
(325,qe)
(326,id)
(327,AST_DEVSTATE_CACHABLE)
(328,tmp->member)
(329,ast_channel_cdr(tmp->chan)
(330,qe->chan)
(331,qe->parent->eventwhencalled)
(332,ast_channel_dialed(tmp->chan)
(333,tmp->chan)
(334,ast_channel_dialed(tmp->chan)
(335,qe)
(336,ast_channel_macroexten(qe->chan)
(337,tech)
(338,chan)
(339,ast_channel_cdr(tmp->chan)
(340,member)
(341,ast_channel_exten_set(tmp->chan, macroexten)
(342,chan)
(343,qe->parent->name)
(344,ast_channel_caller(qe->chan)
(345,!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(346,0)
(347,qe)
(348,ast_channel_cdr(tmp->chan)
(349,tmp->chan)
(350,ast_channel_cdr(tmp->chan)
(351,tmp->member->paused)
(352,tmp->stillgoing = 0)
(353,tmp)
(354,qe)
(355,ast_device_state(tmp->member->interface)
(356,ast_channel_caller(qe->chan)
(357,number)
(358,chan)
(359,res)
(360,)
(361,qe->parent)
(362,tmp)
(363,location)
(364,tmp)
(365,ast_channel_caller(qe->chan)
(366,0)
(367,ast_channel_datastore_inherit(qe->chan, tmp->chan)
(368,location = "")
(369,strcpy(ast_channel_cdr(tmp->chan)
(370,caller)
(371,&caller)
(372,member)
(373,tmp)
(374,ast_channel_unlock(tmp->chan)
(375,qe->parent->wrapuptime)
(376,qe->cancel_answered_elsewhere)
(377,"AppQueue")
(378,busies)
(379,caller)
(380,name)
(381,if (use_weight && compare_weight(qe->parent,tmp->member)
(382,strcpy(ast_channel_cdr(tmp->chan)
(383,ast_channel_cdr(qe->chan)
(384,tmp)
(385,tmp->member->status)
(386,ast_devstate2str(newstate)
(387,qe->chan)
(388,tmp->member->status == AST_DEVICE_UNKNOWN)
(389,chan)
(390,qe->chan)
(391,"%s paused, can\'t receive call\\n")
(392,chan)
(393,ast_strlen_zero(macroexten)
(394,chan)
(395,chan)
(396,tmp->chan)
(397,)
(398,ast_channel_caller(tmp->chan)
(399,chan)
(400,qe->chan)
(401,chan)
(402,ast_channel_connected(qe->chan)
(403,ast_channel_connected(qe->chan)
(404,!tmp->member->ringinuse)
(405,interface)
(406,ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan)
(407,)
(408,time(NULL)
(409,vars)
(410,)
(411,macroexten)
(412,newstate)
(413,int *busies)
(414,tmp)
(415,tmp->member->interface)
(416,strchr(tech, \'/\')
(417,chan)
(418,qe)
(419,qe->chan)
(420,ast_channel_cdr(qe->chan)
(421,qe)
(422,tmp)
(423,ast_strlen_zero(ast_channel_dialed(qe->chan)
(424,interface)
(425,ast_channel_caller(qe->chan)
(426,qe)
(427,status)
(428,ast_channel_cdr(tmp->chan)
(429,qe->chan)
(430,qe)
(431,str)
(432,strcpy(ast_channel_cdr(tmp->chan)
(433,interface)
(434,tmp)
(435,ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
(436,qe->linpos)
(437,qe->chan)
(438,id)
(439,qe->chan)
(440,qe->chan)
(441,use_weight)
(442,chan)
(443,chan)
(444,chan)
(445,tmp)
(446,macroexten)
(447,amaflags)
(448,tmp->stillgoing)
(449,\'\\0\')
(450,qe)
(451,qe->linpos++)
(452,"Couldn\'t call %s\\n")
(453,ast_channel_redirecting(tmp->chan)
(454,ringinuse)
(455,qe)
(456,busies)
(457,tmp)
(458,tmp)
(459,tmp->chan)
(460,*location++ = \'\\0\')
(461,ast_channel_caller(qe->chan)
(462,tmp->chan)
(463,location = strchr(tech, \'/\')
(464,RET)
(465,tmp->chan)
(466,valid)
(467,(*busies)
(468,member)
(469,qe->parent)
(470,ast_channel_cdr(qe->chan)
(471,chan)
(472,tmp->lastqueue)
(473,rrpos)
(474,tmp->chan)
(475,ast_channel_cdr(qe->chan)
(476,tmp)
(477,macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(478,ast_channel_caller(tmp->chan)
(479,time(NULL)
(480,qe)
(481,ast_channel_exten(qe->chan)
(482,tmp->dial_callerid_absent = 1)
(483,name)
(484,qe->chan)
(485,newstate)
(486,)
(487,tmp->chan)
(488,name)
(489,tmp->stillgoing)
(490,ast_channel_dialed(qe->chan)
(491,0)
(492,tmp)
(493,status)
(494,memset(ast_channel_whentohangup(tmp->chan)
(495,member)
(496,chan)
(497,qe)
(498,ast_channel_caller(tmp->chan)
(499,lastapp)
(500,parent)
(501,ast_channel_connected(qe->chan)
(502,)
(503,AST_DEVICE_NOT_INUSE)
(504,time(NULL)
(505,interface)
(506,ast_channel_cdr(qe->chan)
(507,tmp)
(508,qe->chan)
(509,!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL)
(510,ast_channel_cdr(tmp->chan)
(511,NULL)
(512,)
(513,(tmp->member->status != AST_DEVICE_NOT_INUSE)
(514,tmp->chan)
(515,tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan)
(516,sizeof(vars)
(517,ast_channel_cdr(tmp->chan)
(518,tmp->chan)
(519,ast_verb(3, "Couldn\'t call %s\\n", tmp->interface)
(520,qe->chan)
(521,return 0;)
(522,interface)
(523,ast_channel_dialed(qe->chan)
(524,ast_channel_cdr(qe->chan)
(525,chan)
(526,chan)
(527,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)
(528,tmp)
(529,chan)
(530,member)
(531,newstate = ast_device_state(tmp->member->interface)
(532,vars2manager(qe->chan, vars, sizeof(vars)
(533,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(534,QUEUE_EVENT_VARIABLES)
(535,qe)
(536,qe)
(537,dial_callerid_absent)
(538,cancel_answered_elsewhere)
(539,qe->chan)
(540,valid)
(541,)
(542,tmp)
(543,"MACRO_CONTEXT")
(544,check_state_unknown)
(545,qe->parent->wrapuptime)
(546,qe)
(547,chan)
(548,S_COR(ast_channel_connected(qe->chan)
(549,if (newstate != tmp->member->status)
(550,ast_channel_context(qe->chan)
(551,"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s")
(552,userfield)
(553,ast_channel_cdr(tmp->chan)
(554,chan)
(555,tech)
(556,qe)
(557,if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(558,if (!tmp->chan)
(559,chan)
(560,ast_channel_cdr(qe->chan)
(561,qe->chan)
(562,"")
(563,chan)
(564,qe)
(565,tmp)
(566,tmp)
(567,tmp->member)
(568,member)
(569,chan)
(570,ast_channel_connected(qe->chan)
(571,chan)
(572,tmp->chan)
(573,chan)
(574,tmp)
(575,qe->chan)
(576,newstate)
(577,ao2_unlock(qe->parent)
(578,)
(579,return 0;)
(580,qe->parent->name)
(581,ast_strlen_zero(macrocontext)
(582,qe)
(583,stillgoing)
(584,ast_channel_caller(qe->chan)
(585,tmp)
(586,ast_channel_nativeformats(qe->chan)
(587,ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(588,qe)
(589,qe->chan)
(590,qe)
(591,chan)
(592,tmp)
(593,tmp->member->membername)
(594,chan)
(595,tmp->lastqueue)
(596,tmp)
(597,time(NULL)
(598,tmp->interface)
(599,chan)
(600,qe->chan)
(601,tmp->stillgoing)
(602,)
(603,1)
(604,chan)
(605,name)
(606,location++)
(607,ast_debug(1, "%s paused, can\'t receive call\\n", tmp->interface)
(608,ast_channel_caller(qe->chan)
(609,ast_debug(1, "%s in use, can\'t receive call\\n", tmp->interface)
(610,ast_channel_cdr(qe->chan)
(611,ast_channel_macroexten(qe->chan)
(612,qe)
(613,valid)
(614,ast_channel_cdr(qe->chan)
(615,tmp->lastqueue->name)
(616,tmp->dial_callerid_absent)
(617,lastqueue)
(618,chan)
(619,0)
(620,ast_channel_connected(qe->chan)
(621,*busies)
(622,qe)
(623,tmp)
(624,ast_channel_connected(qe->chan)
(625,tmp)
(626,valid)
(627,qe)
(628,tmp)
(629,get_queue_member_status(tmp->member)
(630,member)
(631,ast_call(tmp->chan, location, 0)
(632,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES)
(633,ast_channel_dialed(qe->chan)
(634,ast_channel_dialed(qe->chan)
(635,tmp)
(636,tmp)
(637,if (ast_cdr_isset_unanswered()
(638,if (tmp->member->paused)
(639,tmp)
(640,ast_channel_connected(qe->chan)
(641,tmp->chan)
(642,time(NULL)
(643,)
(644,ast_devstate_changed_literal(newstate, AST_DEVSTATE_CACHABLE, tmp->member->interface)
(645,chan)
(646,lastdata)
(647,chan)
(648,qe->parent)
(649,tmp->chan)
(650,id)
(651,tmp->member->status)
(652,S_COR(ast_channel_caller(qe->chan)
(653,tmp)
(654,tmp->lastqueue)
(655,lastqueue)
(656,tmp->chan)
(657,EVENT_FLAG_AGENT)
(658,tmp)
(659,qe->chan)
(660,chan)
(661,ast_channel_connected(qe->chan)
(662,parent)
(663,)
(664,caller.id = ast_channel_connected(qe->chan)
(665,busies)
(666,(*busies)
(667,get_queue_member_status(tmp->member)
(668,qe->chan)
(669,0)
(670,tmp->member)
(671,!tmp->chan)
(672,NULL)
(673,dst)
(674,qe)
(675,channel)
(676,qe)
(677,"unknown")
(678,vars)
(679,check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(680,src)
(681,stillgoing)
(682,lastcall)
(683,)
(684,ast_channel_caller(tmp->chan)
(685,ast_request(tech, ast_channel_nativeformats(qe->chan)
(686,number)
(687,qe->chan)
(688,ast_channel_cdr(tmp->chan)
(689,qe)
(690,NULL)
(691,qe->chan)
(692,ast_channel_cdr(tmp->chan)
(693,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(694,member)
(695,qe)
(696,qe)
(697,return 0;)
(698,ast_channel_adsicpe(qe->chan)
(699,member)
(700,ast_channel_inherit_variables(qe->chan, tmp->chan)
(701,ast_channel_cdr(qe->chan)
(702,chan)
(703,tmp->member)
(704,qe)
(705,member)
(706,tmp->chan)
(707,clid)
(708,NULL)
(709,ast_channel_caller(qe->chan)
(710,chan)
(711,ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\\n",\n\\n\\t\\t\\t\\t(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(712,ast_channel_connected(qe->chan)
(713,stillgoing)
(714,&status)
(715,NULL)
(716,\'/\')
(717,chan)
(718,tmp->lastcall)
(719,ast_channel_context(qe->chan)
(720,qe)
(721,parent)
(722,qe)
(723,0)
(724,member)
(725,qe)
(726,parent)
(727,name)
(728,qe)
(729,tmp)
(730,tmp)
(731,id)
(732,if (!ast_strlen_zero(macroexten)
(733,qe)
(734,number)
(735,ast_channel_cdr(qe->chan)
(736,qe->parent)
(737,chan)
(738,qe)
(739,chan)
(740,chan)
(741,qe->chan)
(742,(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(743,chan)
(744,accountcode)
(745,linpos)
(746,0)
(747,valid)
(748,ast_channel_connected(qe->chan)
(749,tmp)
(750,qe)
(751,str)
(752,qe)
(753,if ((location = strchr(tech, \'/\')
(754,chan)
(755,location)
(756,ast_channel_cdr(tmp->chan)
(757,lastdata)
(758,newstate != tmp->member->status)
(759,tmp)
(760,chan)
(761,chan)
(762,0)
(763,channel)
(764,chan)
(765,ast_channel_caller(qe->chan)
(766,0)
(767,wrapuptime)
(768,chan)
(769,ast_channel_unlock(tmp->chan)
(770,status)
(771,tmp->chan)
(772,qe->chan)
(773,tmp->chan)
(774,chan)
(775,"(Outgoing Line)
(776,tmp->chan)
(777,ast_debug(1, "Priority queue delaying call to %s:%s\\n", qe->parent->name, tmp->interface)
(778,tmp->chan)
(779,if (!tmp->member->ringinuse)
(780,tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(781,qe->chan)
(782,)
(783,location)
(784,lastqueue)
(785,qe->parent)
(786,qe->parent)
(787,tmp->member->status != AST_DEVICE_NOT_INUSE)
(788,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(789,tmp->chan)
(790,number)
(791,tmp->member)
(792,qe)
(793,chan)
(794,use_weight && compare_weight(qe->parent,tmp->member)
(795,tmp->lastqueue)
(796,!tmp->lastqueue)
(797,tmp)
(798,tmp)
(799,ast_channel_connected(tmp->chan)
(800,tmp->chan)
(801,qe->chan)
(802,&caller)
(803,(*busies)
(804,chan)
(805,qe->parent->rrpos)
(806,ast_channel_dialed(qe->chan)
(807,if (qe->cancel_answered_elsewhere)
(808,tmp)
(809,tmp->member)
(810,caller)
(811,ast_channel_lock_both(tmp->chan, qe->chan)
(812,parent)
(813,1)
(814,qe)
(815,chan)
(816,ao2_lock(qe->parent)
(817,*busies)
(818,qe->parent)
(819,qe)
(820,AST_DEVICE_UNKNOWN)
(821,tmp->member)
(822,status)
(823,stillgoing)
(824,qe->parent)
(825,tmp)
(826,ast_channel_priority(qe->chan)
(827,lastqueue)
(828,ast_channel_connected(qe->chan)
(829,ast_channel_cdr(qe->chan)
(830,lastapp)
(831,qe)
(832,qe)
(833,name)
(834,chan)
(835,ast_channel_caller(qe->chan)
(836,qe->parent->wrapuptime && (time(NULL)
(837,tmp->chan)
(838,tmp->member)
(839,chan)
(840,ast_channel_connected(qe->chan)
(841,interface)
(842,parent)
(843,tmp->chan)
(844,wrapuptime)
(845,id)
(846,if ((tmp->member->status != AST_DEVICE_NOT_INUSE)
(847,tmp->member->status)
(848,chan)
(849,S_OR(ast_channel_macroexten(qe->chan)
(850,ast_channel_name(tmp->chan)
(851,S_COR(ast_channel_connected(qe->chan)
(852,qe->parent)
(853,tmp->member->ringinuse)
(854,ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext)
(855,qe->chan)
(856,S_OR(ast_channel_macroexten(qe->chan)
(857,sizeof(tech)
(858,ast_channel_connected(qe->chan)
(859,tmp->interface)
(860,qe->parent)
(861,tmp->member->status)
(862,(*busies)
(863,chan)
(864,tmp->member->interface)
(865,member)
(866,chan)
(867,strcpy(ast_channel_cdr(tmp->chan)
(868,chan)
(869,ast_channel_connected(qe->chan)
(870,parent)
(871,ast_channel_cdr(tmp->chan)
(872,*busies)
(873,macrocontext)
(874,qe->chan)
(875,chan)
(876,tmp->lastqueue->wrapuptime)
(877,ast_channel_cdr(tmp->chan)
(878,*busies)
(879,ast_channel_cdr(qe->chan)
(880,tmp)
(881,ast_channel_dialed(qe->chan)
(882,1)
(883,"Priority queue delaying call to %s:%s\\n")
(884,qe)
(885,tmp)
(886,pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(887,ast_cdr_busy(ast_channel_cdr(qe->chan)
(888,qe)
(889,(*busies)
(890,0)
(891,eventwhencalled)
(892,chan)
(893,"Found a channel matching iterface %s while status was %s changed to %s\\n")
(894,qe->parent->eventwhencalled)
(895,tmp)
(896,caller)
(897,return 1;)
(898,number)
(899,number)
(900,interface)
(901,qe)
(902,ast_channel_caller(qe->chan)
(903,location)
(904,tmp->lastqueue)
(905,macrocontext)
(906,ast_channel_cdr(qe->chan)
(907,qe->chan)
(908,tmp)
(909,tmp->chan)
(910,chan)
(911,tmp)
(912,tmp->chan)
(913,chan)
(914,tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(915,tmp->lastqueue->wrapuptime)
(916,ast_channel_cdr(qe->chan)
(917,ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\\n",\n\\n\\t\\t\\t\\t\\ttmp->member->interface, ast_devstate2str(tmp->member->status)
(918,ast_channel_connected(qe->chan)
(919,ani)
(920,parent)
(921,tmp)
(922,tmp)
(923,chan)
(924,ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan)
(925,qe->parent)
(926,ast_channel_connected(qe->chan)
(927,tmp->stillgoing = 0)
(928,qe->chan)
(929,"unknown")
(930,ast_channel_caller(qe->chan)
(931,ast_channel_whentohangup(tmp->chan)
(932,res = ast_call(tmp->chan, location, 0)
(933,ast_channel_caller(qe->chan)
(934,3)
(935,str)
(936,chan)
(937,clid)
(938,qe->chan)
(939,chan)
(940,tmp)
(941,tmp)
(942,tmp)
(943,lastcall)
(944,tmp)
(945,member)
(946,tmp)
(947,qe->chan)
(948,parent)
(949,ast_channel_cdr(qe->chan)
(950,status)
(951,qe->chan)
(952,*ast_channel_whentohangup(tmp->chan)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^