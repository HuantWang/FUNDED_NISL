-----label-----
0
-----code-----
static void good2()
{
    if(globalTrue)
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
101,102
103,104
103,105
104,105
106,107
107,108
107,109
108,109
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
117,120
117,121
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
126,128
127,128
127,129
128,129
133,134
134,135
134,136
135,136
135,137
136,137
136,138
137,138
142,143
143,144
143,145
144,145
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
157,158
158,159
158,160
159,160
161,162
-----nextToken-----
2,4,8,14,16,17,22,24,27,29,33,34,38,40,45,47,51,53,54,60,61,62,63,69,70,71,72,76,80,82,86,87,91,95,97,100,102,105,109,110,114,116,121,123,129,130,131,132,138,139,140,141,145,149,151,155,156,160,162
-----computeFrom-----
28,29
28,30
36,37
36,38
56,57
56,58
65,66
65,67
89,90
89,91
103,104
103,105
112,113
112,114
119,120
119,121
125,126
125,127
134,135
134,136
-----guardedBy-----
114,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(globalTrue)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(globalTrue)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(globalTrue)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
globalTrue
globalTrue
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(45,70,0)
(73,67,0)
(39,33,0)
(9,6,0)
(51,69,0)
(79,5,0)
(10,24,0)
(45,16,0)
(8,15,0)
(66,70,0)
(69,29,0)
(27,67,0)
(17,55,0)
(61,71,0)
(11,1,0)
(75,35,0)
(7,66,0)
(47,70,0)
(54,56,0)
(81,16,0)
(52,54,0)
(62,85,0)
(46,70,0)
(77,64,0)
(59,66,0)
(63,51,0)
(41,30,0)
(20,67,0)
(48,17,0)
(70,9,0)
(48,33,0)
(33,35,0)
(28,4,0)
(10,18,0)
(40,79,0)
(1,11,0)
(73,30,0)
(78,62,0)
(72,35,0)
(9,29,0)
(82,72,0)
(44,23,0)
(36,30,0)
(0,73,0)
(16,45,0)
(30,36,0)
(6,9,0)
(22,71,0)
(43,67,0)
(29,69,0)
(25,85,0)
(24,67,0)
(17,60,0)
(15,67,0)
(57,10,0)
(9,70,0)
(72,79,0)
(69,51,0)
(18,31,0)
(1,26,0)
(51,63,0)
(23,54,0)
(60,17,0)
(26,1,0)
(50,56,0)
(35,73,0)
(37,46,0)
(10,57,0)
(58,33,0)
(84,13,0)
(18,10,0)
(17,48,0)
(4,70,0)
(13,38,0)
(56,76,0)
(2,46,0)
(41,70,0)
(41,26,0)
(23,35,0)
(4,67,0)
(60,76,0)
(68,35,0)
(71,73,0)
(32,67,0)
(24,10,0)
(54,23,0)
(30,41,0)
(19,31,0)
(31,70,0)
(49,84,0)
(67,53,0)
(35,76,0)
(70,67,0)
(86,31,0)
(30,73,0)
(66,62,0)
(33,48,0)
(3,69,0)
(12,41,0)
(55,17,0)
(74,72,0)
(31,18,0)
(14,45,0)
(21,5,0)
(80,45,0)
(4,35,0)
(85,67,0)
(13,84,0)
(26,41,0)
(79,72,0)
(29,9,0)
(62,66,0)
(83,23,0)
(34,26,0)
(5,76,0)
(16,15,0)
(72,74,1)
(46,70,1)
(85,25,1)
(9,29,1)
(1,34,1)
(54,23,1)
(5,21,1)
(14,80,1)
(50,54,1)
(83,5,1)
(19,86,1)
(79,72,1)
(8,16,1)
(0,24,1)
(73,30,1)
(16,45,1)
(59,7,1)
(70,9,1)
(52,23,1)
(15,8,1)
(34,12,1)
(17,55,1)
(26,1,1)
(41,26,1)
(37,2,1)
(16,81,1)
(17,48,1)
(41,70,1)
(46,37,1)
(51,63,1)
(9,6,1)
(80,85,1)
(62,78,1)
(28,60,1)
(4,70,1)
(81,45,1)
(28,71,1)
(22,61,1)
(71,22,1)
(35,75,1)
(2,70,1)
(65,4,1)
(33,39,1)
(35,73,1)
(79,40,1)
(24,10,1)
(39,58,1)
(66,59,1)
(61,73,1)
(60,17,1)
(4,35,1)
(7,13,1)
(45,14,1)
(49,46,1)
(68,71,1)
(47,42,1)
(30,36,1)
(10,57,1)
(45,70,1)
(18,31,1)
(62,66,1)
(78,66,1)
(84,49,1)
(3,47,1)
(31,19,1)
(40,72,1)
(7,46,1)
(44,83,1)
(23,44,1)
(54,52,1)
(65,42,1)
(33,35,1)
(69,51,1)
(75,68,1)
(13,84,1)
(4,28,1)
(12,0,1)
(66,70,1)
(51,3,1)
(23,35,1)
(58,56,1)
(21,79,1)
(82,35,1)
(29,69,1)
(71,73,1)
(74,82,1)
(48,33,1)
(25,62,1)
(31,70,1)
(72,35,1)
(10,18,1)
(1,11,1)
(56,50,1)
(30,41,1)
(86,15,1)
(24,42,2)
(1,42,2)
(73,42,2)
(4,35,2)
(34,42,2)
(41,42,2)
(22,42,2)
(7,42,2)
(82,71,2)
(79,71,2)
(17,48,2)
(0,42,2)
(16,45,2)
(30,41,2)
(51,63,2)
(54,71,2)
(58,71,2)
(86,42,2)
(23,71,2)
(79,72,2)
(85,42,2)
(10,18,2)
(72,71,2)
(18,31,2)
(51,42,2)
(25,42,2)
(84,46,2)
(44,71,2)
(5,71,2)
(18,42,2)
(12,42,2)
(66,70,2)
(40,71,2)
(45,70,2)
(69,51,2)
(21,71,2)
(46,70,2)
(41,70,2)
(9,29,2)
(15,42,2)
(29,42,2)
(69,42,2)
(45,42,2)
(78,42,2)
(35,71,2)
(23,35,2)
(30,42,2)
(73,30,2)
(13,46,2)
(10,42,2)
(72,35,2)
(59,42,2)
(46,42,2)
(30,36,2)
(62,66,2)
(47,42,2)
(41,26,2)
(83,71,2)
(54,23,2)
(49,46,2)
(9,6,2)
(9,42,2)
(70,42,2)
(19,42,2)
(71,42,2)
(66,42,2)
(81,42,2)
(17,71,2)
(33,71,2)
(4,70,2)
(1,11,2)
(13,84,2)
(8,42,2)
(39,71,2)
(31,42,2)
(80,42,2)
(17,55,2)
(48,71,2)
(68,71,2)
(50,71,2)
(62,42,2)
(10,57,2)
(74,71,2)
(60,17,2)
(31,70,2)
(37,42,2)
(56,71,2)
(60,71,2)
(26,42,2)
(35,73,2)
(26,1,2)
(29,69,2)
(24,10,2)
(48,33,2)
(61,42,2)
(16,42,2)
(33,35,2)
(14,42,2)
(4,42,2)
(2,42,2)
(70,9,2)
(71,73,2)
(3,42,2)
(52,71,2)
(75,71,2)
(28,42,2)
-----------------------------------
(0,tmpData)
(1,sizeof(struct _twoIntsStruct)
(2,data)
(3,100)
(4,free(data)
(5,data[0].intOne = 1)
(6,struct _twoIntsStruct *)
(7,data)
(8,0)
(9,(struct _twoIntsStruct *)
(10,(twoIntsStruct *)
(11,struct _twoIntsStruct)
(12,data)
(13,exit(-1)
(14,0)
(15,data[0].intTwo = 0)
(16,data[0].intTwo)
(17,(twoIntsStruct *)
(18,&data[0])
(19,0)
(20,if (data == NULL)
(21,1)
(22,NULL)
(23,data[0])
(24,printStructLine((twoIntsStruct *)
(25,0)
(26,(130000)
(27,data)
(28,data)
(29,malloc(100*sizeof(struct _twoIntsStruct)
(30,(struct _twoIntsStruct *)
(31,data[0])
(32,if (tmpData != NULL)
(33,data[0])
(34,130000)
(35,data = tmpData)
(36,struct _twoIntsStruct *)
(37,NULL)
(38,)
(39,0)
(40,intOne)
(41,realloc(data, (130000)
(42,globalTrue)
(43,tmpData)
(44,0)
(45,data[0])
(46,data == NULL)
(47,data)
(48,&data[0])
(49,1)
(50,1)
(51,sizeof(struct _twoIntsStruct)
(52,intTwo)
(53,)
(54,data[0].intTwo)
(55,twoIntsStruct *)
(56,data[0].intTwo = 1)
(57,twoIntsStruct *)
(58,data)
(59,0)
(60,printStructLine((twoIntsStruct *)
(61,tmpData)
(62,data[0].intOne)
(63,struct _twoIntsStruct)
(64,)
(65,RET)
(66,data[0])
(67,)
(68,data)
(69,100*sizeof(struct _twoIntsStruct)
(70,* data = (struct _twoIntsStruct *)
(71,tmpData != NULL)
(72,data[0])
(73,tmpData = (struct _twoIntsStruct *)
(74,0)
(75,tmpData)
(76,)
(77,if(globalTrue)
(78,intOne)
(79,data[0].intOne)
(80,data)
(81,intTwo)
(82,data)
(83,data)
(84,-1)
(85,data[0].intOne = 0)
(86,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^