-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize then use data */
        strcpy(data, "a string");
        printLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
58,59
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,47,51,53,57,59
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "a string");
strcpy(data, "a string")
strcpy
strcpy
data
data
"a string"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,21,0)
(11,23,0)
(8,12,0)
(21,2,0)
(23,24,0)
(21,9,0)
(4,16,0)
(13,24,0)
(23,11,0)
(17,6,0)
(11,17,0)
(2,17,0)
(20,21,0)
(16,2,0)
(17,11,0)
(14,8,0)
(1,8,0)
(15,12,0)
(3,2,0)
(16,9,0)
(6,17,0)
(2,9,0)
(7,12,0)
(17,2,0)
(5,12,0)
(0,23,0)
(24,23,0)
(18,19,1)
(16,4,1)
(10,2,1)
(8,14,1)
(16,2,1)
(19,16,1)
(11,23,1)
(0,3,1)
(20,10,1)
(17,6,1)
(22,8,1)
(17,11,1)
(24,13,1)
(4,21,1)
(13,0,1)
(3,22,1)
(19,22,1)
(14,1,1)
(2,17,1)
(21,2,1)
(23,24,1)
(21,20,1)
(4,22,2)
(23,24,2)
(2,22,2)
(17,11,2)
(16,22,2)
(11,22,2)
(16,2,2)
(2,17,2)
(17,6,2)
(10,22,2)
(23,22,2)
(20,22,2)
(21,22,2)
(11,23,2)
(13,22,2)
(3,22,2)
(0,22,2)
(24,22,2)
(17,22,2)
(21,2,2)
-----------------------------------
(0,100)
(1,data)
(2,data = (char *)
(3,data)
(4,data)
(5,if(globalReturnsTrue()
(6,char *)
(7,data)
(8,data = NULL)
(9,)
(10,data)
(11,ALLOCA(100*sizeof(char)
(12,)
(13,char)
(14,NULL)
(15,if(globalReturnsTrue()
(16,printLine(data)
(17,(char *)
(18,RET)
(19,globalReturnsTrue()
(20,"a string")
(21,strcpy(data, "a string")
(22,globalReturnsTrue()
(23,100*sizeof(char)
(24,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^