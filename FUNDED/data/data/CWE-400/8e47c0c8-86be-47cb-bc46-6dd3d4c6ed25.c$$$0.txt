-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_15_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
72,73
72,74
72,75
72,76
72,77
72,78
72,79
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,71,74,78,80,84,85,86,87,91,92,93
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_15_bad(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_15_bad()
CWE400_Resource_Exhaustion__fgets_sleep_15_bad
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,13,0)
(19,45,0)
(37,45,0)
(28,8,0)
(29,11,0)
(20,6,0)
(10,44,0)
(22,8,0)
(44,38,0)
(26,7,0)
(27,2,0)
(36,8,0)
(42,2,0)
(40,11,0)
(6,26,0)
(46,6,0)
(45,19,0)
(38,44,0)
(25,28,0)
(21,7,0)
(45,6,0)
(30,7,0)
(39,0,0)
(47,30,0)
(4,8,0)
(16,36,0)
(15,38,0)
(13,2,0)
(48,19,0)
(34,2,0)
(38,11,0)
(5,11,0)
(14,8,0)
(32,7,0)
(14,38,0)
(24,7,0)
(23,14,0)
(19,18,0)
(3,7,0)
(12,39,0)
(2,6,0)
(43,8,0)
(41,13,0)
(17,8,0)
(31,26,0)
(14,19,0)
(1,26,0)
(9,43,1)
(14,23,1)
(38,44,1)
(12,13,1)
(23,35,1)
(42,34,1)
(20,33,1)
(39,12,1)
(9,4,1)
(3,30,1)
(6,46,1)
(14,38,1)
(16,35,1)
(2,27,1)
(47,33,1)
(33,38,1)
(45,37,1)
(41,2,1)
(48,13,1)
(46,20,1)
(36,16,1)
(43,28,1)
(35,3,1)
(35,21,1)
(44,10,1)
(37,48,1)
(2,6,1)
(30,47,1)
(34,6,1)
(14,19,1)
(13,41,1)
(19,45,1)
(28,25,1)
(10,15,1)
(21,19,1)
(4,36,1)
(45,6,1)
(25,14,1)
(13,2,1)
(21,39,1)
(27,42,1)
(30,33,2)
(6,33,2)
(38,44,2)
(19,45,2)
(45,6,2)
(39,13,2)
(19,13,2)
(43,35,2)
(37,13,2)
(3,33,2)
(2,33,2)
(14,38,2)
(48,13,2)
(28,35,2)
(12,13,2)
(41,33,2)
(25,35,2)
(13,2,2)
(23,35,2)
(36,35,2)
(14,19,2)
(34,33,2)
(27,33,2)
(42,33,2)
(46,33,2)
(4,35,2)
(45,13,2)
(13,33,2)
(21,33,2)
(14,35,2)
(20,33,2)
(47,33,2)
(16,35,2)
(2,6,2)
-----------------------------------
(0,)
(1,inputBuffer)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,break;)
(4,break;)
(5,count)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,)
(8,)
(9,RET)
(10,1)
(11,)
(12,"fgets()
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,SLEEP(count)
(15,count)
(16,"Benign, fixed string")
(17,case 7:)
(18,)
(19,count = atoi(inputBuffer)
(20,inputBuffer)
(21,break;)
(22,default:)
(23,count)
(24,default:)
(25,"Sleep time possibly too long")
(26,)
(27,stdin)
(28,printLine("Sleep time possibly too long")
(29,switch(7)
(30,printLine("Benign, fixed string")
(31,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,case 6:)
(33,6)
(34,inputBuffer)
(35,7)
(36,printLine("Benign, fixed string")
(37,inputBuffer)
(38,count = -1)
(39,printLine("fgets()
(40,switch(6)
(41,NULL)
(42,CHAR_ARRAY_SIZE)
(43,break;)
(44,-1)
(45,atoi(inputBuffer)
(46,"")
(47,"Benign, fixed string")
(48,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^