-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
42,45
43,44
45,46
47,48
47,49
49,50
50,51
50,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
68,69
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,48,51,52,56,58,63,65,69,71,72,76,78,82,84
-----computeFrom-----
28,29
28,30
34,35
34,36
47,48
47,49
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__char_realloc_44_bad()
CWE401_Memory_Leak__char_realloc_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(32,15,0)
(1,25,0)
(34,27,0)
(22,12,0)
(26,31,0)
(4,14,0)
(26,1,0)
(1,15,0)
(19,25,0)
(11,15,0)
(9,2,0)
(25,19,0)
(21,18,0)
(1,26,0)
(18,21,0)
(2,26,0)
(14,2,0)
(28,12,0)
(20,2,0)
(21,0,0)
(26,2,0)
(27,12,0)
(5,25,0)
(24,17,0)
(3,9,0)
(31,26,0)
(9,12,0)
(7,17,0)
(2,12,0)
(27,2,0)
(17,12,0)
(30,12,0)
(16,9,0)
(22,2,0)
(15,12,0)
(29,19,0)
(25,1,0)
(10,12,0)
(8,14,0)
(33,18,0)
(23,1,0)
(13,22,0)
(16,21,1)
(18,33,1)
(7,24,1)
(20,15,1)
(26,31,1)
(25,19,1)
(22,2,1)
(14,4,1)
(11,17,1)
(2,26,1)
(27,2,1)
(32,11,1)
(13,9,1)
(9,3,1)
(15,32,1)
(16,14,1)
(21,18,1)
(34,22,1)
(8,2,1)
(1,15,1)
(3,16,1)
(23,20,1)
(22,13,1)
(26,1,1)
(19,29,1)
(9,2,1)
(1,25,1)
(29,5,1)
(4,8,1)
(5,23,1)
(17,7,1)
(6,27,1)
(33,14,1)
(14,2,1)
(27,34,1)
(26,1,2)
(22,2,2)
(25,19,2)
(2,26,2)
(33,14,2)
(26,31,2)
(9,2,2)
(21,14,2)
(27,2,2)
(18,14,2)
(21,18,2)
(1,15,2)
(1,25,2)
(14,2,2)
-----------------------------------
(0,)
(1,realloc(data, 100*sizeof(char)
(2,data = (char *)
(3,"A String")
(4,NULL)
(5,100)
(6,RET)
(7,badSink)
(8,data)
(9,strcpy(data, "A String")
(10,funcPtr)
(11,data)
(12,)
(13,data)
(14,data == NULL)
(15,data = NULL)
(16,data)
(17,(*funcPtr)
(18,-1)
(19,sizeof(char)
(20,data)
(21,exit(-1)
(22,printLine(data)
(23,data)
(24,funcPtr)
(25,100*sizeof(char)
(26,(char *)
(27,funcPtr(data)
(28,if (data == NULL)
(29,char)
(30,data)
(31,char *)
(32,NULL)
(33,1)
(34,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^