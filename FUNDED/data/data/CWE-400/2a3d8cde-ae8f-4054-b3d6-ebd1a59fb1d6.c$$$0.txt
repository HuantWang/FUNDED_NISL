-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
53,54
54,55
55,56
55,57
56,57
59,60
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,29,30,32,36,39,41,45,47,51,52,57,58,63,65
-----computeFrom-----
13,14
13,15
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(1,8,0)
(16,19,0)
(2,8,0)
(10,20,0)
(5,15,0)
(12,0,0)
(0,19,0)
(17,26,0)
(1,19,0)
(19,24,0)
(8,2,0)
(29,1,0)
(31,10,0)
(18,26,0)
(4,22,0)
(21,27,0)
(9,30,0)
(8,19,0)
(25,27,0)
(28,30,0)
(23,0,0)
(30,26,0)
(22,30,0)
(7,15,0)
(22,8,0)
(3,8,0)
(14,2,0)
(6,26,0)
(22,11,0)
(2,0,0)
(14,3,1)
(27,25,1)
(9,28,1)
(30,9,1)
(15,5,1)
(7,1,1)
(3,0,1)
(25,21,1)
(1,8,1)
(23,12,1)
(8,2,1)
(22,4,1)
(2,0,1)
(29,8,1)
(13,10,1)
(2,14,1)
(10,31,1)
(13,22,1)
(21,30,1)
(22,8,1)
(12,27,1)
(4,15,1)
(0,23,1)
(31,15,1)
(5,7,1)
(22,30,1)
(7,27,1)
(1,29,1)
(22,8,2)
(8,2,2)
(10,15,2)
(8,27,2)
(23,27,2)
(2,27,2)
(1,27,2)
(22,30,2)
(22,15,2)
(4,15,2)
(2,0,2)
(31,15,2)
(0,27,2)
(14,27,2)
(12,27,2)
(29,27,2)
(1,8,2)
(3,27,2)
-----------------------------------
(0,myString[] = "myString")
(1,printLine(data)
(2,strdup(myString)
(3,data)
(4,data)
(5,5)
(6,if(GLOBAL_CONST_FIVE==5)
(7,GLOBAL_CONST_FIVE)
(8,data = strdup(myString)
(9,NULL)
(10,printLine("Benign, fixed string")
(11,)
(12,myString)
(13,RET)
(14,myString)
(15,GLOBAL_CONST_FIVE!=5)
(16,myString)
(17,if(GLOBAL_CONST_FIVE!=5)
(18,data)
(19,)
(20,)
(21,GLOBAL_CONST_FIVE)
(22,free(data)
(23,"myString")
(24,)
(25,5)
(26,)
(27,GLOBAL_CONST_FIVE==5)
(28,data)
(29,data)
(30,data = NULL)
(31,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^