-----label-----
1
-----code-----
static int init_des3_ctr(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc) {
  struct des3_ctr_ex *dce;

  dce = EVP_CIPHER_CTX_get_app_data(ctx);
  if (dce == NULL) {

    /* Allocate our data structure. */
    dce = calloc(1, sizeof(struct des3_ctr_ex));
    if (dce == NULL) {
      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");
      _exit(1);
    }

    /* Simple test to see if we're on a big- or little-endian machine:
     * on big-endian machines, the ntohl() et al will be no-ops.
     */
    dce->big_endian = (ntohl(1234) == 1234);

    EVP_CIPHER_CTX_set_app_data(ctx, dce);
  }

  if (key != NULL) {
    register unsigned int i;
    unsigned char *ptr;

    ptr = (unsigned char *) key;

    for (i = 0; i < 3; i++) {
      DES_cblock material[8];
      memcpy(material, ptr, 8);
      ptr += 8;

      DES_set_key_unchecked(material, &(dce->sched[i]));
    }
  }

  if (iv != NULL) {
    memcpy(dce->counter, iv, 8);
  }

  return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
23,24
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
81,82
82,83
82,84
83,84
83,85
84,85
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
103,104
104,105
104,106
106,107
108,109
109,110
109,111
111,112
111,113
114,115
115,116
115,117
116,117
118,119
118,120
119,120
119,121
121,122
123,124
125,126
125,127
125,128
125,129
126,127
127,128
127,129
128,129
131,132
131,133
132,133
135,136
136,137
138,139
138,140
138,141
138,142
139,140
140,141
140,142
141,142
143,144
143,145
145,146
147,148
148,149
148,150
148,151
148,152
149,150
151,152
153,154
156,157
157,158
157,159
158,159
161,162
162,163
162,164
162,165
163,164
165,166
167,168
168,169
169,170
169,171
170,171
170,172
171,172
174,175
176,177
176,178
177,178
177,179
178,179
180,181
182,183
183,184
184,185
184,186
184,187
184,188
185,186
187,188
187,189
188,189
191,192
194,195
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,22,24,29,31,32,36,39,41,45,47,52,55,56,60,61,65,67,73,74,79,80,85,86,87,91,93,95,99,101,105,107,110,112,113,117,120,122,124,129,130,133,134,137,142,144,146,150,152,154,155,159,160,164,166,172,173,175,179,181,186,189,190,192,193,195
-----computeFrom-----
34,35
34,36
43,44
43,45
50,51
50,52
63,64
63,65
76,77
76,78
82,83
82,84
97,98
97,99
115,116
115,117
127,128
127,129
131,132
131,133
157,158
157,159
177,178
177,179
-----guardedBy-----
47,67
45,95
99,124
179,192
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int init_des3_ctr(EVP_CIPHER_CTX *ctx, const unsigned char *key,    const unsigned char *iv, int enc) {  struct des3_ctr_ex *dce;  dce = EVP_CIPHER_CTX_get_app_data(ctx);  if (dce == NULL) {    /* Allocate our data structure. */    dce = calloc(1, sizeof(struct des3_ctr_ex));    if (dce == NULL) {      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    /* Simple test to see if we're on a big- or little-endian machine:     * on big-endian machines, the ntohl() et al will be no-ops.     */    dce->big_endian = (ntohl(1234) == 1234);    EVP_CIPHER_CTX_set_app_data(ctx, dce);  }  if (key != NULL) {    register unsigned int i;    unsigned char *ptr;    ptr = (unsigned char *) key;    for (i = 0; i < 3; i++) {      DES_cblock material[8];      memcpy(material, ptr, 8);      ptr += 8;      DES_set_key_unchecked(material, &(dce->sched[i]));    }  }  if (iv != NULL) {    memcpy(dce->counter, iv, 8);  }  return 1;}
static int
init_des3_ctr(EVP_CIPHER_CTX *ctx, const unsigned char *key,    const unsigned char *iv, int enc)
init_des3_ctr
EVP_CIPHER_CTX *ctx
EVP_CIPHER_CTX
EVP_CIPHER_CTX
*ctx
*
ctx
const unsigned char *key
const unsigned char
*key
*
key
const unsigned char *iv
const unsigned char
*iv
*
iv
int enc
int
enc
enc
{  struct des3_ctr_ex *dce;  dce = EVP_CIPHER_CTX_get_app_data(ctx);  if (dce == NULL) {    /* Allocate our data structure. */    dce = calloc(1, sizeof(struct des3_ctr_ex));    if (dce == NULL) {      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    /* Simple test to see if we're on a big- or little-endian machine:     * on big-endian machines, the ntohl() et al will be no-ops.     */    dce->big_endian = (ntohl(1234) == 1234);    EVP_CIPHER_CTX_set_app_data(ctx, dce);  }  if (key != NULL) {    register unsigned int i;    unsigned char *ptr;    ptr = (unsigned char *) key;    for (i = 0; i < 3; i++) {      DES_cblock material[8];      memcpy(material, ptr, 8);      ptr += 8;      DES_set_key_unchecked(material, &(dce->sched[i]));    }  }  if (iv != NULL) {    memcpy(dce->counter, iv, 8);  }  return 1;}
struct des3_ctr_ex *dce;
struct des3_ctr_ex *dce;
struct des3_ctr_ex
des3_ctr_ex
*dce
*
dce
dce = EVP_CIPHER_CTX_get_app_data(ctx);
dce = EVP_CIPHER_CTX_get_app_data(ctx)
dce
dce
EVP_CIPHER_CTX_get_app_data(ctx)
EVP_CIPHER_CTX_get_app_data
EVP_CIPHER_CTX_get_app_data
ctx
ctx
if (dce == NULL) {    /* Allocate our data structure. */    dce = calloc(1, sizeof(struct des3_ctr_ex));    if (dce == NULL) {      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    /* Simple test to see if we're on a big- or little-endian machine:     * on big-endian machines, the ntohl() et al will be no-ops.     */    dce->big_endian = (ntohl(1234) == 1234);    EVP_CIPHER_CTX_set_app_data(ctx, dce);  }
dce == NULL
dce
dce
NULL
NULL
{    /* Allocate our data structure. */    dce = calloc(1, sizeof(struct des3_ctr_ex));    if (dce == NULL) {      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    /* Simple test to see if we're on a big- or little-endian machine:     * on big-endian machines, the ntohl() et al will be no-ops.     */    dce->big_endian = (ntohl(1234) == 1234);    EVP_CIPHER_CTX_set_app_data(ctx, dce);  }
dce = calloc(1, sizeof(struct des3_ctr_ex));
dce = calloc(1, sizeof(struct des3_ctr_ex))
dce
dce
calloc(1, sizeof(struct des3_ctr_ex))
calloc
calloc
1
sizeof(struct des3_ctr_ex)
struct des3_ctr_ex
struct des3_ctr_ex
des3_ctr_ex

if (dce == NULL) {      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }
dce == NULL
dce
dce
NULL
NULL
{      pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }
pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");
_exit(1);
_exit(1)
_exit
_exit
1
dce->big_endian = (ntohl(1234) == 1234);
dce->big_endian = (ntohl(1234) == 1234)
dce->big_endian
dce
dce
big_endian
(ntohl(1234) == 1234)
ntohl(1234) == 1234
ntohl(1234)
ntohl
ntohl
1234
1234
EVP_CIPHER_CTX_set_app_data(ctx, dce);
EVP_CIPHER_CTX_set_app_data(ctx, dce)
EVP_CIPHER_CTX_set_app_data
EVP_CIPHER_CTX_set_app_data
ctx
ctx
dce
dce
if (key != NULL) {    register unsigned int i;    unsigned char *ptr;    ptr = (unsigned char *) key;    for (i = 0; i < 3; i++) {      DES_cblock material[8];      memcpy(material, ptr, 8);      ptr += 8;      DES_set_key_unchecked(material, &(dce->sched[i]));    }  }
key != NULL
key
key
NULL
NULL
{    register unsigned int i;    unsigned char *ptr;    ptr = (unsigned char *) key;    for (i = 0; i < 3; i++) {      DES_cblock material[8];      memcpy(material, ptr, 8);      ptr += 8;      DES_set_key_unchecked(material, &(dce->sched[i]));    }  }
register unsigned int i;
register unsigned int i;
register unsigned int
i
i
unsigned char *ptr;
unsigned char *ptr;
unsigned char
*ptr
*
ptr
ptr = (unsigned char *) key;
ptr = (unsigned char *) key
ptr
ptr
(unsigned char *) key
unsigned char *
unsigned char
*
*
key
key
for (i = 0; i < 3; i++) {      DES_cblock material[8];      memcpy(material, ptr, 8);      ptr += 8;      DES_set_key_unchecked(material, &(dce->sched[i]));    }
i = 0;
i = 0
i
i
0
i < 3
i
i
3
i++
i
i
{      DES_cblock material[8];      memcpy(material, ptr, 8);      ptr += 8;      DES_set_key_unchecked(material, &(dce->sched[i]));    }
DES_cblock material[8];
DES_cblock material[8];
DES_cblock
DES_cblock
material[8]
material
[8]
8
memcpy(material, ptr, 8);
memcpy(material, ptr, 8)
memcpy
memcpy
material
material
ptr
ptr
8
ptr += 8;
ptr += 8
ptr
ptr
8
DES_set_key_unchecked(material, &(dce->sched[i]));
DES_set_key_unchecked(material, &(dce->sched[i]))
DES_set_key_unchecked
DES_set_key_unchecked
material
material
&(dce->sched[i])
(dce->sched[i])
dce->sched[i]
dce->sched
dce
dce
sched
i
i
if (iv != NULL) {    memcpy(dce->counter, iv, 8);  }
iv != NULL
iv
iv
NULL
NULL
{    memcpy(dce->counter, iv, 8);  }
memcpy(dce->counter, iv, 8);
memcpy(dce->counter, iv, 8)
memcpy
memcpy
dce->counter
dce
dce
counter
iv
iv
8
return 1;
1
-----joern-----
(87,23,0)
(76,80,0)
(52,22,0)
(47,58,0)
(6,80,0)
(45,85,0)
(87,31,0)
(13,57,0)
(16,42,0)
(55,68,0)
(42,42,0)
(7,86,0)
(24,44,0)
(67,39,0)
(66,68,0)
(12,20,0)
(26,7,0)
(80,27,0)
(88,74,0)
(17,56,0)
(30,53,0)
(68,22,0)
(54,28,0)
(9,5,0)
(71,76,0)
(84,41,0)
(2,53,0)
(58,34,0)
(57,8,0)
(20,38,0)
(83,5,0)
(10,2,0)
(86,38,0)
(15,43,0)
(30,42,0)
(44,76,0)
(61,30,0)
(41,34,0)
(69,34,0)
(34,36,0)
(58,66,0)
(49,58,0)
(25,18,0)
(82,30,0)
(30,7,0)
(66,36,0)
(70,76,0)
(19,35,0)
(89,1,0)
(50,30,0)
(1,89,0)
(86,4,0)
(62,44,0)
(46,31,0)
(71,54,0)
(76,74,0)
(32,36,0)
(4,86,0)
(85,31,0)
(77,18,0)
(7,5,0)
(37,54,0)
(33,31,0)
(42,7,0)
(54,71,0)
(65,74,0)
(59,20,0)
(18,31,0)
(72,86,0)
(29,53,0)
(44,34,0)
(87,44,0)
(23,87,0)
(75,39,0)
(41,36,0)
(64,57,0)
(78,5,0)
(2,23,0)
(60,89,0)
(0,54,0)
(21,42,0)
(51,43,0)
(68,66,0)
(56,73,0)
(22,68,0)
(23,2,0)
(43,76,0)
(54,8,0)
(11,87,0)
(48,74,0)
(1,3,0)
(35,74,0)
(81,35,0)
(86,7,0)
(34,89,0)
(41,27,0)
(14,71,0)
(71,34,0)
(40,74,0)
(39,34,0)
(3,1,0)
(35,58,0)
(44,87,0)
(63,41,0)
(89,34,0)
(42,53,0)
(79,71,0)
(80,76,0)
(2,23,1)
(54,8,1)
(44,24,1)
(37,0,1)
(14,79,1)
(52,58,1)
(33,46,1)
(77,31,1)
(50,82,1)
(71,34,1)
(23,87,1)
(62,10,1)
(84,66,1)
(86,4,1)
(61,18,1)
(51,76,1)
(57,8,1)
(85,31,1)
(26,20,1)
(86,72,1)
(20,38,1)
(18,25,1)
(64,18,1)
(19,35,1)
(72,26,1)
(21,30,1)
(18,31,1)
(76,80,1)
(47,49,1)
(87,44,1)
(15,51,1)
(79,57,1)
(68,55,1)
(0,71,1)
(34,89,1)
(46,7,1)
(66,68,1)
(1,60,1)
(59,12,1)
(75,67,1)
(69,43,1)
(35,81,1)
(81,54,1)
(22,52,1)
(68,22,1)
(16,21,1)
(60,69,1)
(42,42,1)
(10,42,1)
(42,16,1)
(77,85,1)
(87,31,1)
(49,39,1)
(17,39,1)
(49,56,1)
(81,57,1)
(13,64,1)
(35,58,1)
(30,42,1)
(55,22,1)
(80,27,1)
(80,6,1)
(89,1,1)
(56,17,1)
(42,7,1)
(67,34,1)
(1,3,1)
(57,13,1)
(12,41,1)
(54,71,1)
(54,37,1)
(39,34,1)
(85,45,1)
(82,61,1)
(11,44,1)
(64,20,1)
(30,7,1)
(44,76,1)
(24,62,1)
(43,76,1)
(87,11,1)
(63,84,1)
(6,70,1)
(43,15,1)
(41,27,1)
(41,34,1)
(25,77,1)
(41,63,1)
(71,14,1)
(58,47,1)
(39,75,1)
(71,76,1)
(86,38,1)
(12,43,1)
(31,33,1)
(7,86,1)
(44,34,1)
(58,34,1)
(30,50,1)
(45,2,1)
(20,59,1)
(25,18,2)
(21,18,2)
(63,43,2)
(35,58,2)
(42,7,2)
(82,18,2)
(37,57,2)
(80,27,2)
(89,1,2)
(22,43,2)
(68,22,2)
(57,8,2)
(33,20,2)
(69,43,2)
(77,20,2)
(26,20,2)
(41,27,2)
(44,34,2)
(18,20,2)
(86,38,2)
(61,18,2)
(54,57,2)
(67,43,2)
(43,76,2)
(71,76,2)
(24,18,2)
(19,35,2)
(34,89,2)
(34,43,2)
(44,18,2)
(68,43,2)
(56,39,2)
(7,86,2)
(85,31,2)
(44,76,2)
(16,18,2)
(47,43,2)
(30,18,2)
(87,31,2)
(20,38,2)
(14,57,2)
(2,18,2)
(42,42,2)
(71,57,2)
(54,71,2)
(41,34,2)
(85,18,2)
(23,87,2)
(77,18,2)
(86,20,2)
(18,18,2)
(10,18,2)
(17,39,2)
(50,18,2)
(41,43,2)
(89,43,2)
(23,18,2)
(55,43,2)
(84,43,2)
(42,18,2)
(39,34,2)
(62,18,2)
(39,43,2)
(52,43,2)
(86,4,2)
(87,44,2)
(1,43,2)
(54,8,2)
(0,57,2)
(25,20,2)
(71,34,2)
(76,80,2)
(30,7,2)
(18,31,2)
(66,43,2)
(60,43,2)
(2,23,2)
(1,3,2)
(87,18,2)
(58,43,2)
(30,42,2)
(72,20,2)
(11,18,2)
(66,68,2)
(45,18,2)
(7,20,2)
(75,43,2)
(31,20,2)
(49,43,2)
(79,57,2)
(46,20,2)
(58,34,2)
-----------------------------------
(0,iv)
(1,sizeof(struct des3_ctr_ex)
(2,DES_set_key_unchecked(material, &(dce->sched[i])
(3,struct des3_ctr_ex)
(4,unsigned char *)
(5,)
(6,ctx)
(7,ptr = (unsigned char *)
(8,const unsigned char *iv)
(9,for (i = 0; i < 3; i++)
(10,material)
(11,i)
(12,key)
(13,NULL)
(14,counter)
(15,NULL)
(16,8)
(17,1)
(18,i < 3)
(19,RET)
(20,key != NULL)
(21,ptr)
(22,ntohl(1234)
(23,&(dce->sched[i])
(24,sched)
(25,3)
(26,ptr)
(27,EVP_CIPHER_CTX *ctx)
(28,)
(29,material)
(30,memcpy(material, ptr, 8)
(31,i = 0)
(32,if (dce == NULL)
(33,0)
(34,dce = calloc(1, sizeof(struct des3_ctr_ex)
(35,return 1;)
(36,)
(37,8)
(38,const unsigned char *key)
(39,dce == NULL)
(40,dce)
(41,EVP_CIPHER_CTX_set_app_data(ctx, dce)
(42,ptr += 8)
(43,dce == NULL)
(44,dce->sched)
(45,i)
(46,i)
(47,big_endian)
(48,if (iv != NULL)
(49,dce)
(50,8)
(51,dce)
(52,1234)
(53,)
(54,memcpy(dce->counter, iv, 8)
(55,1234)
(56,_exit(1)
(57,iv != NULL)
(58,dce->big_endian)
(59,NULL)
(60,1)
(61,material)
(62,dce)
(63,dce)
(64,iv)
(65,if (dce == NULL)
(66,dce->big_endian = (ntohl(1234)
(67,dce)
(68,ntohl(1234)
(69,dce)
(70,dce)
(71,dce->counter)
(72,key)
(73,)
(74,)
(75,NULL)
(76,dce = EVP_CIPHER_CTX_get_app_data(ctx)
(77,i)
(78,i)
(79,dce)
(80,EVP_CIPHER_CTX_get_app_data(ctx)
(81,1)
(82,ptr)
(83,ptr)
(84,ctx)
(85,i++)
(86,(unsigned char *)
(87,dce->sched[i])
(88,if (key != NULL)
(89,calloc(1, sizeof(struct des3_ctr_ex)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^