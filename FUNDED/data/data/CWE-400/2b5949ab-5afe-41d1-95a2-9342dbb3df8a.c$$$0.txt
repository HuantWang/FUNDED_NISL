-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,72,76,77,81,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(42,10,0)
(4,33,0)
(40,14,0)
(31,14,0)
(39,17,0)
(38,20,0)
(5,1,0)
(29,23,0)
(20,32,0)
(44,33,0)
(33,1,0)
(6,30,0)
(30,29,0)
(8,44,0)
(32,16,0)
(31,1,0)
(16,18,0)
(1,19,0)
(35,11,0)
(21,16,0)
(22,43,0)
(16,21,0)
(41,9,0)
(20,1,0)
(13,20,0)
(43,17,0)
(44,7,0)
(19,1,0)
(16,32,0)
(29,30,0)
(12,43,0)
(9,0,0)
(30,15,0)
(14,9,0)
(19,34,0)
(24,11,0)
(25,33,0)
(37,17,0)
(33,44,0)
(15,19,0)
(32,20,0)
(1,0,0)
(28,31,0)
(18,16,0)
(7,0,0)
(14,31,0)
(2,31,0)
(18,0,0)
(27,10,0)
(3,7,0)
(19,15,0)
(34,19,0)
(36,17,0)
(23,29,0)
(15,30,0)
(26,10,1)
(35,24,1)
(30,29,1)
(25,4,1)
(42,18,1)
(40,31,1)
(38,13,1)
(2,7,1)
(15,30,1)
(18,16,1)
(44,33,1)
(7,3,1)
(14,31,1)
(4,1,1)
(20,1,1)
(16,32,1)
(14,40,1)
(10,27,1)
(12,22,1)
(43,12,1)
(20,38,1)
(16,21,1)
(11,35,1)
(33,25,1)
(8,33,1)
(41,14,1)
(28,2,1)
(33,1,1)
(19,15,1)
(31,28,1)
(31,1,1)
(9,41,1)
(6,5,1)
(13,9,1)
(29,23,1)
(44,8,1)
(42,11,1)
(32,20,1)
(3,44,1)
(27,42,1)
(24,43,1)
(1,19,1)
(5,11,1)
(19,34,1)
(29,6,1)
(8,11,2)
(2,11,2)
(3,11,2)
(19,11,2)
(16,32,2)
(4,11,2)
(44,11,2)
(44,33,2)
(25,11,2)
(9,11,2)
(14,11,2)
(1,19,2)
(20,11,2)
(38,11,2)
(20,1,2)
(18,11,2)
(30,29,2)
(19,15,2)
(33,1,2)
(31,1,2)
(1,11,2)
(32,20,2)
(29,23,2)
(33,11,2)
(7,11,2)
(40,11,2)
(30,11,2)
(6,11,2)
(41,11,2)
(15,11,2)
(29,11,2)
(19,34,2)
(16,11,2)
(28,11,2)
(15,30,2)
(18,16,2)
(32,11,2)
(13,11,2)
(16,21,2)
(5,11,2)
(31,11,2)
(14,31,2)
-----------------------------------
(0,)
(1,data = (struct _twoIntsStruct *)
(2,data)
(3,0)
(4,data)
(5,data)
(6,100)
(7,data[0].intOne = 0)
(8,intOne)
(9,data[0].intTwo = 0)
(10,GLOBAL_CONST_FIVE==5)
(11,GLOBAL_CONST_FIVE==5)
(12,NULL)
(13,data)
(14,data[0].intTwo)
(15,ALLOCA(100*sizeof(struct _twoIntsStruct)
(16,(twoIntsStruct *)
(17,)
(18,printStructLine((twoIntsStruct *)
(19,(struct _twoIntsStruct *)
(20,data[0])
(21,twoIntsStruct *)
(22,data)
(23,struct _twoIntsStruct)
(24,GLOBAL_CONST_FIVE)
(25,0)
(26,RET)
(27,5)
(28,0)
(29,sizeof(struct _twoIntsStruct)
(30,100*sizeof(struct _twoIntsStruct)
(31,data[0])
(32,&data[0])
(33,data[0])
(34,struct _twoIntsStruct *)
(35,5)
(36,if(GLOBAL_CONST_FIVE==5)
(37,data)
(38,0)
(39,if(GLOBAL_CONST_FIVE==5)
(40,intTwo)
(41,0)
(42,GLOBAL_CONST_FIVE)
(43,data = NULL)
(44,data[0].intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^