-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,99
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,18,0)
(9,52,0)
(12,42,0)
(31,24,0)
(22,8,0)
(52,36,0)
(51,52,0)
(9,26,0)
(4,39,0)
(40,52,0)
(16,29,0)
(27,6,0)
(27,36,0)
(8,53,0)
(46,51,0)
(11,23,0)
(21,30,0)
(41,36,0)
(45,6,0)
(53,8,0)
(30,29,0)
(2,3,0)
(18,9,0)
(7,28,0)
(29,30,0)
(19,3,0)
(15,42,0)
(5,26,0)
(28,52,0)
(51,46,0)
(14,6,0)
(23,33,0)
(37,52,0)
(38,51,0)
(52,9,0)
(13,36,0)
(17,33,0)
(45,40,0)
(35,39,0)
(23,26,0)
(44,28,0)
(34,46,0)
(50,40,0)
(6,14,0)
(30,41,0)
(0,24,0)
(1,39,0)
(53,25,0)
(33,17,0)
(49,51,0)
(33,23,0)
(26,9,0)
(6,45,0)
(20,29,0)
(46,47,0)
(29,52,0)
(47,36,0)
(43,47,0)
(10,40,0)
(42,39,0)
(6,27,0)
(40,45,0)
(26,42,0)
(32,41,0)
(26,23,0)
(29,16,1)
(33,11,1)
(34,51,1)
(37,3,1)
(28,52,1)
(22,28,1)
(32,30,1)
(8,22,1)
(31,3,1)
(9,26,1)
(12,15,1)
(45,40,1)
(20,53,1)
(31,27,1)
(26,23,1)
(0,31,1)
(21,29,1)
(38,49,1)
(2,19,1)
(28,7,1)
(19,42,1)
(52,9,1)
(49,41,1)
(43,46,1)
(51,38,1)
(50,47,1)
(46,34,1)
(30,29,1)
(47,43,1)
(6,45,1)
(16,20,1)
(5,37,1)
(10,50,1)
(3,2,1)
(29,52,1)
(41,32,1)
(30,21,1)
(46,51,1)
(7,44,1)
(40,52,1)
(33,17,1)
(40,10,1)
(20,28,1)
(27,6,1)
(11,5,1)
(51,52,1)
(48,24,1)
(44,52,1)
(53,8,1)
(26,42,1)
(9,18,1)
(6,14,1)
(24,0,1)
(23,33,1)
(42,12,1)
(37,3,2)
(20,3,2)
(8,28,2)
(46,3,2)
(21,3,2)
(32,3,2)
(53,8,2)
(50,3,2)
(45,40,2)
(23,33,2)
(40,52,2)
(53,28,2)
(9,3,2)
(27,3,2)
(28,52,2)
(29,3,2)
(26,23,2)
(22,28,2)
(51,52,2)
(26,3,2)
(9,18,2)
(23,3,2)
(38,3,2)
(49,3,2)
(33,3,2)
(27,6,2)
(11,3,2)
(41,3,2)
(44,3,2)
(26,42,2)
(46,51,2)
(7,3,2)
(52,9,2)
(43,3,2)
(34,3,2)
(40,3,2)
(6,45,2)
(47,3,2)
(52,3,2)
(6,3,2)
(45,3,2)
(9,26,2)
(28,3,2)
(30,29,2)
(6,14,2)
(51,3,2)
(33,17,2)
(10,3,2)
(30,3,2)
(5,3,2)
(16,3,2)
(29,52,2)
-----------------------------------
(0,5)
(1,if(GLOBAL_CONST_FIVE==5)
(2,5)
(3,GLOBAL_CONST_FIVE==5)
(4,if(GLOBAL_CONST_FIVE==5)
(5,data)
(6,(twoIntsStruct *)
(7,NULL)
(8,-1)
(9,(struct _twoIntsStruct *)
(10,0)
(11,100)
(12,NULL)
(13,if (data == NULL)
(14,twoIntsStruct *)
(15,data)
(16,0)
(17,struct _twoIntsStruct)
(18,struct _twoIntsStruct *)
(19,GLOBAL_CONST_FIVE)
(20,data)
(21,intOne)
(22,1)
(23,100*sizeof(struct _twoIntsStruct)
(24,GLOBAL_CONST_FIVE==5)
(25,)
(26,realloc(data, 100*sizeof(struct _twoIntsStruct)
(27,printStructLine((twoIntsStruct *)
(28,data == NULL)
(29,data[0])
(30,data[0].intOne)
(31,GLOBAL_CONST_FIVE)
(32,0)
(33,sizeof(struct _twoIntsStruct)
(34,intTwo)
(35,data)
(36,)
(37,data)
(38,0)
(39,)
(40,data[0])
(41,data[0].intOne = 0)
(42,data = NULL)
(43,0)
(44,data)
(45,&data[0])
(46,data[0].intTwo)
(47,data[0].intTwo = 0)
(48,RET)
(49,data)
(50,data)
(51,data[0])
(52,data = (struct _twoIntsStruct *)
(53,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^