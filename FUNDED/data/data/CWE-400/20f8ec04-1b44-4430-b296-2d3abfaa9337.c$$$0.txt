-----label-----
0
-----code-----
static void good1()
{
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            char * tmpData;
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            tmpData = (char *)realloc(data, (130000)*sizeof(char));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
19,20
20,21
20,22
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
56,57
56,58
59,60
60,61
60,62
60,63
61,62
63,64
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
79,80
81,82
81,83
81,84
82,83
84,85
86,87
86,88
87,88
89,90
90,91
90,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
99,101
99,102
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
107,110
108,109
110,111
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,9,10,15,16,21,23,24,28,30,33,35,38,39,43,45,50,52,55,57,58,62,64,65,69,71,75,78,80,83,85,88,91,92,96,98,103,105,109,111,112,116,118,122,124
-----computeFrom-----
7,8
7,9
34,35
34,36
41,42
41,43
73,74
73,75
86,87
86,88
94,95
94,96
101,102
101,103
-----guardedBy-----
96,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
static void
good1()
good1
{    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
char * tmpData;
char * tmpData;
char
* tmpData
*
tmpData
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
tmpData = (char *)realloc(data, (130000)*sizeof(char));
tmpData = (char *)realloc(data, (130000)*sizeof(char))
tmpData
tmpData
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(34,41,0)
(59,38,0)
(30,38,0)
(16,49,0)
(33,24,0)
(16,32,0)
(23,47,0)
(45,25,0)
(39,40,0)
(2,49,0)
(14,39,0)
(56,59,0)
(55,32,0)
(22,25,0)
(28,43,0)
(6,1,0)
(38,49,0)
(51,43,0)
(17,40,0)
(15,30,0)
(21,38,0)
(13,38,0)
(13,36,0)
(43,39,0)
(43,40,0)
(24,8,0)
(19,55,0)
(27,17,0)
(9,36,0)
(49,38,0)
(32,55,0)
(39,8,0)
(36,4,0)
(32,16,0)
(20,7,0)
(29,36,0)
(41,57,0)
(21,36,0)
(5,24,0)
(8,47,0)
(58,59,0)
(49,2,0)
(47,23,0)
(10,35,0)
(8,36,0)
(18,21,0)
(3,36,0)
(26,21,0)
(47,25,0)
(1,6,0)
(30,36,0)
(42,13,0)
(25,38,0)
(30,39,0)
(44,39,0)
(6,48,0)
(50,22,0)
(25,22,0)
(37,8,0)
(53,1,0)
(47,8,0)
(46,50,0)
(17,39,0)
(25,47,0)
(12,36,0)
(38,36,0)
(0,22,0)
(49,16,0)
(52,38,0)
(22,50,0)
(11,32,0)
(31,35,0)
(30,15,1)
(11,52,1)
(5,8,1)
(21,38,1)
(49,16,1)
(39,8,1)
(18,59,1)
(30,39,1)
(59,38,1)
(55,19,1)
(17,39,1)
(22,50,1)
(43,51,1)
(35,10,1)
(42,21,1)
(0,45,1)
(14,24,1)
(6,1,1)
(56,38,1)
(45,37,1)
(58,56,1)
(46,0,1)
(17,27,1)
(16,32,1)
(25,22,1)
(1,53,1)
(39,44,1)
(13,38,1)
(47,25,1)
(51,28,1)
(18,6,1)
(32,55,1)
(34,35,1)
(43,39,1)
(59,58,1)
(13,42,1)
(41,34,1)
(26,18,1)
(49,2,1)
(53,59,1)
(15,17,1)
(27,43,1)
(54,41,1)
(30,38,1)
(44,14,1)
(10,31,1)
(38,49,1)
(19,11,1)
(33,5,1)
(24,33,1)
(8,47,1)
(54,30,1)
(25,38,1)
(21,26,1)
(52,35,1)
(15,24,1)
(24,8,1)
(47,23,1)
(37,13,1)
(50,46,1)
(28,39,1)
(19,35,2)
(42,35,2)
(30,38,2)
(45,35,2)
(13,38,2)
(22,35,2)
(21,35,2)
(25,35,2)
(43,24,2)
(37,35,2)
(58,35,2)
(17,39,2)
(46,35,2)
(26,35,2)
(32,35,2)
(56,35,2)
(8,35,2)
(30,35,2)
(27,24,2)
(44,24,2)
(59,35,2)
(13,35,2)
(59,38,2)
(24,8,2)
(38,35,2)
(53,59,2)
(25,22,2)
(47,23,2)
(8,47,2)
(39,24,2)
(47,35,2)
(49,35,2)
(39,8,2)
(38,49,2)
(30,39,2)
(43,39,2)
(22,50,2)
(25,38,2)
(5,35,2)
(28,24,2)
(11,35,2)
(49,16,2)
(6,1,2)
(51,24,2)
(6,59,2)
(50,35,2)
(15,35,2)
(17,24,2)
(16,32,2)
(33,35,2)
(41,35,2)
(32,55,2)
(49,2,2)
(55,35,2)
(0,35,2)
(52,35,2)
(47,25,2)
(1,59,2)
(16,35,2)
(21,38,2)
(14,24,2)
(18,35,2)
(34,35,2)
(24,35,2)
-----------------------------------
(0,130000)
(1,-1)
(2,char *)
(3,data)
(4,)
(5,tmpData)
(6,exit(-1)
(7,)
(8,tmpData = (char *)
(9,if (data == NULL)
(10,5)
(11,100)
(12,tmpData)
(13,printLine(data)
(14,data)
(15,data)
(16,malloc(100*sizeof(char)
(17,printLine(data)
(18,data)
(19,char)
(20,if(GLOBAL_CONST_FIVE!=5)
(21,strcpy(data, "A String")
(22,(130000)
(23,char *)
(24,tmpData != NULL)
(25,realloc(data, (130000)
(26,"A String")
(27,data)
(28,data)
(29,if (tmpData != NULL)
(30,free(data)
(31,GLOBAL_CONST_FIVE)
(32,100*sizeof(char)
(33,NULL)
(34,"Benign, fixed string")
(35,GLOBAL_CONST_FIVE!=5)
(36,)
(37,tmpData)
(38,* data = (char *)
(39,data = tmpData)
(40,)
(41,printLine("Benign, fixed string")
(42,data)
(43,strcpy(data, "New String")
(44,tmpData)
(45,data)
(46,char)
(47,(char *)
(48,)
(49,(char *)
(50,sizeof(char)
(51,"New String")
(52,data)
(53,1)
(54,RET)
(55,sizeof(char)
(56,data)
(57,)
(58,NULL)
(59,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^