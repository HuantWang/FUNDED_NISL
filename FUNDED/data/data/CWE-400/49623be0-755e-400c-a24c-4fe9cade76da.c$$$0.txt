-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_good.txt";
        /* FIX: Validate count before using it as the for loop variant to write to a file */
        if (count > 0 && count <= 20)
        {
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
    break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
43,44
43,45
44,45
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
54,55
54,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
62,65
65,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
91,92
91,93
91,94
92,93
94,95
97,98
97,99
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
109,110
109,111
109,112
109,113
110,111
111,112
111,113
112,113
115,116
115,117
116,117
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
128,129
129,130
129,131
130,131
130,132
131,132
131,133
132,133
134,135
136,137
136,138
136,139
136,140
136,141
137,138
139,140
141,142
142,143
142,144
145,146
145,147
146,147
148,149
150,151
152,153
153,154
153,155
154,155
157,158
157,159
158,159
160,161
161,162
162,163
162,164
163,164
165,166
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,38,41,45,46,47,48,53,55,57,61,63,64,67,70,72,73,75,80,81,84,85,90,93,95,96,100,102,107,108,113,114,117,121,122,124,127,133,135,138,140,143,144,147,149,151,155,156,159,164,166,167
-----computeFrom-----
12,13
12,14
23,24
23,25
77,78
77,79
78,79
78,80
82,83
82,84
88,89
88,90
98,99
98,100
111,112
111,113
115,116
115,117
130,131
130,132
-----guardedBy-----
84,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
-----joern-----
(61,10,0)
(79,50,0)
(62,4,0)
(70,45,0)
(54,88,0)
(31,41,0)
(56,11,0)
(41,38,0)
(57,64,0)
(9,48,0)
(66,59,0)
(81,66,0)
(1,59,0)
(78,10,0)
(11,56,0)
(32,4,0)
(85,50,0)
(10,61,0)
(70,11,0)
(8,35,0)
(12,42,0)
(36,45,0)
(64,16,0)
(70,4,0)
(15,10,0)
(28,60,0)
(65,56,0)
(49,15,0)
(35,8,0)
(69,68,0)
(46,68,0)
(91,16,0)
(73,88,0)
(33,88,0)
(29,84,0)
(90,91,0)
(16,68,0)
(17,50,0)
(3,88,0)
(53,58,0)
(34,79,0)
(55,16,0)
(56,45,0)
(45,48,0)
(66,79,0)
(43,71,0)
(10,66,0)
(51,79,0)
(77,39,0)
(20,21,0)
(84,88,0)
(4,88,0)
(80,71,0)
(27,48,0)
(39,4,0)
(47,59,0)
(44,48,0)
(58,66,0)
(24,16,0)
(63,66,0)
(42,39,0)
(39,74,0)
(35,10,0)
(6,59,0)
(50,16,0)
(21,68,0)
(87,76,0)
(22,64,0)
(56,4,0)
(23,70,0)
(19,8,0)
(25,63,0)
(39,42,0)
(72,61,0)
(45,76,0)
(7,58,0)
(5,80,0)
(79,66,0)
(76,45,0)
(18,16,0)
(75,68,0)
(74,39,0)
(11,70,0)
(37,91,0)
(10,35,0)
(39,45,0)
(63,52,0)
(4,62,0)
(83,16,0)
(30,68,0)
(67,70,0)
(89,86,0)
(82,56,0)
(42,71,0)
(13,71,0)
(10,15,0)
(14,10,0)
(49,14,1)
(7,53,1)
(91,37,1)
(82,65,1)
(40,45,1)
(11,56,1)
(58,66,1)
(86,89,1)
(39,45,1)
(75,21,1)
(14,8,1)
(58,7,1)
(87,36,1)
(72,15,1)
(4,62,1)
(35,8,1)
(17,91,1)
(70,67,1)
(56,4,1)
(2,73,1)
(51,34,1)
(10,61,1)
(10,15,1)
(41,31,1)
(35,10,1)
(80,5,1)
(76,87,1)
(21,20,1)
(30,0,1)
(32,40,1)
(10,78,1)
(25,0,1)
(90,64,1)
(8,19,1)
(10,66,1)
(30,63,1)
(70,45,1)
(73,84,1)
(84,29,1)
(63,25,1)
(81,11,1)
(13,43,1)
(62,32,1)
(42,39,1)
(30,11,1)
(5,35,1)
(12,80,1)
(64,22,1)
(20,2,1)
(0,42,1)
(31,58,1)
(45,76,1)
(65,70,1)
(33,4,1)
(79,50,1)
(71,13,1)
(39,74,1)
(12,71,1)
(56,45,1)
(43,58,1)
(78,61,1)
(61,72,1)
(42,71,1)
(26,75,1)
(50,85,1)
(2,33,1)
(57,2,1)
(80,71,1)
(5,86,1)
(43,41,1)
(77,12,1)
(70,4,1)
(66,79,1)
(79,51,1)
(63,66,1)
(29,40,1)
(19,42,1)
(22,57,1)
(56,82,1)
(39,77,1)
(39,4,1)
(34,81,1)
(53,66,1)
(85,17,1)
(89,35,1)
(26,30,1)
(11,70,1)
(67,23,1)
(23,50,1)
(37,90,1)
(15,49,1)
(62,40,2)
(0,11,2)
(25,0,2)
(63,66,2)
(20,2,2)
(13,11,2)
(10,15,2)
(5,42,2)
(79,50,2)
(53,11,2)
(90,2,2)
(23,2,2)
(39,11,2)
(39,45,2)
(35,42,2)
(63,0,2)
(58,66,2)
(31,58,2)
(8,42,2)
(39,42,2)
(42,11,2)
(45,76,2)
(80,42,2)
(17,2,2)
(71,11,2)
(43,11,2)
(70,45,2)
(42,39,2)
(66,11,2)
(70,2,2)
(77,42,2)
(56,70,2)
(81,11,2)
(32,40,2)
(4,62,2)
(49,42,2)
(58,11,2)
(42,42,2)
(19,42,2)
(21,2,2)
(57,2,2)
(22,2,2)
(11,56,2)
(37,2,2)
(15,42,2)
(50,2,2)
(10,61,2)
(91,2,2)
(42,71,2)
(10,66,2)
(82,70,2)
(39,4,2)
(56,4,2)
(4,40,2)
(80,71,2)
(12,42,2)
(75,2,2)
(39,74,2)
(66,79,2)
(78,42,2)
(67,2,2)
(77,11,2)
(70,4,2)
(11,2,2)
(35,10,2)
(84,40,2)
(11,70,2)
(86,35,2)
(7,11,2)
(61,42,2)
(56,45,2)
(35,8,2)
(72,42,2)
(30,2,2)
(12,11,2)
(29,40,2)
(14,42,2)
(10,42,2)
(41,58,2)
(34,11,2)
(33,40,2)
(85,2,2)
(65,70,2)
(51,11,2)
(89,35,2)
(64,2,2)
(73,40,2)
(79,11,2)
-----------------------------------
(0,pFile)
(1,if (pFile == NULL)
(2,8)
(3,default:)
(4,count = RAND32()
(5,i)
(6,if (pFile)
(7,NULL)
(8,strlen(SENTENCE)
(9,count)
(10,fwrite(SENTENCE, sizeof(char)
(11,count > 0 && count <= 20)
(12,i)
(13,0)
(14,SENTENCE)
(15,sizeof(char)
(16,)
(17,filename)
(18,i)
(19,SENTENCE)
(20,"Benign, fixed string")
(21,printLine("Benign, fixed string")
(22,0)
(23,count)
(24,pFile)
(25,pFile)
(26,RET)
(27,switch(8)
(28,if (strlen(SENTENCE)
(29,"Benign, fixed string")
(30,break;)
(31,1)
(32,count)
(33,break;)
(34,filename)
(35,strlen(SENTENCE)
(36,count)
(37,NULL)
(38,)
(39,(size_t)
(40,6)
(41,exit(1)
(42,i < (size_t)
(43,i)
(44,switch(6)
(45,count = -1)
(46,case 7:)
(47,for (i = 0; i < (size_t)
(48,)
(49,char)
(50,*filename = "output_good.txt")
(51,"w+")
(52,)
(53,pFile)
(54,case 6:)
(55,if (count > 0 && count <= 20)
(56,count <= 20)
(57,i)
(58,pFile == NULL)
(59,)
(60,)
(61,strlen(SENTENCE)
(62,RAND32()
(63,fclose(pFile)
(64,i = 0)
(65,count)
(66,pFile = fopen(filename, "w+")
(67,0)
(68,)
(69,default:)
(70,count > 0)
(71,i = 0)
(72,SENTENCE)
(73,break;)
(74,size_t)
(75,break;)
(76,-1)
(77,count)
(78,pFile)
(79,fopen(filename, "w+")
(80,i++)
(81,pFile)
(82,20)
(83,filename)
(84,printLine("Benign, fixed string")
(85,"output_good.txt")
(86,exit(1)
(87,1)
(88,)
(89,1)
(90,pFile)
(91,*pFile = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^