-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,69,70,75,77
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }
5==5
5
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(15,3,0)
(31,12,0)
(30,6,0)
(28,3,0)
(18,21,0)
(33,34,0)
(0,3,0)
(2,33,0)
(27,11,0)
(7,31,0)
(23,8,0)
(29,24,0)
(31,10,0)
(1,34,0)
(11,16,0)
(36,6,0)
(22,21,0)
(33,17,0)
(14,16,0)
(24,5,0)
(11,17,0)
(23,10,0)
(12,31,0)
(10,23,0)
(19,29,0)
(33,13,0)
(9,20,0)
(6,17,0)
(26,17,0)
(4,20,0)
(24,29,0)
(8,23,0)
(35,34,0)
(10,31,0)
(25,12,0)
(23,17,0)
(34,3,0)
(17,23,0)
(17,16,0)
(11,27,1)
(36,30,1)
(21,18,1)
(26,21,1)
(33,2,1)
(10,31,1)
(9,4,1)
(6,36,1)
(32,20,1)
(22,34,1)
(2,20,1)
(25,7,1)
(1,35,1)
(4,21,1)
(24,29,1)
(19,6,1)
(17,23,1)
(34,1,1)
(18,22,1)
(33,17,1)
(27,6,1)
(23,10,1)
(32,33,1)
(6,17,1)
(11,17,1)
(29,19,1)
(30,17,1)
(33,34,1)
(12,25,1)
(27,24,1)
(20,9,1)
(7,26,1)
(4,11,1)
(31,12,1)
(23,8,1)
(36,21,2)
(33,34,2)
(33,20,2)
(7,21,2)
(23,21,2)
(26,21,2)
(29,6,2)
(6,17,2)
(31,21,2)
(10,31,2)
(25,21,2)
(33,17,2)
(10,21,2)
(31,12,2)
(23,10,2)
(27,21,2)
(11,17,2)
(19,6,2)
(30,21,2)
(17,21,2)
(2,20,2)
(17,23,2)
(11,21,2)
(24,6,2)
(6,21,2)
(12,21,2)
(23,8,2)
(24,29,2)
-----------------------------------
(0,data)
(1,NULL)
(2,data)
(3,)
(4,5)
(5,)
(6,data == NULL)
(7,100)
(8,wchar_t *)
(9,5)
(10,malloc(100*sizeof(wchar_t)
(11,printWLine(data)
(12,sizeof(wchar_t)
(13,)
(14,if (data == NULL)
(15,if(5==5)
(16,)
(17,data = (wchar_t *)
(18,5)
(19,1)
(20,5==5)
(21,5==5)
(22,5)
(23,(wchar_t *)
(24,exit(-1)
(25,wchar_t)
(26,data)
(27,data)
(28,if(5==5)
(29,-1)
(30,data)
(31,100*sizeof(wchar_t)
(32,RET)
(33,free(data)
(34,data = NULL)
(35,data)
(36,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^