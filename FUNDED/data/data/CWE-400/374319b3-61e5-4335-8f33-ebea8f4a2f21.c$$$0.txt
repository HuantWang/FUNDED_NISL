-----label-----
0
-----code-----
static void goodG2B1()
{
    int64_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
21,22
24,25
25,26
26,27
26,28
27,28
30,31
30,32
30,33
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,29,34,38,40,43,45,49,50,55,56,57,61,64,65,69,70,72
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
44,45
44,46
52,53
52,54
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int64_t * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int64_t * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,22,0)
(29,3,0)
(28,23,0)
(18,6,0)
(7,6,0)
(31,13,0)
(10,30,0)
(30,22,0)
(4,27,0)
(20,29,0)
(13,9,0)
(1,14,0)
(12,14,0)
(11,26,0)
(22,9,0)
(8,3,0)
(26,13,0)
(16,0,0)
(25,6,0)
(22,5,0)
(17,4,0)
(24,3,0)
(2,23,0)
(30,0,0)
(9,13,0)
(6,30,0)
(19,29,0)
(21,3,0)
(13,26,0)
(5,22,0)
(22,30,0)
(6,18,0)
(18,0,0)
(7,25,1)
(31,10,1)
(22,9,1)
(30,22,1)
(10,23,1)
(2,28,1)
(12,1,1)
(19,20,1)
(28,29,1)
(22,5,1)
(17,23,1)
(6,30,1)
(16,30,1)
(23,2,1)
(1,4,1)
(26,11,1)
(6,7,1)
(18,6,1)
(14,12,1)
(25,16,1)
(1,18,1)
(15,14,1)
(4,17,1)
(13,26,1)
(9,13,1)
(29,19,1)
(11,31,1)
(18,23,2)
(13,23,2)
(6,23,2)
(10,23,2)
(30,22,2)
(9,23,2)
(22,5,2)
(26,23,2)
(9,13,2)
(4,23,2)
(18,6,2)
(11,23,2)
(31,23,2)
(13,26,2)
(7,23,2)
(17,23,2)
(22,23,2)
(25,23,2)
(6,30,2)
(16,23,2)
(22,9,2)
(30,23,2)
-----------------------------------
(0,)
(1,STATIC_CONST_FIVE)
(2,5)
(3,)
(4,printLine("Benign, fixed string")
(5,int64_t *)
(6,data[0])
(7,0)
(8,if(STATIC_CONST_FIVE!=5)
(9,ALLOCA(100*sizeof(int64_t)
(10,data)
(11,int64_t)
(12,5)
(13,100*sizeof(int64_t)
(14,STATIC_CONST_FIVE==5)
(15,RET)
(16,L)
(17,"Benign, fixed string")
(18,printLongLongLine(data[0])
(19,NULL)
(20,data)
(21,data)
(22,(int64_t *)
(23,STATIC_CONST_FIVE!=5)
(24,if(STATIC_CONST_FIVE==5)
(25,data)
(26,sizeof(int64_t)
(27,)
(28,STATIC_CONST_FIVE)
(29,data = NULL)
(30,data = (int64_t *)
(31,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^