-----label-----
0
-----code-----
int
handle_value_request(u_char *packet, int size,
		     char *address, u_short port,
		     u_int8_t *schemes, u_int16_t ssize)

{
        struct packet_sub parts[] = {
	     { "Exchange Value", FLD_VARPRE, 0, 0, },
	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },
	     { NULL }
	};
	struct packet vr_msg = {
	     "Value Request",
	     VALUE_REQUEST_MIN, 0, parts
	};
	struct value_request *header;
	struct stateob *st;
	BIGNUM *test, *gen, *mod;
	u_int8_t *p, *modp, *refp, *genp = NULL;
	size_t sstart, vsize, modsize, modpsize, refpsize;
	int modflag;
	u_int8_t scheme_ref[2];
	u_int8_t rcookie[COOKIE_SIZE];

	if (size < VALUE_REQUEST_MIN)
	     return -1;	/* packet too small  */

	if (packet_check(packet, size, &vr_msg) == -1) {
	     log_print("bad packet structure in handle_value_request()");
	     return -1;
	}

	header = (struct value_request *) packet;

	st = state_find_cookies(address, header->icookie, header->rcookie);
	if (st == NULL) {
	     struct stateob tempst;
	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 
	     tempst.initiator = 0;                   /* We are the Responder */ 
	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 
	     strncpy(tempst.address, address, 15); 
	     tempst.port = global_port; 
	     tempst.counter = header->counter;
	     
	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 

	     /* Check for invalid cookie */
	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {
		  packet_size = PACKET_BUFFER_SIZE;
		  photuris_error_message(&tempst, packet_buffer, &packet_size,
					 header->icookie, header->rcookie,
					 header->counter, BAD_COOKIE);
		  send_packet();
		  return 0;
	     }

	     /* Check exchange value - XXX doesn't check long form */
	     vsize = parts[0].size;

	     /* Check schemes - selected length is in exchange value*/
	     sstart = 0;
	     modflag = 0;
	     refp = modp = NULL;
	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));
	     while (sstart < ssize) {
		  p = scheme_get_mod(schemes + sstart);
		  modsize = varpre2octets(p);
		  if (!bcmp(header->scheme, schemes + sstart, 2)) {
		       modflag = 1;
		       if (modsize == vsize) {
			    genp = scheme_get_gen(schemes+sstart);
			    modp = p;
			    modpsize = modsize;
			    break;  /* On right scheme + right size */
		       } else if (modsize <= 2 && refp != NULL) {
			    modp = refp;
			    modpsize = refpsize;
			    break;
		       }
		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&
			     modsize == vsize) {
		       genp = scheme_get_gen(schemes + sstart);
		       if (modflag) {
			    modp = p;
			    modpsize = modsize;
			    break;
		       }
		       refp = p;
		       refpsize = modsize;
		  }
		  
		  sstart += scheme_get_len(schemes+sstart);
	     }
	     if (sstart >= ssize)
		  return -1;   /* Did not find a scheme - XXX log */

	     /* now check the exchange value */
	     test = BN_new();
	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {
		     BN_free(test);
		     return (-1);
	     }

	     mod = BN_new();
	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {
		     BN_free(test);
		     BN_free(mod);
		     return (-1);
	     }

	     gen = BN_new();
	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||
		 !exchange_check_value(test, gen, mod)) {
		  BN_free(test);
		  BN_free(gen);
		  BN_free(mod);
		  return 0;
	     }
	     BN_free(test);
	     BN_free(gen);
	     BN_free(mod);

	     if ((st = state_new()) == NULL)
		  return -1;

	     /* Default options */
	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;

	     /* Fill the state object */
	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));
             if (st->uSPIoattrib == NULL) {
                  state_value_reset(st);
		  return -1;
	     }
             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);  
             st->uSPIoattribsize = parts[1].size;  

	     /* Save scheme, which will be used by both parties */
	     vsize = 2 + varpre2octets(modp);

	     /* XXX - VPN - only support two octets */
	     if (genp != NULL)
		  vsize += 2 + varpre2octets(genp);

	     st->scheme = calloc(vsize, sizeof(u_int8_t));
	     if (st->scheme == NULL) {
                  state_value_reset(st); 
                  return -1; 
             } 
             bcopy(header->scheme, st->scheme, 2);
	     if (genp != NULL) {
		  st->scheme[2] = (vsize-4) >> 8;
		  st->scheme[3] = (vsize-4) & 0xFF;
		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));
	     }
	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),
		   varpre2octets(modp));;
		   
             st->schemesize = vsize;

#ifdef DEBUG
	     {
		  int i = BUFFER_SIZE;
		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));
		  printf("Got exchange value 0x%s\n", buffer);
	     }
#endif

	     /* Set exchange value */
	     st->texchangesize = parts[0].size;
	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));
	     if (st->texchange == NULL) {
		  log_error("calloc() in handle_value_request()");
		  return -1;
	     }
	     bcopy(parts[0].where, st->texchange, st->texchangesize);


	     /* Fill in the state object with generic data */
             strncpy(st->address, address, 15);  
             st->port = port;  
	     st->counter = header->counter;
             bcopy(header->icookie, st->icookie, COOKIE_SIZE);  
             bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  
	     bcopy(&header->counter, st->uSPITBV, 3);

	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {
		  state_value_reset(st);
		  return -1;
	     }
	     bcopy(schemes, st->roschemes, ssize);
	     st->roschemesize = ssize;

	     if (pick_attrib(st, &(st->oSPIoattrib), 
			     &(st->oSPIoattribsize)) == -1) {
		  state_value_reset(st);
		  return -1;
	     }

	     st->lifetime = exchange_timeout + time(NULL);

	     /* Now put the filled state object in the chain */
	     state_insert(st);
	}
	     
	packet_size = PACKET_BUFFER_SIZE;
	if (photuris_value_response(st, packet_buffer, &packet_size) == -1)
	     return -1;

	send_packet();

        /* Compute the shared secret now */
        compute_shared_secret(st, &(st->shared), &(st->sharedsize));
#ifdef DEBUG   
	{
	     int i = BUFFER_SIZE;
	     bin2hex(buffer, &i, st->shared, st->sharedsize);
	     printf("Shared secret is: 0x%s\n", buffer);   
	}
#endif   

	if (st->oSPIprivacyctx == NULL) {
	     /* Initialize Privacy Keys from Exchange Values */
	     init_privacy_key(st, 0);   /* User -> Owner direction */
	     init_privacy_key(st, 1);   /* Owner -> User direction */
	}

	st->retries = 0;
	st->phase = VALUE_RESPONSE;
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
28,30
31,32
31,33
32,33
34,35
36,37
36,38
36,39
36,40
36,41
36,42
36,43
36,44
36,45
36,46
36,47
36,48
36,49
36,50
36,51
36,52
36,53
36,54
36,55
36,56
36,57
36,58
36,59
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
45,48
46,47
46,48
46,49
46,50
48,49
52,53
52,54
52,55
52,56
54,55
56,57
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
69,72
69,73
71,72
74,75
76,77
77,78
77,79
78,79
80,81
80,82
83,84
84,85
84,86
85,86
87,88
87,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
94,96
97,98
97,99
100,101
100,102
103,104
104,105
104,106
104,107
104,108
104,109
105,106
107,108
107,109
110,111
110,112
113,114
113,115
116,117
116,118
116,119
119,120
120,121
122,123
123,124
123,125
123,126
123,127
123,128
123,129
124,125
126,127
128,129
130,131
132,133
134,135
136,137
137,138
137,139
139,140
141,142
142,143
142,144
143,144
145,146
145,147
147,148
149,150
150,151
150,152
151,152
153,154
153,155
155,156
156,157
158,159
158,160
159,160
159,161
160,161
162,163
164,165
165,166
167,168
167,169
168,169
168,170
169,170
169,171
169,172
169,173
170,171
172,173
174,175
176,177
177,178
179,180
181,182
181,183
182,183
183,184
183,185
184,185
187,188
188,189
190,191
191,192
191,193
192,193
194,195
194,196
195,196
195,197
196,197
198,199
200,201
202,203
203,204
203,205
204,205
206,207
206,208
206,209
206,210
207,208
209,210
211,212
211,213
212,213
215,216
215,217
216,217
219,220
219,221
220,221
220,222
221,222
223,224
225,226
225,227
225,228
225,229
225,230
225,231
225,232
225,233
225,234
225,235
225,236
225,237
225,238
225,239
225,240
225,241
225,242
225,243
225,244
225,245
225,246
225,247
225,248
225,249
225,250
225,251
225,252
225,253
225,254
225,255
225,256
225,257
225,258
225,259
225,260
225,261
225,262
225,263
225,264
225,265
225,266
225,267
225,268
225,269
225,270
225,271
225,272
225,273
225,274
225,275
225,276
225,277
225,278
225,279
225,280
225,281
226,227
227,228
227,229
228,229
230,231
232,233
233,234
233,235
233,236
234,235
236,237
236,238
237,238
237,239
239,240
241,242
242,243
244,245
245,246
246,247
248,249
249,250
249,251
250,251
250,252
251,252
255,256
256,257
256,258
256,259
256,260
257,258
259,260
259,261
260,261
263,264
263,265
264,265
267,268
269,270
270,271
270,272
270,273
270,274
271,272
273,274
273,275
274,275
277,278
280,281
281,282
281,283
282,283
282,284
283,284
286,287
288,289
289,290
289,291
290,291
290,292
291,292
294,295
294,296
295,296
298,299
299,300
299,301
299,302
299,303
299,304
299,305
300,301
302,303
303,304
305,306
307,308
309,310
311,312
313,314
313,315
314,315
314,316
314,317
314,318
315,316
317,318
319,320
319,321
320,321
323,324
325,326
325,327
325,328
325,329
326,327
327,328
327,329
328,329
330,331
332,333
333,334
333,335
333,336
333,337
333,338
333,339
333,340
333,341
334,335
336,337
337,338
339,340
341,342
342,343
344,345
344,346
345,346
348,349
348,350
349,350
352,353
352,354
353,354
356,357
358,359
359,360
360,361
362,363
364,365
365,366
365,367
366,367
368,369
368,370
369,370
369,371
370,371
374,375
375,376
375,377
376,377
379,380
380,381
380,382
381,382
384,385
385,386
385,387
386,387
388,389
388,390
389,390
391,392
393,394
394,395
394,396
395,396
396,397
396,398
397,398
397,399
398,399
400,401
402,403
404,405
404,406
405,406
407,408
407,409
408,409
410,411
410,412
411,412
414,415
414,416
415,416
415,417
416,417
418,419
420,421
420,422
420,423
420,424
421,422
422,423
422,424
423,424
425,426
425,427
426,427
428,429
428,430
429,430
431,432
433,434
434,435
434,436
435,436
437,438
437,439
438,439
440,441
442,443
442,444
442,445
443,444
444,445
444,446
444,447
444,448
445,446
447,448
447,449
448,449
451,452
451,453
452,453
454,455
457,458
457,459
458,459
459,460
459,461
460,461
463,464
463,465
463,466
464,465
464,466
465,466
467,468
469,470
469,471
469,472
469,473
470,471
471,472
471,473
472,473
474,475
474,476
475,476
477,478
477,479
478,479
480,481
482,483
483,484
483,485
484,485
486,487
488,489
489,490
489,491
490,491
492,493
495,496
495,497
496,497
496,498
497,498
497,499
498,499
501,502
501,503
502,503
504,505
506,507
506,508
506,509
507,508
508,509
508,510
509,510
511,512
513,514
514,515
514,516
515,516
517,518
520,521
520,522
521,522
521,523
522,523
523,524
523,525
523,526
523,527
524,525
526,527
528,529
528,530
529,530
531,532
534,535
534,536
535,536
537,538
539,540
539,541
539,542
539,543
540,541
541,542
541,543
542,543
544,545
544,546
545,546
547,548
547,549
548,549
550,551
552,553
552,554
553,554
555,556
555,557
555,558
556,557
557,558
557,559
558,559
560,561
562,563
563,564
563,565
564,565
566,567
569,570
570,571
570,572
571,572
573,574
575,576
576,577
576,578
577,578
579,580
581,582
582,583
582,584
583,584
585,586
585,587
586,587
588,589
588,590
589,590
591,592
593,594
593,595
594,595
594,596
595,596
597,598
599,600
600,601
602,603
603,604
603,605
604,605
606,607
607,608
609,610
609,611
610,611
610,612
611,612
611,613
611,614
611,615
612,613
614,615
614,616
615,616
615,617
616,617
620,621
620,622
621,622
621,623
622,623
626,627
628,629
630,631
630,632
631,632
632,633
632,634
633,634
635,636
637,638
638,639
639,640
641,642
642,643
642,644
643,644
645,646
646,647
648,649
648,650
649,650
649,651
650,651
650,652
650,653
650,654
651,652
653,654
655,656
657,658
659,660
661,662
661,663
661,664
662,663
663,664
663,665
664,665
666,667
668,669
669,670
669,671
670,671
672,673
674,675
675,676
676,677
678,679
679,680
679,681
680,681
682,683
683,684
685,686
685,687
686,687
686,688
687,688
687,689
688,689
688,690
688,691
688,692
689,690
691,692
693,694
693,695
694,695
697,698
699,700
701,702
702,703
702,704
702,705
702,706
703,704
705,706
707,708
709,710
711,712
711,713
711,714
711,715
712,713
713,714
713,715
714,715
716,717
718,719
719,720
719,721
720,721
722,723
724,725
725,726
725,727
726,727
728,729
730,731
732,733
733,734
733,735
734,735
736,737
738,739
739,740
739,741
740,741
742,743
744,745
745,746
745,747
746,747
748,749
750,751
750,752
751,752
751,753
752,753
753,754
753,755
754,755
756,757
757,758
759,760
761,762
762,763
764,765
765,766
765,767
766,767
766,768
767,768
770,771
770,772
771,772
773,774
775,776
776,777
776,778
777,778
777,779
778,779
781,782
781,783
781,784
782,783
784,785
784,786
785,786
785,787
786,787
790,791
791,792
791,793
792,793
795,796
795,797
796,797
796,798
797,798
797,799
798,799
801,802
803,804
803,805
804,805
805,806
805,807
806,807
808,809
810,811
811,812
813,814
814,815
814,816
814,817
814,818
815,816
817,818
817,819
818,819
818,820
819,820
823,824
823,825
824,825
827,828
827,829
828,829
828,830
829,830
833,834
834,835
834,836
835,836
835,837
836,837
839,840
839,841
840,841
840,842
841,842
845,846
846,847
846,848
847,848
849,850
849,851
851,852
851,853
852,853
854,855
856,857
856,858
857,858
857,859
858,859
860,861
862,863
863,864
863,865
864,865
866,867
866,868
868,869
868,870
869,870
871,872
873,874
874,875
874,876
875,876
875,877
876,877
879,880
879,881
879,882
880,881
882,883
884,885
885,886
885,887
886,887
889,890
889,891
890,891
890,892
891,892
891,893
892,893
895,896
897,898
897,899
898,899
899,900
899,901
900,901
902,903
904,905
905,906
907,908
908,909
908,910
908,911
908,912
909,910
911,912
911,913
912,913
915,916
915,917
916,917
920,921
920,922
921,922
921,923
922,923
924,925
926,927
926,928
926,929
927,928
928,929
928,930
929,930
929,931
930,931
930,932
931,932
935,936
935,937
936,937
937,938
937,939
938,939
942,943
943,944
943,945
944,945
944,946
945,946
945,947
946,947
950,951
950,952
951,952
952,953
952,954
953,954
957,958
958,959
958,960
958,961
958,962
959,960
961,962
963,964
963,965
964,965
964,966
965,966
965,967
966,967
971,972
971,973
972,973
974,975
976,977
977,978
977,979
977,980
977,981
978,979
980,981
982,983
982,984
983,984
983,985
984,985
984,986
985,986
989,990
990,991
990,992
990,993
991,992
991,993
992,993
994,995
997,998
997,999
999,1000
999,1001
1000,1001
1002,1003
1004,1005
1004,1006
1005,1006
1007,1008
1010,1011
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1016,1017
1018,1019
1019,1020
1019,1021
1020,1021
1020,1022
1021,1022
1024,1025
1024,1026
1025,1026
1025,1027
1026,1027
1030,1031
1031,1032
1031,1033
1032,1033
1032,1034
1033,1034
1036,1037
1036,1038
1036,1039
1037,1038
1039,1040
1039,1041
1040,1041
1043,1044
1044,1045
1044,1046
1045,1046
1048,1049
1048,1050
1049,1050
1049,1051
1050,1051
1050,1052
1051,1052
1054,1055
1056,1057
1056,1058
1057,1058
1058,1059
1058,1060
1059,1060
1062,1063
1063,1064
1065,1066
1066,1067
1066,1068
1066,1069
1066,1070
1067,1068
1069,1070
1069,1071
1070,1071
1070,1072
1071,1072
1075,1076
1075,1077
1076,1077
1079,1080
1079,1081
1080,1081
1083,1084
1084,1085
1084,1086
1084,1087
1084,1088
1085,1086
1087,1088
1087,1089
1088,1089
1091,1092
1094,1095
1095,1096
1095,1097
1096,1097
1096,1098
1097,1098
1100,1101
1102,1103
1103,1104
1103,1105
1104,1105
1104,1106
1105,1106
1108,1109
1108,1110
1109,1110
1112,1113
1113,1114
1113,1115
1113,1116
1113,1117
1114,1115
1116,1117
1116,1118
1117,1118
1120,1121
1120,1122
1121,1122
1124,1125
1126,1127
1127,1128
1127,1129
1127,1130
1127,1131
1128,1129
1130,1131
1130,1132
1131,1132
1134,1135
1134,1136
1135,1136
1138,1139
1140,1141
1141,1142
1141,1143
1141,1144
1141,1145
1142,1143
1144,1145
1145,1146
1145,1147
1146,1147
1149,1150
1149,1151
1150,1151
1154,1155
1154,1156
1155,1156
1155,1157
1156,1157
1157,1158
1157,1159
1158,1159
1158,1160
1159,1160
1162,1163
1162,1164
1162,1165
1163,1164
1165,1166
1167,1168
1168,1169
1168,1170
1169,1170
1172,1173
1174,1175
1174,1176
1175,1176
1176,1177
1176,1178
1177,1178
1179,1180
1181,1182
1182,1183
1184,1185
1185,1186
1185,1187
1185,1188
1185,1189
1186,1187
1188,1189
1190,1191
1190,1192
1191,1192
1194,1195
1196,1197
1197,1198
1197,1199
1198,1199
1198,1200
1199,1200
1202,1203
1204,1205
1204,1206
1205,1206
1205,1207
1206,1207
1206,1208
1206,1209
1206,1210
1207,1208
1209,1210
1211,1212
1212,1213
1213,1214
1213,1215
1214,1215
1217,1218
1218,1219
1219,1220
1219,1221
1220,1221
1223,1224
1225,1226
1225,1227
1226,1227
1227,1228
1227,1229
1228,1229
1230,1231
1232,1233
1233,1234
1235,1236
1236,1237
1236,1238
1237,1238
1237,1239
1238,1239
1241,1242
1241,1243
1242,1243
1244,1245
1244,1246
1245,1246
1247,1248
1249,1250
1250,1251
1250,1252
1251,1252
1253,1254
1255,1256
1256,1257
1256,1258
1257,1258
1259,1260
1261,1262
1261,1263
1262,1263
1262,1264
1263,1264
1263,1265
1263,1266
1263,1267
1264,1265
1266,1267
1268,1269
1270,1271
1271,1272
1273,1274
1275,1276
1276,1277
1278,1279
1279,1280
1280,1281
1282,1283
1283,1284
1283,1285
1283,1286
1283,1287
1284,1285
1286,1287
1288,1289
1289,1290
1290,1291
1290,1292
1291,1292
1294,1295
1295,1296
1296,1297
1296,1298
1297,1298
1300,1301
1300,1302
1301,1302
1301,1303
1302,1303
1302,1304
1303,1304
1306,1307
1308,1309
1308,1310
1309,1310
1310,1311
1310,1312
1310,1313
1311,1312
1313,1314
1316,1317
1317,1318
1317,1319
1317,1320
1318,1319
1320,1321
1323,1324
1324,1325
1324,1326
1325,1326
1325,1327
1326,1327
1330,1331
1331,1332
1331,1333
1332,1333
1332,1334
1333,1334
1336,1337
1338,1339
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,22,24,27,29,30,33,35,40,42,43,47,49,50,51,53,55,57,58,61,65,67,70,72,73,75,79,81,82,86,88,89,93,95,96,98,99,101,102,106,108,109,111,112,114,115,117,118,121,125,127,129,131,133,135,138,140,144,146,148,152,154,157,161,163,166,171,173,175,178,180,185,186,189,193,197,199,201,205,208,210,213,214,217,218,222,224,229,231,235,238,240,243,247,252,253,254,258,261,262,265,266,268,272,275,276,278,279,284,285,287,292,293,296,297,301,304,306,308,310,312,316,318,321,322,324,329,331,335,338,340,343,346,347,350,351,354,355,357,361,363,367,371,372,373,377,378,382,383,387,390,392,399,401,403,406,409,412,413,417,419,424,427,430,432,436,439,441,446,449,450,453,455,456,461,462,466,468,473,476,479,481,485,487,491,493,494,499,500,503,505,510,512,516,518,519,525,527,530,532,533,536,538,543,546,549,551,554,559,561,565,567,568,572,574,578,580,584,587,590,592,596,598,601,605,608,613,617,618,619,623,624,625,627,629,634,636,640,644,647,652,654,656,658,660,665,667,671,673,677,681,684,690,692,695,696,698,700,704,706,708,710,715,717,721,723,727,729,731,735,737,741,743,747,749,755,758,760,763,768,769,772,774,779,780,783,787,788,789,793,794,799,800,802,807,809,812,816,820,821,822,825,826,830,831,832,837,838,842,843,844,848,850,853,855,859,861,865,867,870,872,877,878,881,883,887,888,893,894,896,901,903,906,910,913,914,917,918,919,923,925,932,933,934,939,940,941,947,948,949,954,955,956,960,962,967,968,969,970,973,975,979,981,986,987,988,993,995,996,998,1001,1003,1006,1008,1009,1014,1015,1017,1022,1023,1027,1028,1029,1034,1035,1038,1041,1042,1046,1047,1052,1053,1055,1060,1061,1064,1068,1072,1073,1074,1077,1078,1081,1082,1086,1089,1090,1092,1093,1098,1099,1101,1106,1107,1110,1111,1115,1118,1119,1122,1123,1125,1129,1132,1133,1136,1137,1139,1143,1147,1148,1151,1152,1153,1160,1161,1164,1166,1170,1171,1173,1178,1180,1183,1187,1189,1192,1193,1195,1200,1201,1203,1208,1210,1215,1216,1221,1222,1224,1229,1231,1234,1239,1240,1243,1246,1248,1252,1254,1258,1260,1265,1267,1269,1272,1274,1277,1281,1285,1287,1292,1293,1298,1299,1304,1305,1307,1312,1314,1315,1319,1321,1322,1327,1328,1329,1334,1335,1337,1339
-----computeFrom-----
159,160
159,161
168,169
168,170
191,192
191,193
203,204
203,205
220,221
220,222
249,250
249,251
281,282
281,283
289,290
289,291
327,328
327,329
365,366
365,367
375,376
375,377
380,381
380,382
385,386
385,387
388,389
388,390
394,395
394,396
415,416
415,417
422,423
422,424
428,429
428,430
434,435
434,436
451,452
451,453
459,460
459,461
464,465
464,466
471,472
471,473
477,478
477,479
483,484
483,485
489,490
489,491
496,497
496,498
497,498
497,499
501,502
501,503
508,509
508,510
514,515
514,516
521,522
521,523
528,529
528,530
534,535
534,536
541,542
541,543
547,548
547,549
557,558
557,559
563,564
563,565
570,571
570,572
576,577
576,578
582,583
582,584
588,589
588,590
594,595
594,596
603,604
603,605
610,611
610,612
642,643
642,644
649,650
649,651
679,680
679,681
686,687
686,688
687,688
687,689
751,752
751,753
753,754
753,755
765,766
765,767
770,771
770,772
776,777
776,778
796,797
796,798
834,835
834,836
846,847
846,848
849,850
849,851
857,858
857,859
863,864
863,865
866,867
866,868
874,875
874,876
890,891
890,892
921,922
921,923
928,929
928,930
935,936
935,937
937,938
937,939
943,944
943,945
950,951
950,952
952,953
952,954
963,964
963,965
964,965
964,966
982,983
982,984
983,984
983,985
991,992
991,993
997,998
997,999
1011,1012
1011,1013
1019,1020
1019,1021
1031,1032
1031,1033
1049,1050
1049,1051
1095,1096
1095,1097
1103,1104
1103,1105
1155,1156
1155,1157
1157,1158
1157,1159
1197,1198
1197,1199
1205,1206
1205,1207
1236,1237
1236,1238
1241,1242
1241,1243
1256,1257
1256,1258
1262,1263
1262,1264
1301,1302
1301,1303
1324,1325
1324,1326
1331,1332
1331,1333
-----guardedBy-----
222,1254
224,1248
466,493
503,512
532,551
530,549
536,580
627,636
658,673
708,723
710,729
706,717
799,809
859,872
893,903
923,975
1160,1180
1221,1231
1304,1321
-----guardedByNegation-----
466,499
-----lastLexicalUse-----
466,499
-----jump-----
466,499
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
inthandle_value_request(u_char *packet, int size,		     char *address, u_short port,		     u_int8_t *schemes, u_int16_t ssize){        struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};	struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};	struct value_request *header;	struct stateob *st;	BIGNUM *test, *gen, *mod;	u_int8_t *p, *modp, *refp, *genp = NULL;	size_t sstart, vsize, modsize, modpsize, refpsize;	int modflag;	u_int8_t scheme_ref[2];	u_int8_t rcookie[COOKIE_SIZE];	if (size < VALUE_REQUEST_MIN)	     return -1;	/* packet too small  */	if (packet_check(packet, size, &vr_msg) == -1) {	     log_print("bad packet structure in handle_value_request()");	     return -1;	}	header = (struct value_request *) packet;	st = state_find_cookies(address, header->icookie, header->rcookie);	if (st == NULL) {	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return 0;	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return -1;   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		  return -1;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  return -1;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   return -1;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  return -1;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  state_value_reset(st);		  return -1;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  return -1;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	}	     	packet_size = PACKET_BUFFER_SIZE;	if (photuris_value_response(st, packet_buffer, &packet_size) == -1)	     return -1;	send_packet();        /* Compute the shared secret now */        compute_shared_secret(st, &(st->shared), &(st->sharedsize));#ifdef DEBUG   	{	     int i = BUFFER_SIZE;	     bin2hex(buffer, &i, st->shared, st->sharedsize);	     printf("Shared secret is: 0x%s\n", buffer);   	}#endif   	if (st->oSPIprivacyctx == NULL) {	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}	st->retries = 0;	st->phase = VALUE_RESPONSE;	return 0;}
int
handle_value_request(u_char *packet, int size,		     char *address, u_short port,		     u_int8_t *schemes, u_int16_t ssize)
handle_value_request
u_char *packet
u_char
u_char
*packet
*
packet
int size
int
size
size
char *address
char
*address
*
address
u_short port
u_short
u_short
port
port
u_int8_t *schemes
u_int8_t
u_int8_t
*schemes
*
schemes
u_int16_t ssize
u_int16_t
u_int16_t
ssize
ssize
{        struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};	struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};	struct value_request *header;	struct stateob *st;	BIGNUM *test, *gen, *mod;	u_int8_t *p, *modp, *refp, *genp = NULL;	size_t sstart, vsize, modsize, modpsize, refpsize;	int modflag;	u_int8_t scheme_ref[2];	u_int8_t rcookie[COOKIE_SIZE];	if (size < VALUE_REQUEST_MIN)	     return -1;	/* packet too small  */	if (packet_check(packet, size, &vr_msg) == -1) {	     log_print("bad packet structure in handle_value_request()");	     return -1;	}	header = (struct value_request *) packet;	st = state_find_cookies(address, header->icookie, header->rcookie);	if (st == NULL) {	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return 0;	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return -1;   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		  return -1;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  return -1;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   return -1;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  return -1;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  state_value_reset(st);		  return -1;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  return -1;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	}	     	packet_size = PACKET_BUFFER_SIZE;	if (photuris_value_response(st, packet_buffer, &packet_size) == -1)	     return -1;	send_packet();        /* Compute the shared secret now */        compute_shared_secret(st, &(st->shared), &(st->sharedsize));#ifdef DEBUG   	{	     int i = BUFFER_SIZE;	     bin2hex(buffer, &i, st->shared, st->sharedsize);	     printf("Shared secret is: 0x%s\n", buffer);   	}#endif   	if (st->oSPIprivacyctx == NULL) {	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}	st->retries = 0;	st->phase = VALUE_RESPONSE;	return 0;}
struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};
struct packet_sub parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	};
struct packet_sub
packet_sub
parts[] = {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	}
parts
[]
= {	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	}
{	     { "Exchange Value", FLD_VARPRE, 0, 0, },	     { "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },	     { NULL }	}
{ "Exchange Value", FLD_VARPRE, 0, 0, }
"Exchange Value"
FLD_VARPRE
FLD_VARPRE
0
0
{ "Offered Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, }
"Offered Attributes"
FLD_ATTRIB
FLD_ATTRIB
FMD_ATT_FILL
FMD_ATT_FILL
0
{ NULL }
NULL
NULL
struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};
struct packet vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	};
struct packet
packet
vr_msg = {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	}
vr_msg
= {	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	}
{	     "Value Request",	     VALUE_REQUEST_MIN, 0, parts	}
"Value Request"
VALUE_REQUEST_MIN
VALUE_REQUEST_MIN
0
parts
parts
struct value_request *header;
struct value_request *header;
struct value_request
value_request
*header
*
header
struct stateob *st;
struct stateob *st;
struct stateob
stateob
*st
*
st
BIGNUM *test, *gen, *mod;
BIGNUM *test, *gen, *mod;
BIGNUM
BIGNUM
*test
*
test
*gen
*
gen
*mod
*
mod
u_int8_t *p, *modp, *refp, *genp = NULL;
u_int8_t *p, *modp, *refp, *genp = NULL;
u_int8_t
u_int8_t
*p
*
p
*modp
*
modp
*refp
*
refp
*genp = NULL
*
genp
= NULL
NULL
NULL
size_t sstart, vsize, modsize, modpsize, refpsize;
size_t sstart, vsize, modsize, modpsize, refpsize;
size_t
size_t
sstart
sstart
vsize
vsize
modsize
modsize
modpsize
modpsize
refpsize
refpsize
int modflag;
int modflag;
int
modflag
modflag
u_int8_t scheme_ref[2];
u_int8_t scheme_ref[2];
u_int8_t
u_int8_t
scheme_ref[2]
scheme_ref
[2]
2
u_int8_t rcookie[COOKIE_SIZE];
u_int8_t rcookie[COOKIE_SIZE];
u_int8_t
u_int8_t
rcookie[COOKIE_SIZE]
rcookie
[COOKIE_SIZE]
COOKIE_SIZE
COOKIE_SIZE
if (size < VALUE_REQUEST_MIN)	     return -1;
size < VALUE_REQUEST_MIN
size
size
VALUE_REQUEST_MIN
VALUE_REQUEST_MIN
return -1;
-1
1
if (packet_check(packet, size, &vr_msg) == -1) {	     log_print("bad packet structure in handle_value_request()");	     return -1;	}
packet_check(packet, size, &vr_msg) == -1
packet_check(packet, size, &vr_msg)
packet_check
packet_check
packet
packet
size
size
&vr_msg
vr_msg
vr_msg
-1
1
{	     log_print("bad packet structure in handle_value_request()");	     return -1;	}
log_print("bad packet structure in handle_value_request()");
log_print("bad packet structure in handle_value_request()")
log_print
log_print
"bad packet structure in handle_value_request()"
return -1;
-1
1
header = (struct value_request *) packet;
header = (struct value_request *) packet
header
header
(struct value_request *) packet
struct value_request *
struct value_request
value_request
*
*
packet
packet
st = state_find_cookies(address, header->icookie, header->rcookie);
st = state_find_cookies(address, header->icookie, header->rcookie)
st
st
state_find_cookies(address, header->icookie, header->rcookie)
state_find_cookies
state_find_cookies
address
address
header->icookie
header
header
icookie
header->rcookie
header
header
rcookie
if (st == NULL) {	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return 0;	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return -1;   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		  return -1;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  return -1;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   return -1;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  return -1;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  state_value_reset(st);		  return -1;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  return -1;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	}
st == NULL
st
st
NULL
NULL
{	     struct stateob tempst;	     bzero((char *)&tempst, sizeof(tempst)); /* Set up temp. state */ 	     tempst.initiator = 0;                   /* We are the Responder */ 	     bcopy(header->icookie, tempst.icookie, COOKIE_SIZE); 	     strncpy(tempst.address, address, 15); 	     tempst.port = global_port; 	     tempst.counter = header->counter;	     	     cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize); 	     /* Check for invalid cookie */	     if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return 0;	     }	     /* Check exchange value - XXX doesn't check long form */	     vsize = parts[0].size;	     /* Check schemes - selected length is in exchange value*/	     sstart = 0;	     modflag = 0;	     refp = modp = NULL;	     *(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));	     while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }	     if (sstart >= ssize)		  return -1;   /* Did not find a scheme - XXX log */	     /* now check the exchange value */	     test = BN_new();	     if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }	     mod = BN_new();	     if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }	     gen = BN_new();	     if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }	     BN_free(test);	     BN_free(gen);	     BN_free(mod);	     if ((st = state_new()) == NULL)		  return -1;	     /* Default options */	     st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;	     /* Fill the state object */	     st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));             if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  return -1;	     }             bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);               st->uSPIoattribsize = parts[1].size;  	     /* Save scheme, which will be used by both parties */	     vsize = 2 + varpre2octets(modp);	     /* XXX - VPN - only support two octets */	     if (genp != NULL)		  vsize += 2 + varpre2octets(genp);	     st->scheme = calloc(vsize, sizeof(u_int8_t));	     if (st->scheme == NULL) {                  state_value_reset(st);                   return -1;              }              bcopy(header->scheme, st->scheme, 2);	     if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }	     bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));;		                st->schemesize = vsize;#ifdef DEBUG	     {		  int i = BUFFER_SIZE;		  bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)));		  printf("Got exchange value 0x%s\n", buffer);	     }#endif	     /* Set exchange value */	     st->texchangesize = parts[0].size;	     st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));	     if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  return -1;	     }	     bcopy(parts[0].where, st->texchange, st->texchangesize);	     /* Fill in the state object with generic data */             strncpy(st->address, address, 15);               st->port = port;  	     st->counter = header->counter;             bcopy(header->icookie, st->icookie, COOKIE_SIZE);               bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);  	     bcopy(&header->counter, st->uSPITBV, 3);	     if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  state_value_reset(st);		  return -1;	     }	     bcopy(schemes, st->roschemes, ssize);	     st->roschemesize = ssize;	     if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  return -1;	     }	     st->lifetime = exchange_timeout + time(NULL);	     /* Now put the filled state object in the chain */	     state_insert(st);	}
struct stateob tempst;
struct stateob tempst;
struct stateob
stateob
tempst
tempst
bzero((char *)&tempst, sizeof(tempst));
bzero((char *)&tempst, sizeof(tempst))
bzero
bzero
(char *)&tempst
char *
char
*
*
&tempst
tempst
tempst
sizeof(tempst)
(tempst)
tempst
tempst
tempst.initiator = 0;
tempst.initiator = 0
tempst.initiator
tempst
tempst
initiator
0
bcopy(header->icookie, tempst.icookie, COOKIE_SIZE);
bcopy(header->icookie, tempst.icookie, COOKIE_SIZE)
bcopy
bcopy
header->icookie
header
header
icookie
tempst.icookie
tempst
tempst
icookie
COOKIE_SIZE
COOKIE_SIZE
strncpy(tempst.address, address, 15);
strncpy(tempst.address, address, 15)
strncpy
strncpy
tempst.address
tempst
tempst
address
address
address
15
tempst.port = global_port;
tempst.port = global_port
tempst.port
tempst
tempst
port
global_port
global_port
tempst.counter = header->counter;
tempst.counter = header->counter
tempst.counter
tempst
tempst
counter
header->counter
header
header
counter
cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize);
cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize)
cookie_generate
cookie_generate
&tempst
tempst
tempst
rcookie
rcookie
COOKIE_SIZE
COOKIE_SIZE
schemes
schemes
ssize
ssize
if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)) {		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return 0;	     }
bcmp(rcookie, header->rcookie, COOKIE_SIZE)
bcmp
bcmp
rcookie
rcookie
header->rcookie
header
header
rcookie
COOKIE_SIZE
COOKIE_SIZE
{		  packet_size = PACKET_BUFFER_SIZE;		  photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);		  send_packet();		  return 0;	     }
packet_size = PACKET_BUFFER_SIZE;
packet_size = PACKET_BUFFER_SIZE
packet_size
packet_size
PACKET_BUFFER_SIZE
PACKET_BUFFER_SIZE
photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE);
photuris_error_message(&tempst, packet_buffer, &packet_size,					 header->icookie, header->rcookie,					 header->counter, BAD_COOKIE)
photuris_error_message
photuris_error_message
&tempst
tempst
tempst
packet_buffer
packet_buffer
&packet_size
packet_size
packet_size
header->icookie
header
header
icookie
header->rcookie
header
header
rcookie
header->counter
header
header
counter
BAD_COOKIE
BAD_COOKIE
send_packet();
send_packet()
send_packet
send_packet
return 0;
0
vsize = parts[0].size;
vsize = parts[0].size
vsize
vsize
parts[0].size
parts[0]
parts
parts
0
size
sstart = 0;
sstart = 0
sstart
sstart
0
modflag = 0;
modflag = 0
modflag
modflag
0
refp = modp = NULL;
refp = modp = NULL
refp
refp
modp = NULL
modp
modp
NULL
NULL
*(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme));
*(u_int16_t *)scheme_ref = htons(scheme_get_ref(header->scheme))
*(u_int16_t *)scheme_ref
(u_int16_t *)scheme_ref
u_int16_t *
u_int16_t
u_int16_t
*
*
scheme_ref
scheme_ref
htons(scheme_get_ref(header->scheme))
htons
htons
scheme_get_ref(header->scheme)
scheme_get_ref
scheme_get_ref
header->scheme
header
header
scheme
while (sstart < ssize) {		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }
sstart < ssize
sstart
sstart
ssize
ssize
{		  p = scheme_get_mod(schemes + sstart);		  modsize = varpre2octets(p);		  if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }		  		  sstart += scheme_get_len(schemes+sstart);	     }
p = scheme_get_mod(schemes + sstart);
p = scheme_get_mod(schemes + sstart)
p
p
scheme_get_mod(schemes + sstart)
scheme_get_mod
scheme_get_mod
schemes + sstart
schemes
schemes
sstart
sstart
modsize = varpre2octets(p);
modsize = varpre2octets(p)
modsize
modsize
varpre2octets(p)
varpre2octets
varpre2octets
p
p
if (!bcmp(header->scheme, schemes + sstart, 2)) {		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  } else if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }
!bcmp(header->scheme, schemes + sstart, 2)
bcmp(header->scheme, schemes + sstart, 2)
bcmp
bcmp
header->scheme
header
header
scheme
schemes + sstart
schemes
schemes
sstart
sstart
2
{		       modflag = 1;		       if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }		  }
modflag = 1;
modflag = 1
modflag
modflag
1
if (modsize == vsize) {			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       } else if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }
modsize == vsize
modsize
modsize
vsize
vsize
{			    genp = scheme_get_gen(schemes+sstart);			    modp = p;			    modpsize = modsize;			    break;  /* On right scheme + right size */		       }
genp = scheme_get_gen(schemes+sstart);
genp = scheme_get_gen(schemes+sstart)
genp
genp
scheme_get_gen(schemes+sstart)
scheme_get_gen
scheme_get_gen
schemes+sstart
schemes
schemes
sstart
sstart
modp = p;
modp = p
modp
modp
p
p
modpsize = modsize;
modpsize = modsize
modpsize
modpsize
modsize
modsize
break;
if (modsize <= 2 && refp != NULL) {			    modp = refp;			    modpsize = refpsize;			    break;		       }
modsize <= 2 && refp != NULL
modsize <= 2
modsize
modsize
2
refp != NULL
refp
refp
NULL
NULL
{			    modp = refp;			    modpsize = refpsize;			    break;		       }
modp = refp;
modp = refp
modp
modp
refp
refp
modpsize = refpsize;
modpsize = refpsize
modpsize
modpsize
refpsize
refpsize
break;
if (!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize) {		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }
!bcmp(scheme_ref, schemes + sstart, 2) &&			     modsize == vsize
!bcmp(scheme_ref, schemes + sstart, 2)
bcmp(scheme_ref, schemes + sstart, 2)
bcmp
bcmp
scheme_ref
scheme_ref
schemes + sstart
schemes
schemes
sstart
sstart
2
modsize == vsize
modsize
modsize
vsize
vsize
{		       genp = scheme_get_gen(schemes + sstart);		       if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }		       refp = p;		       refpsize = modsize;		  }
genp = scheme_get_gen(schemes + sstart);
genp = scheme_get_gen(schemes + sstart)
genp
genp
scheme_get_gen(schemes + sstart)
scheme_get_gen
scheme_get_gen
schemes + sstart
schemes
schemes
sstart
sstart
if (modflag) {			    modp = p;			    modpsize = modsize;			    break;		       }
modflag
modflag
{			    modp = p;			    modpsize = modsize;			    break;		       }
modp = p;
modp = p
modp
modp
p
p
modpsize = modsize;
modpsize = modsize
modpsize
modpsize
modsize
modsize
break;
refp = p;
refp = p
refp
refp
p
p
refpsize = modsize;
refpsize = modsize
refpsize
refpsize
modsize
modsize
sstart += scheme_get_len(schemes+sstart);
sstart += scheme_get_len(schemes+sstart)
sstart
sstart
scheme_get_len(schemes+sstart)
scheme_get_len
scheme_get_len
schemes+sstart
schemes
schemes
sstart
sstart
if (sstart >= ssize)		  return -1;
sstart >= ssize
sstart
sstart
ssize
ssize
return -1;
-1
1
test = BN_new();
test = BN_new()
test
test
BN_new()
BN_new
BN_new
if (BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL) {		     BN_free(test);		     return (-1);	     }
BN_varpre2bn(parts[0].where, parts[0].size, test) == NULL
BN_varpre2bn(parts[0].where, parts[0].size, test)
BN_varpre2bn
BN_varpre2bn
parts[0].where
parts[0]
parts
parts
0
where
parts[0].size
parts[0]
parts
parts
0
size
test
test
NULL
NULL
{		     BN_free(test);		     return (-1);	     }
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
return (-1);
(-1)
-1
1
mod = BN_new();
mod = BN_new()
mod
mod
BN_new()
BN_new
BN_new
if (BN_varpre2bn(modp, modpsize, mod) == NULL) {		     BN_free(test);		     BN_free(mod);		     return (-1);	     }
BN_varpre2bn(modp, modpsize, mod) == NULL
BN_varpre2bn(modp, modpsize, mod)
BN_varpre2bn
BN_varpre2bn
modp
modp
modpsize
modpsize
mod
mod
NULL
NULL
{		     BN_free(test);		     BN_free(mod);		     return (-1);	     }
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
BN_free(mod);
BN_free(mod)
BN_free
BN_free
mod
mod
return (-1);
(-1)
-1
1
gen = BN_new();
gen = BN_new()
gen
gen
BN_new()
BN_new
BN_new
if (exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)) {		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }
exchange_set_generator(gen, header->scheme, genp) == -1 ||		 !exchange_check_value(test, gen, mod)
exchange_set_generator(gen, header->scheme, genp) == -1
exchange_set_generator(gen, header->scheme, genp)
exchange_set_generator
exchange_set_generator
gen
gen
header->scheme
header
header
scheme
genp
genp
-1
1
!exchange_check_value(test, gen, mod)
exchange_check_value(test, gen, mod)
exchange_check_value
exchange_check_value
test
test
gen
gen
mod
mod
{		  BN_free(test);		  BN_free(gen);		  BN_free(mod);		  return 0;	     }
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
BN_free(gen);
BN_free(gen)
BN_free
BN_free
gen
gen
BN_free(mod);
BN_free(mod)
BN_free
BN_free
mod
mod
return 0;
0
BN_free(test);
BN_free(test)
BN_free
BN_free
test
test
BN_free(gen);
BN_free(gen)
BN_free
BN_free
gen
gen
BN_free(mod);
BN_free(mod)
BN_free
BN_free
mod
mod
if ((st = state_new()) == NULL)		  return -1;
(st = state_new()) == NULL
(st = state_new())
st = state_new()
st
st
state_new()
state_new
state_new
NULL
NULL
return -1;
-1
1
st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH;
st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH
st->flags
st
st
flags
IPSEC_OPT_ENC|IPSEC_OPT_AUTH
IPSEC_OPT_ENC
IPSEC_OPT_ENC
IPSEC_OPT_AUTH
IPSEC_OPT_AUTH
st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t));
st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t))
st->uSPIoattrib
st
st
uSPIoattrib
calloc(parts[1].size, sizeof(u_int8_t))
calloc
calloc
parts[1].size
parts[1]
parts
parts
1
size
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

if (st->uSPIoattrib == NULL) {                  state_value_reset(st);		  return -1;	     }
st->uSPIoattrib == NULL
st->uSPIoattrib
st
st
uSPIoattrib
NULL
NULL
{                  state_value_reset(st);		  return -1;	     }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
return -1;
-1
1
bcopy(parts[1].where, st->uSPIoattrib, parts[1].size);
bcopy(parts[1].where, st->uSPIoattrib, parts[1].size)
bcopy
bcopy
parts[1].where
parts[1]
parts
parts
1
where
st->uSPIoattrib
st
st
uSPIoattrib
parts[1].size
parts[1]
parts
parts
1
size
st->uSPIoattribsize = parts[1].size;
st->uSPIoattribsize = parts[1].size
st->uSPIoattribsize
st
st
uSPIoattribsize
parts[1].size
parts[1]
parts
parts
1
size
vsize = 2 + varpre2octets(modp);
vsize = 2 + varpre2octets(modp)
vsize
vsize
2 + varpre2octets(modp)
2
varpre2octets(modp)
varpre2octets
varpre2octets
modp
modp
if (genp != NULL)		  vsize += 2 + varpre2octets(genp);
genp != NULL
genp
genp
NULL
NULL
vsize += 2 + varpre2octets(genp);
vsize += 2 + varpre2octets(genp)
vsize
vsize
2 + varpre2octets(genp)
2
varpre2octets(genp)
varpre2octets
varpre2octets
genp
genp
st->scheme = calloc(vsize, sizeof(u_int8_t));
st->scheme = calloc(vsize, sizeof(u_int8_t))
st->scheme
st
st
scheme
calloc(vsize, sizeof(u_int8_t))
calloc
calloc
vsize
vsize
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

if (st->scheme == NULL) {                  state_value_reset(st);                   return -1;              }
st->scheme == NULL
st->scheme
st
st
scheme
NULL
NULL
{                  state_value_reset(st);                   return -1;              }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
return -1;
-1
1
bcopy(header->scheme, st->scheme, 2);
bcopy(header->scheme, st->scheme, 2)
bcopy
bcopy
header->scheme
header
header
scheme
st->scheme
st
st
scheme
2
if (genp != NULL) {		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }
genp != NULL
genp
genp
NULL
NULL
{		  st->scheme[2] = (vsize-4) >> 8;		  st->scheme[3] = (vsize-4) & 0xFF;		  bcopy(genp, st->scheme+2+2, varpre2octets(genp));	     }
st->scheme[2] = (vsize-4) >> 8;
st->scheme[2] = (vsize-4) >> 8
st->scheme[2]
st->scheme
st
st
scheme
2
(vsize-4) >> 8
(vsize-4)
vsize-4
vsize
vsize
4
8
st->scheme[3] = (vsize-4) & 0xFF;
st->scheme[3] = (vsize-4) & 0xFF
st->scheme[3]
st->scheme
st
st
scheme
3
(vsize-4) & 0xFF
(vsize-4)
vsize-4
vsize
vsize
4
0xFF
bcopy(genp, st->scheme+2+2, varpre2octets(genp));
bcopy(genp, st->scheme+2+2, varpre2octets(genp))
bcopy
bcopy
genp
genp
st->scheme+2+2
st->scheme+2
st->scheme
st
st
scheme
2
2
varpre2octets(genp)
varpre2octets
varpre2octets
genp
genp
bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp));
bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)),		   varpre2octets(modp))
bcopy
bcopy
modp
modp
st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp))
st->scheme + 2
st->scheme
st
st
scheme
2
(genp == NULL ? 0 : 2 + varpre2octets(genp))
genp == NULL ? 0 : 2 + varpre2octets(genp)
genp == NULL
genp
genp
NULL
NULL
0
2 + varpre2octets(genp)
2
varpre2octets(genp)
varpre2octets
varpre2octets
genp
genp
varpre2octets(modp)
varpre2octets
varpre2octets
modp
modp
;
st->schemesize = vsize;
st->schemesize = vsize
st->schemesize
st
st
schemesize
vsize
vsize
st->texchangesize = parts[0].size;
st->texchangesize = parts[0].size
st->texchangesize
st
st
texchangesize
parts[0].size
parts[0]
parts
parts
0
size
st->texchange = calloc(st->texchangesize, sizeof(u_int8_t));
st->texchange = calloc(st->texchangesize, sizeof(u_int8_t))
st->texchange
st
st
texchange
calloc(st->texchangesize, sizeof(u_int8_t))
calloc
calloc
st->texchangesize
st
st
texchangesize
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

if (st->texchange == NULL) {		  log_error("calloc() in handle_value_request()");		  return -1;	     }
st->texchange == NULL
st->texchange
st
st
texchange
NULL
NULL
{		  log_error("calloc() in handle_value_request()");		  return -1;	     }
log_error("calloc() in handle_value_request()");
log_error("calloc() in handle_value_request()")
log_error
log_error
"calloc() in handle_value_request()"
return -1;
-1
1
bcopy(parts[0].where, st->texchange, st->texchangesize);
bcopy(parts[0].where, st->texchange, st->texchangesize)
bcopy
bcopy
parts[0].where
parts[0]
parts
parts
0
where
st->texchange
st
st
texchange
st->texchangesize
st
st
texchangesize
strncpy(st->address, address, 15);
strncpy(st->address, address, 15)
strncpy
strncpy
st->address
st
st
address
address
address
15
st->port = port;
st->port = port
st->port
st
st
port
port
port
st->counter = header->counter;
st->counter = header->counter
st->counter
st
st
counter
header->counter
header
header
counter
bcopy(header->icookie, st->icookie, COOKIE_SIZE);
bcopy(header->icookie, st->icookie, COOKIE_SIZE)
bcopy
bcopy
header->icookie
header
header
icookie
st->icookie
st
st
icookie
COOKIE_SIZE
COOKIE_SIZE
bcopy(header->rcookie, st->rcookie, COOKIE_SIZE);
bcopy(header->rcookie, st->rcookie, COOKIE_SIZE)
bcopy
bcopy
header->rcookie
header
header
rcookie
st->rcookie
st
st
rcookie
COOKIE_SIZE
COOKIE_SIZE
bcopy(&header->counter, st->uSPITBV, 3);
bcopy(&header->counter, st->uSPITBV, 3)
bcopy
bcopy
&header->counter
header->counter
header
header
counter
st->uSPITBV
st
st
uSPITBV
3
if ((st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL) {		  state_value_reset(st);		  return -1;	     }
(st->roschemes = calloc(ssize, sizeof(u_int8_t))) == NULL
(st->roschemes = calloc(ssize, sizeof(u_int8_t)))
st->roschemes = calloc(ssize, sizeof(u_int8_t))
st->roschemes
st
st
roschemes
calloc(ssize, sizeof(u_int8_t))
calloc
calloc
ssize
ssize
sizeof(u_int8_t)
u_int8_t
u_int8_t
u_int8_t

NULL
NULL
{		  state_value_reset(st);		  return -1;	     }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
return -1;
-1
1
bcopy(schemes, st->roschemes, ssize);
bcopy(schemes, st->roschemes, ssize)
bcopy
bcopy
schemes
schemes
st->roschemes
st
st
roschemes
ssize
ssize
st->roschemesize = ssize;
st->roschemesize = ssize
st->roschemesize
st
st
roschemesize
ssize
ssize
if (pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1) {		  state_value_reset(st);		  return -1;	     }
pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize)) == -1
pick_attrib(st, &(st->oSPIoattrib), 			     &(st->oSPIoattribsize))
pick_attrib
pick_attrib
st
st
&(st->oSPIoattrib)
(st->oSPIoattrib)
st->oSPIoattrib
st
st
oSPIoattrib
&(st->oSPIoattribsize)
(st->oSPIoattribsize)
st->oSPIoattribsize
st
st
oSPIoattribsize
-1
1
{		  state_value_reset(st);		  return -1;	     }
state_value_reset(st);
state_value_reset(st)
state_value_reset
state_value_reset
st
st
return -1;
-1
1
st->lifetime = exchange_timeout + time(NULL);
st->lifetime = exchange_timeout + time(NULL)
st->lifetime
st
st
lifetime
exchange_timeout + time(NULL)
exchange_timeout
exchange_timeout
time(NULL)
time
time
NULL
NULL
state_insert(st);
state_insert(st)
state_insert
state_insert
st
st
packet_size = PACKET_BUFFER_SIZE;
packet_size = PACKET_BUFFER_SIZE
packet_size
packet_size
PACKET_BUFFER_SIZE
PACKET_BUFFER_SIZE
if (photuris_value_response(st, packet_buffer, &packet_size) == -1)	     return -1;
photuris_value_response(st, packet_buffer, &packet_size) == -1
photuris_value_response(st, packet_buffer, &packet_size)
photuris_value_response
photuris_value_response
st
st
packet_buffer
packet_buffer
&packet_size
packet_size
packet_size
-1
1
return -1;
-1
1
send_packet();
send_packet()
send_packet
send_packet
compute_shared_secret(st, &(st->shared), &(st->sharedsize));
compute_shared_secret(st, &(st->shared), &(st->sharedsize))
compute_shared_secret
compute_shared_secret
st
st
&(st->shared)
(st->shared)
st->shared
st
st
shared
&(st->sharedsize)
(st->sharedsize)
st->sharedsize
st
st
sharedsize
if (st->oSPIprivacyctx == NULL) {	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}
st->oSPIprivacyctx == NULL
st->oSPIprivacyctx
st
st
oSPIprivacyctx
NULL
NULL
{	     /* Initialize Privacy Keys from Exchange Values */	     init_privacy_key(st, 0);   /* User -> Owner direction */	     init_privacy_key(st, 1);   /* Owner -> User direction */	}
init_privacy_key(st, 0);
init_privacy_key(st, 0)
init_privacy_key
init_privacy_key
st
st
0
init_privacy_key(st, 1);
init_privacy_key(st, 1)
init_privacy_key
init_privacy_key
st
st
1
st->retries = 0;
st->retries = 0
st->retries
st
st
retries
0
st->phase = VALUE_RESPONSE;
st->phase = VALUE_RESPONSE
st->phase
st
st
phase
VALUE_RESPONSE
VALUE_RESPONSE
return 0;
0
-----joern-----
(529,202,0)
(717,78,0)
(138,68,0)
(159,530,0)
(105,479,0)
(550,127,0)
(117,476,0)
(718,289,0)
(232,750,0)
(5,261,0)
(42,328,0)
(641,278,0)
(737,486,0)
(10,78,0)
(173,132,0)
(665,72,0)
(726,259,0)
(513,186,0)
(372,78,0)
(137,184,0)
(427,429,0)
(487,198,0)
(235,313,0)
(764,445,0)
(761,354,0)
(623,152,0)
(476,117,0)
(555,261,0)
(125,313,0)
(410,167,0)
(108,141,0)
(577,333,0)
(145,356,0)
(87,608,0)
(577,448,0)
(308,591,0)
(324,429,0)
(578,431,0)
(39,735,0)
(159,72,0)
(431,259,0)
(187,352,0)
(647,737,0)
(5,36,0)
(289,642,0)
(67,445,0)
(94,123,0)
(413,748,0)
(401,537,0)
(243,705,0)
(287,327,0)
(252,261,0)
(362,537,0)
(372,179,0)
(628,404,0)
(446,467,0)
(562,430,0)
(620,537,0)
(745,688,0)
(251,600,0)
(152,149,0)
(692,561,0)
(214,213,0)
(215,262,0)
(577,168,0)
(165,682,0)
(515,282,0)
(614,261,0)
(193,360,0)
(205,221,0)
(309,537,0)
(186,555,0)
(685,410,0)
(365,106,0)
(257,354,0)
(269,277,0)
(186,161,0)
(218,68,0)
(671,259,0)
(552,161,0)
(667,247,0)
(412,445,0)
(517,534,0)
(389,740,0)
(696,336,0)
(130,238,0)
(320,631,0)
(501,246,0)
(559,237,0)
(742,78,0)
(424,668,0)
(606,714,0)
(166,380,0)
(719,247,0)
(734,293,0)
(311,603,0)
(458,659,0)
(697,316,0)
(268,761,0)
(694,468,0)
(53,261,0)
(233,384,0)
(545,537,0)
(204,261,0)
(521,428,0)
(435,261,0)
(0,761,0)
(607,380,0)
(172,343,0)
(387,727,0)
(458,56,0)
(324,656,0)
(353,726,0)
(427,586,0)
(554,574,0)
(374,459,0)
(501,211,0)
(342,221,0)
(761,748,0)
(343,142,0)
(163,540,0)
(702,274,0)
(313,445,0)
(449,396,0)
(426,643,0)
(444,608,0)
(110,445,0)
(171,87,0)
(369,261,0)
(329,688,0)
(698,654,0)
(118,549,0)
(324,255,0)
(228,78,0)
(559,724,0)
(85,445,0)
(603,686,0)
(380,261,0)
(298,445,0)
(631,528,0)
(589,549,0)
(71,399,0)
(226,123,0)
(233,586,0)
(723,445,0)
(585,263,0)
(472,78,0)
(233,347,0)
(427,290,0)
(324,530,0)
(701,48,0)
(280,549,0)
(283,726,0)
(106,261,0)
(201,163,0)
(599,636,0)
(447,694,0)
(239,537,0)
(420,511,0)
(680,478,0)
(664,660,0)
(170,344,0)
(386,523,0)
(233,530,0)
(618,650,0)
(685,586,0)
(608,87,0)
(344,170,0)
(159,4,0)
(517,475,0)
(190,428,0)
(615,445,0)
(369,440,0)
(324,333,0)
(508,387,0)
(417,176,0)
(417,343,0)
(33,764,0)
(338,379,0)
(443,284,0)
(385,123,0)
(210,759,0)
(23,501,0)
(267,342,0)
(68,148,0)
(746,253,0)
(531,436,0)
(262,149,0)
(265,159,0)
(271,473,0)
(229,137,0)
(373,445,0)
(474,585,0)
(224,88,0)
(262,215,0)
(678,445,0)
(669,537,0)
(489,469,0)
(158,543,0)
(636,599,0)
(708,516,0)
(159,586,0)
(397,467,0)
(662,537,0)
(441,436,0)
(200,198,0)
(678,612,0)
(127,247,0)
(229,714,0)
(252,149,0)
(78,597,0)
(182,445,0)
(414,173,0)
(263,379,0)
(741,545,0)
(233,168,0)
(9,602,0)
(19,511,0)
(577,530,0)
(657,184,0)
(331,562,0)
(761,268,0)
(272,56,0)
(435,735,0)
(705,160,0)
(284,525,0)
(481,384,0)
(379,399,0)
(354,445,0)
(618,117,0)
(324,448,0)
(100,290,0)
(228,261,0)
(358,119,0)
(186,333,0)
(324,191,0)
(324,289,0)
(334,239,0)
(118,247,0)
(570,495,0)
(588,586,0)
(404,519,0)
(64,116,0)
(588,466,0)
(631,379,0)
(673,110,0)
(159,656,0)
(2,242,0)
(667,549,0)
(565,478,0)
(720,136,0)
(15,238,0)
(751,568,0)
(175,149,0)
(663,524,0)
(747,453,0)
(733,229,0)
(198,261,0)
(232,259,0)
(486,380,0)
(379,479,0)
(496,537,0)
(594,513,0)
(233,448,0)
(487,654,0)
(37,417,0)
(196,109,0)
(271,643,0)
(327,383,0)
(339,263,0)
(504,48,0)
(281,151,0)
(40,333,0)
(688,142,0)
(233,175,0)
(355,615,0)
(727,387,0)
(186,284,0)
(472,261,0)
(192,327,0)
(359,497,0)
(448,376,0)
(644,175,0)
(460,195,0)
(186,191,0)
(686,204,0)
(764,237,0)
(29,578,0)
(437,97,0)
(646,410,0)
(459,709,0)
(136,324,0)
(688,343,0)
(262,261,0)
(70,421,0)
(114,732,0)
(423,652,0)
(631,163,0)
(202,668,0)
(577,656,0)
(186,410,0)
(573,537,0)
(197,372,0)
(483,285,0)
(599,172,0)
(703,700,0)
(177,448,0)
(454,354,0)
(186,656,0)
(167,445,0)
(187,534,0)
(427,656,0)
(118,64,0)
(344,671,0)
(307,537,0)
(388,445,0)
(393,343,0)
(495,4,0)
(293,261,0)
(407,674,0)
(405,489,0)
(152,689,0)
(357,729,0)
(145,354,0)
(104,5,0)
(159,555,0)
(735,435,0)
(93,210,0)
(458,186,0)
(652,180,0)
(514,521,0)
(122,477,0)
(652,475,0)
(275,609,0)
(277,463,0)
(212,549,0)
(284,261,0)
(155,390,0)
(115,445,0)
(668,424,0)
(612,678,0)
(266,516,0)
(511,420,0)
(613,757,0)
(34,536,0)
(48,354,0)
(473,271,0)
(733,601,0)
(467,397,0)
(390,725,0)
(62,630,0)
(229,733,0)
(714,606,0)
(475,65,0)
(631,643,0)
(186,72,0)
(597,497,0)
(82,421,0)
(343,343,0)
(159,175,0)
(360,220,0)
(233,656,0)
(414,445,0)
(765,507,0)
(324,161,0)
(577,327,0)
(83,161,0)
(522,173,0)
(120,459,0)
(360,313,0)
(556,261,0)
(54,537,0)
(250,577,0)
(410,261,0)
(144,115,0)
(264,526,0)
(390,270,0)
(740,537,0)
(654,487,0)
(738,211,0)
(588,191,0)
(395,475,0)
(263,404,0)
(91,424,0)
(48,666,0)
(542,0,0)
(117,64,0)
(499,207,0)
(246,536,0)
(585,536,0)
(140,537,0)
(98,283,0)
(479,116,0)
(667,285,0)
(239,148,0)
(404,636,0)
(625,469,0)
(577,284,0)
(295,228,0)
(233,327,0)
(72,483,0)
(319,53,0)
(159,289,0)
(642,289,0)
(380,486,0)
(127,64,0)
(435,282,0)
(159,429,0)
(659,221,0)
(68,261,0)
(482,429,0)
(164,696,0)
(394,212,0)
(577,72,0)
(696,78,0)
(110,694,0)
(500,132,0)
(55,435,0)
(425,537,0)
(392,276,0)
(578,630,0)
(420,697,0)
(678,602,0)
(304,151,0)
(397,247,0)
(75,262,0)
(125,602,0)
(343,65,0)
(730,16,0)
(587,78,0)
(586,615,0)
(624,160,0)
(564,307,0)
(575,313,0)
(209,727,0)
(439,273,0)
(84,627,0)
(21,682,0)
(191,261,0)
(195,467,0)
(497,597,0)
(699,125,0)
(577,347,0)
(261,419,0)
(233,333,0)
(186,175,0)
(308,261,0)
(324,410,0)
(416,614,0)
(109,725,0)
(735,445,0)
(233,537,0)
(80,685,0)
(363,671,0)
(52,678,0)
(399,540,0)
(233,72,0)
(127,550,0)
(676,445,0)
(710,395,0)
(310,754,0)
(149,445,0)
(360,602,0)
(207,475,0)
(743,252,0)
(282,507,0)
(597,78,0)
(186,429,0)
(288,316,0)
(685,429,0)
(597,561,0)
(649,656,0)
(686,228,0)
(600,537,0)
(569,265,0)
(748,761,0)
(541,597,0)
(249,261,0)
(498,550,0)
(421,261,0)
(206,742,0)
(186,448,0)
(372,539,0)
(340,660,0)
(511,711,0)
(458,430,0)
(330,172,0)
(279,293,0)
(322,700,0)
(706,586,0)
(619,168,0)
(577,429,0)
(422,328,0)
(316,697,0)
(217,103,0)
(222,319,0)
(163,404,0)
(48,694,0)
(719,549,0)
(390,684,0)
(550,467,0)
(160,705,0)
(56,586,0)
(579,537,0)
(181,459,0)
(111,457,0)
(263,643,0)
(528,195,0)
(595,232,0)
(233,284,0)
(561,259,0)
(458,427,0)
(666,48,0)
(78,537,0)
(159,327,0)
(621,711,0)
(762,643,0)
(49,540,0)
(160,259,0)
(46,568,0)
(271,540,0)
(767,79,0)
(695,568,0)
(588,289,0)
(384,261,0)
(148,239,0)
(170,182,0)
(563,7,0)
(761,0,0)
(675,48,0)
(506,271,0)
(283,445,0)
(230,445,0)
(610,536,0)
(670,461,0)
(688,313,0)
(672,517,0)
(351,588,0)
(588,530,0)
(668,199,0)
(107,578,0)
(179,11,0)
(232,595,0)
(755,96,0)
(124,395,0)
(532,307,0)
(499,274,0)
(543,261,0)
(577,555,0)
(263,585,0)
(593,757,0)
(246,518,0)
(576,242,0)
(643,180,0)
(637,656,0)
(7,445,0)
(475,571,0)
(128,316,0)
(429,463,0)
(757,436,0)
(239,334,0)
(230,8,0)
(523,515,0)
(50,205,0)
(400,280,0)
(364,53,0)
(459,760,0)
(225,642,0)
(11,179,0)
(691,64,0)
(457,445,0)
(293,388,0)
(557,563,0)
(38,233,0)
(725,109,0)
(679,559,0)
(381,281,0)
(483,26,0)
(376,445,0)
(458,637,0)
(7,572,0)
(629,249,0)
(88,259,0)
(184,137,0)
(685,530,0)
(204,78,0)
(211,383,0)
(458,718,0)
(735,176,0)
(752,270,0)
(135,47,0)
(711,511,0)
(287,261,0)
(685,656,0)
(162,271,0)
(530,94,0)
(568,46,0)
(492,100,0)
(671,344,0)
(609,261,0)
(388,487,0)
(199,668,0)
(578,290,0)
(236,618,0)
(258,445,0)
(630,259,0)
(119,445,0)
(411,379,0)
(485,555,0)
(233,742,0)
(583,537,0)
(434,107,0)
(126,88,0)
(505,726,0)
(102,479,0)
(296,761,0)
(749,578,0)
(709,459,0)
(713,563,0)
(566,435,0)
(512,678,0)
(452,239,0)
(577,410,0)
(393,313,0)
(238,259,0)
(660,259,0)
(747,354,0)
(406,261,0)
(335,120,0)
(486,737,0)
(718,656,0)
(289,182,0)
(259,537,0)
(477,261,0)
(188,184,0)
(161,457,0)
(726,283,0)
(397,549,0)
(526,445,0)
(106,466,0)
(249,388,0)
(458,233,0)
(96,276,0)
(53,149,0)
(240,537,0)
(92,277,0)
(367,671,0)
(382,1,0)
(16,748,0)
(458,396,0)
(291,473,0)
(578,107,0)
(637,289,0)
(515,176,0)
(161,261,0)
(97,328,0)
(645,461,0)
(636,65,0)
(420,445,0)
(415,537,0)
(560,517,0)
(660,572,0)
(137,229,0)
(34,246,0)
(198,487,0)
(690,26,0)
(637,453,0)
(731,107,0)
(509,449,0)
(228,686,0)
(186,384,0)
(547,34,0)
(22,555,0)
(286,747,0)
(324,168,0)
(263,540,0)
(575,343,0)
(756,34,0)
(72,252,0)
(518,246,0)
(216,715,0)
(684,445,0)
(571,636,0)
(689,152,0)
(191,440,0)
(163,379,0)
(766,486,0)
(79,767,0)
(417,313,0)
(627,578,0)
(249,414,0)
(635,715,0)
(468,694,0)
(185,696,0)
(152,536,0)
(494,336,0)
(572,7,0)
(403,352,0)
(44,96,0)
(153,410,0)
(727,399,0)
(326,246,0)
(15,445,0)
(408,204,0)
(51,717,0)
(753,476,0)
(283,98,0)
(183,229,0)
(89,489,0)
(631,540,0)
(478,687,0)
(56,656,0)
(617,392,0)
(651,537,0)
(685,175,0)
(278,270,0)
(271,746,0)
(414,421,0)
(66,472,0)
(510,307,0)
(582,132,0)
(575,97,0)
(539,372,0)
(360,343,0)
(205,694,0)
(172,602,0)
(14,238,0)
(574,674,0)
(421,414,0)
(440,445,0)
(458,159,0)
(257,221,0)
(577,289,0)
(556,255,0)
(450,519,0)
(378,117,0)
(567,352,0)
(632,313,0)
(303,445,0)
(642,535,0)
(73,740,0)
(491,293,0)
(133,521,0)
(584,9,0)
(580,97,0)
(186,168,0)
(489,440,0)
(420,369,0)
(113,684,0)
(247,519,0)
(120,545,0)
(639,524,0)
(212,518,0)
(312,287,0)
(252,72,0)
(159,191,0)
(611,87,0)
(540,399,0)
(553,724,0)
(125,691,0)
(448,261,0)
(9,313,0)
(280,64,0)
(587,273,0)
(759,440,0)
(174,343,0)
(376,79,0)
(458,685,0)
(156,508,0)
(18,586,0)
(465,614,0)
(143,191,0)
(245,98,0)
(303,354,0)
(220,360,0)
(277,259,0)
(744,168,0)
(242,119,0)
(346,448,0)
(718,356,0)
(371,230,0)
(47,709,0)
(758,232,0)
(297,518,0)
(117,694,0)
(233,289,0)
(658,1,0)
(256,445,0)
(488,445,0)
(648,658,0)
(572,660,0)
(261,477,0)
(626,711,0)
(440,759,0)
(724,559,0)
(168,261,0)
(463,277,0)
(419,261,0)
(637,429,0)
(324,555,0)
(119,674,0)
(479,636,0)
(616,287,0)
(324,175,0)
(551,397,0)
(118,667,0)
(571,475,0)
(195,528,0)
(148,68,0)
(725,390,0)
(715,684,0)
(549,537,0)
(563,261,0)
(458,588,0)
(76,180,0)
(208,556,0)
(28,742,0)
(281,32,0)
(442,417,0)
(559,445,0)
(129,228,0)
(674,119,0)
(139,497,0)
(239,261,0)
(6,537,0)
(98,149,0)
(659,586,0)
(134,347,0)
(463,445,0)
(638,475,0)
(524,760,0)
(150,537,0)
(561,597,0)
(9,343,0)
(735,602,0)
(653,678,0)
(497,259,0)
(601,261,0)
(705,445,0)
(233,410,0)
(337,207,0)
(306,257,0)
(634,472,0)
(763,252,0)
(32,281,0)
(46,759,0)
(603,392,0)
(99,587,0)
(57,724,0)
(244,537,0)
(588,656,0)
(518,212,0)
(478,261,0)
(528,682,0)
(361,351,0)
(238,15,0)
(253,746,0)
(558,222,0)
(98,261,0)
(742,261,0)
(194,404,0)
(409,445,0)
(328,259,0)
(609,764,0)
(248,98,0)
(69,499,0)
(127,549,0)
(242,475,0)
(661,529,0)
(341,222,0)
(538,268,0)
(696,261,0)
(32,445,0)
(270,390,0)
(151,281,0)
(347,261,0)
(739,515,0)
(697,420,0)
(233,555,0)
(707,103,0)
(60,537,0)
(705,700,0)
(186,740,0)
(169,354,0)
(379,274,0)
(433,369,0)
(88,141,0)
(520,392,0)
(117,618,0)
(643,636,0)
(536,445,0)
(737,259,0)
(350,116,0)
(168,230,0)
(282,515,0)
(722,11,0)
(117,549,0)
(630,578,0)
(233,740,0)
(34,26,0)
(727,479,0)
(212,64,0)
(544,717,0)
(467,550,0)
(61,397,0)
(693,630,0)
(555,388,0)
(667,64,0)
(501,536,0)
(186,530,0)
(432,549,0)
(334,614,0)
(366,540,0)
(17,272,0)
(348,539,0)
(728,347,0)
(685,36,0)
(575,602,0)
(487,388,0)
(56,289,0)
(234,571,0)
(746,445,0)
(315,445,0)
(271,652,0)
(686,603,0)
(103,268,0)
(503,16,0)
(314,697,0)
(688,602,0)
(175,261,0)
(254,501,0)
(81,79,0)
(459,750,0)
(667,319,0)
(650,618,0)
(172,599,0)
(370,659,0)
(461,141,0)
(427,100,0)
(683,115,0)
(7,563,0)
(241,537,0)
(528,631,0)
(587,261,0)
(26,483,0)
(101,445,0)
(395,519,0)
(95,561,0)
(377,284,0)
(668,202,0)
(659,656,0)
(186,327,0)
(333,261,0)
(149,152,0)
(686,276,0)
(527,372,0)
(659,289,0)
(354,169,0)
(535,642,0)
(319,667,0)
(317,207,0)
(375,601,0)
(667,118,0)
(202,529,0)
(618,236,0)
(271,379,0)
(173,414,0)
(142,343,0)
(666,236,0)
(179,372,0)
(368,125,0)
(203,215,0)
(97,575,0)
(59,767,0)
(709,47,0)
(681,612,0)
(472,687,0)
(207,116,0)
(655,117,0)
(231,427,0)
(68,78,0)
(694,445,0)
(27,715,0)
(141,445,0)
(324,327,0)
(305,767,0)
(700,705,0)
(294,118,0)
(430,289,0)
(107,259,0)
(342,746,0)
(321,578,0)
(35,65,0)
(458,382,0)
(456,635,0)
(502,333,0)
(543,445,0)
(577,161,0)
(534,517,0)
(633,445,0)
(393,176,0)
(26,34,0)
(525,445,0)
(233,191,0)
(79,376,0)
(159,448,0)
(31,29,0)
(402,80,0)
(186,347,0)
(147,160,0)
(94,445,0)
(592,127,0)
(159,161,0)
(764,609,0)
(604,719,0)
(536,585,0)
(86,587,0)
(64,691,0)
(464,737,0)
(451,431,0)
(577,591,0)
(526,746,0)
(327,287,0)
(12,276,0)
(186,289,0)
(486,445,0)
(596,445,0)
(299,384,0)
(700,261,0)
(25,100,0)
(685,289,0)
(141,88,0)
(729,637,0)
(455,727,0)
(493,525,0)
(470,64,0)
(438,250,0)
(682,528,0)
(478,78,0)
(732,718,0)
(325,678,0)
(678,176,0)
(333,15,0)
(754,382,0)
(163,643,0)
(631,445,0)
(300,429,0)
(41,575,0)
(220,247,0)
(58,283,0)
(20,249,0)
(347,282,0)
(142,688,0)
(674,574,0)
(270,278,0)
(213,746,0)
(390,635,0)
(13,746,0)
(685,191,0)
(748,16,0)
(293,491,0)
(398,303,0)
(597,237,0)
(167,608,0)
(430,429,0)
(77,537,0)
(328,97,0)
(458,324,0)
(204,686,0)
(318,476,0)
(515,523,0)
(324,347,0)
(682,261,0)
(157,369,0)
(548,172,0)
(178,431,0)
(189,574,0)
(239,78,0)
(525,176,0)
(301,271,0)
(109,259,0)
(462,636,0)
(229,261,0)
(212,247,0)
(530,261,0)
(578,627,0)
(30,308,0)
(490,575,0)
(271,499,0)
(268,103,0)
(682,149,0)
(608,167,0)
(369,420,0)
(742,600,0)
(172,313,0)
(117,247,0)
(577,191,0)
(677,360,0)
(590,53,0)
(383,211,0)
(233,161,0)
(154,259,0)
(736,262,0)
(631,404,0)
(123,94,0)
(74,559,0)
(637,586,0)
(691,125,0)
(152,246,0)
(271,404,0)
(577,175,0)
(345,686,0)
(146,278,0)
(517,119,0)
(480,247,0)
(578,29,0)
(457,536,0)
(721,537,0)
(418,508,0)
(271,395,0)
(489,261,0)
(260,719,0)
(131,537,0)
(471,290,0)
(484,609,0)
(24,530,0)
(9,352,0)
(577,586,0)
(56,429,0)
(121,689,0)
(280,247,0)
(287,149,0)
(336,537,0)
(467,195,0)
(598,191,0)
(292,606,0)
(640,530,0)
(716,204,0)
(383,285,0)
(546,601,0)
(259,232,0)
(387,508,0)
(533,7,0)
(399,445,0)
(469,489,0)
(227,393,0)
(712,764,0)
(622,393,0)
(324,586,0)
(718,429,0)
(236,666,0)
(759,210,0)
(323,499,0)
(391,491,0)
(714,229,0)
(141,461,0)
(211,501,0)
(458,577,0)
(276,537,0)
(635,390,0)
(233,696,0)
(516,684,0)
(656,256,0)
(704,46,0)
(601,733,0)
(343,313,0)
(372,261,0)
(588,429,0)
(202,445,0)
(508,475,0)
(182,170,0)
(198,376,0)
(45,9,0)
(90,445,0)
(332,256,0)
(421,376,0)
(397,64,0)
(718,586,0)
(63,656,0)
(659,429,0)
(719,64,0)
(324,72,0)
(414,249,0)
(459,120,0)
(457,246,0)
(219,735,0)
(43,650,0)
(507,282,0)
(186,586,0)
(759,46,0)
(132,173,0)
(319,222,0)
(384,32,0)
(302,175,0)
(53,319,0)
(233,429,0)
(431,578,0)
(436,259,0)
(581,145,0)
(125,343,0)
(436,757,0)
(614,78,0)
(430,656,0)
(184,261,0)
(349,667,0)
(163,631,0)
(352,187,0)
(605,198,0)
(223,652,0)
(534,187,0)
(430,586,0)
(3,280,0)
(247,220,0)
(614,334,0)
(48,746,0)
(476,259,0)
(352,9,0)
(159,410,0)
(97,580,0)
(213,356,0)
(273,587,0)
(761,296,1)
(159,429,1)
(567,580,1)
(495,570,1)
(11,722,1)
(228,295,1)
(571,234,1)
(308,30,1)
(216,457,1)
(233,696,1)
(125,343,1)
(719,247,1)
(675,504,1)
(324,555,1)
(106,365,1)
(369,261,1)
(419,406,1)
(114,213,1)
(211,738,1)
(694,468,1)
(61,551,1)
(310,658,1)
(342,746,1)
(299,481,1)
(685,656,1)
(458,56,1)
(270,752,1)
(588,289,1)
(383,211,1)
(266,390,1)
(631,404,1)
(678,602,1)
(458,637,1)
(515,176,1)
(56,272,1)
(109,259,1)
(397,549,1)
(652,475,1)
(239,148,1)
(625,489,1)
(609,261,1)
(3,536,1)
(504,701,1)
(55,566,1)
(552,83,1)
(614,416,1)
(630,62,1)
(541,10,1)
(766,380,1)
(341,53,1)
(492,757,1)
(325,653,1)
(475,571,1)
(48,675,1)
(482,300,1)
(588,656,1)
(233,384,1)
(22,376,1)
(260,604,1)
(727,399,1)
(503,354,1)
(720,556,1)
(732,114,1)
(430,656,1)
(430,586,1)
(379,411,1)
(124,404,1)
(164,273,1)
(134,728,1)
(452,583,1)
(672,187,1)
(529,661,1)
(485,22,1)
(169,454,1)
(489,89,1)
(300,256,1)
(491,293,1)
(685,191,1)
(149,152,1)
(559,74,1)
(84,100,1)
(395,475,1)
(56,656,1)
(588,351,1)
(582,500,1)
(735,176,1)
(279,734,1)
(174,387,1)
(252,149,1)
(631,163,1)
(421,261,1)
(659,656,1)
(706,202,1)
(200,555,1)
(578,630,1)
(239,261,1)
(332,656,1)
(21,320,1)
(586,18,1)
(697,314,1)
(168,619,1)
(42,475,1)
(181,524,1)
(372,539,1)
(159,586,1)
(206,28,1)
(271,404,1)
(526,264,1)
(497,259,1)
(678,176,1)
(515,523,1)
(534,517,1)
(701,618,1)
(192,287,1)
(637,429,1)
(664,705,1)
(575,313,1)
(160,259,1)
(360,313,1)
(56,289,1)
(243,700,1)
(457,536,1)
(269,92,1)
(329,174,1)
(632,119,1)
(639,663,1)
(78,597,1)
(584,567,1)
(696,185,1)
(563,261,1)
(559,237,1)
(468,447,1)
(530,24,1)
(175,261,1)
(508,156,1)
(82,70,1)
(767,59,1)
(159,289,1)
(117,247,1)
(667,549,1)
(681,463,1)
(263,540,1)
(152,246,1)
(142,688,1)
(252,743,1)
(374,181,1)
(324,136,1)
(250,438,1)
(247,220,1)
(219,507,1)
(516,708,1)
(524,760,1)
(295,129,1)
(668,199,1)
(448,346,1)
(330,548,1)
(423,643,1)
(577,289,1)
(643,636,1)
(387,727,1)
(599,172,1)
(499,207,1)
(97,437,1)
(575,602,1)
(361,106,1)
(696,78,1)
(505,353,1)
(186,161,1)
(156,418,1)
(727,479,1)
(354,169,1)
(68,78,1)
(188,183,1)
(159,265,1)
(37,450,1)
(31,749,1)
(577,429,1)
(159,555,1)
(118,64,1)
(249,388,1)
(287,312,1)
(578,321,1)
(593,436,1)
(517,475,1)
(179,372,1)
(172,330,1)
(674,407,1)
(404,636,1)
(432,545,1)
(458,430,1)
(643,762,1)
(617,520,1)
(761,748,1)
(225,399,1)
(718,732,1)
(233,327,1)
(557,713,1)
(360,193,1)
(198,605,1)
(601,546,1)
(489,440,1)
(434,731,1)
(430,562,1)
(324,410,1)
(218,138,1)
(242,576,1)
(407,574,1)
(95,692,1)
(27,216,1)
(68,261,1)
(754,310,1)
(360,343,1)
(589,432,1)
(66,634,1)
(718,656,1)
(722,372,1)
(649,559,1)
(233,586,1)
(53,149,1)
(229,261,1)
(590,364,1)
(431,259,1)
(270,278,1)
(234,638,1)
(172,602,1)
(236,666,1)
(667,64,1)
(233,740,1)
(360,602,1)
(545,741,1)
(186,530,1)
(493,284,1)
(37,76,1)
(436,259,1)
(478,565,1)
(728,7,1)
(174,207,1)
(34,246,1)
(280,549,1)
(26,34,1)
(568,751,1)
(478,261,1)
(186,347,1)
(604,283,1)
(17,477,1)
(344,671,1)
(347,134,1)
(739,347,1)
(577,333,1)
(455,209,1)
(705,243,1)
(427,586,1)
(186,586,1)
(542,761,1)
(157,697,1)
(685,410,1)
(233,410,1)
(660,259,1)
(115,683,1)
(714,229,1)
(719,64,1)
(217,707,1)
(667,118,1)
(19,711,1)
(324,530,1)
(106,261,1)
(700,261,1)
(159,448,1)
(236,618,1)
(477,122,1)
(118,549,1)
(133,514,1)
(97,328,1)
(631,643,1)
(744,764,1)
(105,112,1)
(51,544,1)
(209,508,1)
(331,417,1)
(469,625,1)
(389,73,1)
(185,164,1)
(749,627,1)
(612,681,1)
(685,80,1)
(449,509,1)
(291,271,1)
(117,476,1)
(458,324,1)
(634,478,1)
(426,112,1)
(659,429,1)
(159,530,1)
(104,215,1)
(390,270,1)
(459,750,1)
(324,333,1)
(107,434,1)
(525,493,1)
(163,379,1)
(396,449,1)
(88,259,1)
(252,261,1)
(546,375,1)
(621,369,1)
(80,402,1)
(421,82,1)
(178,107,1)
(333,40,1)
(417,442,1)
(456,155,1)
(571,636,1)
(644,280,1)
(205,694,1)
(163,643,1)
(48,694,1)
(141,461,1)
(103,217,1)
(154,709,1)
(726,505,1)
(172,343,1)
(660,340,1)
(458,382,1)
(560,672,1)
(463,277,1)
(284,261,1)
(118,294,1)
(588,429,1)
(314,316,1)
(714,606,1)
(208,507,1)
(37,393,1)
(281,151,1)
(69,379,1)
(629,173,1)
(477,261,1)
(458,427,1)
(533,563,1)
(543,158,1)
(321,431,1)
(581,473,1)
(648,709,1)
(636,599,1)
(630,259,1)
(186,72,1)
(616,483,1)
(657,188,1)
(201,528,1)
(695,191,1)
(587,86,1)
(153,646,1)
(703,160,1)
(283,98,1)
(214,145,1)
(578,107,1)
(238,259,1)
(580,97,1)
(388,487,1)
(127,549,1)
(355,586,1)
(437,575,1)
(523,386,1)
(517,560,1)
(566,219,1)
(311,345,1)
(435,282,1)
(577,656,1)
(717,78,1)
(33,609,1)
(277,259,1)
(472,78,1)
(184,261,1)
(446,397,1)
(454,417,1)
(417,176,1)
(348,197,1)
(248,245,1)
(242,475,1)
(262,736,1)
(7,563,1)
(440,759,1)
(486,737,1)
(705,160,1)
(685,530,1)
(259,232,1)
(734,388,1)
(280,64,1)
(204,78,1)
(611,410,1)
(346,177,1)
(122,261,1)
(761,354,1)
(125,368,1)
(173,132,1)
(159,656,1)
(530,261,1)
(447,473,1)
(700,322,1)
(435,55,1)
(663,549,1)
(476,318,1)
(577,168,1)
(136,720,1)
(128,469,1)
(622,227,1)
(524,639,1)
(246,536,1)
(204,261,1)
(719,549,1)
(682,165,1)
(733,601,1)
(561,259,1)
(427,656,1)
(486,766,1)
(450,395,1)
(357,747,1)
(58,98,1)
(261,419,1)
(427,429,1)
(665,252,1)
(352,9,1)
(9,602,1)
(448,261,1)
(305,448,1)
(757,436,1)
(165,21,1)
(387,508,1)
(511,711,1)
(763,719,1)
(163,201,1)
(13,0,1)
(372,78,1)
(110,673,1)
(575,490,1)
(53,261,1)
(120,545,1)
(159,72,1)
(233,168,1)
(486,380,1)
(742,206,1)
(198,261,1)
(369,433,1)
(397,64,1)
(685,586,1)
(646,420,1)
(458,685,1)
(94,123,1)
(141,88,1)
(327,192,1)
(577,410,1)
(623,175,1)
(543,261,1)
(159,175,1)
(233,347,1)
(159,161,1)
(555,485,1)
(271,746,1)
(757,593,1)
(271,506,1)
(465,148,1)
(393,176,1)
(718,429,1)
(286,0,1)
(343,343,1)
(740,389,1)
(705,700,1)
(570,491,1)
(747,286,1)
(296,268,1)
(119,674,1)
(152,689,1)
(340,664,1)
(257,306,1)
(403,9,1)
(540,49,1)
(283,726,1)
(160,147,1)
(458,659,1)
(226,530,1)
(583,179,1)
(713,572,1)
(765,282,1)
(618,650,1)
(351,361,1)
(588,586,1)
(711,626,1)
(682,149,1)
(326,280,1)
(433,157,1)
(548,462,1)
(158,32,1)
(242,119,1)
(186,333,1)
(171,611,1)
(205,50,1)
(280,247,1)
(550,127,1)
(109,196,1)
(685,175,1)
(151,304,1)
(2,521,1)
(5,104,1)
(186,191,1)
(375,137,1)
(458,396,1)
(671,363,1)
(293,388,1)
(211,501,1)
(352,403,1)
(458,159,1)
(177,516,1)
(324,586,1)
(30,714,1)
(137,184,1)
(587,78,1)
(709,47,1)
(0,761,1)
(186,740,1)
(107,259,1)
(363,367,1)
(522,132,1)
(139,359,1)
(487,654,1)
(710,124,1)
(379,479,1)
(615,355,1)
(418,242,1)
(64,691,1)
(394,297,1)
(98,248,1)
(531,441,1)
(207,317,1)
(562,331,1)
(565,680,1)
(653,512,1)
(198,376,1)
(480,242,1)
(117,64,1)
(306,236,1)
(745,329,1)
(759,210,1)
(647,464,1)
(603,392,1)
(702,499,1)
(324,347,1)
(328,259,1)
(460,682,1)
(68,218,1)
(215,203,1)
(293,261,1)
(117,378,1)
(168,261,1)
(232,595,1)
(386,739,1)
(213,746,1)
(358,757,1)
(668,424,1)
(163,540,1)
(472,66,1)
(661,668,1)
(554,189,1)
(112,64,1)
(263,643,1)
(608,87,1)
(764,712,1)
(347,261,1)
(87,171,1)
(9,343,1)
(478,78,1)
(613,678,1)
(471,578,1)
(390,635,1)
(371,168,1)
(195,467,1)
(424,91,1)
(731,630,1)
(224,615,1)
(650,43,1)
(303,398,1)
(735,435,1)
(233,38,1)
(186,410,1)
(577,347,1)
(698,198,1)
(313,235,1)
(275,414,1)
(467,397,1)
(738,501,1)
(609,484,1)
(287,149,1)
(483,26,1)
(659,370,1)
(125,602,1)
(688,313,1)
(666,48,1)
(271,499,1)
(81,767,1)
(458,233,1)
(63,649,1)
(400,3,1)
(231,471,1)
(9,45,1)
(561,95,1)
(631,528,1)
(730,503,1)
(202,529,1)
(597,561,1)
(427,231,1)
(459,760,1)
(420,511,1)
(528,682,1)
(553,141,1)
(327,287,1)
(256,332,1)
(162,301,1)
(501,246,1)
(272,17,1)
(130,333,1)
(41,328,1)
(273,587,1)
(764,609,1)
(57,553,1)
(29,31,1)
(127,64,1)
(410,261,1)
(606,292,1)
(404,194,1)
(174,534,1)
(320,719,1)
(517,119,1)
(393,343,1)
(577,555,1)
(203,262,1)
(271,540,1)
(759,46,1)
(614,78,1)
(712,33,1)
(233,555,1)
(736,75,1)
(395,710,1)
(292,229,1)
(233,448,1)
(551,460,1)
(233,289,1)
(479,636,1)
(232,750,1)
(366,71,1)
(312,616,1)
(120,335,1)
(457,111,1)
(121,623,1)
(148,68,1)
(79,81,1)
(743,763,1)
(385,226,1)
(197,527,1)
(421,376,1)
(575,343,1)
(23,254,1)
(577,161,1)
(393,622,1)
(370,342,1)
(7,572,1)
(441,613,1)
(678,612,1)
(72,252,1)
(487,198,1)
(569,495,1)
(319,222,1)
(26,690,1)
(324,448,1)
(682,261,1)
(442,37,1)
(397,247,1)
(577,250,1)
(667,319,1)
(179,11,1)
(263,379,1)
(47,135,1)
(254,327,1)
(322,703,1)
(46,568,1)
(186,656,1)
(718,289,1)
(334,614,1)
(685,289,1)
(159,191,1)
(167,608,1)
(398,236,1)
(747,354,1)
(444,87,1)
(458,718,1)
(461,645,1)
(659,586,1)
(680,273,1)
(718,586,1)
(644,246,1)
(56,429,1)
(187,352,1)
(262,149,1)
(170,344,1)
(233,656,1)
(576,2,1)
(238,14,1)
(50,257,1)
(324,175,1)
(381,384,1)
(534,187,1)
(73,543,1)
(59,305,1)
(671,259,1)
(726,259,1)
(751,695,1)
(697,316,1)
(0,542,1)
(577,284,1)
(233,72,1)
(73,717,1)
(526,746,1)
(603,311,1)
(191,598,1)
(514,580,1)
(324,191,1)
(716,408,1)
(372,261,1)
(748,413,1)
(161,552,1)
(288,128,1)
(349,383,1)
(577,175,1)
(46,704,1)
(289,642,1)
(481,714,1)
(141,108,1)
(470,534,1)
(737,647,1)
(359,541,1)
(406,526,1)
(637,586,1)
(467,550,1)
(416,465,1)
(420,369,1)
(233,429,1)
(186,289,1)
(484,275,1)
(98,149,1)
(392,617,1)
(79,767,1)
(271,652,1)
(748,16,1)
(607,737,1)
(476,259,1)
(686,603,1)
(147,624,1)
(52,325,1)
(5,261,1)
(263,404,1)
(652,223,1)
(597,237,1)
(725,109,1)
(659,289,1)
(39,435,1)
(473,271,1)
(417,343,1)
(233,530,1)
(408,603,1)
(497,139,1)
(462,393,1)
(762,426,1)
(592,498,1)
(96,755,1)
(498,397,1)
(397,61,1)
(333,261,1)
(577,586,1)
(213,214,1)
(72,665,1)
(382,754,1)
(512,612,1)
(597,497,1)
(123,385,1)
(399,540,1)
(196,270,1)
(38,600,1)
(111,161,1)
(472,261,1)
(678,52,1)
(572,660,1)
(655,694,1)
(469,489,1)
(645,670,1)
(368,699,1)
(626,621,1)
(691,125,1)
(742,78,1)
(578,627,1)
(430,429,1)
(414,173,1)
(518,212,1)
(431,451,1)
(618,117,1)
(75,149,1)
(49,366,1)
(227,343,1)
(145,354,1)
(268,538,1)
(34,756,1)
(56,586,1)
(420,697,1)
(284,443,1)
(556,208,1)
(500,491,1)
(184,657,1)
(91,717,1)
(32,281,1)
(186,513,1)
(159,410,1)
(189,358,1)
(233,161,1)
(230,8,1)
(212,549,1)
(501,23,1)
(297,326,1)
(605,200,1)
(186,384,1)
(186,175,1)
(563,557,1)
(182,170,1)
(144,313,1)
(679,724,1)
(175,302,1)
(577,191,1)
(686,204,1)
(62,693,1)
(227,182,1)
(146,635,1)
(429,482,1)
(413,16,1)
(719,260,1)
(126,224,1)
(507,765,1)
(735,602,1)
(491,391,1)
(380,261,1)
(642,225,1)
(539,348,1)
(10,259,1)
(451,178,1)
(635,456,1)
(293,279,1)
(727,455,1)
(304,381,1)
(233,333,1)
(271,395,1)
(155,715,1)
(638,636,1)
(324,168,1)
(277,269,1)
(239,78,1)
(417,313,1)
(337,479,1)
(692,497,1)
(578,29,1)
(411,338,1)
(127,247,1)
(637,289,1)
(707,748,1)
(761,268,1)
(97,575,1)
(578,431,1)
(608,444,1)
(574,554,1)
(324,429,1)
(642,535,1)
(752,278,1)
(756,547,1)
(239,334,1)
(283,58,1)
(233,175,1)
(186,555,1)
(212,247,1)
(688,745,1)
(489,261,1)
(294,319,1)
(215,262,1)
(690,34,1)
(222,558,1)
(499,323,1)
(689,121,1)
(18,706,1)
(709,459,1)
(627,84,1)
(324,161,1)
(15,238,1)
(585,263,1)
(186,284,1)
(764,237,1)
(458,186,1)
(369,440,1)
(317,337,1)
(70,249,1)
(271,379,1)
(467,446,1)
(302,644,1)
(365,469,1)
(86,99,1)
(555,261,1)
(737,259,1)
(145,581,1)
(161,261,1)
(212,394,1)
(402,5,1)
(257,354,1)
(506,162,1)
(377,735,1)
(92,429,1)
(324,656,1)
(100,25,1)
(89,405,1)
(587,261,1)
(688,602,1)
(251,742,1)
(163,404,1)
(262,261,1)
(755,44,1)
(316,288,1)
(245,726,1)
(479,102,1)
(577,72,1)
(459,120,1)
(601,261,1)
(138,452,1)
(677,480,1)
(24,640,1)
(37,702,1)
(265,569,1)
(129,204,1)
(88,126,1)
(640,477,1)
(335,374,1)
(301,746,1)
(628,247,1)
(76,652,1)
(577,327,1)
(384,299,1)
(343,142,1)
(436,531,1)
(328,422,1)
(588,191,1)
(229,137,1)
(117,549,1)
(656,63,1)
(303,354,1)
(228,261,1)
(343,313,1)
(559,724,1)
(71,115,1)
(670,88,1)
(704,568,1)
(186,429,1)
(339,474,1)
(48,354,1)
(280,400,1)
(391,293,1)
(443,377,1)
(143,94,1)
(83,631,1)
(474,610,1)
(619,744,1)
(132,582,1)
(135,459,1)
(549,589,1)
(267,205,1)
(458,588,1)
(422,42,1)
(273,439,1)
(594,179,1)
(28,336,1)
(235,632,1)
(696,261,1)
(342,267,1)
(735,39,1)
(509,524,1)
(93,46,1)
(117,694,1)
(164,472,1)
(159,327,1)
(528,195,1)
(345,392,1)
(183,525,1)
(233,284,1)
(405,440,1)
(353,215,1)
(637,656,1)
(233,742,1)
(166,607,1)
(202,668,1)
(473,291,1)
(173,522,1)
(558,341,1)
(253,13,1)
(324,72,1)
(380,166,1)
(220,360,1)
(9,313,1)
(577,530,1)
(186,327,1)
(127,592,1)
(364,349,1)
(34,536,1)
(511,19,1)
(376,79,1)
(508,475,1)
(635,715,1)
(40,502,1)
(414,421,1)
(683,144,1)
(598,143,1)
(410,153,1)
(520,239,1)
(439,587,1)
(414,249,1)
(490,41,1)
(125,313,1)
(110,694,1)
(614,261,1)
(324,289,1)
(610,167,1)
(525,176,1)
(742,261,1)
(513,594,1)
(338,387,1)
(699,470,1)
(430,289,1)
(384,261,1)
(319,53,1)
(108,461,1)
(521,133,1)
(102,105,1)
(323,69,1)
(268,103,1)
(527,740,1)
(378,476,1)
(507,282,1)
(246,518,1)
(538,103,1)
(194,628,1)
(336,494,1)
(717,51,1)
(435,261,1)
(624,486,1)
(715,27,1)
(674,574,1)
(186,448,1)
(438,308,1)
(53,590,1)
(25,492,1)
(207,475,1)
(654,698,1)
(43,117,1)
(249,261,1)
(393,313,1)
(172,313,1)
(724,57,1)
(427,100,1)
(536,585,1)
(501,536,1)
(204,716,1)
(228,78,1)
(230,371,1)
(287,261,1)
(673,303,1)
(264,110,1)
(708,266,1)
(367,289,1)
(758,154,1)
(16,730,1)
(379,399,1)
(118,247,1)
(547,72,1)
(14,130,1)
(152,536,1)
(631,379,1)
(318,753,1)
(223,423,1)
(556,261,1)
(282,515,1)
(98,261,1)
(212,64,1)
(320,667,1)
(693,29,1)
(458,577,1)
(7,533,1)
(232,758,1)
(229,733,1)
(688,343,1)
(278,641,1)
(45,584,1)
(457,246,1)
(233,191,1)
(588,530,1)
(324,327,1)
(249,20,1)
(48,746,1)
(631,540,1)
(746,253,1)
(686,228,1)
(502,230,1)
(641,146,1)
(20,629,1)
(637,729,1)
(390,725,1)
(685,429,1)
(99,96,1)
(667,247,1)
(600,251,1)
(658,648,1)
(44,686,1)
(193,677,1)
(577,448,1)
(464,15,1)
(729,357,1)
(191,261,1)
(74,679,1)
(494,696,1)
(544,78,1)
(263,339,1)
(308,261,1)
(271,643,1)
(753,655,1)
(210,93,1)
(186,168,1)
(588,656,2)
(575,393,2)
(346,215,2)
(661,717,2)
(507,491,2)
(271,404,2)
(233,410,2)
(280,64,2)
(86,179,2)
(637,586,2)
(572,491,2)
(204,179,2)
(559,724,2)
(233,555,2)
(93,477,2)
(9,313,2)
(271,395,2)
(343,313,2)
(457,246,2)
(458,56,2)
(556,507,2)
(11,714,2)
(665,719,2)
(46,477,2)
(740,714,2)
(420,697,2)
(601,507,2)
(246,518,2)
(609,261,2)
(141,717,2)
(458,588,2)
(34,536,2)
(183,507,2)
(588,530,2)
(523,491,2)
(470,534,2)
(277,717,2)
(9,602,2)
(262,469,2)
(691,125,2)
(34,719,2)
(597,709,2)
(74,717,2)
(577,72,2)
(414,421,2)
(521,580,2)
(271,643,2)
(348,717,2)
(252,719,2)
(479,112,2)
(239,334,2)
(161,261,2)
(686,179,2)
(283,215,2)
(759,46,2)
(499,387,2)
(516,215,2)
(45,580,2)
(685,429,2)
(303,236,2)
(158,714,2)
(742,78,2)
(688,387,2)
(739,491,2)
(329,112,2)
(18,717,2)
(705,491,2)
(714,606,2)
(387,242,2)
(643,636,2)
(700,261,2)
(300,717,2)
(379,399,2)
(261,236,2)
(73,714,2)
(378,473,2)
(735,435,2)
(233,656,2)
(658,709,2)
(159,429,2)
(41,393,2)
(767,215,2)
(250,714,2)
(283,98,2)
(159,410,2)
(287,719,2)
(218,179,2)
(198,376,2)
(56,477,2)
(233,327,2)
(478,78,2)
(735,507,2)
(363,757,2)
(399,540,2)
(668,424,2)
(165,215,2)
(219,507,2)
(511,711,2)
(712,491,2)
(439,179,2)
(107,259,2)
(390,725,2)
(761,748,2)
(127,397,2)
(688,343,2)
(643,112,2)
(436,259,2)
(174,112,2)
(120,545,2)
(654,215,2)
(726,215,2)
(395,242,2)
(89,477,2)
(375,507,2)
(617,179,2)
(238,259,2)
(26,34,2)
(156,242,2)
(613,717,2)
(110,236,2)
(542,417,2)
(239,261,2)
(271,379,2)
(696,261,2)
(393,387,2)
(421,261,2)
(667,549,2)
(659,656,2)
(660,259,2)
(340,491,2)
(427,429,2)
(697,316,2)
(102,112,2)
(430,417,2)
(659,289,2)
(534,187,2)
(273,587,2)
(749,757,2)
(342,746,2)
(489,477,2)
(578,630,2)
(594,179,2)
(182,170,2)
(603,392,2)
(522,491,2)
(123,477,2)
(213,473,2)
(331,417,2)
(570,491,2)
(508,475,2)
(119,674,2)
(601,261,2)
(608,469,2)
(324,555,2)
(709,459,2)
(198,215,2)
(39,507,2)
(610,469,2)
(229,733,2)
(13,0,2)
(212,280,2)
(393,176,2)
(126,717,2)
(586,717,2)
(587,179,2)
(550,127,2)
(582,491,2)
(159,555,2)
(42,393,2)
(268,103,2)
(207,112,2)
(324,429,2)
(161,215,2)
(727,479,2)
(111,215,2)
(56,586,2)
(324,72,2)
(513,179,2)
(465,179,2)
(238,491,2)
(179,372,2)
(674,574,2)
(142,112,2)
(173,491,2)
(604,215,2)
(690,719,2)
(249,491,2)
(440,477,2)
(50,236,2)
(62,757,2)
(312,719,2)
(702,387,2)
(632,757,2)
(374,524,2)
(483,719,2)
(553,717,2)
(572,660,2)
(73,717,2)
(615,717,2)
(207,475,2)
(355,717,2)
(467,397,2)
(233,191,2)
(671,259,2)
(578,757,2)
(727,508,2)
(446,397,2)
(525,507,2)
(659,429,2)
(563,491,2)
(117,64,2)
(637,429,2)
(186,72,2)
(227,757,2)
(746,253,2)
(223,112,2)
(141,88,2)
(431,757,2)
(344,671,2)
(427,586,2)
(505,215,2)
(47,524,2)
(764,491,2)
(648,709,2)
(293,261,2)
(186,586,2)
(500,491,2)
(137,507,2)
(51,709,2)
(303,354,2)
(578,29,2)
(129,179,2)
(330,393,2)
(260,215,2)
(517,187,2)
(163,215,2)
(163,643,2)
(343,534,2)
(686,204,2)
(574,757,2)
(268,417,2)
(631,404,2)
(271,746,2)
(105,112,2)
(550,397,2)
(483,26,2)
(670,717,2)
(457,215,2)
(709,524,2)
(711,469,2)
(667,319,2)
(118,549,2)
(530,477,2)
(699,534,2)
(638,393,2)
(271,0,2)
(576,580,2)
(135,524,2)
(458,427,2)
(694,468,2)
(251,179,2)
(430,289,2)
(371,491,2)
(239,179,2)
(724,717,2)
(159,191,2)
(182,757,2)
(701,618,2)
(369,261,2)
(678,717,2)
(430,656,2)
(664,491,2)
(459,760,2)
(164,179,2)
(366,757,2)
(682,149,2)
(402,215,2)
(40,491,2)
(186,175,2)
(148,68,2)
(657,507,2)
(667,247,2)
(186,555,2)
(437,393,2)
(418,242,2)
(485,215,2)
(455,508,2)
(745,112,2)
(233,429,2)
(497,259,2)
(481,714,2)
(548,393,2)
(685,215,2)
(337,112,2)
(270,278,2)
(271,540,2)
(761,417,2)
(367,757,2)
(508,242,2)
(324,410,2)
(551,215,2)
(717,78,2)
(186,284,2)
(381,714,2)
(174,387,2)
(344,757,2)
(112,534,2)
(585,263,2)
(229,507,2)
(451,757,2)
(78,709,2)
(517,119,2)
(420,511,2)
(384,261,2)
(72,719,2)
(597,561,2)
(32,714,2)
(685,410,2)
(518,212,2)
(618,117,2)
(104,215,2)
(631,528,2)
(729,0,2)
(71,757,2)
(667,719,2)
(168,261,2)
(266,215,2)
(469,489,2)
(761,268,2)
(52,717,2)
(473,271,2)
(390,270,2)
(756,719,2)
(0,761,2)
(9,580,2)
(152,689,2)
(98,149,2)
(259,709,2)
(352,9,2)
(431,259,2)
(262,149,2)
(87,469,2)
(667,118,2)
(232,595,2)
(170,344,2)
(502,491,2)
(539,714,2)
(211,501,2)
(186,191,2)
(501,719,2)
(339,469,2)
(463,717,2)
(311,179,2)
(153,469,2)
(458,396,2)
(234,393,2)
(751,477,2)
(534,580,2)
(525,176,2)
(354,169,2)
(427,757,2)
(317,112,2)
(232,709,2)
(191,261,2)
(10,709,2)
(103,417,2)
(68,261,2)
(707,417,2)
(484,491,2)
(503,417,2)
(442,757,2)
(351,469,2)
(607,491,2)
(228,179,2)
(205,694,2)
(233,347,2)
(577,586,2)
(464,491,2)
(372,78,2)
(629,491,2)
(278,215,2)
(685,191,2)
(186,384,2)
(688,112,2)
(94,123,2)
(515,523,2)
(625,477,2)
(688,534,2)
(577,284,2)
(125,343,2)
(206,179,2)
(202,668,2)
(414,491,2)
(588,289,2)
(399,757,2)
(577,429,2)
(149,469,2)
(737,491,2)
(170,757,2)
(19,469,2)
(413,417,2)
(253,0,2)
(163,404,2)
(389,717,2)
(263,379,2)
(501,246,2)
(759,477,2)
(719,549,2)
(682,215,2)
(396,524,2)
(764,609,2)
(286,0,2)
(584,580,2)
(388,215,2)
(332,717,2)
(106,261,2)
(17,477,2)
(316,469,2)
(224,717,2)
(152,469,2)
(746,0,2)
(9,343,2)
(436,717,2)
(706,717,2)
(419,236,2)
(349,719,2)
(448,261,2)
(301,0,2)
(341,719,2)
(742,179,2)
(324,448,2)
(637,656,2)
(646,469,2)
(743,719,2)
(142,688,2)
(326,280,2)
(631,379,2)
(281,714,2)
(122,236,2)
(178,757,2)
(364,719,2)
(438,714,2)
(478,261,2)
(172,602,2)
(229,261,2)
(186,289,2)
(376,215,2)
(72,252,2)
(252,149,2)
(577,530,2)
(405,477,2)
(233,696,2)
(650,473,2)
(714,229,2)
(48,354,2)
(159,327,2)
(63,717,2)
(7,572,2)
(99,179,2)
(61,215,2)
(138,179,2)
(587,78,2)
(327,719,2)
(430,586,2)
(487,215,2)
(314,469,2)
(121,469,2)
(422,393,2)
(227,534,2)
(66,273,2)
(230,491,2)
(393,112,2)
(97,328,2)
(216,215,2)
(603,179,2)
(640,477,2)
(683,757,2)
(15,238,2)
(544,709,2)
(410,469,2)
(210,477,2)
(279,215,2)
(397,215,2)
(458,324,2)
(136,507,2)
(391,215,2)
(23,719,2)
(306,236,2)
(410,261,2)
(618,473,2)
(718,429,2)
(25,757,2)
(313,757,2)
(686,603,2)
(269,717,2)
(353,215,2)
(387,508,2)
(245,215,2)
(647,491,2)
(159,72,2)
(254,719,2)
(486,380,2)
(501,536,2)
(289,757,2)
(100,757,2)
(423,112,2)
(387,727,2)
(705,160,2)
(167,608,2)
(189,757,2)
(343,387,2)
(202,717,2)
(202,529,2)
(430,429,2)
(671,757,2)
(235,757,2)
(600,179,2)
(159,530,2)
(733,601,2)
(324,333,2)
(328,393,2)
(159,161,2)
(575,602,2)
(708,215,2)
(232,750,2)
(324,161,2)
(458,382,2)
(434,757,2)
(745,534,2)
(609,491,2)
(31,757,2)
(287,261,2)
(142,534,2)
(208,507,2)
(68,78,2)
(324,327,2)
(393,757,2)
(641,215,2)
(631,540,2)
(578,431,2)
(474,469,2)
(186,161,2)
(83,215,2)
(592,397,2)
(33,491,2)
(390,215,2)
(109,259,2)
(225,757,2)
(674,757,2)
(115,757,2)
(94,477,2)
(529,717,2)
(588,429,2)
(76,112,2)
(215,469,2)
(379,387,2)
(435,507,2)
(558,719,2)
(365,469,2)
(478,273,2)
(530,261,2)
(636,599,2)
(541,709,2)
(461,717,2)
(479,636,2)
(718,289,2)
(533,491,2)
(186,347,2)
(577,656,2)
(106,469,2)
(343,343,2)
(319,719,2)
(417,343,2)
(359,709,2)
(347,491,2)
(53,149,2)
(360,343,2)
(581,473,2)
(319,53,2)
(383,211,2)
(333,491,2)
(631,643,2)
(692,709,2)
(713,491,2)
(755,179,2)
(58,215,2)
(447,473,2)
(360,242,2)
(204,261,2)
(127,247,2)
(147,491,2)
(20,491,2)
(758,709,2)
(536,585,2)
(742,261,2)
(358,757,2)
(159,289,2)
(644,469,2)
(397,549,2)
(152,246,2)
(608,87,2)
(204,78,2)
(583,179,2)
(668,199,2)
(233,289,2)
(26,719,2)
(407,757,2)
(64,534,2)
(107,757,2)
(718,656,2)
(567,580,2)
(685,586,2)
(449,524,2)
(97,575,2)
(420,469,2)
(668,717,2)
(575,343,2)
(186,448,2)
(230,8,2)
(174,534,2)
(672,187,2)
(322,491,2)
(233,586,2)
(754,709,2)
(259,232,2)
(82,491,2)
(705,700,2)
(125,313,2)
(645,717,2)
(390,635,2)
(512,717,2)
(578,627,2)
(294,719,2)
(467,550,2)
(691,534,2)
(747,354,2)
(652,112,2)
(242,475,2)
(458,685,2)
(458,637,2)
(159,656,2)
(575,313,2)
(296,417,2)
(32,281,2)
(487,198,2)
(467,215,2)
(630,259,2)
(56,429,2)
(117,476,2)
(472,261,2)
(324,507,2)
(369,440,2)
(30,714,2)
(53,261,2)
(92,717,2)
(53,719,2)
(440,759,2)
(380,491,2)
(377,507,2)
(562,417,2)
(38,179,2)
(577,448,2)
(725,215,2)
(324,347,2)
(195,215,2)
(560,187,2)
(14,491,2)
(649,717,2)
(212,549,2)
(460,215,2)
(642,535,2)
(388,487,2)
(209,508,2)
(531,717,2)
(324,168,2)
(186,410,2)
(186,740,2)
(659,586,2)
(88,717,2)
(598,477,2)
(247,242,2)
(526,236,2)
(599,172,2)
(372,539,2)
(400,469,2)
(233,72,2)
(704,477,2)
(228,261,2)
(605,215,2)
(368,534,2)
(630,757,2)
(398,236,2)
(459,524,2)
(132,491,2)
(495,491,2)
(185,179,2)
(302,469,2)
(347,261,2)
(588,469,2)
(763,719,2)
(179,717,2)
(494,179,2)
(110,694,2)
(426,112,2)
(284,507,2)
(78,597,2)
(194,242,2)
(463,277,2)
(678,176,2)
(155,215,2)
(511,469,2)
(554,757,2)
(343,112,2)
(680,273,2)
(271,499,2)
(577,161,2)
(127,549,2)
(196,215,2)
(281,151,2)
(628,242,2)
(421,491,2)
(747,0,2)
(55,507,2)
(597,497,2)
(520,179,2)
(215,262,2)
(145,354,2)
(120,524,2)
(486,491,2)
(624,491,2)
(143,477,2)
(454,417,2)
(168,491,2)
(727,399,2)
(627,757,2)
(577,714,2)
(280,247,2)
(56,289,2)
(68,179,2)
(569,491,2)
(552,215,2)
(267,236,2)
(427,656,2)
(397,64,2)
(282,515,2)
(289,642,2)
(417,313,2)
(91,717,2)
(655,473,2)
(555,215,2)
(734,215,2)
(421,376,2)
(233,161,2)
(559,237,2)
(458,718,2)
(731,757,2)
(98,215,2)
(48,694,2)
(231,757,2)
(305,215,2)
(56,656,2)
(49,757,2)
(759,210,2)
(618,650,2)
(568,477,2)
(599,393,2)
(443,507,2)
(228,78,2)
(200,215,2)
(752,215,2)
(280,549,2)
(48,618,2)
(424,717,2)
(80,215,2)
(217,417,2)
(489,261,2)
(192,719,2)
(79,767,2)
(236,473,2)
(395,475,2)
(213,746,2)
(186,327,2)
(28,179,2)
(273,179,2)
(333,261,2)
(125,602,2)
(264,236,2)
(475,571,2)
(546,507,2)
(577,327,2)
(748,417,2)
(487,654,2)
(403,580,2)
(700,491,2)
(697,469,2)
(243,491,2)
(308,714,2)
(324,530,2)
(212,64,2)
(229,137,2)
(539,717,2)
(735,602,2)
(675,618,2)
(493,507,2)
(677,242,2)
(157,469,2)
(304,714,2)
(342,236,2)
(622,112,2)
(246,536,2)
(689,469,2)
(329,387,2)
(325,717,2)
(636,393,2)
(324,175,2)
(612,717,2)
(177,215,2)
(514,580,2)
(233,168,2)
(141,461,2)
(124,242,2)
(577,289,2)
(580,393,2)
(557,491,2)
(2,580,2)
(392,179,2)
(263,404,2)
(280,469,2)
(88,259,2)
(323,387,2)
(490,393,2)
(175,469,2)
(695,477,2)
(249,261,2)
(233,530,2)
(372,261,2)
(81,215,2)
(186,168,2)
(614,261,2)
(679,717,2)
(416,179,2)
(404,636,2)
(566,507,2)
(686,228,2)
(457,536,2)
(577,555,2)
(372,714,2)
(492,757,2)
(148,179,2)
(175,261,2)
(745,387,2)
(321,757,2)
(397,247,2)
(376,79,2)
(414,173,2)
(666,48,2)
(660,491,2)
(144,757,2)
(716,179,2)
(187,580,2)
(118,719,2)
(15,491,2)
(509,524,2)
(622,534,2)
(735,176,2)
(565,273,2)
(678,602,2)
(597,237,2)
(226,477,2)
(667,64,2)
(145,473,2)
(187,352,2)
(261,419,2)
(696,78,2)
(203,469,2)
(614,78,2)
(84,757,2)
(186,530,2)
(389,714,2)
(154,709,2)
(191,477,2)
(588,191,2)
(540,757,2)
(718,473,2)
(622,387,2)
(130,491,2)
(159,586,2)
(159,491,2)
(179,11,2)
(43,473,2)
(577,191,2)
(590,719,2)
(21,215,2)
(736,469,2)
(146,215,2)
(433,469,2)
(472,273,2)
(614,179,2)
(477,236,2)
(293,388,2)
(360,313,2)
(16,417,2)
(257,354,2)
(406,236,2)
(172,313,2)
(160,491,2)
(212,247,2)
(338,387,2)
(167,469,2)
(555,261,2)
(427,100,2)
(239,78,2)
(265,491,2)
(444,469,2)
(233,175,2)
(282,491,2)
(283,726,2)
(173,132,2)
(257,236,2)
(256,717,2)
(233,284,2)
(179,714,2)
(345,179,2)
(186,656,2)
(563,261,2)
(211,719,2)
(197,717,2)
(571,393,2)
(166,491,2)
(383,719,2)
(417,176,2)
(79,215,2)
(673,236,2)
(385,477,2)
(227,112,2)
(7,563,2)
(653,717,2)
(527,717,2)
(163,540,2)
(137,184,2)
(730,417,2)
(172,393,2)
(262,261,2)
(188,507,2)
(681,717,2)
(11,717,2)
(404,242,2)
(408,179,2)
(578,107,2)
(222,719,2)
(263,540,2)
(622,757,2)
(343,142,2)
(193,242,2)
(577,333,2)
(248,215,2)
(24,477,2)
(370,236,2)
(384,714,2)
(611,469,2)
(580,97,2)
(270,215,2)
(320,215,2)
(725,109,2)
(291,0,2)
(310,709,2)
(458,659,2)
(744,491,2)
(764,237,2)
(634,273,2)
(293,215,2)
(766,491,2)
(117,473,2)
(3,469,2)
(127,64,2)
(543,261,2)
(685,656,2)
(714,507,2)
(737,259,2)
(139,709,2)
(163,379,2)
(458,186,2)
(543,714,2)
(524,760,2)
(685,175,2)
(295,179,2)
(475,393,2)
(491,293,2)
(118,64,2)
(719,64,2)
(458,430,2)
(696,179,2)
(685,530,2)
(761,354,2)
(476,473,2)
(236,666,2)
(128,469,2)
(288,469,2)
(458,233,2)
(527,714,2)
(46,568,2)
(623,469,2)
(515,176,2)
(753,473,2)
(114,473,2)
(528,195,2)
(27,215,2)
(411,387,2)
(271,652,2)
(181,524,2)
(117,549,2)
(518,280,2)
(117,247,2)
(263,469,2)
(489,440,2)
(435,282,2)
(626,469,2)
(108,717,2)
(473,0,2)
(324,586,2)
(299,714,2)
(631,163,2)
(7,491,2)
(57,717,2)
(616,719,2)
(561,259,2)
(263,643,2)
(22,215,2)
(528,215,2)
(329,534,2)
(252,261,2)
(360,602,2)
(757,436,2)
(335,524,2)
(709,47,2)
(152,536,2)
(635,715,2)
(694,473,2)
(382,709,2)
(149,152,2)
(242,580,2)
(765,491,2)
(233,742,2)
(162,0,2)
(357,0,2)
(220,360,2)
(195,467,2)
(233,384,2)
(710,242,2)
(95,709,2)
(59,215,2)
(722,717,2)
(471,757,2)
(249,388,2)
(528,682,2)
(109,215,2)
(482,717,2)
(75,469,2)
(324,289,2)
(37,757,2)
(459,120,2)
(631,215,2)
(559,717,2)
(718,586,2)
(393,343,2)
(297,280,2)
(642,757,2)
(688,602,2)
(118,247,2)
(698,215,2)
(577,347,2)
(682,261,2)
(334,614,2)
(354,417,2)
(678,612,2)
(738,719,2)
(5,215,2)
(441,717,2)
(361,469,2)
(703,491,2)
(637,289,2)
(242,119,2)
(379,479,2)
(352,580,2)
(722,714,2)
(29,757,2)
(577,175,2)
(652,475,2)
(593,717,2)
(728,491,2)
(197,714,2)
(272,477,2)
(328,259,2)
(498,397,2)
(476,259,2)
(435,261,2)
(468,473,2)
(458,159,2)
(417,757,2)
(372,717,2)
(327,287,2)
(587,261,2)
(556,261,2)
(277,259,2)
(693,757,2)
(125,534,2)
(666,618,2)
(324,656,2)
(184,261,2)
(517,475,2)
(536,469,2)
(719,247,2)
(588,586,2)
(233,740,2)
(160,259,2)
(748,16,2)
(205,236,2)
(561,709,2)
(452,179,2)
(717,709,2)
(585,469,2)
(656,717,2)
(571,636,2)
(757,717,2)
(318,473,2)
(733,507,2)
(227,387,2)
(420,369,2)
(688,313,2)
(151,714,2)
(171,469,2)
(134,491,2)
(334,179,2)
(606,507,2)
(69,387,2)
(538,417,2)
(348,714,2)
(491,215,2)
(393,313,2)
(414,249,2)
(369,469,2)
(499,207,2)
(458,577,2)
(506,0,2)
(336,179,2)
(220,242,2)
(239,148,2)
(214,473,2)
(324,191,2)
(720,507,2)
(0,417,2)
(380,261,2)
(233,179,2)
(319,222,2)
(236,618,2)
(98,261,2)
(472,78,2)
(48,746,2)
(685,289,2)
(308,261,2)
(247,220,2)
(456,215,2)
(64,691,2)
(201,215,2)
(534,517,2)
(186,333,2)
(275,491,2)
(119,757,2)
(159,175,2)
(507,282,2)
(169,417,2)
(621,469,2)
(515,491,2)
(284,261,2)
(34,246,2)
(762,112,2)
(233,448,2)
(619,491,2)
(142,387,2)
(186,429,2)
(394,280,2)
(504,618,2)
(44,179,2)
(186,179,2)
(477,261,2)
(450,242,2)
(117,694,2)
(469,477,2)
(637,0,2)
(172,343,2)
(462,393,2)
(448,215,2)
(133,580,2)
(497,709,2)
(198,261,2)
(292,507,2)
(719,215,2)
(233,333,2)
(5,261,2)
(480,242,2)
(393,534,2)
(386,491,2)
(246,280,2)
(459,750,2)
(547,719,2)
(526,746,2)
(732,473,2)
(429,717,2)
(96,179,2)
(715,215,2)
(740,717,2)
(726,259,2)
(577,168,2)
(287,149,2)
(659,236,2)
(159,448,2)
(486,737,2)
(184,507,2)
(635,215,2)
(70,491,2)
(97,393,2)
(577,410,2)
-----------------------------------
(0,BN_varpre2bn(parts[0].where, parts[0].size, test)
(1,)
(2,modsize)
(3,genp)
(4,)
(5,state_value_reset(st)
(6,test)
(7,bcopy(&header->counter, st->uSPITBV, 3)
(8,u_short port)
(9,schemes + sstart)
(10,st)
(11,-1)
(12,i)
(13,mod)
(14,counter)
(15,st->counter = header->counter)
(16,parts[0])
(17,1)
(18,initiator)
(19,size)
(20,texchange)
(21,st)
(22,st)
(23,4)
(24,flags)
(25,PACKET_BUFFER_SIZE)
(26,(vsize-4)
(27,BUFFER_SIZE)
(28,st)
(29,&packet_size)
(30,st)
(31,packet_size)
(32,st->lifetime = exchange_timeout + time(NULL)
(33,address)
(34,vsize-4)
(35,if (!bcmp(header->scheme, schemes + sstart, 2)
(36,)
(37,sstart)
(38,0)
(39,ssize)
(40,counter)
(41,schemes)
(42,header)
(43,1)
(44,"Shared secret is: 0x%s\\n")
(45,sstart)
(46,parts[1].size)
(47,-1)
(48,exchange_check_value(test, gen, mod)
(49,NULL)
(50,gen)
(51,NULL)
(52,ssize)
(53,st->scheme)
(54,rcookie)
(55,roschemes)
(56,return -1;)
(57,address)
(58,2)
(59,0)
(60,st)
(61,NULL)
(62,icookie)
(63,port)
(64,genp = scheme_get_gen(schemes + sstart)
(65,)
(66,1)
(67,if (exchange_set_generator(gen, header->scheme, genp)
(68,st->shared)
(69,modpsize)
(70,st)
(71,refp)
(72,st->scheme[2])
(73,packet_size)
(74,15)
(75,st)
(76,break;)
(77,refp)
(78,st = state_find_cookies(address, header->icookie, header->rcookie)
(79,parts[0].size)
(80,-1)
(81,size)
(82,texchangesize)
(83,st)
(84,tempst)
(85,if (st->uSPIoattrib == NULL)
(86,oSPIprivacyctx)
(87,parts[1])
(88,header->icookie)
(89,uSPIoattrib)
(90,if (genp != NULL)
(91,tempst)
(92,header)
(93,u_int8_t)
(94,st->flags = IPSEC_OPT_ENC|IPSEC_OPT_AUTH)
(95,rcookie)
(96,printf("Shared secret is: 0x%s\\n", buffer)
(97,bcmp(header->scheme, schemes + sstart, 2)
(98,st->scheme)
(99,st)
(100,packet_size = PACKET_BUFFER_SIZE)
(101,if (genp != NULL)
(102,p)
(103,parts[0])
(104,st)
(105,refp)
(106,state_value_reset(st)
(107,header->rcookie)
(108,COOKIE_SIZE)
(109,VALUE_REQUEST_VALUE(header)
(110,BN_free(gen)
(111,vsize)
(112,modflag)
(113,i)
(114,1)
(115,modflag = 0)
(116,)
(117,exchange_set_generator(gen, header->scheme, genp)
(118,varpre2octets(genp)
(119,vsize = parts[0].size)
(120,&vr_msg)
(121,u_int8_t)
(122,NULL)
(123,IPSEC_OPT_ENC|IPSEC_OPT_AUTH)
(124,modpsize)
(125,schemes + sstart)
(126,icookie)
(127,varpre2octets(genp)
(128,parts)
(129,st)
(130,header)
(131,if (packet_check(packet, size, &vr_msg)
(132,parts[0])
(133,1)
(134,roschemes)
(135,1)
(136,-1)
(137,&(st->oSPIoattrib)
(138,st)
(139,icookie)
(140,if (st->oSPIprivacyctx == NULL)
(141,bcopy(header->icookie, tempst.icookie, COOKIE_SIZE)
(142,scheme_get_len(schemes+sstart)
(143,st)
(144,modflag)
(145,BN_free(test)
(146,parts)
(147,rcookie)
(148,&(st->shared)
(149,st->scheme = calloc(vsize, sizeof(u_int8_t)
(150,vr_msg)
(151,time(NULL)
(152,calloc(vsize, sizeof(u_int8_t)
(153,uSPIoattribsize)
(154,header)
(155,buffer)
(156,2)
(157,st)
(158,st)
(159,return -1;)
(160,header->rcookie)
(161,st->schemesize)
(162,modpsize)
(163,varpre2octets(modp)
(164,st)
(165,scheme)
(166,icookie)
(167,st->uSPIoattribsize = parts[1].size)
(168,st->port)
(169,BN_new()
(170,htons(scheme_get_ref(header->scheme)
(171,1)
(172,schemes + sstart)
(173,parts[0].where)
(174,sstart)
(175,st->scheme)
(176,u_int16_t ssize)
(177,st)
(178,header)
(179,photuris_value_response(st, packet_buffer, &packet_size)
(180,)
(181,packet)
(182,*(u_int16_t *)
(183,st)
(184,st->oSPIoattrib)
(185,retries)
(186,return -1;)
(187,!bcmp(scheme_ref, schemes + sstart, 2)
(188,st)
(189,parts)
(190,if (modsize == vsize)
(191,st->uSPIoattrib)
(192,3)
(193,sstart)
(194,p)
(195,2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)
(196,header)
(197,packet_buffer)
(198,st->texchangesize)
(199,char *)
(200,st)
(201,modp)
(202,bzero((char *)
(203,NULL)
(204,st->shared)
(205,BN_free(gen)
(206,phase)
(207,refpsize = modsize)
(208,st)
(209,refp)
(210,sizeof(u_int8_t)
(211,(vsize-4)
(212,varpre2octets(genp)
(213,BN_free(mod)
(214,mod)
(215,st->scheme == NULL)
(216,i)
(217,0)
(218,shared)
(219,schemes)
(220,scheme_get_gen(schemes+sstart)
(221,)
(222,2+2)
(223,modsize)
(224,header)
(225,scheme_ref)
(226,IPSEC_OPT_ENC)
(227,sstart)
(228,st->sharedsize)
(229,pick_attrib(st, &(st->oSPIoattrib)
(230,st->port = port)
(231,0)
(232,(struct value_request *)
(233,return 0;)
(234,p)
(235,0)
(236,exchange_set_generator(gen, header->scheme, genp)
(237,char *address)
(238,header->counter)
(239,compute_shared_secret(st, &(st->shared)
(240,header)
(241,if (st == NULL)
(242,modsize == vsize)
(243,COOKIE_SIZE)
(244,if (size < VALUE_REQUEST_MIN)
(245,st)
(246,vsize += 2 + varpre2octets(genp)
(247,genp = scheme_get_gen(schemes+sstart)
(248,scheme)
(249,st->texchange)
(250,-1)
(251,VALUE_RESPONSE)
(252,st->scheme)
(253,BN_new()
(254,vsize)
(255,)
(256,tempst.port = global_port)
(257,BN_free(test)
(258,if ((st = state_new()
(259,header = (struct value_request *)
(260,NULL)
(261,st = state_new()
(262,st->scheme)
(263,varpre2octets(modp)
(264,mod)
(265,-1)
(266,"Got exchange value 0x%s\\n")
(267,mod)
(268,parts[0].size)
(269,counter)
(270,parts[0].where)
(271,BN_varpre2bn(modp, modpsize, mod)
(272,-1)
(273,st->oSPIprivacyctx == NULL)
(274,)
(275,st)
(276,)
(277,header->counter)
(278,parts[0])
(279,texchange)
(280,genp != NULL)
(281,exchange_timeout + time(NULL)
(282,st->roschemes = calloc(ssize, sizeof(u_int8_t)
(283,bcopy(header->scheme, st->scheme, 2)
(284,st->roschemesize)
(285,)
(286,test)
(287,st->scheme)
(288,1)
(289,*(u_int16_t *)
(290,)
(291,NULL)
(292,1)
(293,st->texchange)
(294,genp)
(295,sharedsize)
(296,test)
(297,2)
(298,if (sstart >= ssize)
(299,lifetime)
(300,tempst)
(301,modp)
(302,scheme)
(303,BN_free(test)
(304,NULL)
(305,parts)
(306,test)
(307,)
(308,state_value_reset(st)
(309,refpsize)
(310,1)
(311,i)
(312,scheme)
(313,sstart = 0)
(314,where)
(315,if ((st->roschemes = calloc(ssize, sizeof(u_int8_t)
(316,parts[1])
(317,modsize)
(318,scheme)
(319,st->scheme+2+2)
(320,modp)
(321,BAD_COOKIE)
(322,rcookie)
(323,refpsize)
(324,return -1;)
(325,schemes)
(326,vsize)
(327,st->scheme[3])
(328,header->scheme)
(329,schemes)
(330,sstart)
(331,1)
(332,global_port)
(333,st->counter)
(334,&(st->sharedsize)
(335,vr_msg)
(336,st->retries = 0)
(337,refpsize)
(338,modp)
(339,modp)
(340,counter)
(341,2)
(342,BN_free(mod)
(343,sstart += scheme_get_len(schemes+sstart)
(344,scheme_get_ref(header->scheme)
(345,buffer)
(346,texchangesize)
(347,st->roschemes)
(348,packet_size)
(349,genp)
(350,if (modflag)
(351,-1)
(352,bcmp(scheme_ref, schemes + sstart, 2)
(353,header)
(354,test = BN_new()
(355,0)
(356,)
(357,1)
(358,vsize)
(359,header)
(360,schemes+sstart)
(361,1)
(362,mod)
(363,scheme)
(364,st)
(365,st)
(366,modp)
(367,header)
(368,sstart)
(369,st->uSPIoattrib)
(370,0)
(371,port)
(372,photuris_value_response(st, packet_buffer, &packet_size)
(373,while (sstart < ssize)
(374,size)
(375,st)
(376,st->texchangesize = parts[0].size)
(377,st)
(378,genp)
(379,modp = refp)
(380,st->icookie)
(381,exchange_timeout)
(382,return -1;)
(383,st->scheme[3] = (vsize-4)
(384,st->lifetime)
(385,IPSEC_OPT_AUTH)
(386,u_int8_t)
(387,modsize <= 2 && refp != NULL)
(388,st->texchange = calloc(st->texchangesize, sizeof(u_int8_t)
(389,PACKET_BUFFER_SIZE)
(390,bin2hex(buffer, &i, parts[0].where, varpre2octets(VALUE_REQUEST_VALUE(header)
(391,NULL)
(392,i = BUFFER_SIZE)
(393,sstart < ssize)
(394,genp)
(395,modpsize = modsize)
(396,return -1;)
(397,genp == NULL)
(398,test)
(399,refp = modp = NULL)
(400,NULL)
(401,modflag)
(402,1)
(403,2)
(404,modp = p)
(405,st)
(406,st)
(407,size)
(408,st)
(409,if (BN_varpre2bn(modp, modpsize, mod)
(410,st->uSPIoattribsize)
(411,refp)
(412,if (pick_attrib(st, &(st->oSPIoattrib)
(413,where)
(414,bcopy(parts[0].where, st->texchange, st->texchangesize)
(415,gen)
(416,sharedsize)
(417,sstart >= ssize)
(418,modsize)
(419,state_new()
(420,bcopy(parts[1].where, st->uSPIoattrib, parts[1].size)
(421,st->texchangesize)
(422,scheme)
(423,modpsize)
(424,&tempst)
(425,modp)
(426,modp)
(427,return 0;)
(428,)
(429,tempst.counter)
(430,return -1;)
(431,header->counter)
(432,genp)
(433,uSPIoattrib)
(434,rcookie)
(435,st->roschemes)
(436,header->rcookie)
(437,2)
(438,1)
(439,NULL)
(440,st->uSPIoattrib = calloc(parts[1].size, sizeof(u_int8_t)
(441,header)
(442,ssize)
(443,roschemesize)
(444,size)
(445,)
(446,0)
(447,gen)
(448,st->texchangesize)
(449,-1)
(450,break;)
(451,counter)
(452,st)
(453,)
(454,test)
(455,NULL)
(456,i)
(457,st->schemesize = vsize)
(458,RET)
(459,packet_check(packet, size, &vr_msg)
(460,2)
(461,tempst.icookie)
(462,p)
(463,tempst.counter = header->counter)
(464,header)
(465,st)
(466,)
(467,genp == NULL ? 0 : 2 + varpre2octets(genp)
(468,BN_new()
(469,st->uSPIoattrib == NULL)
(470,genp)
(471,send_packet()
(472,init_privacy_key(st, 1)
(473,BN_varpre2bn(modp, modpsize, mod)
(474,2)
(475,modsize = varpre2octets(p)
(476,header->scheme)
(477,(st = state_new()
(478,init_privacy_key(st, 0)
(479,refp = p)
(480,genp)
(481,st)
(482,counter)
(483,st->scheme[2] = (vsize-4)
(484,address)
(485,texchange)
(486,bcopy(header->icookie, st->icookie, COOKIE_SIZE)
(487,calloc(st->texchangesize, sizeof(u_int8_t)
(488,tempst)
(489,st->uSPIoattrib)
(490,sstart)
(491,st->texchange == NULL)
(492,packet_size)
(493,ssize)
(494,0)
(495,log_error("calloc()
(496,sstart)
(497,header->icookie)
(498,2)
(499,modpsize = refpsize)
(500,parts)
(501,vsize-4)
(502,st)
(503,parts)
(504,gen)
(505,scheme)
(506,mod)
(507,(st->roschemes = calloc(ssize, sizeof(u_int8_t)
(508,modsize <= 2)
(509,1)
(510,)
(511,parts[1].size)
(512,rcookie)
(513,-1)
(514,modflag)
(515,calloc(ssize, sizeof(u_int8_t)
(516,printf("Got exchange value 0x%s\\n", buffer)
(517,modsize == vsize)
(518,2 + varpre2octets(genp)
(519,)
(520,i)
(521,modflag = 1)
(522,where)
(523,sizeof(u_int8_t)
(524,size < VALUE_REQUEST_MIN)
(525,st->roschemesize = ssize)
(526,BN_free(mod)
(527,st)
(528,st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)
(529,sizeof(tempst)
(530,st->flags)
(531,rcookie)
(532,)
(533,3)
(534,!bcmp(scheme_ref, schemes + sstart, 2)
(535,u_int16_t *)
(536,vsize = 2 + varpre2octets(modp)
(537,)
(538,size)
(539,&packet_size)
(540,modp = NULL)
(541,address)
(542,NULL)
(543,state_insert(st)
(544,st)
(545,vr_msg = {\n\\n\\t     "Value Request",\n\\n\\t     VALUE_REQUEST_MIN, 0, parts\n\\n\\t})
(546,oSPIoattribsize)
(547,vsize)
(548,schemes)
(549,*genp = NULL)
(550,2 + varpre2octets(genp)
(551,genp)
(552,schemesize)
(553,tempst)
(554,0)
(555,st->texchange)
(556,state_value_reset(st)
(557,uSPITBV)
(558,2)
(559,strncpy(tempst.address, address, 15)
(560,vsize)
(561,header->rcookie)
(562,-1)
(563,st->uSPITBV)
(564,)
(565,0)
(566,st)
(567,scheme_ref)
(568,parts[1])
(569,1)
(570,"calloc()
(571,varpre2octets(p)
(572,&header->counter)
(573,modsize)
(574,parts[0])
(575,schemes + sstart)
(576,vsize)
(577,return -1;)
(578,photuris_error_message(&tempst, packet_buffer, &packet_size,\n\\n\\t\\t\\t\\t\\t header->icookie, header->rcookie,\n\\n\\t\\t\\t\\t\\t header->counter, BAD_COOKIE)
(579,vsize)
(580,!bcmp(header->scheme, schemes + sstart, 2)
(581,test)
(582,0)
(583,send_packet()
(584,schemes)
(585,2 + varpre2octets(modp)
(586,tempst.initiator)
(587,st->oSPIprivacyctx)
(588,return -1;)
(589,NULL)
(590,scheme)
(591,)
(592,genp)
(593,COOKIE_SIZE)
(594,1)
(595,struct value_request *)
(596,if (bcmp(rcookie, header->rcookie, COOKIE_SIZE)
(597,state_find_cookies(address, header->icookie, header->rcookie)
(598,uSPIoattrib)
(599,scheme_get_mod(schemes + sstart)
(600,st->phase = VALUE_RESPONSE)
(601,st->oSPIoattribsize)
(602,u_int8_t *schemes)
(603,&i)
(604,genp)
(605,texchangesize)
(606,-1)
(607,st)
(608,parts[1].size)
(609,st->address)
(610,vsize)
(611,parts)
(612,&tempst)
(613,rcookie)
(614,st->sharedsize)
(615,tempst.initiator = 0)
(616,st)
(617,BUFFER_SIZE)
(618,exchange_set_generator(gen, header->scheme, genp)
(619,port)
(620,scheme_ref)
(621,parts)
(622,ssize)
(623,vsize)
(624,header)
(625,NULL)
(626,1)
(627,&tempst)
(628,modp)
(629,st)
(630,header->icookie)
(631,bcopy(modp, st->scheme + 2 + (genp == NULL ? 0 : 2 + varpre2octets(genp)
(632,sstart)
(633,if (st->scheme == NULL)
(634,st)
(635,&i)
(636,p = scheme_get_mod(schemes + sstart)
(637,return (-1)
(638,modsize)
(639,VALUE_REQUEST_MIN)
(640,st)
(641,0)
(642,(u_int16_t *)
(643,modp = p)
(644,st)
(645,icookie)
(646,st)
(647,icookie)
(648,"bad packet structure in handle_value_request()
(649,tempst)
(650,-1)
(651,genp)
(652,modpsize = modsize)
(653,COOKIE_SIZE)
(654,sizeof(u_int8_t)
(655,gen)
(656,tempst.port)
(657,oSPIoattrib)
(658,log_print("bad packet structure in handle_value_request()
(659,return 0;)
(660,header->counter)
(661,tempst)
(662,modpsize)
(663,size)
(664,header)
(665,2)
(666,!exchange_check_value(test, gen, mod)
(667,bcopy(genp, st->scheme+2+2, varpre2octets(genp)
(668,(char *)
(669,if (photuris_value_response(st, packet_buffer, &packet_size)
(670,tempst)
(671,header->scheme)
(672,modsize)
(673,gen)
(674,parts[0].size)
(675,mod)
(676,if (st->texchange == NULL)
(677,schemes)
(678,cookie_generate(&tempst, rcookie, COOKIE_SIZE, schemes, ssize)
(679,address)
(680,st)
(681,tempst)
(682,st->scheme)
(683,0)
(684,)
(685,return -1;)
(686,bin2hex(buffer, &i, st->shared, st->sharedsize)
(687,)
(688,schemes+sstart)
(689,sizeof(u_int8_t)
(690,8)
(691,scheme_get_gen(schemes + sstart)
(692,header)
(693,header)
(694,gen = BN_new()
(695,parts)
(696,st->retries)
(697,parts[1].where)
(698,u_int8_t)
(699,schemes)
(700,st->rcookie)
(701,test)
(702,break;)
(703,st)
(704,size)
(705,bcopy(header->rcookie, st->rcookie, COOKIE_SIZE)
(706,tempst)
(707,parts)
(708,buffer)
(709,packet_check(packet, size, &vr_msg)
(710,modsize)
(711,parts[1])
(712,15)
(713,st)
(714,pick_attrib(st, &(st->oSPIoattrib)
(715,i = BUFFER_SIZE)
(716,shared)
(717,st == NULL)
(718,return (-1)
(719,genp != NULL)
(720,1)
(721,p)
(722,1)
(723,if (BN_varpre2bn(parts[0].where, parts[0].size, test)
(724,tempst.address)
(725,varpre2octets(VALUE_REQUEST_VALUE(header)
(726,header->scheme)
(727,refp != NULL)
(728,st)
(729,-1)
(730,0)
(731,header)
(732,-1)
(733,&(st->oSPIoattribsize)
(734,st)
(735,bcopy(schemes, st->roschemes, ssize)
(736,scheme)
(737,header->icookie)
(738,0xFF)
(739,ssize)
(740,packet_size = PACKET_BUFFER_SIZE)
(741,vr_msg)
(742,st->phase)
(743,scheme)
(744,st)
(745,sstart)
(746,mod = BN_new()
(747,BN_free(test)
(748,parts[0].where)
(749,packet_buffer)
(750,u_char *packet)
(751,1)
(752,where)
(753,header)
(754,-1)
(755,buffer)
(756,4)
(757,bcmp(rcookie, header->rcookie, COOKIE_SIZE)
(758,packet)
(759,calloc(parts[1].size, sizeof(u_int8_t)
(760,int size)
(761,BN_varpre2bn(parts[0].where, parts[0].size, test)
(762,p)
(763,st)
(764,strncpy(st->address, address, 15)
(765,NULL)
(766,COOKIE_SIZE)
(767,parts[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^