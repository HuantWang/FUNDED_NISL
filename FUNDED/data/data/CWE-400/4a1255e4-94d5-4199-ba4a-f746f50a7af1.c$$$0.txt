-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_16_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
63,64
63,65
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
71,72
73,74
73,75
73,76
73,77
74,75
75,76
75,77
76,77
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,62,68,70,72,77,78,81,85,86,88,91,96,97,98
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
75,76
75,77
79,80
79,81
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_16_bad(){    int count;    /* Initialize count */    count = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_16_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_16_bad
{    int count;    /* Initialize count */    count = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }        break;    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
-----joern-----
(18,15,0)
(13,12,0)
(3,31,0)
(0,12,0)
(6,17,0)
(45,32,0)
(42,38,0)
(48,41,0)
(39,13,0)
(22,32,0)
(1,21,0)
(20,11,0)
(52,17,0)
(41,38,0)
(12,13,0)
(10,51,0)
(24,15,0)
(4,51,0)
(13,23,0)
(33,5,0)
(37,34,0)
(34,43,0)
(46,13,0)
(50,11,0)
(5,23,0)
(38,8,0)
(13,39,0)
(29,15,0)
(2,51,0)
(53,41,0)
(15,11,0)
(23,51,0)
(7,14,0)
(36,15,0)
(28,21,0)
(49,6,0)
(40,28,0)
(23,5,0)
(19,38,0)
(14,32,0)
(11,6,0)
(21,28,0)
(21,9,0)
(25,8,0)
(28,11,0)
(12,32,0)
(47,23,0)
(44,24,0)
(27,6,0)
(13,21,0)
(15,24,0)
(31,26,0)
(28,40,1)
(45,22,1)
(15,18,1)
(46,0,1)
(11,50,1)
(12,13,1)
(36,29,1)
(52,31,1)
(0,32,1)
(13,23,1)
(24,15,1)
(35,30,1)
(18,36,1)
(31,3,1)
(24,44,1)
(13,46,1)
(1,24,1)
(5,33,1)
(16,35,1)
(52,21,1)
(0,14,1)
(25,12,1)
(15,11,1)
(13,21,1)
(33,47,1)
(37,12,1)
(21,28,1)
(29,11,1)
(48,35,1)
(41,53,1)
(28,11,1)
(23,5,1)
(32,45,1)
(16,25,1)
(40,1,1)
(14,7,1)
(35,52,1)
(20,30,1)
(7,34,1)
(50,20,1)
(3,24,1)
(30,23,1)
(22,41,1)
(13,39,1)
(53,48,1)
(14,32,1)
(12,32,1)
(44,15,1)
(34,37,1)
(46,12,2)
(12,32,2)
(1,24,2)
(21,24,2)
(0,35,2)
(40,24,2)
(24,15,2)
(24,30,2)
(31,24,2)
(48,35,2)
(13,39,2)
(22,35,2)
(46,35,2)
(14,32,2)
(3,24,2)
(23,5,2)
(11,30,2)
(13,21,2)
(7,12,2)
(25,35,2)
(32,35,2)
(13,12,2)
(18,30,2)
(12,35,2)
(37,12,2)
(45,35,2)
(14,12,2)
(34,12,2)
(12,13,2)
(41,35,2)
(28,11,2)
(21,28,2)
(44,30,2)
(20,30,2)
(36,30,2)
(12,12,2)
(29,30,2)
(13,35,2)
(13,23,2)
(50,30,2)
(0,12,2)
(15,30,2)
(53,35,2)
(52,30,2)
(28,24,2)
(15,11,2)
-----------------------------------
(0,i)
(1,count)
(2,while(1)
(3,"fgets()
(4,count)
(5,-1)
(6,)
(7,i)
(8,)
(9,)
(10,while(1)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,i < (size_t)
(13,(size_t)
(14,i++)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,RET)
(17,)
(18,stdin)
(19,for (i = 0; i < (size_t)
(20,inputBuffer)
(21,count = atoi(inputBuffer)
(22,i)
(23,count = -1)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,break;)
(26,)
(27,inputBuffer)
(28,atoi(inputBuffer)
(29,inputBuffer)
(30,1)
(31,printLine("fgets()
(32,i = 0)
(33,1)
(34,printLine("Hello")
(35,1)
(36,CHAR_ARRAY_SIZE)
(37,"Hello")
(38,)
(39,size_t)
(40,inputBuffer)
(41,i = 0)
(42,i)
(43,)
(44,NULL)
(45,0)
(46,count)
(47,count)
(48,i)
(49,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,"")
(51,)
(52,break;)
(53,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^