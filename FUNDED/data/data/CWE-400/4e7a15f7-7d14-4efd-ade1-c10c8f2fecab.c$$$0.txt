-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
26,27
26,28
28,29
28,30
29,30
29,31
29,32
29,33
29,34
29,35
29,36
30,31
31,32
31,33
32,33
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
105,110
106,107
108,109
110,111
111,112
111,113
114,115
114,116
115,116
117,118
119,120
121,122
122,123
123,124
123,125
124,125
127,128
127,129
128,129
130,131
131,132
132,133
132,134
133,134
135,136
-----nextToken-----
2,4,8,10,14,16,18,23,24,25,27,33,35,37,41,43,44,47,50,52,53,55,59,62,64,65,69,71,76,77,82,83,86,90,91,93,96,102,104,107,109,112,113,116,118,120,125,126,129,134,136,137
-----computeFrom-----
12,13
12,14
21,22
21,23
57,58
57,59
67,68
67,69
80,81
80,82
84,85
84,86
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    while(1)    {        /* FIX: Use a relatively small number */        count = 20;        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    while(1)    {        /* FIX: Use a relatively small number */        count = 20;        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        /* FIX: Use a relatively small number */        count = 20;        break;    }
1
{        /* FIX: Use a relatively small number */        count = 20;        break;    }
count = 20;
count = 20
count
count
20
break;
while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
-----joern-----
(41,49,0)
(43,33,0)
(49,41,0)
(31,19,0)
(50,56,0)
(71,43,0)
(13,23,0)
(66,24,0)
(4,40,0)
(66,60,0)
(55,41,0)
(44,66,0)
(24,10,0)
(34,67,0)
(12,49,0)
(70,32,0)
(58,25,0)
(42,1,0)
(29,43,0)
(45,49,0)
(68,51,0)
(69,43,0)
(41,6,0)
(63,40,0)
(33,73,0)
(43,29,0)
(56,0,0)
(3,2,0)
(57,56,0)
(40,54,0)
(19,35,0)
(7,60,0)
(49,56,0)
(51,46,0)
(24,66,0)
(22,56,0)
(48,10,0)
(59,29,0)
(24,37,0)
(52,54,0)
(43,49,0)
(11,6,0)
(36,17,0)
(61,64,0)
(39,23,0)
(8,0,0)
(10,23,0)
(73,33,0)
(72,56,0)
(2,38,0)
(32,60,0)
(21,41,0)
(1,43,0)
(64,10,0)
(14,12,0)
(47,73,0)
(27,24,0)
(51,49,0)
(25,56,0)
(53,23,0)
(5,6,0)
(10,64,0)
(65,67,0)
(43,1,0)
(15,25,0)
(67,56,0)
(30,12,0)
(6,56,0)
(33,43,0)
(37,24,0)
(20,56,0)
(24,40,0)
(62,60,0)
(28,56,0)
(55,45,1)
(43,49,1)
(3,33,1)
(71,1,1)
(5,67,1)
(32,70,1)
(69,73,1)
(14,49,1)
(41,6,1)
(66,24,1)
(6,11,1)
(18,66,1)
(32,60,1)
(43,71,1)
(7,62,1)
(11,5,1)
(33,73,1)
(12,49,1)
(64,61,1)
(52,40,1)
(62,19,1)
(31,12,1)
(43,1,1)
(70,33,1)
(49,41,1)
(43,29,1)
(24,37,1)
(67,34,1)
(41,21,1)
(21,55,1)
(15,58,1)
(8,18,1)
(73,47,1)
(29,59,1)
(16,52,1)
(51,49,1)
(24,40,1)
(42,29,1)
(47,66,1)
(68,18,1)
(10,64,1)
(27,44,1)
(44,60,1)
(2,3,1)
(25,15,1)
(40,4,1)
(44,32,1)
(4,63,1)
(33,43,1)
(62,12,1)
(12,30,1)
(66,60,1)
(45,6,1)
(65,25,1)
(8,51,1)
(26,16,1)
(59,69,1)
(24,27,1)
(70,2,1)
(61,48,1)
(51,68,1)
(26,8,1)
(9,10,1)
(16,9,1)
(63,9,1)
(19,31,1)
(60,7,1)
(58,16,1)
(24,10,1)
(1,42,1)
(34,65,1)
(30,14,1)
(29,66,2)
(1,66,2)
(24,16,2)
(47,66,2)
(6,16,2)
(27,16,2)
(66,24,2)
(43,29,2)
(52,9,2)
(19,12,2)
(45,16,2)
(43,49,2)
(8,16,2)
(68,18,2)
(63,9,2)
(24,40,2)
(32,60,2)
(41,6,2)
(12,49,2)
(3,33,2)
(51,49,2)
(49,41,2)
(2,33,2)
(62,16,2)
(55,16,2)
(73,66,2)
(59,66,2)
(60,16,2)
(67,16,2)
(33,73,2)
(34,16,2)
(40,9,2)
(66,66,2)
(44,16,2)
(51,18,2)
(49,16,2)
(70,66,2)
(33,66,2)
(41,16,2)
(15,16,2)
(66,60,2)
(11,16,2)
(42,66,2)
(65,16,2)
(24,37,2)
(24,66,2)
(7,16,2)
(25,16,2)
(43,1,2)
(71,66,2)
(4,9,2)
(27,66,2)
(14,16,2)
(5,16,2)
(30,16,2)
(24,10,2)
(33,43,2)
(66,16,2)
(31,12,2)
(58,16,2)
(44,66,2)
(18,16,2)
(32,66,2)
(43,66,2)
(10,64,2)
(21,16,2)
(69,66,2)
(12,16,2)
-----------------------------------
(0,)
(1,strlen(SENTENCE)
(2,exit(1)
(3,1)
(4,20)
(5,filename)
(6,*filename = "output_bad.txt")
(7,0)
(8,break;)
(9,1)
(10,count = -1)
(11,"output_bad.txt")
(12,pFile == NULL)
(13,count)
(14,pFile)
(15,0)
(16,1)
(17,)
(18,pFile)
(19,exit(1)
(20,if (pFile)
(21,"w+")
(22,pFile)
(23,)
(24,(size_t)
(25,i = 0)
(26,RET)
(27,count)
(28,for (i = 0; i < (size_t)
(29,sizeof(char)
(30,NULL)
(31,1)
(32,i++)
(33,strlen(SENTENCE)
(34,NULL)
(35,)
(36,if (strlen(SENTENCE)
(37,size_t)
(38,)
(39,while(1)
(40,count = 20)
(41,fopen(filename, "w+")
(42,SENTENCE)
(43,fwrite(SENTENCE, sizeof(char)
(44,i)
(45,pFile)
(46,)
(47,SENTENCE)
(48,count)
(49,pFile = fopen(filename, "w+")
(50,filename)
(51,fclose(pFile)
(52,break;)
(53,while(1)
(54,)
(55,filename)
(56,)
(57,i)
(58,i)
(59,char)
(60,i = 0)
(61,1)
(62,i)
(63,count)
(64,-1)
(65,pFile)
(66,i < (size_t)
(67,*pFile = NULL)
(68,pFile)
(69,SENTENCE)
(70,i)
(71,pFile)
(72,if (pFile == NULL)
(73,strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^