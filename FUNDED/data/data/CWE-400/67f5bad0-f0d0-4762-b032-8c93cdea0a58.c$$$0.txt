-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_17_bad()
{
    int i,j;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
42,45
44,45
45,46
47,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
56,57
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
75,76
76,77
77,78
77,79
78,79
81,82
81,83
81,84
81,85
82,83
83,84
83,85
84,85
87,88
87,89
88,89
91,92
92,93
94,95
95,96
95,97
96,97
97,98
97,99
99,100
99,101
102,103
102,104
102,105
103,104
103,105
104,105
106,107
106,108
107,108
109,110
111,112
111,113
111,114
111,115
111,116
112,113
113,114
113,115
114,115
116,117
116,118
117,118
117,119
119,120
121,122
121,123
122,123
124,125
124,126
125,126
127,128
128,129
128,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
139,140
139,141
140,141
142,143
144,145
145,146
145,147
145,148
146,147
148,149
150,151
152,153
153,154
153,155
154,155
156,157
158,159
159,160
159,161
160,161
162,163
164,165
165,166
166,167
166,168
167,168
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,46,48,53,55,57,59,61,66,69,71,73,74,79,80,85,86,89,90,93,98,100,101,105,108,110,115,118,120,123,126,129,130,134,136,141,143,147,149,151,155,157,161,163,168,169
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
50,51
50,52
64,65
64,66
83,84
83,85
87,88
87,89
103,104
103,105
113,114
113,115
124,125
124,126
132,133
132,134
-----guardedBy-----
55,71
61,73
110,151
105,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_17_bad(){    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_17_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_17_bad
{    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(29,60,0)
(35,74,0)
(21,24,0)
(36,21,0)
(57,39,0)
(29,80,0)
(74,62,0)
(51,81,0)
(81,74,0)
(68,64,0)
(65,77,0)
(39,7,0)
(78,69,0)
(77,20,0)
(67,84,0)
(61,16,0)
(52,65,0)
(20,3,0)
(73,69,0)
(6,63,0)
(42,2,0)
(15,10,0)
(30,1,0)
(0,69,0)
(27,7,0)
(22,16,0)
(58,26,0)
(12,60,0)
(7,80,0)
(8,80,0)
(41,69,0)
(29,24,0)
(47,5,0)
(16,43,0)
(24,21,0)
(18,69,0)
(20,46,0)
(31,24,0)
(59,21,0)
(3,7,0)
(3,20,0)
(64,38,0)
(63,81,0)
(1,30,0)
(7,24,0)
(72,21,0)
(54,32,0)
(7,3,0)
(14,19,0)
(76,43,0)
(20,77,0)
(37,55,0)
(45,47,0)
(55,26,0)
(25,29,0)
(70,74,0)
(48,77,0)
(63,40,0)
(32,77,0)
(40,63,0)
(83,79,0)
(1,75,0)
(15,77,0)
(21,81,0)
(77,10,0)
(53,63,0)
(80,69,0)
(33,81,0)
(4,65,0)
(56,15,0)
(71,30,0)
(84,77,0)
(79,66,0)
(49,80,0)
(13,32,0)
(28,64,0)
(82,26,0)
(60,29,0)
(46,20,0)
(65,10,0)
(2,43,0)
(84,10,0)
(24,11,0)
(23,63,0)
(9,19,0)
(19,26,0)
(50,43,0)
(44,10,0)
(7,39,0)
(34,40,0)
(54,13,1)
(45,29,1)
(2,42,1)
(84,77,1)
(83,40,1)
(55,26,1)
(34,63,1)
(32,54,1)
(29,24,1)
(7,24,1)
(14,26,1)
(29,80,1)
(6,23,1)
(14,55,1)
(49,8,1)
(26,82,1)
(63,6,1)
(81,33,1)
(47,45,1)
(7,80,1)
(43,50,1)
(79,83,1)
(7,39,1)
(52,32,1)
(82,58,1)
(65,4,1)
(2,43,1)
(80,49,1)
(20,3,1)
(36,59,1)
(31,40,1)
(63,81,1)
(59,72,1)
(29,60,1)
(52,1,1)
(72,31,1)
(65,77,1)
(76,19,1)
(40,34,1)
(40,63,1)
(30,71,1)
(56,84,1)
(15,56,1)
(20,46,1)
(22,61,1)
(42,15,1)
(37,79,1)
(19,26,1)
(16,43,1)
(57,27,1)
(21,36,1)
(60,12,1)
(3,7,1)
(23,53,1)
(9,14,1)
(39,57,1)
(12,25,1)
(33,51,1)
(13,77,1)
(15,77,1)
(1,30,1)
(25,16,1)
(27,48,1)
(42,47,1)
(16,22,1)
(24,21,1)
(37,24,1)
(71,32,1)
(19,9,1)
(17,16,1)
(77,20,1)
(55,37,1)
(50,76,1)
(84,67,1)
(48,29,1)
(61,43,1)
(58,80,1)
(61,2,1)
(53,81,1)
(21,81,1)
(51,19,1)
(32,77,1)
(4,52,1)
(67,65,1)
(7,80,2)
(20,46,2)
(36,40,2)
(7,29,2)
(42,16,2)
(72,40,2)
(57,29,2)
(29,80,2)
(83,40,2)
(7,24,2)
(32,29,2)
(32,77,2)
(55,26,2)
(20,3,2)
(77,29,2)
(2,16,2)
(29,60,2)
(21,81,2)
(24,21,2)
(16,43,2)
(31,40,2)
(3,29,2)
(65,29,2)
(23,19,2)
(63,81,2)
(14,19,2)
(33,19,2)
(81,19,2)
(55,19,2)
(15,77,2)
(84,77,2)
(1,32,2)
(15,29,2)
(3,7,2)
(21,40,2)
(45,29,2)
(37,19,2)
(19,19,2)
(71,32,2)
(19,26,2)
(9,19,2)
(2,43,2)
(61,16,2)
(40,19,2)
(7,39,2)
(53,19,2)
(12,16,2)
(29,16,2)
(25,16,2)
(60,16,2)
(30,32,2)
(13,29,2)
(48,29,2)
(40,63,2)
(47,29,2)
(65,77,2)
(27,29,2)
(20,29,2)
(24,40,2)
(63,19,2)
(16,16,2)
(29,24,2)
(84,29,2)
(1,30,2)
(77,20,2)
(39,29,2)
(67,29,2)
(51,19,2)
(59,40,2)
(4,29,2)
(54,29,2)
(22,16,2)
(34,19,2)
(6,19,2)
(52,29,2)
(56,29,2)
(79,40,2)
-----------------------------------
(0,for(i = 0; i < 1; i++)
(1,exit(-1)
(2,j++)
(3,malloc(data*sizeof(wchar_t)
(4,HELLO_STRING)
(5,)
(6,stdin)
(7,data*sizeof(wchar_t)
(8,data)
(9,1)
(10,)
(11,)
(12,HELLO_STRING)
(13,myString)
(14,i)
(15,free(myString)
(16,j < 1)
(17,RET)
(18,j)
(19,i < 1)
(20,(wchar_t *)
(21,strtoul(inputBuffer, NULL, 0)
(22,1)
(23,CHAR_ARRAY_SIZE)
(24,data = strtoul(inputBuffer, NULL, 0)
(25,data)
(26,i = 0)
(27,data)
(28,if (data > wcslen(HELLO_STRING)
(29,data > wcslen(HELLO_STRING)
(30,-1)
(31,data)
(32,myString == NULL)
(33,"")
(34,NULL)
(35,inputBuffer)
(36,0)
(37,i)
(38,)
(39,sizeof(wchar_t)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,for(j = 0; j < 1; j++)
(42,j)
(43,j = 0)
(44,if (myString == NULL)
(45,"Input is less than the length of the source string")
(46,wchar_t *)
(47,printLine("Input is less than the length of the source string")
(48,myString)
(49,0)
(50,0)
(51,inputBuffer)
(52,myString)
(53,inputBuffer)
(54,NULL)
(55,i++)
(56,myString)
(57,wchar_t)
(58,i)
(59,NULL)
(60,wcslen(HELLO_STRING)
(61,j)
(62,)
(63,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(64,)
(65,wcscpy(myString, HELLO_STRING)
(66,)
(67,myString)
(68,myString)
(69,)
(70,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(71,1)
(72,inputBuffer)
(73,i)
(74,)
(75,)
(76,j)
(77,myString = (wchar_t *)
(78,data)
(79,printLine("fgets()
(80,data = 0)
(81,inputBuffer[CHAR_ARRAY_SIZE] = "")
(82,0)
(83,"fgets()
(84,printWLine(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^