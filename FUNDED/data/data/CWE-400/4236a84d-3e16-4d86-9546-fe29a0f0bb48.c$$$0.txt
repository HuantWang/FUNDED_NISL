-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_63b_badSink(FILE * * dataPtr)
{
    FILE * data = *dataPtr;
    /* FLAW: Point data to another file handle without closing the handle from the source */
    data = fopen("BadSink_fopen.txt", "w+");
    /* avoid incidental for not closing the file handle */
    if (data != NULL)
    {
        fclose(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
8,11
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
22,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,7,9,10,11,16,18,19,23,27,30,31,32,36,38,43,45
-----computeFrom-----
25,26
25,27
34,35
34,36
-----guardedBy-----
36,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_63b_badSink(FILE * * dataPtr){    FILE * data = *dataPtr;    /* FLAW: Point data to another file handle without closing the handle from the source */    data = fopen("BadSink_fopen.txt", "w+");    /* avoid incidental for not closing the file handle */    if (data != NULL)    {        fclose(data);    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_63b_badSink(FILE * * dataPtr)
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_63b_badSink
FILE * * dataPtr
FILE
FILE
* * dataPtr
*
*
dataPtr
{    FILE * data = *dataPtr;    /* FLAW: Point data to another file handle without closing the handle from the source */    data = fopen("BadSink_fopen.txt", "w+");    /* avoid incidental for not closing the file handle */    if (data != NULL)    {        fclose(data);    }}
FILE * data = *dataPtr;
FILE * data = *dataPtr;
FILE
FILE
* data = *dataPtr
*
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)    {        fclose(data);    }
data != NULL
data
data
NULL
NULL
{        fclose(data);    }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(12,2,0)
(1,15,0)
(11,3,0)
(6,0,0)
(0,3,0)
(9,5,0)
(19,2,0)
(15,5,0)
(15,3,0)
(0,10,0)
(17,10,0)
(13,10,0)
(5,15,0)
(6,7,0)
(2,0,0)
(10,0,0)
(4,3,0)
(5,16,0)
(14,0,0)
(18,6,0)
(8,2,1)
(9,1,1)
(5,9,1)
(2,12,1)
(13,14,1)
(5,16,1)
(12,19,1)
(14,15,1)
(6,18,1)
(8,6,1)
(19,0,1)
(15,5,1)
(6,0,1)
(17,13,1)
(18,2,1)
(0,10,1)
(2,0,1)
(10,17,1)
(2,0,2)
(0,10,2)
(15,5,2)
(5,16,2)
(6,0,2)
(6,2,2)
(18,2,2)
-----------------------------------
(0,data = fopen("BadSink_fopen.txt", "w+")
(1,data)
(2,data != NULL)
(3,)
(4,if (data != NULL)
(5,*dataPtr)
(6,fclose(data)
(7,)
(8,RET)
(9,dataPtr)
(10,fopen("BadSink_fopen.txt", "w+")
(11,data)
(12,NULL)
(13,"BadSink_fopen.txt")
(14,data)
(15,* data = *dataPtr)
(16,FILE * * dataPtr)
(17,"w+")
(18,data)
(19,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^