-----label-----
0
-----code-----
static int set_cipher_discarded(struct sftp_cipher *cipher,
    EVP_CIPHER_CTX *cipher_ctx) {
  unsigned char *garbage_in, *garbage_out;

  if (cipher->discard_len == 0) {
    return 0;
  }

  garbage_in = malloc(cipher->discard_len);
  if (garbage_in == NULL) {
    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
      MOD_SFTP_VERSION ": Out of memory!");
    _exit(1);
  }

  garbage_out = malloc(cipher->discard_len);
  if (garbage_out == NULL) {
    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
      MOD_SFTP_VERSION ": Out of memory!");
    free(garbage_in);
    _exit(1);
  }

  if (EVP_Cipher(cipher_ctx, garbage_out, garbage_in,
      cipher->discard_len) != 1) {
    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,
      "error ciphering discard data: %s", sftp_crypto_get_errors());
    free(garbage_in);
    pr_memscrub(garbage_out, cipher->discard_len);
    free(garbage_out);

    return -1;
  }

  free(garbage_in);
  pr_memscrub(garbage_out, cipher->discard_len);
  free(garbage_out);

  return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
18,19
19,20
19,21
19,22
21,22
21,23
24,25
24,26
27,28
27,29
28,29
28,30
29,30
29,31
30,31
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
44,46
45,46
48,49
48,50
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
78,81
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
93,95
93,96
93,97
93,98
94,95
96,97
98,99
100,101
102,103
102,104
103,104
107,108
107,109
107,110
107,111
107,112
108,109
109,110
109,111
110,111
110,112
113,114
113,115
113,116
113,117
113,118
114,115
116,117
118,119
121,122
122,123
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
131,134
132,133
134,135
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
146,147
147,148
149,150
150,151
150,152
151,152
153,154
155,156
156,157
156,158
156,159
157,158
159,160
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
171,172
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,23,25,26,31,32,33,36,40,43,46,47,51,53,59,60,64,67,70,71,75,77,83,85,89,90,95,97,99,101,104,105,106,111,112,115,117,119,120,123,127,129,133,135,138,139,143,145,148,152,154,158,160,163,164,168,170,172
-----computeFrom-----
28,29
28,30
38,39
38,40
49,50
49,51
62,63
62,64
73,74
73,75
92,93
92,94
-----guardedBy-----
104,138
99,145
101,129
105,139
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int set_cipher_discarded(struct sftp_cipher *cipher,    EVP_CIPHER_CTX *cipher_ctx) {  unsigned char *garbage_in, *garbage_out;  if (cipher->discard_len == 0) {    return 0;  }  garbage_in = malloc(cipher->discard_len);  if (garbage_in == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }  garbage_out = malloc(cipher->discard_len);  if (garbage_out == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    free(garbage_in);    _exit(1);  }  if (EVP_Cipher(cipher_ctx, garbage_out, garbage_in,      cipher->discard_len) != 1) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors());    free(garbage_in);    pr_memscrub(garbage_out, cipher->discard_len);    free(garbage_out);    return -1;  }  free(garbage_in);  pr_memscrub(garbage_out, cipher->discard_len);  free(garbage_out);  return 0;}
static int
set_cipher_discarded(struct sftp_cipher *cipher,    EVP_CIPHER_CTX *cipher_ctx)
set_cipher_discarded
struct sftp_cipher *cipher
struct sftp_cipher
sftp_cipher
*cipher
*
cipher
EVP_CIPHER_CTX *cipher_ctx
EVP_CIPHER_CTX
EVP_CIPHER_CTX
*cipher_ctx
*
cipher_ctx
{  unsigned char *garbage_in, *garbage_out;  if (cipher->discard_len == 0) {    return 0;  }  garbage_in = malloc(cipher->discard_len);  if (garbage_in == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }  garbage_out = malloc(cipher->discard_len);  if (garbage_out == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    free(garbage_in);    _exit(1);  }  if (EVP_Cipher(cipher_ctx, garbage_out, garbage_in,      cipher->discard_len) != 1) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors());    free(garbage_in);    pr_memscrub(garbage_out, cipher->discard_len);    free(garbage_out);    return -1;  }  free(garbage_in);  pr_memscrub(garbage_out, cipher->discard_len);  free(garbage_out);  return 0;}
unsigned char *garbage_in, *garbage_out;
unsigned char *garbage_in, *garbage_out;
unsigned char
*garbage_in
*
garbage_in
*garbage_out
*
garbage_out
if (cipher->discard_len == 0) {    return 0;  }
cipher->discard_len == 0
cipher->discard_len
cipher
cipher
discard_len
0
{    return 0;  }
return 0;
0
garbage_in = malloc(cipher->discard_len);
garbage_in = malloc(cipher->discard_len)
garbage_in
garbage_in
malloc(cipher->discard_len)
malloc
malloc
cipher->discard_len
cipher
cipher
discard_len
if (garbage_in == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }
garbage_in == NULL
garbage_in
garbage_in
NULL
NULL
{    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");
_exit(1);
_exit(1)
_exit
_exit
1
garbage_out = malloc(cipher->discard_len);
garbage_out = malloc(cipher->discard_len)
garbage_out
garbage_out
malloc(cipher->discard_len)
malloc
malloc
cipher->discard_len
cipher
cipher
discard_len
if (garbage_out == NULL) {    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    free(garbage_in);    _exit(1);  }
garbage_out == NULL
garbage_out
garbage_out
NULL
NULL
{    pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");    free(garbage_in);    _exit(1);  }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),      MOD_SFTP_VERSION ": Out of memory!");
free(garbage_in);
free(garbage_in)
free
free
garbage_in
garbage_in
_exit(1);
_exit(1)
_exit
_exit
1
if (EVP_Cipher(cipher_ctx, garbage_out, garbage_in,      cipher->discard_len) != 1) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors());    free(garbage_in);    pr_memscrub(garbage_out, cipher->discard_len);    free(garbage_out);    return -1;  }
EVP_Cipher(cipher_ctx, garbage_out, garbage_in,      cipher->discard_len) != 1
EVP_Cipher(cipher_ctx, garbage_out, garbage_in,      cipher->discard_len)
EVP_Cipher
EVP_Cipher
cipher_ctx
cipher_ctx
garbage_out
garbage_out
garbage_in
garbage_in
cipher->discard_len
cipher
cipher
discard_len
1
{    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors());    free(garbage_in);    pr_memscrub(garbage_out, cipher->discard_len);    free(garbage_out);    return -1;  }
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors());
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors())
void
void

pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "error ciphering discard data: %s", sftp_crypto_get_errors())
pr_log_writefile
pr_log_writefile
sftp_logfd
sftp_logfd
MOD_SFTP_VERSION
MOD_SFTP_VERSION
"error ciphering discard data: %s"
sftp_crypto_get_errors()
sftp_crypto_get_errors
sftp_crypto_get_errors
free(garbage_in);
free(garbage_in)
free
free
garbage_in
garbage_in
pr_memscrub(garbage_out, cipher->discard_len);
pr_memscrub(garbage_out, cipher->discard_len)
pr_memscrub
pr_memscrub
garbage_out
garbage_out
cipher->discard_len
cipher
cipher
discard_len
free(garbage_out);
free(garbage_out)
free
free
garbage_out
garbage_out
return -1;
-1
1
free(garbage_in);
free(garbage_in)
free
free
garbage_in
garbage_in
pr_memscrub(garbage_out, cipher->discard_len);
pr_memscrub(garbage_out, cipher->discard_len)
pr_memscrub
pr_memscrub
garbage_out
garbage_out
cipher->discard_len
cipher
cipher
discard_len
free(garbage_out);
free(garbage_out)
free
free
garbage_out
garbage_out
return 0;
0
-----joern-----
(41,46,0)
(55,74,0)
(19,14,0)
(3,9,0)
(4,50,0)
(45,67,0)
(71,29,0)
(67,70,0)
(75,9,0)
(1,26,0)
(79,33,0)
(82,44,0)
(27,4,0)
(0,15,0)
(59,74,0)
(77,25,0)
(77,74,0)
(61,10,0)
(48,9,0)
(38,80,0)
(28,33,0)
(8,29,0)
(17,50,0)
(12,9,0)
(19,74,0)
(16,46,0)
(30,15,0)
(74,9,0)
(54,51,0)
(51,46,0)
(65,0,0)
(80,25,0)
(29,8,0)
(15,0,0)
(43,17,0)
(44,82,0)
(82,70,0)
(59,67,0)
(51,70,0)
(50,9,0)
(24,4,0)
(64,71,0)
(83,21,0)
(68,39,0)
(40,51,0)
(11,50,0)
(71,14,0)
(52,34,0)
(2,66,0)
(6,20,0)
(26,70,0)
(17,9,0)
(3,50,0)
(7,9,0)
(39,46,0)
(17,26,0)
(23,21,0)
(72,19,0)
(46,51,0)
(58,29,0)
(5,46,0)
(37,74,0)
(57,82,0)
(78,9,0)
(81,14,0)
(66,50,0)
(31,60,0)
(46,39,0)
(11,14,0)
(62,77,0)
(36,55,0)
(67,59,0)
(42,34,0)
(33,66,0)
(29,71,0)
(55,9,0)
(42,20,0)
(63,67,0)
(76,29,0)
(46,69,0)
(22,29,0)
(66,33,0)
(50,44,0)
(18,50,0)
(66,14,0)
(26,17,0)
(53,11,0)
(49,3,0)
(47,9,0)
(35,61,0)
(60,81,0)
(44,50,0)
(21,74,0)
(42,81,0)
(71,64,0)
(32,26,0)
(46,74,0)
(74,59,0)
(56,82,0)
(20,73,0)
(0,70,0)
(33,70,0)
(34,9,0)
(46,50,0)
(13,0,0)
(41,4,1)
(49,17,1)
(0,70,1)
(61,35,1)
(81,60,1)
(11,50,1)
(79,2,1)
(3,50,1)
(51,70,1)
(51,40,1)
(46,74,1)
(1,43,1)
(68,46,1)
(4,27,1)
(77,62,1)
(11,53,1)
(21,74,1)
(83,74,1)
(3,49,1)
(32,1,1)
(50,44,1)
(37,15,1)
(33,70,1)
(44,82,1)
(6,15,1)
(43,55,1)
(13,65,1)
(21,23,1)
(46,50,1)
(0,13,1)
(31,11,1)
(45,63,1)
(5,41,1)
(42,34,1)
(27,24,1)
(41,80,1)
(66,50,1)
(23,83,1)
(52,3,1)
(19,72,1)
(33,28,1)
(17,50,1)
(80,38,1)
(19,74,1)
(17,26,1)
(54,16,1)
(26,32,1)
(53,66,1)
(46,51,1)
(4,50,1)
(29,8,1)
(39,46,1)
(39,68,1)
(67,70,1)
(55,36,1)
(60,31,1)
(30,0,1)
(15,30,1)
(42,20,1)
(67,45,1)
(55,74,1)
(16,5,1)
(71,29,1)
(15,0,1)
(20,6,1)
(74,59,1)
(28,79,1)
(62,4,1)
(57,56,1)
(22,58,1)
(18,61,1)
(59,67,1)
(82,57,1)
(76,22,1)
(82,70,1)
(72,71,1)
(8,76,1)
(42,81,1)
(58,39,1)
(77,74,1)
(26,70,1)
(46,69,1)
(40,54,1)
(56,18,1)
(38,77,1)
(66,33,1)
(71,64,1)
(35,21,1)
(34,52,1)
(24,50,1)
(2,19,1)
(63,37,1)
(18,21,1)
(36,39,1)
(81,39,2)
(4,50,2)
(36,39,2)
(55,39,2)
(1,39,2)
(39,15,2)
(42,20,2)
(63,15,2)
(71,29,2)
(2,39,2)
(32,39,2)
(46,74,2)
(82,15,2)
(71,64,2)
(50,44,2)
(54,15,2)
(59,15,2)
(60,39,2)
(42,34,2)
(21,15,2)
(66,50,2)
(46,51,2)
(24,15,2)
(74,59,2)
(40,15,2)
(17,39,2)
(52,39,2)
(82,70,2)
(22,39,2)
(51,15,2)
(29,8,2)
(26,70,2)
(53,39,2)
(23,15,2)
(37,15,2)
(3,39,2)
(46,15,2)
(79,39,2)
(17,50,2)
(44,82,2)
(77,4,2)
(42,81,2)
(5,15,2)
(76,39,2)
(83,15,2)
(51,70,2)
(67,15,2)
(55,74,2)
(57,15,2)
(41,15,2)
(19,74,2)
(71,39,2)
(17,26,2)
(35,21,2)
(43,39,2)
(8,39,2)
(67,70,2)
(77,74,2)
(21,74,2)
(45,15,2)
(74,15,2)
(62,4,2)
(33,39,2)
(11,39,2)
(0,70,2)
(28,39,2)
(11,50,2)
(59,67,2)
(56,15,2)
(58,39,2)
(49,39,2)
(50,15,2)
(61,21,2)
(15,0,2)
(31,39,2)
(44,15,2)
(72,39,2)
(16,15,2)
(80,4,2)
(19,39,2)
(46,50,2)
(26,39,2)
(46,69,2)
(38,4,2)
(18,15,2)
(66,39,2)
(4,15,2)
(27,15,2)
(34,39,2)
(3,50,2)
(68,15,2)
(6,15,2)
(20,15,2)
(39,46,2)
(33,70,2)
(66,33,2)
(29,39,2)
-----------------------------------
(0,cipher->discard_len)
(1,cipher)
(2,garbage_out)
(3,free(garbage_out)
(4,garbage_out == NULL)
(5,garbage_out)
(6,0)
(7,if (garbage_out == NULL)
(8,sftp_crypto_get_errors()
(9,)
(10,)
(11,free(garbage_out)
(12,if (cipher->discard_len == 0)
(13,discard_len)
(14,)
(15,cipher->discard_len == 0)
(16,garbage_in)
(17,pr_memscrub(garbage_out, cipher->discard_len)
(18,garbage_out)
(19,free(garbage_in)
(20,return 0;)
(21,garbage_in == NULL)
(22,MOD_SFTP_VERSION)
(23,NULL)
(24,garbage_out)
(25,)
(26,cipher->discard_len)
(27,NULL)
(28,discard_len)
(29,pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,\n\\n      "error ciphering discard data: %s", sftp_crypto_get_errors()
(30,0)
(31,1)
(32,discard_len)
(33,cipher->discard_len)
(34,return 0;)
(35,1)
(36,garbage_in)
(37,garbage_in)
(38,1)
(39,EVP_Cipher(cipher_ctx, garbage_out, garbage_in,\n\\n      cipher->discard_len)
(40,discard_len)
(41,cipher_ctx)
(42,RET)
(43,garbage_out)
(44,malloc(cipher->discard_len)
(45,discard_len)
(46,EVP_Cipher(cipher_ctx, garbage_out, garbage_in,\n\\n      cipher->discard_len)
(47,if (garbage_in == NULL)
(48,garbage_in)
(49,garbage_out)
(50,garbage_out = malloc(cipher->discard_len)
(51,cipher->discard_len)
(52,0)
(53,garbage_out)
(54,cipher)
(55,free(garbage_in)
(56,cipher)
(57,discard_len)
(58,sftp_logfd)
(59,malloc(cipher->discard_len)
(60,-1)
(61,_exit(1)
(62,garbage_in)
(63,cipher)
(64,void)
(65,cipher)
(66,pr_memscrub(garbage_out, cipher->discard_len)
(67,cipher->discard_len)
(68,1)
(69,EVP_CIPHER_CTX *cipher_ctx)
(70,struct sftp_cipher *cipher)
(71,(void)
(72,garbage_in)
(73,)
(74,garbage_in = malloc(cipher->discard_len)
(75,garbage_out)
(76,"error ciphering discard data: %s")
(77,free(garbage_in)
(78,if (EVP_Cipher(cipher_ctx, garbage_out, garbage_in,\n\\n      cipher->discard_len)
(79,cipher)
(80,_exit(1)
(81,return -1;)
(82,cipher->discard_len)
(83,garbage_in)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^