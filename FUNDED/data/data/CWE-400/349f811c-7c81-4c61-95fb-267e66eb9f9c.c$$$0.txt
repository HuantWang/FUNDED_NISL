-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_34_bad()
{
    int count;
    CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Set count to a random value */
    count = RAND32();
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
38,41
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
-----nextToken-----
2,4,8,10,14,16,20,22,26,29,34,35,37,41,43,47,48,52,54,58,59
-----computeFrom-----
18,19
18,20
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_34_bad(){    int count;    CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_34_bad()
CWE400_Resource_Exhaustion__rand_sleep_34_bad
{    int count;    CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__rand_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__rand_sleep_34_unionType
CWE400_Resource_Exhaustion__rand_sleep_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(17,1,0)
(8,0,0)
(20,23,0)
(21,6,0)
(0,26,0)
(26,0,0)
(3,26,0)
(12,26,0)
(15,2,0)
(23,6,0)
(5,16,0)
(14,1,0)
(1,14,0)
(25,14,0)
(0,18,0)
(22,23,0)
(13,16,0)
(1,6,0)
(9,6,0)
(23,7,0)
(11,4,0)
(16,20,0)
(19,18,0)
(18,6,0)
(24,20,0)
(2,0,0)
(4,18,0)
(20,6,0)
(2,18,0)
(7,23,0)
(16,5,1)
(14,25,1)
(8,20,1)
(10,4,1)
(13,23,1)
(20,24,1)
(23,7,1)
(12,3,1)
(3,8,1)
(1,14,1)
(22,1,1)
(26,12,1)
(25,17,1)
(5,13,1)
(2,0,1)
(24,16,1)
(7,22,1)
(2,15,1)
(4,11,1)
(0,26,1)
(20,23,1)
(15,0,1)
(11,2,1)
(0,26,2)
(2,0,2)
(23,7,2)
(1,14,2)
(20,23,2)
-----------------------------------
(0,count = myUnion.unionSecond)
(1,count = -1)
(2,SLEEP(count)
(3,myUnion)
(4,printLine("Sleep time possibly too long")
(5,unionFirst)
(6,)
(7,RAND32()
(8,count)
(9,count)
(10,RET)
(11,"Sleep time possibly too long")
(12,unionSecond)
(13,myUnion)
(14,-1)
(15,count)
(16,myUnion.unionFirst)
(17,count)
(18,)
(19,count)
(20,myUnion.unionFirst = count)
(21,myUnion)
(22,count)
(23,count = RAND32()
(24,count)
(25,1)
(26,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^