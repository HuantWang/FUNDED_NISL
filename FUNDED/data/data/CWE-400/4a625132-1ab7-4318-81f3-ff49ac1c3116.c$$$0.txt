-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    }
    while(1)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
55,56
55,57
55,58
55,59
55,60
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,30,32,37,39,40,45,48,50,53,54,59,62,64,67,70,73,74,78,80,85,87,91,93,95,99,101,105,107,112,113,114
-----computeFrom-----
13,14
13,15
42,43
42,44
43,44
43,45
51,52
51,53
57,58
57,59
68,69
68,70
76,77
76,78
-----guardedBy-----
50,95
53,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
while(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }
1
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
-----joern-----
(25,14,0)
(10,21,0)
(8,48,0)
(15,50,0)
(45,41,0)
(16,8,0)
(33,29,0)
(0,55,0)
(52,29,0)
(12,48,0)
(54,20,0)
(49,28,0)
(1,36,0)
(22,2,0)
(29,56,0)
(4,17,0)
(41,26,0)
(23,17,0)
(37,2,0)
(24,2,0)
(56,29,0)
(32,13,0)
(18,19,0)
(20,13,0)
(25,5,0)
(17,24,0)
(34,14,0)
(26,41,0)
(50,13,0)
(14,25,0)
(47,26,0)
(56,13,0)
(41,21,0)
(55,56,0)
(17,31,0)
(39,24,0)
(27,41,0)
(57,24,0)
(7,2,0)
(36,24,0)
(42,8,0)
(31,36,0)
(31,17,0)
(26,24,0)
(17,4,0)
(33,39,0)
(46,56,0)
(40,50,0)
(50,56,0)
(36,31,0)
(39,28,0)
(9,56,0)
(3,46,0)
(20,56,0)
(30,4,0)
(53,24,0)
(28,39,0)
(46,13,0)
(6,55,0)
(38,36,0)
(43,18,0)
(29,52,0)
(29,33,0)
(51,39,0)
(39,33,0)
(27,44,1)
(29,52,1)
(17,24,1)
(47,45,1)
(11,10,1)
(15,55,1)
(31,17,1)
(54,46,1)
(26,47,1)
(12,20,1)
(14,34,1)
(17,4,1)
(46,56,1)
(34,55,1)
(9,31,1)
(26,24,1)
(30,23,1)
(6,56,1)
(41,26,1)
(43,31,1)
(25,14,1)
(35,12,1)
(49,51,1)
(40,15,1)
(56,29,1)
(4,30,1)
(12,18,1)
(55,0,1)
(45,27,1)
(31,36,1)
(35,11,1)
(33,39,1)
(1,38,1)
(18,43,1)
(44,24,1)
(0,6,1)
(29,33,1)
(23,11,1)
(39,28,1)
(50,40,1)
(36,24,1)
(36,1,1)
(10,41,1)
(46,3,1)
(20,54,1)
(38,17,1)
(55,56,1)
(15,25,1)
(28,49,1)
(11,44,1)
(39,24,1)
(24,57,1)
(51,9,1)
(50,56,1)
(57,53,1)
(3,50,1)
(20,56,1)
(31,36,2)
(26,44,2)
(29,52,2)
(17,24,2)
(12,11,2)
(39,28,2)
(20,31,2)
(49,31,2)
(50,31,2)
(0,31,2)
(31,11,2)
(27,44,2)
(33,31,2)
(55,31,2)
(17,4,2)
(25,55,2)
(46,56,2)
(41,44,2)
(50,56,2)
(17,11,2)
(1,17,2)
(14,55,2)
(9,31,2)
(45,44,2)
(55,56,2)
(39,24,2)
(26,24,2)
(51,31,2)
(29,31,2)
(54,31,2)
(47,44,2)
(34,55,2)
(18,31,2)
(36,24,2)
(31,17,2)
(3,31,2)
(36,17,2)
(38,17,2)
(40,31,2)
(41,26,2)
(4,11,2)
(25,14,2)
(28,31,2)
(29,33,2)
(46,31,2)
(33,39,2)
(30,11,2)
(39,31,2)
(56,31,2)
(20,56,2)
(23,11,2)
(56,29,2)
(15,31,2)
(10,44,2)
(6,31,2)
(43,31,2)
-----------------------------------
(0,NULL)
(1,100)
(2,)
(3,myString)
(4,strlen(HELLO_STRING)
(5,)
(6,myString)
(7,while(1)
(8,)
(9,myString)
(10,break;)
(11,1)
(12,break;)
(13,)
(14,-1)
(15,myString)
(16,if (data > strlen(HELLO_STRING)
(17,data > strlen(HELLO_STRING)
(18,printLine("Input is less than the length of the source string or too large")
(19,)
(20,free(myString)
(21,)
(22,while(1)
(23,data)
(24,data = 0)
(25,exit(-1)
(26,&data)
(27,stdin)
(28,sizeof(char)
(29,(char *)
(30,HELLO_STRING)
(31,data > strlen(HELLO_STRING)
(32,if (myString == NULL)
(33,malloc(data*sizeof(char)
(34,1)
(35,RET)
(36,data < 100)
(37,data)
(38,data)
(39,data*sizeof(char)
(40,HELLO_STRING)
(41,fscanf(stdin, "%zu", &data)
(42,myString)
(43,"Input is less than the length of the source string or too large")
(44,1)
(45,"%zu")
(46,printLine(myString)
(47,data)
(48,)
(49,char)
(50,strcpy(myString, HELLO_STRING)
(51,data)
(52,char *)
(53,data)
(54,myString)
(55,myString == NULL)
(56,myString = (char *)
(57,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^