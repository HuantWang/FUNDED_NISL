-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
76,77
77,78
77,79
78,79
-----nextToken-----
2,4,8,10,14,16,18,21,25,26,27,28,32,33,34,36,39,44,46,48,53,54,57,61,62,64,67,72,73,74,75,79,80,81
-----computeFrom-----
12,13
12,14
23,24
23,25
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = 20;
count = 20
count
count
20
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(32,16,0)
(38,26,0)
(26,4,0)
(36,3,0)
(0,12,0)
(17,8,0)
(42,41,0)
(23,5,0)
(4,26,0)
(26,37,0)
(22,15,0)
(7,34,0)
(31,23,0)
(28,24,0)
(29,36,0)
(2,35,0)
(24,34,0)
(14,37,0)
(12,36,0)
(25,24,0)
(45,3,0)
(41,26,0)
(33,27,0)
(41,35,0)
(26,41,0)
(39,27,0)
(20,37,0)
(10,34,0)
(16,34,0)
(1,15,0)
(37,27,0)
(6,27,0)
(21,34,0)
(9,3,0)
(15,24,0)
(11,34,0)
(26,36,0)
(46,35,0)
(40,3,0)
(13,27,0)
(44,19,0)
(36,12,0)
(19,35,0)
(8,27,0)
(44,23,1)
(26,37,1)
(0,29,1)
(16,32,1)
(26,4,1)
(1,43,1)
(11,16,1)
(30,21,1)
(43,6,1)
(42,35,1)
(39,37,1)
(36,12,1)
(14,18,1)
(6,8,1)
(43,39,1)
(41,35,1)
(31,41,1)
(2,15,1)
(17,18,1)
(35,46,1)
(26,36,1)
(30,11,1)
(37,20,1)
(15,22,1)
(46,2,1)
(38,42,1)
(26,38,1)
(22,1,1)
(12,0,1)
(41,26,1)
(18,36,1)
(32,43,1)
(19,35,1)
(20,14,1)
(8,17,1)
(23,31,1)
(42,19,1)
(21,41,1)
(19,44,1)
(31,41,2)
(41,26,2)
(37,18,2)
(38,41,2)
(41,35,2)
(14,18,2)
(1,43,2)
(26,36,2)
(8,18,2)
(44,41,2)
(23,41,2)
(21,43,2)
(2,43,2)
(42,41,2)
(20,18,2)
(42,43,2)
(11,43,2)
(26,37,2)
(41,41,2)
(17,18,2)
(46,43,2)
(36,12,2)
(26,4,2)
(15,43,2)
(35,43,2)
(26,41,2)
(38,43,2)
(6,18,2)
(22,43,2)
(16,43,2)
(32,43,2)
(19,41,2)
(41,43,2)
(39,18,2)
(26,43,2)
(19,35,2)
-----------------------------------
(0,1)
(1,i)
(2,i)
(3,)
(4,size_t)
(5,)
(6,break;)
(7,case 7:)
(8,printLine("Benign, fixed string")
(9,switch(6)
(10,default:)
(11,break;)
(12,-1)
(13,default:)
(14,count)
(15,i = 0)
(16,printLine("Benign, fixed string")
(17,"Benign, fixed string")
(18,6)
(19,i++)
(20,20)
(21,break;)
(22,0)
(23,printLine("Hello")
(24,)
(25,i)
(26,(size_t)
(27,)
(28,for (i = 0; i < (size_t)
(29,count)
(30,RET)
(31,"Hello")
(32,"Benign, fixed string")
(33,case 6:)
(34,)
(35,i = 0)
(36,count = -1)
(37,count = 20)
(38,count)
(39,break;)
(40,switch(7)
(41,i < (size_t)
(42,i)
(43,7)
(44,i)
(45,count)
(46,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^