-----label-----
1
-----code-----
void __process_info_strgp(enum ldmsd_loglevel llevel)
{
	ldmsd_strgp_t strgp;
	ldmsd_log(llevel, "\n");
	ldmsd_log(llevel, "========================================================================\n");
	ldmsd_log(llevel, "%s\n", "Storage Policies");
	ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",
		 "Name", "Container", "Schema", "Back End", "State");
	ldmsd_log(llevel, "--------------- --------------- --------------- --------------- -------- ------------\n");
	ldmsd_cfg_lock(LDMSD_CFGOBJ_STRGP);
	for (strgp = ldmsd_strgp_first(); strgp; strgp = ldmsd_strgp_next(strgp)) {
		ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",
			 strgp->obj.name,
			 strgp->container, strgp->schema, strgp->plugin_name,
			 ldmsd_strgp_state_str(strgp->state));
		ldmsd_strgp_lock(strgp);
		ldmsd_name_match_t match;
		ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n");
		ldmsd_log(llevel, "    %s\n", "Name");
		ldmsd_log(llevel, "    ----------------------------------------\n");
		for (match = ldmsd_strgp_prdcr_first(strgp); match;
		     match = ldmsd_strgp_prdcr_next(match)) {
			ldmsd_log(llevel, "    %s\n", match->regex_str);
		}
		ldmsd_log(llevel, "    ----------------------------------------\n");

		ldmsd_log(llevel, "    Metrics (empty == All)\n");
		ldmsd_log(llevel, "    %s\n", "Name");
		ldmsd_log(llevel, "    ----------------------------------------\n");
		ldmsd_strgp_metric_t metric;
		for (metric = ldmsd_strgp_metric_first(strgp); metric;
		     metric = ldmsd_strgp_metric_next(metric)) {
			ldmsd_log(llevel, "    %s\n", metric->name);
		}
		ldmsd_log(llevel, "    ----------------------------------------\n");
		ldmsd_strgp_unlock(strgp);
	}
	ldmsd_log(llevel, "--------------- --------------- --------------- --------------- ---------------\n");
	ldmsd_cfg_unlock(LDMSD_CFGOBJ_STRGP);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
19,20
21,22
24,25
25,26
25,27
25,28
26,27
28,29
31,32
32,33
32,34
32,35
32,36
33,34
35,36
39,40
40,41
40,42
40,43
40,44
40,45
40,46
40,47
40,48
41,42
43,44
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
70,71
71,72
73,74
75,76
75,77
76,77
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
83,88
83,89
83,90
83,91
83,92
83,93
83,94
83,95
83,96
83,97
83,98
84,85
85,86
85,87
85,88
85,89
85,90
85,91
85,92
85,93
86,87
88,89
91,92
91,93
92,93
92,94
93,94
97,98
97,99
98,99
101,102
101,103
102,103
105,106
105,107
106,107
109,110
109,111
110,111
112,113
112,114
113,114
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
128,129
129,130
129,131
129,132
130,131
132,133
135,136
136,137
136,138
136,139
136,140
137,138
139,140
143,144
144,145
144,146
144,147
145,146
147,148
150,151
150,152
150,153
150,154
151,152
152,153
152,154
153,154
155,156
155,157
156,157
158,159
160,161
162,163
162,164
163,164
165,166
165,167
166,167
168,169
170,171
171,172
172,173
172,174
172,175
172,176
173,174
175,176
178,179
178,180
179,180
182,183
183,184
183,185
183,186
184,185
186,187
189,190
190,191
190,192
190,193
191,192
193,194
196,197
197,198
197,199
197,200
197,201
198,199
200,201
204,205
205,206
205,207
205,208
206,207
208,209
211,212
212,213
212,214
213,214
215,216
217,218
217,219
217,220
217,221
218,219
219,220
219,221
220,221
222,223
222,224
223,224
225,226
227,228
229,230
229,231
230,231
232,233
232,234
233,234
235,236
237,238
238,239
239,240
239,241
239,242
239,243
240,241
242,243
245,246
245,247
246,247
249,250
250,251
250,252
250,253
251,252
253,254
256,257
257,258
257,259
258,259
260,261
262,263
263,264
263,265
263,266
264,265
266,267
269,270
270,271
270,272
271,272
273,274
-----nextToken-----
2,4,7,9,14,16,20,22,23,27,29,30,34,36,37,38,42,44,45,46,47,48,49,50,54,56,57,61,64,69,72,74,77,80,82,87,89,90,94,95,96,99,100,103,104,107,108,111,114,115,119,121,125,127,131,133,134,138,140,141,142,146,148,149,154,157,159,161,164,167,169,174,176,177,180,181,185,187,188,192,194,195,199,201,202,203,207,209,210,214,216,221,224,226,228,231,234,236,241,243,244,247,248,252,254,255,259,261,265,267,268,272,274
-----computeFrom-----
67,68
67,69
75,76
75,77
152,153
152,154
162,163
162,164
219,220
219,221
229,230
229,231
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void __process_info_strgp(enum ldmsd_loglevel llevel){	ldmsd_strgp_t strgp;	ldmsd_log(llevel, "\n");	ldmsd_log(llevel, "========================================================================\n");	ldmsd_log(llevel, "%s\n", "Storage Policies");	ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",		 "Name", "Container", "Schema", "Back End", "State");	ldmsd_log(llevel, "--------------- --------------- --------------- --------------- -------- ------------\n");	ldmsd_cfg_lock(LDMSD_CFGOBJ_STRGP);	for (strgp = ldmsd_strgp_first(); strgp; strgp = ldmsd_strgp_next(strgp)) {		ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",			 strgp->obj.name,			 strgp->container, strgp->schema, strgp->plugin_name,			 ldmsd_strgp_state_str(strgp->state));		ldmsd_strgp_lock(strgp);		ldmsd_name_match_t match;		ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		for (match = ldmsd_strgp_prdcr_first(strgp); match;		     match = ldmsd_strgp_prdcr_next(match)) {			ldmsd_log(llevel, "    %s\n", match->regex_str);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_log(llevel, "    Metrics (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_metric_t metric;		for (metric = ldmsd_strgp_metric_first(strgp); metric;		     metric = ldmsd_strgp_metric_next(metric)) {			ldmsd_log(llevel, "    %s\n", metric->name);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_unlock(strgp);	}	ldmsd_log(llevel, "--------------- --------------- --------------- --------------- ---------------\n");	ldmsd_cfg_unlock(LDMSD_CFGOBJ_STRGP);}
void
__process_info_strgp(enum ldmsd_loglevel llevel)
__process_info_strgp
enum ldmsd_loglevel llevel
enum ldmsd_loglevel
ldmsd_loglevel
llevel
llevel
{	ldmsd_strgp_t strgp;	ldmsd_log(llevel, "\n");	ldmsd_log(llevel, "========================================================================\n");	ldmsd_log(llevel, "%s\n", "Storage Policies");	ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",		 "Name", "Container", "Schema", "Back End", "State");	ldmsd_log(llevel, "--------------- --------------- --------------- --------------- -------- ------------\n");	ldmsd_cfg_lock(LDMSD_CFGOBJ_STRGP);	for (strgp = ldmsd_strgp_first(); strgp; strgp = ldmsd_strgp_next(strgp)) {		ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",			 strgp->obj.name,			 strgp->container, strgp->schema, strgp->plugin_name,			 ldmsd_strgp_state_str(strgp->state));		ldmsd_strgp_lock(strgp);		ldmsd_name_match_t match;		ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		for (match = ldmsd_strgp_prdcr_first(strgp); match;		     match = ldmsd_strgp_prdcr_next(match)) {			ldmsd_log(llevel, "    %s\n", match->regex_str);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_log(llevel, "    Metrics (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_metric_t metric;		for (metric = ldmsd_strgp_metric_first(strgp); metric;		     metric = ldmsd_strgp_metric_next(metric)) {			ldmsd_log(llevel, "    %s\n", metric->name);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_unlock(strgp);	}	ldmsd_log(llevel, "--------------- --------------- --------------- --------------- ---------------\n");	ldmsd_cfg_unlock(LDMSD_CFGOBJ_STRGP);}
ldmsd_strgp_t strgp;
ldmsd_strgp_t strgp;
ldmsd_strgp_t
ldmsd_strgp_t
strgp
strgp
ldmsd_log(llevel, "\n");
ldmsd_log(llevel, "\n")
ldmsd_log
ldmsd_log
llevel
llevel
"\n"
ldmsd_log(llevel, "========================================================================\n");
ldmsd_log(llevel, "========================================================================\n")
ldmsd_log
ldmsd_log
llevel
llevel
"========================================================================\n"
ldmsd_log(llevel, "%s\n", "Storage Policies");
ldmsd_log(llevel, "%s\n", "Storage Policies")
ldmsd_log
ldmsd_log
llevel
llevel
"%s\n"
"Storage Policies"
ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",		 "Name", "Container", "Schema", "Back End", "State");
ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",		 "Name", "Container", "Schema", "Back End", "State")
ldmsd_log
ldmsd_log
llevel
llevel
"%-15s %-15s %-15s %-15s %-8s\n"
"Name"
"Container"
"Schema"
"Back End"
"State"
ldmsd_log(llevel, "--------------- --------------- --------------- --------------- -------- ------------\n");
ldmsd_log(llevel, "--------------- --------------- --------------- --------------- -------- ------------\n")
ldmsd_log
ldmsd_log
llevel
llevel
"--------------- --------------- --------------- --------------- -------- ------------\n"
ldmsd_cfg_lock(LDMSD_CFGOBJ_STRGP);
ldmsd_cfg_lock(LDMSD_CFGOBJ_STRGP);
ldmsd_cfg_lock
ldmsd_cfg_lock
(LDMSD_CFGOBJ_STRGP)
LDMSD_CFGOBJ_STRGP
LDMSD_CFGOBJ_STRGP
for (strgp = ldmsd_strgp_first(); strgp; strgp = ldmsd_strgp_next(strgp)) {		ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",			 strgp->obj.name,			 strgp->container, strgp->schema, strgp->plugin_name,			 ldmsd_strgp_state_str(strgp->state));		ldmsd_strgp_lock(strgp);		ldmsd_name_match_t match;		ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		for (match = ldmsd_strgp_prdcr_first(strgp); match;		     match = ldmsd_strgp_prdcr_next(match)) {			ldmsd_log(llevel, "    %s\n", match->regex_str);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_log(llevel, "    Metrics (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_metric_t metric;		for (metric = ldmsd_strgp_metric_first(strgp); metric;		     metric = ldmsd_strgp_metric_next(metric)) {			ldmsd_log(llevel, "    %s\n", metric->name);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_unlock(strgp);	}
strgp = ldmsd_strgp_first();
strgp = ldmsd_strgp_first()
strgp
strgp
ldmsd_strgp_first()
ldmsd_strgp_first
ldmsd_strgp_first
strgp
strgp
strgp = ldmsd_strgp_next(strgp)
strgp
strgp
ldmsd_strgp_next(strgp)
ldmsd_strgp_next
ldmsd_strgp_next
strgp
strgp
{		ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",			 strgp->obj.name,			 strgp->container, strgp->schema, strgp->plugin_name,			 ldmsd_strgp_state_str(strgp->state));		ldmsd_strgp_lock(strgp);		ldmsd_name_match_t match;		ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		for (match = ldmsd_strgp_prdcr_first(strgp); match;		     match = ldmsd_strgp_prdcr_next(match)) {			ldmsd_log(llevel, "    %s\n", match->regex_str);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_log(llevel, "    Metrics (empty == All)\n");		ldmsd_log(llevel, "    %s\n", "Name");		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_metric_t metric;		for (metric = ldmsd_strgp_metric_first(strgp); metric;		     metric = ldmsd_strgp_metric_next(metric)) {			ldmsd_log(llevel, "    %s\n", metric->name);		}		ldmsd_log(llevel, "    ----------------------------------------\n");		ldmsd_strgp_unlock(strgp);	}
ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",			 strgp->obj.name,			 strgp->container, strgp->schema, strgp->plugin_name,			 ldmsd_strgp_state_str(strgp->state));
ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\n",			 strgp->obj.name,			 strgp->container, strgp->schema, strgp->plugin_name,			 ldmsd_strgp_state_str(strgp->state))
ldmsd_log
ldmsd_log
llevel
llevel
"%-15s %-15s %-15s %-15s %-8s\n"
strgp->obj.name
strgp->obj
strgp
strgp
obj
name
strgp->container
strgp
strgp
container
strgp->schema
strgp
strgp
schema
strgp->plugin_name
strgp
strgp
plugin_name
ldmsd_strgp_state_str(strgp->state)
ldmsd_strgp_state_str
ldmsd_strgp_state_str
strgp->state
strgp
strgp
state
ldmsd_strgp_lock(strgp);
ldmsd_strgp_lock(strgp)
ldmsd_strgp_lock
ldmsd_strgp_lock
strgp
strgp
ldmsd_name_match_t match;
ldmsd_name_match_t match;
ldmsd_name_match_t
ldmsd_name_match_t
match
match
ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n");
ldmsd_log(llevel, "    Producer Match Specifications (empty == All)\n")
ldmsd_log
ldmsd_log
llevel
llevel
"    Producer Match Specifications (empty == All)\n"
ldmsd_log(llevel, "    %s\n", "Name");
ldmsd_log(llevel, "    %s\n", "Name")
ldmsd_log
ldmsd_log
llevel
llevel
"    %s\n"
"Name"
ldmsd_log(llevel, "    ----------------------------------------\n");
ldmsd_log(llevel, "    ----------------------------------------\n")
ldmsd_log
ldmsd_log
llevel
llevel
"    ----------------------------------------\n"
for (match = ldmsd_strgp_prdcr_first(strgp); match;		     match = ldmsd_strgp_prdcr_next(match)) {			ldmsd_log(llevel, "    %s\n", match->regex_str);		}
match = ldmsd_strgp_prdcr_first(strgp);
match = ldmsd_strgp_prdcr_first(strgp)
match
match
ldmsd_strgp_prdcr_first(strgp)
ldmsd_strgp_prdcr_first
ldmsd_strgp_prdcr_first
strgp
strgp
match
match
match = ldmsd_strgp_prdcr_next(match)
match
match
ldmsd_strgp_prdcr_next(match)
ldmsd_strgp_prdcr_next
ldmsd_strgp_prdcr_next
match
match
{			ldmsd_log(llevel, "    %s\n", match->regex_str);		}
ldmsd_log(llevel, "    %s\n", match->regex_str);
ldmsd_log(llevel, "    %s\n", match->regex_str)
ldmsd_log
ldmsd_log
llevel
llevel
"    %s\n"
match->regex_str
match
match
regex_str
ldmsd_log(llevel, "    ----------------------------------------\n");
ldmsd_log(llevel, "    ----------------------------------------\n")
ldmsd_log
ldmsd_log
llevel
llevel
"    ----------------------------------------\n"
ldmsd_log(llevel, "    Metrics (empty == All)\n");
ldmsd_log(llevel, "    Metrics (empty == All)\n")
ldmsd_log
ldmsd_log
llevel
llevel
"    Metrics (empty == All)\n"
ldmsd_log(llevel, "    %s\n", "Name");
ldmsd_log(llevel, "    %s\n", "Name")
ldmsd_log
ldmsd_log
llevel
llevel
"    %s\n"
"Name"
ldmsd_log(llevel, "    ----------------------------------------\n");
ldmsd_log(llevel, "    ----------------------------------------\n")
ldmsd_log
ldmsd_log
llevel
llevel
"    ----------------------------------------\n"
ldmsd_strgp_metric_t metric;
ldmsd_strgp_metric_t metric;
ldmsd_strgp_metric_t
ldmsd_strgp_metric_t
metric
metric
for (metric = ldmsd_strgp_metric_first(strgp); metric;		     metric = ldmsd_strgp_metric_next(metric)) {			ldmsd_log(llevel, "    %s\n", metric->name);		}
metric = ldmsd_strgp_metric_first(strgp);
metric = ldmsd_strgp_metric_first(strgp)
metric
metric
ldmsd_strgp_metric_first(strgp)
ldmsd_strgp_metric_first
ldmsd_strgp_metric_first
strgp
strgp
metric
metric
metric = ldmsd_strgp_metric_next(metric)
metric
metric
ldmsd_strgp_metric_next(metric)
ldmsd_strgp_metric_next
ldmsd_strgp_metric_next
metric
metric
{			ldmsd_log(llevel, "    %s\n", metric->name);		}
ldmsd_log(llevel, "    %s\n", metric->name);
ldmsd_log(llevel, "    %s\n", metric->name)
ldmsd_log
ldmsd_log
llevel
llevel
"    %s\n"
metric->name
metric
metric
name
ldmsd_log(llevel, "    ----------------------------------------\n");
ldmsd_log(llevel, "    ----------------------------------------\n")
ldmsd_log
ldmsd_log
llevel
llevel
"    ----------------------------------------\n"
ldmsd_strgp_unlock(strgp);
ldmsd_strgp_unlock(strgp)
ldmsd_strgp_unlock
ldmsd_strgp_unlock
strgp
strgp
ldmsd_log(llevel, "--------------- --------------- --------------- --------------- ---------------\n");
ldmsd_log(llevel, "--------------- --------------- --------------- --------------- ---------------\n")
ldmsd_log
ldmsd_log
llevel
llevel
"--------------- --------------- --------------- --------------- ---------------\n"
ldmsd_cfg_unlock(LDMSD_CFGOBJ_STRGP);
ldmsd_cfg_unlock(LDMSD_CFGOBJ_STRGP)
ldmsd_cfg_unlock
ldmsd_cfg_unlock
LDMSD_CFGOBJ_STRGP
LDMSD_CFGOBJ_STRGP
-----joern-----
(107,33,0)
(111,75,0)
(106,105,0)
(113,114,0)
(73,44,0)
(128,100,0)
(7,13,0)
(60,68,0)
(114,113,0)
(61,43,0)
(1,111,0)
(113,43,0)
(53,25,0)
(70,13,0)
(116,111,0)
(105,47,0)
(93,114,0)
(55,13,0)
(126,72,0)
(38,14,0)
(120,60,0)
(52,15,0)
(125,44,0)
(114,121,0)
(102,13,0)
(60,13,0)
(8,47,0)
(25,13,0)
(16,57,0)
(94,47,0)
(56,43,0)
(17,23,0)
(95,109,0)
(11,96,0)
(22,97,0)
(14,63,0)
(91,72,0)
(122,63,0)
(46,94,0)
(82,105,0)
(118,15,0)
(19,15,0)
(114,47,0)
(81,68,0)
(22,86,0)
(97,75,0)
(63,5,0)
(32,78,0)
(45,102,0)
(87,15,0)
(31,113,0)
(24,102,0)
(25,95,0)
(68,63,0)
(112,102,0)
(99,89,0)
(69,85,0)
(6,96,0)
(117,21,0)
(60,124,0)
(26,61,0)
(113,85,0)
(30,78,0)
(5,63,0)
(104,15,0)
(96,47,0)
(25,63,0)
(100,21,0)
(70,47,0)
(44,60,0)
(72,47,0)
(88,114,0)
(59,94,0)
(49,13,0)
(5,95,0)
(105,21,0)
(58,49,0)
(65,75,0)
(23,75,0)
(78,47,0)
(124,122,0)
(49,47,0)
(41,21,0)
(102,47,0)
(37,117,0)
(20,70,0)
(60,47,0)
(60,38,0)
(72,13,0)
(8,13,0)
(60,57,0)
(33,47,0)
(56,85,0)
(108,100,0)
(28,21,0)
(57,95,0)
(77,95,0)
(89,47,0)
(33,13,0)
(92,68,0)
(98,56,0)
(27,113,0)
(101,122,0)
(0,5,0)
(50,97,0)
(39,14,0)
(75,23,0)
(61,63,0)
(94,13,0)
(61,95,0)
(103,15,0)
(119,89,0)
(96,21,0)
(44,95,0)
(97,116,0)
(2,97,0)
(43,61,0)
(76,49,0)
(68,95,0)
(77,63,0)
(122,124,0)
(79,124,0)
(40,21,0)
(68,60,0)
(48,60,0)
(123,22,0)
(23,63,0)
(14,38,0)
(117,47,0)
(85,56,0)
(42,8,0)
(15,21,0)
(127,33,0)
(60,44,0)
(78,13,0)
(18,43,0)
(3,13,0)
(15,47,0)
(77,13,0)
(57,63,0)
(51,15,0)
(22,47,0)
(84,40,0)
(9,14,0)
(97,22,0)
(14,95,0)
(67,13,0)
(122,95,0)
(57,60,0)
(74,70,0)
(109,95,0)
(10,21,0)
(111,116,0)
(38,60,0)
(23,95,0)
(124,60,0)
(89,21,0)
(71,22,0)
(64,63,0)
(54,100,0)
(115,8,0)
(83,117,0)
(29,57,0)
(36,77,0)
(34,28,0)
(62,122,0)
(4,78,0)
(35,95,0)
(90,116,0)
(100,47,0)
(44,63,0)
(53,60,1)
(84,96,1)
(73,124,1)
(39,57,1)
(11,110,1)
(81,44,1)
(49,47,1)
(127,107,1)
(83,37,1)
(34,89,1)
(79,122,1)
(58,25,1)
(54,105,1)
(17,65,1)
(23,95,1)
(23,63,1)
(15,47,1)
(57,95,1)
(32,4,1)
(112,24,1)
(94,59,1)
(18,8,1)
(44,125,1)
(15,51,1)
(124,79,1)
(89,99,1)
(123,80,1)
(14,63,1)
(48,120,1)
(95,109,1)
(69,114,1)
(44,63,1)
(4,49,1)
(99,119,1)
(74,20,1)
(126,78,1)
(66,85,1)
(88,66,1)
(25,63,1)
(117,47,1)
(92,81,1)
(44,95,1)
(93,88,1)
(8,47,1)
(97,116,1)
(101,48,1)
(61,95,1)
(25,95,1)
(77,95,1)
(90,22,1)
(117,83,1)
(23,17,1)
(110,95,1)
(96,47,1)
(104,52,1)
(115,102,1)
(72,91,1)
(103,87,1)
(26,18,1)
(89,47,1)
(56,43,1)
(0,64,1)
(110,63,1)
(100,47,1)
(113,85,1)
(60,47,1)
(80,75,1)
(56,98,1)
(96,6,1)
(61,26,1)
(2,71,1)
(28,34,1)
(43,61,1)
(97,50,1)
(5,63,1)
(36,94,1)
(45,112,1)
(38,14,1)
(33,47,1)
(52,118,1)
(72,47,1)
(78,30,1)
(111,75,1)
(114,113,1)
(63,5,1)
(85,56,1)
(107,70,1)
(108,54,1)
(113,43,1)
(76,58,1)
(120,110,1)
(128,108,1)
(1,90,1)
(124,122,1)
(5,95,1)
(98,69,1)
(8,42,1)
(102,45,1)
(42,115,1)
(9,39,1)
(14,95,1)
(105,106,1)
(6,11,1)
(97,75,1)
(33,127,1)
(60,68,1)
(51,103,1)
(29,16,1)
(30,32,1)
(60,44,1)
(80,116,1)
(68,63,1)
(68,92,1)
(109,35,1)
(77,63,1)
(114,47,1)
(12,40,1)
(122,63,1)
(24,33,1)
(60,38,1)
(91,126,1)
(16,68,1)
(82,117,1)
(22,47,1)
(5,0,1)
(57,29,1)
(66,43,1)
(122,62,1)
(60,57,1)
(50,2,1)
(40,84,1)
(64,77,1)
(25,53,1)
(78,47,1)
(105,47,1)
(122,95,1)
(111,116,1)
(70,74,1)
(125,73,1)
(118,100,1)
(22,97,1)
(106,82,1)
(75,23,1)
(111,1,1)
(46,66,1)
(56,85,1)
(65,72,1)
(62,101,1)
(59,46,1)
(100,128,1)
(70,47,1)
(102,47,1)
(61,63,1)
(60,124,1)
(77,36,1)
(87,19,1)
(35,28,1)
(119,15,1)
(19,104,1)
(20,80,1)
(31,93,1)
(27,31,1)
(71,123,1)
(49,76,1)
(94,47,1)
(57,63,1)
(116,111,1)
(14,9,1)
(113,27,1)
(68,95,1)
(101,110,2)
(77,63,2)
(70,47,2)
(96,47,2)
(61,63,2)
(111,116,2)
(78,47,2)
(124,122,2)
(43,61,2)
(49,110,2)
(125,110,2)
(43,110,2)
(91,110,2)
(14,95,2)
(20,110,2)
(115,110,2)
(122,110,2)
(88,66,2)
(22,80,2)
(98,66,2)
(66,66,2)
(81,110,2)
(60,38,2)
(31,66,2)
(102,47,2)
(124,110,2)
(93,66,2)
(60,57,2)
(62,110,2)
(57,95,2)
(113,66,2)
(25,95,2)
(71,80,2)
(126,110,2)
(59,110,2)
(107,110,2)
(65,110,2)
(114,47,2)
(113,43,2)
(33,110,2)
(116,111,2)
(61,110,2)
(50,80,2)
(18,110,2)
(29,110,2)
(61,95,2)
(32,110,2)
(4,110,2)
(78,110,2)
(22,97,2)
(56,43,2)
(14,63,2)
(79,110,2)
(58,110,2)
(80,110,2)
(100,47,2)
(17,110,2)
(90,80,2)
(122,95,2)
(60,47,2)
(23,95,2)
(114,66,2)
(22,47,2)
(25,63,2)
(127,110,2)
(77,95,2)
(92,110,2)
(112,110,2)
(57,63,2)
(76,110,2)
(85,66,2)
(0,110,2)
(114,113,2)
(60,44,2)
(5,110,2)
(1,80,2)
(95,109,2)
(44,95,2)
(113,85,2)
(33,47,2)
(25,110,2)
(38,110,2)
(46,110,2)
(44,110,2)
(80,80,2)
(105,47,2)
(49,47,2)
(68,63,2)
(57,110,2)
(30,110,2)
(97,116,2)
(63,5,2)
(110,110,2)
(38,14,2)
(24,110,2)
(5,63,2)
(116,80,2)
(23,110,2)
(69,66,2)
(68,95,2)
(72,47,2)
(111,75,2)
(60,110,2)
(5,95,2)
(9,110,2)
(122,63,2)
(8,47,2)
(53,110,2)
(56,66,2)
(97,75,2)
(94,47,2)
(44,63,2)
(39,110,2)
(94,110,2)
(15,47,2)
(120,110,2)
(56,85,2)
(36,110,2)
(117,47,2)
(72,110,2)
(23,63,2)
(14,110,2)
(45,110,2)
(89,47,2)
(60,68,2)
(48,110,2)
(75,110,2)
(111,80,2)
(26,110,2)
(66,110,2)
(74,110,2)
(75,23,2)
(102,110,2)
(16,110,2)
(60,124,2)
(85,56,2)
(64,110,2)
(42,110,2)
(8,110,2)
(63,110,2)
(123,80,2)
(73,110,2)
(97,80,2)
(2,80,2)
(27,66,2)
(77,110,2)
(70,110,2)
(68,110,2)
-----------------------------------
(0,strgp)
(1,match)
(2,match)
(3,for (metric = ldmsd_strgp_metric_first(strgp)
(4,llevel)
(5,ldmsd_strgp_next(strgp)
(6,"--------------- --------------- --------------- --------------- ---------------\\n")
(7,match)
(8,ldmsd_log(llevel, "    ----------------------------------------\\n")
(9,state)
(10,for (strgp = ldmsd_strgp_first()
(11,llevel)
(12,RET)
(13,)
(14,strgp->state)
(15,ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\\n",\n\\n\\t\\t "Name", "Container", "Schema", "Back End", "State")
(16,strgp)
(17,strgp)
(18,metric)
(19,"Container")
(20,llevel)
(21,)
(22,ldmsd_log(llevel, "    %s\\n", match->regex_str)
(23,ldmsd_strgp_prdcr_first(strgp)
(24,llevel)
(25,ldmsd_strgp_lock(strgp)
(26,strgp)
(27,name)
(28,ldmsd_cfg_lock(LDMSD_CFGOBJ_STRGP)
(29,plugin_name)
(30,"Name")
(31,metric)
(32,"    %s\\n")
(33,ldmsd_log(llevel, "    Metrics (empty == All)
(34,LDMSD_CFGOBJ_STRGP)
(35,strgp)
(36,strgp)
(37,llevel)
(38,ldmsd_strgp_state_str(strgp->state)
(39,strgp)
(40,ldmsd_cfg_unlock(LDMSD_CFGOBJ_STRGP)
(41,strgp)
(42,"    ----------------------------------------\\n")
(43,metric = ldmsd_strgp_metric_first(strgp)
(44,strgp->container)
(45,"Name")
(46,llevel)
(47,enum ldmsd_loglevel llevel)
(48,"%-15s %-15s %-15s %-15s %-8s\\n")
(49,ldmsd_log(llevel, "    Producer Match Specifications (empty == All)
(50,regex_str)
(51,"State")
(52,"%-15s %-15s %-15s %-15s %-8s\\n")
(53,strgp)
(54,llevel)
(55,for (match = ldmsd_strgp_prdcr_first(strgp)
(56,ldmsd_strgp_metric_next(metric)
(57,strgp->plugin_name)
(58,llevel)
(59,"    ----------------------------------------\\n")
(60,ldmsd_log(llevel, "%-15s %-15s %-15s %-15s %-8s\\n",\n\\n\\t\\t\\t strgp->obj.name,\n\\n\\t\\t\\t strgp->container, strgp->schema, strgp->plugin_name,\n\\n\\t\\t\\t ldmsd_strgp_state_str(strgp->state)
(61,ldmsd_strgp_metric_first(strgp)
(62,obj)
(63,strgp = ldmsd_strgp_next(strgp)
(64,strgp)
(65,match)
(66,metric)
(67,metric)
(68,strgp->schema)
(69,metric)
(70,ldmsd_log(llevel, "    ----------------------------------------\\n")
(71,"    %s\\n")
(72,ldmsd_log(llevel, "    ----------------------------------------\\n")
(73,strgp)
(74,"    ----------------------------------------\\n")
(75,match = ldmsd_strgp_prdcr_first(strgp)
(76,"    Producer Match Specifications (empty == All)
(77,ldmsd_strgp_unlock(strgp)
(78,ldmsd_log(llevel, "    %s\\n", "Name")
(79,name)
(80,match)
(81,strgp)
(82,llevel)
(83,"\\n")
(84,LDMSD_CFGOBJ_STRGP)
(85,metric = ldmsd_strgp_metric_next(metric)
(86,)
(87,"Schema")
(88,llevel)
(89,ldmsd_log(llevel, "--------------- --------------- --------------- --------------- -------- ------------\\n")
(90,match)
(91,"    ----------------------------------------\\n")
(92,schema)
(93,"    %s\\n")
(94,ldmsd_log(llevel, "    ----------------------------------------\\n")
(95,strgp = ldmsd_strgp_first()
(96,ldmsd_log(llevel, "--------------- --------------- --------------- --------------- ---------------\\n")
(97,match->regex_str)
(98,metric)
(99,"--------------- --------------- --------------- --------------- -------- ------------\\n")
(100,ldmsd_log(llevel, "%s\\n", "Storage Policies")
(101,strgp)
(102,ldmsd_log(llevel, "    %s\\n", "Name")
(103,"Back End")
(104,"Name")
(105,ldmsd_log(llevel, "========================================================================\\n")
(106,"========================================================================\\n")
(107,llevel)
(108,"%s\\n")
(109,ldmsd_strgp_first()
(110,strgp)
(111,ldmsd_strgp_prdcr_next(match)
(112,"    %s\\n")
(113,metric->name)
(114,ldmsd_log(llevel, "    %s\\n", metric->name)
(115,llevel)
(116,match = ldmsd_strgp_prdcr_next(match)
(117,ldmsd_log(llevel, "\\n")
(118,llevel)
(119,llevel)
(120,llevel)
(121,)
(122,strgp->obj)
(123,llevel)
(124,strgp->obj.name)
(125,container)
(126,llevel)
(127,"    Metrics (empty == All)
(128,"Storage Policies")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^