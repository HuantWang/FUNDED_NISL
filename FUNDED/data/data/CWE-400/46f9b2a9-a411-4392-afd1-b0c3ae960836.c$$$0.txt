-----label-----
1
-----code-----
uint32_t sftp_msg_write_mpint(unsigned char **buf, uint32_t *buflen,
    const BIGNUM *mpint) {
  unsigned char *data = NULL;
  size_t datalen = 0;
  int res = 0;
  uint32_t len = 0;

  if (BN_is_zero(mpint)) {
    return sftp_msg_write_int(buf, buflen, 0);
  }

  if (mpint->neg) {
    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,
      "message format error: unable to write mpint (negative numbers not "
      "supported)");
    log_stacktrace();
    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);
  }

  datalen = BN_num_bytes(mpint) + 1;

  if (*buflen < datalen) {
    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,
      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",
      (unsigned long) datalen, (unsigned long) *buflen);
    log_stacktrace();
    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);
  }

  data = malloc(datalen);
  if (data == NULL) {
    pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");
    _exit(1);
  }

  data[0] = 0;

  res = BN_bn2bin(mpint, data + 1);
  if (res < 0 ||
      res != (datalen - 1)) {
    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,
      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",
      (unsigned long) (datalen - 1), res);
    pr_memscrub(data, datalen);
    free(data);

    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);

    /* Needed to avoid compiler (and static code analysis) complaints. */
    return 0;
  }

  if (data[1] & 0x80) {
    len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE);

  } else {
    len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,
      TRUE);
  }

  pr_memscrub(data, datalen);
  free(data);

  return len;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
8,9
8,10
8,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
24,38
24,39
24,40
24,41
25,26
26,27
26,28
28,29
28,30
28,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
65,68
65,69
66,67
68,69
70,71
73,74
73,75
74,75
74,76
75,76
78,79
78,80
78,81
79,80
80,81
80,82
81,82
81,83
84,85
84,86
84,87
84,88
85,86
87,88
89,90
92,93
93,94
94,95
96,97
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
108,110
109,110
109,111
110,111
112,113
115,116
115,117
116,117
116,118
117,118
118,119
120,121
122,123
122,124
122,125
123,124
124,125
124,126
125,126
125,127
128,129
128,130
128,131
128,132
128,133
128,134
129,130
131,132
133,134
136,137
136,138
137,138
137,139
140,141
142,143
142,144
143,144
143,145
146,147
147,148
149,150
150,151
151,152
153,154
154,155
154,156
154,157
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
166,167
168,169
170,171
170,172
171,172
171,173
172,173
174,175
176,177
176,178
177,178
178,179
179,180
179,181
180,181
183,184
184,185
184,186
185,186
185,187
186,187
190,191
191,192
191,193
192,193
194,195
194,196
194,197
195,196
197,198
199,200
199,201
200,201
203,204
203,205
204,205
204,206
205,206
205,207
206,207
209,210
209,211
210,211
212,213
213,214
213,215
214,215
217,218
217,219
217,220
217,221
217,222
218,219
219,220
219,221
220,221
220,222
223,224
223,225
223,226
223,227
223,228
223,229
224,225
226,227
228,229
231,232
231,233
232,233
232,234
235,236
236,237
236,238
237,238
240,241
242,243
243,244
243,245
243,246
244,245
246,247
248,249
250,251
251,252
251,253
252,253
254,255
256,257
257,258
257,259
257,260
258,259
260,261
262,263
264,265
266,267
266,268
266,269
267,268
267,269
268,269
268,270
269,270
273,274
274,275
275,276
275,277
276,277
278,279
278,280
278,281
278,282
278,283
278,284
279,280
281,282
283,284
285,286
287,288
289,290
291,292
292,293
293,294
293,295
294,295
296,297
296,298
296,299
296,300
296,301
296,302
297,298
299,300
301,302
303,304
303,305
304,305
307,308
307,309
308,309
311,312
313,314
314,315
314,316
314,317
315,316
317,318
319,320
321,322
322,323
322,324
323,324
325,326
327,328
328,329
-----nextToken-----
3,5,7,9,10,11,14,16,17,20,22,23,27,29,30,33,37,39,41,44,46,48,52,54,56,60,62,67,69,71,72,76,77,82,83,86,88,90,91,95,99,101,103,107,111,113,114,119,121,126,127,130,132,134,135,138,139,141,144,145,148,152,156,158,160,164,167,169,173,175,181,182,187,188,189,193,196,198,201,202,207,208,211,215,216,221,222,225,227,229,230,233,234,238,239,241,245,247,249,253,255,259,261,263,265,270,271,272,277,280,282,284,286,288,290,295,298,300,302,305,306,309,310,312,316,318,320,324,326,329
-----computeFrom-----
105,106
105,107
108,109
108,110
116,117
116,118
162,163
162,164
171,172
171,173
184,185
184,186
191,192
191,193
199,200
199,201
204,205
204,206
205,206
205,207
209,210
209,211
213,214
213,215
236,237
236,238
267,268
267,269
275,276
275,277
293,294
293,295
303,304
303,305
307,308
307,309
-----guardedBy-----
119,148
121,141
211,241
215,249
270,286
-----guardedByNegation-----
270,305
-----lastLexicalUse-----
270,305
-----jump-----
270,305
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
uint32_t sftp_msg_write_mpint(unsigned char **buf, uint32_t *buflen,    const BIGNUM *mpint) {  unsigned char *data = NULL;  size_t datalen = 0;  int res = 0;  uint32_t len = 0;  if (BN_is_zero(mpint)) {    return sftp_msg_write_int(buf, buflen, 0);  }  if (mpint->neg) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)");    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }  datalen = BN_num_bytes(mpint) + 1;  if (*buflen < datalen) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen);    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }  data = malloc(datalen);  if (data == NULL) {    pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }  data[0] = 0;  res = BN_bn2bin(mpint, data + 1);  if (res < 0 ||      res != (datalen - 1)) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res);    pr_memscrub(data, datalen);    free(data);    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);    /* Needed to avoid compiler (and static code analysis) complaints. */    return 0;  }  if (data[1] & 0x80) {    len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE);  } else {    len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE);  }  pr_memscrub(data, datalen);  free(data);  return len;}
uint32_t
uint32_t
sftp_msg_write_mpint(unsigned char **buf, uint32_t *buflen,    const BIGNUM *mpint)
sftp_msg_write_mpint
unsigned char **buf
unsigned char
**buf
*
*
buf
uint32_t *buflen
uint32_t
uint32_t
*buflen
*
buflen
const BIGNUM *mpint
const BIGNUM
BIGNUM
*mpint
*
mpint
{  unsigned char *data = NULL;  size_t datalen = 0;  int res = 0;  uint32_t len = 0;  if (BN_is_zero(mpint)) {    return sftp_msg_write_int(buf, buflen, 0);  }  if (mpint->neg) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)");    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }  datalen = BN_num_bytes(mpint) + 1;  if (*buflen < datalen) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen);    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }  data = malloc(datalen);  if (data == NULL) {    pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }  data[0] = 0;  res = BN_bn2bin(mpint, data + 1);  if (res < 0 ||      res != (datalen - 1)) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res);    pr_memscrub(data, datalen);    free(data);    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);    /* Needed to avoid compiler (and static code analysis) complaints. */    return 0;  }  if (data[1] & 0x80) {    len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE);  } else {    len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE);  }  pr_memscrub(data, datalen);  free(data);  return len;}
unsigned char *data = NULL;
unsigned char *data = NULL;
unsigned char
*data = NULL
*
data
= NULL
NULL
NULL
size_t datalen = 0;
size_t datalen = 0;
size_t
size_t
datalen = 0
datalen
= 0
0
int res = 0;
int res = 0;
int
res = 0
res
= 0
0
uint32_t len = 0;
uint32_t len = 0;
uint32_t
uint32_t
len = 0
len
= 0
0
if (BN_is_zero(mpint)) {    return sftp_msg_write_int(buf, buflen, 0);  }
BN_is_zero(mpint)
BN_is_zero
BN_is_zero
mpint
mpint
{    return sftp_msg_write_int(buf, buflen, 0);  }
return sftp_msg_write_int(buf, buflen, 0);
sftp_msg_write_int(buf, buflen, 0)
sftp_msg_write_int
sftp_msg_write_int
buf
buf
buflen
buflen
0
if (mpint->neg) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)");    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }
mpint->neg
mpint
mpint
neg
{    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)");    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)");
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)")
void
void

pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write mpint (negative numbers not "      "supported)")
pr_log_writefile
pr_log_writefile
sftp_logfd
sftp_logfd
MOD_SFTP_VERSION
MOD_SFTP_VERSION
"message format error: unable to write mpint (negative numbers not "      "supported)"
log_stacktrace();
log_stacktrace()
log_stacktrace
log_stacktrace
SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);
SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL)
SFTP_DISCONNECT_CONN
SFTP_DISCONNECT_CONN
SFTP_SSH2_DISCONNECT_BY_APPLICATION
SFTP_SSH2_DISCONNECT_BY_APPLICATION
NULL
NULL
datalen = BN_num_bytes(mpint) + 1;
datalen = BN_num_bytes(mpint) + 1
datalen
datalen
BN_num_bytes(mpint) + 1
BN_num_bytes(mpint)
BN_num_bytes
BN_num_bytes
mpint
mpint
1
if (*buflen < datalen) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen);    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }
*buflen < datalen
*buflen
buflen
buflen
datalen
datalen
{    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen);    log_stacktrace();    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);  }
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen);
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen)
void
void

pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: unable to write %lu bytes of mpint (buflen = %lu)",      (unsigned long) datalen, (unsigned long) *buflen)
pr_log_writefile
pr_log_writefile
sftp_logfd
sftp_logfd
MOD_SFTP_VERSION
MOD_SFTP_VERSION
"message format error: unable to write %lu bytes of mpint (buflen = %lu)"
(unsigned long) datalen
unsigned long
unsigned long

datalen
datalen
(unsigned long) *buflen
unsigned long
unsigned long

*buflen
buflen
buflen
log_stacktrace();
log_stacktrace()
log_stacktrace
log_stacktrace
SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);
SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL)
SFTP_DISCONNECT_CONN
SFTP_DISCONNECT_CONN
SFTP_SSH2_DISCONNECT_BY_APPLICATION
SFTP_SSH2_DISCONNECT_BY_APPLICATION
NULL
NULL
data = malloc(datalen);
data = malloc(datalen)
data
data
malloc(datalen)
malloc
malloc
datalen
datalen
if (data == NULL) {    pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }
data == NULL
data
data
NULL
NULL
{    pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");    _exit(1);  }
pr_log_pri(PR_LOG_ALERT, MOD_SFTP_VERSION ": Out of memory!");
_exit(1);
_exit(1)
_exit
_exit
1
data[0] = 0;
data[0] = 0
data[0]
data
data
0
0
res = BN_bn2bin(mpint, data + 1);
res = BN_bn2bin(mpint, data + 1)
res
res
BN_bn2bin(mpint, data + 1)
BN_bn2bin
BN_bn2bin
mpint
mpint
data + 1
data
data
1
if (res < 0 ||      res != (datalen - 1)) {    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res);    pr_memscrub(data, datalen);    free(data);    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);    /* Needed to avoid compiler (and static code analysis) complaints. */    return 0;  }
res < 0 ||      res != (datalen - 1)
res < 0
res
res
0
res != (datalen - 1)
res
res
(datalen - 1)
datalen - 1
datalen
datalen
1
{    (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res);    pr_memscrub(data, datalen);    free(data);    SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);    /* Needed to avoid compiler (and static code analysis) complaints. */    return 0;  }
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res);
(void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res)
void
void

pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,      "message format error: BN_bn2bin() failed: expected %lu bytes, got %d",      (unsigned long) (datalen - 1), res)
pr_log_writefile
pr_log_writefile
sftp_logfd
sftp_logfd
MOD_SFTP_VERSION
MOD_SFTP_VERSION
"message format error: BN_bn2bin() failed: expected %lu bytes, got %d"
(unsigned long) (datalen - 1)
unsigned long
unsigned long

(datalen - 1)
datalen - 1
datalen
datalen
1
res
res
pr_memscrub(data, datalen);
pr_memscrub(data, datalen)
pr_memscrub
pr_memscrub
data
data
datalen
datalen
free(data);
free(data)
free
free
data
data
SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL);
SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL)
SFTP_DISCONNECT_CONN
SFTP_DISCONNECT_CONN
SFTP_SSH2_DISCONNECT_BY_APPLICATION
SFTP_SSH2_DISCONNECT_BY_APPLICATION
NULL
NULL
return 0;
0
if (data[1] & 0x80) {    len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE);  } else {    len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE);  }
data[1] & 0x80
data[1]
data
data
1
0x80
{    len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE);  }
len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE);
len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE)
len
len
sftp_msg_write_data(buf, buflen, data, datalen, TRUE)
sftp_msg_write_data
sftp_msg_write_data
buf
buf
buflen
buflen
data
data
datalen
datalen
TRUE
TRUE
{    len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE);  }
len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE);
len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE)
len
len
sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,      TRUE)
sftp_msg_write_data
sftp_msg_write_data
buf
buf
buflen
buflen
data + 1
data
data
1
datalen - 1
datalen
datalen
1
TRUE
TRUE
pr_memscrub(data, datalen);
pr_memscrub(data, datalen)
pr_memscrub
pr_memscrub
data
data
datalen
datalen
free(data);
free(data)
free
free
data
data
return len;
len
len
-----joern-----
(32,70,0)
(141,0,0)
(51,97,0)
(140,153,0)
(1,86,0)
(33,129,0)
(154,70,0)
(0,16,0)
(126,0,0)
(4,153,0)
(16,0,0)
(43,86,0)
(41,89,0)
(20,79,0)
(48,66,0)
(91,71,0)
(50,153,0)
(40,86,0)
(10,146,0)
(143,107,0)
(110,86,0)
(106,160,0)
(87,137,0)
(27,107,0)
(58,137,0)
(101,88,0)
(34,3,0)
(36,107,0)
(79,71,0)
(39,150,0)
(94,99,0)
(161,3,0)
(117,153,0)
(85,93,0)
(47,36,0)
(71,153,0)
(137,87,0)
(38,132,0)
(155,28,0)
(138,27,0)
(97,3,0)
(97,28,0)
(6,25,0)
(29,43,0)
(17,156,0)
(105,71,0)
(144,110,0)
(49,92,0)
(45,99,0)
(77,37,0)
(43,71,0)
(97,57,0)
(66,18,0)
(0,137,0)
(23,1,0)
(68,85,0)
(101,111,0)
(60,31,0)
(129,9,0)
(76,156,0)
(109,31,0)
(18,66,0)
(71,43,0)
(0,38,0)
(35,11,0)
(87,79,0)
(111,93,0)
(151,71,0)
(13,79,0)
(118,105,0)
(89,93,0)
(95,105,0)
(16,40,0)
(60,122,0)
(73,136,0)
(122,60,0)
(114,60,0)
(64,160,0)
(111,105,0)
(3,86,0)
(75,45,0)
(11,153,0)
(83,153,0)
(112,72,0)
(135,122,0)
(108,106,0)
(3,9,0)
(142,3,0)
(86,153,0)
(88,153,0)
(90,110,0)
(37,137,0)
(115,22,0)
(158,145,0)
(74,60,0)
(60,9,0)
(44,104,0)
(19,86,0)
(27,138,0)
(37,1,0)
(88,114,0)
(147,3,0)
(27,156,0)
(40,16,0)
(136,86,0)
(86,45,0)
(36,86,0)
(28,153,0)
(128,14,0)
(149,160,0)
(92,71,0)
(124,28,0)
(3,71,0)
(60,25,0)
(114,28,0)
(110,144,0)
(60,114,0)
(70,153,0)
(52,102,0)
(16,163,0)
(101,115,0)
(102,146,0)
(137,153,0)
(145,72,0)
(119,107,0)
(30,66,0)
(65,153,0)
(129,31,0)
(69,40,0)
(45,86,0)
(146,71,0)
(88,97,0)
(139,107,0)
(164,160,0)
(105,65,0)
(2,104,0)
(100,11,0)
(159,96,0)
(66,137,0)
(96,159,0)
(131,153,0)
(106,108,0)
(63,114,0)
(103,151,0)
(36,148,0)
(24,122,0)
(87,72,0)
(18,37,0)
(46,4,0)
(79,87,0)
(84,145,0)
(146,102,0)
(25,86,0)
(62,3,0)
(80,1,0)
(92,153,0)
(113,112,0)
(98,0,0)
(21,151,0)
(130,0,0)
(152,153,0)
(5,17,0)
(96,109,0)
(1,37,0)
(89,71,0)
(56,85,0)
(134,65,0)
(78,14,0)
(133,109,0)
(136,93,0)
(8,146,0)
(125,40,0)
(144,31,0)
(26,153,0)
(82,60,0)
(148,36,0)
(7,136,0)
(121,129,0)
(107,36,0)
(160,106,0)
(38,0,0)
(163,16,0)
(38,93,0)
(127,25,0)
(104,71,0)
(99,45,0)
(3,97,0)
(12,60,0)
(53,111,0)
(15,128,0)
(59,128,0)
(25,60,0)
(54,153,0)
(129,115,0)
(99,72,0)
(107,27,0)
(37,18,0)
(67,88,0)
(104,86,0)
(104,153,0)
(116,153,0)
(61,87,0)
(81,129,0)
(123,4,0)
(109,96,0)
(150,55,0)
(120,153,0)
(3,31,0)
(157,144,0)
(136,71,0)
(114,162,0)
(132,38,0)
(107,96,0)
(122,71,0)
(96,107,0)
(106,14,0)
(42,17,0)
(32,154,1)
(40,86,1)
(114,60,1)
(164,64,1)
(90,144,1)
(151,71,1)
(87,79,1)
(158,84,1)
(91,17,1)
(74,82,1)
(135,24,1)
(3,147,1)
(84,112,1)
(106,160,1)
(25,86,1)
(94,19,1)
(18,66,1)
(81,33,1)
(42,76,1)
(49,104,1)
(82,63,1)
(145,158,1)
(18,37,1)
(97,3,1)
(126,98,1)
(27,138,1)
(79,20,1)
(128,15,1)
(96,159,1)
(66,137,1)
(34,161,1)
(97,28,1)
(130,16,1)
(86,45,1)
(60,122,1)
(12,25,1)
(110,144,1)
(60,9,1)
(91,110,1)
(66,30,1)
(21,103,1)
(56,68,1)
(124,4,1)
(89,41,1)
(99,72,1)
(40,69,1)
(0,130,1)
(160,149,1)
(119,139,1)
(7,73,1)
(30,48,1)
(3,71,1)
(45,99,1)
(103,71,1)
(70,32,1)
(122,135,1)
(136,86,1)
(111,53,1)
(101,115,1)
(149,164,1)
(92,71,1)
(104,2,1)
(41,136,1)
(115,129,1)
(53,85,1)
(73,38,1)
(67,92,1)
(129,9,1)
(23,80,1)
(60,31,1)
(39,151,1)
(37,137,1)
(64,145,1)
(17,5,1)
(43,86,1)
(3,31,1)
(129,81,1)
(65,134,1)
(87,72,1)
(142,62,1)
(78,106,1)
(110,86,1)
(36,47,1)
(107,36,1)
(77,66,1)
(88,114,1)
(38,132,1)
(36,86,1)
(123,46,1)
(36,148,1)
(19,128,1)
(137,87,1)
(121,112,1)
(145,72,1)
(133,36,1)
(60,12,1)
(102,52,1)
(109,31,1)
(27,107,1)
(110,90,1)
(44,114,1)
(111,105,1)
(136,7,1)
(134,105,1)
(101,111,1)
(63,102,1)
(58,65,1)
(99,94,1)
(15,59,1)
(125,141,1)
(109,133,1)
(16,163,1)
(141,126,1)
(4,123,1)
(88,97,1)
(43,29,1)
(85,56,1)
(88,67,1)
(20,13,1)
(105,71,1)
(150,39,1)
(48,137,1)
(79,71,1)
(51,102,1)
(0,137,1)
(16,40,1)
(157,86,1)
(76,27,1)
(106,108,1)
(35,100,1)
(24,74,1)
(44,97,1)
(95,151,1)
(13,61,1)
(100,70,1)
(68,89,1)
(113,28,1)
(75,99,1)
(11,35,1)
(105,118,1)
(118,95,1)
(144,31,1)
(147,34,1)
(38,0,1)
(155,124,1)
(139,143,1)
(107,96,1)
(1,86,1)
(33,121,1)
(60,25,1)
(28,155,1)
(98,18,1)
(129,31,1)
(52,146,1)
(112,72,1)
(146,71,1)
(102,146,1)
(80,77,1)
(5,42,1)
(89,71,1)
(29,91,1)
(122,71,1)
(61,58,1)
(10,18,1)
(1,23,1)
(95,150,1)
(104,86,1)
(144,157,1)
(112,113,1)
(45,75,1)
(3,86,1)
(69,125,1)
(0,16,1)
(96,109,1)
(59,78,1)
(161,142,1)
(136,71,1)
(37,1,1)
(114,28,1)
(104,71,1)
(151,21,1)
(19,145,1)
(143,110,1)
(8,10,1)
(92,49,1)
(62,51,1)
(101,88,1)
(6,122,1)
(3,9,1)
(127,6,1)
(46,11,1)
(2,44,1)
(71,43,1)
(25,127,1)
(146,8,1)
(47,119,1)
(86,45,2)
(71,112,2)
(74,102,2)
(119,110,2)
(134,112,2)
(62,102,2)
(12,102,2)
(60,102,2)
(136,18,2)
(111,18,2)
(96,109,2)
(58,112,2)
(161,102,2)
(38,18,2)
(104,71,2)
(88,114,2)
(38,0,2)
(27,110,2)
(121,112,2)
(1,66,2)
(47,110,2)
(48,112,2)
(18,112,2)
(88,18,2)
(24,102,2)
(136,86,2)
(33,112,2)
(1,86,2)
(135,102,2)
(40,18,2)
(106,160,2)
(99,112,2)
(45,99,2)
(43,86,2)
(118,112,2)
(10,18,2)
(107,36,2)
(25,102,2)
(104,18,2)
(60,31,2)
(18,66,2)
(109,31,2)
(89,18,2)
(114,102,2)
(97,28,2)
(69,18,2)
(0,18,2)
(3,31,2)
(158,112,2)
(87,79,2)
(110,144,2)
(36,148,2)
(21,112,2)
(110,112,2)
(40,86,2)
(8,18,2)
(17,110,2)
(75,112,2)
(87,112,2)
(53,18,2)
(115,112,2)
(145,72,2)
(160,145,2)
(102,18,2)
(42,110,2)
(30,112,2)
(112,72,2)
(104,86,2)
(61,112,2)
(84,112,2)
(139,110,2)
(39,151,2)
(3,102,2)
(3,9,2)
(3,86,2)
(99,72,2)
(0,137,2)
(145,112,2)
(66,112,2)
(36,86,2)
(129,9,2)
(130,18,2)
(66,137,2)
(82,102,2)
(96,110,2)
(79,71,2)
(122,71,2)
(60,122,2)
(52,18,2)
(73,18,2)
(36,110,2)
(149,145,2)
(91,112,2)
(147,102,2)
(60,9,2)
(80,66,2)
(137,87,2)
(37,1,2)
(101,88,2)
(103,112,2)
(13,112,2)
(98,18,2)
(128,145,2)
(107,110,2)
(127,102,2)
(110,86,2)
(92,18,2)
(95,112,2)
(141,18,2)
(85,18,2)
(19,112,2)
(129,31,2)
(114,28,2)
(111,105,2)
(68,18,2)
(56,18,2)
(59,145,2)
(157,112,2)
(105,112,2)
(7,18,2)
(64,145,2)
(146,18,2)
(151,71,2)
(0,16,2)
(37,137,2)
(101,115,2)
(90,112,2)
(125,18,2)
(88,97,2)
(129,112,2)
(3,71,2)
(144,31,2)
(92,71,2)
(43,112,2)
(136,71,2)
(44,18,2)
(41,18,2)
(2,18,2)
(16,163,2)
(81,112,2)
(164,145,2)
(29,112,2)
(27,107,2)
(20,112,2)
(67,18,2)
(71,43,2)
(101,111,2)
(97,3,2)
(49,18,2)
(137,112,2)
(146,71,2)
(77,66,2)
(6,102,2)
(144,112,2)
(122,102,2)
(23,66,2)
(109,110,2)
(97,102,2)
(96,159,2)
(151,112,2)
(5,110,2)
(133,110,2)
(78,145,2)
(16,40,2)
(27,138,2)
(106,145,2)
(142,102,2)
(150,151,2)
(45,112,2)
(105,71,2)
(79,112,2)
(16,18,2)
(94,112,2)
(76,110,2)
(102,146,2)
(51,102,2)
(38,132,2)
(107,96,2)
(114,60,2)
(143,110,2)
(37,66,2)
(86,112,2)
(126,18,2)
(89,71,2)
(65,112,2)
(63,102,2)
(106,108,2)
(25,86,2)
(87,72,2)
(15,145,2)
(18,37,2)
(60,25,2)
(34,102,2)
-----------------------------------
(0,pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,\n\\n      "message format error: BN_bn2bin()
(1,datalen - 1)
(2,datalen)
(3,sftp_msg_write_data(buf, buflen, data, datalen, TRUE)
(4,res = 0)
(5,NULL)
(6,datalen)
(7,datalen)
(8,1)
(9,unsigned char **buf)
(10,data)
(11,datalen = 0)
(12,TRUE)
(13,data)
(14,)
(15,NULL)
(16,(unsigned long)
(17,SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL)
(18,res < 0 ||\n\\n      res != (datalen - 1)
(19,datalen)
(20,1)
(21,NULL)
(22,)
(23,1)
(24,data)
(25,datalen - 1)
(26,if (mpint->neg)
(27,(void)
(28,len = 0)
(29,datalen)
(30,0)
(31,uint32_t *buflen)
(32,NULL)
(33,buflen)
(34,datalen)
(35,0)
(36,(unsigned long)
(37,res != (datalen - 1)
(38,(void)
(39,1)
(40,datalen - 1)
(41,data)
(42,SFTP_SSH2_DISCONNECT_BY_APPLICATION)
(43,malloc(datalen)
(44,data)
(45,BN_num_bytes(mpint)
(46,res)
(47,datalen)
(48,res)
(49,data)
(50,if (data == NULL)
(51,len)
(52,0x80)
(53,0)
(54,len)
(55,)
(56,NULL)
(57,)
(58,res)
(59,SFTP_SSH2_DISCONNECT_BY_APPLICATION)
(60,sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,\n\\n      TRUE)
(61,mpint)
(62,buf)
(63,len)
(64,sftp_logfd)
(65,data[0] = 0)
(66,res < 0)
(67,len)
(68,SFTP_SSH2_DISCONNECT_BY_APPLICATION)
(69,1)
(70,*data = NULL)
(71,data = malloc(datalen)
(72,const BIGNUM *mpint)
(73,data)
(74,buflen)
(75,1)
(76,log_stacktrace()
(77,res)
(78,log_stacktrace()
(79,data + 1)
(80,datalen)
(81,0)
(82,buf)
(83,data)
(84,mpint)
(85,SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL)
(86,datalen = BN_num_bytes(mpint)
(87,BN_bn2bin(mpint, data + 1)
(88,return len;)
(89,free(data)
(90,datalen)
(91,data)
(92,free(data)
(93,)
(94,mpint)
(95,data)
(96,(unsigned long)
(97,len += sftp_msg_write_data(buf, buflen, data, datalen, TRUE)
(98,sftp_logfd)
(99,BN_num_bytes(mpint)
(100,datalen)
(101,RET)
(102,data[1] & 0x80)
(103,data)
(104,pr_memscrub(data, datalen)
(105,data[0])
(106,(void)
(107,pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,\n\\n      "message format error: unable to write %lu bytes of mpint (buflen = %lu)
(108,void)
(109,*buflen)
(110,*buflen < datalen)
(111,return 0;)
(112,BN_is_zero(mpint)
(113,mpint)
(114,len += sftp_msg_write_data(buf, buflen, data + 1, datalen - 1,\n\\n      TRUE)
(115,return sftp_msg_write_int(buf, buflen, 0)
(116,datalen)
(117,res)
(118,0)
(119,"message format error: unable to write %lu bytes of mpint (buflen = %lu)
(120,if (res < 0 ||\n\\n      res != (datalen - 1)
(121,buf)
(122,data + 1)
(123,0)
(124,len)
(125,datalen)
(126,MOD_SFTP_VERSION)
(127,1)
(128,SFTP_DISCONNECT_CONN(SFTP_SSH2_DISCONNECT_BY_APPLICATION, NULL)
(129,sftp_msg_write_int(buf, buflen, 0)
(130,res)
(131,if (*buflen < datalen)
(132,void)
(133,buflen)
(134,0)
(135,1)
(136,pr_memscrub(data, datalen)
(137,res = BN_bn2bin(mpint, data + 1)
(138,void)
(139,MOD_SFTP_VERSION)
(140,if (data[1] & 0x80)
(141,"message format error: BN_bn2bin()
(142,buflen)
(143,sftp_logfd)
(144,*buflen)
(145,mpint->neg)
(146,data[1])
(147,TRUE)
(148,unsigned long)
(149,"message format error: unable to write mpint (negative numbers not "\n\\n      "supported)
(150,_exit(1)
(151,data == NULL)
(152,if (BN_is_zero(mpint)
(153,)
(154,data)
(155,0)
(156,)
(157,buflen)
(158,neg)
(159,unsigned long)
(160,pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,\n\\n      "message format error: unable to write mpint (negative numbers not "\n\\n      "supported)
(161,data)
(162,)
(163,unsigned long)
(164,MOD_SFTP_VERSION)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^