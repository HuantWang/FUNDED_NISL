-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
25,26
25,27
27,28
28,29
28,30
29,30
30,31
30,32
32,33
32,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
39,41
40,41
42,43
44,45
44,46
44,47
44,48
44,49
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
57,59
58,59
60,61
61,62
61,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,9,11,15,16,18,23,24,26,31,33,34,38,41,43,48,51,53,56,59,62,63,67,69,74,76,80,82,84,88,90,94,96,101,102
-----computeFrom-----
13,14
13,15
21,22
21,23
36,37
36,38
46,47
46,48
57,58
57,59
65,66
65,67
-----guardedBy-----
43,84
38,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
1
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(47,10,0)
(14,16,0)
(1,26,0)
(3,22,0)
(45,8,0)
(2,43,0)
(25,16,0)
(13,3,0)
(15,21,0)
(11,49,0)
(46,1,0)
(26,37,0)
(24,16,0)
(20,47,0)
(42,34,0)
(31,22,0)
(6,7,0)
(23,22,0)
(26,40,0)
(43,2,0)
(43,25,0)
(8,1,0)
(43,10,0)
(7,12,0)
(0,47,0)
(30,20,0)
(41,16,0)
(39,10,0)
(37,26,0)
(47,20,0)
(47,25,0)
(46,22,0)
(33,43,0)
(26,1,0)
(27,7,0)
(11,34,0)
(10,44,0)
(34,11,0)
(29,46,0)
(5,31,0)
(19,8,0)
(31,1,0)
(4,25,0)
(9,25,0)
(40,26,0)
(28,10,0)
(38,1,0)
(37,47,0)
(1,22,0)
(32,31,0)
(48,2,0)
(47,37,0)
(35,15,0)
(3,1,0)
(8,45,1)
(28,39,1)
(33,36,1)
(26,37,1)
(18,15,1)
(30,0,1)
(1,26,1)
(36,17,1)
(47,25,1)
(19,1,1)
(46,29,1)
(31,1,1)
(46,1,1)
(48,33,1)
(17,25,1)
(31,32,1)
(36,10,1)
(45,19,1)
(38,43,1)
(15,35,1)
(29,31,1)
(42,8,1)
(8,1,1)
(13,46,1)
(10,28,1)
(43,2,1)
(34,42,1)
(35,43,1)
(5,8,1)
(26,40,1)
(5,11,1)
(47,20,1)
(20,30,1)
(43,25,1)
(37,47,1)
(32,5,1)
(25,4,1)
(2,48,1)
(0,38,1)
(4,9,1)
(39,17,1)
(47,10,1)
(18,36,1)
(43,10,1)
(3,1,1)
(3,13,1)
(11,34,1)
(18,3,1)
(0,43,2)
(33,36,2)
(26,43,2)
(3,1,2)
(47,10,2)
(47,20,2)
(43,2,2)
(30,43,2)
(42,8,2)
(43,10,2)
(35,43,2)
(39,17,2)
(29,43,2)
(1,43,2)
(48,36,2)
(19,43,2)
(3,43,2)
(46,1,2)
(10,17,2)
(46,43,2)
(13,43,2)
(47,25,2)
(32,43,2)
(11,34,2)
(28,17,2)
(31,1,2)
(37,43,2)
(43,36,2)
(15,43,2)
(20,43,2)
(37,47,2)
(26,37,2)
(47,43,2)
(8,43,2)
(38,43,2)
(2,36,2)
(26,40,2)
(43,25,2)
(34,8,2)
(45,43,2)
(31,43,2)
(5,43,2)
(8,1,2)
(1,26,2)
(11,8,2)
-----------------------------------
(0,data)
(1,myString = (char *)
(2,strlen(HELLO_STRING)
(3,free(myString)
(4,0)
(5,myString)
(6,if (data > strlen(HELLO_STRING)
(7,)
(8,myString == NULL)
(9,data)
(10,data = 20)
(11,exit(-1)
(12,)
(13,myString)
(14,if(1)
(15,printLine("Input is less than the length of the source string")
(16,)
(17,1)
(18,RET)
(19,myString)
(20,sizeof(char)
(21,)
(22,)
(23,if (myString == NULL)
(24,if(1)
(25,data = 0)
(26,(char *)
(27,myString)
(28,20)
(29,myString)
(30,char)
(31,strcpy(myString, HELLO_STRING)
(32,HELLO_STRING)
(33,data)
(34,-1)
(35,"Input is less than the length of the source string")
(36,1)
(37,malloc(data*sizeof(char)
(38,myString)
(39,data)
(40,char *)
(41,data)
(42,1)
(43,data > strlen(HELLO_STRING)
(44,)
(45,NULL)
(46,printLine(myString)
(47,data*sizeof(char)
(48,HELLO_STRING)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^