-----label-----
0
-----code-----
static void goodG2B1()
{
    int * data;
    data = NULL;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,20,25,26,31,34,36,39,41,44,45,50,51,52,56,59,60,63,65
-----computeFrom-----
13,14
13,15
29,30
29,31
40,41
40,42
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,4,0)
(24,28,0)
(23,16,0)
(9,8,0)
(15,14,0)
(4,14,0)
(28,17,0)
(20,0,0)
(28,24,0)
(21,5,0)
(11,31,0)
(5,15,0)
(10,15,0)
(1,16,0)
(19,8,0)
(28,7,0)
(8,7,0)
(27,0,0)
(8,15,0)
(6,0,0)
(24,1,0)
(1,24,0)
(13,7,0)
(26,31,0)
(7,28,0)
(4,5,0)
(16,1,0)
(25,5,0)
(17,28,0)
(5,7,0)
(31,0,0)
(12,3,0)
(30,1,0)
(7,14,0)
(2,12,0)
(16,23,1)
(28,17,1)
(9,7,1)
(30,13,1)
(31,11,1)
(22,4,1)
(21,15,1)
(29,22,1)
(25,21,1)
(28,24,1)
(8,19,1)
(18,31,1)
(5,7,1)
(15,10,1)
(22,12,1)
(10,8,1)
(12,2,1)
(23,30,1)
(11,26,1)
(8,7,1)
(1,16,1)
(5,25,1)
(2,18,1)
(13,18,1)
(24,1,1)
(19,9,1)
(5,15,1)
(7,28,1)
(4,5,1)
(2,18,2)
(28,18,2)
(28,17,2)
(7,18,2)
(28,24,2)
(15,18,2)
(1,18,2)
(8,7,2)
(4,5,2)
(9,18,2)
(5,18,2)
(24,1,2)
(25,18,2)
(1,16,2)
(7,28,2)
(16,18,2)
(4,18,2)
(5,7,2)
(19,18,2)
(24,18,2)
(10,18,2)
(12,18,2)
(21,18,2)
(13,18,2)
(8,18,2)
(23,18,2)
(5,15,2)
(30,18,2)
-----------------------------------
(0,)
(1,100*sizeof(int)
(2,"Benign, fixed string")
(3,)
(4,printIntLine(data[0])
(5,data[0])
(6,if(staticTrue)
(7,data = (int *)
(8,data[0])
(9,data)
(10,5)
(11,NULL)
(12,printLine("Benign, fixed string")
(13,data)
(14,)
(15,data[0] = 5)
(16,sizeof(int)
(17,int *)
(18,staticFalse)
(19,0)
(20,data)
(21,data)
(22,staticTrue)
(23,int)
(24,ALLOCA(100*sizeof(int)
(25,0)
(26,data)
(27,if(staticFalse)
(28,(int *)
(29,RET)
(30,100)
(31,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^