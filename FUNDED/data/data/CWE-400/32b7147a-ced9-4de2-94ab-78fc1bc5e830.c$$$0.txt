-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
45,47
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
70,71
72,73
73,74
75,76
76,77
77,78
77,79
78,79
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,40,42,44,49,50,53,54,60,61,64,68,69,71,74,79,80
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
46,47
46,48
47,48
47,49
51,52
51,53
58,59
58,60
62,63
62,64
-----guardedBy-----
53,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(29,19,0)
(3,16,0)
(21,16,0)
(16,3,0)
(38,6,0)
(31,22,0)
(17,47,0)
(14,32,0)
(46,28,0)
(16,7,0)
(6,35,0)
(33,32,0)
(34,47,0)
(10,11,0)
(41,19,0)
(39,7,0)
(5,9,0)
(7,0,0)
(27,35,0)
(27,7,0)
(22,13,0)
(37,35,0)
(16,21,0)
(28,27,0)
(30,22,0)
(15,46,0)
(12,22,0)
(28,46,0)
(43,21,0)
(35,11,0)
(0,7,0)
(7,42,0)
(21,19,0)
(2,11,0)
(9,1,0)
(20,44,0)
(4,11,0)
(46,7,0)
(8,16,0)
(24,27,0)
(27,28,0)
(16,35,0)
(26,12,0)
(45,41,0)
(36,12,0)
(35,6,0)
(25,19,0)
(46,35,0)
(23,27,0)
(40,46,0)
(28,46,1)
(21,19,1)
(46,15,1)
(39,32,1)
(25,29,1)
(16,3,1)
(18,47,1)
(7,0,1)
(15,40,1)
(35,6,1)
(26,36,1)
(24,12,1)
(36,47,1)
(47,17,1)
(0,39,1)
(5,21,1)
(16,8,1)
(28,27,1)
(43,41,1)
(45,9,1)
(32,33,1)
(27,7,1)
(17,34,1)
(6,38,1)
(8,43,1)
(27,23,1)
(29,28,1)
(16,35,1)
(34,7,1)
(16,7,1)
(9,5,1)
(38,37,1)
(12,26,1)
(23,24,1)
(40,27,1)
(41,45,1)
(34,32,1)
(18,21,1)
(33,14,1)
(18,28,1)
(46,35,1)
(46,7,1)
(43,19,1)
(14,35,1)
(27,35,1)
(19,25,1)
(41,19,1)
(21,16,1)
(28,46,2)
(40,27,2)
(43,28,2)
(27,35,2)
(16,21,2)
(29,28,2)
(41,21,2)
(36,47,2)
(28,47,2)
(7,0,2)
(21,16,2)
(7,32,2)
(28,27,2)
(12,47,2)
(21,19,2)
(39,32,2)
(46,35,2)
(8,21,2)
(5,21,2)
(27,47,2)
(27,7,2)
(9,21,2)
(23,47,2)
(21,28,2)
(46,27,2)
(35,6,2)
(26,47,2)
(8,28,2)
(16,35,2)
(45,21,2)
(21,21,2)
(16,7,2)
(19,28,2)
(0,32,2)
(46,7,2)
(15,27,2)
(43,21,2)
(16,28,2)
(41,19,2)
(16,3,2)
(24,47,2)
(25,28,2)
-----------------------------------
(0,RAND32()
(1,)
(2,count)
(3,size_t)
(4,if(GLOBAL_CONST_FIVE==5)
(5,"Hello")
(6,-1)
(7,count = RAND32()
(8,count)
(9,printLine("Hello")
(10,if(GLOBAL_CONST_FIVE==5)
(11,)
(12,i = 0)
(13,)
(14,GLOBAL_CONST_FIVE)
(15,20)
(16,(size_t)
(17,5)
(18,RET)
(19,i = 0)
(20,for (i = 0; i < (size_t)
(21,i < (size_t)
(22,)
(23,0)
(24,count)
(25,0)
(26,0)
(27,count > 0)
(28,count > 0 && count <= 20)
(29,i)
(30,if (count > 0 && count <= 20)
(31,i)
(32,GLOBAL_CONST_FIVE==5)
(33,5)
(34,GLOBAL_CONST_FIVE)
(35,count = -1)
(36,i)
(37,count)
(38,1)
(39,count)
(40,count)
(41,i++)
(42,)
(43,i)
(44,)
(45,i)
(46,count <= 20)
(47,GLOBAL_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^