-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_05_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,70,74,75
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_05_bad(){    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_05_bad()
CWE400_Resource_Exhaustion__fgets_sleep_05_bad
{    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(20,19,0)
(19,16,0)
(5,14,0)
(15,14,0)
(29,20,0)
(36,19,0)
(21,32,0)
(0,20,0)
(22,15,0)
(13,24,0)
(18,15,0)
(28,31,0)
(31,28,0)
(1,14,0)
(4,29,0)
(29,32,0)
(32,29,0)
(11,14,0)
(12,27,0)
(22,32,0)
(30,31,0)
(24,17,0)
(3,28,0)
(22,2,0)
(34,31,0)
(31,20,0)
(33,31,0)
(26,22,0)
(15,18,0)
(6,15,0)
(9,18,0)
(32,23,0)
(35,20,0)
(8,19,0)
(27,2,0)
(25,7,1)
(28,3,1)
(15,18,1)
(30,20,1)
(7,24,1)
(0,10,1)
(4,21,1)
(34,30,1)
(27,12,1)
(25,27,1)
(18,9,1)
(12,22,1)
(20,35,1)
(21,28,1)
(26,7,1)
(13,28,1)
(29,4,1)
(7,32,1)
(32,29,1)
(29,20,1)
(22,26,1)
(3,31,1)
(31,33,1)
(9,6,1)
(10,15,1)
(31,20,1)
(22,32,1)
(35,0,1)
(7,10,1)
(33,34,1)
(28,31,1)
(24,13,1)
(22,15,1)
(32,29,2)
(3,10,2)
(22,15,2)
(13,28,2)
(28,10,2)
(27,7,2)
(22,7,2)
(33,10,2)
(4,28,2)
(15,18,2)
(30,10,2)
(32,28,2)
(35,10,2)
(0,10,2)
(12,7,2)
(24,28,2)
(20,10,2)
(28,31,2)
(22,32,2)
(26,7,2)
(29,28,2)
(34,10,2)
(21,28,2)
(29,20,2)
(31,10,2)
(31,20,2)
-----------------------------------
(0,inputBuffer)
(1,count)
(2,)
(3,NULL)
(4,inputBuffer)
(5,if(staticTrue)
(6,count)
(7,staticTrue)
(8,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,1)
(10,staticTrue)
(11,if(staticTrue)
(12,"Sleep time possibly too long")
(13,"fgets()
(14,)
(15,count = -1)
(16,)
(17,)
(18,-1)
(19,)
(20,inputBuffer[CHAR_ARRAY_SIZE] = "")
(21,count)
(22,SLEEP(count)
(23,)
(24,printLine("fgets()
(25,RET)
(26,count)
(27,printLine("Sleep time possibly too long")
(28,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,atoi(inputBuffer)
(30,inputBuffer)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,count = atoi(inputBuffer)
(33,stdin)
(34,CHAR_ARRAY_SIZE)
(35,"")
(36,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^