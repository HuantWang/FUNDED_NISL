-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_11_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,71,73
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_11_bad(){    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_11_bad()
CWE401_Memory_Leak__int_calloc_11_bad
{    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,0,0)
(20,10,0)
(3,26,0)
(24,26,0)
(29,31,0)
(0,15,0)
(11,32,0)
(5,12,0)
(33,16,0)
(29,33,0)
(12,32,0)
(36,28,0)
(9,16,0)
(14,12,0)
(22,15,0)
(25,31,0)
(26,16,0)
(33,4,0)
(31,29,0)
(30,16,0)
(16,15,0)
(35,30,0)
(18,10,0)
(10,16,0)
(34,15,0)
(30,34,0)
(2,28,0)
(17,29,0)
(34,30,0)
(33,29,0)
(21,30,0)
(2,13,0)
(4,33,0)
(28,2,0)
(16,33,0)
(8,32,0)
(26,0,0)
(30,0,0)
(23,32,0)
(21,35,1)
(0,19,1)
(30,16,1)
(10,16,1)
(26,3,1)
(24,10,1)
(26,16,1)
(10,20,1)
(1,34,1)
(34,30,1)
(35,0,1)
(30,21,1)
(27,12,1)
(17,9,1)
(28,36,1)
(20,18,1)
(14,5,1)
(2,28,1)
(33,29,1)
(25,17,1)
(29,31,1)
(33,4,1)
(30,0,1)
(1,27,1)
(12,14,1)
(9,27,1)
(18,16,1)
(31,25,1)
(19,26,1)
(16,33,1)
(24,2,1)
(3,24,1)
(7,1,1)
(36,10,1)
(17,27,2)
(26,27,2)
(26,16,2)
(10,27,2)
(21,27,2)
(29,31,2)
(18,27,2)
(16,27,2)
(33,4,2)
(36,10,2)
(2,10,2)
(24,27,2)
(2,28,2)
(19,27,2)
(20,27,2)
(35,27,2)
(33,27,2)
(9,27,2)
(30,16,2)
(34,27,2)
(25,27,2)
(33,29,2)
(29,27,2)
(34,30,2)
(30,0,2)
(0,27,2)
(30,27,2)
(16,33,2)
(10,16,2)
(3,27,2)
(31,27,2)
(28,10,2)
-----------------------------------
(0,data[0] = 5)
(1,globalReturnsTrue()
(2,exit(-1)
(3,0)
(4,int *)
(5,data)
(6, sizeof(int)
(7,RET)
(8,data)
(9,data)
(10,data == NULL)
(11,if(globalReturnsTrue()
(12,data = NULL)
(13,)
(14,NULL)
(15,)
(16,data = (int *)
(17,100)
(18,data)
(19,5)
(20,NULL)
(21,0)
(22,if (data == NULL)
(23,if(globalReturnsTrue()
(24,data)
(25,int)
(26,data[0])
(27,globalReturnsTrue()
(28,-1)
(29,calloc(100, sizeof(int)
(30,data[0])
(31,sizeof(int)
(32,)
(33,(int *)
(34,printIntLine(data[0])
(35,data)
(36,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^