-----label-----
0
-----code-----
static int * goodB2GSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)realloc(data, 100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,27,30,31,35,37,42,44,49,50,51,55,58,59,62
-----computeFrom-----
13,14
13,15
26,27
26,28
33,34
33,35
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * goodB2GSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
static int
* goodB2GSource(int * data)
*
goodB2GSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(13,16,0)
(24,4,0)
(4,18,0)
(12,30,0)
(19,3,0)
(1,9,0)
(9,12,0)
(3,29,0)
(27,28,0)
(20,4,0)
(3,13,0)
(26,18,0)
(0,16,0)
(7,2,0)
(30,12,0)
(26,30,0)
(30,25,0)
(31,9,0)
(22,21,0)
(14,12,0)
(27,23,0)
(14,18,0)
(12,18,0)
(5,13,0)
(26,2,0)
(10,23,0)
(3,12,0)
(21,2,0)
(4,12,0)
(25,30,0)
(17,14,0)
(14,13,0)
(29,16,0)
(2,21,0)
(2,26,0)
(30,26,0)
(15,26,0)
(3,18,0)
(29,3,0)
(8,14,0)
(23,27,0)
(6,12,0)
(9,16,0)
(11,3,0)
(9,18,0)
(12,16,0)
(12,30,1)
(7,15,1)
(19,11,1)
(9,1,1)
(14,12,1)
(26,2,1)
(31,9,1)
(30,25,1)
(27,23,1)
(3,18,1)
(13,5,1)
(4,20,1)
(24,12,1)
(12,18,1)
(5,14,1)
(20,24,1)
(2,21,1)
(4,18,1)
(22,7,1)
(11,13,1)
(17,8,1)
(10,4,1)
(8,4,1)
(3,19,1)
(9,18,1)
(14,17,1)
(23,10,1)
(1,29,1)
(21,22,1)
(8,27,1)
(4,12,1)
(29,3,1)
(14,18,1)
(15,6,1)
(26,18,1)
(9,12,1)
(30,26,1)
(3,12,1)
(3,13,1)
(3,13,2)
(14,12,2)
(3,12,2)
(23,4,2)
(30,25,2)
(10,4,2)
(26,18,2)
(27,23,2)
(14,18,2)
(4,18,2)
(31,9,2)
(9,18,2)
(3,18,2)
(26,2,2)
(29,3,2)
(12,18,2)
(9,12,2)
(2,21,2)
(4,12,2)
(27,4,2)
(12,30,2)
(30,26,2)
-----------------------------------
(0,if (data == NULL)
(1,data)
(2,100*sizeof(int)
(3,data[0])
(4,data == NULL)
(5,5)
(6,data)
(7,100)
(8,data)
(9,return data;)
(10,1)
(11,data)
(12,data = (int *)
(13,data[0] = 5)
(14,data[0])
(15,data)
(16,)
(17,0)
(18,int * data)
(19,0)
(20,NULL)
(21,sizeof(int)
(22,int)
(23,-1)
(24,data)
(25,int *)
(26,realloc(data, 100*sizeof(int)
(27,exit(-1)
(28,)
(29,printIntLine(data[0])
(30,(int *)
(31,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^