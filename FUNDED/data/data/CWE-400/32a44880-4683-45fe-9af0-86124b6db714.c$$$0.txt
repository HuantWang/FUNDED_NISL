-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
69,72
70,71
70,72
71,72
74,75
75,76
76,77
76,78
77,78
80,81
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,78,79,84,86
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(14,41,0)
(26,25,0)
(22,29,0)
(33,41,0)
(0,42,0)
(26,38,0)
(36,1,0)
(38,26,0)
(27,31,0)
(15,31,0)
(24,2,0)
(44,9,0)
(18,5,0)
(29,18,0)
(21,11,0)
(29,25,0)
(38,5,0)
(28,1,0)
(26,18,0)
(35,25,0)
(45,14,0)
(32,11,0)
(7,44,0)
(10,43,0)
(23,5,0)
(8,39,0)
(25,0,0)
(2,8,0)
(30,35,0)
(44,43,0)
(46,26,0)
(20,25,0)
(44,25,0)
(17,35,0)
(6,4,0)
(43,31,0)
(14,0,0)
(40,31,0)
(0,14,0)
(8,2,0)
(3,43,0)
(0,25,0)
(42,0,0)
(4,13,0)
(12,29,0)
(25,5,0)
(37,18,0)
(19,26,0)
(41,14,0)
(1,28,1)
(0,14,1)
(25,0,1)
(38,26,1)
(20,1,1)
(4,6,1)
(14,41,1)
(21,1,1)
(29,25,1)
(24,35,1)
(3,10,1)
(35,17,1)
(35,25,1)
(36,43,1)
(12,35,1)
(33,45,1)
(22,12,1)
(8,2,1)
(11,32,1)
(41,33,1)
(44,43,1)
(18,37,1)
(12,8,1)
(7,11,1)
(16,4,1)
(45,20,1)
(46,18,1)
(37,29,1)
(16,44,1)
(28,36,1)
(6,11,1)
(17,30,1)
(2,24,1)
(44,7,1)
(32,21,1)
(26,19,1)
(44,25,1)
(19,46,1)
(21,38,1)
(0,42,1)
(43,3,1)
(26,18,1)
(29,22,1)
(26,25,1)
(30,25,1)
(17,1,2)
(14,1,2)
(25,1,2)
(8,2,2)
(38,26,2)
(14,41,2)
(12,1,2)
(25,0,2)
(22,1,2)
(41,1,2)
(8,35,2)
(7,11,2)
(26,25,2)
(29,1,2)
(46,1,2)
(0,42,2)
(24,35,2)
(29,25,2)
(26,1,2)
(4,11,2)
(18,1,2)
(45,1,2)
(6,11,2)
(0,14,2)
(19,1,2)
(0,1,2)
(20,1,2)
(30,1,2)
(44,11,2)
(38,1,2)
(35,25,2)
(37,1,2)
(44,25,2)
(35,1,2)
(26,18,2)
(2,35,2)
(44,43,2)
(33,1,2)
-----------------------------------
(0,(int *)
(1,globalFive==5)
(2,-1)
(3,NULL)
(4,printLine("Benign, fixed string")
(5,)
(6,"Benign, fixed string")
(7,data)
(8,exit(-1)
(9,)
(10,data)
(11,globalFive!=5)
(12,data)
(13,)
(14,calloc(100, sizeof(int)
(15,if(globalFive==5)
(16,RET)
(17,NULL)
(18,data[0] = 5)
(19,0)
(20,data)
(21,globalFive)
(22,0)
(23,if (data == NULL)
(24,1)
(25,data = (int *)
(26,data[0])
(27,if(globalFive!=5)
(28,5)
(29,data[0])
(30,data)
(31,)
(32,5)
(33,int)
(34, sizeof(int)
(35,data == NULL)
(36,globalFive)
(37,5)
(38,printIntLine(data[0])
(39,)
(40,data)
(41,sizeof(int)
(42,int *)
(43,data = NULL)
(44,free(data)
(45,100)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^