-----label-----
1
-----code-----
unsigned long
hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
		unsigned long len, unsigned long pgoff, unsigned long flags)
{
	struct mm_struct *mm = current->mm;
	struct vm_area_struct *vma;
	unsigned long task_size = TASK_SIZE;

	if (test_thread_flag(TIF_32BIT))
		task_size = STACK_TOP32;

	if (len & ~HPAGE_MASK)
		return -EINVAL;
	if (len > task_size)
		return -ENOMEM;

	if (flags & MAP_FIXED) {
		if (prepare_hugepage_range(file, addr, len))
			return -EINVAL;
		return addr;
	}

	if (addr) {
		addr = ALIGN(addr, HPAGE_SIZE);
		vma = find_vma(mm, addr);
		if (task_size - len >= addr &&
		    (!vma || addr + len <= vma->vm_start))
			return addr;
	}
	if (mm->get_unmapped_area == arch_get_unmapped_area)
		return hugetlb_get_unmapped_area_bottomup(file, addr, len,
				pgoff, flags);
	else
		return hugetlb_get_unmapped_area_topdown(file, addr, len,
				pgoff, flags);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
55,57
56,57
56,58
57,58
59,60
60,61
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
73,74
75,76
76,77
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
96,97
96,98
97,98
97,99
97,100
97,101
98,99
100,101
102,103
104,105
106,107
107,108
108,109
110,111
111,112
113,114
113,115
114,115
116,117
116,118
116,119
117,118
118,119
118,120
119,120
121,122
121,123
121,124
122,123
124,125
126,127
128,129
129,130
129,131
130,131
132,133
132,134
132,135
133,134
135,136
137,138
139,140
139,141
140,141
140,142
141,142
141,143
142,143
142,144
143,144
145,146
147,148
149,150
150,151
150,152
151,152
152,153
154,155
154,156
155,156
155,157
156,157
158,159
160,161
160,162
161,162
164,165
165,166
167,168
167,169
167,170
168,169
168,170
169,170
169,171
170,171
173,174
175,176
176,177
176,178
176,179
176,180
176,181
176,182
177,178
179,180
181,182
183,184
185,186
187,188
189,190
190,191
190,192
190,193
190,194
190,195
190,196
191,192
193,194
195,196
197,198
199,200
201,202
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,31,33,34,38,39,43,45,46,49,51,54,58,61,65,67,71,74,78,82,84,88,92,94,99,101,103,105,109,112,115,120,123,125,127,131,134,136,138,144,146,148,153,157,159,162,163,166,171,172,174,178,180,182,184,186,188,192,194,196,198,200,202
-----computeFrom-----
63,64
63,65
69,70
69,71
80,81
80,82
90,91
90,92
118,119
118,120
129,130
129,131
140,141
140,142
141,142
141,143
142,143
142,144
150,151
150,152
154,155
154,156
155,156
155,157
168,169
168,170
-----guardedBy-----
157,166
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
unsigned longhugetlb_get_unmapped_area(struct file *file, unsigned long addr,		unsigned long len, unsigned long pgoff, unsigned long flags){	struct mm_struct *mm = current->mm;	struct vm_area_struct *vma;	unsigned long task_size = TASK_SIZE;	if (test_thread_flag(TIF_32BIT))		task_size = STACK_TOP32;	if (len & ~HPAGE_MASK)		return -EINVAL;	if (len > task_size)		return -ENOMEM;	if (flags & MAP_FIXED) {		if (prepare_hugepage_range(file, addr, len))			return -EINVAL;		return addr;	}	if (addr) {		addr = ALIGN(addr, HPAGE_SIZE);		vma = find_vma(mm, addr);		if (task_size - len >= addr &&		    (!vma || addr + len <= vma->vm_start))			return addr;	}	if (mm->get_unmapped_area == arch_get_unmapped_area)		return hugetlb_get_unmapped_area_bottomup(file, addr, len,				pgoff, flags);	else		return hugetlb_get_unmapped_area_topdown(file, addr, len,				pgoff, flags);}
unsigned long
hugetlb_get_unmapped_area(struct file *file, unsigned long addr,		unsigned long len, unsigned long pgoff, unsigned long flags)
hugetlb_get_unmapped_area
struct file *file
struct file
file
*file
*
file
unsigned long addr
unsigned long
addr
addr
unsigned long len
unsigned long
len
len
unsigned long pgoff
unsigned long
pgoff
pgoff
unsigned long flags
unsigned long
flags
flags
{	struct mm_struct *mm = current->mm;	struct vm_area_struct *vma;	unsigned long task_size = TASK_SIZE;	if (test_thread_flag(TIF_32BIT))		task_size = STACK_TOP32;	if (len & ~HPAGE_MASK)		return -EINVAL;	if (len > task_size)		return -ENOMEM;	if (flags & MAP_FIXED) {		if (prepare_hugepage_range(file, addr, len))			return -EINVAL;		return addr;	}	if (addr) {		addr = ALIGN(addr, HPAGE_SIZE);		vma = find_vma(mm, addr);		if (task_size - len >= addr &&		    (!vma || addr + len <= vma->vm_start))			return addr;	}	if (mm->get_unmapped_area == arch_get_unmapped_area)		return hugetlb_get_unmapped_area_bottomup(file, addr, len,				pgoff, flags);	else		return hugetlb_get_unmapped_area_topdown(file, addr, len,				pgoff, flags);}
struct mm_struct *mm = current->mm;
struct mm_struct *mm = current->mm;
struct mm_struct
mm_struct
*mm = current->mm
*
mm
= current->mm
current->mm
current
current
mm
struct vm_area_struct *vma;
struct vm_area_struct *vma;
struct vm_area_struct
vm_area_struct
*vma
*
vma
unsigned long task_size = TASK_SIZE;
unsigned long task_size = TASK_SIZE;
unsigned long
task_size = TASK_SIZE
task_size
= TASK_SIZE
TASK_SIZE
TASK_SIZE
if (test_thread_flag(TIF_32BIT))		task_size = STACK_TOP32;
test_thread_flag(TIF_32BIT)
test_thread_flag
test_thread_flag
(TIF_32BIT)
TIF_32BIT
TIF_32BIT
task_size = STACK_TOP32;
task_size = STACK_TOP32
task_size
task_size
STACK_TOP32
STACK_TOP32
if (len & ~HPAGE_MASK)		return -EINVAL;
len & ~HPAGE_MASK
len
len
~HPAGE_MASK
HPAGE_MASK
HPAGE_MASK
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (len > task_size)		return -ENOMEM;
len > task_size
len
len
task_size
task_size
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (flags & MAP_FIXED) {		if (prepare_hugepage_range(file, addr, len))			return -EINVAL;		return addr;	}
flags & MAP_FIXED
flags
flags
MAP_FIXED
MAP_FIXED
{		if (prepare_hugepage_range(file, addr, len))			return -EINVAL;		return addr;	}
if (prepare_hugepage_range(file, addr, len))			return -EINVAL;
prepare_hugepage_range(file, addr, len)
prepare_hugepage_range
prepare_hugepage_range
file
file
addr
addr
len
len
return -EINVAL;
-EINVAL
EINVAL
EINVAL
return addr;
addr
addr
if (addr) {		addr = ALIGN(addr, HPAGE_SIZE);		vma = find_vma(mm, addr);		if (task_size - len >= addr &&		    (!vma || addr + len <= vma->vm_start))			return addr;	}
addr
addr
{		addr = ALIGN(addr, HPAGE_SIZE);		vma = find_vma(mm, addr);		if (task_size - len >= addr &&		    (!vma || addr + len <= vma->vm_start))			return addr;	}
addr = ALIGN(addr, HPAGE_SIZE);
addr = ALIGN(addr, HPAGE_SIZE)
addr
addr
ALIGN(addr, HPAGE_SIZE)
ALIGN
ALIGN
addr
addr
HPAGE_SIZE
HPAGE_SIZE
vma = find_vma(mm, addr);
vma = find_vma(mm, addr)
vma
vma
find_vma(mm, addr)
find_vma
find_vma
mm
mm
addr
addr
if (task_size - len >= addr &&		    (!vma || addr + len <= vma->vm_start))			return addr;
task_size - len >= addr &&		    (!vma || addr + len <= vma->vm_start)
task_size - len >= addr
task_size - len
task_size
task_size
len
len
addr
addr
(!vma || addr + len <= vma->vm_start)
!vma || addr + len <= vma->vm_start
!vma
vma
vma
addr + len <= vma->vm_start
addr + len
addr
addr
len
len
vma->vm_start
vma
vma
vm_start
return addr;
addr
addr
if (mm->get_unmapped_area == arch_get_unmapped_area)		return hugetlb_get_unmapped_area_bottomup(file, addr, len,				pgoff, flags);	else		return hugetlb_get_unmapped_area_topdown(file, addr, len,				pgoff, flags);
mm->get_unmapped_area == arch_get_unmapped_area
mm->get_unmapped_area
mm
mm
get_unmapped_area
arch_get_unmapped_area
arch_get_unmapped_area
return hugetlb_get_unmapped_area_bottomup(file, addr, len,				pgoff, flags);
hugetlb_get_unmapped_area_bottomup(file, addr, len,				pgoff, flags)
hugetlb_get_unmapped_area_bottomup
hugetlb_get_unmapped_area_bottomup
file
file
addr
addr
len
len
pgoff
pgoff
flags
flags
return hugetlb_get_unmapped_area_topdown(file, addr, len,				pgoff, flags);
hugetlb_get_unmapped_area_topdown(file, addr, len,				pgoff, flags)
hugetlb_get_unmapped_area_topdown
hugetlb_get_unmapped_area_topdown
file
file
addr
addr
len
len
pgoff
pgoff
flags
flags
-----joern-----
(63,84,0)
(104,50,0)
(86,101,0)
(11,67,0)
(103,66,0)
(75,61,0)
(66,16,0)
(2,63,0)
(48,28,0)
(26,39,0)
(73,25,0)
(50,80,0)
(46,80,0)
(102,67,0)
(81,78,0)
(66,82,0)
(99,50,0)
(99,82,0)
(50,101,0)
(1,99,0)
(55,104,0)
(86,104,0)
(90,15,0)
(46,82,0)
(78,86,0)
(61,75,0)
(8,80,0)
(46,84,0)
(91,37,0)
(64,66,0)
(47,71,0)
(20,66,0)
(61,8,0)
(12,22,0)
(59,60,0)
(5,38,0)
(26,10,0)
(38,67,0)
(14,75,0)
(33,46,0)
(26,100,0)
(71,56,0)
(57,67,0)
(44,46,0)
(27,88,0)
(63,52,0)
(40,25,0)
(96,67,0)
(42,67,0)
(70,59,0)
(52,50,0)
(75,14,0)
(19,58,0)
(45,28,0)
(41,22,0)
(25,86,0)
(69,104,0)
(26,97,0)
(78,75,0)
(74,59,0)
(92,77,0)
(99,97,0)
(52,63,0)
(94,66,0)
(76,66,0)
(43,67,0)
(22,80,0)
(104,80,0)
(21,28,0)
(58,84,0)
(8,61,0)
(10,31,0)
(66,50,0)
(66,80,0)
(6,99,0)
(23,21,0)
(25,61,0)
(66,24,0)
(22,50,0)
(38,77,0)
(7,77,0)
(89,99,0)
(26,16,0)
(53,58,0)
(13,8,0)
(62,71,0)
(61,25,0)
(104,86,0)
(21,43,0)
(51,10,0)
(93,99,0)
(99,84,0)
(29,43,0)
(14,52,0)
(87,67,0)
(104,38,0)
(36,67,0)
(65,100,0)
(21,84,0)
(83,86,0)
(4,8,0)
(99,24,0)
(100,80,0)
(34,67,0)
(85,56,0)
(8,50,0)
(75,78,0)
(66,60,0)
(52,14,0)
(98,101,0)
(77,38,0)
(26,0,0)
(63,28,0)
(50,22,0)
(8,84,0)
(10,80,0)
(66,84,0)
(32,99,0)
(52,80,0)
(68,46,0)
(49,43,0)
(18,72,0)
(99,80,0)
(95,50,0)
(79,63,0)
(99,60,0)
(56,71,0)
(72,39,0)
(63,43,0)
(3,67,0)
(9,90,0)
(35,52,0)
(88,0,0)
(100,50,0)
(26,15,0)
(17,21,0)
(71,38,0)
(54,31,0)
(39,72,1)
(100,65,1)
(25,86,1)
(50,22,1)
(30,59,1)
(100,50,1)
(104,38,1)
(72,18,1)
(37,91,1)
(61,25,1)
(26,16,1)
(38,77,1)
(2,79,1)
(104,80,1)
(100,80,1)
(8,13,1)
(91,43,1)
(73,40,1)
(52,50,1)
(51,46,1)
(19,37,1)
(27,46,1)
(0,88,1)
(8,84,1)
(92,7,1)
(76,103,1)
(94,64,1)
(99,84,1)
(33,68,1)
(63,28,1)
(78,86,1)
(52,63,1)
(1,32,1)
(40,8,1)
(77,92,1)
(21,43,1)
(13,4,1)
(86,104,1)
(99,80,1)
(46,80,1)
(49,29,1)
(8,80,1)
(16,66,1)
(45,48,1)
(66,50,1)
(83,50,1)
(22,80,1)
(65,14,1)
(66,94,1)
(99,60,1)
(52,35,1)
(97,99,1)
(17,23,1)
(66,60,1)
(8,50,1)
(26,10,1)
(18,58,1)
(99,1,1)
(41,95,1)
(59,74,1)
(103,20,1)
(56,85,1)
(21,17,1)
(71,38,1)
(69,55,1)
(26,39,1)
(26,100,1)
(74,70,1)
(99,50,1)
(35,63,1)
(46,84,1)
(66,84,1)
(62,30,1)
(20,56,1)
(7,5,1)
(85,71,1)
(44,33,1)
(25,73,1)
(55,83,1)
(19,28,1)
(59,60,1)
(90,9,1)
(104,50,1)
(81,52,1)
(56,71,1)
(58,53,1)
(26,97,1)
(93,89,1)
(14,75,1)
(53,19,1)
(62,14,1)
(66,80,1)
(10,51,1)
(66,82,1)
(61,8,1)
(99,82,1)
(9,21,1)
(14,52,1)
(29,38,1)
(10,80,1)
(63,2,1)
(46,82,1)
(88,27,1)
(89,6,1)
(50,80,1)
(43,49,1)
(48,37,1)
(63,84,1)
(58,84,1)
(68,59,1)
(75,61,1)
(6,56,1)
(47,62,1)
(21,28,1)
(64,76,1)
(52,80,1)
(99,24,1)
(70,21,1)
(23,58,1)
(28,45,1)
(75,78,1)
(21,84,1)
(32,93,1)
(104,69,1)
(71,47,1)
(26,0,1)
(95,30,1)
(46,44,1)
(26,15,1)
(63,43,1)
(12,41,1)
(78,81,1)
(4,78,1)
(66,24,1)
(22,12,1)
(79,86,1)
(15,90,1)
(71,38,2)
(55,30,2)
(38,77,2)
(22,30,2)
(66,56,2)
(66,80,2)
(61,8,2)
(14,30,2)
(50,22,2)
(12,30,2)
(28,37,2)
(8,50,2)
(95,30,2)
(100,80,2)
(46,84,2)
(50,30,2)
(66,60,2)
(17,58,2)
(23,58,2)
(76,56,2)
(26,16,2)
(103,56,2)
(8,78,2)
(99,82,2)
(104,30,2)
(66,50,2)
(89,56,2)
(52,80,2)
(1,56,2)
(21,43,2)
(79,30,2)
(94,56,2)
(46,82,2)
(104,50,2)
(47,30,2)
(63,28,2)
(26,100,2)
(99,56,2)
(41,30,2)
(71,14,2)
(86,104,2)
(30,59,2)
(10,46,2)
(56,14,2)
(88,46,2)
(14,52,2)
(52,50,2)
(9,21,2)
(66,24,2)
(104,38,2)
(8,84,2)
(93,56,2)
(99,80,2)
(6,56,2)
(40,78,2)
(70,21,2)
(21,84,2)
(16,56,2)
(32,56,2)
(58,84,2)
(52,63,2)
(63,43,2)
(35,30,2)
(72,58,2)
(56,71,2)
(25,86,2)
(18,58,2)
(85,14,2)
(64,56,2)
(74,21,2)
(61,25,2)
(59,21,2)
(46,80,2)
(78,86,2)
(26,10,2)
(56,30,2)
(99,50,2)
(4,78,2)
(26,0,2)
(50,80,2)
(2,30,2)
(26,15,2)
(45,37,2)
(86,30,2)
(33,59,2)
(47,14,2)
(75,52,2)
(62,14,2)
(26,39,2)
(52,30,2)
(8,80,2)
(78,52,2)
(44,59,2)
(59,60,2)
(65,14,2)
(75,78,2)
(0,46,2)
(15,21,2)
(66,82,2)
(97,56,2)
(69,30,2)
(90,21,2)
(13,78,2)
(99,84,2)
(100,14,2)
(73,78,2)
(10,80,2)
(26,97,2)
(21,28,2)
(71,30,2)
(75,61,2)
(62,30,2)
(21,58,2)
(27,46,2)
(14,75,2)
(39,58,2)
(63,84,2)
(46,59,2)
(104,80,2)
(100,50,2)
(63,30,2)
(81,52,2)
(99,24,2)
(61,78,2)
(22,80,2)
(66,84,2)
(20,56,2)
(48,37,2)
(83,30,2)
(68,59,2)
(51,46,2)
(25,78,2)
(85,30,2)
(99,60,2)
-----------------------------------
(0,return -EINVAL;)
(1,flags)
(2,len)
(3,if (len > task_size)
(4,addr)
(5,mm)
(6,file)
(7,current)
(8,addr + len)
(9,ENOMEM)
(10,return addr;)
(11,task_size)
(12,HPAGE_SIZE)
(13,len)
(14,task_size - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vma->vm_start)
(15,return -ENOMEM;)
(16,return hugetlb_get_unmapped_area_topdown(file, addr, len,\n\\n\\t\\t\\t\\tpgoff, flags)
(17,task_size)
(18,EINVAL)
(19,len)
(20,file)
(21,len > task_size)
(22,ALIGN(addr, HPAGE_SIZE)
(23,len)
(24,unsigned long pgoff)
(25,vma->vm_start)
(26,RET)
(27,EINVAL)
(28,task_size = STACK_TOP32)
(29,task_size)
(30,addr)
(31,)
(32,pgoff)
(33,addr)
(34,vma)
(35,addr)
(36,if (len & ~HPAGE_MASK)
(37,test_thread_flag(TIF_32BIT)
(38,*mm = current->mm)
(39,return -EINVAL;)
(40,vma)
(41,addr)
(42,if (test_thread_flag(TIF_32BIT)
(43,task_size = TASK_SIZE)
(44,len)
(45,STACK_TOP32)
(46,prepare_hugepage_range(file, addr, len)
(47,get_unmapped_area)
(48,task_size)
(49,TASK_SIZE)
(50,addr = ALIGN(addr, HPAGE_SIZE)
(51,addr)
(52,task_size - len >= addr)
(53,~HPAGE_MASK)
(54,if (prepare_hugepage_range(file, addr, len)
(55,mm)
(56,mm->get_unmapped_area == arch_get_unmapped_area)
(57,mm)
(58,len & ~HPAGE_MASK)
(59,flags & MAP_FIXED)
(60,unsigned long flags)
(61,addr + len <= vma->vm_start)
(62,mm)
(63,task_size - len)
(64,pgoff)
(65,addr)
(66,hugetlb_get_unmapped_area_topdown(file, addr, len,\n\\n\\t\\t\\t\\tpgoff, flags)
(67,)
(68,file)
(69,addr)
(70,flags)
(71,mm->get_unmapped_area)
(72,-EINVAL)
(73,vm_start)
(74,MAP_FIXED)
(75,!vma || addr + len <= vma->vm_start)
(76,len)
(77,current->mm)
(78,!vma)
(79,task_size)
(80,unsigned long addr)
(81,vma)
(82,struct file *file)
(83,vma)
(84,unsigned long len)
(85,arch_get_unmapped_area)
(86,vma = find_vma(mm, addr)
(87,if (flags & MAP_FIXED)
(88,-EINVAL)
(89,addr)
(90,-ENOMEM)
(91,TIF_32BIT)
(92,mm)
(93,len)
(94,flags)
(95,addr)
(96,if (addr)
(97,return hugetlb_get_unmapped_area_bottomup(file, addr, len,\n\\n\\t\\t\\t\\tpgoff, flags)
(98,if (task_size - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vma->vm_start)
(99,hugetlb_get_unmapped_area_bottomup(file, addr, len,\n\\n\\t\\t\\t\\tpgoff, flags)
(100,return addr;)
(101,)
(102,if (mm->get_unmapped_area == arch_get_unmapped_area)
(103,addr)
(104,find_vma(mm, addr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^