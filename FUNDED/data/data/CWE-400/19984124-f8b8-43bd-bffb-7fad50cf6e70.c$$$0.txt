-----label-----
0
-----code-----
static void good2()
{
    if(globalFive==5)
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
103,104
105,106
105,107
106,107
108,109
109,110
109,111
110,111
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
128,130
129,130
129,131
130,131
135,136
136,137
136,138
137,138
137,139
138,139
138,140
139,140
144,145
145,146
145,147
146,147
148,149
148,150
149,150
149,151
150,151
152,153
154,155
155,156
155,157
156,157
159,160
160,161
160,162
161,162
163,164
-----nextToken-----
2,4,9,10,16,18,19,24,26,29,31,35,36,40,42,47,49,53,55,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,97,99,102,104,107,111,112,116,118,123,125,131,132,133,134,140,141,142,143,147,151,153,157,158,162,164
-----computeFrom-----
7,8
7,9
30,31
30,32
38,39
38,40
58,59
58,60
67,68
67,69
91,92
91,93
105,106
105,107
114,115
114,116
121,122
121,123
127,128
127,129
136,137
136,138
-----guardedBy-----
116,125
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(globalFive==5)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(globalFive==5)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(globalFive==5)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
globalFive==5
globalFive
globalFive
5
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(80,25,0)
(8,48,0)
(75,55,0)
(9,47,0)
(72,0,0)
(37,13,0)
(18,82,0)
(6,5,0)
(43,68,0)
(84,68,0)
(52,87,0)
(32,48,0)
(67,57,0)
(27,33,0)
(82,18,0)
(64,55,0)
(22,62,0)
(61,34,0)
(60,45,0)
(40,52,0)
(7,4,0)
(18,49,0)
(33,58,0)
(71,53,0)
(38,73,0)
(55,75,0)
(62,57,0)
(39,13,0)
(88,26,0)
(0,70,0)
(51,79,0)
(53,71,0)
(28,57,0)
(41,12,0)
(11,68,0)
(37,49,0)
(49,68,0)
(83,35,0)
(44,8,0)
(85,77,0)
(5,14,0)
(82,85,0)
(19,68,0)
(17,81,0)
(37,68,0)
(42,68,0)
(29,30,0)
(25,23,0)
(16,4,0)
(30,5,0)
(20,34,0)
(5,30,0)
(46,4,0)
(14,54,0)
(15,14,0)
(86,18,0)
(23,49,0)
(85,19,0)
(23,25,0)
(70,0,0)
(31,87,0)
(50,65,0)
(33,27,0)
(4,7,0)
(34,64,0)
(7,33,0)
(73,35,0)
(52,53,0)
(26,88,0)
(53,52,0)
(48,8,0)
(48,47,0)
(47,54,0)
(30,13,0)
(55,64,0)
(13,64,0)
(74,30,0)
(63,23,0)
(64,68,0)
(57,62,0)
(33,7,0)
(71,49,0)
(59,18,0)
(21,8,0)
(62,79,0)
(73,49,0)
(70,1,0)
(55,73,0)
(35,26,0)
(71,2,0)
(35,73,0)
(26,35,0)
(4,13,0)
(69,12,0)
(58,33,0)
(56,13,0)
(65,49,0)
(77,85,0)
(57,49,0)
(36,65,0)
(87,52,0)
(25,45,0)
(45,68,0)
(76,23,0)
(87,31,0)
(85,82,0)
(24,64,0)
(68,3,0)
(2,71,0)
(78,37,0)
(8,13,0)
(27,54,0)
(10,49,0)
(13,54,0)
(73,55,0)
(19,85,0)
(79,68,0)
(49,71,0)
(67,70,1)
(37,13,1)
(87,31,1)
(21,14,1)
(26,83,1)
(16,46,1)
(37,49,1)
(86,45,1)
(13,56,1)
(57,28,1)
(67,65,1)
(40,10,1)
(33,58,1)
(45,60,1)
(0,72,1)
(57,49,1)
(51,62,1)
(23,63,1)
(69,41,1)
(64,55,1)
(55,75,1)
(5,30,1)
(70,0,1)
(48,32,1)
(33,7,1)
(53,52,1)
(85,82,1)
(38,24,1)
(30,29,1)
(47,9,1)
(48,8,1)
(65,49,1)
(49,71,1)
(20,61,1)
(72,65,1)
(18,59,1)
(15,5,1)
(73,35,1)
(79,51,1)
(25,80,1)
(28,67,1)
(63,76,1)
(66,37,1)
(9,48,1)
(36,50,1)
(82,18,1)
(22,57,1)
(46,47,1)
(87,40,1)
(83,38,1)
(78,27,1)
(39,34,1)
(61,64,1)
(44,21,1)
(12,69,1)
(73,49,1)
(18,49,1)
(30,13,1)
(76,79,1)
(4,16,1)
(19,85,1)
(14,15,1)
(34,64,1)
(60,25,1)
(85,77,1)
(71,2,1)
(24,19,1)
(4,13,1)
(10,12,1)
(35,26,1)
(50,49,1)
(26,88,1)
(13,64,1)
(55,73,1)
(23,49,1)
(56,39,1)
(27,33,1)
(59,86,1)
(52,87,1)
(8,13,1)
(34,20,1)
(6,30,1)
(25,23,1)
(7,4,1)
(80,23,1)
(62,57,1)
(29,74,1)
(74,13,1)
(66,12,1)
(65,36,1)
(78,34,1)
(5,6,1)
(62,22,1)
(8,44,1)
(37,78,1)
(32,8,1)
(71,53,1)
(73,35,2)
(0,65,2)
(34,64,2)
(85,77,2)
(64,12,2)
(56,34,2)
(33,7,2)
(62,12,2)
(26,88,2)
(82,12,2)
(50,12,2)
(35,26,2)
(48,8,2)
(57,12,2)
(5,30,2)
(71,2,2)
(24,12,2)
(61,12,2)
(9,34,2)
(65,49,2)
(44,34,2)
(73,12,2)
(4,34,2)
(82,18,2)
(23,49,2)
(49,12,2)
(72,65,2)
(86,12,2)
(80,12,2)
(8,34,2)
(30,34,2)
(47,34,2)
(85,12,2)
(27,34,2)
(19,85,2)
(20,12,2)
(70,65,2)
(19,12,2)
(22,12,2)
(13,64,2)
(48,34,2)
(36,12,2)
(18,49,2)
(34,12,2)
(74,34,2)
(53,12,2)
(55,12,2)
(25,23,2)
(18,12,2)
(27,33,2)
(7,4,2)
(46,34,2)
(26,12,2)
(14,34,2)
(38,12,2)
(62,57,2)
(5,34,2)
(13,34,2)
(71,12,2)
(87,12,2)
(73,49,2)
(53,52,2)
(79,12,2)
(15,34,2)
(51,12,2)
(65,12,2)
(63,12,2)
(83,12,2)
(16,34,2)
(33,34,2)
(10,12,2)
(4,13,2)
(85,82,2)
(57,49,2)
(71,53,2)
(28,12,2)
(6,34,2)
(45,12,2)
(30,13,2)
(67,12,2)
(35,12,2)
(55,75,2)
(76,12,2)
(52,12,2)
(7,34,2)
(37,49,2)
(32,34,2)
(87,31,2)
(37,13,2)
(78,12,2)
(37,12,2)
(25,12,2)
(39,34,2)
(21,34,2)
(40,12,2)
(60,12,2)
(49,71,2)
(29,34,2)
(55,73,2)
(33,58,2)
(8,13,2)
(59,12,2)
(52,87,2)
(64,55,2)
(70,0,2)
(23,12,2)
-----------------------------------
(0,-1)
(1,)
(2,struct _twoIntsStruct *)
(3,)
(4,data[0])
(5,data[0].intOne)
(6,intOne)
(7,&data[0])
(8,data[0])
(9,1)
(10,data)
(11,tmpData)
(12,globalFive==5)
(13,data = tmpData)
(14,data[0].intOne = 1)
(15,1)
(16,0)
(17,if(globalFive==5)
(18,data[0])
(19,printStructLine((twoIntsStruct *)
(20,NULL)
(21,data)
(22,intOne)
(23,data[0])
(24,tmpData)
(25,data[0].intTwo)
(26,sizeof(struct _twoIntsStruct)
(27,printStructLine((twoIntsStruct *)
(28,0)
(29,0)
(30,data[0])
(31,struct _twoIntsStruct)
(32,intTwo)
(33,(twoIntsStruct *)
(34,tmpData != NULL)
(35,(130000)
(36,NULL)
(37,free(data)
(38,data)
(39,data)
(40,100)
(41,globalFive)
(42,if (tmpData != NULL)
(43,if (data == NULL)
(44,0)
(45,data[0].intTwo = 0)
(46,data)
(47,data[0].intTwo = 1)
(48,data[0].intTwo)
(49,* data = (struct _twoIntsStruct *)
(50,data)
(51,0)
(52,100*sizeof(struct _twoIntsStruct)
(53,malloc(100*sizeof(struct _twoIntsStruct)
(54,)
(55,(struct _twoIntsStruct *)
(56,tmpData)
(57,data[0])
(58,twoIntsStruct *)
(59,0)
(60,0)
(61,tmpData)
(62,data[0].intOne)
(63,0)
(64,tmpData = (struct _twoIntsStruct *)
(65,data == NULL)
(66,RET)
(67,data)
(68,)
(69,5)
(70,exit(-1)
(71,(struct _twoIntsStruct *)
(72,1)
(73,realloc(data, (130000)
(74,data)
(75,struct _twoIntsStruct *)
(76,data)
(77,twoIntsStruct *)
(78,data)
(79,data[0].intOne = 0)
(80,intTwo)
(81,)
(82,&data[0])
(83,130000)
(84,data)
(85,(twoIntsStruct *)
(86,data)
(87,sizeof(struct _twoIntsStruct)
(88,struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^