-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_badSink()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(9,12,0)
(11,32,0)
(19,27,0)
(36,1,0)
(32,11,0)
(12,33,0)
(4,33,0)
(39,6,0)
(23,31,0)
(17,35,0)
(24,10,0)
(38,17,0)
(27,23,0)
(10,23,0)
(37,23,0)
(25,35,0)
(16,18,0)
(8,1,0)
(32,23,0)
(30,34,0)
(40,37,0)
(2,31,0)
(28,23,0)
(26,27,0)
(33,12,0)
(34,6,0)
(12,6,0)
(5,34,0)
(34,20,0)
(0,20,0)
(28,31,0)
(34,30,0)
(15,37,0)
(32,30,0)
(30,32,0)
(3,6,0)
(13,28,0)
(23,32,0)
(36,14,0)
(22,17,0)
(1,36,0)
(6,35,0)
(37,31,0)
(7,23,0)
(20,34,0)
(29,16,0)
(10,31,0)
(15,27,1)
(0,5,1)
(12,33,1)
(8,27,1)
(3,39,1)
(10,24,1)
(28,13,1)
(28,23,1)
(34,20,1)
(36,1,1)
(27,23,1)
(12,6,1)
(37,23,1)
(1,8,1)
(10,23,1)
(15,36,1)
(26,19,1)
(27,26,1)
(30,34,1)
(13,10,1)
(7,12,1)
(40,15,1)
(9,6,1)
(24,37,1)
(29,12,1)
(21,28,1)
(5,7,1)
(4,9,1)
(23,32,1)
(20,0,1)
(32,11,1)
(33,4,1)
(21,16,1)
(37,40,1)
(34,6,1)
(16,29,1)
(32,30,1)
(6,3,1)
(19,23,1)
(37,23,2)
(37,12,2)
(32,30,2)
(32,11,2)
(36,27,2)
(36,1,2)
(32,12,2)
(26,12,2)
(40,12,2)
(12,33,2)
(19,12,2)
(23,32,2)
(27,12,2)
(29,12,2)
(34,20,2)
(8,27,2)
(10,23,2)
(16,12,2)
(30,34,2)
(30,12,2)
(27,23,2)
(34,12,2)
(13,12,2)
(10,12,2)
(24,12,2)
(1,27,2)
(0,12,2)
(7,12,2)
(12,6,2)
(20,12,2)
(28,12,2)
(34,6,2)
(28,23,2)
(15,12,2)
(23,12,2)
(5,12,2)
-----------------------------------
(0,wchar_t)
(1,-1)
(2,if (myString == NULL)
(3,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData)
(4,HELLO_STRING)
(5,data)
(6,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_badData)
(7,myString)
(8,1)
(9,data)
(10,printWLine(myString)
(11,wchar_t *)
(12,data > wcslen(HELLO_STRING)
(13,myString)
(14,)
(15,myString)
(16,printLine("Input is less than the length of the source string")
(17,)
(18,)
(19,myString)
(20,sizeof(wchar_t)
(21,RET)
(22,myString)
(23,myString = (wchar_t *)
(24,myString)
(25,data)
(26,NULL)
(27,myString == NULL)
(28,free(myString)
(29,"Input is less than the length of the source string")
(30,malloc(data*sizeof(wchar_t)
(31,)
(32,(wchar_t *)
(33,wcslen(HELLO_STRING)
(34,data*sizeof(wchar_t)
(35,)
(36,exit(-1)
(37,wcscpy(myString, HELLO_STRING)
(38,if (data > wcslen(HELLO_STRING)
(39,data)
(40,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^