-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_15_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
55,56
56,57
56,58
57,58
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,38,41,45,47,51,52,53,54,58,59,60
-----computeFrom-----
12,13
12,14
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_15_bad(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE400_Resource_Exhaustion__rand_sleep_15_bad()
CWE400_Resource_Exhaustion__rand_sleep_15_bad
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,25,0)
(8,0,0)
(26,13,0)
(17,28,0)
(12,7,0)
(22,7,0)
(14,7,0)
(30,13,0)
(21,15,0)
(11,10,0)
(16,21,0)
(6,10,0)
(3,11,0)
(9,13,0)
(28,13,0)
(0,8,0)
(23,13,0)
(21,10,0)
(28,8,0)
(8,7,0)
(24,10,0)
(15,21,0)
(20,10,0)
(28,21,0)
(2,31,0)
(31,13,0)
(18,10,0)
(25,13,0)
(29,8,0)
(19,0,0)
(3,1,1)
(21,15,1)
(4,18,1)
(31,2,1)
(1,8,1)
(27,30,1)
(17,4,1)
(11,3,1)
(8,0,1)
(18,21,1)
(28,8,1)
(4,20,1)
(15,16,1)
(2,4,1)
(28,17,1)
(30,25,1)
(0,19,1)
(16,1,1)
(27,9,1)
(20,11,1)
(9,31,1)
(28,21,1)
(25,5,1)
(5,28,1)
(19,29,1)
(21,1,2)
(21,15,2)
(16,1,2)
(5,4,2)
(28,21,2)
(8,0,2)
(17,4,2)
(20,1,2)
(25,4,2)
(18,1,2)
(31,4,2)
(2,4,2)
(3,1,2)
(11,1,2)
(28,8,2)
(28,4,2)
(9,4,2)
(15,1,2)
(30,4,2)
-----------------------------------
(0,-1)
(1,6)
(2,"Benign, fixed string")
(3,"Benign, fixed string")
(4,7)
(5,"Sleep time possibly too long")
(6,case 6:)
(7,)
(8,count = -1)
(9,break;)
(10,)
(11,printLine("Benign, fixed string")
(12,count)
(13,)
(14,switch(6)
(15,RAND32()
(16,count)
(17,count)
(18,break;)
(19,1)
(20,break;)
(21,count = RAND32()
(22,switch(7)
(23,case 7:)
(24,default:)
(25,printLine("Sleep time possibly too long")
(26,default:)
(27,RET)
(28,SLEEP(count)
(29,count)
(30,break;)
(31,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^