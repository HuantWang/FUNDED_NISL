-----label-----
0
-----code-----
static void good2()
{
    if(globalFive==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
72,74
73,74
73,75
75,76
77,78
77,79
77,80
78,79
80,81
82,83
82,84
83,84
85,86
86,87
86,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
95,98
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,49,51,52,57,58,59,63,66,67,71,74,76,79,81,84,87,88,92,94,99,101,106,107,108,112,115,116,120,122
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
54,55
54,56
69,70
69,71
82,83
82,84
90,91
90,92
97,98
97,99
103,104
103,105
-----guardedBy-----
92,101
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(globalFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(globalFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(globalFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
globalFive==5
globalFive
globalFive
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(18,29,0)
(28,47,0)
(32,12,0)
(60,28,0)
(30,15,0)
(23,14,0)
(59,44,0)
(62,24,0)
(24,16,0)
(37,2,0)
(27,55,0)
(22,63,0)
(15,50,0)
(3,29,0)
(44,59,0)
(19,24,0)
(61,3,0)
(13,39,0)
(22,29,0)
(40,24,0)
(46,30,0)
(47,50,0)
(17,24,0)
(61,10,0)
(52,3,0)
(15,2,0)
(35,0,0)
(54,2,0)
(49,22,0)
(11,3,0)
(59,24,0)
(3,61,0)
(48,15,0)
(42,55,0)
(41,14,0)
(30,46,0)
(3,52,0)
(28,15,0)
(7,12,0)
(38,39,0)
(52,2,0)
(2,52,0)
(19,29,0)
(31,30,0)
(10,61,0)
(36,7,0)
(20,24,0)
(8,47,0)
(19,15,0)
(12,24,0)
(64,19,0)
(53,44,0)
(5,52,0)
(4,61,0)
(7,29,0)
(34,7,0)
(63,22,0)
(14,29,0)
(44,12,0)
(45,44,0)
(0,35,0)
(30,12,0)
(33,10,0)
(2,24,0)
(35,56,0)
(30,47,0)
(38,49,0)
(29,22,0)
(49,38,0)
(51,54,0)
(52,5,0)
(46,50,0)
(22,49,0)
(58,57,0)
(29,24,0)
(25,0,0)
(6,54,0)
(1,30,0)
(21,38,0)
(44,29,0)
(39,38,0)
(43,28,0)
(9,15,0)
(7,34,1)
(10,33,1)
(64,46,1)
(35,0,1)
(30,31,1)
(19,64,1)
(30,12,1)
(22,49,1)
(46,30,1)
(44,12,1)
(45,12,1)
(36,35,1)
(26,55,1)
(37,59,1)
(23,41,1)
(64,54,1)
(54,2,1)
(59,44,1)
(47,8,1)
(15,48,1)
(6,51,1)
(21,18,1)
(33,4,1)
(61,10,1)
(38,39,1)
(25,14,1)
(32,7,1)
(55,27,1)
(19,29,1)
(43,15,1)
(52,5,1)
(53,45,1)
(1,47,1)
(3,29,1)
(3,61,1)
(52,3,1)
(14,23,1)
(30,47,1)
(8,28,1)
(12,32,1)
(49,38,1)
(18,55,1)
(36,14,1)
(14,29,1)
(41,29,1)
(34,36,1)
(26,19,1)
(0,25,1)
(13,21,1)
(44,53,1)
(7,29,1)
(9,54,1)
(28,60,1)
(28,15,1)
(31,1,1)
(39,13,1)
(27,42,1)
(30,15,1)
(2,52,1)
(11,37,1)
(29,22,1)
(44,29,1)
(19,15,1)
(22,63,1)
(48,9,1)
(51,2,1)
(4,11,1)
(54,6,1)
(60,43,1)
(15,2,1)
(52,3,2)
(7,29,2)
(44,29,2)
(2,55,2)
(59,44,2)
(60,54,2)
(22,49,2)
(21,55,2)
(10,55,2)
(15,2,2)
(22,55,2)
(34,55,2)
(53,55,2)
(7,55,2)
(11,55,2)
(19,29,2)
(36,55,2)
(14,55,2)
(3,29,2)
(1,54,2)
(59,55,2)
(12,55,2)
(28,54,2)
(37,55,2)
(52,5,2)
(13,55,2)
(46,30,2)
(61,10,2)
(29,22,2)
(28,15,2)
(35,0,2)
(0,14,2)
(8,54,2)
(39,55,2)
(44,12,2)
(30,47,2)
(3,55,2)
(30,54,2)
(38,39,2)
(30,15,2)
(54,55,2)
(61,55,2)
(54,2,2)
(35,14,2)
(51,55,2)
(52,55,2)
(4,55,2)
(48,54,2)
(14,29,2)
(30,12,2)
(49,55,2)
(2,52,2)
(9,54,2)
(22,63,2)
(3,61,2)
(38,55,2)
(19,15,2)
(33,55,2)
(44,55,2)
(46,54,2)
(43,54,2)
(64,55,2)
(15,54,2)
(32,55,2)
(19,55,2)
(6,55,2)
(45,55,2)
(25,14,2)
(47,54,2)
(29,55,2)
(23,55,2)
(41,55,2)
(31,54,2)
(49,38,2)
(18,55,2)
-----------------------------------
(0,-1)
(1,data)
(2,tmpData = (int *)
(3,realloc(data, (130000)
(4,130000)
(5,int *)
(6,NULL)
(7,data[0])
(8,10)
(9,data)
(10,sizeof(int)
(11,data)
(12,data[0] = 5)
(13,int)
(14,data == NULL)
(15,data = tmpData)
(16,)
(17,tmpData)
(18,data)
(19,free(data)
(20,if (tmpData != NULL)
(21,100)
(22,(int *)
(23,NULL)
(24,)
(25,1)
(26,RET)
(27,5)
(28,data[0])
(29,* data = (int *)
(30,data[0])
(31,0)
(32,5)
(33,int)
(34,0)
(35,exit(-1)
(36,data)
(37,tmpData)
(38,100*sizeof(int)
(39,sizeof(int)
(40,data)
(41,data)
(42,globalFive)
(43,data)
(44,data[0])
(45,data)
(46,printIntLine(data[0])
(47,data[0] = 10)
(48,tmpData)
(49,malloc(100*sizeof(int)
(50,)
(51,tmpData)
(52,(int *)
(53,0)
(54,tmpData != NULL)
(55,globalFive==5)
(56,)
(57,)
(58,if(globalFive==5)
(59,printIntLine(data[0])
(60,0)
(61,(130000)
(62,if (data == NULL)
(63,int *)
(64,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^