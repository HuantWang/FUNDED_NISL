-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_10_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(globalTrue)
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
29,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
36,39
37,38
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,30,35,38,39,40,44,46,51,53
-----computeFrom-----
14,15
14,16
20,21
20,22
33,34
33,35
42,43
42,44
-----guardedBy-----
44,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_10_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(globalTrue)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_10_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_10_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(globalTrue)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(globalTrue)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
globalTrue
globalTrue
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(7,18,0)
(0,12,0)
(11,2,0)
(7,9,0)
(24,22,0)
(25,7,0)
(10,2,0)
(8,9,0)
(4,18,0)
(16,0,0)
(6,25,0)
(14,12,0)
(23,12,0)
(21,18,0)
(19,22,0)
(17,7,0)
(3,7,0)
(5,3,0)
(0,22,0)
(1,3,0)
(18,7,0)
(2,22,0)
(25,20,0)
(12,0,0)
(7,18,1)
(17,15,1)
(18,4,1)
(15,0,1)
(21,17,1)
(25,6,1)
(3,7,1)
(6,3,1)
(12,14,1)
(3,1,1)
(25,7,1)
(0,12,1)
(14,23,1)
(4,21,1)
(13,3,1)
(5,7,1)
(13,25,1)
(16,2,1)
(1,5,1)
(23,16,1)
(2,10,1)
(10,11,1)
(13,15,1)
(25,3,2)
(7,15,2)
(7,18,2)
(3,7,2)
(17,15,2)
(5,15,2)
(0,12,2)
(6,3,2)
(25,7,2)
(1,15,2)
(4,15,2)
(3,15,2)
(18,15,2)
(21,15,2)
-----------------------------------
(0,data = fopen("BadSource_fopen.txt", "w+")
(1,NULL)
(2,data = NULL)
(3,data != NULL)
(4,"w+")
(5,data)
(6,data)
(7,data = fopen("BadSink_fopen.txt", "w+")
(8,if (data != NULL)
(9,)
(10,NULL)
(11,data)
(12,fopen("BadSource_fopen.txt", "w+")
(13,RET)
(14,"w+")
(15,globalTrue)
(16,data)
(17,data)
(18,fopen("BadSink_fopen.txt", "w+")
(19,data)
(20,)
(21,"BadSink_fopen.txt")
(22,)
(23,"BadSource_fopen.txt")
(24,if(globalTrue)
(25,fclose(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^