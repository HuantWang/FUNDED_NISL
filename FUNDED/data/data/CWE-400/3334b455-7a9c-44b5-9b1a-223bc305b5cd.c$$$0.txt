-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,21,26,27,32,36,38,41,43,47,48,54,55,56,57,63,64,65,66,70,74,75,78,80
-----computeFrom-----
14,15
14,16
30,31
30,32
42,43
42,44
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(31,4,0)
(39,22,0)
(3,31,0)
(0,32,0)
(27,28,0)
(14,17,0)
(15,30,0)
(36,33,0)
(9,5,0)
(22,5,0)
(20,32,0)
(22,39,0)
(35,20,0)
(21,11,0)
(6,33,0)
(7,1,0)
(11,13,0)
(13,11,0)
(33,5,0)
(26,17,0)
(34,28,0)
(41,31,0)
(18,36,0)
(28,17,0)
(13,33,0)
(25,5,0)
(38,17,0)
(20,1,0)
(4,25,0)
(19,25,0)
(1,20,0)
(4,31,0)
(10,15,0)
(33,7,0)
(36,39,0)
(24,13,0)
(16,36,0)
(37,13,0)
(12,4,0)
(31,33,0)
(7,40,0)
(40,7,0)
(7,33,0)
(1,7,0)
(11,9,0)
(32,20,0)
(39,36,0)
(23,9,0)
(16,18,1)
(3,41,1)
(10,8,1)
(0,35,1)
(35,6,1)
(37,33,1)
(6,8,1)
(25,19,1)
(41,9,1)
(9,23,1)
(31,33,1)
(28,27,1)
(19,4,1)
(18,25,1)
(13,24,1)
(31,3,1)
(15,10,1)
(22,39,1)
(4,31,1)
(4,12,1)
(2,22,1)
(11,21,1)
(2,15,1)
(23,11,1)
(7,40,1)
(33,7,1)
(39,36,1)
(11,13,1)
(27,34,1)
(29,2,1)
(36,16,1)
(13,33,1)
(7,1,1)
(32,0,1)
(8,28,1)
(24,37,1)
(1,20,1)
(12,31,1)
(36,33,1)
(21,13,1)
(20,32,1)
(24,8,2)
(37,8,2)
(11,8,2)
(16,8,2)
(11,13,2)
(7,40,2)
(7,8,2)
(13,8,2)
(20,32,2)
(6,8,2)
(22,39,2)
(25,8,2)
(9,8,2)
(3,8,2)
(39,8,2)
(31,8,2)
(36,33,2)
(12,8,2)
(4,31,2)
(0,8,2)
(1,8,2)
(19,8,2)
(1,20,2)
(13,33,2)
(21,8,2)
(20,8,2)
(4,8,2)
(33,7,2)
(31,33,2)
(39,36,2)
(32,8,2)
(36,8,2)
(15,8,2)
(18,8,2)
(33,8,2)
(7,1,2)
(41,8,2)
(10,8,2)
(22,8,2)
(35,8,2)
(23,8,2)
-----------------------------------
(0,twoIntsStruct)
(1,ALLOCA(100*sizeof(twoIntsStruct)
(2,STATIC_CONST_TRUE)
(3,0)
(4,data[0].intTwo)
(5,)
(6,data)
(7,(twoIntsStruct *)
(8,STATIC_CONST_FALSE)
(9,data[0].intOne = 0)
(10,"Benign, fixed string")
(11,data[0].intOne)
(12,intTwo)
(13,data[0])
(14,if(STATIC_CONST_FALSE)
(15,printLine("Benign, fixed string")
(16,0)
(17,)
(18,data)
(19,0)
(20,100*sizeof(twoIntsStruct)
(21,intOne)
(22,printStructLine(&data[0])
(23,0)
(24,0)
(25,data[0].intTwo = 0)
(26,data)
(27,NULL)
(28,data = NULL)
(29,RET)
(30,)
(31,data[0])
(32,sizeof(twoIntsStruct)
(33,data = (twoIntsStruct *)
(34,data)
(35,100)
(36,data[0])
(37,data)
(38,if(STATIC_CONST_TRUE)
(39,&data[0])
(40,twoIntsStruct *)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^