-----label-----
0
-----code-----
static void goodB2G2()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Open a file without closing it */
    data = fopen("BadSource_fopen.txt", "w+");
    if(staticReturnsTrue())
    {
        /* FIX: If the file is still opened, close it */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,31,36,38,43,45
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
-----guardedBy-----
36,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Open a file without closing it */    data = fopen("BadSource_fopen.txt", "w+");    if(staticReturnsTrue())    {        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }    }}
static void
goodB2G2()
goodB2G2
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Open a file without closing it */    data = fopen("BadSource_fopen.txt", "w+");    if(staticReturnsTrue())    {        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(staticReturnsTrue())    {        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }    }
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(18,11,0)
(7,20,0)
(16,11,0)
(20,16,0)
(13,2,0)
(3,8,0)
(2,10,0)
(14,9,0)
(12,10,0)
(17,10,0)
(9,4,0)
(1,2,0)
(19,11,0)
(11,16,0)
(6,20,0)
(16,10,0)
(9,16,0)
(5,16,0)
(11,18,1)
(9,14,1)
(0,9,1)
(18,19,1)
(20,16,1)
(7,6,1)
(0,15,1)
(19,5,1)
(2,13,1)
(13,1,1)
(20,7,1)
(9,16,1)
(16,11,1)
(14,20,1)
(0,20,1)
(6,15,1)
(5,2,1)
(15,16,1)
(20,15,2)
(14,20,2)
(6,15,2)
(16,11,2)
(20,16,2)
(9,16,2)
(7,15,2)
(9,20,2)
-----------------------------------
(0,RET)
(1,data)
(2,data = NULL)
(3,if (data != NULL)
(4,)
(5,data)
(6,data)
(7,NULL)
(8,)
(9,fclose(data)
(10,)
(11,fopen("BadSource_fopen.txt", "w+")
(12,data)
(13,NULL)
(14,data)
(15,staticReturnsTrue()
(16,data = fopen("BadSource_fopen.txt", "w+")
(17,if(staticReturnsTrue()
(18,"w+")
(19,"BadSource_fopen.txt")
(20,data != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^