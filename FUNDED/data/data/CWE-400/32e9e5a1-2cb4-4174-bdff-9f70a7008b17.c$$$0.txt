-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_66b_goodB2GSink(int countArray[])
{
    int count = countArray[2];
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_good.txt";
        /* FIX: Validate count before using it as the for loop variant to write to a file */
        if (count > 0 && count <= 20)
        {
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
48,50
49,50
49,51
50,51
50,52
51,52
54,55
54,56
55,56
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
81,82
81,83
81,84
81,85
82,83
83,84
83,85
84,85
87,88
87,89
88,89
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
106,107
108,109
108,110
108,111
108,112
108,113
109,110
111,112
113,114
114,115
114,116
117,118
117,119
118,119
120,121
122,123
124,125
125,126
125,127
126,127
129,130
129,131
130,131
132,133
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,6,8,9,13,15,19,20,25,27,29,33,35,36,39,42,44,45,47,52,53,56,57,62,65,67,68,72,74,79,80,85,86,89,93,94,96,99,105,107,110,112,115,116,119,121,123,127,128,131,136,138
-----computeFrom-----
49,50
49,51
50,51
50,52
54,55
54,56
60,61
60,62
70,71
70,72
83,84
83,85
87,88
87,89
102,103
102,104
-----guardedBy-----
56,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_66b_goodB2GSink(int countArray[]){    int count = countArray[2];    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_66b_goodB2GSink(int countArray[])
CWE400_Resource_Exhaustion__fgets_fwrite_66b_goodB2GSink
int countArray[]
int
countArray[]
countArray
[]
{    int count = countArray[2];    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count = countArray[2];
int count = countArray[2];
int
count = countArray[2]
count
= countArray[2]
countArray[2]
countArray
countArray
2
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(70,4,0)
(44,4,0)
(36,34,0)
(31,34,0)
(50,25,0)
(28,21,0)
(71,34,0)
(34,43,0)
(46,54,0)
(62,3,0)
(39,4,0)
(38,62,0)
(65,20,0)
(54,62,0)
(57,39,0)
(19,72,0)
(6,43,0)
(15,54,0)
(43,41,0)
(22,35,0)
(63,42,0)
(43,59,0)
(64,35,0)
(16,39,0)
(47,14,0)
(29,71,0)
(20,32,0)
(69,26,0)
(62,54,0)
(61,59,0)
(1,59,0)
(18,31,0)
(21,35,0)
(5,8,0)
(25,30,0)
(41,42,0)
(9,72,0)
(23,72,0)
(67,13,0)
(68,41,0)
(28,62,0)
(14,72,0)
(57,62,0)
(53,42,0)
(60,41,0)
(58,34,0)
(35,62,0)
(13,27,0)
(48,72,0)
(26,4,0)
(41,43,0)
(45,23,0)
(66,72,0)
(17,23,0)
(7,33,0)
(42,72,0)
(34,71,0)
(49,59,0)
(34,27,0)
(27,13,0)
(72,3,0)
(52,8,0)
(57,0,0)
(55,14,0)
(12,3,0)
(2,28,0)
(34,31,0)
(39,57,0)
(24,28,0)
(37,10,0)
(21,28,0)
(35,21,0)
(0,57,0)
(25,43,0)
(40,57,0)
(54,51,0)
(27,34,0)
(8,43,0)
(26,4,1)
(41,68,1)
(31,18,1)
(15,38,1)
(34,36,1)
(16,4,1)
(23,45,1)
(28,24,1)
(68,60,1)
(44,70,1)
(14,47,1)
(34,43,1)
(4,44,1)
(65,8,1)
(25,50,1)
(27,13,1)
(54,46,1)
(27,34,1)
(26,69,1)
(71,29,1)
(8,5,1)
(50,11,1)
(39,57,1)
(34,71,1)
(17,14,1)
(45,17,1)
(6,21,1)
(5,52,1)
(25,43,1)
(33,7,1)
(8,43,1)
(57,62,1)
(20,65,1)
(64,42,1)
(36,71,1)
(29,31,1)
(34,31,1)
(18,58,1)
(70,20,1)
(52,43,1)
(47,55,1)
(22,64,1)
(69,33,1)
(54,51,1)
(35,62,1)
(21,35,1)
(70,8,1)
(35,22,1)
(57,40,1)
(42,63,1)
(67,39,1)
(41,42,1)
(57,0,1)
(55,62,1)
(63,53,1)
(7,27,1)
(56,25,1)
(16,26,1)
(21,28,1)
(43,41,1)
(60,6,1)
(56,21,1)
(62,54,1)
(69,27,1)
(56,11,1)
(46,15,1)
(2,35,1)
(28,62,1)
(24,2,1)
(40,16,1)
(13,67,1)
(11,39,1)
(58,13,1)
(53,23,1)
(39,4,1)
(36,39,2)
(57,39,2)
(43,21,2)
(57,0,2)
(6,21,2)
(8,21,2)
(33,27,2)
(68,21,2)
(35,62,2)
(4,21,2)
(34,43,2)
(29,39,2)
(57,62,2)
(60,21,2)
(8,43,2)
(31,39,2)
(20,8,2)
(69,39,2)
(2,35,2)
(16,39,2)
(25,43,2)
(62,54,2)
(27,39,2)
(11,21,2)
(25,11,2)
(28,62,2)
(26,4,2)
(18,39,2)
(50,11,2)
(40,21,2)
(34,31,2)
(39,4,2)
(70,21,2)
(39,57,2)
(34,39,2)
(40,39,2)
(54,51,2)
(39,39,2)
(24,35,2)
(34,71,2)
(58,39,2)
(27,13,2)
(21,35,2)
(28,35,2)
(41,21,2)
(21,28,2)
(71,39,2)
(39,21,2)
(43,41,2)
(7,27,2)
(52,21,2)
(67,39,2)
(16,21,2)
(5,21,2)
(26,39,2)
(13,39,2)
(41,42,2)
(65,8,2)
(44,21,2)
(27,34,2)
(57,21,2)
-----------------------------------
(0,size_t)
(1,if (pFile)
(2,count)
(3,)
(4,i = 0)
(5,NULL)
(6,pFile)
(7,1)
(8,pFile == NULL)
(9,pFile)
(10,)
(11,pFile)
(12,count)
(13,strlen(SENTENCE)
(14,i = 0)
(15,countArray)
(16,i)
(17,pFile)
(18,char)
(19,filename)
(20,exit(1)
(21,count > 0 && count <= 20)
(22,0)
(23,*pFile = NULL)
(24,20)
(25,fclose(pFile)
(26,i++)
(27,strlen(SENTENCE)
(28,count <= 20)
(29,SENTENCE)
(30,)
(31,sizeof(char)
(32,)
(33,exit(1)
(34,fwrite(SENTENCE, sizeof(char)
(35,count > 0)
(36,pFile)
(37,if (strlen(SENTENCE)
(38,count)
(39,i < (size_t)
(40,count)
(41,fopen(filename, "w+")
(42,*filename = "output_good.txt")
(43,pFile = fopen(filename, "w+")
(44,0)
(45,NULL)
(46,2)
(47,0)
(48,if (count > 0 && count <= 20)
(49,if (pFile == NULL)
(50,pFile)
(51,int countArray[])
(52,pFile)
(53,filename)
(54,countArray[2])
(55,i)
(56,RET)
(57,(size_t)
(58,SENTENCE)
(59,)
(60,filename)
(61,for (i = 0; i < (size_t)
(62,count = countArray[2])
(63,"output_good.txt")
(64,count)
(65,1)
(66,i)
(67,SENTENCE)
(68,"w+")
(69,i)
(70,i)
(71,strlen(SENTENCE)
(72,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^