-----label-----
0
-----code-----
static int driver_name_activated(Activation *activation, Peer *receiver) {
        ActivationRequest *request, *request_safe;
        ActivationMessage *message, *message_safe;
        int r;

        if (!activation)
                return 0;

        /* in case the name is dropped again in the future, we should request it again */
        activation->requested = false;

        c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link) {
                Peer *sender;

                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);
                if (sender) {
                        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;

                        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);
                        c_dvar_write(&var, "(");
                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);
                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);

                        r = driver_send_reply(sender, &var, request->serial);
                        if (r)
                                return error_trace(r);
                }

                activation_request_free(request);
        }

        c_list_for_each_entry_safe(message, message_safe, &activation->activation_messages, link) {
                NameSet sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names);
                Peer *sender;

                sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id);

                r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message);
                if (r) {
                        switch (r) {
                        case PEER_E_QUOTA:
                                if (sender)
                                        r = driver_send_error(sender, message_read_serial(message->message),
                                                              "org.freedesktop.DBus.Error.LimitsExceeded",
                                                              driver_error_to_string(DRIVER_E_QUOTA));
                                else
                                        r = 0;

                                break;
                        case PEER_E_EXPECTED_REPLY_EXISTS:
                                if (sender)
                                        r = driver_send_error(sender, message_read_serial(message->message),
                                                              "org.freedesktop.DBus.Error.AccessDenied",
                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));
                                else
                                        r = 0;

                                break;
                        case PEER_E_RECEIVE_DENIED:
                                if (sender)
                                        r = driver_send_error(sender, message_read_serial(message->message),
                                                              "org.freedesktop.DBus.Error.AccessDenied",
                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));
                                else
                                        r = 0;

                                break;
                        case PEER_E_SEND_DENIED:
                                if (sender)
                                        r = driver_send_error(sender, message_read_serial(message->message),
                                                              "org.freedesktop.DBus.Error.AccessDenied",
                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));
                                else
                                        r = 0;

                                break;
                        case PEER_E_UNEXPECTED_FDS:
                                if (sender)
                                        r = driver_send_error(sender, message_read_serial(message->message),
                                                              "org.freedesktop.DBus.Error.Failed",
                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));
                                else
                                        r = 0;

                                break;
                        }

                        if (r)
                                return error_fold(r);
                }

                activation_message_free(message);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
18,19
19,20
19,21
19,22
20,21
22,23
22,24
25,26
25,27
28,29
29,30
29,31
29,32
30,31
32,33
32,34
35,36
35,37
38,39
39,40
39,41
41,42
43,44
43,45
44,45
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
57,60
57,61
57,62
58,59
60,61
62,63
64,65
65,66
65,67
66,67
69,70
71,72
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
77,78
77,79
80,81
81,82
81,83
82,83
84,85
84,86
84,87
85,86
87,88
88,89
88,90
89,90
89,91
90,91
94,95
94,96
95,96
98,99
98,100
99,100
101,102
101,103
101,104
101,105
101,106
101,107
101,108
101,109
101,110
102,103
103,104
103,105
104,105
106,107
107,108
109,110
110,111
111,112
111,113
112,113
114,115
114,116
116,117
117,118
119,120
120,121
120,122
120,123
120,124
120,125
121,122
123,124
124,125
126,127
127,128
127,129
128,129
130,131
132,133
135,136
136,137
136,138
136,139
137,138
139,140
140,141
143,144
144,145
144,146
144,147
144,148
144,149
145,146
147,148
148,149
150,151
152,153
152,154
153,154
156,157
158,159
159,160
159,161
159,162
159,163
160,161
162,163
163,164
166,167
168,169
169,170
169,171
170,171
172,173
172,174
172,175
172,176
173,174
175,176
177,178
178,179
180,181
180,182
181,182
184,185
184,186
185,186
187,188
188,189
188,190
189,190
191,192
193,194
194,195
194,196
195,196
197,198
199,200
200,201
200,202
200,203
200,204
200,205
201,202
203,204
205,206
207,208
208,209
208,210
209,210
212,213
214,215
215,216
215,217
215,218
215,219
215,220
215,221
216,217
217,218
217,219
218,219
220,221
220,222
222,223
223,224
223,225
224,225
226,227
226,228
227,228
230,231
231,232
231,233
232,233
234,235
234,236
237,238
238,239
238,240
239,240
241,242
241,243
241,244
242,243
244,245
245,246
245,247
246,247
246,248
247,248
251,252
251,253
252,253
252,254
253,254
253,255
254,255
259,260
260,261
260,262
261,262
263,264
263,265
263,266
263,267
263,268
263,269
263,270
263,271
264,265
266,267
266,268
267,268
270,271
271,272
273,274
273,275
273,276
274,275
276,277
277,278
277,279
278,279
281,282
283,284
283,285
284,285
287,288
287,289
288,289
288,290
289,290
289,291
290,291
295,296
297,298
297,299
298,299
301,302
301,303
302,303
304,305
304,306
305,306
305,307
306,307
308,309
308,310
308,311
308,312
308,313
308,314
308,315
308,316
308,317
308,318
308,319
308,320
308,321
308,322
308,323
309,310
310,311
312,313
312,314
312,315
313,314
315,316
316,317
316,318
317,318
319,320
319,321
319,322
319,323
319,324
320,321
322,323
324,325
324,326
325,326
327,328
327,329
328,329
332,333
332,334
333,334
335,336
337,338
338,339
338,340
339,340
343,344
344,345
346,347
346,348
346,349
347,348
349,350
350,351
350,352
351,352
353,354
353,355
353,356
353,357
353,358
354,355
356,357
358,359
358,360
359,360
361,362
361,363
362,363
366,367
366,368
367,368
369,370
371,372
372,373
372,374
373,374
377,378
378,379
380,381
380,382
380,383
381,382
383,384
384,385
384,386
385,386
387,388
387,389
387,390
387,391
387,392
388,389
390,391
392,393
392,394
393,394
395,396
395,397
396,397
400,401
400,402
401,402
403,404
405,406
406,407
406,408
407,408
411,412
412,413
414,415
414,416
414,417
415,416
417,418
418,419
418,420
419,420
421,422
421,423
421,424
421,425
421,426
422,423
424,425
426,427
426,428
427,428
429,430
429,431
430,431
434,435
434,436
435,436
437,438
439,440
440,441
440,442
441,442
445,446
446,447
448,449
448,450
448,451
449,450
451,452
452,453
452,454
453,454
455,456
455,457
455,458
455,459
455,460
456,457
458,459
460,461
460,462
461,462
463,464
463,465
464,465
468,469
468,470
469,470
471,472
473,474
474,475
474,476
475,476
479,480
479,481
480,481
482,483
483,484
483,485
484,485
486,487
488,489
489,490
489,491
490,491
492,493
494,495
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,26,27,31,33,34,36,37,40,42,46,48,53,54,55,59,61,63,67,68,70,76,78,79,83,86,91,92,93,96,97,100,105,108,113,115,118,122,125,129,131,133,134,138,141,142,146,149,151,154,155,157,161,164,165,167,171,174,176,179,182,183,186,190,192,196,198,202,204,206,210,211,213,219,221,225,228,229,233,235,236,240,243,248,249,250,255,256,257,258,262,265,268,269,272,275,279,280,282,285,286,291,292,293,294,296,299,300,303,307,311,314,318,321,323,326,329,330,331,334,336,340,341,342,345,348,352,355,357,360,363,364,365,368,370,374,375,376,379,382,386,389,391,394,397,398,399,402,404,408,409,410,413,416,420,423,425,428,431,432,433,436,438,442,443,444,447,450,454,457,459,462,465,466,467,470,472,476,477,478,481,485,487,491,493,495
-----computeFrom-----
50,51
50,52
81,82
81,83
127,128
127,129
169,170
169,171
238,239
238,240
260,261
260,262
316,317
316,318
338,339
338,340
350,351
350,352
372,373
372,374
384,385
384,386
406,407
406,408
418,419
418,420
440,441
440,442
452,453
452,454
474,475
474,476
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_name_activated(Activation *activation, Peer *receiver) {        ActivationRequest *request, *request_safe;        ActivationMessage *message, *message_safe;        int r;        if (!activation)                return 0;        /* in case the name is dropped again in the future, we should request it again */        activation->requested = false;        c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link) {                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);                if (sender) {                        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, request->serial);                        if (r)                                return error_trace(r);                }                activation_request_free(request);        }        c_list_for_each_entry_safe(message, message_safe, &activation->activation_messages, link) {                NameSet sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names);                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id);                r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message);                if (r) {                        switch (r) {                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }                        if (r)                                return error_fold(r);                }                activation_message_free(message);        }        return 0;}
static int
driver_name_activated(Activation *activation, Peer *receiver)
driver_name_activated
Activation *activation
Activation
Activation
*activation
*
activation
Peer *receiver
Peer
Peer
*receiver
*
receiver
{        ActivationRequest *request, *request_safe;        ActivationMessage *message, *message_safe;        int r;        if (!activation)                return 0;        /* in case the name is dropped again in the future, we should request it again */        activation->requested = false;        c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link) {                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);                if (sender) {                        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, request->serial);                        if (r)                                return error_trace(r);                }                activation_request_free(request);        }        c_list_for_each_entry_safe(message, message_safe, &activation->activation_messages, link) {                NameSet sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names);                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id);                r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message);                if (r) {                        switch (r) {                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }                        if (r)                                return error_fold(r);                }                activation_message_free(message);        }        return 0;}
ActivationRequest *request, *request_safe;
ActivationRequest *request, *request_safe;
ActivationRequest
ActivationRequest
*request
*
request
*request_safe
*
request_safe
ActivationMessage *message, *message_safe;
ActivationMessage *message, *message_safe;
ActivationMessage
ActivationMessage
*message
*
message
*message_safe
*
message_safe
int r;
int r;
int
r
r
if (!activation)                return 0;
!activation
activation
activation
return 0;
0
activation->requested = false;
activation->requested = false
activation->requested
activation
activation
requested
false
c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link)
c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link)
c_list_for_each_entry_safe
c_list_for_each_entry_safe
request
request
request_safe
request_safe
&activation->activation_requests
activation->activation_requests
activation
activation
activation_requests
link
link
)
{                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);                if (sender) {                        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, request->serial);                        if (r)                                return error_trace(r);                }                activation_request_free(request);        }
Peer *sender;
Peer *sender;
Peer
Peer
*sender
*
sender
sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);
sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
sender
sender
peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
peer_registry_find_peer
peer_registry_find_peer
&receiver->bus->peers
receiver->bus->peers
receiver->bus
receiver
receiver
bus
peers
request->sender_id
request
request
sender_id
if (sender) {                        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, request->serial);                        if (r)                                return error_trace(r);                }
sender
sender
{                        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, request->serial);                        if (r)                                return error_trace(r);                }
_c_cleanup_(c_dvar_deinit)
_c_cleanup_(c_dvar_deinit)
_c_cleanup_
_c_cleanup_
(c_dvar_deinit)
c_dvar_deinit
c_dvar_deinit
)
CDVar var = C_DVAR_INIT;
CDVar var = C_DVAR_INIT;
CDVar
CDVar
var = C_DVAR_INIT
var
= C_DVAR_INIT
C_DVAR_INIT
C_DVAR_INIT
c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1);
c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), driver_type_out_u, 1)
c_dvar_begin_write
c_dvar_begin_write
&var
var
var
(__BYTE_ORDER == __BIG_ENDIAN)
__BYTE_ORDER == __BIG_ENDIAN
__BYTE_ORDER
__BYTE_ORDER
__BIG_ENDIAN
__BIG_ENDIAN
driver_type_out_u
driver_type_out_u
1
c_dvar_write(&var, "(");
c_dvar_write(&var, "(")
c_dvar_write
c_dvar_write
&var
var
var
"("
driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);
driver_write_reply_header(&var, sender, request->serial, driver_type_out_u)
driver_write_reply_header
driver_write_reply_header
&var
var
var
sender
sender
request->serial
request
request
serial
driver_type_out_u
driver_type_out_u
c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);
c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS)
c_dvar_write
c_dvar_write
&var
var
var
"(u)"
DBUS_START_REPLY_SUCCESS
DBUS_START_REPLY_SUCCESS
r = driver_send_reply(sender, &var, request->serial);
r = driver_send_reply(sender, &var, request->serial)
r
r
driver_send_reply(sender, &var, request->serial)
driver_send_reply
driver_send_reply
sender
sender
&var
var
var
request->serial
request
request
serial
if (r)                                return error_trace(r);
r
r
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
activation_request_free(request);
activation_request_free(request)
activation_request_free
activation_request_free
request
request
c_list_for_each_entry_safe(message, message_safe, &activation->activation_messages, link)
c_list_for_each_entry_safe(message, message_safe, &activation->activation_messages, link)
c_list_for_each_entry_safe
c_list_for_each_entry_safe
message
message
message_safe
message_safe
&activation->activation_messages
activation->activation_messages
activation
activation
activation_messages
link
link
)
{                NameSet sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names);                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id);                r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message);                if (r) {                        switch (r) {                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }                        if (r)                                return error_fold(r);                }                activation_message_free(message);        }
NameSet sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names);
NameSet sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names)
sender_names
= NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names)
NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names)
NAME_SET_INIT_FROM_SNAPSHOT
NAME_SET_INIT_FROM_SNAPSHOT
message->senders_names
message
message
senders_names
Peer *sender;
Peer *sender;
Peer
Peer
*sender
*
sender
sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id);
sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id)
sender
sender
peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id)
peer_registry_find_peer
peer_registry_find_peer
&receiver->bus->peers
receiver->bus->peers
receiver->bus
receiver
receiver
bus
peers
message->message->metadata.sender_id
message->message->metadata
message->message
message
message
message
metadata
sender_id
r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message);
r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message)
r
r
peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message)
peer_queue_unicast
peer_queue_unicast
message->senders_policy
message
message
senders_policy
&sender_names
sender_names
sender_names
sender ? &sender->owned_replies : NULL
sender
sender
&sender->owned_replies
sender->owned_replies
sender
sender
owned_replies
NULL
NULL
message->user
message
message
user
message->message->metadata.sender_id
message->message->metadata
message->message
message
message
message
metadata
sender_id
receiver
receiver
message->message
message
message
message
if (r) {                        switch (r) {                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }                        if (r)                                return error_fold(r);                }
r
r
{                        switch (r) {                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }                        if (r)                                return error_fold(r);                }
switch (r) {                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }
r
r
{                        case PEER_E_QUOTA:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;                                break;                        case PEER_E_EXPECTED_REPLY_EXISTS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;                                break;                        case PEER_E_RECEIVE_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_SEND_DENIED:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;                                break;                        case PEER_E_UNEXPECTED_FDS:                                if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;                                break;                        }
case PEER_E_QUOTA:
PEER_E_QUOTA
PEER_E_QUOTA
if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));                                else                                        r = 0;
sender
sender
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA));
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA))
r
r
driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.LimitsExceeded",                                                              driver_error_to_string(DRIVER_E_QUOTA))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message->message)
message_read_serial
message_read_serial
message->message
message
message
message
"org.freedesktop.DBus.Error.LimitsExceeded"
driver_error_to_string(DRIVER_E_QUOTA)
driver_error_to_string
driver_error_to_string
DRIVER_E_QUOTA
DRIVER_E_QUOTA
r = 0;
r = 0
r
r
0
break;
case PEER_E_EXPECTED_REPLY_EXISTS:
PEER_E_EXPECTED_REPLY_EXISTS
PEER_E_EXPECTED_REPLY_EXISTS
if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));                                else                                        r = 0;
sender
sender
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS));
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS))
r
r
driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message->message)
message_read_serial
message_read_serial
message->message
message
message
message
"org.freedesktop.DBus.Error.AccessDenied"
driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS)
driver_error_to_string
driver_error_to_string
DRIVER_E_EXPECTED_REPLY_EXISTS
DRIVER_E_EXPECTED_REPLY_EXISTS
r = 0;
r = 0
r
r
0
break;
case PEER_E_RECEIVE_DENIED:
PEER_E_RECEIVE_DENIED
PEER_E_RECEIVE_DENIED
if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));                                else                                        r = 0;
sender
sender
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED));
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED))
r
r
driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_RECEIVE_DENIED))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message->message)
message_read_serial
message_read_serial
message->message
message
message
message
"org.freedesktop.DBus.Error.AccessDenied"
driver_error_to_string(DRIVER_E_RECEIVE_DENIED)
driver_error_to_string
driver_error_to_string
DRIVER_E_RECEIVE_DENIED
DRIVER_E_RECEIVE_DENIED
r = 0;
r = 0
r
r
0
break;
case PEER_E_SEND_DENIED:
PEER_E_SEND_DENIED
PEER_E_SEND_DENIED
if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));                                else                                        r = 0;
sender
sender
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED));
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED))
r
r
driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.AccessDenied",                                                              driver_error_to_string(DRIVER_E_SEND_DENIED))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message->message)
message_read_serial
message_read_serial
message->message
message
message
message
"org.freedesktop.DBus.Error.AccessDenied"
driver_error_to_string(DRIVER_E_SEND_DENIED)
driver_error_to_string
driver_error_to_string
DRIVER_E_SEND_DENIED
DRIVER_E_SEND_DENIED
r = 0;
r = 0
r
r
0
break;
case PEER_E_UNEXPECTED_FDS:
PEER_E_UNEXPECTED_FDS
PEER_E_UNEXPECTED_FDS
if (sender)                                        r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));                                else                                        r = 0;
sender
sender
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS));
r = driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS))
r
r
driver_send_error(sender, message_read_serial(message->message),                                                              "org.freedesktop.DBus.Error.Failed",                                                              driver_error_to_string(DRIVER_E_UNEXPECTED_FDS))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message->message)
message_read_serial
message_read_serial
message->message
message
message
message
"org.freedesktop.DBus.Error.Failed"
driver_error_to_string(DRIVER_E_UNEXPECTED_FDS)
driver_error_to_string
driver_error_to_string
DRIVER_E_UNEXPECTED_FDS
DRIVER_E_UNEXPECTED_FDS
r = 0;
r = 0
r
r
0
break;
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
activation_message_free(message);
activation_message_free(message)
activation_message_free
activation_message_free
message
message
return 0;
0
-----joern-----
(29,89,0)
(169,106,0)
(69,85,0)
(152,104,0)
(218,95,0)
(5,149,0)
(67,215,0)
(87,36,0)
(235,85,0)
(31,86,0)
(44,192,0)
(126,47,0)
(115,164,0)
(157,231,0)
(18,98,0)
(128,215,0)
(197,25,0)
(11,198,0)
(199,214,0)
(108,218,0)
(117,67,0)
(122,150,0)
(53,64,0)
(20,231,0)
(151,168,0)
(237,159,0)
(208,76,0)
(19,80,0)
(143,9,0)
(130,153,0)
(199,103,0)
(107,224,0)
(41,36,0)
(101,138,0)
(80,94,0)
(0,214,0)
(68,196,0)
(175,49,0)
(173,132,0)
(226,37,0)
(129,119,0)
(123,143,0)
(218,108,0)
(73,85,0)
(1,123,0)
(116,98,0)
(90,119,0)
(162,208,0)
(124,85,0)
(71,85,0)
(88,194,0)
(95,166,0)
(170,104,0)
(44,198,0)
(95,134,0)
(81,76,0)
(18,126,0)
(5,169,0)
(194,88,0)
(141,85,0)
(138,201,0)
(7,155,0)
(36,94,0)
(84,238,0)
(211,128,0)
(120,29,0)
(21,85,0)
(231,20,0)
(128,47,0)
(56,194,0)
(185,78,0)
(25,87,0)
(118,47,0)
(149,5,0)
(16,153,0)
(8,37,0)
(161,29,0)
(201,138,0)
(163,106,0)
(29,49,0)
(213,232,0)
(192,129,0)
(102,66,0)
(151,150,0)
(201,234,0)
(147,129,0)
(95,47,0)
(232,119,0)
(239,108,0)
(35,72,0)
(9,143,0)
(6,128,0)
(191,120,0)
(58,155,0)
(167,126,0)
(128,211,0)
(136,156,0)
(114,132,0)
(29,140,0)
(127,169,0)
(96,14,0)
(98,47,0)
(223,78,0)
(97,149,0)
(226,236,0)
(151,236,0)
(109,205,0)
(206,204,0)
(64,234,0)
(83,224,0)
(176,106,0)
(134,95,0)
(34,14,0)
(54,119,0)
(114,39,0)
(114,47,0)
(146,153,0)
(226,232,0)
(32,182,0)
(81,10,0)
(151,66,0)
(200,108,0)
(198,44,0)
(34,238,0)
(209,155,0)
(194,103,0)
(227,36,0)
(39,114,0)
(159,89,0)
(103,153,0)
(29,168,0)
(76,208,0)
(27,237,0)
(165,158,0)
(174,134,0)
(204,106,0)
(81,164,0)
(183,143,0)
(172,158,0)
(38,129,0)
(66,34,0)
(151,164,0)
(220,104,0)
(178,119,0)
(221,34,0)
(7,132,0)
(104,220,0)
(28,34,0)
(51,129,0)
(39,223,0)
(151,196,0)
(40,85,0)
(215,128,0)
(60,85,0)
(153,119,0)
(149,106,0)
(105,129,0)
(61,149,0)
(126,29,0)
(238,34,0)
(180,119,0)
(207,16,0)
(199,65,0)
(29,126,0)
(155,7,0)
(76,81,0)
(10,81,0)
(46,85,0)
(236,36,0)
(148,119,0)
(203,20,0)
(99,163,0)
(142,89,0)
(65,199,0)
(233,97,0)
(4,211,0)
(89,29,0)
(2,237,0)
(49,29,0)
(151,182,0)
(55,140,0)
(22,85,0)
(34,47,0)
(47,114,0)
(93,65,0)
(144,72,0)
(81,47,0)
(215,67,0)
(212,171,0)
(232,36,0)
(29,45,0)
(204,206,0)
(196,128,0)
(190,156,0)
(199,163,0)
(151,166,0)
(23,140,0)
(143,47,0)
(75,88,0)
(63,98,0)
(132,7,0)
(195,84,0)
(14,34,0)
(222,223,0)
(78,223,0)
(229,9,0)
(143,123,0)
(159,237,0)
(230,169,0)
(205,119,0)
(154,159,0)
(26,7,0)
(163,199,0)
(219,120,0)
(89,159,0)
(166,95,0)
(158,138,0)
(25,163,0)
(62,198,0)
(143,220,0)
(210,204,0)
(139,169,0)
(29,120,0)
(225,84,0)
(234,64,0)
(214,199,0)
(137,86,0)
(57,204,0)
(112,103,0)
(17,81,0)
(33,95,0)
(151,123,0)
(138,158,0)
(234,201,0)
(151,86,0)
(24,166,0)
(168,129,0)
(187,95,0)
(188,208,0)
(151,72,0)
(177,150,0)
(92,85,0)
(226,87,0)
(192,44,0)
(194,127,0)
(43,151,0)
(77,126,0)
(206,169,0)
(74,106,0)
(15,171,0)
(164,81,0)
(3,214,0)
(126,18,0)
(238,84,0)
(29,224,0)
(34,66,0)
(231,106,0)
(186,78,0)
(158,45,0)
(36,205,0)
(98,18,0)
(194,106,0)
(82,206,0)
(189,88,0)
(193,10,0)
(216,199,0)
(79,147,0)
(20,169,0)
(234,103,0)
(228,149,0)
(50,85,0)
(223,39,0)
(149,97,0)
(224,29,0)
(217,64,0)
(42,81,0)
(13,85,0)
(48,194,0)
(30,85,0)
(184,67,0)
(111,97,0)
(135,119,0)
(91,127,0)
(128,196,0)
(132,114,0)
(220,143,0)
(103,234,0)
(168,29,0)
(100,182,0)
(151,156,0)
(179,5,0)
(95,218,0)
(160,128,0)
(78,45,0)
(12,168,0)
(127,194,0)
(47,129,0)
(133,143,0)
(110,192,0)
(140,29,0)
(49,192,0)
(65,169,0)
(79,202,1)
(53,201,1)
(219,191,1)
(194,127,1)
(223,78,1)
(78,45,1)
(189,56,1)
(128,215,1)
(43,202,1)
(238,84,1)
(50,196,1)
(118,192,1)
(147,79,1)
(203,149,1)
(226,87,1)
(149,5,1)
(26,155,1)
(50,182,1)
(149,61,1)
(11,110,1)
(81,10,1)
(81,47,1)
(139,113,1)
(152,170,1)
(35,70,1)
(158,165,1)
(138,101,1)
(100,125,1)
(28,238,1)
(151,156,1)
(151,72,1)
(87,25,1)
(114,132,1)
(165,172,1)
(104,152,1)
(48,88,1)
(184,117,1)
(126,47,1)
(27,2,1)
(156,190,1)
(200,33,1)
(32,100,1)
(161,89,1)
(206,82,1)
(24,121,1)
(151,168,1)
(30,123,1)
(158,45,1)
(215,67,1)
(80,94,1)
(125,181,1)
(73,150,1)
(49,192,1)
(44,198,1)
(185,186,1)
(162,188,1)
(25,163,1)
(137,31,1)
(233,5,1)
(52,168,1)
(199,103,1)
(67,184,1)
(62,11,1)
(226,236,1)
(227,80,1)
(202,60,1)
(79,52,1)
(82,194,1)
(17,115,1)
(113,103,1)
(76,208,1)
(128,211,1)
(20,169,1)
(34,14,1)
(170,133,1)
(56,127,1)
(202,50,1)
(95,47,1)
(132,173,1)
(195,225,1)
(117,6,1)
(122,177,1)
(134,174,1)
(110,16,1)
(196,128,1)
(194,48,1)
(81,76,1)
(69,156,1)
(194,103,1)
(2,140,1)
(202,69,1)
(101,158,1)
(236,151,1)
(232,213,1)
(61,228,1)
(131,163,1)
(226,37,1)
(29,89,1)
(37,8,1)
(84,195,1)
(199,214,1)
(16,207,1)
(150,122,1)
(145,181,1)
(151,164,1)
(49,175,1)
(47,114,1)
(109,36,1)
(29,120,1)
(29,49,1)
(128,47,1)
(225,221,1)
(70,181,1)
(63,77,1)
(213,147,1)
(221,102,1)
(187,218,1)
(149,97,1)
(78,185,1)
(5,179,1)
(80,19,1)
(34,47,1)
(177,145,1)
(66,34,1)
(65,169,1)
(234,201,1)
(143,47,1)
(220,104,1)
(173,7,1)
(99,204,1)
(142,159,1)
(168,29,1)
(229,183,1)
(224,83,1)
(93,216,1)
(237,27,1)
(30,72,1)
(25,197,1)
(210,57,1)
(175,120,1)
(107,161,1)
(89,159,1)
(236,36,1)
(29,126,1)
(192,44,1)
(89,142,1)
(174,187,1)
(188,17,1)
(60,166,1)
(217,53,1)
(42,76,1)
(102,145,1)
(223,222,1)
(132,7,1)
(121,181,1)
(194,88,1)
(181,52,1)
(239,200,1)
(207,113,1)
(108,239,1)
(1,70,1)
(230,139,1)
(186,118,1)
(18,98,1)
(116,63,1)
(206,169,1)
(151,123,1)
(103,234,1)
(190,136,1)
(164,81,1)
(204,210,1)
(34,238,1)
(7,26,1)
(98,47,1)
(197,131,1)
(9,229,1)
(58,39,1)
(144,35,1)
(120,219,1)
(75,189,1)
(204,206,1)
(179,169,1)
(33,24,1)
(138,158,1)
(143,220,1)
(216,99,1)
(41,227,1)
(83,107,1)
(183,220,1)
(218,108,1)
(69,164,1)
(39,223,1)
(151,196,1)
(231,157,1)
(151,166,1)
(73,66,1)
(5,169,1)
(205,109,1)
(228,97,1)
(166,95,1)
(182,32,1)
(222,78,1)
(20,203,1)
(36,41,1)
(154,237,1)
(60,86,1)
(232,36,1)
(29,224,1)
(77,49,1)
(3,65,1)
(59,181,1)
(23,55,1)
(112,205,1)
(87,36,1)
(29,140,1)
(155,209,1)
(157,20,1)
(68,125,1)
(6,68,1)
(0,3,1)
(123,143,1)
(202,73,1)
(64,217,1)
(29,45,1)
(14,96,1)
(151,150,1)
(55,126,1)
(199,65,1)
(234,64,1)
(202,30,1)
(8,80,1)
(198,62,1)
(226,232,1)
(208,162,1)
(193,42,1)
(143,9,1)
(231,20,1)
(127,169,1)
(151,182,1)
(126,167,1)
(151,86,1)
(159,154,1)
(211,4,1)
(127,91,1)
(169,230,1)
(97,111,1)
(10,193,1)
(140,23,1)
(209,58,1)
(133,1,1)
(95,134,1)
(201,138,1)
(57,206,1)
(159,237,1)
(86,137,1)
(167,77,1)
(191,12,1)
(126,18,1)
(7,155,1)
(136,59,1)
(96,28,1)
(65,93,1)
(207,131,1)
(202,181,1)
(172,112,1)
(95,218,1)
(91,231,1)
(12,47,1)
(36,94,1)
(4,160,1)
(31,121,1)
(163,199,1)
(115,59,1)
(160,215,1)
(72,144,1)
(111,233,1)
(214,0,1)
(88,75,1)
(98,116,1)
(151,66,1)
(151,43,1)
(114,39,1)
(132,113,2)
(12,113,2)
(57,113,2)
(44,131,2)
(17,59,2)
(193,59,2)
(5,169,2)
(236,202,2)
(194,88,2)
(69,181,2)
(151,66,2)
(5,113,2)
(238,84,2)
(34,145,2)
(166,95,2)
(234,201,2)
(199,103,2)
(168,131,2)
(91,113,2)
(58,113,2)
(55,131,2)
(29,113,2)
(149,5,2)
(220,70,2)
(117,125,2)
(86,121,2)
(198,131,2)
(202,52,2)
(83,113,2)
(234,64,2)
(223,131,2)
(201,80,2)
(184,125,2)
(11,113,2)
(120,131,2)
(224,131,2)
(191,113,2)
(12,131,2)
(226,87,2)
(209,113,2)
(32,125,2)
(52,131,2)
(49,131,2)
(42,59,2)
(43,202,2)
(77,131,2)
(226,232,2)
(207,113,2)
(126,18,2)
(134,121,2)
(23,113,2)
(223,78,2)
(114,113,2)
(155,131,2)
(142,131,2)
(181,52,2)
(162,59,2)
(151,182,2)
(7,155,2)
(194,103,2)
(211,125,2)
(144,70,2)
(149,113,2)
(7,113,2)
(113,80,2)
(151,166,2)
(6,125,2)
(25,131,2)
(159,237,2)
(78,131,2)
(138,80,2)
(99,113,2)
(116,77,2)
(216,113,2)
(183,70,2)
(37,80,2)
(224,113,2)
(1,70,2)
(98,77,2)
(66,145,2)
(28,145,2)
(185,113,2)
(143,70,2)
(81,47,2)
(16,131,2)
(151,86,2)
(75,113,2)
(154,131,2)
(161,113,2)
(131,113,2)
(109,80,2)
(53,80,2)
(118,113,2)
(206,169,2)
(121,181,2)
(126,113,2)
(217,80,2)
(24,121,2)
(126,131,2)
(151,156,2)
(73,181,2)
(29,49,2)
(160,125,2)
(174,121,2)
(128,211,2)
(222,113,2)
(122,145,2)
(207,131,2)
(237,113,2)
(143,9,2)
(103,234,2)
(151,168,2)
(67,125,2)
(62,131,2)
(120,113,2)
(143,47,2)
(87,36,2)
(194,127,2)
(188,59,2)
(168,113,2)
(226,236,2)
(65,169,2)
(39,223,2)
(226,37,2)
(112,80,2)
(173,113,2)
(133,70,2)
(142,113,2)
(145,181,2)
(132,131,2)
(29,120,2)
(47,113,2)
(84,145,2)
(156,59,2)
(127,113,2)
(41,80,2)
(95,134,2)
(195,145,2)
(16,113,2)
(196,128,2)
(82,113,2)
(219,131,2)
(20,169,2)
(136,59,2)
(34,238,2)
(4,125,2)
(223,113,2)
(80,94,2)
(31,121,2)
(93,113,2)
(50,181,2)
(87,131,2)
(96,145,2)
(62,113,2)
(98,47,2)
(151,202,2)
(170,70,2)
(158,45,2)
(167,77,2)
(206,113,2)
(237,131,2)
(128,215,2)
(163,199,2)
(140,113,2)
(114,39,2)
(208,59,2)
(187,121,2)
(36,94,2)
(149,97,2)
(192,44,2)
(79,52,2)
(9,70,2)
(227,80,2)
(108,121,2)
(59,181,2)
(0,113,2)
(228,113,2)
(26,113,2)
(169,113,2)
(196,125,2)
(114,131,2)
(151,196,2)
(64,80,2)
(104,70,2)
(30,181,2)
(107,113,2)
(159,113,2)
(65,113,2)
(152,70,2)
(55,113,2)
(56,113,2)
(185,131,2)
(70,181,2)
(213,202,2)
(29,224,2)
(78,113,2)
(190,59,2)
(155,113,2)
(220,104,2)
(110,113,2)
(49,192,2)
(179,113,2)
(76,208,2)
(177,145,2)
(34,47,2)
(126,47,2)
(48,113,2)
(147,52,2)
(29,89,2)
(10,59,2)
(210,113,2)
(158,80,2)
(221,145,2)
(29,126,2)
(123,143,2)
(18,98,2)
(132,7,2)
(164,81,2)
(199,113,2)
(72,70,2)
(114,132,2)
(163,113,2)
(52,113,2)
(192,113,2)
(78,45,2)
(230,113,2)
(27,131,2)
(128,125,2)
(68,125,2)
(44,113,2)
(203,113,2)
(47,114,2)
(157,113,2)
(225,145,2)
(175,131,2)
(186,113,2)
(95,47,2)
(229,70,2)
(81,10,2)
(138,158,2)
(36,80,2)
(197,131,2)
(81,76,2)
(198,113,2)
(101,80,2)
(151,150,2)
(118,131,2)
(204,113,2)
(127,169,2)
(95,121,2)
(219,113,2)
(213,52,2)
(151,72,2)
(161,131,2)
(215,125,2)
(49,113,2)
(77,113,2)
(103,80,2)
(201,138,2)
(97,113,2)
(168,29,2)
(2,113,2)
(236,36,2)
(102,145,2)
(35,70,2)
(107,131,2)
(79,202,2)
(205,80,2)
(139,113,2)
(192,131,2)
(39,113,2)
(143,220,2)
(231,20,2)
(123,70,2)
(199,214,2)
(81,59,2)
(3,113,2)
(231,113,2)
(159,131,2)
(34,14,2)
(232,52,2)
(29,140,2)
(61,113,2)
(111,113,2)
(165,80,2)
(191,131,2)
(66,34,2)
(166,121,2)
(147,202,2)
(7,131,2)
(33,121,2)
(238,145,2)
(175,113,2)
(128,47,2)
(8,80,2)
(89,159,2)
(194,113,2)
(173,131,2)
(29,45,2)
(76,59,2)
(29,131,2)
(140,131,2)
(233,113,2)
(39,131,2)
(200,121,2)
(189,113,2)
(2,131,2)
(151,164,2)
(58,131,2)
(89,113,2)
(164,59,2)
(115,59,2)
(154,113,2)
(232,202,2)
(18,77,2)
(214,113,2)
(47,131,2)
(25,163,2)
(88,113,2)
(26,131,2)
(172,80,2)
(218,121,2)
(209,131,2)
(63,77,2)
(125,181,2)
(218,108,2)
(215,67,2)
(95,218,2)
(182,125,2)
(44,198,2)
(20,113,2)
(89,131,2)
(27,113,2)
(232,36,2)
(151,123,2)
(150,145,2)
(234,80,2)
(60,181,2)
(11,131,2)
(110,131,2)
(186,131,2)
(100,125,2)
(137,121,2)
(199,65,2)
(14,145,2)
(204,206,2)
(23,131,2)
(83,131,2)
(239,121,2)
(222,131,2)
-----------------------------------
(0,serial)
(1,r)
(2,message)
(3,request)
(4,DRIVER_E_UNEXPECTED_FDS)
(5,&var)
(6,sender)
(7,message->message->metadata)
(8,0)
(9,driver_error_to_string(DRIVER_E_EXPECTED_REPLY_EXISTS)
(10,driver_error_to_string(DRIVER_E_RECEIVE_DENIED)
(11,message)
(12,r)
(13,case PEER_E_RECEIVE_DENIED:)
(14,driver_error_to_string(DRIVER_E_QUOTA)
(15,if (r)
(16,activation_request_free(request)
(17,sender)
(18,&sender->owned_replies)
(19,activation)
(20,&var)
(21,if (sender)
(22,case PEER_E_EXPECTED_REPLY_EXISTS:)
(23,user)
(24,r)
(25,error_trace(r)
(26,metadata)
(27,message)
(28,"org.freedesktop.DBus.Error.LimitsExceeded")
(29,peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message)
(30,break;)
(31,r)
(32,0)
(33,sender)
(34,driver_send_error(sender, message_read_serial(message->message)
(35,r)
(36,activation->requested)
(37,return 0;)
(38,if (r)
(39,&receiver->bus->peers)
(40,if (sender)
(41,requested)
(42,"org.freedesktop.DBus.Error.AccessDenied")
(43,r)
(44,NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names)
(45,Peer *receiver)
(46,if (sender)
(47,sender = peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id)
(48,driver_type_out_u)
(49,&sender_names)
(50,break;)
(51,sender)
(52,r)
(53,request)
(54,request_safe)
(55,message)
(56,sender)
(57,"(u)
(58,message)
(59,sender)
(60,break;)
(61,1)
(62,senders_names)
(63,sender)
(64,request->sender_id)
(65,&var)
(66,r = driver_send_error(sender, message_read_serial(message->message)
(67,message->message)
(68,r)
(69,break;)
(70,sender)
(71,case PEER_E_UNEXPECTED_FDS:)
(72,r = 0)
(73,break;)
(74,var)
(75,serial)
(76,message_read_serial(message->message)
(77,sender)
(78,receiver->bus)
(79,message)
(80,!activation)
(81,driver_send_error(sender, message_read_serial(message->message)
(82,var)
(83,message)
(84,message->message)
(85,)
(86,r = 0)
(87,return error_trace(r)
(88,request->serial)
(89,message->message->metadata.sender_id)
(90,message_safe)
(91,var)
(92,if (sender)
(93,var)
(94,Activation *activation)
(95,driver_send_error(sender, message_read_serial(message->message)
(96,DRIVER_E_QUOTA)
(97,__BYTE_ORDER == __BIG_ENDIAN)
(98,sender->owned_replies)
(99,r)
(100,r)
(101,peers)
(102,r)
(103,sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
(104,message->message)
(105,sender_names)
(106,)
(107,message)
(108,message->message)
(109,false)
(110,sender_names)
(111,__BIG_ENDIAN)
(112,sender)
(113,sender)
(114,peer_registry_find_peer(&receiver->bus->peers, message->message->metadata.sender_id)
(115,r)
(116,owned_replies)
(117,message)
(118,sender)
(119,)
(120,message->senders_policy)
(121,sender)
(122,0)
(123,r = driver_send_error(sender, message_read_serial(message->message)
(124,case PEER_E_SEND_DENIED:)
(125,sender)
(126,sender ? &sender->owned_replies : NULL)
(127,&var)
(128,driver_send_error(sender, message_read_serial(message->message)
(129,)
(130,sender)
(131,r)
(132,message->message->metadata.sender_id)
(133,sender)
(134,driver_error_to_string(DRIVER_E_SEND_DENIED)
(135,r)
(136,r)
(137,0)
(138,receiver->bus->peers)
(139,var)
(140,message->user)
(141,if (sender)
(142,sender_id)
(143,driver_send_error(sender, message_read_serial(message->message)
(144,0)
(145,sender)
(146,if (sender)
(147,activation_message_free(message)
(148,if (!activation)
(149,c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN)
(150,r = 0)
(151,error_fold(r)
(152,message)
(153,)
(154,metadata)
(155,message->message)
(156,r = 0)
(157,"(")
(158,receiver->bus)
(159,message->message->metadata)
(160,"org.freedesktop.DBus.Error.Failed")
(161,receiver)
(162,message)
(163,r = driver_send_reply(sender, &var, request->serial)
(164,r = driver_send_error(sender, message_read_serial(message->message)
(165,bus)
(166,r = driver_send_error(sender, message_read_serial(message->message)
(167,NULL)
(168,r = peer_queue_unicast(message->senders_policy, &sender_names, sender ? &sender->owned_replies : NULL, message->user, message->message->metadata.sender_id, receiver, message->message)
(169,var = C_DVAR_INIT)
(170,message)
(171,)
(172,receiver)
(173,sender_id)
(174,DRIVER_E_SEND_DENIED)
(175,sender_names)
(176,if (r)
(177,r)
(178,request)
(179,var)
(180,message)
(181,r)
(182,r = 0)
(183,"org.freedesktop.DBus.Error.AccessDenied")
(184,message)
(185,bus)
(186,receiver)
(187,"org.freedesktop.DBus.Error.AccessDenied")
(188,message)
(189,request)
(190,0)
(191,message)
(192,sender_names = NAME_SET_INIT_FROM_SNAPSHOT(message->senders_names)
(193,DRIVER_E_RECEIVE_DENIED)
(194,driver_write_reply_header(&var, sender, request->serial, driver_type_out_u)
(195,message)
(196,r = driver_send_error(sender, message_read_serial(message->message)
(197,r)
(198,message->senders_names)
(199,driver_send_reply(sender, &var, request->serial)
(200,message)
(201,&receiver->bus->peers)
(202,r)
(203,var)
(204,c_dvar_write(&var, "(u)
(205,activation->requested = false)
(206,&var)
(207,request)
(208,message->message)
(209,message)
(210,DBUS_START_REPLY_SUCCESS)
(211,driver_error_to_string(DRIVER_E_UNEXPECTED_FDS)
(212,switch (r)
(213,0)
(214,request->serial)
(215,message_read_serial(message->message)
(216,sender)
(217,sender_id)
(218,message_read_serial(message->message)
(219,senders_policy)
(220,message_read_serial(message->message)
(221,sender)
(222,peers)
(223,receiver->bus->peers)
(224,message->message)
(225,message)
(226,RET)
(227,activation)
(228,driver_type_out_u)
(229,DRIVER_E_EXPECTED_REPLY_EXISTS)
(230,C_DVAR_INIT)
(231,c_dvar_write(&var, "(")
(232,return 0;)
(233,__BYTE_ORDER)
(234,peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
(235,case PEER_E_QUOTA:)
(236,return error_fold(r)
(237,message->message)
(238,message_read_serial(message->message)
(239,message)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^