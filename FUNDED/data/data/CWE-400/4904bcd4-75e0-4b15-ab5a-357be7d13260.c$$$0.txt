-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* FIX: Use a relatively small number for memory allocation */
    data = 20;
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
29,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
48,49
48,50
48,51
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
57,62
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
70,71
70,72
71,72
73,74
74,75
74,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
91,94
92,93
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,31,35,37,40,44,46,47,51,54,56,61,64,66,69,72,75,76,80,82,87,89,93,95,97,101,103,107,109,114,115
-----computeFrom-----
13,14
13,15
18,19
18,20
49,50
49,51
59,60
59,61
70,71
70,72
78,79
78,80
-----guardedBy-----
56,97
51,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = 20;
data = 20
data
data
20
{        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(32,47,0)
(21,6,0)
(21,36,0)
(47,50,0)
(30,41,0)
(5,43,0)
(27,24,0)
(15,10,0)
(50,47,0)
(10,8,0)
(43,17,0)
(12,10,0)
(41,36,0)
(33,39,0)
(36,1,0)
(35,8,0)
(19,1,0)
(16,41,0)
(17,43,0)
(19,36,0)
(37,36,0)
(49,10,0)
(22,51,0)
(39,25,0)
(2,12,0)
(46,21,0)
(25,24,0)
(47,10,0)
(23,50,0)
(3,2,0)
(12,2,0)
(38,35,0)
(48,29,0)
(42,25,0)
(4,35,0)
(28,8,0)
(31,1,0)
(14,27,0)
(17,0,0)
(18,8,0)
(29,36,0)
(26,25,0)
(6,21,0)
(10,39,0)
(11,24,0)
(41,1,0)
(51,13,0)
(34,12,0)
(46,12,0)
(8,24,0)
(52,40,0)
(40,1,0)
(45,39,0)
(7,27,0)
(40,36,0)
(39,8,0)
(9,29,0)
(21,46,0)
(44,19,0)
(12,46,0)
(36,21,0)
(12,2,1)
(20,51,1)
(45,25,1)
(27,14,1)
(36,21,1)
(43,5,1)
(42,27,1)
(32,10,1)
(30,16,1)
(21,6,1)
(3,34,1)
(48,9,1)
(19,36,1)
(37,47,1)
(26,42,1)
(40,52,1)
(39,33,1)
(39,25,1)
(34,37,1)
(52,19,1)
(50,23,1)
(47,10,1)
(23,32,1)
(47,50,1)
(46,12,1)
(44,41,1)
(21,46,1)
(29,36,1)
(33,45,1)
(16,17,1)
(19,44,1)
(9,36,1)
(10,15,1)
(41,30,1)
(12,10,1)
(40,36,1)
(14,7,1)
(25,26,1)
(29,48,1)
(16,29,1)
(17,43,1)
(2,3,1)
(20,40,1)
(15,49,1)
(5,29,1)
(22,47,1)
(41,36,1)
(49,39,1)
(51,22,1)
(10,39,1)
(48,47,2)
(36,21,2)
(19,36,2)
(17,29,2)
(21,6,2)
(16,47,2)
(41,47,2)
(12,47,2)
(46,12,2)
(29,36,2)
(39,25,2)
(47,10,2)
(5,29,2)
(40,47,2)
(19,47,2)
(52,47,2)
(21,47,2)
(21,46,2)
(30,47,2)
(9,47,2)
(34,47,2)
(44,47,2)
(10,39,2)
(12,2,2)
(41,36,2)
(12,10,2)
(36,47,2)
(29,47,2)
(43,29,2)
(22,47,2)
(47,50,2)
(37,47,2)
(3,47,2)
(51,47,2)
(2,47,2)
(17,43,2)
(46,47,2)
(40,36,2)
-----------------------------------
(0,)
(1,)
(2,sizeof(char)
(3,char)
(4,if (data > strlen(HELLO_STRING)
(5,1)
(6,char *)
(7,data)
(8,)
(9,myString)
(10,data = dataCopy)
(11,data)
(12,data*sizeof(char)
(13,)
(14,0)
(15,dataCopy)
(16,myString)
(17,exit(-1)
(18,data)
(19,printLine(myString)
(20,RET)
(21,(char *)
(22,"Input is less than the length of the source string")
(23,HELLO_STRING)
(24,)
(25,data = 20)
(26,20)
(27,data = 0)
(28,dataCopy)
(29,myString == NULL)
(30,HELLO_STRING)
(31,if (myString == NULL)
(32,data)
(33,data)
(34,data)
(35,)
(36,myString = (char *)
(37,myString)
(38,myString)
(39,dataCopy = data)
(40,free(myString)
(41,strcpy(myString, HELLO_STRING)
(42,data)
(43,-1)
(44,myString)
(45,dataCopy)
(46,malloc(data*sizeof(char)
(47,data > strlen(HELLO_STRING)
(48,NULL)
(49,data)
(50,strlen(HELLO_STRING)
(51,printLine("Input is less than the length of the source string")
(52,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^