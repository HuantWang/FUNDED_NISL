-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_15_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
72,73
72,74
72,75
72,76
72,77
72,78
73,74
75,76
75,77
75,78
75,79
75,80
75,81
75,82
76,77
77,78
77,79
78,79
80,81
80,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
91,92
92,93
94,95
95,96
95,97
97,98
97,99
97,100
100,101
102,103
103,104
103,105
104,105
106,107
106,108
106,109
107,108
109,110
112,113
112,114
113,114
113,115
114,115
116,117
118,119
119,120
120,121
120,122
121,122
124,125
124,126
124,127
124,128
125,126
126,127
126,128
127,128
130,131
130,132
131,132
133,134
133,135
134,135
134,136
135,136
138,139
140,141
141,142
143,144
144,145
144,146
145,146
145,147
146,147
146,148
147,148
149,150
151,152
151,153
151,154
151,155
151,156
152,153
154,155
156,157
157,158
157,159
160,161
160,162
161,162
163,164
165,166
167,168
168,169
169,170
169,171
170,171
173,174
173,175
174,175
176,177
177,178
178,179
178,180
179,180
181,182
185,186
186,187
186,188
187,188
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,71,74,79,81,83,87,89,90,93,96,98,99,101,105,108,110,111,115,117,122,123,128,129,132,136,137,139,142,148,150,153,155,158,159,162,164,166,171,172,175,180,182,183,184,188,189,190
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
103,104
103,105
113,114
113,115
126,127
126,128
130,131
130,132
145,146
145,147
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_15_bad(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_15_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_15_bad
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(71,16,0)
(22,15,0)
(83,97,0)
(61,86,0)
(93,87,0)
(2,38,0)
(77,52,0)
(64,23,0)
(6,21,0)
(5,30,0)
(49,87,0)
(16,73,0)
(54,88,0)
(19,21,0)
(82,14,0)
(32,38,0)
(64,75,0)
(86,65,0)
(42,82,0)
(94,59,0)
(80,99,0)
(12,16,0)
(77,21,0)
(85,99,0)
(98,14,0)
(86,45,0)
(24,62,0)
(38,30,0)
(75,64,0)
(86,15,0)
(65,86,0)
(41,85,0)
(51,28,0)
(91,54,0)
(26,97,0)
(97,85,0)
(64,94,0)
(68,35,0)
(45,86,0)
(52,77,0)
(16,15,0)
(84,76,0)
(11,84,0)
(15,16,0)
(55,86,0)
(0,18,0)
(37,73,0)
(63,76,0)
(100,14,0)
(1,14,0)
(47,30,0)
(29,94,0)
(66,38,0)
(34,72,0)
(94,89,0)
(89,94,0)
(58,56,0)
(10,2,0)
(65,62,0)
(64,77,0)
(40,21,0)
(95,2,0)
(46,30,0)
(56,36,0)
(87,15,0)
(86,78,0)
(20,38,0)
(89,85,0)
(43,38,0)
(0,15,0)
(78,86,0)
(99,14,0)
(35,97,0)
(62,65,0)
(8,78,0)
(3,77,0)
(4,92,0)
(48,14,0)
(57,38,0)
(7,38,0)
(13,73,0)
(44,97,0)
(27,64,0)
(67,89,0)
(79,0,0)
(92,30,0)
(73,38,0)
(23,64,0)
(69,99,0)
(31,33,0)
(53,23,0)
(70,45,0)
(28,38,0)
(97,35,0)
(25,85,0)
(81,34,0)
(96,76,0)
(15,38,0)
(23,76,0)
(50,28,0)
(74,30,0)
(60,52,0)
(41,25,1)
(89,67,1)
(0,15,1)
(11,65,1)
(95,10,1)
(35,68,1)
(51,9,1)
(0,79,1)
(62,24,1)
(64,75,1)
(35,97,1)
(86,45,1)
(84,76,1)
(74,0,1)
(87,15,1)
(4,9,1)
(97,85,1)
(54,91,1)
(64,27,1)
(68,97,1)
(79,17,1)
(55,62,1)
(52,60,1)
(42,39,1)
(85,41,1)
(13,2,1)
(23,64,1)
(100,82,1)
(97,83,1)
(98,94,1)
(65,86,1)
(28,50,1)
(86,61,1)
(11,34,1)
(76,63,1)
(16,12,1)
(82,42,1)
(10,28,1)
(27,53,1)
(65,62,1)
(81,65,1)
(90,74,1)
(9,100,1)
(9,98,1)
(73,37,1)
(96,56,1)
(91,35,1)
(83,26,1)
(8,55,1)
(96,87,1)
(17,23,1)
(34,81,1)
(78,8,1)
(22,73,1)
(87,49,1)
(64,77,1)
(26,44,1)
(45,70,1)
(89,85,1)
(12,71,1)
(77,52,1)
(56,58,1)
(92,4,1)
(94,89,1)
(63,96,1)
(61,45,1)
(53,84,1)
(2,95,1)
(86,15,1)
(98,54,1)
(29,35,1)
(37,13,1)
(24,23,1)
(15,16,1)
(46,92,1)
(71,22,1)
(64,94,1)
(49,93,1)
(84,11,1)
(50,51,1)
(90,46,1)
(70,78,1)
(74,17,1)
(16,73,1)
(67,29,1)
(58,87,1)
(25,39,1)
(93,15,1)
(86,78,1)
(60,3,1)
(23,76,1)
(39,77,1)
(53,76,1)
(44,85,1)
(54,35,2)
(83,39,2)
(64,23,2)
(41,39,2)
(42,39,2)
(63,9,2)
(56,87,2)
(78,23,2)
(34,65,2)
(65,62,2)
(86,15,2)
(4,9,2)
(79,17,2)
(97,39,2)
(62,23,2)
(0,17,2)
(23,23,2)
(94,89,2)
(15,9,2)
(23,64,2)
(13,9,2)
(89,85,2)
(65,86,2)
(29,35,2)
(87,15,2)
(100,39,2)
(73,9,2)
(23,76,2)
(84,23,2)
(87,9,2)
(37,9,2)
(95,9,2)
(55,23,2)
(91,35,2)
(44,39,2)
(51,9,2)
(28,9,2)
(64,75,2)
(58,87,2)
(71,9,2)
(35,39,2)
(81,65,2)
(24,23,2)
(22,9,2)
(26,39,2)
(86,78,2)
(77,52,2)
(84,76,2)
(97,85,2)
(2,9,2)
(64,77,2)
(70,23,2)
(64,9,2)
(74,9,2)
(98,39,2)
(76,9,2)
(8,23,2)
(82,39,2)
(10,9,2)
(92,9,2)
(86,23,2)
(16,73,2)
(53,23,2)
(25,39,2)
(27,9,2)
(94,35,2)
(89,35,2)
(11,23,2)
(23,9,2)
(0,15,2)
(53,9,2)
(50,9,2)
(35,97,2)
(85,39,2)
(46,9,2)
(67,35,2)
(15,16,2)
(61,23,2)
(12,9,2)
(49,9,2)
(17,9,2)
(96,9,2)
(65,23,2)
(86,45,2)
(16,9,2)
(64,94,2)
(93,9,2)
(45,23,2)
(27,23,2)
(68,39,2)
-----------------------------------
(0,fclose(pFile)
(1,default:)
(2,*pFile = NULL)
(3,count)
(4,"Benign, fixed string")
(5,default:)
(6,switch(7)
(7,for (i = 0; i < (size_t)
(8,char)
(9,7)
(10,pFile)
(11,i)
(12,"w+")
(13,filename)
(14,)
(15,pFile = fopen(filename, "w+")
(16,fopen(filename, "w+")
(17,pFile)
(18,)
(19,count)
(20,if (pFile == NULL)
(21,)
(22,pFile)
(23,i < (size_t)
(24,SENTENCE)
(25,inputBuffer)
(26,CHAR_ARRAY_SIZE)
(27,count)
(28,i = 0)
(29,count)
(30,)
(31,if (strlen(SENTENCE)
(32,i)
(33,)
(34,exit(1)
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,)
(37,"output_bad.txt")
(38,)
(39,6)
(40,switch(6)
(41,"")
(42,"Benign, fixed string")
(43,filename)
(44,inputBuffer)
(45,strlen(SENTENCE)
(46,break;)
(47,case 7:)
(48,case 6:)
(49,NULL)
(50,0)
(51,i)
(52,-1)
(53,i)
(54,printLine("fgets()
(55,SENTENCE)
(56,exit(1)
(57,if (pFile)
(58,1)
(59,)
(60,1)
(61,pFile)
(62,strlen(SENTENCE)
(63,0)
(64,(size_t)
(65,strlen(SENTENCE)
(66,pFile)
(67,inputBuffer)
(68,NULL)
(69,inputBuffer)
(70,SENTENCE)
(71,filename)
(72,)
(73,*filename = "output_bad.txt")
(74,break;)
(75,size_t)
(76,i = 0)
(77,count = -1)
(78,sizeof(char)
(79,pFile)
(80,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(81,1)
(82,printLine("Benign, fixed string")
(83,stdin)
(84,i++)
(85,inputBuffer[CHAR_ARRAY_SIZE] = "")
(86,fwrite(SENTENCE, sizeof(char)
(87,pFile == NULL)
(88,)
(89,atoi(inputBuffer)
(90,RET)
(91,"fgets()
(92,printLine("Benign, fixed string")
(93,pFile)
(94,count = atoi(inputBuffer)
(95,NULL)
(96,i)
(97,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(98,break;)
(99,)
(100,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^