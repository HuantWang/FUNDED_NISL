-----label-----
0
-----code-----
static int db_conn_open(sqlite3 ** db_pp, sqlite3_stmt ** pstmt_pp, const char stmt[], void * user_data_p) {
  axc_context * axc_ctx_p = (axc_context *) user_data_p;

  int ret_val = 0;
  char * err_msg = (void *) 0;

  sqlite3 * db_p = (void *) 0;
  sqlite3_stmt * pstmt_p = (void *) 0;

  if (!stmt) {
    ret_val = -1;
    err_msg = "stmt is null";
    goto cleanup;
  }


  ret_val = sqlite3_open(axc_context_get_db_fn(axc_ctx_p), &db_p);
  if (ret_val) {
    err_msg = "Failed to open db_p";
    goto cleanup;
  }


  if (sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *) 0)) {
    ret_val = -2;
    err_msg = "Failed to prepare statement";
    goto cleanup;
  }

  *db_pp = db_p;
  *pstmt_pp = pstmt_p;

cleanup:
  if (ret_val) {
    db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);
  }

  return ret_val;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
8,11
12,13
12,14
13,14
15,16
15,17
15,18
19,20
19,21
21,22
21,23
24,25
24,26
26,27
26,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
29,38
29,39
29,40
29,41
29,42
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
38,40
39,40
39,41
40,41
42,43
44,45
46,47
47,48
47,49
49,50
49,51
51,52
53,54
54,55
54,56
56,57
56,58
56,59
59,60
60,61
60,62
61,62
61,63
63,64
66,67
67,68
67,69
68,69
70,71
70,72
70,73
73,74
74,75
74,76
75,76
75,77
77,78
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
88,90
89,90
89,91
91,92
94,95
94,96
95,96
96,97
98,99
98,100
98,101
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
116,117
116,118
116,119
117,118
119,120
119,121
120,121
122,123
124,125
125,126
127,128
127,129
128,129
130,131
130,132
131,132
132,133
132,134
133,134
136,137
138,139
138,140
139,140
139,141
139,142
139,143
139,144
139,145
140,141
142,143
144,145
146,147
148,149
149,150
151,152
151,153
152,153
152,154
154,155
157,158
157,159
157,160
158,159
159,160
159,161
160,161
162,163
164,165
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
174,175
176,177
178,179
179,180
179,181
180,181
181,182
183,184
185,186
185,187
187,188
187,189
188,189
190,191
191,192
192,193
192,194
192,195
192,196
192,197
192,198
193,194
195,196
197,198
197,199
198,199
198,200
200,201
203,204
205,206
207,208
209,210
210,211
-----nextToken-----
2,4,7,9,10,11,14,16,17,18,20,22,23,25,27,28,33,35,36,41,43,45,48,50,52,55,57,58,62,64,65,69,71,72,76,78,79,83,85,86,90,92,93,97,102,104,108,109,111,115,118,121,123,126,129,134,135,137,141,143,145,147,150,153,155,156,161,163,167,168,170,175,177,182,184,186,189,194,196,199,201,202,204,206,208,211
-----computeFrom-----
100,101
100,102
106,107
106,108
113,114
113,115
132,133
132,134
159,160
159,161
165,166
165,167
172,173
172,174
179,180
179,181
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int db_conn_open(sqlite3 ** db_pp, sqlite3_stmt ** pstmt_pp, const char stmt[], void * user_data_p) {  axc_context * axc_ctx_p = (axc_context *) user_data_p;  int ret_val = 0;  char * err_msg = (void *) 0;  sqlite3 * db_p = (void *) 0;  sqlite3_stmt * pstmt_p = (void *) 0;  if (!stmt) {    ret_val = -1;    err_msg = "stmt is null";    goto cleanup;  }  ret_val = sqlite3_open(axc_context_get_db_fn(axc_ctx_p), &db_p);  if (ret_val) {    err_msg = "Failed to open db_p";    goto cleanup;  }  if (sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *) 0)) {    ret_val = -2;    err_msg = "Failed to prepare statement";    goto cleanup;  }  *db_pp = db_p;  *pstmt_pp = pstmt_p;cleanup:  if (ret_val) {    db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);  }  return ret_val;}
static int
db_conn_open(sqlite3 ** db_pp, sqlite3_stmt ** pstmt_pp, const char stmt[], void * user_data_p)
db_conn_open
sqlite3 ** db_pp
sqlite3
sqlite3
** db_pp
*
*
db_pp
sqlite3_stmt ** pstmt_pp
sqlite3_stmt
sqlite3_stmt
** pstmt_pp
*
*
pstmt_pp
const char stmt[]
const char
stmt[]
stmt
[]
void * user_data_p
void
* user_data_p
*
user_data_p
{  axc_context * axc_ctx_p = (axc_context *) user_data_p;  int ret_val = 0;  char * err_msg = (void *) 0;  sqlite3 * db_p = (void *) 0;  sqlite3_stmt * pstmt_p = (void *) 0;  if (!stmt) {    ret_val = -1;    err_msg = "stmt is null";    goto cleanup;  }  ret_val = sqlite3_open(axc_context_get_db_fn(axc_ctx_p), &db_p);  if (ret_val) {    err_msg = "Failed to open db_p";    goto cleanup;  }  if (sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *) 0)) {    ret_val = -2;    err_msg = "Failed to prepare statement";    goto cleanup;  }  *db_pp = db_p;  *pstmt_pp = pstmt_p;cleanup:  if (ret_val) {    db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);  }  return ret_val;}
axc_context * axc_ctx_p = (axc_context *) user_data_p;
axc_context * axc_ctx_p = (axc_context *) user_data_p;
axc_context
axc_context
* axc_ctx_p = (axc_context *) user_data_p
*
axc_ctx_p
= (axc_context *) user_data_p
(axc_context *) user_data_p
axc_context *
axc_context
axc_context
*
*
user_data_p
user_data_p
int ret_val = 0;
int ret_val = 0;
int
ret_val = 0
ret_val
= 0
0
char * err_msg = (void *) 0;
char * err_msg = (void *) 0;
char
* err_msg = (void *) 0
*
err_msg
= (void *) 0
(void *) 0
void *
void
*
*
0
sqlite3 * db_p = (void *) 0;
sqlite3 * db_p = (void *) 0;
sqlite3
sqlite3
* db_p = (void *) 0
*
db_p
= (void *) 0
(void *) 0
void *
void
*
*
0
sqlite3_stmt * pstmt_p = (void *) 0;
sqlite3_stmt * pstmt_p = (void *) 0;
sqlite3_stmt
sqlite3_stmt
* pstmt_p = (void *) 0
*
pstmt_p
= (void *) 0
(void *) 0
void *
void
*
*
0
if (!stmt) {    ret_val = -1;    err_msg = "stmt is null";    goto cleanup;  }
!stmt
stmt
stmt
{    ret_val = -1;    err_msg = "stmt is null";    goto cleanup;  }
ret_val = -1;
ret_val = -1
ret_val
ret_val
-1
1
err_msg = "stmt is null";
err_msg = "stmt is null"
err_msg
err_msg
"stmt is null"
goto cleanup;
cleanup
ret_val = sqlite3_open(axc_context_get_db_fn(axc_ctx_p), &db_p);
ret_val = sqlite3_open(axc_context_get_db_fn(axc_ctx_p), &db_p)
ret_val
ret_val
sqlite3_open(axc_context_get_db_fn(axc_ctx_p), &db_p)
sqlite3_open
sqlite3_open
axc_context_get_db_fn(axc_ctx_p)
axc_context_get_db_fn
axc_context_get_db_fn
axc_ctx_p
axc_ctx_p
&db_p
db_p
db_p
if (ret_val) {    err_msg = "Failed to open db_p";    goto cleanup;  }
ret_val
ret_val
{    err_msg = "Failed to open db_p";    goto cleanup;  }
err_msg = "Failed to open db_p";
err_msg = "Failed to open db_p"
err_msg
err_msg
"Failed to open db_p"
goto cleanup;
cleanup
if (sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *) 0)) {    ret_val = -2;    err_msg = "Failed to prepare statement";    goto cleanup;  }
sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *) 0)
sqlite3_prepare_v2
sqlite3_prepare_v2
db_p
db_p
stmt
stmt
-1
1
&pstmt_p
pstmt_p
pstmt_p
(void *) 0
void *
void
*
*
0
{    ret_val = -2;    err_msg = "Failed to prepare statement";    goto cleanup;  }
ret_val = -2;
ret_val = -2
ret_val
ret_val
-2
2
err_msg = "Failed to prepare statement";
err_msg = "Failed to prepare statement"
err_msg
err_msg
"Failed to prepare statement"
goto cleanup;
cleanup
*db_pp = db_p;
*db_pp = db_p
*db_pp
db_pp
db_pp
db_p
db_p
*pstmt_pp = pstmt_p;
*pstmt_pp = pstmt_p
*pstmt_pp
pstmt_pp
pstmt_pp
pstmt_p
pstmt_p
cleanup:  if (ret_val) {    db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);  }
cleanup
if (ret_val) {    db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);  }
ret_val
ret_val
{    db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);  }
db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p);
db_conn_cleanup(db_p, (void *) 0, err_msg, __func__, axc_ctx_p)
db_conn_cleanup
db_conn_cleanup
db_p
db_p
(void *) 0
void *
void
*
*
0
err_msg
err_msg
__func__
__func__
axc_ctx_p
axc_ctx_p
return ret_val;
ret_val
ret_val
-----joern-----
(45,9,0)
(24,90,0)
(33,91,0)
(20,9,0)
(76,52,0)
(9,37,0)
(23,62,0)
(100,74,0)
(72,101,0)
(23,14,0)
(55,52,0)
(9,18,0)
(23,21,0)
(25,23,0)
(12,21,0)
(8,67,0)
(23,64,0)
(57,23,0)
(2,60,0)
(98,22,0)
(65,31,0)
(28,18,0)
(97,4,0)
(74,62,0)
(71,55,0)
(19,98,0)
(41,62,0)
(53,14,0)
(91,49,0)
(60,93,0)
(62,18,0)
(93,60,0)
(50,30,0)
(99,63,0)
(34,78,0)
(37,47,0)
(0,65,0)
(90,23,0)
(84,18,0)
(36,18,0)
(95,52,0)
(98,70,0)
(75,18,0)
(43,21,0)
(48,67,0)
(92,94,0)
(42,18,0)
(17,71,0)
(51,78,0)
(90,40,0)
(29,54,0)
(74,37,0)
(38,54,0)
(22,18,0)
(78,22,0)
(32,67,0)
(56,49,0)
(65,62,0)
(52,55,0)
(68,18,0)
(46,18,0)
(52,95,0)
(7,93,0)
(11,23,0)
(47,37,0)
(96,56,0)
(4,56,0)
(48,22,0)
(13,16,0)
(55,18,0)
(86,18,0)
(88,23,0)
(93,18,0)
(62,65,0)
(37,74,0)
(82,22,0)
(20,16,0)
(83,66,0)
(15,51,0)
(20,18,0)
(54,67,0)
(101,71,0)
(78,18,0)
(16,63,0)
(37,9,0)
(23,90,0)
(77,91,0)
(60,2,0)
(39,42,0)
(67,81,0)
(1,42,0)
(14,30,0)
(56,4,0)
(40,90,0)
(23,55,0)
(23,91,0)
(67,55,0)
(67,48,0)
(101,6,0)
(63,16,0)
(35,18,0)
(21,66,0)
(80,81,0)
(61,14,0)
(70,98,0)
(44,18,0)
(22,98,0)
(94,26,0)
(27,49,0)
(54,29,0)
(79,47,0)
(67,26,0)
(51,59,0)
(89,20,0)
(67,54,0)
(85,18,0)
(71,18,0)
(87,65,0)
(20,56,0)
(3,20,0)
(81,67,0)
(65,0,0)
(73,48,0)
(5,60,0)
(16,30,0)
(23,93,0)
(47,55,0)
(10,55,0)
(23,93,1)
(50,14,1)
(52,95,1)
(78,22,1)
(16,63,1)
(83,21,1)
(48,73,1)
(58,27,1)
(23,55,1)
(56,4,1)
(52,76,1)
(93,60,1)
(63,99,1)
(81,80,1)
(23,90,1)
(54,38,1)
(98,70,1)
(43,69,1)
(19,82,1)
(65,31,1)
(65,87,1)
(20,3,1)
(37,47,1)
(101,72,1)
(92,22,1)
(53,16,1)
(80,32,1)
(94,92,1)
(60,2,1)
(94,26,1)
(33,77,1)
(76,10,1)
(71,17,1)
(79,74,1)
(71,55,1)
(8,69,1)
(45,94,1)
(15,71,1)
(47,55,1)
(3,23,1)
(32,8,1)
(91,33,1)
(4,97,1)
(20,56,1)
(1,39,1)
(73,81,1)
(58,83,1)
(23,62,1)
(96,94,1)
(51,15,1)
(88,58,1)
(82,55,1)
(17,101,1)
(58,50,1)
(67,55,1)
(21,12,1)
(55,52,1)
(39,62,1)
(51,59,1)
(65,0,1)
(62,65,1)
(48,22,1)
(98,19,1)
(100,45,1)
(34,51,1)
(72,67,1)
(14,61,1)
(47,79,1)
(5,7,1)
(67,48,1)
(61,53,1)
(3,58,1)
(27,91,1)
(74,100,1)
(58,78,1)
(97,96,1)
(69,9,1)
(57,90,1)
(24,88,1)
(38,48,1)
(20,16,1)
(67,26,1)
(78,34,1)
(23,14,1)
(25,11,1)
(60,5,1)
(90,40,1)
(67,54,1)
(12,43,1)
(7,42,1)
(90,24,1)
(42,1,1)
(74,62,1)
(13,67,1)
(23,21,1)
(37,74,1)
(99,13,1)
(20,9,1)
(10,93,1)
(54,29,1)
(23,25,1)
(67,81,1)
(11,57,1)
(87,41,1)
(101,6,1)
(77,56,1)
(22,98,1)
(23,91,1)
(89,20,1)
(9,37,1)
(15,67,2)
(16,67,2)
(78,22,2)
(38,69,2)
(94,26,2)
(88,58,2)
(72,67,2)
(20,56,2)
(37,94,2)
(50,67,2)
(32,69,2)
(9,94,2)
(16,63,2)
(53,67,2)
(67,54,2)
(11,58,2)
(99,67,2)
(51,59,2)
(17,67,2)
(56,94,2)
(20,9,2)
(69,94,2)
(74,94,2)
(67,81,2)
(33,94,2)
(90,58,2)
(23,58,2)
(20,16,2)
(93,60,2)
(77,94,2)
(12,69,2)
(14,67,2)
(34,67,2)
(23,55,2)
(45,94,2)
(24,58,2)
(52,95,2)
(98,70,2)
(74,62,2)
(23,14,2)
(23,90,2)
(79,94,2)
(73,69,2)
(96,94,2)
(22,98,2)
(78,67,2)
(56,4,2)
(57,58,2)
(81,69,2)
(21,69,2)
(13,67,2)
(8,69,2)
(67,48,2)
(60,2,2)
(4,94,2)
(9,37,2)
(65,31,2)
(71,67,2)
(23,62,2)
(23,91,2)
(67,26,2)
(47,55,2)
(25,58,2)
(71,55,2)
(83,69,2)
(23,93,2)
(101,67,2)
(43,69,2)
(55,52,2)
(62,65,2)
(48,69,2)
(54,69,2)
(67,69,2)
(65,0,2)
(23,21,2)
(51,67,2)
(80,69,2)
(47,94,2)
(48,22,2)
(61,67,2)
(91,94,2)
(63,67,2)
(89,20,2)
(54,29,2)
(100,94,2)
(90,40,2)
(37,74,2)
(101,6,2)
(37,47,2)
(97,94,2)
(27,94,2)
(67,55,2)
-----------------------------------
(0,axc_context *)
(1,0)
(2,void *)
(3,ret_val)
(4,-1)
(5,0)
(6,sqlite3 ** db_pp)
(7,err_msg)
(8,db_p)
(9,ret_val = sqlite3_open(axc_context_get_db_fn(axc_ctx_p)
(10,db_p)
(11,__func__)
(12,"Failed to open db_p")
(13,ret_val)
(14,err_msg = "Failed to prepare statement")
(15,pstmt_pp)
(16,ret_val = -2)
(17,db_p)
(18,)
(19,0)
(20,return ret_val;)
(21,err_msg = "Failed to open db_p")
(22,* pstmt_p = (void *)
(23,db_conn_cleanup(db_p, (void *)
(24,0)
(25,axc_ctx_p)
(26,const char stmt[])
(27,goto cleanup;)
(28,if (sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *)
(29,void *)
(30,)
(31,void * user_data_p)
(32,stmt)
(33,"stmt is null")
(34,pstmt_p)
(35,cleanup:)
(36,ret_val)
(37,sqlite3_open(axc_context_get_db_fn(axc_ctx_p)
(38,0)
(39,ret_val)
(40,void *)
(41,axc_ctx_p)
(42,ret_val = 0)
(43,err_msg)
(44,if (ret_val)
(45,ret_val)
(46,db_p)
(47,&db_p)
(48,&pstmt_p)
(49,)
(50,goto cleanup;)
(51,*pstmt_pp)
(52,(void *)
(53,err_msg)
(54,(void *)
(55,* db_p = (void *)
(56,ret_val = -1)
(57,err_msg)
(58,ret_val)
(59,sqlite3_stmt ** pstmt_pp)
(60,(void *)
(61,"Failed to prepare statement")
(62,* axc_ctx_p = (axc_context *)
(63,-2)
(64,)
(65,(axc_context *)
(66,)
(67,sqlite3_prepare_v2(db_p, stmt, -1, &pstmt_p, (void *)
(68,axc_ctx_p)
(69,ret_val)
(70,void *)
(71,*db_pp = db_p)
(72,db_pp)
(73,pstmt_p)
(74,axc_context_get_db_fn(axc_ctx_p)
(75,if (ret_val)
(76,0)
(77,err_msg)
(78,*pstmt_pp = pstmt_p)
(79,db_p)
(80,1)
(81,-1)
(82,pstmt_p)
(83,goto cleanup;)
(84,if (!stmt)
(85,err_msg)
(86,pstmt_p)
(87,user_data_p)
(88,db_p)
(89,RET)
(90,(void *)
(91,err_msg = "stmt is null")
(92,stmt)
(93,* err_msg = (void *)
(94,!stmt)
(95,void *)
(96,ret_val)
(97,1)
(98,(void *)
(99,2)
(100,axc_ctx_p)
(101,*db_pp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^