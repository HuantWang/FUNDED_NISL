-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* FIX: Deallocate memory */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
85,86
86,87
86,88
87,88
91,92
91,93
93,94
93,95
93,96
93,97
93,98
93,99
94,95
96,97
97,98
97,99
98,99
100,101
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,83,84,88,89,90,92,95,99,101,102,103,107,108,109
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* FIX: Deallocate memory */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(36,60,0)
(35,46,0)
(21,27,0)
(54,52,0)
(60,57,0)
(59,41,0)
(22,57,0)
(23,31,0)
(34,57,0)
(45,2,0)
(9,40,0)
(14,26,0)
(55,57,0)
(41,58,0)
(0,20,0)
(20,8,0)
(29,15,0)
(38,45,0)
(11,20,0)
(19,2,0)
(18,57,0)
(26,57,0)
(30,57,0)
(53,46,0)
(12,8,0)
(27,26,0)
(52,40,0)
(42,8,0)
(6,53,0)
(33,25,0)
(31,27,0)
(46,53,0)
(46,41,0)
(33,43,0)
(1,43,0)
(54,57,0)
(27,31,0)
(41,59,0)
(15,58,0)
(31,58,0)
(11,2,0)
(5,8,0)
(58,57,0)
(40,52,0)
(43,33,0)
(56,2,0)
(4,31,0)
(47,2,0)
(41,46,0)
(28,15,0)
(13,32,0)
(61,40,0)
(11,58,0)
(44,20,0)
(16,11,0)
(28,55,0)
(15,28,0)
(3,28,0)
(37,15,0)
(32,58,0)
(50,58,0)
(51,2,0)
(58,41,0)
(49,57,0)
(40,58,0)
(52,54,0)
(10,55,0)
(17,32,0)
(43,1,1)
(26,14,1)
(11,16,1)
(50,24,1)
(55,10,1)
(11,20,1)
(11,58,1)
(53,6,1)
(31,58,1)
(58,41,1)
(4,32,1)
(28,15,1)
(27,31,1)
(33,43,1)
(17,58,1)
(38,48,1)
(23,4,1)
(60,36,1)
(31,23,1)
(27,21,1)
(48,18,1)
(15,37,1)
(32,58,1)
(9,55,1)
(41,59,1)
(28,3,1)
(20,0,1)
(40,58,1)
(15,58,1)
(40,61,1)
(3,15,1)
(61,9,1)
(46,53,1)
(54,52,1)
(16,48,1)
(52,40,1)
(36,24,1)
(24,20,1)
(41,46,1)
(45,38,1)
(13,17,1)
(29,26,1)
(39,47,1)
(47,45,1)
(32,13,1)
(37,29,1)
(35,50,1)
(39,19,1)
(0,44,1)
(4,33,1)
(10,28,1)
(21,31,1)
(14,27,1)
(19,11,1)
(1,32,1)
(18,60,1)
(6,35,1)
(48,30,1)
(30,54,1)
(41,24,2)
(45,48,2)
(16,48,2)
(61,24,2)
(55,24,2)
(28,24,2)
(52,40,2)
(37,24,2)
(46,53,2)
(21,24,2)
(19,48,2)
(36,24,2)
(18,24,2)
(15,58,2)
(46,24,2)
(3,24,2)
(27,31,2)
(30,24,2)
(15,24,2)
(47,48,2)
(27,24,2)
(53,24,2)
(32,24,2)
(10,24,2)
(23,24,2)
(54,52,2)
(52,24,2)
(11,48,2)
(58,41,2)
(31,24,2)
(29,24,2)
(32,58,2)
(40,24,2)
(38,48,2)
(6,24,2)
(11,20,2)
(33,43,2)
(58,24,2)
(50,24,2)
(43,32,2)
(28,15,2)
(35,24,2)
(17,24,2)
(11,58,2)
(1,32,2)
(54,24,2)
(40,58,2)
(33,32,2)
(9,24,2)
(13,24,2)
(60,24,2)
(14,24,2)
(31,58,2)
(4,24,2)
(41,59,2)
(41,46,2)
(26,24,2)
-----------------------------------
(0,NULL)
(1,1)
(2,)
(3,intTwo)
(4,data)
(5,data)
(6,twoIntsStruct)
(7, sizeof(twoIntsStruct)
(8,)
(9,data)
(10,0)
(11,free(data)
(12,switch(6)
(13,NULL)
(14,0)
(15,data[0])
(16,data)
(17,data)
(18,break;)
(19,break;)
(20,data = NULL)
(21,intOne)
(22,case 6:)
(23,0)
(24,6)
(25,)
(26,data[0].intOne = 0)
(27,data[0].intOne)
(28,data[0].intTwo)
(29,data)
(30,break;)
(31,data[0])
(32,data == NULL)
(33,exit(-1)
(34,default:)
(35,100)
(36,"Benign, fixed string")
(37,0)
(38,"Benign, fixed string")
(39,RET)
(40,data[0])
(41,(twoIntsStruct *)
(42,switch(7)
(43,-1)
(44,data)
(45,printLine("Benign, fixed string")
(46,calloc(100, sizeof(twoIntsStruct)
(47,break;)
(48,7)
(49,if (data == NULL)
(50,data)
(51,default:)
(52,&data[0])
(53,sizeof(twoIntsStruct)
(54,printStructLine(&data[0])
(55,data[0].intTwo = 0)
(56,case 7:)
(57,)
(58,data = (twoIntsStruct *)
(59,twoIntsStruct *)
(60,printLine("Benign, fixed string")
(61,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^