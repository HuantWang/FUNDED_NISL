-----label-----
0
-----code-----
static tempfile_t *
tempfile_new(void)
{
  FILE *fp = tmpfile();
  if (!fp)
    return NULL;

  tempfile_t *tempfile = malloc(sizeof(tempfile_t));
  //printf("tempfile alloc %d -> %p\n", (int)sizeof(tempfile_t), tempfile);
  if (!tempfile)
    return NULL;

  tempfile->fp = fp;
  tempfile->ref_counter = 1;

  tempfile_num++;

  return tempfile;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
23,25
24,25
25,26
27,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
38,40
39,40
41,42
42,43
42,44
43,44
46,47
46,48
47,48
48,49
50,51
51,52
53,54
54,55
54,56
55,56
55,57
56,57
59,60
61,62
62,63
62,64
63,64
63,65
64,65
68,69
69,70
70,71
72,73
73,74
-----nextToken-----
3,5,6,8,10,15,17,18,22,26,29,33,35,36,40,44,45,49,52,57,58,60,65,66,67,71,74
-----computeFrom-----
54,55
54,56
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static tempfile_t *tempfile_new(void){  FILE *fp = tmpfile();  if (!fp)    return NULL;  tempfile_t *tempfile = malloc(sizeof(tempfile_t));  //printf("tempfile alloc %d -> %p\n", (int)sizeof(tempfile_t), tempfile);  if (!tempfile)    return NULL;  tempfile->fp = fp;  tempfile->ref_counter = 1;  tempfile_num++;  return tempfile;}
static tempfile_t
tempfile_t
*tempfile_new(void)
*
tempfile_new
void
void


{  FILE *fp = tmpfile();  if (!fp)    return NULL;  tempfile_t *tempfile = malloc(sizeof(tempfile_t));  //printf("tempfile alloc %d -> %p\n", (int)sizeof(tempfile_t), tempfile);  if (!tempfile)    return NULL;  tempfile->fp = fp;  tempfile->ref_counter = 1;  tempfile_num++;  return tempfile;}
FILE *fp = tmpfile();
FILE *fp = tmpfile();
FILE
FILE
*fp = tmpfile()
*
fp
= tmpfile()
tmpfile()
tmpfile
tmpfile
if (!fp)    return NULL;
!fp
fp
fp
return NULL;
NULL
NULL
tempfile_t *tempfile = malloc(sizeof(tempfile_t));
tempfile_t *tempfile = malloc(sizeof(tempfile_t));
tempfile_t
tempfile_t
*tempfile = malloc(sizeof(tempfile_t))
*
tempfile
= malloc(sizeof(tempfile_t))
malloc(sizeof(tempfile_t))
malloc
malloc
sizeof(tempfile_t)
tempfile_t
tempfile_t
tempfile_t

if (!tempfile)    return NULL;
!tempfile
tempfile
tempfile
return NULL;
NULL
NULL
tempfile->fp = fp;
tempfile->fp = fp
tempfile->fp
tempfile
tempfile
fp
fp
fp
tempfile->ref_counter = 1;
tempfile->ref_counter = 1
tempfile->ref_counter
tempfile
tempfile
ref_counter
1
tempfile_num++;
tempfile_num++
tempfile_num
tempfile_num
return tempfile;
tempfile
tempfile
-----joern-----
(2,6,0)
(16,24,0)
(26,0,0)
(9,20,0)
(35,5,0)
(17,24,0)
(5,30,0)
(15,5,0)
(0,31,0)
(25,31,0)
(12,28,0)
(29,7,0)
(10,31,0)
(4,31,0)
(11,19,0)
(23,17,0)
(3,6,0)
(1,19,0)
(13,28,0)
(5,6,0)
(21,6,0)
(18,5,0)
(34,6,0)
(33,6,0)
(14,18,0)
(32,10,0)
(19,18,0)
(18,6,0)
(19,31,0)
(31,6,0)
(30,5,0)
(31,4,0)
(12,10,0)
(4,20,0)
(17,31,0)
(12,7,0)
(27,17,0)
(24,6,0)
(20,4,0)
(8,2,0)
(10,6,0)
(22,35,0)
(12,10,1)
(4,20,1)
(17,31,1)
(26,31,1)
(13,0,1)
(2,8,1)
(14,19,1)
(27,18,1)
(0,26,1)
(28,13,1)
(35,5,1)
(12,28,1)
(9,25,1)
(23,27,1)
(20,9,1)
(19,1,1)
(19,31,1)
(11,0,1)
(29,35,1)
(35,22,1)
(31,4,1)
(32,2,1)
(10,32,1)
(18,14,1)
(1,11,1)
(5,30,1)
(18,5,1)
(22,5,1)
(24,16,1)
(17,23,1)
(12,7,1)
(30,15,1)
(0,31,1)
(7,29,1)
(16,17,1)
(10,31,1)
(25,35,1)
(8,24,1)
(18,5,2)
(28,0,2)
(12,10,2)
(12,28,2)
(24,0,2)
(0,35,2)
(8,0,2)
(0,31,2)
(19,0,2)
(2,0,2)
(19,31,2)
(14,0,2)
(25,35,2)
(13,0,2)
(16,0,2)
(23,0,2)
(4,20,2)
(17,31,2)
(29,35,2)
(7,35,2)
(4,35,2)
(32,0,2)
(26,35,2)
(35,5,2)
(1,0,2)
(9,35,2)
(10,0,2)
(5,30,2)
(10,31,2)
(12,7,2)
(20,35,2)
(27,0,2)
(11,0,2)
(31,35,2)
(18,0,2)
(17,0,2)
(31,4,2)
-----------------------------------
(0,!tempfile)
(1,fp)
(2,tempfile_num++)
(3,if (!fp)
(4,malloc(sizeof(tempfile_t)
(5,*fp = tmpfile()
(6,)
(7,return NULL;)
(8,tempfile_num)
(9,tempfile_t)
(10,return tempfile;)
(11,tempfile)
(12,RET)
(13,NULL)
(14,fp)
(15,fp)
(16,1)
(17,tempfile->ref_counter)
(18,tempfile->fp = fp)
(19,tempfile->fp)
(20,sizeof(tempfile_t)
(21,tempfile)
(22,fp)
(23,ref_counter)
(24,tempfile->ref_counter = 1)
(25,tempfile)
(26,tempfile)
(27,tempfile)
(28,return NULL;)
(29,NULL)
(30,tmpfile()
(31,*tempfile = malloc(sizeof(tempfile_t)
(32,tempfile)
(33,fp)
(34,if (!tempfile)
(35,!fp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^