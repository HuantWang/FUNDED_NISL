-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
40,41
40,42
40,43
41,42
43,44
46,47
47,48
47,49
48,49
50,51
52,53
52,54
54,55
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,45,49,51,53,55
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    char * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    char * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,10,0)
(21,4,0)
(20,17,0)
(1,4,0)
(10,9,0)
(4,1,0)
(11,17,0)
(5,7,0)
(15,17,0)
(0,10,0)
(6,15,0)
(4,21,0)
(3,9,0)
(7,5,0)
(18,9,0)
(16,11,0)
(20,11,0)
(4,11,0)
(22,9,0)
(19,20,0)
(21,7,0)
(15,11,0)
(8,20,0)
(12,5,0)
(24,7,0)
(11,4,0)
(7,21,0)
(20,11,1)
(19,8,1)
(15,11,1)
(13,10,1)
(0,2,1)
(20,19,1)
(11,4,1)
(16,13,1)
(7,5,1)
(5,12,1)
(8,11,1)
(23,13,1)
(24,16,1)
(23,15,1)
(6,20,1)
(12,24,1)
(15,6,1)
(4,1,1)
(10,0,1)
(14,23,1)
(21,7,1)
(4,21,1)
(11,13,2)
(16,13,2)
(7,13,2)
(12,13,2)
(6,13,2)
(15,13,2)
(4,21,2)
(15,11,2)
(24,13,2)
(21,13,2)
(20,13,2)
(20,11,2)
(4,1,2)
(19,13,2)
(21,7,2)
(5,13,2)
(8,13,2)
(4,13,2)
(11,4,2)
(7,5,2)
-----------------------------------
(0,NULL)
(1,char *)
(2,data)
(3,if(1)
(4,(char *)
(5,sizeof(char)
(6,data)
(7,100*sizeof(char)
(8,data)
(9,)
(10,data = NULL)
(11,data = (char *)
(12,char)
(13,1)
(14,RET)
(15,printLine(data)
(16,data)
(17,)
(18,if(1)
(19,"A String")
(20,strcpy(data, "A String")
(21,ALLOCA(100*sizeof(char)
(22,data)
(23,1)
(24,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^