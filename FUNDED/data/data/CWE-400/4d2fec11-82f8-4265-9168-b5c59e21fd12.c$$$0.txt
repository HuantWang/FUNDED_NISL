-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
29,33
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
78,80
81,82
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,28,33,37,39,42,44,48,49,55,56,57,58,64,65,66,67,71,75,76,79,80,82
-----computeFrom-----
14,15
14,16
20,21
20,22
31,32
31,33
43,44
43,45
51,52
51,53
60,61
60,62
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(31,44,0)
(31,8,0)
(34,9,0)
(14,11,0)
(21,10,0)
(37,44,0)
(11,14,0)
(7,29,0)
(26,11,0)
(20,9,0)
(16,39,0)
(15,32,0)
(29,7,0)
(33,31,0)
(8,31,0)
(41,1,0)
(43,20,0)
(7,32,0)
(22,28,0)
(24,28,0)
(32,7,0)
(18,31,0)
(40,1,0)
(0,26,0)
(26,44,0)
(13,9,0)
(8,40,0)
(23,40,0)
(44,1,0)
(6,32,0)
(4,22,0)
(10,2,0)
(14,36,0)
(11,26,0)
(19,22,0)
(12,28,0)
(30,8,0)
(9,20,0)
(25,17,0)
(45,36,0)
(26,0,0)
(5,14,0)
(27,39,0)
(20,41,0)
(29,1,0)
(3,41,0)
(36,14,0)
(42,17,0)
(44,26,0)
(9,44,0)
(35,28,0)
(32,44,0)
(32,44,1)
(39,16,1)
(27,29,1)
(38,39,1)
(31,44,1)
(43,9,1)
(40,23,1)
(44,26,1)
(21,17,1)
(26,0,1)
(32,6,1)
(8,31,1)
(3,20,1)
(10,21,1)
(4,19,1)
(42,25,1)
(14,36,1)
(16,27,1)
(9,44,1)
(41,3,1)
(36,45,1)
(22,4,1)
(15,40,1)
(27,10,1)
(13,34,1)
(20,9,1)
(23,8,1)
(20,43,1)
(30,31,1)
(6,15,1)
(18,41,1)
(37,17,1)
(17,42,1)
(25,22,1)
(26,11,1)
(29,7,1)
(5,37,1)
(7,32,1)
(34,44,1)
(9,13,1)
(11,14,1)
(33,18,1)
(31,33,1)
(8,30,1)
(45,5,1)
(31,44,2)
(18,17,2)
(26,0,2)
(32,44,2)
(20,17,2)
(33,17,2)
(26,17,2)
(20,9,2)
(8,17,2)
(10,17,2)
(26,11,2)
(14,17,2)
(41,17,2)
(14,36,2)
(36,17,2)
(29,7,2)
(45,17,2)
(32,17,2)
(34,17,2)
(9,44,2)
(11,17,2)
(44,26,2)
(44,17,2)
(5,17,2)
(29,17,2)
(11,14,2)
(30,17,2)
(7,32,2)
(15,17,2)
(21,17,2)
(6,17,2)
(9,17,2)
(40,17,2)
(8,31,2)
(23,17,2)
(37,17,2)
(3,17,2)
(43,17,2)
(7,17,2)
(13,17,2)
(31,17,2)
-----------------------------------
(0,twoIntsStruct *)
(1,)
(2,)
(3,0)
(4,NULL)
(5,100)
(6,0)
(7,&data[0])
(8,data[0].intTwo)
(9,data[0])
(10,printLine("Benign, fixed string")
(11,ALLOCA(100*sizeof(twoIntsStruct)
(12,if(5!=5)
(13,0)
(14,100*sizeof(twoIntsStruct)
(15,data)
(16,5)
(17,5!=5)
(18,data)
(19,data)
(20,data[0].intOne)
(21,"Benign, fixed string")
(22,data = NULL)
(23,0)
(24,if(5==5)
(25,5)
(26,(twoIntsStruct *)
(27,5)
(28,)
(29,printStructLine(&data[0])
(30,intTwo)
(31,data[0])
(32,data[0])
(33,0)
(34,data)
(35,data)
(36,sizeof(twoIntsStruct)
(37,data)
(38,RET)
(39,5==5)
(40,data[0].intTwo = 0)
(41,data[0].intOne = 0)
(42,5)
(43,intOne)
(44,data = (twoIntsStruct *)
(45,twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^