-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
30,33
31,32
31,33
32,33
35,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
42,45
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
64,65
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,39,40,46,47,50,51,56,58,62,63,68,69
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
43,44
43,45
44,45
44,46
48,49
48,50
-----guardedBy-----
50,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(20,0,0)
(19,36,0)
(37,18,0)
(36,18,0)
(21,15,0)
(32,0,0)
(5,30,0)
(0,16,0)
(25,33,0)
(0,35,0)
(10,14,0)
(31,37,0)
(20,24,0)
(22,37,0)
(2,38,0)
(4,18,0)
(26,33,0)
(9,12,0)
(28,3,0)
(18,12,0)
(27,2,0)
(1,13,0)
(28,18,0)
(37,0,0)
(17,13,0)
(16,0,0)
(37,3,0)
(15,24,0)
(3,37,0)
(23,28,0)
(18,36,0)
(8,12,0)
(28,0,0)
(14,11,0)
(20,18,0)
(6,12,0)
(29,20,0)
(3,28,0)
(34,28,0)
(27,13,1)
(10,3,1)
(28,0,1)
(20,18,1)
(1,17,1)
(20,29,1)
(32,33,1)
(22,31,1)
(3,28,1)
(36,19,1)
(34,37,1)
(14,10,1)
(26,18,1)
(7,15,1)
(37,22,1)
(17,0,1)
(20,0,1)
(7,14,1)
(28,18,1)
(19,4,1)
(29,3,1)
(23,34,1)
(7,2,1)
(16,32,1)
(0,16,1)
(2,27,1)
(21,20,1)
(37,0,1)
(33,25,1)
(18,36,1)
(25,26,1)
(37,18,1)
(15,21,1)
(3,37,1)
(28,23,1)
(31,13,1)
(13,1,1)
(17,33,1)
(29,3,2)
(37,18,2)
(0,16,2)
(37,13,2)
(18,36,2)
(3,13,2)
(20,18,2)
(37,0,2)
(2,13,2)
(31,13,2)
(16,33,2)
(28,37,2)
(10,3,2)
(32,33,2)
(3,37,2)
(28,18,2)
(14,3,2)
(20,3,2)
(22,13,2)
(15,3,2)
(28,0,2)
(21,3,2)
(23,37,2)
(3,28,2)
(27,13,2)
(34,37,2)
(0,33,2)
(20,0,2)
-----------------------------------
(0,count = RAND32()
(1,5)
(2,printLine("Benign, fixed string")
(3,count > 0 && count <= 2000)
(4,count)
(5,if (count > 0 && count <= 2000)
(6,if(STATIC_CONST_FIVE==5)
(7,RET)
(8,count)
(9,if(STATIC_CONST_FIVE!=5)
(10,"Sleep time too long")
(11,)
(12,)
(13,STATIC_CONST_FIVE!=5)
(14,printLine("Sleep time too long")
(15,printLine("Sleep time OK")
(16,RAND32()
(17,STATIC_CONST_FIVE)
(18,count = -1)
(19,1)
(20,SLEEP(count)
(21,"Sleep time OK")
(22,0)
(23,2000)
(24,)
(25,5)
(26,STATIC_CONST_FIVE)
(27,"Benign, fixed string")
(28,count <= 2000)
(29,count)
(30,)
(31,count)
(32,count)
(33,STATIC_CONST_FIVE==5)
(34,count)
(35,)
(36,-1)
(37,count > 0)
(38,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^