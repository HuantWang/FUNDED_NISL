-----label-----
1
-----code-----
int activation_send_signal(Connection *controller, const char *path) {
        static const CDVarType type[] = {
                C_DVAR_T_INIT(
                        DRIVER_T_MESSAGE(
                                C_DVAR_T_TUPLE0
                        )
                )
        };
        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;
        _c_cleanup_(message_unrefp) Message *message = NULL;
        void *data;
        size_t n_data;
        int r;

        c_dvar_begin_write(&var, type, 1);
        c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)])())",
                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,
                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, path,
                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Name",
                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "Activate");

        r = c_dvar_end_write(&var, &data, &n_data);
        if (r)
                return error_origin(r);

        r = message_new_outgoing(&message, data, n_data);
        if (r)
                return error_fold(r);

        /* XXX: accounting */
        /* this is excluded from monitoring as it is on our private connection */
        r = connection_queue(controller, NULL, 0, message);
        if (r)
                return error_fold(r);

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
16,34
16,35
17,18
18,19
18,20
19,20
21,22
21,23
21,24
24,25
25,26
26,27
26,28
27,28
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
63,64
63,65
63,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
84,85
86,87
87,88
87,89
87,90
87,91
88,89
90,91
91,92
93,94
96,97
97,98
97,99
97,100
97,101
97,102
97,103
97,104
97,105
97,106
97,107
97,108
97,109
97,110
97,111
97,112
97,113
97,114
97,115
98,99
100,101
101,102
104,105
104,106
104,107
105,106
105,107
106,107
108,109
109,110
113,114
115,116
119,120
119,121
120,121
121,122
124,125
126,127
128,129
130,131
132,133
135,136
137,138
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
145,146
147,148
148,149
150,151
151,152
153,154
154,155
156,157
156,158
157,158
159,160
160,161
160,162
161,162
163,164
165,166
166,167
166,168
167,168
169,170
169,171
169,172
169,173
170,171
172,173
173,174
175,176
177,178
179,180
179,181
180,181
182,183
183,184
183,185
184,185
186,187
188,189
189,190
189,191
190,191
192,193
192,194
192,195
192,196
192,197
193,194
195,196
197,198
200,201
202,203
202,204
203,204
205,206
206,207
206,208
207,208
209,210
211,212
-----nextToken-----
2,4,7,9,10,12,14,15,20,22,23,28,31,33,37,40,45,47,50,54,57,62,64,65,68,71,73,74,78,80,83,85,89,92,94,95,99,102,103,107,110,111,112,114,116,117,118,122,123,125,127,129,131,133,134,136,138,139,143,146,149,152,155,158,162,164,168,171,174,176,178,181,185,187,191,194,196,198,199,201,204,208,210,212
-----computeFrom-----
119,120
119,121
141,142
141,143
166,167
166,168
189,190
189,191
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int activation_send_signal(Connection *controller, const char *path) {        static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        void *data;        size_t n_data;        int r;        c_dvar_begin_write(&var, type, 1);        c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, path,                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Name",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "Activate");        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        /* XXX: accounting */        /* this is excluded from monitoring as it is on our private connection */        r = connection_queue(controller, NULL, 0, message);        if (r)                return error_fold(r);        return 0;}
int
activation_send_signal(Connection *controller, const char *path)
activation_send_signal
Connection *controller
Connection
Connection
*controller
*
controller
const char *path
const char
*path
*
path
{        static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        void *data;        size_t n_data;        int r;        c_dvar_begin_write(&var, type, 1);        c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, path,                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Name",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "Activate");        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        /* XXX: accounting */        /* this is excluded from monitoring as it is on our private connection */        r = connection_queue(controller, NULL, 0, message);        if (r)                return error_fold(r);        return 0;}
static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };
static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        };
static const CDVarType
CDVarType
type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        }
type
[]
= {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        }
{                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )        }
C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )                )
C_DVAR_T_INIT
C_DVAR_T_INIT
DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE0                        )
DRIVER_T_MESSAGE
DRIVER_T_MESSAGE
C_DVAR_T_TUPLE0
C_DVAR_T_TUPLE0
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_
_c_cleanup_
(c_dvar_deinitp)
c_dvar_deinitp
c_dvar_deinitp
)
CDVar var = C_DVAR_INIT;
CDVar var = C_DVAR_INIT;
CDVar
CDVar
var = C_DVAR_INIT
var
= C_DVAR_INIT
C_DVAR_INIT
C_DVAR_INIT
_c_cleanup_(message_unrefp)
_c_cleanup_(message_unrefp)
_c_cleanup_
_c_cleanup_
(message_unrefp)
message_unrefp
message_unrefp
)
Message *message = NULL;
Message *message = NULL;
Message
Message
*message = NULL
*
message
= NULL
NULL
NULL
void *data;
void *data;
void
*data
*
data
size_t n_data;
size_t n_data;
size_t
size_t
n_data
n_data
int r;
int r;
int
r
r
c_dvar_begin_write(&var, type, 1);
c_dvar_begin_write(&var, type, 1)
c_dvar_begin_write
c_dvar_begin_write
&var
var
var
type
type
1
c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, path,                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Name",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "Activate");
c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, path,                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Name",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "Activate")
c_dvar_write
c_dvar_write
&var
var
var
"((yyyyuu[(y<o>)(y<s>)(y<s>)])())"
c_dvar_is_big_endian(&var) ? 'B' : 'l'
c_dvar_is_big_endian(&var)
c_dvar_is_big_endian
c_dvar_is_big_endian
&var
var
var
'B'
'l'
DBUS_MESSAGE_TYPE_SIGNAL
DBUS_MESSAGE_TYPE_SIGNAL
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
1
0
(uint32_t)-1
(uint32_t)
uint32_t
uint32_t
1
DBUS_MESSAGE_FIELD_PATH
DBUS_MESSAGE_FIELD_PATH
c_dvar_type_o
c_dvar_type_o
path
path
DBUS_MESSAGE_FIELD_INTERFACE
DBUS_MESSAGE_FIELD_INTERFACE
c_dvar_type_s
c_dvar_type_s
"org.bus1.DBus.Name"
DBUS_MESSAGE_FIELD_MEMBER
DBUS_MESSAGE_FIELD_MEMBER
c_dvar_type_s
c_dvar_type_s
"Activate"
r = c_dvar_end_write(&var, &data, &n_data);
r = c_dvar_end_write(&var, &data, &n_data)
r
r
c_dvar_end_write(&var, &data, &n_data)
c_dvar_end_write
c_dvar_end_write
&var
var
var
&data
data
data
&n_data
n_data
n_data
if (r)                return error_origin(r);
r
r
return error_origin(r);
error_origin(r)
error_origin
error_origin
r
r
r = message_new_outgoing(&message, data, n_data);
r = message_new_outgoing(&message, data, n_data)
r
r
message_new_outgoing(&message, data, n_data)
message_new_outgoing
message_new_outgoing
&message
message
message
data
data
n_data
n_data
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = connection_queue(controller, NULL, 0, message);
r = connection_queue(controller, NULL, 0, message)
r
r
connection_queue(controller, NULL, 0, message)
connection_queue
connection_queue
controller
controller
NULL
NULL
0
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(36,29,0)
(56,16,0)
(28,52,0)
(75,0,0)
(25,87,0)
(55,52,0)
(3,72,0)
(81,67,0)
(8,0,0)
(21,35,0)
(54,77,0)
(87,77,0)
(26,77,0)
(41,90,0)
(82,16,0)
(58,29,0)
(42,29,0)
(42,5,0)
(28,63,0)
(15,72,0)
(55,3,0)
(1,5,0)
(35,16,0)
(60,46,0)
(90,0,0)
(52,77,0)
(6,78,0)
(57,16,0)
(23,72,0)
(59,22,0)
(7,0,0)
(56,81,0)
(76,29,0)
(65,0,0)
(62,29,0)
(77,76,0)
(28,26,0)
(73,29,0)
(79,35,0)
(72,43,0)
(21,29,0)
(32,56,0)
(91,59,0)
(48,72,0)
(39,3,0)
(0,11,0)
(0,90,0)
(0,67,0)
(5,46,0)
(53,29,0)
(78,29,0)
(21,4,0)
(31,42,0)
(86,67,0)
(16,29,0)
(59,91,0)
(5,42,0)
(71,21,0)
(45,87,0)
(38,55,0)
(78,59,0)
(9,0,0)
(59,78,0)
(80,4,0)
(67,0,0)
(82,0,0)
(20,29,0)
(69,16,0)
(35,21,0)
(81,56,0)
(2,0,0)
(0,82,0)
(44,67,0)
(17,0,0)
(18,21,0)
(28,54,0)
(90,64,0)
(34,77,0)
(64,90,0)
(40,0,0)
(10,0,0)
(72,3,0)
(88,29,0)
(70,91,0)
(46,5,0)
(24,0,0)
(66,6,0)
(4,29,0)
(74,22,0)
(61,78,0)
(31,26,0)
(89,0,0)
(12,5,0)
(68,31,0)
(51,41,0)
(67,81,0)
(90,41,0)
(3,29,0)
(85,29,0)
(92,42,0)
(33,63,0)
(77,87,0)
(63,77,0)
(6,54,0)
(49,72,0)
(83,82,0)
(69,59,0)
(13,0,0)
(59,69,0)
(50,0,0)
(30,0,0)
(22,59,0)
(87,45,0)
(19,69,0)
(0,29,0)
(47,16,0)
(84,76,0)
(63,29,0)
(33,14,1)
(35,79,1)
(79,76,1)
(24,67,1)
(56,16,1)
(17,8,1)
(28,26,1)
(61,0,1)
(10,89,1)
(70,22,1)
(23,39,1)
(69,16,1)
(40,50,1)
(37,78,1)
(84,77,1)
(28,54,1)
(54,77,1)
(59,22,1)
(74,69,1)
(51,10,1)
(63,77,1)
(65,90,1)
(42,5,1)
(19,61,1)
(28,63,1)
(78,59,1)
(67,81,1)
(76,84,1)
(16,57,1)
(35,16,1)
(2,17,1)
(72,15,1)
(59,69,1)
(6,66,1)
(83,21,1)
(82,16,1)
(7,24,1)
(5,1,1)
(48,49,1)
(9,65,1)
(69,19,1)
(15,48,1)
(34,87,1)
(4,80,1)
(21,35,1)
(0,11,1)
(47,4,1)
(46,60,1)
(18,71,1)
(26,77,1)
(32,30,1)
(57,47,1)
(49,23,1)
(55,38,1)
(52,55,1)
(56,32,1)
(77,34,1)
(0,82,1)
(12,46,1)
(28,52,1)
(90,64,1)
(26,31,1)
(0,13,1)
(25,16,1)
(3,72,1)
(13,75,1)
(86,81,1)
(55,3,1)
(8,9,1)
(0,90,1)
(21,4,1)
(66,37,1)
(38,14,1)
(91,70,1)
(77,87,1)
(14,3,1)
(21,18,1)
(82,83,1)
(5,46,1)
(89,7,1)
(67,86,1)
(54,6,1)
(90,41,1)
(92,37,1)
(44,81,1)
(81,56,1)
(67,44,1)
(59,91,1)
(31,68,1)
(22,74,1)
(52,77,1)
(31,42,1)
(75,40,1)
(41,51,1)
(87,45,1)
(27,42,1)
(68,27,1)
(1,12,1)
(50,2,1)
(71,35,1)
(60,92,1)
(39,27,1)
(0,67,1)
(63,33,1)
(87,25,1)
(72,43,1)
(6,78,1)
(30,82,1)
(72,43,2)
(1,37,2)
(28,26,2)
(59,91,2)
(55,3,2)
(12,37,2)
(0,67,2)
(35,16,2)
(52,14,2)
(46,37,2)
(77,87,2)
(59,22,2)
(68,27,2)
(6,78,2)
(28,54,2)
(0,82,2)
(82,16,2)
(5,46,2)
(52,77,2)
(3,27,2)
(54,77,2)
(31,27,2)
(81,56,2)
(28,63,2)
(67,81,2)
(87,45,2)
(90,64,2)
(48,27,2)
(3,72,2)
(0,90,2)
(15,27,2)
(0,11,2)
(27,37,2)
(72,27,2)
(26,27,2)
(26,77,2)
(44,81,2)
(14,27,2)
(31,42,2)
(78,59,2)
(21,35,2)
(6,37,2)
(63,77,2)
(63,14,2)
(69,16,2)
(33,14,2)
(38,14,2)
(86,81,2)
(66,37,2)
(39,27,2)
(42,5,2)
(5,37,2)
(92,37,2)
(60,37,2)
(23,27,2)
(28,52,2)
(90,41,2)
(55,14,2)
(54,37,2)
(49,27,2)
(21,4,2)
(59,69,2)
(56,16,2)
(42,37,2)
-----------------------------------
(0,c_dvar_write(&var, "((yyyyuu[(y<o>)
(1,n_data)
(2,c_dvar_type_s)
(3,r = connection_queue(controller, NULL, 0, message)
(4,type[] = {\n\\n                C_DVAR_T_INIT(\n\\n                        DRIVER_T_MESSAGE(\n\\n                                C_DVAR_T_TUPLE0\n\\n                        )
(5,message_new_outgoing(&message, data, n_data)
(6,error_origin(r)
(7,DBUS_HEADER_FLAG_NO_REPLY_EXPECTED)
(8,path)
(9,c_dvar_type_o)
(10,0)
(11,const char *path)
(12,data)
(13,"Activate")
(14,r)
(15,message)
(16,var = C_DVAR_INIT)
(17,DBUS_MESSAGE_FIELD_INTERFACE)
(18,1)
(19,var)
(20,type)
(21,c_dvar_begin_write(&var, type, 1)
(22,&data)
(23,controller)
(24,DBUS_MESSAGE_TYPE_SIGNAL)
(25,Message)
(26,return error_fold(r)
(27,r)
(28,RET)
(29,)
(30,"((yyyyuu[(y<o>)
(31,error_fold(r)
(32,var)
(33,0)
(34,message)
(35,&var)
(36,r)
(37,r)
(38,r)
(39,r)
(40,DBUS_MESSAGE_FIELD_MEMBER)
(41,-1)
(42,r = message_new_outgoing(&message, data, n_data)
(43,Connection *controller)
(44,\'l\')
(45,message_unrefp)
(46,&message)
(47,var)
(48,0)
(49,NULL)
(50,"org.bus1.DBus.Name")
(51,1)
(52,return error_fold(r)
(53,var)
(54,return error_origin(r)
(55,error_fold(r)
(56,&var)
(57,C_DVAR_INIT)
(58,if (r)
(59,c_dvar_end_write(&var, &data, &n_data)
(60,message)
(61,r)
(62,data)
(63,return 0;)
(64,uint32_t)
(65,DBUS_MESSAGE_FIELD_PATH)
(66,r)
(67,c_dvar_is_big_endian(&var)
(68,r)
(69,&var)
(70,n_data)
(71,type)
(72,connection_queue(controller, NULL, 0, message)
(73,if (r)
(74,data)
(75,c_dvar_type_s)
(76,(message_unrefp)
(77,(message_unrefp)
(78,r = c_dvar_end_write(&var, &data, &n_data)
(79,var)
(80,type)
(81,c_dvar_is_big_endian(&var)
(82,&var)
(83,var)
(84,NULL)
(85,n_data)
(86,\'B\')
(87,(message_unrefp)
(88,if (r)
(89,1)
(90,(uint32_t)
(91,&n_data)
(92,r)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^