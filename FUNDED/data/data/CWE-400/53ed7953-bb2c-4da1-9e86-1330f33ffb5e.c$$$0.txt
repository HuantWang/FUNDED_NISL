-----label-----
0
-----code-----
static void goodG2B2()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
57,58
57,59
58,59
58,60
59,60
62,63
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,46,47,48,52,55,56,60,61,63
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int * data;    data = NULL;    if(globalFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int * data;    data = NULL;    if(globalFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,19,0)
(31,0,0)
(2,16,0)
(5,28,0)
(18,8,0)
(3,13,0)
(4,28,0)
(32,7,0)
(30,24,0)
(9,13,0)
(0,28,0)
(22,24,0)
(27,32,0)
(11,5,0)
(5,11,0)
(23,22,0)
(19,14,0)
(17,24,0)
(7,32,0)
(29,32,0)
(26,29,0)
(16,2,0)
(7,5,0)
(2,14,0)
(25,16,0)
(16,19,0)
(32,29,0)
(15,24,0)
(28,5,0)
(12,22,0)
(20,8,0)
(0,19,0)
(5,7,0)
(1,16,0)
(6,0,0)
(16,28,0)
(28,14,0)
(29,26,1)
(32,29,1)
(0,28,1)
(28,5,1)
(9,3,1)
(21,0,1)
(16,25,1)
(5,7,1)
(20,13,1)
(4,13,1)
(27,4,1)
(10,8,1)
(8,18,1)
(31,28,1)
(5,11,1)
(20,2,1)
(26,27,1)
(19,21,1)
(1,19,1)
(6,31,1)
(16,28,1)
(23,12,1)
(18,20,1)
(25,1,1)
(2,16,1)
(7,32,1)
(13,9,1)
(22,23,1)
(16,19,1)
(3,22,1)
(0,6,1)
(1,13,2)
(28,5,2)
(4,13,2)
(27,13,2)
(16,19,2)
(7,32,2)
(5,7,2)
(25,13,2)
(29,13,2)
(0,13,2)
(6,13,2)
(2,13,2)
(16,13,2)
(28,13,2)
(19,13,2)
(2,16,2)
(32,13,2)
(5,13,2)
(0,28,2)
(7,13,2)
(26,13,2)
(16,28,2)
(32,29,2)
(31,13,2)
(5,11,2)
(21,13,2)
-----------------------------------
(0,data[0])
(1,data)
(2,printIntLine(data[0])
(3,globalFive)
(4,data)
(5,(int *)
(6,0)
(7,ALLOCA(100*sizeof(int)
(8,globalFive==5)
(9,5)
(10,RET)
(11,int *)
(12,data)
(13,globalFive==5)
(14,)
(15,if(globalFive==5)
(16,data[0])
(17,if(globalFive==5)
(18,5)
(19,data[0] = 5)
(20,globalFive)
(21,5)
(22,data = NULL)
(23,NULL)
(24,)
(25,0)
(26,int)
(27,100)
(28,data = (int *)
(29,sizeof(int)
(30,data)
(31,data)
(32,100*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^