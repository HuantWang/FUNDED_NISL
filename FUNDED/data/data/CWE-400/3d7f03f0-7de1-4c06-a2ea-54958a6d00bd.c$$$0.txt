-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_06_bad()
{
    int * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
71,72
71,73
72,73
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,68,69,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_06_bad(){    int * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_06_bad()
CWE401_Memory_Leak__int_malloc_06_bad
{    int * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,27,0)
(21,23,0)
(38,23,0)
(16,6,0)
(15,34,0)
(22,40,0)
(1,27,0)
(20,27,0)
(18,35,0)
(31,23,0)
(3,10,0)
(26,34,0)
(2,23,0)
(13,6,0)
(24,20,0)
(9,1,0)
(29,40,0)
(33,28,0)
(3,8,0)
(1,9,0)
(32,20,0)
(5,7,0)
(9,6,0)
(37,1,0)
(20,14,0)
(19,18,0)
(39,2,0)
(25,28,0)
(14,20,0)
(17,35,0)
(10,3,0)
(14,35,0)
(36,7,0)
(7,27,0)
(27,35,0)
(1,37,0)
(27,1,0)
(6,16,0)
(0,16,0)
(7,18,0)
(6,9,0)
(12,10,0)
(4,2,0)
(30,27,0)
(20,18,0)
(24,18,1)
(16,0,1)
(34,15,1)
(13,30,1)
(36,3,1)
(7,27,1)
(7,5,1)
(29,22,1)
(30,28,1)
(22,14,1)
(27,1,1)
(9,6,1)
(28,33,1)
(26,27,1)
(1,37,1)
(12,34,1)
(36,34,1)
(18,19,1)
(34,27,1)
(6,16,1)
(1,9,1)
(3,10,1)
(11,40,1)
(15,26,1)
(40,29,1)
(20,32,1)
(5,36,1)
(20,18,1)
(2,4,1)
(0,13,1)
(4,39,1)
(19,7,1)
(25,2,1)
(10,12,1)
(14,20,1)
(32,24,1)
(20,27,1)
(22,28,1)
(33,25,1)
(15,28,2)
(18,28,2)
(10,34,2)
(34,27,2)
(0,28,2)
(14,20,2)
(1,28,2)
(24,28,2)
(27,28,2)
(3,10,2)
(20,27,2)
(27,1,2)
(30,28,2)
(32,28,2)
(6,28,2)
(1,37,2)
(13,28,2)
(9,6,2)
(34,28,2)
(16,28,2)
(12,34,2)
(14,28,2)
(19,28,2)
(7,28,2)
(20,18,2)
(6,16,2)
(26,28,2)
(5,28,2)
(3,34,2)
(1,9,2)
(20,28,2)
(9,28,2)
(36,28,2)
(7,27,2)
-----------------------------------
(0,int)
(1,(int *)
(2,data = NULL)
(3,exit(-1)
(4,NULL)
(5,0)
(6,100*sizeof(int)
(7,data[0])
(8,)
(9,malloc(100*sizeof(int)
(10,-1)
(11,RET)
(12,1)
(13,100)
(14,printIntLine(data[0])
(15,NULL)
(16,sizeof(int)
(17,if (data == NULL)
(18,data[0] = 5)
(19,5)
(20,data[0])
(21,data)
(22,STATIC_CONST_FIVE)
(23,)
(24,data)
(25,STATIC_CONST_FIVE)
(26,data)
(27,data = (int *)
(28,STATIC_CONST_FIVE==5)
(29,5)
(30,data)
(31,if(STATIC_CONST_FIVE==5)
(32,0)
(33,5)
(34,data == NULL)
(35,)
(36,data)
(37,int *)
(38,if(STATIC_CONST_FIVE==5)
(39,data)
(40,STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^