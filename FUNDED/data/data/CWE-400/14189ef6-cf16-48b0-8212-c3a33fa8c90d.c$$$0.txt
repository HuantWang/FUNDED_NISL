-----label-----
0
-----code-----
static void goodB2G()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Close the file from the source before pointing data to a new file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        data = fopen("GoodSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
    else
    {
        /* FIX: Close the file from the source before pointing data to a new file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        data = fopen("GoodSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
28,31
29,30
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
51,52
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
86,88
86,89
87,88
91,92
91,93
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,31,36,38,43,45,49,52,53,54,58,60,65,67,72,74,79,81,85,88,89,90,94,96,101,103
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
47,48
47,49
56,57
56,58
70,71
70,72
83,84
83,85
92,93
92,94
-----guardedBy-----
36,45
58,67
72,81
94,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(globalReturnsTrueOrFalse())    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
static void
goodB2G()
goodB2G
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(globalReturnsTrueOrFalse())    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(globalReturnsTrueOrFalse())    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
data = fopen("GoodSink_fopen.txt", "w+");
data = fopen("GoodSink_fopen.txt", "w+")
data
data
fopen("GoodSink_fopen.txt", "w+")
fopen
fopen
"GoodSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
{        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
data = fopen("GoodSink_fopen.txt", "w+");
data = fopen("GoodSink_fopen.txt", "w+")
data
data
fopen("GoodSink_fopen.txt", "w+")
fopen
fopen
"GoodSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(35,38,0)
(42,38,0)
(14,48,0)
(10,2,0)
(4,48,0)
(8,31,0)
(6,22,0)
(43,35,0)
(34,12,0)
(9,41,0)
(24,50,0)
(51,45,0)
(13,39,0)
(41,50,0)
(37,0,0)
(52,44,0)
(50,0,0)
(22,35,0)
(7,2,0)
(18,30,0)
(33,5,0)
(49,44,0)
(50,2,0)
(36,12,0)
(25,0,0)
(11,27,0)
(45,2,0)
(3,22,0)
(31,32,0)
(26,45,0)
(39,48,0)
(17,14,0)
(38,35,0)
(15,50,0)
(30,35,0)
(20,14,0)
(30,29,0)
(44,48,0)
(48,5,0)
(40,38,0)
(12,50,0)
(39,46,0)
(31,50,0)
(41,1,0)
(47,24,0)
(48,14,0)
(16,27,0)
(19,24,0)
(28,5,0)
(35,27,0)
(0,50,0)
(18,22,1)
(25,37,1)
(21,44,1)
(31,50,1)
(31,8,1)
(4,12,1)
(17,4,1)
(52,48,1)
(20,17,1)
(14,20,1)
(43,31,1)
(48,14,1)
(40,43,1)
(41,50,1)
(22,3,1)
(12,36,1)
(49,52,1)
(21,39,1)
(34,23,1)
(39,48,1)
(9,12,1)
(30,35,1)
(47,23,1)
(50,0,1)
(21,22,1)
(36,34,1)
(39,13,1)
(45,51,1)
(4,41,1)
(3,6,1)
(22,35,1)
(8,24,1)
(12,50,1)
(44,48,1)
(44,49,1)
(24,50,1)
(15,45,1)
(41,9,1)
(43,24,1)
(51,26,1)
(42,40,1)
(35,38,1)
(0,25,1)
(21,30,1)
(19,47,1)
(24,19,1)
(37,15,1)
(38,42,1)
(6,35,1)
(30,18,1)
(13,44,1)
(23,50,1)
(35,38,2)
(12,50,2)
(30,35,2)
(52,23,2)
(24,23,2)
(6,23,2)
(19,23,2)
(9,12,2)
(22,23,2)
(40,23,2)
(41,12,2)
(8,24,2)
(50,0,2)
(22,35,2)
(44,48,2)
(3,23,2)
(48,14,2)
(49,23,2)
(20,23,2)
(18,22,2)
(48,23,2)
(31,24,2)
(39,48,2)
(42,23,2)
(31,50,2)
(41,50,2)
(47,23,2)
(43,23,2)
(35,23,2)
(24,50,2)
(34,23,2)
(17,23,2)
(30,22,2)
(12,23,2)
(13,44,2)
(39,44,2)
(38,23,2)
(44,23,2)
(14,23,2)
(36,23,2)
(4,23,2)
-----------------------------------
(0,fopen("BadSource_fopen.txt", "w+")
(1,)
(2,)
(3,NULL)
(4,data)
(5,)
(6,data)
(7,data)
(8,data)
(9,data)
(10,if(globalReturnsTrueOrFalse()
(11,if (data != NULL)
(12,data != NULL)
(13,data)
(14,fopen("GoodSink_fopen.txt", "w+")
(15,data)
(16,if (data != NULL)
(17,"GoodSink_fopen.txt")
(18,data)
(19,NULL)
(20,"w+")
(21,RET)
(22,data != NULL)
(23,globalReturnsTrueOrFalse()
(24,data != NULL)
(25,"w+")
(26,data)
(27,)
(28,if (data != NULL)
(29,)
(30,fclose(data)
(31,fclose(data)
(32,)
(33,if (data != NULL)
(34,data)
(35,data = fopen("GoodSink_fopen.txt", "w+")
(36,NULL)
(37,"BadSource_fopen.txt")
(38,fopen("GoodSink_fopen.txt", "w+")
(39,fclose(data)
(40,"GoodSink_fopen.txt")
(41,fclose(data)
(42,"w+")
(43,data)
(44,data != NULL)
(45,data = NULL)
(46,)
(47,data)
(48,data = fopen("GoodSink_fopen.txt", "w+")
(49,NULL)
(50,data = fopen("BadSource_fopen.txt", "w+")
(51,NULL)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^