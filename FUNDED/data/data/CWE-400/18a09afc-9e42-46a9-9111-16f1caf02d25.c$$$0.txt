-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,27,0)
(40,26,0)
(38,35,0)
(26,40,0)
(16,8,0)
(29,48,0)
(19,46,0)
(30,33,0)
(50,12,0)
(5,4,0)
(11,22,0)
(39,14,0)
(15,48,0)
(11,39,0)
(37,24,0)
(32,13,0)
(39,11,0)
(51,27,0)
(10,12,0)
(34,6,0)
(4,5,0)
(34,8,0)
(28,23,0)
(40,2,0)
(43,1,0)
(12,35,0)
(46,2,0)
(45,14,0)
(11,26,0)
(23,14,0)
(24,30,0)
(25,48,0)
(49,51,0)
(42,1,0)
(12,2,0)
(34,2,0)
(52,31,0)
(51,23,0)
(20,13,0)
(35,0,0)
(17,27,0)
(47,40,0)
(7,2,0)
(41,0,0)
(26,11,0)
(13,48,0)
(2,14,0)
(36,46,0)
(4,8,0)
(27,51,0)
(30,24,0)
(3,40,0)
(35,12,0)
(6,34,0)
(8,34,0)
(27,2,0)
(22,11,0)
(21,31,0)
(2,34,0)
(8,4,0)
(0,14,0)
(16,7,1)
(42,39,1)
(11,22,1)
(51,27,1)
(0,41,1)
(40,2,1)
(21,52,1)
(50,23,1)
(10,50,1)
(12,10,1)
(43,42,1)
(36,2,1)
(46,2,1)
(31,21,1)
(39,11,1)
(42,31,1)
(34,8,1)
(11,26,1)
(49,27,1)
(27,17,1)
(17,18,1)
(52,13,1)
(30,24,1)
(12,2,1)
(35,12,1)
(46,19,1)
(13,20,1)
(26,40,1)
(38,12,1)
(8,4,1)
(18,46,1)
(2,34,1)
(1,43,1)
(23,28,1)
(20,32,1)
(27,2,1)
(3,0,1)
(19,36,1)
(4,5,1)
(37,46,1)
(51,49,1)
(4,16,1)
(47,3,1)
(35,38,1)
(40,47,1)
(28,51,1)
(34,6,1)
(24,37,1)
(9,1,1)
(41,35,1)
(18,30,1)
(7,31,1)
(35,12,2)
(2,31,2)
(46,2,2)
(50,31,2)
(28,31,2)
(19,31,2)
(27,31,2)
(46,31,2)
(36,31,2)
(0,31,2)
(24,46,2)
(11,22,2)
(30,24,2)
(26,31,2)
(34,6,2)
(40,31,2)
(8,31,2)
(12,31,2)
(40,2,2)
(26,40,2)
(51,27,2)
(51,31,2)
(39,11,2)
(4,31,2)
(7,31,2)
(47,31,2)
(38,31,2)
(16,31,2)
(11,31,2)
(35,31,2)
(34,31,2)
(10,31,2)
(41,31,2)
(8,4,2)
(12,2,2)
(3,31,2)
(37,46,2)
(30,46,2)
(18,31,2)
(34,8,2)
(49,31,2)
(39,31,2)
(11,26,2)
(17,31,2)
(27,2,2)
(23,31,2)
(2,34,2)
(4,5,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,globalFive==5)
(2,data = (struct _twoIntsStruct *)
(3,data)
(4,sizeof(struct _twoIntsStruct)
(5,struct _twoIntsStruct)
(6,struct _twoIntsStruct *)
(7,data)
(8,calloc(100, sizeof(struct _twoIntsStruct)
(9,RET)
(10,0)
(11,(twoIntsStruct *)
(12,data[0])
(13,data = NULL)
(14,)
(15,data)
(16,100)
(17,0)
(18,data)
(19,NULL)
(20,NULL)
(21,5)
(22,twoIntsStruct *)
(23,data[0].intOne = 0)
(24,-1)
(25,if(globalFive==5)
(26,&data[0])
(27,data[0])
(28,0)
(29,if(globalFive==5)
(30,exit(-1)
(31,globalFive==5)
(32,data)
(33,)
(34,(struct _twoIntsStruct *)
(35,data[0].intTwo)
(36,data)
(37,1)
(38,intTwo)
(39,printStructLine((twoIntsStruct *)
(40,data[0])
(41,0)
(42,globalFive)
(43,5)
(44, sizeof(struct _twoIntsStruct)
(45,if (data == NULL)
(46,data == NULL)
(47,0)
(48,)
(49,intOne)
(50,data)
(51,data[0].intOne)
(52,globalFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^