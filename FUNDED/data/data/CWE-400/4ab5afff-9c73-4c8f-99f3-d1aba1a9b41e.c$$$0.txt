-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(staticReturnsTrue())
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
49,50
51,52
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,50,55,57
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(16,14,0)
(20,17,0)
(6,11,0)
(10,12,0)
(5,14,0)
(7,22,0)
(8,0,0)
(0,8,0)
(23,14,0)
(4,14,0)
(2,0,0)
(21,6,0)
(8,20,0)
(13,4,0)
(6,4,0)
(0,22,0)
(6,8,0)
(12,20,0)
(1,22,0)
(3,8,0)
(15,20,0)
(24,4,0)
(12,8,0)
(22,20,0)
(2,3,1)
(1,9,1)
(6,21,1)
(7,1,1)
(3,22,1)
(6,4,1)
(4,24,1)
(22,7,1)
(0,22,1)
(18,9,1)
(0,2,1)
(12,10,1)
(19,18,1)
(10,8,1)
(24,13,1)
(9,4,1)
(21,18,1)
(19,6,1)
(18,12,1)
(6,8,1)
(12,8,1)
(8,0,1)
(10,9,2)
(12,9,2)
(6,18,2)
(22,9,2)
(21,18,2)
(8,0,2)
(0,9,2)
(0,22,2)
(8,9,2)
(3,9,2)
(6,4,2)
(1,9,2)
(2,9,2)
(6,8,2)
(7,9,2)
(12,8,2)
-----------------------------------
(0,strdup(myString)
(1,myString)
(2,myString)
(3,data)
(4,data = NULL)
(5,data)
(6,free(data)
(7,"myString")
(8,data = strdup(myString)
(9,staticReturnsTrue()
(10,data)
(11,)
(12,printLine(data)
(13,data)
(14,)
(15,myString)
(16,if(staticReturnsTrue()
(17,)
(18,staticReturnsTrue()
(19,RET)
(20,)
(21,data)
(22,myString[] = "myString")
(23,if(staticReturnsTrue()
(24,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^