-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
30,31
30,32
31,32
31,33
32,33
33,34
33,35
35,36
35,37
38,39
38,40
38,41
39,40
39,41
40,41
42,43
42,44
43,44
45,46
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
61,62
63,64
64,65
64,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
81,84
82,83
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
102,103
102,104
103,104
-----nextToken-----
2,4,9,11,15,16,18,23,26,27,29,34,36,37,41,44,46,51,54,56,59,62,65,66,70,72,77,79,83,85,87,91,93,97,99,104,105,106
-----computeFrom-----
13,14
13,15
21,22
21,23
39,40
39,41
49,50
49,51
60,61
60,62
68,69
68,70
-----guardedBy-----
46,87
41,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    }
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(38,0,0)
(40,16,0)
(37,17,0)
(10,29,0)
(29,13,0)
(27,17,0)
(50,29,0)
(46,24,0)
(36,10,0)
(7,29,0)
(0,49,0)
(38,44,0)
(25,33,0)
(49,0,0)
(14,13,0)
(9,12,0)
(48,40,0)
(29,49,0)
(33,13,0)
(35,38,0)
(44,34,0)
(39,49,0)
(38,35,0)
(44,51,0)
(20,44,0)
(11,17,0)
(0,38,0)
(40,27,0)
(43,27,0)
(26,9,0)
(15,50,0)
(2,5,0)
(12,9,0)
(34,44,0)
(38,27,0)
(7,13,0)
(12,21,0)
(40,44,0)
(33,29,0)
(22,35,0)
(5,8,0)
(47,51,0)
(10,13,0)
(41,27,0)
(32,50,0)
(49,39,0)
(49,29,0)
(3,46,0)
(16,40,0)
(18,7,0)
(1,16,0)
(4,7,0)
(6,46,0)
(31,29,0)
(30,24,0)
(45,17,0)
(28,38,0)
(48,19,1)
(50,29,1)
(22,28,1)
(27,41,1)
(19,23,1)
(47,44,1)
(28,31,1)
(10,29,1)
(5,2,1)
(38,44,1)
(30,5,1)
(40,27,1)
(4,12,1)
(23,27,1)
(38,27,1)
(50,15,1)
(4,50,1)
(10,36,1)
(25,10,1)
(42,19,1)
(7,29,1)
(7,18,1)
(20,23,1)
(40,16,1)
(29,49,1)
(16,1,1)
(26,50,1)
(30,33,1)
(44,34,1)
(9,26,1)
(2,40,1)
(19,47,1)
(38,35,1)
(32,29,1)
(49,0,1)
(49,39,1)
(36,7,1)
(18,4,1)
(42,30,1)
(0,38,1)
(41,43,1)
(34,20,1)
(31,40,1)
(40,44,1)
(33,29,1)
(35,22,1)
(12,9,1)
(15,32,1)
(33,25,1)
(1,48,1)
(9,50,2)
(44,34,2)
(50,40,2)
(26,50,2)
(40,19,2)
(40,16,2)
(34,23,2)
(0,40,2)
(40,27,2)
(38,40,2)
(49,0,2)
(7,40,2)
(32,40,2)
(25,40,2)
(10,40,2)
(5,40,2)
(38,44,2)
(28,40,2)
(49,40,2)
(49,39,2)
(1,19,2)
(40,44,2)
(47,23,2)
(10,29,2)
(4,40,2)
(22,40,2)
(29,40,2)
(35,40,2)
(7,29,2)
(36,40,2)
(33,29,2)
(0,38,2)
(12,9,2)
(12,50,2)
(30,19,2)
(38,35,2)
(33,40,2)
(31,40,2)
(15,40,2)
(50,29,2)
(16,19,2)
(38,27,2)
(2,40,2)
(48,19,2)
(44,23,2)
(18,40,2)
(20,23,2)
(29,49,2)
-----------------------------------
(0,malloc(data*sizeof(wchar_t)
(1,HELLO_STRING)
(2,"Input is less than the length of the source string")
(3,myString)
(4,myString)
(5,printLine("Input is less than the length of the source string")
(6,if (data > wcslen(HELLO_STRING)
(7,wcscpy(myString, HELLO_STRING)
(8,)
(9,-1)
(10,printWLine(myString)
(11,data)
(12,exit(-1)
(13,)
(14,if (myString == NULL)
(15,NULL)
(16,wcslen(HELLO_STRING)
(17,)
(18,HELLO_STRING)
(19,1)
(20,data)
(21,)
(22,wchar_t)
(23,1)
(24,)
(25,myString)
(26,1)
(27,data = 0)
(28,data)
(29,myString = (wchar_t *)
(30,break;)
(31,myString)
(32,myString)
(33,free(myString)
(34,rand()
(35,sizeof(wchar_t)
(36,myString)
(37,while(1)
(38,data*sizeof(wchar_t)
(39,wchar_t *)
(40,data > wcslen(HELLO_STRING)
(41,0)
(42,RET)
(43,data)
(44,data = rand()
(45,while(1)
(46,)
(47,break;)
(48,data)
(49,(wchar_t *)
(50,myString == NULL)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^