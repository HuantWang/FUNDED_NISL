-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,19,24,25,28,34,36,38,43,44,47,51,52,54,57,62,63
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(34,21,0)
(25,19,0)
(28,13,0)
(11,10,0)
(17,5,0)
(33,19,0)
(21,6,0)
(20,29,0)
(4,6,0)
(6,16,0)
(7,29,0)
(32,26,0)
(3,19,0)
(27,26,0)
(29,0,0)
(10,11,0)
(22,6,0)
(11,26,0)
(30,10,0)
(5,23,0)
(21,34,0)
(13,29,0)
(9,13,0)
(2,26,0)
(14,33,0)
(15,3,0)
(31,19,0)
(8,11,0)
(21,33,0)
(21,11,0)
(33,21,0)
(18,21,0)
(33,19,1)
(15,5,1)
(33,21,1)
(3,15,1)
(21,6,1)
(4,22,1)
(28,9,1)
(25,31,1)
(30,8,1)
(24,1,1)
(5,17,1)
(12,33,1)
(13,28,1)
(21,34,1)
(3,19,1)
(31,13,1)
(14,19,1)
(9,24,1)
(22,1,1)
(17,33,1)
(6,4,1)
(11,10,1)
(21,18,1)
(18,14,1)
(19,25,1)
(24,6,1)
(12,24,1)
(14,3,1)
(10,30,1)
(21,11,1)
(1,11,1)
(33,33,2)
(25,24,2)
(33,19,2)
(21,6,2)
(3,33,2)
(3,19,2)
(22,1,2)
(14,33,2)
(33,21,2)
(17,33,2)
(21,34,2)
(28,24,2)
(4,1,2)
(31,24,2)
(21,33,2)
(13,24,2)
(21,11,2)
(19,24,2)
(33,24,2)
(18,33,2)
(9,24,2)
(21,24,2)
(11,10,2)
(5,33,2)
(14,24,2)
(15,33,2)
(18,24,2)
(6,1,2)
-----------------------------------
(0,)
(1,STATIC_CONST_TRUE)
(2,if(STATIC_CONST_TRUE)
(3,i++)
(4,20)
(5,printLine("Hello")
(6,count = 20)
(7,for (i = 0; i < (size_t)
(8,count)
(9,i)
(10,-1)
(11,count = -1)
(12,RET)
(13,i = 0)
(14,i)
(15,i)
(16,)
(17,"Hello")
(18,count)
(19,i = 0)
(20,i)
(21,(size_t)
(22,count)
(23,)
(24,STATIC_CONST_TRUE)
(25,0)
(26,)
(27,if(STATIC_CONST_TRUE)
(28,0)
(29,)
(30,1)
(31,i)
(32,count)
(33,i < (size_t)
(34,size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^