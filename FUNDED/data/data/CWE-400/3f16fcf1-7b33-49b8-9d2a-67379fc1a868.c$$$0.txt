-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink(size_t data)
{
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink(size_t data){    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(10,28,0)
(18,23,0)
(33,1,0)
(2,10,0)
(9,21,0)
(13,5,0)
(33,28,0)
(15,9,0)
(19,5,0)
(7,36,0)
(6,11,0)
(36,29,0)
(35,41,0)
(20,6,0)
(27,21,0)
(5,13,0)
(40,4,0)
(23,39,0)
(30,17,0)
(38,21,0)
(25,38,0)
(24,10,0)
(33,37,0)
(17,30,0)
(17,21,0)
(13,17,0)
(16,36,0)
(37,33,0)
(28,10,0)
(34,19,0)
(4,31,0)
(12,11,0)
(41,21,0)
(3,40,0)
(6,21,0)
(28,33,0)
(9,11,0)
(32,38,0)
(21,17,0)
(41,11,0)
(5,1,0)
(8,37,0)
(17,13,0)
(10,1,0)
(22,5,0)
(21,11,0)
(26,33,0)
(5,19,0)
(0,41,0)
(4,40,0)
(35,0,1)
(2,24,1)
(33,37,1)
(5,1,1)
(6,21,1)
(14,9,1)
(41,35,1)
(13,5,1)
(27,28,1)
(22,27,1)
(9,15,1)
(21,17,1)
(17,13,1)
(10,2,1)
(28,33,1)
(19,34,1)
(41,21,1)
(28,10,1)
(10,1,1)
(6,20,1)
(32,25,1)
(18,28,1)
(5,19,1)
(40,3,1)
(38,32,1)
(8,26,1)
(33,1,1)
(20,41,1)
(14,23,1)
(34,22,1)
(0,4,1)
(38,21,1)
(24,33,1)
(37,8,1)
(0,38,1)
(15,6,1)
(17,30,1)
(9,21,1)
(4,40,1)
(25,21,1)
(23,18,1)
(3,38,1)
(9,28,2)
(17,28,2)
(23,28,2)
(5,19,2)
(4,38,2)
(34,28,2)
(41,21,2)
(13,28,2)
(22,28,2)
(19,28,2)
(28,10,2)
(9,21,2)
(6,28,2)
(18,28,2)
(27,28,2)
(10,33,2)
(32,28,2)
(13,5,2)
(33,37,2)
(5,1,2)
(38,21,2)
(40,38,2)
(28,33,2)
(15,28,2)
(6,21,2)
(35,28,2)
(41,28,2)
(24,33,2)
(25,28,2)
(21,28,2)
(21,17,2)
(0,28,2)
(17,13,2)
(10,1,2)
(20,28,2)
(33,1,2)
(3,38,2)
(2,33,2)
(4,40,2)
(17,30,2)
(38,28,2)
(5,28,2)
-----------------------------------
(0,myString)
(1,size_t data)
(2,100)
(3,1)
(4,exit(-1)
(5,data*sizeof(char)
(6,printLine(myString)
(7,if (data > strlen(HELLO_STRING)
(8,HELLO_STRING)
(9,free(myString)
(10,data < 100)
(11,)
(12,if (myString == NULL)
(13,malloc(data*sizeof(char)
(14,RET)
(15,myString)
(16,myString)
(17,(char *)
(18,"Input is less than the length of the source string or too large")
(19,sizeof(char)
(20,myString)
(21,myString = (char *)
(22,data)
(23,printLine("Input is less than the length of the source string or too large")
(24,data)
(25,myString)
(26,data)
(27,myString)
(28,data > strlen(HELLO_STRING)
(29,)
(30,char *)
(31,)
(32,NULL)
(33,data > strlen(HELLO_STRING)
(34,char)
(35,HELLO_STRING)
(36,)
(37,strlen(HELLO_STRING)
(38,myString == NULL)
(39,)
(40,-1)
(41,strcpy(myString, HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^