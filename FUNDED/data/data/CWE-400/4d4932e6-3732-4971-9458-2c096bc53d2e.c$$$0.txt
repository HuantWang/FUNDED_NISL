-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(45,27,0)
(37,26,0)
(50,30,0)
(22,3,0)
(17,38,0)
(48,3,0)
(3,48,0)
(2,15,0)
(18,44,0)
(48,13,0)
(33,1,0)
(8,22,0)
(11,50,0)
(41,47,0)
(1,43,0)
(27,5,0)
(25,26,0)
(26,37,0)
(30,5,0)
(3,22,0)
(34,35,0)
(29,6,0)
(49,30,0)
(7,50,0)
(13,48,0)
(42,44,0)
(21,1,0)
(20,34,0)
(40,43,0)
(39,6,0)
(35,5,0)
(9,35,0)
(43,40,0)
(46,31,0)
(1,30,0)
(6,38,0)
(0,13,0)
(32,38,0)
(13,30,0)
(15,2,0)
(2,36,0)
(19,47,0)
(14,37,0)
(24,3,0)
(43,1,0)
(23,5,0)
(26,27,0)
(31,30,0)
(28,38,0)
(40,5,0)
(34,31,0)
(13,0,0)
(16,31,0)
(30,13,0)
(4,15,0)
(31,34,0)
(12,37,0)
(37,30,0)
(45,26,1)
(22,8,1)
(14,50,1)
(50,7,1)
(19,6,1)
(18,47,1)
(10,44,1)
(43,1,1)
(13,0,1)
(12,14,1)
(50,30,1)
(21,33,1)
(37,12,1)
(18,40,1)
(27,45,1)
(35,9,1)
(37,30,1)
(24,49,1)
(14,2,1)
(8,24,1)
(30,13,1)
(3,22,1)
(49,47,1)
(40,43,1)
(13,48,1)
(46,16,1)
(2,15,1)
(44,42,1)
(1,30,1)
(31,46,1)
(26,37,1)
(16,27,1)
(20,31,1)
(11,30,1)
(42,18,1)
(48,3,1)
(34,31,1)
(1,21,1)
(33,35,1)
(25,37,1)
(9,34,1)
(31,30,1)
(4,50,1)
(41,19,1)
(34,20,1)
(15,4,1)
(47,41,1)
(39,29,1)
(26,25,1)
(6,39,1)
(7,11,1)
(12,47,2)
(16,47,2)
(43,1,2)
(25,47,2)
(31,47,2)
(20,47,2)
(15,50,2)
(49,47,2)
(33,47,2)
(50,30,2)
(34,47,2)
(37,47,2)
(30,47,2)
(26,37,2)
(40,43,2)
(1,30,2)
(21,47,2)
(2,50,2)
(9,47,2)
(40,47,2)
(13,47,2)
(43,47,2)
(4,50,2)
(13,0,2)
(11,47,2)
(2,15,2)
(26,47,2)
(7,47,2)
(22,47,2)
(1,47,2)
(14,47,2)
(13,48,2)
(37,30,2)
(35,47,2)
(31,30,2)
(34,31,2)
(3,47,2)
(45,47,2)
(50,47,2)
(48,47,2)
(8,47,2)
(3,22,2)
(30,13,2)
(27,47,2)
(48,3,2)
(46,47,2)
(24,47,2)
-----------------------------------
(0,twoIntsStruct *)
(1,data[0])
(2,exit(-1)
(3,100*sizeof(twoIntsStruct)
(4,1)
(5,)
(6,data = NULL)
(7,NULL)
(8,twoIntsStruct)
(9,0)
(10,RET)
(11,data)
(12,0)
(13,(twoIntsStruct *)
(14,data)
(15,-1)
(16,data)
(17,if(staticFive==5)
(18,staticFive)
(19,staticFive)
(20,intTwo)
(21,0)
(22,sizeof(twoIntsStruct)
(23,if (data == NULL)
(24,100)
(25,intOne)
(26,data[0].intOne)
(27,data[0].intOne = 0)
(28,data)
(29,data)
(30,data = (twoIntsStruct *)
(31,data[0])
(32,if(staticFive==5)
(33,data)
(34,data[0].intTwo)
(35,data[0].intTwo = 0)
(36,)
(37,data[0])
(38,)
(39,NULL)
(40,printStructLine(&data[0])
(41,5)
(42,5)
(43,&data[0])
(44,staticFive==5)
(45,0)
(46,0)
(47,staticFive==5)
(48,malloc(100*sizeof(twoIntsStruct)
(49,data)
(50,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^