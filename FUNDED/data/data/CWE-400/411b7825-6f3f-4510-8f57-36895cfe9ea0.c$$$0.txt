-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    goodB2G1Static = 0; /* false */
    goodB2G1Sink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
51,52
53,54
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,59,61,65,66,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goodB2G1Static = 0; /* false */    goodB2G1Sink(data);}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goodB2G1Static = 0; /* false */    goodB2G1Sink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
goodB2G1Static = 0;
goodB2G1Static = 0
goodB2G1Static
goodB2G1Static
0
goodB2G1Sink(data);
goodB2G1Sink(data)
goodB2G1Sink
goodB2G1Sink
data
data
-----joern-----
(15,23,0)
(19,23,0)
(21,23,0)
(27,16,0)
(11,24,0)
(18,29,0)
(10,1,0)
(18,14,0)
(14,20,0)
(8,20,0)
(16,23,0)
(26,29,0)
(3,9,0)
(25,1,0)
(0,20,0)
(28,0,0)
(29,18,0)
(29,24,0)
(13,0,0)
(12,14,0)
(9,3,0)
(14,18,0)
(1,23,0)
(5,16,0)
(24,29,0)
(2,4,0)
(14,12,0)
(4,23,0)
(20,14,0)
(6,15,0)
(15,20,0)
(17,9,0)
(20,23,0)
(3,22,0)
(4,20,0)
(1,25,1)
(15,6,1)
(13,20,1)
(16,5,1)
(6,0,1)
(10,15,1)
(17,0,1)
(5,27,1)
(7,4,1)
(24,11,1)
(15,20,1)
(0,28,1)
(20,14,1)
(25,10,1)
(2,1,1)
(26,8,1)
(8,16,1)
(14,12,1)
(3,9,1)
(18,29,1)
(4,20,1)
(14,18,1)
(11,26,1)
(6,3,1)
(4,2,1)
(29,24,1)
(0,20,1)
(9,17,1)
(28,13,1)
(4,20,2)
(3,9,2)
(9,0,2)
(0,20,2)
(15,20,2)
(3,0,2)
(14,12,2)
(14,18,2)
(20,14,2)
(17,0,2)
(29,24,2)
(18,29,2)
-----------------------------------
(0,data == NULL)
(1,goodB2G1Static = 0)
(2,data)
(3,exit(-1)
(4,goodB2G1Sink(data)
(5,NULL)
(6,data)
(7,RET)
(8,data)
(9,-1)
(10,goodB2G1Static)
(11,wchar_t)
(12,wchar_t *)
(13,data)
(14,(wchar_t *)
(15,printWLine(data)
(16,data = NULL)
(17,1)
(18,malloc(100*sizeof(wchar_t)
(19,data)
(20,data = (wchar_t *)
(21,if (data == NULL)
(22,)
(23,)
(24,sizeof(wchar_t)
(25,0)
(26,100)
(27,data)
(28,NULL)
(29,100*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^