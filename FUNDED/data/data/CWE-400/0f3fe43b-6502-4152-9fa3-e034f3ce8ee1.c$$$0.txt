-----label-----
0
-----code-----
static void goodB2G2()
{
    int64_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(5==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,73,74,79,81
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
44,45
44,46
57,58
57,59
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }
5==5
5
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(37,31,0)
(14,11,0)
(19,21,0)
(11,14,0)
(6,37,0)
(16,35,0)
(4,22,0)
(37,14,0)
(3,9,0)
(23,9,0)
(8,16,0)
(25,9,0)
(1,6,0)
(33,37,0)
(35,9,0)
(32,37,0)
(2,21,0)
(16,37,0)
(30,31,0)
(26,39,0)
(27,11,0)
(36,27,0)
(0,31,0)
(30,33,0)
(20,6,0)
(17,11,0)
(10,31,0)
(12,33,0)
(15,35,0)
(7,38,0)
(5,22,0)
(7,39,0)
(13,14,0)
(11,27,0)
(33,30,0)
(34,35,0)
(39,7,0)
(14,37,0)
(28,33,0)
(16,18,0)
(14,13,0)
(16,35,1)
(0,7,1)
(33,28,1)
(6,1,1)
(22,5,1)
(36,17,1)
(35,15,1)
(33,37,1)
(2,22,1)
(0,6,1)
(1,20,1)
(16,8,1)
(5,4,1)
(20,37,1)
(16,37,1)
(29,16,1)
(15,34,1)
(37,14,1)
(2,30,1)
(29,21,1)
(26,6,1)
(11,27,1)
(14,13,1)
(19,2,1)
(39,26,1)
(8,21,1)
(21,19,1)
(14,11,1)
(30,33,1)
(17,32,1)
(6,37,1)
(7,39,1)
(12,0,1)
(27,36,1)
(32,22,1)
(28,12,1)
(4,35,1)
(37,14,2)
(7,39,2)
(7,6,2)
(14,11,2)
(39,6,2)
(0,22,2)
(1,22,2)
(33,37,2)
(28,22,2)
(17,22,2)
(32,22,2)
(12,22,2)
(27,22,2)
(30,22,2)
(14,13,2)
(20,22,2)
(16,35,2)
(16,37,2)
(8,21,2)
(11,22,2)
(6,22,2)
(37,22,2)
(33,22,2)
(6,37,2)
(36,22,2)
(14,22,2)
(11,27,2)
(26,6,2)
(16,21,2)
(30,33,2)
-----------------------------------
(0,L)
(1,NULL)
(2,5)
(3,data)
(4,5)
(5,5)
(6,data == NULL)
(7,exit(-1)
(8,data)
(9,)
(10,if (data == NULL)
(11,calloc(100, sizeof(int64_t)
(12,data)
(13,int64_t *)
(14,(int64_t *)
(15,NULL)
(16,free(data)
(17,100)
(18,)
(19,5)
(20,data)
(21,5==5)
(22,5==5)
(23,if(5==5)
(24, sizeof(int64_t)
(25,if(5==5)
(26,1)
(27,sizeof(int64_t)
(28,0)
(29,RET)
(30,printLongLongLine(data[0])
(31,)
(32,data)
(33,data[0])
(34,data)
(35,data = NULL)
(36,int64_t)
(37,data = (int64_t *)
(38,)
(39,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^