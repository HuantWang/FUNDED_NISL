-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalTrue)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalTrue
globalTrue
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalTrue
globalTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(48,6,0)
(0,30,0)
(45,37,0)
(26,42,0)
(46,9,0)
(28,9,0)
(6,48,0)
(7,12,0)
(15,42,0)
(14,19,0)
(29,19,0)
(6,15,0)
(46,45,0)
(45,9,0)
(21,43,0)
(37,5,0)
(23,46,0)
(11,9,0)
(1,25,0)
(8,29,0)
(43,4,0)
(13,48,0)
(5,6,0)
(12,2,0)
(38,1,0)
(19,29,0)
(40,42,0)
(18,43,0)
(5,37,0)
(30,9,0)
(33,46,0)
(27,45,0)
(6,5,0)
(19,1,0)
(24,1,0)
(6,1,0)
(30,45,0)
(19,15,0)
(35,15,0)
(16,34,0)
(47,15,0)
(41,49,0)
(28,45,0)
(37,3,0)
(17,34,0)
(10,42,0)
(37,45,0)
(34,17,0)
(22,28,0)
(44,6,0)
(49,45,0)
(36,49,0)
(3,37,0)
(17,20,0)
(33,17,1)
(6,48,1)
(32,12,1)
(28,45,1)
(7,19,1)
(27,19,1)
(6,15,1)
(16,49,1)
(45,37,1)
(37,5,1)
(17,34,1)
(19,1,1)
(46,23,1)
(49,36,1)
(22,30,1)
(38,39,1)
(19,15,1)
(8,14,1)
(30,45,1)
(29,8,1)
(5,6,1)
(39,15,1)
(37,3,1)
(23,33,1)
(44,27,1)
(33,49,1)
(19,29,1)
(31,39,1)
(12,7,1)
(14,31,1)
(31,1,1)
(30,0,1)
(46,45,1)
(41,45,1)
(48,13,1)
(32,28,1)
(36,41,1)
(24,38,1)
(32,31,1)
(0,46,1)
(49,45,1)
(28,22,1)
(6,1,1)
(35,47,1)
(13,44,1)
(1,24,1)
(15,35,1)
(34,16,1)
(17,34,2)
(45,37,2)
(6,15,2)
(8,31,2)
(30,19,2)
(44,19,2)
(6,1,2)
(19,29,2)
(27,19,2)
(33,19,2)
(37,19,2)
(13,19,2)
(48,19,2)
(19,1,2)
(14,31,2)
(38,39,2)
(29,31,2)
(46,45,2)
(12,19,2)
(49,45,2)
(16,49,2)
(22,19,2)
(6,48,2)
(41,19,2)
(36,19,2)
(19,31,2)
(17,49,2)
(30,45,2)
(19,15,2)
(7,19,2)
(49,19,2)
(37,3,2)
(45,19,2)
(5,19,2)
(46,19,2)
(28,45,2)
(0,19,2)
(34,49,2)
(5,6,2)
(1,39,2)
(28,19,2)
(6,19,2)
(23,19,2)
(24,39,2)
(37,5,2)
-----------------------------------
(0,myString)
(1,data = 20)
(2,)
(3,char *)
(4,)
(5,malloc(data*sizeof(char)
(6,data*sizeof(char)
(7,"Input is less than the length of the source string")
(8,HELLO_STRING)
(9,)
(10,if(globalTrue)
(11,if (myString == NULL)
(12,printLine("Input is less than the length of the source string")
(13,char)
(14,data)
(15,data = 0)
(16,1)
(17,exit(-1)
(18,myString)
(19,data > strlen(HELLO_STRING)
(20,)
(21,if (data > strlen(HELLO_STRING)
(22,myString)
(23,HELLO_STRING)
(24,20)
(25,)
(26,data)
(27,myString)
(28,free(myString)
(29,strlen(HELLO_STRING)
(30,printLine(myString)
(31,globalTrue)
(32,RET)
(33,myString)
(34,-1)
(35,0)
(36,NULL)
(37,(char *)
(38,data)
(39,globalTrue)
(40,if(globalTrue)
(41,myString)
(42,)
(43,)
(44,data)
(45,myString = (char *)
(46,strcpy(myString, HELLO_STRING)
(47,data)
(48,sizeof(char)
(49,myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^