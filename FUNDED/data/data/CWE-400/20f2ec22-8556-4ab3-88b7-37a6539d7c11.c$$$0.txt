-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(1)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(1)
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
21,22
21,23
21,24
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
45,46
45,47
47,48
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,29,33,36,38,42,44,46,51,53
-----computeFrom-----
13,14
13,15
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(1)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(1)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
1
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
1
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,5,0)
(0,1,0)
(23,21,0)
(14,16,0)
(19,17,0)
(10,16,0)
(11,17,0)
(9,20,0)
(15,17,0)
(13,2,0)
(6,0,0)
(24,22,0)
(20,0,0)
(3,22,0)
(23,2,0)
(20,2,0)
(5,2,0)
(23,22,0)
(5,16,0)
(2,5,0)
(2,0,0)
(22,17,0)
(8,23,0)
(16,0,0)
(5,7,1)
(5,16,1)
(18,22,1)
(23,8,1)
(13,16,1)
(12,18,1)
(20,2,1)
(10,14,1)
(7,13,1)
(24,3,1)
(4,12,1)
(8,12,1)
(2,5,1)
(12,20,1)
(14,18,1)
(4,23,1)
(20,9,1)
(16,10,1)
(22,24,1)
(9,2,1)
(23,22,1)
(23,2,1)
(5,16,2)
(23,12,2)
(14,18,2)
(23,22,2)
(5,18,2)
(7,18,2)
(13,18,2)
(9,18,2)
(2,5,2)
(20,18,2)
(2,18,2)
(8,12,2)
(16,18,2)
(20,2,2)
(23,2,2)
(10,18,2)
-----------------------------------
(0,)
(1,)
(2,data = strdup(myString)
(3,data)
(4,RET)
(5,strdup(myString)
(6,myString)
(7,myString)
(8,data)
(9,data)
(10,"myString")
(11,data)
(12,1)
(13,data)
(14,myString)
(15,if(1)
(16,myString[] = "myString")
(17,)
(18,1)
(19,if(1)
(20,printLine(data)
(21,)
(22,data = NULL)
(23,free(data)
(24,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^