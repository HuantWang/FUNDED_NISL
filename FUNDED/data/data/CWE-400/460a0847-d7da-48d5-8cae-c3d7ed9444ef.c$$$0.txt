-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
94,95
95,96
95,97
96,97
100,101
100,102
102,103
102,104
102,105
102,106
102,107
102,108
103,104
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,92,93,97,98,99,101,104,105,106,107,111,112,113
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad(){    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad
{    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(55,57,0)
(17,57,0)
(12,57,0)
(58,47,0)
(54,50,0)
(56,31,0)
(62,57,0)
(50,2,0)
(60,5,0)
(47,22,0)
(30,45,0)
(24,57,0)
(2,50,0)
(40,57,0)
(45,57,0)
(15,44,0)
(13,60,0)
(52,41,0)
(25,51,0)
(33,21,0)
(44,22,0)
(31,56,0)
(46,61,0)
(19,16,0)
(22,44,0)
(51,5,0)
(27,21,0)
(53,16,0)
(26,51,0)
(39,22,0)
(50,12,0)
(26,35,0)
(54,60,0)
(22,47,0)
(46,59,0)
(47,5,0)
(38,30,0)
(23,21,0)
(12,50,0)
(60,54,0)
(32,48,0)
(59,46,0)
(43,60,0)
(16,5,0)
(3,57,0)
(48,30,0)
(35,57,0)
(20,33,0)
(9,21,0)
(5,57,0)
(47,58,0)
(36,41,0)
(14,5,0)
(49,26,0)
(51,26,0)
(18,41,0)
(29,45,0)
(5,47,0)
(37,35,0)
(10,48,0)
(7,52,0)
(30,48,0)
(42,52,0)
(1,40,0)
(4,41,0)
(31,44,0)
(50,54,0)
(48,5,0)
(22,52,0)
(44,31,0)
(6,51,0)
(34,21,0)
(0,59,0)
(26,49,1)
(31,15,1)
(8,9,1)
(59,0,1)
(13,35,1)
(28,62,1)
(31,56,1)
(22,52,1)
(16,19,1)
(44,31,1)
(62,12,1)
(30,48,1)
(39,14,1)
(16,5,1)
(54,60,1)
(48,10,1)
(19,53,1)
(51,6,1)
(12,50,1)
(30,38,1)
(50,54,1)
(35,37,1)
(22,44,1)
(60,5,1)
(60,43,1)
(49,51,1)
(51,5,1)
(37,26,1)
(52,7,1)
(10,32,1)
(50,2,1)
(47,22,1)
(43,13,1)
(14,11,1)
(26,51,1)
(11,52,1)
(1,11,1)
(32,46,1)
(20,28,1)
(38,48,1)
(6,25,1)
(48,5,1)
(47,58,1)
(3,40,1)
(46,59,1)
(45,29,1)
(29,30,1)
(53,5,1)
(5,47,1)
(40,1,1)
(33,20,1)
(25,45,1)
(0,16,1)
(27,33,1)
(15,39,1)
(8,27,1)
(7,42,1)
(9,28,1)
(32,16,1)
(28,3,1)
(26,51,2)
(30,48,2)
(10,11,2)
(48,5,2)
(26,11,2)
(51,5,2)
(50,11,2)
(16,5,2)
(31,11,2)
(59,16,2)
(20,28,2)
(60,11,2)
(45,11,2)
(3,11,2)
(22,44,2)
(5,11,2)
(22,52,2)
(25,11,2)
(15,11,2)
(54,11,2)
(48,11,2)
(38,11,2)
(39,11,2)
(54,60,2)
(1,11,2)
(27,28,2)
(6,11,2)
(12,50,2)
(47,22,2)
(53,11,2)
(19,11,2)
(0,16,2)
(29,11,2)
(43,11,2)
(60,5,2)
(47,58,2)
(37,11,2)
(44,11,2)
(22,11,2)
(30,11,2)
(51,11,2)
(16,11,2)
(31,56,2)
(13,11,2)
(5,47,2)
(40,11,2)
(44,31,2)
(33,28,2)
(35,11,2)
(14,11,2)
(12,11,2)
(47,11,2)
(9,28,2)
(46,59,2)
(50,54,2)
(62,11,2)
(50,2,2)
(32,11,2)
(49,11,2)
(46,16,2)
-----------------------------------
(0,1)
(1,"Benign, fixed string")
(2,twoIntsStruct *)
(3,break;)
(4,data)
(5,data = (struct _twoIntsStruct *)
(6,0)
(7,NULL)
(8,RET)
(9,break;)
(10,0)
(11,6)
(12,printStructLine((twoIntsStruct *)
(13,data)
(14,data)
(15,100)
(16,data == NULL)
(17,default:)
(18,switch(6)
(19,NULL)
(20,"Benign, fixed string")
(21,)
(22,realloc(data, 100*sizeof(struct _twoIntsStruct)
(23,case 7:)
(24,case 6:)
(25,data)
(26,data[0].intTwo)
(27,break;)
(28,7)
(29,0)
(30,data[0].intOne)
(31,sizeof(struct _twoIntsStruct)
(32,data)
(33,printLine("Benign, fixed string")
(34,default:)
(35,data[0].intTwo = 0)
(36,switch(7)
(37,0)
(38,intOne)
(39,data)
(40,printLine("Benign, fixed string")
(41,)
(42,data)
(43,0)
(44,100*sizeof(struct _twoIntsStruct)
(45,data[0].intOne = 0)
(46,exit(-1)
(47,(struct _twoIntsStruct *)
(48,data[0])
(49,intTwo)
(50,(twoIntsStruct *)
(51,data[0])
(52,data = NULL)
(53,data)
(54,&data[0])
(55,if (data == NULL)
(56,struct _twoIntsStruct)
(57,)
(58,struct _twoIntsStruct *)
(59,-1)
(60,data[0])
(61,)
(62,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^