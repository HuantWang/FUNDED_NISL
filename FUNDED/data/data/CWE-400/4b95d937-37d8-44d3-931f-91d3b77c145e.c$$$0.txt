-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_goodG2BSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_goodG2BSink(size_t * dataPtr){    size_t data = *dataPtr;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_goodG2BSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_goodG2BSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(14,16,0)
(25,24,0)
(16,14,0)
(29,25,0)
(6,17,0)
(20,5,0)
(25,13,0)
(4,2,0)
(26,35,0)
(32,2,0)
(18,15,0)
(11,19,0)
(30,24,0)
(36,13,0)
(5,32,0)
(41,32,0)
(14,25,0)
(8,32,0)
(1,21,0)
(2,39,0)
(28,15,0)
(21,35,0)
(4,14,0)
(7,22,0)
(9,41,0)
(22,32,0)
(38,36,0)
(2,4,0)
(39,2,0)
(41,15,0)
(14,4,0)
(32,15,0)
(2,32,0)
(17,10,0)
(35,21,0)
(31,11,0)
(34,5,0)
(24,12,0)
(24,25,0)
(0,16,0)
(40,31,0)
(37,28,0)
(23,13,0)
(3,36,0)
(21,25,0)
(11,31,0)
(33,22,0)
(27,14,0)
(28,32,0)
(5,15,0)
(25,24,1)
(20,11,1)
(5,32,1)
(1,25,1)
(0,27,1)
(9,28,1)
(34,20,1)
(41,9,1)
(27,8,1)
(37,5,1)
(2,39,1)
(42,41,1)
(8,21,1)
(4,14,1)
(17,6,1)
(22,32,1)
(24,30,1)
(5,34,1)
(20,22,1)
(28,37,1)
(21,25,1)
(2,4,1)
(40,22,1)
(35,26,1)
(31,40,1)
(24,12,1)
(30,29,1)
(16,0,1)
(14,16,1)
(42,17,1)
(41,32,1)
(11,31,1)
(32,2,1)
(6,21,1)
(21,35,1)
(22,7,1)
(28,32,1)
(14,25,1)
(7,33,1)
(33,32,1)
(26,1,1)
(11,22,2)
(28,21,2)
(40,22,2)
(21,25,2)
(2,39,2)
(25,24,2)
(37,21,2)
(14,25,2)
(2,4,2)
(11,31,2)
(14,21,2)
(24,12,2)
(9,21,2)
(22,32,2)
(21,35,2)
(22,21,2)
(8,21,2)
(33,21,2)
(0,21,2)
(4,21,2)
(27,21,2)
(5,21,2)
(6,21,2)
(16,21,2)
(5,32,2)
(14,16,2)
(28,32,2)
(32,21,2)
(31,22,2)
(7,21,2)
(2,21,2)
(41,32,2)
(17,21,2)
(32,2,2)
(41,21,2)
(20,21,2)
(4,14,2)
(34,21,2)
-----------------------------------
(0,wchar_t)
(1,data)
(2,(wchar_t *)
(3,myString)
(4,malloc(data*sizeof(wchar_t)
(5,wcscpy(myString, HELLO_STRING)
(6,"Input is less than the length of the source string")
(7,NULL)
(8,myString)
(9,myString)
(10,)
(11,exit(-1)
(12,size_t * dataPtr)
(13,)
(14,data*sizeof(wchar_t)
(15,)
(16,sizeof(wchar_t)
(17,printLine("Input is less than the length of the source string")
(18,if (myString == NULL)
(19,)
(20,myString)
(21,data > wcslen(HELLO_STRING)
(22,myString == NULL)
(23,data)
(24,*dataPtr)
(25,data = *dataPtr)
(26,HELLO_STRING)
(27,data)
(28,printWLine(myString)
(29,data)
(30,dataPtr)
(31,-1)
(32,myString = (wchar_t *)
(33,myString)
(34,HELLO_STRING)
(35,wcslen(HELLO_STRING)
(36,)
(37,myString)
(38,if (data > wcslen(HELLO_STRING)
(39,wchar_t *)
(40,1)
(41,free(myString)
(42,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^