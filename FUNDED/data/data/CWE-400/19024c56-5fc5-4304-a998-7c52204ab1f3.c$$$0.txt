-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
29,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
-----nextToken-----
2,4,8,10,14,16,20,25,26,30,35,37,41,42
-----computeFrom-----
12,13
12,14
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(14,2,0)
(16,3,0)
(17,16,0)
(15,8,0)
(4,2,0)
(8,10,0)
(5,10,0)
(0,2,0)
(19,11,0)
(9,15,0)
(1,8,0)
(12,16,0)
(10,8,0)
(11,7,0)
(8,2,0)
(15,16,0)
(15,7,0)
(6,11,1)
(10,5,1)
(15,9,1)
(15,8,1)
(15,16,1)
(6,13,1)
(5,1,1)
(19,15,1)
(9,13,1)
(12,17,1)
(11,19,1)
(8,10,1)
(13,16,1)
(17,18,1)
(13,18,1)
(16,12,1)
(18,8,1)
(15,8,2)
(17,18,2)
(12,18,2)
(9,13,2)
(11,13,2)
(16,18,2)
(15,13,2)
(8,10,2)
(19,13,2)
(15,16,2)
-----------------------------------
(0,count)
(1,count)
(2,)
(3,)
(4,if(globalReturnsTrue()
(5,1)
(6,RET)
(7,)
(8,count = -1)
(9,count)
(10,-1)
(11,printLine("Sleep time possibly too long")
(12,20)
(13,globalReturnsTrue()
(14,if(globalReturnsTrue()
(15,SLEEP(count)
(16,count = 20)
(17,count)
(18,globalReturnsTrue()
(19,"Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^