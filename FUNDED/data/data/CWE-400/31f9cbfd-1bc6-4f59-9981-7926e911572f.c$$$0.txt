-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
71,72
72,73
73,74
73,75
74,75
77,78
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,75,76,81,83
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(8,30,0)
(35,15,0)
(16,15,0)
(30,8,0)
(1,31,0)
(32,33,0)
(25,8,0)
(5,28,0)
(0,19,0)
(7,15,0)
(4,33,0)
(7,2,0)
(0,4,0)
(11,33,0)
(23,0,0)
(27,3,0)
(6,7,0)
(15,28,0)
(15,7,0)
(9,30,0)
(22,4,0)
(2,4,0)
(24,28,0)
(0,15,0)
(7,6,0)
(2,8,0)
(2,7,0)
(26,10,0)
(14,24,0)
(8,2,0)
(1,10,0)
(34,27,0)
(10,1,0)
(18,16,0)
(36,16,0)
(20,4,0)
(21,33,0)
(24,15,0)
(12,2,0)
(36,15,1)
(24,14,1)
(13,17,1)
(2,4,1)
(0,4,1)
(29,27,1)
(16,18,1)
(7,6,1)
(29,0,1)
(1,10,1)
(24,15,1)
(0,15,1)
(30,9,1)
(35,17,1)
(27,34,1)
(8,30,1)
(17,4,1)
(23,13,1)
(2,8,1)
(20,22,1)
(14,16,1)
(26,16,1)
(4,20,1)
(34,13,1)
(15,7,1)
(16,15,1)
(9,25,1)
(0,23,1)
(7,2,1)
(25,12,1)
(18,36,1)
(14,1,1)
(10,26,1)
(12,35,1)
(13,24,1)
(15,17,2)
(7,2,2)
(16,15,2)
(26,16,2)
(2,4,2)
(7,6,2)
(18,17,2)
(14,17,2)
(0,13,2)
(8,17,2)
(16,17,2)
(15,7,2)
(24,17,2)
(2,17,2)
(0,15,2)
(12,17,2)
(36,17,2)
(35,17,2)
(1,10,2)
(9,17,2)
(23,13,2)
(2,8,2)
(34,13,2)
(7,17,2)
(0,4,2)
(24,15,2)
(8,30,2)
(30,17,2)
(25,17,2)
(1,16,2)
(27,13,2)
(10,16,2)
-----------------------------------
(0,free(data)
(1,exit(-1)
(2,realloc(data, 100*sizeof(wchar_t)
(3,)
(4,data = NULL)
(5,if (data == NULL)
(6,wchar_t *)
(7,(wchar_t *)
(8,100*sizeof(wchar_t)
(9,wchar_t)
(10,-1)
(11,if(staticTrue)
(12,data)
(13,staticFalse)
(14,data)
(15,data = (wchar_t *)
(16,data == NULL)
(17,staticTrue)
(18,NULL)
(19,)
(20,NULL)
(21,if(staticFalse)
(22,data)
(23,data)
(24,printWLine(data)
(25,100)
(26,1)
(27,printLine("Benign, fixed string")
(28,)
(29,RET)
(30,sizeof(wchar_t)
(31,)
(32,data)
(33,)
(34,"Benign, fixed string")
(35,data)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^