-----label-----
1
-----code-----
static void badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
badSink()
badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(15,21,0)
(18,32,0)
(33,5,0)
(26,31,0)
(29,24,0)
(33,22,0)
(13,5,0)
(17,32,0)
(14,6,0)
(3,20,0)
(32,18,0)
(30,26,0)
(28,18,0)
(1,34,0)
(17,31,0)
(2,26,0)
(32,17,0)
(26,17,0)
(28,5,0)
(0,31,0)
(21,15,0)
(40,33,0)
(11,14,0)
(12,21,0)
(20,17,0)
(36,25,0)
(5,4,0)
(20,31,0)
(15,23,0)
(18,28,0)
(25,28,0)
(16,4,0)
(35,5,0)
(28,25,0)
(19,8,0)
(38,22,0)
(37,17,0)
(10,8,0)
(32,27,0)
(9,28,0)
(39,24,0)
(34,31,0)
(27,32,0)
(34,17,0)
(22,33,0)
(24,17,0)
(8,4,0)
(2,24,1)
(26,30,1)
(2,15,1)
(3,34,1)
(30,2,1)
(20,17,1)
(20,3,1)
(13,35,1)
(26,17,1)
(32,27,1)
(40,5,1)
(11,33,1)
(1,26,1)
(39,29,1)
(14,11,1)
(17,32,1)
(25,36,1)
(33,5,1)
(29,17,1)
(21,12,1)
(28,5,1)
(15,21,1)
(7,20,1)
(28,25,1)
(5,13,1)
(36,9,1)
(22,38,1)
(38,40,1)
(37,33,1)
(34,17,1)
(18,28,1)
(24,39,1)
(34,1,1)
(7,14,1)
(32,18,1)
(12,24,1)
(24,17,1)
(33,22,1)
(9,37,1)
(11,33,2)
(18,28,2)
(24,33,2)
(17,33,2)
(34,17,2)
(30,33,2)
(25,33,2)
(12,24,2)
(26,33,2)
(3,33,2)
(2,33,2)
(18,33,2)
(24,17,2)
(32,33,2)
(15,24,2)
(17,32,2)
(33,5,2)
(14,33,2)
(15,21,2)
(29,33,2)
(32,27,2)
(26,17,2)
(1,33,2)
(9,33,2)
(39,33,2)
(28,33,2)
(20,17,2)
(28,5,2)
(28,25,2)
(37,33,2)
(20,33,2)
(36,33,2)
(21,24,2)
(32,18,2)
(33,22,2)
(34,33,2)
-----------------------------------
(0,if (myString == NULL)
(1,myString)
(2,myString)
(3,myString)
(4,)
(5,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData)
(6,)
(7,RET)
(8,)
(9,data)
(10,myString)
(11,"Input is less than the length of the source string")
(12,1)
(13,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_badData)
(14,printLine("Input is less than the length of the source string")
(15,exit(-1)
(16,data)
(17,myString = (wchar_t *)
(18,malloc(data*sizeof(wchar_t)
(19,if (data > wcslen(HELLO_STRING)
(20,free(myString)
(21,-1)
(22,wcslen(HELLO_STRING)
(23,)
(24,myString == NULL)
(25,sizeof(wchar_t)
(26,wcscpy(myString, HELLO_STRING)
(27,wchar_t *)
(28,data*sizeof(wchar_t)
(29,myString)
(30,HELLO_STRING)
(31,)
(32,(wchar_t *)
(33,data > wcslen(HELLO_STRING)
(34,printWLine(myString)
(35,data)
(36,wchar_t)
(37,myString)
(38,HELLO_STRING)
(39,NULL)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^