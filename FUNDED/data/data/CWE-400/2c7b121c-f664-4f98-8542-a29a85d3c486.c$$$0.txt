-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
71,72
71,73
72,73
75,76
76,77
77,78
77,79
78,79
81,82
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,73,74,79,80,85,87
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(4,30,0)
(0,7,0)
(28,23,0)
(12,43,0)
(14,35,0)
(31,8,0)
(15,2,0)
(6,35,0)
(38,8,0)
(20,36,0)
(42,11,0)
(1,14,0)
(37,6,0)
(1,11,0)
(43,12,0)
(9,8,0)
(20,31,0)
(27,18,0)
(30,35,0)
(14,1,0)
(18,14,0)
(1,34,0)
(19,7,0)
(10,8,0)
(11,1,0)
(40,32,0)
(26,40,0)
(43,33,0)
(34,1,0)
(6,14,0)
(39,14,0)
(16,32,0)
(13,18,0)
(40,11,0)
(3,15,0)
(5,12,0)
(17,35,0)
(24,23,0)
(41,31,0)
(29,20,0)
(32,40,0)
(25,30,0)
(20,14,0)
(21,31,0)
(11,31,0)
(11,40,0)
(30,14,0)
(27,13,1)
(24,31,1)
(30,14,1)
(22,20,1)
(14,1,1)
(18,14,1)
(11,31,1)
(4,25,1)
(12,5,1)
(25,43,1)
(26,42,1)
(32,16,1)
(11,40,1)
(20,14,1)
(37,30,1)
(20,31,1)
(30,4,1)
(16,26,1)
(41,21,1)
(5,18,1)
(3,7,1)
(28,24,1)
(6,37,1)
(19,0,1)
(6,14,1)
(42,39,1)
(20,29,1)
(43,12,1)
(39,23,1)
(0,23,1)
(29,7,1)
(1,34,1)
(7,19,1)
(15,3,1)
(25,18,1)
(0,6,1)
(22,15,1)
(40,32,1)
(13,14,1)
(1,11,1)
(18,27,1)
(31,41,1)
(23,28,1)
(1,34,2)
(29,7,2)
(16,23,2)
(15,7,2)
(11,23,2)
(40,23,2)
(12,18,2)
(14,1,2)
(43,12,2)
(18,23,2)
(39,23,2)
(4,23,2)
(32,23,2)
(6,23,2)
(1,11,2)
(13,23,2)
(27,23,2)
(25,23,2)
(14,23,2)
(1,23,2)
(20,31,2)
(11,31,2)
(6,14,2)
(42,23,2)
(30,14,2)
(18,14,2)
(5,18,2)
(20,14,2)
(26,23,2)
(3,7,2)
(37,23,2)
(30,23,2)
(11,40,2)
(43,18,2)
(20,7,2)
(40,32,2)
-----------------------------------
(0,STATIC_CONST_FIVE)
(1,(char *)
(2,)
(3,"Benign, fixed string")
(4,"A String")
(5,1)
(6,printLine(data)
(7,STATIC_CONST_FIVE!=5)
(8,)
(9,if(STATIC_CONST_FIVE==5)
(10,if(STATIC_CONST_FIVE!=5)
(11,realloc(data, 100*sizeof(char)
(12,-1)
(13,data)
(14,data = (char *)
(15,printLine("Benign, fixed string")
(16,char)
(17,if (data == NULL)
(18,data == NULL)
(19,5)
(20,free(data)
(21,data)
(22,RET)
(23,STATIC_CONST_FIVE==5)
(24,STATIC_CONST_FIVE)
(25,data)
(26,100)
(27,NULL)
(28,5)
(29,data)
(30,strcpy(data, "A String")
(31,data = NULL)
(32,sizeof(char)
(33,)
(34,char *)
(35,)
(36,)
(37,data)
(38,data)
(39,data)
(40,100*sizeof(char)
(41,NULL)
(42,data)
(43,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^