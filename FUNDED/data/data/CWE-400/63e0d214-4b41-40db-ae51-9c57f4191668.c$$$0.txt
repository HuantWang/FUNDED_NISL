-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_02_bad()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
69,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,62,65,66,68,70
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_02_bad(){    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_02_bad()
CWE401_Memory_Leak__int_malloc_02_bad
{    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(31,9,0)
(26,12,0)
(10,24,0)
(25,6,0)
(30,1,0)
(33,20,0)
(9,12,0)
(4,27,0)
(16,26,0)
(4,34,0)
(21,20,0)
(20,33,0)
(22,10,0)
(0,3,0)
(5,29,0)
(8,12,0)
(28,1,0)
(27,4,0)
(33,3,0)
(14,1,0)
(7,27,0)
(35,26,0)
(10,22,0)
(3,12,0)
(18,6,0)
(26,29,0)
(36,27,0)
(15,23,0)
(27,12,0)
(11,22,0)
(23,20,0)
(29,34,0)
(32,34,0)
(2,9,0)
(27,29,0)
(3,0,0)
(3,33,0)
(12,34,0)
(20,23,0)
(6,1,0)
(12,3,0)
(15,21,1)
(22,11,1)
(10,22,1)
(19,17,1)
(16,9,1)
(7,29,1)
(35,16,1)
(17,6,1)
(29,5,1)
(18,25,1)
(27,29,1)
(16,10,1)
(33,20,1)
(2,12,1)
(9,12,1)
(36,7,1)
(26,12,1)
(27,12,1)
(27,36,1)
(19,4,1)
(3,0,1)
(5,26,1)
(6,18,1)
(11,9,1)
(12,3,1)
(13,19,1)
(3,33,1)
(26,35,1)
(21,8,1)
(9,31,1)
(4,27,1)
(31,2,1)
(8,17,1)
(23,15,1)
(20,23,1)
(3,17,2)
(23,17,2)
(36,17,2)
(26,17,2)
(7,17,2)
(10,9,2)
(9,12,2)
(12,17,2)
(11,9,2)
(33,20,2)
(15,17,2)
(5,17,2)
(2,17,2)
(27,17,2)
(21,17,2)
(4,27,2)
(20,17,2)
(33,17,2)
(20,23,2)
(35,17,2)
(16,17,2)
(26,12,2)
(12,3,2)
(8,17,2)
(9,17,2)
(22,9,2)
(3,0,2)
(27,12,2)
(31,17,2)
(29,17,2)
(3,33,2)
(27,29,2)
(10,22,2)
(4,17,2)
-----------------------------------
(0,int *)
(1,)
(2,data)
(3,(int *)
(4,printIntLine(data[0])
(5,5)
(6,data = NULL)
(7,data)
(8,data)
(9,data == NULL)
(10,exit(-1)
(11,1)
(12,data = (int *)
(13,RET)
(14,data)
(15,int)
(16,data)
(17,1)
(18,NULL)
(19,1)
(20,100*sizeof(int)
(21,100)
(22,-1)
(23,sizeof(int)
(24,)
(25,data)
(26,data[0])
(27,data[0])
(28,if(1)
(29,data[0] = 5)
(30,if(1)
(31,NULL)
(32,if (data == NULL)
(33,malloc(100*sizeof(int)
(34,)
(35,0)
(36,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^