-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
68,69
69,70
70,71
70,72
71,72
74,75
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,72,73,78,80
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(2,22,0)
(11,8,0)
(19,13,0)
(32,24,0)
(22,36,0)
(0,19,0)
(35,17,0)
(6,4,0)
(25,24,0)
(36,4,0)
(34,8,0)
(21,16,0)
(14,12,0)
(7,13,0)
(24,8,0)
(33,9,0)
(16,21,0)
(16,23,0)
(19,1,0)
(5,8,0)
(36,13,0)
(10,36,0)
(13,19,0)
(29,21,0)
(37,1,0)
(15,22,0)
(31,36,0)
(17,24,0)
(12,36,0)
(13,36,0)
(30,12,0)
(27,31,0)
(12,4,0)
(17,26,0)
(17,36,0)
(9,28,0)
(31,4,0)
(13,7,0)
(1,19,0)
(35,38,1)
(1,37,1)
(17,35,1)
(14,22,1)
(22,15,1)
(17,24,1)
(31,36,1)
(10,3,1)
(30,14,1)
(13,7,1)
(0,10,1)
(17,36,1)
(19,1,1)
(37,0,1)
(16,21,1)
(12,30,1)
(32,25,1)
(13,19,1)
(14,16,1)
(22,36,1)
(20,9,1)
(15,2,1)
(3,24,1)
(27,12,1)
(2,36,1)
(36,13,1)
(21,29,1)
(20,17,1)
(38,31,1)
(29,22,1)
(33,38,1)
(24,32,1)
(9,33,1)
(31,27,1)
(12,36,1)
(38,3,1)
(35,38,2)
(17,36,2)
(36,3,2)
(12,3,2)
(13,3,2)
(9,38,2)
(22,3,2)
(0,3,2)
(15,3,2)
(27,3,2)
(21,22,2)
(12,36,2)
(2,3,2)
(19,3,2)
(1,3,2)
(31,3,2)
(17,38,2)
(33,38,2)
(19,1,2)
(16,22,2)
(13,7,2)
(17,24,2)
(22,36,2)
(37,3,2)
(36,13,2)
(14,3,2)
(31,36,2)
(30,3,2)
(29,22,2)
(13,19,2)
(10,3,2)
(16,21,2)
-----------------------------------
(0,100)
(1,sizeof(char)
(2,data)
(3,globalTrue)
(4,)
(5,data)
(6,if (data == NULL)
(7,char *)
(8,)
(9,printLine("Benign, fixed string")
(10,data)
(11,if(globalTrue)
(12,strcpy(data, "A String")
(13,(char *)
(14,data)
(15,NULL)
(16,exit(-1)
(17,free(data)
(18, sizeof(char)
(19,calloc(100, sizeof(char)
(20,RET)
(21,-1)
(22,data == NULL)
(23,)
(24,data = NULL)
(25,data)
(26,)
(27,data)
(28,)
(29,1)
(30,"A String")
(31,printLine(data)
(32,NULL)
(33,"Benign, fixed string")
(34,if(globalFalse)
(35,data)
(36,data = (char *)
(37,char)
(38,globalFalse)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^