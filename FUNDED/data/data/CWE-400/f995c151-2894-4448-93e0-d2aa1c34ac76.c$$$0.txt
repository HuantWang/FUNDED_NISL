-----label-----
0
-----code-----
static int ptl_finalize(void)
{
    int mpi_errno = MPI_SUCCESS;
    int ret;
    MPIDI_STATE_DECL(MPID_STATE_PTL_FINALIZE);
    MPIDI_FUNC_ENTER(MPID_STATE_PTL_FINALIZE);

    /* shut down other modules */
    mpi_errno = MPID_nem_ptl_nm_finalize();
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    mpi_errno = MPID_nem_ptl_poll_finalize();
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    /* shut down portals */
    ret = MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));

    ret = PtlNIFini(MPIDI_nem_ptl_ni);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));

    PtlFini();

 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
41,42
43,44
43,45
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
57,58
59,60
59,61
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
73,74
76,77
77,78
79,80
80,81
80,82
80,83
80,84
80,85
80,86
80,87
81,82
83,84
85,86
87,88
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
100,102
101,102
103,104
105,106
106,107
106,108
106,109
106,110
106,111
106,112
106,113
107,108
109,110
111,112
113,114
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
126,128
126,129
127,128
129,130
131,132
133,134
134,135
134,136
134,137
134,138
134,139
134,140
134,141
135,136
137,138
139,140
141,142
145,146
145,147
146,147
148,149
150,151
151,152
151,153
152,153
154,155
154,156
155,156
157,158
159,160
160,161
160,162
160,163
160,164
160,165
160,166
160,167
161,162
163,164
165,166
167,168
171,172
171,173
172,173
174,175
176,177
177,178
177,179
178,179
180,181
180,182
180,183
181,182
183,184
185,186
187,188
188,189
188,190
188,191
188,192
188,193
188,194
188,195
189,190
191,192
193,194
195,196
199,200
199,201
200,201
202,203
204,205
205,206
205,207
206,207
208,209
208,210
209,210
211,212
213,214
214,215
214,216
214,217
214,218
214,219
214,220
214,221
215,216
217,218
219,220
221,222
225,226
225,227
226,227
228,229
230,231
231,232
231,233
232,233
234,235
234,236
234,237
235,236
237,238
239,240
241,242
242,243
242,244
242,245
242,246
242,247
242,248
242,249
243,244
245,246
247,248
249,250
253,254
253,255
254,255
256,257
258,259
259,260
259,261
260,261
262,263
262,264
262,265
263,264
265,266
267,268
269,270
270,271
270,272
270,273
270,274
270,275
270,276
270,277
271,272
273,274
275,276
277,278
281,282
281,283
282,283
284,285
286,287
287,288
287,289
288,289
290,291
290,292
291,292
293,294
295,296
296,297
296,298
296,299
296,300
296,301
296,302
296,303
297,298
299,300
301,302
303,304
307,308
307,309
308,309
310,311
312,313
313,314
314,315
316,317
316,318
318,319
319,320
319,321
320,321
322,323
324,325
325,326
327,328
327,329
329,330
-----nextToken-----
2,4,6,8,12,14,17,20,22,26,29,33,35,39,42,45,49,51,55,58,61,65,67,71,74,75,78,82,84,86,88,89,90,93,95,99,102,104,108,110,112,114,115,116,119,121,125,128,130,132,136,138,140,142,143,144,147,149,153,156,158,162,164,166,168,169,170,173,175,179,182,184,186,190,192,194,196,197,198,201,203,207,210,212,216,218,220,222,223,224,227,229,233,236,238,240,244,246,248,250,251,252,255,257,261,264,266,268,272,274,276,278,279,280,283,285,289,292,294,298,300,302,304,305,306,309,311,315,317,321,323,326,328,330
-----computeFrom-----
37,38
37,39
53,54
53,55
69,70
69,71
97,98
97,99
123,124
123,125
151,152
151,153
177,178
177,179
205,206
205,207
231,232
231,233
259,260
259,261
287,288
287,289
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int ptl_finalize(void){    int mpi_errno = MPI_SUCCESS;    int ret;    MPIDI_STATE_DECL(MPID_STATE_PTL_FINALIZE);    MPIDI_FUNC_ENTER(MPID_STATE_PTL_FINALIZE);    /* shut down other modules */    mpi_errno = MPID_nem_ptl_nm_finalize();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    mpi_errno = MPID_nem_ptl_poll_finalize();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    /* shut down portals */    ret = MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlNIFini(MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));    PtlFini(); fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
ptl_finalize(void)
ptl_finalize
void
void


{    int mpi_errno = MPI_SUCCESS;    int ret;    MPIDI_STATE_DECL(MPID_STATE_PTL_FINALIZE);    MPIDI_FUNC_ENTER(MPID_STATE_PTL_FINALIZE);    /* shut down other modules */    mpi_errno = MPID_nem_ptl_nm_finalize();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    mpi_errno = MPID_nem_ptl_poll_finalize();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    /* shut down portals */    ret = MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));    ret = PtlNIFini(MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));    PtlFini(); fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
int ret;
int ret;
int
ret
ret
MPIDI_STATE_DECL(MPID_STATE_PTL_FINALIZE);
MPIDI_STATE_DECL(MPID_STATE_PTL_FINALIZE);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_PTL_FINALIZE)
MPID_STATE_PTL_FINALIZE
MPID_STATE_PTL_FINALIZE
MPIDI_FUNC_ENTER(MPID_STATE_PTL_FINALIZE);
MPIDI_FUNC_ENTER(MPID_STATE_PTL_FINALIZE)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_PTL_FINALIZE
MPID_STATE_PTL_FINALIZE
mpi_errno = MPID_nem_ptl_nm_finalize();
mpi_errno = MPID_nem_ptl_nm_finalize()
mpi_errno
mpi_errno
MPID_nem_ptl_nm_finalize()
MPID_nem_ptl_nm_finalize
MPID_nem_ptl_nm_finalize
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
mpi_errno = MPID_nem_ptl_poll_finalize();
mpi_errno = MPID_nem_ptl_poll_finalize()
mpi_errno
mpi_errno
MPID_nem_ptl_poll_finalize()
MPID_nem_ptl_poll_finalize
MPID_nem_ptl_poll_finalize
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
ret = MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq);
ret = MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq)
ret
ret
MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq)
MPID_nem_ptl_rptl_drain_eq
MPID_nem_ptl_rptl_drain_eq
1
&MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt);
ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt)
ret
ret
MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt)
MPID_nem_ptl_rptl_ptfini
MPID_nem_ptl_rptl_ptfini
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt);
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt)
ret
ret
PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt)
PtlPTFree
PtlPTFree
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt);
ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt)
ret
ret
MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt)
MPID_nem_ptl_rptl_ptfini
MPID_nem_ptl_rptl_ptfini
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt);
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt)
ret
ret
PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt)
PtlPTFree
PtlPTFree
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt);
ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt)
ret
ret
MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt)
MPID_nem_ptl_rptl_ptfini
MPID_nem_ptl_rptl_ptfini
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt);
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt)
ret
ret
PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt)
PtlPTFree
PtlPTFree
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt);
ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt)
ret
ret
PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt)
PtlPTFree
PtlPTFree
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptfree"
"**ptlptfree %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlNIFini(MPIDI_nem_ptl_ni);
ret = PtlNIFini(MPIDI_nem_ptl_ni)
ret
ret
PtlNIFini(MPIDI_nem_ptl_ni)
PtlNIFini
PtlNIFini
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlnifini"
"**ptlnifini %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
PtlFini();
PtlFini()
PtlFini
PtlFini
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE);
MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_PTL_FINALIZE
MPID_STATE_PTL_FINALIZE
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(3,0,0)
(57,122,0)
(24,72,0)
(17,135,0)
(52,113,0)
(116,87,0)
(117,126,0)
(38,62,0)
(14,13,0)
(81,103,0)
(107,62,0)
(45,99,0)
(49,74,0)
(93,87,0)
(100,91,0)
(44,35,0)
(64,18,0)
(115,81,0)
(135,72,0)
(35,72,0)
(1,103,0)
(56,73,0)
(112,94,0)
(94,13,0)
(59,72,0)
(9,72,0)
(94,59,0)
(69,72,0)
(136,72,0)
(84,1,0)
(27,113,0)
(32,67,0)
(30,116,0)
(46,62,0)
(15,17,0)
(44,67,0)
(31,113,0)
(34,73,0)
(65,13,0)
(91,72,0)
(90,135,0)
(50,113,0)
(128,68,0)
(67,32,0)
(78,35,0)
(98,6,0)
(19,69,0)
(122,135,0)
(2,40,0)
(23,105,0)
(13,59,0)
(97,35,0)
(18,72,0)
(120,72,0)
(113,123,0)
(142,2,0)
(81,72,0)
(69,19,0)
(80,103,0)
(71,126,0)
(68,128,0)
(89,116,0)
(74,72,0)
(13,72,0)
(135,17,0)
(118,105,0)
(103,129,0)
(35,44,0)
(113,66,0)
(127,17,0)
(7,116,0)
(0,72,0)
(113,103,0)
(62,141,0)
(95,18,0)
(29,67,0)
(114,72,0)
(51,48,0)
(92,70,0)
(6,82,0)
(76,103,0)
(105,135,0)
(11,13,0)
(146,128,0)
(40,72,0)
(123,113,0)
(143,1,0)
(86,81,0)
(131,62,0)
(102,62,0)
(122,105,0)
(6,69,0)
(104,91,0)
(83,76,0)
(28,35,0)
(43,103,0)
(105,122,0)
(40,2,0)
(48,72,0)
(16,116,0)
(70,66,0)
(145,40,0)
(139,72,0)
(144,105,0)
(134,19,0)
(59,61,0)
(63,2,0)
(105,72,0)
(103,72,0)
(60,43,0)
(43,72,0)
(39,105,0)
(20,123,0)
(116,72,0)
(67,72,0)
(111,82,0)
(108,89,0)
(133,82,0)
(43,18,0)
(58,13,0)
(73,34,0)
(116,103,0)
(5,43,0)
(132,61,0)
(55,64,0)
(26,82,0)
(62,72,0)
(129,103,0)
(66,70,0)
(106,66,0)
(47,69,0)
(37,87,0)
(128,18,0)
(66,72,0)
(125,1,0)
(12,32,0)
(25,1,0)
(41,116,0)
(145,1,0)
(43,64,0)
(140,116,0)
(1,72,0)
(89,87,0)
(22,113,0)
(123,66,0)
(82,69,0)
(13,94,0)
(82,72,0)
(124,1,0)
(110,32,0)
(77,72,0)
(85,141,0)
(137,72,0)
(62,103,0)
(21,35,0)
(73,72,0)
(1,40,0)
(109,82,0)
(119,43,0)
(10,40,0)
(61,59,0)
(53,68,0)
(8,93,0)
(105,103,0)
(141,99,0)
(99,72,0)
(87,93,0)
(54,43,0)
(36,43,0)
(4,13,0)
(79,59,0)
(13,103,0)
(82,103,0)
(116,89,0)
(64,43,0)
(87,72,0)
(96,105,0)
(62,99,0)
(18,128,0)
(121,35,0)
(35,67,0)
(35,103,0)
(138,145,0)
(33,82,0)
(75,44,0)
(82,6,0)
(126,99,0)
(141,62,0)
(42,73,0)
(113,72,0)
(1,145,0)
(99,126,0)
(130,42,0)
(94,112,1)
(17,15,1)
(93,8,1)
(29,62,1)
(3,91,1)
(69,19,1)
(48,51,1)
(34,56,1)
(51,120,1)
(130,88,1)
(80,88,1)
(128,68,1)
(43,18,1)
(8,37,1)
(143,125,1)
(142,63,1)
(118,23,1)
(22,50,1)
(94,59,1)
(53,146,1)
(35,44,1)
(1,145,1)
(123,66,1)
(6,98,1)
(21,28,1)
(134,47,1)
(92,106,1)
(0,3,1)
(73,34,1)
(2,142,1)
(141,85,1)
(135,17,1)
(6,69,1)
(5,36,1)
(113,123,1)
(40,2,1)
(122,135,1)
(110,29,1)
(141,99,1)
(30,16,1)
(78,67,1)
(76,103,1)
(124,84,1)
(64,18,1)
(44,67,1)
(70,92,1)
(47,43,1)
(45,116,1)
(43,64,1)
(133,109,1)
(15,127,1)
(50,27,1)
(38,46,1)
(84,143,1)
(4,58,1)
(36,54,1)
(131,38,1)
(12,110,1)
(55,5,1)
(81,86,1)
(13,59,1)
(51,139,1)
(18,128,1)
(41,7,1)
(145,40,1)
(44,75,1)
(49,0,1)
(60,119,1)
(54,60,1)
(57,96,1)
(1,40,1)
(99,126,1)
(52,66,1)
(56,74,1)
(16,140,1)
(129,80,1)
(32,12,1)
(86,48,1)
(91,104,1)
(103,129,1)
(116,87,1)
(42,130,1)
(117,45,1)
(106,35,1)
(13,103,1)
(85,131,1)
(65,59,1)
(19,134,1)
(95,101,1)
(13,94,1)
(23,135,1)
(63,10,1)
(66,70,1)
(64,55,1)
(82,69,1)
(74,49,1)
(88,73,1)
(140,41,1)
(113,66,1)
(59,61,1)
(90,82,1)
(42,73,1)
(125,25,1)
(104,100,1)
(144,39,1)
(67,32,1)
(105,103,1)
(89,108,1)
(39,118,1)
(95,76,1)
(35,103,1)
(146,95,1)
(20,31,1)
(1,103,1)
(123,20,1)
(145,138,1)
(116,89,1)
(97,21,1)
(119,18,1)
(102,99,1)
(68,53,1)
(10,13,1)
(37,1,1)
(83,101,1)
(121,97,1)
(11,14,1)
(75,121,1)
(105,135,1)
(35,67,1)
(126,71,1)
(43,103,1)
(14,4,1)
(116,103,1)
(46,107,1)
(122,57,1)
(71,117,1)
(80,42,1)
(111,69,1)
(82,103,1)
(105,122,1)
(62,99,1)
(89,87,1)
(26,133,1)
(113,103,1)
(58,65,1)
(132,79,1)
(62,103,1)
(79,105,1)
(27,52,1)
(28,78,1)
(127,90,1)
(108,30,1)
(138,124,1)
(139,113,1)
(62,141,1)
(107,102,1)
(7,87,1)
(112,11,1)
(115,81,1)
(76,83,1)
(31,22,1)
(96,144,1)
(81,103,1)
(87,93,1)
(33,26,1)
(98,33,1)
(25,40,1)
(82,6,1)
(109,111,1)
(101,103,1)
(61,132,1)
(141,99,2)
(76,101,2)
(18,128,2)
(35,44,2)
(64,18,2)
(13,94,2)
(113,66,2)
(82,6,2)
(13,103,2)
(99,126,2)
(105,122,2)
(40,2,2)
(123,66,2)
(113,123,2)
(62,141,2)
(1,145,2)
(43,103,2)
(66,70,2)
(82,103,2)
(83,101,2)
(76,103,2)
(73,34,2)
(59,61,2)
(6,69,2)
(103,129,2)
(35,67,2)
(128,68,2)
(135,17,2)
(44,67,2)
(130,88,2)
(43,64,2)
(43,18,2)
(105,103,2)
(94,59,2)
(82,69,2)
(113,103,2)
(42,73,2)
(105,135,2)
(122,135,2)
(35,103,2)
(1,103,2)
(87,93,2)
(67,32,2)
(89,87,2)
(116,89,2)
(116,87,2)
(42,88,2)
(116,103,2)
(62,99,2)
(1,40,2)
(145,40,2)
(115,81,2)
(13,59,2)
(81,103,2)
(62,103,2)
(69,19,2)
-----------------------------------
(0,MPIDI_STATE_DECL(MPID_STATE_PTL_FINALIZE)
(1,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(2,PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt)
(3,MPID_STATE_PTL_FINALIZE)
(4,MPI_ERR_OTHER)
(5,"**ptlptfree %s")
(6,MPID_nem_ptl_strerror(ret)
(7,ret)
(8,MPIDI_nem_ptl_control_pt)
(9,ret)
(10,ret)
(11,"**ptlptfree %s")
(12,MPIDI_nem_ptl_rpt_pt)
(13,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(14,"**ptlptfree")
(15,MPIDI_nem_ptl_pt)
(16,"**ptlptfree")
(17,PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt)
(18,ret = MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq)
(19,MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt)
(20,ret)
(21,MPI_ERR_OTHER)
(22,"**ptlnifini")
(23,ret)
(24,if (mpi_errno)
(25,ret)
(26,"**ptlptfree")
(27,mpi_errno)
(28,mpi_errno)
(29,ret)
(30,"**ptlptfree %s")
(31,"**ptlnifini %s")
(32,PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt)
(33,"**ptlptfree %s")
(34,MPID_nem_ptl_nm_finalize()
(35,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(36,"**ptlptfree")
(37,ret)
(38,"**ptlptfree")
(39,MPI_ERR_OTHER)
(40,ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_get_pt)
(41,mpi_errno)
(42,MPIU_ERR_POP(mpi_errno)
(43,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(44,MPID_nem_ptl_strerror(ret)
(45,ret)
(46,MPI_ERR_OTHER)
(47,ret)
(48,MPIDI_FUNC_EXIT(MPID_STATE_PTL_FINALIZE)
(49,MPID_STATE_PTL_FINALIZE)
(50,MPI_ERR_OTHER)
(51,MPID_STATE_PTL_FINALIZE)
(52,ret)
(53,MPIDI_nem_ptl_eq)
(54,MPI_ERR_OTHER)
(55,ret)
(56,mpi_errno)
(57,ret)
(58,mpi_errno)
(59,ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt)
(60,mpi_errno)
(61,MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_get_pt)
(62,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(63,MPIDI_nem_ptl_ni)
(64,MPID_nem_ptl_strerror(ret)
(65,ret)
(66,ret = PtlNIFini(MPIDI_nem_ptl_ni)
(67,ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_rpt_pt)
(68,&MPIDI_nem_ptl_eq)
(69,ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_pt)
(70,PtlNIFini(MPIDI_nem_ptl_ni)
(71,MPIDI_nem_ptl_control_pt)
(72,)
(73,mpi_errno = MPID_nem_ptl_nm_finalize()
(74,MPIDI_FUNC_ENTER(MPID_STATE_PTL_FINALIZE)
(75,ret)
(76,MPIU_ERR_POP(mpi_errno)
(77,if (mpi_errno)
(78,ret)
(79,ret)
(80,mpi_errno)
(81,return mpi_errno;)
(82,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(83,mpi_errno)
(84,"**ptlptfree")
(85,ret)
(86,mpi_errno)
(87,ret = MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt)
(88,mpi_errno)
(89,MPID_nem_ptl_strerror(ret)
(90,ret)
(91,mpi_errno = MPI_SUCCESS)
(92,MPIDI_nem_ptl_ni)
(93,MPID_nem_ptl_rptl_ptfini(MPIDI_nem_ptl_control_pt)
(94,MPID_nem_ptl_strerror(ret)
(95,ret)
(96,"**ptlptfree %s")
(97,"**ptlptfree")
(98,ret)
(99,ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt)
(100,mpi_errno)
(101,mpi_errno)
(102,ret)
(103,mpi_errno = MPID_nem_ptl_poll_finalize()
(104,MPI_SUCCESS)
(105,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(106,ret)
(107,mpi_errno)
(108,ret)
(109,mpi_errno)
(110,MPIDI_nem_ptl_ni)
(111,ret)
(112,ret)
(113,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret)
(114,fn_fail:)
(115,RET)
(116,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptfree", "**ptlptfree %s", MPID_nem_ptl_strerror(ret)
(117,MPIDI_nem_ptl_ni)
(118,mpi_errno)
(119,ret)
(120,goto fn_exit;)
(121,"**ptlptfree %s")
(122,MPID_nem_ptl_strerror(ret)
(123,MPID_nem_ptl_strerror(ret)
(124,"**ptlptfree %s")
(125,mpi_errno)
(126,PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_control_pt)
(127,MPIDI_nem_ptl_ni)
(128,MPID_nem_ptl_rptl_drain_eq(1, &MPIDI_nem_ptl_eq)
(129,MPID_nem_ptl_poll_finalize()
(130,mpi_errno)
(131,"**ptlptfree %s")
(132,MPIDI_nem_ptl_get_pt)
(133,MPI_ERR_OTHER)
(134,MPIDI_nem_ptl_pt)
(135,ret = PtlPTFree(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_pt)
(136,fn_exit:)
(137,mpi_errno)
(138,ret)
(139,PtlFini()
(140,MPI_ERR_OTHER)
(141,MPID_nem_ptl_strerror(ret)
(142,MPIDI_nem_ptl_get_pt)
(143,MPI_ERR_OTHER)
(144,"**ptlptfree")
(145,MPID_nem_ptl_strerror(ret)
(146,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^