-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FIX: Use a relatively small number for memory allocation */
    data = 20;
    goto sink;
sink:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
23,24
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,18,20,24,25,27,29,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* FIX: Use a relatively small number for memory allocation */    data = 20;    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* FIX: Use a relatively small number for memory allocation */    data = 20;    goto sink;sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FIX: Use a relatively small number for memory allocation */    data = 20;
source
data = 20;
data = 20
data
data
20
goto sink;
sink
sink:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
sink
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(25,28,0)
(29,33,0)
(44,40,0)
(15,5,0)
(6,37,0)
(37,32,0)
(38,27,0)
(10,5,0)
(8,27,0)
(17,33,0)
(22,33,0)
(45,32,0)
(26,42,0)
(43,12,0)
(32,37,0)
(7,40,0)
(37,9,0)
(13,12,0)
(3,19,0)
(2,38,0)
(20,11,0)
(28,39,0)
(27,38,0)
(30,11,0)
(27,6,0)
(34,9,0)
(9,33,0)
(42,33,0)
(35,33,0)
(38,19,0)
(24,19,0)
(21,37,0)
(4,38,0)
(1,9,0)
(46,23,0)
(16,42,0)
(7,31,0)
(27,8,0)
(24,38,0)
(6,27,0)
(41,10,0)
(23,38,0)
(37,6,0)
(36,23,0)
(5,9,0)
(47,2,0)
(18,33,0)
(12,33,0)
(2,19,0)
(5,10,0)
(40,7,0)
(14,24,0)
(11,19,0)
(11,38,0)
(20,30,1)
(32,45,1)
(24,14,1)
(7,40,1)
(0,24,1)
(30,23,1)
(40,44,1)
(25,5,1)
(46,38,1)
(10,41,1)
(23,36,1)
(11,38,1)
(5,9,1)
(27,6,1)
(37,32,1)
(21,4,1)
(44,23,1)
(17,12,1)
(36,46,1)
(9,34,1)
(5,10,1)
(11,20,1)
(29,9,1)
(34,1,1)
(45,21,1)
(6,37,1)
(47,11,1)
(24,38,1)
(37,9,1)
(15,29,1)
(38,27,1)
(1,17,1)
(2,38,1)
(12,13,1)
(0,28,1)
(30,7,1)
(28,25,1)
(41,15,1)
(2,47,1)
(14,2,1)
(27,8,1)
(13,43,1)
(4,5,1)
(23,38,1)
(23,38,2)
(30,5,2)
(23,5,2)
(37,32,2)
(32,5,2)
(24,5,2)
(7,40,2)
(6,5,2)
(45,5,2)
(14,5,2)
(11,5,2)
(28,5,2)
(27,5,2)
(27,8,2)
(6,37,2)
(37,5,2)
(47,5,2)
(2,5,2)
(25,5,2)
(24,38,2)
(36,5,2)
(38,5,2)
(11,38,2)
(37,9,2)
(44,23,2)
(38,27,2)
(40,23,2)
(46,5,2)
(20,5,2)
(7,23,2)
(27,6,2)
(5,10,2)
(5,9,2)
(21,5,2)
(2,38,2)
(4,5,2)
-----------------------------------
(0,RET)
(1,data)
(2,printLine(myString)
(3,if (myString == NULL)
(4,myString)
(5,data > strlen(HELLO_STRING)
(6,malloc(data*sizeof(char)
(7,exit(-1)
(8,char *)
(9,data = 20)
(10,strlen(HELLO_STRING)
(11,strcpy(myString, HELLO_STRING)
(12,data = 0)
(13,0)
(14,myString)
(15,data)
(16,myString)
(17,goto source;)
(18,data)
(19,)
(20,HELLO_STRING)
(21,data)
(22,sink:)
(23,myString == NULL)
(24,free(myString)
(25,"Input is less than the length of the source string")
(26,if (data > strlen(HELLO_STRING)
(27,(char *)
(28,printLine("Input is less than the length of the source string")
(29,goto sink;)
(30,myString)
(31,)
(32,sizeof(char)
(33,)
(34,20)
(35,source:)
(36,NULL)
(37,data*sizeof(char)
(38,myString = (char *)
(39,)
(40,-1)
(41,HELLO_STRING)
(42,)
(43,data)
(44,1)
(45,char)
(46,myString)
(47,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^