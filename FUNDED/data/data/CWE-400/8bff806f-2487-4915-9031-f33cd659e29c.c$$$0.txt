-----label-----
0
-----code-----
static bool peer_message_is_solicited(Peer *destination, uint64_t sender_id, Message *message) {
        MatchRule *rule;

        /*
         * This checks whether @message is solicited by @destination. Note that
         * only signals can be solicited, and they are considered so if, and
         * only if, there is a match installed for them.
         */

        if (message->header->type != DBUS_MESSAGE_TYPE_SIGNAL)
                return false;

        c_rbtree_for_each_entry(rule, &destination->owned_matches.rule_tree, owner_node) {
                if (match_rule_match_metadata(rule, &message->metadata))
                        return true;
        }

        return false;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
25,26
27,28
27,29
30,31
30,32
31,32
31,33
32,33
32,34
33,34
33,35
34,35
38,39
40,41
42,43
43,44
43,45
43,46
43,47
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
57,58
58,59
59,60
59,61
60,61
60,62
60,63
61,62
63,64
65,66
66,67
66,68
67,68
70,71
72,73
-----nextToken-----
2,4,7,9,10,13,15,18,20,21,26,28,29,35,36,37,39,41,45,47,52,53,54,56,62,64,68,69,71,73
-----computeFrom-----
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static bool peer_message_is_solicited(Peer *destination, uint64_t sender_id, Message *message) {        MatchRule *rule;        /*         * This checks whether @message is solicited by @destination. Note that         * only signals can be solicited, and they are considered so if, and         * only if, there is a match installed for them.         */        if (message->header->type != DBUS_MESSAGE_TYPE_SIGNAL)                return false;        c_rbtree_for_each_entry(rule, &destination->owned_matches.rule_tree, owner_node) {                if (match_rule_match_metadata(rule, &message->metadata))                        return true;        }        return false;}
static bool
peer_message_is_solicited(Peer *destination, uint64_t sender_id, Message *message)
peer_message_is_solicited
Peer *destination
Peer
Peer
*destination
*
destination
uint64_t sender_id
uint64_t
uint64_t
sender_id
sender_id
Message *message
Message
Message
*message
*
message
{        MatchRule *rule;        /*         * This checks whether @message is solicited by @destination. Note that         * only signals can be solicited, and they are considered so if, and         * only if, there is a match installed for them.         */        if (message->header->type != DBUS_MESSAGE_TYPE_SIGNAL)                return false;        c_rbtree_for_each_entry(rule, &destination->owned_matches.rule_tree, owner_node) {                if (match_rule_match_metadata(rule, &message->metadata))                        return true;        }        return false;}
MatchRule *rule;
MatchRule *rule;
MatchRule
MatchRule
*rule
*
rule
if (message->header->type != DBUS_MESSAGE_TYPE_SIGNAL)                return false;
message->header->type != DBUS_MESSAGE_TYPE_SIGNAL
message->header->type
message->header
message
message
header
type
DBUS_MESSAGE_TYPE_SIGNAL
DBUS_MESSAGE_TYPE_SIGNAL
return false;
false
c_rbtree_for_each_entry(rule, &destination->owned_matches.rule_tree, owner_node)
c_rbtree_for_each_entry(rule, &destination->owned_matches.rule_tree, owner_node)
c_rbtree_for_each_entry
c_rbtree_for_each_entry
rule
rule
&destination->owned_matches.rule_tree
destination->owned_matches.rule_tree
destination->owned_matches
destination
destination
owned_matches
rule_tree
owner_node
owner_node
)
{                if (match_rule_match_metadata(rule, &message->metadata))                        return true;        }
if (match_rule_match_metadata(rule, &message->metadata))                        return true;
match_rule_match_metadata(rule, &message->metadata)
match_rule_match_metadata
match_rule_match_metadata
rule
rule
&message->metadata
message->metadata
message
message
metadata
return true;
true
return false;
false
-----joern-----
(7,18,0)
(9,22,0)
(14,6,0)
(9,3,0)
(21,24,0)
(17,25,0)
(19,3,0)
(15,17,0)
(24,21,0)
(17,15,0)
(4,25,0)
(1,22,0)
(3,13,0)
(24,6,0)
(16,15,0)
(9,18,0)
(12,13,0)
(5,21,0)
(25,17,0)
(8,21,0)
(6,24,0)
(15,10,0)
(20,12,0)
(23,13,0)
(0,15,0)
(21,10,0)
(11,13,0)
(2,24,0)
(9,18,1)
(16,0,1)
(9,3,1)
(15,16,1)
(6,14,1)
(24,21,1)
(24,2,1)
(25,17,1)
(18,7,1)
(22,1,1)
(0,4,1)
(19,25,1)
(15,10,1)
(5,8,1)
(4,6,1)
(14,24,1)
(21,10,1)
(6,24,1)
(7,25,1)
(2,21,1)
(17,15,1)
(9,22,1)
(3,19,1)
(1,6,1)
(21,5,1)
(1,6,2)
(15,10,2)
(4,6,2)
(9,18,2)
(17,15,2)
(7,25,2)
(19,25,2)
(21,10,2)
(9,3,2)
(0,6,2)
(18,25,2)
(24,21,2)
(17,6,2)
(25,6,2)
(9,22,2)
(3,25,2)
(25,17,2)
(15,6,2)
(16,6,2)
(6,24,2)
(22,6,2)
-----------------------------------
(0,message)
(1,false)
(2,type)
(3,return false;)
(4,rule)
(5,header)
(6,message->header->type != DBUS_MESSAGE_TYPE_SIGNAL)
(7,true)
(8,message)
(9,RET)
(10,Message *message)
(11,rule)
(12,)
(13,)
(14,DBUS_MESSAGE_TYPE_SIGNAL)
(15,message->metadata)
(16,metadata)
(17,&message->metadata)
(18,return true;)
(19,false)
(20,if (match_rule_match_metadata(rule, &message->metadata)
(21,message->header)
(22,return false;)
(23,if (message->header->type != DBUS_MESSAGE_TYPE_SIGNAL)
(24,message->header->type)
(25,match_rule_match_metadata(rule, &message->metadata)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^