-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_11_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalReturnsTrue())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
44,45
46,47
46,48
46,49
46,50
47,48
48,49
48,50
49,50
52,53
52,54
53,54
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
65,66
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,41,43,45,50,51,54,58,59,61,64,69,70
-----computeFrom-----
12,13
12,14
48,49
48,50
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_11_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_11_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_11_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(3,7,0)
(18,27,0)
(5,27,0)
(17,36,0)
(8,3,0)
(1,21,0)
(22,27,0)
(31,35,0)
(10,18,0)
(4,11,0)
(26,12,0)
(12,2,0)
(3,10,0)
(11,18,0)
(18,33,0)
(11,4,0)
(21,35,0)
(24,35,0)
(25,17,0)
(2,16,0)
(29,3,0)
(23,10,0)
(30,12,0)
(20,18,0)
(11,21,0)
(9,2,0)
(15,11,0)
(33,18,0)
(10,3,0)
(34,33,0)
(21,11,0)
(13,2,0)
(0,31,0)
(28,27,0)
(32,35,0)
(25,21,1)
(19,6,1)
(21,35,1)
(35,24,1)
(10,18,1)
(12,26,1)
(0,17,1)
(17,25,1)
(31,0,1)
(15,1,1)
(21,11,1)
(30,19,1)
(1,31,1)
(31,35,1)
(3,10,1)
(29,8,1)
(18,33,1)
(11,15,1)
(11,4,1)
(10,23,1)
(11,18,1)
(14,19,1)
(1,35,1)
(34,20,1)
(24,32,1)
(6,18,1)
(26,30,1)
(23,29,1)
(19,3,1)
(8,6,1)
(32,12,1)
(14,21,1)
(33,34,1)
(21,21,2)
(31,35,2)
(11,21,2)
(17,21,2)
(24,19,2)
(11,18,2)
(21,35,2)
(10,18,2)
(30,19,2)
(35,19,2)
(23,6,2)
(18,33,2)
(8,6,2)
(11,19,2)
(21,11,2)
(12,19,2)
(25,21,2)
(32,19,2)
(21,19,2)
(26,19,2)
(3,10,2)
(15,21,2)
(11,4,2)
(10,6,2)
(1,21,2)
(15,19,2)
(1,19,2)
(3,6,2)
(29,6,2)
(0,21,2)
(31,21,2)
-----------------------------------
(0,i)
(1,i)
(2,)
(3,fscanf(stdin, "%d", &count)
(4,size_t)
(5,count)
(6,globalReturnsTrue()
(7,)
(8,stdin)
(9,for (i = 0; i < (size_t)
(10,&count)
(11,(size_t)
(12,i = 0)
(13,i)
(14,RET)
(15,count)
(16,)
(17,printLine("Hello")
(18,count = -1)
(19,globalReturnsTrue()
(20,count)
(21,i < (size_t)
(22,if(globalReturnsTrue()
(23,count)
(24,0)
(25,"Hello")
(26,0)
(27,)
(28,if(globalReturnsTrue()
(29,"%d")
(30,i)
(31,i++)
(32,i)
(33,-1)
(34,1)
(35,i = 0)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^