-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad()
{
    int i,j;
    twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
91,92
92,93
92,94
93,94
95,96
96,97
96,98
97,98
100,101
100,102
100,103
100,104
101,102
102,103
102,104
103,104
106,107
106,108
107,108
110,111
111,112
113,114
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,78,79,80,81,87,88,89,90,94,98,99,104,105,108,109,112,114
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
74,75
74,76
83,84
83,85
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad(){    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad
{    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(57,1,0)
(4,43,0)
(42,6,0)
(26,53,0)
(38,50,0)
(5,11,0)
(24,9,0)
(55,6,0)
(39,19,0)
(39,16,0)
(27,2,0)
(15,14,0)
(21,20,0)
(37,1,0)
(61,33,0)
(32,57,0)
(62,53,0)
(2,27,0)
(19,38,0)
(41,45,0)
(52,6,0)
(19,39,0)
(35,27,0)
(58,2,0)
(50,38,0)
(0,41,0)
(4,51,0)
(12,1,0)
(30,38,0)
(31,43,0)
(43,4,0)
(59,6,0)
(22,50,0)
(33,14,0)
(40,6,0)
(17,53,0)
(36,40,0)
(50,11,0)
(45,41,0)
(54,27,0)
(25,26,0)
(45,9,0)
(2,20,0)
(48,53,0)
(23,1,0)
(33,50,0)
(20,11,0)
(47,6,0)
(34,22,0)
(38,30,0)
(7,17,0)
(49,17,0)
(44,50,0)
(56,22,0)
(14,15,0)
(9,11,0)
(29,45,0)
(60,16,0)
(14,33,0)
(10,12,0)
(38,19,0)
(16,39,0)
(46,40,0)
(28,39,0)
(13,57,0)
(41,50,0)
(15,11,0)
(18,33,0)
(27,50,0)
(3,41,0)
(54,4,1)
(46,36,1)
(25,15,1)
(2,58,1)
(15,14,1)
(3,20,1)
(58,27,1)
(12,1,1)
(45,29,1)
(32,1,1)
(33,50,1)
(22,50,1)
(57,1,1)
(8,57,1)
(34,50,1)
(48,62,1)
(18,61,1)
(17,53,1)
(39,16,1)
(9,24,1)
(20,21,1)
(24,45,1)
(19,39,1)
(23,17,1)
(49,53,1)
(2,27,1)
(40,46,1)
(27,35,1)
(0,3,1)
(41,50,1)
(4,43,1)
(17,7,1)
(28,44,1)
(38,30,1)
(60,28,1)
(16,60,1)
(12,10,1)
(61,9,1)
(44,17,1)
(54,22,1)
(38,19,1)
(62,40,1)
(50,38,1)
(32,12,1)
(1,37,1)
(41,0,1)
(10,57,1)
(26,53,1)
(13,32,1)
(31,22,1)
(33,18,1)
(37,23,1)
(45,41,1)
(27,50,1)
(49,26,1)
(22,56,1)
(7,49,1)
(53,48,1)
(35,54,1)
(26,25,1)
(14,33,1)
(57,13,1)
(21,2,1)
(43,31,1)
(56,34,1)
(29,41,1)
(14,33,2)
(15,14,2)
(35,17,2)
(13,57,2)
(22,17,2)
(56,17,2)
(61,17,2)
(28,17,2)
(27,17,2)
(2,27,2)
(57,1,2)
(19,39,2)
(7,17,2)
(24,17,2)
(33,50,2)
(22,50,2)
(49,17,2)
(54,17,2)
(29,17,2)
(38,17,2)
(58,17,2)
(39,16,2)
(50,17,2)
(20,17,2)
(57,57,2)
(3,17,2)
(43,22,2)
(26,17,2)
(4,22,2)
(9,17,2)
(60,17,2)
(17,53,2)
(27,50,2)
(50,38,2)
(17,17,2)
(16,17,2)
(0,17,2)
(21,17,2)
(4,43,2)
(41,50,2)
(41,17,2)
(45,17,2)
(39,17,2)
(44,17,2)
(31,22,2)
(38,19,2)
(2,17,2)
(26,53,2)
(15,17,2)
(12,1,2)
(45,41,2)
(33,17,2)
(25,17,2)
(12,57,2)
(18,17,2)
(34,17,2)
(19,17,2)
(32,57,2)
(14,17,2)
(10,57,2)
(38,30,2)
-----------------------------------
(0,0)
(1,j = 0)
(2,data[0].intOne)
(3,data)
(4,exit(-1)
(5,if (data == NULL)
(6,)
(7,1)
(8,RET)
(9,data[0].intTwo = 0)
(10,j)
(11,)
(12,j++)
(13,1)
(14,&data[0])
(15,printStructLine(&data[0])
(16,sizeof(twoIntsStruct)
(17,i < 1)
(18,0)
(19,malloc(100*sizeof(twoIntsStruct)
(20,data[0].intOne = 0)
(21,0)
(22,data == NULL)
(23,j)
(24,0)
(25,i)
(26,i++)
(27,data[0])
(28,100)
(29,intTwo)
(30,twoIntsStruct *)
(31,1)
(32,j)
(33,data[0])
(34,data)
(35,0)
(36,data)
(37,0)
(38,(twoIntsStruct *)
(39,100*sizeof(twoIntsStruct)
(40,data = NULL)
(41,data[0])
(42,data)
(43,-1)
(44,data)
(45,data[0].intTwo)
(46,NULL)
(47,i)
(48,0)
(49,i)
(50,data = (twoIntsStruct *)
(51,)
(52,for(i = 0; i < 1; i++)
(53,i = 0)
(54,data)
(55,j)
(56,NULL)
(57,j < 1)
(58,intOne)
(59,for(j = 0; j < 1; j++)
(60,twoIntsStruct)
(61,data)
(62,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^