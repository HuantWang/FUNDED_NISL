-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticTrue)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticTrue
staticTrue
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(40,10,0)
(38,49,0)
(35,6,0)
(26,23,0)
(42,43,0)
(11,43,0)
(18,0,0)
(39,27,0)
(47,6,0)
(34,42,0)
(46,27,0)
(47,27,0)
(20,11,0)
(45,3,0)
(1,18,0)
(27,3,0)
(6,47,0)
(47,38,0)
(43,11,0)
(40,23,0)
(32,30,0)
(43,30,0)
(2,20,0)
(21,42,0)
(2,12,0)
(17,47,0)
(22,30,0)
(9,48,0)
(42,30,0)
(15,43,0)
(7,12,0)
(8,11,0)
(14,32,0)
(4,2,0)
(20,2,0)
(32,43,0)
(25,30,0)
(33,16,0)
(25,43,0)
(23,40,0)
(44,3,0)
(11,8,0)
(37,3,0)
(36,48,0)
(16,19,0)
(11,20,0)
(2,38,0)
(24,38,0)
(29,18,0)
(12,2,0)
(2,27,0)
(41,38,0)
(48,43,0)
(5,25,0)
(47,38,1)
(23,26,1)
(21,48,1)
(31,13,1)
(11,20,1)
(2,12,1)
(35,17,1)
(47,6,1)
(40,23,1)
(16,33,1)
(5,42,1)
(17,13,1)
(9,36,1)
(32,14,1)
(47,27,1)
(6,35,1)
(46,39,1)
(48,43,1)
(24,41,1)
(38,24,1)
(41,28,1)
(27,46,1)
(12,7,1)
(28,27,1)
(43,11,1)
(21,40,1)
(42,43,1)
(7,4,1)
(2,27,1)
(15,47,1)
(14,25,1)
(31,16,1)
(4,15,1)
(26,48,1)
(42,34,1)
(32,43,1)
(13,38,1)
(34,21,1)
(13,28,1)
(36,43,1)
(2,38,1)
(20,2,1)
(11,8,1)
(31,32,1)
(48,9,1)
(33,47,1)
(25,5,1)
(25,43,1)
(11,8,2)
(36,47,2)
(47,13,2)
(38,28,2)
(11,20,2)
(32,47,2)
(16,47,2)
(48,43,2)
(17,13,2)
(34,47,2)
(35,13,2)
(24,28,2)
(6,13,2)
(32,43,2)
(9,47,2)
(41,28,2)
(4,47,2)
(26,48,2)
(5,47,2)
(42,43,2)
(48,47,2)
(43,11,2)
(40,48,2)
(7,47,2)
(47,38,2)
(23,48,2)
(47,6,2)
(2,12,2)
(43,47,2)
(15,47,2)
(25,43,2)
(21,47,2)
(47,27,2)
(42,47,2)
(2,38,2)
(11,47,2)
(2,47,2)
(20,2,2)
(20,47,2)
(33,47,2)
(14,47,2)
(40,23,2)
(25,47,2)
(2,27,2)
(12,47,2)
-----------------------------------
(0,)
(1,myString)
(2,data*sizeof(char)
(3,)
(4,data)
(5,myString)
(6,strlen(HELLO_STRING)
(7,char)
(8,char *)
(9,NULL)
(10,)
(11,(char *)
(12,sizeof(char)
(13,staticTrue)
(14,myString)
(15,myString)
(16,printLine("Input is less than the length of the source string")
(17,data)
(18,)
(19,)
(20,malloc(data*sizeof(char)
(21,myString)
(22,if (myString == NULL)
(23,-1)
(24,20)
(25,printLine(myString)
(26,1)
(27,data = 0)
(28,staticTrue)
(29,if (data > strlen(HELLO_STRING)
(30,)
(31,RET)
(32,free(myString)
(33,"Input is less than the length of the source string")
(34,HELLO_STRING)
(35,HELLO_STRING)
(36,myString)
(37,if(staticTrue)
(38,data = 20)
(39,data)
(40,exit(-1)
(41,data)
(42,strcpy(myString, HELLO_STRING)
(43,myString = (char *)
(44,data)
(45,if(staticTrue)
(46,0)
(47,data > strlen(HELLO_STRING)
(48,myString == NULL)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^