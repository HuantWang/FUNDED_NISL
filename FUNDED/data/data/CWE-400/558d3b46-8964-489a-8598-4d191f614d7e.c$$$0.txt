-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
25,26
25,27
27,28
28,29
28,30
28,31
28,32
28,33
28,34
28,35
29,30
30,31
30,32
31,32
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
59,62
60,61
62,63
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
104,105
104,106
104,107
104,108
104,109
105,106
107,108
109,110
110,111
110,112
113,114
113,115
114,115
116,117
118,119
120,121
121,122
122,123
122,124
123,124
126,127
126,128
127,128
129,130
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,8,10,14,16,18,23,24,26,32,34,36,40,42,43,46,49,51,52,54,58,61,63,64,68,70,75,76,81,82,85,89,90,92,95,101,103,106,108,111,112,115,117,119,124,125,128,133,135
-----computeFrom-----
12,13
12,14
21,22
21,23
56,57
56,58
66,67
66,68
79,80
79,81
83,84
83,85
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }
1
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(3,58,0)
(60,63,0)
(22,70,0)
(42,14,0)
(54,9,0)
(4,13,0)
(15,31,0)
(56,24,0)
(8,13,0)
(13,4,0)
(40,67,0)
(13,8,0)
(35,70,0)
(51,50,0)
(59,70,0)
(14,60,0)
(37,46,0)
(63,70,0)
(61,70,0)
(24,16,0)
(20,37,0)
(34,60,0)
(13,46,0)
(0,70,0)
(45,58,0)
(49,9,0)
(67,5,0)
(57,52,0)
(65,60,0)
(4,48,0)
(32,61,0)
(49,14,0)
(39,59,0)
(13,31,0)
(62,7,0)
(10,59,0)
(44,46,0)
(46,58,0)
(50,14,0)
(53,4,0)
(60,14,0)
(49,6,0)
(5,67,0)
(43,6,0)
(46,37,0)
(33,48,0)
(2,50,0)
(23,70,0)
(21,48,0)
(31,36,0)
(11,61,0)
(30,13,0)
(66,47,0)
(38,66,0)
(6,49,0)
(26,63,0)
(70,64,0)
(24,14,0)
(9,49,0)
(18,31,0)
(25,70,0)
(68,48,0)
(28,63,0)
(19,21,0)
(7,71,0)
(49,5,0)
(12,49,0)
(29,49,0)
(14,70,0)
(55,58,0)
(41,70,0)
(5,49,0)
(59,39,1)
(14,60,1)
(61,32,1)
(38,5,1)
(2,14,1)
(17,27,1)
(32,11,1)
(54,12,1)
(48,33,1)
(7,62,1)
(66,38,1)
(69,4,1)
(4,48,1)
(13,30,1)
(13,31,1)
(19,5,1)
(50,51,1)
(27,1,1)
(63,26,1)
(19,66,1)
(21,19,1)
(21,48,1)
(56,69,1)
(29,6,1)
(24,56,1)
(53,21,1)
(28,61,1)
(6,43,1)
(39,10,1)
(42,63,1)
(43,9,1)
(13,8,1)
(30,53,1)
(34,65,1)
(67,40,1)
(4,13,1)
(60,63,1)
(5,67,1)
(18,1,1)
(24,14,1)
(1,46,1)
(33,68,1)
(20,44,1)
(49,6,1)
(40,4,1)
(9,54,1)
(11,59,1)
(31,15,1)
(17,24,1)
(62,50,1)
(17,69,1)
(51,2,1)
(13,46,1)
(53,48,1)
(65,42,1)
(68,7,1)
(46,37,1)
(49,9,1)
(37,20,1)
(49,29,1)
(50,14,1)
(12,67,1)
(5,49,1)
(27,31,1)
(60,34,1)
(10,27,1)
(68,50,1)
(49,14,1)
(26,28,1)
(15,18,1)
(68,27,2)
(56,69,2)
(28,27,2)
(63,27,2)
(11,27,2)
(13,4,2)
(4,48,2)
(12,4,2)
(13,31,2)
(30,27,2)
(43,4,2)
(48,27,2)
(13,8,2)
(31,1,2)
(13,27,2)
(49,6,2)
(61,27,2)
(39,27,2)
(21,48,2)
(4,13,2)
(60,27,2)
(42,27,2)
(18,1,2)
(26,27,2)
(5,67,2)
(69,27,2)
(51,27,2)
(67,4,2)
(5,49,2)
(15,1,2)
(29,4,2)
(14,27,2)
(59,27,2)
(54,4,2)
(14,60,2)
(4,27,2)
(49,9,2)
(7,50,2)
(38,5,2)
(9,4,2)
(21,4,2)
(49,4,2)
(5,4,2)
(2,27,2)
(24,14,2)
(4,4,2)
(24,69,2)
(62,50,2)
(65,27,2)
(33,27,2)
(50,27,2)
(40,4,2)
(50,14,2)
(66,5,2)
(6,4,2)
(34,27,2)
(30,4,2)
(19,4,2)
(53,4,2)
(49,14,2)
(60,63,2)
(53,27,2)
(13,46,2)
(46,37,2)
(32,27,2)
(10,27,2)
-----------------------------------
(0,if (pFile == NULL)
(1,1)
(2,pFile)
(3,if(1)
(4,i < (size_t)
(5,strlen(SENTENCE)
(6,strlen(SENTENCE)
(7,exit(1)
(8,size_t)
(9,sizeof(char)
(10,i)
(11,pFile)
(12,SENTENCE)
(13,(size_t)
(14,pFile = fopen(filename, "w+")
(15,20)
(16,)
(17,RET)
(18,count)
(19,i)
(20,1)
(21,i++)
(22,i)
(23,pFile)
(24,fclose(pFile)
(25,filename)
(26,"output_bad.txt")
(27,1)
(28,filename)
(29,pFile)
(30,count)
(31,count = 20)
(32,NULL)
(33,0)
(34,"w+")
(35,for (i = 0; i < (size_t)
(36,)
(37,-1)
(38,1)
(39,0)
(40,SENTENCE)
(41,if (pFile)
(42,pFile)
(43,SENTENCE)
(44,count)
(45,count)
(46,count = -1)
(47,)
(48,i = 0)
(49,fwrite(SENTENCE, sizeof(char)
(50,pFile == NULL)
(51,NULL)
(52,)
(53,i)
(54,char)
(55,if(1)
(56,pFile)
(57,if (strlen(SENTENCE)
(58,)
(59,i = 0)
(60,fopen(filename, "w+")
(61,*pFile = NULL)
(62,1)
(63,*filename = "output_bad.txt")
(64,)
(65,filename)
(66,exit(1)
(67,strlen(SENTENCE)
(68,i)
(69,pFile)
(70,)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^