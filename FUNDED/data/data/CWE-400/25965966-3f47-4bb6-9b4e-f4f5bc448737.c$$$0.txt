-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* FIX: Deallocate memory initialized in the source */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
49,50
50,51
50,52
51,52
55,56
55,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,31,35,38,40,44,46,47,48,52,53,54,56,59,63,65,66,67,71,72,73
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* FIX: Deallocate memory initialized in the source */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(28,1,0)
(30,9,0)
(29,13,0)
(33,13,0)
(25,12,0)
(5,8,0)
(16,8,0)
(20,9,0)
(27,21,0)
(4,8,0)
(10,19,0)
(11,13,0)
(2,28,0)
(5,9,0)
(14,13,0)
(19,9,0)
(5,28,0)
(3,12,0)
(17,13,0)
(0,14,0)
(18,1,0)
(26,12,0)
(8,12,0)
(22,33,0)
(1,28,0)
(23,9,0)
(15,5,0)
(24,13,0)
(21,28,0)
(6,9,0)
(21,14,0)
(28,14,0)
(5,15,1)
(11,33,1)
(31,8,1)
(1,18,1)
(32,11,1)
(0,31,1)
(15,32,1)
(19,10,1)
(2,0,1)
(4,16,1)
(28,1,1)
(5,28,1)
(27,28,1)
(6,5,1)
(21,28,1)
(5,8,1)
(29,21,1)
(21,27,1)
(7,6,1)
(8,4,1)
(32,29,1)
(22,31,1)
(10,32,1)
(30,19,1)
(33,22,1)
(7,30,1)
(18,2,1)
(1,31,2)
(28,31,2)
(6,32,2)
(30,32,2)
(0,31,2)
(5,8,2)
(28,1,2)
(21,28,2)
(18,31,2)
(11,31,2)
(10,32,2)
(15,32,2)
(19,32,2)
(2,31,2)
(33,31,2)
(22,31,2)
(29,31,2)
(21,31,2)
(5,28,2)
(27,31,2)
(5,32,2)
-----------------------------------
(0,"myString")
(1,wcsdup(myString)
(2,data)
(3,data)
(4,NULL)
(5,free(data)
(6,break;)
(7,RET)
(8,data = NULL)
(9,)
(10,"Benign, fixed string")
(11,break;)
(12,)
(13,)
(14,)
(15,data)
(16,data)
(17,default:)
(18,myString)
(19,printLine("Benign, fixed string")
(20,default:)
(21,printWLine(data)
(22,"Benign, fixed string")
(23,case 7:)
(24,case 6:)
(25,switch(6)
(26,switch(7)
(27,data)
(28,data = wcsdup(myString)
(29,break;)
(30,break;)
(31,6)
(32,7)
(33,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^