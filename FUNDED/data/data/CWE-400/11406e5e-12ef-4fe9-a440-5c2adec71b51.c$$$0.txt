-----label-----
0
-----code-----
static void goodG2B1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
27,31
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
81,82
81,83
83,84
-----nextToken-----
2,4,9,11,12,16,18,20,25,26,31,35,37,40,42,46,47,53,54,55,56,62,63,64,65,69,73,75,79,80,82,84
-----computeFrom-----
14,15
14,16
29,30
29,31
41,42
41,43
49,50
49,51
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    struct _twoIntsStruct * data;    data = NULL;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    struct _twoIntsStruct * data;    data = NULL;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(3,39,0)
(43,30,0)
(2,23,0)
(14,13,0)
(3,8,0)
(1,27,0)
(18,3,0)
(28,12,0)
(21,39,0)
(33,15,0)
(36,23,0)
(40,28,0)
(6,13,0)
(33,40,0)
(28,40,0)
(10,24,0)
(31,8,0)
(9,37,0)
(39,30,0)
(25,30,0)
(11,15,0)
(8,3,0)
(34,40,0)
(17,25,0)
(37,43,0)
(13,6,0)
(29,16,0)
(15,11,0)
(13,39,0)
(27,32,0)
(42,36,0)
(43,37,0)
(24,38,0)
(20,13,0)
(4,38,0)
(16,30,0)
(37,6,0)
(7,3,0)
(39,15,0)
(19,23,0)
(26,38,0)
(24,16,0)
(15,33,0)
(0,23,0)
(5,36,0)
(6,37,0)
(15,39,0)
(8,25,0)
(38,24,0)
(12,28,0)
(37,9,0)
(40,33,0)
(38,39,0)
(14,20,1)
(15,33,1)
(28,34,1)
(17,8,1)
(27,1,1)
(39,15,1)
(8,3,1)
(43,37,1)
(13,14,1)
(21,41,1)
(33,40,1)
(29,24,1)
(20,25,1)
(38,39,1)
(4,39,1)
(38,26,1)
(31,3,1)
(36,5,1)
(24,10,1)
(35,22,1)
(10,38,1)
(22,43,1)
(18,7,1)
(25,17,1)
(3,39,1)
(28,12,1)
(22,27,1)
(37,6,1)
(16,29,1)
(8,31,1)
(7,16,1)
(37,9,1)
(3,18,1)
(40,28,1)
(41,36,1)
(24,38,1)
(13,39,1)
(1,41,1)
(26,4,1)
(5,42,1)
(6,13,1)
(15,11,1)
(34,21,1)
(3,41,2)
(37,9,2)
(18,41,2)
(21,41,2)
(25,41,2)
(6,13,2)
(14,41,2)
(33,40,2)
(17,41,2)
(38,41,2)
(26,41,2)
(15,41,2)
(40,28,2)
(29,41,2)
(43,41,2)
(1,41,2)
(39,41,2)
(24,41,2)
(8,41,2)
(38,39,2)
(8,3,2)
(33,41,2)
(24,38,2)
(7,41,2)
(37,6,2)
(28,12,2)
(20,41,2)
(4,41,2)
(13,41,2)
(31,41,2)
(13,39,2)
(28,41,2)
(15,33,2)
(27,41,2)
(3,39,2)
(34,41,2)
(40,41,2)
(16,41,2)
(39,15,2)
(37,41,2)
(15,11,2)
(43,37,2)
(10,41,2)
(6,41,2)
-----------------------------------
(0,data)
(1,"Benign, fixed string")
(2,if(1)
(3,data[0])
(4,data)
(5,NULL)
(6,&data[0])
(7,data)
(8,data[0].intTwo)
(9,twoIntsStruct *)
(10,intOne)
(11,struct _twoIntsStruct *)
(12,struct _twoIntsStruct)
(13,data[0])
(14,0)
(15,(struct _twoIntsStruct *)
(16,data[0].intOne = 0)
(17,0)
(18,0)
(19,if(0)
(20,data)
(21,data)
(22,1)
(23,)
(24,data[0].intOne)
(25,data[0].intTwo = 0)
(26,0)
(27,printLine("Benign, fixed string")
(28,sizeof(struct _twoIntsStruct)
(29,0)
(30,)
(31,intTwo)
(32,)
(33,ALLOCA(100*sizeof(struct _twoIntsStruct)
(34,100)
(35,RET)
(36,data = NULL)
(37,(twoIntsStruct *)
(38,data[0])
(39,data = (struct _twoIntsStruct *)
(40,100*sizeof(struct _twoIntsStruct)
(41,0)
(42,data)
(43,printStructLine((twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^