-----label-----
0
-----code-----
JSBool
branch_cb(JSContext* jscx, JSScript* script)
{
    Context* pycx = (Context*) JS_GetContextPrivate(jscx);
    time_t now = time(NULL);

    if(pycx == NULL)
    {
        JS_ReportError(jscx, "Failed to find Python context.");
        return JS_FALSE;
    }

    // Get out quick if we don't have any quotas.
    if(pycx->max_time == 0 && pycx->max_heap == 0)
    {
        return JS_TRUE;
    }

    // Only check occasionally for resource usage.
    pycx->branch_count++;
    if((pycx->branch_count > 0x3FFF) != 1)
    {
        return JS_TRUE;
    }

    pycx->branch_count = 0;

    if(pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap)
    {
        // First see if garbage collection gets under the threshold.
        JS_GC(jscx);
        if(jscx->runtime->gcBytes > pycx->max_heap)
        {
            PyErr_NoMemory();
            return JS_FALSE;
        }
    }

    if(
        pycx->max_time > 0
        && pycx->start_time > 0
        && pycx->max_time < now - pycx->start_time
    )
    {
        PyErr_SetNone(PyExc_SystemError);
        return JS_FALSE;
    }

    return JS_TRUE;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
67,68
67,69
68,69
68,70
69,70
69,71
70,71
70,72
71,72
75,76
75,77
76,77
76,78
77,78
81,82
82,83
83,84
85,86
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
94,95
94,96
95,96
95,97
96,97
101,102
102,103
103,104
105,106
106,107
106,108
107,108
107,109
108,109
112,113
112,114
113,114
113,115
114,115
114,116
115,116
115,117
116,117
120,121
120,122
121,122
121,123
122,123
122,124
123,124
127,128
127,129
128,129
131,132
131,133
132,133
133,134
133,135
134,135
136,137
138,139
138,140
139,140
139,141
140,141
140,142
141,142
141,143
142,143
146,147
146,148
147,148
150,151
150,152
151,152
152,153
153,154
155,156
156,157
158,159
158,160
159,160
159,161
160,161
160,162
161,162
161,163
162,163
162,164
163,164
167,168
167,169
168,169
168,170
169,170
173,174
173,175
174,175
174,176
175,176
178,179
178,180
179,180
181,182
181,183
182,183
185,186
185,187
186,187
187,188
187,189
188,189
190,191
191,192
193,194
194,195
196,197
197,198
-----nextToken-----
3,5,8,10,11,14,16,17,22,24,25,30,32,35,37,41,43,47,49,53,55,60,62,63,66,72,73,74,78,79,80,84,89,90,97,98,99,100,104,109,110,111,117,118,119,124,125,126,129,130,135,137,143,144,145,148,149,154,157,164,165,166,170,171,172,176,177,180,183,184,189,192,195,198
-----computeFrom-----
51,52
51,53
68,69
68,70
69,70
69,71
75,76
75,77
92,93
92,94
94,95
94,96
106,107
106,108
113,114
113,115
114,115
114,116
120,121
120,122
139,140
139,141
159,160
159,161
160,161
160,162
161,162
161,163
167,168
167,169
173,174
173,175
178,179
178,180
-----guardedBy-----
126,145
125,144
129,148
130,149
124,143
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
JSBoolbranch_cb(JSContext* jscx, JSScript* script){    Context* pycx = (Context*) JS_GetContextPrivate(jscx);    time_t now = time(NULL);    if(pycx == NULL)    {        JS_ReportError(jscx, "Failed to find Python context.");        return JS_FALSE;    }    // Get out quick if we don't have any quotas.    if(pycx->max_time == 0 && pycx->max_heap == 0)    {        return JS_TRUE;    }    // Only check occasionally for resource usage.    pycx->branch_count++;    if((pycx->branch_count > 0x3FFF) != 1)    {        return JS_TRUE;    }    pycx->branch_count = 0;    if(pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap)    {        // First see if garbage collection gets under the threshold.        JS_GC(jscx);        if(jscx->runtime->gcBytes > pycx->max_heap)        {            PyErr_NoMemory();            return JS_FALSE;        }    }    if(        pycx->max_time > 0        && pycx->start_time > 0        && pycx->max_time < now - pycx->start_time    )    {        PyErr_SetNone(PyExc_SystemError);        return JS_FALSE;    }    return JS_TRUE;}
JSBool
JSBool
branch_cb(JSContext* jscx, JSScript* script)
branch_cb
JSContext* jscx
JSContext
JSContext
* jscx
*
jscx
JSScript* script
JSScript
JSScript
* script
*
script
{    Context* pycx = (Context*) JS_GetContextPrivate(jscx);    time_t now = time(NULL);    if(pycx == NULL)    {        JS_ReportError(jscx, "Failed to find Python context.");        return JS_FALSE;    }    // Get out quick if we don't have any quotas.    if(pycx->max_time == 0 && pycx->max_heap == 0)    {        return JS_TRUE;    }    // Only check occasionally for resource usage.    pycx->branch_count++;    if((pycx->branch_count > 0x3FFF) != 1)    {        return JS_TRUE;    }    pycx->branch_count = 0;    if(pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap)    {        // First see if garbage collection gets under the threshold.        JS_GC(jscx);        if(jscx->runtime->gcBytes > pycx->max_heap)        {            PyErr_NoMemory();            return JS_FALSE;        }    }    if(        pycx->max_time > 0        && pycx->start_time > 0        && pycx->max_time < now - pycx->start_time    )    {        PyErr_SetNone(PyExc_SystemError);        return JS_FALSE;    }    return JS_TRUE;}
Context* pycx = (Context*) JS_GetContextPrivate(jscx);
Context* pycx = (Context*) JS_GetContextPrivate(jscx);
Context
Context
* pycx = (Context*) JS_GetContextPrivate(jscx)
*
pycx
= (Context*) JS_GetContextPrivate(jscx)
(Context*) JS_GetContextPrivate(jscx)
Context*
Context
Context
*
*
JS_GetContextPrivate(jscx)
JS_GetContextPrivate
JS_GetContextPrivate
jscx
jscx
time_t now = time(NULL);
time_t now = time(NULL);
time_t
time_t
now = time(NULL)
now
= time(NULL)
time(NULL)
time
time
NULL
NULL
if(pycx == NULL)    {        JS_ReportError(jscx, "Failed to find Python context.");        return JS_FALSE;    }
pycx == NULL
pycx
pycx
NULL
NULL
{        JS_ReportError(jscx, "Failed to find Python context.");        return JS_FALSE;    }
JS_ReportError(jscx, "Failed to find Python context.");
JS_ReportError(jscx, "Failed to find Python context.")
JS_ReportError
JS_ReportError
jscx
jscx
"Failed to find Python context."
return JS_FALSE;
JS_FALSE
JS_FALSE
if(pycx->max_time == 0 && pycx->max_heap == 0)    {        return JS_TRUE;    }
pycx->max_time == 0 && pycx->max_heap == 0
pycx->max_time == 0
pycx->max_time
pycx
pycx
max_time
0
pycx->max_heap == 0
pycx->max_heap
pycx
pycx
max_heap
0
{        return JS_TRUE;    }
return JS_TRUE;
JS_TRUE
JS_TRUE
pycx->branch_count++;
pycx->branch_count++
pycx->branch_count
pycx
pycx
branch_count
if((pycx->branch_count > 0x3FFF) != 1)    {        return JS_TRUE;    }
(pycx->branch_count > 0x3FFF) != 1
(pycx->branch_count > 0x3FFF)
pycx->branch_count > 0x3FFF
pycx->branch_count
pycx
pycx
branch_count
0x3FFF
1
{        return JS_TRUE;    }
return JS_TRUE;
JS_TRUE
JS_TRUE
pycx->branch_count = 0;
pycx->branch_count = 0
pycx->branch_count
pycx
pycx
branch_count
0
if(pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap)    {        // First see if garbage collection gets under the threshold.        JS_GC(jscx);        if(jscx->runtime->gcBytes > pycx->max_heap)        {            PyErr_NoMemory();            return JS_FALSE;        }    }
pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap
pycx->max_heap > 0
pycx->max_heap
pycx
pycx
max_heap
0
jscx->runtime->gcBytes > pycx->max_heap
jscx->runtime->gcBytes
jscx->runtime
jscx
jscx
runtime
gcBytes
pycx->max_heap
pycx
pycx
max_heap
{        // First see if garbage collection gets under the threshold.        JS_GC(jscx);        if(jscx->runtime->gcBytes > pycx->max_heap)        {            PyErr_NoMemory();            return JS_FALSE;        }    }
JS_GC(jscx);
JS_GC(jscx)
JS_GC
JS_GC
jscx
jscx
if(jscx->runtime->gcBytes > pycx->max_heap)        {            PyErr_NoMemory();            return JS_FALSE;        }
jscx->runtime->gcBytes > pycx->max_heap
jscx->runtime->gcBytes
jscx->runtime
jscx
jscx
runtime
gcBytes
pycx->max_heap
pycx
pycx
max_heap
{            PyErr_NoMemory();            return JS_FALSE;        }
PyErr_NoMemory();
PyErr_NoMemory()
PyErr_NoMemory
PyErr_NoMemory
return JS_FALSE;
JS_FALSE
JS_FALSE
if(        pycx->max_time > 0        && pycx->start_time > 0        && pycx->max_time < now - pycx->start_time    )    {        PyErr_SetNone(PyExc_SystemError);        return JS_FALSE;    }
pycx->max_time > 0        && pycx->start_time > 0        && pycx->max_time < now - pycx->start_time
pycx->max_time > 0        && pycx->start_time > 0
pycx->max_time > 0
pycx->max_time
pycx
pycx
max_time
0
pycx->start_time > 0
pycx->start_time
pycx
pycx
start_time
0
pycx->max_time < now - pycx->start_time
pycx->max_time
pycx
pycx
max_time
now - pycx->start_time
now
now
pycx->start_time
pycx
pycx
start_time
{        PyErr_SetNone(PyExc_SystemError);        return JS_FALSE;    }
PyErr_SetNone(PyExc_SystemError);
PyErr_SetNone(PyExc_SystemError);
PyErr_SetNone
PyErr_SetNone
(PyExc_SystemError)
PyExc_SystemError
PyExc_SystemError
return JS_FALSE;
JS_FALSE
JS_FALSE
return JS_TRUE;
JS_TRUE
JS_TRUE
-----joern-----
(116,3,0)
(55,113,0)
(38,113,0)
(120,19,0)
(103,119,0)
(76,27,0)
(102,52,0)
(0,96,0)
(51,63,0)
(60,12,0)
(54,18,0)
(95,58,0)
(36,82,0)
(60,22,0)
(101,111,0)
(61,82,0)
(119,121,0)
(5,45,0)
(63,27,0)
(23,52,0)
(39,58,0)
(27,113,0)
(50,113,0)
(64,69,0)
(98,15,0)
(114,115,0)
(52,26,0)
(106,0,0)
(106,108,0)
(16,63,0)
(0,106,0)
(29,10,0)
(46,82,0)
(11,110,0)
(104,70,0)
(119,103,0)
(115,71,0)
(24,50,0)
(90,57,0)
(117,3,0)
(63,16,0)
(114,45,0)
(85,18,0)
(112,74,0)
(78,70,0)
(98,12,0)
(59,113,0)
(25,53,0)
(23,112,0)
(75,12,0)
(111,12,0)
(66,74,0)
(53,82,0)
(109,120,0)
(16,68,0)
(80,12,0)
(111,89,0)
(34,68,0)
(84,12,0)
(62,46,0)
(105,12,0)
(67,98,0)
(3,113,0)
(42,38,0)
(81,121,0)
(8,59,0)
(16,50,0)
(89,84,0)
(41,119,0)
(23,111,0)
(59,8,0)
(37,4,0)
(88,69,0)
(110,113,0)
(71,113,0)
(47,12,0)
(57,79,0)
(70,104,0)
(53,96,0)
(96,53,0)
(113,12,0)
(44,58,0)
(10,0,0)
(32,115,0)
(68,88,0)
(113,59,0)
(20,110,0)
(0,10,0)
(28,22,0)
(40,46,0)
(96,0,0)
(18,34,0)
(14,103,0)
(48,104,0)
(45,114,0)
(50,16,0)
(35,66,0)
(97,38,0)
(6,34,0)
(65,73,0)
(68,34,0)
(99,112,0)
(30,53,0)
(23,57,0)
(88,68,0)
(110,69,0)
(58,95,0)
(17,36,0)
(104,82,0)
(68,16,0)
(95,70,0)
(2,27,0)
(91,4,0)
(121,113,0)
(107,37,0)
(108,106,0)
(37,89,0)
(100,12,0)
(33,22,0)
(43,121,0)
(22,113,0)
(49,12,0)
(36,87,0)
(121,119,0)
(112,89,0)
(70,95,0)
(34,18,0)
(1,89,0)
(18,113,0)
(86,12,0)
(72,50,0)
(7,73,0)
(108,3,0)
(94,71,0)
(71,115,0)
(15,98,0)
(23,120,0)
(23,37,0)
(22,60,0)
(83,71,0)
(118,96,0)
(46,79,0)
(31,61,0)
(58,113,0)
(115,114,0)
(27,63,0)
(59,61,0)
(38,45,0)
(61,59,0)
(69,88,0)
(3,108,0)
(69,110,0)
(77,104,0)
(73,113,0)
(93,87,0)
(45,38,0)
(89,113,0)
(9,10,0)
(10,113,0)
(63,98,0)
(13,89,0)
(56,84,0)
(92,15,0)
(21,108,0)
(21,3,1)
(92,67,1)
(108,3,1)
(111,89,1)
(68,16,1)
(66,35,1)
(22,28,1)
(23,37,1)
(94,73,1)
(97,115,1)
(83,94,1)
(108,21,1)
(103,119,1)
(1,103,1)
(61,82,1)
(59,8,1)
(120,109,1)
(23,57,1)
(121,81,1)
(65,7,1)
(88,69,1)
(38,113,1)
(15,92,1)
(9,96,1)
(36,82,1)
(31,55,1)
(116,84,1)
(3,113,1)
(6,18,1)
(64,110,1)
(101,88,1)
(38,42,1)
(51,50,1)
(115,71,1)
(113,59,1)
(11,20,1)
(62,40,1)
(58,39,1)
(50,24,1)
(13,1,1)
(69,110,1)
(45,5,1)
(81,43,1)
(114,115,1)
(24,72,1)
(110,113,1)
(35,88,1)
(88,68,1)
(110,11,1)
(85,69,1)
(39,44,1)
(27,113,1)
(30,25,1)
(119,121,1)
(61,31,1)
(45,38,1)
(71,83,1)
(17,106,1)
(16,50,1)
(71,113,1)
(10,29,1)
(91,95,1)
(70,104,1)
(76,2,1)
(89,13,1)
(104,82,1)
(27,76,1)
(103,14,1)
(25,108,1)
(106,0,1)
(7,98,1)
(73,65,1)
(18,54,1)
(111,101,1)
(28,33,1)
(23,52,1)
(41,121,1)
(106,108,1)
(0,10,1)
(40,73,1)
(37,107,1)
(52,102,1)
(58,113,1)
(95,70,1)
(10,113,1)
(95,58,1)
(3,117,1)
(34,6,1)
(70,78,1)
(57,90,1)
(16,63,1)
(89,113,1)
(23,120,1)
(119,41,1)
(37,89,1)
(72,34,1)
(14,119,1)
(18,113,1)
(69,64,1)
(0,96,1)
(109,114,1)
(63,98,1)
(23,112,1)
(63,27,1)
(54,85,1)
(33,114,1)
(99,66,1)
(29,9,1)
(53,30,1)
(59,61,1)
(32,71,1)
(102,103,1)
(44,70,1)
(20,95,1)
(121,113,1)
(77,48,1)
(98,15,1)
(78,104,1)
(46,82,1)
(112,99,1)
(23,111,1)
(46,62,1)
(53,82,1)
(112,89,1)
(96,53,1)
(115,32,1)
(48,36,1)
(36,17,1)
(5,38,1)
(42,97,1)
(22,113,1)
(2,51,1)
(67,113,1)
(104,77,1)
(20,106,1)
(107,91,1)
(68,34,1)
(90,46,1)
(96,118,1)
(118,53,1)
(34,18,1)
(56,89,1)
(117,116,1)
(60,22,1)
(50,113,1)
(73,113,1)
(114,45,1)
(84,56,1)
(43,60,1)
(95,58,2)
(36,106,2)
(114,73,2)
(40,73,2)
(104,106,2)
(107,95,2)
(64,95,2)
(91,95,2)
(50,34,2)
(23,111,2)
(120,114,2)
(71,73,2)
(89,103,2)
(78,106,2)
(58,113,2)
(23,52,2)
(63,98,2)
(43,114,2)
(63,34,2)
(28,114,2)
(76,34,2)
(23,112,2)
(68,69,2)
(11,95,2)
(41,114,2)
(112,89,2)
(62,73,2)
(53,82,2)
(102,103,2)
(111,89,2)
(108,103,2)
(116,103,2)
(6,69,2)
(34,69,2)
(46,82,2)
(16,34,2)
(106,108,2)
(121,113,2)
(84,103,2)
(104,82,2)
(66,88,2)
(99,88,2)
(23,120,2)
(69,95,2)
(103,114,2)
(27,34,2)
(21,103,2)
(16,50,2)
(53,108,2)
(51,34,2)
(77,106,2)
(33,114,2)
(70,104,2)
(118,108,2)
(38,113,2)
(94,73,2)
(0,10,2)
(59,8,2)
(36,82,2)
(17,106,2)
(96,108,2)
(35,88,2)
(103,119,2)
(70,106,2)
(88,95,2)
(98,15,2)
(60,114,2)
(101,88,2)
(48,106,2)
(32,73,2)
(71,113,2)
(13,103,2)
(108,3,2)
(20,95,2)
(10,113,2)
(22,114,2)
(3,113,2)
(2,34,2)
(106,0,2)
(114,115,2)
(96,53,2)
(106,103,2)
(10,108,2)
(89,113,2)
(1,103,2)
(29,108,2)
(110,113,2)
(111,88,2)
(5,115,2)
(14,114,2)
(88,69,2)
(68,34,2)
(30,108,2)
(119,121,2)
(9,108,2)
(88,106,2)
(50,113,2)
(23,57,2)
(97,115,2)
(95,70,2)
(64,106,2)
(110,106,2)
(69,110,2)
(117,103,2)
(72,34,2)
(37,95,2)
(24,34,2)
(16,63,2)
(54,69,2)
(52,103,2)
(42,115,2)
(63,27,2)
(38,115,2)
(115,73,2)
(73,113,2)
(69,106,2)
(44,106,2)
(88,68,2)
(95,106,2)
(0,96,2)
(46,73,2)
(37,89,2)
(20,106,2)
(25,108,2)
(112,88,2)
(60,22,2)
(57,73,2)
(45,38,2)
(121,114,2)
(85,69,2)
(113,59,2)
(34,18,2)
(22,113,2)
(58,106,2)
(115,71,2)
(3,103,2)
(90,73,2)
(11,106,2)
(109,114,2)
(83,73,2)
(45,115,2)
(114,45,2)
(18,113,2)
(119,114,2)
(59,61,2)
(110,95,2)
(0,108,2)
(61,82,2)
(18,69,2)
(23,37,2)
(81,114,2)
(27,113,2)
(39,106,2)
(56,103,2)
(68,16,2)
-----------------------------------
(0,jscx->runtime->gcBytes > pycx->max_heap)
(1,pycx)
(2,pycx)
(3,pycx->max_heap)
(4,)
(5,0)
(6,0)
(7,pycx)
(8,Context*)
(9,pycx)
(10,pycx->max_heap)
(11,max_time)
(12,)
(13,branch_count)
(14,1)
(15,time(NULL)
(16,pycx->max_time < now - pycx->start_time)
(17,jscx)
(18,pycx->start_time)
(19,)
(20,pycx)
(21,0)
(22,pycx->branch_count)
(23,RET)
(24,max_time)
(25,jscx)
(26,)
(27,pycx->start_time)
(28,branch_count)
(29,max_heap)
(30,runtime)
(31,jscx)
(32,0)
(33,pycx)
(34,pycx->start_time > 0)
(35,PyExc_SystemError)
(36,JS_GC(jscx)
(37,return JS_FALSE;)
(38,pycx->max_heap)
(39,max_heap)
(40,jscx)
(41,0x3FFF)
(42,max_heap)
(43,pycx)
(44,pycx)
(45,pycx->max_heap == 0)
(46,JS_ReportError(jscx, "Failed to find Python context.")
(47,now)
(48,jscx)
(49,if((pycx->branch_count > 0x3FFF)
(50,pycx->max_time)
(51,now)
(52,return JS_TRUE;)
(53,jscx->runtime)
(54,start_time)
(55,pycx)
(56,0)
(57,return JS_FALSE;)
(58,pycx->max_heap)
(59,(Context*)
(60,pycx->branch_count++)
(61,JS_GetContextPrivate(jscx)
(62,"Failed to find Python context.")
(63,now - pycx->start_time)
(64,0)
(65,NULL)
(66,PyErr_SetNone(PyExc_SystemError)
(67,now)
(68,pycx->start_time > 0\n\\n        && pycx->max_time < now - pycx->start_time)
(69,pycx->max_time > 0)
(70,jscx->runtime->gcBytes)
(71,pycx->max_time)
(72,pycx)
(73,pycx == NULL)
(74,)
(75,pycx)
(76,start_time)
(77,runtime)
(78,gcBytes)
(79,)
(80,if(pycx->max_time == 0 && pycx->max_heap == 0)
(81,branch_count)
(82,JSContext* jscx)
(83,max_time)
(84,pycx->branch_count = 0)
(85,pycx)
(86,if(pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap)
(87,)
(88,pycx->max_time > 0\n\\n        && pycx->start_time > 0\n\\n        && pycx->max_time < now - pycx->start_time)
(89,pycx->branch_count)
(90,JS_FALSE)
(91,PyErr_NoMemory()
(92,NULL)
(93,if(jscx->runtime->gcBytes > pycx->max_heap)
(94,pycx)
(95,jscx->runtime->gcBytes > pycx->max_heap)
(96,jscx->runtime->gcBytes)
(97,pycx)
(98,now = time(NULL)
(99,JS_FALSE)
(100,if(\n\\n        pycx->max_time > 0\n\\n        && pycx->start_time > 0\n\\n        && pycx->max_time < now - pycx->start_time\n\\n    )
(101,JS_TRUE)
(102,JS_TRUE)
(103,(pycx->branch_count > 0x3FFF)
(104,jscx->runtime)
(105,if(pycx == NULL)
(106,pycx->max_heap > 0 && jscx->runtime->gcBytes > pycx->max_heap)
(107,JS_FALSE)
(108,pycx->max_heap > 0)
(109,JS_TRUE)
(110,pycx->max_time)
(111,return JS_TRUE;)
(112,return JS_FALSE;)
(113,* pycx = (Context*)
(114,pycx->max_time == 0 && pycx->max_heap == 0)
(115,pycx->max_time == 0)
(116,pycx)
(117,max_heap)
(118,gcBytes)
(119,pycx->branch_count > 0x3FFF)
(120,return JS_TRUE;)
(121,pycx->branch_count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^