-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
71,72
72,73
73,74
73,75
74,75
77,78
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,75,76,81,83
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(17,8,0)
(7,8,0)
(24,8,0)
(16,33,0)
(30,8,0)
(20,31,0)
(1,27,0)
(6,28,0)
(11,35,0)
(36,29,0)
(32,11,0)
(25,3,0)
(4,31,0)
(6,36,0)
(28,6,0)
(13,21,0)
(11,30,0)
(12,19,0)
(27,21,0)
(15,10,0)
(27,10,0)
(14,30,0)
(36,6,0)
(0,12,0)
(23,28,0)
(34,26,0)
(10,36,0)
(10,21,0)
(16,26,0)
(36,10,0)
(31,10,0)
(9,6,0)
(28,3,0)
(29,36,0)
(11,10,0)
(26,16,0)
(2,30,0)
(6,30,0)
(3,28,0)
(30,2,1)
(36,6,1)
(15,5,1)
(1,16,1)
(4,10,1)
(5,30,1)
(22,11,1)
(28,3,1)
(6,30,1)
(1,31,1)
(3,25,1)
(6,28,1)
(36,29,1)
(9,15,1)
(12,0,1)
(31,10,1)
(0,18,1)
(2,14,1)
(23,9,1)
(11,30,1)
(26,34,1)
(10,36,1)
(32,18,1)
(22,12,1)
(16,26,1)
(20,4,1)
(11,32,1)
(27,10,1)
(25,23,1)
(31,20,1)
(34,31,1)
(27,1,1)
(18,5,1)
(18,27,1)
(11,10,1)
(10,5,2)
(3,5,2)
(36,29,2)
(9,5,2)
(36,5,2)
(16,26,2)
(15,5,2)
(12,18,2)
(23,5,2)
(27,5,2)
(27,10,2)
(11,10,2)
(1,5,2)
(6,28,2)
(25,5,2)
(0,18,2)
(11,30,2)
(28,3,2)
(34,31,2)
(16,31,2)
(28,5,2)
(31,5,2)
(20,5,2)
(32,18,2)
(31,10,2)
(6,30,2)
(6,5,2)
(10,36,2)
(36,6,2)
(26,31,2)
(4,5,2)
(11,18,2)
-----------------------------------
(0,"Benign, fixed string")
(1,data)
(2,NULL)
(3,sizeof(wchar_t)
(4,data)
(5,STATIC_CONST_TRUE)
(6,realloc(data, 100*sizeof(wchar_t)
(7,if(STATIC_CONST_FALSE)
(8,)
(9,data)
(10,data = (wchar_t *)
(11,free(data)
(12,printLine("Benign, fixed string")
(13,if (data == NULL)
(14,data)
(15,data)
(16,exit(-1)
(17,if(STATIC_CONST_TRUE)
(18,STATIC_CONST_FALSE)
(19,)
(20,NULL)
(21,)
(22,RET)
(23,100)
(24,data)
(25,wchar_t)
(26,-1)
(27,printWLine(data)
(28,100*sizeof(wchar_t)
(29,wchar_t *)
(30,data = NULL)
(31,data == NULL)
(32,data)
(33,)
(34,1)
(35,)
(36,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^