-----label-----
0
-----code-----
int main(int argc, char **argv)
{
	const char *short_opts = "h?t:";
	struct option long_opts[] = {
		{ "help",       no_argument, NULL, 'h' },
		{ "test", required_argument, NULL, 't' },
		{ 0, 0, 0, 0 }
	};

	int opt, idx = 0;
	char *conf = strdup("/etc/icinga/iris.conf");

	while ( (opt = getopt_long(argc, argv, short_opts, long_opts, &idx)) != -1 ) {
		switch (opt) {
			case 't':
				free(conf);
				conf = strdup(optarg);
				break;

			case 'h':
			case '?':
			default:
				usage(argv[0]);
				return 1;
				break;
		}
	}

	if (optind < argc) {
		fprintf(stderr, "Extra (ignored) arguments found.\n");
		usage(argv[0]);
		return 1;
	}

	struct server s;
	if (server_init(&s) != 0) {
		perror("Failed to initialize Iris defaults");
		return 2;
	}

	struct stat st;
	if (stat(conf, &st) != 0) {
		perror(conf);
		return 2;
	}

	if (parse_config_file(conf, &s) != 0) {
		fprintf(stderr, "%s: errors were encountered.\n", conf);
		return 4;
	}

	printf("port            = %s\n", s.port);
	printf("timeout         = %i\n", s.timeout);
	printf("max_clients     = %i\n", s.max_clients);
	printf("max_lifetime    = %i\n", (int)s.max_lifetime);
	printf("syslog_ident    = %s\n", s.syslog_ident);
	printf("syslog_facility = %s\n", s.syslog_facility);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
16,17
17,18
17,19
19,20
19,21
19,22
22,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
31,32
32,33
32,34
32,35
33,34
33,35
33,36
33,37
35,36
37,38
40,41
40,42
40,43
40,44
42,43
44,45
47,48
47,49
47,50
47,51
52,53
53,54
53,55
53,56
55,56
57,58
57,59
59,60
61,62
62,63
62,64
64,65
64,66
64,67
67,68
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
75,76
75,77
76,77
78,79
78,80
78,81
78,82
78,83
78,84
79,80
81,82
83,84
85,86
87,88
89,90
90,91
92,93
94,95
95,96
95,97
96,97
98,99
98,100
98,101
98,102
98,103
98,104
98,105
98,106
98,107
98,108
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
111,113
112,113
114,115
117,118
119,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
130,131
133,134
133,135
134,135
134,136
135,136
137,138
139,140
139,141
139,142
140,141
141,142
141,143
141,144
142,143
144,145
147,148
148,149
148,150
149,150
151,152
151,153
152,153
155,156
157,158
158,159
158,160
159,160
161,162
163,164
163,165
164,165
164,166
165,166
165,167
166,167
168,169
169,170
172,173
172,174
173,174
174,175
174,176
175,176
178,179
180,181
181,182
181,183
182,183
184,185
186,187
186,188
187,188
187,189
188,189
188,190
188,191
189,190
191,192
193,194
194,195
197,198
197,199
198,199
199,200
199,201
200,201
202,203
204,205
206,207
206,208
207,208
207,209
208,209
208,210
208,211
209,210
211,212
213,214
214,215
217,218
217,219
218,219
219,220
219,221
219,222
219,223
220,221
222,223
225,226
227,228
229,230
230,231
230,232
230,233
231,232
234,235
234,236
235,236
238,239
239,240
239,241
239,242
240,241
243,244
243,245
244,245
247,248
248,249
248,250
248,251
249,250
252,253
252,254
253,254
256,257
257,258
257,259
257,260
258,259
261,262
261,263
262,263
262,264
265,266
265,267
266,267
269,270
270,271
270,272
270,273
271,272
274,275
274,276
275,276
278,279
279,280
279,281
279,282
280,281
283,284
283,285
284,285
287,288
-----nextToken-----
2,4,6,8,10,12,13,14,18,20,21,23,27,29,30,34,36,38,39,41,43,45,46,48,49,50,51,54,56,58,60,63,65,66,70,71,77,80,82,84,86,88,91,93,97,100,104,106,110,113,115,116,118,120,121,125,128,129,131,132,136,138,143,145,146,150,153,154,156,160,162,167,170,171,176,177,179,183,185,190,192,195,196,201,203,205,210,212,215,216,221,223,224,226,228,232,233,236,237,241,242,245,246,250,251,254,255,259,260,263,264,267,268,272,273,276,277,281,282,285,286,288
-----computeFrom-----
73,74
73,75
75,76
75,77
108,109
108,110
134,135
134,136
164,165
164,166
187,188
187,189
207,208
207,209
-----guardedBy-----
192,203
212,226
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int main(int argc, char **argv){	const char *short_opts = "h?t:";	struct option long_opts[] = {		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	};	int opt, idx = 0;	char *conf = strdup("/etc/icinga/iris.conf");	while ( (opt = getopt_long(argc, argv, short_opts, long_opts, &idx)) != -1 ) {		switch (opt) {			case 't':				free(conf);				conf = strdup(optarg);				break;			case 'h':			case '?':			default:				usage(argv[0]);				return 1;				break;		}	}	if (optind < argc) {		fprintf(stderr, "Extra (ignored) arguments found.\n");		usage(argv[0]);		return 1;	}	struct server s;	if (server_init(&s) != 0) {		perror("Failed to initialize Iris defaults");		return 2;	}	struct stat st;	if (stat(conf, &st) != 0) {		perror(conf);		return 2;	}	if (parse_config_file(conf, &s) != 0) {		fprintf(stderr, "%s: errors were encountered.\n", conf);		return 4;	}	printf("port            = %s\n", s.port);	printf("timeout         = %i\n", s.timeout);	printf("max_clients     = %i\n", s.max_clients);	printf("max_lifetime    = %i\n", (int)s.max_lifetime);	printf("syslog_ident    = %s\n", s.syslog_ident);	printf("syslog_facility = %s\n", s.syslog_facility);	return 0;}
int
main(int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{	const char *short_opts = "h?t:";	struct option long_opts[] = {		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	};	int opt, idx = 0;	char *conf = strdup("/etc/icinga/iris.conf");	while ( (opt = getopt_long(argc, argv, short_opts, long_opts, &idx)) != -1 ) {		switch (opt) {			case 't':				free(conf);				conf = strdup(optarg);				break;			case 'h':			case '?':			default:				usage(argv[0]);				return 1;				break;		}	}	if (optind < argc) {		fprintf(stderr, "Extra (ignored) arguments found.\n");		usage(argv[0]);		return 1;	}	struct server s;	if (server_init(&s) != 0) {		perror("Failed to initialize Iris defaults");		return 2;	}	struct stat st;	if (stat(conf, &st) != 0) {		perror(conf);		return 2;	}	if (parse_config_file(conf, &s) != 0) {		fprintf(stderr, "%s: errors were encountered.\n", conf);		return 4;	}	printf("port            = %s\n", s.port);	printf("timeout         = %i\n", s.timeout);	printf("max_clients     = %i\n", s.max_clients);	printf("max_lifetime    = %i\n", (int)s.max_lifetime);	printf("syslog_ident    = %s\n", s.syslog_ident);	printf("syslog_facility = %s\n", s.syslog_facility);	return 0;}
const char *short_opts = "h?t:";
const char *short_opts = "h?t:";
const char
*short_opts = "h?t:"
*
short_opts
= "h?t:"
"h?t:"
struct option long_opts[] = {		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	};
struct option long_opts[] = {		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	};
struct option
option
long_opts[] = {		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	}
long_opts
[]
= {		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	}
{		{ "help",       no_argument, NULL, 'h' },		{ "test", required_argument, NULL, 't' },		{ 0, 0, 0, 0 }	}
{ "help",       no_argument, NULL, 'h' }
"help"
no_argument
no_argument
NULL
NULL
'h'
{ "test", required_argument, NULL, 't' }
"test"
required_argument
required_argument
NULL
NULL
't'
{ 0, 0, 0, 0 }
0
0
0
0
int opt, idx = 0;
int opt, idx = 0;
int
opt
opt
idx = 0
idx
= 0
0
char *conf = strdup("/etc/icinga/iris.conf");
char *conf = strdup("/etc/icinga/iris.conf");
char
*conf = strdup("/etc/icinga/iris.conf")
*
conf
= strdup("/etc/icinga/iris.conf")
strdup("/etc/icinga/iris.conf")
strdup
strdup
"/etc/icinga/iris.conf"
while ( (opt = getopt_long(argc, argv, short_opts, long_opts, &idx)) != -1 ) {		switch (opt) {			case 't':				free(conf);				conf = strdup(optarg);				break;			case 'h':			case '?':			default:				usage(argv[0]);				return 1;				break;		}	}
(opt = getopt_long(argc, argv, short_opts, long_opts, &idx)) != -1
(opt = getopt_long(argc, argv, short_opts, long_opts, &idx))
opt = getopt_long(argc, argv, short_opts, long_opts, &idx)
opt
opt
getopt_long(argc, argv, short_opts, long_opts, &idx)
getopt_long
getopt_long
argc
argc
argv
argv
short_opts
short_opts
long_opts
long_opts
&idx
idx
idx
-1
1
{		switch (opt) {			case 't':				free(conf);				conf = strdup(optarg);				break;			case 'h':			case '?':			default:				usage(argv[0]);				return 1;				break;		}	}
switch (opt) {			case 't':				free(conf);				conf = strdup(optarg);				break;			case 'h':			case '?':			default:				usage(argv[0]);				return 1;				break;		}
opt
opt
{			case 't':				free(conf);				conf = strdup(optarg);				break;			case 'h':			case '?':			default:				usage(argv[0]);				return 1;				break;		}
case 't':
't'
free(conf);
free(conf)
free
free
conf
conf
conf = strdup(optarg);
conf = strdup(optarg)
conf
conf
strdup(optarg)
strdup
strdup
optarg
optarg
break;
case 'h':
'h'
case '?':
'?'
default:
usage(argv[0]);
usage(argv[0])
usage
usage
argv[0]
argv
argv
0
return 1;
1
break;
if (optind < argc) {		fprintf(stderr, "Extra (ignored) arguments found.\n");		usage(argv[0]);		return 1;	}
optind < argc
optind
optind
argc
argc
{		fprintf(stderr, "Extra (ignored) arguments found.\n");		usage(argv[0]);		return 1;	}
fprintf(stderr, "Extra (ignored) arguments found.\n");
fprintf(stderr, "Extra (ignored) arguments found.\n")
fprintf
fprintf
stderr
stderr
"Extra (ignored) arguments found.\n"
usage(argv[0]);
usage(argv[0])
usage
usage
argv[0]
argv
argv
0
return 1;
1
struct server s;
struct server s;
struct server
server
s
s
if (server_init(&s) != 0) {		perror("Failed to initialize Iris defaults");		return 2;	}
server_init(&s) != 0
server_init(&s)
server_init
server_init
&s
s
s
0
{		perror("Failed to initialize Iris defaults");		return 2;	}
perror("Failed to initialize Iris defaults");
perror("Failed to initialize Iris defaults")
perror
perror
"Failed to initialize Iris defaults"
return 2;
2
struct stat st;
struct stat st;
struct stat
stat
st
st
if (stat(conf, &st) != 0) {		perror(conf);		return 2;	}
stat(conf, &st) != 0
stat(conf, &st)
stat
stat
conf
conf
&st
st
st
0
{		perror(conf);		return 2;	}
perror(conf);
perror(conf)
perror
perror
conf
conf
return 2;
2
if (parse_config_file(conf, &s) != 0) {		fprintf(stderr, "%s: errors were encountered.\n", conf);		return 4;	}
parse_config_file(conf, &s) != 0
parse_config_file(conf, &s)
parse_config_file
parse_config_file
conf
conf
&s
s
s
0
{		fprintf(stderr, "%s: errors were encountered.\n", conf);		return 4;	}
fprintf(stderr, "%s: errors were encountered.\n", conf);
fprintf(stderr, "%s: errors were encountered.\n", conf)
fprintf
fprintf
stderr
stderr
"%s: errors were encountered.\n"
conf
conf
return 4;
4
printf("port            = %s\n", s.port);
printf("port            = %s\n", s.port)
printf
printf
"port            = %s\n"
s.port
s
s
port
printf("timeout         = %i\n", s.timeout);
printf("timeout         = %i\n", s.timeout)
printf
printf
"timeout         = %i\n"
s.timeout
s
s
timeout
printf("max_clients     = %i\n", s.max_clients);
printf("max_clients     = %i\n", s.max_clients)
printf
printf
"max_clients     = %i\n"
s.max_clients
s
s
max_clients
printf("max_lifetime    = %i\n", (int)s.max_lifetime);
printf("max_lifetime    = %i\n", (int)s.max_lifetime)
printf
printf
"max_lifetime    = %i\n"
(int)s.max_lifetime
int
int

s.max_lifetime
s
s
max_lifetime
printf("syslog_ident    = %s\n", s.syslog_ident);
printf("syslog_ident    = %s\n", s.syslog_ident)
printf
printf
"syslog_ident    = %s\n"
s.syslog_ident
s
s
syslog_ident
printf("syslog_facility = %s\n", s.syslog_facility);
printf("syslog_facility = %s\n", s.syslog_facility)
printf
printf
"syslog_facility = %s\n"
s.syslog_facility
s
s
syslog_facility
return 0;
0
-----joern-----
(120,141,0)
(17,136,0)
(35,76,0)
(118,48,0)
(108,13,0)
(141,124,0)
(79,5,0)
(37,69,0)
(140,108,0)
(142,50,0)
(102,115,0)
(113,76,0)
(137,57,0)
(45,32,0)
(87,99,0)
(50,26,0)
(16,63,0)
(77,80,0)
(109,60,0)
(119,123,0)
(78,87,0)
(28,13,0)
(89,128,0)
(61,127,0)
(52,57,0)
(53,26,0)
(9,57,0)
(95,76,0)
(107,52,0)
(9,112,0)
(11,141,0)
(138,91,0)
(94,121,0)
(131,57,0)
(132,8,0)
(42,133,0)
(64,89,0)
(39,42,0)
(110,31,0)
(33,86,0)
(51,57,0)
(128,108,0)
(11,137,0)
(19,137,0)
(38,133,0)
(140,26,0)
(12,53,0)
(118,58,0)
(3,130,0)
(125,71,0)
(81,100,0)
(1,94,0)
(42,39,0)
(49,94,0)
(92,43,0)
(11,115,0)
(104,57,0)
(119,57,0)
(111,55,0)
(121,94,0)
(98,127,0)
(56,108,0)
(15,123,0)
(63,22,0)
(88,60,0)
(39,57,0)
(128,8,0)
(129,13,0)
(90,136,0)
(18,57,0)
(108,55,0)
(117,13,0)
(48,13,0)
(23,43,0)
(86,52,0)
(6,22,0)
(87,78,0)
(73,99,0)
(29,52,0)
(82,57,0)
(30,17,0)
(80,91,0)
(91,80,0)
(76,72,0)
(112,9,0)
(128,26,0)
(46,13,0)
(97,71,0)
(4,118,0)
(59,1,0)
(128,89,0)
(94,1,0)
(114,96,0)
(67,5,0)
(11,83,0)
(103,127,0)
(78,63,0)
(115,13,0)
(65,42,0)
(94,108,0)
(27,83,0)
(44,57,0)
(94,26,0)
(76,108,0)
(127,98,0)
(26,57,0)
(84,39,0)
(101,9,0)
(60,32,0)
(63,5,0)
(0,97,0)
(68,6,0)
(98,57,0)
(7,63,0)
(41,119,0)
(34,57,0)
(45,43,0)
(123,119,0)
(54,13,0)
(106,57,0)
(74,128,0)
(71,97,0)
(80,57,0)
(42,65,0)
(63,100,0)
(63,58,0)
(63,78,0)
(83,32,0)
(48,118,0)
(55,108,0)
(133,42,0)
(24,57,0)
(31,69,0)
(53,13,0)
(66,121,0)
(76,26,0)
(40,26,0)
(99,87,0)
(31,57,0)
(140,124,0)
(43,45,0)
(116,112,0)
(69,31,0)
(85,133,0)
(26,50,0)
(75,140,0)
(43,58,0)
(70,0,0)
(14,57,0)
(135,13,0)
(10,6,0)
(5,57,0)
(11,17,0)
(93,57,0)
(20,63,0)
(86,63,0)
(96,72,0)
(122,57,0)
(62,69,0)
(100,57,0)
(97,0,0)
(63,86,0)
(134,112,0)
(11,96,0)
(139,98,0)
(105,90,0)
(8,128,0)
(47,123,0)
(2,63,0)
(126,91,0)
(53,108,0)
(21,118,0)
(25,78,0)
(26,50,1)
(5,67,1)
(81,5,1)
(37,62,1)
(12,36,1)
(77,31,1)
(29,100,1)
(86,33,1)
(113,35,1)
(20,7,1)
(38,85,1)
(123,15,1)
(133,38,1)
(1,94,1)
(135,108,1)
(62,110,1)
(75,1,1)
(141,120,1)
(90,105,1)
(87,78,1)
(102,48,1)
(0,70,1)
(128,26,1)
(63,58,1)
(56,53,1)
(119,123,1)
(61,139,1)
(25,26,1)
(96,114,1)
(25,135,1)
(92,23,1)
(95,8,1)
(49,71,1)
(53,26,1)
(11,141,1)
(27,45,1)
(110,98,1)
(36,87,1)
(30,90,1)
(8,128,1)
(138,77,1)
(11,115,1)
(10,87,1)
(71,97,1)
(140,108,1)
(76,113,1)
(108,55,1)
(16,20,1)
(17,30,1)
(40,52,1)
(85,84,1)
(48,118,1)
(112,116,1)
(42,65,1)
(69,37,1)
(100,81,1)
(55,111,1)
(116,134,1)
(132,128,1)
(42,133,1)
(84,80,1)
(140,26,1)
(45,43,1)
(53,108,1)
(126,138,1)
(59,94,1)
(128,89,1)
(83,27,1)
(89,64,1)
(6,22,1)
(128,108,1)
(118,4,1)
(67,79,1)
(4,21,1)
(52,107,1)
(43,92,1)
(121,66,1)
(76,26,1)
(142,40,1)
(21,36,1)
(101,39,1)
(50,142,1)
(63,22,1)
(1,59,1)
(139,8,1)
(94,108,1)
(53,12,1)
(6,68,1)
(64,74,1)
(7,25,1)
(118,58,1)
(41,9,1)
(97,0,1)
(98,127,1)
(35,95,1)
(120,140,1)
(25,54,1)
(105,71,1)
(39,42,1)
(11,83,1)
(74,1,1)
(2,16,1)
(127,103,1)
(115,102,1)
(80,91,1)
(15,47,1)
(76,108,1)
(33,2,1)
(19,119,1)
(91,126,1)
(68,10,1)
(70,6,1)
(78,63,1)
(71,125,1)
(88,109,1)
(31,69,1)
(94,26,1)
(109,6,1)
(63,5,1)
(137,19,1)
(47,41,1)
(140,75,1)
(43,58,1)
(103,61,1)
(63,100,1)
(60,88,1)
(99,73,1)
(73,78,1)
(134,101,1)
(63,86,1)
(23,60,1)
(114,76,1)
(11,96,1)
(11,137,1)
(111,56,1)
(94,121,1)
(11,17,1)
(8,132,1)
(9,112,1)
(66,49,1)
(87,99,1)
(107,29,1)
(125,97,1)
(86,52,1)
(94,121,2)
(11,83,2)
(11,17,2)
(86,36,2)
(8,128,2)
(87,36,2)
(76,8,2)
(78,63,2)
(7,36,2)
(70,6,2)
(47,8,2)
(94,108,2)
(89,1,2)
(71,6,2)
(17,71,2)
(75,1,2)
(109,6,2)
(1,71,2)
(25,36,2)
(84,8,2)
(6,22,2)
(87,99,2)
(118,58,2)
(27,6,2)
(36,87,2)
(113,8,2)
(66,71,2)
(102,36,2)
(45,6,2)
(103,8,2)
(99,36,2)
(63,58,2)
(9,112,2)
(80,91,2)
(53,36,2)
(96,8,2)
(110,8,2)
(0,6,2)
(71,97,2)
(85,8,2)
(6,87,2)
(92,6,2)
(19,8,2)
(64,1,2)
(138,8,2)
(101,8,2)
(2,36,2)
(10,87,2)
(37,8,2)
(63,22,2)
(123,8,2)
(11,141,2)
(9,8,2)
(127,8,2)
(53,26,2)
(42,133,2)
(73,36,2)
(4,36,2)
(80,8,2)
(63,100,2)
(119,123,2)
(108,36,2)
(38,8,2)
(1,94,2)
(69,8,2)
(94,26,2)
(115,36,2)
(125,6,2)
(31,8,2)
(128,108,2)
(97,0,2)
(83,6,2)
(135,36,2)
(30,71,2)
(35,8,2)
(140,26,2)
(76,26,2)
(42,8,2)
(98,127,2)
(8,1,2)
(39,8,2)
(137,8,2)
(121,71,2)
(41,8,2)
(11,115,2)
(77,8,2)
(48,36,2)
(23,6,2)
(56,36,2)
(48,118,2)
(63,86,2)
(111,36,2)
(119,8,2)
(133,8,2)
(128,89,2)
(105,71,2)
(26,50,2)
(15,8,2)
(128,1,2)
(43,6,2)
(94,71,2)
(49,71,2)
(112,8,2)
(68,87,2)
(63,5,2)
(33,36,2)
(11,137,2)
(43,58,2)
(141,1,2)
(62,8,2)
(139,8,2)
(76,108,2)
(42,65,2)
(86,52,2)
(45,43,2)
(140,1,2)
(95,8,2)
(98,8,2)
(61,8,2)
(55,36,2)
(12,36,2)
(97,6,2)
(11,96,2)
(74,1,2)
(134,8,2)
(140,108,2)
(114,8,2)
(39,42,2)
(91,8,2)
(60,6,2)
(78,36,2)
(59,71,2)
(31,69,2)
(120,1,2)
(90,71,2)
(132,1,2)
(116,8,2)
(88,6,2)
(21,36,2)
(53,108,2)
(87,78,2)
(128,26,2)
(63,36,2)
(16,36,2)
(20,36,2)
(108,55,2)
(118,36,2)
(126,8,2)
-----------------------------------
(0,&s)
(1,stat(conf, &st)
(2,long_opts)
(3,switch (opt)
(4,0)
(5,*short_opts = "h?t:")
(6,optind < argc)
(7,argc)
(8,parse_config_file(conf, &s)
(9,printf("syslog_ident    = %s\\n", s.syslog_ident)
(10,optind)
(11,RET)
(12,conf)
(13,)
(14,s)
(15,syslog_facility)
(16,short_opts)
(17,return 2;)
(18,while ( (opt = getopt_long(argc, argv, short_opts, long_opts, &idx)
(19,0)
(20,argv)
(21,argv)
(22,int argc)
(23,argv)
(24,if (server_init(&s)
(25,opt)
(26,*conf = strdup("/etc/icinga/iris.conf")
(27,1)
(28,case \'h\':)
(29,idx)
(30,2)
(31,printf("timeout         = %i\\n", s.timeout)
(32,)
(33,idx)
(34,st)
(35,"%s: errors were encountered.\\n")
(36,opt)
(37,timeout)
(38,max_lifetime)
(39,printf("max_lifetime    = %i\\n", (int)
(40,conf)
(41,"syslog_facility = %s\\n")
(42,(int)
(43,argv[0])
(44,conf)
(45,usage(argv[0])
(46,case \'t\':)
(47,s)
(48,usage(argv[0])
(49,conf)
(50,strdup("/etc/icinga/iris.conf")
(51,opt)
(52,idx = 0)
(53,free(conf)
(54,break;)
(55,strdup(optarg)
(56,conf)
(57,)
(58,char **argv)
(59,0)
(60,fprintf(stderr, "Extra (ignored)
(61,s)
(62,s)
(63,getopt_long(argc, argv, short_opts, long_opts, &idx)
(64,s)
(65,int)
(66,st)
(67,"h?t:")
(68,argc)
(69,s.timeout)
(70,s)
(71,server_init(&s)
(72,)
(73,1)
(74,conf)
(75,conf)
(76,fprintf(stderr, "%s: errors were encountered.\\n", conf)
(77,"max_clients     = %i\\n")
(78,opt = getopt_long(argc, argv, short_opts, long_opts, &idx)
(79,short_opts)
(80,printf("max_clients     = %i\\n", s.max_clients)
(81,long_opts)
(82,if (parse_config_file(conf, &s)
(83,return 1;)
(84,"max_lifetime    = %i\\n")
(85,s)
(86,&idx)
(87,(opt = getopt_long(argc, argv, short_opts, long_opts, &idx)
(88,"Extra (ignored)
(89,&s)
(90,perror("Failed to initialize Iris defaults")
(91,s.max_clients)
(92,0)
(93,long_opts)
(94,stat(conf, &st)
(95,stderr)
(96,return 4;)
(97,server_init(&s)
(98,printf("port            = %s\\n", s.port)
(99,-1)
(100,long_opts[] = {\n\\n\\t\\t{ "help",       no_argument, NULL, \'h\' },\n\\n\\t\\t{ "test", required_argument, NULL, \'t\' },\n\\n\\t\\t{ 0, 0, 0, 0 }\n\\n\\t})
(101,"syslog_ident    = %s\\n")
(102,1)
(103,port)
(104,short_opts)
(105,"Failed to initialize Iris defaults")
(106,if (stat(conf, &st)
(107,0)
(108,conf = strdup(optarg)
(109,stderr)
(110,"timeout         = %i\\n")
(111,optarg)
(112,s.syslog_ident)
(113,conf)
(114,4)
(115,return 1;)
(116,syslog_ident)
(117,case \'?\':)
(118,argv[0])
(119,printf("syslog_facility = %s\\n", s.syslog_facility)
(120,2)
(121,&st)
(122,idx)
(123,s.syslog_facility)
(124,)
(125,0)
(126,max_clients)
(127,s.port)
(128,parse_config_file(conf, &s)
(129,default:)
(130,)
(131,if (optind < argc)
(132,0)
(133,s.max_lifetime)
(134,s)
(135,break;)
(136,)
(137,return 0;)
(138,s)
(139,"port            = %s\\n")
(140,perror(conf)
(141,return 2;)
(142,"/etc/icinga/iris.conf")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^