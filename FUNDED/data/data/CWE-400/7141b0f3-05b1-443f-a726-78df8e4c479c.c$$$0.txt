-----label-----
1
-----code-----
static int join_queue(char *queuename, struct queue_ent *qe, enum queue_result *reason, int position)
{
	struct call_queue *q;
	struct queue_ent *cur, *prev = NULL;
	int res = -1;
	int pos = 0;
	int inserted = 0;

	if (!(q = find_load_queue_rt_friendly(queuename))) {
		return res;
	}
	ao2_lock(q);

	/* This is our one */
	if (q->joinempty) {
		int status = 0;
		if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))) {
			*reason = QUEUE_JOINEMPTY;
			ao2_unlock(q);
			queue_t_unref(q, "Done with realtime queue");
			return res;
		}
	}
	if (*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)) {
		*reason = QUEUE_FULL;
	} else if (*reason == QUEUE_UNKNOWN) {
		/* There's space for us, put us at the right position inside
		 * the queue.
		 * Take into account the priority of the calling user */
		inserted = 0;
		prev = NULL;
		cur = q->head;
		while (cur) {
			/* We have higher priority than the current user, enter
			 * before him, after all the other users with priority
			 * higher or equal to our priority. */
			if ((!inserted) && (qe->prio > cur->prio)) {
				insert_entry(q, prev, qe, &pos);
				inserted = 1;
			}
			/* <= is necessary for the position comparison because it may not be possible to enter
			 * at our desired position since higher-priority callers may have taken the position we want
			 */
			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {
				insert_entry(q, prev, qe, &pos);
				inserted = 1;
				/*pos is incremented inside insert_entry, so don't need to add 1 here*/
				if (position < pos) {
					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);
				}
			}
			cur->pos = ++pos;
			prev = cur;
			cur = cur->next;
		}
		/* No luck, join at the end of the queue */
		if (!inserted) {
			insert_entry(q, prev, qe, &pos);
		}
		ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));
		ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));
		ast_copy_string(qe->context, q->context, sizeof(qe->context));
		q->count++;
		if (q->count == 1) {
			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);
		}

		res = 0;
		/*** DOCUMENTATION
		<managerEventInstance>
			<synopsis>Raised when a channel joins a Queue.</synopsis>
			<syntax>
				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
				<parameter name="Position">
					<para>This channel's current position in the queue.</para>
				</parameter>
				<parameter name="Count">
					<para>The total number of channels in the queue.</para>
				</parameter>
			</syntax>
			<see-also>
				<ref type="managerEvent">Leave</ref>
				<ref type="application">Queue</ref>
			</see-also>
		</managerEventInstance>
		***/
		ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",
			"Channel: %s\r\n"
			"CallerIDNum: %s\r\n"
			"CallerIDName: %s\r\n"
			"ConnectedLineNum: %s\r\n"
			"ConnectedLineName: %s\r\n"
			"Queue: %s\r\n"
			"Position: %d\r\n"
			"Count: %d\r\n"
			"Uniqueid: %s\r\n",
			ast_channel_name(qe->chan),
			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */
			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */
			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),
			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));
		ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );
	}
	ao2_unlock(q);
	queue_t_unref(q, "Done with realtime queue");

	return res;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
35,38
36,37
38,39
38,40
41,42
41,43
41,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
58,59
58,60
60,61
62,63
63,64
63,65
65,66
65,67
67,68
69,70
69,71
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
81,82
82,83
84,85
85,86
85,87
86,87
88,89
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
97,98
97,99
99,100
99,101
101,102
103,104
103,105
104,105
105,106
105,107
106,107
108,109
108,110
108,111
108,112
108,113
109,110
111,112
113,114
113,115
114,115
117,118
117,119
118,119
121,122
121,123
122,123
125,126
125,127
125,128
125,129
126,127
127,128
127,129
128,129
129,130
131,132
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
140,143
141,142
143,144
146,147
147,148
149,150
149,151
149,152
150,151
150,152
151,152
151,153
152,153
152,154
153,154
154,155
156,157
158,159
158,160
159,160
162,163
163,164
163,165
164,165
164,166
165,166
168,169
168,170
169,170
172,173
173,174
174,175
174,176
175,176
176,177
178,179
180,181
180,182
181,182
181,183
182,183
183,184
185,186
187,188
187,189
187,190
187,191
187,192
187,193
187,194
187,195
187,196
187,197
187,198
187,199
187,200
188,189
189,190
189,191
190,191
193,194
194,195
194,196
195,196
197,198
199,200
200,201
200,202
201,202
203,204
203,205
204,205
207,208
207,209
208,209
210,211
210,212
210,213
210,214
210,215
211,212
211,213
212,213
212,214
213,214
214,215
215,216
217,218
218,219
218,220
219,220
219,221
220,221
223,224
223,225
224,225
227,228
227,229
228,229
229,230
229,231
229,232
229,233
229,234
230,231
232,233
234,235
236,237
238,239
239,240
241,242
242,243
242,244
243,244
246,247
246,248
247,248
247,249
248,249
248,250
249,250
249,251
250,251
251,252
253,254
254,255
254,256
255,256
255,257
256,257
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
269,270
269,271
270,271
273,274
273,275
273,276
274,275
275,276
275,277
275,278
275,279
275,280
276,277
278,279
280,281
282,283
284,285
285,286
287,288
288,289
288,290
289,290
292,293
292,294
293,294
293,295
294,295
296,297
298,299
299,300
300,301
300,302
300,303
300,304
300,305
301,302
303,304
306,307
308,309
310,311
311,312
311,313
312,313
312,314
313,314
316,317
317,318
319,320
320,321
320,322
321,322
323,324
325,326
326,327
326,328
327,328
329,330
329,331
330,331
333,334
333,335
334,335
335,336
337,338
338,339
339,340
339,341
339,342
339,343
339,344
340,341
342,343
344,345
346,347
348,349
349,350
351,352
352,353
352,354
352,355
352,356
353,354
355,356
355,357
356,357
359,360
359,361
360,361
363,364
364,365
365,366
365,367
366,367
369,370
370,371
370,372
370,373
370,374
371,372
373,374
373,375
374,375
377,378
377,379
378,379
381,382
382,383
383,384
383,385
384,385
387,388
388,389
388,390
388,391
388,392
389,390
391,392
391,393
392,393
395,396
395,397
396,397
399,400
400,401
401,402
401,403
402,403
405,406
406,407
407,408
407,409
408,409
411,412
411,413
412,413
412,414
413,414
413,415
414,415
418,419
419,420
420,421
420,422
420,423
420,424
420,425
421,422
423,424
425,426
428,429
428,430
429,430
432,433
433,434
433,435
434,435
437,438
438,439
438,440
438,441
438,442
438,443
438,444
438,445
438,446
438,447
438,448
438,449
438,450
438,451
438,452
439,440
441,442
441,443
442,443
445,446
449,450
449,451
450,451
452,453
452,454
453,454
456,457
456,458
456,459
456,460
457,458
459,460
459,461
460,461
460,462
461,462
461,463
462,463
462,464
463,464
465,466
465,467
466,467
472,473
472,474
473,474
473,475
474,475
474,476
475,476
475,477
476,477
478,479
478,480
479,480
486,487
486,488
486,489
486,490
487,488
489,490
489,491
490,491
490,492
491,492
491,493
492,493
492,494
493,494
495,496
495,497
496,497
502,503
502,504
503,504
503,505
504,505
504,506
505,506
505,507
506,507
508,509
508,510
509,510
516,517
516,518
516,519
516,520
517,518
519,520
519,521
520,521
520,522
521,522
521,523
522,523
522,524
523,524
525,526
525,527
526,527
532,533
532,534
533,534
533,535
534,535
534,536
535,536
535,537
536,537
538,539
538,540
539,540
546,547
546,548
546,549
546,550
547,548
549,550
549,551
550,551
550,552
551,552
551,553
552,553
552,554
553,554
555,556
555,557
556,557
562,563
562,564
563,564
563,565
564,565
564,566
565,566
565,567
566,567
568,569
568,570
569,570
576,577
576,578
577,578
580,581
580,582
581,582
584,585
584,586
585,586
588,589
588,590
589,590
591,592
591,593
592,593
595,596
596,597
596,598
596,599
596,600
596,601
596,602
597,598
601,602
601,603
602,603
605,606
605,607
606,607
608,609
608,610
609,610
612,613
612,614
613,614
616,617
617,618
617,619
618,619
620,621
622,623
623,624
623,625
623,626
624,625
626,627
629,630
630,631
-----nextToken-----
2,4,6,8,9,12,14,15,18,20,21,23,25,30,32,33,37,39,40,42,43,46,49,51,54,57,59,61,64,66,68,74,77,79,83,87,89,93,94,98,100,102,107,110,112,115,116,119,120,123,124,130,132,136,138,142,144,145,148,155,157,160,161,166,167,170,171,177,179,184,186,191,192,196,198,202,205,206,209,216,221,222,225,226,231,233,235,237,240,244,245,252,257,258,261,262,264,268,271,272,277,279,281,283,286,290,291,295,297,302,304,305,307,309,314,315,318,322,324,328,331,332,336,341,343,345,347,350,354,357,358,361,362,367,368,372,375,376,379,380,385,386,390,393,394,397,398,403,404,409,410,415,416,417,422,424,426,427,430,431,435,436,440,443,444,446,447,448,451,454,455,458,464,467,468,469,470,471,477,480,481,482,483,484,485,488,494,497,498,499,500,501,507,510,511,512,513,514,515,518,524,527,528,529,530,531,537,540,541,542,543,544,545,548,554,557,558,559,560,561,567,570,571,572,573,574,575,578,579,582,583,586,587,590,593,594,598,599,600,603,604,607,610,611,614,615,619,621,625,627,628,631
-----computeFrom-----
72,73
72,74
105,106
105,107
127,128
127,129
150,151
150,152
151,152
151,153
152,153
152,154
163,164
163,165
174,175
174,176
181,182
181,183
189,190
189,191
194,195
194,196
200,201
200,202
212,213
212,214
218,219
218,220
242,243
242,244
247,248
247,249
248,249
248,250
249,250
249,251
254,255
254,256
266,267
266,268
269,270
269,271
288,289
288,290
293,294
293,295
311,312
311,313
320,321
320,322
326,327
326,328
412,413
412,414
433,434
433,435
-----guardedBy-----
155,177
216,244
221,237
252,290
257,283
271,309
268,307
297,309
295,307
415,430
-----guardedByNegation-----
155,184
170,603
157,186
167,587
-----lastLexicalUse-----
155,184
-----jump-----
155,184
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int join_queue(char *queuename, struct queue_ent *qe, enum queue_result *reason, int position){	struct call_queue *q;	struct queue_ent *cur, *prev = NULL;	int res = -1;	int pos = 0;	int inserted = 0;	if (!(q = find_load_queue_rt_friendly(queuename))) {		return res;	}	ao2_lock(q);	/* This is our one */	if (q->joinempty) {		int status = 0;		if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))) {			*reason = QUEUE_JOINEMPTY;			ao2_unlock(q);			queue_t_unref(q, "Done with realtime queue");			return res;		}	}	if (*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)) {		*reason = QUEUE_FULL;	} else if (*reason == QUEUE_UNKNOWN) {		/* There's space for us, put us at the right position inside		 * the queue.		 * Take into account the priority of the calling user */		inserted = 0;		prev = NULL;		cur = q->head;		while (cur) {			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}		/* No luck, join at the end of the queue */		if (!inserted) {			insert_entry(q, prev, qe, &pos);		}		ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));		ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));		ast_copy_string(qe->context, q->context, sizeof(qe->context));		q->count++;		if (q->count == 1) {			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}		res = 0;		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when a channel joins a Queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="Position">					<para>This channel's current position in the queue.</para>				</parameter>				<parameter name="Count">					<para>The total number of channels in the queue.</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">Leave</ref>				<ref type="application">Queue</ref>			</see-also>		</managerEventInstance>		***/		ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));		ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );	}	ao2_unlock(q);	queue_t_unref(q, "Done with realtime queue");	return res;}
static int
join_queue(char *queuename, struct queue_ent *qe, enum queue_result *reason, int position)
join_queue
char *queuename
char
*queuename
*
queuename
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
enum queue_result *reason
enum queue_result
queue_result
*reason
*
reason
int position
int
position
position
{	struct call_queue *q;	struct queue_ent *cur, *prev = NULL;	int res = -1;	int pos = 0;	int inserted = 0;	if (!(q = find_load_queue_rt_friendly(queuename))) {		return res;	}	ao2_lock(q);	/* This is our one */	if (q->joinempty) {		int status = 0;		if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))) {			*reason = QUEUE_JOINEMPTY;			ao2_unlock(q);			queue_t_unref(q, "Done with realtime queue");			return res;		}	}	if (*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)) {		*reason = QUEUE_FULL;	} else if (*reason == QUEUE_UNKNOWN) {		/* There's space for us, put us at the right position inside		 * the queue.		 * Take into account the priority of the calling user */		inserted = 0;		prev = NULL;		cur = q->head;		while (cur) {			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}		/* No luck, join at the end of the queue */		if (!inserted) {			insert_entry(q, prev, qe, &pos);		}		ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));		ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));		ast_copy_string(qe->context, q->context, sizeof(qe->context));		q->count++;		if (q->count == 1) {			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}		res = 0;		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when a channel joins a Queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="Position">					<para>This channel's current position in the queue.</para>				</parameter>				<parameter name="Count">					<para>The total number of channels in the queue.</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">Leave</ref>				<ref type="application">Queue</ref>			</see-also>		</managerEventInstance>		***/		ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));		ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );	}	ao2_unlock(q);	queue_t_unref(q, "Done with realtime queue");	return res;}
struct call_queue *q;
struct call_queue *q;
struct call_queue
call_queue
*q
*
q
struct queue_ent *cur, *prev = NULL;
struct queue_ent *cur, *prev = NULL;
struct queue_ent
queue_ent
*cur
*
cur
*prev = NULL
*
prev
= NULL
NULL
NULL
int res = -1;
int res = -1;
int
res = -1
res
= -1
-1
1
int pos = 0;
int pos = 0;
int
pos = 0
pos
= 0
0
int inserted = 0;
int inserted = 0;
int
inserted = 0
inserted
= 0
0
if (!(q = find_load_queue_rt_friendly(queuename))) {		return res;	}
!(q = find_load_queue_rt_friendly(queuename))
(q = find_load_queue_rt_friendly(queuename))
q = find_load_queue_rt_friendly(queuename)
q
q
find_load_queue_rt_friendly(queuename)
find_load_queue_rt_friendly
find_load_queue_rt_friendly
queuename
queuename
{		return res;	}
return res;
res
res
ao2_lock(q);
ao2_lock(q)
ao2_lock
ao2_lock
q
q
if (q->joinempty) {		int status = 0;		if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))) {			*reason = QUEUE_JOINEMPTY;			ao2_unlock(q);			queue_t_unref(q, "Done with realtime queue");			return res;		}	}
q->joinempty
q
q
joinempty
{		int status = 0;		if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))) {			*reason = QUEUE_JOINEMPTY;			ao2_unlock(q);			queue_t_unref(q, "Done with realtime queue");			return res;		}	}
int status = 0;
int status = 0;
int
status = 0
status
= 0
0
if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))) {			*reason = QUEUE_JOINEMPTY;			ao2_unlock(q);			queue_t_unref(q, "Done with realtime queue");			return res;		}
(status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty))
status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty)
status
status
get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty)
get_member_status
get_member_status
q
q
qe->max_penalty
qe
qe
max_penalty
qe->min_penalty
qe
qe
min_penalty
q->joinempty
q
q
joinempty
{			*reason = QUEUE_JOINEMPTY;			ao2_unlock(q);			queue_t_unref(q, "Done with realtime queue");			return res;		}
*reason = QUEUE_JOINEMPTY;
*reason = QUEUE_JOINEMPTY
*reason
reason
reason
QUEUE_JOINEMPTY
QUEUE_JOINEMPTY
ao2_unlock(q);
ao2_unlock(q)
ao2_unlock
ao2_unlock
q
q
queue_t_unref(q, "Done with realtime queue");
queue_t_unref(q, "Done with realtime queue")
queue_t_unref
queue_t_unref
q
q
"Done with realtime queue"
return res;
res
res
if (*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)) {		*reason = QUEUE_FULL;	} else if (*reason == QUEUE_UNKNOWN) {		/* There's space for us, put us at the right position inside		 * the queue.		 * Take into account the priority of the calling user */		inserted = 0;		prev = NULL;		cur = q->head;		while (cur) {			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}		/* No luck, join at the end of the queue */		if (!inserted) {			insert_entry(q, prev, qe, &pos);		}		ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));		ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));		ast_copy_string(qe->context, q->context, sizeof(qe->context));		q->count++;		if (q->count == 1) {			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}		res = 0;		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when a channel joins a Queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="Position">					<para>This channel's current position in the queue.</para>				</parameter>				<parameter name="Count">					<para>The total number of channels in the queue.</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">Leave</ref>				<ref type="application">Queue</ref>			</see-also>		</managerEventInstance>		***/		ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));		ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );	}
*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)
*reason == QUEUE_UNKNOWN && q->maxlen
*reason == QUEUE_UNKNOWN
*reason
reason
reason
QUEUE_UNKNOWN
QUEUE_UNKNOWN
q->maxlen
q
q
maxlen
(q->count >= q->maxlen)
q->count >= q->maxlen
q->count
q
q
count
q->maxlen
q
q
maxlen
{		*reason = QUEUE_FULL;	}
*reason = QUEUE_FULL;
*reason = QUEUE_FULL
*reason
reason
reason
QUEUE_FULL
QUEUE_FULL
if (*reason == QUEUE_UNKNOWN) {		/* There's space for us, put us at the right position inside		 * the queue.		 * Take into account the priority of the calling user */		inserted = 0;		prev = NULL;		cur = q->head;		while (cur) {			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}		/* No luck, join at the end of the queue */		if (!inserted) {			insert_entry(q, prev, qe, &pos);		}		ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));		ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));		ast_copy_string(qe->context, q->context, sizeof(qe->context));		q->count++;		if (q->count == 1) {			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}		res = 0;		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when a channel joins a Queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="Position">					<para>This channel's current position in the queue.</para>				</parameter>				<parameter name="Count">					<para>The total number of channels in the queue.</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">Leave</ref>				<ref type="application">Queue</ref>			</see-also>		</managerEventInstance>		***/		ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));		ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );	}
*reason == QUEUE_UNKNOWN
*reason
reason
reason
QUEUE_UNKNOWN
QUEUE_UNKNOWN
{		/* There's space for us, put us at the right position inside		 * the queue.		 * Take into account the priority of the calling user */		inserted = 0;		prev = NULL;		cur = q->head;		while (cur) {			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}		/* No luck, join at the end of the queue */		if (!inserted) {			insert_entry(q, prev, qe, &pos);		}		ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));		ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));		ast_copy_string(qe->context, q->context, sizeof(qe->context));		q->count++;		if (q->count == 1) {			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}		res = 0;		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when a channel joins a Queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="Position">					<para>This channel's current position in the queue.</para>				</parameter>				<parameter name="Count">					<para>The total number of channels in the queue.</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">Leave</ref>				<ref type="application">Queue</ref>			</see-also>		</managerEventInstance>		***/		ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));		ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );	}
inserted = 0;
inserted = 0
inserted
inserted
0
prev = NULL;
prev = NULL
prev
prev
NULL
NULL
cur = q->head;
cur = q->head
cur
cur
q->head
q
q
head
while (cur) {			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}
cur
cur
{			/* We have higher priority than the current user, enter			 * before him, after all the other users with priority			 * higher or equal to our priority. */			if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}			/* <= is necessary for the position comparison because it may not be possible to enter			 * at our desired position since higher-priority callers may have taken the position we want			 */			if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}			cur->pos = ++pos;			prev = cur;			cur = cur->next;		}
if ((!inserted) && (qe->prio > cur->prio)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;			}
(!inserted) && (qe->prio > cur->prio)
(!inserted)
!inserted
inserted
inserted
(qe->prio > cur->prio)
qe->prio > cur->prio
qe->prio
qe
qe
prio
cur->prio
cur
cur
prio
{				insert_entry(q, prev, qe, &pos);				inserted = 1;			}
insert_entry(q, prev, qe, &pos);
insert_entry(q, prev, qe, &pos)
insert_entry
insert_entry
q
q
prev
prev
qe
qe
&pos
pos
pos
inserted = 1;
inserted = 1
inserted
inserted
1
if (!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)) {				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}
!inserted && (qe->prio >= cur->prio) && position && (position <= pos + 1)
!inserted && (qe->prio >= cur->prio) && position
!inserted && (qe->prio >= cur->prio)
!inserted
inserted
inserted
(qe->prio >= cur->prio)
qe->prio >= cur->prio
qe->prio
qe
qe
prio
cur->prio
cur
cur
prio
position
position
(position <= pos + 1)
position <= pos + 1
position
position
pos + 1
pos
pos
1
{				insert_entry(q, prev, qe, &pos);				inserted = 1;				/*pos is incremented inside insert_entry, so don't need to add 1 here*/				if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}			}
insert_entry(q, prev, qe, &pos);
insert_entry(q, prev, qe, &pos)
insert_entry
insert_entry
q
q
prev
prev
qe
qe
&pos
pos
pos
inserted = 1;
inserted = 1
inserted
inserted
1
if (position < pos) {					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}
position < pos
position
position
pos
pos
{					ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);				}
ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos);
ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\n", position, pos)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Asked to be inserted at position %d but forced into position %d due to higher priority callers\n"
position
position
pos
pos
cur->pos = ++pos;
cur->pos = ++pos
cur->pos
cur
cur
pos
++pos
pos
pos
prev = cur;
prev = cur
prev
prev
cur
cur
cur = cur->next;
cur = cur->next
cur
cur
cur->next
cur
cur
next
if (!inserted) {			insert_entry(q, prev, qe, &pos);		}
!inserted
inserted
inserted
{			insert_entry(q, prev, qe, &pos);		}
insert_entry(q, prev, qe, &pos);
insert_entry(q, prev, qe, &pos)
insert_entry
insert_entry
q
q
prev
prev
qe
qe
&pos
pos
pos
ast_copy_string(qe->moh, q->moh, sizeof(qe->moh));
ast_copy_string(qe->moh, q->moh, sizeof(qe->moh))
ast_copy_string
ast_copy_string
qe->moh
qe
qe
moh
q->moh
q
q
moh
sizeof(qe->moh)
(qe->moh)
qe->moh
qe
qe
moh
ast_copy_string(qe->announce, q->announce, sizeof(qe->announce));
ast_copy_string(qe->announce, q->announce, sizeof(qe->announce))
ast_copy_string
ast_copy_string
qe->announce
qe
qe
announce
q->announce
q
q
announce
sizeof(qe->announce)
(qe->announce)
qe->announce
qe
qe
announce
ast_copy_string(qe->context, q->context, sizeof(qe->context));
ast_copy_string(qe->context, q->context, sizeof(qe->context))
ast_copy_string
ast_copy_string
qe->context
qe
qe
context
q->context
q
q
context
sizeof(qe->context)
(qe->context)
qe->context
qe
qe
context
q->count++;
q->count++
q->count
q
q
count
if (q->count == 1) {			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}
q->count == 1
q->count
q
q
count
1
{			ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);		}
ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name);
ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_RINGING
AST_DEVICE_RINGING
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"Queue:%s"
q->name
q
q
name
res = 0;
res = 0
res
res
0
ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan));
ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",			"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n",			ast_channel_name(qe->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),/* XXX somewhere else it is <unknown> */			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			q->name, qe->pos, q->count, ast_channel_uniqueid(qe->chan))
ast_manager_event
ast_manager_event
qe->chan
qe
qe
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"Join"
"Channel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Queue: %s\r\n"			"Position: %d\r\n"			"Count: %d\r\n"			"Uniqueid: %s\r\n"
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.number.valid
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
valid
ast_channel_caller(qe->chan)->id.number.str
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.name.valid
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
valid
ast_channel_caller(qe->chan)->id.name.str
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
ast_channel_connected(qe->chan)->id.number.str
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.name.valid
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
valid
ast_channel_connected(qe->chan)->id.name.str
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
str
"unknown"
q->name
q
q
name
qe->pos
qe
qe
pos
q->count
q
q
count
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos );
ast_debug(1, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, ast_channel_name(qe->chan), qe->pos )
ast_debug
ast_debug
1
"Queue '%s' Join, Channel '%s', Position '%d'\n"
q->name
q
q
name
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
qe->pos
qe
qe
pos
ao2_unlock(q);
ao2_unlock(q)
ao2_unlock
ao2_unlock
q
q
queue_t_unref(q, "Done with realtime queue");
queue_t_unref(q, "Done with realtime queue")
queue_t_unref
queue_t_unref
q
q
"Done with realtime queue"
return res;
res
res
-----joern-----
(291,11,0)
(6,227,0)
(213,329,0)
(200,369,0)
(341,29,0)
(172,259,0)
(310,315,0)
(238,71,0)
(223,36,0)
(39,220,0)
(305,207,0)
(23,315,0)
(324,193,0)
(320,324,0)
(333,226,0)
(270,132,0)
(75,344,0)
(120,373,0)
(9,134,0)
(179,368,0)
(255,132,0)
(53,81,0)
(300,87,0)
(273,85,0)
(166,341,0)
(121,311,0)
(182,272,0)
(269,259,0)
(135,345,0)
(338,29,0)
(247,210,0)
(124,243,0)
(256,265,0)
(19,286,0)
(299,242,0)
(160,126,0)
(175,344,0)
(37,338,0)
(225,15,0)
(349,344,0)
(281,235,0)
(106,349,0)
(175,220,0)
(336,151,0)
(115,368,0)
(68,104,0)
(259,306,0)
(158,173,0)
(2,104,0)
(238,367,0)
(379,246,0)
(219,371,0)
(225,252,0)
(76,197,0)
(220,368,0)
(72,288,0)
(57,212,0)
(111,144,0)
(195,177,0)
(277,292,0)
(99,368,0)
(166,71,0)
(354,9,0)
(238,60,0)
(215,7,0)
(286,71,0)
(341,286,0)
(331,104,0)
(194,222,0)
(63,106,0)
(322,333,0)
(87,126,0)
(206,179,0)
(190,373,0)
(85,91,0)
(95,86,0)
(342,256,0)
(363,222,0)
(51,166,0)
(343,42,0)
(191,68,0)
(288,71,0)
(193,324,0)
(236,177,0)
(101,104,0)
(222,194,0)
(262,305,0)
(250,2,0)
(261,368,0)
(356,44,0)
(202,2,0)
(174,164,0)
(249,60,0)
(205,254,0)
(131,317,0)
(248,87,0)
(294,336,0)
(298,22,0)
(212,341,0)
(317,131,0)
(293,75,0)
(348,62,0)
(284,89,0)
(364,381,0)
(114,330,0)
(292,277,0)
(238,188,0)
(328,49,0)
(168,24,0)
(282,375,0)
(192,104,0)
(26,114,0)
(178,349,0)
(8,349,0)
(379,287,0)
(218,344,0)
(154,288,0)
(15,104,0)
(267,62,0)
(239,329,0)
(266,341,0)
(308,328,0)
(178,50,0)
(165,280,0)
(277,91,0)
(252,155,0)
(242,211,0)
(52,115,0)
(120,218,0)
(187,325,0)
(171,238,0)
(112,200,0)
(72,272,0)
(280,130,0)
(261,132,0)
(49,328,0)
(238,75,0)
(44,250,0)
(133,368,0)
(345,135,0)
(40,133,0)
(15,226,0)
(122,306,0)
(89,78,0)
(16,296,0)
(102,194,0)
(11,260,0)
(226,104,0)
(44,368,0)
(200,202,0)
(253,15,0)
(140,143,0)
(132,255,0)
(305,124,0)
(358,355,0)
(164,364,0)
(189,179,0)
(230,6,0)
(352,101,0)
(13,130,0)
(265,54,0)
(280,165,0)
(235,33,0)
(283,227,0)
(7,349,0)
(98,272,0)
(200,164,0)
(319,53,0)
(139,71,0)
(18,251,0)
(125,4,0)
(287,379,0)
(46,121,0)
(371,219,0)
(182,295,0)
(150,218,0)
(0,296,0)
(292,219,0)
(177,214,0)
(242,368,0)
(224,312,0)
(257,77,0)
(143,54,0)
(364,50,0)
(30,73,0)
(64,104,0)
(143,140,0)
(197,140,0)
(61,71,0)
(340,106,0)
(156,261,0)
(355,368,0)
(50,178,0)
(152,93,0)
(341,348,0)
(144,148,0)
(279,97,0)
(94,193,0)
(60,296,0)
(116,252,0)
(363,71,0)
(73,347,0)
(186,69,0)
(117,11,0)
(54,143,0)
(202,200,0)
(29,341,0)
(97,344,0)
(194,344,0)
(204,75,0)
(96,344,0)
(45,9,0)
(259,172,0)
(316,71,0)
(256,341,0)
(35,4,0)
(34,311,0)
(321,238,0)
(311,121,0)
(303,55,0)
(304,176,0)
(302,286,0)
(62,208,0)
(49,210,0)
(210,165,0)
(194,312,0)
(11,60,0)
(97,279,0)
(73,71,0)
(237,194,0)
(332,42,0)
(85,69,0)
(109,226,0)
(376,121,0)
(372,250,0)
(29,295,0)
(176,129,0)
(214,71,0)
(360,114,0)
(199,300,0)
(15,86,0)
(134,93,0)
(188,238,0)
(25,195,0)
(208,93,0)
(160,71,0)
(147,311,0)
(106,78,0)
(175,378,0)
(90,292,0)
(97,347,0)
(380,101,0)
(129,256,0)
(225,53,0)
(62,348,0)
(256,129,0)
(135,368,0)
(14,212,0)
(119,178,0)
(263,165,0)
(295,182,0)
(345,179,0)
(24,71,0)
(346,373,0)
(162,255,0)
(11,75,0)
(347,97,0)
(108,104,0)
(311,368,0)
(21,288,0)
(255,71,0)
(286,341,0)
(9,71,0)
(140,197,0)
(381,120,0)
(167,48,0)
(207,305,0)
(270,254,0)
(241,104,0)
(240,316,0)
(303,269,0)
(77,371,0)
(12,5,0)
(163,336,0)
(157,202,0)
(373,260,0)
(235,71,0)
(172,148,0)
(176,246,0)
(341,328,0)
(78,89,0)
(55,367,0)
(378,175,0)
(190,218,0)
(264,55,0)
(80,148,0)
(251,104,0)
(87,300,0)
(366,155,0)
(148,296,0)
(59,2,0)
(164,369,0)
(3,120,0)
(193,94,0)
(341,4,0)
(123,255,0)
(138,54,0)
(56,139,0)
(149,160,0)
(88,188,0)
(234,11,0)
(272,182,0)
(177,195,0)
(219,292,0)
(259,269,0)
(173,368,0)
(177,368,0)
(97,133,0)
(348,243,0)
(179,345,0)
(336,2,0)
(327,202,0)
(371,345,0)
(169,363,0)
(84,48,0)
(153,303,0)
(194,24,0)
(198,254,0)
(121,335,0)
(181,144,0)
(172,349,0)
(83,307,0)
(132,270,0)
(70,344,0)
(353,6,0)
(145,115,0)
(141,366,0)
(216,61,0)
(56,341,0)
(341,256,0)
(86,344,0)
(318,306,0)
(78,296,0)
(38,182,0)
(209,121,0)
(341,212,0)
(330,114,0)
(201,129,0)
(175,33,0)
(44,75,0)
(323,363,0)
(101,368,0)
(221,139,0)
(339,320,0)
(329,2,0)
(252,226,0)
(345,371,0)
(180,287,0)
(82,246,0)
(126,87,0)
(307,22,0)
(137,31,0)
(93,208,0)
(243,348,0)
(196,139,0)
(303,373,0)
(378,71,0)
(89,2,0)
(334,61,0)
(132,261,0)
(161,94,0)
(77,368,0)
(328,375,0)
(159,238,0)
(271,287,0)
(359,124,0)
(238,368,0)
(375,328,0)
(329,369,0)
(20,336,0)
(94,71,0)
(120,55,0)
(265,256,0)
(251,368,0)
(31,104,0)
(330,344,0)
(50,316,0)
(128,348,0)
(370,73,0)
(7,368,0)
(368,242,0)
(341,317,0)
(349,7,0)
(365,133,0)
(254,270,0)
(107,279,0)
(50,364,0)
(22,155,0)
(173,155,0)
(190,55,0)
(48,104,0)
(142,344,0)
(244,243,0)
(289,2,0)
(325,11,0)
(60,148,0)
(184,43,0)
(67,260,0)
(303,218,0)
(24,194,0)
(207,42,0)
(325,2,0)
(53,226,0)
(47,135,0)
(27,214,0)
(357,55,0)
(170,44,0)
(33,175,0)
(233,104,0)
(226,333,0)
(364,164,0)
(341,344,0)
(306,259,0)
(126,160,0)
(11,71,0)
(29,338,0)
(313,172,0)
(11,368,0)
(17,135,0)
(129,176,0)
(295,29,0)
(133,97,0)
(11,325,0)
(210,49,0)
(58,279,0)
(41,277,0)
(66,29,0)
(368,217,0)
(203,261,0)
(164,200,0)
(139,56,0)
(254,71,0)
(306,71,0)
(246,176,0)
(276,131,0)
(232,316,0)
(245,94,0)
(309,49,0)
(279,71,0)
(258,86,0)
(374,190,0)
(60,349,0)
(222,363,0)
(124,305,0)
(93,134,0)
(106,148,0)
(43,290,0)
(361,265,0)
(355,177,0)
(351,218,0)
(79,24,0)
(381,364,0)
(32,336,0)
(4,368,0)
(341,56,0)
(288,72,0)
(228,131,0)
(113,312,0)
(220,175,0)
(314,104,0)
(54,265,0)
(44,71,0)
(217,368,0)
(324,320,0)
(100,104,0)
(243,124,0)
(377,172,0)
(110,214,0)
(127,160,0)
(36,43,0)
(250,44,0)
(146,68,0)
(165,210,0)
(33,235,0)
(197,71,0)
(366,368,0)
(118,341,0)
(316,50,0)
(177,355,0)
(92,166,0)
(362,235,0)
(44,275,0)
(278,7,0)
(69,85,0)
(148,144,0)
(214,177,0)
(312,194,0)
(337,355,0)
(120,381,0)
(208,62,0)
(268,208,0)
(297,130,0)
(227,6,0)
(61,177,0)
(229,104,0)
(131,71,0)
(301,197,0)
(103,378,0)
(317,341,0)
(6,368,0)
(328,341,0)
(336,369,0)
(269,303,0)
(1,143,0)
(347,73,0)
(42,71,0)
(44,60,0)
(134,9,0)
(338,320,0)
(114,368,0)
(341,166,0)
(320,338,0)
(212,368,0)
(42,207,0)
(287,71,0)
(177,61,0)
(350,378,0)
(371,77,0)
(183,5,0)
(144,349,0)
(312,368,0)
(130,71,0)
(315,5,0)
(31,368,0)
(272,72,0)
(274,178,0)
(105,77,0)
(178,148,0)
(231,44,0)
(65,173,0)
(36,91,0)
(285,341,0)
(300,375,0)
(185,373,0)
(246,379,0)
(132,344,0)
(4,341,0)
(307,91,0)
(188,2,0)
(130,280,0)
(375,300,0)
(326,295,0)
(74,220,0)
(10,324,0)
(348,341,0)
(28,60,0)
(43,184,1)
(307,83,1)
(333,322,1)
(219,292,1)
(213,239,1)
(292,90,1)
(244,124,1)
(194,222,1)
(122,318,1)
(345,179,1)
(7,215,1)
(165,263,1)
(194,24,1)
(276,266,1)
(119,316,1)
(270,254,1)
(265,361,1)
(173,65,1)
(328,308,1)
(308,375,1)
(339,324,1)
(88,321,1)
(323,312,1)
(191,146,1)
(202,2,1)
(273,219,1)
(147,376,1)
(125,286,1)
(179,368,1)
(358,337,1)
(343,332,1)
(32,294,1)
(210,247,1)
(162,123,1)
(238,188,1)
(29,295,1)
(132,261,1)
(300,199,1)
(375,282,1)
(27,236,1)
(208,268,1)
(62,208,1)
(235,281,1)
(235,71,1)
(41,115,1)
(178,148,1)
(349,7,1)
(31,137,1)
(80,60,1)
(121,311,1)
(284,106,1)
(303,218,1)
(177,368,1)
(340,329,1)
(97,347,1)
(61,71,1)
(129,176,1)
(286,19,1)
(118,166,1)
(131,228,1)
(247,165,1)
(332,29,1)
(68,191,1)
(210,165,1)
(283,6,1)
(25,315,1)
(36,223,1)
(130,13,1)
(132,270,1)
(206,77,1)
(231,356,1)
(261,156,1)
(243,124,1)
(255,71,1)
(304,246,1)
(220,39,1)
(177,214,1)
(20,329,1)
(321,171,1)
(352,380,1)
(329,213,1)
(226,333,1)
(227,6,1)
(259,306,1)
(110,27,1)
(302,212,1)
(169,323,1)
(144,148,1)
(236,25,1)
(87,248,1)
(47,179,1)
(53,226,1)
(24,71,1)
(188,88,1)
(4,368,1)
(115,145,1)
(376,209,1)
(171,159,1)
(99,68,1)
(307,91,1)
(351,69,1)
(359,305,1)
(94,71,1)
(190,55,1)
(102,341,1)
(101,352,1)
(319,217,1)
(380,251,1)
(117,291,1)
(50,178,1)
(336,369,1)
(156,203,1)
(370,133,1)
(141,22,1)
(381,120,1)
(279,58,1)
(252,226,1)
(214,71,1)
(368,242,1)
(311,368,1)
(272,72,1)
(280,130,1)
(220,368,1)
(182,272,1)
(320,339,1)
(53,319,1)
(93,134,1)
(194,312,1)
(50,316,1)
(51,86,1)
(60,28,1)
(133,365,1)
(136,148,1)
(73,30,1)
(365,40,1)
(59,226,1)
(354,243,1)
(143,1,1)
(348,62,1)
(249,78,1)
(127,49,1)
(166,92,1)
(355,358,1)
(281,362,1)
(366,141,1)
(234,381,1)
(120,218,1)
(199,87,1)
(109,48,1)
(130,71,1)
(136,349,1)
(300,87,1)
(282,300,1)
(37,320,1)
(252,116,1)
(264,238,1)
(176,304,1)
(263,280,1)
(69,85,1)
(341,212,1)
(11,60,1)
(120,3,1)
(225,53,1)
(362,220,1)
(165,280,1)
(313,306,1)
(185,346,1)
(381,364,1)
(257,292,1)
(143,140,1)
(44,75,1)
(160,71,1)
(135,368,1)
(364,164,1)
(132,255,1)
(355,368,1)
(73,71,1)
(15,226,1)
(36,91,1)
(178,274,1)
(287,271,1)
(301,348,1)
(41,195,1)
(140,197,1)
(202,327,1)
(22,298,1)
(128,62,1)
(288,71,1)
(374,136,1)
(230,353,1)
(251,18,1)
(45,354,1)
(250,2,1)
(258,227,1)
(224,113,1)
(75,204,1)
(13,297,1)
(378,71,1)
(277,41,1)
(21,154,1)
(341,56,1)
(255,162,1)
(246,379,1)
(139,71,1)
(219,371,1)
(272,98,1)
(328,375,1)
(19,302,1)
(340,336,1)
(18,43,1)
(292,277,1)
(42,71,1)
(168,222,1)
(38,272,1)
(135,17,1)
(375,300,1)
(31,368,1)
(124,305,1)
(120,373,1)
(134,9,1)
(124,359,1)
(338,320,1)
(46,227,1)
(9,45,1)
(277,91,1)
(44,250,1)
(366,368,1)
(30,370,1)
(48,84,1)
(294,163,1)
(261,368,1)
(39,74,1)
(18,194,1)
(92,51,1)
(297,256,1)
(325,187,1)
(204,293,1)
(287,71,1)
(44,71,1)
(239,373,1)
(240,120,1)
(15,253,1)
(303,55,1)
(78,89,1)
(95,258,1)
(58,107,1)
(228,276,1)
(306,122,1)
(82,379,1)
(315,23,1)
(98,72,1)
(238,60,1)
(23,310,1)
(253,101,1)
(360,26,1)
(258,121,1)
(320,324,1)
(113,237,1)
(144,111,1)
(312,224,1)
(164,174,1)
(62,267,1)
(329,369,1)
(18,69,1)
(238,71,1)
(345,135,1)
(3,55,1)
(237,102,1)
(173,368,1)
(116,173,1)
(311,34,1)
(293,218,1)
(299,99,1)
(338,37,1)
(246,82,1)
(106,148,1)
(259,172,1)
(348,243,1)
(61,334,1)
(56,139,1)
(152,134,1)
(303,153,1)
(327,157,1)
(170,231,1)
(89,2,1)
(154,317,1)
(49,309,1)
(160,149,1)
(111,181,1)
(212,57,1)
(357,264,1)
(197,76,1)
(341,29,1)
(40,279,1)
(131,71,1)
(87,126,1)
(306,71,1)
(225,252,1)
(372,170,1)
(218,150,1)
(90,277,1)
(207,42,1)
(148,144,1)
(212,368,1)
(279,71,1)
(238,368,1)
(312,368,1)
(195,177,1)
(256,129,1)
(86,95,1)
(363,71,1)
(197,71,1)
(42,343,1)
(101,368,1)
(189,206,1)
(107,44,1)
(174,50,1)
(250,372,1)
(267,208,1)
(200,369,1)
(305,262,1)
(180,265,1)
(341,328,1)
(3,269,1)
(139,196,1)
(190,373,1)
(85,91,1)
(329,2,1)
(103,132,1)
(256,342,1)
(256,265,1)
(163,20,1)
(262,207,1)
(138,143,1)
(83,195,1)
(286,71,1)
(232,240,1)
(222,363,1)
(269,303,1)
(65,158,1)
(11,325,1)
(150,351,1)
(69,186,1)
(149,127,1)
(55,357,1)
(285,118,1)
(166,71,1)
(97,133,1)
(175,378,1)
(33,235,1)
(326,182,1)
(295,326,1)
(161,295,1)
(107,190,1)
(126,160,1)
(341,348,1)
(341,256,1)
(209,46,1)
(316,71,1)
(52,31,1)
(112,174,1)
(205,198,1)
(79,168,1)
(356,190,1)
(364,50,1)
(289,59,1)
(208,93,1)
(288,21,1)
(175,220,1)
(309,210,1)
(238,75,1)
(182,38,1)
(72,288,1)
(350,103,1)
(268,93,1)
(66,338,1)
(133,368,1)
(177,61,1)
(44,60,1)
(348,128,1)
(1,140,1)
(242,299,1)
(76,301,1)
(24,79,1)
(172,349,1)
(371,77,1)
(187,117,1)
(57,14,1)
(11,75,1)
(4,35,1)
(377,313,1)
(137,217,1)
(324,193,1)
(310,115,1)
(203,255,1)
(123,97,1)
(7,368,1)
(190,218,1)
(145,52,1)
(14,328,1)
(337,61,1)
(303,373,1)
(26,175,1)
(196,221,1)
(184,36,1)
(6,230,1)
(361,54,1)
(341,166,1)
(190,374,1)
(251,368,1)
(29,66,1)
(298,307,1)
(159,269,1)
(176,246,1)
(363,169,1)
(2,289,1)
(114,360,1)
(217,368,1)
(63,340,1)
(322,109,1)
(265,54,1)
(342,129,1)
(373,185,1)
(175,33,1)
(77,368,1)
(225,15,1)
(291,234,1)
(193,94,1)
(35,125,1)
(328,49,1)
(106,63,1)
(341,317,1)
(330,114,1)
(371,345,1)
(106,349,1)
(324,10,1)
(34,147,1)
(44,368,1)
(144,349,1)
(201,176,1)
(181,80,1)
(54,138,1)
(164,369,1)
(305,207,1)
(115,368,1)
(10,193,1)
(316,232,1)
(94,245,1)
(77,105,1)
(248,126,1)
(105,257,1)
(353,330,1)
(11,71,1)
(178,349,1)
(89,284,1)
(186,85,1)
(129,201,1)
(153,136,1)
(158,366,1)
(242,211,1)
(179,189,1)
(266,285,1)
(317,131,1)
(188,2,1)
(15,86,1)
(221,4,1)
(341,4,1)
(164,200,1)
(28,249,1)
(274,119,1)
(278,8,1)
(74,378,1)
(29,338,1)
(84,167,1)
(114,368,1)
(93,152,1)
(11,368,1)
(54,143,1)
(271,180,1)
(157,112,1)
(177,355,1)
(6,368,1)
(243,244,1)
(85,273,1)
(346,11,1)
(223,219,1)
(60,148,1)
(227,283,1)
(200,202,1)
(214,110,1)
(379,287,1)
(336,2,1)
(17,47,1)
(334,216,1)
(198,261,1)
(340,381,1)
(216,214,1)
(254,71,1)
(49,210,1)
(325,2,1)
(146,2,1)
(245,161,1)
(378,350,1)
(318,303,1)
(215,278,1)
(254,205,1)
(172,377,1)
(172,148,1)
(120,55,1)
(347,73,1)
(97,279,1)
(9,71,1)
(60,349,1)
(269,259,1)
(8,75,1)
(336,32,1)
(341,286,1)
(295,182,1)
(373,381,2)
(238,188,2)
(311,368,2)
(285,69,2)
(239,381,2)
(10,69,2)
(54,69,2)
(172,349,2)
(138,69,2)
(114,368,2)
(106,148,2)
(179,77,2)
(375,300,2)
(261,69,2)
(219,115,2)
(124,69,2)
(95,69,2)
(120,373,2)
(136,69,2)
(173,368,2)
(277,91,2)
(308,69,2)
(259,303,2)
(347,69,2)
(317,69,2)
(255,69,2)
(51,69,2)
(83,195,2)
(305,69,2)
(164,369,2)
(338,69,2)
(36,91,2)
(315,115,2)
(154,69,2)
(162,69,2)
(262,69,2)
(116,195,2)
(252,226,2)
(101,368,2)
(164,200,2)
(52,217,2)
(163,329,2)
(341,166,2)
(376,227,2)
(217,368,2)
(330,69,2)
(101,195,2)
(263,69,2)
(363,71,2)
(295,69,2)
(11,75,2)
(204,69,2)
(131,71,2)
(380,195,2)
(11,60,2)
(143,140,2)
(53,226,2)
(297,69,2)
(23,115,2)
(139,71,2)
(341,328,2)
(9,69,2)
(341,56,2)
(38,69,2)
(187,381,2)
(37,69,2)
(197,69,2)
(252,195,2)
(73,69,2)
(175,378,2)
(50,316,2)
(361,69,2)
(46,227,2)
(238,60,2)
(86,69,2)
(312,69,2)
(346,381,2)
(74,69,2)
(269,259,2)
(365,69,2)
(287,69,2)
(44,250,2)
(41,115,2)
(300,87,2)
(207,42,2)
(137,217,2)
(62,69,2)
(250,2,2)
(29,295,2)
(305,207,2)
(265,69,2)
(77,368,2)
(381,120,2)
(153,136,2)
(133,368,2)
(28,136,2)
(165,280,2)
(170,190,2)
(371,292,2)
(349,69,2)
(351,69,2)
(190,55,2)
(208,93,2)
(150,69,2)
(302,69,2)
(319,217,2)
(193,94,2)
(379,287,2)
(148,144,2)
(303,55,2)
(220,368,2)
(31,368,2)
(195,177,2)
(106,349,2)
(35,69,2)
(209,227,2)
(132,270,2)
(341,4,2)
(329,369,2)
(135,77,2)
(188,2,2)
(343,69,2)
(381,136,2)
(272,69,2)
(194,222,2)
(307,91,2)
(269,136,2)
(56,139,2)
(8,69,2)
(353,69,2)
(39,69,2)
(177,368,2)
(80,136,2)
(106,136,2)
(176,246,2)
(25,115,2)
(202,174,2)
(89,2,2)
(377,303,2)
(73,71,2)
(196,69,2)
(220,69,2)
(378,69,2)
(82,69,2)
(216,115,2)
(94,71,2)
(214,115,2)
(273,219,2)
(251,368,2)
(210,69,2)
(149,69,2)
(325,381,2)
(332,69,2)
(341,286,2)
(110,115,2)
(306,303,2)
(198,69,2)
(177,115,2)
(341,69,2)
(122,303,2)
(178,349,2)
(134,69,2)
(303,136,2)
(129,69,2)
(274,120,2)
(316,71,2)
(329,2,2)
(31,217,2)
(65,195,2)
(160,71,2)
(339,69,2)
(120,218,2)
(188,269,2)
(246,379,2)
(182,272,2)
(225,252,2)
(75,69,2)
(205,69,2)
(144,349,2)
(15,226,2)
(208,69,2)
(166,71,2)
(158,195,2)
(77,292,2)
(87,126,2)
(4,368,2)
(58,69,2)
(172,148,2)
(147,227,2)
(113,69,2)
(124,305,2)
(14,69,2)
(310,115,2)
(132,255,2)
(254,69,2)
(60,349,2)
(40,69,2)
(85,219,2)
(43,219,2)
(120,55,2)
(6,69,2)
(89,136,2)
(226,333,2)
(179,368,2)
(164,50,2)
(85,91,2)
(185,381,2)
(223,219,2)
(370,69,2)
(61,71,2)
(320,69,2)
(194,312,2)
(312,368,2)
(227,69,2)
(348,62,2)
(301,69,2)
(44,60,2)
(212,368,2)
(118,69,2)
(34,227,2)
(190,69,2)
(238,269,2)
(200,174,2)
(362,69,2)
(303,218,2)
(282,69,2)
(284,136,2)
(175,69,2)
(278,69,2)
(279,69,2)
(378,71,2)
(125,69,2)
(29,338,2)
(44,75,2)
(178,148,2)
(265,54,2)
(93,69,2)
(121,311,2)
(279,71,2)
(341,348,2)
(49,69,2)
(259,172,2)
(270,254,2)
(366,195,2)
(348,69,2)
(324,69,2)
(44,190,2)
(232,120,2)
(215,69,2)
(139,69,2)
(176,69,2)
(222,363,2)
(130,69,2)
(212,69,2)
(311,227,2)
(49,210,2)
(268,69,2)
(202,2,2)
(375,69,2)
(261,368,2)
(371,77,2)
(251,115,2)
(213,381,2)
(20,329,2)
(337,115,2)
(338,320,2)
(159,269,2)
(133,69,2)
(355,368,2)
(266,69,2)
(11,368,2)
(288,69,2)
(336,329,2)
(307,195,2)
(355,115,2)
(235,71,2)
(181,136,2)
(336,369,2)
(381,364,2)
(98,69,2)
(115,368,2)
(90,115,2)
(165,69,2)
(13,69,2)
(18,195,2)
(197,71,2)
(134,9,2)
(280,130,2)
(112,174,2)
(214,71,2)
(168,69,2)
(271,69,2)
(41,195,2)
(225,53,2)
(313,303,2)
(175,33,2)
(326,69,2)
(62,208,2)
(210,165,2)
(293,69,2)
(19,69,2)
(7,368,2)
(36,219,2)
(184,219,2)
(117,381,2)
(288,71,2)
(135,368,2)
(160,69,2)
(228,69,2)
(294,329,2)
(258,69,2)
(309,69,2)
(304,69,2)
(119,120,2)
(203,69,2)
(342,69,2)
(364,50,2)
(69,85,2)
(97,133,2)
(345,135,2)
(246,69,2)
(131,69,2)
(372,190,2)
(354,69,2)
(334,115,2)
(259,306,2)
(253,195,2)
(105,292,2)
(356,190,2)
(76,69,2)
(295,182,2)
(318,303,2)
(190,373,2)
(323,69,2)
(221,69,2)
(366,368,2)
(55,269,2)
(283,69,2)
(201,69,2)
(129,176,2)
(270,69,2)
(27,115,2)
(231,190,2)
(57,69,2)
(292,195,2)
(251,195,2)
(303,373,2)
(321,269,2)
(66,69,2)
(173,195,2)
(32,329,2)
(360,69,2)
(364,120,2)
(169,69,2)
(72,288,2)
(379,69,2)
(327,174,2)
(33,69,2)
(219,195,2)
(156,69,2)
(286,71,2)
(238,368,2)
(206,77,2)
(199,69,2)
(174,50,2)
(292,277,2)
(292,115,2)
(53,217,2)
(145,217,2)
(264,269,2)
(79,69,2)
(236,115,2)
(276,69,2)
(227,6,2)
(72,69,2)
(324,193,2)
(130,71,2)
(171,269,2)
(207,69,2)
(6,368,2)
(195,115,2)
(24,71,2)
(42,71,2)
(200,202,2)
(363,69,2)
(257,292,2)
(256,129,2)
(253,115,2)
(238,75,2)
(172,303,2)
(357,269,2)
(123,69,2)
(166,69,2)
(126,160,2)
(33,235,2)
(60,148,2)
(78,136,2)
(44,368,2)
(18,115,2)
(61,115,2)
(132,261,2)
(281,69,2)
(248,69,2)
(152,69,2)
(50,178,2)
(120,136,2)
(177,61,2)
(328,69,2)
(325,2,2)
(140,197,2)
(341,212,2)
(341,317,2)
(144,136,2)
(3,136,2)
(143,69,2)
(320,324,2)
(194,69,2)
(238,71,2)
(178,120,2)
(368,242,2)
(272,72,2)
(277,195,2)
(136,136,2)
(350,69,2)
(298,195,2)
(177,355,2)
(189,77,2)
(22,195,2)
(371,345,2)
(230,69,2)
(267,69,2)
(190,218,2)
(277,115,2)
(127,69,2)
(380,115,2)
(234,381,2)
(50,120,2)
(144,148,2)
(177,214,2)
(56,69,2)
(97,69,2)
(126,69,2)
(374,69,2)
(4,69,2)
(340,136,2)
(63,136,2)
(218,69,2)
(11,71,2)
(7,69,2)
(193,69,2)
(328,49,2)
(300,69,2)
(247,69,2)
(186,219,2)
(102,69,2)
(44,71,2)
(306,71,2)
(200,369,2)
(222,69,2)
(249,136,2)
(30,69,2)
(60,136,2)
(182,69,2)
(92,69,2)
(24,69,2)
(286,69,2)
(358,115,2)
(291,381,2)
(175,220,2)
(54,143,2)
(180,69,2)
(243,124,2)
(88,269,2)
(161,69,2)
(42,69,2)
(330,114,2)
(17,77,2)
(26,69,2)
(341,256,2)
(11,381,2)
(256,265,2)
(87,69,2)
(115,217,2)
(148,136,2)
(224,69,2)
(237,69,2)
(121,227,2)
(348,243,2)
(15,195,2)
(219,371,2)
(244,69,2)
(9,71,2)
(107,69,2)
(328,375,2)
(69,219,2)
(29,69,2)
(15,86,2)
(103,69,2)
(269,303,2)
(336,2,2)
(359,69,2)
(352,195,2)
(45,69,2)
(93,134,2)
(94,69,2)
(341,29,2)
(235,69,2)
(329,381,2)
(194,24,2)
(242,211,2)
(352,115,2)
(111,136,2)
(157,174,2)
(250,190,2)
(364,164,2)
(47,77,2)
(345,179,2)
(114,69,2)
(317,131,2)
(97,347,2)
(280,69,2)
(219,292,2)
(245,69,2)
(255,71,2)
(349,7,2)
(243,69,2)
(90,195,2)
(97,279,2)
(256,69,2)
(11,325,2)
(15,115,2)
(225,15,2)
(141,195,2)
(287,71,2)
(1,69,2)
(101,115,2)
(254,71,2)
(21,69,2)
(316,120,2)
(132,69,2)
(128,69,2)
(345,77,2)
(240,120,2)
(78,89,2)
(140,69,2)
(347,73,2)
-----------------------------------
(0,if ((!inserted)
(1,id)
(2,pos = 0)
(3,inserted)
(4,q->count)
(5,)
(6,q->count)
(7,q->head)
(8,cur)
(9,qe->chan)
(10,id)
(11,insert_entry(q, prev, qe, &pos)
(12,if ((status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty)
(13,chan)
(14,q)
(15,return res;)
(16,if (!inserted && (qe->prio >= cur->prio)
(17,maxlen)
(18,q)
(19,pos)
(20,LOG_NOTICE)
(21,chan)
(22,*reason = QUEUE_JOINEMPTY)
(23,0)
(24,qe->pos)
(25,status)
(26,q)
(27,qe)
(28,cur)
(29,S_COR(ast_channel_caller(qe->chan)
(30,moh)
(31,ao2_lock(q)
(32,pos)
(33,sizeof(qe->context)
(34,name)
(35,count)
(36,*reason)
(37,str)
(38,number)
(39,context)
(40,q)
(41,reason)
(42,qe->chan)
(43,*reason = QUEUE_FULL)
(44,insert_entry(q, prev, qe, &pos)
(45,chan)
(46,AST_DEVICE_RINGING)
(47,q)
(48,*prev = NULL)
(49,ast_channel_connected(qe->chan)
(50,qe->prio >= cur->prio)
(51,qe)
(52,q)
(53,return res;)
(54,ast_channel_connected(qe->chan)
(55,inserted = 1)
(56,ast_channel_uniqueid(qe->chan)
(57,name)
(58,moh)
(59,pos)
(60,prev = cur)
(61,qe->min_penalty)
(62,ast_channel_caller(qe->chan)
(63,pos)
(64,cur)
(65,"Done with realtime queue")
(66,"unknown")
(67,if (position < pos)
(68,inserted = 0)
(69,*reason == QUEUE_UNKNOWN)
(70,if (!inserted)
(71,struct queue_ent *qe)
(72,ast_channel_caller(qe->chan)
(73,qe->moh)
(74,q)
(75,prev = NULL)
(76,chan)
(77,q->maxlen)
(78,cur->pos = ++pos)
(79,pos)
(80,cur)
(81,)
(82,id)
(83,reason)
(84,NULL)
(85,*reason)
(86,res = 0)
(87,ast_channel_connected(qe->chan)
(88,pos)
(89,++pos)
(90,QUEUE_UNKNOWN)
(91,enum queue_result *reason)
(92,chan)
(93,ast_channel_caller(qe->chan)
(94,qe->chan)
(95,0)
(96,while (cur)
(97,ast_copy_string(qe->moh, q->moh, sizeof(qe->moh)
(98,id)
(99,q)
(100,pos)
(101,queue_t_unref(q, "Done with realtime queue")
(102,1)
(103,qe)
(104,)
(105,maxlen)
(106,cur->pos)
(107,qe)
(108,prev)
(109,res)
(110,max_penalty)
(111,next)
(112,position)
(113,q)
(114,q->count)
(115,q->joinempty)
(116,res)
(117,qe)
(118,EVENT_FLAG_CALL)
(119,cur)
(120,!inserted)
(121,ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "Queue:%s", q->name)
(122,prio)
(123,qe)
(124,ast_channel_caller(qe->chan)
(125,q)
(126,ast_channel_connected(qe->chan)
(127,qe)
(128,"unknown")
(129,ast_channel_connected(qe->chan)
(130,qe->chan)
(131,qe->chan)
(132,ast_copy_string(qe->announce, q->announce, sizeof(qe->announce)
(133,q->moh)
(134,ast_channel_caller(qe->chan)
(135,q->maxlen)
(136,cur)
(137,q)
(138,number)
(139,qe->chan)
(140,ast_channel_connected(qe->chan)
(141,q)
(142,if (q->count == 1)
(143,ast_channel_connected(qe->chan)
(144,cur->next)
(145,joinempty)
(146,inserted)
(147,q)
(148,cur = cur->next)
(149,chan)
(150,0)
(151,)
(152,id)
(153,inserted)
(154,qe)
(155,)
(156,announce)
(157,pos)
(158,q)
(159,q)
(160,qe->chan)
(161,qe)
(162,announce)
(163,"Asked to be inserted at position %d but forced into position %d due to higher priority callers\\n")
(164,position && (position <= pos + 1)
(165,ast_channel_connected(qe->chan)
(166,qe->chan)
(167,prev)
(168,qe)
(169,chan)
(170,qe)
(171,prev)
(172,cur->prio)
(173,queue_t_unref(q, "Done with realtime queue")
(174,position)
(175,ast_copy_string(qe->context, q->context, sizeof(qe->context)
(176,ast_channel_connected(qe->chan)
(177,get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty)
(178,cur->prio)
(179,q->count)
(180,qe)
(181,cur)
(182,ast_channel_caller(qe->chan)
(183,status)
(184,QUEUE_FULL)
(185,1)
(186,QUEUE_UNKNOWN)
(187,pos)
(188,&pos)
(189,count)
(190,!inserted)
(191,0)
(192,inserted)
(193,ast_channel_caller(qe->chan)
(194,ast_debug(1, "Queue \'%s\' Join, Channel \'%s\', Position \'%d\'\\n", q->name, ast_channel_name(qe->chan)
(195,status = get_member_status(q, qe->max_penalty, qe->min_penalty, q->joinempty)
(196,chan)
(197,qe->chan)
(198,qe)
(199,name)
(200,position <= pos + 1)
(201,str)
(202,pos + 1)
(203,q)
(204,NULL)
(205,announce)
(206,q)
(207,ast_channel_caller(qe->chan)
(208,ast_channel_caller(qe->chan)
(209,AST_DEVSTATE_CACHABLE)
(210,ast_channel_connected(qe->chan)
(211,char *queuename)
(212,q->name)
(213,pos)
(214,qe->max_penalty)
(215,head)
(216,qe)
(217,!(q = find_load_queue_rt_friendly(queuename)
(218,inserted = 0)
(219,*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)
(220,q->context)
(221,qe)
(222,ast_channel_name(qe->chan)
(223,reason)
(224,name)
(225,RET)
(226,res = -1)
(227,q->count == 1)
(228,chan)
(229,if (!(q = find_load_queue_rt_friendly(queuename)
(230,count)
(231,prev)
(232,prio)
(233,if (q->joinempty)
(234,q)
(235,qe->context)
(236,q)
(237,"Queue \'%s\' Join, Channel \'%s\', Position \'%d\'\\n")
(238,insert_entry(q, prev, qe, &pos)
(239,position)
(240,qe)
(241,q)
(242,find_load_queue_rt_friendly(queuename)
(243,ast_channel_caller(qe->chan)
(244,valid)
(245,chan)
(246,ast_channel_connected(qe->chan)
(247,name)
(248,id)
(249,prev)
(250,&pos)
(251,ao2_unlock(q)
(252,return res;)
(253,res)
(254,qe->announce)
(255,qe->announce)
(256,S_COR(ast_channel_connected(qe->chan)
(257,q)
(258,res)
(259,qe->prio > cur->prio)
(260,)
(261,q->announce)
(262,id)
(263,id)
(264,inserted)
(265,ast_channel_connected(qe->chan)
(266,"Channel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Queue: %s\\r\\n"\n\\n\\t\\t\\t"Position: %d\\r\\n"\n\\n\\t\\t\\t"Count: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n")
(267,str)
(268,name)
(269,(!inserted)
(270,sizeof(qe->announce)
(271,chan)
(272,ast_channel_caller(qe->chan)
(273,reason)
(274,prio)
(275,)
(276,qe)
(277,*reason)
(278,q)
(279,qe->moh)
(280,ast_channel_connected(qe->chan)
(281,context)
(282,str)
(283,1)
(284,pos)
(285,"Join")
(286,qe->pos)
(287,qe->chan)
(288,qe->chan)
(289,0)
(290,)
(291,prev)
(292,*reason == QUEUE_UNKNOWN)
(293,prev)
(294,position)
(295,ast_channel_caller(qe->chan)
(296,)
(297,qe)
(298,QUEUE_JOINEMPTY)
(299,queuename)
(300,ast_channel_connected(qe->chan)
(301,qe)
(302,qe)
(303,!inserted)
(304,number)
(305,ast_channel_caller(qe->chan)
(306,qe->prio)
(307,*reason)
(308,"unknown")
(309,valid)
(310,status)
(311,q->name)
(312,q->name)
(313,cur)
(314,if (*reason == QUEUE_UNKNOWN && q->maxlen && (q->count >= q->maxlen)
(315,status = 0)
(316,qe->prio)
(317,ast_channel_name(qe->chan)
(318,qe)
(319,res)
(320,ast_channel_caller(qe->chan)
(321,qe)
(322,1)
(323,qe)
(324,ast_channel_caller(qe->chan)
(325,&pos)
(326,valid)
(327,1)
(328,S_COR(ast_channel_connected(qe->chan)
(329,position < pos)
(330,q->count++)
(331,res)
(332,qe)
(333,-1)
(334,min_penalty)
(335,)
(336,ast_log(LOG_NOTICE, "Asked to be inserted at position %d but forced into position %d due to higher priority callers\\n", position, pos)
(337,q)
(338,ast_channel_caller(qe->chan)
(339,number)
(340,cur)
(341,ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Join",\n\\n\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Queue: %s\\r\\n"\n\\n\\t\\t\\t"Position: %d\\r\\n"\n\\n\\t\\t\\t"Count: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n",\n\\n\\t\\t\\tast_channel_name(qe->chan)
(342,"unknown")
(343,chan)
(344,)
(345,q->count >= q->maxlen)
(346,inserted)
(347,sizeof(qe->moh)
(348,S_COR(ast_channel_caller(qe->chan)
(349,cur = q->head)
(350,context)
(351,inserted)
(352,"Done with realtime queue")
(353,q)
(354,qe)
(355,q->joinempty)
(356,q)
(357,1)
(358,joinempty)
(359,name)
(360,count)
(361,valid)
(362,qe)
(363,qe->chan)
(364,(qe->prio >= cur->prio)
(365,moh)
(366,ao2_unlock(q)
(367,)
(368,q = find_load_queue_rt_friendly(queuename)
(369,int position)
(370,qe)
(371,q->maxlen && (q->count >= q->maxlen)
(372,pos)
(373,inserted = 1)
(374,inserted)
(375,ast_channel_connected(qe->chan)
(376,"Queue:%s")
(377,prio)
(378,qe->context)
(379,ast_channel_connected(qe->chan)
(380,q)
(381,!inserted && (qe->prio >= cur->prio)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^