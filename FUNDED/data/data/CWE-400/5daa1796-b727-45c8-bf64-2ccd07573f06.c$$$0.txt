-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_14_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalFive==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
36,39
36,40
36,41
36,42
36,43
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
52,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
63,64
64,65
64,66
65,66
67,68
67,69
67,70
68,69
70,71
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
110,111
112,113
112,114
112,115
112,116
112,117
113,114
115,116
117,118
118,119
118,120
121,122
121,123
122,123
124,125
126,127
128,129
129,130
130,131
130,132
131,132
134,135
134,136
135,136
137,138
138,139
139,140
139,141
140,141
142,143
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,40,42,44,48,50,51,54,57,59,60,62,66,69,71,72,76,78,83,84,89,90,93,97,98,100,103,109,111,114,116,119,120,123,125,127,132,133,136,141,143
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
64,65
64,66
74,75
74,76
87,88
87,89
91,92
91,93
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_14_bad(){    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_14_bad()
CWE400_Resource_Exhaustion__rand_fwrite_14_bad
{    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(40,26,0)
(1,19,0)
(32,23,0)
(52,71,0)
(51,52,0)
(27,29,0)
(29,4,0)
(57,5,0)
(15,13,0)
(38,1,0)
(5,42,0)
(55,51,0)
(35,34,0)
(56,4,0)
(16,68,0)
(34,52,0)
(50,26,0)
(60,27,0)
(30,51,0)
(58,45,0)
(25,45,0)
(19,67,0)
(65,58,0)
(33,52,0)
(63,19,0)
(6,23,0)
(72,52,0)
(27,45,0)
(53,33,0)
(70,4,0)
(9,12,0)
(3,15,0)
(45,12,0)
(21,24,0)
(74,47,0)
(49,29,0)
(20,52,0)
(62,1,0)
(46,4,0)
(22,31,0)
(41,52,0)
(50,5,0)
(27,23,0)
(5,19,0)
(69,67,0)
(23,54,0)
(66,67,0)
(36,37,0)
(5,37,0)
(27,60,0)
(5,50,0)
(28,52,0)
(19,52,0)
(43,74,0)
(10,52,0)
(7,70,0)
(75,5,0)
(67,33,0)
(11,34,0)
(74,19,0)
(0,12,0)
(29,27,0)
(18,33,0)
(2,68,0)
(44,39,0)
(42,5,0)
(23,6,0)
(17,27,0)
(45,58,0)
(37,5,0)
(61,39,0)
(31,8,0)
(14,42,0)
(48,12,0)
(73,52,0)
(26,50,0)
(67,19,0)
(64,59,1)
(31,22,1)
(56,31,1)
(26,40,1)
(22,1,1)
(44,45,1)
(74,43,1)
(67,33,1)
(6,32,1)
(27,17,1)
(1,19,1)
(34,35,1)
(39,61,1)
(57,26,1)
(70,7,1)
(45,58,1)
(11,51,1)
(32,39,1)
(5,37,1)
(65,25,1)
(64,68,1)
(64,74,1)
(16,23,1)
(36,42,1)
(38,19,1)
(7,50,1)
(74,19,1)
(37,36,1)
(35,11,1)
(33,18,1)
(40,29,1)
(62,38,1)
(29,4,1)
(2,16,1)
(18,53,1)
(1,62,1)
(69,63,1)
(43,59,1)
(63,33,1)
(17,49,1)
(46,56,1)
(14,57,1)
(66,69,1)
(4,46,1)
(27,60,1)
(23,6,1)
(75,37,1)
(56,1,1)
(50,26,1)
(42,14,1)
(27,23,1)
(55,30,1)
(50,5,1)
(27,45,1)
(59,29,1)
(30,68,1)
(51,55,1)
(7,15,1)
(49,70,1)
(5,19,1)
(58,65,1)
(15,3,1)
(67,66,1)
(53,34,1)
(5,42,1)
(68,2,1)
(70,4,1)
(5,75,1)
(16,39,1)
(19,67,1)
(3,50,1)
(29,27,1)
(61,44,1)
(49,4,1)
(17,29,2)
(74,19,2)
(27,60,2)
(22,1,2)
(7,29,2)
(51,68,2)
(19,68,2)
(70,4,2)
(27,23,2)
(38,68,2)
(27,45,2)
(27,29,2)
(36,29,2)
(63,68,2)
(74,59,2)
(27,68,2)
(29,4,2)
(1,19,2)
(55,68,2)
(11,68,2)
(59,68,2)
(50,5,2)
(45,58,2)
(40,29,2)
(50,26,2)
(6,39,2)
(29,27,2)
(50,29,2)
(69,68,2)
(56,68,2)
(31,1,2)
(23,6,2)
(14,29,2)
(30,68,2)
(1,68,2)
(62,68,2)
(53,68,2)
(66,68,2)
(4,68,2)
(70,29,2)
(3,50,2)
(37,29,2)
(75,29,2)
(5,42,2)
(33,68,2)
(5,19,2)
(29,29,2)
(32,39,2)
(5,29,2)
(26,29,2)
(23,39,2)
(57,29,2)
(5,37,2)
(35,68,2)
(49,68,2)
(42,29,2)
(18,68,2)
(29,68,2)
(15,50,2)
(43,59,2)
(67,68,2)
(46,68,2)
(49,29,2)
(17,68,2)
(19,67,2)
(67,33,2)
(34,68,2)
-----------------------------------
(0,if(globalFive==5)
(1,pFile == NULL)
(2,5)
(3,1)
(4,i = 0)
(5,fwrite(SENTENCE, sizeof(char)
(6,RAND32()
(7,i)
(8,)
(9,if(globalFive==5)
(10,if (pFile == NULL)
(11,pFile)
(12,)
(13,)
(14,char)
(15,exit(1)
(16,globalFive)
(17,count)
(18,"output_bad.txt")
(19,pFile = fopen(filename, "w+")
(20,if (pFile)
(21,if (strlen(SENTENCE)
(22,1)
(23,count = RAND32()
(24,)
(25,count)
(26,strlen(SENTENCE)
(27,(size_t)
(28,pFile)
(29,i < (size_t)
(30,i)
(31,exit(1)
(32,count)
(33,*filename = "output_bad.txt")
(34,*pFile = NULL)
(35,NULL)
(36,SENTENCE)
(37,strlen(SENTENCE)
(38,pFile)
(39,globalFive==5)
(40,SENTENCE)
(41,filename)
(42,sizeof(char)
(43,pFile)
(44,globalFive)
(45,count = -1)
(46,0)
(47,)
(48,count)
(49,i)
(50,strlen(SENTENCE)
(51,i = 0)
(52,)
(53,filename)
(54,)
(55,0)
(56,i)
(57,SENTENCE)
(58,-1)
(59,pFile)
(60,size_t)
(61,5)
(62,NULL)
(63,pFile)
(64,RET)
(65,1)
(66,"w+")
(67,fopen(filename, "w+")
(68,globalFive==5)
(69,filename)
(70,i++)
(71,)
(72,i)
(73,for (i = 0; i < (size_t)
(74,fclose(pFile)
(75,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^