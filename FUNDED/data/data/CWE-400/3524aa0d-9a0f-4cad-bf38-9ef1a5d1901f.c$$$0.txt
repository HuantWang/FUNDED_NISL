-----label-----
0
-----code-----
static int ravb_ring_init(struct net_device *ndev, int q)
{
	struct ravb_private *priv = netdev_priv(ndev);
	int num_tx_desc = priv->num_tx_desc;
	struct sk_buff *skb;
	int ring_size;
	int i;

	/* Allocate RX and TX skb rings */
	priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],
				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);
	priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],
				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);
	if (!priv->rx_skb[q] || !priv->tx_skb[q])
		goto error;

	for (i = 0; i < priv->num_rx_ring[q]; i++) {
		skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1);
		if (!skb)
			goto error;
		ravb_set_buffer_align(skb);
		priv->rx_skb[q][i] = skb;
	}

	if (num_tx_desc > 1) {
		/* Allocate rings for the aligned buffers */
		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +
					    DPTR_ALIGN - 1, GFP_KERNEL);
		if (!priv->tx_align[q])
			goto error;
	}

	/* Allocate all RX descriptors. */
	ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);
	priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,
					      &priv->rx_desc_dma[q],
					      GFP_KERNEL);
	if (!priv->rx_ring[q])
		goto error;

	priv->dirty_rx[q] = 0;

	/* Allocate all TX descriptors. */
	ring_size = sizeof(struct ravb_tx_desc) *
		    (priv->num_tx_ring[q] * num_tx_desc + 1);
	priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,
					      &priv->tx_desc_dma[q],
					      GFP_KERNEL);
	if (!priv->tx_ring[q])
		goto error;

	return 0;

error:
	ravb_ring_free(ndev, q);

	return -ENOMEM;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
49,50
51,52
52,53
52,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
63,64
65,66
65,67
65,68
65,69
66,67
68,69
68,70
69,70
69,71
70,71
73,74
75,76
76,77
77,78
78,79
78,80
79,80
79,81
80,81
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
96,97
96,98
96,99
96,100
97,98
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
118,119
118,120
119,120
119,121
120,121
121,122
121,123
122,123
122,124
123,124
126,127
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
138,139
138,140
138,141
138,142
139,140
140,141
140,142
141,142
144,145
144,146
145,146
147,148
147,149
148,149
148,150
149,150
152,153
154,155
155,156
157,158
157,159
157,160
157,161
158,159
159,160
159,161
160,161
162,163
162,164
162,165
163,164
165,166
167,168
167,169
168,169
168,170
169,170
171,172
174,175
174,176
175,176
176,177
178,179
180,181
181,182
181,183
182,183
184,185
186,187
187,188
187,189
188,189
188,190
189,190
189,191
190,191
190,192
191,192
194,195
196,197
198,199
200,201
200,202
201,202
201,203
202,203
205,206
205,207
206,207
207,208
207,209
208,209
208,210
209,210
209,211
210,211
213,214
215,216
215,217
215,218
216,217
218,219
218,220
219,220
219,221
220,221
220,222
221,222
223,224
223,225
224,225
224,226
225,226
228,229
230,231
233,234
235,236
235,237
236,237
237,238
237,239
238,239
238,240
239,240
242,243
244,245
246,247
247,248
247,249
248,249
250,251
250,252
251,252
252,253
252,254
253,254
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
263,264
266,267
267,268
267,269
268,269
268,270
269,270
269,271
270,271
273,274
275,276
275,277
275,278
275,279
275,280
276,277
278,279
278,280
279,280
279,281
280,281
284,285
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
296,297
296,298
297,298
298,299
298,300
299,300
299,301
300,301
303,304
305,306
307,308
308,309
308,310
309,310
309,311
310,311
310,312
311,312
314,315
317,318
318,319
318,320
319,320
321,322
321,323
322,323
323,324
323,325
324,325
327,328
328,329
328,330
329,330
329,331
330,331
330,332
331,332
331,333
332,333
335,336
337,338
340,341
341,342
341,343
342,343
342,344
343,344
343,345
344,345
347,348
349,350
349,351
349,352
349,353
349,354
350,351
352,353
352,354
353,354
353,355
354,355
358,359
360,361
361,362
361,363
362,363
362,364
363,364
366,367
368,369
370,371
370,372
371,372
372,373
372,374
373,374
373,375
374,375
377,378
379,380
381,382
383,384
383,385
385,386
386,387
386,388
386,389
387,388
389,390
391,392
393,394
394,395
395,396
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,31,33,37,38,42,44,45,48,50,53,55,61,62,64,67,71,72,74,81,82,84,86,92,93,95,98,102,103,105,112,113,115,117,124,125,127,132,133,135,137,142,143,146,150,151,153,156,161,164,166,170,172,173,177,179,183,185,192,193,195,197,199,203,204,211,212,214,217,222,226,227,229,231,232,234,240,241,243,245,249,254,255,261,262,264,265,271,272,274,277,281,282,283,285,290,291,293,295,301,302,304,306,312,313,315,316,320,325,326,333,334,336,338,339,345,346,348,351,355,356,357,359,364,365,367,369,375,376,378,380,382,384,388,390,392,396
-----computeFrom-----
57,58
57,59
88,89
88,90
119,120
119,121
140,141
140,142
144,145
144,146
159,160
159,161
167,168
167,169
168,169
168,170
187,188
187,189
201,202
201,203
207,208
207,209
218,219
218,220
219,220
219,221
220,221
220,222
247,248
247,249
250,251
250,252
257,258
257,259
267,268
267,269
308,309
308,310
318,319
318,320
321,322
321,323
328,329
328,330
329,330
329,331
341,342
341,343
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static int ravb_ring_init(struct net_device *ndev, int q){	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	struct sk_buff *skb;	int ring_size;	int i;	/* Allocate RX and TX skb rings */	priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);	priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);	if (!priv->rx_skb[q] || !priv->tx_skb[q])		goto error;	for (i = 0; i < priv->num_rx_ring[q]; i++) {		skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}	if (num_tx_desc > 1) {		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}	/* Allocate all RX descriptors. */	ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);	priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL);	if (!priv->rx_ring[q])		goto error;	priv->dirty_rx[q] = 0;	/* Allocate all TX descriptors. */	ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1);	priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL);	if (!priv->tx_ring[q])		goto error;	return 0;error:	ravb_ring_free(ndev, q);	return -ENOMEM;}
static int
ravb_ring_init(struct net_device *ndev, int q)
ravb_ring_init
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
int q
int
q
q
{	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	struct sk_buff *skb;	int ring_size;	int i;	/* Allocate RX and TX skb rings */	priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);	priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);	if (!priv->rx_skb[q] || !priv->tx_skb[q])		goto error;	for (i = 0; i < priv->num_rx_ring[q]; i++) {		skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}	if (num_tx_desc > 1) {		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}	/* Allocate all RX descriptors. */	ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);	priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL);	if (!priv->rx_ring[q])		goto error;	priv->dirty_rx[q] = 0;	/* Allocate all TX descriptors. */	ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1);	priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL);	if (!priv->tx_ring[q])		goto error;	return 0;error:	ravb_ring_free(ndev, q);	return -ENOMEM;}
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private
ravb_private
*priv = netdev_priv(ndev)
*
priv
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
int num_tx_desc = priv->num_tx_desc;
int num_tx_desc = priv->num_tx_desc;
int
num_tx_desc = priv->num_tx_desc
num_tx_desc
= priv->num_tx_desc
priv->num_tx_desc
priv
priv
num_tx_desc
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
int ring_size;
int ring_size;
int
ring_size
ring_size
int i;
int i;
int
i
i
priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);
priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL)
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL)
kcalloc
kcalloc
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
sizeof(*priv->rx_skb[q])
(*priv->rx_skb[q])
*priv->rx_skb[q]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
GFP_KERNEL
GFP_KERNEL
priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);
priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL)
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL)
kcalloc
kcalloc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
sizeof(*priv->tx_skb[q])
(*priv->tx_skb[q])
*priv->tx_skb[q]
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
GFP_KERNEL
GFP_KERNEL
if (!priv->rx_skb[q] || !priv->tx_skb[q])		goto error;
!priv->rx_skb[q] || !priv->tx_skb[q]
!priv->rx_skb[q]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
!priv->tx_skb[q]
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
goto error;
error
for (i = 0; i < priv->num_rx_ring[q]; i++) {		skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
{		skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}
skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1);
skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1)
skb
skb
netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1)
netdev_alloc_skb
netdev_alloc_skb
ndev
ndev
RX_BUF_SZ + RAVB_ALIGN - 1
RX_BUF_SZ + RAVB_ALIGN
RX_BUF_SZ
RX_BUF_SZ
RAVB_ALIGN
RAVB_ALIGN
1
if (!skb)			goto error;
!skb
skb
skb
goto error;
error
ravb_set_buffer_align(skb);
ravb_set_buffer_align(skb)
ravb_set_buffer_align
ravb_set_buffer_align
skb
skb
priv->rx_skb[q][i] = skb;
priv->rx_skb[q][i] = skb
priv->rx_skb[q][i]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
i
i
skb
skb
if (num_tx_desc > 1) {		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}
num_tx_desc > 1
num_tx_desc
num_tx_desc
1
{		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}
priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);
priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL)
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL)
kmalloc
kmalloc
DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1
DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN
DPTR_ALIGN * priv->num_tx_ring[q]
DPTR_ALIGN
DPTR_ALIGN
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
DPTR_ALIGN
DPTR_ALIGN
1
GFP_KERNEL
GFP_KERNEL
if (!priv->tx_align[q])			goto error;
!priv->tx_align[q]
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
goto error;
error
ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);
ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1)
ring_size
ring_size
sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1)
sizeof(struct ravb_ex_rx_desc)
struct ravb_ex_rx_desc
struct ravb_ex_rx_desc
ravb_ex_rx_desc

(priv->num_rx_ring[q] + 1)
priv->num_rx_ring[q] + 1
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
1
priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL);
priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL)
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL)
dma_alloc_coherent
dma_alloc_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
&priv->rx_desc_dma[q]
priv->rx_desc_dma[q]
priv->rx_desc_dma
priv
priv
rx_desc_dma
q
q
GFP_KERNEL
GFP_KERNEL
if (!priv->rx_ring[q])		goto error;
!priv->rx_ring[q]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
goto error;
error
priv->dirty_rx[q] = 0;
priv->dirty_rx[q] = 0
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
0
ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1);
ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1)
ring_size
ring_size
sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1)
sizeof(struct ravb_tx_desc)
struct ravb_tx_desc
struct ravb_tx_desc
ravb_tx_desc

(priv->num_tx_ring[q] * num_tx_desc + 1)
priv->num_tx_ring[q] * num_tx_desc + 1
priv->num_tx_ring[q] * num_tx_desc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
num_tx_desc
num_tx_desc
1
priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL);
priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL)
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL)
dma_alloc_coherent
dma_alloc_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
&priv->tx_desc_dma[q]
priv->tx_desc_dma[q]
priv->tx_desc_dma
priv
priv
tx_desc_dma
q
q
GFP_KERNEL
GFP_KERNEL
if (!priv->tx_ring[q])		goto error;
!priv->tx_ring[q]
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
goto error;
error
return 0;
0
error:	ravb_ring_free(ndev, q);
error
ravb_ring_free(ndev, q);
ravb_ring_free(ndev, q)
ravb_ring_free
ravb_ring_free
ndev
ndev
q
q
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
-----joern-----
(208,226,0)
(121,195,0)
(33,211,0)
(212,237,0)
(218,127,0)
(147,164,0)
(169,178,0)
(112,239,0)
(36,195,0)
(101,96,0)
(237,117,0)
(106,75,0)
(161,127,0)
(182,127,0)
(97,127,0)
(139,87,0)
(167,194,0)
(100,193,0)
(209,100,0)
(10,12,0)
(219,198,0)
(60,228,0)
(73,18,0)
(130,127,0)
(215,64,0)
(91,76,0)
(56,198,0)
(88,166,0)
(46,19,0)
(70,14,0)
(211,33,0)
(77,218,0)
(131,48,0)
(115,168,0)
(3,194,0)
(142,1,0)
(192,83,0)
(35,86,0)
(228,144,0)
(137,146,0)
(4,182,0)
(60,127,0)
(100,21,0)
(106,27,0)
(141,56,0)
(150,93,0)
(105,139,0)
(137,44,0)
(189,1,0)
(207,114,0)
(232,64,0)
(5,1,0)
(43,1,0)
(57,81,0)
(32,95,0)
(139,1,0)
(122,70,0)
(74,21,0)
(87,195,0)
(43,97,0)
(146,1,0)
(184,221,0)
(75,84,0)
(239,108,0)
(110,77,0)
(204,14,0)
(228,118,0)
(59,112,0)
(12,127,0)
(74,144,0)
(40,76,0)
(199,1,0)
(72,186,0)
(128,12,0)
(180,127,0)
(41,195,0)
(154,29,0)
(53,97,0)
(168,115,0)
(64,117,0)
(136,218,0)
(228,195,0)
(116,91,0)
(27,195,0)
(78,96,0)
(139,41,0)
(152,1,0)
(64,195,0)
(114,127,0)
(171,128,0)
(39,116,0)
(202,87,0)
(120,81,0)
(163,193,0)
(126,83,0)
(79,211,0)
(96,36,0)
(49,83,0)
(31,70,0)
(170,1,0)
(63,178,0)
(124,52,0)
(52,204,0)
(62,133,0)
(119,70,0)
(211,198,0)
(70,9,0)
(226,111,0)
(77,195,0)
(128,195,0)
(167,33,0)
(213,229,0)
(108,239,0)
(47,204,0)
(36,9,0)
(139,73,0)
(178,127,0)
(19,127,0)
(188,147,0)
(89,60,0)
(73,195,0)
(203,173,0)
(85,199,0)
(237,84,0)
(102,133,0)
(223,182,0)
(9,70,0)
(83,118,0)
(190,137,0)
(23,195,0)
(94,237,0)
(25,139,0)
(118,1,0)
(230,208,0)
(143,25,0)
(48,69,0)
(128,235,0)
(217,27,0)
(54,43,0)
(153,130,0)
(115,195,0)
(3,33,0)
(232,73,0)
(12,128,0)
(64,215,0)
(184,43,0)
(32,19,0)
(237,108,0)
(80,37,0)
(7,120,0)
(92,76,0)
(218,77,0)
(126,195,0)
(117,237,0)
(48,76,0)
(82,161,0)
(126,178,0)
(90,202,0)
(20,232,0)
(240,147,0)
(173,127,0)
(165,184,0)
(52,127,0)
(96,127,0)
(232,91,0)
(0,180,0)
(179,112,0)
(239,195,0)
(180,23,0)
(91,167,0)
(213,123,0)
(156,18,0)
(216,219,0)
(18,73,0)
(139,91,0)
(123,213,0)
(116,182,0)
(151,193,0)
(148,137,0)
(81,195,0)
(127,161,0)
(93,75,0)
(204,195,0)
(127,1,0)
(84,1,0)
(226,195,0)
(114,41,0)
(83,126,0)
(175,87,0)
(148,173,0)
(14,70,0)
(44,222,0)
(148,195,0)
(186,76,0)
(37,43,0)
(164,86,0)
(139,115,0)
(128,117,0)
(14,1,0)
(199,195,0)
(95,192,0)
(173,148,0)
(145,94,0)
(185,177,0)
(57,127,0)
(232,87,0)
(109,219,0)
(70,119,0)
(201,106,0)
(71,126,0)
(66,56,0)
(197,60,0)
(21,100,0)
(42,1,0)
(229,107,0)
(214,19,0)
(38,158,0)
(105,232,0)
(231,23,0)
(144,228,0)
(146,137,0)
(123,1,0)
(34,29,0)
(199,198,0)
(103,115,0)
(176,208,0)
(84,75,0)
(161,198,0)
(115,118,0)
(36,96,0)
(6,57,0)
(237,94,0)
(69,48,0)
(23,184,0)
(79,166,0)
(116,195,0)
(139,64,0)
(181,228,0)
(112,127,0)
(233,168,0)
(95,32,0)
(157,215,0)
(182,116,0)
(121,222,0)
(140,32,0)
(67,73,0)
(86,34,0)
(91,116,0)
(238,167,0)
(93,150,0)
(133,27,0)
(50,12,0)
(9,36,0)
(58,1,0)
(118,83,0)
(129,226,0)
(81,120,0)
(77,110,0)
(41,34,0)
(26,1,0)
(206,1,0)
(205,79,0)
(219,94,0)
(86,164,0)
(41,114,0)
(83,192,0)
(193,127,0)
(100,195,0)
(222,121,0)
(75,93,0)
(134,97,0)
(27,106,0)
(208,127,0)
(226,208,0)
(81,57,0)
(116,146,0)
(87,14,0)
(228,60,0)
(108,237,0)
(183,211,0)
(94,219,0)
(111,1,0)
(210,123,0)
(192,95,0)
(225,33,0)
(32,195,0)
(17,168,0)
(69,195,0)
(34,86,0)
(55,69,0)
(232,115,0)
(113,81,0)
(213,221,0)
(236,36,0)
(44,137,0)
(104,119,0)
(125,218,0)
(193,100,0)
(22,158,0)
(196,1,0)
(30,130,0)
(200,57,0)
(172,221,0)
(232,226,0)
(158,127,0)
(120,164,0)
(27,133,0)
(28,114,0)
(119,56,0)
(227,199,0)
(121,158,0)
(51,64,0)
(97,43,0)
(168,127,0)
(164,120,0)
(160,148,0)
(139,226,0)
(177,33,0)
(155,202,0)
(33,194,0)
(158,121,0)
(68,84,0)
(117,1,0)
(70,123,0)
(132,41,0)
(232,41,0)
(234,237,0)
(87,202,0)
(232,1,0)
(178,126,0)
(15,173,0)
(204,13,0)
(184,23,0)
(239,112,0)
(138,91,0)
(19,32,0)
(224,52,0)
(98,239,0)
(235,128,0)
(215,127,0)
(162,111,0)
(211,79,0)
(11,3,0)
(202,127,0)
(99,215,0)
(222,44,0)
(21,74,0)
(107,229,0)
(69,130,0)
(133,127,0)
(56,119,0)
(65,127,0)
(130,69,0)
(191,166,0)
(13,204,0)
(137,148,0)
(18,127,0)
(100,146,0)
(166,79,0)
(23,180,0)
(77,34,0)
(159,121,0)
(204,52,0)
(187,194,0)
(61,37,0)
(16,18,0)
(164,147,0)
(73,146,0)
(220,180,0)
(75,106,0)
(45,1,0)
(221,184,0)
(229,213,0)
(135,77,0)
(144,74,0)
(221,213,0)
(143,199,1)
(13,204,1)
(69,55,1)
(204,52,1)
(213,221,1)
(3,33,1)
(88,191,1)
(232,64,1)
(0,229,1)
(32,19,1)
(228,60,1)
(40,92,1)
(208,230,1)
(203,73,1)
(131,76,1)
(52,124,1)
(98,112,1)
(100,195,1)
(138,116,1)
(239,98,1)
(33,211,1)
(140,19,1)
(73,195,1)
(77,218,1)
(139,87,1)
(91,76,1)
(239,112,1)
(225,48,1)
(124,224,1)
(128,195,1)
(139,25,1)
(213,229,1)
(116,182,1)
(77,195,1)
(199,198,1)
(237,94,1)
(204,47,1)
(100,209,1)
(137,190,1)
(37,61,1)
(32,140,1)
(148,195,1)
(34,86,1)
(204,14,1)
(114,127,1)
(185,33,1)
(59,234,1)
(177,185,1)
(55,130,1)
(91,138,1)
(228,181,1)
(239,195,1)
(233,146,1)
(94,145,1)
(79,166,1)
(148,173,1)
(54,127,1)
(227,85,1)
(57,200,1)
(101,31,1)
(132,114,1)
(168,17,1)
(218,127,1)
(69,130,1)
(153,131,1)
(85,8,1)
(126,178,1)
(173,127,1)
(186,76,1)
(108,239,1)
(46,214,1)
(232,115,1)
(235,128,1)
(160,173,1)
(131,186,1)
(226,208,1)
(120,81,1)
(116,195,1)
(158,22,1)
(221,184,1)
(222,121,1)
(106,201,1)
(179,59,1)
(75,93,1)
(99,157,1)
(36,96,1)
(200,6,1)
(70,9,1)
(64,215,1)
(118,83,1)
(36,236,1)
(36,195,1)
(134,54,1)
(228,195,1)
(192,95,1)
(112,127,1)
(27,217,1)
(23,180,1)
(232,73,1)
(71,178,1)
(49,192,1)
(184,23,1)
(232,226,1)
(130,127,1)
(119,104,1)
(230,176,1)
(214,126,1)
(146,137,1)
(89,21,1)
(204,195,1)
(97,53,1)
(81,195,1)
(103,168,1)
(48,69,1)
(83,192,1)
(18,16,1)
(220,0,1)
(183,225,1)
(178,127,1)
(237,108,1)
(67,18,1)
(161,198,1)
(113,57,1)
(60,127,1)
(231,180,1)
(172,184,1)
(117,237,1)
(232,20,1)
(129,208,1)
(164,120,1)
(94,219,1)
(149,110,1)
(102,93,1)
(51,215,1)
(180,127,1)
(232,87,1)
(155,123,1)
(83,126,1)
(41,114,1)
(221,172,1)
(128,12,1)
(181,60,1)
(219,198,1)
(96,127,1)
(70,119,1)
(100,193,1)
(86,35,1)
(182,127,1)
(69,195,1)
(128,117,1)
(12,127,1)
(91,116,1)
(35,164,1)
(2,235,1)
(237,84,1)
(139,73,1)
(135,218,1)
(39,182,1)
(15,203,1)
(197,89,1)
(166,88,1)
(83,49,1)
(128,171,1)
(106,27,1)
(64,51,1)
(7,41,1)
(104,56,1)
(167,238,1)
(228,118,1)
(207,37,1)
(224,14,1)
(175,202,1)
(110,77,1)
(100,146,1)
(180,220,1)
(141,87,1)
(127,161,1)
(193,127,1)
(82,65,1)
(8,74,1)
(85,24,1)
(22,38,1)
(211,198,1)
(48,76,1)
(137,148,1)
(223,3,1)
(11,177,1)
(215,99,1)
(156,43,1)
(176,235,1)
(44,222,1)
(211,79,1)
(74,144,1)
(24,177,1)
(87,195,1)
(66,141,1)
(186,72,1)
(159,158,1)
(139,91,1)
(137,44,1)
(121,159,1)
(60,197,1)
(105,232,1)
(136,34,1)
(95,32,1)
(28,207,1)
(218,125,1)
(148,160,1)
(9,36,1)
(52,127,1)
(199,195,1)
(145,219,1)
(139,115,1)
(19,46,1)
(178,63,1)
(68,110,1)
(77,34,1)
(17,233,1)
(73,18,1)
(27,133,1)
(157,84,1)
(173,15,1)
(105,139,1)
(80,48,1)
(97,127,1)
(6,7,1)
(237,212,1)
(190,44,1)
(184,165,1)
(240,188,1)
(21,100,1)
(232,91,1)
(188,120,1)
(85,149,1)
(73,67,1)
(232,41,1)
(164,147,1)
(209,193,1)
(56,66,1)
(144,228,1)
(47,52,1)
(114,28,1)
(115,168,1)
(112,179,1)
(116,146,1)
(74,21,1)
(77,135,1)
(23,231,1)
(10,50,1)
(70,123,1)
(167,33,1)
(226,195,1)
(226,129,1)
(16,156,1)
(4,223,1)
(38,148,1)
(139,226,1)
(169,115,1)
(191,205,1)
(72,167,1)
(116,39,1)
(75,106,1)
(111,162,1)
(90,155,1)
(234,94,1)
(19,127,1)
(125,136,1)
(133,62,1)
(238,91,1)
(182,4,1)
(87,202,1)
(121,195,1)
(165,23,1)
(215,127,1)
(27,195,1)
(212,108,1)
(217,133,1)
(93,68,1)
(86,164,1)
(171,12,1)
(81,113,1)
(184,43,1)
(76,40,1)
(23,195,1)
(109,216,1)
(20,13,1)
(126,195,1)
(64,195,1)
(210,111,1)
(151,163,1)
(61,80,1)
(147,240,1)
(130,30,1)
(12,10,1)
(63,169,1)
(62,102,1)
(56,198,1)
(121,158,1)
(219,109,1)
(174,13,1)
(177,33,1)
(161,82,1)
(168,127,1)
(201,27,1)
(37,43,1)
(122,9,1)
(32,195,1)
(133,127,1)
(216,64,1)
(14,70,1)
(119,56,1)
(78,101,1)
(85,174,1)
(81,57,1)
(57,127,1)
(92,74,1)
(93,150,1)
(199,227,1)
(236,96,1)
(162,226,1)
(158,127,1)
(202,90,1)
(18,127,1)
(96,78,1)
(25,143,1)
(193,151,1)
(163,118,1)
(30,153,1)
(84,75,1)
(68,37,1)
(31,119,1)
(205,183,1)
(229,107,1)
(43,97,1)
(208,127,1)
(87,175,1)
(115,103,1)
(123,213,1)
(70,122,1)
(139,64,1)
(53,134,1)
(115,195,1)
(41,132,1)
(3,11,1)
(50,117,1)
(41,195,1)
(139,41,1)
(85,2,1)
(126,71,1)
(202,127,1)
(229,210,1)
(186,76,2)
(234,110,2)
(105,232,2)
(50,110,2)
(193,127,2)
(121,195,2)
(91,116,2)
(143,235,2)
(27,195,2)
(93,37,2)
(232,13,2)
(216,37,2)
(28,37,2)
(51,37,2)
(239,37,2)
(73,18,2)
(85,110,2)
(139,235,2)
(216,110,2)
(118,83,2)
(239,110,2)
(186,177,2)
(23,235,2)
(130,127,2)
(135,37,2)
(43,97,2)
(69,74,2)
(87,195,2)
(217,37,2)
(73,195,2)
(202,127,2)
(24,177,2)
(76,74,2)
(143,177,2)
(44,222,2)
(133,37,2)
(48,69,2)
(145,110,2)
(106,37,2)
(146,137,2)
(86,37,2)
(138,177,2)
(96,235,2)
(232,41,2)
(137,148,2)
(116,146,2)
(83,192,2)
(217,110,2)
(81,195,2)
(0,235,2)
(199,74,2)
(144,21,2)
(77,218,2)
(11,177,2)
(36,96,2)
(88,48,2)
(127,161,2)
(57,37,2)
(2,235,2)
(141,235,2)
(34,86,2)
(19,127,2)
(98,37,2)
(184,235,2)
(133,127,2)
(95,32,2)
(232,87,2)
(210,235,2)
(36,235,2)
(120,37,2)
(128,117,2)
(115,195,2)
(232,64,2)
(12,37,2)
(148,195,2)
(212,37,2)
(115,168,2)
(21,100,2)
(234,37,2)
(99,110,2)
(113,37,2)
(25,177,2)
(13,204,2)
(94,219,2)
(77,37,2)
(208,127,2)
(139,110,2)
(61,48,2)
(85,13,2)
(147,37,2)
(33,211,2)
(139,13,2)
(120,81,2)
(27,133,2)
(143,13,2)
(213,229,2)
(228,60,2)
(129,235,2)
(32,195,2)
(236,235,2)
(25,235,2)
(232,226,2)
(182,127,2)
(108,110,2)
(14,235,2)
(237,108,2)
(100,195,2)
(7,37,2)
(56,235,2)
(20,13,2)
(119,56,2)
(125,37,2)
(167,33,2)
(102,37,2)
(92,74,2)
(229,235,2)
(25,13,2)
(131,74,2)
(77,34,2)
(128,12,2)
(30,177,2)
(68,110,2)
(27,37,2)
(211,198,2)
(74,144,2)
(232,91,2)
(60,127,2)
(128,37,2)
(139,73,2)
(117,110,2)
(84,75,2)
(148,173,2)
(116,195,2)
(69,130,2)
(85,74,2)
(164,147,2)
(199,110,2)
(51,110,2)
(70,235,2)
(199,195,2)
(91,76,2)
(202,235,2)
(110,77,2)
(23,195,2)
(100,193,2)
(199,177,2)
(204,195,2)
(139,41,2)
(227,235,2)
(116,182,2)
(224,235,2)
(84,37,2)
(96,127,2)
(213,235,2)
(30,74,2)
(215,110,2)
(208,235,2)
(240,37,2)
(176,235,2)
(227,74,2)
(123,235,2)
(220,235,2)
(114,127,2)
(204,52,2)
(204,235,2)
(56,198,2)
(131,177,2)
(60,21,2)
(157,110,2)
(184,23,2)
(105,139,2)
(215,37,2)
(177,33,2)
(132,37,2)
(69,195,2)
(225,48,2)
(227,177,2)
(171,110,2)
(72,177,2)
(99,37,2)
(10,37,2)
(35,37,2)
(33,48,2)
(200,37,2)
(41,114,2)
(62,37,2)
(219,110,2)
(162,235,2)
(143,74,2)
(41,195,2)
(235,128,2)
(205,48,2)
(183,48,2)
(93,150,2)
(175,235,2)
(109,110,2)
(143,110,2)
(77,195,2)
(48,76,2)
(222,121,2)
(23,180,2)
(27,110,2)
(8,74,2)
(130,177,2)
(37,48,2)
(25,110,2)
(41,37,2)
(237,110,2)
(223,177,2)
(199,198,2)
(139,87,2)
(126,195,2)
(106,110,2)
(221,235,2)
(85,235,2)
(139,91,2)
(239,195,2)
(100,146,2)
(139,64,2)
(84,110,2)
(117,37,2)
(78,235,2)
(237,37,2)
(68,37,2)
(94,37,2)
(145,37,2)
(180,127,2)
(64,215,2)
(102,110,2)
(139,177,2)
(122,235,2)
(110,37,2)
(3,33,2)
(75,93,2)
(81,37,2)
(4,177,2)
(117,237,2)
(75,110,2)
(12,110,2)
(197,21,2)
(79,48,2)
(158,127,2)
(6,37,2)
(18,127,2)
(161,198,2)
(91,177,2)
(104,235,2)
(36,195,2)
(184,43,2)
(3,177,2)
(182,177,2)
(52,127,2)
(228,118,2)
(239,112,2)
(80,48,2)
(64,110,2)
(174,13,2)
(70,123,2)
(229,107,2)
(164,120,2)
(237,84,2)
(87,202,2)
(9,235,2)
(171,37,2)
(126,178,2)
(9,36,2)
(55,74,2)
(52,235,2)
(85,177,2)
(172,235,2)
(98,110,2)
(25,74,2)
(114,37,2)
(112,127,2)
(199,235,2)
(64,37,2)
(94,110,2)
(108,239,2)
(165,235,2)
(48,177,2)
(75,37,2)
(55,177,2)
(188,37,2)
(106,27,2)
(47,235,2)
(31,235,2)
(219,37,2)
(136,37,2)
(231,235,2)
(70,9,2)
(157,37,2)
(168,127,2)
(218,127,2)
(192,95,2)
(57,127,2)
(179,110,2)
(201,37,2)
(119,235,2)
(235,110,2)
(166,48,2)
(90,235,2)
(93,110,2)
(218,37,2)
(227,13,2)
(32,19,2)
(13,235,2)
(232,73,2)
(10,110,2)
(153,74,2)
(211,79,2)
(124,235,2)
(215,127,2)
(64,195,2)
(12,127,2)
(212,110,2)
(155,235,2)
(226,208,2)
(178,127,2)
(139,74,2)
(111,235,2)
(221,184,2)
(112,110,2)
(153,177,2)
(83,126,2)
(199,13,2)
(66,235,2)
(40,74,2)
(74,21,2)
(86,164,2)
(227,110,2)
(62,110,2)
(180,235,2)
(167,177,2)
(201,110,2)
(37,43,2)
(173,127,2)
(137,44,2)
(237,94,2)
(133,110,2)
(97,127,2)
(79,166,2)
(89,21,2)
(130,74,2)
(226,235,2)
(219,198,2)
(179,37,2)
(232,115,2)
(139,226,2)
(87,235,2)
(48,74,2)
(204,14,2)
(59,37,2)
(123,213,2)
(116,177,2)
(69,177,2)
(34,37,2)
(59,110,2)
(14,70,2)
(50,37,2)
(230,235,2)
(228,21,2)
(101,235,2)
(108,37,2)
(128,195,2)
(75,106,2)
(177,48,2)
(81,57,2)
(228,195,2)
(149,110,2)
(181,21,2)
(139,115,2)
(128,110,2)
(235,37,2)
(109,37,2)
(121,158,2)
(207,37,2)
(213,221,2)
(211,48,2)
(112,37,2)
(191,48,2)
(164,37,2)
(70,119,2)
(226,195,2)
(185,48,2)
(238,177,2)
(39,177,2)
(144,228,2)
-----------------------------------
(0,priv)
(1,)
(2,goto error;)
(3,ravb_set_buffer_align(skb)
(4,rx_skb)
(5,if (!priv->rx_skb[q] || !priv->tx_skb[q])
(6,priv)
(7,DPTR_ALIGN)
(8,goto error;)
(9,&priv->tx_desc_dma[q])
(10,rx_ring)
(11,skb)
(12,priv->rx_ring)
(13,!priv->tx_ring[q])
(14,priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->tx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(15,num_rx_ring)
(16,rx_skb)
(17,tx_skb)
(18,priv->rx_skb)
(19,priv->tx_skb)
(20,0)
(21,!priv->rx_skb[q])
(22,rx_skb)
(23,priv->num_tx_ring[q])
(24,goto error;)
(25,-ENOMEM)
(26,for (i = 0; i < priv->num_rx_ring[q]; i++)
(27,priv->num_rx_ring[q])
(28,tx_align)
(29,)
(30,num_rx_ring)
(31,ring_size)
(32,priv->tx_skb[q])
(33,skb = netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1)
(34,priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +\n\\n\\t\\t\\t\\t\\t    DPTR_ALIGN - 1, GFP_KERNEL)
(35,GFP_KERNEL)
(36,priv->tx_desc_dma[q])
(37,num_tx_desc > 1)
(38,priv)
(39,q)
(40,0)
(41,priv->tx_align[q])
(42,error:)
(43,num_tx_desc = priv->num_tx_desc)
(44,sizeof(*priv->rx_skb[q])
(45,skb)
(46,tx_skb)
(47,q)
(48,i < priv->num_rx_ring[q])
(49,GFP_KERNEL)
(50,priv)
(51,q)
(52,priv->tx_ring)
(53,num_tx_desc)
(54,num_tx_desc)
(55,q)
(56,ndev->dev)
(57,priv->num_tx_ring)
(58,ring_size)
(59,priv)
(60,priv->tx_skb)
(61,1)
(62,num_rx_ring)
(63,num_tx_ring)
(64,priv->rx_ring[q])
(65,priv)
(66,dev)
(67,q)
(68,ring_size)
(69,priv->num_rx_ring[q])
(70,dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->tx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(71,q)
(72,i)
(73,priv->rx_skb[q])
(74,!priv->rx_skb[q] || !priv->tx_skb[q])
(75,sizeof(struct ravb_ex_rx_desc)
(76,i = 0)
(77,priv->tx_align[q])
(78,tx_desc_dma)
(79,RX_BUF_SZ + RAVB_ALIGN - 1)
(80,num_tx_desc)
(81,priv->num_tx_ring[q])
(82,ndev)
(83,kcalloc(priv->num_tx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->tx_skb[q])
(84,ring_size = sizeof(struct ravb_ex_rx_desc)
(85,ndev)
(86,kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +\n\\n\\t\\t\\t\\t\\t    DPTR_ALIGN - 1, GFP_KERNEL)
(87,priv->tx_ring[q])
(88,1)
(89,priv)
(90,tx_ring)
(91,priv->rx_skb[q][i])
(92,i)
(93,sizeof(struct ravb_ex_rx_desc)
(94,ndev->dev.parent)
(95,*priv->tx_skb[q])
(96,priv->tx_desc_dma)
(97,priv->num_tx_desc)
(98,q)
(99,rx_ring)
(100,priv->rx_skb[q])
(101,priv)
(102,priv)
(103,q)
(104,parent)
(105,RET)
(106,priv->num_rx_ring[q] + 1)
(107,struct ravb_tx_desc)
(108,&priv->rx_desc_dma[q])
(109,dev)
(110,!priv->tx_align[q])
(111,priv->dirty_rx[q] = 0)
(112,priv->rx_desc_dma)
(113,q)
(114,priv->tx_align)
(115,priv->tx_skb[q])
(116,priv->rx_skb[q])
(117,priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->rx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(118,priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->tx_skb[q])
(119,ndev->dev.parent)
(120,DPTR_ALIGN * priv->num_tx_ring[q])
(121,priv->rx_skb[q])
(122,GFP_KERNEL)
(123,ring_size = sizeof(struct ravb_tx_desc)
(124,tx_ring)
(125,tx_align)
(126,priv->num_tx_ring[q])
(127,*priv = netdev_priv(ndev)
(128,priv->rx_ring[q])
(129,q)
(130,priv->num_rx_ring)
(131,i)
(132,q)
(133,priv->num_rx_ring)
(134,priv)
(135,q)
(136,priv)
(137,kcalloc(priv->num_rx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->rx_skb[q])
(138,i)
(139,return -ENOMEM;)
(140,q)
(141,ndev)
(142,if (!priv->tx_ring[q])
(143,ENOMEM)
(144,!priv->tx_skb[q])
(145,parent)
(146,priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->rx_skb[q])
(147,DPTR_ALIGN - 1)
(148,priv->num_rx_ring[q])
(149,goto error;)
(150,struct ravb_ex_rx_desc)
(151,rx_skb)
(152,priv)
(153,priv)
(154,if (!priv->tx_align[q])
(155,priv)
(156,priv)
(157,priv)
(158,priv->rx_skb)
(159,q)
(160,q)
(161,netdev_priv(ndev)
(162,0)
(163,priv)
(164,DPTR_ALIGN * priv->num_tx_ring[q] +\n\\n\\t\\t\\t\\t\\t    DPTR_ALIGN - 1)
(165,num_tx_desc)
(166,RAVB_ALIGN - 1)
(167,priv->rx_skb[q][i] = skb)
(168,priv->tx_skb)
(169,priv)
(170,if (!priv->rx_ring[q])
(171,q)
(172,1)
(173,priv->num_rx_ring)
(174,goto error;)
(175,q)
(176,priv)
(177,!skb)
(178,priv->num_tx_ring)
(179,rx_desc_dma)
(180,priv->num_tx_ring)
(181,q)
(182,priv->rx_skb)
(183,ndev)
(184,priv->num_tx_ring[q] * num_tx_desc)
(185,skb)
(186,i++)
(187,if (!skb)
(188,DPTR_ALIGN)
(189,if (num_tx_desc > 1)
(190,GFP_KERNEL)
(191,RAVB_ALIGN)
(192,sizeof(*priv->tx_skb[q])
(193,priv->rx_skb)
(194,)
(195,int q)
(196,num_tx_desc)
(197,tx_skb)
(198,struct net_device *ndev)
(199,ravb_ring_free(ndev, q)
(200,num_tx_ring)
(201,1)
(202,priv->tx_ring)
(203,priv)
(204,priv->tx_ring[q])
(205,RX_BUF_SZ)
(206,i)
(207,priv)
(208,priv->dirty_rx)
(209,q)
(210,ring_size)
(211,netdev_alloc_skb(ndev, RX_BUF_SZ + RAVB_ALIGN - 1)
(212,GFP_KERNEL)
(213,sizeof(struct ravb_tx_desc)
(214,priv)
(215,priv->rx_ring)
(216,ndev)
(217,q)
(218,priv->tx_align)
(219,ndev->dev)
(220,num_tx_ring)
(221,priv->num_tx_ring[q] * num_tx_desc + 1)
(222,*priv->rx_skb[q])
(223,priv)
(224,priv)
(225,skb)
(226,priv->dirty_rx[q])
(227,q)
(228,priv->tx_skb[q])
(229,sizeof(struct ravb_tx_desc)
(230,dirty_rx)
(231,q)
(232,return 0;)
(233,priv)
(234,ring_size)
(235,!priv->rx_ring[q])
(236,q)
(237,dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->rx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(238,skb)
(239,priv->rx_desc_dma[q])
(240,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^