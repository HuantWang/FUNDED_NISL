-----label-----
0
-----code-----
static int write_ref_to_lockfile(struct ref_lock *lock,
				 const unsigned char *sha1)
{
	static char term = '\n';
	struct object *o;

	o = parse_object(sha1);
	if (!o) {
		error("Trying to write ref %s with nonexistent object %s",
			lock->ref_name, sha1_to_hex(sha1));
		unlock_ref(lock);
		errno = EINVAL;
		return -1;
	}
	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {
		error("Trying to write non-commit object %s to branch %s",
			sha1_to_hex(sha1), lock->ref_name);
		unlock_ref(lock);
		errno = EINVAL;
		return -1;
	}
	if (write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40 ||
	    write_in_full(lock->lk->fd, &term, 1) != 1 ||
	    close_ref(lock) < 0) {
		int save_errno = errno;
		error("Couldn't write %s", lock->lk->filename.buf);
		unlock_ref(lock);
		errno = save_errno;
		return -1;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
46,49
46,50
47,48
50,51
50,52
51,52
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
71,72
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
77,79
78,79
81,82
83,84
83,85
84,85
86,87
86,88
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
92,95
92,96
93,94
96,97
96,98
97,98
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
120,121
120,122
121,122
121,123
122,123
122,124
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
127,129
128,129
128,130
129,130
133,134
133,135
134,135
136,137
140,141
140,142
141,142
141,143
141,144
141,145
142,143
144,145
144,146
145,146
145,147
146,147
150,151
151,152
155,156
155,157
156,157
156,158
157,158
159,160
162,163
162,164
162,165
162,166
162,167
163,164
164,165
164,166
166,167
166,168
168,169
169,170
171,172
172,173
172,174
172,175
173,174
176,177
176,178
177,178
177,179
178,179
178,180
179,180
184,185
185,186
185,187
186,187
188,189
190,191
191,192
191,193
192,193
194,195
196,197
197,198
199,200
-----nextToken-----
2,4,7,9,10,12,14,15,19,21,23,27,29,30,34,37,39,43,48,49,52,53,56,58,62,64,68,70,73,79,80,82,85,88,89,94,95,98,100,103,104,108,110,114,116,119,126,130,131,132,135,137,138,139,143,147,148,149,152,153,154,158,160,161,165,167,170,174,175,180,181,182,183,187,189,193,195,198,200
-----computeFrom-----
32,33
32,34
66,67
66,68
75,76
75,77
76,77
76,78
112,113
112,114
121,122
121,123
122,123
122,124
123,124
123,125
140,141
140,142
155,156
155,157
191,192
191,193
-----guardedBy-----
89,104
88,110
160,189
148,181
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int write_ref_to_lockfile(struct ref_lock *lock,				 const unsigned char *sha1){	static char term = '\n';	struct object *o;	o = parse_object(sha1);	if (!o) {		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lk->fd, &term, 1) != 1 ||	    close_ref(lock) < 0) {		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}	return 0;}
static int
write_ref_to_lockfile(struct ref_lock *lock,				 const unsigned char *sha1)
write_ref_to_lockfile
struct ref_lock *lock
struct ref_lock
ref_lock
*lock
*
lock
const unsigned char *sha1
const unsigned char
*sha1
*
sha1
{	static char term = '\n';	struct object *o;	o = parse_object(sha1);	if (!o) {		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}	if (write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lk->fd, &term, 1) != 1 ||	    close_ref(lock) < 0) {		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}	return 0;}
static char term = '\n';
static char term = '\n';
static char
term = '\n'
term
= '\n'
'\n'
struct object *o;
struct object *o;
struct object
object
*o
*
o
o = parse_object(sha1);
o = parse_object(sha1)
o
o
parse_object(sha1)
parse_object
parse_object
sha1
sha1
if (!o) {		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}
!o
o
o
{		error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));		unlock_ref(lock);		errno = EINVAL;		return -1;	}
error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1));
error("Trying to write ref %s with nonexistent object %s",			lock->ref_name, sha1_to_hex(sha1))
error
error
"Trying to write ref %s with nonexistent object %s"
lock->ref_name
lock
lock
ref_name
sha1_to_hex(sha1)
sha1_to_hex
sha1_to_hex
sha1
sha1
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
errno = EINVAL;
errno = EINVAL
errno
errno
EINVAL
EINVAL
return -1;
-1
1
if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}
o->type != OBJ_COMMIT && is_branch(lock->ref_name)
o->type != OBJ_COMMIT
o->type
o
o
type
OBJ_COMMIT
OBJ_COMMIT
is_branch(lock->ref_name)
is_branch
is_branch
lock->ref_name
lock
lock
ref_name
{		error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);		unlock_ref(lock);		errno = EINVAL;		return -1;	}
error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name);
error("Trying to write non-commit object %s to branch %s",			sha1_to_hex(sha1), lock->ref_name)
error
error
"Trying to write non-commit object %s to branch %s"
sha1_to_hex(sha1)
sha1_to_hex
sha1_to_hex
sha1
sha1
lock->ref_name
lock
lock
ref_name
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
errno = EINVAL;
errno = EINVAL
errno
errno
EINVAL
EINVAL
return -1;
-1
1
if (write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lk->fd, &term, 1) != 1 ||	    close_ref(lock) < 0) {		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}
write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lk->fd, &term, 1) != 1 ||	    close_ref(lock) < 0
write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40 ||	    write_in_full(lock->lk->fd, &term, 1) != 1
write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40) != 40
write_in_full(lock->lk->fd, sha1_to_hex(sha1), 40)
write_in_full
write_in_full
lock->lk->fd
lock->lk
lock
lock
lk
fd
sha1_to_hex(sha1)
sha1_to_hex
sha1_to_hex
sha1
sha1
40
40
write_in_full(lock->lk->fd, &term, 1) != 1
write_in_full(lock->lk->fd, &term, 1)
write_in_full
write_in_full
lock->lk->fd
lock->lk
lock
lock
lk
fd
&term
term
term
1
1
close_ref(lock) < 0
close_ref(lock)
close_ref
close_ref
lock
lock
0
{		int save_errno = errno;		error("Couldn't write %s", lock->lk->filename.buf);		unlock_ref(lock);		errno = save_errno;		return -1;	}
int save_errno = errno;
int save_errno = errno;
int
save_errno = errno
save_errno
= errno
errno
errno
error("Couldn't write %s", lock->lk->filename.buf);
error("Couldn't write %s", lock->lk->filename.buf)
error
error
"Couldn't write %s"
lock->lk->filename.buf
lock->lk->filename
lock->lk
lock
lock
lk
filename
buf
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
errno = save_errno;
errno = save_errno
errno
errno
save_errno
save_errno
return -1;
-1
1
return 0;
0
-----joern-----
(11,75,0)
(39,86,0)
(46,85,0)
(8,79,0)
(85,12,0)
(83,12,0)
(25,26,0)
(89,87,0)
(16,87,0)
(69,79,0)
(40,86,0)
(77,90,0)
(99,77,0)
(14,51,0)
(27,53,0)
(46,2,0)
(45,97,0)
(38,101,0)
(87,16,0)
(53,79,0)
(46,5,0)
(78,17,0)
(2,64,0)
(98,49,0)
(55,30,0)
(9,47,0)
(26,41,0)
(76,90,0)
(72,19,0)
(54,17,0)
(105,69,0)
(72,102,0)
(10,97,0)
(55,25,0)
(87,89,0)
(47,85,0)
(106,76,0)
(92,86,0)
(21,19,0)
(37,78,0)
(33,53,0)
(76,16,0)
(64,35,0)
(92,55,0)
(98,95,0)
(5,17,0)
(49,17,0)
(18,79,0)
(28,44,0)
(57,26,0)
(65,73,0)
(69,35,0)
(44,28,0)
(55,92,0)
(46,1,0)
(93,26,0)
(34,8,0)
(109,3,0)
(30,55,0)
(52,96,0)
(74,76,0)
(70,78,0)
(16,76,0)
(70,17,0)
(58,30,0)
(68,91,0)
(110,28,0)
(12,82,0)
(48,70,0)
(81,45,0)
(96,107,0)
(89,51,0)
(1,41,0)
(19,35,0)
(96,38,0)
(56,55,0)
(3,102,0)
(23,1,0)
(19,72,0)
(43,107,0)
(51,79,0)
(7,18,0)
(19,53,0)
(38,96,0)
(2,35,0)
(97,73,0)
(3,44,0)
(22,16,0)
(94,92,0)
(108,41,0)
(85,82,0)
(20,28,0)
(75,90,0)
(104,41,0)
(59,17,0)
(88,98,0)
(5,70,0)
(49,98,0)
(44,82,0)
(60,95,0)
(77,102,0)
(103,72,0)
(67,51,0)
(111,107,0)
(15,90,0)
(65,100,0)
(50,100,0)
(97,45,0)
(51,89,0)
(107,96,0)
(29,25,0)
(28,79,0)
(53,19,0)
(63,49,0)
(101,38,0)
(38,100,0)
(84,38,0)
(30,73,0)
(6,41,0)
(42,41,0)
(86,92,0)
(36,59,0)
(13,2,0)
(31,41,0)
(45,79,0)
(100,38,0)
(101,102,0)
(86,79,0)
(59,79,0)
(44,3,0)
(95,98,0)
(0,101,0)
(91,5,0)
(24,64,0)
(25,55,0)
(18,95,0)
(73,65,0)
(32,12,0)
(107,79,0)
(80,78,0)
(61,44,0)
(8,82,0)
(100,65,0)
(90,77,0)
(71,13,0)
(73,30,0)
(62,70,0)
(90,41,0)
(66,64,0)
(95,18,0)
(73,97,0)
(4,18,0)
(47,9,1)
(55,25,1)
(53,79,1)
(46,2,1)
(1,23,1)
(103,53,1)
(97,45,1)
(65,100,1)
(45,81,1)
(111,87,1)
(46,1,1)
(87,16,1)
(24,66,1)
(91,68,1)
(36,49,1)
(75,11,1)
(101,0,1)
(23,65,1)
(85,47,1)
(38,84,1)
(86,40,1)
(34,44,1)
(95,60,1)
(27,33,1)
(9,12,1)
(97,10,1)
(69,105,1)
(51,79,1)
(15,26,1)
(46,85,1)
(30,55,1)
(3,109,1)
(96,107,1)
(25,26,1)
(29,92,1)
(65,73,1)
(45,79,1)
(83,32,1)
(43,111,1)
(61,87,1)
(2,64,1)
(77,99,1)
(66,69,1)
(63,78,1)
(101,102,1)
(86,79,1)
(98,88,1)
(46,5,1)
(49,98,1)
(55,56,1)
(16,22,1)
(62,59,1)
(8,79,1)
(2,13,1)
(38,96,1)
(109,61,1)
(70,48,1)
(14,16,1)
(39,100,1)
(69,79,1)
(72,102,1)
(90,77,1)
(85,12,1)
(26,93,1)
(98,95,1)
(11,90,1)
(12,83,1)
(71,64,1)
(16,76,1)
(88,95,1)
(56,25,1)
(67,14,1)
(92,94,1)
(94,86,1)
(100,38,1)
(73,97,1)
(84,101,1)
(96,52,1)
(73,30,1)
(30,58,1)
(18,79,1)
(4,7,1)
(44,28,1)
(38,101,1)
(7,63,1)
(28,79,1)
(92,86,1)
(99,15,1)
(76,90,1)
(21,75,1)
(80,65,1)
(40,39,1)
(75,90,1)
(28,20,1)
(19,72,1)
(70,78,1)
(89,51,1)
(5,91,1)
(37,80,1)
(93,57,1)
(107,79,1)
(5,70,1)
(58,55,1)
(107,43,1)
(100,50,1)
(87,89,1)
(53,27,1)
(60,18,1)
(106,74,1)
(0,96,1)
(13,71,1)
(95,18,1)
(48,62,1)
(110,3,1)
(74,75,1)
(25,29,1)
(78,37,1)
(68,70,1)
(3,102,1)
(51,67,1)
(72,103,1)
(22,76,1)
(81,30,1)
(64,24,1)
(76,106,1)
(20,110,1)
(59,79,1)
(77,102,1)
(8,34,1)
(55,92,1)
(50,38,1)
(18,4,1)
(105,19,1)
(33,21,1)
(19,53,1)
(44,3,1)
(10,45,1)
(59,36,1)
(32,8,1)
(52,107,1)
(83,87,2)
(28,79,2)
(85,87,2)
(10,30,2)
(76,90,2)
(32,87,2)
(100,87,2)
(38,101,2)
(2,75,2)
(53,75,2)
(72,75,2)
(21,75,2)
(84,87,2)
(62,65,2)
(87,89,2)
(75,90,2)
(25,100,2)
(46,85,2)
(103,75,2)
(90,77,2)
(101,102,2)
(59,79,2)
(71,75,2)
(94,100,2)
(3,102,2)
(38,96,2)
(37,65,2)
(8,87,2)
(60,65,2)
(5,65,2)
(33,75,2)
(96,87,2)
(24,75,2)
(109,87,2)
(107,87,2)
(51,79,2)
(72,102,2)
(105,75,2)
(46,1,2)
(23,65,2)
(89,51,2)
(106,75,2)
(40,100,2)
(44,87,2)
(8,79,2)
(74,75,2)
(110,87,2)
(77,102,2)
(98,65,2)
(96,107,2)
(65,87,2)
(19,72,2)
(80,65,2)
(78,65,2)
(89,16,2)
(12,87,2)
(22,75,2)
(63,65,2)
(18,79,2)
(92,86,2)
(3,87,2)
(20,87,2)
(65,100,2)
(2,64,2)
(55,100,2)
(70,65,2)
(58,100,2)
(100,38,2)
(97,30,2)
(4,65,2)
(65,73,2)
(45,30,2)
(69,79,2)
(92,100,2)
(66,75,2)
(53,79,2)
(51,16,2)
(111,87,2)
(86,100,2)
(28,87,2)
(39,100,2)
(49,98,2)
(5,70,2)
(9,87,2)
(91,65,2)
(55,92,2)
(101,87,2)
(44,28,2)
(46,5,2)
(25,26,2)
(86,79,2)
(46,2,2)
(73,97,2)
(14,16,2)
(30,55,2)
(67,16,2)
(34,87,2)
(64,75,2)
(98,95,2)
(73,100,2)
(1,65,2)
(47,87,2)
(18,65,2)
(38,87,2)
(13,75,2)
(27,75,2)
(69,75,2)
(59,65,2)
(70,78,2)
(36,65,2)
(95,65,2)
(55,25,2)
(43,87,2)
(56,100,2)
(16,75,2)
(61,87,2)
(7,65,2)
(50,87,2)
(30,100,2)
(97,45,2)
(49,65,2)
(73,30,2)
(44,3,2)
(95,18,2)
(29,100,2)
(87,75,2)
(68,65,2)
(16,76,2)
(48,65,2)
(81,30,2)
(52,87,2)
(19,75,2)
(0,87,2)
(87,16,2)
(45,79,2)
(107,79,2)
(19,53,2)
(88,65,2)
(85,12,2)
(76,75,2)
-----------------------------------
(0,sha1)
(1,return 0;)
(2,return -1;)
(3,sha1_to_hex(sha1)
(4,lk)
(5,return -1;)
(6,if (write_in_full(lock->lk->fd, sha1_to_hex(sha1)
(7,lock)
(8,unlock_ref(lock)
(9,1)
(10,0)
(11,o)
(12,errno = EINVAL)
(13,-1)
(14,lock)
(15,o)
(16,o->type != OBJ_COMMIT)
(17,)
(18,lock->lk)
(19,error("Trying to write ref %s with nonexistent object %s",\n\\n\\t\\t\\tlock->ref_name, sha1_to_hex(sha1)
(20,ref_name)
(21,"Trying to write ref %s with nonexistent object %s")
(22,OBJ_COMMIT)
(23,0)
(24,EINVAL)
(25,&term)
(26,term = \'\\n\')
(27,ref_name)
(28,lock->ref_name)
(29,term)
(30,write_in_full(lock->lk->fd, &term, 1)
(31,if (!o)
(32,errno)
(33,lock)
(34,lock)
(35,)
(36,lock)
(37,errno)
(38,write_in_full(lock->lk->fd, sha1_to_hex(sha1)
(39,lock)
(40,lk)
(41,)
(42,o)
(43,lk)
(44,error("Trying to write non-commit object %s to branch %s",\n\\n\\t\\t\\tsha1_to_hex(sha1)
(45,close_ref(lock)
(46,RET)
(47,-1)
(48,save_errno)
(49,error("Couldn\'t write %s", lock->lk->filename.buf)
(50,40)
(51,lock->ref_name)
(52,fd)
(53,lock->ref_name)
(54,save_errno)
(55,write_in_full(lock->lk->fd, &term, 1)
(56,1)
(57,term)
(58,1)
(59,unlock_ref(lock)
(60,filename)
(61,"Trying to write non-commit object %s to branch %s")
(62,errno)
(63,"Couldn\'t write %s")
(64,errno = EINVAL)
(65,write_in_full(lock->lk->fd, sha1_to_hex(sha1)
(66,errno)
(67,ref_name)
(68,1)
(69,unlock_ref(lock)
(70,errno = save_errno)
(71,1)
(72,sha1_to_hex(sha1)
(73,write_in_full(lock->lk->fd, &term, 1)
(74,o)
(75,!o)
(76,o->type)
(77,parse_object(sha1)
(78,save_errno = errno)
(79,struct ref_lock *lock)
(80,save_errno)
(81,lock)
(82,)
(83,EINVAL)
(84,40)
(85,return -1;)
(86,lock->lk)
(87,o->type != OBJ_COMMIT && is_branch(lock->ref_name)
(88,buf)
(89,is_branch(lock->ref_name)
(90,o = parse_object(sha1)
(91,-1)
(92,lock->lk->fd)
(93,\'\\n\')
(94,fd)
(95,lock->lk->filename)
(96,lock->lk->fd)
(97,close_ref(lock)
(98,lock->lk->filename.buf)
(99,sha1)
(100,write_in_full(lock->lk->fd, sha1_to_hex(sha1)
(101,sha1_to_hex(sha1)
(102,const unsigned char *sha1)
(103,sha1)
(104,term)
(105,lock)
(106,type)
(107,lock->lk)
(108,if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)
(109,sha1)
(110,lock)
(111,lock)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^