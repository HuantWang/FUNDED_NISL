-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(5==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
28,30
31,32
32,33
32,34
32,35
32,36
32,37
32,38
32,39
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
54,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
81,82
81,83
81,84
81,85
82,83
83,84
83,85
84,85
87,88
87,89
88,89
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
106,107
108,109
108,110
108,111
108,112
108,113
109,110
111,112
113,114
114,115
114,116
117,118
117,119
118,119
120,121
122,123
124,125
125,126
126,127
126,128
127,128
130,131
130,132
131,132
133,134
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,14,16,19,20,25,26,29,30,36,38,40,44,46,47,50,53,55,56,58,62,65,67,68,72,74,79,80,85,86,89,93,94,96,99,105,107,110,112,115,116,119,121,123,128,129,132,137,139
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
28,29
28,30
60,61
60,62
70,71
70,72
83,84
83,85
87,88
87,89
102,103
102,104
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }
5==5
5
5
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(5==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
5==5
5
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(44,2,0)
(38,44,0)
(73,8,0)
(33,55,0)
(60,32,0)
(43,29,0)
(19,63,0)
(35,45,0)
(1,39,0)
(10,45,0)
(16,45,0)
(3,27,0)
(29,47,0)
(45,72,0)
(67,16,0)
(46,39,0)
(56,45,0)
(58,26,0)
(15,73,0)
(44,21,0)
(75,18,0)
(64,54,0)
(40,37,0)
(25,45,0)
(8,73,0)
(25,27,0)
(0,37,0)
(31,4,0)
(53,15,0)
(65,18,0)
(20,25,0)
(73,54,0)
(34,21,0)
(23,17,0)
(9,70,0)
(50,32,0)
(28,73,0)
(42,59,0)
(59,57,0)
(6,37,0)
(27,18,0)
(8,26,0)
(48,2,0)
(12,2,0)
(41,51,0)
(19,25,0)
(37,6,0)
(24,73,0)
(37,59,0)
(17,4,0)
(11,19,0)
(6,4,0)
(62,45,0)
(54,73,0)
(7,6,0)
(71,5,0)
(30,41,0)
(37,40,0)
(18,45,0)
(27,25,0)
(66,16,0)
(49,45,0)
(70,25,0)
(36,70,0)
(73,15,0)
(73,25,0)
(22,27,0)
(26,8,0)
(14,2,0)
(52,45,0)
(32,45,0)
(68,4,0)
(21,44,0)
(74,59,0)
(61,55,0)
(37,44,0)
(73,15,1)
(64,28,1)
(43,70,1)
(6,37,1)
(9,25,1)
(18,75,1)
(70,36,1)
(17,23,1)
(3,22,1)
(44,21,1)
(41,30,1)
(30,8,1)
(24,15,1)
(37,44,1)
(27,18,1)
(55,33,1)
(37,59,1)
(15,53,1)
(29,43,1)
(36,9,1)
(73,25,1)
(7,17,1)
(4,31,1)
(39,1,1)
(17,4,1)
(59,42,1)
(0,7,1)
(58,6,1)
(73,54,1)
(65,16,1)
(11,13,1)
(21,34,1)
(19,25,1)
(1,46,1)
(32,50,1)
(46,55,1)
(34,38,1)
(23,8,1)
(42,74,1)
(7,4,1)
(69,39,1)
(61,44,1)
(70,25,1)
(53,54,1)
(73,24,1)
(8,26,1)
(37,40,1)
(33,61,1)
(68,70,1)
(6,4,1)
(74,55,1)
(27,3,1)
(60,39,1)
(20,18,1)
(8,73,1)
(22,20,1)
(75,65,1)
(25,27,1)
(69,13,1)
(50,60,1)
(13,6,1)
(54,64,1)
(16,66,1)
(23,41,1)
(19,11,1)
(66,67,1)
(68,29,1)
(37,0,1)
(67,32,1)
(69,19,1)
(28,26,1)
(31,68,1)
(46,59,1)
(26,58,1)
(8,73,2)
(73,25,2)
(4,39,2)
(25,27,2)
(70,39,2)
(74,55,2)
(31,39,2)
(37,44,2)
(42,55,2)
(7,6,2)
(66,39,2)
(13,39,2)
(32,39,2)
(36,39,2)
(37,6,2)
(73,15,2)
(18,39,2)
(26,6,2)
(11,13,2)
(3,39,2)
(8,26,2)
(27,18,2)
(24,6,2)
(30,8,2)
(6,6,2)
(6,4,2)
(25,39,2)
(60,39,2)
(37,59,2)
(23,6,2)
(7,39,2)
(0,6,2)
(59,55,2)
(73,54,2)
(29,70,2)
(67,39,2)
(44,21,2)
(17,6,2)
(68,39,2)
(17,4,2)
(50,39,2)
(16,39,2)
(75,39,2)
(37,39,2)
(37,40,2)
(58,6,2)
(8,6,2)
(19,25,2)
(65,39,2)
(70,25,2)
(15,6,2)
(54,6,2)
(73,6,2)
(27,39,2)
(64,6,2)
(41,8,2)
(9,39,2)
(6,37,2)
(19,13,2)
(0,39,2)
(53,6,2)
(20,39,2)
(6,39,2)
(22,39,2)
(43,70,2)
(28,6,2)
-----------------------------------
(0,count)
(1,5)
(2,)
(3,"w+")
(4,i = 0)
(5,)
(6,i < (size_t)
(7,i)
(8,strlen(SENTENCE)
(9,pFile)
(10,for (i = 0; i < (size_t)
(11,pFile)
(12,if(5==5)
(13,pFile)
(14,if(5==5)
(15,strlen(SENTENCE)
(16,*pFile = NULL)
(17,i++)
(18,*filename = "output_bad.txt")
(19,fclose(pFile)
(20,pFile)
(21,-1)
(22,filename)
(23,i)
(24,pFile)
(25,pFile = fopen(filename, "w+")
(26,strlen(SENTENCE)
(27,fopen(filename, "w+")
(28,SENTENCE)
(29,exit(1)
(30,1)
(31,0)
(32,i = 0)
(33,5)
(34,1)
(35,i)
(36,NULL)
(37,(size_t)
(38,count)
(39,5==5)
(40,size_t)
(41,exit(1)
(42,20)
(43,1)
(44,count = -1)
(45,)
(46,5)
(47,)
(48,count)
(49,pFile)
(50,0)
(51,)
(52,filename)
(53,SENTENCE)
(54,sizeof(char)
(55,5==5)
(56,if (pFile)
(57,)
(58,SENTENCE)
(59,count = 20)
(60,i)
(61,5)
(62,if (pFile == NULL)
(63,)
(64,char)
(65,filename)
(66,NULL)
(67,pFile)
(68,i)
(69,RET)
(70,pFile == NULL)
(71,if (strlen(SENTENCE)
(72,)
(73,fwrite(SENTENCE, sizeof(char)
(74,count)
(75,"output_bad.txt")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^