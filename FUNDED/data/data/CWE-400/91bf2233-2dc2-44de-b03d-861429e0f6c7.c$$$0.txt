-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad(){    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad
{    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,28,0)
(4,37,0)
(19,14,0)
(35,49,0)
(16,35,0)
(41,27,0)
(9,33,0)
(23,33,0)
(15,14,0)
(14,28,0)
(2,12,0)
(21,22,0)
(25,16,0)
(3,47,0)
(42,37,0)
(11,7,0)
(9,14,0)
(38,41,0)
(34,49,0)
(8,49,0)
(28,49,0)
(1,12,0)
(33,49,0)
(5,38,0)
(0,50,0)
(39,34,0)
(10,27,0)
(46,41,0)
(16,37,0)
(28,10,0)
(41,38,0)
(20,7,0)
(32,50,0)
(12,39,0)
(36,0,0)
(14,9,0)
(27,10,0)
(13,17,0)
(27,41,0)
(37,28,0)
(29,45,0)
(39,12,0)
(44,22,0)
(18,50,0)
(43,0,0)
(30,10,0)
(7,28,0)
(37,16,0)
(34,39,0)
(10,30,0)
(40,45,0)
(48,50,0)
(24,35,0)
(10,28,0)
(31,9,0)
(17,3,0)
(3,17,0)
(6,28,0)
(3,17,1)
(28,10,1)
(44,34,1)
(39,12,1)
(33,23,1)
(26,22,1)
(23,9,1)
(37,28,1)
(22,21,1)
(13,7,1)
(37,42,1)
(9,14,1)
(11,20,1)
(9,31,1)
(38,5,1)
(12,2,1)
(6,45,1)
(14,28,1)
(16,25,1)
(15,7,1)
(19,15,1)
(7,28,1)
(0,43,1)
(25,37,1)
(44,45,1)
(16,37,1)
(42,4,1)
(10,30,1)
(35,24,1)
(20,28,1)
(4,33,1)
(2,1,1)
(43,36,1)
(21,44,1)
(12,28,1)
(45,29,1)
(27,41,1)
(40,0,1)
(34,39,1)
(24,16,1)
(31,14,1)
(15,3,1)
(10,27,1)
(46,6,1)
(41,38,1)
(14,19,1)
(17,13,1)
(1,35,1)
(5,46,1)
(7,11,1)
(29,40,1)
(16,37,2)
(17,7,2)
(15,45,2)
(12,45,2)
(3,17,2)
(46,45,2)
(9,45,2)
(39,12,2)
(39,45,2)
(10,30,2)
(7,45,2)
(27,45,2)
(23,45,2)
(7,28,2)
(9,14,2)
(41,45,2)
(34,45,2)
(10,45,2)
(14,45,2)
(25,45,2)
(20,45,2)
(42,45,2)
(38,45,2)
(2,45,2)
(13,7,2)
(37,28,2)
(12,28,2)
(31,45,2)
(28,10,2)
(19,45,2)
(27,41,2)
(5,45,2)
(6,45,2)
(35,45,2)
(24,45,2)
(41,38,2)
(3,7,2)
(10,27,2)
(14,28,2)
(34,39,2)
(37,45,2)
(1,45,2)
(28,45,2)
(16,45,2)
(11,45,2)
(33,45,2)
(4,45,2)
-----------------------------------
(0,data = NULL)
(1,data)
(2,0)
(3,exit(-1)
(4,data)
(5,twoIntsStruct)
(6,data)
(7,data == NULL)
(8,if (data == NULL)
(9,data[0].intOne)
(10,(twoIntsStruct *)
(11,NULL)
(12,data[0])
(13,1)
(14,data[0])
(15,data)
(16,data[0].intTwo)
(17,-1)
(18,if(globalFive==5)
(19,0)
(20,data)
(21,5)
(22,globalFive==5)
(23,0)
(24,0)
(25,intTwo)
(26,RET)
(27,malloc(100*sizeof(twoIntsStruct)
(28,data = (twoIntsStruct *)
(29,5)
(30,twoIntsStruct *)
(31,intOne)
(32,if(globalFive==5)
(33,data[0].intOne = 0)
(34,printStructLine(&data[0])
(35,data[0].intTwo = 0)
(36,data)
(37,data[0])
(38,sizeof(twoIntsStruct)
(39,&data[0])
(40,globalFive)
(41,100*sizeof(twoIntsStruct)
(42,0)
(43,NULL)
(44,globalFive)
(45,globalFive==5)
(46,100)
(47,)
(48,data)
(49,)
(50,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^