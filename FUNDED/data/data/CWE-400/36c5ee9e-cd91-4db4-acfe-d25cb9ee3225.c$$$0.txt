-----label-----
1
-----code-----
int rmonitor_check_limits(struct rmsummary *tr)
{
	tr->limits_exceeded = NULL;

	/* Consider errors as resources exhausted. Used for ENOSPC, ENFILE, etc. */
	if(tr->last_error)
		return 0;

	if(!resources_limits)
		return 1;

	over_limit_check(tr, start, 1.0/ONE_SECOND, "lf");
	over_limit_check(tr, end,   1.0/ONE_SECOND, "lf");
	over_limit_check(tr, wall_time, 1.0/ONE_SECOND, "lf");
	over_limit_check(tr, cpu_time,  1.0/ONE_SECOND, "lf");
	over_limit_check(tr, max_concurrent_processes,   1, PRId64);
	over_limit_check(tr, total_processes,   1, PRId64);
	over_limit_check(tr, virtual_memory,  1, PRId64);
	over_limit_check(tr, resident_memory, 1, PRId64);
	over_limit_check(tr, swap_memory,     1, PRId64);
	over_limit_check(tr, bytes_read,      1, PRId64);
	over_limit_check(tr, bytes_written,   1, PRId64);
	over_limit_check(tr, workdir_num_files, 1, PRId64);
	over_limit_check(tr, workdir_footprint, 1, PRId64);

	if(tr->limits_exceeded)
		return 0;
	else
		return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
12,13
13,14
13,15
14,15
14,16
15,16
18,19
20,21
20,22
21,22
21,23
22,23
25,26
27,28
27,29
28,29
29,30
31,32
33,34
34,35
34,36
34,37
34,38
34,39
35,36
37,38
39,40
41,42
41,43
43,44
46,47
47,48
47,49
47,50
47,51
47,52
48,49
50,51
52,53
54,55
54,56
56,57
59,60
60,61
60,62
60,63
60,64
60,65
61,62
63,64
65,66
67,68
67,69
69,70
72,73
73,74
73,75
73,76
73,77
73,78
74,75
76,77
78,79
80,81
80,82
82,83
85,86
86,87
86,88
86,89
86,90
86,91
87,88
89,90
91,92
94,95
96,97
97,98
97,99
97,100
97,101
97,102
98,99
100,101
102,103
105,106
107,108
108,109
108,110
108,111
108,112
108,113
109,110
111,112
113,114
116,117
118,119
119,120
119,121
119,122
119,123
119,124
120,121
122,123
124,125
127,128
129,130
130,131
130,132
130,133
130,134
130,135
131,132
133,134
135,136
138,139
140,141
141,142
141,143
141,144
141,145
141,146
142,143
144,145
146,147
149,150
151,152
152,153
152,154
152,155
152,156
152,157
153,154
155,156
157,158
160,161
162,163
163,164
163,165
163,166
163,167
163,168
164,165
166,167
168,169
171,172
173,174
174,175
174,176
174,177
174,178
174,179
175,176
177,178
179,180
182,183
184,185
184,186
184,187
185,186
185,187
186,187
189,190
191,192
-----nextToken-----
2,4,7,9,10,16,17,19,23,24,26,30,32,36,38,40,42,44,45,49,51,53,55,57,58,62,64,66,68,70,71,75,77,79,81,83,84,88,90,92,93,95,99,101,103,104,106,110,112,114,115,117,121,123,125,126,128,132,134,136,137,139,143,145,147,148,150,154,156,158,159,161,165,167,169,170,172,176,178,180,181,183,187,188,190,192
-----computeFrom-----
13,14
13,15
41,42
41,43
54,55
54,56
67,68
67,69
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int rmonitor_check_limits(struct rmsummary *tr){	tr->limits_exceeded = NULL;	/* Consider errors as resources exhausted. Used for ENOSPC, ENFILE, etc. */	if(tr->last_error)		return 0;	if(!resources_limits)		return 1;	over_limit_check(tr, start, 1.0/ONE_SECOND, "lf");	over_limit_check(tr, end,   1.0/ONE_SECOND, "lf");	over_limit_check(tr, wall_time, 1.0/ONE_SECOND, "lf");	over_limit_check(tr, cpu_time,  1.0/ONE_SECOND, "lf");	over_limit_check(tr, max_concurrent_processes,   1, PRId64);	over_limit_check(tr, total_processes,   1, PRId64);	over_limit_check(tr, virtual_memory,  1, PRId64);	over_limit_check(tr, resident_memory, 1, PRId64);	over_limit_check(tr, swap_memory,     1, PRId64);	over_limit_check(tr, bytes_read,      1, PRId64);	over_limit_check(tr, bytes_written,   1, PRId64);	over_limit_check(tr, workdir_num_files, 1, PRId64);	over_limit_check(tr, workdir_footprint, 1, PRId64);	if(tr->limits_exceeded)		return 0;	else		return 1;}
int
rmonitor_check_limits(struct rmsummary *tr)
rmonitor_check_limits
struct rmsummary *tr
struct rmsummary
rmsummary
*tr
*
tr
{	tr->limits_exceeded = NULL;	/* Consider errors as resources exhausted. Used for ENOSPC, ENFILE, etc. */	if(tr->last_error)		return 0;	if(!resources_limits)		return 1;	over_limit_check(tr, start, 1.0/ONE_SECOND, "lf");	over_limit_check(tr, end,   1.0/ONE_SECOND, "lf");	over_limit_check(tr, wall_time, 1.0/ONE_SECOND, "lf");	over_limit_check(tr, cpu_time,  1.0/ONE_SECOND, "lf");	over_limit_check(tr, max_concurrent_processes,   1, PRId64);	over_limit_check(tr, total_processes,   1, PRId64);	over_limit_check(tr, virtual_memory,  1, PRId64);	over_limit_check(tr, resident_memory, 1, PRId64);	over_limit_check(tr, swap_memory,     1, PRId64);	over_limit_check(tr, bytes_read,      1, PRId64);	over_limit_check(tr, bytes_written,   1, PRId64);	over_limit_check(tr, workdir_num_files, 1, PRId64);	over_limit_check(tr, workdir_footprint, 1, PRId64);	if(tr->limits_exceeded)		return 0;	else		return 1;}
tr->limits_exceeded = NULL;
tr->limits_exceeded = NULL
tr->limits_exceeded
tr
tr
limits_exceeded
NULL
NULL
if(tr->last_error)		return 0;
tr->last_error
tr
tr
last_error
return 0;
0
if(!resources_limits)		return 1;
!resources_limits
resources_limits
resources_limits
return 1;
1
over_limit_check(tr, start, 1.0/ONE_SECOND, "lf");
over_limit_check(tr, start, 1.0/ONE_SECOND, "lf")
over_limit_check
over_limit_check
tr
tr
start
start
1.0/ONE_SECOND
1.0
ONE_SECOND
ONE_SECOND
"lf"
over_limit_check(tr, end,   1.0/ONE_SECOND, "lf");
over_limit_check(tr, end,   1.0/ONE_SECOND, "lf")
over_limit_check
over_limit_check
tr
tr
end
end
1.0/ONE_SECOND
1.0
ONE_SECOND
ONE_SECOND
"lf"
over_limit_check(tr, wall_time, 1.0/ONE_SECOND, "lf");
over_limit_check(tr, wall_time, 1.0/ONE_SECOND, "lf")
over_limit_check
over_limit_check
tr
tr
wall_time
wall_time
1.0/ONE_SECOND
1.0
ONE_SECOND
ONE_SECOND
"lf"
over_limit_check(tr, cpu_time,  1.0/ONE_SECOND, "lf");
over_limit_check(tr, cpu_time,  1.0/ONE_SECOND, "lf")
over_limit_check
over_limit_check
tr
tr
cpu_time
cpu_time
1.0/ONE_SECOND
1.0
ONE_SECOND
ONE_SECOND
"lf"
over_limit_check(tr, max_concurrent_processes,   1, PRId64);
over_limit_check(tr, max_concurrent_processes,   1, PRId64)
over_limit_check
over_limit_check
tr
tr
max_concurrent_processes
max_concurrent_processes
1
PRId64
PRId64
over_limit_check(tr, total_processes,   1, PRId64);
over_limit_check(tr, total_processes,   1, PRId64)
over_limit_check
over_limit_check
tr
tr
total_processes
total_processes
1
PRId64
PRId64
over_limit_check(tr, virtual_memory,  1, PRId64);
over_limit_check(tr, virtual_memory,  1, PRId64)
over_limit_check
over_limit_check
tr
tr
virtual_memory
virtual_memory
1
PRId64
PRId64
over_limit_check(tr, resident_memory, 1, PRId64);
over_limit_check(tr, resident_memory, 1, PRId64)
over_limit_check
over_limit_check
tr
tr
resident_memory
resident_memory
1
PRId64
PRId64
over_limit_check(tr, swap_memory,     1, PRId64);
over_limit_check(tr, swap_memory,     1, PRId64)
over_limit_check
over_limit_check
tr
tr
swap_memory
swap_memory
1
PRId64
PRId64
over_limit_check(tr, bytes_read,      1, PRId64);
over_limit_check(tr, bytes_read,      1, PRId64)
over_limit_check
over_limit_check
tr
tr
bytes_read
bytes_read
1
PRId64
PRId64
over_limit_check(tr, bytes_written,   1, PRId64);
over_limit_check(tr, bytes_written,   1, PRId64)
over_limit_check
over_limit_check
tr
tr
bytes_written
bytes_written
1
PRId64
PRId64
over_limit_check(tr, workdir_num_files, 1, PRId64);
over_limit_check(tr, workdir_num_files, 1, PRId64)
over_limit_check
over_limit_check
tr
tr
workdir_num_files
workdir_num_files
1
PRId64
PRId64
over_limit_check(tr, workdir_footprint, 1, PRId64);
over_limit_check(tr, workdir_footprint, 1, PRId64)
over_limit_check
over_limit_check
tr
tr
workdir_footprint
workdir_footprint
1
PRId64
PRId64
if(tr->limits_exceeded)		return 0;	else		return 1;
tr->limits_exceeded
tr
tr
limits_exceeded
return 0;
0
return 1;
1
-----joern-----
(10,62,0)
(4,1,0)
(83,28,0)
(21,28,0)
(52,1,0)
(10,48,0)
(72,1,0)
(2,3,0)
(51,40,0)
(43,4,0)
(4,28,0)
(60,49,0)
(44,1,0)
(23,49,0)
(74,71,0)
(55,96,0)
(47,25,0)
(24,1,0)
(78,3,0)
(89,13,0)
(53,97,0)
(95,67,0)
(11,21,0)
(66,62,0)
(16,1,0)
(73,44,0)
(44,14,0)
(7,28,0)
(25,1,0)
(87,91,0)
(34,71,0)
(76,60,0)
(39,25,0)
(9,7,0)
(64,71,0)
(97,1,0)
(96,3,0)
(48,83,0)
(0,83,0)
(7,1,0)
(46,60,0)
(71,1,0)
(13,59,0)
(49,60,0)
(16,28,0)
(62,83,0)
(32,13,0)
(90,4,0)
(22,12,0)
(30,97,0)
(71,28,0)
(60,1,0)
(57,16,0)
(20,24,0)
(10,81,0)
(41,59,0)
(25,28,0)
(99,1,0)
(82,21,0)
(85,81,0)
(63,21,0)
(19,16,0)
(61,12,0)
(44,28,0)
(59,1,0)
(29,24,0)
(36,4,0)
(17,49,0)
(10,65,0)
(5,77,0)
(67,28,0)
(75,14,0)
(79,48,0)
(59,28,0)
(86,67,0)
(68,71,0)
(80,97,0)
(58,97,0)
(42,83,0)
(81,83,0)
(50,4,0)
(40,1,0)
(38,16,0)
(97,28,0)
(54,91,0)
(84,7,0)
(18,21,0)
(93,67,0)
(27,60,0)
(65,83,0)
(94,16,0)
(69,25,0)
(70,44,0)
(35,24,0)
(8,65,0)
(33,59,0)
(24,28,0)
(12,28,0)
(15,7,0)
(21,1,0)
(88,24,0)
(59,13,0)
(6,44,0)
(45,96,0)
(60,28,0)
(31,59,0)
(26,25,0)
(92,14,0)
(3,1,0)
(14,44,0)
(67,1,0)
(3,96,0)
(83,40,0)
(56,3,0)
(91,28,0)
(3,28,0)
(98,67,0)
(37,7,0)
(74,24,1)
(32,89,1)
(21,28,1)
(58,30,1)
(10,81,1)
(36,71,1)
(91,87,1)
(9,21,1)
(46,3,1)
(61,22,1)
(83,28,1)
(97,28,1)
(26,4,1)
(29,35,1)
(60,76,1)
(3,96,1)
(25,28,1)
(68,74,1)
(48,83,1)
(37,15,1)
(43,50,1)
(95,98,1)
(10,62,1)
(59,13,1)
(66,12,1)
(67,95,1)
(3,78,1)
(12,61,1)
(59,31,1)
(44,14,1)
(53,80,1)
(8,91,1)
(40,51,1)
(6,70,1)
(90,43,1)
(62,83,1)
(79,77,1)
(2,77,1)
(89,41,1)
(83,42,1)
(48,79,1)
(55,45,1)
(25,47,1)
(81,85,1)
(63,82,1)
(21,11,1)
(56,2,1)
(11,18,1)
(93,86,1)
(35,88,1)
(3,28,1)
(86,59,1)
(51,83,1)
(34,68,1)
(39,69,1)
(44,28,1)
(82,25,1)
(12,28,1)
(13,32,1)
(33,44,1)
(85,91,1)
(65,83,1)
(78,96,1)
(5,12,1)
(20,29,1)
(81,83,1)
(19,57,1)
(76,49,1)
(80,67,1)
(27,46,1)
(7,28,1)
(97,58,1)
(88,97,1)
(41,33,1)
(4,90,1)
(96,55,1)
(60,28,1)
(47,39,1)
(70,60,1)
(69,26,1)
(10,65,1)
(31,13,1)
(15,9,1)
(23,27,1)
(16,38,1)
(7,84,1)
(57,7,1)
(87,54,1)
(49,17,1)
(94,19,1)
(22,40,1)
(91,28,1)
(4,28,1)
(84,37,1)
(18,63,1)
(73,14,1)
(65,8,1)
(64,34,1)
(45,56,1)
(54,16,1)
(50,36,1)
(30,53,1)
(71,28,1)
(24,20,1)
(42,0,1)
(98,93,1)
(75,92,1)
(62,66,1)
(14,75,1)
(16,28,1)
(17,23,1)
(71,64,1)
(24,28,1)
(60,49,1)
(77,5,1)
(44,73,1)
(38,94,1)
(59,28,1)
(92,6,1)
(10,48,1)
(67,28,1)
(71,77,2)
(44,14,2)
(78,77,2)
(19,77,2)
(10,65,2)
(83,28,2)
(53,77,2)
(21,28,2)
(75,77,2)
(29,77,2)
(27,77,2)
(48,77,2)
(91,28,2)
(9,77,2)
(3,96,2)
(5,12,2)
(71,28,2)
(74,77,2)
(81,83,2)
(73,77,2)
(47,77,2)
(41,77,2)
(97,77,2)
(21,77,2)
(86,77,2)
(31,77,2)
(7,77,2)
(59,28,2)
(16,28,2)
(54,77,2)
(60,49,2)
(15,77,2)
(65,91,2)
(18,77,2)
(67,77,2)
(20,77,2)
(48,83,2)
(25,28,2)
(55,77,2)
(62,83,2)
(94,77,2)
(79,77,2)
(88,77,2)
(10,81,2)
(13,77,2)
(62,12,2)
(77,12,2)
(49,77,2)
(34,77,2)
(91,77,2)
(43,77,2)
(69,77,2)
(50,77,2)
(14,77,2)
(92,77,2)
(33,77,2)
(38,77,2)
(90,77,2)
(70,77,2)
(76,77,2)
(6,77,2)
(80,77,2)
(8,91,2)
(12,28,2)
(98,77,2)
(57,77,2)
(59,77,2)
(10,62,2)
(3,77,2)
(87,77,2)
(7,28,2)
(66,12,2)
(89,77,2)
(60,28,2)
(85,91,2)
(82,77,2)
(81,91,2)
(25,77,2)
(67,28,2)
(95,77,2)
(26,77,2)
(3,28,2)
(36,77,2)
(65,83,2)
(4,28,2)
(16,77,2)
(44,28,2)
(59,13,2)
(11,77,2)
(39,77,2)
(60,77,2)
(23,77,2)
(93,77,2)
(96,77,2)
(68,77,2)
(24,28,2)
(17,77,2)
(10,48,2)
(58,77,2)
(4,77,2)
(2,77,2)
(30,77,2)
(56,77,2)
(64,77,2)
(37,77,2)
(45,77,2)
(44,77,2)
(24,77,2)
(32,77,2)
(97,28,2)
(84,77,2)
(46,77,2)
(63,77,2)
(35,77,2)
-----------------------------------
(0,tr)
(1,)
(2,tr)
(3,over_limit_check(tr, start, 1.0/ONE_SECOND, "lf")
(4,over_limit_check(tr, swap_memory,     1, PRId64)
(5,resources_limits)
(6,wall_time)
(7,over_limit_check(tr, workdir_num_files, 1, PRId64)
(8,0)
(9,tr)
(10,RET)
(11,PRId64)
(12,tr->last_error)
(13,1.0/ONE_SECOND)
(14,1.0/ONE_SECOND)
(15,workdir_num_files)
(16,over_limit_check(tr, workdir_footprint, 1, PRId64)
(17,ONE_SECOND)
(18,1)
(19,workdir_footprint)
(20,PRId64)
(21,over_limit_check(tr, bytes_written,   1, PRId64)
(22,tr)
(23,1.0)
(24,over_limit_check(tr, virtual_memory,  1, PRId64)
(25,over_limit_check(tr, bytes_read,      1, PRId64)
(26,tr)
(27,end)
(28,struct rmsummary *tr)
(29,1)
(30,1)
(31,"lf")
(32,ONE_SECOND)
(33,tr)
(34,1)
(35,virtual_memory)
(36,tr)
(37,1)
(38,PRId64)
(39,1)
(40,tr->limits_exceeded = NULL)
(41,cpu_time)
(42,limits_exceeded)
(43,1)
(44,over_limit_check(tr, wall_time, 1.0/ONE_SECOND, "lf")
(45,1.0)
(46,tr)
(47,PRId64)
(48,return 1;)
(49,1.0/ONE_SECOND)
(50,swap_memory)
(51,NULL)
(52,if(!resources_limits)
(53,total_processes)
(54,tr)
(55,ONE_SECOND)
(56,start)
(57,tr)
(58,PRId64)
(59,over_limit_check(tr, cpu_time,  1.0/ONE_SECOND, "lf")
(60,over_limit_check(tr, end,   1.0/ONE_SECOND, "lf")
(61,last_error)
(62,return 0;)
(63,bytes_written)
(64,PRId64)
(65,return 0;)
(66,0)
(67,over_limit_check(tr, max_concurrent_processes,   1, PRId64)
(68,resident_memory)
(69,bytes_read)
(70,tr)
(71,over_limit_check(tr, resident_memory, 1, PRId64)
(72,if(tr->limits_exceeded)
(73,"lf")
(74,tr)
(75,ONE_SECOND)
(76,"lf")
(77,!resources_limits)
(78,"lf")
(79,1)
(80,tr)
(81,return 1;)
(82,tr)
(83,tr->limits_exceeded)
(84,PRId64)
(85,1)
(86,tr)
(87,limits_exceeded)
(88,tr)
(89,1.0)
(90,PRId64)
(91,tr->limits_exceeded)
(92,1.0)
(93,max_concurrent_processes)
(94,1)
(95,PRId64)
(96,1.0/ONE_SECOND)
(97,over_limit_check(tr, total_processes,   1, PRId64)
(98,1)
(99,if(tr->last_error)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^