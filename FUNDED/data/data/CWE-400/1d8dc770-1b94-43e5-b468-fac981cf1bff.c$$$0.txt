-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
    break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
192,193
192,194
193,194
193,195
194,195
196,197
198,199
199,200
200,201
200,202
201,202
203,204
207,208
208,209
208,210
209,210
213,214
213,215
215,216
215,217
215,218
215,219
215,220
215,221
216,217
218,219
219,220
219,221
220,221
225,226
225,227
226,227
227,228
227,229
229,230
229,231
232,233
232,234
232,235
233,234
233,235
234,235
234,236
235,236
237,238
237,239
238,239
240,241
242,243
242,244
243,244
246,247
246,248
246,249
246,250
246,251
247,248
248,249
248,250
249,250
251,252
251,253
252,253
252,254
254,255
256,257
256,258
257,258
259,260
259,261
260,261
262,263
263,264
263,265
266,267
266,268
267,268
267,269
268,269
270,271
272,273
273,274
274,275
274,276
275,276
277,278
279,280
280,281
280,282
280,283
281,282
283,284
285,286
287,288
288,289
288,290
289,290
291,292
293,294
294,295
294,296
295,296
297,298
299,300
300,301
301,302
301,303
302,303
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,189,190,191,195,197,202,204,205,206,210,211,212,214,217,221,222,223,224,228,230,231,236,239,241,244,245,250,253,255,258,261,264,265,269,271,276,278,282,284,286,290,292,296,298,303,304,305
-----computeFrom-----
13,14
13,15
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
193,194
193,195
233,234
233,235
234,235
234,236
242,243
242,244
248,249
248,250
259,260
259,261
267,268
267,269
-----guardedBy-----
195,204
241,286
244,261
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
-----joern-----
(90,42,0)
(148,84,0)
(47,54,0)
(38,73,0)
(9,123,0)
(55,135,0)
(35,56,0)
(130,163,0)
(103,131,0)
(131,180,0)
(178,123,0)
(23,91,0)
(26,118,0)
(132,168,0)
(73,123,0)
(154,12,0)
(130,73,0)
(166,162,0)
(86,13,0)
(65,76,0)
(67,122,0)
(42,178,0)
(64,135,0)
(38,92,0)
(129,18,0)
(84,123,0)
(126,159,0)
(12,130,0)
(48,15,0)
(124,123,0)
(132,34,0)
(162,71,0)
(45,2,0)
(133,15,0)
(88,171,0)
(61,67,0)
(67,97,0)
(108,168,0)
(73,156,0)
(101,138,0)
(70,182,0)
(51,163,0)
(5,162,0)
(32,182,0)
(100,147,0)
(113,135,0)
(114,130,0)
(143,85,0)
(93,121,0)
(174,132,0)
(92,38,0)
(31,175,0)
(85,97,0)
(46,83,0)
(52,129,0)
(33,177,0)
(140,56,0)
(95,123,0)
(52,76,0)
(142,180,0)
(59,61,0)
(0,183,0)
(116,179,0)
(4,111,0)
(122,177,0)
(121,123,0)
(135,180,0)
(50,38,0)
(18,123,0)
(157,175,0)
(6,122,0)
(162,166,0)
(39,97,0)
(48,67,0)
(67,48,0)
(115,27,0)
(181,83,0)
(15,48,0)
(81,92,0)
(150,24,0)
(36,122,0)
(25,76,0)
(110,14,0)
(22,168,0)
(118,71,0)
(91,135,0)
(83,121,0)
(94,22,0)
(89,137,0)
(96,180,0)
(139,105,0)
(136,135,0)
(109,180,0)
(99,177,0)
(6,97,0)
(97,85,0)
(127,135,0)
(168,24,0)
(63,171,0)
(152,73,0)
(169,86,0)
(38,18,0)
(119,24,0)
(16,85,0)
(160,166,0)
(161,15,0)
(98,156,0)
(6,167,0)
(175,168,0)
(37,85,0)
(155,129,0)
(117,179,0)
(178,147,0)
(19,73,0)
(62,93,0)
(86,137,0)
(97,123,0)
(15,97,0)
(76,18,0)
(6,119,0)
(104,117,0)
(141,122,0)
(167,6,0)
(165,120,0)
(129,52,0)
(53,123,0)
(60,129,0)
(137,86,0)
(29,18,0)
(47,73,0)
(56,53,0)
(106,108,0)
(18,38,0)
(134,102,0)
(149,84,0)
(170,135,0)
(179,117,0)
(153,178,0)
(121,93,0)
(17,158,0)
(27,134,0)
(77,138,0)
(172,152,0)
(138,9,0)
(168,34,0)
(24,168,0)
(66,171,0)
(151,30,0)
(13,86,0)
(145,168,0)
(82,47,0)
(105,171,0)
(112,169,0)
(24,119,0)
(71,123,0)
(3,91,0)
(69,53,0)
(128,169,0)
(147,178,0)
(117,104,0)
(138,18,0)
(87,123,0)
(21,38,0)
(125,156,0)
(1,135,0)
(41,156,0)
(74,38,0)
(156,73,0)
(79,159,0)
(43,180,0)
(2,73,0)
(20,132,0)
(58,152,0)
(75,171,0)
(71,118,0)
(119,6,0)
(107,123,0)
(49,6,0)
(10,166,0)
(47,91,0)
(164,34,0)
(159,171,0)
(130,117,0)
(7,13,0)
(2,91,0)
(134,27,0)
(22,34,0)
(44,177,0)
(173,167,0)
(163,130,0)
(130,12,0)
(108,34,0)
(24,150,0)
(80,9,0)
(117,130,0)
(14,68,0)
(144,92,0)
(76,52,0)
(146,135,0)
(182,135,0)
(86,169,0)
(67,61,0)
(178,42,0)
(15,122,0)
(28,135,0)
(8,67,0)
(78,2,0)
(125,41,1)
(57,109,1)
(169,128,1)
(6,167,1)
(143,37,1)
(6,122,1)
(45,11,1)
(8,57,1)
(112,11,1)
(38,92,1)
(6,97,1)
(59,8,1)
(140,178,1)
(116,114,1)
(152,73,1)
(26,162,1)
(175,168,1)
(0,137,1)
(35,140,1)
(173,49,1)
(60,155,1)
(154,117,1)
(117,179,1)
(109,176,1)
(72,66,1)
(53,69,1)
(157,168,1)
(101,52,1)
(134,27,1)
(84,148,1)
(57,96,1)
(48,15,1)
(2,73,1)
(49,145,1)
(22,94,1)
(24,150,1)
(42,90,1)
(2,78,1)
(156,98,1)
(48,67,1)
(23,3,1)
(175,31,1)
(73,156,1)
(67,61,1)
(32,70,1)
(39,9,1)
(121,93,1)
(40,122,1)
(62,83,1)
(21,29,1)
(80,138,1)
(138,18,1)
(176,47,1)
(174,175,1)
(130,73,1)
(97,85,1)
(118,26,1)
(71,118,1)
(178,42,1)
(152,58,1)
(67,122,1)
(85,16,1)
(74,92,1)
(19,84,1)
(162,5,1)
(181,71,1)
(114,121,1)
(117,104,1)
(66,105,1)
(106,22,1)
(58,172,1)
(52,129,1)
(162,166,1)
(174,134,1)
(112,91,1)
(31,157,1)
(93,62,1)
(91,23,1)
(18,38,1)
(165,52,1)
(61,59,1)
(83,46,1)
(38,74,1)
(176,2,1)
(46,181,1)
(25,18,1)
(110,48,1)
(90,153,1)
(178,147,1)
(139,57,1)
(115,175,1)
(92,144,1)
(103,40,1)
(69,56,1)
(137,89,1)
(108,106,1)
(141,36,1)
(70,40,1)
(182,32,1)
(172,73,1)
(45,165,1)
(10,53,1)
(149,137,1)
(163,130,1)
(9,80,1)
(133,161,1)
(76,18,1)
(148,149,1)
(167,173,1)
(7,169,1)
(4,163,1)
(119,6,1)
(78,45,1)
(88,108,1)
(41,19,1)
(72,88,1)
(147,100,1)
(67,97,1)
(155,76,1)
(98,125,1)
(100,152,1)
(27,115,1)
(50,21,1)
(47,73,1)
(56,35,1)
(153,147,1)
(161,67,1)
(96,131,1)
(130,117,1)
(130,12,1)
(76,65,1)
(2,91,1)
(22,168,1)
(163,51,1)
(24,119,1)
(160,10,1)
(132,20,1)
(5,166,1)
(128,112,1)
(82,2,1)
(77,101,1)
(16,143,1)
(15,122,1)
(38,73,1)
(81,50,1)
(52,76,1)
(89,86,1)
(129,60,1)
(166,160,1)
(108,168,1)
(45,4,1)
(179,116,1)
(168,24,1)
(29,163,1)
(3,182,1)
(129,18,1)
(144,81,1)
(13,7,1)
(151,152,1)
(11,97,1)
(122,141,1)
(45,0,1)
(138,77,1)
(88,14,1)
(131,103,1)
(12,154,1)
(132,168,1)
(37,39,1)
(109,17,1)
(47,82,1)
(86,169,1)
(51,130,1)
(17,176,1)
(14,110,1)
(105,139,1)
(145,48,1)
(15,97,1)
(45,151,1)
(137,86,1)
(86,13,1)
(15,133,1)
(47,91,1)
(94,132,1)
(65,25,1)
(20,174,1)
(14,48,2)
(26,152,2)
(153,152,2)
(52,76,2)
(138,18,2)
(29,163,2)
(182,40,2)
(73,137,2)
(163,152,2)
(76,18,2)
(15,122,2)
(93,152,2)
(139,57,2)
(89,40,2)
(112,11,2)
(154,152,2)
(17,176,2)
(151,152,2)
(12,152,2)
(94,48,2)
(47,91,2)
(38,163,2)
(86,169,2)
(47,73,2)
(71,152,2)
(97,52,2)
(130,117,2)
(115,175,2)
(125,137,2)
(4,163,2)
(175,48,2)
(166,152,2)
(118,152,2)
(24,119,2)
(178,147,2)
(129,18,2)
(2,91,2)
(19,137,2)
(24,48,2)
(108,168,2)
(96,40,2)
(163,130,2)
(82,2,2)
(90,152,2)
(13,40,2)
(137,40,2)
(172,137,2)
(39,52,2)
(69,152,2)
(117,104,2)
(10,152,2)
(147,152,2)
(2,73,2)
(6,167,2)
(152,73,2)
(134,27,2)
(131,40,2)
(22,168,2)
(2,40,2)
(110,48,2)
(42,152,2)
(117,152,2)
(179,152,2)
(38,73,2)
(116,152,2)
(114,152,2)
(20,48,2)
(45,40,2)
(181,152,2)
(140,152,2)
(145,48,2)
(169,11,2)
(138,52,2)
(128,11,2)
(47,2,2)
(112,40,2)
(67,97,2)
(161,67,2)
(98,137,2)
(160,152,2)
(134,175,2)
(143,52,2)
(56,152,2)
(176,40,2)
(100,152,2)
(6,97,2)
(35,152,2)
(25,163,2)
(130,73,2)
(167,48,2)
(178,152,2)
(119,6,2)
(7,11,2)
(65,163,2)
(162,166,2)
(6,48,2)
(78,40,2)
(129,76,2)
(59,57,2)
(15,97,2)
(21,163,2)
(165,52,2)
(0,137,2)
(103,40,2)
(66,57,2)
(67,61,2)
(53,152,2)
(175,168,2)
(155,76,2)
(132,168,2)
(24,150,2)
(48,57,2)
(168,24,2)
(109,40,2)
(41,137,2)
(16,52,2)
(48,67,2)
(13,11,2)
(97,85,2)
(157,48,2)
(18,163,2)
(130,152,2)
(77,52,2)
(174,48,2)
(178,42,2)
(52,129,2)
(128,40,2)
(51,152,2)
(137,11,2)
(121,152,2)
(50,163,2)
(37,52,2)
(137,86,2)
(173,48,2)
(133,67,2)
(27,175,2)
(58,137,2)
(60,76,2)
(71,118,2)
(156,137,2)
(101,52,2)
(105,57,2)
(92,163,2)
(91,40,2)
(119,48,2)
(67,122,2)
(48,15,2)
(168,48,2)
(9,52,2)
(7,40,2)
(23,40,2)
(130,12,2)
(5,152,2)
(152,137,2)
(18,38,2)
(88,57,2)
(169,40,2)
(8,57,2)
(85,52,2)
(108,48,2)
(32,40,2)
(6,122,2)
(52,163,2)
(46,152,2)
(80,52,2)
(38,92,2)
(86,13,2)
(84,137,2)
(76,163,2)
(49,48,2)
(106,48,2)
(162,152,2)
(149,137,2)
(61,57,2)
(15,67,2)
(11,52,2)
(81,163,2)
(86,40,2)
(62,152,2)
(83,152,2)
(3,40,2)
(67,57,2)
(132,48,2)
(86,11,2)
(31,48,2)
(117,179,2)
(73,156,2)
(22,48,2)
(144,163,2)
(121,93,2)
(70,40,2)
(148,137,2)
(89,11,2)
(74,163,2)
-----------------------------------
(0,break;)
(1,do)
(2,connectSocket != INVALID_SOCKET)
(3,connectSocket)
(4,break;)
(5,s_addr)
(6,data*sizeof(wchar_t)
(7,wsaData)
(8,data)
(9,inputBuffer[recvResult] = \'\\0\')
(10,service)
(11,0)
(12,sizeof(service)
(13,&wsaData)
(14,printLine("Input is less than the length of the source string or too large")
(15,data < 100)
(16,0)
(17,WSACleanup()
(18,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(19,connectSocket)
(20,HELLO_STRING)
(21,connectSocket)
(22,printWLine(myString)
(23,INVALID_SOCKET)
(24,(wchar_t *)
(25,recvResult)
(26,IP_ADDRESS)
(27,-1)
(28,recvResult)
(29,recvResult)
(30,)
(31,NULL)
(32,0)
(33,switch(6)
(34,)
(35,sin_family)
(36,data)
(37,inputBuffer)
(38,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(39,data)
(40,6)
(41,AF_INET)
(42,sizeof(service)
(43,case 6:)
(44,switch(8)
(45,connectSocket)
(46,sin_port)
(47,CLOSE_SOCKET(connectSocket)
(48,data > wcslen(HELLO_STRING)
(49,data)
(50,inputBuffer)
(51,SOCKET_ERROR)
(52,recvResult == SOCKET_ERROR || recvResult == 0)
(53,service.sin_family = AF_INET)
(54,)
(55,inputBuffer)
(56,service.sin_family)
(57,8)
(58,INVALID_SOCKET)
(59,HELLO_STRING)
(60,0)
(61,wcslen(HELLO_STRING)
(62,TCP_PORT)
(63,case 7:)
(64,if (wsaDataInit)
(65,SOCKET_ERROR)
(66,break;)
(67,data > wcslen(HELLO_STRING)
(68,)
(69,AF_INET)
(70,wsaDataInit)
(71,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(72,RET)
(73,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(74,0)
(75,default:)
(76,recvResult == SOCKET_ERROR)
(77,recvResult)
(78,INVALID_SOCKET)
(79,if (data > wcslen(HELLO_STRING)
(80,\'\\0\')
(81,CHAR_ARRAY_SIZE)
(82,connectSocket)
(83,service.sin_port)
(84,wsaDataInit = 1)
(85,strtoul(inputBuffer, NULL, 0)
(86,WSAStartup(MAKEWORD(2,2)
(87,if (connect(connectSocket, (struct sockaddr*)
(88,break;)
(89,NO_ERROR)
(90,service)
(91,connectSocket = INVALID_SOCKET)
(92,CHAR_ARRAY_SIZE - 1)
(93,htons(TCP_PORT)
(94,myString)
(95,if (recvResult == SOCKET_ERROR || recvResult == 0)
(96,break;)
(97,data = strtoul(inputBuffer, NULL, 0)
(98,IPPROTO_TCP)
(99,data)
(100,service)
(101,inputBuffer)
(102,)
(103,"Benign, fixed string")
(104,struct sockaddr*)
(105,printLine("Benign, fixed string")
(106,myString)
(107,if (WSAStartup(MAKEWORD(2,2)
(108,free(myString)
(109,break;)
(110,"Input is less than the length of the source string or too large")
(111,)
(112,2)
(113,service)
(114,connectSocket)
(115,1)
(116,service)
(117,(struct sockaddr*)
(118,inet_addr(IP_ADDRESS)
(119,malloc(data*sizeof(wchar_t)
(120,)
(121,service.sin_port = htons(TCP_PORT)
(122,data = 0)
(123,)
(124,if (connectSocket == INVALID_SOCKET)
(125,SOCK_STREAM)
(126,myString)
(127,connectSocket)
(128,2)
(129,recvResult == 0)
(130,connect(connectSocket, (struct sockaddr*)
(131,printLine("Benign, fixed string")
(132,wcscpy(myString, HELLO_STRING)
(133,100)
(134,exit(-1)
(135,)
(136,if (connectSocket != INVALID_SOCKET)
(137,WSAStartup(MAKEWORD(2,2)
(138,inputBuffer[recvResult])
(139,"Benign, fixed string")
(140,service)
(141,0)
(142,default:)
(143,NULL)
(144,1)
(145,myString)
(146,wsaDataInit)
(147,&service)
(148,1)
(149,wsaDataInit)
(150,wchar_t *)
(151,break;)
(152,connectSocket == INVALID_SOCKET)
(153,0)
(154,service)
(155,recvResult)
(156,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(157,myString)
(158,)
(159,)
(160,sin_addr)
(161,data)
(162,service.sin_addr.s_addr)
(163,connect(connectSocket, (struct sockaddr*)
(164,if (myString == NULL)
(165,break;)
(166,service.sin_addr)
(167,sizeof(wchar_t)
(168,myString = (wchar_t *)
(169,MAKEWORD(2,2)
(170,wsaData)
(171,)
(172,connectSocket)
(173,wchar_t)
(174,myString)
(175,myString == NULL)
(176,wsaDataInit)
(177,)
(178,memset(&service, 0, sizeof(service)
(179,&service)
(180,)
(181,service)
(182,wsaDataInit = 0)
(183,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^