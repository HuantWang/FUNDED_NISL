-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct)
{
    size_t data = myStruct.structFirst;
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
40,41
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,7,9,14,16,20,21,25,27,28,33,36,38,41,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
30,31
30,32
31,32
31,33
39,40
39,41
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
38,83
41,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct){    size_t data = myStruct.structFirst;    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType
myStruct
myStruct
{    size_t data = myStruct.structFirst;    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = myStruct.structFirst;
size_t data = myStruct.structFirst;
size_t
size_t
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(1,28,0)
(27,4,0)
(30,26,0)
(34,24,0)
(24,21,0)
(26,35,0)
(31,39,0)
(0,13,0)
(21,27,0)
(36,28,0)
(32,7,0)
(28,20,0)
(44,20,0)
(45,44,0)
(11,18,0)
(20,23,0)
(6,27,0)
(39,30,0)
(13,30,0)
(16,23,0)
(20,24,0)
(37,30,0)
(42,7,0)
(30,39,0)
(46,15,0)
(39,31,0)
(16,20,0)
(4,27,0)
(22,16,0)
(18,23,0)
(7,35,0)
(18,20,0)
(2,31,0)
(8,31,0)
(27,26,0)
(30,13,0)
(26,10,0)
(21,24,0)
(27,21,0)
(24,20,0)
(3,25,0)
(24,34,0)
(33,10,0)
(40,4,0)
(44,23,0)
(31,26,0)
(29,10,0)
(5,35,0)
(25,47,0)
(15,38,0)
(19,23,0)
(38,15,0)
(9,20,0)
(38,12,0)
(10,26,0)
(10,41,0)
(14,16,0)
(43,26,0)
(13,0,1)
(39,30,1)
(2,30,1)
(22,28,1)
(15,46,1)
(10,41,1)
(44,20,1)
(9,39,1)
(38,15,1)
(6,9,1)
(18,11,1)
(22,38,1)
(39,31,1)
(28,36,1)
(16,20,1)
(10,33,1)
(31,26,1)
(26,10,1)
(27,4,1)
(11,16,1)
(40,6,1)
(44,45,1)
(8,2,1)
(20,24,1)
(18,20,1)
(16,14,1)
(3,39,1)
(46,28,1)
(25,3,1)
(36,1,1)
(29,43,1)
(33,29,1)
(30,26,1)
(31,8,1)
(27,26,1)
(1,20,1)
(45,18,1)
(14,22,1)
(37,26,1)
(0,37,1)
(17,25,1)
(4,40,1)
(24,21,1)
(17,44,1)
(28,20,1)
(24,34,1)
(21,27,1)
(30,13,1)
(31,30,2)
(18,20,2)
(3,39,2)
(10,41,2)
(40,39,2)
(20,24,2)
(30,26,2)
(14,39,2)
(1,39,2)
(4,39,2)
(21,27,2)
(6,39,2)
(16,39,2)
(39,30,2)
(24,21,2)
(27,4,2)
(38,28,2)
(38,15,2)
(31,26,2)
(46,28,2)
(27,26,2)
(15,28,2)
(2,30,2)
(27,39,2)
(44,20,2)
(26,10,2)
(39,31,2)
(16,20,2)
(20,39,2)
(25,39,2)
(22,39,2)
(28,20,2)
(24,34,2)
(30,13,2)
(11,39,2)
(24,39,2)
(21,39,2)
(28,39,2)
(18,39,2)
(8,30,2)
(44,39,2)
(45,39,2)
(9,39,2)
(36,39,2)
-----------------------------------
(0,HELLO_STRING)
(1,myString)
(2,data)
(3,"Input is less than the length of the source string or too large")
(4,sizeof(char)
(5,data)
(6,data)
(7,)
(8,100)
(9,myString)
(10,myStruct.structFirst)
(11,myString)
(12,)
(13,strlen(HELLO_STRING)
(14,HELLO_STRING)
(15,-1)
(16,strcpy(myString, HELLO_STRING)
(17,RET)
(18,printLine(myString)
(19,if (myString == NULL)
(20,myString = (char *)
(21,malloc(data*sizeof(char)
(22,myString)
(23,)
(24,(char *)
(25,printLine("Input is less than the length of the source string or too large")
(26,data = myStruct.structFirst)
(27,data*sizeof(char)
(28,myString == NULL)
(29,myStruct)
(30,data > strlen(HELLO_STRING)
(31,data < 100)
(32,if (data > strlen(HELLO_STRING)
(33,structFirst)
(34,char *)
(35,)
(36,NULL)
(37,data)
(38,exit(-1)
(39,data > strlen(HELLO_STRING)
(40,char)
(41,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct)
(42,myString)
(43,data)
(44,free(myString)
(45,myString)
(46,1)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^