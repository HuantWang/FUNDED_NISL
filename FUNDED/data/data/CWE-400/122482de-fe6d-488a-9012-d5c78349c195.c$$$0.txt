-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
    else
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
57,59
58,59
61,62
63,64
64,65
66,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
75,76
75,77
76,77
78,79
78,80
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,8,10,14,16,20,25,26,31,32,36,42,44,46,51,52,55,59,60,62,65,70,71,77,79,81,86,87,90,94,95,97,100,105,106
-----computeFrom-----
12,13
12,14
23,24
23,25
29,30
29,31
49,50
49,51
53,54
53,55
84,85
84,86
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number */        count = 20;    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number */        count = 20;    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        /* FIX: Use a relatively small number */        count = 20;    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    else    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(2,21,0)
(57,27,0)
(19,31,0)
(13,10,0)
(33,3,0)
(21,27,0)
(29,18,0)
(16,52,0)
(10,22,0)
(50,51,0)
(46,27,0)
(3,22,0)
(32,14,0)
(57,15,0)
(47,27,0)
(58,18,0)
(40,11,0)
(48,38,0)
(10,57,0)
(15,57,0)
(51,50,0)
(8,22,0)
(57,10,0)
(57,44,0)
(24,22,0)
(50,11,0)
(5,11,0)
(14,18,0)
(18,35,0)
(36,26,0)
(9,14,0)
(21,44,0)
(43,57,0)
(20,52,0)
(49,44,0)
(31,54,0)
(42,11,0)
(30,50,0)
(53,51,0)
(56,23,0)
(39,38,0)
(41,16,0)
(23,52,0)
(1,36,0)
(55,21,0)
(27,6,0)
(38,34,0)
(4,52,0)
(37,12,0)
(7,44,0)
(16,21,0)
(45,12,0)
(44,0,0)
(12,38,0)
(21,16,0)
(21,55,0)
(36,1,1)
(45,28,1)
(47,17,1)
(50,51,1)
(44,7,1)
(28,27,1)
(10,57,1)
(49,17,1)
(16,52,1)
(57,44,1)
(53,30,1)
(27,46,1)
(23,56,1)
(32,28,1)
(52,20,1)
(31,19,1)
(41,23,1)
(14,9,1)
(57,27,1)
(19,10,1)
(43,13,1)
(41,52,1)
(10,22,1)
(28,44,1)
(23,52,1)
(25,16,1)
(16,21,1)
(22,24,1)
(4,12,1)
(13,22,1)
(7,49,1)
(24,8,1)
(9,32,1)
(37,45,1)
(57,15,1)
(1,16,1)
(3,22,1)
(56,36,1)
(51,53,1)
(33,31,1)
(3,33,1)
(17,50,1)
(2,41,1)
(21,2,1)
(12,37,1)
(8,14,1)
(21,44,1)
(21,27,1)
(57,43,1)
(46,47,1)
(20,4,1)
(21,55,1)
(13,3,1)
(25,10,1)
(41,28,2)
(3,10,2)
(10,22,2)
(16,16,2)
(41,16,2)
(43,10,2)
(12,28,2)
(21,44,2)
(16,52,2)
(21,27,2)
(23,16,2)
(37,28,2)
(36,16,2)
(31,10,2)
(56,16,2)
(23,52,2)
(14,28,2)
(21,55,2)
(19,10,2)
(16,21,2)
(2,16,2)
(10,28,2)
(46,17,2)
(44,17,2)
(33,10,2)
(21,28,2)
(57,27,2)
(52,28,2)
(4,28,2)
(7,17,2)
(20,28,2)
(57,44,2)
(10,57,2)
(2,28,2)
(8,28,2)
(21,16,2)
(57,15,2)
(22,28,2)
(43,28,2)
(13,10,2)
(16,28,2)
(45,28,2)
(57,28,2)
(3,22,2)
(50,51,2)
(13,28,2)
(47,17,2)
(10,10,2)
(24,28,2)
(32,28,2)
(57,10,2)
(9,28,2)
(1,16,2)
(49,17,2)
(27,17,2)
-----------------------------------
(0,)
(1,"Hello")
(2,count)
(3,i++)
(4,i)
(5,count)
(6,)
(7,20)
(8,i)
(9,0)
(10,i < (size_t)
(11,)
(12,i = 0)
(13,i)
(14,i = 0)
(15,size_t)
(16,i < (size_t)
(17,globalReturnsTrueOrFalse()
(18,)
(19,"Hello")
(20,0)
(21,(size_t)
(22,i = 0)
(23,i++)
(24,0)
(25,RET)
(26,)
(27,count = 20)
(28,globalReturnsTrueOrFalse()
(29,i)
(30,count)
(31,printLine("Hello")
(32,i)
(33,i)
(34,)
(35,)
(36,printLine("Hello")
(37,0)
(38,)
(39,i)
(40,if(globalReturnsTrueOrFalse()
(41,i)
(42,if(globalReturnsTrueOrFalse()
(43,count)
(44,count = 20)
(45,i)
(46,20)
(47,count)
(48,for (i = 0; i < (size_t)
(49,count)
(50,count = -1)
(51,-1)
(52,i = 0)
(53,1)
(54,)
(55,size_t)
(56,i)
(57,(size_t)
(58,for (i = 0; i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^