-----label-----
0
-----code-----
pid_t waitpid(pid_t pid, int *status, int options)
{
	int status_; //status might be NULL, thus we use status_ to retrive the state.
	pid_t pidb;
	typeof(waitpid) *original_waitpid = dlsym(RTLD_NEXT, "waitpid");

	debug(D_DEBUG, "waiting from %d for %d.\n", getpid(), pid);
	pidb = original_waitpid(pid, &status_, options);

	if(WIFEXITED(status_) || WIFSIGNALED(status_))
	{
		struct rmonitor_msg msg;
		msg.type   = WAIT;
		msg.error  = 0;          /* send message only on success, so error is 0. */
		msg.origin = getpid();
		msg.data.p = pidb;

		send_monitor_msg(&msg);
	}

	if(status)
		*status = status_;

	return pidb;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
35,36
36,37
38,39
38,40
38,41
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
49,52
49,53
49,54
50,51
52,53
55,56
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
64,67
64,68
65,66
67,68
69,70
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
82,83
84,85
86,87
86,88
86,89
86,90
86,91
86,92
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
110,112
111,112
114,115
115,116
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
125,126
127,128
128,129
128,130
129,130
131,132
132,133
134,135
134,136
135,136
137,138
138,139
138,140
139,140
140,141
142,143
144,145
145,146
-----nextToken-----
3,5,8,10,12,14,15,17,19,23,25,29,31,37,39,40,44,46,47,51,53,54,57,59,63,66,68,71,73,78,80,83,85,90,92,97,98,100,105,106,107,112,113,116,122,123,124,126,130,133,136,141,143,146
-----computeFrom-----
61,62
61,63
75,76
75,77
94,95
94,96
102,103
102,104
109,110
109,111
118,119
118,120
138,139
138,140
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;UnaryExpression;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
pid_t waitpid(pid_t pid, int *status, int options){	int status_; //status might be NULL, thus we use status_ to retrive the state.	pid_t pidb;	typeof(waitpid) *original_waitpid = dlsym(RTLD_NEXT, "waitpid");	debug(D_DEBUG, "waiting from %d for %d.\n", getpid(), pid);	pidb = original_waitpid(pid, &status_, options);	if(WIFEXITED(status_) || WIFSIGNALED(status_))	{		struct rmonitor_msg msg;		msg.type   = WAIT;		msg.error  = 0;          /* send message only on success, so error is 0. */		msg.origin = getpid();		msg.data.p = pidb;		send_monitor_msg(&msg);	}	if(status)		*status = status_;	return pidb;}
pid_t
pid_t
waitpid(pid_t pid, int *status, int options)
waitpid
pid_t pid
pid_t
pid_t
pid
pid
int *status
int
*status
*
status
int options
int
options
options
{	int status_; //status might be NULL, thus we use status_ to retrive the state.	pid_t pidb;	typeof(waitpid) *original_waitpid = dlsym(RTLD_NEXT, "waitpid");	debug(D_DEBUG, "waiting from %d for %d.\n", getpid(), pid);	pidb = original_waitpid(pid, &status_, options);	if(WIFEXITED(status_) || WIFSIGNALED(status_))	{		struct rmonitor_msg msg;		msg.type   = WAIT;		msg.error  = 0;          /* send message only on success, so error is 0. */		msg.origin = getpid();		msg.data.p = pidb;		send_monitor_msg(&msg);	}	if(status)		*status = status_;	return pidb;}
int status_;
int status_;
int
status_
status_
pid_t pidb;
pid_t pidb;
pid_t
pid_t
pidb
pidb
typeof(waitpid) *original_waitpid = dlsym(RTLD_NEXT, "waitpid");
typeof(waitpid) *original_waitpid = dlsym(RTLD_NEXT, "waitpid");
typeof(waitpid)
(waitpid)
waitpid
waitpid
*original_waitpid = dlsym(RTLD_NEXT, "waitpid")
*
original_waitpid
= dlsym(RTLD_NEXT, "waitpid")
dlsym(RTLD_NEXT, "waitpid")
dlsym
dlsym
RTLD_NEXT
RTLD_NEXT
"waitpid"
debug(D_DEBUG, "waiting from %d for %d.\n", getpid(), pid);
debug(D_DEBUG, "waiting from %d for %d.\n", getpid(), pid)
debug
debug
D_DEBUG
D_DEBUG
"waiting from %d for %d.\n"
getpid()
getpid
getpid
pid
pid
pidb = original_waitpid(pid, &status_, options);
pidb = original_waitpid(pid, &status_, options)
pidb
pidb
original_waitpid(pid, &status_, options)
original_waitpid
original_waitpid
pid
pid
&status_
status_
status_
options
options
if(WIFEXITED(status_) || WIFSIGNALED(status_))	{		struct rmonitor_msg msg;		msg.type   = WAIT;		msg.error  = 0;          /* send message only on success, so error is 0. */		msg.origin = getpid();		msg.data.p = pidb;		send_monitor_msg(&msg);	}
WIFEXITED(status_) || WIFSIGNALED(status_)
WIFEXITED(status_)
WIFEXITED
WIFEXITED
status_
status_
WIFSIGNALED(status_)
WIFSIGNALED
WIFSIGNALED
status_
status_
{		struct rmonitor_msg msg;		msg.type   = WAIT;		msg.error  = 0;          /* send message only on success, so error is 0. */		msg.origin = getpid();		msg.data.p = pidb;		send_monitor_msg(&msg);	}
struct rmonitor_msg msg;
struct rmonitor_msg msg;
struct rmonitor_msg
rmonitor_msg
msg
msg
msg.type   = WAIT;
msg.type   = WAIT
msg.type
msg
msg
type
WAIT
WAIT
msg.error  = 0;
msg.error  = 0
msg.error
msg
msg
error
0
msg.origin = getpid();
msg.origin = getpid()
msg.origin
msg
msg
origin
getpid()
getpid
getpid
msg.data.p = pidb;
msg.data.p = pidb
msg.data.p
msg.data
msg
msg
data
p
pidb
pidb
send_monitor_msg(&msg);
send_monitor_msg(&msg)
send_monitor_msg
send_monitor_msg
&msg
msg
msg
if(status)		*status = status_;
status
status
*status = status_;
*status = status_
*status
status
status
status_
status_
return pidb;
pidb
pidb
-----joern-----
(8,51,0)
(48,62,0)
(10,32,0)
(17,13,0)
(52,66,0)
(14,40,0)
(24,14,0)
(16,50,0)
(27,0,0)
(43,10,0)
(32,40,0)
(44,63,0)
(20,51,0)
(50,65,0)
(10,19,0)
(32,52,0)
(2,40,0)
(51,20,0)
(3,35,0)
(47,39,0)
(60,32,0)
(65,50,0)
(39,19,0)
(22,40,0)
(0,53,0)
(1,33,0)
(46,2,0)
(67,52,0)
(28,14,0)
(54,2,0)
(57,58,0)
(42,18,0)
(2,36,0)
(21,30,0)
(49,50,0)
(2,46,0)
(18,42,0)
(65,40,0)
(26,52,0)
(56,35,0)
(23,20,0)
(64,18,0)
(9,44,0)
(4,2,0)
(6,67,0)
(11,2,0)
(29,19,0)
(13,63,0)
(52,67,0)
(30,39,0)
(14,32,0)
(7,0,0)
(31,19,0)
(52,36,0)
(52,32,0)
(35,31,0)
(33,62,0)
(63,44,0)
(5,30,0)
(59,31,0)
(12,40,0)
(61,40,0)
(38,37,0)
(37,57,0)
(33,25,0)
(58,57,0)
(42,19,0)
(15,53,0)
(53,0,0)
(57,19,0)
(41,52,0)
(53,10,0)
(55,37,0)
(51,65,0)
(63,13,0)
(45,40,0)
(6,26,1)
(51,20,1)
(57,58,1)
(3,39,1)
(33,1,1)
(14,32,1)
(21,63,1)
(37,38,1)
(0,7,1)
(10,43,1)
(2,46,1)
(49,51,1)
(15,0,1)
(52,41,1)
(26,60,1)
(54,65,1)
(44,9,1)
(41,67,1)
(13,17,1)
(28,14,1)
(52,36,1)
(27,57,1)
(53,0,1)
(59,35,1)
(31,59,1)
(2,36,1)
(63,44,1)
(5,21,1)
(63,13,1)
(9,32,1)
(11,54,1)
(14,24,1)
(55,31,1)
(20,23,1)
(50,16,1)
(16,49,1)
(10,32,1)
(62,48,1)
(2,4,1)
(42,18,1)
(24,62,1)
(38,55,1)
(47,30,1)
(65,50,1)
(58,37,1)
(51,8,1)
(60,2,1)
(30,5,1)
(34,63,1)
(17,44,1)
(48,33,1)
(46,11,1)
(7,27,1)
(64,10,1)
(56,3,1)
(39,47,1)
(52,66,1)
(67,6,1)
(1,34,1)
(35,56,1)
(18,64,1)
(4,46,1)
(32,52,1)
(53,15,1)
(8,20,1)
(43,53,1)
(24,34,1)
(33,25,1)
(34,42,1)
(52,67,1)
(7,63,2)
(63,13,2)
(17,44,2)
(64,63,2)
(63,44,2)
(13,44,2)
(10,63,2)
(42,63,2)
(52,66,2)
(59,63,2)
(33,25,2)
(2,46,2)
(15,63,2)
(21,63,2)
(3,63,2)
(1,34,2)
(5,63,2)
(57,58,2)
(52,36,2)
(55,63,2)
(47,63,2)
(42,18,2)
(30,63,2)
(58,63,2)
(18,63,2)
(33,34,2)
(43,63,2)
(52,67,2)
(62,34,2)
(53,63,2)
(39,63,2)
(65,50,2)
(0,63,2)
(37,63,2)
(28,14,2)
(2,36,2)
(38,63,2)
(14,32,2)
(10,32,2)
(51,20,2)
(56,63,2)
(57,63,2)
(31,63,2)
(48,34,2)
(53,0,2)
(32,52,2)
(35,63,2)
(27,63,2)
-----------------------------------
(0,msg.data)
(1,status)
(2,debug(D_DEBUG, "waiting from %d for %d.\\n", getpid()
(3,msg)
(4,pid)
(5,type)
(6,status_)
(7,data)
(8,original_waitpid)
(9,status_)
(10,msg.data.p = pidb)
(11,"waiting from %d for %d.\\n")
(12,status_)
(13,WIFSIGNALED(status_)
(14,return pidb;)
(15,p)
(16,"waitpid")
(17,status_)
(18,&msg)
(19,)
(20,typeof(waitpid)
(21,msg)
(22,if(WIFEXITED(status_)
(23,waitpid)
(24,pidb)
(25,int *status)
(26,pid)
(27,msg)
(28,RET)
(29,msg)
(30,msg.type)
(31,msg.error  = 0)
(32,pidb = original_waitpid(pid, &status_, options)
(33,*status)
(34,status)
(35,msg.error)
(36,pid_t pid)
(37,msg.origin)
(38,origin)
(39,msg.type   = WAIT)
(40,)
(41,options)
(42,send_monitor_msg(&msg)
(43,pidb)
(44,WIFEXITED(status_)
(45,if(status)
(46,getpid()
(47,WAIT)
(48,status_)
(49,RTLD_NEXT)
(50,dlsym(RTLD_NEXT, "waitpid")
(51,typeof(waitpid)
(52,original_waitpid(pid, &status_, options)
(53,msg.data.p)
(54,D_DEBUG)
(55,msg)
(56,error)
(57,msg.origin = getpid()
(58,getpid()
(59,0)
(60,pidb)
(61,pidb)
(62,*status = status_)
(63,WIFEXITED(status_)
(64,msg)
(65,typeof(waitpid)
(66,int options)
(67,&status_)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^