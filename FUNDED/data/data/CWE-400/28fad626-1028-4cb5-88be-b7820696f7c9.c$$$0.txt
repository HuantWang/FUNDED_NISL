-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
63,64
63,65
63,66
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,69,73,75,79,81,86,87
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
-----guardedBy-----
41,69
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad(){    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad
{    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data);
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data)
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource
data
data
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(19,36,0)
(4,23,0)
(18,30,0)
(32,33,0)
(9,19,0)
(7,22,0)
(14,23,0)
(11,3,0)
(29,16,0)
(21,11,0)
(35,3,0)
(19,12,0)
(30,16,0)
(5,11,0)
(0,12,0)
(24,23,0)
(1,11,0)
(19,6,0)
(25,3,0)
(26,17,0)
(12,3,0)
(28,4,0)
(27,29,0)
(24,6,0)
(4,16,0)
(21,12,0)
(2,24,0)
(33,12,0)
(6,19,0)
(30,23,0)
(15,26,0)
(36,19,0)
(24,2,0)
(8,36,0)
(6,24,0)
(23,24,0)
(13,25,0)
(12,21,0)
(20,4,0)
(29,23,0)
(22,33,0)
(23,16,0)
(10,25,0)
(34,21,0)
(33,22,0)
(32,12,1)
(8,9,1)
(24,2,1)
(20,28,1)
(6,19,1)
(34,0,1)
(29,27,1)
(21,34,1)
(27,30,1)
(24,6,1)
(19,36,1)
(23,24,1)
(4,20,1)
(28,23,1)
(30,18,1)
(26,15,1)
(36,8,1)
(30,23,1)
(29,23,1)
(4,23,1)
(33,12,1)
(9,14,1)
(18,4,1)
(15,33,1)
(31,26,1)
(7,32,1)
(33,22,1)
(19,12,1)
(12,21,1)
(0,11,1)
(22,7,1)
(11,1,1)
(21,11,1)
(14,33,1)
(31,29,1)
(1,5,1)
(19,33,2)
(33,12,2)
(6,33,2)
(14,33,2)
(8,33,2)
(24,6,2)
(29,23,2)
(9,33,2)
(18,33,2)
(4,33,2)
(30,33,2)
(15,33,2)
(23,24,2)
(12,21,2)
(24,2,2)
(33,22,2)
(36,33,2)
(26,33,2)
(4,23,2)
(30,23,2)
(19,12,2)
(6,19,2)
(27,33,2)
(28,33,2)
(29,33,2)
(20,33,2)
(19,36,2)
(23,33,2)
(24,33,2)
(21,11,2)
-----------------------------------
(0,data)
(1,0)
(2,char *)
(3,)
(4,strcpy(myString, HELLO_STRING)
(5,data)
(6,malloc(data*sizeof(char)
(7,HELLO_STRING)
(8,char)
(9,data)
(10,myString)
(11,data = 0)
(12,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data)
(13,if (data > strlen(HELLO_STRING)
(14,myString)
(15,"Input is less than the length of the source string")
(16,)
(17,)
(18,myString)
(19,data*sizeof(char)
(20,HELLO_STRING)
(21,CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource(data)
(22,strlen(HELLO_STRING)
(23,myString = (char *)
(24,(char *)
(25,)
(26,printLine("Input is less than the length of the source string")
(27,myString)
(28,myString)
(29,free(myString)
(30,printLine(myString)
(31,RET)
(32,data)
(33,data > strlen(HELLO_STRING)
(34,data)
(35,data)
(36,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^