-----label-----
0
-----code-----
static void read_arc_build_cfg_regs(void)
{
	struct bcr_timer timer;
	struct bcr_generic bcr;
	struct cpuinfo_arc *cpu = &cpuinfo_arc700[smp_processor_id()];
	const struct id_to_str *tbl;
	struct bcr_isa_arcv2 isa;

	FIX_PTR(cpu);

	READ_BCR(AUX_IDENTITY, cpu->core);

	for (tbl = &arc_cpu_rel[0]; tbl->id != 0; tbl++) {
		if (cpu->core.family == tbl->id) {
			cpu->details = tbl->str;
			break;
		}
	}

	for (tbl = &arc_cpu_nm[0]; tbl->id != 0; tbl++) {
		if ((cpu->core.family & 0xF4) == tbl->id)
			break;
	}
	cpu->name = tbl->str;

	READ_BCR(ARC_REG_TIMERS_BCR, timer);
	cpu->extn.timer0 = timer.t0;
	cpu->extn.timer1 = timer.t1;
	cpu->extn.rtc = timer.rtc;

	cpu->vec_base = read_aux_reg(AUX_INTR_VEC_BASE);

	READ_BCR(ARC_REG_MUL_BCR, cpu->extn_mpy);

	cpu->extn.norm = read_aux_reg(ARC_REG_NORM_BCR) > 1 ? 1 : 0; /* 2,3 */
	cpu->extn.barrel = read_aux_reg(ARC_REG_BARREL_BCR) > 1 ? 1 : 0; /* 2,3 */
	cpu->extn.swap = read_aux_reg(ARC_REG_SWAP_BCR) ? 1 : 0;        /* 1,3 */
	cpu->extn.crc = read_aux_reg(ARC_REG_CRC_BCR) ? 1 : 0;
	cpu->extn.minmax = read_aux_reg(ARC_REG_MIXMAX_BCR) > 1 ? 1 : 0; /* 2 */
	cpu->extn.swape = (cpu->core.family >= 0x34) ? 1 :
				IS_ENABLED(CONFIG_ARC_HAS_SWAPE);

	READ_BCR(ARC_REG_XY_MEM_BCR, cpu->extn_xymem);

	/* Read CCM BCRs for boot reporting even if not enabled in Kconfig */
	read_decode_ccm_bcr(cpu);

	read_decode_mmu_bcr();
	read_decode_cache_bcr();

	if (is_isa_arcompact()) {
		struct bcr_fp_arcompact sp, dp;
		struct bcr_bpu_arcompact bpu;

		READ_BCR(ARC_REG_FP_BCR, sp);
		READ_BCR(ARC_REG_DPFP_BCR, dp);
		cpu->extn.fpu_sp = sp.ver ? 1 : 0;
		cpu->extn.fpu_dp = dp.ver ? 1 : 0;

		READ_BCR(ARC_REG_BPU_BCR, bpu);
		cpu->bpu.ver = bpu.ver;
		cpu->bpu.full = bpu.fam ? 1 : 0;
		if (bpu.ent) {
			cpu->bpu.num_cache = 256 << (bpu.ent - 1);
			cpu->bpu.num_pred = 256 << (bpu.ent - 1);
		}
	} else {
		struct bcr_fp_arcv2 spdp;
		struct bcr_bpu_arcv2 bpu;

		READ_BCR(ARC_REG_FP_V2_BCR, spdp);
		cpu->extn.fpu_sp = spdp.sp ? 1 : 0;
		cpu->extn.fpu_dp = spdp.dp ? 1 : 0;

		READ_BCR(ARC_REG_BPU_BCR, bpu);
		cpu->bpu.ver = bpu.ver;
		cpu->bpu.full = bpu.ft;
		cpu->bpu.num_cache = 256 << bpu.bce;
		cpu->bpu.num_pred = 2048 << bpu.pte;

		if (cpu->core.family >= 0x54) {

			struct bcr_uarch_build_arcv2 uarch;

			/*
			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was
			 * dual issue only (HS4x). But next uarch rev (1:0)
			 * allows it be configured for single issue (HS3x)
			 * Ensure we fiddle with dual issue only on HS4x
			 */
			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);

			if (uarch.prod == 4) {
				unsigned int exec_ctrl;

				/* dual issue hardware always present */
				cpu->extn.dual = 1;

				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);

				/* dual issue hardware enabled ? */
				cpu->extn.dual_enb = !(exec_ctrl & 1);

			}
		}
	}

	READ_BCR(ARC_REG_AP_BCR, bcr);
	cpu->extn.ap = bcr.ver ? 1 : 0;

	READ_BCR(ARC_REG_SMART_BCR, bcr);
	cpu->extn.smart = bcr.ver ? 1 : 0;

	READ_BCR(ARC_REG_RTT_BCR, bcr);
	cpu->extn.rtt = bcr.ver ? 1 : 0;

	cpu->extn.debug = cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt;

	READ_BCR(ARC_REG_ISA_CFG_BCR, isa);

	/* some hacks for lack of feature BCR info in old ARC700 cores */
	if (is_isa_arcompact()) {
		if (!isa.ver)	/* ISA BCR absent, use Kconfig info */
			cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);
		else {
			/* ARC700_BUILD only has 2 bits of isa info */
			struct bcr_generic bcr = *(struct bcr_generic *)&isa;
			cpu->isa.atomic = bcr.info & 1;
		}

		cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN);

		 /* there's no direct way to distinguish 750 vs. 770 */
		if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3))
			cpu->name = "ARC750";
	} else {
		cpu->isa = isa;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
9,41
9,42
9,43
9,44
9,45
10,11
11,12
11,13
12,13
14,15
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
31,32
31,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
62,63
62,64
63,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
88,90
89,90
89,91
90,91
94,95
94,96
95,96
98,99
98,100
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
110,111
110,112
110,113
110,114
111,112
112,113
112,114
113,114
115,116
116,117
116,118
117,118
120,121
120,122
121,122
121,123
122,123
126,127
127,128
129,130
130,131
130,132
131,132
131,133
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
141,142
141,143
142,143
146,147
147,148
147,149
148,149
148,150
149,150
152,153
152,154
153,154
156,157
157,158
157,159
157,160
158,159
160,161
162,163
164,165
165,166
165,167
166,167
166,168
167,168
167,169
168,169
172,173
172,174
173,174
176,177
177,178
177,179
178,179
178,180
179,180
179,181
180,181
184,185
184,186
185,186
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
196,197
196,198
197,198
200,201
201,202
201,203
202,203
202,204
203,204
206,207
206,208
207,208
209,210
211,212
212,213
212,214
212,215
213,214
215,216
217,218
217,219
218,219
221,222
222,223
222,224
223,224
223,225
224,225
224,226
225,226
229,230
229,231
229,232
230,231
230,232
231,232
231,233
232,233
234,235
239,240
240,241
240,242
241,242
241,243
242,243
242,244
243,244
247,248
247,249
247,250
248,249
248,250
249,250
249,251
250,251
252,253
257,258
258,259
258,260
259,260
259,261
260,261
260,262
261,262
265,266
265,267
265,268
266,267
266,268
267,268
269,270
273,274
274,275
274,276
275,276
275,277
276,277
276,278
277,278
281,282
281,283
281,284
282,283
282,284
283,284
285,286
289,290
290,291
290,292
291,292
291,293
292,293
292,294
293,294
297,298
297,299
297,300
298,299
298,300
299,300
299,301
300,301
302,303
307,308
308,309
308,310
309,310
309,311
310,311
310,312
311,312
315,316
315,317
315,318
316,317
317,318
317,319
318,319
318,320
319,320
319,321
320,321
326,327
326,328
327,328
329,330
331,332
332,333
332,334
332,335
333,334
335,336
337,338
337,339
338,339
341,342
342,343
342,344
343,344
345,346
347,348
348,349
349,350
351,352
352,353
353,354
355,356
355,357
355,358
356,357
357,358
359,360
359,361
359,362
359,363
359,364
359,365
359,366
359,367
359,368
359,369
360,361
361,362
361,363
361,364
362,363
364,365
366,367
368,369
369,370
369,371
370,371
372,373
374,375
375,376
375,377
375,378
376,377
378,379
380,381
382,383
383,384
383,385
383,386
384,385
386,387
388,389
390,391
391,392
391,393
392,393
392,394
393,394
393,395
394,395
398,399
398,400
398,401
399,400
399,401
400,401
405,406
406,407
406,408
407,408
407,409
408,409
408,410
409,410
413,414
413,415
413,416
414,415
414,416
415,416
420,421
421,422
421,423
421,424
422,423
424,425
426,427
428,429
429,430
429,431
430,431
430,432
431,432
431,433
432,433
436,437
436,438
437,438
440,441
441,442
441,443
442,443
442,444
443,444
443,445
444,445
448,449
448,450
448,451
449,450
449,451
450,451
455,456
455,457
456,457
456,458
457,458
460,461
460,462
461,462
462,463
462,464
463,464
463,465
464,465
464,466
465,466
469,470
469,471
471,472
472,473
472,474
473,474
473,475
474,475
478,479
479,480
479,481
480,481
480,482
481,482
481,483
482,483
486,487
486,488
488,489
489,490
489,491
490,491
490,492
491,492
495,496
495,497
495,498
495,499
495,500
495,501
495,502
495,503
495,504
495,505
495,506
496,497
497,498
497,499
498,499
500,501
502,503
503,504
503,505
504,505
506,507
508,509
509,510
509,511
509,512
510,511
512,513
514,515
516,517
517,518
517,519
518,519
518,520
519,520
519,521
520,521
524,525
524,526
524,527
525,526
525,527
526,527
531,532
532,533
532,534
533,534
533,535
534,535
534,536
535,536
539,540
539,541
539,542
540,541
540,542
541,542
546,547
547,548
547,549
547,550
548,549
550,551
552,553
554,555
555,556
555,557
556,557
556,558
557,558
557,559
558,559
562,563
562,564
563,564
566,567
567,568
567,569
568,569
568,570
569,570
569,571
570,571
574,575
574,576
575,576
578,579
579,580
579,581
580,581
580,582
581,582
581,583
582,583
586,587
586,588
588,589
588,590
589,590
592,593
593,594
593,595
594,595
594,596
595,596
595,597
596,597
600,601
600,602
602,603
602,604
603,604
606,607
606,608
607,608
607,609
608,609
608,610
609,610
609,611
610,611
615,616
615,617
615,618
616,617
617,618
617,619
618,619
620,621
622,623
623,624
623,625
623,626
624,625
626,627
628,629
630,631
630,632
631,632
631,633
632,633
632,634
633,634
637,638
637,639
637,640
637,641
638,639
639,640
639,641
641,642
643,644
644,645
644,646
645,646
645,647
646,647
646,648
647,648
652,653
653,654
653,655
653,656
654,655
656,657
658,659
660,661
661,662
661,663
662,663
662,664
663,664
663,665
664,665
668,669
669,670
670,671
670,672
671,672
674,675
675,676
675,677
675,678
676,677
678,679
680,681
682,683
683,684
683,685
684,685
684,686
685,686
685,687
686,687
690,691
690,692
690,693
691,692
691,693
692,693
697,698
698,699
698,700
698,701
699,700
701,702
703,704
705,706
706,707
706,708
707,708
707,709
708,709
708,710
709,710
713,714
713,715
713,716
714,715
714,716
715,716
720,721
721,722
721,723
721,724
722,723
724,725
726,727
728,729
729,730
729,731
730,731
730,732
731,732
731,733
732,733
736,737
736,738
736,739
737,738
737,739
738,739
743,744
744,745
744,746
745,746
745,747
746,747
746,748
747,748
751,752
751,753
752,753
752,754
753,754
753,755
754,755
754,756
755,756
759,760
759,761
760,761
760,762
761,762
765,766
765,767
766,767
766,768
767,768
771,772
772,773
772,774
772,775
773,774
775,776
777,778
779,780
779,781
779,782
780,781
781,782
783,784
783,785
783,786
784,785
784,786
784,787
785,786
786,787
786,788
787,788
790,791
791,792
791,793
792,793
792,794
793,794
793,795
794,795
798,799
798,800
799,800
801,802
803,804
803,805
804,805
805,806
805,807
806,807
808,809
808,810
810,811
811,812
812,813
812,814
813,814
813,815
814,815
816,817
818,819
819,820
821,822
822,823
822,824
823,824
823,825
824,825
824,826
825,826
829,830
829,831
830,831
830,832
831,832
835,836
836,837
836,838
837,838
837,839
838,839
838,840
839,840
843,844
843,845
844,845
846,847
848,849
848,850
849,850
849,851
850,851
852,853
852,854
853,854
853,855
854,855
854,856
855,856
855,857
856,857
861,862
861,863
862,863
862,864
863,864
863,865
864,865
869,870
870,871
870,872
871,872
871,873
872,873
876,877
877,878
878,879
878,880
879,880
879,881
880,881
883,884
-----nextToken-----
2,4,6,8,13,15,19,21,25,27,28,33,36,40,42,43,47,49,53,55,59,61,64,65,70,74,75,79,80,81,84,91,92,93,96,97,103,104,107,108,109,114,118,119,123,124,125,128,137,138,139,140,143,144,145,150,151,154,155,159,161,163,169,170,171,174,175,181,182,183,186,187,193,194,195,198,199,204,205,208,210,214,216,219,220,226,227,228,233,235,236,237,238,244,245,246,251,253,254,255,256,262,263,264,268,270,271,272,278,279,280,284,286,287,288,294,295,296,301,303,304,305,306,312,313,314,321,322,323,324,325,328,330,334,336,339,340,344,346,350,354,358,363,365,367,371,373,377,379,381,385,387,389,395,396,397,401,402,403,404,410,411,412,416,417,418,419,423,425,427,433,434,435,438,439,445,446,447,451,452,453,454,458,459,466,467,468,470,475,476,477,483,484,485,487,492,493,494,499,501,505,507,511,513,515,521,522,523,527,528,529,530,536,537,538,542,543,544,545,549,551,553,559,560,561,564,565,571,572,573,576,577,583,584,585,587,590,591,597,598,599,601,604,605,611,612,613,614,619,621,625,627,629,634,635,636,640,642,648,649,650,651,655,657,659,665,666,667,672,673,677,679,681,687,688,689,693,694,695,696,700,702,704,710,711,712,716,717,718,719,723,725,727,733,734,735,739,740,741,742,748,749,750,756,757,758,762,763,764,768,769,770,774,776,778,782,788,789,795,796,797,800,802,807,809,815,817,820,826,827,828,832,833,834,840,841,842,845,847,851,857,858,859,860,865,866,867,868,873,874,875,881,882,884
-----computeFrom-----
68,69
68,70
76,77
76,78
87,88
87,89
100,101
100,102
112,113
112,114
120,121
120,122
131,132
131,133
133,134
133,135
147,148
147,149
165,166
165,167
177,178
177,179
189,190
189,191
201,202
201,203
222,223
222,224
230,231
230,232
240,241
240,242
248,249
248,250
258,259
258,260
274,275
274,276
290,291
290,292
298,299
298,300
308,309
308,310
317,318
317,319
391,392
391,393
406,407
406,408
429,430
429,431
441,442
441,443
462,463
462,464
469,470
469,471
472,473
472,474
479,480
479,481
486,487
486,488
489,490
489,491
517,518
517,519
532,533
532,534
555,556
555,557
567,568
567,569
579,580
579,581
586,587
586,588
593,594
593,595
600,601
600,602
607,608
607,609
631,632
631,633
644,645
644,646
661,662
661,663
670,671
670,672
683,684
683,685
706,707
706,708
729,730
729,731
744,745
744,746
751,752
751,753
752,753
752,754
791,792
791,793
822,823
822,824
829,830
829,831
836,837
836,838
852,853
852,854
853,854
853,855
861,862
861,863
870,871
870,872
878,879
878,880
-----guardedBy-----
91,103
96,107
611,665
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void read_arc_build_cfg_regs(void){	struct bcr_timer timer;	struct bcr_generic bcr;	struct cpuinfo_arc *cpu = &cpuinfo_arc700[smp_processor_id()];	const struct id_to_str *tbl;	struct bcr_isa_arcv2 isa;	FIX_PTR(cpu);	READ_BCR(AUX_IDENTITY, cpu->core);	for (tbl = &arc_cpu_rel[0]; tbl->id != 0; tbl++) {		if (cpu->core.family == tbl->id) {			cpu->details = tbl->str;			break;		}	}	for (tbl = &arc_cpu_nm[0]; tbl->id != 0; tbl++) {		if ((cpu->core.family & 0xF4) == tbl->id)			break;	}	cpu->name = tbl->str;	READ_BCR(ARC_REG_TIMERS_BCR, timer);	cpu->extn.timer0 = timer.t0;	cpu->extn.timer1 = timer.t1;	cpu->extn.rtc = timer.rtc;	cpu->vec_base = read_aux_reg(AUX_INTR_VEC_BASE);	READ_BCR(ARC_REG_MUL_BCR, cpu->extn_mpy);	cpu->extn.norm = read_aux_reg(ARC_REG_NORM_BCR) > 1 ? 1 : 0; /* 2,3 */	cpu->extn.barrel = read_aux_reg(ARC_REG_BARREL_BCR) > 1 ? 1 : 0; /* 2,3 */	cpu->extn.swap = read_aux_reg(ARC_REG_SWAP_BCR) ? 1 : 0;        /* 1,3 */	cpu->extn.crc = read_aux_reg(ARC_REG_CRC_BCR) ? 1 : 0;	cpu->extn.minmax = read_aux_reg(ARC_REG_MIXMAX_BCR) > 1 ? 1 : 0; /* 2 */	cpu->extn.swape = (cpu->core.family >= 0x34) ? 1 :				IS_ENABLED(CONFIG_ARC_HAS_SWAPE);	READ_BCR(ARC_REG_XY_MEM_BCR, cpu->extn_xymem);	/* Read CCM BCRs for boot reporting even if not enabled in Kconfig */	read_decode_ccm_bcr(cpu);	read_decode_mmu_bcr();	read_decode_cache_bcr();	if (is_isa_arcompact()) {		struct bcr_fp_arcompact sp, dp;		struct bcr_bpu_arcompact bpu;		READ_BCR(ARC_REG_FP_BCR, sp);		READ_BCR(ARC_REG_DPFP_BCR, dp);		cpu->extn.fpu_sp = sp.ver ? 1 : 0;		cpu->extn.fpu_dp = dp.ver ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.fam ? 1 : 0;		if (bpu.ent) {			cpu->bpu.num_cache = 256 << (bpu.ent - 1);			cpu->bpu.num_pred = 256 << (bpu.ent - 1);		}	} else {		struct bcr_fp_arcv2 spdp;		struct bcr_bpu_arcv2 bpu;		READ_BCR(ARC_REG_FP_V2_BCR, spdp);		cpu->extn.fpu_sp = spdp.sp ? 1 : 0;		cpu->extn.fpu_dp = spdp.dp ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.ft;		cpu->bpu.num_cache = 256 << bpu.bce;		cpu->bpu.num_pred = 2048 << bpu.pte;		if (cpu->core.family >= 0x54) {			struct bcr_uarch_build_arcv2 uarch;			/*			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was			 * dual issue only (HS4x). But next uarch rev (1:0)			 * allows it be configured for single issue (HS3x)			 * Ensure we fiddle with dual issue only on HS4x			 */			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);			if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}		}	}	READ_BCR(ARC_REG_AP_BCR, bcr);	cpu->extn.ap = bcr.ver ? 1 : 0;	READ_BCR(ARC_REG_SMART_BCR, bcr);	cpu->extn.smart = bcr.ver ? 1 : 0;	READ_BCR(ARC_REG_RTT_BCR, bcr);	cpu->extn.rtt = bcr.ver ? 1 : 0;	cpu->extn.debug = cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt;	READ_BCR(ARC_REG_ISA_CFG_BCR, isa);	/* some hacks for lack of feature BCR info in old ARC700 cores */	if (is_isa_arcompact()) {		if (!isa.ver)	/* ISA BCR absent, use Kconfig info */			cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);		else {			/* ARC700_BUILD only has 2 bits of isa info */			struct bcr_generic bcr = *(struct bcr_generic *)&isa;			cpu->isa.atomic = bcr.info & 1;		}		cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN);		 /* there's no direct way to distinguish 750 vs. 770 */		if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3))			cpu->name = "ARC750";	} else {		cpu->isa = isa;	}}
static void
read_arc_build_cfg_regs(void)
read_arc_build_cfg_regs
void
void


{	struct bcr_timer timer;	struct bcr_generic bcr;	struct cpuinfo_arc *cpu = &cpuinfo_arc700[smp_processor_id()];	const struct id_to_str *tbl;	struct bcr_isa_arcv2 isa;	FIX_PTR(cpu);	READ_BCR(AUX_IDENTITY, cpu->core);	for (tbl = &arc_cpu_rel[0]; tbl->id != 0; tbl++) {		if (cpu->core.family == tbl->id) {			cpu->details = tbl->str;			break;		}	}	for (tbl = &arc_cpu_nm[0]; tbl->id != 0; tbl++) {		if ((cpu->core.family & 0xF4) == tbl->id)			break;	}	cpu->name = tbl->str;	READ_BCR(ARC_REG_TIMERS_BCR, timer);	cpu->extn.timer0 = timer.t0;	cpu->extn.timer1 = timer.t1;	cpu->extn.rtc = timer.rtc;	cpu->vec_base = read_aux_reg(AUX_INTR_VEC_BASE);	READ_BCR(ARC_REG_MUL_BCR, cpu->extn_mpy);	cpu->extn.norm = read_aux_reg(ARC_REG_NORM_BCR) > 1 ? 1 : 0; /* 2,3 */	cpu->extn.barrel = read_aux_reg(ARC_REG_BARREL_BCR) > 1 ? 1 : 0; /* 2,3 */	cpu->extn.swap = read_aux_reg(ARC_REG_SWAP_BCR) ? 1 : 0;        /* 1,3 */	cpu->extn.crc = read_aux_reg(ARC_REG_CRC_BCR) ? 1 : 0;	cpu->extn.minmax = read_aux_reg(ARC_REG_MIXMAX_BCR) > 1 ? 1 : 0; /* 2 */	cpu->extn.swape = (cpu->core.family >= 0x34) ? 1 :				IS_ENABLED(CONFIG_ARC_HAS_SWAPE);	READ_BCR(ARC_REG_XY_MEM_BCR, cpu->extn_xymem);	/* Read CCM BCRs for boot reporting even if not enabled in Kconfig */	read_decode_ccm_bcr(cpu);	read_decode_mmu_bcr();	read_decode_cache_bcr();	if (is_isa_arcompact()) {		struct bcr_fp_arcompact sp, dp;		struct bcr_bpu_arcompact bpu;		READ_BCR(ARC_REG_FP_BCR, sp);		READ_BCR(ARC_REG_DPFP_BCR, dp);		cpu->extn.fpu_sp = sp.ver ? 1 : 0;		cpu->extn.fpu_dp = dp.ver ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.fam ? 1 : 0;		if (bpu.ent) {			cpu->bpu.num_cache = 256 << (bpu.ent - 1);			cpu->bpu.num_pred = 256 << (bpu.ent - 1);		}	} else {		struct bcr_fp_arcv2 spdp;		struct bcr_bpu_arcv2 bpu;		READ_BCR(ARC_REG_FP_V2_BCR, spdp);		cpu->extn.fpu_sp = spdp.sp ? 1 : 0;		cpu->extn.fpu_dp = spdp.dp ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.ft;		cpu->bpu.num_cache = 256 << bpu.bce;		cpu->bpu.num_pred = 2048 << bpu.pte;		if (cpu->core.family >= 0x54) {			struct bcr_uarch_build_arcv2 uarch;			/*			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was			 * dual issue only (HS4x). But next uarch rev (1:0)			 * allows it be configured for single issue (HS3x)			 * Ensure we fiddle with dual issue only on HS4x			 */			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);			if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}		}	}	READ_BCR(ARC_REG_AP_BCR, bcr);	cpu->extn.ap = bcr.ver ? 1 : 0;	READ_BCR(ARC_REG_SMART_BCR, bcr);	cpu->extn.smart = bcr.ver ? 1 : 0;	READ_BCR(ARC_REG_RTT_BCR, bcr);	cpu->extn.rtt = bcr.ver ? 1 : 0;	cpu->extn.debug = cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt;	READ_BCR(ARC_REG_ISA_CFG_BCR, isa);	/* some hacks for lack of feature BCR info in old ARC700 cores */	if (is_isa_arcompact()) {		if (!isa.ver)	/* ISA BCR absent, use Kconfig info */			cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);		else {			/* ARC700_BUILD only has 2 bits of isa info */			struct bcr_generic bcr = *(struct bcr_generic *)&isa;			cpu->isa.atomic = bcr.info & 1;		}		cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN);		 /* there's no direct way to distinguish 750 vs. 770 */		if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3))			cpu->name = "ARC750";	} else {		cpu->isa = isa;	}}
struct bcr_timer timer;
struct bcr_timer timer;
struct bcr_timer
bcr_timer
timer
timer
struct bcr_generic bcr;
struct bcr_generic bcr;
struct bcr_generic
bcr_generic
bcr
bcr
struct cpuinfo_arc *cpu = &cpuinfo_arc700[smp_processor_id()];
struct cpuinfo_arc *cpu = &cpuinfo_arc700[smp_processor_id()];
struct cpuinfo_arc
cpuinfo_arc
*cpu = &cpuinfo_arc700[smp_processor_id()]
*
cpu
= &cpuinfo_arc700[smp_processor_id()]
&cpuinfo_arc700[smp_processor_id()]
cpuinfo_arc700[smp_processor_id()]
cpuinfo_arc700
cpuinfo_arc700
smp_processor_id()
smp_processor_id
smp_processor_id
const struct id_to_str *tbl;
const struct id_to_str *tbl;
const struct id_to_str
id_to_str
*tbl
*
tbl
struct bcr_isa_arcv2 isa;
struct bcr_isa_arcv2 isa;
struct bcr_isa_arcv2
bcr_isa_arcv2
isa
isa
FIX_PTR(cpu);
FIX_PTR(cpu)
FIX_PTR
FIX_PTR
cpu
cpu
READ_BCR(AUX_IDENTITY, cpu->core);
READ_BCR(AUX_IDENTITY, cpu->core)
READ_BCR
READ_BCR
AUX_IDENTITY
AUX_IDENTITY
cpu->core
cpu
cpu
core
for (tbl = &arc_cpu_rel[0]; tbl->id != 0; tbl++) {		if (cpu->core.family == tbl->id) {			cpu->details = tbl->str;			break;		}	}
tbl = &arc_cpu_rel[0];
tbl = &arc_cpu_rel[0]
tbl
tbl
&arc_cpu_rel[0]
arc_cpu_rel[0]
arc_cpu_rel
arc_cpu_rel
0
tbl->id != 0
tbl->id
tbl
tbl
id
0
tbl++
tbl
tbl
{		if (cpu->core.family == tbl->id) {			cpu->details = tbl->str;			break;		}	}
if (cpu->core.family == tbl->id) {			cpu->details = tbl->str;			break;		}
cpu->core.family == tbl->id
cpu->core.family
cpu->core
cpu
cpu
core
family
tbl->id
tbl
tbl
id
{			cpu->details = tbl->str;			break;		}
cpu->details = tbl->str;
cpu->details = tbl->str
cpu->details
cpu
cpu
details
tbl->str
tbl
tbl
str
break;
for (tbl = &arc_cpu_nm[0]; tbl->id != 0; tbl++) {		if ((cpu->core.family & 0xF4) == tbl->id)			break;	}
tbl = &arc_cpu_nm[0];
tbl = &arc_cpu_nm[0]
tbl
tbl
&arc_cpu_nm[0]
arc_cpu_nm[0]
arc_cpu_nm
arc_cpu_nm
0
tbl->id != 0
tbl->id
tbl
tbl
id
0
tbl++
tbl
tbl
{		if ((cpu->core.family & 0xF4) == tbl->id)			break;	}
if ((cpu->core.family & 0xF4) == tbl->id)			break;
(cpu->core.family & 0xF4) == tbl->id
(cpu->core.family & 0xF4)
cpu->core.family & 0xF4
cpu->core.family
cpu->core
cpu
cpu
core
family
0xF4
tbl->id
tbl
tbl
id
break;
cpu->name = tbl->str;
cpu->name = tbl->str
cpu->name
cpu
cpu
name
tbl->str
tbl
tbl
str
READ_BCR(ARC_REG_TIMERS_BCR, timer);
READ_BCR(ARC_REG_TIMERS_BCR, timer)
READ_BCR
READ_BCR
ARC_REG_TIMERS_BCR
ARC_REG_TIMERS_BCR
timer
timer
cpu->extn.timer0 = timer.t0;
cpu->extn.timer0 = timer.t0
cpu->extn.timer0
cpu->extn
cpu
cpu
extn
timer0
timer.t0
timer
timer
t0
cpu->extn.timer1 = timer.t1;
cpu->extn.timer1 = timer.t1
cpu->extn.timer1
cpu->extn
cpu
cpu
extn
timer1
timer.t1
timer
timer
t1
cpu->extn.rtc = timer.rtc;
cpu->extn.rtc = timer.rtc
cpu->extn.rtc
cpu->extn
cpu
cpu
extn
rtc
timer.rtc
timer
timer
rtc
cpu->vec_base = read_aux_reg(AUX_INTR_VEC_BASE);
cpu->vec_base = read_aux_reg(AUX_INTR_VEC_BASE)
cpu->vec_base
cpu
cpu
vec_base
read_aux_reg(AUX_INTR_VEC_BASE)
read_aux_reg
read_aux_reg
AUX_INTR_VEC_BASE
AUX_INTR_VEC_BASE
READ_BCR(ARC_REG_MUL_BCR, cpu->extn_mpy);
READ_BCR(ARC_REG_MUL_BCR, cpu->extn_mpy)
READ_BCR
READ_BCR
ARC_REG_MUL_BCR
ARC_REG_MUL_BCR
cpu->extn_mpy
cpu
cpu
extn_mpy
cpu->extn.norm = read_aux_reg(ARC_REG_NORM_BCR) > 1 ? 1 : 0;
cpu->extn.norm = read_aux_reg(ARC_REG_NORM_BCR) > 1 ? 1 : 0
cpu->extn.norm
cpu->extn
cpu
cpu
extn
norm
read_aux_reg(ARC_REG_NORM_BCR) > 1 ? 1 : 0
read_aux_reg(ARC_REG_NORM_BCR) > 1
read_aux_reg(ARC_REG_NORM_BCR)
read_aux_reg
read_aux_reg
ARC_REG_NORM_BCR
ARC_REG_NORM_BCR
1
1
0
cpu->extn.barrel = read_aux_reg(ARC_REG_BARREL_BCR) > 1 ? 1 : 0;
cpu->extn.barrel = read_aux_reg(ARC_REG_BARREL_BCR) > 1 ? 1 : 0
cpu->extn.barrel
cpu->extn
cpu
cpu
extn
barrel
read_aux_reg(ARC_REG_BARREL_BCR) > 1 ? 1 : 0
read_aux_reg(ARC_REG_BARREL_BCR) > 1
read_aux_reg(ARC_REG_BARREL_BCR)
read_aux_reg
read_aux_reg
ARC_REG_BARREL_BCR
ARC_REG_BARREL_BCR
1
1
0
cpu->extn.swap = read_aux_reg(ARC_REG_SWAP_BCR) ? 1 : 0;
cpu->extn.swap = read_aux_reg(ARC_REG_SWAP_BCR) ? 1 : 0
cpu->extn.swap
cpu->extn
cpu
cpu
extn
swap
read_aux_reg(ARC_REG_SWAP_BCR) ? 1 : 0
read_aux_reg(ARC_REG_SWAP_BCR)
read_aux_reg
read_aux_reg
ARC_REG_SWAP_BCR
ARC_REG_SWAP_BCR
1
0
cpu->extn.crc = read_aux_reg(ARC_REG_CRC_BCR) ? 1 : 0;
cpu->extn.crc = read_aux_reg(ARC_REG_CRC_BCR) ? 1 : 0
cpu->extn.crc
cpu->extn
cpu
cpu
extn
crc
read_aux_reg(ARC_REG_CRC_BCR) ? 1 : 0
read_aux_reg(ARC_REG_CRC_BCR)
read_aux_reg
read_aux_reg
ARC_REG_CRC_BCR
ARC_REG_CRC_BCR
1
0
cpu->extn.minmax = read_aux_reg(ARC_REG_MIXMAX_BCR) > 1 ? 1 : 0;
cpu->extn.minmax = read_aux_reg(ARC_REG_MIXMAX_BCR) > 1 ? 1 : 0
cpu->extn.minmax
cpu->extn
cpu
cpu
extn
minmax
read_aux_reg(ARC_REG_MIXMAX_BCR) > 1 ? 1 : 0
read_aux_reg(ARC_REG_MIXMAX_BCR) > 1
read_aux_reg(ARC_REG_MIXMAX_BCR)
read_aux_reg
read_aux_reg
ARC_REG_MIXMAX_BCR
ARC_REG_MIXMAX_BCR
1
1
0
cpu->extn.swape = (cpu->core.family >= 0x34) ? 1 :				IS_ENABLED(CONFIG_ARC_HAS_SWAPE);
cpu->extn.swape = (cpu->core.family >= 0x34) ? 1 :				IS_ENABLED(CONFIG_ARC_HAS_SWAPE)
cpu->extn.swape
cpu->extn
cpu
cpu
extn
swape
(cpu->core.family >= 0x34) ? 1 :				IS_ENABLED(CONFIG_ARC_HAS_SWAPE)
(cpu->core.family >= 0x34)
cpu->core.family >= 0x34
cpu->core.family
cpu->core
cpu
cpu
core
family
0x34
1
IS_ENABLED(CONFIG_ARC_HAS_SWAPE)
IS_ENABLED
IS_ENABLED
CONFIG_ARC_HAS_SWAPE
CONFIG_ARC_HAS_SWAPE
READ_BCR(ARC_REG_XY_MEM_BCR, cpu->extn_xymem);
READ_BCR(ARC_REG_XY_MEM_BCR, cpu->extn_xymem)
READ_BCR
READ_BCR
ARC_REG_XY_MEM_BCR
ARC_REG_XY_MEM_BCR
cpu->extn_xymem
cpu
cpu
extn_xymem
read_decode_ccm_bcr(cpu);
read_decode_ccm_bcr(cpu)
read_decode_ccm_bcr
read_decode_ccm_bcr
cpu
cpu
read_decode_mmu_bcr();
read_decode_mmu_bcr()
read_decode_mmu_bcr
read_decode_mmu_bcr
read_decode_cache_bcr();
read_decode_cache_bcr()
read_decode_cache_bcr
read_decode_cache_bcr
if (is_isa_arcompact()) {		struct bcr_fp_arcompact sp, dp;		struct bcr_bpu_arcompact bpu;		READ_BCR(ARC_REG_FP_BCR, sp);		READ_BCR(ARC_REG_DPFP_BCR, dp);		cpu->extn.fpu_sp = sp.ver ? 1 : 0;		cpu->extn.fpu_dp = dp.ver ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.fam ? 1 : 0;		if (bpu.ent) {			cpu->bpu.num_cache = 256 << (bpu.ent - 1);			cpu->bpu.num_pred = 256 << (bpu.ent - 1);		}	} else {		struct bcr_fp_arcv2 spdp;		struct bcr_bpu_arcv2 bpu;		READ_BCR(ARC_REG_FP_V2_BCR, spdp);		cpu->extn.fpu_sp = spdp.sp ? 1 : 0;		cpu->extn.fpu_dp = spdp.dp ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.ft;		cpu->bpu.num_cache = 256 << bpu.bce;		cpu->bpu.num_pred = 2048 << bpu.pte;		if (cpu->core.family >= 0x54) {			struct bcr_uarch_build_arcv2 uarch;			/*			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was			 * dual issue only (HS4x). But next uarch rev (1:0)			 * allows it be configured for single issue (HS3x)			 * Ensure we fiddle with dual issue only on HS4x			 */			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);			if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}		}	}
is_isa_arcompact()
is_isa_arcompact
is_isa_arcompact
{		struct bcr_fp_arcompact sp, dp;		struct bcr_bpu_arcompact bpu;		READ_BCR(ARC_REG_FP_BCR, sp);		READ_BCR(ARC_REG_DPFP_BCR, dp);		cpu->extn.fpu_sp = sp.ver ? 1 : 0;		cpu->extn.fpu_dp = dp.ver ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.fam ? 1 : 0;		if (bpu.ent) {			cpu->bpu.num_cache = 256 << (bpu.ent - 1);			cpu->bpu.num_pred = 256 << (bpu.ent - 1);		}	}
struct bcr_fp_arcompact sp, dp;
struct bcr_fp_arcompact sp, dp;
struct bcr_fp_arcompact
bcr_fp_arcompact
sp
sp
dp
dp
struct bcr_bpu_arcompact bpu;
struct bcr_bpu_arcompact bpu;
struct bcr_bpu_arcompact
bcr_bpu_arcompact
bpu
bpu
READ_BCR(ARC_REG_FP_BCR, sp);
READ_BCR(ARC_REG_FP_BCR, sp)
READ_BCR
READ_BCR
ARC_REG_FP_BCR
ARC_REG_FP_BCR
sp
sp
READ_BCR(ARC_REG_DPFP_BCR, dp);
READ_BCR(ARC_REG_DPFP_BCR, dp)
READ_BCR
READ_BCR
ARC_REG_DPFP_BCR
ARC_REG_DPFP_BCR
dp
dp
cpu->extn.fpu_sp = sp.ver ? 1 : 0;
cpu->extn.fpu_sp = sp.ver ? 1 : 0
cpu->extn.fpu_sp
cpu->extn
cpu
cpu
extn
fpu_sp
sp.ver ? 1 : 0
sp.ver
sp
sp
ver
1
0
cpu->extn.fpu_dp = dp.ver ? 1 : 0;
cpu->extn.fpu_dp = dp.ver ? 1 : 0
cpu->extn.fpu_dp
cpu->extn
cpu
cpu
extn
fpu_dp
dp.ver ? 1 : 0
dp.ver
dp
dp
ver
1
0
READ_BCR(ARC_REG_BPU_BCR, bpu);
READ_BCR(ARC_REG_BPU_BCR, bpu)
READ_BCR
READ_BCR
ARC_REG_BPU_BCR
ARC_REG_BPU_BCR
bpu
bpu
cpu->bpu.ver = bpu.ver;
cpu->bpu.ver = bpu.ver
cpu->bpu.ver
cpu->bpu
cpu
cpu
bpu
ver
bpu.ver
bpu
bpu
ver
cpu->bpu.full = bpu.fam ? 1 : 0;
cpu->bpu.full = bpu.fam ? 1 : 0
cpu->bpu.full
cpu->bpu
cpu
cpu
bpu
full
bpu.fam ? 1 : 0
bpu.fam
bpu
bpu
fam
1
0
if (bpu.ent) {			cpu->bpu.num_cache = 256 << (bpu.ent - 1);			cpu->bpu.num_pred = 256 << (bpu.ent - 1);		}
bpu.ent
bpu
bpu
ent
{			cpu->bpu.num_cache = 256 << (bpu.ent - 1);			cpu->bpu.num_pred = 256 << (bpu.ent - 1);		}
cpu->bpu.num_cache = 256 << (bpu.ent - 1);
cpu->bpu.num_cache = 256 << (bpu.ent - 1)
cpu->bpu.num_cache
cpu->bpu
cpu
cpu
bpu
num_cache
256 << (bpu.ent - 1)
256
(bpu.ent - 1)
bpu.ent - 1
bpu.ent
bpu
bpu
ent
1
cpu->bpu.num_pred = 256 << (bpu.ent - 1);
cpu->bpu.num_pred = 256 << (bpu.ent - 1)
cpu->bpu.num_pred
cpu->bpu
cpu
cpu
bpu
num_pred
256 << (bpu.ent - 1)
256
(bpu.ent - 1)
bpu.ent - 1
bpu.ent
bpu
bpu
ent
1
{		struct bcr_fp_arcv2 spdp;		struct bcr_bpu_arcv2 bpu;		READ_BCR(ARC_REG_FP_V2_BCR, spdp);		cpu->extn.fpu_sp = spdp.sp ? 1 : 0;		cpu->extn.fpu_dp = spdp.dp ? 1 : 0;		READ_BCR(ARC_REG_BPU_BCR, bpu);		cpu->bpu.ver = bpu.ver;		cpu->bpu.full = bpu.ft;		cpu->bpu.num_cache = 256 << bpu.bce;		cpu->bpu.num_pred = 2048 << bpu.pte;		if (cpu->core.family >= 0x54) {			struct bcr_uarch_build_arcv2 uarch;			/*			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was			 * dual issue only (HS4x). But next uarch rev (1:0)			 * allows it be configured for single issue (HS3x)			 * Ensure we fiddle with dual issue only on HS4x			 */			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);			if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}		}	}
struct bcr_fp_arcv2 spdp;
struct bcr_fp_arcv2 spdp;
struct bcr_fp_arcv2
bcr_fp_arcv2
spdp
spdp
struct bcr_bpu_arcv2 bpu;
struct bcr_bpu_arcv2 bpu;
struct bcr_bpu_arcv2
bcr_bpu_arcv2
bpu
bpu
READ_BCR(ARC_REG_FP_V2_BCR, spdp);
READ_BCR(ARC_REG_FP_V2_BCR, spdp)
READ_BCR
READ_BCR
ARC_REG_FP_V2_BCR
ARC_REG_FP_V2_BCR
spdp
spdp
cpu->extn.fpu_sp = spdp.sp ? 1 : 0;
cpu->extn.fpu_sp = spdp.sp ? 1 : 0
cpu->extn.fpu_sp
cpu->extn
cpu
cpu
extn
fpu_sp
spdp.sp ? 1 : 0
spdp.sp
spdp
spdp
sp
1
0
cpu->extn.fpu_dp = spdp.dp ? 1 : 0;
cpu->extn.fpu_dp = spdp.dp ? 1 : 0
cpu->extn.fpu_dp
cpu->extn
cpu
cpu
extn
fpu_dp
spdp.dp ? 1 : 0
spdp.dp
spdp
spdp
dp
1
0
READ_BCR(ARC_REG_BPU_BCR, bpu);
READ_BCR(ARC_REG_BPU_BCR, bpu)
READ_BCR
READ_BCR
ARC_REG_BPU_BCR
ARC_REG_BPU_BCR
bpu
bpu
cpu->bpu.ver = bpu.ver;
cpu->bpu.ver = bpu.ver
cpu->bpu.ver
cpu->bpu
cpu
cpu
bpu
ver
bpu.ver
bpu
bpu
ver
cpu->bpu.full = bpu.ft;
cpu->bpu.full = bpu.ft
cpu->bpu.full
cpu->bpu
cpu
cpu
bpu
full
bpu.ft
bpu
bpu
ft
cpu->bpu.num_cache = 256 << bpu.bce;
cpu->bpu.num_cache = 256 << bpu.bce
cpu->bpu.num_cache
cpu->bpu
cpu
cpu
bpu
num_cache
256 << bpu.bce
256
bpu.bce
bpu
bpu
bce
cpu->bpu.num_pred = 2048 << bpu.pte;
cpu->bpu.num_pred = 2048 << bpu.pte
cpu->bpu.num_pred
cpu->bpu
cpu
cpu
bpu
num_pred
2048 << bpu.pte
2048
bpu.pte
bpu
bpu
pte
if (cpu->core.family >= 0x54) {			struct bcr_uarch_build_arcv2 uarch;			/*			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was			 * dual issue only (HS4x). But next uarch rev (1:0)			 * allows it be configured for single issue (HS3x)			 * Ensure we fiddle with dual issue only on HS4x			 */			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);			if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}		}
cpu->core.family >= 0x54
cpu->core.family
cpu->core
cpu
cpu
core
family
0x54
{			struct bcr_uarch_build_arcv2 uarch;			/*			 * The first 0x54 core (uarch maj:min 0:1 or 0:2) was			 * dual issue only (HS4x). But next uarch rev (1:0)			 * allows it be configured for single issue (HS3x)			 * Ensure we fiddle with dual issue only on HS4x			 */			READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);			if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}		}
struct bcr_uarch_build_arcv2 uarch;
struct bcr_uarch_build_arcv2 uarch;
struct bcr_uarch_build_arcv2
bcr_uarch_build_arcv2
uarch
uarch
READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch);
READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch)
READ_BCR
READ_BCR
ARC_REG_MICRO_ARCH_BCR
ARC_REG_MICRO_ARCH_BCR
uarch
uarch
if (uarch.prod == 4) {				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}
uarch.prod == 4
uarch.prod
uarch
uarch
prod
4
{				unsigned int exec_ctrl;				/* dual issue hardware always present */				cpu->extn.dual = 1;				READ_BCR(AUX_EXEC_CTRL, exec_ctrl);				/* dual issue hardware enabled ? */				cpu->extn.dual_enb = !(exec_ctrl & 1);			}
unsigned int exec_ctrl;
unsigned int exec_ctrl;
unsigned int
exec_ctrl
exec_ctrl
cpu->extn.dual = 1;
cpu->extn.dual = 1
cpu->extn.dual
cpu->extn
cpu
cpu
extn
dual
1
READ_BCR(AUX_EXEC_CTRL, exec_ctrl);
READ_BCR(AUX_EXEC_CTRL, exec_ctrl)
READ_BCR
READ_BCR
AUX_EXEC_CTRL
AUX_EXEC_CTRL
exec_ctrl
exec_ctrl
cpu->extn.dual_enb = !(exec_ctrl & 1);
cpu->extn.dual_enb = !(exec_ctrl & 1)
cpu->extn.dual_enb
cpu->extn
cpu
cpu
extn
dual_enb
!(exec_ctrl & 1)
(exec_ctrl & 1)
exec_ctrl & 1
exec_ctrl
exec_ctrl
1
READ_BCR(ARC_REG_AP_BCR, bcr);
READ_BCR(ARC_REG_AP_BCR, bcr)
READ_BCR
READ_BCR
ARC_REG_AP_BCR
ARC_REG_AP_BCR
bcr
bcr
cpu->extn.ap = bcr.ver ? 1 : 0;
cpu->extn.ap = bcr.ver ? 1 : 0
cpu->extn.ap
cpu->extn
cpu
cpu
extn
ap
bcr.ver ? 1 : 0
bcr.ver
bcr
bcr
ver
1
0
READ_BCR(ARC_REG_SMART_BCR, bcr);
READ_BCR(ARC_REG_SMART_BCR, bcr)
READ_BCR
READ_BCR
ARC_REG_SMART_BCR
ARC_REG_SMART_BCR
bcr
bcr
cpu->extn.smart = bcr.ver ? 1 : 0;
cpu->extn.smart = bcr.ver ? 1 : 0
cpu->extn.smart
cpu->extn
cpu
cpu
extn
smart
bcr.ver ? 1 : 0
bcr.ver
bcr
bcr
ver
1
0
READ_BCR(ARC_REG_RTT_BCR, bcr);
READ_BCR(ARC_REG_RTT_BCR, bcr)
READ_BCR
READ_BCR
ARC_REG_RTT_BCR
ARC_REG_RTT_BCR
bcr
bcr
cpu->extn.rtt = bcr.ver ? 1 : 0;
cpu->extn.rtt = bcr.ver ? 1 : 0
cpu->extn.rtt
cpu->extn
cpu
cpu
extn
rtt
bcr.ver ? 1 : 0
bcr.ver
bcr
bcr
ver
1
0
cpu->extn.debug = cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt;
cpu->extn.debug = cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt
cpu->extn.debug
cpu->extn
cpu
cpu
extn
debug
cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt
cpu->extn.ap | cpu->extn.smart
cpu->extn.ap
cpu->extn
cpu
cpu
extn
ap
cpu->extn.smart
cpu->extn
cpu
cpu
extn
smart
cpu->extn.rtt
cpu->extn
cpu
cpu
extn
rtt
READ_BCR(ARC_REG_ISA_CFG_BCR, isa);
READ_BCR(ARC_REG_ISA_CFG_BCR, isa)
READ_BCR
READ_BCR
ARC_REG_ISA_CFG_BCR
ARC_REG_ISA_CFG_BCR
isa
isa
if (is_isa_arcompact()) {		if (!isa.ver)	/* ISA BCR absent, use Kconfig info */			cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);		else {			/* ARC700_BUILD only has 2 bits of isa info */			struct bcr_generic bcr = *(struct bcr_generic *)&isa;			cpu->isa.atomic = bcr.info & 1;		}		cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN);		 /* there's no direct way to distinguish 750 vs. 770 */		if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3))			cpu->name = "ARC750";	} else {		cpu->isa = isa;	}
is_isa_arcompact()
is_isa_arcompact
is_isa_arcompact
{		if (!isa.ver)	/* ISA BCR absent, use Kconfig info */			cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);		else {			/* ARC700_BUILD only has 2 bits of isa info */			struct bcr_generic bcr = *(struct bcr_generic *)&isa;			cpu->isa.atomic = bcr.info & 1;		}		cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN);		 /* there's no direct way to distinguish 750 vs. 770 */		if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3))			cpu->name = "ARC750";	}
if (!isa.ver)	/* ISA BCR absent, use Kconfig info */			cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);		else {			/* ARC700_BUILD only has 2 bits of isa info */			struct bcr_generic bcr = *(struct bcr_generic *)&isa;			cpu->isa.atomic = bcr.info & 1;		}
!isa.ver
isa.ver
isa
isa
ver
cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC);
cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC)
cpu->isa.atomic
cpu->isa
cpu
cpu
isa
atomic
IS_ENABLED(CONFIG_ARC_HAS_LLSC)
IS_ENABLED
IS_ENABLED
CONFIG_ARC_HAS_LLSC
CONFIG_ARC_HAS_LLSC
{			/* ARC700_BUILD only has 2 bits of isa info */			struct bcr_generic bcr = *(struct bcr_generic *)&isa;			cpu->isa.atomic = bcr.info & 1;		}
struct bcr_generic bcr = *(struct bcr_generic *)&isa;
struct bcr_generic bcr = *(struct bcr_generic *)&isa;
struct bcr_generic
bcr_generic
bcr = *(struct bcr_generic *)&isa
bcr
= *(struct bcr_generic *)&isa
*(struct bcr_generic *)&isa
(struct bcr_generic *)&isa
struct bcr_generic *
struct bcr_generic
bcr_generic
*
*
&isa
isa
isa
cpu->isa.atomic = bcr.info & 1;
cpu->isa.atomic = bcr.info & 1
cpu->isa.atomic
cpu->isa
cpu
cpu
isa
atomic
bcr.info & 1
bcr.info
bcr
bcr
info
1
cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN);
cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)
cpu->isa.be
cpu->isa
cpu
cpu
isa
be
IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)
IS_ENABLED
IS_ENABLED
CONFIG_CPU_BIG_ENDIAN
CONFIG_CPU_BIG_ENDIAN
if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3))			cpu->name = "ARC750";
unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3)
unlikely
unlikely
cpu->core.family < 0x34 || cpu->mmu.ver < 3
cpu->core.family < 0x34
cpu->core.family
cpu->core
cpu
cpu
core
family
0x34
cpu->mmu.ver < 3
cpu->mmu.ver
cpu->mmu
cpu
cpu
mmu
ver
3
cpu->name = "ARC750";
cpu->name = "ARC750"
cpu->name
cpu
cpu
name
"ARC750"
{		cpu->isa = isa;	}
cpu->isa = isa;
cpu->isa = isa
cpu->isa
cpu
cpu
isa
isa
isa
-----joern-----
(520,342,0)
(245,485,0)
(525,185,0)
(362,327,0)
(274,548,0)
(277,383,0)
(214,94,0)
(470,421,0)
(507,76,0)
(266,477,0)
(106,422,0)
(38,461,0)
(478,368,0)
(101,35,0)
(237,127,0)
(20,522,0)
(251,368,0)
(126,564,0)
(561,461,0)
(85,138,0)
(184,475,0)
(495,240,0)
(408,383,0)
(546,519,0)
(71,243,0)
(269,254,0)
(210,327,0)
(497,507,0)
(127,327,0)
(518,79,0)
(350,508,0)
(428,84,0)
(437,134,0)
(25,255,0)
(57,244,0)
(372,246,0)
(321,555,0)
(165,397,0)
(303,34,0)
(72,327,0)
(363,392,0)
(559,133,0)
(276,366,0)
(314,366,0)
(553,3,0)
(141,377,0)
(508,66,0)
(61,428,0)
(515,327,0)
(113,244,0)
(104,256,0)
(249,248,0)
(409,111,0)
(305,300,0)
(379,81,0)
(163,214,0)
(483,221,0)
(517,418,0)
(512,223,0)
(83,377,0)
(60,192,0)
(125,337,0)
(93,127,0)
(4,513,0)
(266,246,0)
(96,525,0)
(123,405,0)
(79,518,0)
(40,327,0)
(370,480,0)
(529,327,0)
(139,222,0)
(56,158,0)
(369,555,0)
(15,250,0)
(236,327,0)
(504,506,0)
(451,311,0)
(331,3,0)
(221,153,0)
(447,410,0)
(448,535,0)
(144,498,0)
(115,126,0)
(177,217,0)
(285,542,0)
(537,19,0)
(376,377,0)
(173,462,0)
(64,90,0)
(152,434,0)
(542,516,0)
(306,397,0)
(185,525,0)
(503,40,0)
(519,327,0)
(166,368,0)
(158,244,0)
(515,224,0)
(150,240,0)
(330,457,0)
(323,113,0)
(422,244,0)
(455,562,0)
(265,518,0)
(416,513,0)
(29,222,0)
(282,534,0)
(313,416,0)
(299,549,0)
(343,551,0)
(452,327,0)
(5,327,0)
(417,553,0)
(86,327,0)
(394,538,0)
(435,220,0)
(7,167,0)
(317,159,0)
(187,244,0)
(292,13,0)
(388,113,0)
(17,327,0)
(247,452,0)
(353,244,0)
(207,555,0)
(43,19,0)
(311,244,0)
(327,298,0)
(18,169,0)
(377,141,0)
(539,538,0)
(307,495,0)
(348,244,0)
(210,425,0)
(510,309,0)
(50,508,0)
(538,394,0)
(190,318,0)
(240,150,0)
(312,255,0)
(241,534,0)
(132,5,0)
(199,519,0)
(39,106,0)
(493,435,0)
(308,76,0)
(121,397,0)
(189,86,0)
(531,289,0)
(236,39,0)
(378,22,0)
(258,244,0)
(106,95,0)
(334,497,0)
(532,95,0)
(532,153,0)
(534,282,0)
(451,485,0)
(160,355,0)
(528,384,0)
(68,321,0)
(286,221,0)
(400,555,0)
(484,468,0)
(420,463,0)
(392,46,0)
(240,495,0)
(125,318,0)
(418,369,0)
(41,20,0)
(402,244,0)
(26,515,0)
(270,68,0)
(138,52,0)
(481,214,0)
(289,469,0)
(183,428,0)
(209,273,0)
(458,434,0)
(439,95,0)
(374,530,0)
(90,532,0)
(544,127,0)
(338,454,0)
(478,128,0)
(347,66,0)
(443,244,0)
(192,327,0)
(92,338,0)
(475,214,0)
(148,355,0)
(296,125,0)
(182,244,0)
(395,86,0)
(543,219,0)
(345,264,0)
(418,517,0)
(395,102,0)
(321,542,0)
(364,224,0)
(133,281,0)
(206,522,0)
(194,327,0)
(171,46,0)
(248,501,0)
(541,262,0)
(110,76,0)
(156,564,0)
(178,48,0)
(439,452,0)
(203,55,0)
(219,81,0)
(273,332,0)
(519,120,0)
(95,106,0)
(108,435,0)
(304,517,0)
(394,555,0)
(215,79,0)
(234,47,0)
(497,551,0)
(549,43,0)
(412,327,0)
(43,244,0)
(369,22,0)
(197,73,0)
(500,522,0)
(140,96,0)
(86,395,0)
(164,416,0)
(551,497,0)
(95,532,0)
(403,474,0)
(476,115,0)
(450,475,0)
(556,34,0)
(254,88,0)
(553,327,0)
(134,397,0)
(430,243,0)
(91,172,0)
(302,264,0)
(521,563,0)
(365,98,0)
(221,286,0)
(17,184,0)
(505,126,0)
(70,341,0)
(445,13,0)
(120,244,0)
(254,327,0)
(177,146,0)
(224,515,0)
(393,169,0)
(411,544,0)
(472,223,0)
(0,302,0)
(204,359,0)
(180,550,0)
(300,522,0)
(511,179,0)
(489,168,0)
(398,72,0)
(94,468,0)
(337,125,0)
(339,49,0)
(79,327,0)
(517,327,0)
(196,128,0)
(172,108,0)
(563,327,0)
(19,43,0)
(73,52,0)
(261,294,0)
(153,221,0)
(316,382,0)
(427,40,0)
(73,102,0)
(536,72,0)
(81,219,0)
(361,485,0)
(34,327,0)
(157,376,0)
(535,96,0)
(281,133,0)
(264,302,0)
(112,535,0)
(289,466,0)
(463,397,0)
(473,120,0)
(35,327,0)
(89,282,0)
(57,36,0)
(485,327,0)
(55,306,0)
(22,297,0)
(532,90,0)
(442,414,0)
(278,110,0)
(195,534,0)
(485,451,0)
(401,76,0)
(27,542,0)
(477,273,0)
(309,412,0)
(225,119,0)
(141,462,0)
(222,29,0)
(459,532,0)
(202,221,0)
(368,478,0)
(226,166,0)
(300,555,0)
(77,296,0)
(345,530,0)
(471,240,0)
(22,369,0)
(469,289,0)
(9,463,0)
(296,72,0)
(257,133,0)
(220,332,0)
(346,1,0)
(223,474,0)
(279,420,0)
(264,162,0)
(301,270,0)
(62,314,0)
(5,132,0)
(326,327,0)
(329,362,0)
(46,179,0)
(392,327,0)
(433,555,0)
(68,270,0)
(46,171,0)
(425,244,0)
(192,82,0)
(224,422,0)
(32,244,0)
(130,397,0)
(335,451,0)
(65,172,0)
(209,529,0)
(545,19,0)
(404,132,0)
(55,256,0)
(40,427,0)
(74,23,0)
(294,57,0)
(159,423,0)
(194,382,0)
(120,519,0)
(314,137,0)
(542,321,0)
(275,327,0)
(410,447,0)
(446,73,0)
(255,25,0)
(128,478,0)
(464,114,0)
(223,377,0)
(366,314,0)
(78,20,0)
(102,73,0)
(217,177,0)
(24,318,0)
(298,327,0)
(432,433,0)
(1,356,0)
(354,341,0)
(232,171,0)
(94,214,0)
(259,36,0)
(550,262,0)
(527,25,0)
(161,163,0)
(256,55,0)
(457,168,0)
(246,266,0)
(47,555,0)
(30,420,0)
(271,447,0)
(267,244,0)
(107,397,0)
(166,415,0)
(243,430,0)
(306,405,0)
(480,99,0)
(533,553,0)
(362,244,0)
(82,217,0)
(491,468,0)
(303,348,0)
(1,387,0)
(168,327,0)
(191,425,0)
(477,266,0)
(193,121,0)
(376,150,0)
(200,82,0)
(137,548,0)
(355,148,0)
(184,244,0)
(162,264,0)
(95,439,0)
(213,17,0)
(142,98,0)
(487,551,0)
(229,563,0)
(379,114,0)
(466,289,0)
(509,32,0)
(155,387,0)
(238,353,0)
(61,244,0)
(39,38,0)
(280,52,0)
(39,236,0)
(387,327,0)
(540,303,0)
(421,383,0)
(549,14,0)
(523,366,0)
(380,47,0)
(564,327,0)
(325,445,0)
(352,194,0)
(175,391,0)
(562,327,0)
(294,327,0)
(551,327,0)
(396,452,0)
(494,305,0)
(526,254,0)
(159,219,0)
(468,94,0)
(315,244,0)
(174,194,0)
(242,336,0)
(150,376,0)
(16,356,0)
(98,49,0)
(169,337,0)
(535,327,0)
(381,185,0)
(54,256,0)
(413,168,0)
(384,9,0)
(272,14,0)
(281,167,0)
(360,128,0)
(132,61,0)
(344,562,0)
(10,25,0)
(322,355,0)
(88,254,0)
(88,430,0)
(147,244,0)
(76,507,0)
(293,5,0)
(544,415,0)
(439,507,0)
(522,300,0)
(45,297,0)
(38,244,0)
(253,336,0)
(53,84,0)
(562,305,0)
(474,223,0)
(51,266,0)
(521,153,0)
(424,333,0)
(198,16,0)
(415,544,0)
(230,163,0)
(456,351,0)
(441,462,0)
(440,236,0)
(168,457,0)
(563,521,0)
(129,39,0)
(320,466,0)
(452,439,0)
(119,298,0)
(502,379,0)
(328,171,0)
(552,99,0)
(356,244,0)
(387,1,0)
(52,138,0)
(216,423,0)
(557,395,0)
(341,207,0)
(35,509,0)
(564,126,0)
(37,16,0)
(357,391,0)
(34,303,0)
(218,326,0)
(336,461,0)
(114,379,0)
(146,177,0)
(501,16,0)
(137,314,0)
(167,281,0)
(119,225,0)
(421,165,0)
(506,244,0)
(390,29,0)
(524,405,0)
(151,428,0)
(310,297,0)
(258,222,0)
(445,327,0)
(80,294,0)
(201,555,0)
(382,258,0)
(252,516,0)
(475,184,0)
(268,342,0)
(239,286,0)
(14,327,0)
(295,5,0)
(255,207,0)
(222,258,0)
(427,469,0)
(463,420,0)
(558,475,0)
(438,34,0)
(460,418,0)
(102,244,0)
(98,327,0)
(21,412,0)
(131,79,0)
(488,23,0)
(547,9,0)
(367,90,0)
(461,336,0)
(42,35,0)
(106,39,0)
(454,338,0)
(100,222,0)
(228,563,0)
(163,48,0)
(319,244,0)
(167,49,0)
(507,244,0)
(490,529,0)
(516,542,0)
(498,377,0)
(428,61,0)
(382,194,0)
(496,516,0)
(287,86,0)
(6,40,0)
(99,480,0)
(256,327,0)
(298,119,0)
(356,16,0)
(176,158,0)
(384,327,0)
(108,172,0)
(414,109,0)
(327,244,0)
(59,517,0)
(63,68,0)
(118,14,0)
(243,250,0)
(525,342,0)
(143,477,0)
(153,244,0)
(135,119,0)
(96,535,0)
(11,495,0)
(145,509,0)
(219,159,0)
(165,66,0)
(399,445,0)
(530,548,0)
(9,384,0)
(25,327,0)
(405,434,0)
(103,412,0)
(431,439,0)
(513,137,0)
(44,538,0)
(170,209,0)
(75,376,0)
(467,121,0)
(282,333,0)
(283,353,0)
(359,397,0)
(415,166,0)
(154,501,0)
(87,243,0)
(48,163,0)
(124,506,0)
(117,461,0)
(69,433,0)
(461,38,0)
(76,110,0)
(430,397,0)
(58,521,0)
(14,549,0)
(127,544,0)
(373,447,0)
(263,110,0)
(385,219,0)
(333,318,0)
(36,57,0)
(99,220,0)
(114,327,0)
(105,66,0)
(469,555,0)
(499,550,0)
(136,111,0)
(560,134,0)
(109,414,0)
(423,159,0)
(465,387,0)
(514,515,0)
(457,454,0)
(522,20,0)
(220,435,0)
(84,428,0)
(231,270,0)
(3,67,0)
(235,478,0)
(337,169,0)
(33,28,0)
(264,345,0)
(284,414,0)
(422,106,0)
(429,397,0)
(495,327,0)
(297,22,0)
(309,244,0)
(447,327,0)
(368,166,0)
(305,562,0)
(326,244,0)
(23,244,0)
(324,555,0)
(479,392,0)
(435,108,0)
(453,564,0)
(12,236,0)
(181,109,0)
(90,327,0)
(288,177,0)
(128,327,0)
(482,246,0)
(426,244,0)
(534,327,0)
(349,214,0)
(166,226,0)
(28,311,0)
(340,359,0)
(233,529,0)
(133,214,0)
(462,141,0)
(530,345,0)
(518,38,0)
(412,309,0)
(449,192,0)
(212,108,0)
(81,244,0)
(32,391,0)
(358,244,0)
(486,415,0)
(250,243,0)
(407,349,0)
(49,167,0)
(8,427,0)
(2,480,0)
(480,327,0)
(419,291,0)
(513,416,0)
(186,28,0)
(72,296,0)
(290,146,0)
(116,17,0)
(66,508,0)
(375,210,0)
(52,73,0)
(227,190,0)
(386,217,0)
(207,341,0)
(366,530,0)
(66,165,0)
(311,28,0)
(389,244,0)
(273,477,0)
(383,327,0)
(260,250,0)
(436,190,0)
(211,88,0)
(149,262,0)
(217,82,0)
(501,248,0)
(126,115,0)
(492,210,0)
(410,394,0)
(529,209,0)
(405,306,0)
(371,397,0)
(16,501,0)
(31,286,0)
(383,421,0)
(434,405,0)
(208,466,0)
(171,377,0)
(82,192,0)
(49,98,0)
(177,348,0)
(425,210,0)
(188,384,0)
(444,410,0)
(509,35,0)
(391,32,0)
(406,114,0)
(416,327,0)
(348,177,0)
(270,327,0)
(393,18,1)
(367,64,1)
(304,469,1)
(175,509,1)
(82,192,1)
(111,136,1)
(265,79,1)
(310,378,1)
(1,346,1)
(513,416,1)
(350,50,1)
(485,361,1)
(475,214,1)
(457,330,1)
(270,301,1)
(221,483,1)
(415,486,1)
(223,472,1)
(21,103,1)
(236,440,1)
(222,100,1)
(48,178,1)
(557,86,1)
(383,327,1)
(444,447,1)
(261,32,1)
(108,172,1)
(381,96,1)
(243,71,1)
(49,98,1)
(85,395,1)
(295,293,1)
(47,380,1)
(68,63,1)
(425,210,1)
(416,327,1)
(532,90,1)
(212,172,1)
(106,39,1)
(82,200,1)
(39,129,1)
(330,168,1)
(537,549,1)
(253,242,1)
(114,406,1)
(68,270,1)
(413,489,1)
(562,455,1)
(369,22,1)
(254,327,1)
(521,58,1)
(73,197,1)
(138,85,1)
(98,327,1)
(12,224,1)
(485,327,1)
(487,23,1)
(451,335,1)
(35,327,1)
(538,539,1)
(466,208,1)
(325,399,1)
(534,195,1)
(89,534,1)
(376,377,1)
(57,36,1)
(11,307,1)
(512,498,1)
(260,15,1)
(398,536,1)
(458,152,1)
(392,327,1)
(542,27,1)
(412,21,1)
(195,241,1)
(243,250,1)
(95,439,1)
(202,286,1)
(181,414,1)
(221,286,1)
(345,264,1)
(90,367,1)
(120,519,1)
(153,221,1)
(301,231,1)
(185,381,1)
(337,169,1)
(115,476,1)
(354,255,1)
(255,25,1)
(401,110,1)
(127,93,1)
(459,90,1)
(313,530,1)
(266,246,1)
(16,37,1)
(436,333,1)
(320,531,1)
(421,470,1)
(50,421,1)
(286,31,1)
(4,416,1)
(37,501,1)
(143,209,1)
(218,327,1)
(305,562,1)
(528,188,1)
(258,222,1)
(65,91,1)
(128,327,1)
(54,104,1)
(463,420,1)
(515,26,1)
(32,391,1)
(303,540,1)
(191,326,1)
(544,127,1)
(478,128,1)
(141,462,1)
(522,20,1)
(518,79,1)
(446,52,1)
(62,366,1)
(550,180,1)
(359,204,1)
(341,70,1)
(152,55,1)
(159,317,1)
(231,300,1)
(292,445,1)
(421,383,1)
(362,329,1)
(205,3,1)
(270,327,1)
(343,487,1)
(298,119,1)
(469,289,1)
(479,363,1)
(294,80,1)
(84,53,1)
(564,156,1)
(59,304,1)
(178,163,1)
(48,163,1)
(273,477,1)
(504,124,1)
(230,214,1)
(323,184,1)
(126,564,1)
(362,327,1)
(169,393,1)
(472,512,1)
(171,232,1)
(226,166,1)
(129,236,1)
(45,310,1)
(80,261,1)
(214,94,1)
(35,42,1)
(26,514,1)
(305,494,1)
(176,115,1)
(406,464,1)
(352,174,1)
(470,383,1)
(124,38,1)
(385,159,1)
(248,249,1)
(302,0,1)
(503,394,1)
(210,492,1)
(328,392,1)
(529,490,1)
(19,545,1)
(333,424,1)
(424,282,1)
(449,303,1)
(461,561,1)
(285,516,1)
(7,49,1)
(15,88,1)
(31,239,1)
(132,5,1)
(563,229,1)
(200,192,1)
(158,56,1)
(16,198,1)
(217,386,1)
(423,216,1)
(78,305,1)
(533,554,1)
(430,243,1)
(378,418,1)
(98,365,1)
(18,296,1)
(109,414,1)
(108,212,1)
(306,405,1)
(133,257,1)
(368,478,1)
(492,375,1)
(281,133,1)
(210,327,1)
(478,235,1)
(137,314,1)
(540,34,1)
(236,327,1)
(240,495,1)
(364,515,1)
(36,259,1)
(453,369,1)
(132,404,1)
(51,246,1)
(509,35,1)
(282,89,1)
(219,385,1)
(183,84,1)
(513,4,1)
(88,254,1)
(299,14,1)
(164,313,1)
(252,68,1)
(518,265,1)
(477,266,1)
(197,52,1)
(206,20,1)
(321,542,1)
(403,223,1)
(396,247,1)
(283,422,1)
(38,461,1)
(255,312,1)
(451,485,1)
(171,377,1)
(86,327,1)
(539,44,1)
(386,82,1)
(96,140,1)
(282,534,1)
(9,547,1)
(457,168,1)
(97,315,1)
(300,522,1)
(488,74,1)
(331,553,1)
(205,13,1)
(256,327,1)
(154,248,1)
(434,458,1)
(510,348,1)
(22,297,1)
(447,327,1)
(6,503,1)
(407,281,1)
(240,471,1)
(177,288,1)
(16,501,1)
(66,105,1)
(480,327,1)
(317,423,1)
(53,132,1)
(473,57,1)
(484,491,1)
(447,271,1)
(327,298,1)
(382,194,1)
(39,236,1)
(432,321,1)
(543,159,1)
(547,384,1)
(279,9,1)
(227,436,1)
(163,161,1)
(105,508,1)
(246,482,1)
(165,66,1)
(412,327,1)
(241,109,1)
(228,506,1)
(247,532,1)
(166,415,1)
(506,504,1)
(495,11,1)
(223,377,1)
(344,47,1)
(515,327,1)
(161,230,1)
(176,125,1)
(264,302,1)
(464,120,1)
(230,349,1)
(167,49,1)
(522,206,1)
(387,155,1)
(505,564,1)
(551,327,1)
(221,202,1)
(254,526,1)
(176,111,1)
(494,562,1)
(14,118,1)
(293,258,1)
(366,523,1)
(52,138,1)
(60,449,1)
(501,248,1)
(353,238,1)
(72,398,1)
(131,158,1)
(395,557,1)
(112,448,1)
(445,327,1)
(490,233,1)
(102,73,1)
(415,544,1)
(519,199,1)
(493,99,1)
(410,447,1)
(542,285,1)
(349,214,1)
(546,473,1)
(235,128,1)
(75,240,1)
(338,92,1)
(356,16,1)
(405,524,1)
(435,108,1)
(196,415,1)
(95,532,1)
(5,327,1)
(334,551,1)
(408,277,1)
(284,442,1)
(336,253,1)
(355,322,1)
(99,480,1)
(384,327,1)
(34,327,1)
(192,327,1)
(395,86,1)
(103,510,1)
(517,59,1)
(372,143,1)
(388,323,1)
(357,175,1)
(525,185,1)
(121,193,1)
(527,433,1)
(109,181,1)
(216,379,1)
(110,278,1)
(499,115,1)
(452,396,1)
(207,341,1)
(28,186,1)
(558,450,1)
(461,336,1)
(450,17,1)
(224,515,1)
(314,62,1)
(25,10,1)
(339,98,1)
(263,497,1)
(3,331,1)
(150,376,1)
(245,113,1)
(559,167,1)
(9,384,1)
(416,164,1)
(142,48,1)
(40,6,1)
(155,465,1)
(391,357,1)
(376,157,1)
(379,114,1)
(219,543,1)
(517,327,1)
(70,354,1)
(481,511,1)
(232,328,1)
(100,29,1)
(264,162,1)
(115,126,1)
(17,327,1)
(140,535,1)
(553,327,1)
(55,256,1)
(133,214,1)
(383,408,1)
(87,250,1)
(561,336,1)
(545,537,1)
(194,327,1)
(529,327,1)
(174,102,1)
(194,352,1)
(500,20,1)
(122,281,1)
(222,139,1)
(486,544,1)
(276,513,1)
(92,457,1)
(79,215,1)
(476,126,1)
(311,28,1)
(361,245,1)
(243,87,1)
(33,451,1)
(455,344,1)
(297,45,1)
(170,529,1)
(489,148,1)
(440,12,1)
(39,38,1)
(366,530,1)
(114,327,1)
(474,403,1)
(168,413,1)
(289,466,1)
(168,327,1)
(269,463,1)
(410,444,1)
(392,479,1)
(2,370,1)
(491,481,1)
(519,327,1)
(189,287,1)
(69,432,1)
(118,272,1)
(160,554,1)
(536,190,1)
(437,560,1)
(10,527,1)
(113,388,1)
(390,382,1)
(349,407,1)
(280,138,1)
(387,327,1)
(495,327,1)
(439,452,1)
(41,78,1)
(256,54,1)
(418,517,1)
(498,377,1)
(374,148,1)
(76,110,1)
(8,40,1)
(441,173,1)
(551,343,1)
(428,183,1)
(64,39,1)
(188,134,1)
(384,528,1)
(508,350,1)
(314,366,1)
(117,336,1)
(496,252,1)
(516,496,1)
(523,276,1)
(497,334,1)
(251,478,1)
(40,327,1)
(259,294,1)
(77,72,1)
(215,131,1)
(303,34,1)
(172,65,1)
(562,327,1)
(411,127,1)
(316,194,1)
(159,423,1)
(134,437,1)
(431,452,1)
(144,150,1)
(192,60,1)
(373,207,1)
(329,309,1)
(27,516,1)
(511,46,1)
(123,434,1)
(439,507,1)
(380,234,1)
(368,251,1)
(239,521,1)
(166,368,1)
(139,29,1)
(272,311,1)
(377,141,1)
(219,159,1)
(136,409,1)
(83,425,1)
(23,488,1)
(81,219,1)
(233,111,1)
(52,280,1)
(439,431,1)
(348,177,1)
(278,263,1)
(56,176,1)
(308,110,1)
(44,410,1)
(315,358,1)
(312,25,1)
(55,203,1)
(483,286,1)
(433,69,1)
(163,214,1)
(116,122,1)
(42,101,1)
(49,339,1)
(375,191,1)
(135,275,1)
(296,77,1)
(521,563,1)
(66,508,1)
(66,347,1)
(428,84,1)
(250,260,1)
(1,387,1)
(475,558,1)
(294,327,1)
(442,550,1)
(530,345,1)
(14,327,1)
(468,484,1)
(173,83,1)
(502,114,1)
(61,428,1)
(480,2,1)
(116,48,1)
(91,493,1)
(86,189,1)
(222,29,1)
(0,374,1)
(126,505,1)
(229,228,1)
(405,434,1)
(507,76,1)
(17,213,1)
(322,160,1)
(399,226,1)
(99,552,1)
(512,377,1)
(63,270,1)
(532,459,1)
(217,82,1)
(427,40,1)
(94,468,1)
(237,525,1)
(20,41,1)
(13,292,1)
(522,500,1)
(534,327,1)
(225,135,1)
(90,327,1)
(208,320,1)
(128,360,1)
(281,167,1)
(145,35,1)
(552,480,1)
(288,217,1)
(209,170,1)
(296,72,1)
(148,355,1)
(531,427,1)
(277,359,1)
(404,5,1)
(209,529,1)
(346,387,1)
(462,441,1)
(205,226,1)
(542,516,1)
(461,117,1)
(553,417,1)
(379,502,1)
(167,7,1)
(180,499,1)
(360,196,1)
(394,538,1)
(119,225,1)
(127,327,1)
(220,435,1)
(193,467,1)
(326,218,1)
(43,19,1)
(370,273,1)
(498,144,1)
(186,33,1)
(560,306,1)
(347,508,1)
(176,109,1)
(544,411,1)
(427,8,1)
(73,446,1)
(88,211,1)
(25,327,1)
(271,373,1)
(125,337,1)
(448,137,1)
(72,327,1)
(224,364,1)
(156,453,1)
(509,145,1)
(249,1,1)
(204,340,1)
(257,559,1)
(79,327,1)
(535,112,1)
(234,97,1)
(184,475,1)
(420,30,1)
(198,501,1)
(203,256,1)
(524,434,1)
(417,533,1)
(363,150,1)
(556,356,1)
(501,154,1)
(409,430,1)
(76,401,1)
(382,316,1)
(452,327,1)
(176,220,1)
(157,75,1)
(238,283,1)
(564,327,1)
(535,327,1)
(563,327,1)
(428,151,1)
(190,227,1)
(211,254,1)
(335,485,1)
(71,250,1)
(5,295,1)
(177,217,1)
(482,372,1)
(76,308,1)
(73,52,1)
(104,165,1)
(242,518,1)
(445,325,1)
(290,217,1)
(554,353,1)
(106,95,1)
(93,237,1)
(307,474,1)
(58,563,1)
(151,84,1)
(326,327,1)
(460,517,1)
(471,495,1)
(526,269,1)
(340,121,1)
(474,223,1)
(287,81,1)
(465,61,1)
(549,14,1)
(34,438,1)
(481,474,1)
(448,454,1)
(46,171,1)
(96,535,1)
(405,123,1)
(146,290,1)
(365,142,1)
(414,284,1)
(309,412,1)
(454,338,1)
(422,106,1)
(29,390,1)
(266,51,1)
(497,551,1)
(150,240,1)
(467,97,1)
(418,460,1)
(213,116,1)
(514,507,1)
(358,362,1)
(74,153,1)
(549,299,1)
(438,556,1)
(101,43,1)
(532,153,1)
(177,146,1)
(199,546,1)
(30,279,1)
(306,405,2)
(34,327,2)
(428,84,2)
(6,97,2)
(379,114,2)
(181,115,2)
(270,97,2)
(427,97,2)
(99,480,2)
(296,72,2)
(300,97,2)
(427,40,2)
(75,474,2)
(416,148,2)
(62,148,2)
(148,355,2)
(14,327,2)
(193,97,2)
(120,519,2)
(349,281,2)
(401,110,2)
(368,478,2)
(206,20,2)
(471,474,2)
(65,111,2)
(240,495,2)
(170,111,2)
(18,109,2)
(480,327,2)
(522,20,2)
(313,148,2)
(40,327,2)
(255,97,2)
(524,434,2)
(337,109,2)
(72,327,2)
(237,554,2)
(235,415,2)
(223,150,2)
(95,532,2)
(112,554,2)
(382,194,2)
(553,327,2)
(69,97,2)
(270,327,2)
(302,148,2)
(151,84,2)
(41,97,2)
(284,115,2)
(493,111,2)
(469,97,2)
(35,327,2)
(414,115,2)
(168,148,2)
(559,48,2)
(91,111,2)
(529,327,2)
(454,148,2)
(362,327,2)
(55,256,2)
(204,97,2)
(475,214,2)
(217,82,2)
(22,97,2)
(516,97,2)
(435,111,2)
(505,97,2)
(137,148,2)
(68,270,2)
(496,97,2)
(407,281,2)
(509,35,2)
(424,109,2)
(326,327,2)
(432,97,2)
(479,150,2)
(305,562,2)
(412,327,2)
(255,25,2)
(165,66,2)
(194,327,2)
(309,412,2)
(303,34,2)
(435,108,2)
(413,148,2)
(105,508,2)
(544,127,2)
(359,97,2)
(266,111,2)
(345,264,2)
(503,97,2)
(94,468,2)
(277,97,2)
(300,522,2)
(128,327,2)
(339,48,2)
(383,97,2)
(385,159,2)
(564,327,2)
(457,168,2)
(281,48,2)
(257,48,2)
(177,146,2)
(73,52,2)
(47,97,2)
(476,97,2)
(203,97,2)
(226,166,2)
(45,97,2)
(108,111,2)
(32,391,2)
(543,159,2)
(264,302,2)
(168,327,2)
(254,97,2)
(254,327,2)
(72,109,2)
(49,98,2)
(341,97,2)
(9,97,2)
(311,28,2)
(88,97,2)
(108,172,2)
(230,281,2)
(349,214,2)
(377,141,2)
(226,554,2)
(207,341,2)
(8,97,2)
(399,226,2)
(421,383,2)
(489,148,2)
(142,48,2)
(233,111,2)
(159,423,2)
(490,111,2)
(92,148,2)
(314,366,2)
(251,415,2)
(523,148,2)
(452,327,2)
(498,377,2)
(418,97,2)
(373,97,2)
(59,97,2)
(15,97,2)
(289,466,2)
(333,109,2)
(246,111,2)
(115,97,2)
(328,150,2)
(310,97,2)
(480,111,2)
(312,97,2)
(106,39,2)
(460,97,2)
(269,97,2)
(282,534,2)
(163,214,2)
(271,97,2)
(422,106,2)
(472,150,2)
(383,327,2)
(161,281,2)
(530,148,2)
(48,281,2)
(495,474,2)
(455,97,2)
(209,111,2)
(288,217,2)
(340,97,2)
(338,148,2)
(410,97,2)
(416,327,2)
(500,20,2)
(447,327,2)
(301,97,2)
(70,97,2)
(165,97,2)
(508,97,2)
(231,97,2)
(5,327,2)
(197,52,2)
(82,192,2)
(117,336,2)
(356,16,2)
(252,97,2)
(221,286,2)
(126,564,2)
(322,554,2)
(266,246,2)
(169,109,2)
(220,111,2)
(466,97,2)
(563,327,2)
(52,138,2)
(405,97,2)
(437,97,2)
(325,226,2)
(1,387,2)
(202,286,2)
(150,474,2)
(445,327,2)
(208,97,2)
(442,115,2)
(98,48,2)
(132,5,2)
(350,97,2)
(76,110,2)
(296,109,2)
(547,97,2)
(410,447,2)
(232,150,2)
(61,428,2)
(241,109,2)
(171,150,2)
(125,337,2)
(417,554,2)
(7,48,2)
(392,150,2)
(517,97,2)
(376,474,2)
(347,508,2)
(321,542,2)
(146,217,2)
(344,97,2)
(119,225,2)
(102,73,2)
(98,327,2)
(39,38,2)
(127,327,2)
(144,150,2)
(384,97,2)
(369,97,2)
(166,415,2)
(236,327,2)
(273,477,2)
(394,97,2)
(337,169,2)
(88,254,2)
(212,111,2)
(470,97,2)
(192,327,2)
(99,111,2)
(177,217,2)
(527,97,2)
(544,554,2)
(430,243,2)
(104,97,2)
(305,97,2)
(256,97,2)
(370,111,2)
(398,109,2)
(90,327,2)
(445,226,2)
(171,377,2)
(498,150,2)
(22,297,2)
(134,97,2)
(477,111,2)
(368,415,2)
(380,97,2)
(220,435,2)
(136,97,2)
(139,29,2)
(306,97,2)
(528,97,2)
(519,327,2)
(446,52,2)
(55,97,2)
(125,109,2)
(243,97,2)
(106,95,2)
(363,150,2)
(538,97,2)
(499,115,2)
(463,420,2)
(190,109,2)
(515,327,2)
(430,97,2)
(2,111,2)
(439,507,2)
(372,111,2)
(512,150,2)
(148,554,2)
(166,554,2)
(195,109,2)
(152,97,2)
(444,97,2)
(71,250,2)
(483,286,2)
(433,97,2)
(0,148,2)
(37,501,2)
(258,222,2)
(46,150,2)
(551,327,2)
(178,281,2)
(86,327,2)
(294,327,2)
(447,97,2)
(20,97,2)
(314,148,2)
(183,84,2)
(260,97,2)
(454,338,2)
(531,97,2)
(222,29,2)
(13,226,2)
(46,171,2)
(513,148,2)
(560,97,2)
(564,97,2)
(474,150,2)
(376,377,2)
(532,153,2)
(550,115,2)
(140,554,2)
(279,97,2)
(549,14,2)
(405,434,2)
(143,111,2)
(276,148,2)
(27,516,2)
(409,97,2)
(66,97,2)
(534,327,2)
(535,554,2)
(95,439,2)
(536,109,2)
(365,48,2)
(126,97,2)
(100,29,2)
(289,97,2)
(478,128,2)
(210,327,2)
(264,148,2)
(243,250,2)
(562,97,2)
(10,97,2)
(561,336,2)
(66,508,2)
(211,97,2)
(96,554,2)
(157,474,2)
(50,97,2)
(39,236,2)
(542,516,2)
(133,214,2)
(511,150,2)
(494,97,2)
(411,554,2)
(467,97,2)
(477,266,2)
(114,327,2)
(121,97,2)
(78,97,2)
(122,281,2)
(40,97,2)
(54,97,2)
(439,452,2)
(369,22,2)
(330,148,2)
(348,177,2)
(345,148,2)
(160,554,2)
(48,163,2)
(381,554,2)
(425,210,2)
(87,250,2)
(463,97,2)
(458,97,2)
(282,109,2)
(534,109,2)
(535,327,2)
(77,109,2)
(384,327,2)
(327,298,2)
(137,314,2)
(281,133,2)
(292,226,2)
(378,97,2)
(321,97,2)
(30,97,2)
(219,159,2)
(115,126,2)
(150,240,2)
(522,97,2)
(167,49,2)
(256,327,2)
(89,109,2)
(128,415,2)
(123,434,2)
(172,111,2)
(308,110,2)
(486,554,2)
(109,115,2)
(393,109,2)
(250,97,2)
(354,97,2)
(4,148,2)
(421,97,2)
(109,414,2)
(518,79,2)
(25,327,2)
(451,485,2)
(355,554,2)
(167,48,2)
(188,97,2)
(392,327,2)
(517,327,2)
(240,474,2)
(420,97,2)
(469,289,2)
(25,97,2)
(533,554,2)
(532,90,2)
(17,327,2)
(156,97,2)
(51,111,2)
(214,94,2)
(3,554,2)
(434,97,2)
(297,97,2)
(96,535,2)
(553,554,2)
(374,148,2)
(485,327,2)
(93,554,2)
(57,36,2)
(166,368,2)
(223,377,2)
(366,148,2)
(394,538,2)
(227,109,2)
(185,554,2)
(320,97,2)
(507,76,2)
(457,148,2)
(273,111,2)
(234,97,2)
(16,501,2)
(415,554,2)
(526,97,2)
(209,529,2)
(127,554,2)
(9,384,2)
(331,554,2)
(418,517,2)
(562,327,2)
(436,109,2)
(164,148,2)
(304,97,2)
(285,516,2)
(482,111,2)
(448,554,2)
(111,97,2)
(529,111,2)
(79,327,2)
(49,48,2)
(153,221,2)
(387,327,2)
(38,461,2)
(497,551,2)
(141,462,2)
(474,223,2)
(198,501,2)
(366,530,2)
(298,119,2)
(44,97,2)
(307,474,2)
(11,474,2)
(525,554,2)
(415,544,2)
(264,162,2)
(542,97,2)
(68,97,2)
(501,248,2)
(290,217,2)
(163,281,2)
(395,86,2)
(495,327,2)
(207,97,2)
(453,97,2)
(180,115,2)
(408,97,2)
(461,336,2)
(478,415,2)
(81,219,2)
(539,97,2)
(63,97,2)
(513,416,2)
(281,167,2)
(184,475,2)
(224,515,2)
(530,345,2)
(521,563,2)
(525,185,2)
(43,19,2)
(403,150,2)
(150,376,2)
(552,111,2)
(196,415,2)
(133,48,2)
(360,415,2)
-----------------------------------
(0,isa)
(1,cpu->extn.minmax)
(2,bpu)
(3,cpu->isa = isa)
(4,atomic)
(5,cpu->extn)
(6,bpu)
(7,0xF4)
(8,num_cache)
(9,cpu->bpu.ver)
(10,bpu)
(11,core)
(12,cpu)
(13,cpu->name = "ARC750")
(14,cpu->extn)
(15,bpu)
(16,read_aux_reg(ARC_REG_MIXMAX_BCR)
(17,cpu->name)
(18,exec_ctrl)
(19,timer.t1)
(20,spdp.sp)
(21,extn_xymem)
(22,2048 << bpu.pte)
(23,READ_BCR(ARC_REG_RTT_BCR, bcr)
(24,exec_ctrl)
(25,cpu->bpu)
(26,extn)
(27,0)
(28,timer.t0)
(29,read_aux_reg(ARC_REG_SWAP_BCR)
(30,ver)
(31,ver)
(32,cpu->extn.rtc = timer.rtc)
(33,timer)
(34,cpu->extn)
(35,cpu->extn)
(36,read_aux_reg(AUX_INTR_VEC_BASE)
(37,1)
(38,cpu->extn.ap = bcr.ver ? 1 : 0)
(39,cpu->extn.ap)
(40,cpu->bpu)
(41,sp)
(42,extn)
(43,cpu->extn.timer1 = timer.t1)
(44,bpu)
(45,pte)
(46,cpu->details = tbl->str)
(47,READ_BCR(ARC_REG_FP_V2_BCR, spdp)
(48,tbl->id != 0)
(49,cpu->core.family)
(50,sp)
(51,1)
(52,read_aux_reg(ARC_REG_BARREL_BCR)
(53,ARC_REG_CRC_BCR)
(54,extn)
(55,cpu->extn.fpu_dp)
(56,bcr)
(57,cpu->vec_base = read_aux_reg(AUX_INTR_VEC_BASE)
(58,smart)
(59,bpu)
(60,core)
(61,cpu->extn.crc = read_aux_reg(ARC_REG_CRC_BCR)
(62,1)
(63,fpu_dp)
(64,cpu)
(65,ent)
(66,sp.ver ? 1 : 0)
(67,)
(68,cpu->extn.fpu_dp)
(69,bpu)
(70,ver)
(71,0)
(72,cpu->extn)
(73,read_aux_reg(ARC_REG_BARREL_BCR)
(74,ARC_REG_RTT_BCR)
(75,tbl)
(76,bcr.ver ? 1 : 0)
(77,dual_enb)
(78,spdp)
(79,cpu->extn)
(80,vec_base)
(81,cpu->extn.norm = read_aux_reg(ARC_REG_NORM_BCR)
(82,cpu->core.family)
(83,tbl)
(84,read_aux_reg(ARC_REG_CRC_BCR)
(85,ARC_REG_BARREL_BCR)
(86,cpu->extn)
(87,1)
(88,cpu->bpu.full)
(89,dual)
(90,cpu->extn)
(91,bpu)
(92,CONFIG_ARC_HAS_LLSC)
(93,core)
(94,&arc_cpu_nm[0])
(95,cpu->extn.smart | cpu->extn.rtt)
(96,cpu->isa.be)
(97,is_isa_arcompact()
(98,cpu->core)
(99,cpu->bpu.num_pred)
(100,1)
(101,cpu)
(102,cpu->extn.barrel = read_aux_reg(ARC_REG_BARREL_BCR)
(103,cpu)
(104,cpu)
(105,0)
(106,cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt)
(107,sp)
(108,bpu.ent - 1)
(109,uarch.prod == 4)
(110,bcr.ver)
(111,bpu.ent)
(112,isa)
(113,READ_BCR(ARC_REG_TIMERS_BCR, timer)
(114,cpu->extn)
(115,cpu->core.family >= 0x54)
(116,cpu)
(117,1)
(118,extn)
(119,cpuinfo_arc700[smp_processor_id()
(120,READ_BCR(ARC_REG_MUL_BCR, cpu->extn_mpy)
(121,READ_BCR(ARC_REG_FP_BCR, sp)
(122,break;)
(123,1)
(124,ARC_REG_SMART_BCR)
(125,cpu->extn.dual_enb = !(exec_ctrl & 1)
(126,cpu->core.family)
(127,cpu->core)
(128,cpu->mmu)
(129,ap)
(130,bpu)
(131,cpu)
(132,cpu->extn.crc)
(133,tbl->id)
(134,READ_BCR(ARC_REG_BPU_BCR, bpu)
(135,cpuinfo_arc700)
(136,ent)
(137,cpu->isa.atomic = bcr.info & 1)
(138,read_aux_reg(ARC_REG_BARREL_BCR)
(139,0)
(140,be)
(141,&arc_cpu_rel[0])
(142,cpu)
(143,256)
(144,tbl)
(145,rtc)
(146,IS_ENABLED(CONFIG_ARC_HAS_SWAPE)
(147,isa)
(148,!isa.ver)
(149,uarch)
(150,cpu->core.family == tbl->id)
(151,1)
(152,dp)
(153,cpu->extn.smart = bcr.ver ? 1 : 0)
(154,1)
(155,extn)
(156,core)
(157,id)
(158,READ_BCR(ARC_REG_AP_BCR, bcr)
(159,read_aux_reg(ARC_REG_NORM_BCR)
(160,isa)
(161,id)
(162,struct bcr_generic *)
(163,tbl->id)
(164,isa)
(165,cpu->extn.fpu_sp = sp.ver ? 1 : 0)
(166,cpu->core.family < 0x34 || cpu->mmu.ver < 3)
(167,cpu->core.family & 0xF4)
(168,cpu->isa)
(169,exec_ctrl & 1)
(170,num_cache)
(171,tbl->str)
(172,bpu.ent)
(173,arc_cpu_rel)
(174,cpu)
(175,timer)
(176,ARC_REG_AP_BCR)
(177,(cpu->core.family >= 0x34)
(178,0)
(179,)
(180,uarch)
(181,4)
(182,bcr)
(183,0)
(184,cpu->name = tbl->str)
(185,IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)
(186,t0)
(187,for (tbl = &arc_cpu_nm[0]; tbl->id != 0; tbl++)
(188,cpu)
(189,extn)
(190,READ_BCR(AUX_EXEC_CTRL, exec_ctrl)
(191,AUX_IDENTITY)
(192,cpu->core)
(193,sp)
(194,cpu->extn)
(195,extn)
(196,cpu)
(197,0)
(198,0)
(199,extn_mpy)
(200,family)
(201,if (cpu->core.family >= 0x54)
(202,0)
(203,fpu_dp)
(204,dp)
(205,RET)
(206,1)
(207,cpu->bpu.ver = bpu.ver)
(208,bce)
(209,cpu->bpu.num_cache)
(210,cpu->core)
(211,full)
(212,1)
(213,name)
(214,tbl = &arc_cpu_nm[0])
(215,extn)
(216,ARC_REG_NORM_BCR)
(217,cpu->core.family >= 0x34)
(218,cpu)
(219,read_aux_reg(ARC_REG_NORM_BCR)
(220,cpu->bpu.num_pred = 256 << (bpu.ent - 1)
(221,bcr.ver ? 1 : 0)
(222,read_aux_reg(ARC_REG_SWAP_BCR)
(223,tbl->id)
(224,cpu->extn.debug)
(225,smp_processor_id()
(226,unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3)
(227,exec_ctrl)
(228,cpu)
(229,extn)
(230,tbl)
(231,cpu)
(232,str)
(233,cpu)
(234,ARC_REG_FP_V2_BCR)
(235,ver)
(236,cpu->extn)
(237,cpu)
(238,isa)
(239,bcr)
(240,cpu->core.family)
(241,cpu)
(242,bcr)
(243,bpu.fam ? 1 : 0)
(244,)
(245,cpu)
(246,bpu.ent)
(247,cpu)
(248,read_aux_reg(ARC_REG_MIXMAX_BCR)
(249,ARC_REG_MIXMAX_BCR)
(250,bpu.fam)
(251,3)
(252,spdp)
(253,ver)
(254,cpu->bpu)
(255,cpu->bpu.ver)
(256,cpu->extn)
(257,id)
(258,cpu->extn.swap = read_aux_reg(ARC_REG_SWAP_BCR)
(259,AUX_INTR_VEC_BASE)
(260,fam)
(261,cpu)
(262,)
(263,bcr)
(264,(struct bcr_generic *)
(265,ap)
(266,bpu.ent - 1)
(267,if (is_isa_arcompact()
(268,if (!isa.ver)
(269,cpu)
(270,cpu->extn)
(271,bpu)
(272,cpu)
(273,cpu->bpu.num_cache = 256 << (bpu.ent - 1)
(274,bcr)
(275,cpu)
(276,bcr)
(277,cpu)
(278,ver)
(279,bpu)
(280,1)
(281,(cpu->core.family & 0xF4)
(282,cpu->extn.dual)
(283,ARC_REG_ISA_CFG_BCR)
(284,prod)
(285,1)
(286,bcr.ver)
(287,cpu)
(288,1)
(289,256 << bpu.bce)
(290,CONFIG_ARC_HAS_SWAPE)
(291,)
(292,"ARC750")
(293,cpu)
(294,cpu->vec_base)
(295,extn)
(296,cpu->extn.dual_enb)
(297,bpu.pte)
(298,&cpuinfo_arc700[smp_processor_id()
(299,timer1)
(300,cpu->extn.fpu_sp = spdp.sp ? 1 : 0)
(301,extn)
(302,&isa)
(303,cpu->extn.swape)
(304,cpu)
(305,cpu->extn.fpu_sp)
(306,cpu->extn.fpu_dp = dp.ver ? 1 : 0)
(307,cpu)
(308,1)
(309,READ_BCR(ARC_REG_XY_MEM_BCR, cpu->extn_xymem)
(310,bpu)
(311,cpu->extn.timer0 = timer.t0)
(312,ver)
(313,cpu)
(314,bcr.info & 1)
(315,read_decode_cache_bcr()
(316,swap)
(317,1)
(318,)
(319,cpu)
(320,bpu)
(321,cpu->extn.fpu_dp = spdp.dp ? 1 : 0)
(322,ver)
(323,ARC_REG_TIMERS_BCR)
(324,spdp)
(325,name)
(326,FIX_PTR(cpu)
(327,*cpu = &cpuinfo_arc700[smp_processor_id()
(328,tbl)
(329,cpu)
(330,atomic)
(331,isa)
(332,)
(333,cpu->extn.dual = 1)
(334,rtt)
(335,timer0)
(336,bcr.ver)
(337,!(exec_ctrl & 1)
(338,IS_ENABLED(CONFIG_ARC_HAS_LLSC)
(339,family)
(340,ARC_REG_DPFP_BCR)
(341,bpu.ver)
(342,)
(343,extn)
(344,cpu)
(345,*(struct bcr_generic *)
(346,minmax)
(347,1)
(348,cpu->extn.swape = (cpu->core.family >= 0x34)
(349,tbl++)
(350,ver)
(351,)
(352,extn)
(353,READ_BCR(ARC_REG_ISA_CFG_BCR, isa)
(354,bpu)
(355,isa.ver)
(356,cpu->extn.minmax = read_aux_reg(ARC_REG_MIXMAX_BCR)
(357,rtc)
(358,read_decode_mmu_bcr()
(359,READ_BCR(ARC_REG_DPFP_BCR, dp)
(360,mmu)
(361,extn)
(362,read_decode_ccm_bcr(cpu)
(363,cpu)
(364,debug)
(365,core)
(366,bcr.info)
(367,extn)
(368,cpu->mmu.ver < 3)
(369,cpu->bpu.num_pred = 2048 << bpu.pte)
(370,cpu)
(371,dp)
(372,bpu)
(373,cpu)
(374,bcr)
(375,cpu)
(376,tbl->id)
(377,tbl = &arc_cpu_rel[0])
(378,2048)
(379,cpu->extn.norm)
(380,spdp)
(381,CONFIG_CPU_BIG_ENDIAN)
(382,cpu->extn.swap)
(383,cpu->extn)
(384,cpu->bpu)
(385,1)
(386,0x34)
(387,cpu->extn)
(388,timer)
(389,for (tbl = &arc_cpu_rel[0]; tbl->id != 0; tbl++)
(390,ARC_REG_SWAP_BCR)
(391,timer.rtc)
(392,cpu->details)
(393,1)
(394,cpu->bpu.full = bpu.ft)
(395,cpu->extn.barrel)
(396,extn)
(397,)
(398,extn)
(399,cpu)
(400,bpu)
(401,0)
(402,if (is_isa_arcompact()
(403,0)
(404,crc)
(405,dp.ver ? 1 : 0)
(406,extn)
(407,tbl)
(408,extn)
(409,bpu)
(410,cpu->bpu.full)
(411,family)
(412,cpu->extn_xymem)
(413,isa)
(414,uarch.prod)
(415,cpu->core.family < 0x34)
(416,cpu->isa)
(417,isa)
(418,cpu->bpu.num_pred)
(419,if (cpu->core.family == tbl->id)
(420,bpu.ver)
(421,cpu->extn.fpu_sp)
(422,cpu->extn.debug = cpu->extn.ap | cpu->extn.smart | cpu->extn.rtt)
(423,read_aux_reg(ARC_REG_NORM_BCR)
(424,1)
(425,READ_BCR(AUX_IDENTITY, cpu->core)
(426,tbl)
(427,cpu->bpu.num_cache)
(428,read_aux_reg(ARC_REG_CRC_BCR)
(429,if (bpu.ent)
(430,cpu->bpu.full = bpu.fam ? 1 : 0)
(431,rtt)
(432,ARC_REG_BPU_BCR)
(433,READ_BCR(ARC_REG_BPU_BCR, bpu)
(434,dp.ver)
(435,256 << (bpu.ent - 1)
(436,AUX_EXEC_CTRL)
(437,bpu)
(438,extn)
(439,cpu->extn.rtt)
(440,extn)
(441,0)
(442,uarch)
(443,timer)
(444,full)
(445,cpu->name)
(446,1)
(447,cpu->bpu)
(448,cpu)
(449,cpu)
(450,tbl)
(451,cpu->extn.timer0)
(452,cpu->extn)
(453,cpu)
(454,cpu->isa.atomic = IS_ENABLED(CONFIG_ARC_HAS_LLSC)
(455,extn)
(456,if ((cpu->core.family & 0xF4)
(457,cpu->isa.atomic)
(458,ver)
(459,smart)
(460,num_pred)
(461,bcr.ver ? 1 : 0)
(462,arc_cpu_rel[0])
(463,cpu->bpu.ver = bpu.ver)
(464,cpu)
(465,cpu)
(466,bpu.bce)
(467,ARC_REG_FP_BCR)
(468,arc_cpu_nm[0])
(469,cpu->bpu.num_cache = 256 << bpu.bce)
(470,fpu_sp)
(471,family)
(472,id)
(473,ARC_REG_MUL_BCR)
(474,tbl->id != 0)
(475,tbl->str)
(476,0x54)
(477,256 << (bpu.ent - 1)
(478,cpu->mmu.ver)
(479,details)
(480,cpu->bpu)
(481,tbl)
(482,ent)
(483,1)
(484,0)
(485,cpu->extn)
(486,0x34)
(487,cpu)
(488,bcr)
(489,cpu)
(490,bpu)
(491,arc_cpu_nm)
(492,core)
(493,256)
(494,fpu_sp)
(495,cpu->core)
(496,dp)
(497,cpu->extn.rtt)
(498,tbl++)
(499,ARC_REG_MICRO_ARCH_BCR)
(500,0)
(501,read_aux_reg(ARC_REG_MIXMAX_BCR)
(502,norm)
(503,cpu)
(504,bcr)
(505,family)
(506,READ_BCR(ARC_REG_SMART_BCR, bcr)
(507,cpu->extn.rtt = bcr.ver ? 1 : 0)
(508,sp.ver)
(509,cpu->extn.rtc)
(510,ARC_REG_XY_MEM_BCR)
(511,break;)
(512,tbl)
(513,cpu->isa.atomic)
(514,cpu)
(515,cpu->extn)
(516,spdp.dp)
(517,cpu->bpu)
(518,cpu->extn.ap)
(519,cpu->extn_mpy)
(520,if (unlikely(cpu->core.family < 0x34 || cpu->mmu.ver < 3)
(521,cpu->extn.smart)
(522,spdp.sp ? 1 : 0)
(523,info)
(524,0)
(525,cpu->isa.be = IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)
(526,bpu)
(527,cpu)
(528,bpu)
(529,cpu->bpu)
(530,bcr = *(struct bcr_generic *)
(531,256)
(532,cpu->extn.smart)
(533,cpu)
(534,cpu->extn)
(535,cpu->isa)
(536,cpu)
(537,timer)
(538,bpu.ft)
(539,ft)
(540,swape)
(541,if (uarch.prod == 4)
(542,spdp.dp ? 1 : 0)
(543,0)
(544,cpu->core.family)
(545,t1)
(546,cpu)
(547,ver)
(548,)
(549,cpu->extn.timer1)
(550,READ_BCR(ARC_REG_MICRO_ARCH_BCR, uarch)
(551,cpu->extn)
(552,num_pred)
(553,cpu->isa)
(554,is_isa_arcompact()
(555,)
(556,cpu)
(557,barrel)
(558,str)
(559,tbl)
(560,ARC_REG_BPU_BCR)
(561,0)
(562,cpu->extn)
(563,cpu->extn)
(564,cpu->core)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^