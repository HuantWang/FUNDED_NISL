-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
70,71
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,74,76
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(24,18,0)
(23,29,0)
(16,8,0)
(8,32,0)
(22,12,0)
(9,5,0)
(30,3,0)
(14,6,0)
(16,5,0)
(11,31,0)
(18,2,0)
(4,23,0)
(21,2,0)
(19,16,0)
(7,17,0)
(12,2,0)
(30,15,0)
(27,31,0)
(2,17,0)
(8,16,0)
(26,6,0)
(23,31,0)
(1,3,0)
(18,17,0)
(28,12,0)
(3,30,0)
(2,8,0)
(5,16,0)
(31,6,0)
(32,8,0)
(23,2,0)
(20,6,0)
(8,2,0)
(11,27,1)
(31,11,1)
(18,24,1)
(25,10,1)
(23,2,1)
(9,19,1)
(8,16,1)
(12,2,1)
(10,13,1)
(2,8,1)
(10,18,1)
(12,22,1)
(24,30,1)
(24,12,1)
(3,1,1)
(28,2,1)
(5,9,1)
(1,12,1)
(4,10,1)
(13,31,1)
(22,28,1)
(8,32,1)
(23,4,1)
(25,23,1)
(23,31,1)
(18,2,1)
(21,13,1)
(30,3,1)
(19,21,1)
(16,5,1)
(23,31,2)
(3,12,2)
(16,5,2)
(30,3,2)
(18,2,2)
(4,10,2)
(23,2,2)
(2,13,2)
(8,32,2)
(16,13,2)
(22,13,2)
(5,13,2)
(28,13,2)
(30,12,2)
(1,12,2)
(21,13,2)
(12,2,2)
(19,13,2)
(23,10,2)
(24,13,2)
(12,13,2)
(8,13,2)
(18,13,2)
(8,16,2)
(9,13,2)
(2,8,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,1)
(2,data = (wchar_t *)
(3,-1)
(4,data)
(5,sizeof(wchar_t)
(6,)
(7,if (data == NULL)
(8,(wchar_t *)
(9,wchar_t)
(10,staticReturnsTrue()
(11,NULL)
(12,data == NULL)
(13,staticReturnsTrue()
(14,data)
(15,)
(16,calloc(100, sizeof(wchar_t)
(17,)
(18,printWLine(data)
(19,100)
(20,if(staticReturnsTrue()
(21,data)
(22,NULL)
(23,free(data)
(24,data)
(25,RET)
(26,if(staticReturnsTrue()
(27,data)
(28,data)
(29,)
(30,exit(-1)
(31,data = NULL)
(32,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^