-----label-----
0
-----code-----
void
Tk_PhotoBlank(
    Tk_PhotoHandle handle)	/* Handle for the image to be blanked. */
{
    PhotoMaster *masterPtr = (PhotoMaster *) handle;
    PhotoInstance *instancePtr;

    masterPtr->ditherX = masterPtr->ditherY = 0;
    masterPtr->flags = 0;

    /*
     * The image has valid data nowhere.
     */

    if (masterPtr->validRegion != NULL) {
	TkDestroyRegion(masterPtr->validRegion);
    }
    masterPtr->validRegion = TkCreateRegion();

    /*
     * Clear out the 32-bit pixel storage array. Clear out the dithering error
     * arrays for each instance.
     */

    memset(masterPtr->pix32, 0,
	    (size_t) (masterPtr->width * masterPtr->height * 4));
    for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;
	    instancePtr = instancePtr->nextPtr) {
	if (instancePtr->error) {
	    memset(instancePtr->error, 0,
		    (size_t) (masterPtr->width * masterPtr->height
		    * 3 * sizeof(schar)));
	}
    }

    /*
     * Tell the core image code that this image has changed.
     */

    Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,
	    masterPtr->height, masterPtr->width, masterPtr->height);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
46,47
47,48
47,49
48,49
48,50
49,50
53,54
53,55
54,55
54,56
55,56
55,57
56,57
59,60
61,62
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
71,72
71,73
72,73
72,74
73,74
76,77
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
88,89
88,90
89,90
90,91
92,93
92,94
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
120,121
120,122
121,122
124,125
125,126
125,127
126,127
126,128
127,128
130,131
131,132
132,133
132,134
132,135
132,136
133,134
135,136
135,137
136,137
140,141
140,142
141,142
142,143
144,145
144,146
145,146
145,147
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
156,157
157,158
157,159
158,159
161,162
162,163
162,164
162,165
162,166
162,167
162,168
162,169
162,170
163,164
165,166
165,167
166,167
171,172
171,173
172,173
175,176
175,177
176,177
179,180
179,181
180,181
183,184
183,185
184,185
-----nextToken-----
2,4,7,9,14,16,17,22,24,26,30,32,33,38,39,43,44,45,50,51,52,57,58,60,65,68,69,74,75,78,82,85,86,87,91,96,97,100,101,102,107,110,111,114,116,119,122,123,128,129,134,137,138,139,143,149,150,153,154,155,159,160,164,167,168,169,170,173,174,177,178,181,182,185,186
-----computeFrom-----
35,36
35,37
40,41
40,42
47,48
47,49
54,55
54,56
71,72
71,73
92,93
92,94
93,94
93,95
105,106
105,107
112,113
112,114
117,118
117,119
144,145
144,146
145,146
145,147
146,147
146,148
-----guardedBy-----
57,68
58,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
voidTk_PhotoBlank(    Tk_PhotoHandle handle)	/* Handle for the image to be blanked. */{    PhotoMaster *masterPtr = (PhotoMaster *) handle;    PhotoInstance *instancePtr;    masterPtr->ditherX = masterPtr->ditherY = 0;    masterPtr->flags = 0;    /*     * The image has valid data nowhere.     */    if (masterPtr->validRegion != NULL) {	TkDestroyRegion(masterPtr->validRegion);    }    masterPtr->validRegion = TkCreateRegion();    /*     * Clear out the 32-bit pixel storage array. Clear out the dithering error     * arrays for each instance.     */    memset(masterPtr->pix32, 0,	    (size_t) (masterPtr->width * masterPtr->height * 4));    for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;	    instancePtr = instancePtr->nextPtr) {	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }    /*     * Tell the core image code that this image has changed.     */    Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height);}
void
Tk_PhotoBlank(    Tk_PhotoHandle handle)
Tk_PhotoBlank
Tk_PhotoHandle handle
Tk_PhotoHandle
Tk_PhotoHandle
handle
handle
{    PhotoMaster *masterPtr = (PhotoMaster *) handle;    PhotoInstance *instancePtr;    masterPtr->ditherX = masterPtr->ditherY = 0;    masterPtr->flags = 0;    /*     * The image has valid data nowhere.     */    if (masterPtr->validRegion != NULL) {	TkDestroyRegion(masterPtr->validRegion);    }    masterPtr->validRegion = TkCreateRegion();    /*     * Clear out the 32-bit pixel storage array. Clear out the dithering error     * arrays for each instance.     */    memset(masterPtr->pix32, 0,	    (size_t) (masterPtr->width * masterPtr->height * 4));    for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;	    instancePtr = instancePtr->nextPtr) {	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }    /*     * Tell the core image code that this image has changed.     */    Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height);}
PhotoMaster *masterPtr = (PhotoMaster *) handle;
PhotoMaster *masterPtr = (PhotoMaster *) handle;
PhotoMaster
PhotoMaster
*masterPtr = (PhotoMaster *) handle
*
masterPtr
= (PhotoMaster *) handle
(PhotoMaster *) handle
PhotoMaster *
PhotoMaster
PhotoMaster
*
*
handle
handle
PhotoInstance *instancePtr;
PhotoInstance *instancePtr;
PhotoInstance
PhotoInstance
*instancePtr
*
instancePtr
masterPtr->ditherX = masterPtr->ditherY = 0;
masterPtr->ditherX = masterPtr->ditherY = 0
masterPtr->ditherX
masterPtr
masterPtr
ditherX
masterPtr->ditherY = 0
masterPtr->ditherY
masterPtr
masterPtr
ditherY
0
masterPtr->flags = 0;
masterPtr->flags = 0
masterPtr->flags
masterPtr
masterPtr
flags
0
if (masterPtr->validRegion != NULL) {	TkDestroyRegion(masterPtr->validRegion);    }
masterPtr->validRegion != NULL
masterPtr->validRegion
masterPtr
masterPtr
validRegion
NULL
NULL
{	TkDestroyRegion(masterPtr->validRegion);    }
TkDestroyRegion(masterPtr->validRegion);
TkDestroyRegion(masterPtr->validRegion)
TkDestroyRegion
TkDestroyRegion
masterPtr->validRegion
masterPtr
masterPtr
validRegion
masterPtr->validRegion = TkCreateRegion();
masterPtr->validRegion = TkCreateRegion()
masterPtr->validRegion
masterPtr
masterPtr
validRegion
TkCreateRegion()
TkCreateRegion
TkCreateRegion
memset(masterPtr->pix32, 0,	    (size_t) (masterPtr->width * masterPtr->height * 4));
memset(masterPtr->pix32, 0,	    (size_t) (masterPtr->width * masterPtr->height * 4))
memset
memset
masterPtr->pix32
masterPtr
masterPtr
pix32
0
(size_t) (masterPtr->width * masterPtr->height * 4)
(size_t)
size_t
size_t
masterPtr->width * masterPtr->height * 4
masterPtr->width * masterPtr->height
masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
4
for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;	    instancePtr = instancePtr->nextPtr) {	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }
instancePtr = masterPtr->instancePtr;
instancePtr = masterPtr->instancePtr
instancePtr
instancePtr
masterPtr->instancePtr
masterPtr
masterPtr
instancePtr
instancePtr != NULL
instancePtr
instancePtr
NULL
NULL
instancePtr = instancePtr->nextPtr
instancePtr
instancePtr
instancePtr->nextPtr
instancePtr
instancePtr
nextPtr
{	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }
if (instancePtr->error) {	    memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}
instancePtr->error
instancePtr
instancePtr
error
{	    memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}
memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));
memset(instancePtr->error, 0,		    (size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)))
memset
memset
instancePtr->error
instancePtr
instancePtr
error
0
(size_t) (masterPtr->width * masterPtr->height		    * 3 * sizeof(schar))
(size_t)
size_t
size_t
masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)
masterPtr->width * masterPtr->height		    * 3
masterPtr->width * masterPtr->height
masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
3
sizeof(schar)
schar
schar
schar

Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height);
Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height)
Tk_ImageChanged
Tk_ImageChanged
masterPtr->tkMaster
masterPtr
masterPtr
tkMaster
0
0
masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
-----joern-----
(53,15,0)
(34,39,0)
(37,39,0)
(96,71,0)
(38,40,0)
(33,9,0)
(85,76,0)
(36,40,0)
(104,7,0)
(59,40,0)
(62,40,0)
(36,48,0)
(88,51,0)
(55,24,0)
(6,53,0)
(23,92,0)
(12,53,0)
(4,51,0)
(65,69,0)
(76,33,0)
(35,62,0)
(110,45,0)
(86,40,0)
(19,66,0)
(88,40,0)
(103,93,0)
(31,39,0)
(15,78,0)
(2,47,0)
(2,52,0)
(69,15,0)
(100,43,0)
(32,41,0)
(57,110,0)
(30,15,0)
(109,30,0)
(76,85,0)
(49,38,0)
(14,30,0)
(45,110,0)
(48,39,0)
(32,108,0)
(112,29,0)
(74,100,0)
(15,53,0)
(59,52,0)
(67,59,0)
(13,38,0)
(86,71,0)
(93,39,0)
(91,86,0)
(106,16,0)
(99,92,0)
(47,2,0)
(87,106,0)
(82,88,0)
(38,93,0)
(41,32,0)
(44,48,0)
(11,19,0)
(68,7,0)
(28,78,0)
(26,36,0)
(7,68,0)
(51,88,0)
(56,57,0)
(78,15,0)
(0,3,0)
(16,66,0)
(93,38,0)
(15,17,0)
(76,97,0)
(70,72,0)
(54,101,0)
(66,16,0)
(101,92,0)
(73,105,0)
(61,101,0)
(57,92,0)
(83,19,0)
(48,44,0)
(78,40,0)
(52,2,0)
(8,39,0)
(98,62,0)
(60,86,0)
(15,39,0)
(32,40,0)
(68,66,0)
(3,43,0)
(80,88,0)
(62,70,0)
(16,33,0)
(24,3,0)
(85,110,0)
(27,106,0)
(71,39,0)
(58,40,0)
(40,39,0)
(85,92,0)
(92,23,0)
(77,85,0)
(93,2,0)
(111,15,0)
(2,93,0)
(50,23,0)
(30,40,0)
(52,59,0)
(9,33,0)
(1,69,0)
(58,29,0)
(33,76,0)
(10,45,0)
(79,85,0)
(45,92,0)
(106,40,0)
(24,40,0)
(18,68,0)
(102,58,0)
(22,17,0)
(15,30,0)
(16,106,0)
(43,39,0)
(21,40,0)
(42,24,0)
(63,76,0)
(15,69,0)
(66,19,0)
(107,15,0)
(90,17,0)
(25,58,0)
(100,40,0)
(95,57,0)
(17,40,0)
(101,110,0)
(94,78,0)
(52,29,0)
(23,40,0)
(46,36,0)
(64,110,0)
(20,59,0)
(75,100,0)
(40,32,0)
(29,58,0)
(17,15,0)
(81,32,0)
(29,52,0)
(33,16,0)
(66,68,0)
(53,40,0)
(84,23,0)
(70,62,0)
(43,3,0)
(19,40,0)
(69,40,0)
(5,45,0)
(16,66,1)
(86,40,1)
(53,40,1)
(2,47,1)
(29,112,1)
(32,81,1)
(28,94,1)
(45,5,1)
(71,96,1)
(59,20,1)
(45,92,1)
(19,11,1)
(15,30,1)
(87,63,1)
(4,88,1)
(40,32,1)
(85,92,1)
(10,64,1)
(61,54,1)
(50,99,1)
(26,46,1)
(66,19,1)
(43,3,1)
(67,103,1)
(0,24,1)
(62,40,1)
(30,40,1)
(36,26,1)
(53,12,1)
(64,101,1)
(56,92,1)
(78,40,1)
(32,108,1)
(51,88,1)
(94,69,1)
(38,40,1)
(1,65,1)
(23,40,1)
(65,111,1)
(2,52,1)
(102,59,1)
(5,10,1)
(57,95,1)
(88,80,1)
(80,82,1)
(93,38,1)
(56,110,1)
(7,104,1)
(93,2,1)
(101,61,1)
(91,43,1)
(84,50,1)
(106,40,1)
(57,110,1)
(96,86,1)
(103,38,1)
(33,16,1)
(23,84,1)
(57,92,1)
(27,87,1)
(59,40,1)
(82,71,1)
(58,40,1)
(48,44,1)
(15,17,1)
(17,90,1)
(75,74,1)
(88,40,1)
(86,60,1)
(52,59,1)
(99,93,1)
(3,0,1)
(76,85,1)
(6,17,1)
(58,25,1)
(100,40,1)
(107,30,1)
(46,51,1)
(13,48,1)
(85,77,1)
(79,101,1)
(22,78,1)
(85,110,1)
(38,49,1)
(74,40,1)
(63,85,1)
(77,79,1)
(15,53,1)
(32,41,1)
(104,18,1)
(111,107,1)
(51,4,1)
(92,23,1)
(46,70,1)
(36,40,1)
(64,76,1)
(70,62,1)
(15,69,1)
(76,33,1)
(45,110,1)
(52,29,1)
(29,58,1)
(18,19,1)
(17,40,1)
(12,6,1)
(62,98,1)
(30,14,1)
(54,57,1)
(44,36,1)
(89,15,1)
(15,78,1)
(106,27,1)
(110,45,1)
(42,55,1)
(20,67,1)
(24,42,1)
(55,100,1)
(49,13,1)
(109,57,1)
(60,91,1)
(68,7,1)
(81,21,1)
(112,58,1)
(24,40,1)
(11,83,1)
(83,106,1)
(100,75,1)
(101,110,1)
(33,9,1)
(66,68,1)
(78,28,1)
(90,22,1)
(35,51,1)
(69,40,1)
(19,40,1)
(25,102,1)
(98,35,1)
(101,92,1)
(95,56,1)
(14,109,1)
(69,1,1)
(16,106,1)
(43,3,2)
(2,52,2)
(17,40,2)
(57,57,2)
(85,101,2)
(68,101,2)
(51,88,2)
(45,110,2)
(33,9,2)
(45,92,2)
(33,101,2)
(32,108,2)
(62,40,2)
(101,57,2)
(27,101,2)
(88,40,2)
(30,40,2)
(76,85,2)
(15,78,2)
(104,101,2)
(54,57,2)
(83,101,2)
(106,40,2)
(16,106,2)
(53,40,2)
(66,68,2)
(56,57,2)
(48,44,2)
(93,38,2)
(32,41,2)
(23,40,2)
(57,92,2)
(15,17,2)
(66,101,2)
(15,53,2)
(33,16,2)
(77,101,2)
(87,101,2)
(62,51,2)
(59,40,2)
(66,19,2)
(86,40,2)
(78,40,2)
(98,51,2)
(18,101,2)
(64,57,2)
(38,40,2)
(15,69,2)
(110,45,2)
(68,7,2)
(70,62,2)
(10,57,2)
(79,101,2)
(61,57,2)
(70,51,2)
(63,101,2)
(52,29,2)
(16,101,2)
(15,30,2)
(85,92,2)
(76,101,2)
(76,33,2)
(52,59,2)
(16,66,2)
(69,40,2)
(93,2,2)
(45,57,2)
(95,57,2)
(29,58,2)
(57,110,2)
(35,51,2)
(101,110,2)
(58,40,2)
(106,101,2)
(110,57,2)
(7,101,2)
(85,110,2)
(24,40,2)
(92,23,2)
(40,32,2)
(5,57,2)
(100,40,2)
(19,101,2)
(2,47,2)
(19,40,2)
(36,40,2)
(11,101,2)
(101,92,2)
-----------------------------------
(0,0)
(1,width)
(2,(size_t)
(3,masterPtr->ditherY = 0)
(4,NULL)
(5,nextPtr)
(6,masterPtr)
(7,sizeof(schar)
(8,masterPtr)
(9,size_t)
(10,instancePtr)
(11,height)
(12,height)
(13,masterPtr)
(14,tkMaster)
(15,Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,\n\\n\\t    masterPtr->height, masterPtr->width, masterPtr->height)
(16,masterPtr->width * masterPtr->height\n\\n\\t\\t    * 3 * sizeof(schar)
(17,masterPtr->width)
(18,3)
(19,masterPtr->height)
(20,width)
(21,masterPtr)
(22,masterPtr)
(23,masterPtr->instancePtr)
(24,masterPtr->ditherY)
(25,height)
(26,validRegion)
(27,width)
(28,height)
(29,masterPtr->height * 4)
(30,masterPtr->tkMaster)
(31,if (masterPtr->validRegion != NULL)
(32,(PhotoMaster *)
(33,(size_t)
(34,for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;\n\\n\\t    instancePtr = instancePtr->nextPtr)
(35,masterPtr)
(36,masterPtr->validRegion)
(37,instancePtr)
(38,masterPtr->pix32)
(39,)
(40,*masterPtr = (PhotoMaster *)
(41,PhotoMaster *)
(42,ditherY)
(43,masterPtr->ditherX = masterPtr->ditherY = 0)
(44,TkCreateRegion()
(45,instancePtr->nextPtr)
(46,masterPtr)
(47,size_t)
(48,masterPtr->validRegion = TkCreateRegion()
(49,pix32)
(50,masterPtr)
(51,masterPtr->validRegion != NULL)
(52,masterPtr->width * masterPtr->height * 4)
(53,masterPtr->height)
(54,instancePtr)
(55,masterPtr)
(56,instancePtr)
(57,instancePtr != NULL)
(58,masterPtr->height)
(59,masterPtr->width)
(60,flags)
(61,error)
(62,masterPtr->validRegion)
(63,0)
(64,instancePtr)
(65,masterPtr)
(66,masterPtr->height\n\\n\\t\\t    * 3 * sizeof(schar)
(67,masterPtr)
(68,3 * sizeof(schar)
(69,masterPtr->width)
(70,TkDestroyRegion(masterPtr->validRegion)
(71,masterPtr->flags = 0)
(72,)
(73,if (instancePtr->error)
(74,masterPtr)
(75,ditherX)
(76,memset(instancePtr->error, 0,\n\\n\\t\\t    (size_t)
(77,error)
(78,masterPtr->height)
(79,instancePtr)
(80,validRegion)
(81,handle)
(82,masterPtr)
(83,masterPtr)
(84,instancePtr)
(85,instancePtr->error)
(86,masterPtr->flags)
(87,masterPtr)
(88,masterPtr->validRegion)
(89,RET)
(90,width)
(91,masterPtr)
(92,instancePtr = masterPtr->instancePtr)
(93,memset(masterPtr->pix32, 0,\n\\n\\t    (size_t)
(94,masterPtr)
(95,NULL)
(96,0)
(97,)
(98,validRegion)
(99,instancePtr)
(100,masterPtr->ditherX)
(101,instancePtr->error)
(102,masterPtr)
(103,0)
(104,schar)
(105,)
(106,masterPtr->width)
(107,0)
(108,Tk_PhotoHandle handle)
(109,masterPtr)
(110,instancePtr = instancePtr->nextPtr)
(111,0)
(112,4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^