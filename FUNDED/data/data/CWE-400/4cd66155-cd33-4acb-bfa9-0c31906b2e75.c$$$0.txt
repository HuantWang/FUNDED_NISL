-----label-----
0
-----code-----
static void goodB2G1()
{
    int64_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
78,79
79,80
79,81
80,81
83,84
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,61,62,63,67,70,71,75,76,81,82,87,89
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int64_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int64_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(22,20,0)
(6,19,0)
(7,18,0)
(3,23,0)
(36,18,0)
(32,19,0)
(12,32,0)
(16,36,0)
(0,34,0)
(36,32,0)
(31,26,0)
(35,1,0)
(36,16,0)
(27,13,0)
(40,18,0)
(18,7,0)
(37,17,0)
(26,31,0)
(29,5,0)
(38,34,0)
(25,32,0)
(4,26,0)
(13,33,0)
(15,20,0)
(11,17,0)
(8,23,0)
(20,22,0)
(26,32,0)
(30,19,0)
(42,29,0)
(21,34,0)
(10,26,0)
(32,36,0)
(41,12,0)
(22,9,0)
(28,7,0)
(23,34,0)
(39,1,0)
(18,36,0)
(29,32,0)
(31,19,0)
(2,12,0)
(29,23,0)
(29,32,1)
(37,23,1)
(12,2,1)
(14,13,1)
(42,1,1)
(11,37,1)
(28,40,1)
(4,10,1)
(39,31,1)
(32,36,1)
(17,11,1)
(23,8,1)
(26,32,1)
(26,4,1)
(35,39,1)
(41,32,1)
(10,30,1)
(1,35,1)
(22,20,1)
(15,12,1)
(29,42,1)
(39,17,1)
(20,15,1)
(27,1,1)
(36,16,1)
(2,41,1)
(29,23,1)
(13,27,1)
(30,12,1)
(30,22,1)
(40,25,1)
(14,29,1)
(36,18,1)
(8,3,1)
(18,7,1)
(7,28,1)
(12,32,1)
(31,26,1)
(25,17,1)
(26,32,2)
(22,20,2)
(12,17,2)
(42,1,2)
(2,17,2)
(36,17,2)
(22,12,2)
(18,17,2)
(10,17,2)
(13,1,2)
(30,17,2)
(20,12,2)
(31,17,2)
(25,17,2)
(15,12,2)
(41,17,2)
(18,7,2)
(36,18,2)
(29,32,2)
(36,16,2)
(29,1,2)
(32,17,2)
(32,36,2)
(28,17,2)
(4,17,2)
(31,26,2)
(29,23,2)
(26,17,2)
(12,32,2)
(7,17,2)
(27,1,2)
(40,17,2)
-----------------------------------
(0,data)
(1,GLOBAL_CONST_FIVE!=5)
(2,NULL)
(3,data)
(4,0)
(5,)
(6,if (data == NULL)
(7,sizeof(int64_t)
(8,NULL)
(9,)
(10,data)
(11,5)
(12,data == NULL)
(13,printLine("Benign, fixed string")
(14,RET)
(15,1)
(16,int64_t *)
(17,GLOBAL_CONST_FIVE==5)
(18,calloc(100, sizeof(int64_t)
(19,)
(20,-1)
(21,if(GLOBAL_CONST_FIVE==5)
(22,exit(-1)
(23,data = NULL)
(24, sizeof(int64_t)
(25,data)
(26,data[0])
(27,"Benign, fixed string")
(28,int64_t)
(29,free(data)
(30,L)
(31,printLongLongLine(data[0])
(32,data = (int64_t *)
(33,)
(34,)
(35,5)
(36,(int64_t *)
(37,GLOBAL_CONST_FIVE)
(38,if(GLOBAL_CONST_FIVE!=5)
(39,GLOBAL_CONST_FIVE)
(40,100)
(41,data)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^