-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
47,51
47,52
47,53
47,54
48,49
49,50
49,51
50,51
52,53
52,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
60,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
78,81
79,80
81,82
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
121,122
123,124
123,125
123,126
123,127
123,128
124,125
126,127
128,129
129,130
129,131
132,133
132,134
133,134
135,136
137,138
139,140
140,141
141,142
141,143
142,143
145,146
145,147
146,147
148,149
149,150
150,151
150,152
151,152
153,154
-----nextToken-----
2,4,8,10,14,16,20,22,26,27,32,33,35,39,41,45,46,51,53,55,59,61,62,65,68,70,71,73,77,80,82,83,87,89,94,95,100,101,104,108,109,111,114,120,122,125,127,130,131,134,136,138,143,144,147,152,154
-----computeFrom-----
18,19
18,20
24,25
24,26
29,30
29,31
75,76
75,77
85,86
85,87
98,99
98,100
102,103
102,104
117,118
117,119
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int count;    CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType myUnion;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B()
goodG2B
{    int count;    CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType myUnion;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType myUnion;
CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType myUnion;
CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType
CWE400_Resource_Exhaustion__connect_socket_fwrite_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(41,74,0)
(36,35,0)
(54,43,0)
(76,22,0)
(65,77,0)
(17,29,0)
(58,48,0)
(18,10,0)
(64,65,0)
(21,67,0)
(25,30,0)
(22,76,0)
(6,0,0)
(67,77,0)
(46,58,0)
(60,45,0)
(7,38,0)
(12,34,0)
(16,65,0)
(74,2,0)
(28,38,0)
(29,43,0)
(58,71,0)
(39,65,0)
(71,48,0)
(44,3,0)
(29,17,0)
(61,52,0)
(62,42,0)
(74,22,0)
(55,48,0)
(16,35,0)
(42,16,0)
(26,18,0)
(72,0,0)
(40,8,0)
(19,65,0)
(14,48,0)
(77,48,0)
(63,51,0)
(47,48,0)
(75,28,0)
(18,16,0)
(51,65,0)
(74,52,0)
(5,74,0)
(35,45,0)
(33,29,0)
(3,27,0)
(74,16,0)
(53,16,0)
(50,47,0)
(49,45,0)
(4,65,0)
(37,38,0)
(0,67,0)
(43,38,0)
(11,2,0)
(22,74,0)
(70,71,0)
(67,0,0)
(8,58,0)
(2,74,0)
(68,42,0)
(9,31,0)
(13,35,0)
(43,29,0)
(30,65,0)
(45,65,0)
(24,73,0)
(32,30,0)
(35,16,0)
(1,8,0)
(78,65,0)
(20,51,0)
(47,31,0)
(56,76,0)
(29,67,0)
(31,47,0)
(52,74,0)
(66,24,0)
(15,71,0)
(23,65,0)
(57,77,0)
(72,6,1)
(2,11,1)
(61,2,1)
(46,8,1)
(7,37,1)
(75,22,1)
(60,30,1)
(13,36,1)
(18,26,1)
(42,16,1)
(21,58,1)
(43,38,1)
(70,15,1)
(67,0,1)
(28,38,1)
(59,18,1)
(75,24,1)
(41,76,1)
(36,53,1)
(63,67,1)
(37,42,1)
(58,46,1)
(29,67,1)
(31,9,1)
(8,1,1)
(37,3,1)
(33,54,1)
(43,29,1)
(49,60,1)
(74,5,1)
(9,50,1)
(62,68,1)
(18,16,1)
(69,43,1)
(54,38,1)
(26,69,1)
(6,21,1)
(54,28,1)
(44,42,1)
(32,25,1)
(51,20,1)
(1,40,1)
(25,51,1)
(74,16,1)
(42,62,1)
(20,63,1)
(58,71,1)
(53,45,1)
(35,45,1)
(38,7,1)
(5,52,1)
(45,49,1)
(16,35,1)
(29,33,1)
(68,16,1)
(52,61,1)
(74,2,1)
(3,44,1)
(11,41,1)
(74,52,1)
(56,43,1)
(35,13,1)
(29,17,1)
(76,56,1)
(59,69,1)
(66,22,1)
(24,66,1)
(40,71,1)
(47,31,1)
(22,76,1)
(30,32,1)
(28,75,1)
(22,74,1)
(0,72,1)
(15,47,1)
(71,70,1)
(11,43,2)
(52,43,2)
(35,45,2)
(42,16,2)
(74,43,2)
(29,67,2)
(2,43,2)
(44,42,2)
(33,43,2)
(58,71,2)
(74,16,2)
(16,35,2)
(43,43,2)
(5,43,2)
(76,43,2)
(74,52,2)
(29,17,2)
(75,43,2)
(29,43,2)
(74,2,2)
(56,43,2)
(43,38,2)
(18,69,2)
(24,22,2)
(41,43,2)
(43,29,2)
(18,16,2)
(26,69,2)
(22,74,2)
(28,38,2)
(61,43,2)
(3,42,2)
(67,0,2)
(22,43,2)
(47,31,2)
(28,43,2)
(54,43,2)
(66,22,2)
(22,76,2)
-----------------------------------
(0,myUnion.unionSecond)
(1,unionFirst)
(2,sizeof(char)
(3,exit(1)
(4,for (i = 0; i < (size_t)
(5,pFile)
(6,myUnion)
(7,0)
(8,myUnion.unionFirst)
(9,1)
(10,)
(11,char)
(12,if (strlen(SENTENCE)
(13,"w+")
(14,count)
(15,count)
(16,pFile = fopen(filename, "w+")
(17,size_t)
(18,fclose(pFile)
(19,pFile)
(20,0)
(21,count)
(22,strlen(SENTENCE)
(23,i)
(24,exit(1)
(25,pFile)
(26,pFile)
(27,)
(28,i++)
(29,(size_t)
(30,*pFile = NULL)
(31,-1)
(32,NULL)
(33,count)
(34,)
(35,fopen(filename, "w+")
(36,filename)
(37,i)
(38,i = 0)
(39,filename)
(40,myUnion)
(41,SENTENCE)
(42,pFile == NULL)
(43,i < (size_t)
(44,1)
(45,*filename = "output_bad.txt")
(46,count)
(47,count = -1)
(48,)
(49,"output_bad.txt")
(50,count)
(51,i = 0)
(52,strlen(SENTENCE)
(53,pFile)
(54,i)
(55,myUnion)
(56,SENTENCE)
(57,count)
(58,myUnion.unionFirst = count)
(59,RET)
(60,filename)
(61,SENTENCE)
(62,NULL)
(63,i)
(64,if (pFile)
(65,)
(66,1)
(67,count = myUnion.unionSecond)
(68,pFile)
(69,pFile)
(70,20)
(71,count = 20)
(72,unionSecond)
(73,)
(74,fwrite(SENTENCE, sizeof(char)
(75,i)
(76,strlen(SENTENCE)
(77,)
(78,if (pFile == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^