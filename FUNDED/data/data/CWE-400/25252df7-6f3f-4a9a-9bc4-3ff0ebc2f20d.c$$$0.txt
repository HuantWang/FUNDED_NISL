-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct)
{
    size_t data = myStruct.structFirst;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,14,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct){    size_t data = myStruct.structFirst;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType
myStruct
myStruct
{    size_t data = myStruct.structFirst;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = myStruct.structFirst;
size_t data = myStruct.structFirst;
size_t
size_t
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(20,36,0)
(23,16,0)
(19,2,0)
(31,26,0)
(17,27,0)
(39,18,0)
(16,14,0)
(19,37,0)
(3,22,0)
(28,15,0)
(27,23,0)
(8,16,0)
(23,27,0)
(36,18,0)
(18,39,0)
(13,37,0)
(43,23,0)
(3,18,0)
(38,6,0)
(26,18,0)
(5,36,0)
(42,19,0)
(12,3,0)
(2,19,0)
(29,3,0)
(21,11,0)
(40,18,0)
(30,28,0)
(26,22,0)
(6,22,0)
(37,19,0)
(39,2,0)
(34,14,0)
(18,22,0)
(7,22,0)
(33,30,0)
(28,30,0)
(19,16,0)
(32,35,0)
(2,39,0)
(39,24,0)
(41,10,0)
(24,39,0)
(35,16,0)
(1,35,0)
(9,10,0)
(35,4,0)
(10,14,0)
(0,21,0)
(6,18,0)
(16,35,0)
(26,31,1)
(25,26,1)
(23,16,1)
(27,17,1)
(13,42,1)
(23,27,1)
(29,28,1)
(21,0,1)
(0,23,1)
(5,20,1)
(36,18,1)
(1,8,1)
(26,18,1)
(2,19,1)
(6,18,1)
(39,2,1)
(35,32,1)
(40,23,1)
(20,18,1)
(6,38,1)
(16,35,1)
(35,4,1)
(17,43,1)
(36,5,1)
(37,13,1)
(3,12,1)
(19,16,1)
(38,3,1)
(19,37,1)
(3,18,1)
(29,36,1)
(30,33,1)
(39,24,1)
(33,36,1)
(31,6,1)
(18,39,1)
(43,16,1)
(28,30,1)
(32,1,1)
(25,21,1)
(42,40,1)
(12,29,1)
(6,23,2)
(28,36,2)
(36,23,2)
(6,18,2)
(39,23,2)
(16,35,2)
(19,16,2)
(13,23,2)
(28,30,2)
(19,37,2)
(35,4,2)
(3,23,2)
(36,18,2)
(18,23,2)
(29,23,2)
(19,23,2)
(39,24,2)
(3,18,2)
(37,23,2)
(2,19,2)
(5,23,2)
(18,39,2)
(23,16,2)
(21,23,2)
(40,23,2)
(42,23,2)
(30,36,2)
(23,27,2)
(38,23,2)
(26,18,2)
(31,23,2)
(0,23,2)
(2,23,2)
(33,36,2)
(12,23,2)
(20,23,2)
(39,2,2)
(26,23,2)
-----------------------------------
(0,"Input is less than the length of the source string")
(1,myStruct)
(2,malloc(data*sizeof(char)
(3,strcpy(myString, HELLO_STRING)
(4,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_structType myStruct)
(5,NULL)
(6,printLine(myString)
(7,if (myString == NULL)
(8,data)
(9,if (data > strlen(HELLO_STRING)
(10,)
(11,)
(12,HELLO_STRING)
(13,char)
(14,)
(15,)
(16,data = myStruct.structFirst)
(17,HELLO_STRING)
(18,myString = (char *)
(19,data*sizeof(char)
(20,myString)
(21,printLine("Input is less than the length of the source string")
(22,)
(23,data > strlen(HELLO_STRING)
(24,char *)
(25,RET)
(26,free(myString)
(27,strlen(HELLO_STRING)
(28,exit(-1)
(29,myString)
(30,-1)
(31,myString)
(32,structFirst)
(33,1)
(34,data)
(35,myStruct.structFirst)
(36,myString == NULL)
(37,sizeof(char)
(38,myString)
(39,(char *)
(40,myString)
(41,myString)
(42,data)
(43,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^