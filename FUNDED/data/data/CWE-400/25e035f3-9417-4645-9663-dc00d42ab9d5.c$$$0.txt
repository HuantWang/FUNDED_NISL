-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
57,58
57,59
57,60
57,61
57,62
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
70,71
70,72
71,72
73,74
74,75
74,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
91,94
92,93
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,47,50,52,55,56,61,64,66,69,72,75,76,80,82,87,89,93,95,97,101,103,107,109,114,115
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
45,46
45,47
53,54
53,55
59,60
59,61
70,71
70,72
78,79
78,80
-----guardedBy-----
52,97
55,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(31,10,0)
(0,37,0)
(7,17,0)
(46,21,0)
(41,12,0)
(26,12,0)
(49,6,0)
(14,50,0)
(42,46,0)
(35,52,0)
(54,12,0)
(1,38,0)
(39,43,0)
(46,23,0)
(12,21,0)
(15,33,0)
(29,41,0)
(9,23,0)
(33,18,0)
(33,54,0)
(43,17,0)
(12,41,0)
(8,21,0)
(12,18,0)
(13,33,0)
(30,38,0)
(4,21,0)
(17,7,0)
(48,37,0)
(54,33,0)
(23,46,0)
(34,27,0)
(28,0,0)
(5,6,0)
(21,53,0)
(57,36,0)
(6,45,0)
(7,19,0)
(56,48,0)
(46,18,0)
(3,11,0)
(21,8,0)
(2,46,0)
(44,50,0)
(2,7,0)
(55,11,0)
(25,31,0)
(24,37,0)
(48,17,0)
(32,17,0)
(27,57,0)
(40,52,0)
(47,0,0)
(7,2,0)
(51,18,0)
(52,17,0)
(33,21,0)
(16,18,0)
(20,50,0)
(46,2,0)
(0,17,0)
(17,37,0)
(43,37,0)
(19,7,0)
(12,54,0)
(18,50,0)
(57,27,0)
(47,52,1)
(42,32,1)
(17,7,1)
(29,26,1)
(21,8,1)
(54,33,1)
(33,13,1)
(30,1,1)
(47,57,1)
(55,38,1)
(0,28,1)
(33,21,1)
(0,17,1)
(26,11,1)
(8,4,1)
(46,21,1)
(57,27,1)
(25,54,1)
(16,51,1)
(35,17,1)
(34,52,1)
(46,18,1)
(11,3,1)
(23,9,1)
(32,54,1)
(43,17,1)
(55,21,1)
(4,38,1)
(15,12,1)
(22,48,1)
(2,46,1)
(3,55,1)
(39,0,1)
(22,11,1)
(52,40,1)
(38,30,1)
(33,18,1)
(22,31,1)
(1,18,1)
(12,21,1)
(9,42,1)
(27,34,1)
(46,23,1)
(41,29,1)
(31,25,1)
(43,39,1)
(48,17,1)
(54,12,1)
(28,47,1)
(56,43,1)
(7,19,1)
(40,35,1)
(52,17,1)
(13,15,1)
(48,56,1)
(12,41,1)
(12,18,1)
(7,2,1)
(18,16,1)
(8,38,2)
(27,52,2)
(7,54,2)
(7,2,2)
(2,54,2)
(31,54,2)
(41,11,2)
(46,54,2)
(56,54,2)
(46,18,2)
(12,41,2)
(33,12,2)
(12,18,2)
(32,54,2)
(40,54,2)
(57,52,2)
(25,54,2)
(52,17,2)
(35,54,2)
(26,11,2)
(2,46,2)
(46,21,2)
(12,21,2)
(34,52,2)
(0,17,2)
(9,54,2)
(13,12,2)
(52,54,2)
(17,54,2)
(4,38,2)
(12,11,2)
(57,27,2)
(23,54,2)
(48,54,2)
(29,11,2)
(7,19,2)
(43,54,2)
(43,17,2)
(47,54,2)
(54,12,2)
(46,23,2)
(39,54,2)
(28,54,2)
(17,7,2)
(0,54,2)
(21,8,2)
(33,21,2)
(54,33,2)
(15,12,2)
(48,17,2)
(21,38,2)
(33,18,2)
(54,11,2)
(42,54,2)
-----------------------------------
(0,wcscpy(myString, HELLO_STRING)
(1,STATIC_CONST_FIVE)
(2,malloc(data*sizeof(wchar_t)
(3,5)
(4,data)
(5,myString)
(6,)
(7,(wchar_t *)
(8,rand()
(9,wchar_t)
(10,)
(11,STATIC_CONST_FIVE==5)
(12,data > wcslen(HELLO_STRING)
(13,100)
(14,if(STATIC_CONST_FIVE==5)
(15,data)
(16,0)
(17,myString = (wchar_t *)
(18,data = 0)
(19,wchar_t *)
(20,if(STATIC_CONST_FIVE==5)
(21,data = rand()
(22,RET)
(23,sizeof(wchar_t)
(24,if (myString == NULL)
(25,"Input is less than the length of the source string or too large")
(26,data)
(27,-1)
(28,HELLO_STRING)
(29,HELLO_STRING)
(30,5)
(31,printLine("Input is less than the length of the source string or too large")
(32,myString)
(33,data < 100)
(34,1)
(35,myString)
(36,)
(37,)
(38,STATIC_CONST_FIVE==5)
(39,myString)
(40,NULL)
(41,wcslen(HELLO_STRING)
(42,data)
(43,printWLine(myString)
(44,data)
(45,)
(46,data*sizeof(wchar_t)
(47,myString)
(48,free(myString)
(49,if (data > wcslen(HELLO_STRING)
(50,)
(51,data)
(52,myString == NULL)
(53,)
(54,data > wcslen(HELLO_STRING)
(55,STATIC_CONST_FIVE)
(56,myString)
(57,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^