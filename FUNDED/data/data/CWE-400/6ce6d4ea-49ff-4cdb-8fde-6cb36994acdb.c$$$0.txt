-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_04_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,89
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_04_bad(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_04_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_04_bad
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(43,40,0)
(8,18,0)
(33,36,0)
(37,45,0)
(30,42,0)
(37,40,0)
(38,0,0)
(26,17,0)
(36,10,0)
(45,2,0)
(25,8,0)
(16,45,0)
(10,2,0)
(39,11,0)
(13,1,0)
(30,47,0)
(31,4,0)
(12,7,0)
(42,30,0)
(6,18,0)
(11,0,0)
(9,46,0)
(29,0,0)
(34,1,0)
(47,30,0)
(46,4,0)
(24,40,0)
(47,4,0)
(4,46,0)
(5,33,0)
(18,30,0)
(36,33,0)
(44,33,0)
(11,39,0)
(40,18,0)
(39,2,0)
(26,14,0)
(17,26,0)
(27,10,0)
(33,18,0)
(0,11,0)
(15,2,0)
(20,7,0)
(4,47,0)
(22,37,0)
(23,8,0)
(1,7,0)
(30,18,0)
(35,7,0)
(41,36,0)
(21,17,0)
(47,1,0)
(40,37,0)
(18,2,0)
(0,18,0)
(3,47,0)
(24,26,1)
(13,34,1)
(16,37,1)
(31,3,1)
(24,8,1)
(38,10,1)
(6,19,1)
(21,8,1)
(4,46,1)
(9,31,1)
(22,40,1)
(29,38,1)
(45,16,1)
(0,18,1)
(44,45,1)
(11,0,1)
(39,11,1)
(47,4,1)
(33,5,1)
(10,27,1)
(47,1,1)
(19,1,1)
(18,30,1)
(30,42,1)
(36,33,1)
(36,41,1)
(26,17,1)
(40,18,1)
(43,24,1)
(37,40,1)
(1,13,1)
(32,28,1)
(5,44,1)
(37,22,1)
(8,23,1)
(23,25,1)
(0,29,1)
(41,33,1)
(17,21,1)
(28,39,1)
(3,6,1)
(46,9,1)
(28,19,1)
(33,18,1)
(25,18,1)
(30,47,1)
(8,18,1)
(27,36,1)
(40,43,1)
(40,18,2)
(33,19,2)
(18,19,2)
(45,19,2)
(47,4,2)
(47,1,2)
(3,19,2)
(40,19,2)
(36,33,2)
(30,47,2)
(24,19,2)
(4,46,2)
(16,19,2)
(38,19,2)
(27,19,2)
(30,42,2)
(22,19,2)
(29,19,2)
(23,19,2)
(33,18,2)
(25,19,2)
(44,19,2)
(11,19,2)
(5,19,2)
(36,19,2)
(4,19,2)
(39,11,2)
(31,19,2)
(43,19,2)
(10,19,2)
(37,19,2)
(26,17,2)
(17,8,2)
(0,19,2)
(8,18,2)
(30,19,2)
(9,19,2)
(0,18,2)
(18,30,2)
(26,8,2)
(41,19,2)
(8,19,2)
(11,0,2)
(46,19,2)
(39,19,2)
(6,19,2)
(21,8,2)
(47,19,2)
(37,40,2)
-----------------------------------
(0,data[0])
(1,data = NULL)
(2,)
(3,data)
(4,100*sizeof(twoIntsStruct)
(5,0)
(6,data)
(7,)
(8,data == NULL)
(9,twoIntsStruct)
(10,data[0].intTwo = 0)
(11,&data[0])
(12,if(STATIC_CONST_TRUE)
(13,NULL)
(14,)
(15,if (data == NULL)
(16,0)
(17,-1)
(18,data = (twoIntsStruct *)
(19,STATIC_CONST_TRUE)
(20,if(STATIC_CONST_TRUE)
(21,1)
(22,intOne)
(23,NULL)
(24,data)
(25,data)
(26,exit(-1)
(27,0)
(28,STATIC_CONST_TRUE)
(29,0)
(30,(twoIntsStruct *)
(31,100)
(32,RET)
(33,data[0])
(34,data)
(35,data)
(36,data[0].intTwo)
(37,data[0].intOne)
(38,data)
(39,printStructLine(&data[0])
(40,data[0])
(41,intTwo)
(42,twoIntsStruct *)
(43,0)
(44,data)
(45,data[0].intOne = 0)
(46,sizeof(twoIntsStruct)
(47,realloc(data, 100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^