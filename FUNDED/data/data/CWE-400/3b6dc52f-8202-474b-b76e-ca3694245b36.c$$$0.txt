-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
30,31
30,32
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
40,41
40,42
41,42
41,43
42,43
42,44
43,44
46,47
46,48
47,48
50,51
51,52
51,53
51,54
51,55
52,53
53,54
53,55
54,55
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
65,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
-----nextToken-----
2,4,8,10,14,16,18,23,26,27,29,35,37,39,44,45,48,49,55,56,59,63,64,66,69,74,75,76
-----computeFrom-----
12,13
12,14
21,22
21,23
41,42
41,43
42,43
42,44
46,47
46,48
53,54
53,55
57,58
57,59
-----guardedBy-----
48,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    while(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }    while(1)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }        break;    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    while(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }    while(1)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
while(1)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }        break;    }
1
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }        break;    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
-----joern-----
(1,33,0)
(37,5,0)
(32,9,0)
(6,23,0)
(23,8,0)
(2,15,0)
(44,2,0)
(5,41,0)
(35,15,0)
(33,22,0)
(30,9,0)
(12,19,0)
(43,5,0)
(22,33,0)
(21,28,0)
(17,16,0)
(0,8,0)
(2,22,0)
(40,29,0)
(33,15,0)
(31,29,0)
(29,15,0)
(7,18,0)
(15,35,0)
(15,19,0)
(29,40,0)
(29,23,0)
(16,5,0)
(28,4,0)
(3,30,0)
(14,33,0)
(2,30,0)
(27,8,0)
(39,2,0)
(20,30,0)
(26,8,0)
(10,26,0)
(24,15,0)
(34,9,0)
(22,2,0)
(25,41,0)
(23,29,0)
(33,30,0)
(29,30,0)
(45,20,0)
(13,16,0)
(42,9,0)
(30,20,0)
(23,29,1)
(15,35,1)
(2,30,1)
(35,24,1)
(29,15,1)
(22,2,1)
(36,11,1)
(6,26,1)
(11,38,1)
(33,30,1)
(25,23,1)
(10,28,1)
(39,33,1)
(45,3,1)
(30,20,1)
(13,17,1)
(17,11,1)
(8,0,1)
(14,1,1)
(16,13,1)
(21,23,1)
(12,15,1)
(23,8,1)
(29,30,1)
(29,40,1)
(0,27,1)
(26,8,1)
(1,16,1)
(31,6,1)
(29,31,1)
(33,14,1)
(28,21,1)
(2,15,1)
(25,22,1)
(22,33,1)
(36,25,1)
(20,45,1)
(38,30,1)
(2,44,1)
(27,22,1)
(6,8,1)
(26,10,1)
(33,15,1)
(11,12,1)
(24,38,1)
(44,39,1)
(6,23,2)
(10,23,2)
(2,33,2)
(28,23,2)
(12,38,2)
(22,33,2)
(22,11,2)
(44,33,2)
(23,29,2)
(26,23,2)
(13,11,2)
(6,22,2)
(33,30,2)
(33,11,2)
(25,11,2)
(0,22,2)
(29,40,2)
(27,22,2)
(39,33,2)
(23,23,2)
(26,8,2)
(33,15,2)
(1,11,2)
(14,11,2)
(23,8,2)
(22,2,2)
(31,23,2)
(15,35,2)
(29,30,2)
(30,20,2)
(2,30,2)
(2,15,2)
(35,38,2)
(29,22,2)
(15,38,2)
(23,22,2)
(17,11,2)
(21,23,2)
(31,22,2)
(24,38,2)
(8,22,2)
(29,15,2)
(29,23,2)
(16,11,2)
-----------------------------------
(0,0)
(1,count)
(2,count <= 20)
(3,count)
(4,)
(5,)
(6,i)
(7,for (i = 0; i < (size_t)
(8,i = 0)
(9,)
(10,i)
(11,1)
(12,break;)
(13,0)
(14,0)
(15,count = RAND32()
(16,i = 0)
(17,i)
(18,)
(19,)
(20,-1)
(21,"Hello")
(22,count > 0 && count <= 20)
(23,i < (size_t)
(24,count)
(25,break;)
(26,i++)
(27,i)
(28,printLine("Hello")
(29,(size_t)
(30,count = -1)
(31,count)
(32,while(1)
(33,count > 0)
(34,while(1)
(35,RAND32()
(36,RET)
(37,i)
(38,1)
(39,count)
(40,size_t)
(41,)
(42,count)
(43,if (count > 0 && count <= 20)
(44,20)
(45,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^