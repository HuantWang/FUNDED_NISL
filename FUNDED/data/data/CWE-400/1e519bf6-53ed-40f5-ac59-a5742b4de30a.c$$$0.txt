-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
192,193
192,194
193,194
193,195
194,195
196,197
198,199
199,200
200,201
200,202
201,202
203,204
207,208
208,209
208,210
209,210
213,214
213,215
215,216
215,217
215,218
215,219
215,220
215,221
216,217
218,219
218,220
219,220
220,221
220,222
222,223
222,224
225,226
225,227
225,228
226,227
226,228
227,228
227,229
228,229
230,231
230,232
231,232
233,234
235,236
235,237
236,237
239,240
239,241
239,242
239,243
239,244
240,241
241,242
241,243
242,243
244,245
244,246
245,246
245,247
247,248
249,250
249,251
250,251
252,253
252,254
253,254
255,256
256,257
256,258
259,260
259,261
260,261
260,262
261,262
263,264
265,266
266,267
267,268
267,269
268,269
270,271
272,273
273,274
273,275
273,276
274,275
276,277
278,279
280,281
281,282
281,283
282,283
284,285
286,287
287,288
287,289
288,289
290,291
292,293
293,294
294,295
294,296
295,296
300,301
301,302
301,303
302,303
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,189,190,191,195,197,202,204,205,206,210,211,212,214,217,221,223,224,229,232,234,237,238,243,246,248,251,254,257,258,262,264,269,271,275,277,279,283,285,289,291,296,297,298,299,303,304,305
-----computeFrom-----
13,14
13,15
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
193,194
193,195
226,227
226,228
227,228
227,229
235,236
235,237
241,242
241,243
252,253
252,254
260,261
260,262
-----guardedBy-----
195,204
234,279
237,254
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(101,134,0)
(150,67,0)
(126,36,0)
(100,106,0)
(103,102,0)
(5,55,0)
(30,97,0)
(47,74,0)
(22,146,0)
(59,126,0)
(92,102,0)
(126,73,0)
(181,64,0)
(0,182,0)
(151,90,0)
(29,11,0)
(57,45,0)
(116,74,0)
(104,2,0)
(46,48,0)
(62,132,0)
(162,2,0)
(85,51,0)
(45,57,0)
(138,158,0)
(76,89,0)
(77,112,0)
(88,46,0)
(6,64,0)
(75,146,0)
(150,77,0)
(142,13,0)
(78,11,0)
(95,74,0)
(46,97,0)
(84,27,0)
(113,4,0)
(140,51,0)
(66,112,0)
(137,121,0)
(54,161,0)
(127,17,0)
(102,25,0)
(16,115,0)
(140,102,0)
(112,77,0)
(139,164,0)
(108,74,0)
(73,126,0)
(11,36,0)
(118,46,0)
(38,134,0)
(28,55,0)
(65,11,0)
(24,89,0)
(58,45,0)
(13,134,0)
(37,130,0)
(49,92,0)
(180,17,0)
(91,48,0)
(164,150,0)
(69,183,0)
(57,32,0)
(149,1,0)
(13,74,0)
(114,134,0)
(148,63,0)
(34,90,0)
(80,127,0)
(1,149,0)
(170,64,0)
(131,150,0)
(141,132,0)
(64,146,0)
(21,100,0)
(135,52,0)
(145,25,0)
(39,182,0)
(176,121,0)
(25,145,0)
(61,1,0)
(123,8,0)
(115,36,0)
(94,102,0)
(158,116,0)
(33,117,0)
(7,106,0)
(132,47,0)
(11,78,0)
(121,137,0)
(86,140,0)
(42,168,0)
(10,146,0)
(117,52,0)
(2,106,0)
(175,117,0)
(136,60,0)
(153,64,0)
(142,52,0)
(121,57,0)
(72,48,0)
(121,87,0)
(55,51,0)
(68,13,0)
(32,57,0)
(174,112,0)
(15,74,0)
(111,183,0)
(134,13,0)
(128,78,0)
(169,47,0)
(142,143,0)
(3,87,0)
(81,78,0)
(47,169,0)
(83,92,0)
(55,102,0)
(149,110,0)
(14,64,0)
(41,17,0)
(57,121,0)
(168,64,0)
(94,51,0)
(20,74,0)
(60,136,0)
(87,121,0)
(79,52,0)
(25,102,0)
(157,146,0)
(166,137,0)
(182,13,0)
(89,116,0)
(121,13,0)
(150,164,0)
(118,25,0)
(26,112,0)
(150,48,0)
(19,1,0)
(73,115,0)
(53,142,0)
(36,74,0)
(36,11,0)
(77,74,0)
(177,64,0)
(156,18,0)
(173,151,0)
(102,51,0)
(117,13,0)
(130,74,0)
(172,9,0)
(23,64,0)
(56,77,0)
(90,74,0)
(171,169,0)
(107,106,0)
(52,64,0)
(147,20,0)
(165,106,0)
(115,73,0)
(133,183,0)
(17,127,0)
(124,126,0)
(161,67,0)
(67,150,0)
(46,77,0)
(167,94,0)
(155,115,0)
(18,20,0)
(17,41,0)
(35,10,0)
(159,62,0)
(48,183,0)
(31,161,0)
(109,70,0)
(136,122,0)
(161,48,0)
(99,62,0)
(97,46,0)
(44,11,0)
(154,110,0)
(116,158,0)
(149,9,0)
(8,125,0)
(25,118,0)
(93,146,0)
(161,77,0)
(67,161,0)
(17,74,0)
(40,144,0)
(11,13,0)
(163,36,0)
(43,64,0)
(9,149,0)
(82,130,0)
(96,168,0)
(12,18,0)
(120,60,0)
(50,74,0)
(110,149,0)
(98,151,0)
(132,62,0)
(46,118,0)
(119,64,0)
(160,106,0)
(151,36,0)
(178,41,0)
(157,40,1)
(117,13,1)
(154,1,1)
(34,151,1)
(182,0,1)
(22,10,1)
(131,179,1)
(67,161,1)
(28,5,1)
(9,149,1)
(20,147,1)
(182,13,1)
(10,35,1)
(161,77,1)
(68,130,1)
(55,102,1)
(175,109,1)
(17,41,1)
(12,156,1)
(91,72,1)
(67,150,1)
(24,47,1)
(88,103,1)
(142,53,1)
(38,101,1)
(96,42,1)
(175,113,1)
(73,115,1)
(81,128,1)
(56,90,1)
(61,52,1)
(161,48,1)
(136,60,1)
(171,132,1)
(113,9,1)
(138,89,1)
(132,62,1)
(129,7,1)
(102,25,1)
(8,123,1)
(105,77,1)
(116,158,1)
(121,57,1)
(94,102,1)
(140,86,1)
(94,167,1)
(33,175,1)
(157,71,1)
(141,62,1)
(26,174,1)
(39,13,1)
(175,148,1)
(180,41,1)
(84,182,1)
(173,73,1)
(3,121,1)
(79,168,1)
(62,159,1)
(98,173,1)
(137,166,1)
(80,180,1)
(21,179,1)
(48,91,1)
(31,54,1)
(42,152,1)
(148,87,1)
(40,71,1)
(179,157,1)
(61,105,1)
(103,67,1)
(129,165,1)
(44,163,1)
(87,3,1)
(76,24,1)
(78,81,1)
(123,67,1)
(71,117,1)
(11,29,1)
(126,59,1)
(114,38,1)
(54,150,1)
(29,78,1)
(66,26,1)
(168,96,1)
(46,48,1)
(175,84,1)
(126,36,1)
(57,32,1)
(97,30,1)
(152,48,1)
(128,65,1)
(166,57,1)
(47,169,1)
(60,120,1)
(77,112,1)
(135,79,1)
(17,127,1)
(11,78,1)
(151,36,1)
(99,20,1)
(118,46,1)
(92,49,1)
(65,44,1)
(109,73,1)
(58,176,1)
(55,28,1)
(172,149,1)
(121,13,1)
(1,19,1)
(7,8,1)
(52,135,1)
(13,134,1)
(176,116,1)
(159,99,1)
(150,48,1)
(87,121,1)
(150,164,1)
(164,139,1)
(149,1,1)
(86,94,1)
(18,12,1)
(165,100,1)
(139,131,1)
(134,114,1)
(179,22,1)
(142,52,1)
(124,36,1)
(149,110,1)
(169,171,1)
(121,137,1)
(178,182,1)
(89,76,1)
(71,142,1)
(127,80,1)
(161,31,1)
(5,136,1)
(150,77,1)
(115,155,1)
(100,21,1)
(167,55,1)
(46,77,1)
(11,13,1)
(174,56,1)
(112,66,1)
(132,141,1)
(57,45,1)
(36,11,1)
(140,102,1)
(117,52,1)
(9,172,1)
(175,105,1)
(151,98,1)
(16,126,1)
(73,126,1)
(0,39,1)
(163,87,1)
(35,152,1)
(41,178,1)
(82,37,1)
(115,36,1)
(7,140,1)
(45,58,1)
(142,13,1)
(46,97,1)
(37,9,1)
(49,83,1)
(147,18,1)
(155,16,1)
(90,34,1)
(25,118,1)
(83,102,1)
(53,117,1)
(19,61,1)
(30,88,1)
(5,92,1)
(101,68,1)
(92,102,1)
(158,138,1)
(110,154,1)
(120,92,1)
(59,124,1)
(25,145,1)
(156,17,1)
(130,82,1)
(117,33,1)
(61,152,2)
(59,87,2)
(77,112,2)
(149,105,2)
(42,152,2)
(0,9,2)
(40,71,2)
(141,182,2)
(58,182,2)
(52,152,2)
(39,9,2)
(154,105,2)
(137,182,2)
(71,152,2)
(173,73,2)
(124,87,2)
(136,60,2)
(115,36,2)
(127,182,2)
(79,152,2)
(86,67,2)
(109,73,2)
(77,73,2)
(80,182,2)
(101,9,2)
(57,182,2)
(150,164,2)
(26,73,2)
(96,152,2)
(34,73,2)
(167,67,2)
(117,152,2)
(20,182,2)
(121,13,2)
(87,121,2)
(142,52,2)
(67,161,2)
(123,67,2)
(92,67,2)
(60,92,2)
(136,92,2)
(132,62,2)
(19,152,2)
(117,52,2)
(116,182,2)
(139,179,2)
(178,182,2)
(83,67,2)
(13,9,2)
(67,150,2)
(41,182,2)
(161,48,2)
(25,67,2)
(114,9,2)
(118,46,2)
(89,182,2)
(47,182,2)
(11,78,2)
(158,182,2)
(5,67,2)
(78,87,2)
(169,182,2)
(174,73,2)
(94,102,2)
(161,150,2)
(148,87,2)
(28,67,2)
(81,87,2)
(156,182,2)
(62,182,2)
(73,126,2)
(57,32,2)
(11,87,2)
(116,158,2)
(182,9,2)
(166,182,2)
(29,87,2)
(46,48,2)
(22,152,2)
(142,13,2)
(102,67,2)
(87,182,2)
(115,126,2)
(172,152,2)
(98,73,2)
(175,152,2)
(182,13,2)
(97,67,2)
(46,67,2)
(17,127,2)
(165,179,2)
(36,87,2)
(126,87,2)
(17,182,2)
(150,77,2)
(117,13,2)
(55,67,2)
(92,102,2)
(73,115,2)
(54,150,2)
(25,145,2)
(16,126,2)
(37,9,2)
(53,117,2)
(73,87,2)
(147,182,2)
(171,182,2)
(128,87,2)
(154,152,2)
(88,67,2)
(67,179,2)
(168,152,2)
(36,11,2)
(113,9,2)
(149,1,2)
(120,92,2)
(46,77,2)
(66,73,2)
(131,179,2)
(56,73,2)
(151,73,2)
(31,150,2)
(21,179,2)
(3,182,2)
(110,152,2)
(55,102,2)
(138,182,2)
(110,105,2)
(90,73,2)
(105,73,2)
(134,9,2)
(126,36,2)
(25,118,2)
(180,182,2)
(65,87,2)
(161,77,2)
(33,152,2)
(135,152,2)
(102,25,2)
(7,179,2)
(149,152,2)
(46,97,2)
(142,117,2)
(35,152,2)
(164,179,2)
(8,67,2)
(45,182,2)
(172,105,2)
(118,67,2)
(140,102,2)
(149,110,2)
(84,182,2)
(38,9,2)
(100,179,2)
(140,67,2)
(155,126,2)
(159,182,2)
(47,169,2)
(112,73,2)
(157,152,2)
(99,182,2)
(10,152,2)
(13,134,2)
(68,9,2)
(61,105,2)
(12,182,2)
(49,67,2)
(121,182,2)
(121,137,2)
(176,182,2)
(132,182,2)
(121,57,2)
(150,179,2)
(1,105,2)
(18,182,2)
(17,41,2)
(94,67,2)
(30,67,2)
(44,87,2)
(57,45,2)
(11,13,2)
(150,48,2)
(9,152,2)
(130,9,2)
(163,87,2)
(19,105,2)
(151,36,2)
(103,67,2)
(24,182,2)
(9,105,2)
(1,152,2)
(82,9,2)
(9,149,2)
(76,182,2)
-----------------------------------
(0,INVALID_SOCKET)
(1,MAKEWORD(2,2)
(2,)
(3,SOCKET_ERROR)
(4,)
(5,myString)
(6,recvResult)
(7,break;)
(8,printLine("Input is less than the length of the source string or too large")
(9,WSAStartup(MAKEWORD(2,2)
(10,printLine("Benign, fixed string")
(11,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(12,sin_family)
(13,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(14,connectSocket)
(15,if (recvResult == SOCKET_ERROR || recvResult == 0)
(16,recvResult)
(17,memset(&service, 0, sizeof(service)
(18,service.sin_family)
(19,2)
(20,service.sin_family = AF_INET)
(21,"Benign, fixed string")
(22,break;)
(23,if (wsaDataInit)
(24,service)
(25,(wchar_t *)
(26,NULL)
(27,)
(28,HELLO_STRING)
(29,0)
(30,wchar_t)
(31,100)
(32,struct sockaddr*)
(33,INVALID_SOCKET)
(34,\'\\0\')
(35,"Benign, fixed string")
(36,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(37,wsaDataInit)
(38,SOCK_STREAM)
(39,connectSocket)
(40,WSACleanup()
(41,&service)
(42,wsaDataInit)
(43,if (connectSocket != INVALID_SOCKET)
(44,connectSocket)
(45,&service)
(46,data*sizeof(wchar_t)
(47,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(48,data = 0)
(49,NULL)
(50,if (connectSocket == INVALID_SOCKET)
(51,)
(52,connectSocket = INVALID_SOCKET)
(53,connectSocket)
(54,data)
(55,wcscpy(myString, HELLO_STRING)
(56,data)
(57,(struct sockaddr*)
(58,service)
(59,SOCKET_ERROR)
(60,-1)
(61,2)
(62,service.sin_addr)
(63,)
(64,)
(65,inputBuffer)
(66,0)
(67,data > wcslen(HELLO_STRING)
(68,connectSocket)
(69,switch(7)
(70,)
(71,wsaDataInit)
(72,data)
(73,recvResult == SOCKET_ERROR || recvResult == 0)
(74,)
(75,case 6:)
(76,sin_port)
(77,data = strtoul(inputBuffer, NULL, 0)
(78,CHAR_ARRAY_SIZE - 1)
(79,connectSocket)
(80,service)
(81,1)
(82,1)
(83,myString)
(84,break;)
(85,if (myString == NULL)
(86,myString)
(87,connect(connectSocket, (struct sockaddr*)
(88,data)
(89,service.sin_port)
(90,inputBuffer[recvResult] = \'\\0\')
(91,0)
(92,myString == NULL)
(93,default:)
(94,printWLine(myString)
(95,if (WSAStartup(MAKEWORD(2,2)
(96,0)
(97,sizeof(wchar_t)
(98,recvResult)
(99,service)
(100,printLine("Benign, fixed string")
(101,AF_INET)
(102,myString = (wchar_t *)
(103,myString)
(104,if (data > wcslen(HELLO_STRING)
(105,0)
(106,)
(107,default:)
(108,if (connect(connectSocket, (struct sockaddr*)
(109,break;)
(110,&wsaData)
(111,switch(6)
(112,strtoul(inputBuffer, NULL, 0)
(113,break;)
(114,IPPROTO_TCP)
(115,recvResult == 0)
(116,service.sin_port = htons(TCP_PORT)
(117,connectSocket != INVALID_SOCKET)
(118,malloc(data*sizeof(wchar_t)
(119,service)
(120,1)
(121,connect(connectSocket, (struct sockaddr*)
(122,)
(123,"Input is less than the length of the source string or too large")
(124,recvResult)
(125,)
(126,recvResult == SOCKET_ERROR)
(127,sizeof(service)
(128,CHAR_ARRAY_SIZE)
(129,RET)
(130,wsaDataInit = 1)
(131,data)
(132,service.sin_addr.s_addr)
(133,data)
(134,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(135,INVALID_SOCKET)
(136,exit(-1)
(137,sizeof(service)
(138,TCP_PORT)
(139,HELLO_STRING)
(140,free(myString)
(141,s_addr)
(142,CLOSE_SOCKET(connectSocket)
(143,)
(144,)
(145,wchar_t *)
(146,)
(147,AF_INET)
(148,break;)
(149,WSAStartup(MAKEWORD(2,2)
(150,data > wcslen(HELLO_STRING)
(151,inputBuffer[recvResult])
(152,6)
(153,wsaData)
(154,wsaData)
(155,0)
(156,service)
(157,break;)
(158,htons(TCP_PORT)
(159,sin_addr)
(160,case 7:)
(161,data < 100)
(162,myString)
(163,recvResult)
(164,wcslen(HELLO_STRING)
(165,break;)
(166,service)
(167,myString)
(168,wsaDataInit = 0)
(169,inet_addr(IP_ADDRESS)
(170,inputBuffer)
(171,IP_ADDRESS)
(172,NO_ERROR)
(173,inputBuffer)
(174,inputBuffer)
(175,connectSocket)
(176,connectSocket)
(177,do)
(178,service)
(179,7)
(180,0)
(181,wsaDataInit)
(182,connectSocket == INVALID_SOCKET)
(183,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^