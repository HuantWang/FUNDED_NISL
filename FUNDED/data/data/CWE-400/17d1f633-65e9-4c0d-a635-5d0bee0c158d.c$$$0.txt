-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
75,76
75,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
80,81
81,82
81,83
82,83
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,67,68,72,73,74,76,79,83,84,85,86,90,92,93
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Deallocate memory */        free(data);        break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(18,20,0)
(23,42,0)
(32,36,0)
(10,20,0)
(31,43,0)
(33,43,0)
(33,15,0)
(17,16,0)
(22,30,0)
(15,13,0)
(8,42,0)
(35,42,0)
(34,28,0)
(7,15,0)
(41,13,0)
(27,30,0)
(39,13,0)
(28,5,0)
(1,42,0)
(9,30,0)
(33,42,0)
(19,38,0)
(43,30,0)
(0,13,0)
(38,15,0)
(40,26,0)
(29,34,0)
(4,13,0)
(38,13,0)
(3,13,0)
(36,32,0)
(16,26,0)
(25,35,0)
(36,2,0)
(2,36,0)
(15,36,0)
(20,15,0)
(21,43,0)
(2,26,0)
(12,33,0)
(28,34,0)
(6,4,0)
(36,15,0)
(37,42,0)
(26,16,0)
(44,13,0)
(26,2,0)
(44,4,1)
(7,14,1)
(20,10,1)
(37,35,1)
(40,7,1)
(20,15,1)
(35,25,1)
(34,29,1)
(17,40,1)
(36,32,1)
(4,6,1)
(25,24,1)
(6,14,1)
(2,26,1)
(24,44,1)
(33,15,1)
(15,36,1)
(38,19,1)
(12,24,1)
(36,2,1)
(1,33,1)
(16,17,1)
(3,38,1)
(18,15,1)
(33,12,1)
(33,43,1)
(29,20,1)
(11,37,1)
(19,20,1)
(19,28,1)
(28,34,1)
(24,3,1)
(43,21,1)
(11,1,1)
(38,15,1)
(21,31,1)
(26,16,1)
(10,18,1)
(14,43,1)
(34,20,2)
(28,20,2)
(20,15,2)
(12,24,2)
(7,14,2)
(20,14,2)
(26,14,2)
(10,14,2)
(15,36,2)
(36,14,2)
(17,14,2)
(33,24,2)
(38,14,2)
(26,16,2)
(2,14,2)
(35,24,2)
(36,2,2)
(25,24,2)
(36,32,2)
(37,24,2)
(1,24,2)
(16,14,2)
(29,20,2)
(3,14,2)
(38,15,2)
(33,15,2)
(2,26,2)
(28,34,2)
(4,14,2)
(15,14,2)
(18,14,2)
(6,14,2)
(40,14,2)
(44,14,2)
(19,14,2)
(33,43,2)
-----------------------------------
(0,case 6:)
(1,break;)
(2,malloc(100*sizeof(wchar_t)
(3,break;)
(4,printLine("Benign, fixed string")
(5,)
(6,"Benign, fixed string")
(7,data)
(8,default:)
(9,switch(6)
(10,NULL)
(11,RET)
(12,data)
(13,)
(14,6)
(15,data = (wchar_t *)
(16,sizeof(wchar_t)
(17,wchar_t)
(18,data)
(19,data)
(20,data == NULL)
(21,NULL)
(22,switch(8)
(23,case 7:)
(24,8)
(25,"Benign, fixed string")
(26,100*sizeof(wchar_t)
(27,data)
(28,exit(-1)
(29,1)
(30,)
(31,data)
(32,wchar_t *)
(33,free(data)
(34,-1)
(35,printLine("Benign, fixed string")
(36,(wchar_t *)
(37,break;)
(38,printWLine(data)
(39,if (data == NULL)
(40,100)
(41,default:)
(42,)
(43,data = NULL)
(44,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^