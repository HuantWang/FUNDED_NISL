-----label-----
1
-----code-----
struct work_queue_task *work_queue_wait_internal(struct work_queue *q, int timeout, struct link *foreman_uplink, int *foreman_uplink_active)
/*
	  --------------------
	 |  compute stoptime  |
	  --------------------
			   |
			   v
		 --------------
+------>|  poll links  |
|        --------------
|              |
|              v
|        -------------
|       |transfer task|<----------------+
|        -------------                  |
|              |                    yes |
|              v                        |
|     ------------------  yes   -----------------
|    | tasks remaining? |----->| time remaining? |
|     ------------------        -----------------
|           no |                    no |
|              v                       |
|     ------------------               |
|    |fast abort workers|              |
|     ------------------               |
|              |                       |
|              v                       |
| yes  -----------------               |
+-----| time remaining? |              |
	   -----------------               |
			no |                       |
			   |-----------------------+
			   v
		   ----------
		  |  return  |
		   ----------
*/
{
	struct work_queue_task *t;
	time_t stoptime;
	int    tasks_transfered = 0;

	static timestamp_t last_left_time = 0;
	if(last_left_time!=0) {
		q->total_app_time += timestamp_get() - last_left_time;
	}

	print_password_warning(q);

	if(timeout == WORK_QUEUE_WAITFORTASK) {
		stoptime = 0;
	} else {
		stoptime = time(0) + timeout;
	}

	while(1) {
		if(q->name) {
			update_catalog(q, foreman_uplink, 0);
		}

		if(q->monitor_mode)
			update_resource_report(q);

		ask_for_workers_updates(q);

		t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED);
		if(t) {
			change_task_state(q, t, WORK_QUEUE_TASK_DONE);

			last_left_time = timestamp_get();

			if( t->result != WORK_QUEUE_RESULT_SUCCESS )
			{
				q->stats->total_tasks_failed++;
			}

			return t;

		}

		if( q->process_pending_check && process_pending() )
			break;

		if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink))
			break;

		wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered);

		expire_waiting_tasks(q);

		//Re-enqueue the tasks that workers labeled for resubmission.
		while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))) {

			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {
				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);
				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {
					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);
					t->resource_request = next;
					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);
				} else {
					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);
					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);
				}
			} else {
				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);
			}
		}

		//We have the resources we have been waiting for; start task transfers
		int known = known_workers(q);
		if(known > 0 && known >= q->workers_to_wait) {
			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);
			q->workers_to_wait = 0; //disable it after we started dipatching tasks
		}

		// If fast abort is enabled, kill off slow workers.
		abort_slow_workers(q);

		// If the foreman_uplink is active then break so the caller can handle it.
		if(foreman_uplink) {
			break;
		}

		// If nothing was awake, restart the loop or return without a task.
		if(stoptime && time(0) >= stoptime) {
			break;
		} else {
			continue;
		}
	}

	last_left_time = timestamp_get();

	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
25,26
25,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
28,36
28,37
28,38
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
57,58
57,59
58,59
58,60
59,60
62,63
63,64
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
93,94
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
100,101
103,104
105,106
105,107
107,108
107,109
107,110
107,111
107,112
107,113
107,114
107,115
107,116
107,117
107,118
107,119
107,120
107,121
107,122
108,109
108,110
109,110
109,111
110,111
113,114
114,115
115,116
115,117
115,118
115,119
116,117
118,119
120,121
123,124
123,125
124,125
124,126
125,126
128,129
129,130
129,131
130,131
132,133
134,135
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
145,146
147,148
149,150
151,152
151,153
152,153
154,155
154,156
154,157
154,158
155,156
156,157
156,158
156,159
156,160
157,158
159,160
161,162
163,164
165,166
166,167
166,168
167,168
169,170
170,171
172,173
172,174
173,174
173,175
174,175
174,176
175,176
178,179
180,181
181,182
182,183
183,184
183,185
184,185
184,186
185,186
189,190
190,191
192,193
192,194
193,194
193,195
194,195
194,196
195,196
198,199
199,200
202,203
202,204
203,204
203,205
204,205
204,206
205,206
205,207
206,207
207,208
207,209
207,210
208,209
210,211
212,213
214,215
215,216
215,217
215,218
216,217
218,219
220,221
222,223
223,224
223,225
223,226
224,225
226,227
228,229
230,231
231,232
232,233
235,236
236,237
236,238
236,239
236,240
236,241
236,242
237,238
239,240
241,242
243,244
245,246
247,248
249,250
250,251
250,252
251,252
253,254
255,256
255,257
256,257
257,258
257,259
258,259
260,261
260,262
260,263
261,262
263,264
265,266
267,268
268,269
268,270
268,271
269,270
269,271
270,271
270,272
271,272
274,275
276,277
276,278
277,278
278,279
278,280
279,280
281,282
281,283
283,284
284,285
284,286
284,287
284,288
284,289
285,286
287,288
287,289
288,289
291,292
291,293
292,293
295,296
295,297
296,297
300,301
300,302
300,303
301,302
301,303
302,303
302,304
303,304
303,305
304,305
306,307
308,309
308,310
309,310
311,312
313,314
313,315
314,315
316,317
318,319
318,320
318,321
319,320
320,321
320,322
320,323
320,324
321,322
323,324
326,327
326,328
327,328
330,331
331,332
331,333
332,333
332,334
333,334
336,337
338,339
339,340
339,341
339,342
339,343
340,341
342,343
344,345
346,347
348,349
348,350
349,350
350,351
350,352
350,353
350,354
351,352
353,354
356,357
356,358
357,358
360,361
361,362
361,363
361,364
361,365
362,363
364,365
366,367
368,369
370,371
371,372
372,373
372,374
372,375
372,376
373,374
375,376
377,378
379,380
381,382
382,383
382,384
384,385
384,386
386,387
387,388
387,389
388,389
390,391
392,393
392,394
393,394
393,395
394,395
394,396
395,396
398,399
398,400
399,400
401,402
401,403
402,403
405,406
405,407
406,407
407,408
407,409
408,409
410,411
410,412
410,413
411,412
413,414
415,416
417,418
418,419
418,420
419,420
419,421
420,421
424,425
425,426
425,427
426,427
428,429
430,431
430,432
431,432
433,434
435,436
435,437
435,438
436,437
436,438
437,438
439,440
439,441
440,441
440,442
441,442
444,445
446,447
448,449
450,451
451,452
451,453
452,453
454,455
455,456
457,458
-----nextToken-----
3,5,6,9,11,12,14,16,19,21,22,24,26,27,32,34,35,39,41,44,46,48,52,54,56,60,61,67,68,72,74,78,80,84,86,91,92,97,101,102,104,106,111,112,117,119,121,122,126,127,131,133,137,139,143,146,148,150,153,158,160,162,164,168,171,176,177,179,186,187,188,191,196,197,200,201,209,211,213,217,219,221,225,227,229,233,234,238,240,242,244,246,248,252,254,259,262,264,266,272,273,275,280,282,286,289,290,293,294,297,298,299,305,307,310,312,315,317,322,324,325,328,329,334,335,337,341,343,345,347,352,354,355,358,359,363,365,367,369,374,376,378,380,383,385,389,391,396,397,400,403,404,409,412,414,416,421,422,423,427,429,432,434,438,442,443,445,447,449,453,456,458
-----computeFrom-----
58,59
58,60
64,65
64,66
69,70
69,71
82,83
82,84
89,90
89,91
95,96
95,97
98,99
98,100
141,142
141,143
166,167
166,168
173,174
173,175
193,194
193,195
203,204
203,205
204,205
204,206
205,206
205,207
257,258
257,259
269,270
269,271
301,302
301,303
302,303
302,304
303,304
303,305
308,309
308,310
313,314
313,315
331,332
331,333
393,394
393,395
394,395
394,396
398,399
398,400
407,408
407,409
418,419
418,420
436,437
436,438
439,440
439,441
451,452
451,453
-----guardedBy-----
60,74
272,367
315,337
403,421
404,422
-----guardedByNegation-----
84,104
272,378
-----lastLexicalUse-----
272,378
-----jump-----
272,378
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;BreakStatement;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
struct work_queue_task *work_queue_wait_internal(struct work_queue *q, int timeout, struct link *foreman_uplink, int *foreman_uplink_active)/*	  --------------------	 |  compute stoptime  |	  --------------------			   |			   v		 --------------+------>|  poll links  ||        --------------|              ||              v|        -------------|       |transfer task|<----------------+|        -------------                  ||              |                    yes ||              v                        ||     ------------------  yes   -----------------|    | tasks remaining? |----->| time remaining? ||     ------------------        -----------------|           no |                    no ||              v                       ||     ------------------               ||    |fast abort workers|              ||     ------------------               ||              |                       ||              v                       || yes  -----------------               |+-----| time remaining? |              |	   -----------------               |			no |                       |			   |-----------------------+			   v		   ----------		  |  return  |		   ----------*/{	struct work_queue_task *t;	time_t stoptime;	int    tasks_transfered = 0;	static timestamp_t last_left_time = 0;	if(last_left_time!=0) {		q->total_app_time += timestamp_get() - last_left_time;	}	print_password_warning(q);	if(timeout == WORK_QUEUE_WAITFORTASK) {		stoptime = 0;	} else {		stoptime = time(0) + timeout;	}	while(1) {		if(q->name) {			update_catalog(q, foreman_uplink, 0);		}		if(q->monitor_mode)			update_resource_report(q);		ask_for_workers_updates(q);		t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED);		if(t) {			change_task_state(q, t, WORK_QUEUE_TASK_DONE);			last_left_time = timestamp_get();			if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}			return t;		}		if( q->process_pending_check && process_pending() )			break;		if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink))			break;		wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered);		expire_waiting_tasks(q);		//Re-enqueue the tasks that workers labeled for resubmission.		while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))) {			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}		}		//We have the resources we have been waiting for; start task transfers		int known = known_workers(q);		if(known > 0 && known >= q->workers_to_wait) {			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);			q->workers_to_wait = 0; //disable it after we started dipatching tasks		}		// If fast abort is enabled, kill off slow workers.		abort_slow_workers(q);		// If the foreman_uplink is active then break so the caller can handle it.		if(foreman_uplink) {			break;		}		// If nothing was awake, restart the loop or return without a task.		if(stoptime && time(0) >= stoptime) {			break;		} else {			continue;		}	}	last_left_time = timestamp_get();	return 0;}
struct work_queue_task
work_queue_task
*work_queue_wait_internal(struct work_queue *q, int timeout, struct link *foreman_uplink, int *foreman_uplink_active)
*
work_queue_wait_internal
struct work_queue *q
struct work_queue
work_queue
*q
*
q
int timeout
int
timeout
timeout
struct link *foreman_uplink
struct link
link
*foreman_uplink
*
foreman_uplink
int *foreman_uplink_active
int
*foreman_uplink_active
*
foreman_uplink_active
{	struct work_queue_task *t;	time_t stoptime;	int    tasks_transfered = 0;	static timestamp_t last_left_time = 0;	if(last_left_time!=0) {		q->total_app_time += timestamp_get() - last_left_time;	}	print_password_warning(q);	if(timeout == WORK_QUEUE_WAITFORTASK) {		stoptime = 0;	} else {		stoptime = time(0) + timeout;	}	while(1) {		if(q->name) {			update_catalog(q, foreman_uplink, 0);		}		if(q->monitor_mode)			update_resource_report(q);		ask_for_workers_updates(q);		t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED);		if(t) {			change_task_state(q, t, WORK_QUEUE_TASK_DONE);			last_left_time = timestamp_get();			if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}			return t;		}		if( q->process_pending_check && process_pending() )			break;		if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink))			break;		wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered);		expire_waiting_tasks(q);		//Re-enqueue the tasks that workers labeled for resubmission.		while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))) {			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}		}		//We have the resources we have been waiting for; start task transfers		int known = known_workers(q);		if(known > 0 && known >= q->workers_to_wait) {			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);			q->workers_to_wait = 0; //disable it after we started dipatching tasks		}		// If fast abort is enabled, kill off slow workers.		abort_slow_workers(q);		// If the foreman_uplink is active then break so the caller can handle it.		if(foreman_uplink) {			break;		}		// If nothing was awake, restart the loop or return without a task.		if(stoptime && time(0) >= stoptime) {			break;		} else {			continue;		}	}	last_left_time = timestamp_get();	return 0;}
struct work_queue_task *t;
struct work_queue_task *t;
struct work_queue_task
work_queue_task
*t
*
t
time_t stoptime;
time_t stoptime;
time_t
time_t
stoptime
stoptime
int    tasks_transfered = 0;
int    tasks_transfered = 0;
int
tasks_transfered = 0
tasks_transfered
= 0
0
static timestamp_t last_left_time = 0;
static timestamp_t last_left_time = 0;
static timestamp_t
timestamp_t
last_left_time = 0
last_left_time
= 0
0
if(last_left_time!=0) {		q->total_app_time += timestamp_get() - last_left_time;	}
last_left_time!=0
last_left_time
last_left_time
0
{		q->total_app_time += timestamp_get() - last_left_time;	}
q->total_app_time += timestamp_get() - last_left_time;
q->total_app_time += timestamp_get() - last_left_time
q->total_app_time
q
q
total_app_time
timestamp_get() - last_left_time
timestamp_get()
timestamp_get
timestamp_get
last_left_time
last_left_time
print_password_warning(q);
print_password_warning(q)
print_password_warning
print_password_warning
q
q
if(timeout == WORK_QUEUE_WAITFORTASK) {		stoptime = 0;	} else {		stoptime = time(0) + timeout;	}
timeout == WORK_QUEUE_WAITFORTASK
timeout
timeout
WORK_QUEUE_WAITFORTASK
WORK_QUEUE_WAITFORTASK
{		stoptime = 0;	}
stoptime = 0;
stoptime = 0
stoptime
stoptime
0
{		stoptime = time(0) + timeout;	}
stoptime = time(0) + timeout;
stoptime = time(0) + timeout
stoptime
stoptime
time(0) + timeout
time(0)
time
time
0
timeout
timeout
while(1) {		if(q->name) {			update_catalog(q, foreman_uplink, 0);		}		if(q->monitor_mode)			update_resource_report(q);		ask_for_workers_updates(q);		t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED);		if(t) {			change_task_state(q, t, WORK_QUEUE_TASK_DONE);			last_left_time = timestamp_get();			if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}			return t;		}		if( q->process_pending_check && process_pending() )			break;		if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink))			break;		wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered);		expire_waiting_tasks(q);		//Re-enqueue the tasks that workers labeled for resubmission.		while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))) {			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}		}		//We have the resources we have been waiting for; start task transfers		int known = known_workers(q);		if(known > 0 && known >= q->workers_to_wait) {			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);			q->workers_to_wait = 0; //disable it after we started dipatching tasks		}		// If fast abort is enabled, kill off slow workers.		abort_slow_workers(q);		// If the foreman_uplink is active then break so the caller can handle it.		if(foreman_uplink) {			break;		}		// If nothing was awake, restart the loop or return without a task.		if(stoptime && time(0) >= stoptime) {			break;		} else {			continue;		}	}
1
{		if(q->name) {			update_catalog(q, foreman_uplink, 0);		}		if(q->monitor_mode)			update_resource_report(q);		ask_for_workers_updates(q);		t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED);		if(t) {			change_task_state(q, t, WORK_QUEUE_TASK_DONE);			last_left_time = timestamp_get();			if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}			return t;		}		if( q->process_pending_check && process_pending() )			break;		if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink))			break;		wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered);		expire_waiting_tasks(q);		//Re-enqueue the tasks that workers labeled for resubmission.		while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))) {			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}		}		//We have the resources we have been waiting for; start task transfers		int known = known_workers(q);		if(known > 0 && known >= q->workers_to_wait) {			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);			q->workers_to_wait = 0; //disable it after we started dipatching tasks		}		// If fast abort is enabled, kill off slow workers.		abort_slow_workers(q);		// If the foreman_uplink is active then break so the caller can handle it.		if(foreman_uplink) {			break;		}		// If nothing was awake, restart the loop or return without a task.		if(stoptime && time(0) >= stoptime) {			break;		} else {			continue;		}	}
if(q->name) {			update_catalog(q, foreman_uplink, 0);		}
q->name
q
q
name
{			update_catalog(q, foreman_uplink, 0);		}
update_catalog(q, foreman_uplink, 0);
update_catalog(q, foreman_uplink, 0)
update_catalog
update_catalog
q
q
foreman_uplink
foreman_uplink
0
if(q->monitor_mode)			update_resource_report(q);
q->monitor_mode
q
q
monitor_mode
update_resource_report(q);
update_resource_report(q)
update_resource_report
update_resource_report
q
q
ask_for_workers_updates(q);
ask_for_workers_updates(q)
ask_for_workers_updates
ask_for_workers_updates
q
q
t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED);
t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED)
t
t
task_state_any(q, WORK_QUEUE_TASK_RETRIEVED)
task_state_any
task_state_any
q
q
WORK_QUEUE_TASK_RETRIEVED
WORK_QUEUE_TASK_RETRIEVED
if(t) {			change_task_state(q, t, WORK_QUEUE_TASK_DONE);			last_left_time = timestamp_get();			if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}			return t;		}
t
t
{			change_task_state(q, t, WORK_QUEUE_TASK_DONE);			last_left_time = timestamp_get();			if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}			return t;		}
change_task_state(q, t, WORK_QUEUE_TASK_DONE);
change_task_state(q, t, WORK_QUEUE_TASK_DONE)
change_task_state
change_task_state
q
q
t
t
WORK_QUEUE_TASK_DONE
WORK_QUEUE_TASK_DONE
last_left_time = timestamp_get();
last_left_time = timestamp_get()
last_left_time
last_left_time
timestamp_get()
timestamp_get
timestamp_get
if( t->result != WORK_QUEUE_RESULT_SUCCESS )			{				q->stats->total_tasks_failed++;			}
t->result != WORK_QUEUE_RESULT_SUCCESS
t->result
t
t
result
WORK_QUEUE_RESULT_SUCCESS
WORK_QUEUE_RESULT_SUCCESS
{				q->stats->total_tasks_failed++;			}
q->stats->total_tasks_failed++;
q->stats->total_tasks_failed++
q->stats->total_tasks_failed
q->stats
q
q
stats
total_tasks_failed
return t;
t
t
if( q->process_pending_check && process_pending() )			break;
q->process_pending_check && process_pending()
q->process_pending_check
q
q
process_pending_check
process_pending()
process_pending
process_pending
break;
if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink))			break;
!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL) && !(foreman_uplink)
!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY) && !task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
!task_state_any(q, WORK_QUEUE_TASK_RUNNING) && !task_state_any(q, WORK_QUEUE_TASK_READY)
!task_state_any(q, WORK_QUEUE_TASK_RUNNING)
task_state_any(q, WORK_QUEUE_TASK_RUNNING)
task_state_any
task_state_any
q
q
WORK_QUEUE_TASK_RUNNING
WORK_QUEUE_TASK_RUNNING
!task_state_any(q, WORK_QUEUE_TASK_READY)
task_state_any(q, WORK_QUEUE_TASK_READY)
task_state_any
task_state_any
q
q
WORK_QUEUE_TASK_READY
WORK_QUEUE_TASK_READY
!task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
task_state_any
task_state_any
q
q
WORK_QUEUE_TASK_WAITING_RETRIEVAL
WORK_QUEUE_TASK_WAITING_RETRIEVAL
!(foreman_uplink)
(foreman_uplink)
foreman_uplink
foreman_uplink
break;
wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered);
wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered)
wait_loop_poll_links
wait_loop_poll_links
q
q
stoptime
stoptime
foreman_uplink
foreman_uplink
foreman_uplink_active
foreman_uplink_active
tasks_transfered
tasks_transfered
expire_waiting_tasks(q);
expire_waiting_tasks(q)
expire_waiting_tasks
expire_waiting_tasks
q
q
while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))) {			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}		}
(t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION))
t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION)
t
t
task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION)
task_state_any
task_state_any
q
q
WORK_QUEUE_TASK_WAITING_RESUBMISSION
WORK_QUEUE_TASK_WAITING_RESUBMISSION
{			if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}		}
if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION) {				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			} else {				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}
t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION
t->result
t
t
result
WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION
WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION
{				category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);				if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}			}
category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);
category_allocation_t next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1);
category_allocation_t
category_allocation_t
next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1)
next
= category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1)
category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1)
category_next_label
category_next_label
q->categories
q
q
categories
t->category
t
t
category
t->resource_request
t
t
resource_request
1
if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX) {					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				} else {					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}
next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX
next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST
next == CATEGORY_ALLOCATION_AUTO_ZERO
next
next
CATEGORY_ALLOCATION_AUTO_ZERO
CATEGORY_ALLOCATION_AUTO_ZERO
next == CATEGORY_ALLOCATION_AUTO_FIRST
next
next
CATEGORY_ALLOCATION_AUTO_FIRST
CATEGORY_ALLOCATION_AUTO_FIRST
next == CATEGORY_ALLOCATION_AUTO_MAX
next
next
CATEGORY_ALLOCATION_AUTO_MAX
CATEGORY_ALLOCATION_AUTO_MAX
{					debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);					t->resource_request = next;					cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);				}
debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid);
debug(D_WQ, "Task %d resubmitted using new resource allocation.\n", t->taskid)
debug
debug
D_WQ
D_WQ
"Task %d resubmitted using new resource allocation.\n"
t->taskid
t
t
taskid
t->resource_request = next;
t->resource_request = next
t->resource_request
t
t
resource_request
next
next
cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);
cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY)
cancel_task_on_worker
cancel_task_on_worker
q
q
t
t
WORK_QUEUE_TASK_READY
WORK_QUEUE_TASK_READY
{					debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);					change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);				}
debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid);
debug(D_WQ, "Task %d failed given max resource exhaustion.\n", t->taskid)
debug
debug
D_WQ
D_WQ
"Task %d failed given max resource exhaustion.\n"
t->taskid
t
t
taskid
change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL);
change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
change_task_state
change_task_state
q
q
t
t
WORK_QUEUE_TASK_WAITING_RETRIEVAL
WORK_QUEUE_TASK_WAITING_RETRIEVAL
{				cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);			}
cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY);
cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY)
cancel_task_on_worker
cancel_task_on_worker
q
q
t
t
WORK_QUEUE_TASK_READY
WORK_QUEUE_TASK_READY
int known = known_workers(q);
int known = known_workers(q);
int
known = known_workers(q)
known
= known_workers(q)
known_workers(q)
known_workers
known_workers
q
q
if(known > 0 && known >= q->workers_to_wait) {			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);			q->workers_to_wait = 0; //disable it after we started dipatching tasks		}
known > 0 && known >= q->workers_to_wait
known > 0
known
known
0
known >= q->workers_to_wait
known
known
q->workers_to_wait
q
q
workers_to_wait
{			tasks_transfered = wait_loop_transfer_tasks(q, stoptime);			q->workers_to_wait = 0; //disable it after we started dipatching tasks		}
tasks_transfered = wait_loop_transfer_tasks(q, stoptime);
tasks_transfered = wait_loop_transfer_tasks(q, stoptime)
tasks_transfered
tasks_transfered
wait_loop_transfer_tasks(q, stoptime)
wait_loop_transfer_tasks
wait_loop_transfer_tasks
q
q
stoptime
stoptime
q->workers_to_wait = 0;
q->workers_to_wait = 0
q->workers_to_wait
q
q
workers_to_wait
0
abort_slow_workers(q);
abort_slow_workers(q)
abort_slow_workers
abort_slow_workers
q
q
if(foreman_uplink) {			break;		}
foreman_uplink
foreman_uplink
{			break;		}
break;
if(stoptime && time(0) >= stoptime) {			break;		} else {			continue;		}
stoptime && time(0) >= stoptime
stoptime
stoptime
time(0) >= stoptime
time(0)
time
time
0
stoptime
stoptime
{			break;		}
break;
{			continue;		}
continue;
last_left_time = timestamp_get();
last_left_time = timestamp_get()
last_left_time
last_left_time
timestamp_get()
timestamp_get
timestamp_get
return 0;
0
-----joern-----
(134,135,0)
(102,196,0)
(201,241,0)
(149,106,0)
(92,241,0)
(237,194,0)
(220,32,0)
(233,63,0)
(239,209,0)
(36,241,0)
(225,101,0)
(97,170,0)
(197,219,0)
(228,169,0)
(228,119,0)
(123,241,0)
(133,225,0)
(202,71,0)
(27,101,0)
(181,146,0)
(92,171,0)
(2,119,0)
(93,99,0)
(58,43,0)
(246,240,0)
(247,50,0)
(17,101,0)
(137,4,0)
(167,69,0)
(180,24,0)
(32,77,0)
(176,138,0)
(62,21,0)
(41,221,0)
(53,133,0)
(140,111,0)
(193,241,0)
(31,17,0)
(30,212,0)
(68,146,0)
(10,43,0)
(50,1,0)
(225,133,0)
(112,241,0)
(177,53,0)
(147,121,0)
(196,23,0)
(154,160,0)
(39,122,0)
(158,101,0)
(41,101,0)
(35,130,0)
(52,119,0)
(183,119,0)
(136,5,0)
(49,33,0)
(80,241,0)
(214,163,0)
(188,84,0)
(201,101,0)
(11,166,0)
(41,170,0)
(96,150,0)
(69,167,0)
(218,182,0)
(230,137,0)
(20,101,0)
(85,150,0)
(206,63,0)
(71,101,0)
(28,160,0)
(127,72,0)
(199,84,0)
(213,23,0)
(218,148,0)
(20,171,0)
(169,23,0)
(32,170,0)
(41,77,0)
(35,101,0)
(122,101,0)
(59,240,0)
(16,146,0)
(42,153,0)
(63,184,0)
(150,221,0)
(185,218,0)
(72,5,0)
(229,130,0)
(117,101,0)
(82,231,0)
(12,56,0)
(124,146,0)
(170,128,0)
(40,215,0)
(41,220,0)
(113,225,0)
(232,150,0)
(84,4,0)
(29,80,0)
(219,97,0)
(25,111,0)
(212,101,0)
(247,19,0)
(1,171,0)
(97,219,0)
(62,241,0)
(73,80,0)
(236,62,0)
(243,41,0)
(145,24,0)
(67,115,0)
(117,146,0)
(211,112,0)
(23,94,0)
(207,193,0)
(64,21,0)
(227,137,0)
(216,77,0)
(14,0,0)
(86,246,0)
(187,25,0)
(56,93,0)
(165,122,0)
(1,153,0)
(135,119,0)
(170,84,0)
(143,32,0)
(202,146,0)
(98,17,0)
(191,101,0)
(56,101,0)
(74,28,0)
(103,130,0)
(13,146,0)
(204,92,0)
(19,43,0)
(203,174,0)
(75,106,0)
(173,212,0)
(169,101,0)
(245,177,0)
(41,108,0)
(159,35,0)
(200,146,0)
(109,123,0)
(135,101,0)
(163,247,0)
(157,3,0)
(126,122,0)
(114,119,0)
(209,101,0)
(165,177,0)
(9,41,0)
(84,199,0)
(57,209,0)
(219,170,0)
(106,101,0)
(132,146,0)
(209,182,0)
(136,1,0)
(172,32,0)
(156,35,0)
(41,215,0)
(76,28,0)
(72,101,0)
(111,25,0)
(104,136,0)
(118,50,0)
(66,158,0)
(171,92,0)
(245,31,0)
(18,20,0)
(6,69,0)
(60,145,0)
(158,160,0)
(55,112,0)
(184,63,0)
(222,77,0)
(248,72,0)
(209,160,0)
(194,129,0)
(231,221,0)
(92,136,0)
(178,201,0)
(110,25,0)
(140,196,0)
(228,123,0)
(144,123,0)
(193,101,0)
(241,201,0)
(43,1,0)
(22,121,0)
(195,41,0)
(32,220,0)
(83,163,0)
(8,153,0)
(220,94,0)
(152,62,0)
(194,115,0)
(171,1,0)
(155,140,0)
(26,41,0)
(53,231,0)
(210,193,0)
(198,225,0)
(151,21,0)
(50,247,0)
(24,241,0)
(31,245,0)
(163,1,0)
(41,146,0)
(175,72,0)
(160,146,0)
(28,182,0)
(120,228,0)
(125,71,0)
(226,0,0)
(205,202,0)
(177,245,0)
(186,171,0)
(194,49,0)
(15,146,0)
(140,202,0)
(219,197,0)
(87,145,0)
(150,101,0)
(95,182,0)
(130,229,0)
(192,219,0)
(0,115,0)
(115,119,0)
(24,145,0)
(168,1,0)
(242,220,0)
(79,215,0)
(80,88,0)
(99,93,0)
(133,53,0)
(63,160,0)
(80,101,0)
(189,199,0)
(69,119,0)
(74,228,0)
(196,101,0)
(122,165,0)
(100,184,0)
(215,119,0)
(162,92,0)
(219,77,0)
(32,101,0)
(229,161,0)
(174,146,0)
(97,77,0)
(90,146,0)
(72,241,0)
(150,107,0)
(19,247,0)
(47,209,0)
(244,50,0)
(164,20,0)
(148,218,0)
(7,81,0)
(84,170,0)
(121,101,0)
(196,140,0)
(139,119,0)
(71,202,0)
(46,41,0)
(45,80,0)
(171,20,0)
(141,170,0)
(240,246,0)
(37,27,0)
(235,119,0)
(93,56,0)
(44,17,0)
(234,56,0)
(43,19,0)
(25,202,0)
(77,91,0)
(48,117,0)
(17,31,0)
(145,5,0)
(131,146,0)
(21,88,0)
(123,136,0)
(53,177,0)
(116,201,0)
(51,197,0)
(238,158,0)
(129,194,0)
(171,112,0)
(34,240,0)
(21,62,0)
(54,169,0)
(193,217,0)
(130,35,0)
(240,241,0)
(111,140,0)
(177,165,0)
(191,146,0)
(142,196,0)
(247,163,0)
(228,212,0)
(38,97,0)
(212,49,0)
(224,119,0)
(174,101,0)
(231,53,0)
(70,191,0)
(179,115,0)
(61,193,0)
(112,171,0)
(190,169,0)
(89,24,0)
(160,158,0)
(49,194,0)
(175,136,1)
(144,145,1)
(111,25,1)
(186,92,1)
(86,240,1)
(136,104,1)
(232,96,1)
(189,141,1)
(53,133,1)
(148,185,1)
(6,157,1)
(248,127,1)
(193,101,1)
(35,101,1)
(169,101,1)
(242,111,1)
(145,24,1)
(74,228,1)
(115,179,1)
(41,77,1)
(180,60,1)
(143,172,1)
(1,171,1)
(85,232,1)
(102,142,1)
(69,167,1)
(82,133,1)
(203,27,1)
(190,220,1)
(209,57,1)
(209,160,1)
(158,66,1)
(6,208,1)
(53,231,1)
(204,162,1)
(50,244,1)
(174,203,1)
(36,80,1)
(154,174,1)
(194,237,1)
(97,219,1)
(23,213,1)
(222,137,1)
(56,234,1)
(236,152,1)
(24,241,1)
(109,144,1)
(6,65,1)
(171,20,1)
(89,180,1)
(51,38,1)
(6,11,1)
(245,177,1)
(219,197,1)
(76,229,1)
(72,241,1)
(110,187,1)
(171,112,1)
(20,101,1)
(97,170,1)
(201,101,1)
(56,101,1)
(209,101,1)
(121,147,1)
(116,178,1)
(20,18,1)
(233,206,1)
(45,73,1)
(191,101,1)
(135,101,1)
(74,28,1)
(123,109,1)
(41,243,1)
(62,241,1)
(150,85,1)
(243,46,1)
(205,241,1)
(163,214,1)
(70,111,1)
(25,202,1)
(179,67,1)
(147,22,1)
(87,19,1)
(156,184,1)
(167,6,1)
(225,198,1)
(29,45,1)
(234,12,1)
(71,101,1)
(157,223,1)
(50,1,1)
(220,32,1)
(35,159,1)
(229,130,1)
(99,56,1)
(84,199,1)
(228,212,1)
(246,240,1)
(193,241,1)
(41,220,1)
(32,170,1)
(150,101,1)
(203,106,1)
(63,160,1)
(231,221,1)
(92,241,1)
(28,76,1)
(246,86,1)
(24,89,1)
(19,43,1)
(140,196,1)
(130,35,1)
(223,191,1)
(169,54,1)
(160,158,1)
(225,101,1)
(71,125,1)
(165,122,1)
(130,103,1)
(244,118,1)
(185,209,1)
(98,93,1)
(120,69,1)
(34,241,1)
(84,188,1)
(173,30,1)
(123,241,1)
(198,113,1)
(40,79,1)
(126,39,1)
(97,38,1)
(32,101,1)
(151,19,1)
(112,55,1)
(106,149,1)
(195,9,1)
(247,50,1)
(196,23,1)
(62,236,1)
(0,115,1)
(96,121,1)
(122,126,1)
(10,58,1)
(61,207,1)
(172,242,1)
(67,215,1)
(92,136,1)
(6,78,1)
(73,21,1)
(27,37,1)
(18,164,1)
(54,190,1)
(72,248,1)
(118,43,1)
(112,241,1)
(140,202,1)
(43,1,1)
(30,0,1)
(72,101,1)
(228,120,1)
(38,223,1)
(11,97,1)
(80,101,1)
(228,169,1)
(76,184,1)
(230,227,1)
(104,123,1)
(216,222,1)
(17,44,1)
(135,134,1)
(184,100,1)
(219,77,1)
(227,135,1)
(111,140,1)
(177,53,1)
(58,1,1)
(192,197,1)
(211,20,1)
(25,110,1)
(80,241,1)
(226,115,1)
(141,137,1)
(168,246,1)
(241,201,1)
(214,83,1)
(133,225,1)
(142,155,1)
(219,192,1)
(65,7,1)
(163,1,1)
(103,35,1)
(237,129,1)
(32,77,1)
(240,241,1)
(122,101,1)
(36,193,1)
(100,63,1)
(194,115,1)
(9,245,1)
(171,92,1)
(201,116,1)
(97,77,1)
(137,4,1)
(44,98,1)
(41,221,1)
(212,101,1)
(19,247,1)
(75,121,1)
(105,160,1)
(75,150,1)
(26,195,1)
(152,64,1)
(240,59,1)
(41,170,1)
(121,101,1)
(70,23,1)
(188,199,1)
(218,148,1)
(174,101,1)
(247,163,1)
(197,51,1)
(14,226,1)
(210,61,1)
(92,204,1)
(49,194,1)
(219,170,1)
(155,25,1)
(245,31,1)
(178,36,1)
(228,123,1)
(162,112,1)
(134,0,1)
(55,211,1)
(47,239,1)
(36,117,1)
(65,77,1)
(177,165,1)
(206,218,1)
(77,216,1)
(117,101,1)
(171,186,1)
(39,31,1)
(196,102,1)
(78,245,1)
(27,101,1)
(17,101,1)
(59,34,1)
(184,63,1)
(22,65,1)
(113,165,1)
(48,41,1)
(32,143,1)
(12,105,1)
(134,49,1)
(93,99,1)
(238,154,1)
(66,238,1)
(65,170,1)
(207,246,1)
(36,72,1)
(159,156,1)
(215,40,1)
(46,26,1)
(21,62,1)
(43,10,1)
(191,70,1)
(170,84,1)
(208,93,1)
(150,221,1)
(106,101,1)
(212,173,1)
(129,212,1)
(193,210,1)
(187,202,1)
(83,50,1)
(93,56,1)
(41,108,1)
(199,189,1)
(136,1,1)
(37,106,1)
(41,215,1)
(194,129,1)
(63,233,1)
(84,4,1)
(239,105,1)
(0,14,1)
(64,151,1)
(137,230,1)
(213,169,1)
(60,87,1)
(196,101,1)
(7,97,1)
(80,29,1)
(125,205,1)
(41,101,1)
(57,47,1)
(117,48,1)
(31,17,1)
(231,82,1)
(164,168,1)
(158,101,1)
(127,175,1)
(28,160,1)
(149,75,1)
(202,71,1)
(169,101,2)
(136,19,2)
(21,62,2)
(70,245,2)
(201,101,2)
(63,160,2)
(39,31,2)
(188,137,2)
(17,93,2)
(169,111,2)
(85,121,2)
(160,65,2)
(228,123,2)
(225,101,2)
(29,19,2)
(64,19,2)
(162,246,2)
(80,241,2)
(190,111,2)
(46,245,2)
(150,121,2)
(35,184,2)
(120,245,2)
(66,65,2)
(41,221,2)
(41,215,2)
(246,240,2)
(50,43,2)
(56,101,2)
(228,212,2)
(45,19,2)
(111,245,2)
(167,97,2)
(122,31,2)
(31,93,2)
(228,245,2)
(55,246,2)
(6,223,2)
(71,245,2)
(154,65,2)
(229,184,2)
(141,137,2)
(151,19,2)
(72,241,2)
(26,245,2)
(245,93,2)
(69,245,2)
(159,184,2)
(9,245,2)
(89,19,2)
(125,245,2)
(177,165,2)
(43,1,2)
(62,241,2)
(214,50,2)
(78,245,2)
(109,19,2)
(184,63,2)
(21,19,2)
(247,163,2)
(223,245,2)
(106,65,2)
(122,101,2)
(228,223,2)
(98,93,2)
(130,35,2)
(219,77,2)
(237,0,2)
(19,246,2)
(212,0,2)
(32,77,2)
(194,0,2)
(199,137,2)
(239,105,2)
(241,241,2)
(130,184,2)
(140,196,2)
(133,165,2)
(116,241,2)
(34,241,2)
(191,245,2)
(142,25,2)
(171,20,2)
(49,0,2)
(69,97,2)
(113,165,2)
(228,97,2)
(150,101,2)
(105,65,2)
(12,105,2)
(247,43,2)
(243,245,2)
(30,0,2)
(145,19,2)
(17,101,2)
(136,1,2)
(65,97,2)
(167,245,2)
(133,225,2)
(228,65,2)
(41,220,2)
(80,19,2)
(194,129,2)
(198,165,2)
(6,97,2)
(97,170,2)
(103,184,2)
(93,105,2)
(56,105,2)
(84,199,2)
(207,246,2)
(196,25,2)
(96,121,2)
(174,101,2)
(209,101,2)
(121,65,2)
(160,158,2)
(80,101,2)
(19,247,2)
(231,133,2)
(225,165,2)
(69,223,2)
(242,111,2)
(209,105,2)
(41,245,2)
(32,101,2)
(106,101,2)
(180,19,2)
(244,43,2)
(195,245,2)
(117,245,2)
(57,105,2)
(247,50,2)
(1,246,2)
(167,93,2)
(209,160,2)
(72,19,2)
(120,93,2)
(74,228,2)
(93,56,2)
(43,246,2)
(38,223,2)
(76,105,2)
(194,115,2)
(212,101,2)
(7,97,2)
(213,111,2)
(84,137,2)
(163,1,2)
(44,93,2)
(72,101,2)
(127,19,2)
(189,137,2)
(167,223,2)
(191,101,2)
(171,112,2)
(186,246,2)
(184,105,2)
(32,111,2)
(232,121,2)
(47,105,2)
(53,231,2)
(25,202,2)
(174,65,2)
(157,223,2)
(168,246,2)
(123,241,2)
(173,0,2)
(208,93,2)
(171,246,2)
(245,31,2)
(100,105,2)
(120,223,2)
(41,108,2)
(228,93,2)
(196,101,2)
(27,106,2)
(62,19,2)
(170,84,2)
(192,38,2)
(61,246,2)
(54,111,2)
(171,92,2)
(69,65,2)
(63,105,2)
(112,246,2)
(92,246,2)
(167,65,2)
(41,170,2)
(228,169,2)
(193,241,2)
(229,130,2)
(163,50,2)
(201,241,2)
(120,97,2)
(82,133,2)
(241,245,2)
(104,19,2)
(178,241,2)
(24,19,2)
(10,246,2)
(112,241,2)
(185,105,2)
(6,65,2)
(32,170,2)
(211,246,2)
(60,19,2)
(22,65,2)
(175,19,2)
(36,241,2)
(28,105,2)
(69,93,2)
(219,197,2)
(99,56,2)
(11,97,2)
(116,245,2)
(164,246,2)
(144,19,2)
(111,140,2)
(93,99,2)
(145,24,2)
(246,241,2)
(6,93,2)
(140,25,2)
(149,65,2)
(28,160,2)
(155,25,2)
(220,32,2)
(48,245,2)
(165,122,2)
(120,65,2)
(218,105,2)
(49,194,2)
(245,177,2)
(241,201,2)
(202,71,2)
(137,4,2)
(202,245,2)
(156,184,2)
(187,245,2)
(222,137,2)
(71,101,2)
(36,245,2)
(143,111,2)
(170,137,2)
(231,221,2)
(74,28,2)
(51,38,2)
(50,1,2)
(110,245,2)
(219,38,2)
(92,241,2)
(172,111,2)
(58,246,2)
(75,65,2)
(193,246,2)
(238,65,2)
(87,19,2)
(24,241,2)
(210,246,2)
(216,137,2)
(84,4,2)
(234,105,2)
(177,31,2)
(59,241,2)
(111,25,2)
(158,101,2)
(0,115,2)
(97,219,2)
(135,101,2)
(201,245,2)
(240,241,2)
(158,65,2)
(31,17,2)
(165,31,2)
(69,167,2)
(193,101,2)
(197,38,2)
(18,246,2)
(118,43,2)
(204,246,2)
(196,23,2)
(140,202,2)
(20,246,2)
(121,101,2)
(97,223,2)
(152,19,2)
(35,101,2)
(92,136,2)
(97,77,2)
(177,53,2)
(248,19,2)
(178,245,2)
(25,245,2)
(203,65,2)
(53,165,2)
(41,101,2)
(233,105,2)
(27,101,2)
(148,105,2)
(123,19,2)
(1,171,2)
(117,101,2)
(37,106,2)
(147,65,2)
(41,77,2)
(73,19,2)
(218,148,2)
(19,43,2)
(77,137,2)
(236,19,2)
(220,111,2)
(206,105,2)
(126,31,2)
(205,245,2)
(6,245,2)
(20,101,2)
(86,241,2)
(150,221,2)
(102,25,2)
(53,133,2)
(23,111,2)
(83,50,2)
(219,170,2)
(129,0,2)
-----------------------------------
(0,last_left_time!=0)
(1,next = category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1)
(2,stoptime)
(3,)
(4,int timeout)
(5,)
(6,last_left_time)
(7,continue;)
(8,next)
(9,q)
(10,CATEGORY_ALLOCATION_AUTO_ZERO)
(11,break;)
(12,q)
(13,known)
(14,0)
(15,if(stoptime && time(0)
(16,if( q->process_pending_check && process_pending()
(17,task_state_any(q, WORK_QUEUE_TASK_RUNNING)
(18,categories)
(19,next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX)
(20,q->categories)
(21,debug(D_WQ, "Task %d failed given max resource exhaustion.\\n", t->taskid)
(22,q)
(23,q->workers_to_wait = 0)
(24,t->taskid)
(25,known > 0)
(26,foreman_uplink)
(27,update_resource_report(q)
(28,return t;)
(29,WORK_QUEUE_TASK_WAITING_RETRIEVAL)
(30,q)
(31,!task_state_any(q, WORK_QUEUE_TASK_RUNNING)
(32,wait_loop_transfer_tasks(q, stoptime)
(33,)
(34,t)
(35,q->stats)
(36,t)
(37,q)
(38,stoptime)
(39,q)
(40,0)
(41,wait_loop_poll_links(q, stoptime, foreman_uplink, foreman_uplink_active, tasks_transfered)
(42,if(next == CATEGORY_ALLOCATION_AUTO_ZERO || next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX)
(43,next == CATEGORY_ALLOCATION_AUTO_ZERO)
(44,WORK_QUEUE_TASK_RUNNING)
(45,t)
(46,foreman_uplink_active)
(47,t)
(48,q)
(49,q->total_app_time += timestamp_get()
(50,next == CATEGORY_ALLOCATION_AUTO_FIRST)
(51,0)
(52,if(last_left_time!=0)
(53,!task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
(54,workers_to_wait)
(55,category)
(56,q->process_pending_check)
(57,WORK_QUEUE_TASK_DONE)
(58,next)
(59,result)
(60,"Task %d resubmitted using new resource allocation.\\n")
(61,t)
(62,t->taskid)
(63,t->result)
(64,"Task %d failed given max resource exhaustion.\\n")
(65,1)
(66,WORK_QUEUE_TASK_RETRIEVED)
(67,last_left_time)
(68,if(!task_state_any(q, WORK_QUEUE_TASK_RUNNING)
(69,last_left_time = timestamp_get()
(70,q)
(71,known_workers(q)
(72,cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY)
(73,q)
(74,RET)
(75,q)
(76,t)
(77,stoptime = 0)
(78,break;)
(79,tasks_transfered)
(80,change_task_state(q, t, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
(81,)
(82,foreman_uplink)
(83,next)
(84,time(0)
(85,0)
(86,WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION)
(87,D_WQ)
(88,)
(89,taskid)
(90,if(known > 0 && known >= q->workers_to_wait)
(91,)
(92,t->resource_request)
(93,q->process_pending_check && process_pending()
(94,)
(95,if( t->result != WORK_QUEUE_RESULT_SUCCESS )
(96,q)
(97,stoptime && time(0)
(98,q)
(99,process_pending()
(100,WORK_QUEUE_RESULT_SUCCESS)
(101,struct work_queue *q)
(102,workers_to_wait)
(103,total_tasks_failed)
(104,next)
(105,t)
(106,q->monitor_mode)
(107,)
(108,int *foreman_uplink_active)
(109,resource_request)
(110,0)
(111,known > 0 && known >= q->workers_to_wait)
(112,t->category)
(113,q)
(114,while(1)
(115,last_left_time = 0)
(116,WORK_QUEUE_TASK_WAITING_RESUBMISSION)
(117,expire_waiting_tasks(q)
(118,next)
(119,)
(120,0)
(121,q->name)
(122,task_state_any(q, WORK_QUEUE_TASK_READY)
(123,t->resource_request)
(124,if(foreman_uplink)
(125,q)
(126,WORK_QUEUE_TASK_READY)
(127,t)
(128,)
(129,timestamp_get()
(130,q->stats->total_tasks_failed)
(131,if(q->name)
(132,if(t)
(133,!task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
(134,q)
(135,print_password_warning(q)
(136,t->resource_request = next)
(137,timeout == WORK_QUEUE_WAITFORTASK)
(138,)
(139,tasks_transfered)
(140,known >= q->workers_to_wait)
(141,stoptime)
(142,q)
(143,stoptime)
(144,t)
(145,debug(D_WQ, "Task %d resubmitted using new resource allocation.\\n", t->taskid)
(146,)
(147,name)
(148,timestamp_get()
(149,monitor_mode)
(150,update_catalog(q, foreman_uplink, 0)
(151,D_WQ)
(152,t)
(153,)
(154,t)
(155,known)
(156,q)
(157,break;)
(158,task_state_any(q, WORK_QUEUE_TASK_RETRIEVED)
(159,stats)
(160,t = task_state_any(q, WORK_QUEUE_TASK_RETRIEVED)
(161,)
(162,t)
(163,next == CATEGORY_ALLOCATION_AUTO_MAX)
(164,q)
(165,!task_state_any(q, WORK_QUEUE_TASK_READY)
(166,)
(167,timestamp_get()
(168,next)
(169,q->workers_to_wait)
(170,stoptime = time(0)
(171,category_next_label(q->categories, t->category, t->resource_request, /* resource overflow */ 1)
(172,q)
(173,total_app_time)
(174,ask_for_workers_updates(q)
(175,q)
(176,if(t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION)
(177,!task_state_any(q, WORK_QUEUE_TASK_READY)
(178,q)
(179,0)
(180,t)
(181,if(q->monitor_mode)
(182,)
(183,t)
(184,t->result != WORK_QUEUE_RESULT_SUCCESS)
(185,last_left_time)
(186,1)
(187,known)
(188,timeout)
(189,0)
(190,q)
(191,abort_slow_workers(q)
(192,stoptime)
(193,cancel_task_on_worker(q, t, WORK_QUEUE_TASK_READY)
(194,timestamp_get()
(195,stoptime)
(196,q->workers_to_wait)
(197,time(0)
(198,WORK_QUEUE_TASK_WAITING_RETRIEVAL)
(199,time(0)
(200,while((t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION)
(201,task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION)
(202,known = known_workers(q)
(203,q)
(204,resource_request)
(205,known)
(206,t)
(207,q)
(208,break;)
(209,change_task_state(q, t, WORK_QUEUE_TASK_DONE)
(210,WORK_QUEUE_TASK_READY)
(211,t)
(212,q->total_app_time)
(213,0)
(214,CATEGORY_ALLOCATION_AUTO_MAX)
(215,tasks_transfered = 0)
(216,0)
(217,)
(218,last_left_time = timestamp_get()
(219,time(0)
(220,tasks_transfered = wait_loop_transfer_tasks(q, stoptime)
(221,struct link *foreman_uplink)
(222,stoptime)
(223,foreman_uplink)
(224,if(timeout == WORK_QUEUE_WAITFORTASK)
(225,task_state_any(q, WORK_QUEUE_TASK_WAITING_RETRIEVAL)
(226,last_left_time)
(227,timeout)
(228,return 0;)
(229,q->stats->total_tasks_failed++)
(230,WORK_QUEUE_WAITFORTASK)
(231,!(foreman_uplink)
(232,foreman_uplink)
(233,result)
(234,process_pending_check)
(235,last_left_time)
(236,taskid)
(237,last_left_time)
(238,q)
(239,q)
(240,t->result)
(241,t = task_state_any(q, WORK_QUEUE_TASK_WAITING_RESUBMISSION)
(242,tasks_transfered)
(243,tasks_transfered)
(244,CATEGORY_ALLOCATION_AUTO_FIRST)
(245,!task_state_any(q, WORK_QUEUE_TASK_RUNNING)
(246,t->result == WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION)
(247,next == CATEGORY_ALLOCATION_AUTO_FIRST || next == CATEGORY_ALLOCATION_AUTO_MAX)
(248,WORK_QUEUE_TASK_READY)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^