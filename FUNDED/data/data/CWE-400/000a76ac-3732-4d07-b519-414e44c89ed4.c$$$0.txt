-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_67b_badSink(CWE400_Resource_Exhaustion__fgets_sleep_67_structType myStruct)
{
    int count = myStruct.structFirst;
    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
    SLEEP(count);
    printLine("Sleep time possibly too long");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
-----nextToken-----
2,4,7,9,13,15,19,20,24,26,30,31
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_67b_badSink(CWE400_Resource_Exhaustion__fgets_sleep_67_structType myStruct){    int count = myStruct.structFirst;    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */    SLEEP(count);    printLine("Sleep time possibly too long");}
void
CWE400_Resource_Exhaustion__fgets_sleep_67b_badSink(CWE400_Resource_Exhaustion__fgets_sleep_67_structType myStruct)
CWE400_Resource_Exhaustion__fgets_sleep_67b_badSink
CWE400_Resource_Exhaustion__fgets_sleep_67_structType myStruct
CWE400_Resource_Exhaustion__fgets_sleep_67_structType
CWE400_Resource_Exhaustion__fgets_sleep_67_structType
myStruct
myStruct
{    int count = myStruct.structFirst;    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */    SLEEP(count);    printLine("Sleep time possibly too long");}
int count = myStruct.structFirst;
int count = myStruct.structFirst;
int
count = myStruct.structFirst
count
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(1,10,0)
(12,4,0)
(1,4,0)
(10,1,0)
(7,10,0)
(2,4,0)
(8,1,0)
(6,8,0)
(9,1,0)
(8,4,0)
(10,11,0)
(3,10,0)
(0,12,0)
(8,1,1)
(6,1,1)
(1,10,1)
(8,6,1)
(3,9,1)
(10,11,1)
(10,7,1)
(5,12,1)
(12,0,1)
(7,3,1)
(0,8,1)
(1,10,2)
(8,1,2)
(10,11,2)
-----------------------------------
(0,"Sleep time possibly too long")
(1,count = myStruct.structFirst)
(2,count)
(3,myStruct)
(4,)
(5,RET)
(6,count)
(7,structFirst)
(8,SLEEP(count)
(9,count)
(10,myStruct.structFirst)
(11,CWE400_Resource_Exhaustion__fgets_sleep_67_structType myStruct)
(12,printLine("Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^