-----label-----
0
-----code-----
static void goodB2GSink(int count)
{
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_good.txt";
        /* FIX: Validate count before using it as the for loop variant to write to a file */
        if (count > 0 && count <= 20)
        {
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
35,36
37,38
37,39
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
97,102
98,99
100,101
102,103
103,104
103,105
106,107
106,108
107,108
109,110
111,112
113,114
114,115
114,116
115,116
118,119
118,120
119,120
121,122
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,6,8,14,16,18,22,24,25,28,31,33,34,36,41,42,45,46,51,54,56,57,61,63,68,69,74,75,78,82,83,85,88,94,96,99,101,104,105,108,110,112,116,117,120,125,127
-----computeFrom-----
38,39
38,40
39,40
39,41
43,44
43,45
49,50
49,51
59,60
59,61
72,73
72,74
76,77
76,78
91,92
91,93
-----guardedBy-----
45,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2GSink(int count){    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodB2GSink(int count)
goodB2GSink
int count
int
count
count
{    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }}
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(1,2,0)
(57,7,0)
(53,61,0)
(29,58,0)
(35,9,0)
(14,35,0)
(36,39,0)
(25,24,0)
(52,30,0)
(18,40,0)
(40,17,0)
(50,55,0)
(35,38,0)
(13,15,0)
(6,19,0)
(59,56,0)
(5,48,0)
(34,61,0)
(44,63,0)
(39,23,0)
(19,65,0)
(56,61,0)
(4,9,0)
(38,35,0)
(9,24,0)
(66,42,0)
(49,36,0)
(38,7,0)
(40,54,0)
(17,40,0)
(15,35,0)
(24,9,0)
(61,56,0)
(35,15,0)
(61,54,0)
(28,2,0)
(60,48,0)
(20,27,0)
(24,27,0)
(56,59,0)
(12,2,0)
(47,24,0)
(35,30,0)
(48,39,0)
(10,36,0)
(37,58,0)
(58,9,0)
(41,39,0)
(27,39,0)
(42,63,0)
(62,32,0)
(16,63,0)
(11,39,0)
(8,4,0)
(9,2,0)
(7,38,0)
(17,63,0)
(40,18,0)
(33,27,0)
(3,39,0)
(22,17,0)
(64,40,0)
(30,35,0)
(21,9,0)
(59,54,0)
(26,59,0)
(31,39,0)
(0,59,0)
(4,45,0)
(51,35,0)
(7,57,1)
(5,60,1)
(42,66,1)
(42,63,1)
(44,16,1)
(66,55,1)
(8,43,1)
(63,44,1)
(59,54,1)
(25,21,1)
(26,0,1)
(15,13,1)
(37,9,1)
(61,53,1)
(22,42,1)
(59,26,1)
(4,9,1)
(35,15,1)
(21,56,1)
(58,29,1)
(51,30,1)
(17,63,1)
(40,18,1)
(33,48,1)
(24,27,1)
(0,27,1)
(46,4,1)
(34,59,1)
(29,37,1)
(40,64,1)
(27,20,1)
(64,22,1)
(30,52,1)
(9,24,1)
(13,14,1)
(17,40,1)
(6,58,1)
(46,43,1)
(19,6,1)
(48,5,1)
(35,30,1)
(20,33,1)
(47,25,1)
(53,34,1)
(38,35,1)
(61,54,1)
(66,38,1)
(60,36,1)
(14,7,1)
(4,8,1)
(40,54,1)
(35,51,1)
(22,63,1)
(56,59,1)
(49,10,1)
(52,15,1)
(36,49,1)
(24,47,1)
(50,38,1)
(35,9,1)
(43,17,1)
(55,50,1)
(57,17,1)
(56,61,1)
(16,19,1)
(46,56,1)
(58,9,1)
(16,58,1)
(38,7,1)
(43,56,2)
(44,56,2)
(21,56,2)
(24,56,2)
(51,17,2)
(38,17,2)
(56,59,2)
(61,54,2)
(25,56,2)
(56,61,2)
(4,43,2)
(66,17,2)
(14,17,2)
(8,43,2)
(17,63,2)
(13,17,2)
(15,17,2)
(22,56,2)
(30,17,2)
(19,58,2)
(6,58,2)
(55,38,2)
(22,17,2)
(58,9,2)
(16,56,2)
(38,35,2)
(35,9,2)
(40,56,2)
(9,24,2)
(61,59,2)
(47,56,2)
(17,40,2)
(17,56,2)
(64,56,2)
(4,9,2)
(53,59,2)
(59,54,2)
(9,56,2)
(7,17,2)
(34,59,2)
(40,18,2)
(40,54,2)
(58,56,2)
(40,17,2)
(52,17,2)
(42,17,2)
(29,56,2)
(17,17,2)
(38,7,2)
(35,15,2)
(57,17,2)
(50,38,2)
(24,27,2)
(35,30,2)
(42,63,2)
(63,56,2)
(64,17,2)
(37,56,2)
(35,17,2)
-----------------------------------
(0,count)
(1,for (i = 0; i < (size_t)
(2,)
(3,i)
(4,fclose(pFile)
(5,NULL)
(6,1)
(7,strlen(SENTENCE)
(8,pFile)
(9,pFile = fopen(filename, "w+")
(10,i)
(11,filename)
(12,if (pFile == NULL)
(13,char)
(14,SENTENCE)
(15,sizeof(char)
(16,i)
(17,i < (size_t)
(18,size_t)
(19,exit(1)
(20,"output_good.txt")
(21,pFile)
(22,i)
(23,)
(24,fopen(filename, "w+")
(25,filename)
(26,0)
(27,*filename = "output_good.txt")
(28,if (pFile)
(29,NULL)
(30,strlen(SENTENCE)
(31,pFile)
(32,)
(33,filename)
(34,count)
(35,fwrite(SENTENCE, sizeof(char)
(36,i = 0)
(37,pFile)
(38,strlen(SENTENCE)
(39,)
(40,(size_t)
(41,if (count > 0 && count <= 20)
(42,i++)
(43,pFile)
(44,0)
(45,)
(46,RET)
(47,"w+")
(48,*pFile = NULL)
(49,0)
(50,1)
(51,pFile)
(52,SENTENCE)
(53,20)
(54,int count)
(55,exit(1)
(56,count > 0 && count <= 20)
(57,SENTENCE)
(58,pFile == NULL)
(59,count > 0)
(60,pFile)
(61,count <= 20)
(62,if (strlen(SENTENCE)
(63,i = 0)
(64,count)
(65,)
(66,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^