-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(17,44,0)
(47,20,0)
(19,5,0)
(41,9,0)
(28,44,0)
(12,15,0)
(5,19,0)
(19,22,0)
(31,42,0)
(42,6,0)
(36,44,0)
(9,15,0)
(8,10,0)
(24,48,0)
(2,39,0)
(7,28,0)
(26,6,0)
(37,31,0)
(21,0,0)
(20,37,0)
(8,14,0)
(25,24,0)
(33,18,0)
(35,37,0)
(13,5,0)
(30,37,0)
(27,18,0)
(18,44,0)
(23,2,0)
(42,31,0)
(15,9,0)
(48,44,0)
(37,39,0)
(43,39,0)
(2,37,0)
(38,2,0)
(34,11,0)
(3,34,0)
(31,37,0)
(6,40,0)
(0,39,0)
(16,40,0)
(6,42,0)
(0,37,0)
(24,28,0)
(8,28,0)
(29,8,0)
(40,6,0)
(32,20,0)
(6,48,0)
(4,35,0)
(46,48,0)
(31,1,0)
(9,48,0)
(35,39,0)
(14,8,0)
(48,24,0)
(28,8,0)
(1,31,0)
(12,41,1)
(41,48,1)
(3,9,1)
(48,24,1)
(8,10,1)
(34,3,1)
(9,48,1)
(31,1,1)
(20,32,1)
(32,47,1)
(47,37,1)
(29,7,1)
(26,30,1)
(23,20,1)
(24,25,1)
(35,37,1)
(25,46,1)
(2,38,1)
(5,13,1)
(16,26,1)
(0,21,1)
(8,29,1)
(38,23,1)
(31,42,1)
(6,48,1)
(4,0,1)
(19,5,1)
(45,34,1)
(35,4,1)
(30,9,1)
(21,2,1)
(15,12,1)
(28,8,1)
(37,31,1)
(24,28,1)
(2,37,1)
(9,15,1)
(45,35,1)
(46,28,1)
(6,40,1)
(20,37,1)
(23,19,1)
(0,37,1)
(40,16,1)
(8,14,1)
(42,6,1)
(13,20,1)
(9,48,2)
(6,48,2)
(8,10,2)
(19,20,2)
(0,9,2)
(35,37,2)
(42,6,2)
(2,37,2)
(37,9,2)
(21,9,2)
(23,9,2)
(2,9,2)
(6,40,2)
(42,9,2)
(0,37,2)
(34,9,2)
(4,9,2)
(30,9,2)
(38,9,2)
(32,9,2)
(48,24,2)
(26,9,2)
(6,9,2)
(28,8,2)
(8,14,2)
(47,9,2)
(19,5,2)
(35,9,2)
(37,31,2)
(31,9,2)
(40,9,2)
(20,37,2)
(9,15,2)
(5,20,2)
(13,20,2)
(3,9,2)
(31,1,2)
(20,9,2)
(16,9,2)
(31,42,2)
(24,28,2)
-----------------------------------
(0,printWLine(myString)
(1,wchar_t *)
(2,wcscpy(myString, HELLO_STRING)
(3,"Input is less than the length of the source string")
(4,myString)
(5,-1)
(6,data*sizeof(wchar_t)
(7,dataPtr)
(8,(size_t *)
(9,data > wcslen(HELLO_STRING)
(10,void * dataVoidPtr)
(11,)
(12,HELLO_STRING)
(13,1)
(14,size_t *)
(15,wcslen(HELLO_STRING)
(16,wchar_t)
(17,dataPtr)
(18,)
(19,exit(-1)
(20,myString == NULL)
(21,myString)
(22,)
(23,myString)
(24,*dataPtr)
(25,dataPtr)
(26,data)
(27,myString)
(28,* dataPtr = (size_t *)
(29,dataVoidPtr)
(30,myString)
(31,(wchar_t *)
(32,NULL)
(33,if (data > wcslen(HELLO_STRING)
(34,printLine("Input is less than the length of the source string")
(35,free(myString)
(36,data)
(37,myString = (wchar_t *)
(38,HELLO_STRING)
(39,)
(40,sizeof(wchar_t)
(41,data)
(42,malloc(data*sizeof(wchar_t)
(43,if (myString == NULL)
(44,)
(45,RET)
(46,data)
(47,myString)
(48,data = (*dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^