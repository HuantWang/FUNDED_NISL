-----label-----
0
-----code-----
static int packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
{
	int ret;
	bool has_room;

	if (po->prot_hook.func == tpacket_rcv) {
		spin_lock(&po->sk.sk_receive_queue.lock);
		ret = __packet_rcv_has_room(po, skb);
		spin_unlock(&po->sk.sk_receive_queue.lock);
	} else {
		ret = __packet_rcv_has_room(po, skb);
	}

	has_room = ret == ROOM_NORMAL;
	if (po->pressure == has_room)
		xchg(&po->pressure, !has_room);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
31,32
31,33
32,33
36,37
38,39
38,40
38,41
39,40
40,41
40,42
41,42
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
56,57
56,58
56,59
57,58
59,60
61,62
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
78,79
78,80
79,80
81,82
81,83
81,84
82,83
84,85
86,87
88,89
89,90
89,91
90,91
92,93
92,94
93,94
95,96
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
106,109
107,108
109,110
110,111
110,112
111,112
114,115
115,116
117,118
118,119
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,25,27,33,34,35,37,42,48,49,50,51,55,58,60,62,66,72,73,74,75,80,83,85,87,91,94,96,101,102,104,108,112,113,116,119
-----computeFrom-----
29,30
29,31
53,54
53,55
78,79
78,80
89,90
89,91
92,93
92,94
98,99
98,100
-----guardedBy-----
33,72
104,116
102,113
101,112
-----guardedByNegation-----
33,85
-----lastLexicalUse-----
33,85
-----jump-----
33,85
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb){	int ret;	bool has_room;	if (po->prot_hook.func == tpacket_rcv) {		spin_lock(&po->sk.sk_receive_queue.lock);		ret = __packet_rcv_has_room(po, skb);		spin_unlock(&po->sk.sk_receive_queue.lock);	} else {		ret = __packet_rcv_has_room(po, skb);	}	has_room = ret == ROOM_NORMAL;	if (po->pressure == has_room)		xchg(&po->pressure, !has_room);	return ret;}
static int
packet_rcv_has_room(struct packet_sock *po, struct sk_buff *skb)
packet_rcv_has_room
struct packet_sock *po
struct packet_sock
packet_sock
*po
*
po
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
{	int ret;	bool has_room;	if (po->prot_hook.func == tpacket_rcv) {		spin_lock(&po->sk.sk_receive_queue.lock);		ret = __packet_rcv_has_room(po, skb);		spin_unlock(&po->sk.sk_receive_queue.lock);	} else {		ret = __packet_rcv_has_room(po, skb);	}	has_room = ret == ROOM_NORMAL;	if (po->pressure == has_room)		xchg(&po->pressure, !has_room);	return ret;}
int ret;
int ret;
int
ret
ret
bool has_room;
bool has_room;
bool
has_room
has_room
if (po->prot_hook.func == tpacket_rcv) {		spin_lock(&po->sk.sk_receive_queue.lock);		ret = __packet_rcv_has_room(po, skb);		spin_unlock(&po->sk.sk_receive_queue.lock);	} else {		ret = __packet_rcv_has_room(po, skb);	}
po->prot_hook.func == tpacket_rcv
po->prot_hook.func
po->prot_hook
po
po
prot_hook
func
tpacket_rcv
tpacket_rcv
{		spin_lock(&po->sk.sk_receive_queue.lock);		ret = __packet_rcv_has_room(po, skb);		spin_unlock(&po->sk.sk_receive_queue.lock);	}
spin_lock(&po->sk.sk_receive_queue.lock);
spin_lock(&po->sk.sk_receive_queue.lock)
spin_lock
spin_lock
&po->sk.sk_receive_queue.lock
po->sk.sk_receive_queue.lock
po->sk.sk_receive_queue
po->sk
po
po
sk
sk_receive_queue
lock
ret = __packet_rcv_has_room(po, skb);
ret = __packet_rcv_has_room(po, skb)
ret
ret
__packet_rcv_has_room(po, skb)
__packet_rcv_has_room
__packet_rcv_has_room
po
po
skb
skb
spin_unlock(&po->sk.sk_receive_queue.lock);
spin_unlock(&po->sk.sk_receive_queue.lock)
spin_unlock
spin_unlock
&po->sk.sk_receive_queue.lock
po->sk.sk_receive_queue.lock
po->sk.sk_receive_queue
po->sk
po
po
sk
sk_receive_queue
lock
{		ret = __packet_rcv_has_room(po, skb);	}
ret = __packet_rcv_has_room(po, skb);
ret = __packet_rcv_has_room(po, skb)
ret
ret
__packet_rcv_has_room(po, skb)
__packet_rcv_has_room
__packet_rcv_has_room
po
po
skb
skb
has_room = ret == ROOM_NORMAL;
has_room = ret == ROOM_NORMAL
has_room
has_room
ret == ROOM_NORMAL
ret
ret
ROOM_NORMAL
ROOM_NORMAL
if (po->pressure == has_room)		xchg(&po->pressure, !has_room);
po->pressure == has_room
po->pressure
po
po
pressure
has_room
has_room
xchg(&po->pressure, !has_room);
xchg(&po->pressure, !has_room)
xchg
xchg
&po->pressure
po->pressure
po
po
pressure
!has_room
has_room
has_room
return ret;
ret
ret
-----joern-----
(16,21,0)
(18,44,0)
(37,54,0)
(58,13,0)
(50,13,0)
(52,55,0)
(25,56,0)
(63,7,0)
(2,42,0)
(1,54,0)
(54,18,0)
(11,52,0)
(24,32,0)
(8,45,0)
(12,24,0)
(15,7,0)
(40,36,0)
(17,36,0)
(21,48,0)
(51,59,0)
(43,60,0)
(10,59,0)
(14,20,0)
(41,59,0)
(20,24,0)
(31,17,0)
(7,63,0)
(32,35,0)
(35,32,0)
(61,51,0)
(52,45,0)
(19,7,0)
(44,48,0)
(34,21,0)
(50,35,0)
(47,40,0)
(60,43,0)
(3,43,0)
(44,36,0)
(39,60,0)
(18,13,0)
(4,18,0)
(46,42,0)
(56,25,0)
(62,59,0)
(21,16,0)
(49,51,0)
(51,18,0)
(33,44,0)
(9,55,0)
(0,43,0)
(51,16,0)
(57,32,0)
(29,44,0)
(26,2,0)
(63,56,0)
(55,36,0)
(45,52,0)
(0,58,0)
(42,59,0)
(53,40,0)
(16,30,0)
(2,17,0)
(22,55,0)
(56,63,0)
(60,40,0)
(42,54,0)
(21,36,0)
(44,18,0)
(28,17,0)
(58,0,0)
(25,42,0)
(55,52,0)
(38,59,0)
(32,24,0)
(7,36,0)
(20,36,0)
(54,16,0)
(43,0,0)
(5,16,0)
(17,2,0)
(23,21,0)
(24,20,0)
(40,60,0)
(54,42,0)
(6,20,0)
(27,25,0)
(35,50,0)
(24,12,1)
(18,44,1)
(9,22,1)
(43,60,1)
(19,15,1)
(61,51,1)
(7,19,1)
(42,54,1)
(32,57,1)
(57,24,1)
(17,36,1)
(51,18,1)
(25,42,1)
(4,58,1)
(56,63,1)
(1,37,1)
(60,39,1)
(21,36,1)
(46,50,1)
(58,0,1)
(15,2,1)
(34,23,1)
(40,36,1)
(54,16,1)
(32,24,1)
(20,36,1)
(21,34,1)
(16,21,1)
(45,8,1)
(49,56,1)
(49,2,1)
(17,28,1)
(44,33,1)
(50,35,1)
(44,36,1)
(2,42,1)
(26,17,1)
(44,48,1)
(60,40,1)
(29,4,1)
(0,43,1)
(24,20,1)
(56,25,1)
(37,46,1)
(7,36,1)
(14,6,1)
(51,16,1)
(63,7,1)
(53,47,1)
(27,63,1)
(52,11,1)
(6,18,1)
(43,3,1)
(12,20,1)
(2,26,1)
(47,45,1)
(33,29,1)
(28,31,1)
(3,60,1)
(46,16,1)
(8,52,1)
(25,27,1)
(21,48,1)
(23,5,1)
(31,42,1)
(54,18,1)
(40,53,1)
(52,55,1)
(35,32,1)
(5,45,1)
(55,9,1)
(45,52,1)
(54,1,1)
(20,14,1)
(39,40,1)
(51,49,1)
(55,36,1)
(11,55,1)
(2,17,1)
(44,48,2)
(54,18,2)
(57,45,2)
(16,21,2)
(50,45,2)
(6,45,2)
(53,45,2)
(51,18,2)
(55,36,2)
(25,42,2)
(43,45,2)
(40,45,2)
(45,52,2)
(56,63,2)
(40,36,2)
(24,45,2)
(58,0,2)
(27,2,2)
(19,2,2)
(0,43,2)
(17,36,2)
(2,42,2)
(63,2,2)
(2,17,2)
(35,45,2)
(32,45,2)
(44,45,2)
(16,45,2)
(21,48,2)
(33,45,2)
(29,45,2)
(54,16,2)
(52,55,2)
(58,45,2)
(60,40,2)
(0,45,2)
(3,45,2)
(35,32,2)
(24,20,2)
(47,45,2)
(14,45,2)
(7,36,2)
(61,51,2)
(5,45,2)
(23,45,2)
(39,45,2)
(32,24,2)
(25,2,2)
(20,36,2)
(4,45,2)
(21,36,2)
(50,35,2)
(56,2,2)
(20,45,2)
(56,25,2)
(60,45,2)
(34,45,2)
(43,60,2)
(44,36,2)
(21,45,2)
(51,16,2)
(42,54,2)
(18,45,2)
(63,7,2)
(15,2,2)
(12,45,2)
(18,44,2)
(7,2,2)
-----------------------------------
(0,&po->sk.sk_receive_queue.lock)
(1,ROOM_NORMAL)
(2,po->pressure == has_room)
(3,lock)
(4,ret)
(5,ret)
(6,po)
(7,po->pressure)
(8,tpacket_rcv)
(9,prot_hook)
(10,if (po->pressure == has_room)
(11,func)
(12,sk_receive_queue)
(13,)
(14,sk)
(15,po)
(16,ret = __packet_rcv_has_room(po, skb)
(17,po->pressure)
(18,ret = __packet_rcv_has_room(po, skb)
(19,pressure)
(20,po->sk)
(21,__packet_rcv_has_room(po, skb)
(22,po)
(23,po)
(24,po->sk.sk_receive_queue)
(25,!has_room)
(26,has_room)
(27,has_room)
(28,pressure)
(29,po)
(30,)
(31,po)
(32,po->sk.sk_receive_queue.lock)
(33,skb)
(34,skb)
(35,&po->sk.sk_receive_queue.lock)
(36,struct packet_sock *po)
(37,ret)
(38,if (po->prot_hook.func == tpacket_rcv)
(39,sk_receive_queue)
(40,po->sk)
(41,has_room)
(42,has_room = ret == ROOM_NORMAL)
(43,po->sk.sk_receive_queue.lock)
(44,__packet_rcv_has_room(po, skb)
(45,po->prot_hook.func == tpacket_rcv)
(46,has_room)
(47,po)
(48,struct sk_buff *skb)
(49,ret)
(50,spin_unlock(&po->sk.sk_receive_queue.lock)
(51,return ret;)
(52,po->prot_hook.func)
(53,sk)
(54,ret == ROOM_NORMAL)
(55,po->prot_hook)
(56,xchg(&po->pressure, !has_room)
(57,lock)
(58,spin_lock(&po->sk.sk_receive_queue.lock)
(59,)
(60,po->sk.sk_receive_queue)
(61,RET)
(62,ret)
(63,&po->pressure)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^