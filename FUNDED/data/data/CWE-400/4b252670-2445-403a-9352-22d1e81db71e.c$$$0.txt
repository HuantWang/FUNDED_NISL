-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
91,94
92,93
92,94
93,94
96,97
97,98
98,99
98,100
99,100
102,103
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,100,101,106,108
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(56,2,0)
(30,46,0)
(22,16,0)
(10,29,0)
(48,12,0)
(20,19,0)
(6,31,0)
(18,29,0)
(37,9,0)
(31,48,0)
(31,6,0)
(1,47,0)
(50,56,0)
(12,48,0)
(57,20,0)
(42,16,0)
(6,55,0)
(40,19,0)
(14,51,0)
(11,46,0)
(44,52,0)
(9,38,0)
(51,38,0)
(45,49,0)
(6,38,0)
(18,44,0)
(52,44,0)
(7,44,0)
(54,57,0)
(28,33,0)
(29,38,0)
(29,18,0)
(44,18,0)
(24,48,0)
(46,47,0)
(38,19,0)
(36,47,0)
(11,38,0)
(34,17,0)
(4,42,0)
(57,9,0)
(38,6,0)
(27,16,0)
(9,57,0)
(35,46,0)
(15,20,0)
(13,12,0)
(55,6,0)
(17,19,0)
(42,17,0)
(48,31,0)
(21,49,0)
(3,53,0)
(8,47,0)
(39,29,0)
(11,41,0)
(3,25,0)
(53,3,0)
(58,11,0)
(26,53,0)
(23,38,0)
(5,51,0)
(12,13,0)
(7,19,0)
(44,7,0)
(16,38,0)
(43,9,0)
(32,33,0)
(16,42,0)
(39,20,1)
(9,43,1)
(45,21,1)
(42,16,1)
(21,46,1)
(14,38,1)
(32,28,1)
(5,14,1)
(27,51,1)
(28,7,1)
(15,57,1)
(22,27,1)
(18,29,1)
(27,3,1)
(11,58,1)
(58,33,1)
(7,44,1)
(46,35,1)
(16,38,1)
(43,37,1)
(31,48,1)
(12,13,1)
(9,38,1)
(29,38,1)
(49,45,1)
(57,9,1)
(35,30,1)
(56,50,1)
(0,56,1)
(51,5,1)
(48,12,1)
(0,11,1)
(34,42,1)
(23,49,1)
(44,18,1)
(11,46,1)
(29,10,1)
(51,38,1)
(38,6,1)
(20,15,1)
(33,32,1)
(53,26,1)
(12,24,1)
(37,17,1)
(42,4,1)
(4,16,1)
(11,38,1)
(26,51,1)
(6,55,1)
(50,33,1)
(44,52,1)
(10,39,1)
(16,22,1)
(17,34,1)
(57,54,1)
(28,49,1)
(3,53,1)
(54,9,1)
(24,23,1)
(6,31,1)
(56,33,2)
(34,49,2)
(48,49,2)
(17,49,2)
(44,52,2)
(6,55,2)
(38,6,2)
(50,33,2)
(29,49,2)
(23,49,2)
(48,12,2)
(44,18,2)
(18,29,2)
(3,51,2)
(6,31,2)
(38,49,2)
(53,51,2)
(42,49,2)
(12,49,2)
(42,16,2)
(3,53,2)
(7,44,2)
(11,46,2)
(26,51,2)
(22,49,2)
(57,9,2)
(54,49,2)
(9,38,2)
(43,49,2)
(16,38,2)
(11,33,2)
(57,49,2)
(31,48,2)
(20,49,2)
(16,49,2)
(58,33,2)
(10,49,2)
(6,49,2)
(11,38,2)
(51,38,2)
(12,13,2)
(37,49,2)
(4,49,2)
(29,38,2)
(39,49,2)
(24,49,2)
(31,49,2)
(51,49,2)
(15,49,2)
(9,49,2)
(44,49,2)
(27,49,2)
(14,49,2)
(18,49,2)
(7,49,2)
(5,49,2)
-----------------------------------
(0,RET)
(1,data)
(2,)
(3,exit(-1)
(4,intOne)
(5,NULL)
(6,(struct _twoIntsStruct *)
(7,printStructLine((twoIntsStruct *)
(8,if(GLOBAL_CONST_FIVE!=5)
(9,data[0])
(10,0)
(11,free(data)
(12,sizeof(struct _twoIntsStruct)
(13,struct _twoIntsStruct)
(14,data)
(15,0)
(16,data[0])
(17,data[0].intOne = 0)
(18,&data[0])
(19,)
(20,data[0].intTwo = 0)
(21,GLOBAL_CONST_FIVE)
(22,0)
(23,data)
(24,100)
(25,)
(26,1)
(27,data)
(28,GLOBAL_CONST_FIVE)
(29,data[0])
(30,data)
(31,malloc(100*sizeof(struct _twoIntsStruct)
(32,5)
(33,GLOBAL_CONST_FIVE!=5)
(34,0)
(35,NULL)
(36,if(GLOBAL_CONST_FIVE==5)
(37,data)
(38,data = (struct _twoIntsStruct *)
(39,data)
(40,if (data == NULL)
(41,)
(42,data[0].intOne)
(43,0)
(44,(twoIntsStruct *)
(45,5)
(46,data = NULL)
(47,)
(48,100*sizeof(struct _twoIntsStruct)
(49,GLOBAL_CONST_FIVE==5)
(50,"Benign, fixed string")
(51,data == NULL)
(52,twoIntsStruct *)
(53,-1)
(54,intTwo)
(55,struct _twoIntsStruct *)
(56,printLine("Benign, fixed string")
(57,data[0].intTwo)
(58,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^