-----label-----
0
-----code-----
static int tcp_handle(tcp_context_t *tcp, int fd,
                      struct iovec *rx, struct iovec *tx)
{
	/* Create query processing parameter. */
	struct sockaddr_storage ss;
	memset(&ss, 0, sizeof(struct sockaddr_storage));
	struct process_query_param param = {0};
	param.socket = fd;
	param.remote = &ss;
	param.server = tcp->server;
	param.thread_id = tcp->thread_id;
	rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;
	tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;

	/* Receive peer name. */
	socklen_t addrlen = sizeof(struct sockaddr_storage);
	if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {
		;
	}

	/* Timeout. */
	rcu_read_lock();
	struct timeval tmout = { conf()->max_conn_reply, 0 };
	rcu_read_unlock();

	/* Receive data. */
	int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);
	if (ret <= 0) {
		dbg_net("tcp: client on fd=%d disconnected\n", fd);
		if (ret == KNOT_EAGAIN) {
			rcu_read_lock();
			char addr_str[SOCKADDR_STRLEN] = {0};
			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
			log_warning("TCP, connection timed out, address '%s'",
			            addr_str);
			rcu_read_unlock();
		}
		return KNOT_ECONNREFUSED;
	} else {
		rx->iov_len = ret;
	}

	/* Create packets. */
	mm_ctx_t *mm = tcp->overlay.mm;
	knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);
	knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);

	/* Initialize processing overlay. */
	knot_overlay_init(&tcp->overlay, mm);
	knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);

	/* Input packet. */
	int state = knot_overlay_in(&tcp->overlay, query);

	/* Resolve until NOOP or finished. */
	ret = KNOT_EOK;
	while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {
		state = knot_overlay_out(&tcp->overlay, ans);

		/* Send, if response generation passed and wasn't ignored. */
		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {
			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {
				ret = KNOT_ECONNREFUSED;
				break;
			}
		}
	}

	/* Reset after processing. */
	knot_overlay_finish(&tcp->overlay);
	knot_overlay_deinit(&tcp->overlay);

	/* Cleanup. */
	knot_pkt_free(&query);
	knot_pkt_free(&ans);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
27,52
27,53
27,54
27,55
27,56
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
35,38
35,39
36,37
38,39
39,40
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
83,84
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
113,114
113,115
115,116
116,117
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
134,135
135,136
137,138
138,139
141,142
143,144
144,145
145,146
147,148
148,149
148,150
149,150
151,152
151,153
153,154
154,155
154,156
155,156
155,157
156,157
157,158
161,162
162,163
163,164
165,166
166,167
166,168
168,169
168,170
170,171
171,172
171,173
171,174
171,175
171,176
172,173
174,175
176,177
176,178
177,178
180,181
180,182
181,182
184,185
185,186
187,188
187,189
187,190
188,189
188,190
189,190
192,193
192,194
192,195
193,194
194,195
194,196
194,197
195,196
198,199
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
206,209
206,210
206,211
207,208
208,209
209,210
211,212
212,213
212,214
214,215
214,216
214,217
216,217
217,218
219,220
220,221
222,223
223,224
223,225
223,226
223,227
224,225
226,227
228,229
229,230
230,231
232,233
233,234
235,236
236,237
236,238
236,239
237,238
240,241
242,243
243,244
244,245
246,247
247,248
249,250
250,251
251,252
251,253
252,253
252,254
253,254
256,257
258,259
259,260
259,261
260,261
262,263
262,264
262,265
265,266
266,267
266,268
267,268
267,269
268,269
272,273
273,274
273,275
274,275
276,277
276,278
276,279
279,280
280,281
280,282
280,283
280,284
281,282
283,284
283,285
284,285
287,288
287,289
288,289
291,292
293,294
294,295
294,296
295,296
297,298
297,299
297,300
300,301
301,302
301,303
301,304
301,305
302,303
304,305
304,306
305,306
308,309
308,310
309,310
312,313
314,315
315,316
315,317
315,318
316,317
318,319
319,320
319,321
320,321
323,324
325,326
326,327
326,328
326,329
326,330
327,328
329,330
330,331
330,332
331,332
334,335
336,337
337,338
339,340
340,341
340,342
342,343
342,344
344,345
345,346
345,347
345,348
346,347
348,349
349,350
349,351
350,351
353,354
355,356
356,357
356,358
357,358
359,360
361,362
361,363
362,363
362,364
363,364
365,366
366,367
366,368
367,368
369,370
371,372
371,373
372,373
373,374
373,375
374,375
376,377
376,378
376,379
377,378
379,380
380,381
380,382
381,382
384,385
386,387
386,388
387,388
387,389
388,389
388,390
389,390
389,391
390,391
394,395
395,396
396,397
396,398
397,398
399,400
400,401
400,402
401,402
403,404
405,406
406,407
406,408
407,408
407,409
408,409
408,410
408,411
408,412
409,410
411,412
413,414
413,415
414,415
417,418
417,419
418,419
421,422
421,423
422,423
425,426
425,427
426,427
427,428
427,429
428,429
430,431
433,434
434,435
434,436
435,436
437,438
438,439
438,440
439,440
442,443
443,444
443,445
444,445
446,447
447,448
447,449
448,449
451,452
452,453
452,454
453,454
455,456
456,457
458,459
459,460
459,461
460,461
462,463
463,464
465,466
466,467
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,23,25,26,31,33,37,40,41,45,46,50,52,55,60,61,63,68,69,72,77,78,81,82,87,88,91,92,97,98,100,105,106,108,112,114,119,120,125,127,131,133,136,139,140,142,146,150,152,158,159,160,164,167,169,173,175,178,179,182,183,186,190,191,196,197,199,203,205,210,213,215,218,221,225,227,231,234,238,239,241,245,248,254,255,257,261,263,264,269,270,271,275,277,278,282,285,286,289,290,292,296,298,299,303,306,307,310,311,313,317,321,322,324,328,332,333,335,338,341,343,347,351,352,354,358,360,364,368,370,375,378,382,383,385,391,392,393,398,402,404,410,412,415,416,419,420,423,424,429,431,432,436,440,441,445,449,450,454,457,461,464,467
-----computeFrom-----
57,58
57,59
65,66
65,67
74,75
74,76
84,85
84,86
94,95
94,96
102,103
102,104
122,123
122,124
188,189
188,190
201,202
201,203
251,252
251,253
356,357
356,358
362,363
362,364
366,367
366,368
373,374
373,375
387,388
387,389
388,389
388,390
396,397
396,398
400,401
400,402
407,408
407,409
427,428
427,429
-----guardedBy-----
190,203
392,424
391,423
-----guardedByNegation-----
190,257
-----lastLexicalUse-----
190,257
-----jump-----
190,257
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;FieldReference;FunctionCallExpression;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tcp_handle(tcp_context_t *tcp, int fd,                      struct iovec *rx, struct iovec *tx){	/* Create query processing parameter. */	struct sockaddr_storage ss;	memset(&ss, 0, sizeof(struct sockaddr_storage));	struct process_query_param param = {0};	param.socket = fd;	param.remote = &ss;	param.server = tcp->server;	param.thread_id = tcp->thread_id;	rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	/* Receive peer name. */	socklen_t addrlen = sizeof(struct sockaddr_storage);	if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {		;	}	/* Timeout. */	rcu_read_lock();	struct timeval tmout = { conf()->max_conn_reply, 0 };	rcu_read_unlock();	/* Receive data. */	int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);	if (ret <= 0) {		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("TCP, connection timed out, address '%s'",			            addr_str);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	} else {		rx->iov_len = ret;	}	/* Create packets. */	mm_ctx_t *mm = tcp->overlay.mm;	knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);	knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);	/* Initialize processing overlay. */	knot_overlay_init(&tcp->overlay, mm);	knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);	/* Input packet. */	int state = knot_overlay_in(&tcp->overlay, query);	/* Resolve until NOOP or finished. */	ret = KNOT_EOK;	while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}	/* Reset after processing. */	knot_overlay_finish(&tcp->overlay);	knot_overlay_deinit(&tcp->overlay);	/* Cleanup. */	knot_pkt_free(&query);	knot_pkt_free(&ans);	return ret;}
static int
tcp_handle(tcp_context_t *tcp, int fd,                      struct iovec *rx, struct iovec *tx)
tcp_handle
tcp_context_t *tcp
tcp_context_t
tcp_context_t
*tcp
*
tcp
int fd
int
fd
fd
struct iovec *rx
struct iovec
iovec
*rx
*
rx
struct iovec *tx
struct iovec
iovec
*tx
*
tx
{	/* Create query processing parameter. */	struct sockaddr_storage ss;	memset(&ss, 0, sizeof(struct sockaddr_storage));	struct process_query_param param = {0};	param.socket = fd;	param.remote = &ss;	param.server = tcp->server;	param.thread_id = tcp->thread_id;	rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;	/* Receive peer name. */	socklen_t addrlen = sizeof(struct sockaddr_storage);	if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {		;	}	/* Timeout. */	rcu_read_lock();	struct timeval tmout = { conf()->max_conn_reply, 0 };	rcu_read_unlock();	/* Receive data. */	int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);	if (ret <= 0) {		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("TCP, connection timed out, address '%s'",			            addr_str);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	} else {		rx->iov_len = ret;	}	/* Create packets. */	mm_ctx_t *mm = tcp->overlay.mm;	knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);	knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);	/* Initialize processing overlay. */	knot_overlay_init(&tcp->overlay, mm);	knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);	/* Input packet. */	int state = knot_overlay_in(&tcp->overlay, query);	/* Resolve until NOOP or finished. */	ret = KNOT_EOK;	while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}	/* Reset after processing. */	knot_overlay_finish(&tcp->overlay);	knot_overlay_deinit(&tcp->overlay);	/* Cleanup. */	knot_pkt_free(&query);	knot_pkt_free(&ans);	return ret;}
struct sockaddr_storage ss;
struct sockaddr_storage ss;
struct sockaddr_storage
sockaddr_storage
ss
ss
memset(&ss, 0, sizeof(struct sockaddr_storage));
memset(&ss, 0, sizeof(struct sockaddr_storage))
memset
memset
&ss
ss
ss
0
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

struct process_query_param param = {0};
struct process_query_param param = {0};
struct process_query_param
process_query_param
param = {0}
param
= {0}
{0}
0
param.socket = fd;
param.socket = fd
param.socket
param
param
socket
fd
fd
param.remote = &ss;
param.remote = &ss
param.remote
param
param
remote
&ss
ss
ss
param.server = tcp->server;
param.server = tcp->server
param.server
param
param
server
tcp->server
tcp
tcp
server
param.thread_id = tcp->thread_id;
param.thread_id = tcp->thread_id
param.thread_id
param
param
thread_id
tcp->thread_id
tcp
tcp
thread_id
rx->iov_len = KNOT_WIRE_MAX_PKTSIZE;
rx->iov_len = KNOT_WIRE_MAX_PKTSIZE
rx->iov_len
rx
rx
iov_len
KNOT_WIRE_MAX_PKTSIZE
KNOT_WIRE_MAX_PKTSIZE
tx->iov_len = KNOT_WIRE_MAX_PKTSIZE;
tx->iov_len = KNOT_WIRE_MAX_PKTSIZE
tx->iov_len
tx
tx
iov_len
KNOT_WIRE_MAX_PKTSIZE
KNOT_WIRE_MAX_PKTSIZE
socklen_t addrlen = sizeof(struct sockaddr_storage);
socklen_t addrlen = sizeof(struct sockaddr_storage);
socklen_t
socklen_t
addrlen = sizeof(struct sockaddr_storage)
addrlen
= sizeof(struct sockaddr_storage)
sizeof(struct sockaddr_storage)
struct sockaddr_storage
struct sockaddr_storage
sockaddr_storage

if (getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0) {		;	}
getpeername(fd, (struct sockaddr *)&ss, &addrlen) < 0
getpeername(fd, (struct sockaddr *)&ss, &addrlen)
getpeername
getpeername
fd
fd
(struct sockaddr *)&ss
struct sockaddr *
struct sockaddr
sockaddr
*
*
&ss
ss
ss
&addrlen
addrlen
addrlen
0
{		;	}
;
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
struct timeval tmout = { conf()->max_conn_reply, 0 };
struct timeval tmout = { conf()->max_conn_reply, 0 };
struct timeval
timeval
tmout = { conf()->max_conn_reply, 0 }
tmout
= { conf()->max_conn_reply, 0 }
{ conf()->max_conn_reply, 0 }
conf()->max_conn_reply
conf()
conf
conf
max_conn_reply
0
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);
int ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout);
int
ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
ret
= tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
tcp_recv_msg
tcp_recv_msg
fd
fd
rx->iov_base
rx
rx
iov_base
rx->iov_len
rx
rx
iov_len
&tmout
tmout
tmout
if (ret <= 0) {		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("TCP, connection timed out, address '%s'",			            addr_str);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	} else {		rx->iov_len = ret;	}
ret <= 0
ret
ret
0
{		dbg_net("tcp: client on fd=%d disconnected\n", fd);		if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("TCP, connection timed out, address '%s'",			            addr_str);			rcu_read_unlock();		}		return KNOT_ECONNREFUSED;	}
dbg_net("tcp: client on fd=%d disconnected\n", fd);
dbg_net("tcp: client on fd=%d disconnected\n", fd)
dbg_net
dbg_net
"tcp: client on fd=%d disconnected\n"
fd
fd
if (ret == KNOT_EAGAIN) {			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("TCP, connection timed out, address '%s'",			            addr_str);			rcu_read_unlock();		}
ret == KNOT_EAGAIN
ret
ret
KNOT_EAGAIN
KNOT_EAGAIN
{			rcu_read_lock();			char addr_str[SOCKADDR_STRLEN] = {0};			sockaddr_tostr(addr_str, sizeof(addr_str), &ss);			log_warning("TCP, connection timed out, address '%s'",			            addr_str);			rcu_read_unlock();		}
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
char addr_str[SOCKADDR_STRLEN] = {0};
char addr_str[SOCKADDR_STRLEN] = {0};
char
addr_str[SOCKADDR_STRLEN] = {0}
addr_str
[SOCKADDR_STRLEN]
SOCKADDR_STRLEN
SOCKADDR_STRLEN
= {0}
{0}
0
sockaddr_tostr(addr_str, sizeof(addr_str), &ss);
sockaddr_tostr(addr_str, sizeof(addr_str), &ss)
sockaddr_tostr
sockaddr_tostr
addr_str
addr_str
sizeof(addr_str)
(addr_str)
addr_str
addr_str
&ss
ss
ss
log_warning("TCP, connection timed out, address '%s'",			            addr_str);
log_warning("TCP, connection timed out, address '%s'",			            addr_str)
log_warning
log_warning
"TCP, connection timed out, address '%s'"
addr_str
addr_str
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
return KNOT_ECONNREFUSED;
KNOT_ECONNREFUSED
KNOT_ECONNREFUSED
{		rx->iov_len = ret;	}
rx->iov_len = ret;
rx->iov_len = ret
rx->iov_len
rx
rx
iov_len
ret
ret
mm_ctx_t *mm = tcp->overlay.mm;
mm_ctx_t *mm = tcp->overlay.mm;
mm_ctx_t
mm_ctx_t
*mm = tcp->overlay.mm
*
mm
= tcp->overlay.mm
tcp->overlay.mm
tcp->overlay
tcp
tcp
overlay
mm
knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);
knot_pkt_t *ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm);
knot_pkt_t
knot_pkt_t
*ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm)
*
ans
= knot_pkt_new(tx->iov_base, tx->iov_len, mm)
knot_pkt_new(tx->iov_base, tx->iov_len, mm)
knot_pkt_new
knot_pkt_new
tx->iov_base
tx
tx
iov_base
tx->iov_len
tx
tx
iov_len
mm
mm
knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);
knot_pkt_t *query = knot_pkt_new(rx->iov_base, rx->iov_len, mm);
knot_pkt_t
knot_pkt_t
*query = knot_pkt_new(rx->iov_base, rx->iov_len, mm)
*
query
= knot_pkt_new(rx->iov_base, rx->iov_len, mm)
knot_pkt_new(rx->iov_base, rx->iov_len, mm)
knot_pkt_new
knot_pkt_new
rx->iov_base
rx
rx
iov_base
rx->iov_len
rx
rx
iov_len
mm
mm
knot_overlay_init(&tcp->overlay, mm);
knot_overlay_init(&tcp->overlay, mm)
knot_overlay_init
knot_overlay_init
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
mm
mm
knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param);
knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param)
knot_overlay_add
knot_overlay_add
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
NS_PROC_QUERY
NS_PROC_QUERY
&param
param
param
int state = knot_overlay_in(&tcp->overlay, query);
int state = knot_overlay_in(&tcp->overlay, query);
int
state = knot_overlay_in(&tcp->overlay, query)
state
= knot_overlay_in(&tcp->overlay, query)
knot_overlay_in(&tcp->overlay, query)
knot_overlay_in
knot_overlay_in
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
query
query
ret = KNOT_EOK;
ret = KNOT_EOK
ret
ret
KNOT_EOK
KNOT_EOK
while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)) {		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}
state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
state
state
(KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL
KNOT_NS_PROC_FULL
KNOT_NS_PROC_FULL
KNOT_NS_PROC_FAIL
KNOT_NS_PROC_FAIL
{		state = knot_overlay_out(&tcp->overlay, ans);		/* Send, if response generation passed and wasn't ignored. */		if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}	}
state = knot_overlay_out(&tcp->overlay, ans);
state = knot_overlay_out(&tcp->overlay, ans)
state
state
knot_overlay_out(&tcp->overlay, ans)
knot_overlay_out
knot_overlay_out
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
ans
ans
if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))) {			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}
ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))
ans->size > 0
ans->size
ans
ans
size
0
!(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))
(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP))
state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
state
state
(KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP
KNOT_NS_PROC_FAIL
KNOT_NS_PROC_FAIL
KNOT_NS_PROC_NOOP
KNOT_NS_PROC_NOOP
{			if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}		}
if (tcp_send_msg(fd, ans->wire, ans->size) != ans->size) {				ret = KNOT_ECONNREFUSED;				break;			}
tcp_send_msg(fd, ans->wire, ans->size) != ans->size
tcp_send_msg(fd, ans->wire, ans->size)
tcp_send_msg
tcp_send_msg
fd
fd
ans->wire
ans
ans
wire
ans->size
ans
ans
size
ans->size
ans
ans
size
{				ret = KNOT_ECONNREFUSED;				break;			}
ret = KNOT_ECONNREFUSED;
ret = KNOT_ECONNREFUSED
ret
ret
KNOT_ECONNREFUSED
KNOT_ECONNREFUSED
break;
knot_overlay_finish(&tcp->overlay);
knot_overlay_finish(&tcp->overlay)
knot_overlay_finish
knot_overlay_finish
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
knot_overlay_deinit(&tcp->overlay);
knot_overlay_deinit(&tcp->overlay)
knot_overlay_deinit
knot_overlay_deinit
&tcp->overlay
tcp->overlay
tcp
tcp
overlay
knot_pkt_free(&query);
knot_pkt_free(&query)
knot_pkt_free
knot_pkt_free
&query
query
query
knot_pkt_free(&ans);
knot_pkt_free(&ans)
knot_pkt_free
knot_pkt_free
&ans
ans
ans
return ret;
ret
ret
-----joern-----
(220,52,0)
(45,181,0)
(217,159,0)
(205,207,0)
(98,34,0)
(207,104,0)
(36,129,0)
(218,149,0)
(86,70,0)
(83,238,0)
(89,38,0)
(30,168,0)
(51,81,0)
(204,14,0)
(23,157,0)
(136,135,0)
(142,124,0)
(39,230,0)
(36,157,0)
(85,26,0)
(67,205,0)
(199,15,0)
(216,33,0)
(138,38,0)
(94,55,0)
(26,217,0)
(155,216,0)
(148,234,0)
(78,134,0)
(39,31,0)
(155,157,0)
(24,237,0)
(208,6,0)
(5,115,0)
(65,157,0)
(2,116,0)
(39,210,0)
(11,162,0)
(192,46,0)
(187,181,0)
(129,187,0)
(41,99,0)
(101,157,0)
(149,218,0)
(32,188,0)
(8,15,0)
(63,116,0)
(90,157,0)
(114,180,0)
(230,145,0)
(176,171,0)
(58,28,0)
(64,240,0)
(138,185,0)
(7,159,0)
(240,149,0)
(228,73,0)
(72,107,0)
(48,50,0)
(203,24,0)
(129,36,0)
(116,1,0)
(115,186,0)
(66,157,0)
(180,140,0)
(34,98,0)
(105,100,0)
(189,105,0)
(137,78,0)
(198,54,0)
(39,33,0)
(80,52,0)
(88,158,0)
(13,124,0)
(167,30,0)
(31,168,0)
(120,157,0)
(161,191,0)
(116,63,0)
(26,99,0)
(19,179,0)
(180,78,0)
(189,140,0)
(16,229,0)
(108,208,0)
(125,217,0)
(180,114,0)
(131,210,0)
(166,187,0)
(84,238,0)
(4,39,0)
(100,33,0)
(201,189,0)
(165,157,0)
(164,82,0)
(49,57,0)
(100,105,0)
(174,220,0)
(121,81,0)
(9,50,0)
(160,1,0)
(231,157,0)
(71,104,0)
(50,99,0)
(46,223,0)
(37,222,0)
(78,171,0)
(103,220,0)
(76,152,0)
(69,194,0)
(25,30,0)
(168,157,0)
(214,55,0)
(117,12,0)
(195,157,0)
(188,28,0)
(233,187,0)
(179,143,0)
(200,45,0)
(205,67,0)
(141,133,0)
(240,181,0)
(24,33,0)
(238,207,0)
(222,171,0)
(207,24,0)
(1,116,0)
(82,164,0)
(212,186,0)
(81,145,0)
(73,228,0)
(145,230,0)
(132,237,0)
(150,142,0)
(14,204,0)
(223,222,0)
(237,132,0)
(178,216,0)
(142,11,0)
(232,7,0)
(124,142,0)
(159,7,0)
(81,181,0)
(164,57,0)
(114,157,0)
(177,29,0)
(205,82,0)
(170,157,0)
(106,181,0)
(87,20,0)
(82,205,0)
(73,181,0)
(196,122,0)
(115,119,0)
(6,208,0)
(223,46,0)
(77,168,0)
(1,160,0)
(229,189,0)
(236,33,0)
(180,133,0)
(234,143,0)
(191,171,0)
(12,1,0)
(54,33,0)
(46,157,0)
(70,119,0)
(110,157,0)
(162,11,0)
(213,207,0)
(106,185,0)
(210,39,0)
(194,33,0)
(31,127,0)
(107,44,0)
(53,14,0)
(172,67,0)
(27,83,0)
(152,114,0)
(109,223,0)
(223,230,0)
(193,120,0)
(218,157,0)
(221,107,0)
(216,155,0)
(154,217,0)
(126,239,0)
(130,73,0)
(238,83,0)
(128,157,0)
(26,30,0)
(68,229,0)
(179,218,0)
(206,188,0)
(133,18,0)
(57,164,0)
(138,46,0)
(229,33,0)
(153,116,0)
(20,143,0)
(52,235,0)
(92,143,0)
(185,106,0)
(15,181,0)
(97,106,0)
(20,6,0)
(225,44,0)
(28,173,0)
(42,83,0)
(26,234,0)
(135,143,0)
(215,191,0)
(61,138,0)
(45,231,0)
(116,140,0)
(30,127,0)
(33,39,0)
(183,157,0)
(31,39,0)
(182,208,0)
(191,134,0)
(188,157,0)
(149,240,0)
(132,181,0)
(115,70,0)
(90,230,0)
(118,29,0)
(185,138,0)
(211,157,0)
(133,180,0)
(230,157,0)
(96,234,0)
(8,90,0)
(38,138,0)
(60,173,0)
(210,127,0)
(57,54,0)
(194,189,0)
(228,183,0)
(226,15,0)
(102,157,0)
(90,8,0)
(18,157,0)
(144,153,0)
(187,129,0)
(171,157,0)
(222,223,0)
(78,180,0)
(56,100,0)
(75,44,0)
(208,181,0)
(119,44,0)
(204,157,0)
(189,229,0)
(107,119,0)
(142,157,0)
(55,134,0)
(59,157,0)
(147,132,0)
(156,152,0)
(219,145,0)
(3,210,0)
(40,102,0)
(153,102,0)
(223,55,0)
(17,54,0)
(180,158,0)
(143,157,0)
(151,63,0)
(1,12,0)
(15,8,0)
(38,157,0)
(22,194,0)
(79,100,0)
(146,78,0)
(188,120,0)
(209,90,0)
(6,157,0)
(113,132,0)
(220,134,0)
(70,115,0)
(224,157,0)
(26,135,0)
(33,157,0)
(62,240,0)
(10,157,0)
(74,67,0)
(234,239,0)
(159,157,0)
(197,180,0)
(47,230,0)
(26,191,0)
(158,180,0)
(135,231,0)
(238,38,0)
(91,73,0)
(105,189,0)
(231,45,0)
(26,20,0)
(190,45,0)
(111,31,0)
(239,157,0)
(102,34,0)
(186,115,0)
(24,207,0)
(14,46,0)
(112,18,0)
(123,222,0)
(139,135,0)
(34,102,0)
(54,57,0)
(189,194,0)
(222,134,0)
(175,106,0)
(202,114,0)
(116,153,0)
(183,228,0)
(50,140,0)
(239,140,0)
(115,44,0)
(218,179,0)
(95,20,0)
(55,223,0)
(43,120,0)
(206,26,0)
(169,28,0)
(163,205,0)
(145,81,0)
(11,142,0)
(21,218,0)
(93,31,0)
(158,134,0)
(29,114,0)
(222,52,0)
(217,143,0)
(35,119,0)
(0,157,0)
(52,114,0)
(184,158,0)
(237,24,0)
(227,44,0)
(132,181,1)
(53,183,1)
(84,120,1)
(214,192,1)
(97,175,1)
(116,140,1)
(233,238,1)
(79,56,1)
(147,213,1)
(133,18,1)
(27,42,1)
(37,55,1)
(133,141,1)
(24,237,1)
(220,103,1)
(170,63,1)
(4,31,1)
(108,20,1)
(9,152,1)
(171,176,1)
(184,88,1)
(153,144,1)
(30,127,1)
(105,189,1)
(228,73,1)
(130,91,1)
(238,83,1)
(240,181,1)
(8,15,1)
(206,188,1)
(106,97,1)
(153,102,1)
(77,30,1)
(1,160,1)
(39,230,1)
(63,116,1)
(55,94,1)
(172,74,1)
(179,19,1)
(164,57,1)
(80,220,1)
(90,209,1)
(229,68,1)
(28,58,1)
(93,111,1)
(33,39,1)
(198,17,1)
(84,164,1)
(129,187,1)
(194,69,1)
(226,199,1)
(88,197,1)
(118,177,1)
(109,222,1)
(75,29,1)
(32,155,1)
(223,109,1)
(18,112,1)
(188,120,1)
(132,113,1)
(121,47,1)
(91,36,1)
(78,171,1)
(16,194,1)
(45,190,1)
(22,201,1)
(85,29,1)
(73,181,1)
(110,18,1)
(180,78,1)
(201,164,1)
(174,152,1)
(238,207,1)
(190,200,1)
(222,123,1)
(19,21,1)
(194,33,1)
(232,217,1)
(234,96,1)
(57,54,1)
(142,124,1)
(135,136,1)
(39,4,1)
(76,114,1)
(24,33,1)
(11,150,1)
(158,134,1)
(82,205,1)
(103,174,1)
(26,191,1)
(43,193,1)
(86,5,1)
(1,12,1)
(70,86,1)
(26,30,1)
(124,13,1)
(3,236,1)
(74,163,1)
(95,231,1)
(216,33,1)
(115,119,1)
(50,48,1)
(131,3,1)
(191,134,1)
(164,82,1)
(230,145,1)
(113,147,1)
(38,138,1)
(116,153,1)
(120,43,1)
(168,77,1)
(48,9,1)
(233,60,1)
(239,140,1)
(222,134,1)
(34,98,1)
(219,81,1)
(45,181,1)
(20,143,1)
(229,33,1)
(125,154,1)
(5,119,1)
(62,90,1)
(49,54,1)
(14,53,1)
(40,168,1)
(197,202,1)
(92,142,1)
(188,28,1)
(199,46,1)
(177,50,1)
(52,114,1)
(63,151,1)
(180,158,1)
(218,149,1)
(42,84,1)
(176,191,1)
(227,107,1)
(137,146,1)
(34,40,1)
(240,64,1)
(73,130,1)
(158,184,1)
(70,119,1)
(145,219,1)
(54,198,1)
(204,14,1)
(166,233,1)
(135,143,1)
(68,16,1)
(223,55,1)
(105,100,1)
(152,156,1)
(216,178,1)
(54,33,1)
(138,61,1)
(205,207,1)
(31,93,1)
(111,210,1)
(167,171,1)
(220,134,1)
(35,75,1)
(161,215,1)
(151,116,1)
(213,238,1)
(179,143,1)
(72,221,1)
(149,240,1)
(89,218,1)
(78,137,1)
(143,92,1)
(112,170,1)
(31,168,1)
(152,114,1)
(61,185,1)
(115,186,1)
(138,185,1)
(26,85,1)
(237,132,1)
(15,181,1)
(6,208,1)
(39,31,1)
(178,204,1)
(210,131,1)
(223,230,1)
(215,6,1)
(209,8,1)
(206,26,1)
(25,167,1)
(100,79,1)
(182,108,1)
(87,95,1)
(29,118,1)
(12,117,1)
(205,67,1)
(57,49,1)
(90,230,1)
(154,239,1)
(94,214,1)
(200,135,1)
(90,8,1)
(175,89,1)
(189,194,1)
(117,2,1)
(20,87,1)
(2,102,1)
(222,171,1)
(208,182,1)
(36,129,1)
(186,212,1)
(64,62,1)
(11,162,1)
(159,7,1)
(208,181,1)
(148,143,1)
(114,180,1)
(26,20,1)
(169,105,1)
(212,70,1)
(81,51,1)
(78,134,1)
(85,227,1)
(115,70,1)
(141,78,1)
(142,11,1)
(96,148,1)
(136,139,1)
(21,149,1)
(187,166,1)
(81,181,1)
(189,140,1)
(187,181,1)
(50,140,1)
(46,223,1)
(180,140,1)
(221,115,1)
(150,124,1)
(100,33,1)
(163,57,1)
(231,45,1)
(202,110,1)
(156,76,1)
(30,25,1)
(52,80,1)
(146,158,1)
(217,143,1)
(189,229,1)
(193,38,1)
(223,222,1)
(139,159,1)
(47,52,1)
(155,216,1)
(60,28,1)
(222,52,1)
(203,237,1)
(144,1,1)
(55,134,1)
(210,127,1)
(236,230,1)
(24,203,1)
(107,72,1)
(17,207,1)
(180,133,1)
(192,33,1)
(145,81,1)
(218,179,1)
(7,232,1)
(185,106,1)
(26,135,1)
(84,105,1)
(191,161,1)
(14,46,1)
(102,34,1)
(119,35,1)
(116,1,1)
(238,38,1)
(106,181,1)
(58,169,1)
(207,24,1)
(188,32,1)
(15,226,1)
(56,189,1)
(138,46,1)
(29,114,1)
(67,172,1)
(123,37,1)
(126,234,1)
(51,121,1)
(31,127,1)
(83,27,1)
(26,234,1)
(39,210,1)
(183,228,1)
(239,126,1)
(69,22,1)
(26,217,1)
(217,125,1)
(234,143,1)
(107,119,1)
(17,238,2)
(39,230,2)
(114,180,2)
(48,152,2)
(220,134,2)
(67,57,2)
(26,135,2)
(36,129,2)
(187,152,2)
(189,140,2)
(113,238,2)
(15,152,2)
(57,238,2)
(222,52,2)
(228,152,2)
(29,152,2)
(223,55,2)
(209,152,2)
(19,152,2)
(129,187,2)
(84,164,2)
(234,143,2)
(84,152,2)
(26,234,2)
(194,164,2)
(27,164,2)
(69,164,2)
(15,181,2)
(138,46,2)
(120,152,2)
(193,152,2)
(21,152,2)
(52,152,2)
(153,102,2)
(183,152,2)
(43,152,2)
(159,7,2)
(72,29,2)
(238,83,2)
(100,33,2)
(238,164,2)
(105,164,2)
(180,78,2)
(155,152,2)
(189,229,2)
(24,238,2)
(203,238,2)
(185,106,2)
(218,179,2)
(240,181,2)
(42,164,2)
(91,152,2)
(105,100,2)
(33,39,2)
(198,238,2)
(210,127,2)
(55,134,2)
(178,152,2)
(152,114,2)
(84,105,2)
(164,82,2)
(164,238,2)
(238,152,2)
(14,46,2)
(83,105,2)
(42,152,2)
(34,98,2)
(138,152,2)
(194,33,2)
(180,133,2)
(106,181,2)
(32,152,2)
(238,38,2)
(4,152,2)
(147,238,2)
(188,28,2)
(90,230,2)
(83,164,2)
(33,152,2)
(115,70,2)
(75,29,2)
(142,124,2)
(229,33,2)
(222,134,2)
(78,134,2)
(133,18,2)
(53,152,2)
(191,134,2)
(213,238,2)
(109,152,2)
(116,1,2)
(26,191,2)
(205,57,2)
(26,217,2)
(39,31,2)
(164,57,2)
(131,152,2)
(163,57,2)
(132,238,2)
(11,162,2)
(54,33,2)
(45,181,2)
(142,11,2)
(57,54,2)
(24,237,2)
(93,152,2)
(37,152,2)
(82,205,2)
(89,152,2)
(214,152,2)
(207,24,2)
(1,160,2)
(107,119,2)
(169,105,2)
(188,152,2)
(218,152,2)
(115,29,2)
(238,207,2)
(8,152,2)
(24,33,2)
(6,208,2)
(52,114,2)
(188,120,2)
(118,152,2)
(26,152,2)
(83,152,2)
(54,238,2)
(38,138,2)
(222,152,2)
(29,114,2)
(49,238,2)
(63,116,2)
(42,105,2)
(205,207,2)
(56,164,2)
(155,216,2)
(27,152,2)
(94,152,2)
(73,181,2)
(62,152,2)
(216,152,2)
(119,29,2)
(206,26,2)
(238,105,2)
(187,181,2)
(58,105,2)
(226,152,2)
(70,119,2)
(223,230,2)
(86,29,2)
(239,140,2)
(97,152,2)
(116,153,2)
(230,152,2)
(31,152,2)
(121,152,2)
(31,168,2)
(107,29,2)
(78,171,2)
(237,238,2)
(20,143,2)
(74,57,2)
(145,152,2)
(80,152,2)
(28,105,2)
(130,152,2)
(145,81,2)
(105,189,2)
(100,164,2)
(217,143,2)
(180,158,2)
(201,164,2)
(240,152,2)
(205,67,2)
(228,73,2)
(26,30,2)
(50,140,2)
(229,164,2)
(38,152,2)
(31,127,2)
(5,29,2)
(27,105,2)
(204,152,2)
(116,140,2)
(123,152,2)
(227,29,2)
(221,29,2)
(204,14,2)
(103,152,2)
(172,57,2)
(115,186,2)
(8,15,2)
(233,152,2)
(179,152,2)
(236,152,2)
(22,164,2)
(85,152,2)
(81,181,2)
(138,185,2)
(199,152,2)
(36,152,2)
(218,149,2)
(26,20,2)
(73,152,2)
(207,238,2)
(223,152,2)
(51,152,2)
(220,152,2)
(135,143,2)
(14,152,2)
(79,164,2)
(50,152,2)
(175,152,2)
(60,105,2)
(1,12,2)
(231,45,2)
(16,164,2)
(237,132,2)
(39,210,2)
(115,119,2)
(81,152,2)
(61,152,2)
(158,134,2)
(3,152,2)
(189,164,2)
(102,34,2)
(90,8,2)
(82,57,2)
(70,29,2)
(185,152,2)
(149,240,2)
(106,152,2)
(47,152,2)
(55,152,2)
(189,194,2)
(230,145,2)
(132,181,2)
(46,152,2)
(149,152,2)
(179,143,2)
(9,152,2)
(212,29,2)
(64,152,2)
(216,33,2)
(186,29,2)
(208,181,2)
(166,152,2)
(206,188,2)
(90,152,2)
(177,152,2)
(180,140,2)
(30,127,2)
(68,164,2)
(35,29,2)
(111,152,2)
(192,152,2)
(174,152,2)
(219,152,2)
(183,228,2)
(223,222,2)
(129,152,2)
(222,171,2)
(46,223,2)
(210,152,2)
(39,152,2)
-----------------------------------
(0,param)
(1,(struct sockaddr *)
(2,fd)
(3,tx)
(4,mm)
(5,addr_str)
(6,param.thread_id = tcp->thread_id)
(7,&ss)
(8,&tcp->overlay)
(9,"tcp: client on fd=%d disconnected\\n")
(10,ans)
(11,sizeof(struct sockaddr_storage)
(12,&ss)
(13,ss)
(14,&query)
(15,tcp->overlay)
(16,ans)
(17,ans)
(18,tmout = { conf()
(19,param)
(20,param.thread_id)
(21,NS_PROC_QUERY)
(22,ans)
(23,addrlen)
(24,knot_overlay_out(&tcp->overlay, ans)
(25,iov_len)
(26,return KNOT_ECONNREFUSED;)
(27,KNOT_NS_PROC_FAIL)
(28,ret = KNOT_ECONNREFUSED)
(29,ret == KNOT_EAGAIN)
(30,tx->iov_len)
(31,tx->iov_len)
(32,ret)
(33,*ans = knot_pkt_new(tx->iov_base, tx->iov_len, mm)
(34,sizeof(struct sockaddr_storage)
(35,addr_str)
(36,knot_overlay_finish(&tcp->overlay)
(37,rx)
(38,state = knot_overlay_in(&tcp->overlay, query)
(39,knot_pkt_new(tx->iov_base, tx->iov_len, mm)
(40,addrlen)
(41,if (ret == KNOT_EAGAIN)
(42,KNOT_NS_PROC_FULL)
(43,KNOT_EOK)
(44,)
(45,tcp->server)
(46,*query = knot_pkt_new(rx->iov_base, rx->iov_len, mm)
(47,mm)
(48,fd)
(49,0)
(50,dbg_net("tcp: client on fd=%d disconnected\\n", fd)
(51,overlay)
(52,rx->iov_len = ret)
(53,query)
(54,ans->size)
(55,rx->iov_base)
(56,ans)
(57,ans->size > 0)
(58,KNOT_ECONNREFUSED)
(59,while (state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
(60,break;)
(61,query)
(62,tcp)
(63,getpeername(fd, (struct sockaddr *)
(64,overlay)
(65,ret)
(66,mm)
(67,KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(68,size)
(69,wire)
(70,sizeof(addr_str)
(71,if (ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(72,addr_str)
(73,tcp->overlay)
(74,KNOT_NS_PROC_FAIL)
(75,rcu_read_lock()
(76,ret)
(77,KNOT_WIRE_MAX_PKTSIZE)
(78,rx->iov_len)
(79,size)
(80,ret)
(81,tcp->overlay)
(82,!(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(83,KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
(84,state)
(85,KNOT_ECONNREFUSED)
(86,addr_str)
(87,thread_id)
(88,rx)
(89,state)
(90,knot_overlay_init(&tcp->overlay, mm)
(91,tcp)
(92,param)
(93,iov_len)
(94,iov_base)
(95,param)
(96,socket)
(97,overlay)
(98,struct sockaddr_storage)
(99,)
(100,ans->size)
(101,state)
(102,addrlen = sizeof(struct sockaddr_storage)
(103,iov_len)
(104,)
(105,tcp_send_msg(fd, ans->wire, ans->size)
(106,tcp->overlay)
(107,log_warning("TCP, connection timed out, address \'%s\'",\n\\n\\t\\t\\t            addr_str)
(108,tcp)
(109,mm)
(110,rcu_read_unlock()
(111,tx)
(112,tmout)
(113,overlay)
(114,ret = tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
(115,sockaddr_tostr(addr_str, sizeof(addr_str)
(116,getpeername(fd, (struct sockaddr *)
(117,ss)
(118,KNOT_EAGAIN)
(119,addr_str[SOCKADDR_STRLEN] = {0})
(120,ret = KNOT_EOK)
(121,tcp)
(122,)
(123,iov_len)
(124,&ss)
(125,remote)
(126,fd)
(127,struct iovec *tx)
(128,if (getpeername(fd, (struct sockaddr *)
(129,&tcp->overlay)
(130,overlay)
(131,iov_base)
(132,tcp->overlay)
(133,&tmout)
(134,struct iovec *rx)
(135,param.server)
(136,server)
(137,iov_len)
(138,knot_overlay_in(&tcp->overlay, query)
(139,param)
(140,int fd)
(141,tmout)
(142,memset(&ss, 0, sizeof(struct sockaddr_storage)
(143,param = {0})
(144,addrlen)
(145,tcp->overlay.mm)
(146,rx)
(147,tcp)
(148,param)
(149,&tcp->overlay)
(150,0)
(151,0)
(152,ret <= 0)
(153,&addrlen)
(154,param)
(155,knot_pkt_free(&ans)
(156,0)
(157,)
(158,rx->iov_base)
(159,param.remote = &ss)
(160,struct sockaddr *)
(161,iov_len)
(162,struct sockaddr_storage)
(163,state)
(164,ans->size > 0 && !(state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(165,tmout)
(166,overlay)
(167,tx)
(168,tx->iov_len = KNOT_WIRE_MAX_PKTSIZE)
(169,ret)
(170,rcu_read_lock()
(171,rx->iov_len = KNOT_WIRE_MAX_PKTSIZE)
(172,KNOT_NS_PROC_NOOP)
(173,)
(174,rx)
(175,tcp)
(176,KNOT_WIRE_MAX_PKTSIZE)
(177,ret)
(178,ans)
(179,&param)
(180,tcp_recv_msg(fd, rx->iov_base, rx->iov_len, &tmout)
(181,tcp_context_t *tcp)
(182,thread_id)
(183,knot_overlay_deinit(&tcp->overlay)
(184,iov_base)
(185,&tcp->overlay)
(186,&ss)
(187,tcp->overlay)
(188,return ret;)
(189,tcp_send_msg(fd, ans->wire, ans->size)
(190,server)
(191,rx->iov_len)
(192,query)
(193,ret)
(194,ans->wire)
(195,query)
(196,if (tcp_send_msg(fd, ans->wire, ans->size)
(197,fd)
(198,size)
(199,tcp)
(200,tcp)
(201,fd)
(202,ret)
(203,ans)
(204,knot_pkt_free(&query)
(205,state & (KNOT_NS_PROC_FAIL|KNOT_NS_PROC_NOOP)
(206,RET)
(207,state = knot_overlay_out(&tcp->overlay, ans)
(208,tcp->thread_id)
(209,mm)
(210,tx->iov_base)
(211,if (ret <= 0)
(212,ss)
(213,state)
(214,rx)
(215,rx)
(216,&ans)
(217,param.remote)
(218,knot_overlay_add(&tcp->overlay, NS_PROC_QUERY, &param)
(219,mm)
(220,rx->iov_len)
(221,"TCP, connection timed out, address \'%s\'")
(222,rx->iov_len)
(223,knot_pkt_new(rx->iov_base, rx->iov_len, mm)
(224,ss)
(225,addr_str)
(226,overlay)
(227,rcu_read_unlock()
(228,&tcp->overlay)
(229,ans->size)
(230,*mm = tcp->overlay.mm)
(231,param.server = tcp->server)
(232,ss)
(233,tcp)
(234,param.socket)
(235,)
(236,ans)
(237,&tcp->overlay)
(238,state & (KNOT_NS_PROC_FULL|KNOT_NS_PROC_FAIL)
(239,param.socket = fd)
(240,tcp->overlay)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^