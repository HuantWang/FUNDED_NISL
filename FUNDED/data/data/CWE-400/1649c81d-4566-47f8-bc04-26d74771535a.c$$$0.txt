-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t data)
{
    if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,7,9,13,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t data){    if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink
size_t data
size_t
size_t
data
data
{    if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(37,25,0)
(37,1,0)
(18,6,0)
(28,14,0)
(17,6,0)
(15,25,0)
(8,4,0)
(20,37,0)
(5,14,0)
(40,37,0)
(13,15,0)
(34,24,0)
(3,17,0)
(35,11,0)
(14,5,0)
(28,36,0)
(14,25,0)
(25,1,0)
(23,9,0)
(31,26,0)
(32,36,0)
(2,10,0)
(36,28,0)
(38,31,0)
(26,31,0)
(17,7,0)
(11,25,0)
(39,25,0)
(36,7,0)
(4,22,0)
(21,2,0)
(26,19,0)
(9,25,0)
(29,2,0)
(30,11,0)
(33,16,0)
(0,1,0)
(14,28,0)
(15,1,0)
(25,14,0)
(9,1,0)
(6,17,0)
(36,16,0)
(16,36,0)
(12,15,1)
(40,11,1)
(40,26,1)
(39,17,1)
(6,18,1)
(30,35,1)
(37,20,1)
(38,11,1)
(3,27,1)
(11,30,1)
(28,36,1)
(11,25,1)
(9,25,1)
(32,39,1)
(17,7,1)
(31,38,1)
(9,23,1)
(16,33,1)
(17,6,1)
(36,16,1)
(33,32,1)
(26,31,1)
(12,4,1)
(13,9,1)
(25,14,1)
(14,5,1)
(4,8,1)
(35,25,1)
(15,25,1)
(23,37,1)
(15,13,1)
(37,25,1)
(20,40,1)
(36,7,1)
(8,17,1)
(14,28,1)
(18,3,1)
(12,27,1)
(35,17,2)
(26,11,2)
(26,31,2)
(37,25,2)
(25,17,2)
(23,17,2)
(32,17,2)
(38,11,2)
(4,17,2)
(36,17,2)
(33,17,2)
(20,17,2)
(36,16,2)
(36,7,2)
(37,17,2)
(39,17,2)
(31,11,2)
(17,27,2)
(11,25,2)
(6,27,2)
(28,36,2)
(17,6,2)
(8,17,2)
(18,27,2)
(16,17,2)
(14,28,2)
(30,17,2)
(40,17,2)
(13,17,2)
(9,25,2)
(14,17,2)
(3,27,2)
(25,14,2)
(11,17,2)
(9,17,2)
(28,17,2)
(15,25,2)
(17,7,2)
(14,5,2)
(15,17,2)
-----------------------------------
(0,if (myString == NULL)
(1,)
(2,)
(3,data)
(4,printLine("Input is less than the length of the source string")
(5,char *)
(6,strlen(HELLO_STRING)
(7,size_t data)
(8,"Input is less than the length of the source string")
(9,printLine(myString)
(10,)
(11,myString == NULL)
(12,RET)
(13,myString)
(14,(char *)
(15,free(myString)
(16,sizeof(char)
(17,data > strlen(HELLO_STRING)
(18,HELLO_STRING)
(19,)
(20,HELLO_STRING)
(21,myString)
(22,)
(23,myString)
(24,)
(25,myString = (char *)
(26,exit(-1)
(27,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)
(28,malloc(data*sizeof(char)
(29,if (data > strlen(HELLO_STRING)
(30,NULL)
(31,-1)
(32,data)
(33,char)
(34,if(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal)
(35,myString)
(36,data*sizeof(char)
(37,strcpy(myString, HELLO_STRING)
(38,1)
(39,myString)
(40,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^