-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
62,63
62,64
64,65
64,66
67,68
67,69
67,70
68,69
68,70
69,70
71,72
71,73
72,73
74,75
76,77
76,78
76,79
76,80
76,81
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
84,85
86,87
86,88
87,88
89,90
89,91
90,91
92,93
93,94
93,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
110,113
111,112
113,114
115,116
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
129,130
130,131
131,132
131,133
132,133
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,63,65,66,70,73,75,80,83,85,88,91,94,95,99,101,106,108,112,114,116,120,122,126,128,133,134
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
68,69
68,70
78,79
78,80
89,90
89,91
97,98
97,99
-----guardedBy-----
34,50
40,52
75,116
70,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(11,18,0)
(1,49,0)
(31,24,0)
(61,44,0)
(34,44,0)
(13,2,0)
(21,51,0)
(6,58,0)
(19,29,0)
(41,51,0)
(35,19,0)
(50,45,0)
(7,8,0)
(2,18,0)
(10,15,0)
(37,8,0)
(51,14,0)
(26,8,0)
(49,50,0)
(50,16,0)
(45,2,0)
(58,18,0)
(2,45,0)
(44,16,0)
(46,45,0)
(60,3,0)
(30,34,0)
(29,19,0)
(57,58,0)
(53,40,0)
(38,2,0)
(50,49,0)
(44,61,0)
(17,34,0)
(47,30,0)
(3,52,0)
(34,8,0)
(48,15,0)
(12,2,0)
(19,15,0)
(26,34,0)
(7,34,0)
(58,23,0)
(9,4,0)
(16,50,0)
(54,23,0)
(39,22,0)
(59,26,0)
(50,15,0)
(16,44,0)
(27,7,0)
(15,14,0)
(45,28,0)
(23,58,0)
(5,18,0)
(4,9,0)
(20,58,0)
(44,34,0)
(62,40,0)
(22,14,0)
(25,30,0)
(33,9,0)
(4,36,0)
(24,0,0)
(42,22,0)
(43,14,0)
(55,50,0)
(56,29,0)
(40,34,0)
(18,51,0)
(19,45,0)
(40,8,0)
(20,57,1)
(26,59,1)
(3,60,1)
(15,10,1)
(5,11,1)
(47,34,1)
(59,7,1)
(10,48,1)
(30,25,1)
(57,18,1)
(49,1,1)
(44,16,1)
(50,15,1)
(58,18,1)
(50,45,1)
(32,3,1)
(16,50,1)
(12,38,1)
(19,45,1)
(19,29,1)
(26,34,1)
(40,53,1)
(35,24,1)
(58,6,1)
(40,34,1)
(4,9,1)
(24,31,1)
(25,47,1)
(32,26,1)
(1,55,1)
(30,34,1)
(35,45,1)
(23,58,1)
(9,33,1)
(50,49,1)
(27,40,1)
(60,19,1)
(7,27,1)
(13,12,1)
(17,19,1)
(29,56,1)
(38,46,1)
(33,30,1)
(62,30,1)
(23,54,1)
(31,23,1)
(19,15,1)
(45,2,1)
(6,20,1)
(55,17,1)
(44,61,1)
(34,44,1)
(56,35,1)
(2,13,1)
(54,58,1)
(11,15,1)
(7,34,1)
(2,18,1)
(46,23,1)
(53,62,1)
(62,4,1)
(18,5,1)
(1,19,2)
(50,49,2)
(50,19,2)
(44,16,2)
(33,30,2)
(24,23,2)
(49,19,2)
(44,61,2)
(19,15,2)
(30,34,2)
(23,58,2)
(46,23,2)
(16,19,2)
(34,44,2)
(53,19,2)
(4,9,2)
(27,19,2)
(2,23,2)
(30,19,2)
(60,19,2)
(16,50,2)
(40,19,2)
(58,18,2)
(50,15,2)
(12,23,2)
(13,23,2)
(62,19,2)
(38,23,2)
(7,19,2)
(26,19,2)
(25,19,2)
(7,34,2)
(55,19,2)
(45,23,2)
(19,45,2)
(47,19,2)
(26,34,2)
(17,19,2)
(4,30,2)
(3,19,2)
(50,45,2)
(34,19,2)
(31,23,2)
(44,19,2)
(59,19,2)
(9,30,2)
(45,2,2)
(40,34,2)
(2,18,2)
(19,29,2)
-----------------------------------
(0,)
(1,char)
(2,strtoul(inputBuffer, NULL, 0)
(3,printLine("Input is less than the length of the source string")
(4,exit(-1)
(5,"")
(6,stdin)
(7,printLine(myString)
(8,)
(9,-1)
(10,0)
(11,inputBuffer)
(12,NULL)
(13,0)
(14,)
(15,data = 0)
(16,malloc(data*sizeof(char)
(17,myString)
(18,inputBuffer[CHAR_ARRAY_SIZE] = "")
(19,data > strlen(HELLO_STRING)
(20,CHAR_ARRAY_SIZE)
(21,inputBuffer)
(22,)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,printLine("fgets()
(25,NULL)
(26,free(myString)
(27,myString)
(28,)
(29,strlen(HELLO_STRING)
(30,myString == NULL)
(31,"fgets()
(32,RET)
(33,1)
(34,myString = (char *)
(35,data)
(36,)
(37,if (myString == NULL)
(38,inputBuffer)
(39,if (data > strlen(HELLO_STRING)
(40,strcpy(myString, HELLO_STRING)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,myString)
(43,data)
(44,(char *)
(45,data = strtoul(inputBuffer, NULL, 0)
(46,data)
(47,myString)
(48,data)
(49,sizeof(char)
(50,data*sizeof(char)
(51,)
(52,)
(53,HELLO_STRING)
(54,NULL)
(55,data)
(56,HELLO_STRING)
(57,inputBuffer)
(58,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(59,myString)
(60,"Input is less than the length of the source string")
(61,char *)
(62,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^