-----label-----
0
-----code-----
static int driver_forward_unicast(Peer *sender, const char *destination, Message *message) {
        Peer *receiver;
        int r;

        if (*destination == ':') {
                uint64_t id;

                r = unique_name_to_id(destination, &id);
                if (r) {
                        if (r > 0)
                                return DRIVER_E_DESTINATION_NOT_FOUND;

                        return error_trace(r);
                }

                receiver = peer_registry_find_peer(&sender->bus->peers, id);
                if (!receiver)
                        return DRIVER_E_DESTINATION_NOT_FOUND;
        } else {
                Name *name;
                NameOwnership *ownership;

                name = name_registry_find_name(&sender->bus->names, destination);
                if (!name)
                        return DRIVER_E_DESTINATION_NOT_FOUND;

                ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link);
                if (!ownership) {
                        if (!name->activation)
                                return DRIVER_E_DESTINATION_NOT_FOUND;

                        r = activation_queue_message(name->activation, message);
                        if (r)
                                return error_fold(r);

                        if (!name->activation->requested) {
                                r = activation_send_signal(sender->bus->controller, name->activation->path);
                                if (r)
                                        return error_fold(r);

                                name->activation->requested = true;
                        }

                        return 0;
                } else {
                        receiver = c_container_of(ownership->owner, Peer, owned_names);
                }
        }

        r = peer_queue_call(receiver, sender, message);
        if (r) {
                if (r == PEER_E_EXPECTED_REPLY_EXISTS)
                        return DRIVER_E_EXPECTED_REPLY_EXISTS;
                else if (r == PEER_E_QUOTA)
                        return DRIVER_E_QUOTA;
                else
                        return error_fold(r);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
38,39
41,42
41,43
41,44
41,45
41,46
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
57,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
64,66
65,66
65,67
66,67
69,70
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
82,84
82,85
83,84
85,86
86,87
86,88
87,88
87,89
88,89
92,93
94,95
94,96
95,96
96,97
98,99
99,100
101,102
101,103
101,104
101,105
101,106
101,107
102,103
103,104
103,105
104,105
106,107
106,108
109,110
110,111
110,112
111,112
113,114
113,115
116,117
117,118
117,119
118,119
120,121
120,122
120,123
121,122
123,124
124,125
124,126
125,126
125,127
126,127
130,131
132,133
132,134
133,134
134,135
136,137
137,138
139,140
140,141
140,142
141,142
143,144
143,145
143,146
143,147
144,145
146,147
147,148
147,149
148,149
151,152
153,154
155,156
155,157
155,158
156,157
157,158
159,160
159,161
159,162
159,163
159,164
160,161
160,162
161,162
162,163
162,164
163,164
166,167
167,168
169,170
170,171
170,172
171,172
173,174
173,175
173,176
174,175
176,177
176,178
177,178
180,181
182,183
182,184
183,184
185,186
186,187
186,188
187,188
189,190
191,192
191,193
192,193
193,194
193,195
194,195
194,196
195,196
199,200
199,201
199,202
200,201
201,202
201,203
202,203
204,205
204,206
204,207
205,206
207,208
207,209
208,209
208,210
209,210
213,214
213,215
214,215
214,216
215,216
219,220
219,221
220,221
222,223
223,224
223,225
224,225
226,227
228,229
229,230
229,231
230,231
230,232
231,232
231,233
232,233
237,238
239,240
240,241
241,242
241,243
242,243
244,245
244,246
244,247
244,248
245,246
247,248
247,249
248,249
251,252
253,254
255,256
256,257
256,258
257,258
259,260
259,261
259,262
259,263
260,261
262,263
264,265
266,267
268,269
268,270
269,270
271,272
272,273
272,274
272,275
273,274
273,275
274,275
276,277
278,279
279,280
281,282
281,283
281,284
282,283
282,284
283,284
285,286
287,288
288,289
290,291
291,292
291,293
292,293
294,295
296,297
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,21,26,28,29,32,34,39,40,45,47,51,54,56,59,62,67,68,71,75,77,81,84,89,90,91,93,97,100,105,107,108,112,114,115,119,122,127,128,129,131,135,138,142,145,149,150,152,154,158,164,165,168,172,175,178,179,181,184,188,190,196,197,198,203,206,210,211,212,216,217,218,221,225,227,233,234,235,236,238,243,246,249,250,252,254,258,261,263,265,267,270,275,277,280,284,286,289,293,295,297
-----computeFrom-----
36,37
36,38
49,50
49,51
65,66
65,67
79,80
79,81
117,118
117,119
140,141
140,142
170,171
170,172
201,202
201,203
229,230
229,231
241,242
241,243
256,257
256,258
273,274
273,275
282,283
282,284
-----guardedBy-----
39,56
-----guardedByNegation-----
39,131
275,295
284,295
-----lastLexicalUse-----
39,131
-----jump-----
39,131
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_forward_unicast(Peer *sender, const char *destination, Message *message) {        Peer *receiver;        int r;        if (*destination == ':') {                uint64_t id;                r = unique_name_to_id(destination, &id);                if (r) {                        if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        return error_trace(r);                }                receiver = peer_registry_find_peer(&sender->bus->peers, id);                if (!receiver)                        return DRIVER_E_DESTINATION_NOT_FOUND;        } else {                Name *name;                NameOwnership *ownership;                name = name_registry_find_name(&sender->bus->names, destination);                if (!name)                        return DRIVER_E_DESTINATION_NOT_FOUND;                ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link);                if (!ownership) {                        if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        r = activation_queue_message(name->activation, message);                        if (r)                                return error_fold(r);                        if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }                        return 0;                } else {                        receiver = c_container_of(ownership->owner, Peer, owned_names);                }        }        r = peer_queue_call(receiver, sender, message);        if (r) {                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else                        return error_fold(r);        }        return 0;}
static int
driver_forward_unicast(Peer *sender, const char *destination, Message *message)
driver_forward_unicast
Peer *sender
Peer
Peer
*sender
*
sender
const char *destination
const char
*destination
*
destination
Message *message
Message
Message
*message
*
message
{        Peer *receiver;        int r;        if (*destination == ':') {                uint64_t id;                r = unique_name_to_id(destination, &id);                if (r) {                        if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        return error_trace(r);                }                receiver = peer_registry_find_peer(&sender->bus->peers, id);                if (!receiver)                        return DRIVER_E_DESTINATION_NOT_FOUND;        } else {                Name *name;                NameOwnership *ownership;                name = name_registry_find_name(&sender->bus->names, destination);                if (!name)                        return DRIVER_E_DESTINATION_NOT_FOUND;                ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link);                if (!ownership) {                        if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        r = activation_queue_message(name->activation, message);                        if (r)                                return error_fold(r);                        if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }                        return 0;                } else {                        receiver = c_container_of(ownership->owner, Peer, owned_names);                }        }        r = peer_queue_call(receiver, sender, message);        if (r) {                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else                        return error_fold(r);        }        return 0;}
Peer *receiver;
Peer *receiver;
Peer
Peer
*receiver
*
receiver
int r;
int r;
int
r
r
if (*destination == ':') {                uint64_t id;                r = unique_name_to_id(destination, &id);                if (r) {                        if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        return error_trace(r);                }                receiver = peer_registry_find_peer(&sender->bus->peers, id);                if (!receiver)                        return DRIVER_E_DESTINATION_NOT_FOUND;        } else {                Name *name;                NameOwnership *ownership;                name = name_registry_find_name(&sender->bus->names, destination);                if (!name)                        return DRIVER_E_DESTINATION_NOT_FOUND;                ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link);                if (!ownership) {                        if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        r = activation_queue_message(name->activation, message);                        if (r)                                return error_fold(r);                        if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }                        return 0;                } else {                        receiver = c_container_of(ownership->owner, Peer, owned_names);                }        }
*destination == ':'
*destination
destination
destination
':'
{                uint64_t id;                r = unique_name_to_id(destination, &id);                if (r) {                        if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        return error_trace(r);                }                receiver = peer_registry_find_peer(&sender->bus->peers, id);                if (!receiver)                        return DRIVER_E_DESTINATION_NOT_FOUND;        }
uint64_t id;
uint64_t id;
uint64_t
uint64_t
id
id
r = unique_name_to_id(destination, &id);
r = unique_name_to_id(destination, &id)
r
r
unique_name_to_id(destination, &id)
unique_name_to_id
unique_name_to_id
destination
destination
&id
id
id
if (r) {                        if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        return error_trace(r);                }
r
r
{                        if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        return error_trace(r);                }
if (r > 0)                                return DRIVER_E_DESTINATION_NOT_FOUND;
r > 0
r
r
0
return DRIVER_E_DESTINATION_NOT_FOUND;
DRIVER_E_DESTINATION_NOT_FOUND
DRIVER_E_DESTINATION_NOT_FOUND
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
receiver = peer_registry_find_peer(&sender->bus->peers, id);
receiver = peer_registry_find_peer(&sender->bus->peers, id)
receiver
receiver
peer_registry_find_peer(&sender->bus->peers, id)
peer_registry_find_peer
peer_registry_find_peer
&sender->bus->peers
sender->bus->peers
sender->bus
sender
sender
bus
peers
id
id
if (!receiver)                        return DRIVER_E_DESTINATION_NOT_FOUND;
!receiver
receiver
receiver
return DRIVER_E_DESTINATION_NOT_FOUND;
DRIVER_E_DESTINATION_NOT_FOUND
DRIVER_E_DESTINATION_NOT_FOUND
{                Name *name;                NameOwnership *ownership;                name = name_registry_find_name(&sender->bus->names, destination);                if (!name)                        return DRIVER_E_DESTINATION_NOT_FOUND;                ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link);                if (!ownership) {                        if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        r = activation_queue_message(name->activation, message);                        if (r)                                return error_fold(r);                        if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }                        return 0;                } else {                        receiver = c_container_of(ownership->owner, Peer, owned_names);                }        }
Name *name;
Name *name;
Name
Name
*name
*
name
NameOwnership *ownership;
NameOwnership *ownership;
NameOwnership
NameOwnership
*ownership
*
ownership
name = name_registry_find_name(&sender->bus->names, destination);
name = name_registry_find_name(&sender->bus->names, destination)
name
name
name_registry_find_name(&sender->bus->names, destination)
name_registry_find_name
name_registry_find_name
&sender->bus->names
sender->bus->names
sender->bus
sender
sender
bus
names
destination
destination
if (!name)                        return DRIVER_E_DESTINATION_NOT_FOUND;
!name
name
name
return DRIVER_E_DESTINATION_NOT_FOUND;
DRIVER_E_DESTINATION_NOT_FOUND
DRIVER_E_DESTINATION_NOT_FOUND
ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link);
ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link)
ownership
ownership
c_list_first_entry(&name->ownership_list, NameOwnership, name_link)
c_list_first_entry
c_list_first_entry
&name->ownership_list
name->ownership_list
name
name
ownership_list
NameOwnership
NameOwnership
name_link
name_link
if (!ownership) {                        if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        r = activation_queue_message(name->activation, message);                        if (r)                                return error_fold(r);                        if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }                        return 0;                } else {                        receiver = c_container_of(ownership->owner, Peer, owned_names);                }
!ownership
ownership
ownership
{                        if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;                        r = activation_queue_message(name->activation, message);                        if (r)                                return error_fold(r);                        if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }                        return 0;                }
if (!name->activation)                                return DRIVER_E_DESTINATION_NOT_FOUND;
!name->activation
name->activation
name
name
activation
return DRIVER_E_DESTINATION_NOT_FOUND;
DRIVER_E_DESTINATION_NOT_FOUND
DRIVER_E_DESTINATION_NOT_FOUND
r = activation_queue_message(name->activation, message);
r = activation_queue_message(name->activation, message)
r
r
activation_queue_message(name->activation, message)
activation_queue_message
activation_queue_message
name->activation
name
name
activation
message
message
if (r)                                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
if (!name->activation->requested) {                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }
!name->activation->requested
name->activation->requested
name->activation
name
name
activation
requested
{                                r = activation_send_signal(sender->bus->controller, name->activation->path);                                if (r)                                        return error_fold(r);                                name->activation->requested = true;                        }
r = activation_send_signal(sender->bus->controller, name->activation->path);
r = activation_send_signal(sender->bus->controller, name->activation->path)
r
r
activation_send_signal(sender->bus->controller, name->activation->path)
activation_send_signal
activation_send_signal
sender->bus->controller
sender->bus
sender
sender
bus
controller
name->activation->path
name->activation
name
name
activation
path
if (r)                                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
name->activation->requested = true;
name->activation->requested = true
name->activation->requested
name->activation
name
name
activation
requested
true
return 0;
0
{                        receiver = c_container_of(ownership->owner, Peer, owned_names);                }
receiver = c_container_of(ownership->owner, Peer, owned_names);
receiver = c_container_of(ownership->owner, Peer, owned_names)
receiver
receiver
c_container_of(ownership->owner, Peer, owned_names)
c_container_of
c_container_of
ownership->owner
ownership
ownership
owner
Peer
Peer
owned_names
owned_names
r = peer_queue_call(receiver, sender, message);
r = peer_queue_call(receiver, sender, message)
r
r
peer_queue_call(receiver, sender, message)
peer_queue_call
peer_queue_call
receiver
receiver
sender
sender
message
message
if (r) {                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else                        return error_fold(r);        }
r
r
{                if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else                        return error_fold(r);        }
if (r == PEER_E_EXPECTED_REPLY_EXISTS)                        return DRIVER_E_EXPECTED_REPLY_EXISTS;                else if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else                        return error_fold(r);
r == PEER_E_EXPECTED_REPLY_EXISTS
r
r
PEER_E_EXPECTED_REPLY_EXISTS
PEER_E_EXPECTED_REPLY_EXISTS
return DRIVER_E_EXPECTED_REPLY_EXISTS;
DRIVER_E_EXPECTED_REPLY_EXISTS
DRIVER_E_EXPECTED_REPLY_EXISTS
if (r == PEER_E_QUOTA)                        return DRIVER_E_QUOTA;                else                        return error_fold(r);
r == PEER_E_QUOTA
r
r
PEER_E_QUOTA
PEER_E_QUOTA
return DRIVER_E_QUOTA;
DRIVER_E_QUOTA
DRIVER_E_QUOTA
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(28,5,0)
(150,48,0)
(108,76,0)
(62,49,0)
(133,85,0)
(80,39,0)
(26,92,0)
(11,95,0)
(145,143,0)
(164,75,0)
(22,50,0)
(156,21,0)
(125,86,0)
(124,21,0)
(99,61,0)
(64,91,0)
(109,70,0)
(95,11,0)
(96,23,0)
(39,158,0)
(111,2,0)
(121,75,0)
(29,26,0)
(131,162,0)
(53,107,0)
(4,145,0)
(16,38,0)
(143,145,0)
(14,154,0)
(92,26,0)
(8,38,0)
(99,158,0)
(99,27,0)
(114,38,0)
(92,4,0)
(91,65,0)
(51,86,0)
(30,10,0)
(102,43,0)
(128,165,0)
(51,103,0)
(78,54,0)
(24,66,0)
(35,51,0)
(83,165,0)
(103,51,0)
(102,128,0)
(157,105,0)
(58,71,0)
(136,88,0)
(148,126,0)
(71,126,0)
(141,155,0)
(142,121,0)
(69,49,0)
(111,44,0)
(99,148,0)
(2,111,0)
(87,44,0)
(118,161,0)
(141,159,0)
(67,96,0)
(68,127,0)
(99,74,0)
(120,102,0)
(19,23,0)
(40,32,0)
(134,126,0)
(123,49,0)
(4,31,0)
(95,75,0)
(76,73,0)
(107,66,0)
(15,154,0)
(3,7,0)
(56,44,0)
(39,71,0)
(77,145,0)
(70,109,0)
(78,155,0)
(140,3,0)
(128,96,0)
(162,114,0)
(132,66,0)
(119,102,0)
(20,103,0)
(137,117,0)
(117,11,0)
(146,38,0)
(6,102,0)
(84,50,0)
(147,26,0)
(113,74,0)
(44,111,0)
(47,128,0)
(33,32,0)
(25,76,0)
(11,117,0)
(79,128,0)
(99,54,0)
(18,114,0)
(122,126,0)
(76,114,0)
(32,114,0)
(97,92,0)
(127,81,0)
(9,73,0)
(127,114,0)
(144,95,0)
(99,151,0)
(37,155,0)
(1,70,0)
(75,95,0)
(66,121,0)
(102,0,0)
(99,59,0)
(99,63,0)
(107,36,0)
(89,141,0)
(116,38,0)
(112,61,0)
(73,43,0)
(44,0,0)
(54,105,0)
(153,31,0)
(135,103,0)
(31,88,0)
(151,49,0)
(102,71,0)
(73,76,0)
(139,143,0)
(45,126,0)
(118,32,0)
(102,107,0)
(57,148,0)
(94,165,0)
(152,90,0)
(23,96,0)
(141,81,0)
(13,121,0)
(52,7,0)
(99,10,0)
(31,4,0)
(91,31,0)
(154,49,0)
(106,143,0)
(103,114,0)
(66,107,0)
(104,111,0)
(23,19,0)
(73,154,0)
(154,73,0)
(15,110,0)
(100,165,0)
(99,65,0)
(71,102,0)
(5,19,0)
(155,165,0)
(4,92,0)
(145,4,0)
(7,3,0)
(121,66,0)
(2,127,0)
(41,151,0)
(48,75,0)
(17,117,0)
(32,118,0)
(130,90,0)
(155,141,0)
(99,110,0)
(161,118,0)
(7,81,0)
(143,114,0)
(117,114,0)
(98,126,0)
(19,5,0)
(5,0,0)
(21,155,0)
(72,118,0)
(114,127,0)
(115,15,0)
(159,141,0)
(151,51,0)
(127,2,0)
(70,114,0)
(50,71,0)
(96,128,0)
(75,38,0)
(93,95,0)
(46,19,0)
(60,59,0)
(34,70,0)
(12,63,0)
(55,27,0)
(138,47,0)
(90,71,0)
(160,159,0)
(86,88,0)
(82,78,0)
(26,0,0)
(42,5,0)
(64,101,1)
(118,32,1)
(31,4,1)
(47,138,1)
(102,128,1)
(3,140,1)
(51,35,1)
(4,145,1)
(145,77,1)
(22,84,1)
(10,30,1)
(66,132,1)
(99,110,1)
(91,64,1)
(140,7,1)
(110,15,1)
(135,20,1)
(48,150,1)
(84,90,1)
(32,114,1)
(76,25,1)
(108,14,1)
(141,81,1)
(121,75,1)
(139,92,1)
(90,130,1)
(92,26,1)
(19,46,1)
(164,162,1)
(147,153,1)
(138,128,1)
(18,3,1)
(7,52,1)
(96,23,1)
(25,108,1)
(99,74,1)
(109,70,1)
(115,129,1)
(5,0,1)
(78,155,1)
(102,0,1)
(121,142,1)
(50,71,1)
(7,81,1)
(34,48,1)
(35,103,1)
(89,37,1)
(103,135,1)
(50,22,1)
(51,103,1)
(99,148,1)
(163,71,1)
(79,149,1)
(145,143,1)
(11,117,1)
(65,91,1)
(91,31,1)
(5,42,1)
(19,5,1)
(92,97,1)
(107,66,1)
(57,163,1)
(41,161,1)
(93,144,1)
(30,50,1)
(117,114,1)
(112,21,1)
(28,79,1)
(12,90,1)
(155,141,1)
(127,68,1)
(82,21,1)
(44,56,1)
(41,86,1)
(6,58,1)
(96,67,1)
(131,114,1)
(151,51,1)
(143,114,1)
(9,76,1)
(21,124,1)
(158,39,1)
(46,5,1)
(77,143,1)
(23,19,1)
(78,82,1)
(141,159,1)
(17,164,1)
(70,1,1)
(97,26,1)
(60,109,1)
(111,44,1)
(95,11,1)
(99,63,1)
(27,55,1)
(143,106,1)
(124,156,1)
(13,53,1)
(54,78,1)
(106,139,1)
(39,71,1)
(148,57,1)
(26,0,1)
(58,47,1)
(103,114,1)
(153,161,1)
(159,160,1)
(149,155,1)
(113,162,1)
(14,109,1)
(58,107,1)
(156,149,1)
(99,61,1)
(55,47,1)
(104,44,1)
(67,23,1)
(125,51,1)
(99,10,1)
(152,163,1)
(72,32,1)
(86,125,1)
(2,111,1)
(150,75,1)
(102,43,1)
(26,29,1)
(120,6,1)
(114,127,1)
(111,104,1)
(87,18,1)
(118,72,1)
(161,118,1)
(99,151,1)
(102,107,1)
(137,17,1)
(32,40,1)
(90,71,1)
(99,59,1)
(3,7,1)
(42,28,1)
(15,115,1)
(29,147,1)
(162,131,1)
(119,120,1)
(129,154,1)
(127,2,1)
(24,121,1)
(74,113,1)
(99,65,1)
(80,50,1)
(63,12,1)
(151,41,1)
(40,33,1)
(44,0,1)
(70,114,1)
(4,92,1)
(95,93,1)
(37,3,1)
(73,76,1)
(15,154,1)
(160,89,1)
(154,73,1)
(33,129,1)
(99,54,1)
(73,9,1)
(101,31,1)
(20,101,1)
(66,121,1)
(61,112,1)
(132,24,1)
(99,27,1)
(47,128,1)
(48,75,1)
(102,119,1)
(56,87,1)
(59,60,1)
(68,2,1)
(127,81,1)
(71,102,1)
(75,95,1)
(128,96,1)
(39,80,1)
(144,11,1)
(99,158,1)
(53,48,1)
(162,114,1)
(142,13,1)
(73,43,1)
(21,155,1)
(130,152,1)
(117,137,1)
(1,34,1)
(76,114,1)
(103,114,2)
(93,162,2)
(111,44,2)
(142,48,2)
(104,3,2)
(33,129,2)
(91,31,2)
(117,114,2)
(131,3,2)
(2,111,2)
(119,48,2)
(35,101,2)
(141,81,2)
(20,101,2)
(51,101,2)
(162,3,2)
(145,143,2)
(106,161,2)
(99,74,2)
(31,4,2)
(73,109,2)
(74,162,2)
(147,161,2)
(11,117,2)
(97,161,2)
(145,161,2)
(17,162,2)
(24,48,2)
(15,129,2)
(82,21,2)
(80,50,2)
(95,162,2)
(86,101,2)
(141,3,2)
(70,48,2)
(51,103,2)
(84,90,2)
(5,0,2)
(41,161,2)
(154,109,2)
(39,50,2)
(48,75,2)
(96,23,2)
(90,163,2)
(42,149,2)
(151,161,2)
(152,163,2)
(119,47,2)
(143,161,2)
(11,162,2)
(155,3,2)
(102,0,2)
(91,101,2)
(55,47,2)
(90,71,2)
(1,48,2)
(6,47,2)
(132,48,2)
(148,163,2)
(143,114,2)
(21,155,2)
(107,66,2)
(14,109,2)
(77,161,2)
(19,5,2)
(151,101,2)
(10,50,2)
(124,149,2)
(2,3,2)
(87,3,2)
(99,61,2)
(68,3,2)
(70,114,2)
(40,129,2)
(99,151,2)
(57,163,2)
(60,109,2)
(108,109,2)
(71,102,2)
(13,48,2)
(107,48,2)
(139,161,2)
(121,48,2)
(114,127,2)
(15,154,2)
(99,65,2)
(65,101,2)
(59,109,2)
(101,161,2)
(76,109,2)
(50,90,2)
(128,96,2)
(72,129,2)
(26,0,2)
(79,149,2)
(160,3,2)
(76,114,2)
(53,48,2)
(99,110,2)
(103,101,2)
(102,47,2)
(47,128,2)
(23,19,2)
(163,47,2)
(54,21,2)
(22,90,2)
(66,121,2)
(73,76,2)
(32,129,2)
(112,21,2)
(154,73,2)
(19,149,2)
(99,158,2)
(144,162,2)
(75,162,2)
(61,21,2)
(21,149,2)
(109,48,2)
(158,50,2)
(99,10,2)
(58,48,2)
(95,11,2)
(102,128,2)
(118,32,2)
(150,162,2)
(92,26,2)
(102,107,2)
(117,162,2)
(12,90,2)
(18,3,2)
(28,149,2)
(41,101,2)
(155,141,2)
(109,70,2)
(125,101,2)
(153,161,2)
(102,43,2)
(114,3,2)
(5,149,2)
(32,114,2)
(67,149,2)
(66,48,2)
(127,3,2)
(48,162,2)
(46,149,2)
(56,3,2)
(120,47,2)
(156,149,2)
(7,81,2)
(73,43,2)
(34,48,2)
(99,54,2)
(4,161,2)
(102,48,2)
(31,161,2)
(99,148,2)
(89,3,2)
(27,47,2)
(92,161,2)
(137,162,2)
(127,2,2)
(128,149,2)
(118,129,2)
(161,118,2)
(99,63,2)
(151,51,2)
(23,149,2)
(3,7,2)
(99,59,2)
(25,109,2)
(30,50,2)
(63,90,2)
(138,149,2)
(130,163,2)
(9,109,2)
(135,101,2)
(162,114,2)
(71,48,2)
(120,48,2)
(78,155,2)
(39,71,2)
(99,27,2)
(149,3,2)
(44,3,2)
(111,3,2)
(4,145,2)
(159,3,2)
(44,0,2)
(75,95,2)
(96,149,2)
(110,129,2)
(127,81,2)
(163,48,2)
(71,47,2)
(129,109,2)
(121,75,2)
(164,162,2)
(115,129,2)
(113,162,2)
(141,159,2)
(78,21,2)
(64,101,2)
(58,47,2)
(6,48,2)
(26,161,2)
(47,149,2)
(50,71,2)
(29,161,2)
(37,3,2)
(4,92,2)
(161,129,2)
-----------------------------------
(0,Peer *sender)
(1,activation)
(2,&sender->bus->names)
(3,*destination == ':')
(4,activation_send_signal(sender->bus->controller, name->activation->path)
(5,sender->bus)
(6,receiver)
(7,*destination)
(8,if (!ownership)
(9,message)
(10,return DRIVER_E_QUOTA;)
(11,&name->ownership_list)
(12,DRIVER_E_EXPECTED_REPLY_EXISTS)
(13,ownership)
(14,r)
(15,error_fold(r)
(16,if (!name)
(17,name)
(18,name)
(19,sender->bus->peers)
(20,name)
(21,r > 0)
(22,PEER_E_QUOTA)
(23,&sender->bus->peers)
(24,Peer)
(25,activation)
(26,sender->bus)
(27,return DRIVER_E_DESTINATION_NOT_FOUND;)
(28,sender)
(29,bus)
(30,DRIVER_E_QUOTA)
(31,r = activation_send_signal(sender->bus->controller, name->activation->path)
(32,name->activation)
(33,name)
(34,name)
(35,requested)
(36,)
(37,r)
(38,)
(39,error_fold(r)
(40,activation)
(41,0)
(42,bus)
(43,Message *message)
(44,sender->bus)
(45,r)
(46,peers)
(47,!receiver)
(48,!ownership)
(49,)
(50,r == PEER_E_QUOTA)
(51,name->activation->requested)
(52,destination)
(53,receiver)
(54,return error_trace(r)
(55,DRIVER_E_DESTINATION_NOT_FOUND)
(56,bus)
(57,0)
(58,r)
(59,return DRIVER_E_DESTINATION_NOT_FOUND;)
(60,DRIVER_E_DESTINATION_NOT_FOUND)
(61,return DRIVER_E_DESTINATION_NOT_FOUND;)
(62,if (r)
(63,return DRIVER_E_EXPECTED_REPLY_EXISTS;)
(64,r)
(65,return error_fold(r)
(66,c_container_of(ownership->owner, Peer, owned_names)
(67,id)
(68,destination)
(69,if (!name->activation->requested)
(70,name->activation)
(71,r = peer_queue_call(receiver, sender, message)
(72,requested)
(73,activation_queue_message(name->activation, message)
(74,return DRIVER_E_DESTINATION_NOT_FOUND;)
(75,ownership = c_list_first_entry(&name->ownership_list, NameOwnership, name_link)
(76,name->activation)
(77,path)
(78,error_trace(r)
(79,receiver)
(80,r)
(81,const char *destination)
(82,r)
(83,if (r)
(84,r)
(85,)
(86,name->activation->requested = true)
(87,sender)
(88,)
(89,destination)
(90,r == PEER_E_EXPECTED_REPLY_EXISTS)
(91,error_fold(r)
(92,sender->bus->controller)
(93,name_link)
(94,id)
(95,c_list_first_entry(&name->ownership_list, NameOwnership, name_link)
(96,peer_registry_find_peer(&sender->bus->peers, id)
(97,controller)
(98,receiver)
(99,RET)
(100,if (!receiver)
(101,r)
(102,peer_queue_call(receiver, sender, message)
(103,name->activation)
(104,names)
(105,)
(106,activation)
(107,receiver = c_container_of(ownership->owner, Peer, owned_names)
(108,name)
(109,!name->activation)
(110,return error_fold(r)
(111,sender->bus->names)
(112,DRIVER_E_DESTINATION_NOT_FOUND)
(113,DRIVER_E_DESTINATION_NOT_FOUND)
(114,name = name_registry_find_name(&sender->bus->names, destination)
(115,r)
(116,name)
(117,name->ownership_list)
(118,name->activation->requested)
(119,message)
(120,sender)
(121,ownership->owner)
(122,if (r)
(123,if (!name->activation)
(124,0)
(125,true)
(126,)
(127,name_registry_find_name(&sender->bus->names, destination)
(128,receiver = peer_registry_find_peer(&sender->bus->peers, id)
(129,r)
(130,PEER_E_EXPECTED_REPLY_EXISTS)
(131,name)
(132,owned_names)
(133,if (r == PEER_E_EXPECTED_REPLY_EXISTS)
(134,if (*destination == ':')
(135,activation)
(136,if (r)
(137,ownership_list)
(138,receiver)
(139,name)
(140,':')
(141,unique_name_to_id(destination, &id)
(142,owner)
(143,name->activation)
(144,NameOwnership)
(145,name->activation->path)
(146,ownership)
(147,sender)
(148,return 0;)
(149,r)
(150,ownership)
(151,return 0;)
(152,r)
(153,r)
(154,r = activation_queue_message(name->activation, message)
(155,r = unique_name_to_id(destination, &id)
(156,r)
(157,if (r > 0)
(158,return error_fold(r)
(159,&id)
(160,id)
(161,!name->activation->requested)
(162,!name)
(163,r)
(164,ownership)
(165,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^