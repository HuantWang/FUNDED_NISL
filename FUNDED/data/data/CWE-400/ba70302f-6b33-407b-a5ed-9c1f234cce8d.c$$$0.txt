-----label-----
0
-----code-----
int
main(int argc, CS const *argv)
{
    CCS exe;
    CCS action;
    CCS pager = NULL;
    CS dscript = NULL;
    CS redo_script = NULL;
    int proplevel = -1;
    int no_server = 0;
    int make_clean = 0;
    int tee = 0;
    int rc = 0;

    // Figure out the full path to the current executable program.
    // Should be done asap, before anything happens to argv.
    if (!(exe = putil_getexecpath())) {
	putil_die("unable to determine path to argv[0]\n");
    }

#if defined(_WIN32)
    if (putil_getenv("DEBUGBREAK")) {
	DebugBreak();
    }
#endif	/*_WIN32*/

    // Initialize verbosity. Should be done before most
    // other initializations since they may use verbosity.
    vb_init();
    atexit(vb_fini);

    // Initialize the properties database and, at the same time,
    // arrange for it to be finalized at exit time. Doing it this
    // way ensures that it will be finalized last, meaning that
    // other exit and error handling routines will have access
    // to properties until the bitter end. Really, the only reason
    // to explicitly free data right before exit like this is
    // to avoid spurious warnings from memory leak detectors like
    // valgrind and make real problems more obvious.
    prop_init(APPLICATION_NAME);
    atexit(prop_fini);
    // This has been known to cause core dumps on Linux. I think the
    // problem is since fixed but since it does no real good, as noted,
    // I'm leaving it off for now.
    //atexit(prop_unexport_all);

    // Load properties from the documented sequence of prop files and
    // the environment.
    prefs_init(exe, PROP_EXT, NULL);

    // Initialize the hash-code generation.
    code_init();

    // Default this to on; make auditing is tough without it.
    prop_override_true(P_MAKE_ONESHELL);

    // TODO - this is just for porting purposes so we can see if
    // AO is treated as BLODA. Remove if and when a successful
    // port is made.
#if defined(__CYGWIN__)
    putil_putenv("CYGWIN=detect_bloda");
#endif

    // Parse the command line up to the first unrecognized item.
    // E.g. given "command -flag1 -flag2 arg1 -flag3 -flag4" we parse
    // only -flag1 and -flag2.
    for (bsd_getopt_reset();;) {
	int c;

	// *INDENT-OFF*
	static CS short_opts =
	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";
	static struct option long_opts[] = {
	    {"oneshell",	no_argument,	   NULL, '1'},
	    {"absolute-paths",	no_argument,	   NULL, 'a'},
	    {"agg-level",	required_argument, NULL, LF('A','G')},
	    {"audit-only",	no_argument,	   NULL, 'A'},
	    {"make-clean",	no_argument,	   NULL, 'c'},
	    {"directory",	required_argument, NULL, 'C'},
	    {"download-only",	no_argument,	   NULL, 'd'},
	    {"download-silent",	no_argument,	   NULL, 'D'},
	    {"dtrace",		required_argument, NULL, LF('D','T')},
	    {"client-platform",	required_argument, NULL, LF('C','P')},
	    {"error-strict",	no_argument,	   NULL, 'E'},
	    {"make-file",	required_argument, NULL, 'F'},
	    {"git",		no_argument,	   NULL, 'G'},
	    {"help",		no_argument,	   NULL, 'h'},
	    {"Help",		optional_argument, NULL, 'H'},
	    {"properties",	optional_argument, NULL, LF('P','*')},
	    {"identity-hash",	required_argument, NULL, 'I'},
	    {"log-file",	required_argument, NULL, 'l'},
	    {"log-file-temp",	no_argument,	   NULL, 'L'},
	    {"log-tee",		no_argument,	   NULL, LF('L','T')},
	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},
	    {"make-depends",	optional_argument, NULL, 'M'},
	    {"mem-debug",	optional_argument, NULL, LF('D','M')},
	    {"members-only",	no_argument,	   NULL, 'm'},
	    {"output-file",	required_argument, NULL, 'o'},
	    {"Output-file",	required_argument, NULL, 'O'},
	    {"project-name",	required_argument, NULL, 'p'},
	    {"pager",		no_argument,	   NULL, 'P'},
	    {"profile",		no_argument,	   NULL, LF('P','%')},
	    {"quiet",		no_argument,	   NULL, 'q'},
	    {"extra-quiet",	no_argument,	   NULL, 'Q'},
	    {"leave-roadmap",	no_argument,	   NULL, 'r'},
	    {"reuse-roadmap",	no_argument,       NULL, 'R'},
	    {"restart",		no_argument,	   NULL, LF('R','L')},
	    {"server",		required_argument, NULL, 's'},
	    {"strict",		no_argument,	   NULL, 'S'},
	    {"script",		required_argument, NULL, LF('s','c')},
	    {"print-elapsed",	no_argument,	   NULL, 't'},
	    {"upload-only",	no_argument,	   NULL, 'u'},
	    {"uncompressed-transfers",no_argument, NULL, 'U'},
	    {"verbosity",	optional_argument, NULL, 'v'},
	    {"local-verbosity",	required_argument, NULL, 'V'},
	    {"version",		optional_argument, NULL, LF('v','n')},
	    {"why",		no_argument,	   NULL, 'w'},
	    {"WFlag",		required_argument, NULL, 'W'},
	    {"exec-verbosity",	required_argument, NULL, 'x'},
	    {"execute-only",	no_argument,	   NULL, 'X'},
	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},
	    {0,				0,		   NULL,  0 },
	};
	// *INDENT-ON*

	c = bsd_getopt(argc, argv, short_opts, long_opts, NULL);
	if (c == -1) {
	    break;
	}

	switch (c) {

	    case '1':
		prop_unset(P_MAKE_ONESHELL, 0);
		break;

	    case 'a':
		prop_override_true(P_ABSOLUTE_PATHS);
		break;

	    case LF('A','G'):
		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);
		break;

	    case 'A':
		prop_override_true(P_AUDIT_ONLY);
		break;

	    // Undocumented hack - allows an automatic "make clean" which
	    // is not audited or counted in elapsed time.
	    case 'c':
		make_clean = 1;
		break;

	    case 'C':
		{
		    CCS cd_to;

		    (void)util_substitute_params(bsd_optarg, &cd_to);
		    if (!QuietMode) {
			fprintf(stderr, "+ cd %s\n", cd_to);
		    }
		    if (chdir(cd_to)) {
			putil_syserr(2, cd_to);
		    }
		    putil_free(cd_to);
		}
		break;

	    case LF('C', 'P'):
		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);
		break;

	    // Undocumented - used to debug downloads without modifying state.
	    // We may not need this forever.
	    case 'D':
		prop_unset(P_DOWNLOAD_ONLY, 0);
		prop_put_ulong(P_DOWNLOAD_ONLY, 2);
		break;

	    case 'd':
		prop_override_true(P_DOWNLOAD_ONLY);
		break;

	    case LF('D', 'T'):
		dscript = bsd_optarg;
		break;

	    case 'E':
		prop_put_long(P_STRICT_ERROR, 1);
		break;

	    case 'I':
		prop_override_str(P_IDENTITY_HASH, bsd_optarg);
		break;

	    case 'L':
		{
		    char buf[1024];

		    snprintf(buf, 1024, "%s.%lu.log",
			       prop_get_str(P_APP), (unsigned long)getpid());
		    prop_override_str(P_LOG_FILE, buf);
		    prop_override_ulong(P_LOG_FILE_TEMP, 1);
		}
		break;

	    case LF('L', 'T'):
		tee = 1;
		break;

	    case LF('L', 'S'):
		prop_override_ulong(P_LOG_TIME_STAMP, 1);
		break;

	    case 'l':
		{
		    CS lbuf;

		    if (*bsd_optarg == ':') {
			prop_override_ulong(P_LOG_TIME_STAMP, 1);
			bsd_optarg++;
		    }

		    if (putil_is_absolute(bsd_optarg)) {
			prop_override_str(P_LOG_FILE, bsd_optarg);
		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {
			prop_override_str(P_LOG_FILE, lbuf);
			putil_free(lbuf);
		    } else {
			putil_syserr(0, bsd_optarg);
			prop_override_str(P_LOG_FILE, bsd_optarg);
		    }
		}
		break;

	    case 'F':
		prop_override_str(P_MAKE_FILE, bsd_optarg);
		break;

	    case 'G':
		prop_override_true(P_GIT);
		no_server = 1;
		break;

	    case 'M':
		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {
		    prop_override_str(P_MAKE_DEPENDS, "d");
		} else {
		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);
		}
		break;

	    case 'm':
		prop_override_true(P_MEMBERS_ONLY);
		break;

	    case 'o':
		no_server = 1;
	    case 'O':
		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {
		    prop_override_str(P_OUTPUT_FILE, DEVNULL);
		} else {
		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);
		}
		break;

	    case 'p':
		prop_override_str(P_PROJECT_NAME, bsd_optarg);
		break;

	    case 'P':
		if (!(pager = getenv("PAGER"))) {
		    pager = "less";
		}
		break;

		// Generate runtime linker profile output. Works on
		// Solaris and Linux at least.
	    case LF('P', '%'):
#if !defined(_WIN32)
		putil_putenv("LD_PROFILE=" AUDITOR);
#endif	/*_WIN32*/
		break;

	    case 'Q':
		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");
	    case 'q':
		QuietMode = 1;
		vb_addstr("-");
		break;

	    case 'R':
		prop_override_true(P_REUSE_ROADMAP);
		prop_unset(P_DOWNLOAD_ONLY, 0);
		prop_put_ulong(P_DOWNLOAD_ONLY, 2);
	    case 'r':
		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);
		prop_override_true(P_LEAVE_ROADMAP);
		break;

	    case LF('R', 'L'):
		if ((rc = http_restart())) {
		    exit(rc);
		}
		break;

	    case 's':
		prop_override_str(P_SERVER, bsd_optarg);
		break;

	    case 'S':
		prop_put_ulong(P_STRICT, 1);
		prop_put_ulong(P_STRICT_DOWNLOAD, 1);
		prop_put_ulong(P_STRICT_UPLOAD, 1);
		break;

	    case LF('s', 'c'):
		redo_script = bsd_optarg;
		break;

	    case 't':
		prop_unset(P_PRINT_ELAPSED, 1);
		prop_put_str(P_PRINT_ELAPSED, "-1");
		break;

	    case 'u':
		prop_override_ulong(P_UPLOAD_ONLY, 1);
		break;

	    case 'U':
		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);
		break;

	    case 'V':		// keeps verbosity out of auditor
		prop_unexport(P_VERBOSITY, 1);
	    case 'v':
		vb_addstr(bsd_optarg);
		break;

	    case LF('D', 'M'):
#if defined(sun)
		if (bsd_optarg && *bsd_optarg == 'w') {
		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");
		    if (!putil_getenv("MALLOC_DEBUG")) {
			putil_putenv("MALLOC_DEBUG=WATCH");
		    }
		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));
		} else {
		    putil_putenv("LD_PRELOAD=/lib/libumem.so");
		    if (!putil_getenv("UMEM_DEBUG")) {
			putil_putenv("UMEM_DEBUG=default,verbose");
		    }
		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));
		}
		if (putil_getenv("LD_PRELOAD")) {
		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));
		}
#elif defined(__APPLE__)
		putil_putenv("MallocScribble=1");
		putil_putenv("MallocPreScribble=1");
		putil_putenv("MallocBadFreeAbort=1");
		putil_putenv("MallocCheckHeapAbort=1");
		//putil_putenv("MallocStackLogging=1");
		//putil_putenv("MallocStackLoggingNoCompact=1");
		//putil_putenv("MallocCheckHeapStart=1000");
		//putil_putenv("MallocCheckHeapEach=1000");
		//putil_putenv("MallocCheckHeapSleep=-200");
		//(void)system("env | grep '^Malloc'");
#else	/*__APPLE__*/
		putil_die("no malloc debugger implemented");
#endif	/*__APPLE__*/
		break;

	    case LF('v', 'n'):
		_print_version(bsd_optarg && bsd_optarg[0] == '+');
		exit(0);
		break;

	    case 'w':
		vb_addbit(VB_WHY);
		break;

	    case 'W':
		// This is reserved for extension flags a la gcc.
		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the
		// makefile generator.
		{
		    CCS old;
		    CS str;

		    if ((old = prop_get_str(P_WFLAG))) {
			asprintf(&str, "%s\n%s", old, bsd_optarg);
			prop_override_str(P_WFLAG, str);
			putil_free(str);
		    } else {
			prop_put_str(P_WFLAG, bsd_optarg);
		    }
		}
		break;

	    case 'x':
		vb_addbit(VB_EXEC);
		break;

	    case 'X':
		prop_override_true(P_EXECUTE_ONLY);
		prop_put_ulong(P_PRINT_ELAPSED, 1);
		prop_unset(P_SERVER, 1);
		break;

	    case 'Y':
		prop_override_true(P_SYNCHRONOUS_TRANSFERS);
		break;

	    case 'h':
		_usage(0);
		break;

	    case LF('P','*'):	// alias to --Help for mnemonic reasons
	    case 'H':
		// Put off printing properties till they're all filled in.
		if (bsd_optarg && *bsd_optarg == '+') {
		    proplevel = 1;
		} else {
		    proplevel = 0;
		}
		break;

	    default:
		_usage(1);
	}
    }
    argc -= bsd_optind;
    argv += bsd_optind;

    // Special case - this program can turn into a "tee"
    // if requested. DOES NOT RETURN!
    if (tee) {
	tee_into(prop_get_str(P_LOG_FILE));
    }

    if (make_clean) {
	_make_clean(argc, argv);
    }

    // The command we've been asked to invoke.
    if ((action = argv[0])) {
	// Hack for typing ease: "make" is a synonym for "run make".
	// Similarly, "ant" is a synonym for "run ant".
	// And any word with non-alphanumeric chars must be a program to run.
	if (strpbrk(action, "/\\=+-")
	    || strstr(action, "make")
	    || !util_pathcmp(action, "sh")
	    || !util_pathcmp(action, "vcbuild")		// Windows only
	    || !util_pathcmp(action, "msbuild")		// Windows only
	    || !util_pathcmp(action, "ant")) {
	    action = "run";
	} else {
	    argv++;
	    argc--;
	}
    } else {
	// The default command ...
	action = "help";
    }

    // Default project name is the name of the dir containing the project
    // config file, with any numerical extension following a '-' removed.
    if (!prop_has_value(P_PROJECT_NAME)) {
	CCS pbase;
	CS pjname, ptr, dash;

	pbase = prop_get_str(P_BASE_DIR);
	if (pbase && (pjname = putil_basename(pbase)) && *pjname) {
	    ptr = putil_strdup(pjname);
	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {
		*dash = '\0';
	    }
	    prop_put_str(P_PROJECT_NAME, ptr);
	    putil_free(ptr);
	}
    }

    // For convenience, the -o flag suppresses server interaction along
    // with specifying an output file.
    if (no_server) {
	prop_unset(P_SERVER, 1);
    }

    // Recycling would break full-makefile generation.
    if (prop_has_value(P_MAKE_FILE) && !prop_has_value(P_MAKE_DEPENDS)) {
	prop_override_ulong(P_UPLOAD_ONLY, 1);
    }

    // Optionally run help output through a pager.
#if !defined(_WIN32)
    if (pager ||
	(streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER)))) {
	int pfd[2];
	pid_t pid;

	// Allow indirection through standard $PAGER EV.
	if (*pager == '$') {
	    if (!(pager = getenv(pager + 1))) {
		pager = prop_get_str(P_DOC_PAGER);
	    }
	}

	fflush(NULL);

	if (pipe(pfd) < 0) {
	    putil_syserr(2, "pipe");
	}

	// Note that the *parent* process becomes the pager.
	if ((pid = fork()) == 0) {
	    // Child
	    close(pfd[0]);
	    if (pfd[1] != STDOUT_FILENO) {
		dup2(pfd[1], STDOUT_FILENO);
		close(pfd[1]);
	    }
	} else if (pid > 0) {
	    // Parent
	    close(pfd[1]);
	    if (pfd[0] != STDIN_FILENO) {
		dup2(pfd[0], STDIN_FILENO);
		close(pfd[0]);
	    }

	    execlp(pager, pager, (char *)0);
	    putil_syserr(0, pager);
	    _exit(2);
	} else {
	    putil_syserr(2, "fork");
	}
    }
#endif	/*_WIN32*/

    // For debugging convenience allow server=nnnn to mean "localhost:nnnn"
    // and server=foo to mean "foo:8080" since those are the most common.
    if (prop_has_value(P_SERVER)) {
	const char *svr;

	svr = prop_get_str(P_SERVER);
	if (!strchr(svr, ':')) {
	    char buf[256];

	    if (isdigit((int)*svr)) {
		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);
	    } else {
		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);
	    }
	    prop_override_str(P_SERVER, buf);
	}
    }

    // Diagnostic: dump properties and quit.
    if (proplevel >= 0) {
	prop_help(proplevel, vb_bitmatch(VB_STD), exe);
	exit(0);
    }

    http_init();

    // Arrange for the elapsed time to be printed out at exit time
    // if requested by user property. The property is not a boolean
    // but a mimimum number of seconds which must elapse in order
    // to trigger output.
    if ((ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED))) {
	StartTime = time(NULL);
	atexit(_print_elapsed_time);
    }

    if (streq(action, "run")) {
	CCS cwd = NULL;
	CCS logfile = NULL;
	CCS rmap;
	CCS logprop;

	if (!argv || !*argv) {
	    _usage(1);
	}

	// The auditor ignores anything it considers to be a temp
	// file, which can cause terribly confusing behavior if
	// run on a project rooted in (say) /tmp. It's a natural
	// tendency for someone setting up a quick test case to
	// put it in /tmp and then spend hours trying to figure
	// out why it's behaving strangely. To help avoid this
	// we disallow the auditor from running when the CWD is
	// one we consider a repository for temp files.
	if ((cwd = util_get_cwd())) {
	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {
		putil_die("illegal tmp working directory: %s", cwd);
	    }
	} else {
	    putil_syserr(2, "util_get_cwd()");
	}

	// These values are pre-exported to reserve env-block space.
	// To not do so would risk a dangerous realloc of the 'environ'
	// pointer within an unsuspecting host process.

	// Reserve a block of env space for the current cmd depth.
	prop_put_ulong(P_DEPTH, 0);

	// Reserve a block of env space for the parent cmd id.
	// Seed it with our pid.
	prop_put_ulong(P_PCMDID, getpid());

	// Reserve a block of env space for the parent cmd code.
	prop_put_str(P_PCCODE, CSV_NULL_FIELD);

	// This needs to be present in the env from the start even when off.
	// But being a boolean it only needs room for one digit.
	prop_put_ulong(P_AGGREGATED_SUBCMD, 0);

	// Allow the cmd to be preceded by EV's in the manner of the shell.
	while (strchr(*argv, '=')) {
	    putil_putenv(*argv++);
	}

	// Determine whether the user requested a log file and
	// apply the %u, %p, etc. formats to it if so.
	if ((logprop = prop_get_str(P_LOG_FILE))) {
	    (void)util_substitute_params(logprop, &logfile);
	    // In case it's present but unwriteable.
	    if (logfile)
		(void)unlink(logfile);
	}

	// Work out the name of the roadmap file and store the result.
	if ((rmap = prop_get_str(P_ROADMAPFILE))) {
	    if (!putil_is_absolute(rmap)) {
		if ((rmap = putil_realpath(rmap, 1))) {
		    prop_override_str(P_ROADMAPFILE, rmap);
		    putil_free(rmap);
		} else {
		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));
		}
	    }
	} else if (prop_has_value(P_SERVER)) {
	    rmap = tempnam(NULL, "rmap.");
	    prop_put_str(P_ROADMAPFILE, rmap);
	    putil_free(rmap);
	}

	if (prop_has_value(P_SERVER)) {
	    // Get the new roadmap.
	    if (!prop_is_true(P_REUSE_ROADMAP) &&
		    !prop_is_true(P_UPLOAD_ONLY)) {
		mon_get_roadmap();
	    }

	    // Start a session. We do this *after* getting the roadmap
	    // to avoid session expiration during roadmap-getting.
	    // That would only be a risk for a very slow roadmap or a
	    // very fast session expiration but it could happen.
	    if ((rc = mon_begin_session())) {
		putil_die("can't get a session at %s",
			  prop_get_str(P_SERVER));
	    }
	}

#if defined(_WIN32)
	/* TODO */
#else
	if (redo_script) {
	    FILE *fp;

	    if (!(fp = fopen(redo_script, "w"))) {
		putil_syserr(2, redo_script);
	    } else {
		extern char **environ;		// Win32 declares this in stdlib.h
		size_t plen;
		char **pblock;
		char **envp;
		struct utsname sysdata;

		// This is just to get a sorted environment list.
		plen = prop_new_env_block_sizeA(environ);
		pblock = (char **)alloca(plen);
		memset(pblock, 0, plen);
		(void)prop_custom_envA(pblock, environ);

		fprintf(fp, "#!/bin/sh\n\n");

		if (!putil_uname(&sysdata)) {
		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",
			sysdata.sysname, sysdata.nodename, sysdata.release,
			sysdata.version, sysdata.machine);
		}

		fprintf(fp, "# Original environment settings:\n");
		for (envp = pblock + 1; *envp; envp++) {
		    char *t;

		    if (**envp == '_')
			continue;

		    fputs(": export ", fp);
		    for (t = *envp; *t && *t != '='; t++) {
			fputc(*t, fp);
		    }
		    fputc(*t++, fp);
		    fprintf(fp, "'%s'\n", t);
		}
		fprintf(fp, "cd '%s' || exit 2\n", cwd);
		fprintf(fp, "exec %s\n", util_requote_argv(argv));

		(void)fchmod(fileno(fp), 0755);
		(void)fclose(fp);
		vb_printf(VB_STD, "redo script written to '%s'", redo_script);
	    }
	}
#endif

	// For systems supporting DTrace: run the cmd with the specified
	// dtrace script.
	if (dscript) {
	    CS *dargv;

	    dargv = putil_malloc(sizeof(*dargv) * 6);
	    dargv[0] = "dtrace";
	    dargv[1] = "-s";
	    dargv[2] = dscript;
	    dargv[3] = "-c";
	    dargv[4] = util_requote_argv(argv);
	    dargv[5] = NULL;
	    argv = dargv;
	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);
	}

	make_init(exe);

	if (prop_is_true(P_GIT)) {
	    git_init(exe);
	}

	// RUN AND AUDIT THE COMMAND.
	rc = run_cmd(exe, (CS *)argv, logfile);

	putil_free(logfile);

	if (prop_is_true(P_GIT)) {
	    git_fini();
	}

	make_fini();

	// If using a temp logfile, remove it now.
	if (prop_is_true(P_LOG_FILE_TEMP)) {
	    unlink(prop_get_str(P_LOG_FILE));
	}

	putil_free(cwd);
    } else if (streq(action, "roadmap")) {
	// Useful while testing roadmaps. May be dispensed with later.
	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);
	prop_override_true(P_LEAVE_ROADMAP);
	mon_get_roadmap();
    } else if (streq(action, "shop")) {
	int cflag = 0;
	int gflag = 0;
	ca_o ca;
	CCS rwd;

	// This special action is useful for internal tests of shopping
	// capabilities without changing server state, using a saved
	// roadmap file.

	while (*argv && **argv == '-') {
	    if (!strcmp(*argv, "-C")) {
		// Work with a predetermined cmd index rather than a cmd line.
		cflag = 1;
	    } else if (!strcmp(*argv, "-G")) {
		// Actually get files (default is to not change local state).
		gflag = 1;
	    }
	    argv++;
	}

	if (!argv[0]) {
	    putil_die("Usage: shop [-G] -C index | cmd...");
	}

	// Assume the pre-existence of a roadmap with the default name.
	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);
	prop_override_true(P_LEAVE_ROADMAP);

	ca = ca_new();
	ca_set_pccode(ca, CSV_NULL_FIELD);
	ca_set_prog(ca, prop_get_str(P_PROGNAME));
	ca_set_host(ca, "localhost");
	ca_set_cmdid(ca, getpid());
	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));
	ca_set_rwd(ca, rwd = util_get_rwd());
	putil_free(rwd);
	ca_set_started(ca, 1);

	// We almost always want these while debugging...
	vb_addbit(VB_SHOP);
	vb_addbit(VB_WHY);

	shop_init();
	if (cflag) {
	    rc = shop(ca, argv[0], gflag);
	} else {
	    CCS cmdline;

	    cmdline = util_requote_argv(argv);
	    ca_set_line(ca, cmdline);
	    putil_free(cmdline);
	    rc = shop(ca, NULL, gflag);
	}
	shop_fini();
    } else {
	rc = do_action(action, argc, argv);
    }

    code_fini();

    http_fini();

    return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
15,37
15,38
15,39
15,40
15,41
15,42
15,43
15,44
15,45
15,46
15,47
15,48
15,49
15,50
15,51
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
58,59
58,60
60,61
61,62
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
80,81
80,82
82,83
84,85
85,86
85,87
87,88
87,89
89,90
91,92
91,93
92,93
93,94
94,95
94,96
95,96
97,98
98,99
100,101
101,102
102,103
102,104
103,104
106,107
107,108
108,109
110,111
111,112
111,113
112,113
114,115
115,116
117,118
118,119
118,120
119,120
121,122
122,123
124,125
125,126
125,127
126,127
128,129
129,130
131,132
132,133
132,134
132,135
132,136
133,134
135,136
137,138
139,140
141,142
142,143
143,144
145,146
146,147
146,148
147,148
149,150
150,151
152,153
152,154
153,154
154,155
155,156
157,158
157,159
157,160
157,161
157,162
157,163
158,159
159,160
159,161
161,162
163,164
164,165
164,166
165,166
167,168
167,169
169,170
171,172
172,173
172,174
173,174
175,176
175,177
175,178
178,179
179,180
179,181
179,182
179,183
179,184
179,185
179,186
179,187
179,188
179,189
179,190
179,191
179,192
179,193
179,194
179,195
179,196
179,197
179,198
179,199
179,200
179,201
179,202
179,203
179,204
179,205
179,206
179,207
179,208
179,209
179,210
179,211
179,212
179,213
179,214
179,215
179,216
179,217
179,218
179,219
179,220
179,221
179,222
179,223
179,224
179,225
179,226
179,227
179,228
180,181
180,182
180,183
180,184
182,183
184,185
187,188
187,189
187,190
187,191
189,190
191,192
194,195
194,196
194,197
194,198
196,197
198,199
200,201
200,202
200,203
201,202
205,206
205,207
205,208
205,209
207,208
209,210
212,213
212,214
212,215
212,216
214,215
216,217
219,220
219,221
219,222
219,223
221,222
223,224
226,227
226,228
226,229
226,230
228,229
230,231
233,234
233,235
233,236
233,237
235,236
237,238
240,241
240,242
240,243
240,244
242,243
244,245
246,247
246,248
246,249
247,248
251,252
251,253
251,254
251,255
253,254
255,256
257,258
257,259
257,260
258,259
262,263
262,264
262,265
262,266
264,265
266,267
269,270
269,271
269,272
269,273
271,272
273,274
276,277
276,278
276,279
276,280
278,279
280,281
283,284
283,285
283,286
283,287
285,286
287,288
290,291
290,292
290,293
290,294
292,293
294,295
297,298
297,299
297,300
297,301
299,300
301,302
303,304
303,305
303,306
304,305
308,309
308,310
308,311
308,312
310,311
312,313
315,316
315,317
315,318
315,319
317,318
319,320
322,323
322,324
322,325
322,326
324,325
326,327
329,330
329,331
329,332
329,333
331,332
333,334
335,336
335,337
335,338
336,337
340,341
340,342
340,343
340,344
342,343
344,345
346,347
346,348
346,349
347,348
351,352
351,353
351,354
351,355
353,354
355,356
358,359
358,360
358,361
358,362
360,361
362,363
364,365
364,366
364,367
365,366
369,370
369,371
369,372
369,373
371,372
373,374
376,377
376,378
376,379
376,380
378,379
380,381
383,384
383,385
383,386
383,387
385,386
387,388
390,391
390,392
390,393
390,394
392,393
394,395
397,398
397,399
397,400
397,401
399,400
401,402
404,405
404,406
404,407
404,408
406,407
408,409
410,411
410,412
410,413
411,412
415,416
415,417
415,418
415,419
417,418
419,420
422,423
422,424
422,425
422,426
424,425
426,427
429,430
429,431
429,432
429,433
431,432
433,434
436,437
436,438
436,439
436,440
438,439
440,441
443,444
443,445
443,446
443,447
445,446
447,448
449,450
449,451
449,452
450,451
454,455
454,456
454,457
454,458
456,457
458,459
461,462
461,463
461,464
461,465
463,464
465,466
468,469
468,470
468,471
468,472
470,471
472,473
474,475
474,476
474,477
475,476
479,480
479,481
479,482
479,483
481,482
483,484
486,487
486,488
486,489
486,490
488,489
490,491
493,494
493,495
493,496
493,497
495,496
497,498
500,501
500,502
500,503
500,504
502,503
504,505
507,508
507,509
507,510
507,511
509,510
511,512
514,515
514,516
514,517
514,518
516,517
518,519
520,521
520,522
520,523
521,522
525,526
525,527
525,528
525,529
527,528
529,530
532,533
532,534
532,535
532,536
534,535
536,537
539,540
539,541
539,542
539,543
541,542
543,544
546,547
546,548
546,549
546,550
548,549
550,551
553,554
553,555
553,556
553,557
555,556
557,558
560,561
560,562
560,563
560,564
563,564
566,567
567,568
567,569
568,569
570,571
570,572
570,573
570,574
570,575
570,576
571,572
573,574
575,576
577,578
579,580
581,582
583,584
583,585
584,585
584,586
585,586
587,588
589,590
591,592
591,593
592,593
594,595
594,596
594,597
594,598
594,599
594,600
594,601
594,602
594,603
594,604
594,605
594,606
594,607
594,608
594,609
594,610
594,611
594,612
594,613
594,614
594,615
594,616
594,617
594,618
594,619
594,620
594,621
594,622
594,623
594,624
594,625
594,626
594,627
594,628
594,629
594,630
594,631
594,632
594,633
594,634
594,635
594,636
594,637
594,638
594,639
594,640
594,641
594,642
594,643
594,644
594,645
594,646
594,647
594,648
594,649
594,650
594,651
594,652
594,653
594,654
594,655
594,656
594,657
594,658
594,659
594,660
594,661
594,662
594,663
594,664
594,665
594,666
594,667
594,668
594,669
594,670
594,671
594,672
594,673
594,674
594,675
594,676
594,677
594,678
594,679
594,680
594,681
594,682
594,683
594,684
594,685
594,686
594,687
594,688
594,689
594,690
594,691
594,692
594,693
594,694
594,695
594,696
594,697
594,698
594,699
594,700
594,701
594,702
594,703
594,704
594,705
594,706
594,707
594,708
594,709
594,710
594,711
594,712
594,713
594,714
594,715
594,716
594,717
594,718
594,719
594,720
594,721
594,722
594,723
594,724
594,725
594,726
594,727
594,728
594,729
594,730
594,731
594,732
594,733
594,734
594,735
594,736
594,737
594,738
594,739
594,740
594,741
594,742
594,743
594,744
594,745
594,746
595,596
597,598
598,599
598,600
598,601
599,600
601,602
605,606
607,608
608,609
608,610
609,610
611,612
612,613
615,616
616,617
616,618
616,619
617,618
621,622
622,623
622,624
622,625
623,624
625,626
627,628
630,631
632,633
633,634
633,635
634,635
636,637
637,638
640,641
642,643
643,644
643,645
644,645
648,649
650,651
650,652
650,653
650,654
650,655
651,652
652,653
652,654
653,654
655,656
657,658
658,659
658,660
659,660
659,661
662,663
662,664
662,665
663,664
665,666
667,668
668,669
670,671
670,672
671,672
672,673
674,675
675,676
676,677
676,678
676,679
676,680
677,678
679,680
682,683
684,685
684,686
685,686
685,687
686,687
688,689
690,691
691,692
692,693
692,694
692,695
693,694
696,697
698,699
699,700
699,701
700,701
702,703
705,706
706,707
706,708
706,709
707,708
711,712
712,713
712,714
712,715
713,714
715,716
717,718
720,721
722,723
723,724
723,725
723,726
724,725
726,727
729,730
730,731
730,732
730,733
731,732
733,734
737,738
739,740
740,741
740,742
741,742
743,744
744,745
747,748
748,749
748,750
748,751
749,750
753,754
754,755
754,756
755,756
757,758
760,761
762,763
763,764
763,765
763,766
764,765
766,767
770,771
772,773
773,774
773,775
773,776
774,775
776,777
778,779
781,782
783,784
783,785
783,786
783,787
784,785
785,786
785,787
787,788
787,789
789,790
791,792
792,793
792,794
792,795
792,796
792,797
792,798
793,794
795,796
799,800
799,801
800,801
802,803
804,805
804,806
805,806
805,807
808,809
809,810
811,812
812,813
812,814
812,815
813,814
815,816
817,818
819,820
820,821
820,822
820,823
821,822
823,824
827,828
828,829
828,830
828,831
829,830
833,834
834,835
834,836
835,836
839,840
840,841
840,842
840,843
841,842
845,846
846,847
846,848
846,849
847,848
849,850
853,854
855,856
855,857
855,858
856,857
857,858
857,859
858,859
860,861
862,863
862,864
863,864
863,865
864,865
865,866
868,869
868,870
869,870
870,871
870,872
870,873
871,872
873,874
876,877
877,878
878,879
880,881
880,882
880,883
881,882
881,883
882,883
884,885
885,886
887,888
888,889
889,890
889,891
889,892
890,891
892,893
894,895
896,897
896,898
896,899
897,898
898,899
898,900
899,900
901,902
901,903
901,904
902,903
904,905
907,908
907,909
908,909
909,910
909,911
909,912
910,911
912,913
914,915
916,917
917,918
917,919
918,919
920,921
922,923
922,924
923,924
924,925
924,926
924,927
925,926
928,929
930,931
931,932
931,933
931,934
932,933
934,935
936,937
939,940
941,942
942,943
942,944
942,945
943,944
945,946
947,948
950,951
952,953
953,954
953,955
954,955
956,957
957,958
959,960
960,961
960,962
961,962
965,966
967,968
967,969
967,970
968,969
968,970
969,970
970,971
972,973
973,974
973,975
973,976
974,975
976,977
979,980
980,981
981,982
981,983
981,984
982,983
984,985
987,988
988,989
989,990
989,991
989,992
990,991
992,993
994,995
997,998
999,1000
1000,1001
1000,1002
1001,1002
1003,1004
1004,1005
1007,1008
1009,1010
1010,1011
1010,1012
1011,1012
1014,1015
1016,1017
1016,1018
1016,1019
1017,1018
1017,1019
1018,1019
1019,1020
1021,1022
1022,1023
1022,1024
1022,1025
1023,1024
1025,1026
1028,1029
1029,1030
1030,1031
1030,1032
1030,1033
1031,1032
1033,1034
1035,1036
1037,1038
1038,1039
1039,1040
1039,1041
1039,1042
1040,1041
1042,1043
1044,1045
1047,1048
1049,1050
1050,1051
1050,1052
1050,1053
1051,1052
1053,1054
1055,1056
1058,1059
1060,1061
1060,1062
1061,1062
1062,1063
1063,1064
1063,1065
1064,1065
1066,1067
1066,1068
1067,1068
1070,1071
1071,1072
1072,1073
1072,1074
1073,1074
1077,1078
1078,1079
1078,1080
1078,1081
1079,1080
1083,1084
1085,1086
1087,1088
1088,1089
1088,1090
1088,1091
1089,1090
1091,1092
1094,1095
1096,1097
1097,1098
1097,1099
1098,1099
1101,1102
1102,1103
1102,1104
1103,1104
1107,1108
1109,1110
1110,1111
1110,1112
1111,1112
1113,1114
1114,1115
1116,1117
1117,1118
1117,1119
1117,1120
1118,1119
1120,1121
1123,1124
1124,1125
1124,1126
1124,1127
1125,1126
1127,1128
1130,1131
1132,1133
1133,1134
1133,1135
1133,1136
1134,1135
1136,1137
1138,1139
1140,1141
1141,1142
1141,1143
1142,1143
1144,1145
1145,1146
1148,1149
1149,1150
1149,1151
1149,1152
1150,1151
1154,1155
1154,1156
1155,1156
1156,1157
1156,1158
1157,1158
1159,1160
1160,1161
1162,1163
1163,1164
1164,1165
1164,1166
1165,1166
1167,1168
1170,1171
1172,1173
1173,1174
1173,1175
1173,1176
1174,1175
1176,1177
1178,1179
1181,1182
1183,1184
1184,1185
1184,1186
1184,1187
1185,1186
1187,1188
1190,1191
1191,1192
1191,1193
1191,1194
1192,1193
1194,1195
1197,1198
1198,1199
1198,1200
1198,1201
1199,1200
1201,1202
1205,1206
1206,1207
1206,1208
1206,1209
1207,1208
1211,1212
1212,1213
1212,1214
1213,1214
1215,1216
1218,1219
1220,1221
1221,1222
1221,1223
1221,1224
1222,1223
1224,1225
1227,1228
1228,1229
1228,1230
1228,1231
1229,1230
1231,1232
1235,1236
1237,1238
1238,1239
1238,1240
1238,1241
1239,1240
1241,1242
1245,1246
1247,1248
1248,1249
1248,1250
1248,1251
1249,1250
1251,1252
1255,1256
1257,1258
1258,1259
1258,1260
1258,1261
1259,1260
1261,1262
1264,1265
1266,1267
1267,1268
1267,1269
1268,1269
1270,1271
1271,1272
1274,1275
1275,1276
1275,1277
1275,1278
1276,1277
1280,1281
1281,1282
1281,1283
1282,1283
1286,1287
1287,1288
1287,1289
1287,1290
1288,1289
1292,1293
1293,1294
1293,1295
1294,1295
1296,1297
1296,1298
1297,1298
1299,1300
1299,1301
1300,1301
1300,1302
1301,1302
1305,1306
1306,1307
1306,1308
1307,1308
1311,1312
1313,1314
1314,1315
1314,1316
1315,1316
1317,1318
1318,1319
1321,1322
1323,1324
1323,1325
1323,1326
1324,1325
1325,1326
1325,1327
1326,1327
1328,1329
1330,1331
1331,1332
1331,1333
1332,1333
1334,1335
1336,1337
1336,1338
1336,1339
1337,1338
1338,1339
1338,1340
1339,1340
1341,1342
1341,1343
1342,1343
1344,1345
1346,1347
1346,1348
1346,1349
1347,1348
1348,1349
1348,1350
1348,1351
1348,1352
1348,1353
1349,1350
1351,1352
1352,1353
1355,1356
1357,1358
1359,1360
1360,1361
1360,1362
1360,1363
1361,1362
1363,1364
1365,1366
1367,1368
1368,1369
1368,1370
1369,1370
1371,1372
1373,1374
1374,1375
1375,1376
1375,1377
1375,1378
1376,1377
1378,1379
1380,1381
1383,1384
1385,1386
1386,1387
1386,1388
1387,1388
1389,1390
1390,1391
1393,1394
1395,1396
1396,1397
1396,1398
1397,1398
1399,1400
1400,1401
1402,1403
1403,1404
1403,1405
1403,1406
1404,1405
1406,1407
1409,1410
1410,1411
1410,1412
1410,1413
1411,1412
1413,1414
1417,1418
1419,1420
1420,1421
1420,1422
1421,1422
1423,1424
1424,1425
1427,1428
1429,1430
1430,1431
1430,1432
1431,1432
1435,1436
1436,1437
1436,1438
1436,1439
1437,1438
1441,1442
1443,1444
1443,1445
1443,1446
1444,1445
1444,1446
1445,1446
1447,1448
1447,1449
1448,1449
1449,1450
1452,1453
1453,1454
1454,1455
1454,1456
1455,1456
1458,1459
1459,1460
1460,1461
1460,1462
1461,1462
1466,1467
1467,1468
1467,1469
1468,1469
1471,1472
1472,1473
1472,1474
1473,1474
1475,1476
1477,1478
1478,1479
1478,1480
1479,1480
1481,1482
1483,1484
1483,1485
1484,1485
1486,1487
1487,1488
1488,1489
1488,1490
1489,1490
1491,1492
1492,1493
1492,1494
1494,1495
1494,1496
1495,1496
1497,1498
1499,1500
1499,1501
1500,1501
1502,1503
1503,1504
1504,1505
1504,1506
1504,1507
1505,1506
1507,1508
1509,1510
1511,1512
1511,1513
1511,1514
1512,1513
1513,1514
1513,1515
1514,1515
1516,1517
1516,1518
1517,1518
1520,1521
1521,1522
1521,1523
1521,1524
1522,1523
1522,1524
1523,1524
1523,1525
1524,1525
1524,1526
1525,1526
1525,1527
1526,1527
1526,1528
1527,1528
1527,1529
1527,1530
1528,1529
1530,1531
1533,1534
1533,1535
1533,1536
1534,1535
1536,1537
1539,1540
1540,1541
1540,1542
1540,1543
1541,1542
1543,1544
1546,1547
1547,1548
1547,1549
1547,1550
1548,1549
1550,1551
1553,1554
1554,1555
1554,1556
1554,1557
1555,1556
1557,1558
1560,1561
1561,1562
1561,1563
1561,1564
1562,1563
1564,1565
1567,1568
1568,1569
1569,1570
1569,1571
1570,1571
1573,1574
1573,1575
1574,1575
1575,1576
1576,1577
1578,1579
1579,1580
1580,1581
1582,1583
1583,1584
1584,1585
1584,1586
1585,1586
1588,1589
1588,1590
1589,1590
1590,1591
1590,1592
1591,1592
1593,1594
1595,1596
1595,1597
1595,1598
1595,1599
1596,1597
1597,1598
1597,1599
1598,1599
1600,1601
1602,1603
1603,1604
1603,1605
1603,1606
1603,1607
1604,1605
1606,1607
1608,1609
1610,1611
1612,1613
1613,1614
1613,1615
1614,1615
1616,1617
1616,1618
1617,1618
1619,1620
1621,1622
1621,1623
1622,1623
1622,1624
1623,1624
1623,1625
1624,1625
1626,1627
1627,1628
1627,1629
1628,1629
1630,1631
1630,1632
1631,1632
1633,1634
1635,1636
1636,1637
1638,1639
1638,1640
1638,1641
1638,1642
1639,1640
1640,1641
1640,1642
1641,1642
1643,1644
1643,1645
1644,1645
1646,1647
1648,1649
1648,1650
1649,1650
1649,1651
1650,1651
1651,1652
1651,1653
1652,1653
1654,1655
1654,1656
1654,1657
1655,1656
1657,1658
1660,1661
1660,1662
1661,1662
1663,1664
1663,1665
1664,1665
1667,1668
1668,1669
1669,1670
1669,1671
1670,1671
1671,1672
1674,1675
1675,1676
1675,1677
1675,1678
1676,1677
1678,1679
1680,1681
1682,1683
1683,1684
1683,1685
1684,1685
1686,1687
1688,1689
1688,1690
1689,1690
1691,1692
1692,1693
1693,1694
1693,1695
1693,1696
1694,1695
1696,1697
1699,1700
1699,1701
1700,1701
1700,1702
1701,1702
1701,1703
1702,1703
1704,1705
1706,1707
1707,1708
1707,1709
1708,1709
1710,1711
1712,1713
1713,1714
1714,1715
1714,1716
1714,1717
1715,1716
1717,1718
1720,1721
1720,1722
1721,1722
1721,1723
1722,1723
1724,1725
1725,1726
1725,1727
1726,1727
1726,1728
1726,1729
1727,1728
1729,1730
1732,1733
1733,1734
1733,1735
1734,1735
1736,1737
1736,1738
1737,1738
1739,1740
1741,1742
1741,1743
1741,1744
1741,1745
1741,1746
1741,1747
1742,1743
1743,1744
1743,1745
1745,1746
1745,1747
1747,1748
1749,1750
1750,1751
1750,1752
1751,1752
1753,1754
1755,1756
1755,1757
1756,1757
1756,1758
1757,1758
1758,1759
1761,1762
1762,1763
1762,1764
1763,1764
1764,1765
1765,1766
1765,1767
1766,1767
1768,1769
1768,1770
1769,1770
1771,1772
1771,1773
1772,1773
1775,1776
1776,1777
1777,1778
1777,1779
1778,1779
1780,1781
1780,1782
1781,1782
1783,1784
1785,1786
1786,1787
1786,1788
1787,1788
1789,1790
1790,1791
1792,1793
1792,1794
1793,1794
1793,1795
1794,1795
1794,1796
1795,1796
1797,1798
1800,1801
1801,1802
1802,1803
1802,1804
1802,1805
1803,1804
1807,1808
1807,1809
1807,1810
1808,1809
1808,1810
1809,1810
1810,1811
1810,1812
1811,1812
1813,1814
1814,1815
1817,1818
1817,1819
1818,1819
1819,1820
1819,1821
1820,1821
1822,1823
1822,1824
1823,1824
1826,1827
1826,1828
1827,1828
1827,1829
1828,1829
1828,1830
1829,1830
1832,1833
1834,1835
1834,1836
1835,1836
1836,1837
1836,1838
1836,1839
1837,1838
1839,1840
1839,1841
1840,1841
1843,1844
1845,1846
1846,1847
1846,1848
1847,1848
1849,1850
1849,1851
1850,1851
1853,1854
1853,1855
1853,1856
1854,1855
1854,1856
1855,1856
1858,1859
1858,1860
1858,1861
1858,1862
1858,1863
1859,1860
1860,1861
1860,1862
1861,1862
1863,1864
1863,1865
1864,1865
1867,1868
1867,1869
1868,1869
1868,1870
1869,1870
1869,1871
1870,1871
1873,1874
1875,1876
1875,1877
1876,1877
1877,1878
1877,1879
1877,1880
1878,1879
1880,1881
1880,1882
1881,1882
1884,1885
1886,1887
1887,1888
1887,1889
1888,1889
1890,1891
1890,1892
1891,1892
1894,1895
1895,1896
1895,1897
1895,1898
1895,1899
1896,1897
1898,1899
1900,1901
1902,1903
1902,1904
1903,1904
1903,1905
1905,1906
1908,1909
1909,1910
1909,1911
1909,1912
1910,1911
1913,1914
1915,1916
1916,1917
1916,1918
1917,1918
1920,1921
1921,1922
1922,1923
1922,1924
1922,1925
1923,1924
1927,1928
1927,1929
1928,1929
1928,1930
1929,1930
1931,1932
1932,1933
1934,1935
1934,1936
1934,1937
1935,1936
1936,1937
1936,1938
1938,1939
1938,1940
1941,1942
1942,1943
1942,1944
1943,1944
1945,1946
1945,1947
1946,1947
1948,1949
1950,1951
1950,1952
1951,1952
1952,1953
1952,1954
1952,1955
1953,1954
1955,1956
1958,1959
1958,1960
1958,1961
1959,1960
1960,1961
1960,1962
1962,1963
1962,1964
1964,1965
1966,1967
1966,1968
1966,1969
1967,1968
1967,1969
1968,1969
1970,1971
1970,1972
1971,1972
1971,1973
1974,1975
1975,1976
1977,1978
1978,1979
1979,1980
1979,1981
1979,1982
1979,1983
1979,1984
1980,1981
1982,1983
1984,1985
1984,1986
1985,1986
1986,1987
1987,1988
1991,1992
1993,1994
1994,1995
1995,1996
1995,1997
1995,1998
1995,1999
1995,2000
1996,1997
1998,1999
2000,2001
2000,2002
2001,2002
2002,2003
2003,2004
2007,2008
2009,2010
2010,2011
2010,2012
2010,2013
2011,2012
2013,2014
2015,2016
2017,2018
2017,2019
2018,2019
2018,2020
2019,2020
2022,2023
2022,2024
2023,2024
2024,2025
2024,2026
2024,2027
2024,2028
2025,2026
2027,2028
2029,2030
2029,2031
2030,2031
2032,2033
2034,2035
2036,2037
2037,2038
2037,2039
2038,2039
2041,2042
2042,2043
2043,2044
2045,2046
2045,2047
2046,2047
2047,2048
2047,2049
2048,2049
2050,2051
2050,2052
2051,2052
2053,2054
2055,2056
2055,2057
2056,2057
2057,2058
2057,2059
2058,2059
2060,2061
2060,2062
2061,2062
2063,2064
2065,2066
2066,2067
2066,2068
2067,2068
2069,2070
2070,2071
2072,2073
2072,2074
2072,2075
2073,2074
2073,2075
2073,2076
2074,2075
2076,2077
2079,2080
2079,2081
2079,2082
2079,2083
2079,2084
2079,2085
2079,2086
2079,2087
2079,2088
2079,2089
2079,2090
2079,2091
2079,2092
2079,2093
2079,2094
2079,2095
2079,2096
2079,2097
2079,2098
2079,2099
2079,2100
2079,2101
2079,2102
2079,2103
2080,2081
2081,2082
2081,2083
2082,2083
2084,2085
2084,2086
2086,2087
2087,2088
2089,2090
2090,2091
2090,2092
2091,2092
2093,2094
2093,2095
2095,2096
2096,2097
2098,2099
2099,2100
2099,2101
2100,2101
2102,2103
2104,2105
2105,2106
2105,2107
2106,2107
2108,2109
2110,2111
2110,2112
2111,2112
2111,2113
2112,2113
2113,2114
2115,2116
2116,2117
2117,2118
2119,2120
2120,2121
2121,2122
2121,2123
2122,2123
2125,2126
2125,2127
2125,2128
2126,2127
2127,2128
2127,2129
2128,2129
2130,2131
2131,2132
2133,2134
2134,2135
2134,2136
2135,2136
2135,2137
2136,2137
2136,2138
2137,2138
2139,2140
2141,2142
2142,2143
2142,2144
2143,2144
2145,2146
2147,2148
2148,2149
2149,2150
2149,2151
2149,2152
2150,2151
2153,2154
2155,2156
2156,2157
2157,2158
2157,2159
2157,2160
2158,2159
2162,2163
2163,2164
2163,2165
2163,2166
2164,2165
2166,2167
2169,2170
2170,2171
2170,2172
2170,2173
2171,2172
2173,2174
2175,2176
2176,2177
2178,2179
2179,2180
2179,2181
2179,2182
2180,2181
2182,2183
2184,2185
2186,2187
2187,2188
2187,2189
2187,2190
2188,2189
2190,2191
2193,2194
2193,2195
2194,2195
2194,2196
2194,2197
2195,2196
2197,2198
2198,2199
2201,2202
2202,2203
2203,2204
2203,2205
2204,2205
2206,2207
2207,2208
2208,2209
2210,2211
2210,2212
2211,2212
2212,2213
2212,2214
2213,2214
2215,2216
2215,2217
2216,2217
2218,2219
2220,2221
2220,2222
2221,2222
2222,2223
2222,2224
2223,2224
2223,2225
2226,2227
2226,2228
2226,2229
2227,2228
2229,2230
2231,2232
2232,2233
2234,2235
2234,2236
2235,2236
2237,2238
2238,2239
2238,2240
2239,2240
2239,2241
2242,2243
2242,2244
2243,2244
2245,2246
2247,2248
2247,2249
2247,2250
2248,2249
2249,2250
2249,2251
2250,2251
2252,2253
2252,2254
2253,2254
2255,2256
2257,2258
2258,2259
2258,2260
2259,2260
2260,2261
2260,2262
2261,2262
2263,2264
2265,2266
2266,2267
2266,2268
2266,2269
2267,2268
2268,2269
2268,2270
2269,2270
2271,2272
2271,2273
2271,2274
2272,2273
2274,2275
2277,2278
2277,2279
2278,2279
2279,2280
2279,2281
2279,2282
2280,2281
2282,2283
2284,2285
2286,2287
2287,2288
2287,2289
2288,2289
2290,2291
2292,2293
2293,2294
2294,2295
2294,2296
2294,2297
2295,2296
2298,2299
2298,2300
2299,2300
2301,2302
2303,2304
2303,2305
2304,2305
2304,2306
2305,2306
2307,2308
2308,2309
2310,2311
2310,2312
2310,2313
2311,2312
2312,2313
2312,2314
2313,2314
2315,2316
2315,2317
2315,2318
2316,2317
2318,2319
2321,2322
2322,2323
2322,2324
2322,2325
2323,2324
2325,2326
2327,2328
2329,2330
2330,2331
2330,2332
2331,2332
2333,2334
2335,2336
2335,2337
2336,2337
2336,2338
2337,2338
2339,2340
2340,2341
2342,2343
2342,2344
2343,2344
2343,2345
2344,2345
2344,2346
2345,2346
2346,2347
2346,2348
2347,2348
2349,2350
2351,2352
2352,2353
2352,2354
2353,2354
2355,2356
2357,2358
2358,2359
2359,2360
2360,2361
2362,2363
2362,2364
2363,2364
2364,2365
2364,2366
2365,2366
2367,2368
2368,2369
2370,2371
2371,2372
2372,2373
2372,2374
2372,2375
2373,2374
2376,2377
2376,2378
2377,2378
2379,2380
2381,2382
2381,2383
2382,2383
2384,2385
2384,2386
2385,2386
2386,2387
2386,2388
2387,2388
2389,2390
2389,2391
2392,2393
2392,2394
2392,2395
2393,2394
2394,2395
2395,2396
2395,2397
2396,2397
2398,2399
2398,2400
2398,2401
2399,2400
2401,2402
2404,2405
2405,2406
2406,2407
2406,2408
2406,2409
2407,2408
2410,2411
2412,2413
2412,2414
2412,2415
2412,2416
2412,2417
2412,2418
2412,2419
2412,2420
2412,2421
2412,2422
2412,2423
2412,2424
2412,2425
2412,2426
2412,2427
2412,2428
2412,2429
2412,2430
2413,2414
2414,2415
2414,2416
2416,2417
2416,2418
2416,2419
2420,2421
2421,2422
2421,2423
2422,2423
2424,2425
2426,2427
2427,2428
2427,2429
2429,2430
2429,2431
2429,2432
2433,2434
2434,2435
2434,2436
2436,2437
2436,2438
2436,2439
2440,2441
2441,2442
2441,2443
2442,2443
2444,2445
2446,2447
2447,2448
2447,2449
2448,2449
2450,2451
2450,2452
2451,2452
2453,2454
2455,2456
2456,2457
2456,2458
2457,2458
2459,2460
2459,2461
2460,2461
2460,2462
2462,2463
2462,2464
2465,2466
2465,2467
2466,2467
2468,2469
2470,2471
2471,2472
2471,2473
2471,2474
2471,2475
2472,2473
2474,2475
2477,2478
2479,2480
2480,2481
2480,2482
2481,2482
2481,2483
2484,2485
2484,2486
2484,2487
2485,2486
2487,2488
2489,2490
2491,2492
2492,2493
2492,2494
2492,2495
2493,2494
2495,2496
2498,2499
2498,2500
2499,2500
2500,2501
2500,2502
2501,2502
2503,2504
2504,2505
2506,2507
2507,2508
2508,2509
2508,2510
2508,2511
2508,2512
2508,2513
2508,2514
2508,2515
2508,2516
2509,2510
2511,2512
2514,2515
2514,2516
2515,2516
2518,2519
2518,2520
2519,2520
2522,2523
2522,2524
2523,2524
2526,2527
2526,2528
2527,2528
2530,2531
2530,2532
2531,2532
2534,2535
2535,2536
2535,2537
2535,2538
2536,2537
2538,2539
2541,2542
2541,2543
2541,2544
2541,2545
2542,2543
2543,2544
2543,2545
2544,2545
2546,2547
2546,2548
2547,2548
2550,2551
2551,2552
2553,2554
2554,2555
2556,2557
2556,2558
2556,2559
2556,2560
2556,2561
2556,2562
2557,2558
2558,2559
2558,2560
2560,2561
2560,2562
2563,2564
2563,2565
2564,2565
2564,2566
2565,2566
2566,2567
2567,2568
2571,2572
2572,2573
2572,2574
2572,2575
2573,2574
2576,2577
2578,2579
2578,2580
2578,2581
2578,2582
2579,2580
2580,2581
2580,2582
2581,2582
2583,2584
2584,2585
2586,2587
2586,2588
2587,2588
2588,2589
2590,2591
2590,2592
2591,2592
2592,2593
2595,2596
2596,2597
2598,2599
2599,2600
2600,2601
2600,2602
2600,2603
2601,2602
2603,2604
2604,2605
2606,2607
2608,2609
2609,2610
2609,2611
2609,2612
2610,2611
2612,2613
2613,2614
2614,2615
2616,2617
2618,2619
2619,2620
2619,2621
2619,2622
2619,2623
2620,2621
2622,2623
2625,2626
2627,2628
2628,2629
2628,2630
2628,2631
2628,2632
2629,2630
2631,2632
2634,2635
2636,2637
2637,2638
2637,2639
2637,2640
2637,2641
2638,2639
2640,2641
2643,2644
2643,2645
2644,2645
2646,2647
2648,2649
2649,2650
2649,2651
2650,2651
2650,2652
2653,2654
2653,2655
2653,2656
2654,2655
2656,2657
2656,2658
2657,2658
2659,2660
2662,2663
2663,2664
2663,2665
2664,2665
2664,2666
2667,2668
2667,2669
2668,2669
2670,2671
2672,2673
2673,2674
2673,2675
2673,2676
2673,2677
2674,2675
2676,2677
2679,2680
2681,2682
2681,2683
2682,2683
2684,2685
2684,2686
2684,2687
2684,2688
2684,2689
2684,2690
2684,2691
2684,2692
2684,2693
2684,2694
2685,2686
2686,2687
2686,2688
2687,2688
2689,2690
2689,2691
2692,2693
2693,2694
2693,2695
2694,2695
2696,2697
2696,2698
2697,2698
2699,2700
2699,2701
2700,2701
2701,2702
2702,2703
2703,2704
2706,2707
2707,2708
2707,2709
2708,2709
2708,2710
2709,2710
2713,2714
2714,2715
2714,2716
2715,2716
2715,2717
2716,2717
2720,2721
2721,2722
2721,2723
2722,2723
2722,2724
2723,2724
2726,2727
2728,2729
2729,2730
2729,2731
2730,2731
2730,2732
2731,2732
2735,2736
2736,2737
2736,2738
2737,2738
2737,2739
2738,2739
2741,2742
2741,2743
2742,2743
2744,2745
2746,2747
2747,2748
2747,2749
2748,2749
2748,2750
2749,2750
2752,2753
2754,2755
2755,2756
2755,2757
2756,2757
2758,2759
2760,2761
2761,2762
2761,2763
2761,2764
2761,2765
2761,2766
2762,2763
2764,2765
2767,2768
2769,2770
2769,2771
2770,2771
2773,2774
2774,2775
2774,2776
2775,2776
2777,2778
2779,2780
2779,2781
2780,2781
2780,2782
2781,2782
2783,2784
2784,2785
2786,2787
2787,2788
2788,2789
2788,2790
2789,2790
2791,2792
2793,2794
2794,2795
2794,2796
2795,2796
2797,2798
2797,2799
2797,2800
2797,2801
2798,2799
2800,2801
2802,2803
2802,2804
2803,2804
2803,2805
2804,2805
2806,2807
2808,2809
2810,2811
2812,2813
2813,2814
2813,2815
2814,2815
2816,2817
2818,2819
2818,2820
2819,2820
2819,2821
2820,2821
2822,2823
2823,2824
2825,2826
2826,2827
2827,2828
2828,2829
2830,2831
2831,2832
2832,2833
2834,2835
2834,2836
2835,2836
2835,2837
2836,2837
2838,2839
2839,2840
2841,2842
2842,2843
2843,2844
2843,2845
2844,2845
2846,2847
2847,2848
2847,2849
2849,2850
2849,2851
2850,2851
2852,2853
2854,2855
2855,2856
2855,2857
2856,2857
2858,2859
2860,2861
2860,2862
2860,2863
2861,2862
2861,2863
2861,2864
2862,2863
2864,2865
2867,2868
2867,2869
2867,2870
2868,2869
2869,2870
2869,2871
2869,2872
2870,2871
2872,2873
2874,2875
2876,2877
2877,2878
2877,2879
2878,2879
2880,2881
2881,2882
2883,2884
2884,2885
2885,2886
2887,2888
2887,2889
2887,2890
2888,2889
2888,2890
2888,2891
2889,2890
2891,2892
2894,2895
2894,2896
2894,2897
2894,2898
2894,2899
2894,2900
2894,2901
2894,2902
2894,2903
2894,2904
2894,2905
2894,2906
2894,2907
2894,2908
2894,2909
2894,2910
2894,2911
2894,2912
2894,2913
2894,2914
2894,2915
2894,2916
2895,2896
2896,2897
2896,2898
2898,2899
2898,2900
2900,2901
2902,2903
2903,2904
2903,2905
2905,2906
2905,2907
2907,2908
2909,2910
2910,2911
2910,2912
2911,2912
2913,2914
2915,2916
2916,2917
2916,2918
2917,2918
2919,2920
2921,2922
2921,2923
2922,2923
2922,2924
2923,2924
2924,2925
2926,2927
2926,2928
2927,2928
2928,2929
2929,2930
2932,2933
2932,2934
2933,2934
2933,2935
2933,2936
2934,2935
2935,2936
2935,2937
2935,2938
2936,2937
2938,2939
2939,2940
2942,2943
2943,2944
2944,2945
2944,2946
2945,2946
2948,2949
2948,2950
2949,2950
2950,2951
2950,2952
2950,2953
2951,2952
2953,2954
2954,2955
2957,2958
2958,2959
2959,2960
2959,2961
2960,2961
2963,2964
2964,2965
2965,2966
2967,2968
2967,2969
2968,2969
2969,2970
2969,2971
2970,2971
2973,2974
2974,2975
2975,2976
2975,2977
2976,2977
2979,2980
2980,2981
2980,2982
2980,2983
2981,2982
2983,2984
2985,2986
2987,2988
2988,2989
2988,2990
2989,2990
2991,2992
2992,2993
2994,2995
2995,2996
2995,2997
2996,2997
2998,2999
2999,3000
3001,3002
3002,3003
3002,3004
3002,3005
3003,3004
3005,3006
3007,3008
3009,3010
3010,3011
3010,3012
3010,3013
3011,3012
3013,3014
3015,3016
3015,3017
3016,3017
3018,3019
3020,3021
3021,3022
3021,3023
3021,3024
3022,3023
3024,3025
3027,3028
3028,3029
3028,3030
3028,3031
3029,3030
3031,3032
3033,3034
3034,3035
3036,3037
3037,3038
3037,3039
3037,3040
3038,3039
3040,3041
3042,3043
3042,3044
3043,3044
3045,3046
3047,3048
3048,3049
3048,3050
3048,3051
3049,3050
3051,3052
3053,3054
3053,3055
3054,3055
3056,3057
3057,3058
3059,3060
3060,3061
3060,3062
3061,3062
3063,3064
3065,3066
3066,3067
3066,3068
3066,3069
3067,3068
3069,3070
3072,3073
3073,3074
3073,3075
3074,3075
3076,3077
3077,3078
3079,3080
3080,3081
3080,3082
3081,3082
3083,3084
3084,3085
3086,3087
3087,3088
3088,3089
3090,3091
3090,3092
3090,3093
3091,3092
3093,3094
3094,3095
3095,3096
3095,3097
3096,3097
3098,3099
3098,3100
3098,3101
3098,3102
3099,3100
3101,3102
3103,3104
3103,3105
3104,3105
3107,3108
3109,3110
3109,3111
3109,3112
3109,3113
3109,3114
3110,3111
3111,3112
3111,3113
3112,3113
3114,3115
3116,3117
3117,3118
3117,3119
3118,3119
3120,3121
3120,3122
3121,3122
3123,3124
3125,3126
3126,3127
3126,3128
3126,3129
3127,3128
3129,3130
3131,3132
3133,3134
3134,3135
3134,3136
3135,3136
3137,3138
3139,3140
3140,3141
3140,3142
3141,3142
3143,3144
3143,3145
3143,3146
3143,3147
3144,3145
3146,3147
3148,3149
3150,3151
3152,3153
3153,3154
3154,3155
3156,3157
3157,3158
3158,3159
3158,3160
3159,3160
3161,3162
3161,3163
3161,3164
3161,3165
3162,3163
3164,3165
3166,3167
3168,3169
3170,3171
3171,3172
3172,3173
3174,3175
3175,3176
3176,3177
3178,3179
3179,3180
-----nextToken-----
2,4,6,8,11,13,14,19,21,25,27,31,33,36,40,42,45,49,51,54,57,59,62,65,67,69,72,74,76,79,81,83,86,88,90,96,99,104,105,109,113,116,120,123,127,130,134,136,138,140,144,148,151,156,160,162,166,168,170,174,176,177,181,183,185,186,188,190,192,193,195,197,199,202,203,204,206,208,210,211,213,215,217,218,220,222,224,225,227,229,231,232,234,236,238,239,241,243,245,248,249,250,252,254,256,259,260,261,263,265,267,268,270,272,274,275,277,279,281,282,284,286,288,289,291,293,295,296,298,300,302,305,306,307,309,311,313,314,316,318,320,321,323,325,327,328,330,332,334,337,338,339,341,343,345,348,349,350,352,354,356,357,359,361,363,366,367,368,370,372,374,375,377,379,381,382,384,386,388,389,391,393,395,396,398,400,402,403,405,407,409,412,413,414,416,418,420,421,423,425,427,428,430,432,434,435,437,439,441,442,444,446,448,451,452,453,455,457,459,460,462,464,466,467,469,471,473,476,477,478,480,482,484,485,487,489,491,492,494,496,498,499,501,503,505,506,508,510,512,513,515,517,519,522,523,524,526,528,530,531,533,535,537,538,540,542,544,545,547,549,551,552,554,556,558,559,561,562,564,565,569,572,574,576,578,580,582,586,588,590,593,596,600,602,603,604,606,610,613,614,618,619,620,624,626,628,629,631,635,638,639,641,645,646,647,649,654,656,660,661,664,666,669,673,678,680,681,683,687,689,694,695,697,701,703,704,708,709,710,714,716,718,719,721,725,727,728,732,734,735,736,738,742,745,746,750,751,752,756,758,759,761,765,767,768,769,771,775,777,779,780,782,786,788,790,794,796,797,798,801,803,806,807,810,814,816,818,822,824,825,826,830,831,832,836,837,838,842,843,844,848,850,851,852,854,859,861,866,867,872,874,875,879,883,886,891,893,895,900,903,905,906,911,913,915,919,921,926,927,929,933,935,937,938,940,944,946,948,949,951,955,958,962,963,964,966,971,975,977,978,983,985,986,991,993,995,996,998,1002,1005,1006,1008,1012,1013,1015,1020,1024,1026,1027,1032,1034,1036,1041,1043,1045,1046,1048,1052,1054,1056,1057,1059,1065,1068,1069,1074,1075,1076,1080,1081,1082,1084,1086,1090,1092,1093,1095,1099,1100,1104,1105,1106,1108,1112,1115,1119,1121,1122,1126,1128,1129,1131,1135,1137,1139,1143,1146,1147,1151,1152,1153,1158,1161,1166,1168,1169,1171,1175,1177,1179,1180,1182,1186,1188,1189,1193,1195,1196,1200,1202,1203,1204,1208,1209,1210,1214,1216,1217,1219,1223,1225,1226,1230,1232,1233,1234,1236,1240,1242,1243,1244,1246,1250,1252,1253,1254,1256,1260,1262,1263,1265,1269,1272,1273,1277,1278,1279,1283,1284,1285,1289,1290,1291,1295,1298,1302,1303,1304,1308,1309,1310,1312,1316,1319,1320,1322,1327,1329,1333,1335,1340,1343,1345,1350,1353,1354,1356,1358,1362,1364,1366,1370,1372,1377,1379,1381,1382,1384,1388,1391,1392,1394,1398,1401,1405,1407,1408,1412,1414,1415,1416,1418,1422,1425,1426,1428,1432,1433,1434,1438,1439,1440,1442,1446,1450,1451,1456,1457,1462,1463,1464,1465,1469,1470,1474,1476,1480,1482,1485,1490,1493,1496,1498,1501,1506,1508,1510,1515,1518,1519,1529,1531,1532,1535,1537,1538,1542,1544,1545,1549,1551,1552,1556,1558,1559,1563,1565,1566,1571,1572,1577,1581,1586,1587,1592,1594,1599,1601,1605,1607,1609,1611,1615,1618,1620,1625,1629,1632,1634,1637,1642,1645,1647,1653,1656,1658,1659,1662,1665,1666,1672,1673,1677,1679,1681,1685,1687,1690,1695,1697,1698,1703,1705,1709,1711,1716,1718,1719,1723,1728,1730,1731,1735,1738,1740,1744,1746,1748,1752,1754,1759,1760,1767,1770,1773,1774,1779,1782,1784,1788,1791,1796,1798,1799,1804,1805,1806,1812,1815,1816,1821,1824,1825,1830,1831,1833,1838,1841,1842,1844,1848,1851,1852,1856,1857,1862,1865,1866,1871,1872,1874,1879,1882,1883,1885,1889,1892,1893,1897,1899,1901,1904,1906,1907,1911,1912,1914,1918,1919,1924,1925,1926,1930,1933,1937,1939,1940,1944,1947,1949,1954,1956,1957,1961,1963,1965,1969,1972,1973,1976,1981,1983,1988,1989,1990,1992,1997,1999,2004,2005,2006,2008,2012,2014,2016,2020,2021,2026,2028,2031,2033,2035,2039,2040,2044,2049,2052,2054,2059,2062,2064,2068,2071,2075,2077,2078,2083,2085,2088,2092,2094,2097,2101,2103,2107,2109,2114,2118,2123,2124,2129,2132,2138,2140,2144,2146,2151,2152,2154,2159,2160,2161,2165,2167,2168,2172,2174,2177,2181,2183,2185,2189,2191,2192,2196,2199,2200,2205,2209,2214,2217,2219,2224,2225,2228,2230,2233,2236,2240,2241,2244,2246,2251,2254,2256,2262,2264,2270,2273,2275,2276,2281,2283,2285,2289,2291,2296,2297,2300,2302,2306,2309,2314,2317,2319,2320,2324,2326,2328,2332,2334,2338,2341,2348,2350,2354,2356,2361,2366,2369,2374,2375,2378,2380,2383,2388,2390,2391,2397,2400,2402,2403,2408,2409,2411,2415,2417,2418,2419,2423,2425,2428,2430,2431,2432,2435,2437,2438,2439,2443,2445,2449,2452,2454,2458,2461,2463,2464,2467,2469,2473,2475,2476,2478,2482,2483,2486,2488,2490,2494,2496,2497,2502,2505,2510,2512,2513,2516,2517,2520,2521,2524,2525,2528,2529,2532,2533,2537,2539,2540,2545,2548,2549,2552,2555,2559,2561,2562,2568,2569,2570,2574,2575,2577,2582,2585,2589,2593,2594,2597,2602,2605,2607,2611,2615,2617,2621,2623,2624,2626,2630,2632,2633,2635,2639,2641,2642,2645,2647,2651,2652,2655,2658,2660,2661,2665,2666,2669,2671,2675,2677,2678,2680,2683,2688,2690,2691,2695,2698,2704,2705,2710,2711,2712,2717,2718,2719,2724,2725,2727,2732,2733,2734,2739,2740,2743,2745,2750,2751,2753,2757,2759,2763,2765,2766,2768,2771,2772,2776,2778,2782,2785,2790,2792,2796,2799,2801,2805,2807,2809,2811,2815,2817,2821,2824,2829,2833,2837,2840,2845,2848,2851,2853,2857,2859,2863,2865,2866,2871,2873,2875,2879,2882,2886,2890,2892,2893,2897,2899,2901,2904,2906,2908,2912,2914,2918,2920,2925,2930,2931,2937,2940,2941,2946,2947,2952,2955,2956,2961,2962,2966,2971,2972,2977,2978,2982,2984,2986,2990,2993,2997,3000,3004,3006,3008,3012,3014,3017,3019,3023,3025,3026,3030,3032,3035,3039,3041,3044,3046,3050,3052,3055,3058,3062,3064,3068,3070,3071,3075,3078,3082,3085,3089,3092,3097,3100,3102,3105,3106,3108,3113,3115,3119,3122,3124,3128,3130,3132,3136,3138,3142,3145,3147,3149,3151,3155,3160,3163,3165,3167,3169,3173,3177,3180
-----computeFrom-----
94,95
94,96
567,568
567,569
584,585
584,586
643,644
643,645
754,755
754,756
834,835
834,836
863,864
863,865
898,899
898,900
960,961
960,962
968,969
968,970
1010,1011
1010,1012
1017,1018
1017,1019
1063,1064
1063,1065
1072,1073
1072,1074
1097,1098
1097,1099
1156,1157
1156,1158
1212,1213
1212,1214
1296,1297
1296,1298
1299,1300
1299,1301
1338,1339
1338,1340
1444,1445
1444,1446
1447,1448
1447,1449
1454,1455
1454,1456
1460,1461
1460,1462
1472,1473
1472,1474
1478,1479
1478,1480
1513,1514
1513,1515
1522,1523
1522,1524
1523,1524
1523,1525
1524,1525
1524,1526
1525,1526
1525,1527
1526,1527
1526,1528
1569,1570
1569,1571
1584,1585
1584,1586
1613,1614
1613,1615
1622,1623
1622,1624
1623,1624
1623,1625
1627,1628
1627,1629
1640,1641
1640,1642
1649,1650
1649,1651
1651,1652
1651,1653
1669,1670
1669,1671
1700,1701
1700,1702
1721,1722
1721,1723
1725,1726
1725,1727
1733,1734
1733,1735
1756,1757
1756,1758
1765,1766
1765,1767
1771,1772
1771,1773
1777,1778
1777,1779
1793,1794
1793,1795
1808,1809
1808,1810
1810,1811
1810,1812
1827,1828
1827,1829
1854,1855
1854,1856
1868,1869
1868,1870
1942,1943
1942,1944
1984,1985
1984,1986
2000,2001
2000,2002
2018,2019
2018,2020
2047,2048
2047,2049
2057,2058
2057,2059
2111,2112
2111,2113
2127,2128
2127,2129
2135,2136
2135,2137
2212,2213
2212,2214
2249,2250
2249,2251
2268,2269
2268,2270
2312,2313
2312,2314
2344,2345
2344,2346
2364,2365
2364,2366
2395,2396
2395,2397
2447,2448
2447,2449
2456,2457
2456,2458
2543,2544
2543,2545
2546,2547
2546,2548
2564,2565
2564,2566
2580,2581
2580,2582
2586,2587
2586,2588
2590,2591
2590,2592
2693,2694
2693,2695
2699,2700
2699,2701
2707,2708
2707,2709
2714,2715
2714,2716
2721,2722
2721,2723
2729,2730
2729,2731
2736,2737
2736,2738
2747,2748
2747,2749
2755,2756
2755,2757
2794,2795
2794,2796
2922,2923
2922,2924
2926,2927
2926,2928
2944,2945
2944,2946
2959,2960
2959,2961
2995,2996
2995,2997
3053,3054
3053,3055
3095,3096
3095,3097
3117,3118
3117,3119
3140,3141
3140,3142
3158,3159
3158,3160
-----guardedBy-----
866,879
1565,1571
1637,1647
1665,1672
1735,1914
1740,1784
1738,1782
1759,1779
1833,1844
1830,1851
1874,1885
1871,1892
2020,2028
2140,2154
-----guardedByNegation-----
977,995
1026,1045
1812,1856
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;InitializerList;LiteralExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;BreakStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ProblemStatement;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
intmain(int argc, CS const *argv){    CCS exe;    CCS action;    CCS pager = NULL;    CS dscript = NULL;    CS redo_script = NULL;    int proplevel = -1;    int no_server = 0;    int make_clean = 0;    int tee = 0;    int rc = 0;    // Figure out the full path to the current executable program.    // Should be done asap, before anything happens to argv.    if (!(exe = putil_getexecpath())) {	putil_die("unable to determine path to argv[0]\n");    }#if defined(_WIN32)    if (putil_getenv("DEBUGBREAK")) {	DebugBreak();    }#endif	/*_WIN32*/    // Initialize verbosity. Should be done before most    // other initializations since they may use verbosity.    vb_init();    atexit(vb_fini);    // Initialize the properties database and, at the same time,    // arrange for it to be finalized at exit time. Doing it this    // way ensures that it will be finalized last, meaning that    // other exit and error handling routines will have access    // to properties until the bitter end. Really, the only reason    // to explicitly free data right before exit like this is    // to avoid spurious warnings from memory leak detectors like    // valgrind and make real problems more obvious.    prop_init(APPLICATION_NAME);    atexit(prop_fini);    // This has been known to cause core dumps on Linux. I think the    // problem is since fixed but since it does no real good, as noted,    // I'm leaving it off for now.    //atexit(prop_unexport_all);    // Load properties from the documented sequence of prop files and    // the environment.    prefs_init(exe, PROP_EXT, NULL);    // Initialize the hash-code generation.    code_init();    // Default this to on; make auditing is tough without it.    prop_override_true(P_MAKE_ONESHELL);    // TODO - this is just for porting purposes so we can see if    // AO is treated as BLODA. Remove if and when a successful    // port is made.#if defined(__CYGWIN__)    putil_putenv("CYGWIN=detect_bloda");#endif    // Parse the command line up to the first unrecognized item.    // E.g. given "command -flag1 -flag2 arg1 -flag3 -flag4" we parse    // only -flag1 and -flag2.    for (bsd_getopt_reset();;) {	int c;	// *INDENT-OFF*	static CS short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";	static struct option long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	};	// *INDENT-ON*	c = bsd_getopt(argc, argv, short_opts, long_opts, NULL);	if (c == -1) {	    break;	}	switch (c) {	    case '1':		prop_unset(P_MAKE_ONESHELL, 0);		break;	    case 'a':		prop_override_true(P_ABSOLUTE_PATHS);		break;	    case LF('A','G'):		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);		break;	    case 'A':		prop_override_true(P_AUDIT_ONLY);		break;	    // Undocumented hack - allows an automatic "make clean" which	    // is not audited or counted in elapsed time.	    case 'c':		make_clean = 1;		break;	    case 'C':		{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}		break;	    case LF('C', 'P'):		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);		break;	    // Undocumented - used to debug downloads without modifying state.	    // We may not need this forever.	    case 'D':		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);		break;	    case 'd':		prop_override_true(P_DOWNLOAD_ONLY);		break;	    case LF('D', 'T'):		dscript = bsd_optarg;		break;	    case 'E':		prop_put_long(P_STRICT_ERROR, 1);		break;	    case 'I':		prop_override_str(P_IDENTITY_HASH, bsd_optarg);		break;	    case 'L':		{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}		break;	    case LF('L', 'T'):		tee = 1;		break;	    case LF('L', 'S'):		prop_override_ulong(P_LOG_TIME_STAMP, 1);		break;	    case 'l':		{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}		break;	    case 'F':		prop_override_str(P_MAKE_FILE, bsd_optarg);		break;	    case 'G':		prop_override_true(P_GIT);		no_server = 1;		break;	    case 'M':		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}		break;	    case 'm':		prop_override_true(P_MEMBERS_ONLY);		break;	    case 'o':		no_server = 1;	    case 'O':		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}		break;	    case 'p':		prop_override_str(P_PROJECT_NAME, bsd_optarg);		break;	    case 'P':		if (!(pager = getenv("PAGER"))) {		    pager = "less";		}		break;		// Generate runtime linker profile output. Works on		// Solaris and Linux at least.	    case LF('P', '%'):#if !defined(_WIN32)		putil_putenv("LD_PROFILE=" AUDITOR);#endif	/*_WIN32*/		break;	    case 'Q':		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");	    case 'q':		QuietMode = 1;		vb_addstr("-");		break;	    case 'R':		prop_override_true(P_REUSE_ROADMAP);		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);	    case 'r':		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);		prop_override_true(P_LEAVE_ROADMAP);		break;	    case LF('R', 'L'):		if ((rc = http_restart())) {		    exit(rc);		}		break;	    case 's':		prop_override_str(P_SERVER, bsd_optarg);		break;	    case 'S':		prop_put_ulong(P_STRICT, 1);		prop_put_ulong(P_STRICT_DOWNLOAD, 1);		prop_put_ulong(P_STRICT_UPLOAD, 1);		break;	    case LF('s', 'c'):		redo_script = bsd_optarg;		break;	    case 't':		prop_unset(P_PRINT_ELAPSED, 1);		prop_put_str(P_PRINT_ELAPSED, "-1");		break;	    case 'u':		prop_override_ulong(P_UPLOAD_ONLY, 1);		break;	    case 'U':		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);		break;	    case 'V':		// keeps verbosity out of auditor		prop_unexport(P_VERBOSITY, 1);	    case 'v':		vb_addstr(bsd_optarg);		break;	    case LF('D', 'M'):#if defined(sun)		if (bsd_optarg && *bsd_optarg == 'w') {		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");		    if (!putil_getenv("MALLOC_DEBUG")) {			putil_putenv("MALLOC_DEBUG=WATCH");		    }		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));		} else {		    putil_putenv("LD_PRELOAD=/lib/libumem.so");		    if (!putil_getenv("UMEM_DEBUG")) {			putil_putenv("UMEM_DEBUG=default,verbose");		    }		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));		}		if (putil_getenv("LD_PRELOAD")) {		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));		}#elif defined(__APPLE__)		putil_putenv("MallocScribble=1");		putil_putenv("MallocPreScribble=1");		putil_putenv("MallocBadFreeAbort=1");		putil_putenv("MallocCheckHeapAbort=1");		//putil_putenv("MallocStackLogging=1");		//putil_putenv("MallocStackLoggingNoCompact=1");		//putil_putenv("MallocCheckHeapStart=1000");		//putil_putenv("MallocCheckHeapEach=1000");		//putil_putenv("MallocCheckHeapSleep=-200");		//(void)system("env | grep '^Malloc'");#else	/*__APPLE__*/		putil_die("no malloc debugger implemented");#endif	/*__APPLE__*/		break;	    case LF('v', 'n'):		_print_version(bsd_optarg && bsd_optarg[0] == '+');		exit(0);		break;	    case 'w':		vb_addbit(VB_WHY);		break;	    case 'W':		// This is reserved for extension flags a la gcc.		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the		// makefile generator.		{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}		break;	    case 'x':		vb_addbit(VB_EXEC);		break;	    case 'X':		prop_override_true(P_EXECUTE_ONLY);		prop_put_ulong(P_PRINT_ELAPSED, 1);		prop_unset(P_SERVER, 1);		break;	    case 'Y':		prop_override_true(P_SYNCHRONOUS_TRANSFERS);		break;	    case 'h':		_usage(0);		break;	    case LF('P','*'):	// alias to --Help for mnemonic reasons	    case 'H':		// Put off printing properties till they're all filled in.		if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}		break;	    default:		_usage(1);	}    }    argc -= bsd_optind;    argv += bsd_optind;    // Special case - this program can turn into a "tee"    // if requested. DOES NOT RETURN!    if (tee) {	tee_into(prop_get_str(P_LOG_FILE));    }    if (make_clean) {	_make_clean(argc, argv);    }    // The command we've been asked to invoke.    if ((action = argv[0])) {	// Hack for typing ease: "make" is a synonym for "run make".	// Similarly, "ant" is a synonym for "run ant".	// And any word with non-alphanumeric chars must be a program to run.	if (strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")		// Windows only	    || !util_pathcmp(action, "ant")) {	    action = "run";	} else {	    argv++;	    argc--;	}    } else {	// The default command ...	action = "help";    }    // Default project name is the name of the dir containing the project    // config file, with any numerical extension following a '-' removed.    if (!prop_has_value(P_PROJECT_NAME)) {	CCS pbase;	CS pjname, ptr, dash;	pbase = prop_get_str(P_BASE_DIR);	if (pbase && (pjname = putil_basename(pbase)) && *pjname) {	    ptr = putil_strdup(pjname);	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }	    prop_put_str(P_PROJECT_NAME, ptr);	    putil_free(ptr);	}    }    // For convenience, the -o flag suppresses server interaction along    // with specifying an output file.    if (no_server) {	prop_unset(P_SERVER, 1);    }    // Recycling would break full-makefile generation.    if (prop_has_value(P_MAKE_FILE) && !prop_has_value(P_MAKE_DEPENDS)) {	prop_override_ulong(P_UPLOAD_ONLY, 1);    }    // Optionally run help output through a pager.#if !defined(_WIN32)    if (pager ||	(streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER)))) {	int pfd[2];	pid_t pid;	// Allow indirection through standard $PAGER EV.	if (*pager == '$') {	    if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }	}	fflush(NULL);	if (pipe(pfd) < 0) {	    putil_syserr(2, "pipe");	}	// Note that the *parent* process becomes the pager.	if ((pid = fork()) == 0) {	    // Child	    close(pfd[0]);	    if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }	} else if (pid > 0) {	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	} else {	    putil_syserr(2, "fork");	}    }#endif	/*_WIN32*/    // For debugging convenience allow server=nnnn to mean "localhost:nnnn"    // and server=foo to mean "foo:8080" since those are the most common.    if (prop_has_value(P_SERVER)) {	const char *svr;	svr = prop_get_str(P_SERVER);	if (!strchr(svr, ':')) {	    char buf[256];	    if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }	    prop_override_str(P_SERVER, buf);	}    }    // Diagnostic: dump properties and quit.    if (proplevel >= 0) {	prop_help(proplevel, vb_bitmatch(VB_STD), exe);	exit(0);    }    http_init();    // Arrange for the elapsed time to be printed out at exit time    // if requested by user property. The property is not a boolean    // but a mimimum number of seconds which must elapse in order    // to trigger output.    if ((ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED))) {	StartTime = time(NULL);	atexit(_print_elapsed_time);    }    if (streq(action, "run")) {	CCS cwd = NULL;	CCS logfile = NULL;	CCS rmap;	CCS logprop;	if (!argv || !*argv) {	    _usage(1);	}	// The auditor ignores anything it considers to be a temp	// file, which can cause terribly confusing behavior if	// run on a project rooted in (say) /tmp. It's a natural	// tendency for someone setting up a quick test case to	// put it in /tmp and then spend hours trying to figure	// out why it's behaving strangely. To help avoid this	// we disallow the auditor from running when the CWD is	// one we consider a repository for temp files.	if ((cwd = util_get_cwd())) {	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }	} else {	    putil_syserr(2, "util_get_cwd()");	}	// These values are pre-exported to reserve env-block space.	// To not do so would risk a dangerous realloc of the 'environ'	// pointer within an unsuspecting host process.	// Reserve a block of env space for the current cmd depth.	prop_put_ulong(P_DEPTH, 0);	// Reserve a block of env space for the parent cmd id.	// Seed it with our pid.	prop_put_ulong(P_PCMDID, getpid());	// Reserve a block of env space for the parent cmd code.	prop_put_str(P_PCCODE, CSV_NULL_FIELD);	// This needs to be present in the env from the start even when off.	// But being a boolean it only needs room for one digit.	prop_put_ulong(P_AGGREGATED_SUBCMD, 0);	// Allow the cmd to be preceded by EV's in the manner of the shell.	while (strchr(*argv, '=')) {	    putil_putenv(*argv++);	}	// Determine whether the user requested a log file and	// apply the %u, %p, etc. formats to it if so.	if ((logprop = prop_get_str(P_LOG_FILE))) {	    (void)util_substitute_params(logprop, &logfile);	    // In case it's present but unwriteable.	    if (logfile)		(void)unlink(logfile);	}	// Work out the name of the roadmap file and store the result.	if ((rmap = prop_get_str(P_ROADMAPFILE))) {	    if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }	} else if (prop_has_value(P_SERVER)) {	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}	if (prop_has_value(P_SERVER)) {	    // Get the new roadmap.	    if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }	    // Start a session. We do this *after* getting the roadmap	    // to avoid session expiration during roadmap-getting.	    // That would only be a risk for a very slow roadmap or a	    // very fast session expiration but it could happen.	    if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }	}#if defined(_WIN32)	/* TODO */#else	if (redo_script) {	    FILE *fp;	    if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }	}#endif	// For systems supporting DTrace: run the cmd with the specified	// dtrace script.	if (dscript) {	    CS *dargv;	    dargv = putil_malloc(sizeof(*dargv) * 6);	    dargv[0] = "dtrace";	    dargv[1] = "-s";	    dargv[2] = dscript;	    dargv[3] = "-c";	    dargv[4] = util_requote_argv(argv);	    dargv[5] = NULL;	    argv = dargv;	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);	}	make_init(exe);	if (prop_is_true(P_GIT)) {	    git_init(exe);	}	// RUN AND AUDIT THE COMMAND.	rc = run_cmd(exe, (CS *)argv, logfile);	putil_free(logfile);	if (prop_is_true(P_GIT)) {	    git_fini();	}	make_fini();	// If using a temp logfile, remove it now.	if (prop_is_true(P_LOG_FILE_TEMP)) {	    unlink(prop_get_str(P_LOG_FILE));	}	putil_free(cwd);    } else if (streq(action, "roadmap")) {	// Useful while testing roadmaps. May be dispensed with later.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	mon_get_roadmap();    } else if (streq(action, "shop")) {	int cflag = 0;	int gflag = 0;	ca_o ca;	CCS rwd;	// This special action is useful for internal tests of shopping	// capabilities without changing server state, using a saved	// roadmap file.	while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}	if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}	// Assume the pre-existence of a roadmap with the default name.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	ca = ca_new();	ca_set_pccode(ca, CSV_NULL_FIELD);	ca_set_prog(ca, prop_get_str(P_PROGNAME));	ca_set_host(ca, "localhost");	ca_set_cmdid(ca, getpid());	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));	ca_set_rwd(ca, rwd = util_get_rwd());	putil_free(rwd);	ca_set_started(ca, 1);	// We almost always want these while debugging...	vb_addbit(VB_SHOP);	vb_addbit(VB_WHY);	shop_init();	if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}	shop_fini();    } else {	rc = do_action(action, argc, argv);    }    code_fini();    http_fini();    return rc;}
int
main(int argc, CS const *argv)
main
int argc
int
argc
argc
CS const *argv
CS const
CS
*argv
*
argv
{    CCS exe;    CCS action;    CCS pager = NULL;    CS dscript = NULL;    CS redo_script = NULL;    int proplevel = -1;    int no_server = 0;    int make_clean = 0;    int tee = 0;    int rc = 0;    // Figure out the full path to the current executable program.    // Should be done asap, before anything happens to argv.    if (!(exe = putil_getexecpath())) {	putil_die("unable to determine path to argv[0]\n");    }#if defined(_WIN32)    if (putil_getenv("DEBUGBREAK")) {	DebugBreak();    }#endif	/*_WIN32*/    // Initialize verbosity. Should be done before most    // other initializations since they may use verbosity.    vb_init();    atexit(vb_fini);    // Initialize the properties database and, at the same time,    // arrange for it to be finalized at exit time. Doing it this    // way ensures that it will be finalized last, meaning that    // other exit and error handling routines will have access    // to properties until the bitter end. Really, the only reason    // to explicitly free data right before exit like this is    // to avoid spurious warnings from memory leak detectors like    // valgrind and make real problems more obvious.    prop_init(APPLICATION_NAME);    atexit(prop_fini);    // This has been known to cause core dumps on Linux. I think the    // problem is since fixed but since it does no real good, as noted,    // I'm leaving it off for now.    //atexit(prop_unexport_all);    // Load properties from the documented sequence of prop files and    // the environment.    prefs_init(exe, PROP_EXT, NULL);    // Initialize the hash-code generation.    code_init();    // Default this to on; make auditing is tough without it.    prop_override_true(P_MAKE_ONESHELL);    // TODO - this is just for porting purposes so we can see if    // AO is treated as BLODA. Remove if and when a successful    // port is made.#if defined(__CYGWIN__)    putil_putenv("CYGWIN=detect_bloda");#endif    // Parse the command line up to the first unrecognized item.    // E.g. given "command -flag1 -flag2 arg1 -flag3 -flag4" we parse    // only -flag1 and -flag2.    for (bsd_getopt_reset();;) {	int c;	// *INDENT-OFF*	static CS short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";	static struct option long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	};	// *INDENT-ON*	c = bsd_getopt(argc, argv, short_opts, long_opts, NULL);	if (c == -1) {	    break;	}	switch (c) {	    case '1':		prop_unset(P_MAKE_ONESHELL, 0);		break;	    case 'a':		prop_override_true(P_ABSOLUTE_PATHS);		break;	    case LF('A','G'):		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);		break;	    case 'A':		prop_override_true(P_AUDIT_ONLY);		break;	    // Undocumented hack - allows an automatic "make clean" which	    // is not audited or counted in elapsed time.	    case 'c':		make_clean = 1;		break;	    case 'C':		{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}		break;	    case LF('C', 'P'):		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);		break;	    // Undocumented - used to debug downloads without modifying state.	    // We may not need this forever.	    case 'D':		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);		break;	    case 'd':		prop_override_true(P_DOWNLOAD_ONLY);		break;	    case LF('D', 'T'):		dscript = bsd_optarg;		break;	    case 'E':		prop_put_long(P_STRICT_ERROR, 1);		break;	    case 'I':		prop_override_str(P_IDENTITY_HASH, bsd_optarg);		break;	    case 'L':		{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}		break;	    case LF('L', 'T'):		tee = 1;		break;	    case LF('L', 'S'):		prop_override_ulong(P_LOG_TIME_STAMP, 1);		break;	    case 'l':		{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}		break;	    case 'F':		prop_override_str(P_MAKE_FILE, bsd_optarg);		break;	    case 'G':		prop_override_true(P_GIT);		no_server = 1;		break;	    case 'M':		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}		break;	    case 'm':		prop_override_true(P_MEMBERS_ONLY);		break;	    case 'o':		no_server = 1;	    case 'O':		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}		break;	    case 'p':		prop_override_str(P_PROJECT_NAME, bsd_optarg);		break;	    case 'P':		if (!(pager = getenv("PAGER"))) {		    pager = "less";		}		break;		// Generate runtime linker profile output. Works on		// Solaris and Linux at least.	    case LF('P', '%'):#if !defined(_WIN32)		putil_putenv("LD_PROFILE=" AUDITOR);#endif	/*_WIN32*/		break;	    case 'Q':		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");	    case 'q':		QuietMode = 1;		vb_addstr("-");		break;	    case 'R':		prop_override_true(P_REUSE_ROADMAP);		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);	    case 'r':		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);		prop_override_true(P_LEAVE_ROADMAP);		break;	    case LF('R', 'L'):		if ((rc = http_restart())) {		    exit(rc);		}		break;	    case 's':		prop_override_str(P_SERVER, bsd_optarg);		break;	    case 'S':		prop_put_ulong(P_STRICT, 1);		prop_put_ulong(P_STRICT_DOWNLOAD, 1);		prop_put_ulong(P_STRICT_UPLOAD, 1);		break;	    case LF('s', 'c'):		redo_script = bsd_optarg;		break;	    case 't':		prop_unset(P_PRINT_ELAPSED, 1);		prop_put_str(P_PRINT_ELAPSED, "-1");		break;	    case 'u':		prop_override_ulong(P_UPLOAD_ONLY, 1);		break;	    case 'U':		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);		break;	    case 'V':		// keeps verbosity out of auditor		prop_unexport(P_VERBOSITY, 1);	    case 'v':		vb_addstr(bsd_optarg);		break;	    case LF('D', 'M'):#if defined(sun)		if (bsd_optarg && *bsd_optarg == 'w') {		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");		    if (!putil_getenv("MALLOC_DEBUG")) {			putil_putenv("MALLOC_DEBUG=WATCH");		    }		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));		} else {		    putil_putenv("LD_PRELOAD=/lib/libumem.so");		    if (!putil_getenv("UMEM_DEBUG")) {			putil_putenv("UMEM_DEBUG=default,verbose");		    }		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));		}		if (putil_getenv("LD_PRELOAD")) {		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));		}#elif defined(__APPLE__)		putil_putenv("MallocScribble=1");		putil_putenv("MallocPreScribble=1");		putil_putenv("MallocBadFreeAbort=1");		putil_putenv("MallocCheckHeapAbort=1");		//putil_putenv("MallocStackLogging=1");		//putil_putenv("MallocStackLoggingNoCompact=1");		//putil_putenv("MallocCheckHeapStart=1000");		//putil_putenv("MallocCheckHeapEach=1000");		//putil_putenv("MallocCheckHeapSleep=-200");		//(void)system("env | grep '^Malloc'");#else	/*__APPLE__*/		putil_die("no malloc debugger implemented");#endif	/*__APPLE__*/		break;	    case LF('v', 'n'):		_print_version(bsd_optarg && bsd_optarg[0] == '+');		exit(0);		break;	    case 'w':		vb_addbit(VB_WHY);		break;	    case 'W':		// This is reserved for extension flags a la gcc.		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the		// makefile generator.		{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}		break;	    case 'x':		vb_addbit(VB_EXEC);		break;	    case 'X':		prop_override_true(P_EXECUTE_ONLY);		prop_put_ulong(P_PRINT_ELAPSED, 1);		prop_unset(P_SERVER, 1);		break;	    case 'Y':		prop_override_true(P_SYNCHRONOUS_TRANSFERS);		break;	    case 'h':		_usage(0);		break;	    case LF('P','*'):	// alias to --Help for mnemonic reasons	    case 'H':		// Put off printing properties till they're all filled in.		if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}		break;	    default:		_usage(1);	}    }    argc -= bsd_optind;    argv += bsd_optind;    // Special case - this program can turn into a "tee"    // if requested. DOES NOT RETURN!    if (tee) {	tee_into(prop_get_str(P_LOG_FILE));    }    if (make_clean) {	_make_clean(argc, argv);    }    // The command we've been asked to invoke.    if ((action = argv[0])) {	// Hack for typing ease: "make" is a synonym for "run make".	// Similarly, "ant" is a synonym for "run ant".	// And any word with non-alphanumeric chars must be a program to run.	if (strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")		// Windows only	    || !util_pathcmp(action, "ant")) {	    action = "run";	} else {	    argv++;	    argc--;	}    } else {	// The default command ...	action = "help";    }    // Default project name is the name of the dir containing the project    // config file, with any numerical extension following a '-' removed.    if (!prop_has_value(P_PROJECT_NAME)) {	CCS pbase;	CS pjname, ptr, dash;	pbase = prop_get_str(P_BASE_DIR);	if (pbase && (pjname = putil_basename(pbase)) && *pjname) {	    ptr = putil_strdup(pjname);	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }	    prop_put_str(P_PROJECT_NAME, ptr);	    putil_free(ptr);	}    }    // For convenience, the -o flag suppresses server interaction along    // with specifying an output file.    if (no_server) {	prop_unset(P_SERVER, 1);    }    // Recycling would break full-makefile generation.    if (prop_has_value(P_MAKE_FILE) && !prop_has_value(P_MAKE_DEPENDS)) {	prop_override_ulong(P_UPLOAD_ONLY, 1);    }    // Optionally run help output through a pager.#if !defined(_WIN32)    if (pager ||	(streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER)))) {	int pfd[2];	pid_t pid;	// Allow indirection through standard $PAGER EV.	if (*pager == '$') {	    if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }	}	fflush(NULL);	if (pipe(pfd) < 0) {	    putil_syserr(2, "pipe");	}	// Note that the *parent* process becomes the pager.	if ((pid = fork()) == 0) {	    // Child	    close(pfd[0]);	    if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }	} else if (pid > 0) {	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	} else {	    putil_syserr(2, "fork");	}    }#endif	/*_WIN32*/    // For debugging convenience allow server=nnnn to mean "localhost:nnnn"    // and server=foo to mean "foo:8080" since those are the most common.    if (prop_has_value(P_SERVER)) {	const char *svr;	svr = prop_get_str(P_SERVER);	if (!strchr(svr, ':')) {	    char buf[256];	    if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }	    prop_override_str(P_SERVER, buf);	}    }    // Diagnostic: dump properties and quit.    if (proplevel >= 0) {	prop_help(proplevel, vb_bitmatch(VB_STD), exe);	exit(0);    }    http_init();    // Arrange for the elapsed time to be printed out at exit time    // if requested by user property. The property is not a boolean    // but a mimimum number of seconds which must elapse in order    // to trigger output.    if ((ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED))) {	StartTime = time(NULL);	atexit(_print_elapsed_time);    }    if (streq(action, "run")) {	CCS cwd = NULL;	CCS logfile = NULL;	CCS rmap;	CCS logprop;	if (!argv || !*argv) {	    _usage(1);	}	// The auditor ignores anything it considers to be a temp	// file, which can cause terribly confusing behavior if	// run on a project rooted in (say) /tmp. It's a natural	// tendency for someone setting up a quick test case to	// put it in /tmp and then spend hours trying to figure	// out why it's behaving strangely. To help avoid this	// we disallow the auditor from running when the CWD is	// one we consider a repository for temp files.	if ((cwd = util_get_cwd())) {	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }	} else {	    putil_syserr(2, "util_get_cwd()");	}	// These values are pre-exported to reserve env-block space.	// To not do so would risk a dangerous realloc of the 'environ'	// pointer within an unsuspecting host process.	// Reserve a block of env space for the current cmd depth.	prop_put_ulong(P_DEPTH, 0);	// Reserve a block of env space for the parent cmd id.	// Seed it with our pid.	prop_put_ulong(P_PCMDID, getpid());	// Reserve a block of env space for the parent cmd code.	prop_put_str(P_PCCODE, CSV_NULL_FIELD);	// This needs to be present in the env from the start even when off.	// But being a boolean it only needs room for one digit.	prop_put_ulong(P_AGGREGATED_SUBCMD, 0);	// Allow the cmd to be preceded by EV's in the manner of the shell.	while (strchr(*argv, '=')) {	    putil_putenv(*argv++);	}	// Determine whether the user requested a log file and	// apply the %u, %p, etc. formats to it if so.	if ((logprop = prop_get_str(P_LOG_FILE))) {	    (void)util_substitute_params(logprop, &logfile);	    // In case it's present but unwriteable.	    if (logfile)		(void)unlink(logfile);	}	// Work out the name of the roadmap file and store the result.	if ((rmap = prop_get_str(P_ROADMAPFILE))) {	    if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }	} else if (prop_has_value(P_SERVER)) {	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}	if (prop_has_value(P_SERVER)) {	    // Get the new roadmap.	    if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }	    // Start a session. We do this *after* getting the roadmap	    // to avoid session expiration during roadmap-getting.	    // That would only be a risk for a very slow roadmap or a	    // very fast session expiration but it could happen.	    if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }	}#if defined(_WIN32)	/* TODO */#else	if (redo_script) {	    FILE *fp;	    if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }	}#endif	// For systems supporting DTrace: run the cmd with the specified	// dtrace script.	if (dscript) {	    CS *dargv;	    dargv = putil_malloc(sizeof(*dargv) * 6);	    dargv[0] = "dtrace";	    dargv[1] = "-s";	    dargv[2] = dscript;	    dargv[3] = "-c";	    dargv[4] = util_requote_argv(argv);	    dargv[5] = NULL;	    argv = dargv;	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);	}	make_init(exe);	if (prop_is_true(P_GIT)) {	    git_init(exe);	}	// RUN AND AUDIT THE COMMAND.	rc = run_cmd(exe, (CS *)argv, logfile);	putil_free(logfile);	if (prop_is_true(P_GIT)) {	    git_fini();	}	make_fini();	// If using a temp logfile, remove it now.	if (prop_is_true(P_LOG_FILE_TEMP)) {	    unlink(prop_get_str(P_LOG_FILE));	}	putil_free(cwd);    } else if (streq(action, "roadmap")) {	// Useful while testing roadmaps. May be dispensed with later.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	mon_get_roadmap();    } else if (streq(action, "shop")) {	int cflag = 0;	int gflag = 0;	ca_o ca;	CCS rwd;	// This special action is useful for internal tests of shopping	// capabilities without changing server state, using a saved	// roadmap file.	while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}	if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}	// Assume the pre-existence of a roadmap with the default name.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	ca = ca_new();	ca_set_pccode(ca, CSV_NULL_FIELD);	ca_set_prog(ca, prop_get_str(P_PROGNAME));	ca_set_host(ca, "localhost");	ca_set_cmdid(ca, getpid());	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));	ca_set_rwd(ca, rwd = util_get_rwd());	putil_free(rwd);	ca_set_started(ca, 1);	// We almost always want these while debugging...	vb_addbit(VB_SHOP);	vb_addbit(VB_WHY);	shop_init();	if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}	shop_fini();    } else {	rc = do_action(action, argc, argv);    }    code_fini();    http_fini();    return rc;}
CCS exe;
CCS exe;
CCS
CCS
exe
exe
CCS action;
CCS action;
CCS
CCS
action
action
CCS pager = NULL;
CCS pager = NULL;
CCS
CCS
pager = NULL
pager
= NULL
NULL
NULL
CS dscript = NULL;
CS dscript = NULL;
CS
CS
dscript = NULL
dscript
= NULL
NULL
NULL
CS redo_script = NULL;
CS redo_script = NULL;
CS
CS
redo_script = NULL
redo_script
= NULL
NULL
NULL
int proplevel = -1;
int proplevel = -1;
int
proplevel = -1
proplevel
= -1
-1
1
int no_server = 0;
int no_server = 0;
int
no_server = 0
no_server
= 0
0
int make_clean = 0;
int make_clean = 0;
int
make_clean = 0
make_clean
= 0
0
int tee = 0;
int tee = 0;
int
tee = 0
tee
= 0
0
int rc = 0;
int rc = 0;
int
rc = 0
rc
= 0
0
if (!(exe = putil_getexecpath())) {	putil_die("unable to determine path to argv[0]\n");    }
!(exe = putil_getexecpath())
(exe = putil_getexecpath())
exe = putil_getexecpath()
exe
exe
putil_getexecpath()
putil_getexecpath
putil_getexecpath
{	putil_die("unable to determine path to argv[0]\n");    }
putil_die("unable to determine path to argv[0]\n");
putil_die("unable to determine path to argv[0]\n")
putil_die
putil_die
"unable to determine path to argv[0]\n"
vb_init();
vb_init()
vb_init
vb_init
atexit(vb_fini);
atexit(vb_fini);
atexit
atexit
(vb_fini)
vb_fini
vb_fini
prop_init(APPLICATION_NAME);
prop_init(APPLICATION_NAME);
prop_init
prop_init
(APPLICATION_NAME)
APPLICATION_NAME
APPLICATION_NAME
atexit(prop_fini);
atexit(prop_fini);
atexit
atexit
(prop_fini)
prop_fini
prop_fini
prefs_init(exe, PROP_EXT, NULL);
prefs_init(exe, PROP_EXT, NULL)
prefs_init
prefs_init
exe
exe
PROP_EXT
PROP_EXT
NULL
NULL
code_init();
code_init()
code_init
code_init
prop_override_true(P_MAKE_ONESHELL);
prop_override_true(P_MAKE_ONESHELL);
prop_override_true
prop_override_true
(P_MAKE_ONESHELL)
P_MAKE_ONESHELL
P_MAKE_ONESHELL
for (bsd_getopt_reset();;) {	int c;	// *INDENT-OFF*	static CS short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";	static struct option long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	};	// *INDENT-ON*	c = bsd_getopt(argc, argv, short_opts, long_opts, NULL);	if (c == -1) {	    break;	}	switch (c) {	    case '1':		prop_unset(P_MAKE_ONESHELL, 0);		break;	    case 'a':		prop_override_true(P_ABSOLUTE_PATHS);		break;	    case LF('A','G'):		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);		break;	    case 'A':		prop_override_true(P_AUDIT_ONLY);		break;	    // Undocumented hack - allows an automatic "make clean" which	    // is not audited or counted in elapsed time.	    case 'c':		make_clean = 1;		break;	    case 'C':		{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}		break;	    case LF('C', 'P'):		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);		break;	    // Undocumented - used to debug downloads without modifying state.	    // We may not need this forever.	    case 'D':		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);		break;	    case 'd':		prop_override_true(P_DOWNLOAD_ONLY);		break;	    case LF('D', 'T'):		dscript = bsd_optarg;		break;	    case 'E':		prop_put_long(P_STRICT_ERROR, 1);		break;	    case 'I':		prop_override_str(P_IDENTITY_HASH, bsd_optarg);		break;	    case 'L':		{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}		break;	    case LF('L', 'T'):		tee = 1;		break;	    case LF('L', 'S'):		prop_override_ulong(P_LOG_TIME_STAMP, 1);		break;	    case 'l':		{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}		break;	    case 'F':		prop_override_str(P_MAKE_FILE, bsd_optarg);		break;	    case 'G':		prop_override_true(P_GIT);		no_server = 1;		break;	    case 'M':		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}		break;	    case 'm':		prop_override_true(P_MEMBERS_ONLY);		break;	    case 'o':		no_server = 1;	    case 'O':		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}		break;	    case 'p':		prop_override_str(P_PROJECT_NAME, bsd_optarg);		break;	    case 'P':		if (!(pager = getenv("PAGER"))) {		    pager = "less";		}		break;		// Generate runtime linker profile output. Works on		// Solaris and Linux at least.	    case LF('P', '%'):#if !defined(_WIN32)		putil_putenv("LD_PROFILE=" AUDITOR);#endif	/*_WIN32*/		break;	    case 'Q':		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");	    case 'q':		QuietMode = 1;		vb_addstr("-");		break;	    case 'R':		prop_override_true(P_REUSE_ROADMAP);		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);	    case 'r':		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);		prop_override_true(P_LEAVE_ROADMAP);		break;	    case LF('R', 'L'):		if ((rc = http_restart())) {		    exit(rc);		}		break;	    case 's':		prop_override_str(P_SERVER, bsd_optarg);		break;	    case 'S':		prop_put_ulong(P_STRICT, 1);		prop_put_ulong(P_STRICT_DOWNLOAD, 1);		prop_put_ulong(P_STRICT_UPLOAD, 1);		break;	    case LF('s', 'c'):		redo_script = bsd_optarg;		break;	    case 't':		prop_unset(P_PRINT_ELAPSED, 1);		prop_put_str(P_PRINT_ELAPSED, "-1");		break;	    case 'u':		prop_override_ulong(P_UPLOAD_ONLY, 1);		break;	    case 'U':		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);		break;	    case 'V':		// keeps verbosity out of auditor		prop_unexport(P_VERBOSITY, 1);	    case 'v':		vb_addstr(bsd_optarg);		break;	    case LF('D', 'M'):#if defined(sun)		if (bsd_optarg && *bsd_optarg == 'w') {		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");		    if (!putil_getenv("MALLOC_DEBUG")) {			putil_putenv("MALLOC_DEBUG=WATCH");		    }		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));		} else {		    putil_putenv("LD_PRELOAD=/lib/libumem.so");		    if (!putil_getenv("UMEM_DEBUG")) {			putil_putenv("UMEM_DEBUG=default,verbose");		    }		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));		}		if (putil_getenv("LD_PRELOAD")) {		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));		}#elif defined(__APPLE__)		putil_putenv("MallocScribble=1");		putil_putenv("MallocPreScribble=1");		putil_putenv("MallocBadFreeAbort=1");		putil_putenv("MallocCheckHeapAbort=1");		//putil_putenv("MallocStackLogging=1");		//putil_putenv("MallocStackLoggingNoCompact=1");		//putil_putenv("MallocCheckHeapStart=1000");		//putil_putenv("MallocCheckHeapEach=1000");		//putil_putenv("MallocCheckHeapSleep=-200");		//(void)system("env | grep '^Malloc'");#else	/*__APPLE__*/		putil_die("no malloc debugger implemented");#endif	/*__APPLE__*/		break;	    case LF('v', 'n'):		_print_version(bsd_optarg && bsd_optarg[0] == '+');		exit(0);		break;	    case 'w':		vb_addbit(VB_WHY);		break;	    case 'W':		// This is reserved for extension flags a la gcc.		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the		// makefile generator.		{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}		break;	    case 'x':		vb_addbit(VB_EXEC);		break;	    case 'X':		prop_override_true(P_EXECUTE_ONLY);		prop_put_ulong(P_PRINT_ELAPSED, 1);		prop_unset(P_SERVER, 1);		break;	    case 'Y':		prop_override_true(P_SYNCHRONOUS_TRANSFERS);		break;	    case 'h':		_usage(0);		break;	    case LF('P','*'):	// alias to --Help for mnemonic reasons	    case 'H':		// Put off printing properties till they're all filled in.		if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}		break;	    default:		_usage(1);	}    }
bsd_getopt_reset();
bsd_getopt_reset()
bsd_getopt_reset
bsd_getopt_reset
{	int c;	// *INDENT-OFF*	static CS short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";	static struct option long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	};	// *INDENT-ON*	c = bsd_getopt(argc, argv, short_opts, long_opts, NULL);	if (c == -1) {	    break;	}	switch (c) {	    case '1':		prop_unset(P_MAKE_ONESHELL, 0);		break;	    case 'a':		prop_override_true(P_ABSOLUTE_PATHS);		break;	    case LF('A','G'):		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);		break;	    case 'A':		prop_override_true(P_AUDIT_ONLY);		break;	    // Undocumented hack - allows an automatic "make clean" which	    // is not audited or counted in elapsed time.	    case 'c':		make_clean = 1;		break;	    case 'C':		{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}		break;	    case LF('C', 'P'):		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);		break;	    // Undocumented - used to debug downloads without modifying state.	    // We may not need this forever.	    case 'D':		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);		break;	    case 'd':		prop_override_true(P_DOWNLOAD_ONLY);		break;	    case LF('D', 'T'):		dscript = bsd_optarg;		break;	    case 'E':		prop_put_long(P_STRICT_ERROR, 1);		break;	    case 'I':		prop_override_str(P_IDENTITY_HASH, bsd_optarg);		break;	    case 'L':		{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}		break;	    case LF('L', 'T'):		tee = 1;		break;	    case LF('L', 'S'):		prop_override_ulong(P_LOG_TIME_STAMP, 1);		break;	    case 'l':		{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}		break;	    case 'F':		prop_override_str(P_MAKE_FILE, bsd_optarg);		break;	    case 'G':		prop_override_true(P_GIT);		no_server = 1;		break;	    case 'M':		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}		break;	    case 'm':		prop_override_true(P_MEMBERS_ONLY);		break;	    case 'o':		no_server = 1;	    case 'O':		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}		break;	    case 'p':		prop_override_str(P_PROJECT_NAME, bsd_optarg);		break;	    case 'P':		if (!(pager = getenv("PAGER"))) {		    pager = "less";		}		break;		// Generate runtime linker profile output. Works on		// Solaris and Linux at least.	    case LF('P', '%'):#if !defined(_WIN32)		putil_putenv("LD_PROFILE=" AUDITOR);#endif	/*_WIN32*/		break;	    case 'Q':		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");	    case 'q':		QuietMode = 1;		vb_addstr("-");		break;	    case 'R':		prop_override_true(P_REUSE_ROADMAP);		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);	    case 'r':		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);		prop_override_true(P_LEAVE_ROADMAP);		break;	    case LF('R', 'L'):		if ((rc = http_restart())) {		    exit(rc);		}		break;	    case 's':		prop_override_str(P_SERVER, bsd_optarg);		break;	    case 'S':		prop_put_ulong(P_STRICT, 1);		prop_put_ulong(P_STRICT_DOWNLOAD, 1);		prop_put_ulong(P_STRICT_UPLOAD, 1);		break;	    case LF('s', 'c'):		redo_script = bsd_optarg;		break;	    case 't':		prop_unset(P_PRINT_ELAPSED, 1);		prop_put_str(P_PRINT_ELAPSED, "-1");		break;	    case 'u':		prop_override_ulong(P_UPLOAD_ONLY, 1);		break;	    case 'U':		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);		break;	    case 'V':		// keeps verbosity out of auditor		prop_unexport(P_VERBOSITY, 1);	    case 'v':		vb_addstr(bsd_optarg);		break;	    case LF('D', 'M'):#if defined(sun)		if (bsd_optarg && *bsd_optarg == 'w') {		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");		    if (!putil_getenv("MALLOC_DEBUG")) {			putil_putenv("MALLOC_DEBUG=WATCH");		    }		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));		} else {		    putil_putenv("LD_PRELOAD=/lib/libumem.so");		    if (!putil_getenv("UMEM_DEBUG")) {			putil_putenv("UMEM_DEBUG=default,verbose");		    }		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));		}		if (putil_getenv("LD_PRELOAD")) {		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));		}#elif defined(__APPLE__)		putil_putenv("MallocScribble=1");		putil_putenv("MallocPreScribble=1");		putil_putenv("MallocBadFreeAbort=1");		putil_putenv("MallocCheckHeapAbort=1");		//putil_putenv("MallocStackLogging=1");		//putil_putenv("MallocStackLoggingNoCompact=1");		//putil_putenv("MallocCheckHeapStart=1000");		//putil_putenv("MallocCheckHeapEach=1000");		//putil_putenv("MallocCheckHeapSleep=-200");		//(void)system("env | grep '^Malloc'");#else	/*__APPLE__*/		putil_die("no malloc debugger implemented");#endif	/*__APPLE__*/		break;	    case LF('v', 'n'):		_print_version(bsd_optarg && bsd_optarg[0] == '+');		exit(0);		break;	    case 'w':		vb_addbit(VB_WHY);		break;	    case 'W':		// This is reserved for extension flags a la gcc.		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the		// makefile generator.		{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}		break;	    case 'x':		vb_addbit(VB_EXEC);		break;	    case 'X':		prop_override_true(P_EXECUTE_ONLY);		prop_put_ulong(P_PRINT_ELAPSED, 1);		prop_unset(P_SERVER, 1);		break;	    case 'Y':		prop_override_true(P_SYNCHRONOUS_TRANSFERS);		break;	    case 'h':		_usage(0);		break;	    case LF('P','*'):	// alias to --Help for mnemonic reasons	    case 'H':		// Put off printing properties till they're all filled in.		if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}		break;	    default:		_usage(1);	}    }
int c;
int c;
int
c
c
static CS short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";
static CS short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY";
static CS
CS
short_opts =	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY"
short_opts
=	    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY"
"+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY"
static struct option long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	};
static struct option long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	};
static struct option
option
long_opts[] = {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	}
long_opts
[]
= {	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	}
{	    {"oneshell",	no_argument,	   NULL, '1'},	    {"absolute-paths",	no_argument,	   NULL, 'a'},	    {"agg-level",	required_argument, NULL, LF('A','G')},	    {"audit-only",	no_argument,	   NULL, 'A'},	    {"make-clean",	no_argument,	   NULL, 'c'},	    {"directory",	required_argument, NULL, 'C'},	    {"download-only",	no_argument,	   NULL, 'd'},	    {"download-silent",	no_argument,	   NULL, 'D'},	    {"dtrace",		required_argument, NULL, LF('D','T')},	    {"client-platform",	required_argument, NULL, LF('C','P')},	    {"error-strict",	no_argument,	   NULL, 'E'},	    {"make-file",	required_argument, NULL, 'F'},	    {"git",		no_argument,	   NULL, 'G'},	    {"help",		no_argument,	   NULL, 'h'},	    {"Help",		optional_argument, NULL, 'H'},	    {"properties",	optional_argument, NULL, LF('P','*')},	    {"identity-hash",	required_argument, NULL, 'I'},	    {"log-file",	required_argument, NULL, 'l'},	    {"log-file-temp",	no_argument,	   NULL, 'L'},	    {"log-tee",		no_argument,	   NULL, LF('L','T')},	    {"log-time-stamp",	no_argument,	   NULL, LF('L','S')},	    {"make-depends",	optional_argument, NULL, 'M'},	    {"mem-debug",	optional_argument, NULL, LF('D','M')},	    {"members-only",	no_argument,	   NULL, 'm'},	    {"output-file",	required_argument, NULL, 'o'},	    {"Output-file",	required_argument, NULL, 'O'},	    {"project-name",	required_argument, NULL, 'p'},	    {"pager",		no_argument,	   NULL, 'P'},	    {"profile",		no_argument,	   NULL, LF('P','%')},	    {"quiet",		no_argument,	   NULL, 'q'},	    {"extra-quiet",	no_argument,	   NULL, 'Q'},	    {"leave-roadmap",	no_argument,	   NULL, 'r'},	    {"reuse-roadmap",	no_argument,       NULL, 'R'},	    {"restart",		no_argument,	   NULL, LF('R','L')},	    {"server",		required_argument, NULL, 's'},	    {"strict",		no_argument,	   NULL, 'S'},	    {"script",		required_argument, NULL, LF('s','c')},	    {"print-elapsed",	no_argument,	   NULL, 't'},	    {"upload-only",	no_argument,	   NULL, 'u'},	    {"uncompressed-transfers",no_argument, NULL, 'U'},	    {"verbosity",	optional_argument, NULL, 'v'},	    {"local-verbosity",	required_argument, NULL, 'V'},	    {"version",		optional_argument, NULL, LF('v','n')},	    {"why",		no_argument,	   NULL, 'w'},	    {"WFlag",		required_argument, NULL, 'W'},	    {"exec-verbosity",	required_argument, NULL, 'x'},	    {"execute-only",	no_argument,	   NULL, 'X'},	    {"synchronous-transfers", no_argument,	   NULL, 'Y'},	    {0,				0,		   NULL,  0 },	}
{"oneshell",	no_argument,	   NULL, '1'}
"oneshell"
no_argument
no_argument
NULL
NULL
'1'
{"absolute-paths",	no_argument,	   NULL, 'a'}
"absolute-paths"
no_argument
no_argument
NULL
NULL
'a'
{"agg-level",	required_argument, NULL, LF('A','G')}
"agg-level"
required_argument
required_argument
NULL
NULL
LF('A','G')
LF
LF
'A'
'G'
{"audit-only",	no_argument,	   NULL, 'A'}
"audit-only"
no_argument
no_argument
NULL
NULL
'A'
{"make-clean",	no_argument,	   NULL, 'c'}
"make-clean"
no_argument
no_argument
NULL
NULL
'c'
{"directory",	required_argument, NULL, 'C'}
"directory"
required_argument
required_argument
NULL
NULL
'C'
{"download-only",	no_argument,	   NULL, 'd'}
"download-only"
no_argument
no_argument
NULL
NULL
'd'
{"download-silent",	no_argument,	   NULL, 'D'}
"download-silent"
no_argument
no_argument
NULL
NULL
'D'
{"dtrace",		required_argument, NULL, LF('D','T')}
"dtrace"
required_argument
required_argument
NULL
NULL
LF('D','T')
LF
LF
'D'
'T'
{"client-platform",	required_argument, NULL, LF('C','P')}
"client-platform"
required_argument
required_argument
NULL
NULL
LF('C','P')
LF
LF
'C'
'P'
{"error-strict",	no_argument,	   NULL, 'E'}
"error-strict"
no_argument
no_argument
NULL
NULL
'E'
{"make-file",	required_argument, NULL, 'F'}
"make-file"
required_argument
required_argument
NULL
NULL
'F'
{"git",		no_argument,	   NULL, 'G'}
"git"
no_argument
no_argument
NULL
NULL
'G'
{"help",		no_argument,	   NULL, 'h'}
"help"
no_argument
no_argument
NULL
NULL
'h'
{"Help",		optional_argument, NULL, 'H'}
"Help"
optional_argument
optional_argument
NULL
NULL
'H'
{"properties",	optional_argument, NULL, LF('P','*')}
"properties"
optional_argument
optional_argument
NULL
NULL
LF('P','*')
LF
LF
'P'
'*'
{"identity-hash",	required_argument, NULL, 'I'}
"identity-hash"
required_argument
required_argument
NULL
NULL
'I'
{"log-file",	required_argument, NULL, 'l'}
"log-file"
required_argument
required_argument
NULL
NULL
'l'
{"log-file-temp",	no_argument,	   NULL, 'L'}
"log-file-temp"
no_argument
no_argument
NULL
NULL
'L'
{"log-tee",		no_argument,	   NULL, LF('L','T')}
"log-tee"
no_argument
no_argument
NULL
NULL
LF('L','T')
LF
LF
'L'
'T'
{"log-time-stamp",	no_argument,	   NULL, LF('L','S')}
"log-time-stamp"
no_argument
no_argument
NULL
NULL
LF('L','S')
LF
LF
'L'
'S'
{"make-depends",	optional_argument, NULL, 'M'}
"make-depends"
optional_argument
optional_argument
NULL
NULL
'M'
{"mem-debug",	optional_argument, NULL, LF('D','M')}
"mem-debug"
optional_argument
optional_argument
NULL
NULL
LF('D','M')
LF
LF
'D'
'M'
{"members-only",	no_argument,	   NULL, 'm'}
"members-only"
no_argument
no_argument
NULL
NULL
'm'
{"output-file",	required_argument, NULL, 'o'}
"output-file"
required_argument
required_argument
NULL
NULL
'o'
{"Output-file",	required_argument, NULL, 'O'}
"Output-file"
required_argument
required_argument
NULL
NULL
'O'
{"project-name",	required_argument, NULL, 'p'}
"project-name"
required_argument
required_argument
NULL
NULL
'p'
{"pager",		no_argument,	   NULL, 'P'}
"pager"
no_argument
no_argument
NULL
NULL
'P'
{"profile",		no_argument,	   NULL, LF('P','%')}
"profile"
no_argument
no_argument
NULL
NULL
LF('P','%')
LF
LF
'P'
'%'
{"quiet",		no_argument,	   NULL, 'q'}
"quiet"
no_argument
no_argument
NULL
NULL
'q'
{"extra-quiet",	no_argument,	   NULL, 'Q'}
"extra-quiet"
no_argument
no_argument
NULL
NULL
'Q'
{"leave-roadmap",	no_argument,	   NULL, 'r'}
"leave-roadmap"
no_argument
no_argument
NULL
NULL
'r'
{"reuse-roadmap",	no_argument,       NULL, 'R'}
"reuse-roadmap"
no_argument
no_argument
NULL
NULL
'R'
{"restart",		no_argument,	   NULL, LF('R','L')}
"restart"
no_argument
no_argument
NULL
NULL
LF('R','L')
LF
LF
'R'
'L'
{"server",		required_argument, NULL, 's'}
"server"
required_argument
required_argument
NULL
NULL
's'
{"strict",		no_argument,	   NULL, 'S'}
"strict"
no_argument
no_argument
NULL
NULL
'S'
{"script",		required_argument, NULL, LF('s','c')}
"script"
required_argument
required_argument
NULL
NULL
LF('s','c')
LF
LF
's'
'c'
{"print-elapsed",	no_argument,	   NULL, 't'}
"print-elapsed"
no_argument
no_argument
NULL
NULL
't'
{"upload-only",	no_argument,	   NULL, 'u'}
"upload-only"
no_argument
no_argument
NULL
NULL
'u'
{"uncompressed-transfers",no_argument, NULL, 'U'}
"uncompressed-transfers"
no_argument
no_argument
NULL
NULL
'U'
{"verbosity",	optional_argument, NULL, 'v'}
"verbosity"
optional_argument
optional_argument
NULL
NULL
'v'
{"local-verbosity",	required_argument, NULL, 'V'}
"local-verbosity"
required_argument
required_argument
NULL
NULL
'V'
{"version",		optional_argument, NULL, LF('v','n')}
"version"
optional_argument
optional_argument
NULL
NULL
LF('v','n')
LF
LF
'v'
'n'
{"why",		no_argument,	   NULL, 'w'}
"why"
no_argument
no_argument
NULL
NULL
'w'
{"WFlag",		required_argument, NULL, 'W'}
"WFlag"
required_argument
required_argument
NULL
NULL
'W'
{"exec-verbosity",	required_argument, NULL, 'x'}
"exec-verbosity"
required_argument
required_argument
NULL
NULL
'x'
{"execute-only",	no_argument,	   NULL, 'X'}
"execute-only"
no_argument
no_argument
NULL
NULL
'X'
{"synchronous-transfers", no_argument,	   NULL, 'Y'}
"synchronous-transfers"
no_argument
no_argument
NULL
NULL
'Y'
{0,				0,		   NULL,  0 }
0
0
NULL
NULL
0
c = bsd_getopt(argc, argv, short_opts, long_opts, NULL);
c = bsd_getopt(argc, argv, short_opts, long_opts, NULL)
c
c
bsd_getopt(argc, argv, short_opts, long_opts, NULL)
bsd_getopt
bsd_getopt
argc
argc
argv
argv
short_opts
short_opts
long_opts
long_opts
NULL
NULL
if (c == -1) {	    break;	}
c == -1
c
c
-1
1
{	    break;	}
break;
switch (c) {	    case '1':		prop_unset(P_MAKE_ONESHELL, 0);		break;	    case 'a':		prop_override_true(P_ABSOLUTE_PATHS);		break;	    case LF('A','G'):		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);		break;	    case 'A':		prop_override_true(P_AUDIT_ONLY);		break;	    // Undocumented hack - allows an automatic "make clean" which	    // is not audited or counted in elapsed time.	    case 'c':		make_clean = 1;		break;	    case 'C':		{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}		break;	    case LF('C', 'P'):		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);		break;	    // Undocumented - used to debug downloads without modifying state.	    // We may not need this forever.	    case 'D':		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);		break;	    case 'd':		prop_override_true(P_DOWNLOAD_ONLY);		break;	    case LF('D', 'T'):		dscript = bsd_optarg;		break;	    case 'E':		prop_put_long(P_STRICT_ERROR, 1);		break;	    case 'I':		prop_override_str(P_IDENTITY_HASH, bsd_optarg);		break;	    case 'L':		{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}		break;	    case LF('L', 'T'):		tee = 1;		break;	    case LF('L', 'S'):		prop_override_ulong(P_LOG_TIME_STAMP, 1);		break;	    case 'l':		{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}		break;	    case 'F':		prop_override_str(P_MAKE_FILE, bsd_optarg);		break;	    case 'G':		prop_override_true(P_GIT);		no_server = 1;		break;	    case 'M':		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}		break;	    case 'm':		prop_override_true(P_MEMBERS_ONLY);		break;	    case 'o':		no_server = 1;	    case 'O':		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}		break;	    case 'p':		prop_override_str(P_PROJECT_NAME, bsd_optarg);		break;	    case 'P':		if (!(pager = getenv("PAGER"))) {		    pager = "less";		}		break;		// Generate runtime linker profile output. Works on		// Solaris and Linux at least.	    case LF('P', '%'):#if !defined(_WIN32)		putil_putenv("LD_PROFILE=" AUDITOR);#endif	/*_WIN32*/		break;	    case 'Q':		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");	    case 'q':		QuietMode = 1;		vb_addstr("-");		break;	    case 'R':		prop_override_true(P_REUSE_ROADMAP);		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);	    case 'r':		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);		prop_override_true(P_LEAVE_ROADMAP);		break;	    case LF('R', 'L'):		if ((rc = http_restart())) {		    exit(rc);		}		break;	    case 's':		prop_override_str(P_SERVER, bsd_optarg);		break;	    case 'S':		prop_put_ulong(P_STRICT, 1);		prop_put_ulong(P_STRICT_DOWNLOAD, 1);		prop_put_ulong(P_STRICT_UPLOAD, 1);		break;	    case LF('s', 'c'):		redo_script = bsd_optarg;		break;	    case 't':		prop_unset(P_PRINT_ELAPSED, 1);		prop_put_str(P_PRINT_ELAPSED, "-1");		break;	    case 'u':		prop_override_ulong(P_UPLOAD_ONLY, 1);		break;	    case 'U':		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);		break;	    case 'V':		// keeps verbosity out of auditor		prop_unexport(P_VERBOSITY, 1);	    case 'v':		vb_addstr(bsd_optarg);		break;	    case LF('D', 'M'):#if defined(sun)		if (bsd_optarg && *bsd_optarg == 'w') {		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");		    if (!putil_getenv("MALLOC_DEBUG")) {			putil_putenv("MALLOC_DEBUG=WATCH");		    }		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));		} else {		    putil_putenv("LD_PRELOAD=/lib/libumem.so");		    if (!putil_getenv("UMEM_DEBUG")) {			putil_putenv("UMEM_DEBUG=default,verbose");		    }		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));		}		if (putil_getenv("LD_PRELOAD")) {		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));		}#elif defined(__APPLE__)		putil_putenv("MallocScribble=1");		putil_putenv("MallocPreScribble=1");		putil_putenv("MallocBadFreeAbort=1");		putil_putenv("MallocCheckHeapAbort=1");		//putil_putenv("MallocStackLogging=1");		//putil_putenv("MallocStackLoggingNoCompact=1");		//putil_putenv("MallocCheckHeapStart=1000");		//putil_putenv("MallocCheckHeapEach=1000");		//putil_putenv("MallocCheckHeapSleep=-200");		//(void)system("env | grep '^Malloc'");#else	/*__APPLE__*/		putil_die("no malloc debugger implemented");#endif	/*__APPLE__*/		break;	    case LF('v', 'n'):		_print_version(bsd_optarg && bsd_optarg[0] == '+');		exit(0);		break;	    case 'w':		vb_addbit(VB_WHY);		break;	    case 'W':		// This is reserved for extension flags a la gcc.		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the		// makefile generator.		{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}		break;	    case 'x':		vb_addbit(VB_EXEC);		break;	    case 'X':		prop_override_true(P_EXECUTE_ONLY);		prop_put_ulong(P_PRINT_ELAPSED, 1);		prop_unset(P_SERVER, 1);		break;	    case 'Y':		prop_override_true(P_SYNCHRONOUS_TRANSFERS);		break;	    case 'h':		_usage(0);		break;	    case LF('P','*'):	// alias to --Help for mnemonic reasons	    case 'H':		// Put off printing properties till they're all filled in.		if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}		break;	    default:		_usage(1);	}
c
c
{	    case '1':		prop_unset(P_MAKE_ONESHELL, 0);		break;	    case 'a':		prop_override_true(P_ABSOLUTE_PATHS);		break;	    case LF('A','G'):		prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);		break;	    case 'A':		prop_override_true(P_AUDIT_ONLY);		break;	    // Undocumented hack - allows an automatic "make clean" which	    // is not audited or counted in elapsed time.	    case 'c':		make_clean = 1;		break;	    case 'C':		{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}		break;	    case LF('C', 'P'):		prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);		break;	    // Undocumented - used to debug downloads without modifying state.	    // We may not need this forever.	    case 'D':		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);		break;	    case 'd':		prop_override_true(P_DOWNLOAD_ONLY);		break;	    case LF('D', 'T'):		dscript = bsd_optarg;		break;	    case 'E':		prop_put_long(P_STRICT_ERROR, 1);		break;	    case 'I':		prop_override_str(P_IDENTITY_HASH, bsd_optarg);		break;	    case 'L':		{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}		break;	    case LF('L', 'T'):		tee = 1;		break;	    case LF('L', 'S'):		prop_override_ulong(P_LOG_TIME_STAMP, 1);		break;	    case 'l':		{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}		break;	    case 'F':		prop_override_str(P_MAKE_FILE, bsd_optarg);		break;	    case 'G':		prop_override_true(P_GIT);		no_server = 1;		break;	    case 'M':		if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}		break;	    case 'm':		prop_override_true(P_MEMBERS_ONLY);		break;	    case 'o':		no_server = 1;	    case 'O':		if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}		break;	    case 'p':		prop_override_str(P_PROJECT_NAME, bsd_optarg);		break;	    case 'P':		if (!(pager = getenv("PAGER"))) {		    pager = "less";		}		break;		// Generate runtime linker profile output. Works on		// Solaris and Linux at least.	    case LF('P', '%'):#if !defined(_WIN32)		putil_putenv("LD_PROFILE=" AUDITOR);#endif	/*_WIN32*/		break;	    case 'Q':		prop_override_str(P_SERVER_LOG_LEVEL, "WARN");	    case 'q':		QuietMode = 1;		vb_addstr("-");		break;	    case 'R':		prop_override_true(P_REUSE_ROADMAP);		prop_unset(P_DOWNLOAD_ONLY, 0);		prop_put_ulong(P_DOWNLOAD_ONLY, 2);	    case 'r':		prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);		prop_override_true(P_LEAVE_ROADMAP);		break;	    case LF('R', 'L'):		if ((rc = http_restart())) {		    exit(rc);		}		break;	    case 's':		prop_override_str(P_SERVER, bsd_optarg);		break;	    case 'S':		prop_put_ulong(P_STRICT, 1);		prop_put_ulong(P_STRICT_DOWNLOAD, 1);		prop_put_ulong(P_STRICT_UPLOAD, 1);		break;	    case LF('s', 'c'):		redo_script = bsd_optarg;		break;	    case 't':		prop_unset(P_PRINT_ELAPSED, 1);		prop_put_str(P_PRINT_ELAPSED, "-1");		break;	    case 'u':		prop_override_ulong(P_UPLOAD_ONLY, 1);		break;	    case 'U':		prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);		break;	    case 'V':		// keeps verbosity out of auditor		prop_unexport(P_VERBOSITY, 1);	    case 'v':		vb_addstr(bsd_optarg);		break;	    case LF('D', 'M'):#if defined(sun)		if (bsd_optarg && *bsd_optarg == 'w') {		    putil_putenv("LD_PRELOAD=watchmalloc.so.1");		    if (!putil_getenv("MALLOC_DEBUG")) {			putil_putenv("MALLOC_DEBUG=WATCH");		    }		    printf("MALLOC_DEBUG=%s\n", putil_getenv("MALLOC_DEBUG"));		} else {		    putil_putenv("LD_PRELOAD=/lib/libumem.so");		    if (!putil_getenv("UMEM_DEBUG")) {			putil_putenv("UMEM_DEBUG=default,verbose");		    }		    printf("UMEM_DEBUG=%s\n", putil_getenv("UMEM_DEBUG"));		}		if (putil_getenv("LD_PRELOAD")) {		    printf("LD_PRELOAD=%s\n", putil_getenv("LD_PRELOAD"));		}#elif defined(__APPLE__)		putil_putenv("MallocScribble=1");		putil_putenv("MallocPreScribble=1");		putil_putenv("MallocBadFreeAbort=1");		putil_putenv("MallocCheckHeapAbort=1");		//putil_putenv("MallocStackLogging=1");		//putil_putenv("MallocStackLoggingNoCompact=1");		//putil_putenv("MallocCheckHeapStart=1000");		//putil_putenv("MallocCheckHeapEach=1000");		//putil_putenv("MallocCheckHeapSleep=-200");		//(void)system("env | grep '^Malloc'");#else	/*__APPLE__*/		putil_die("no malloc debugger implemented");#endif	/*__APPLE__*/		break;	    case LF('v', 'n'):		_print_version(bsd_optarg && bsd_optarg[0] == '+');		exit(0);		break;	    case 'w':		vb_addbit(VB_WHY);		break;	    case 'W':		// This is reserved for extension flags a la gcc.		// E.g. "-Wm,-v,varfile" would pass "-v varfile" to the		// makefile generator.		{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}		break;	    case 'x':		vb_addbit(VB_EXEC);		break;	    case 'X':		prop_override_true(P_EXECUTE_ONLY);		prop_put_ulong(P_PRINT_ELAPSED, 1);		prop_unset(P_SERVER, 1);		break;	    case 'Y':		prop_override_true(P_SYNCHRONOUS_TRANSFERS);		break;	    case 'h':		_usage(0);		break;	    case LF('P','*'):	// alias to --Help for mnemonic reasons	    case 'H':		// Put off printing properties till they're all filled in.		if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}		break;	    default:		_usage(1);	}
case '1':
'1'
prop_unset(P_MAKE_ONESHELL, 0);
prop_unset(P_MAKE_ONESHELL, 0)
prop_unset
prop_unset
P_MAKE_ONESHELL
P_MAKE_ONESHELL
0
break;
case 'a':
'a'
prop_override_true(P_ABSOLUTE_PATHS);
prop_override_true(P_ABSOLUTE_PATHS);
prop_override_true
prop_override_true
(P_ABSOLUTE_PATHS)
P_ABSOLUTE_PATHS
P_ABSOLUTE_PATHS
break;
case LF('A','G'):
LF('A','G')
LF
LF
'A'
'G'
prop_override_str(P_AGGREGATION_STYLE, bsd_optarg);
prop_override_str(P_AGGREGATION_STYLE, bsd_optarg)
prop_override_str
prop_override_str
P_AGGREGATION_STYLE
P_AGGREGATION_STYLE
bsd_optarg
bsd_optarg
break;
case 'A':
'A'
prop_override_true(P_AUDIT_ONLY);
prop_override_true(P_AUDIT_ONLY);
prop_override_true
prop_override_true
(P_AUDIT_ONLY)
P_AUDIT_ONLY
P_AUDIT_ONLY
break;
case 'c':
'c'
make_clean = 1;
make_clean = 1
make_clean
make_clean
1
break;
case 'C':
'C'
{		    CCS cd_to;		    (void)util_substitute_params(bsd_optarg, &cd_to);		    if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }		    if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }		    putil_free(cd_to);		}
CCS cd_to;
CCS cd_to;
CCS
CCS
cd_to
cd_to
(void)util_substitute_params(bsd_optarg, &cd_to);
(void)util_substitute_params(bsd_optarg, &cd_to)
void
void

util_substitute_params(bsd_optarg, &cd_to)
util_substitute_params
util_substitute_params
bsd_optarg
bsd_optarg
&cd_to
cd_to
cd_to
if (!QuietMode) {			fprintf(stderr, "+ cd %s\n", cd_to);		    }
!QuietMode
QuietMode
QuietMode
{			fprintf(stderr, "+ cd %s\n", cd_to);		    }
fprintf(stderr, "+ cd %s\n", cd_to);
fprintf(stderr, "+ cd %s\n", cd_to)
fprintf
fprintf
stderr
stderr
"+ cd %s\n"
cd_to
cd_to
if (chdir(cd_to)) {			putil_syserr(2, cd_to);		    }
chdir(cd_to)
chdir
chdir
cd_to
cd_to
{			putil_syserr(2, cd_to);		    }
putil_syserr(2, cd_to);
putil_syserr(2, cd_to)
putil_syserr
putil_syserr
2
cd_to
cd_to
putil_free(cd_to);
putil_free(cd_to)
putil_free
putil_free
cd_to
cd_to
break;
case LF('C', 'P'):
LF('C', 'P')
LF
LF
'C'
'P'
prop_override_str(P_MONITOR_PLATFORM, bsd_optarg);
prop_override_str(P_MONITOR_PLATFORM, bsd_optarg)
prop_override_str
prop_override_str
P_MONITOR_PLATFORM
P_MONITOR_PLATFORM
bsd_optarg
bsd_optarg
break;
case 'D':
'D'
prop_unset(P_DOWNLOAD_ONLY, 0);
prop_unset(P_DOWNLOAD_ONLY, 0)
prop_unset
prop_unset
P_DOWNLOAD_ONLY
P_DOWNLOAD_ONLY
0
prop_put_ulong(P_DOWNLOAD_ONLY, 2);
prop_put_ulong(P_DOWNLOAD_ONLY, 2)
prop_put_ulong
prop_put_ulong
P_DOWNLOAD_ONLY
P_DOWNLOAD_ONLY
2
break;
case 'd':
'd'
prop_override_true(P_DOWNLOAD_ONLY);
prop_override_true(P_DOWNLOAD_ONLY);
prop_override_true
prop_override_true
(P_DOWNLOAD_ONLY)
P_DOWNLOAD_ONLY
P_DOWNLOAD_ONLY
break;
case LF('D', 'T'):
LF('D', 'T')
LF
LF
'D'
'T'
dscript = bsd_optarg;
dscript = bsd_optarg
dscript
dscript
bsd_optarg
bsd_optarg
break;
case 'E':
'E'
prop_put_long(P_STRICT_ERROR, 1);
prop_put_long(P_STRICT_ERROR, 1)
prop_put_long
prop_put_long
P_STRICT_ERROR
P_STRICT_ERROR
1
break;
case 'I':
'I'
prop_override_str(P_IDENTITY_HASH, bsd_optarg);
prop_override_str(P_IDENTITY_HASH, bsd_optarg)
prop_override_str
prop_override_str
P_IDENTITY_HASH
P_IDENTITY_HASH
bsd_optarg
bsd_optarg
break;
case 'L':
'L'
{		    char buf[1024];		    snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());		    prop_override_str(P_LOG_FILE, buf);		    prop_override_ulong(P_LOG_FILE_TEMP, 1);		}
char buf[1024];
char buf[1024];
char
buf[1024]
buf
[1024]
1024
snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid());
snprintf(buf, 1024, "%s.%lu.log",			       prop_get_str(P_APP), (unsigned long)getpid())
snprintf
snprintf
buf
buf
1024
"%s.%lu.log"
prop_get_str(P_APP)
prop_get_str
prop_get_str
P_APP
P_APP
(unsigned long)getpid()
unsigned long
unsigned long

getpid()
getpid
getpid
prop_override_str(P_LOG_FILE, buf);
prop_override_str(P_LOG_FILE, buf)
prop_override_str
prop_override_str
P_LOG_FILE
P_LOG_FILE
buf
buf
prop_override_ulong(P_LOG_FILE_TEMP, 1);
prop_override_ulong(P_LOG_FILE_TEMP, 1)
prop_override_ulong
prop_override_ulong
P_LOG_FILE_TEMP
P_LOG_FILE_TEMP
1
break;
case LF('L', 'T'):
LF('L', 'T')
LF
LF
'L'
'T'
tee = 1;
tee = 1
tee
tee
1
break;
case LF('L', 'S'):
LF('L', 'S')
LF
LF
'L'
'S'
prop_override_ulong(P_LOG_TIME_STAMP, 1);
prop_override_ulong(P_LOG_TIME_STAMP, 1)
prop_override_ulong
prop_override_ulong
P_LOG_TIME_STAMP
P_LOG_TIME_STAMP
1
break;
case 'l':
'l'
{		    CS lbuf;		    if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }		    if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }		}
CS lbuf;
CS lbuf;
CS
CS
lbuf
lbuf
if (*bsd_optarg == ':') {			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }
*bsd_optarg == ':'
*bsd_optarg
bsd_optarg
bsd_optarg
':'
{			prop_override_ulong(P_LOG_TIME_STAMP, 1);			bsd_optarg++;		    }
prop_override_ulong(P_LOG_TIME_STAMP, 1);
prop_override_ulong(P_LOG_TIME_STAMP, 1)
prop_override_ulong
prop_override_ulong
P_LOG_TIME_STAMP
P_LOG_TIME_STAMP
1
bsd_optarg++;
bsd_optarg++
bsd_optarg
bsd_optarg
if (putil_is_absolute(bsd_optarg)) {			prop_override_str(P_LOG_FILE, bsd_optarg);		    } else if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }
putil_is_absolute(bsd_optarg)
putil_is_absolute
putil_is_absolute
(bsd_optarg)
bsd_optarg
bsd_optarg
{			prop_override_str(P_LOG_FILE, bsd_optarg);		    }
prop_override_str(P_LOG_FILE, bsd_optarg);
prop_override_str(P_LOG_FILE, bsd_optarg)
prop_override_str
prop_override_str
P_LOG_FILE
P_LOG_FILE
bsd_optarg
bsd_optarg
if ((lbuf = putil_realpath(bsd_optarg, 1))) {			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    } else {			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }
(lbuf = putil_realpath(bsd_optarg, 1))
lbuf = putil_realpath(bsd_optarg, 1)
lbuf
lbuf
putil_realpath(bsd_optarg, 1)
putil_realpath
putil_realpath
bsd_optarg
bsd_optarg
1
{			prop_override_str(P_LOG_FILE, lbuf);			putil_free(lbuf);		    }
prop_override_str(P_LOG_FILE, lbuf);
prop_override_str(P_LOG_FILE, lbuf)
prop_override_str
prop_override_str
P_LOG_FILE
P_LOG_FILE
lbuf
lbuf
putil_free(lbuf);
putil_free(lbuf)
putil_free
putil_free
lbuf
lbuf
{			putil_syserr(0, bsd_optarg);			prop_override_str(P_LOG_FILE, bsd_optarg);		    }
putil_syserr(0, bsd_optarg);
putil_syserr(0, bsd_optarg)
putil_syserr
putil_syserr
0
bsd_optarg
bsd_optarg
prop_override_str(P_LOG_FILE, bsd_optarg);
prop_override_str(P_LOG_FILE, bsd_optarg)
prop_override_str
prop_override_str
P_LOG_FILE
P_LOG_FILE
bsd_optarg
bsd_optarg
break;
case 'F':
'F'
prop_override_str(P_MAKE_FILE, bsd_optarg);
prop_override_str(P_MAKE_FILE, bsd_optarg)
prop_override_str
prop_override_str
P_MAKE_FILE
P_MAKE_FILE
bsd_optarg
bsd_optarg
break;
case 'G':
'G'
prop_override_true(P_GIT);
prop_override_true(P_GIT);
prop_override_true
prop_override_true
(P_GIT)
P_GIT
P_GIT
no_server = 1;
no_server = 1
no_server
no_server
1
break;
case 'M':
'M'
if (!bsd_optarg || !strcmp(bsd_optarg, "D")) {		    prop_override_str(P_MAKE_DEPENDS, "d");		} else {		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}
!bsd_optarg || !strcmp(bsd_optarg, "D")
!bsd_optarg
bsd_optarg
bsd_optarg
!strcmp(bsd_optarg, "D")
strcmp(bsd_optarg, "D")
strcmp
strcmp
bsd_optarg
bsd_optarg
"D"
{		    prop_override_str(P_MAKE_DEPENDS, "d");		}
prop_override_str(P_MAKE_DEPENDS, "d");
prop_override_str(P_MAKE_DEPENDS, "d")
prop_override_str
prop_override_str
P_MAKE_DEPENDS
P_MAKE_DEPENDS
"d"
{		    prop_override_str(P_MAKE_DEPENDS, bsd_optarg);		}
prop_override_str(P_MAKE_DEPENDS, bsd_optarg);
prop_override_str(P_MAKE_DEPENDS, bsd_optarg)
prop_override_str
prop_override_str
P_MAKE_DEPENDS
P_MAKE_DEPENDS
bsd_optarg
bsd_optarg
break;
case 'm':
'm'
prop_override_true(P_MEMBERS_ONLY);
prop_override_true(P_MEMBERS_ONLY);
prop_override_true
prop_override_true
(P_MEMBERS_ONLY)
P_MEMBERS_ONLY
P_MEMBERS_ONLY
break;
case 'o':
'o'
no_server = 1;
no_server = 1
no_server
no_server
1
case 'O':
'O'
if (!bsd_optarg || !strcmp(bsd_optarg, "@")) {		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		} else {		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}
!bsd_optarg || !strcmp(bsd_optarg, "@")
!bsd_optarg
bsd_optarg
bsd_optarg
!strcmp(bsd_optarg, "@")
strcmp(bsd_optarg, "@")
strcmp
strcmp
bsd_optarg
bsd_optarg
"@"
{		    prop_override_str(P_OUTPUT_FILE, DEVNULL);		}
prop_override_str(P_OUTPUT_FILE, DEVNULL);
prop_override_str(P_OUTPUT_FILE, DEVNULL)
prop_override_str
prop_override_str
P_OUTPUT_FILE
P_OUTPUT_FILE
DEVNULL
DEVNULL
{		    prop_override_str(P_OUTPUT_FILE, bsd_optarg);		}
prop_override_str(P_OUTPUT_FILE, bsd_optarg);
prop_override_str(P_OUTPUT_FILE, bsd_optarg)
prop_override_str
prop_override_str
P_OUTPUT_FILE
P_OUTPUT_FILE
bsd_optarg
bsd_optarg
break;
case 'p':
'p'
prop_override_str(P_PROJECT_NAME, bsd_optarg);
prop_override_str(P_PROJECT_NAME, bsd_optarg)
prop_override_str
prop_override_str
P_PROJECT_NAME
P_PROJECT_NAME
bsd_optarg
bsd_optarg
break;
case 'P':
'P'
if (!(pager = getenv("PAGER"))) {		    pager = "less";		}
!(pager = getenv("PAGER"))
(pager = getenv("PAGER"))
pager = getenv("PAGER")
pager
pager
getenv("PAGER")
getenv
getenv
"PAGER"
{		    pager = "less";		}
pager = "less";
pager = "less"
pager
pager
"less"
break;
case LF('P', '%'):
LF('P', '%')
LF
LF
'P'
'%'
putil_putenv("LD_PROFILE=" AUDITOR);
break;
case 'Q':
'Q'
prop_override_str(P_SERVER_LOG_LEVEL, "WARN");
prop_override_str(P_SERVER_LOG_LEVEL, "WARN")
prop_override_str
prop_override_str
P_SERVER_LOG_LEVEL
P_SERVER_LOG_LEVEL
"WARN"
case 'q':
'q'
QuietMode = 1;
QuietMode = 1
QuietMode
QuietMode
1
vb_addstr("-");
vb_addstr("-")
vb_addstr
vb_addstr
"-"
break;
case 'R':
'R'
prop_override_true(P_REUSE_ROADMAP);
prop_override_true(P_REUSE_ROADMAP);
prop_override_true
prop_override_true
(P_REUSE_ROADMAP)
P_REUSE_ROADMAP
P_REUSE_ROADMAP
prop_unset(P_DOWNLOAD_ONLY, 0);
prop_unset(P_DOWNLOAD_ONLY, 0)
prop_unset
prop_unset
P_DOWNLOAD_ONLY
P_DOWNLOAD_ONLY
0
prop_put_ulong(P_DOWNLOAD_ONLY, 2);
prop_put_ulong(P_DOWNLOAD_ONLY, 2)
prop_put_ulong
prop_put_ulong
P_DOWNLOAD_ONLY
P_DOWNLOAD_ONLY
2
case 'r':
'r'
prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);
prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME)
prop_override_str
prop_override_str
P_ROADMAPFILE
P_ROADMAPFILE
ROADMAP_DEFAULT_NAME
ROADMAP_DEFAULT_NAME
prop_override_true(P_LEAVE_ROADMAP);
prop_override_true(P_LEAVE_ROADMAP);
prop_override_true
prop_override_true
(P_LEAVE_ROADMAP)
P_LEAVE_ROADMAP
P_LEAVE_ROADMAP
break;
case LF('R', 'L'):
LF('R', 'L')
LF
LF
'R'
'L'
if ((rc = http_restart())) {		    exit(rc);		}
(rc = http_restart())
rc = http_restart()
rc
rc
http_restart()
http_restart
http_restart
{		    exit(rc);		}
exit(rc);
exit(rc)
exit
exit
rc
rc
break;
case 's':
's'
prop_override_str(P_SERVER, bsd_optarg);
prop_override_str(P_SERVER, bsd_optarg)
prop_override_str
prop_override_str
P_SERVER
P_SERVER
bsd_optarg
bsd_optarg
break;
case 'S':
'S'
prop_put_ulong(P_STRICT, 1);
prop_put_ulong(P_STRICT, 1)
prop_put_ulong
prop_put_ulong
P_STRICT
P_STRICT
1
prop_put_ulong(P_STRICT_DOWNLOAD, 1);
prop_put_ulong(P_STRICT_DOWNLOAD, 1)
prop_put_ulong
prop_put_ulong
P_STRICT_DOWNLOAD
P_STRICT_DOWNLOAD
1
prop_put_ulong(P_STRICT_UPLOAD, 1);
prop_put_ulong(P_STRICT_UPLOAD, 1)
prop_put_ulong
prop_put_ulong
P_STRICT_UPLOAD
P_STRICT_UPLOAD
1
break;
case LF('s', 'c'):
LF('s', 'c')
LF
LF
's'
'c'
redo_script = bsd_optarg;
redo_script = bsd_optarg
redo_script
redo_script
bsd_optarg
bsd_optarg
break;
case 't':
't'
prop_unset(P_PRINT_ELAPSED, 1);
prop_unset(P_PRINT_ELAPSED, 1)
prop_unset
prop_unset
P_PRINT_ELAPSED
P_PRINT_ELAPSED
1
prop_put_str(P_PRINT_ELAPSED, "-1");
prop_put_str(P_PRINT_ELAPSED, "-1")
prop_put_str
prop_put_str
P_PRINT_ELAPSED
P_PRINT_ELAPSED
"-1"
break;
case 'u':
'u'
prop_override_ulong(P_UPLOAD_ONLY, 1);
prop_override_ulong(P_UPLOAD_ONLY, 1)
prop_override_ulong
prop_override_ulong
P_UPLOAD_ONLY
P_UPLOAD_ONLY
1
break;
case 'U':
'U'
prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1);
prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1)
prop_override_ulong
prop_override_ulong
P_UNCOMPRESSED_TRANSFERS
P_UNCOMPRESSED_TRANSFERS
1
break;
case 'V':
'V'
prop_unexport(P_VERBOSITY, 1);
prop_unexport(P_VERBOSITY, 1)
prop_unexport
prop_unexport
P_VERBOSITY
P_VERBOSITY
1
case 'v':
'v'
vb_addstr(bsd_optarg);
vb_addstr(bsd_optarg);
vb_addstr
vb_addstr
(bsd_optarg)
bsd_optarg
bsd_optarg
break;
case LF('D', 'M'):
LF('D', 'M')
LF
LF
'D'
'M'
putil_die("no malloc debugger implemented");
putil_die("no malloc debugger implemented")
putil_die
putil_die
"no malloc debugger implemented"
break;
case LF('v', 'n'):
LF('v', 'n')
LF
LF
'v'
'n'
_print_version(bsd_optarg && bsd_optarg[0] == '+');
_print_version(bsd_optarg && bsd_optarg[0] == '+')
_print_version
_print_version
bsd_optarg && bsd_optarg[0] == '+'
bsd_optarg
bsd_optarg
bsd_optarg[0] == '+'
bsd_optarg[0]
bsd_optarg
bsd_optarg
0
'+'
exit(0);
exit(0)
exit
exit
0
break;
case 'w':
'w'
vb_addbit(VB_WHY);
vb_addbit(VB_WHY);
vb_addbit
vb_addbit
(VB_WHY)
VB_WHY
VB_WHY
break;
case 'W':
'W'
{		    CCS old;		    CS str;		    if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }		}
CCS old;
CCS old;
CCS
CCS
old
old
CS str;
CS str;
CS
CS
str
str
if ((old = prop_get_str(P_WFLAG))) {			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    } else {			prop_put_str(P_WFLAG, bsd_optarg);		    }
(old = prop_get_str(P_WFLAG))
old = prop_get_str(P_WFLAG)
old
old
prop_get_str(P_WFLAG)
prop_get_str
prop_get_str
P_WFLAG
P_WFLAG
{			asprintf(&str, "%s\n%s", old, bsd_optarg);			prop_override_str(P_WFLAG, str);			putil_free(str);		    }
asprintf(&str, "%s\n%s", old, bsd_optarg);
asprintf(&str, "%s\n%s", old, bsd_optarg)
asprintf
asprintf
&str
str
str
"%s\n%s"
old
old
bsd_optarg
bsd_optarg
prop_override_str(P_WFLAG, str);
prop_override_str(P_WFLAG, str)
prop_override_str
prop_override_str
P_WFLAG
P_WFLAG
str
str
putil_free(str);
putil_free(str)
putil_free
putil_free
str
str
{			prop_put_str(P_WFLAG, bsd_optarg);		    }
prop_put_str(P_WFLAG, bsd_optarg);
prop_put_str(P_WFLAG, bsd_optarg)
prop_put_str
prop_put_str
P_WFLAG
P_WFLAG
bsd_optarg
bsd_optarg
break;
case 'x':
'x'
vb_addbit(VB_EXEC);
vb_addbit(VB_EXEC);
vb_addbit
vb_addbit
(VB_EXEC)
VB_EXEC
VB_EXEC
break;
case 'X':
'X'
prop_override_true(P_EXECUTE_ONLY);
prop_override_true(P_EXECUTE_ONLY);
prop_override_true
prop_override_true
(P_EXECUTE_ONLY)
P_EXECUTE_ONLY
P_EXECUTE_ONLY
prop_put_ulong(P_PRINT_ELAPSED, 1);
prop_put_ulong(P_PRINT_ELAPSED, 1)
prop_put_ulong
prop_put_ulong
P_PRINT_ELAPSED
P_PRINT_ELAPSED
1
prop_unset(P_SERVER, 1);
prop_unset(P_SERVER, 1)
prop_unset
prop_unset
P_SERVER
P_SERVER
1
break;
case 'Y':
'Y'
prop_override_true(P_SYNCHRONOUS_TRANSFERS);
prop_override_true(P_SYNCHRONOUS_TRANSFERS);
prop_override_true
prop_override_true
(P_SYNCHRONOUS_TRANSFERS)
P_SYNCHRONOUS_TRANSFERS
P_SYNCHRONOUS_TRANSFERS
break;
case 'h':
'h'
_usage(0);
_usage(0)
_usage
_usage
0
break;
case LF('P','*'):
LF('P','*')
LF
LF
'P'
'*'
case 'H':
'H'
if (bsd_optarg && *bsd_optarg == '+') {		    proplevel = 1;		} else {		    proplevel = 0;		}
bsd_optarg && *bsd_optarg == '+'
bsd_optarg
bsd_optarg
*bsd_optarg == '+'
*bsd_optarg
bsd_optarg
bsd_optarg
'+'
{		    proplevel = 1;		}
proplevel = 1;
proplevel = 1
proplevel
proplevel
1
{		    proplevel = 0;		}
proplevel = 0;
proplevel = 0
proplevel
proplevel
0
break;
default:
_usage(1);
_usage(1)
_usage
_usage
1
argc -= bsd_optind;
argc -= bsd_optind
argc
argc
bsd_optind
bsd_optind
argv += bsd_optind;
argv += bsd_optind
argv
argv
bsd_optind
bsd_optind
if (tee) {	tee_into(prop_get_str(P_LOG_FILE));    }
tee
tee
{	tee_into(prop_get_str(P_LOG_FILE));    }
tee_into(prop_get_str(P_LOG_FILE));
tee_into(prop_get_str(P_LOG_FILE));
tee_into
tee_into
(prop_get_str(P_LOG_FILE))
prop_get_str(P_LOG_FILE)
prop_get_str
P_LOG_FILE
P_LOG_FILE
P_LOG_FILE


if (make_clean) {	_make_clean(argc, argv);    }
make_clean
make_clean
{	_make_clean(argc, argv);    }
_make_clean(argc, argv);
_make_clean(argc, argv)
_make_clean
_make_clean
argc
argc
argv
argv
if ((action = argv[0])) {	// Hack for typing ease: "make" is a synonym for "run make".	// Similarly, "ant" is a synonym for "run ant".	// And any word with non-alphanumeric chars must be a program to run.	if (strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")		// Windows only	    || !util_pathcmp(action, "ant")) {	    action = "run";	} else {	    argv++;	    argc--;	}    } else {	// The default command ...	action = "help";    }
(action = argv[0])
action = argv[0]
action
action
argv[0]
argv
argv
0
{	// Hack for typing ease: "make" is a synonym for "run make".	// Similarly, "ant" is a synonym for "run ant".	// And any word with non-alphanumeric chars must be a program to run.	if (strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")		// Windows only	    || !util_pathcmp(action, "ant")) {	    action = "run";	} else {	    argv++;	    argc--;	}    }
if (strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")		// Windows only	    || !util_pathcmp(action, "ant")) {	    action = "run";	} else {	    argv++;	    argc--;	}
strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")		// Windows only	    || !util_pathcmp(action, "ant")
strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")		// Windows only	    || !util_pathcmp(action, "msbuild")
strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")	    || !util_pathcmp(action, "vcbuild")
strpbrk(action, "/\\=+-")	    || strstr(action, "make")	    || !util_pathcmp(action, "sh")
strpbrk(action, "/\\=+-")	    || strstr(action, "make")
strpbrk(action, "/\\=+-")
strpbrk
strpbrk
action
action
"/\\=+-"
strstr(action, "make")
strstr
strstr
action
action
"make"
!util_pathcmp(action, "sh")
util_pathcmp(action, "sh")
util_pathcmp
util_pathcmp
action
action
"sh"
!util_pathcmp(action, "vcbuild")
util_pathcmp(action, "vcbuild")
util_pathcmp
util_pathcmp
action
action
"vcbuild"
!util_pathcmp(action, "msbuild")
util_pathcmp(action, "msbuild")
util_pathcmp
util_pathcmp
action
action
"msbuild"
!util_pathcmp(action, "ant")
util_pathcmp(action, "ant")
util_pathcmp
util_pathcmp
action
action
"ant"
{	    action = "run";	}
action = "run";
action = "run"
action
action
"run"
{	    argv++;	    argc--;	}
argv++;
argv++
argv
argv
argc--;
argc--
argc
argc
{	// The default command ...	action = "help";    }
action = "help";
action = "help"
action
action
"help"
if (!prop_has_value(P_PROJECT_NAME)) {	CCS pbase;	CS pjname, ptr, dash;	pbase = prop_get_str(P_BASE_DIR);	if (pbase && (pjname = putil_basename(pbase)) && *pjname) {	    ptr = putil_strdup(pjname);	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }	    prop_put_str(P_PROJECT_NAME, ptr);	    putil_free(ptr);	}    }
!prop_has_value(P_PROJECT_NAME)
prop_has_value(P_PROJECT_NAME)
prop_has_value
prop_has_value
P_PROJECT_NAME
P_PROJECT_NAME
{	CCS pbase;	CS pjname, ptr, dash;	pbase = prop_get_str(P_BASE_DIR);	if (pbase && (pjname = putil_basename(pbase)) && *pjname) {	    ptr = putil_strdup(pjname);	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }	    prop_put_str(P_PROJECT_NAME, ptr);	    putil_free(ptr);	}    }
CCS pbase;
CCS pbase;
CCS
CCS
pbase
pbase
CS pjname, ptr, dash;
CS pjname, ptr, dash;
CS
CS
pjname
pjname
ptr
ptr
dash
dash
pbase = prop_get_str(P_BASE_DIR);
pbase = prop_get_str(P_BASE_DIR)
pbase
pbase
prop_get_str(P_BASE_DIR)
prop_get_str
prop_get_str
P_BASE_DIR
P_BASE_DIR
if (pbase && (pjname = putil_basename(pbase)) && *pjname) {	    ptr = putil_strdup(pjname);	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }	    prop_put_str(P_PROJECT_NAME, ptr);	    putil_free(ptr);	}
pbase && (pjname = putil_basename(pbase)) && *pjname
pbase && (pjname = putil_basename(pbase))
pbase
pbase
(pjname = putil_basename(pbase))
pjname = putil_basename(pbase)
pjname
pjname
putil_basename(pbase)
putil_basename
putil_basename
pbase
pbase
*pjname
pjname
pjname
{	    ptr = putil_strdup(pjname);	    if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }	    prop_put_str(P_PROJECT_NAME, ptr);	    putil_free(ptr);	}
ptr = putil_strdup(pjname);
ptr = putil_strdup(pjname)
ptr
ptr
putil_strdup(pjname)
putil_strdup
putil_strdup
pjname
pjname
if ((dash = strchr(ptr, '-')) && ISDIGIT(dash[1])) {		*dash = '\0';	    }
(dash = strchr(ptr, '-')) && ISDIGIT(dash[1])
(dash = strchr(ptr, '-'))
dash = strchr(ptr, '-')
dash
dash
strchr(ptr, '-')
strchr
strchr
ptr
ptr
'-'
ISDIGIT(dash[1])
ISDIGIT
ISDIGIT
dash[1]
dash
dash
1
{		*dash = '\0';	    }
*dash = '\0';
*dash = '\0'
*dash
dash
dash
'\0'
prop_put_str(P_PROJECT_NAME, ptr);
prop_put_str(P_PROJECT_NAME, ptr)
prop_put_str
prop_put_str
P_PROJECT_NAME
P_PROJECT_NAME
ptr
ptr
putil_free(ptr);
putil_free(ptr)
putil_free
putil_free
ptr
ptr
if (no_server) {	prop_unset(P_SERVER, 1);    }
no_server
no_server
{	prop_unset(P_SERVER, 1);    }
prop_unset(P_SERVER, 1);
prop_unset(P_SERVER, 1)
prop_unset
prop_unset
P_SERVER
P_SERVER
1
if (prop_has_value(P_MAKE_FILE) && !prop_has_value(P_MAKE_DEPENDS)) {	prop_override_ulong(P_UPLOAD_ONLY, 1);    }
prop_has_value(P_MAKE_FILE) && !prop_has_value(P_MAKE_DEPENDS)
prop_has_value(P_MAKE_FILE)
prop_has_value
prop_has_value
P_MAKE_FILE
P_MAKE_FILE
!prop_has_value(P_MAKE_DEPENDS)
prop_has_value(P_MAKE_DEPENDS)
prop_has_value
prop_has_value
P_MAKE_DEPENDS
P_MAKE_DEPENDS
{	prop_override_ulong(P_UPLOAD_ONLY, 1);    }
prop_override_ulong(P_UPLOAD_ONLY, 1);
prop_override_ulong(P_UPLOAD_ONLY, 1)
prop_override_ulong
prop_override_ulong
P_UPLOAD_ONLY
P_UPLOAD_ONLY
1
if (pager ||	(streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER)))) {	int pfd[2];	pid_t pid;	// Allow indirection through standard $PAGER EV.	if (*pager == '$') {	    if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }	}	fflush(NULL);	if (pipe(pfd) < 0) {	    putil_syserr(2, "pipe");	}	// Note that the *parent* process becomes the pager.	if ((pid = fork()) == 0) {	    // Child	    close(pfd[0]);	    if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }	} else if (pid > 0) {	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	} else {	    putil_syserr(2, "fork");	}    }
pager ||	(streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER)))
pager
pager
(streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER)))
streq(action, "man") && (pager = prop_get_str(P_DOC_PAGER))
streq(action, "man")
streq
streq
action
action
"man"
(pager = prop_get_str(P_DOC_PAGER))
pager = prop_get_str(P_DOC_PAGER)
pager
pager
prop_get_str(P_DOC_PAGER)
prop_get_str
prop_get_str
P_DOC_PAGER
P_DOC_PAGER
{	int pfd[2];	pid_t pid;	// Allow indirection through standard $PAGER EV.	if (*pager == '$') {	    if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }	}	fflush(NULL);	if (pipe(pfd) < 0) {	    putil_syserr(2, "pipe");	}	// Note that the *parent* process becomes the pager.	if ((pid = fork()) == 0) {	    // Child	    close(pfd[0]);	    if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }	} else if (pid > 0) {	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	} else {	    putil_syserr(2, "fork");	}    }
int pfd[2];
int pfd[2];
int
pfd[2]
pfd
[2]
2
pid_t pid;
pid_t pid;
pid_t
pid_t
pid
pid
if (*pager == '$') {	    if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }	}
*pager == '$'
*pager
pager
pager
'$'
{	    if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }	}
if (!(pager = getenv(pager + 1))) {		pager = prop_get_str(P_DOC_PAGER);	    }
!(pager = getenv(pager + 1))
(pager = getenv(pager + 1))
pager = getenv(pager + 1)
pager
pager
getenv(pager + 1)
getenv
getenv
pager + 1
pager
pager
1
{		pager = prop_get_str(P_DOC_PAGER);	    }
pager = prop_get_str(P_DOC_PAGER);
pager = prop_get_str(P_DOC_PAGER)
pager
pager
prop_get_str(P_DOC_PAGER)
prop_get_str
prop_get_str
P_DOC_PAGER
P_DOC_PAGER
fflush(NULL);
fflush(NULL);
fflush
fflush
(NULL)
NULL
NULL
if (pipe(pfd) < 0) {	    putil_syserr(2, "pipe");	}
pipe(pfd) < 0
pipe(pfd)
pipe
pipe
pfd
pfd
0
{	    putil_syserr(2, "pipe");	}
putil_syserr(2, "pipe");
putil_syserr(2, "pipe")
putil_syserr
putil_syserr
2
"pipe"
if ((pid = fork()) == 0) {	    // Child	    close(pfd[0]);	    if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }	} else if (pid > 0) {	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	} else {	    putil_syserr(2, "fork");	}
(pid = fork()) == 0
(pid = fork())
pid = fork()
pid
pid
fork()
fork
fork
0
{	    // Child	    close(pfd[0]);	    if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }	}
close(pfd[0]);
close(pfd[0])
close
close
pfd[0]
pfd
pfd
0
if (pfd[1] != STDOUT_FILENO) {		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }
pfd[1] != STDOUT_FILENO
pfd[1]
pfd
pfd
1
STDOUT_FILENO
STDOUT_FILENO
{		dup2(pfd[1], STDOUT_FILENO);		close(pfd[1]);	    }
dup2(pfd[1], STDOUT_FILENO);
dup2(pfd[1], STDOUT_FILENO)
dup2
dup2
pfd[1]
pfd
pfd
1
STDOUT_FILENO
STDOUT_FILENO
close(pfd[1]);
close(pfd[1])
close
close
pfd[1]
pfd
pfd
1
if (pid > 0) {	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	} else {	    putil_syserr(2, "fork");	}
pid > 0
pid
pid
0
{	    // Parent	    close(pfd[1]);	    if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }	    execlp(pager, pager, (char *)0);	    putil_syserr(0, pager);	    _exit(2);	}
close(pfd[1]);
close(pfd[1])
close
close
pfd[1]
pfd
pfd
1
if (pfd[0] != STDIN_FILENO) {		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }
pfd[0] != STDIN_FILENO
pfd[0]
pfd
pfd
0
STDIN_FILENO
STDIN_FILENO
{		dup2(pfd[0], STDIN_FILENO);		close(pfd[0]);	    }
dup2(pfd[0], STDIN_FILENO);
dup2(pfd[0], STDIN_FILENO)
dup2
dup2
pfd[0]
pfd
pfd
0
STDIN_FILENO
STDIN_FILENO
close(pfd[0]);
close(pfd[0])
close
close
pfd[0]
pfd
pfd
0
execlp(pager, pager, (char *)0);
execlp(pager, pager, (char *)0)
execlp
execlp
pager
pager
pager
pager
(char *)0
char *
char
*
*
0
putil_syserr(0, pager);
putil_syserr(0, pager)
putil_syserr
putil_syserr
0
pager
pager
_exit(2);
_exit(2)
_exit
_exit
2
{	    putil_syserr(2, "fork");	}
putil_syserr(2, "fork");
putil_syserr(2, "fork")
putil_syserr
putil_syserr
2
"fork"
if (prop_has_value(P_SERVER)) {	const char *svr;	svr = prop_get_str(P_SERVER);	if (!strchr(svr, ':')) {	    char buf[256];	    if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }	    prop_override_str(P_SERVER, buf);	}    }
prop_has_value(P_SERVER)
prop_has_value
prop_has_value
(P_SERVER)
P_SERVER
P_SERVER
{	const char *svr;	svr = prop_get_str(P_SERVER);	if (!strchr(svr, ':')) {	    char buf[256];	    if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }	    prop_override_str(P_SERVER, buf);	}    }
const char *svr;
const char *svr;
const char
*svr
*
svr
svr = prop_get_str(P_SERVER);
svr = prop_get_str(P_SERVER)
svr
svr
prop_get_str(P_SERVER)
prop_get_str
prop_get_str
P_SERVER
P_SERVER
if (!strchr(svr, ':')) {	    char buf[256];	    if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }	    prop_override_str(P_SERVER, buf);	}
!strchr(svr, ':')
strchr(svr, ':')
strchr
strchr
svr
svr
':'
{	    char buf[256];	    if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }	    prop_override_str(P_SERVER, buf);	}
char buf[256];
char buf[256];
char
buf[256]
buf
[256]
256
if (isdigit((int)*svr)) {		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    } else {		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }
isdigit((int)*svr)
isdigit
isdigit
(int)*svr
int
int

*svr
svr
svr
{		snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);	    }
snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr);
snprintf(buf, sizeof(buf) - 1, "localhost:%s", svr)
snprintf
snprintf
buf
buf
sizeof(buf) - 1
sizeof(buf)
(buf)
buf
buf
1
"localhost:%s"
svr
svr
{		snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);	    }
snprintf(buf, sizeof(buf) - 1, "%s:8080", svr);
snprintf(buf, sizeof(buf) - 1, "%s:8080", svr)
snprintf
snprintf
buf
buf
sizeof(buf) - 1
sizeof(buf)
(buf)
buf
buf
1
"%s:8080"
svr
svr
prop_override_str(P_SERVER, buf);
prop_override_str(P_SERVER, buf)
prop_override_str
prop_override_str
P_SERVER
P_SERVER
buf
buf
if (proplevel >= 0) {	prop_help(proplevel, vb_bitmatch(VB_STD), exe);	exit(0);    }
proplevel >= 0
proplevel
proplevel
0
{	prop_help(proplevel, vb_bitmatch(VB_STD), exe);	exit(0);    }
prop_help(proplevel, vb_bitmatch(VB_STD), exe);
prop_help(proplevel, vb_bitmatch(VB_STD), exe)
prop_help
prop_help
proplevel
proplevel
vb_bitmatch(VB_STD)
vb_bitmatch
vb_bitmatch
VB_STD
VB_STD
exe
exe
exit(0);
exit(0)
exit
exit
0
http_init();
http_init()
http_init
http_init
if ((ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED))) {	StartTime = time(NULL);	atexit(_print_elapsed_time);    }
(ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED))
ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED)
ElapsedMinimum
ElapsedMinimum
prop_get_long(P_PRINT_ELAPSED)
prop_get_long
prop_get_long
P_PRINT_ELAPSED
P_PRINT_ELAPSED
{	StartTime = time(NULL);	atexit(_print_elapsed_time);    }
StartTime = time(NULL);
StartTime = time(NULL)
StartTime
StartTime
time(NULL)
time
time
NULL
NULL
atexit(_print_elapsed_time);
atexit(_print_elapsed_time);
atexit
atexit
(_print_elapsed_time)
_print_elapsed_time
_print_elapsed_time
if (streq(action, "run")) {	CCS cwd = NULL;	CCS logfile = NULL;	CCS rmap;	CCS logprop;	if (!argv || !*argv) {	    _usage(1);	}	// The auditor ignores anything it considers to be a temp	// file, which can cause terribly confusing behavior if	// run on a project rooted in (say) /tmp. It's a natural	// tendency for someone setting up a quick test case to	// put it in /tmp and then spend hours trying to figure	// out why it's behaving strangely. To help avoid this	// we disallow the auditor from running when the CWD is	// one we consider a repository for temp files.	if ((cwd = util_get_cwd())) {	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }	} else {	    putil_syserr(2, "util_get_cwd()");	}	// These values are pre-exported to reserve env-block space.	// To not do so would risk a dangerous realloc of the 'environ'	// pointer within an unsuspecting host process.	// Reserve a block of env space for the current cmd depth.	prop_put_ulong(P_DEPTH, 0);	// Reserve a block of env space for the parent cmd id.	// Seed it with our pid.	prop_put_ulong(P_PCMDID, getpid());	// Reserve a block of env space for the parent cmd code.	prop_put_str(P_PCCODE, CSV_NULL_FIELD);	// This needs to be present in the env from the start even when off.	// But being a boolean it only needs room for one digit.	prop_put_ulong(P_AGGREGATED_SUBCMD, 0);	// Allow the cmd to be preceded by EV's in the manner of the shell.	while (strchr(*argv, '=')) {	    putil_putenv(*argv++);	}	// Determine whether the user requested a log file and	// apply the %u, %p, etc. formats to it if so.	if ((logprop = prop_get_str(P_LOG_FILE))) {	    (void)util_substitute_params(logprop, &logfile);	    // In case it's present but unwriteable.	    if (logfile)		(void)unlink(logfile);	}	// Work out the name of the roadmap file and store the result.	if ((rmap = prop_get_str(P_ROADMAPFILE))) {	    if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }	} else if (prop_has_value(P_SERVER)) {	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}	if (prop_has_value(P_SERVER)) {	    // Get the new roadmap.	    if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }	    // Start a session. We do this *after* getting the roadmap	    // to avoid session expiration during roadmap-getting.	    // That would only be a risk for a very slow roadmap or a	    // very fast session expiration but it could happen.	    if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }	}#if defined(_WIN32)	/* TODO */#else	if (redo_script) {	    FILE *fp;	    if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }	}#endif	// For systems supporting DTrace: run the cmd with the specified	// dtrace script.	if (dscript) {	    CS *dargv;	    dargv = putil_malloc(sizeof(*dargv) * 6);	    dargv[0] = "dtrace";	    dargv[1] = "-s";	    dargv[2] = dscript;	    dargv[3] = "-c";	    dargv[4] = util_requote_argv(argv);	    dargv[5] = NULL;	    argv = dargv;	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);	}	make_init(exe);	if (prop_is_true(P_GIT)) {	    git_init(exe);	}	// RUN AND AUDIT THE COMMAND.	rc = run_cmd(exe, (CS *)argv, logfile);	putil_free(logfile);	if (prop_is_true(P_GIT)) {	    git_fini();	}	make_fini();	// If using a temp logfile, remove it now.	if (prop_is_true(P_LOG_FILE_TEMP)) {	    unlink(prop_get_str(P_LOG_FILE));	}	putil_free(cwd);    } else if (streq(action, "roadmap")) {	// Useful while testing roadmaps. May be dispensed with later.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	mon_get_roadmap();    } else if (streq(action, "shop")) {	int cflag = 0;	int gflag = 0;	ca_o ca;	CCS rwd;	// This special action is useful for internal tests of shopping	// capabilities without changing server state, using a saved	// roadmap file.	while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}	if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}	// Assume the pre-existence of a roadmap with the default name.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	ca = ca_new();	ca_set_pccode(ca, CSV_NULL_FIELD);	ca_set_prog(ca, prop_get_str(P_PROGNAME));	ca_set_host(ca, "localhost");	ca_set_cmdid(ca, getpid());	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));	ca_set_rwd(ca, rwd = util_get_rwd());	putil_free(rwd);	ca_set_started(ca, 1);	// We almost always want these while debugging...	vb_addbit(VB_SHOP);	vb_addbit(VB_WHY);	shop_init();	if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}	shop_fini();    } else {	rc = do_action(action, argc, argv);    }
streq(action, "run")
streq
streq
action
action
"run"
{	CCS cwd = NULL;	CCS logfile = NULL;	CCS rmap;	CCS logprop;	if (!argv || !*argv) {	    _usage(1);	}	// The auditor ignores anything it considers to be a temp	// file, which can cause terribly confusing behavior if	// run on a project rooted in (say) /tmp. It's a natural	// tendency for someone setting up a quick test case to	// put it in /tmp and then spend hours trying to figure	// out why it's behaving strangely. To help avoid this	// we disallow the auditor from running when the CWD is	// one we consider a repository for temp files.	if ((cwd = util_get_cwd())) {	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }	} else {	    putil_syserr(2, "util_get_cwd()");	}	// These values are pre-exported to reserve env-block space.	// To not do so would risk a dangerous realloc of the 'environ'	// pointer within an unsuspecting host process.	// Reserve a block of env space for the current cmd depth.	prop_put_ulong(P_DEPTH, 0);	// Reserve a block of env space for the parent cmd id.	// Seed it with our pid.	prop_put_ulong(P_PCMDID, getpid());	// Reserve a block of env space for the parent cmd code.	prop_put_str(P_PCCODE, CSV_NULL_FIELD);	// This needs to be present in the env from the start even when off.	// But being a boolean it only needs room for one digit.	prop_put_ulong(P_AGGREGATED_SUBCMD, 0);	// Allow the cmd to be preceded by EV's in the manner of the shell.	while (strchr(*argv, '=')) {	    putil_putenv(*argv++);	}	// Determine whether the user requested a log file and	// apply the %u, %p, etc. formats to it if so.	if ((logprop = prop_get_str(P_LOG_FILE))) {	    (void)util_substitute_params(logprop, &logfile);	    // In case it's present but unwriteable.	    if (logfile)		(void)unlink(logfile);	}	// Work out the name of the roadmap file and store the result.	if ((rmap = prop_get_str(P_ROADMAPFILE))) {	    if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }	} else if (prop_has_value(P_SERVER)) {	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}	if (prop_has_value(P_SERVER)) {	    // Get the new roadmap.	    if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }	    // Start a session. We do this *after* getting the roadmap	    // to avoid session expiration during roadmap-getting.	    // That would only be a risk for a very slow roadmap or a	    // very fast session expiration but it could happen.	    if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }	}#if defined(_WIN32)	/* TODO */#else	if (redo_script) {	    FILE *fp;	    if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }	}#endif	// For systems supporting DTrace: run the cmd with the specified	// dtrace script.	if (dscript) {	    CS *dargv;	    dargv = putil_malloc(sizeof(*dargv) * 6);	    dargv[0] = "dtrace";	    dargv[1] = "-s";	    dargv[2] = dscript;	    dargv[3] = "-c";	    dargv[4] = util_requote_argv(argv);	    dargv[5] = NULL;	    argv = dargv;	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);	}	make_init(exe);	if (prop_is_true(P_GIT)) {	    git_init(exe);	}	// RUN AND AUDIT THE COMMAND.	rc = run_cmd(exe, (CS *)argv, logfile);	putil_free(logfile);	if (prop_is_true(P_GIT)) {	    git_fini();	}	make_fini();	// If using a temp logfile, remove it now.	if (prop_is_true(P_LOG_FILE_TEMP)) {	    unlink(prop_get_str(P_LOG_FILE));	}	putil_free(cwd);    }
CCS cwd = NULL;
CCS cwd = NULL;
CCS
CCS
cwd = NULL
cwd
= NULL
NULL
NULL
CCS logfile = NULL;
CCS logfile = NULL;
CCS
CCS
logfile = NULL
logfile
= NULL
NULL
NULL
CCS rmap;
CCS rmap;
CCS
CCS
rmap
rmap
CCS logprop;
CCS logprop;
CCS
CCS
logprop
logprop
if (!argv || !*argv) {	    _usage(1);	}
!argv || !*argv
!argv
argv
argv
!*argv
*argv
argv
argv
{	    _usage(1);	}
_usage(1);
_usage(1)
_usage
_usage
1
if ((cwd = util_get_cwd())) {	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }	} else {	    putil_syserr(2, "util_get_cwd()");	}
(cwd = util_get_cwd())
cwd = util_get_cwd()
cwd
cwd
util_get_cwd()
util_get_cwd
util_get_cwd
{	    if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }	}
if (util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)) {		putil_die("illegal tmp working directory: %s", cwd);	    }
util_is_tmp(cwd) && !prop_is_true(P_EXECUTE_ONLY)
util_is_tmp(cwd)
util_is_tmp
util_is_tmp
cwd
cwd
!prop_is_true(P_EXECUTE_ONLY)
prop_is_true(P_EXECUTE_ONLY)
prop_is_true
prop_is_true
P_EXECUTE_ONLY
P_EXECUTE_ONLY
{		putil_die("illegal tmp working directory: %s", cwd);	    }
putil_die("illegal tmp working directory: %s", cwd);
putil_die("illegal tmp working directory: %s", cwd)
putil_die
putil_die
"illegal tmp working directory: %s"
cwd
cwd
{	    putil_syserr(2, "util_get_cwd()");	}
putil_syserr(2, "util_get_cwd()");
putil_syserr(2, "util_get_cwd()")
putil_syserr
putil_syserr
2
"util_get_cwd()"
prop_put_ulong(P_DEPTH, 0);
prop_put_ulong(P_DEPTH, 0)
prop_put_ulong
prop_put_ulong
P_DEPTH
P_DEPTH
0
prop_put_ulong(P_PCMDID, getpid());
prop_put_ulong(P_PCMDID, getpid())
prop_put_ulong
prop_put_ulong
P_PCMDID
P_PCMDID
getpid()
getpid
getpid
prop_put_str(P_PCCODE, CSV_NULL_FIELD);
prop_put_str(P_PCCODE, CSV_NULL_FIELD)
prop_put_str
prop_put_str
P_PCCODE
P_PCCODE
CSV_NULL_FIELD
CSV_NULL_FIELD
prop_put_ulong(P_AGGREGATED_SUBCMD, 0);
prop_put_ulong(P_AGGREGATED_SUBCMD, 0)
prop_put_ulong
prop_put_ulong
P_AGGREGATED_SUBCMD
P_AGGREGATED_SUBCMD
0
while (strchr(*argv, '=')) {	    putil_putenv(*argv++);	}
strchr(*argv, '=')
strchr
strchr
*argv
argv
argv
'='
{	    putil_putenv(*argv++);	}
putil_putenv(*argv++);
putil_putenv(*argv++)
putil_putenv
putil_putenv
*argv++
argv++
argv
argv
if ((logprop = prop_get_str(P_LOG_FILE))) {	    (void)util_substitute_params(logprop, &logfile);	    // In case it's present but unwriteable.	    if (logfile)		(void)unlink(logfile);	}
(logprop = prop_get_str(P_LOG_FILE))
logprop = prop_get_str(P_LOG_FILE)
logprop
logprop
prop_get_str(P_LOG_FILE)
prop_get_str
prop_get_str
P_LOG_FILE
P_LOG_FILE
{	    (void)util_substitute_params(logprop, &logfile);	    // In case it's present but unwriteable.	    if (logfile)		(void)unlink(logfile);	}
(void)util_substitute_params(logprop, &logfile);
(void)util_substitute_params(logprop, &logfile)
void
void

util_substitute_params(logprop, &logfile)
util_substitute_params
util_substitute_params
logprop
logprop
&logfile
logfile
logfile
if (logfile)		(void)unlink(logfile);
logfile
logfile
(void)unlink(logfile);
(void)unlink(logfile)
void
void

unlink(logfile)
unlink
unlink
logfile
logfile
if ((rmap = prop_get_str(P_ROADMAPFILE))) {	    if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }	} else if (prop_has_value(P_SERVER)) {	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}
(rmap = prop_get_str(P_ROADMAPFILE))
rmap = prop_get_str(P_ROADMAPFILE)
rmap
rmap
prop_get_str(P_ROADMAPFILE)
prop_get_str
prop_get_str
P_ROADMAPFILE
P_ROADMAPFILE
{	    if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }	}
if (!putil_is_absolute(rmap)) {		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }
!putil_is_absolute(rmap)
putil_is_absolute(rmap)
putil_is_absolute
putil_is_absolute
rmap
rmap
{		if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}	    }
if ((rmap = putil_realpath(rmap, 1))) {		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		} else {		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}
(rmap = putil_realpath(rmap, 1))
rmap = putil_realpath(rmap, 1)
rmap
rmap
putil_realpath(rmap, 1)
putil_realpath
putil_realpath
rmap
rmap
1
{		    prop_override_str(P_ROADMAPFILE, rmap);		    putil_free(rmap);		}
prop_override_str(P_ROADMAPFILE, rmap);
prop_override_str(P_ROADMAPFILE, rmap)
prop_override_str
prop_override_str
P_ROADMAPFILE
P_ROADMAPFILE
rmap
rmap
putil_free(rmap);
putil_free(rmap)
putil_free
putil_free
rmap
rmap
{		    putil_syserr(2, prop_get_str(P_ROADMAPFILE));		}
putil_syserr(2, prop_get_str(P_ROADMAPFILE));
putil_syserr(2, prop_get_str(P_ROADMAPFILE))
putil_syserr
putil_syserr
2
prop_get_str(P_ROADMAPFILE)
prop_get_str
prop_get_str
P_ROADMAPFILE
P_ROADMAPFILE
if (prop_has_value(P_SERVER)) {	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}
prop_has_value(P_SERVER)
prop_has_value
prop_has_value
(P_SERVER)
P_SERVER
P_SERVER
{	    rmap = tempnam(NULL, "rmap.");	    prop_put_str(P_ROADMAPFILE, rmap);	    putil_free(rmap);	}
rmap = tempnam(NULL, "rmap.");
rmap = tempnam(NULL, "rmap.")
rmap
rmap
tempnam(NULL, "rmap.")
tempnam
tempnam
NULL
NULL
"rmap."
prop_put_str(P_ROADMAPFILE, rmap);
prop_put_str(P_ROADMAPFILE, rmap)
prop_put_str
prop_put_str
P_ROADMAPFILE
P_ROADMAPFILE
rmap
rmap
putil_free(rmap);
putil_free(rmap)
putil_free
putil_free
rmap
rmap
if (prop_has_value(P_SERVER)) {	    // Get the new roadmap.	    if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }	    // Start a session. We do this *after* getting the roadmap	    // to avoid session expiration during roadmap-getting.	    // That would only be a risk for a very slow roadmap or a	    // very fast session expiration but it could happen.	    if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }	}
prop_has_value(P_SERVER)
prop_has_value
prop_has_value
(P_SERVER)
P_SERVER
P_SERVER
{	    // Get the new roadmap.	    if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }	    // Start a session. We do this *after* getting the roadmap	    // to avoid session expiration during roadmap-getting.	    // That would only be a risk for a very slow roadmap or a	    // very fast session expiration but it could happen.	    if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }	}
if (!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)) {		mon_get_roadmap();	    }
!prop_is_true(P_REUSE_ROADMAP) &&		    !prop_is_true(P_UPLOAD_ONLY)
!prop_is_true(P_REUSE_ROADMAP)
prop_is_true(P_REUSE_ROADMAP)
prop_is_true
prop_is_true
P_REUSE_ROADMAP
P_REUSE_ROADMAP
!prop_is_true(P_UPLOAD_ONLY)
prop_is_true(P_UPLOAD_ONLY)
prop_is_true
prop_is_true
P_UPLOAD_ONLY
P_UPLOAD_ONLY
{		mon_get_roadmap();	    }
mon_get_roadmap();
mon_get_roadmap()
mon_get_roadmap
mon_get_roadmap
if ((rc = mon_begin_session())) {		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }
(rc = mon_begin_session())
rc = mon_begin_session()
rc
rc
mon_begin_session()
mon_begin_session
mon_begin_session
{		putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));	    }
putil_die("can't get a session at %s",			  prop_get_str(P_SERVER));
putil_die("can't get a session at %s",			  prop_get_str(P_SERVER))
putil_die
putil_die
"can't get a session at %s"
prop_get_str(P_SERVER)
prop_get_str
prop_get_str
P_SERVER
P_SERVER
if (redo_script) {	    FILE *fp;	    if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }	}
redo_script
redo_script
{	    FILE *fp;	    if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }	}
FILE *fp;
FILE *fp;
FILE
FILE
*fp
*
fp
if (!(fp = fopen(redo_script, "w"))) {		putil_syserr(2, redo_script);	    } else {		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }
!(fp = fopen(redo_script, "w"))
(fp = fopen(redo_script, "w"))
fp = fopen(redo_script, "w")
fp
fp
fopen(redo_script, "w")
fopen
fopen
redo_script
redo_script
"w"
{		putil_syserr(2, redo_script);	    }
putil_syserr(2, redo_script);
putil_syserr(2, redo_script)
putil_syserr
putil_syserr
2
redo_script
redo_script
{		extern char **environ;		// Win32 declares this in stdlib.h		size_t plen;		char **pblock;		char **envp;		struct utsname sysdata;		// This is just to get a sorted environment list.		plen = prop_new_env_block_sizeA(environ);		pblock = (char **)alloca(plen);		memset(pblock, 0, plen);		(void)prop_custom_envA(pblock, environ);		fprintf(fp, "#!/bin/sh\n\n");		if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}		fprintf(fp, "# Original environment settings:\n");		for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}		fprintf(fp, "cd '%s' || exit 2\n", cwd);		fprintf(fp, "exec %s\n", util_requote_argv(argv));		(void)fchmod(fileno(fp), 0755);		(void)fclose(fp);		vb_printf(VB_STD, "redo script written to '%s'", redo_script);	    }
extern char **environ;
extern char **environ;
extern char
**environ
*
*
environ
size_t plen;
size_t plen;
size_t
size_t
plen
plen
char **pblock;
char **pblock;
char
**pblock
*
*
pblock
char **envp;
char **envp;
char
**envp
*
*
envp
struct utsname sysdata;
struct utsname sysdata;
struct utsname
utsname
sysdata
sysdata
plen = prop_new_env_block_sizeA(environ);
plen = prop_new_env_block_sizeA(environ)
plen
plen
prop_new_env_block_sizeA(environ)
prop_new_env_block_sizeA
prop_new_env_block_sizeA
environ
environ
pblock = (char **)alloca(plen);
pblock = (char **)alloca(plen)
pblock
pblock
(char **)alloca(plen)
char **
char
**
*
*
alloca(plen)
alloca
alloca
plen
plen
memset(pblock, 0, plen);
memset(pblock, 0, plen)
memset
memset
pblock
pblock
0
plen
plen
(void)prop_custom_envA(pblock, environ);
(void)prop_custom_envA(pblock, environ)
void
void

prop_custom_envA(pblock, environ)
prop_custom_envA
prop_custom_envA
pblock
pblock
environ
environ
fprintf(fp, "#!/bin/sh\n\n");
fprintf(fp, "#!/bin/sh\n\n")
fprintf
fprintf
fp
fp
"#!/bin/sh\n\n"
if (!putil_uname(&sysdata)) {		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}
!putil_uname(&sysdata)
putil_uname(&sysdata)
putil_uname
putil_uname
&sysdata
sysdata
sysdata
{		    fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);		}
fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine);
fprintf(fp, "# Original host: %s %s %s %s %s\n\n",			sysdata.sysname, sysdata.nodename, sysdata.release,			sysdata.version, sysdata.machine)
fprintf
fprintf
fp
fp
"# Original host: %s %s %s %s %s\n\n"
sysdata.sysname
sysdata
sysdata
sysname
sysdata.nodename
sysdata
sysdata
nodename
sysdata.release
sysdata
sysdata
release
sysdata.version
sysdata
sysdata
version
sysdata.machine
sysdata
sysdata
machine
fprintf(fp, "# Original environment settings:\n");
fprintf(fp, "# Original environment settings:\n")
fprintf
fprintf
fp
fp
"# Original environment settings:\n"
for (envp = pblock + 1; *envp; envp++) {		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}
envp = pblock + 1;
envp = pblock + 1
envp
envp
pblock + 1
pblock
pblock
1
*envp
envp
envp
envp++
envp
envp
{		    char *t;		    if (**envp == '_')			continue;		    fputs(": export ", fp);		    for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }		    fputc(*t++, fp);		    fprintf(fp, "'%s'\n", t);		}
char *t;
char *t;
char
*t
*
t
if (**envp == '_')			continue;
**envp == '_'
**envp
*envp
envp
envp
'_'
continue;
fputs(": export ", fp);
fputs(": export ", fp)
fputs
fputs
": export "
fp
fp
for (t = *envp; *t && *t != '='; t++) {			fputc(*t, fp);		    }
t = *envp;
t = *envp
t
t
*envp
envp
envp
*t && *t != '='
*t
t
t
*t != '='
*t
t
t
'='
t++
t
t
{			fputc(*t, fp);		    }
fputc(*t, fp);
fputc(*t, fp)
fputc
fputc
*t
t
t
fp
fp
fputc(*t++, fp);
fputc(*t++, fp)
fputc
fputc
*t++
t++
t
t
fp
fp
fprintf(fp, "'%s'\n", t);
fprintf(fp, "'%s'\n", t)
fprintf
fprintf
fp
fp
"'%s'\n"
t
t
fprintf(fp, "cd '%s' || exit 2\n", cwd);
fprintf(fp, "cd '%s' || exit 2\n", cwd)
fprintf
fprintf
fp
fp
"cd '%s' || exit 2\n"
cwd
cwd
fprintf(fp, "exec %s\n", util_requote_argv(argv));
fprintf(fp, "exec %s\n", util_requote_argv(argv))
fprintf
fprintf
fp
fp
"exec %s\n"
util_requote_argv(argv)
util_requote_argv
util_requote_argv
argv
argv
(void)fchmod(fileno(fp), 0755);
(void)fchmod(fileno(fp), 0755)
void
void

fchmod(fileno(fp), 0755)
fchmod
fchmod
fileno(fp)
fileno
fileno
fp
fp
0755
(void)fclose(fp);
(void)fclose(fp)
void
void

fclose(fp)
fclose
fclose
fp
fp
vb_printf(VB_STD, "redo script written to '%s'", redo_script);
vb_printf(VB_STD, "redo script written to '%s'", redo_script)
vb_printf
vb_printf
VB_STD
VB_STD
"redo script written to '%s'"
redo_script
redo_script
if (dscript) {	    CS *dargv;	    dargv = putil_malloc(sizeof(*dargv) * 6);	    dargv[0] = "dtrace";	    dargv[1] = "-s";	    dargv[2] = dscript;	    dargv[3] = "-c";	    dargv[4] = util_requote_argv(argv);	    dargv[5] = NULL;	    argv = dargv;	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);	}
dscript
dscript
{	    CS *dargv;	    dargv = putil_malloc(sizeof(*dargv) * 6);	    dargv[0] = "dtrace";	    dargv[1] = "-s";	    dargv[2] = dscript;	    dargv[3] = "-c";	    dargv[4] = util_requote_argv(argv);	    dargv[5] = NULL;	    argv = dargv;	    fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);	}
CS *dargv;
CS *dargv;
CS
CS
*dargv
*
dargv
dargv = putil_malloc(sizeof(*dargv) * 6);
dargv = putil_malloc(sizeof(*dargv) * 6)
dargv
dargv
putil_malloc(sizeof(*dargv) * 6)
putil_malloc
putil_malloc
sizeof(*dargv) * 6
sizeof(*dargv)
(*dargv)
*dargv
dargv
dargv
6
dargv[0] = "dtrace";
dargv[0] = "dtrace"
dargv[0]
dargv
dargv
0
"dtrace"
dargv[1] = "-s";
dargv[1] = "-s"
dargv[1]
dargv
dargv
1
"-s"
dargv[2] = dscript;
dargv[2] = dscript
dargv[2]
dargv
dargv
2
dscript
dscript
dargv[3] = "-c";
dargv[3] = "-c"
dargv[3]
dargv
dargv
3
"-c"
dargv[4] = util_requote_argv(argv);
dargv[4] = util_requote_argv(argv)
dargv[4]
dargv
dargv
4
util_requote_argv(argv)
util_requote_argv
util_requote_argv
argv
argv
dargv[5] = NULL;
dargv[5] = NULL
dargv[5]
dargv
dargv
5
NULL
NULL
argv = dargv;
argv = dargv
argv
argv
dargv
dargv
fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4]);
fprintf(stderr, "+ dtrace -s %s -c '%s'\n", dscript, argv[4])
fprintf
fprintf
stderr
stderr
"+ dtrace -s %s -c '%s'\n"
dscript
dscript
argv[4]
argv
argv
4
make_init(exe);
make_init(exe)
make_init
make_init
exe
exe
if (prop_is_true(P_GIT)) {	    git_init(exe);	}
prop_is_true(P_GIT)
prop_is_true
prop_is_true
(P_GIT)
P_GIT
P_GIT
{	    git_init(exe);	}
git_init(exe);
git_init(exe)
git_init
git_init
exe
exe
rc = run_cmd(exe, (CS *)argv, logfile);
rc = run_cmd(exe, (CS *)argv, logfile)
rc
rc
run_cmd(exe, (CS *)argv, logfile)
run_cmd
run_cmd
exe
exe
(CS *)argv
CS *
CS
CS
*
*
argv
argv
logfile
logfile
putil_free(logfile);
putil_free(logfile)
putil_free
putil_free
logfile
logfile
if (prop_is_true(P_GIT)) {	    git_fini();	}
prop_is_true(P_GIT)
prop_is_true
prop_is_true
(P_GIT)
P_GIT
P_GIT
{	    git_fini();	}
git_fini();
git_fini()
git_fini
git_fini
make_fini();
make_fini()
make_fini
make_fini
if (prop_is_true(P_LOG_FILE_TEMP)) {	    unlink(prop_get_str(P_LOG_FILE));	}
prop_is_true(P_LOG_FILE_TEMP)
prop_is_true
prop_is_true
(P_LOG_FILE_TEMP)
P_LOG_FILE_TEMP
P_LOG_FILE_TEMP
{	    unlink(prop_get_str(P_LOG_FILE));	}
unlink(prop_get_str(P_LOG_FILE));
unlink(prop_get_str(P_LOG_FILE));
unlink
unlink
(prop_get_str(P_LOG_FILE))
prop_get_str(P_LOG_FILE)
prop_get_str
P_LOG_FILE
P_LOG_FILE
P_LOG_FILE


putil_free(cwd);
putil_free(cwd)
putil_free
putil_free
cwd
cwd
if (streq(action, "roadmap")) {	// Useful while testing roadmaps. May be dispensed with later.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	mon_get_roadmap();    } else if (streq(action, "shop")) {	int cflag = 0;	int gflag = 0;	ca_o ca;	CCS rwd;	// This special action is useful for internal tests of shopping	// capabilities without changing server state, using a saved	// roadmap file.	while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}	if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}	// Assume the pre-existence of a roadmap with the default name.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	ca = ca_new();	ca_set_pccode(ca, CSV_NULL_FIELD);	ca_set_prog(ca, prop_get_str(P_PROGNAME));	ca_set_host(ca, "localhost");	ca_set_cmdid(ca, getpid());	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));	ca_set_rwd(ca, rwd = util_get_rwd());	putil_free(rwd);	ca_set_started(ca, 1);	// We almost always want these while debugging...	vb_addbit(VB_SHOP);	vb_addbit(VB_WHY);	shop_init();	if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}	shop_fini();    } else {	rc = do_action(action, argc, argv);    }
streq(action, "roadmap")
streq
streq
action
action
"roadmap"
{	// Useful while testing roadmaps. May be dispensed with later.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	mon_get_roadmap();    }
prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);
prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME)
prop_override_str
prop_override_str
P_ROADMAPFILE
P_ROADMAPFILE
ROADMAP_DEFAULT_NAME
ROADMAP_DEFAULT_NAME
prop_override_true(P_LEAVE_ROADMAP);
prop_override_true(P_LEAVE_ROADMAP);
prop_override_true
prop_override_true
(P_LEAVE_ROADMAP)
P_LEAVE_ROADMAP
P_LEAVE_ROADMAP
mon_get_roadmap();
mon_get_roadmap()
mon_get_roadmap
mon_get_roadmap
if (streq(action, "shop")) {	int cflag = 0;	int gflag = 0;	ca_o ca;	CCS rwd;	// This special action is useful for internal tests of shopping	// capabilities without changing server state, using a saved	// roadmap file.	while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}	if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}	// Assume the pre-existence of a roadmap with the default name.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	ca = ca_new();	ca_set_pccode(ca, CSV_NULL_FIELD);	ca_set_prog(ca, prop_get_str(P_PROGNAME));	ca_set_host(ca, "localhost");	ca_set_cmdid(ca, getpid());	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));	ca_set_rwd(ca, rwd = util_get_rwd());	putil_free(rwd);	ca_set_started(ca, 1);	// We almost always want these while debugging...	vb_addbit(VB_SHOP);	vb_addbit(VB_WHY);	shop_init();	if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}	shop_fini();    } else {	rc = do_action(action, argc, argv);    }
streq(action, "shop")
streq
streq
action
action
"shop"
{	int cflag = 0;	int gflag = 0;	ca_o ca;	CCS rwd;	// This special action is useful for internal tests of shopping	// capabilities without changing server state, using a saved	// roadmap file.	while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}	if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}	// Assume the pre-existence of a roadmap with the default name.	prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);	prop_override_true(P_LEAVE_ROADMAP);	ca = ca_new();	ca_set_pccode(ca, CSV_NULL_FIELD);	ca_set_prog(ca, prop_get_str(P_PROGNAME));	ca_set_host(ca, "localhost");	ca_set_cmdid(ca, getpid());	ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));	ca_set_rwd(ca, rwd = util_get_rwd());	putil_free(rwd);	ca_set_started(ca, 1);	// We almost always want these while debugging...	vb_addbit(VB_SHOP);	vb_addbit(VB_WHY);	shop_init();	if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}	shop_fini();    }
int cflag = 0;
int cflag = 0;
int
cflag = 0
cflag
= 0
0
int gflag = 0;
int gflag = 0;
int
gflag = 0
gflag
= 0
0
ca_o ca;
ca_o ca;
ca_o
ca_o
ca
ca
CCS rwd;
CCS rwd;
CCS
CCS
rwd
rwd
while (*argv && **argv == '-') {	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}
*argv && **argv == '-'
*argv
argv
argv
**argv == '-'
**argv
*argv
argv
argv
'-'
{	    if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }	    argv++;	}
if (!strcmp(*argv, "-C")) {		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    } else if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }
!strcmp(*argv, "-C")
strcmp(*argv, "-C")
strcmp
strcmp
*argv
argv
argv
"-C"
{		// Work with a predetermined cmd index rather than a cmd line.		cflag = 1;	    }
cflag = 1;
cflag = 1
cflag
cflag
1
if (!strcmp(*argv, "-G")) {		// Actually get files (default is to not change local state).		gflag = 1;	    }
!strcmp(*argv, "-G")
strcmp(*argv, "-G")
strcmp
strcmp
*argv
argv
argv
"-G"
{		// Actually get files (default is to not change local state).		gflag = 1;	    }
gflag = 1;
gflag = 1
gflag
gflag
1
argv++;
argv++
argv
argv
if (!argv[0]) {	    putil_die("Usage: shop [-G] -C index | cmd...");	}
!argv[0]
argv[0]
argv
argv
0
{	    putil_die("Usage: shop [-G] -C index | cmd...");	}
putil_die("Usage: shop [-G] -C index | cmd...");
putil_die("Usage: shop [-G] -C index | cmd...")
putil_die
putil_die
"Usage: shop [-G] -C index | cmd..."
prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME);
prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME)
prop_override_str
prop_override_str
P_ROADMAPFILE
P_ROADMAPFILE
ROADMAP_DEFAULT_NAME
ROADMAP_DEFAULT_NAME
prop_override_true(P_LEAVE_ROADMAP);
prop_override_true(P_LEAVE_ROADMAP);
prop_override_true
prop_override_true
(P_LEAVE_ROADMAP)
P_LEAVE_ROADMAP
P_LEAVE_ROADMAP
ca = ca_new();
ca = ca_new()
ca
ca
ca_new()
ca_new
ca_new
ca_set_pccode(ca, CSV_NULL_FIELD);
ca_set_pccode(ca, CSV_NULL_FIELD)
ca_set_pccode
ca_set_pccode
ca
ca
CSV_NULL_FIELD
CSV_NULL_FIELD
ca_set_prog(ca, prop_get_str(P_PROGNAME));
ca_set_prog(ca, prop_get_str(P_PROGNAME))
ca_set_prog
ca_set_prog
ca
ca
prop_get_str(P_PROGNAME)
prop_get_str
prop_get_str
P_PROGNAME
P_PROGNAME
ca_set_host(ca, "localhost");
ca_set_host(ca, "localhost")
ca_set_host
ca_set_host
ca
ca
"localhost"
ca_set_cmdid(ca, getpid());
ca_set_cmdid(ca, getpid())
ca_set_cmdid
ca_set_cmdid
ca
ca
getpid()
getpid
getpid
ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID));
ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID))
ca_set_pcmdid
ca_set_pcmdid
ca
ca
prop_get_ulong(P_PCMDID)
prop_get_ulong
prop_get_ulong
P_PCMDID
P_PCMDID
ca_set_rwd(ca, rwd = util_get_rwd());
ca_set_rwd(ca, rwd = util_get_rwd())
ca_set_rwd
ca_set_rwd
ca
ca
rwd = util_get_rwd()
rwd
rwd
util_get_rwd()
util_get_rwd
util_get_rwd
putil_free(rwd);
putil_free(rwd)
putil_free
putil_free
rwd
rwd
ca_set_started(ca, 1);
ca_set_started(ca, 1)
ca_set_started
ca_set_started
ca
ca
1
vb_addbit(VB_SHOP);
vb_addbit(VB_SHOP);
vb_addbit
vb_addbit
(VB_SHOP)
VB_SHOP
VB_SHOP
vb_addbit(VB_WHY);
vb_addbit(VB_WHY);
vb_addbit
vb_addbit
(VB_WHY)
VB_WHY
VB_WHY
shop_init();
shop_init()
shop_init
shop_init
if (cflag) {	    rc = shop(ca, argv[0], gflag);	} else {	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}
cflag
cflag
{	    rc = shop(ca, argv[0], gflag);	}
rc = shop(ca, argv[0], gflag);
rc = shop(ca, argv[0], gflag)
rc
rc
shop(ca, argv[0], gflag)
shop
shop
ca
ca
argv[0]
argv
argv
0
gflag
gflag
{	    CCS cmdline;	    cmdline = util_requote_argv(argv);	    ca_set_line(ca, cmdline);	    putil_free(cmdline);	    rc = shop(ca, NULL, gflag);	}
CCS cmdline;
CCS cmdline;
CCS
CCS
cmdline
cmdline
cmdline = util_requote_argv(argv);
cmdline = util_requote_argv(argv)
cmdline
cmdline
util_requote_argv(argv)
util_requote_argv
util_requote_argv
argv
argv
ca_set_line(ca, cmdline);
ca_set_line(ca, cmdline)
ca_set_line
ca_set_line
ca
ca
cmdline
cmdline
putil_free(cmdline);
putil_free(cmdline)
putil_free
putil_free
cmdline
cmdline
rc = shop(ca, NULL, gflag);
rc = shop(ca, NULL, gflag)
rc
rc
shop(ca, NULL, gflag)
shop
shop
ca
ca
NULL
NULL
gflag
gflag
shop_fini();
shop_fini()
shop_fini
shop_fini
{	rc = do_action(action, argc, argv);    }
rc = do_action(action, argc, argv);
rc = do_action(action, argc, argv)
rc
rc
do_action(action, argc, argv)
do_action
do_action
action
action
argc
argc
argv
argv
code_fini();
code_fini()
code_fini
code_fini
http_fini();
http_fini()
http_fini
http_fini
return rc;
rc
rc
-----joern-----
(663,476,0)
(2,929,0)
(489,161,0)
(568,153,0)
(121,1224,0)
(1259,887,0)
(1014,1142,0)
(276,1177,0)
(712,1189,0)
(309,991,0)
(883,822,0)
(433,149,0)
(612,936,0)
(849,753,0)
(326,253,0)
(7,753,0)
(549,745,0)
(1025,1238,0)
(30,865,0)
(573,1189,0)
(1181,222,0)
(313,60,0)
(212,531,0)
(910,982,0)
(442,430,0)
(103,1189,0)
(472,171,0)
(1258,964,0)
(72,44,0)
(20,1189,0)
(296,904,0)
(550,1189,0)
(1029,933,0)
(374,403,0)
(339,44,0)
(1003,1068,0)
(80,1083,0)
(572,721,0)
(153,753,0)
(951,540,0)
(271,218,0)
(966,179,0)
(1187,56,0)
(746,1025,0)
(609,1224,0)
(779,189,0)
(84,54,0)
(233,136,0)
(980,1189,0)
(402,629,0)
(583,933,0)
(916,1068,0)
(1167,962,0)
(807,540,0)
(119,898,0)
(790,1189,0)
(932,887,0)
(226,840,0)
(180,30,0)
(600,890,0)
(949,618,0)
(55,299,0)
(353,1200,0)
(115,435,0)
(561,846,0)
(1103,902,0)
(982,431,0)
(11,1151,0)
(74,576,0)
(207,897,0)
(1174,978,0)
(553,935,0)
(579,789,0)
(940,1189,0)
(1182,1257,0)
(173,677,0)
(447,428,0)
(495,637,0)
(1116,480,0)
(1142,1189,0)
(316,705,0)
(485,1170,0)
(697,297,0)
(135,1166,0)
(1110,933,0)
(469,182,0)
(961,604,0)
(1132,156,0)
(1196,307,0)
(967,823,0)
(27,874,0)
(161,772,0)
(619,945,0)
(127,1113,0)
(923,1168,0)
(358,705,0)
(324,359,0)
(408,80,0)
(639,370,0)
(236,829,0)
(19,616,0)
(441,864,0)
(8,1170,0)
(101,1168,0)
(771,890,0)
(616,929,0)
(1161,342,0)
(333,369,0)
(907,1189,0)
(154,1189,0)
(425,1189,0)
(40,255,0)
(78,1068,0)
(377,753,0)
(983,933,0)
(1047,1189,0)
(151,838,0)
(140,726,0)
(123,1170,0)
(135,970,0)
(29,713,0)
(458,647,0)
(133,470,0)
(764,969,0)
(516,744,0)
(1123,1097,0)
(60,1078,0)
(1247,933,0)
(1117,643,0)
(1125,1190,0)
(1208,1253,0)
(191,182,0)
(413,255,0)
(1220,200,0)
(576,483,0)
(393,1070,0)
(415,843,0)
(231,189,0)
(758,1030,0)
(967,542,0)
(421,236,0)
(659,202,0)
(1,130,0)
(703,842,0)
(1037,726,0)
(523,1068,0)
(657,132,0)
(1030,1153,0)
(64,919,0)
(763,802,0)
(234,1258,0)
(131,487,0)
(901,684,0)
(870,744,0)
(855,898,0)
(83,1235,0)
(83,744,0)
(146,1189,0)
(470,1240,0)
(1098,1177,0)
(897,207,0)
(16,130,0)
(152,836,0)
(942,435,0)
(249,981,0)
(1162,1189,0)
(440,933,0)
(772,1058,0)
(388,784,0)
(1017,792,0)
(1256,605,0)
(1050,546,0)
(675,1189,0)
(721,572,0)
(1233,775,0)
(1154,1019,0)
(225,744,0)
(1138,54,0)
(152,505,0)
(804,65,0)
(858,111,0)
(1166,135,0)
(199,1068,0)
(220,1068,0)
(975,175,0)
(1249,782,0)
(167,1191,0)
(447,1235,0)
(964,1258,0)
(443,412,0)
(607,936,0)
(422,253,0)
(1148,695,0)
(404,980,0)
(97,1021,0)
(997,546,0)
(126,1189,0)
(193,933,0)
(297,545,0)
(875,505,0)
(437,1189,0)
(565,744,0)
(807,767,0)
(402,95,0)
(733,980,0)
(1135,964,0)
(591,695,0)
(608,1189,0)
(761,1250,0)
(18,933,0)
(210,1068,0)
(1148,753,0)
(593,191,0)
(767,540,0)
(1169,646,0)
(541,922,0)
(264,1189,0)
(307,435,0)
(372,155,0)
(324,807,0)
(518,1256,0)
(1071,933,0)
(248,716,0)
(381,1174,0)
(566,452,0)
(713,149,0)
(952,694,0)
(634,938,0)
(949,605,0)
(591,605,0)
(383,1015,0)
(1004,1159,0)
(895,1081,0)
(529,270,0)
(532,54,0)
(917,962,0)
(837,1235,0)
(240,767,0)
(1214,775,0)
(412,904,0)
(1128,933,0)
(336,1189,0)
(748,726,0)
(202,281,0)
(909,290,0)
(994,1189,0)
(919,850,0)
(1156,431,0)
(211,664,0)
(23,1041,0)
(1057,703,0)
(7,465,0)
(1073,1235,0)
(149,1235,0)
(245,993,0)
(34,1167,0)
(652,778,0)
(295,1138,0)
(735,767,0)
(28,344,0)
(465,7,0)
(749,435,0)
(1129,106,0)
(567,1015,0)
(1198,1199,0)
(38,239,0)
(160,1189,0)
(528,601,0)
(108,1140,0)
(161,618,0)
(1010,1256,0)
(694,772,0)
(1082,807,0)
(1035,744,0)
(958,210,0)
(1248,1239,0)
(1151,1189,0)
(45,695,0)
(136,152,0)
(846,1189,0)
(359,324,0)
(1213,1051,0)
(791,444,0)
(317,933,0)
(874,243,0)
(459,487,0)
(1236,933,0)
(466,735,0)
(894,753,0)
(1087,902,0)
(785,1189,0)
(49,1235,0)
(1074,530,0)
(342,33,0)
(372,934,0)
(362,1068,0)
(25,542,0)
(1153,182,0)
(1007,1189,0)
(1183,745,0)
(1246,759,0)
(1202,1085,0)
(343,1189,0)
(557,281,0)
(922,541,0)
(155,60,0)
(324,753,0)
(965,705,0)
(926,468,0)
(1147,159,0)
(837,744,0)
(59,156,0)
(988,113,0)
(925,791,0)
(894,695,0)
(1212,1214,0)
(1126,250,0)
(581,164,0)
(564,242,0)
(352,1103,0)
(1060,1189,0)
(111,767,0)
(847,289,0)
(1049,1189,0)
(239,1189,0)
(30,65,0)
(395,911,0)
(285,425,0)
(169,933,0)
(158,1159,0)
(1108,349,0)
(648,1041,0)
(571,829,0)
(955,771,0)
(786,1219,0)
(342,182,0)
(836,1019,0)
(253,1189,0)
(877,933,0)
(152,865,0)
(868,386,0)
(756,744,0)
(92,743,0)
(1046,773,0)
(711,498,0)
(21,1149,0)
(684,901,0)
(660,515,0)
(403,374,0)
(250,744,0)
(287,522,0)
(782,677,0)
(936,1159,0)
(449,133,0)
(742,1174,0)
(351,874,0)
(824,271,0)
(328,1068,0)
(759,753,0)
(227,1219,0)
(904,1068,0)
(176,1189,0)
(927,1209,0)
(1065,663,0)
(63,445,0)
(201,933,0)
(386,465,0)
(202,978,0)
(759,182,0)
(491,711,0)
(722,349,0)
(539,1068,0)
(867,1127,0)
(142,30,0)
(1151,11,0)
(36,515,0)
(723,1241,0)
(397,947,0)
(1121,646,0)
(758,468,0)
(597,1189,0)
(628,750,0)
(1234,8,0)
(787,1006,0)
(355,584,0)
(286,49,0)
(929,1189,0)
(1255,435,0)
(373,1248,0)
(369,281,0)
(1111,1189,0)
(1158,152,0)
(449,45,0)
(204,1189,0)
(949,182,0)
(107,4,0)
(1138,295,0)
(626,842,0)
(491,1027,0)
(896,1068,0)
(1080,1142,0)
(238,374,0)
(1005,898,0)
(216,744,0)
(1048,860,0)
(97,558,0)
(541,423,0)
(247,1149,0)
(957,804,0)
(259,1189,0)
(302,753,0)
(1100,476,0)
(559,933,0)
(949,772,0)
(390,324,0)
(3,207,0)
(537,769,0)
(754,940,0)
(1173,695,0)
(572,744,0)
(222,1159,0)
(46,1120,0)
(475,646,0)
(678,1250,0)
(73,933,0)
(43,933,0)
(252,1125,0)
(1203,417,0)
(1028,1182,0)
(752,528,0)
(329,300,0)
(486,480,0)
(777,618,0)
(44,72,0)
(939,497,0)
(436,165,0)
(14,876,0)
(1215,1068,0)
(477,65,0)
(1124,374,0)
(738,113,0)
(1245,592,0)
(130,540,0)
(1130,1100,0)
(1075,1127,0)
(897,910,0)
(987,435,0)
(950,540,0)
(760,1021,0)
(278,192,0)
(1140,108,0)
(52,315,0)
(277,1189,0)
(321,236,0)
(886,1068,0)
(33,758,0)
(588,539,0)
(845,192,0)
(902,1103,0)
(587,273,0)
(898,605,0)
(1139,940,0)
(322,1197,0)
(143,387,0)
(614,1216,0)
(555,591,0)
(745,549,0)
(4,236,0)
(856,1225,0)
(508,817,0)
(918,941,0)
(1019,836,0)
(265,1189,0)
(974,1189,0)
(1044,933,0)
(773,378,0)
(993,624,0)
(584,355,0)
(1079,764,0)
(89,878,0)
(606,1159,0)
(636,266,0)
(99,435,0)
(457,1068,0)
(427,446,0)
(365,8,0)
(948,1189,0)
(1072,727,0)
(910,897,0)
(375,183,0)
(412,63,0)
(977,469,0)
(962,836,0)
(122,435,0)
(380,1189,0)
(108,731,0)
(165,540,0)
(471,423,0)
(1149,1189,0)
(1011,302,0)
(705,965,0)
(693,473,0)
(7,695,0)
(782,1224,0)
(841,1189,0)
(195,753,0)
(284,965,0)
(215,569,0)
(478,435,0)
(1173,130,0)
(705,993,0)
(346,83,0)
(931,35,0)
(563,494,0)
(782,865,0)
(136,217,0)
(407,572,0)
(984,941,0)
(928,540,0)
(808,1189,0)
(778,753,0)
(490,307,0)
(1184,483,0)
(676,1189,0)
(778,695,0)
(1116,633,0)
(696,700,0)
(120,525,0)
(843,1225,0)
(554,1025,0)
(768,1060,0)
(962,65,0)
(1223,1153,0)
(1218,693,0)
(45,449,0)
(562,754,0)
(1207,744,0)
(416,1068,0)
(9,767,0)
(499,364,0)
(1173,807,0)
(762,332,0)
(1171,1189,0)
(1009,687,0)
(982,910,0)
(710,332,0)
(794,817,0)
(178,789,0)
(1127,1189,0)
(497,939,0)
(1225,843,0)
(49,744,0)
(574,262,0)
(113,1189,0)
(545,297,0)
(149,713,0)
(662,103,0)
(90,658,0)
(344,60,0)
(1251,1097,0)
(1051,1189,0)
(461,934,0)
(102,667,0)
(238,297,0)
(755,1189,0)
(996,1153,0)
(627,870,0)
(138,1010,0)
(1150,552,0)
(1043,542,0)
(1240,695,0)
(1134,716,0)
(817,508,0)
(888,716,0)
(203,498,0)
(840,435,0)
(1010,1085,0)
(947,465,0)
(1016,1068,0)
(532,1138,0)
(311,1197,0)
(924,94,0)
(705,1235,0)
(816,745,0)
(76,1189,0)
(1195,795,0)
(791,757,0)
(159,830,0)
(324,695,0)
(1025,554,0)
(290,1189,0)
(1103,695,0)
(521,1189,0)
(387,1189,0)
(1206,1124,0)
(644,933,0)
(955,589,0)
(1056,92,0)
(112,183,0)
(947,1006,0)
(1093,951,0)
(1221,1068,0)
(693,1218,0)
(235,628,0)
(255,1068,0)
(1062,933,0)
(802,435,0)
(1015,109,0)
(1235,1073,0)
(1088,302,0)
(194,1256,0)
(674,784,0)
(804,865,0)
(848,1035,0)
(620,673,0)
(369,273,0)
(1022,292,0)
(258,1189,0)
(531,299,0)
(536,1189,0)
(957,865,0)
(706,1229,0)
(737,435,0)
(170,632,0)
(1052,658,0)
(228,287,0)
(200,618,0)
(175,423,0)
(80,408,0)
(125,744,0)
(254,933,0)
(692,510,0)
(826,97,0)
(623,1189,0)
(374,238,0)
(1089,1007,0)
(1225,661,0)
(825,179,0)
(669,591,0)
(700,661,0)
(801,677,0)
(224,723,0)
(945,1189,0)
(544,750,0)
(501,367,0)
(308,1068,0)
(591,5,0)
(1041,182,0)
(57,782,0)
(338,1184,0)
(1026,200,0)
(723,497,0)
(72,731,0)
(813,344,0)
(229,940,0)
(835,802,0)
(418,894,0)
(936,612,0)
(534,706,0)
(405,355,0)
(834,850,0)
(758,33,0)
(350,1189,0)
(382,242,0)
(80,12,0)
(110,1068,0)
(814,947,0)
(303,1245,0)
(340,401,0)
(734,1173,0)
(959,1042,0)
(431,982,0)
(618,717,0)
(86,1189,0)
(1137,862,0)
(468,910,0)
(592,1245,0)
(132,1252,0)
(647,1189,0)
(1122,473,0)
(105,401,0)
(318,1068,0)
(171,1189,0)
(582,1116,0)
(551,854,0)
(320,1148,0)
(1052,1210,0)
(414,1189,0)
(400,1150,0)
(51,63,0)
(1146,75,0)
(223,154,0)
(487,1178,0)
(1211,1138,0)
(152,65,0)
(664,282,0)
(1000,640,0)
(502,497,0)
(832,1068,0)
(1039,990,0)
(428,447,0)
(730,1189,0)
(526,84,0)
(183,695,0)
(542,273,0)
(432,314,0)
(331,295,0)
(192,448,0)
(701,726,0)
(596,26,0)
(596,695,0)
(368,1256,0)
(683,1189,0)
(793,1189,0)
(389,465,0)
(732,689,0)
(1242,911,0)
(1219,602,0)
(989,780,0)
(960,1120,0)
(865,957,0)
(79,65,0)
(312,986,0)
(891,1176,0)
(871,978,0)
(497,31,0)
(1095,759,0)
(200,182,0)
(166,854,0)
(447,744,0)
(47,1063,0)
(0,1189,0)
(111,568,0)
(625,865,0)
(962,865,0)
(699,1189,0)
(1256,1010,0)
(310,1173,0)
(229,361,0)
(1176,767,0)
(8,1068,0)
(878,430,0)
(782,289,0)
(643,1189,0)
(1240,470,0)
(186,1189,0)
(274,919,0)
(603,950,0)
(892,55,0)
(58,2,0)
(257,933,0)
(462,1076,0)
(493,991,0)
(985,1189,0)
(866,1027,0)
(1069,1248,0)
(465,1006,0)
(560,744,0)
(805,1068,0)
(635,933,0)
(376,289,0)
(394,933,0)
(543,524,0)
(116,933,0)
(84,1138,0)
(852,632,0)
(577,933,0)
(1099,1189,0)
(476,1100,0)
(219,403,0)
(1005,605,0)
(492,801,0)
(152,1224,0)
(645,168,0)
(1244,1189,0)
(500,1189,0)
(12,80,0)
(32,402,0)
(954,1189,0)
(453,1025,0)
(854,1163,0)
(807,695,0)
(735,165,0)
(130,154,0)
(162,939,0)
(1021,97,0)
(819,1189,0)
(185,789,0)
(767,9,0)
(1092,1076,0)
(972,182,0)
(280,541,0)
(221,795,0)
(1096,1258,0)
(723,1068,0)
(1005,262,0)
(155,372,0)
(191,926,0)
(589,955,0)
(93,579,0)
(1027,491,0)
(956,318,0)
(168,861,0)
(1201,836,0)
(196,1124,0)
(361,229,0)
(1038,60,0)
(366,1189,0)
(519,344,0)
(417,750,0)
(152,136,0)
(1256,1202,0)
(467,336,0)
(1175,1184,0)
(932,1210,0)
(332,1098,0)
(479,933,0)
(719,1133,0)
(913,435,0)
(591,753,0)
(585,1130,0)
(98,7,0)
(976,933,0)
(926,191,0)
(209,1189,0)
(256,1007,0)
(1084,271,0)
(595,540,0)
(897,1041,0)
(1076,651,0)
(765,49,0)
(134,933,0)
(991,928,0)
(920,637,0)
(399,1108,0)
(273,369,0)
(596,753,0)
(622,735,0)
(753,1068,0)
(728,625,0)
(873,881,0)
(549,505,0)
(232,509,0)
(188,633,0)
(578,1189,0)
(864,716,0)
(334,694,0)
(261,1109,0)
(504,772,0)
(1157,712,0)
(30,180,0)
(1055,130,0)
(986,1068,0)
(480,1116,0)
(939,1235,0)
(498,711,0)
(30,836,0)
(546,1165,0)
(705,870,0)
(681,584,0)
(839,901,0)
(163,348,0)
(153,695,0)
(386,1006,0)
(476,663,0)
(750,417,0)
(1108,399,0)
(148,154,0)
(244,1189,0)
(11,727,0)
(677,801,0)
(1143,292,0)
(702,1189,0)
(804,1224,0)
(267,933,0)
(873,213,0)
(55,147,0)
(180,289,0)
(157,573,0)
(469,772,0)
(1036,412,0)
(37,838,0)
(727,11,0)
(1124,348,0)
(1168,1189,0)
(898,1068,0)
(412,829,0)
(704,640,0)
(880,259,0)
(864,863,0)
(1170,424,0)
(411,435,0)
(679,1189,0)
(96,377,0)
(1174,281,0)
(294,1085,0)
(355,753,0)
(798,1189,0)
(934,372,0)
(833,726,0)
(77,933,0)
(740,1171,0)
(198,428,0)
(680,1241,0)
(991,767,0)
(1030,758,0)
(822,784,0)
(949,753,0)
(1098,332,0)
(1232,865,0)
(33,342,0)
(542,967,0)
(409,539,0)
(1032,250,0)
(468,926,0)
(778,1086,0)
(1217,1051,0)
(522,287,0)
(530,757,0)
(1152,1068,0)
(377,1166,0)
(709,296,0)
(872,901,0)
(1184,1241,0)
(470,133,0)
(172,248,0)
(574,753,0)
(915,933,0)
(130,1070,0)
(91,1189,0)
(628,235,0)
(66,1189,0)
(1205,295,0)
(949,898,0)
(514,1189,0)
(152,677,0)
(769,1150,0)
(168,645,0)
(236,687,0)
(1216,1104,0)
(1040,1068,0)
(893,804,0)
(22,1189,0)
(229,287,0)
(161,182,0)
(671,870,0)
(568,540,0)
(538,1189,0)
(751,664,0)
(149,744,0)
(682,800,0)
(921,1256,0)
(1059,282,0)
(812,399,0)
(283,1068,0)
(584,681,0)
(406,483,0)
(299,531,0)
(355,695,0)
(3,182,0)
(876,727,0)
(632,640,0)
(771,955,0)
(1182,1028,0)
(638,532,0)
(815,1068,0)
(306,435,0)
(114,881,0)
(1122,446,0)
(906,238,0)
(125,401,0)
(598,1038,0)
(291,453,0)
(354,945,0)
(1252,132,0)
(782,836,0)
(990,1189,0)
(860,1068,0)
(617,1140,0)
(242,1189,0)
(6,1189,0)
(943,1189,0)
(348,297,0)
(379,299,0)
(88,744,0)
(299,55,0)
(715,554,0)
(356,1189,0)
(50,1068,0)
(241,744,0)
(251,435,0)
(183,112,0)
(836,439,0)
(289,376,0)
(964,483,0)
(483,435,0)
(401,125,0)
(348,1124,0)
(718,673,0)
(53,772,0)
(1024,1189,0)
(908,451,0)
(130,1173,0)
(842,703,0)
(507,822,0)
(818,904,0)
(174,1202,0)
(939,870,0)
(1226,618,0)
(904,296,0)
(401,340,0)
(788,133,0)
(556,1256,0)
(672,1218,0)
(391,1005,0)
(1015,850,0)
(482,1189,0)
(344,28,0)
(384,579,0)
(106,1068,0)
(1106,969,0)
(190,111,0)
(302,939,0)
(1081,357,0)
(654,684,0)
(13,933,0)
(1159,929,0)
(236,904,0)
(888,645,0)
(698,240,0)
(1235,744,0)
(1258,234,0)
(995,1059,0)
(670,569,0)
(85,595,0)
(569,1189,0)
(364,667,0)
(533,239,0)
(424,1170,0)
(281,978,0)
(882,159,0)
(65,1068,0)
(688,109,0)
(71,922,0)
(60,1038,0)
(129,103,0)
(304,985,0)
(1206,281,0)
(800,1189,0)
(1094,191,0)
(1197,520,0)
(55,60,0)
(806,277,0)
(792,435,0)
(1159,936,0)
(217,136,0)
(104,540,0)
(234,780,0)
(770,798,0)
(42,584,0)
(319,712,0)
(197,933,0)
(1066,940,0)
(727,876,0)
(804,957,0)
(1180,61,0)
(634,315,0)
(82,185,0)
(641,933,0)
(1237,520,0)
(513,1187,0)
(881,873,0)
(41,1133,0)
(10,890,0)
(1105,1189,0)
(711,491,0)
(729,1189,0)
(576,74,0)
(45,753,0)
(128,1085,0)
(879,862,0)
(774,1189,0)
(503,778,0)
(454,1189,0)
(1115,616,0)
(164,744,0)
(468,758,0)
(1227,1206,0)
(48,726,0)
(270,505,0)
(446,1122,0)
(109,1015,0)
(9,399,0)
(690,933,0)
(629,402,0)
(725,589,0)
(181,1149,0)
(236,1170,0)
(937,463,0)
(894,1113,0)
(1256,695,0)
(1254,161,0)
(804,836,0)
(851,1078,0)
(1145,933,0)
(184,1176,0)
(527,74,0)
(246,716,0)
(248,435,0)
(301,1202,0)
(865,625,0)
(182,759,0)
(419,837,0)
(621,55,0)
(1241,435,0)
(26,596,0)
(949,695,0)
(288,933,0)
(637,1189,0)
(1103,753,0)
(885,666,0)
(1120,1068,0)
(714,435,0)
(1209,145,0)
(112,26,0)
(645,888,0)
(572,1235,0)
(1172,933,0)
(957,694,0)
(234,496,0)
(899,993,0)
(324,1184,0)
(861,168,0)
(69,1218,0)
(949,1125,0)
(911,1242,0)
(273,823,0)
(694,957,0)
(757,530,0)
(963,933,0)
(999,844,0)
(305,30,0)
(292,1189,0)
(515,830,0)
(1228,596,0)
(403,1124,0)
(367,237,0)
(289,180,0)
(1114,730,0)
(667,364,0)
(1170,123,0)
(1125,949,0)
(260,11,0)
(236,63,0)
(947,1235,0)
(580,1078,0)
(859,643,0)
(655,522,0)
(968,530,0)
(74,527,0)
(962,1224,0)
(640,750,0)
(951,154,0)
(434,846,0)
(460,861,0)
(783,940,0)
(753,695,0)
(1258,825,0)
(903,1068,0)
(1144,1189,0)
(240,595,0)
(823,273,0)
(456,1189,0)
(152,289,0)
(1185,1171,0)
(1155,1189,0)
(630,888,0)
(642,1189,0)
(214,1242,0)
(1041,897,0)
(668,1189,0)
(1020,367,0)
(535,807,0)
(1018,1189,0)
(399,9,0)
(357,1081,0)
(548,1189,0)
(1199,1118,0)
(594,150,0)
(118,425,0)
(511,949,0)
(1100,1130,0)
(992,757,0)
(723,965,0)
(716,1134,0)
(1107,924,0)
(1222,171,0)
(1119,1024,0)
(944,545,0)
(144,1070,0)
(591,898,0)
(75,435,0)
(558,97,0)
(1067,453,0)
(686,905,0)
(677,1054,0)
(969,1001,0)
(293,933,0)
(230,1189,0)
(820,1207,0)
(506,933,0)
(1097,1189,0)
(281,1206,0)
(377,695,0)
(100,629,0)
(731,72,0)
(890,771,0)
(298,933,0)
(1141,240,0)
(1086,778,0)
(1063,1189,0)
(708,370,0)
(1231,628,0)
(1250,1189,0)
(610,1248,0)
(62,1013,0)
(35,931,0)
(840,1170,0)
(653,646,0)
(1023,576,0)
(315,634,0)
(631,153,0)
(430,878,0)
(665,1182,0)
(1002,75,0)
(1064,1068,0)
(124,702,0)
(512,1068,0)
(723,1120,0)
(314,547,0)
(496,234,0)
(300,744,0)
(1241,1184,0)
(1061,152,0)
(633,1116,0)
(951,1070,0)
(759,695,0)
(810,705,0)
(133,449,0)
(1077,876,0)
(914,1028,0)
(941,1189,0)
(371,1230,0)
(831,706,0)
(939,993,0)
(969,764,0)
(170,463,0)
(156,59,0)
(1045,314,0)
(1033,170,0)
(1160,933,0)
(781,825,0)
(1176,950,0)
(488,483,0)
(67,939,0)
(828,1189,0)
(335,155,0)
(297,646,0)
(889,435,0)
(363,1068,0)
(268,1068,0)
(1034,1189,0)
(599,155,0)
(869,1131,0)
(439,836,0)
(1245,378,0)
(930,834,0)
(575,342,0)
(1148,1133,0)
(1188,369,0)
(1070,1068,0)
(613,1189,0)
(431,182,0)
(1091,8,0)
(937,632,0)
(776,446,0)
(731,108,0)
(374,1124,0)
(179,825,0)
(649,1189,0)
(30,1224,0)
(795,1189,0)
(723,1125,0)
(323,1189,0)
(341,837,0)
(183,753,0)
(811,1068,0)
(189,1189,0)
(1238,1025,0)
(385,1189,0)
(469,618,0)
(525,744,0)
(586,1189,0)
(87,1015,0)
(452,1189,0)
(155,1164,0)
(337,1009,0)
(971,1189,0)
(615,170,0)
(1015,667,0)
(494,767,0)
(640,632,0)
(327,723,0)
(809,767,0)
(187,83,0)
(782,505,0)
(426,469,0)
(910,468,0)
(817,435,0)
(827,869,0)
(1230,757,0)
(1194,928,0)
(673,435,0)
(70,283,0)
(853,791,0)
(1184,324,0)
(887,932,0)
(965,1006,0)
(208,592,0)
(269,336,0)
(236,4,0)
(650,887,0)
(1224,1136,0)
(946,949,0)
(26,112,0)
(464,3,0)
(703,1010,0)
(782,65,0)
(1192,353,0)
(979,164,0)
(803,613,0)
(125,1235,0)
(177,1085,0)
(1243,1189,0)
(691,155,0)
(1166,377,0)
(205,829,0)
(998,658,0)
(862,1189,0)
(1112,1189,0)
(370,1189,0)
(912,494,0)
(287,229,0)
(360,931,0)
(153,568,0)
(720,864,0)
(962,1167,0)
(1240,753,0)
(590,447,0)
(517,929,0)
(279,1189,0)
(741,63,0)
(24,140,0)
(420,1085,0)
(396,3,0)
(325,933,0)
(685,1189,0)
(799,932,0)
(694,182,0)
(884,277,0)
(973,431,0)
(81,949,0)
(869,132,0)
(739,1189,0)
(349,1108,0)
(857,646,0)
(766,1189,0)
(392,1235,0)
(330,933,0)
(484,860,0)
(474,1240,0)
(574,695,0)
(1053,937,0)
(455,558,0)
(275,574,0)
(450,1060,0)
(302,695,0)
(1012,1189,0)
(1184,1170,0)
(200,772,0)
(17,45,0)
(933,1085,0)
(724,1083,0)
(410,1187,0)
(1159,222,0)
(658,1052,0)
(736,744,0)
(525,401,0)
(953,815,0)
(1179,1216,0)
(797,68,0)
(601,528,0)
(829,481,0)
(1083,60,0)
(263,55,0)
(92,1170,0)
(611,986,0)
(438,656,0)
(823,967,0)
(694,618,0)
(39,84,0)
(139,372,0)
(207,3,0)
(1101,1068,0)
(1083,80,0)
(1193,1189,0)
(707,2,0)
(1186,141,0)
(451,398,0)
(900,933,0)
(1102,774,0)
(570,693,0)
(1133,41,0)
(769,273,0)
(723,132,0)
(15,125,0)
(1153,1030,0)
(1230,444,0)
(345,378,0)
(821,798,0)
(939,302,0)
(68,1189,0)
(1133,1148,0)
(1008,1189,0)
(429,933,0)
(1031,370,0)
(520,1197,0)
(775,1214,0)
(936,607,0)
(1090,1027,0)
(792,483,0)
(494,951,0)
(462,955,1)
(939,162,1)
(28,344,1)
(1060,768,1)
(682,1204,1)
(1167,34,1)
(487,459,1)
(200,1026,1)
(406,802,1)
(174,1018,1)
(627,164,1)
(753,695,1)
(888,716,1)
(74,527,1)
(485,1120,1)
(47,1204,1)
(619,1204,1)
(365,318,1)
(166,453,1)
(1217,1213,1)
(174,954,1)
(795,1195,1)
(1070,393,1)
(11,260,1)
(997,1191,1)
(615,1033,1)
(738,1204,1)
(172,873,1)
(544,272,1)
(174,454,1)
(161,618,1)
(17,1240,1)
(948,259,1)
(1026,1220,1)
(994,314,1)
(8,1170,1)
(507,883,1)
(1089,1204,1)
(519,60,1)
(227,476,1)
(954,2,1)
(456,1168,1)
(495,920,1)
(1082,535,1)
(80,12,1)
(522,655,1)
(389,137,1)
(275,207,1)
(348,163,1)
(714,935,1)
(592,208,1)
(431,182,1)
(957,694,1)
(1015,109,1)
(908,26,1)
(829,205,1)
(1256,1202,1)
(685,613,1)
(392,1207,1)
(558,455,1)
(937,1053,1)
(324,359,1)
(707,616,1)
(1240,753,1)
(484,904,1)
(117,347,1)
(835,469,1)
(1234,365,1)
(454,1142,1)
(782,1249,1)
(354,619,1)
(164,581,1)
(576,483,1)
(1041,182,1)
(817,508,1)
(864,716,1)
(957,865,1)
(174,323,1)
(1180,1052,1)
(390,1175,1)
(30,1224,1)
(457,178,1)
(1094,593,1)
(236,1170,1)
(222,1181,1)
(174,146,1)
(45,753,1)
(83,187,1)
(985,304,1)
(369,281,1)
(693,570,1)
(631,111,1)
(238,297,1)
(20,239,1)
(55,299,1)
(174,685,1)
(336,467,1)
(968,1074,1)
(949,605,1)
(885,235,1)
(899,41,1)
(226,130,1)
(1067,291,1)
(834,930,1)
(538,945,1)
(170,632,1)
(289,180,1)
(1042,959,1)
(52,347,1)
(681,584,1)
(1162,869,1)
(883,55,1)
(305,847,1)
(283,70,1)
(599,372,1)
(344,813,1)
(1002,1146,1)
(652,503,1)
(986,312,1)
(174,204,1)
(246,26,1)
(152,65,1)
(1206,1124,1)
(932,799,1)
(995,664,1)
(223,148,1)
(490,817,1)
(804,957,1)
(666,885,1)
(191,182,1)
(573,157,1)
(584,42,1)
(520,1197,1)
(387,143,1)
(1115,19,1)
(174,649,1)
(855,692,1)
(103,129,1)
(455,760,1)
(725,189,1)
(470,133,1)
(202,281,1)
(944,697,1)
(460,888,1)
(1180,270,1)
(402,629,1)
(178,185,1)
(1032,1086,1)
(782,677,1)
(1052,658,1)
(616,1115,1)
(498,203,1)
(480,486,1)
(185,82,1)
(866,1090,1)
(249,541,1)
(299,379,1)
(939,870,1)
(272,234,1)
(671,627,1)
(153,631,1)
(304,846,1)
(338,324,1)
(931,360,1)
(581,979,1)
(654,901,1)
(118,285,1)
(1081,895,1)
(868,947,1)
(182,759,1)
(26,596,1)
(377,96,1)
(229,361,1)
(136,233,1)
(202,659,1)
(130,154,1)
(1135,1096,1)
(207,3,1)
(133,788,1)
(352,135,1)
(742,381,1)
(1103,753,1)
(645,888,1)
(434,561,1)
(396,182,1)
(1258,964,1)
(590,83,1)
(781,902,1)
(174,0,1)
(923,1204,1)
(465,7,1)
(962,1224,1)
(313,61,1)
(1088,1011,1)
(836,1019,1)
(168,861,1)
(910,468,1)
(1020,711,1)
(922,71,1)
(837,1235,1)
(686,935,1)
(290,909,1)
(684,901,1)
(324,390,1)
(174,160,1)
(759,753,1)
(643,859,1)
(769,273,1)
(869,132,1)
(355,753,1)
(693,1218,1)
(1173,695,1)
(34,962,1)
(759,695,1)
(253,422,1)
(146,798,1)
(7,753,1)
(771,890,1)
(1036,822,1)
(561,1127,1)
(391,574,1)
(491,1027,1)
(626,1057,1)
(768,450,1)
(174,500,1)
(80,1083,1)
(234,1258,1)
(861,460,1)
(853,757,1)
(993,245,1)
(135,1166,1)
(274,1015,1)
(556,194,1)
(754,562,1)
(576,1023,1)
(256,1089,1)
(458,1204,1)
(1179,716,1)
(49,1235,1)
(751,775,1)
(1233,1214,1)
(271,824,1)
(386,465,1)
(596,695,1)
(727,876,1)
(1138,295,1)
(1244,941,1)
(645,168,1)
(1170,123,1)
(1196,490,1)
(1045,955,1)
(888,630,1)
(967,542,1)
(1225,843,1)
(432,1045,1)
(882,757,1)
(544,74,1)
(489,1254,1)
(949,81,1)
(492,173,1)
(532,638,1)
(285,1204,1)
(1024,1119,1)
(1043,273,1)
(700,696,1)
(1048,484,1)
(1027,866,1)
(711,491,1)
(174,790,1)
(894,695,1)
(513,410,1)
(678,761,1)
(119,855,1)
(101,923,1)
(1167,962,1)
(757,530,1)
(891,184,1)
(804,1224,1)
(1180,854,1)
(245,899,1)
(415,856,1)
(826,558,1)
(108,1140,1)
(446,776,1)
(1146,645,1)
(376,289,1)
(129,662,1)
(14,1077,1)
(1032,1199,1)
(546,1050,1)
(299,531,1)
(238,374,1)
(705,870,1)
(1148,753,1)
(1230,757,1)
(609,121,1)
(962,865,1)
(174,521,1)
(655,228,1)
(972,591,1)
(167,1059,1)
(269,1063,1)
(1230,371,1)
(211,751,1)
(174,819,1)
(1103,695,1)
(820,250,1)
(1198,1086,1)
(672,69,1)
(318,956,1)
(1248,373,1)
(160,242,1)
(842,626,1)
(1109,261,1)
(1199,1198,1)
(827,132,1)
(735,466,1)
(911,1242,1)
(173,376,1)
(249,1245,1)
(7,98,1)
(107,421,1)
(958,1215,1)
(928,1194,1)
(206,402,1)
(554,1025,1)
(1018,1051,1)
(946,511,1)
(531,212,1)
(121,439,1)
(142,305,1)
(873,881,1)
(642,515,1)
(614,1179,1)
(60,1038,1)
(386,868,1)
(880,1151,1)
(1232,694,1)
(236,63,1)
(464,396,1)
(10,589,1)
(374,403,1)
(1150,400,1)
(1242,214,1)
(1195,221,1)
(534,747,1)
(174,948,1)
(124,253,1)
(1184,483,1)
(539,588,1)
(320,681,1)
(1025,1238,1)
(174,623,1)
(125,401,1)
(324,753,1)
(174,356,1)
(804,893,1)
(778,753,1)
(82,579,1)
(1021,97,1)
(813,519,1)
(935,553,1)
(328,1009,1)
(240,767,1)
(468,926,1)
(897,1041,1)
(956,106,1)
(1,1055,1)
(869,827,1)
(1009,337,1)
(1183,816,1)
(302,695,1)
(628,1231,1)
(170,615,1)
(1174,281,1)
(161,182,1)
(984,918,1)
(1153,1223,1)
(1181,158,1)
(65,79,1)
(979,161,1)
(876,14,1)
(1036,28,1)
(794,75,1)
(698,1141,1)
(525,120,1)
(684,654,1)
(890,600,1)
(994,1076,1)
(595,85,1)
(1065,747,1)
(296,709,1)
(725,1204,1)
(610,1013,1)
(403,219,1)
(756,965,1)
(1146,1216,1)
(618,1226,1)
(180,30,1)
(860,1048,1)
(951,1070,1)
(837,341,1)
(174,414,1)
(1197,311,1)
(174,20,1)
(15,149,1)
(604,961,1)
(697,35,1)
(187,346,1)
(1130,585,1)
(1061,684,1)
(174,456,1)
(3,464,1)
(174,994,1)
(774,1102,1)
(675,367,1)
(1090,498,1)
(907,712,1)
(1116,582,1)
(1059,995,1)
(806,884,1)
(1069,610,1)
(603,1176,1)
(76,154,1)
(369,333,1)
(823,967,1)
(1240,474,1)
(893,1219,1)
(1151,11,1)
(728,1232,1)
(443,1036,1)
(355,405,1)
(174,265,1)
(418,874,1)
(998,90,1)
(807,695,1)
(372,139,1)
(316,358,1)
(999,731,1)
(902,1087,1)
(982,431,1)
(792,1017,1)
(483,488,1)
(174,176,1)
(457,248,1)
(562,271,1)
(1015,87,1)
(542,25,1)
(302,753,1)
(414,702,1)
(461,691,1)
(1228,483,1)
(620,718,1)
(740,1185,1)
(158,606,1)
(1120,46,1)
(782,865,1)
(149,713,1)
(212,263,1)
(973,1041,1)
(450,1204,1)
(165,436,1)
(1105,292,1)
(1051,1217,1)
(663,1065,1)
(67,502,1)
(856,911,1)
(1174,742,1)
(1010,1256,1)
(341,419,1)
(1194,991,1)
(1182,1028,1)
(1206,1227,1)
(1028,914,1)
(759,1246,1)
(24,677,1)
(1108,349,1)
(476,1100,1)
(617,666,1)
(353,1192,1)
(1039,1204,1)
(962,836,1)
(59,1132,1)
(1012,774,1)
(859,1117,1)
(1162,132,1)
(1125,949,1)
(111,767,1)
(7,695,1)
(38,533,1)
(124,1204,1)
(745,1183,1)
(102,1204,1)
(409,860,1)
(192,278,1)
(1137,879,1)
(839,549,1)
(175,975,1)
(263,408,1)
(309,493,1)
(266,636,1)
(1095,972,1)
(329,49,1)
(207,897,1)
(350,439,1)
(1049,290,1)
(301,174,1)
(419,447,1)
(436,735,1)
(723,1120,1)
(214,395,1)
(231,1204,1)
(714,686,1)
(723,1125,1)
(622,950,1)
(430,442,1)
(554,715,1)
(469,182,1)
(381,823,1)
(792,483,1)
(1185,1204,1)
(395,328,1)
(521,1097,1)
(1086,778,1)
(130,1070,1)
(68,797,1)
(532,1138,1)
(497,939,1)
(401,340,1)
(174,1244,1)
(49,286,1)
(569,215,1)
(709,818,1)
(426,911,1)
(1222,647,1)
(887,1259,1)
(424,1170,1)
(439,836,1)
(582,633,1)
(399,1108,1)
(758,1030,1)
(803,1204,1)
(991,309,1)
(200,182,1)
(649,68,1)
(949,695,1)
(1134,246,1)
(990,1039,1)
(722,809,1)
(310,16,1)
(1007,256,1)
(1154,1201,1)
(163,196,1)
(966,781,1)
(174,343,1)
(710,554,1)
(809,206,1)
(331,1205,1)
(162,302,1)
(314,432,1)
(153,695,1)
(215,670,1)
(723,327,1)
(374,1124,1)
(307,1196,1)
(219,1124,1)
(996,33,1)
(287,522,1)
(575,926,1)
(782,65,1)
(1005,605,1)
(885,937,1)
(962,65,1)
(810,316,1)
(75,1002,1)
(541,922,1)
(625,728,1)
(303,601,1)
(571,1021,1)
(84,1138,1)
(261,750,1)
(1240,695,1)
(518,921,1)
(1226,777,1)
(1097,1251,1)
(22,1187,1)
(183,695,1)
(598,313,1)
(773,1046,1)
(174,1049,1)
(1227,557,1)
(57,152,1)
(174,699,1)
(58,707,1)
(734,310,1)
(297,545,1)
(457,756,1)
(1157,1204,1)
(964,1135,1)
(964,483,1)
(412,829,1)
(537,823,1)
(572,721,1)
(51,1021,1)
(1166,377,1)
(884,1204,1)
(242,382,1)
(1092,462,1)
(1015,667,1)
(2,58,1)
(417,1203,1)
(659,1174,1)
(1053,170,1)
(992,1191,1)
(172,604,1)
(1159,936,1)
(591,695,1)
(62,229,1)
(372,934,1)
(236,4,1)
(252,161,1)
(894,418,1)
(821,770,1)
(114,604,1)
(885,1109,1)
(715,1025,1)
(694,952,1)
(799,887,1)
(29,433,1)
(1256,556,1)
(703,1010,1)
(351,27,1)
(1100,1130,1)
(949,182,1)
(174,536,1)
(174,796,1)
(1204,703,1)
(143,1204,1)
(895,175,1)
(688,667,1)
(22,834,1)
(33,342,1)
(1252,657,1)
(1156,973,1)
(152,1224,1)
(772,53,1)
(405,470,1)
(945,354,1)
(776,427,1)
(798,821,1)
(591,753,1)
(1216,614,1)
(1005,391,1)
(756,497,1)
(788,449,1)
(703,842,1)
(1191,167,1)
(917,804,1)
(606,1004,1)
(152,136,1)
(747,238,1)
(503,470,1)
(752,773,1)
(1173,807,1)
(357,1081,1)
(831,534,1)
(203,1204,1)
(738,1250,1)
(226,206,1)
(692,703,1)
(713,29,1)
(106,1129,1)
(718,307,1)
(723,965,1)
(694,618,1)
(1171,740,1)
(1132,731,1)
(572,1235,1)
(567,383,1)
(1211,1109,1)
(1207,820,1)
(1030,1153,1)
(549,745,1)
(9,399,1)
(1103,352,1)
(472,1222,1)
(1076,1092,1)
(333,1188,1)
(924,1107,1)
(589,725,1)
(563,165,1)
(174,538,1)
(421,412,1)
(629,100,1)
(383,109,1)
(637,495,1)
(959,1013,1)
(373,1069,1)
(947,1235,1)
(892,621,1)
(1175,680,1)
(155,335,1)
(441,720,1)
(355,695,1)
(1122,446,1)
(278,845,1)
(1176,891,1)
(1246,1095,1)
(137,516,1)
(184,767,1)
(848,300,1)
(360,1005,1)
(723,497,1)
(346,1235,1)
(183,753,1)
(1184,1170,1)
(467,269,1)
(566,1204,1)
(814,397,1)
(1201,1204,1)
(494,912,1)
(525,401,1)
(515,36,1)
(1168,101,1)
(878,89,1)
(1209,927,1)
(1158,1061,1)
(89,430,1)
(786,227,1)
(368,138,1)
(953,523,1)
(864,441,1)
(628,750,1)
(747,35,1)
(92,1170,1)
(777,182,1)
(453,1067,1)
(315,52,1)
(352,673,1)
(155,60,1)
(732,1209,1)
(533,1204,1)
(950,603,1)
(858,190,1)
(360,772,1)
(332,762,1)
(885,532,1)
(585,663,1)
(574,275,1)
(159,1147,1)
(782,1224,1)
(885,969,1)
(1065,706,1)
(650,520,1)
(312,611,1)
(291,554,1)
(1061,1122,1)
(775,1214,1)
(469,618,1)
(447,1235,1)
(174,186,1)
(947,465,1)
(769,537,1)
(1251,1123,1)
(702,124,1)
(340,105,1)
(711,498,1)
(514,63,1)
(1203,544,1)
(544,825,1)
(1146,864,1)
(528,752,1)
(343,795,1)
(1119,1204,1)
(669,555,1)
(1038,598,1)
(194,518,1)
(1223,996,1)
(30,836,1)
(640,1000,1)
(1132,999,1)
(493,568,1)
(412,904,1)
(574,695,1)
(731,108,1)
(568,153,1)
(975,480,1)
(265,1060,1)
(951,154,1)
(300,329,1)
(526,1138,1)
(474,870,1)
(667,364,1)
(955,589,1)
(100,32,1)
(425,118,1)
(259,880,1)
(504,207,1)
(480,1116,1)
(874,351,1)
(229,287,1)
(557,238,1)
(30,65,1)
(123,485,1)
(807,1082,1)
(804,836,1)
(601,528,1)
(342,1161,1)
(822,507,1)
(1107,601,1)
(932,887,1)
(208,303,1)
(658,998,1)
(273,369,1)
(286,765,1)
(1080,1014,1)
(1127,1075,1)
(1180,804,1)
(1123,637,1)
(324,695,1)
(918,103,1)
(1237,1197,1)
(248,172,1)
(961,714,1)
(883,155,1)
(1023,272,1)
(675,192,1)
(399,812,1)
(63,741,1)
(797,1204,1)
(819,1171,1)
(1148,320,1)
(936,612,1)
(188,486,1)
(1133,719,1)
(413,539,1)
(815,953,1)
(161,489,1)
(630,716,1)
(97,826,1)
(593,982,1)
(93,384,1)
(733,404,1)
(83,1235,1)
(360,618,1)
(24,1167,1)
(236,904,1)
(105,15,1)
(1022,1143,1)
(235,628,1)
(133,449,1)
(292,1022,1)
(1250,678,1)
(791,925,1)
(295,331,1)
(120,125,1)
(925,853,1)
(634,315,1)
(189,779,1)
(1013,62,1)
(762,710,1)
(410,667,1)
(19,1159,1)
(1074,992,1)
(591,669,1)
(356,980,1)
(451,908,1)
(250,1126,1)
(1075,867,1)
(846,434,1)
(280,357,1)
(731,72,1)
(845,711,1)
(750,417,1)
(1117,1204,1)
(1188,587,1)
(210,958,1)
(894,753,1)
(1184,324,1)
(442,140,1)
(778,695,1)
(574,753,1)
(694,182,1)
(136,217,1)
(926,191,1)
(45,695,1)
(459,131,1)
(92,1056,1)
(636,840,1)
(71,280,1)
(109,688,1)
(1256,695,1)
(677,801,1)
(323,981,1)
(516,1035,1)
(246,451,1)
(621,299,1)
(499,102,1)
(1224,609,1)
(469,772,1)
(327,832,1)
(228,1204,1)
(912,563,1)
(587,281,1)
(24,376,1)
(596,1228,1)
(640,750,1)
(452,566,1)
(449,45,1)
(1000,704,1)
(26,112,1)
(1192,357,1)
(98,389,1)
(914,665,1)
(893,476,1)
(233,1158,1)
(176,573,1)
(311,322,1)
(1102,1204,1)
(508,794,1)
(1057,1010,1)
(721,407,1)
(642,546,1)
(1106,632,1)
(1004,1204,1)
(45,17,1)
(87,567,1)
(949,618,1)
(32,156,1)
(800,682,1)
(825,179,1)
(117,634,1)
(152,677,1)
(1126,1032,1)
(949,753,1)
(555,117,1)
(431,1156,1)
(55,60,1)
(949,772,1)
(960,255,1)
(206,666,1)
(898,605,1)
(545,944,1)
(930,919,1)
(72,44,1)
(1212,1204,1)
(720,645,1)
(334,893,1)
(61,1180,1)
(476,663,1)
(988,738,1)
(1096,825,1)
(1084,1042,1)
(36,660,1)
(520,1237,1)
(867,336,1)
(191,1094,1)
(949,898,1)
(906,297,1)
(174,514,1)
(1142,1080,1)
(921,368,1)
(1148,695,1)
(358,284,1)
(502,137,1)
(761,1204,1)
(174,22,1)
(397,465,1)
(760,1204,1)
(972,117,1)
(511,252,1)
(939,993,1)
(523,1208,1)
(529,782,1)
(79,477,1)
(712,319,1)
(302,1088,1)
(174,1162,1)
(561,1204,1)
(344,60,1)
(854,551,1)
(174,1105,1)
(816,453,1)
(613,803,1)
(705,993,1)
(379,531,1)
(902,1103,1)
(927,424,1)
(418,41,1)
(1021,760,1)
(418,993,1)
(281,1206,1)
(347,753,1)
(426,700,1)
(364,499,1)
(1019,1154,1)
(818,986,1)
(335,599,1)
(255,40,1)
(348,297,1)
(775,1233,1)
(1033,632,1)
(801,492,1)
(1133,1148,1)
(234,496,1)
(724,28,1)
(125,1235,1)
(706,831,1)
(393,144,1)
(865,625,1)
(767,9,1)
(796,283,1)
(200,772,1)
(969,764,1)
(367,501,1)
(161,772,1)
(200,618,1)
(704,852,1)
(1214,1212,1)
(42,355,1)
(1063,47,1)
(152,289,1)
(1047,990,1)
(664,211,1)
(530,968,1)
(870,671,1)
(849,195,1)
(427,693,1)
(562,1042,1)
(337,236,1)
(1218,672,1)
(1073,392,1)
(548,754,1)
(447,428,1)
(35,931,1)
(1083,60,1)
(339,108,1)
(236,321,1)
(167,775,1)
(1238,746,1)
(198,590,1)
(791,757,1)
(847,1167,1)
(1055,807,1)
(1116,633,1)
(27,681,1)
(612,222,1)
(474,894,1)
(1254,200,1)
(139,934,1)
(494,767,1)
(1176,767,1)
(1129,815,1)
(319,1157,1)
(1258,825,1)
(1159,222,1)
(647,458,1)
(670,171,1)
(638,84,1)
(240,698,1)
(154,223,1)
(1215,8,1)
(8,1091,1)
(897,910,1)
(204,730,1)
(536,277,1)
(138,1202,1)
(323,1182,1)
(0,569,1)
(85,240,1)
(680,92,1)
(371,791,1)
(662,643,1)
(433,572,1)
(588,409,1)
(248,716,1)
(591,605,1)
(705,810,1)
(205,571,1)
(716,1134,1)
(174,548,1)
(937,632,1)
(174,675,1)
(1083,724,1)
(878,430,1)
(730,1114,1)
(30,865,1)
(1093,494,1)
(673,620,1)
(1245,592,1)
(11,727,1)
(195,898,1)
(349,722,1)
(1077,260,1)
(705,1235,1)
(174,1024,1)
(758,33,1)
(840,226,1)
(735,767,1)
(608,862,1)
(1187,513,1)
(303,924,1)
(1072,876,1)
(412,63,1)
(174,76,1)
(408,80,1)
(149,1235,1)
(1184,338,1)
(1173,734,1)
(1161,575,1)
(584,355,1)
(81,946,1)
(1153,182,1)
(44,339,1)
(955,771,1)
(171,472,1)
(570,1218,1)
(156,59,1)
(1180,520,1)
(236,829,1)
(747,202,1)
(1205,1211,1)
(514,829,1)
(152,865,1)
(152,836,1)
(901,872,1)
(633,188,1)
(41,1133,1)
(723,132,1)
(324,807,1)
(832,457,1)
(881,114,1)
(904,296,1)
(277,806,1)
(322,1098,1)
(1220,469,1)
(648,3,1)
(746,487,1)
(852,235,1)
(130,1173,1)
(1231,750,1)
(174,907,1)
(375,596,1)
(4,107,1)
(382,564,1)
(144,65,1)
(174,1012,1)
(843,415,1)
(453,1025,1)
(991,767,1)
(1035,848,1)
(1011,67,1)
(980,733,1)
(84,39,1)
(1087,1103,1)
(1202,301,1)
(111,858,1)
(206,156,1)
(727,1072,1)
(1241,1184,1)
(155,372,1)
(321,4,1)
(920,1204,1)
(69,684,1)
(350,1224,1)
(183,375,1)
(326,1204,1)
(691,408,1)
(564,425,1)
(407,837,1)
(412,443,1)
(909,1204,1)
(97,558,1)
(696,1225,1)
(468,758,1)
(1036,61,1)
(1041,23,1)
(55,892,1)
(1219,786,1)
(239,38,1)
(1005,898,1)
(746,878,1)
(723,1241,1)
(132,1252,1)
(422,326,1)
(377,753,1)
(632,640,1)
(1249,57,1)
(898,119,1)
(70,210,1)
(804,65,1)
(879,452,1)
(542,273,1)
(113,988,1)
(377,695,1)
(1208,689,1)
(977,426,1)
(765,525,1)
(157,1204,1)
(30,142,1)
(596,753,1)
(174,642,1)
(535,928,1)
(824,1084,1)
(699,985,1)
(112,183,1)
(779,231,1)
(591,898,1)
(778,652,1)
(284,386,1)
(500,1007,1)
(400,769,1)
(428,198,1)
(381,1150,1)
(64,274,1)
(551,166,1)
(190,595,1)
(488,406,1)
(941,984,1)
(802,763,1)
(689,732,1)
(919,64,1)
(1046,480,1)
(224,723,1)
(1017,1241,1)
(823,273,1)
(934,461,1)
(523,689,1)
(1098,332,1)
(936,607,1)
(959,1248,1)
(782,289,1)
(1235,1073,1)
(16,1,1)
(470,1240,1)
(3,182,1)
(694,772,1)
(1140,617,1)
(53,504,1)
(680,266,1)
(1141,951,1)
(1079,1106,1)
(1114,113,1)
(804,865,1)
(328,412,1)
(174,608,1)
(807,767,1)
(579,93,1)
(1091,1234,1)
(1124,348,1)
(840,1170,1)
(753,849,1)
(466,622,1)
(1259,650,1)
(951,1093,1)
(457,1125,1)
(96,902,1)
(1147,882,1)
(623,800,1)
(39,526,1)
(179,966,1)
(25,1043,1)
(342,182,1)
(872,839,1)
(642,1230,1)
(553,792,1)
(403,1124,1)
(280,353,1)
(764,1079,1)
(140,24,1)
(174,1047,1)
(939,1235,1)
(952,334,1)
(947,814,1)
(732,424,1)
(196,906,1)
(384,200,1)
(862,1137,1)
(153,753,1)
(719,1148,1)
(981,249,1)
(501,1020,1)
(1256,605,1)
(1050,997,1)
(469,977,1)
(74,576,1)
(790,387,1)
(23,648,1)
(1056,266,1)
(962,917,1)
(90,932,1)
(46,960,1)
(741,51,1)
(131,878,1)
(611,1070,1)
(660,159,1)
(763,835,1)
(221,1204,1)
(174,350,1)
(965,705,1)
(812,1108,1)
(782,836,1)
(910,982,1)
(270,529,1)
(665,981,1)
(939,302,1)
(238,906,1)
(600,10,1)
(40,413,1)
(235,750,2)
(1010,703,2)
(1069,1013,2)
(952,893,2)
(100,156,2)
(234,825,2)
(108,1140,2)
(1187,667,2)
(926,982,2)
(926,191,2)
(459,878,2)
(406,469,2)
(439,836,2)
(168,861,2)
(219,1124,2)
(649,1204,2)
(469,772,2)
(1011,137,2)
(1206,238,2)
(424,1170,2)
(315,347,2)
(1033,632,2)
(1166,902,2)
(1056,266,2)
(1196,469,2)
(655,1204,2)
(494,206,2)
(84,1109,2)
(898,605,2)
(513,667,2)
(185,200,2)
(591,605,2)
(118,1204,2)
(584,470,2)
(767,206,2)
(369,238,2)
(807,206,2)
(1032,161,2)
(474,161,2)
(836,1019,2)
(902,902,2)
(921,703,2)
(329,161,2)
(501,711,2)
(277,1204,2)
(528,480,2)
(1108,206,2)
(339,108,2)
(671,161,2)
(355,753,2)
(1153,33,2)
(746,804,2)
(969,764,2)
(133,1240,2)
(535,206,2)
(236,904,2)
(622,206,2)
(794,469,2)
(28,61,2)
(491,498,2)
(302,695,2)
(1061,453,2)
(997,1191,2)
(1012,1204,2)
(390,469,2)
(103,1204,2)
(1219,476,2)
(468,982,2)
(910,982,2)
(930,667,2)
(1123,1204,2)
(951,154,2)
(172,469,2)
(711,1204,2)
(949,898,2)
(1133,681,2)
(311,554,2)
(698,206,2)
(1041,182,2)
(1135,825,2)
(694,618,2)
(152,1224,2)
(49,1235,2)
(0,1204,2)
(256,1204,2)
(183,695,2)
(603,206,2)
(171,1204,2)
(198,161,2)
(522,1204,2)
(1005,207,2)
(305,1167,2)
(401,161,2)
(401,340,2)
(576,272,2)
(1103,753,2)
(1087,902,2)
(601,480,2)
(1216,716,2)
(934,408,2)
(966,469,2)
(962,836,2)
(375,596,2)
(500,1204,2)
(961,469,2)
(711,491,2)
(617,666,2)
(572,721,2)
(458,1204,2)
(1226,182,2)
(831,747,2)
(109,667,2)
(1021,97,2)
(795,1204,2)
(55,408,2)
(152,136,2)
(1133,1148,2)
(817,508,2)
(882,757,2)
(1245,480,2)
(1088,137,2)
(714,469,2)
(694,182,2)
(876,260,2)
(782,289,2)
(623,1204,2)
(1153,182,2)
(959,1204,2)
(373,1013,2)
(628,750,2)
(490,469,2)
(274,667,2)
(800,1204,2)
(842,703,2)
(1211,1109,2)
(8,1170,2)
(149,1235,2)
(569,1204,2)
(483,469,2)
(224,723,2)
(75,469,2)
(455,760,2)
(752,480,2)
(285,1204,2)
(637,1204,2)
(949,161,2)
(408,80,2)
(326,1204,2)
(853,757,2)
(36,757,2)
(669,117,2)
(158,1204,2)
(973,1041,2)
(1237,554,2)
(515,757,2)
(1235,161,2)
(897,1041,2)
(1067,554,2)
(1184,324,2)
(767,9,2)
(694,772,2)
(153,695,2)
(149,713,2)
(242,1204,2)
(1100,1130,2)
(640,235,2)
(907,1204,2)
(549,745,2)
(595,206,2)
(1049,1204,2)
(152,836,2)
(810,137,2)
(30,865,2)
(862,1204,2)
(950,206,2)
(1109,750,2)
(90,520,2)
(442,804,2)
(1154,1204,2)
(554,1025,2)
(769,823,2)
(824,1042,2)
(612,1204,2)
(465,137,2)
(44,108,2)
(35,931,2)
(1158,453,2)
(200,182,2)
(673,469,2)
(507,28,2)
(632,640,2)
(693,684,2)
(704,235,2)
(1161,926,2)
(878,430,2)
(758,33,2)
(894,753,2)
(74,527,2)
(988,1204,2)
(108,666,2)
(87,667,2)
(180,1167,2)
(331,1109,2)
(402,629,2)
(765,161,2)
(918,1204,2)
(825,469,2)
(1183,453,2)
(837,161,2)
(22,1204,2)
(955,1204,2)
(817,469,2)
(1191,1204,2)
(804,836,2)
(114,604,2)
(888,716,2)
(894,695,2)
(1116,633,2)
(951,206,2)
(995,775,2)
(1000,235,2)
(49,161,2)
(355,470,2)
(1240,161,2)
(324,359,2)
(1220,469,2)
(799,520,2)
(890,589,2)
(861,888,2)
(377,753,2)
(775,1214,2)
(778,695,2)
(204,1204,2)
(1035,161,2)
(236,412,2)
(600,589,2)
(545,35,2)
(152,453,2)
(107,412,2)
(568,206,2)
(867,1204,2)
(645,716,2)
(1009,412,2)
(200,772,2)
(1094,982,2)
(357,1081,2)
(412,63,2)
(504,207,2)
(428,161,2)
(549,453,2)
(606,1204,2)
(1030,1153,2)
(419,161,2)
(1087,469,2)
(239,1204,2)
(567,667,2)
(464,182,2)
(782,453,2)
(557,238,2)
(941,1204,2)
(1182,1028,2)
(1148,753,2)
(310,206,2)
(1192,357,2)
(452,1204,2)
(626,703,2)
(1072,260,2)
(801,376,2)
(703,703,2)
(263,408,2)
(1096,825,2)
(284,137,2)
(34,804,2)
(245,41,2)
(724,28,2)
(202,281,2)
(1086,161,2)
(379,408,2)
(42,470,2)
(773,480,2)
(207,3,2)
(1151,11,2)
(421,412,2)
(170,632,2)
(291,554,2)
(563,206,2)
(816,453,2)
(829,1021,2)
(297,545,2)
(178,200,2)
(295,1109,2)
(140,804,2)
(417,469,2)
(999,731,2)
(1202,703,2)
(738,1204,2)
(568,153,2)
(923,1204,2)
(1194,206,2)
(865,694,2)
(447,428,2)
(342,182,2)
(45,1240,2)
(782,836,2)
(735,767,2)
(69,684,2)
(1092,955,2)
(707,1204,2)
(514,1204,2)
(556,703,2)
(211,775,2)
(367,711,2)
(441,645,2)
(768,1204,2)
(555,117,2)
(80,28,2)
(383,667,2)
(196,906,2)
(723,1241,2)
(873,604,2)
(9,399,2)
(834,667,2)
(439,1204,2)
(182,759,2)
(982,1041,2)
(161,772,2)
(572,161,2)
(1159,222,2)
(572,1235,2)
(159,757,2)
(369,281,2)
(422,1204,2)
(1013,1204,2)
(1086,778,2)
(4,412,2)
(797,1204,2)
(235,628,2)
(823,967,2)
(142,1167,2)
(41,681,2)
(278,711,2)
(723,132,2)
(678,1204,2)
(180,30,2)
(174,703,2)
(757,1191,2)
(446,684,2)
(807,767,2)
(688,667,2)
(1241,469,2)
(654,453,2)
(1249,453,2)
(895,480,2)
(909,1204,2)
(912,206,2)
(450,1204,2)
(382,1204,2)
(238,35,2)
(7,137,2)
(529,453,2)
(222,1204,2)
(705,137,2)
(26,112,2)
(138,703,2)
(371,757,2)
(922,480,2)
(969,632,2)
(449,45,2)
(949,605,2)
(508,469,2)
(270,453,2)
(1232,694,2)
(664,775,2)
(551,453,2)
(488,469,2)
(190,206,2)
(939,302,2)
(967,273,2)
(1228,469,2)
(596,753,2)
(1097,1204,2)
(727,260,2)
(1240,695,2)
(112,596,2)
(136,217,2)
(337,412,2)
(289,180,2)
(534,747,2)
(342,926,2)
(340,161,2)
(587,238,2)
(162,137,2)
(1103,695,2)
(1244,1204,2)
(386,137,2)
(571,1021,2)
(1141,206,2)
(353,357,2)
(1240,753,2)
(788,1240,2)
(1015,109,2)
(399,206,2)
(1115,1204,2)
(377,902,2)
(188,486,2)
(728,694,2)
(576,483,2)
(372,934,2)
(848,161,2)
(807,695,2)
(854,453,2)
(574,695,2)
(72,44,2)
(1157,1204,2)
(152,677,2)
(840,469,2)
(324,753,2)
(616,1204,2)
(71,480,2)
(130,154,2)
(1028,981,2)
(884,1204,2)
(1106,632,2)
(1019,1204,2)
(782,65,2)
(499,1204,2)
(376,289,2)
(212,408,2)
(722,206,2)
(1138,295,2)
(1171,1204,2)
(685,1204,2)
(1222,1204,2)
(273,369,2)
(740,1204,2)
(1025,804,2)
(130,1173,2)
(38,1204,2)
(45,753,2)
(936,1204,2)
(470,161,2)
(133,449,2)
(778,161,2)
(786,476,2)
(155,408,2)
(396,182,2)
(192,711,2)
(845,711,2)
(764,632,2)
(228,1204,2)
(1047,1204,2)
(297,35,2)
(554,804,2)
(627,161,2)
(203,1204,2)
(152,289,2)
(20,1204,2)
(1198,1086,2)
(684,901,2)
(253,1204,2)
(1017,469,2)
(349,206,2)
(951,1070,2)
(774,1204,2)
(840,1170,2)
(866,498,2)
(946,161,2)
(985,1204,2)
(1100,663,2)
(487,878,2)
(336,1204,2)
(229,287,2)
(570,684,2)
(711,498,2)
(101,1204,2)
(45,695,2)
(1184,483,2)
(814,137,2)
(991,767,2)
(163,906,2)
(537,823,2)
(343,1204,2)
(761,1204,2)
(675,1204,2)
(883,28,2)
(55,60,2)
(309,206,2)
(155,60,2)
(962,65,2)
(97,558,2)
(1205,1109,2)
(1238,804,2)
(453,554,2)
(670,1204,2)
(152,65,2)
(321,412,2)
(715,804,2)
(472,1204,2)
(497,137,2)
(1156,1041,2)
(949,182,2)
(324,469,2)
(967,542,2)
(456,1204,2)
(917,804,2)
(846,1204,2)
(466,206,2)
(470,470,2)
(173,376,2)
(584,355,2)
(520,554,2)
(1041,3,2)
(694,893,2)
(248,469,2)
(314,955,2)
(856,911,2)
(139,408,2)
(792,469,2)
(7,695,2)
(161,618,2)
(758,1030,2)
(281,238,2)
(864,645,2)
(175,480,2)
(236,63,2)
(299,531,2)
(1026,469,2)
(324,807,2)
(615,632,2)
(665,981,2)
(348,297,2)
(734,206,2)
(348,906,2)
(1250,1204,2)
(355,695,2)
(874,681,2)
(465,7,2)
(307,469,2)
(1208,689,2)
(10,589,2)
(1227,238,2)
(1098,332,2)
(113,1204,2)
(271,1042,2)
(287,1204,2)
(397,137,2)
(1021,1204,2)
(640,750,2)
(240,767,2)
(1107,601,2)
(368,703,2)
(303,480,2)
(399,1108,2)
(1046,480,2)
(771,589,2)
(189,1204,2)
(826,760,2)
(1159,1204,2)
(803,1204,2)
(1074,1191,2)
(519,61,2)
(939,870,2)
(476,663,2)
(716,469,2)
(1184,1170,2)
(621,408,2)
(521,1204,2)
(647,1204,2)
(1055,206,2)
(238,297,2)
(381,238,2)
(1203,469,2)
(89,804,2)
(944,35,2)
(3,182,2)
(124,1204,2)
(782,1224,2)
(221,1204,2)
(813,61,2)
(374,403,2)
(62,1204,2)
(1175,469,2)
(864,716,2)
(662,1204,2)
(179,469,2)
(1148,681,2)
(731,666,2)
(700,911,2)
(503,161,2)
(302,137,2)
(949,695,2)
(125,1235,2)
(939,1235,2)
(727,876,2)
(290,1204,2)
(387,1204,2)
(130,206,2)
(745,453,2)
(143,1204,2)
(1020,711,2)
(756,161,2)
(723,965,2)
(873,881,2)
(187,161,2)
(990,1204,2)
(681,470,2)
(468,926,2)
(161,200,2)
(526,1109,2)
(596,695,2)
(885,469,2)
(1077,260,2)
(546,1191,2)
(1258,964,2)
(418,470,2)
(166,453,2)
(402,156,2)
(777,182,2)
(928,206,2)
(902,1103,2)
(157,1204,2)
(51,1021,2)
(156,59,2)
(998,520,2)
(105,161,2)
(962,865,2)
(269,1204,2)
(632,235,2)
(609,439,2)
(962,1224,2)
(899,41,2)
(516,161,2)
(894,470,2)
(434,1204,2)
(1231,750,2)
(1235,1073,2)
(582,486,2)
(1195,1204,2)
(60,61,2)
(742,238,2)
(1127,1204,2)
(812,206,2)
(1030,33,2)
(573,1204,2)
(425,1204,2)
(703,1010,2)
(11,727,2)
(266,469,2)
(156,666,2)
(881,604,2)
(762,554,2)
(164,161,2)
(447,161,2)
(1147,757,2)
(706,747,2)
(1102,1204,2)
(240,206,2)
(1214,1204,2)
(410,667,2)
(1224,439,2)
(949,618,2)
(1010,1256,2)
(469,618,2)
(30,65,2)
(703,842,2)
(897,910,2)
(27,681,2)
(412,829,2)
(346,161,2)
(520,1197,2)
(691,408,2)
(155,372,2)
(252,161,2)
(132,1252,2)
(29,161,2)
(1083,28,2)
(412,904,2)
(589,1204,2)
(932,520,2)
(63,1021,2)
(226,469,2)
(598,61,2)
(920,1204,2)
(121,439,2)
(1259,520,2)
(1076,955,2)
(183,596,2)
(847,1167,2)
(699,1204,2)
(1057,703,2)
(772,207,2)
(735,206,2)
(645,168,2)
(300,161,2)
(1050,1191,2)
(869,132,2)
(316,137,2)
(1173,206,2)
(1258,825,2)
(301,703,2)
(792,483,2)
(725,1204,2)
(1114,1204,2)
(191,982,2)
(415,911,2)
(135,1166,2)
(130,1070,2)
(975,480,2)
(994,1204,2)
(502,137,2)
(778,753,2)
(17,1240,2)
(350,1204,2)
(468,758,2)
(131,878,2)
(351,681,2)
(910,468,2)
(561,1204,2)
(720,645,2)
(947,1235,2)
(236,4,2)
(1188,238,2)
(525,161,2)
(273,238,2)
(449,1240,2)
(467,1204,2)
(129,1204,2)
(98,137,2)
(1081,480,2)
(754,1204,2)
(1176,206,2)
(1015,667,2)
(914,981,2)
(1256,695,2)
(200,469,2)
(891,206,2)
(954,1204,2)
(536,1204,2)
(760,1204,2)
(775,1204,2)
(593,982,2)
(386,465,2)
(125,401,2)
(414,1204,2)
(575,926,2)
(957,865,2)
(591,117,2)
(495,1204,2)
(1173,807,2)
(1084,1042,2)
(532,1138,2)
(474,470,2)
(68,1204,2)
(1225,911,2)
(92,1170,2)
(1108,349,2)
(84,1138,2)
(191,182,2)
(231,1204,2)
(843,911,2)
(530,1191,2)
(968,1191,2)
(354,1204,2)
(979,161,2)
(265,1204,2)
(965,137,2)
(852,235,2)
(462,955,2)
(80,12,2)
(15,161,2)
(879,1204,2)
(511,161,2)
(26,469,2)
(1159,936,2)
(936,607,2)
(1122,684,2)
(39,1109,2)
(819,1204,2)
(1075,1204,2)
(194,703,2)
(581,161,2)
(30,836,2)
(804,865,2)
(358,137,2)
(525,401,2)
(625,694,2)
(906,35,2)
(165,206,2)
(299,408,2)
(431,182,2)
(964,825,2)
(1225,843,2)
(19,1204,2)
(1002,469,2)
(7,753,2)
(1181,1204,2)
(1005,605,2)
(246,469,2)
(82,200,2)
(872,453,2)
(1184,469,2)
(718,469,2)
(1090,498,2)
(431,1041,2)
(1059,775,2)
(344,61,2)
(352,469,2)
(839,453,2)
(531,408,2)
(498,1204,2)
(937,632,2)
(636,469,2)
(927,424,2)
(1004,1204,2)
(405,470,2)
(281,1206,2)
(585,663,2)
(248,716,2)
(945,1204,2)
(1212,1204,2)
(823,238,2)
(650,520,2)
(1125,161,2)
(64,667,2)
(719,681,2)
(372,408,2)
(630,716,2)
(161,182,2)
(804,1224,2)
(200,618,2)
(642,1204,2)
(32,156,2)
(541,480,2)
(1027,498,2)
(667,364,2)
(374,906,2)
(67,137,2)
(696,911,2)
(460,888,2)
(33,342,2)
(432,955,2)
(74,272,2)
(324,695,2)
(447,1235,2)
(710,554,2)
(1045,955,2)
(591,898,2)
(250,161,2)
(1254,200,2)
(791,757,2)
(705,870,2)
(453,1025,2)
(1043,273,2)
(677,376,2)
(1179,716,2)
(229,1204,2)
(304,1204,2)
(451,26,2)
(287,522,2)
(753,695,2)
(280,480,2)
(275,207,2)
(302,753,2)
(234,496,2)
(1248,1013,2)
(1,206,2)
(634,315,2)
(684,453,2)
(713,161,2)
(564,1204,2)
(332,554,2)
(925,757,2)
(1124,348,2)
(1052,520,2)
(1119,1204,2)
(493,206,2)
(1140,666,2)
(660,757,2)
(83,1235,2)
(878,804,2)
(1207,161,2)
(24,804,2)
(120,161,2)
(1125,949,2)
(1185,1204,2)
(1126,161,2)
(859,1204,2)
(1103,902,2)
(160,1204,2)
(996,33,2)
(289,1167,2)
(1053,632,2)
(1167,804,2)
(26,596,2)
(1174,238,2)
(648,3,2)
(261,750,2)
(538,1204,2)
(1233,1204,2)
(1182,981,2)
(1103,469,2)
(41,1133,2)
(731,72,2)
(319,1204,2)
(1082,206,2)
(820,161,2)
(574,753,2)
(1079,632,2)
(1083,60,2)
(697,35,2)
(865,625,2)
(666,469,2)
(723,497,2)
(9,206,2)
(1166,377,2)
(494,767,2)
(92,266,2)
(936,612,2)
(407,161,2)
(153,206,2)
(59,666,2)
(596,469,2)
(408,28,2)
(183,753,2)
(338,469,2)
(55,299,2)
(1256,605,2)
(357,480,2)
(215,1204,2)
(721,161,2)
(1170,123,2)
(769,273,2)
(731,108,2)
(1209,424,2)
(962,804,2)
(750,417,2)
(1093,206,2)
(137,161,2)
(23,3,2)
(781,469,2)
(489,200,2)
(384,200,2)
(1148,695,2)
(389,137,2)
(202,238,2)
(335,408,2)
(802,469,2)
(965,705,2)
(910,1041,2)
(566,1204,2)
(518,703,2)
(835,469,2)
(1116,486,2)
(620,469,2)
(96,902,2)
(533,1204,2)
(53,207,2)
(1117,1204,2)
(758,926,2)
(1218,684,2)
(1042,1204,2)
(207,182,2)
(858,206,2)
(634,347,2)
(643,1204,2)
(1130,663,2)
(1073,161,2)
(102,1204,2)
(604,469,2)
(629,156,2)
(229,361,2)
(723,1120,2)
(544,469,2)
(25,273,2)
(1230,757,2)
(892,408,2)
(400,823,2)
(1137,1204,2)
(716,1134,2)
(562,1204,2)
(1173,695,2)
(751,775,2)
(1060,1204,2)
(993,41,2)
(320,681,2)
(939,993,2)
(741,1021,2)
(964,483,2)
(825,179,2)
(957,893,2)
(112,183,2)
(476,1100,2)
(436,206,2)
(1122,446,2)
(1038,61,2)
(470,133,2)
(836,1204,2)
(939,137,2)
(392,161,2)
(553,469,2)
(238,374,2)
(672,684,2)
(376,1167,2)
(949,772,2)
(1138,1109,2)
(911,1242,2)
(1197,554,2)
(681,584,2)
(14,260,2)
(992,1191,2)
(205,1021,2)
(599,408,2)
(461,408,2)
(47,1204,2)
(702,1204,2)
(579,200,2)
(682,1204,2)
(984,1204,2)
(1089,1204,2)
(558,760,2)
(286,161,2)
(1007,1204,2)
(645,888,2)
(548,1204,2)
(206,469,2)
(592,480,2)
(80,1083,2)
(352,902,2)
(924,601,2)
(81,161,2)
(610,1013,2)
(136,453,2)
(30,1224,2)
(1167,962,2)
(677,801,2)
(790,1204,2)
(659,238,2)
(652,161,2)
(633,486,2)
(93,200,2)
(902,469,2)
(58,1204,2)
(1168,1204,2)
(16,206,2)
(427,684,2)
(712,1204,2)
(693,1218,2)
(1005,898,2)
(1052,658,2)
(730,1204,2)
(1204,703,2)
(667,1204,2)
(759,753,2)
(480,1116,2)
(33,926,2)
(1150,823,2)
(176,1204,2)
(1024,1204,2)
(135,902,2)
(782,677,2)
(809,206,2)
(167,1204,2)
(932,887,2)
(236,1170,2)
(403,1124,2)
(638,1109,2)
(947,137,2)
(804,65,2)
(111,767,2)
(631,206,2)
(334,893,2)
(1256,703,2)
(322,554,2)
(955,589,2)
(870,161,2)
(1201,1204,2)
(1223,33,2)
(806,1204,2)
(935,469,2)
(469,182,2)
(908,26,2)
(1245,592,2)
(1206,1124,2)
(705,1235,2)
(491,1027,2)
(705,993,2)
(532,1109,2)
(542,273,2)
(779,1204,2)
(1256,1202,2)
(887,520,2)
(1176,767,2)
(619,1204,2)
(97,760,2)
(804,957,2)
(919,667,2)
(1039,1204,2)
(591,695,2)
(1098,554,2)
(236,829,2)
(868,137,2)
(111,206,2)
(658,520,2)
(492,376,2)
(74,576,2)
(759,695,2)
(125,161,2)
(947,465,2)
(374,1124,2)
(341,161,2)
(344,60,2)
(233,453,2)
(1025,1238,2)
(827,132,2)
(1174,281,2)
(949,753,2)
(208,480,2)
(614,716,2)
(433,161,2)
(982,431,2)
(28,344,2)
(377,695,2)
(227,476,2)
(776,684,2)
(234,1258,2)
(837,1235,2)
(904,296,2)
(184,206,2)
(601,528,2)
(152,865,2)
(57,453,2)
(2,1204,2)
(207,897,2)
(723,1125,2)
(153,753,2)
(686,935,2)
(1023,272,2)
(957,694,2)
(333,238,2)
(1134,469,2)
(85,206,2)
(608,1204,2)
(1240,470,2)
(1063,1204,2)
(497,939,2)
(955,771,2)
(574,207,2)
(30,1167,2)
(541,922,2)
(60,1038,2)
(613,1204,2)
(757,530,2)
(591,753,2)
(1241,1184,2)
(391,207,2)
(83,161,2)
(1124,906,2)
(272,825,2)
(590,161,2)
(901,453,2)
(823,273,2)
(771,890,2)
(430,804,2)
(618,182,2)
(72,108,2)
(822,28,2)
(991,206,2)
(750,469,2)
(1132,666,2)
(52,347,2)
(313,61,2)
(1251,1204,2)
(168,888,2)
(763,469,2)
(680,469,2)
(782,865,2)
(897,3,2)
(1199,1086,2)
(149,161,2)
(1146,469,2)
(364,1204,2)
(470,1240,2)
-----------------------------------
(0,break;)
(1,"+ dtrace -s %s -c \'%s\'\\n")
(2,prop_override_ulong(P_LOG_FILE_TEMP, 1)
(3,strpbrk(action, "/\\\\=+-")
(4,vb_bitmatch(VB_STD)
(5,)
(6,case \'G\':)
(7,util_requote_argv(argv)
(8,prefs_init(exe, PROP_EXT, NULL)
(9,putil_malloc(sizeof(*dargv)
(10,bsd_optarg)
(11,bsd_optarg && bsd_optarg[0] == \'+\')
(12,int)
(13,)
(14,0)
(15,ca)
(16,dscript)
(17,argv)
(18,)
(19,P_LOG_FILE)
(20,break;)
(21,lbuf)
(22,break;)
(23,"make")
(24,NULL)
(25,1)
(26,!argv || !*argv)
(27,cflag)
(28,!strchr(svr, \':\')
(29,P_PCMDID)
(30,pager + 1)
(31,)
(32,"can\'t get a session at %s")
(33,!util_pathcmp(action, "msbuild")
(34,\'$\')
(35,!prop_has_value(P_PROJECT_NAME)
(36,bsd_optarg)
(37,if ((rc = mon_begin_session()
(38,bsd_optarg)
(39,rmap)
(40,0)
(41,!strcmp(*argv, "-G")
(42,"-C")
(43,)
(44,prop_is_true(P_UPLOAD_ONLY)
(45,*argv)
(46,0)
(47,P_REUSE_ROADMAP)
(48,if (pipe(pfd)
(49,ca_set_started(ca, 1)
(50,redo_script)
(51,proplevel)
(52,P_LOG_FILE)
(53,"run")
(54,)
(55,snprintf(buf, sizeof(buf)
(56,)
(57,0)
(58,1)
(59,mon_begin_session()
(60,svr = prop_get_str(P_SERVER)
(61,prop_has_value(P_SERVER)
(62,QuietMode)
(63,proplevel = 1)
(64,str)
(65,pager = NULL)
(66,case \'s\':)
(67,ca)
(68,_usage(0)
(69,pfd)
(70,"CYGWIN=detect_bloda")
(71,"UMEM_DEBUG")
(72,!prop_is_true(P_UPLOAD_ONLY)
(73,)
(74,(void)
(75,prop_put_ulong(P_DEPTH, 0)
(76,break;)
(77,)
(78,if (putil_getenv("DEBUGBREAK")
(79,NULL)
(80,(int)
(81,argv)
(82,P_LEAVE_ROADMAP)
(83,ca_set_pccode(ca, CSV_NULL_FIELD)
(84,prop_put_str(P_ROADMAPFILE, rmap)
(85,"-c")
(86,case \'S\':)
(87,bsd_optarg)
(88,ca)
(89,0)
(90,pfd)
(91,case \'F\':)
(92,git_init(exe)
(93,ROADMAP_DEFAULT_NAME)
(94,)
(95,)
(96,argv)
(97,*bsd_optarg == \'+\')
(98,argv)
(99,cwd)
(100,P_SERVER)
(101,1)
(102,old)
(103,prop_put_ulong(P_STRICT_DOWNLOAD, 1)
(104,dargv)
(105,rwd)
(106,prop_init(APPLICATION_NAME)
(107,VB_STD)
(108,!prop_is_true(P_REUSE_ROADMAP)
(109,&str)
(110,if (no_server)
(111,dargv[4])
(112,!*argv)
(113,QuietMode = 1)
(114,P_LOG_FILE)
(115,if ((logprop = prop_get_str(P_LOG_FILE)
(116,)
(117,make_clean)
(118,0)
(119,bsd_optind)
(120,rwd)
(121,pager)
(122,if (prop_has_value(P_SERVER)
(123,putil_getexecpath()
(124,bsd_optarg)
(125,ca_set_rwd(ca, rwd = util_get_rwd()
(126,if (!bsd_optarg || !strcmp(bsd_optarg, "D")
(127,if (!strcmp(*argv, "-C")
(128,if (c == -1)
(129,1)
(130,fprintf(stderr, "+ dtrace -s %s -c \'%s\'\\n", dscript, argv[4])
(131,2)
(132,rc = http_restart()
(133,**argv == \'-\')
(134,)
(135,putil_putenv(*argv++)
(136,(char *)
(137,cflag)
(138,c)
(139,1)
(140,fflush(NULL)
(141,)
(142,1)
(143,P_AUDIT_ONLY)
(144,dscript)
(145,)
(146,break;)
(147,)
(148,dscript)
(149,ca_set_pcmdid(ca, prop_get_ulong(P_PCMDID)
(150,)
(151,if (!prop_is_true(P_REUSE_ROADMAP)
(152,execlp(pager, pager, (char *)
(153,util_requote_argv(argv)
(154,dscript = bsd_optarg)
(155,snprintf(buf, sizeof(buf)
(156,rc = mon_begin_session()
(157,P_SYNCHRONOUS_TRANSFERS)
(158,"%s.%lu.log")
(159,putil_syserr(0, bsd_optarg)
(160,break;)
(161,streq(action, "shop")
(162,gflag)
(163,pbase)
(164,cflag = 0)
(165,dargv[1] = "-s")
(166,2)
(167,bsd_optarg)
(168,!prop_is_true(P_EXECUTE_ONLY)
(169,)
(170,prop_override_str(P_ROADMAPFILE, rmap)
(171,prop_put_ulong(P_PRINT_ELAPSED, 1)
(172,cwd)
(173,pager)
(174,short_opts)
(175,putil_putenv("LD_PRELOAD=/lib/libumem.so")
(176,break;)
(177,switch (c)
(178,mon_get_roadmap()
(179,prop_get_str(P_LOG_FILE)
(180,getenv(pager + 1)
(181,if (*bsd_optarg == \':\')
(182,action = argv[0])
(183,*argv)
(184,dargv)
(185,prop_override_true(P_LEAVE_ROADMAP)
(186,break;)
(187,CSV_NULL_FIELD)
(188,bsd_optarg)
(189,no_server = 1)
(190,dargv)
(191,util_pathcmp(action, "vcbuild")
(192,prop_override_str(P_MAKE_DEPENDS, "d")
(193,)
(194,long_opts)
(195,argv)
(196,pjname)
(197,)
(198,P_PROGNAME)
(199,if (prop_has_value(P_SERVER)
(200,streq(action, "roadmap")
(201,)
(202,putil_free(ptr)
(203,bsd_optarg)
(204,break;)
(205,0)
(206,dscript)
(207,strpbrk(action, "/\\\\=+-")
(208,"MALLOC_DEBUG")
(209,case \'Y\':)
(210,prop_override_true(P_MAKE_ONESHELL)
(211,1)
(212,buf)
(213,)
(214,P_PRINT_ELAPSED)
(215,1)
(216,if (!argv[0])
(217,char *)
(218,)
(219,pjname)
(220,pager)
(221,P_PROJECT_NAME)
(222,prop_get_str(P_APP)
(223,bsd_optarg)
(224,RET)
(225,if (cflag)
(226,exe)
(227,P_UPLOAD_ONLY)
(228,bsd_optarg)
(229,(void)
(230,case \'I\':)
(231,no_server)
(232,if ((rmap = putil_realpath(rmap, 1)
(233,0)
(234,(void)
(235,!putil_is_absolute(rmap)
(236,prop_help(proplevel, vb_bitmatch(VB_STD)
(237,)
(238,pbase && (pjname = putil_basename(pbase)
(239,prop_override_str(P_IDENTITY_HASH, bsd_optarg)
(240,dargv[3])
(241,while (*argv && **argv == \'-\')
(242,prop_put_ulong(P_DOWNLOAD_ONLY, 2)
(243,)
(244,default:)
(245,1)
(246,cwd)
(247,if (putil_is_absolute(bsd_optarg)
(248,putil_free(cwd)
(249,"LD_PRELOAD")
(250,prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME)
(251,if (prop_is_true(P_GIT)
(252,rc)
(253,prop_unexport(P_VERBOSITY, 1)
(254,)
(255,tee = 0)
(256,1)
(257,)
(258,if (putil_getenv("LD_PRELOAD")
(259,exit(0)
(260,bsd_optarg)
(261,P_SERVER)
(262,)
(263,buf)
(264,case \'R\':)
(265,break;)
(266,prop_is_true(P_GIT)
(267,)
(268,if (!prop_has_value(P_PROJECT_NAME)
(269,P_DOWNLOAD_ONLY)
(270,_exit(2)
(271,putil_syserr(2, cd_to)
(272,logfile)
(273,dash = strchr(ptr, \'-\')
(274,P_WFLAG)
(275,argv)
(276,if (pfd[1] != STDOUT_FILENO)
(277,prop_override_ulong(P_UPLOAD_ONLY, 1)
(278,"d")
(279,case \'U\':)
(280,"UMEM_DEBUG=%s\\n")
(281,ptr = putil_strdup(pjname)
(282,)
(283,putil_putenv("CYGWIN=detect_bloda")
(284,rc)
(285,P_DOWNLOAD_ONLY)
(286,1)
(287,util_substitute_params(bsd_optarg, &cd_to)
(288,)
(289,pager = getenv(pager + 1)
(290,prop_override_true(P_DOWNLOAD_ONLY)
(291,pid)
(292,redo_script = bsd_optarg)
(293,)
(294,c)
(295,tempnam(NULL, "rmap.")
(296,-1)
(297,pbase = prop_get_str(P_BASE_DIR)
(298,)
(299,sizeof(buf)
(300,vb_addbit(VB_SHOP)
(301,"+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY")
(302,argv[0])
(303,"MALLOC_DEBUG=%s\\n")
(304,P_LEAVE_ROADMAP)
(305,pager)
(306,if ((rmap = prop_get_str(P_ROADMAPFILE)
(307,prop_put_str(P_PCCODE, CSV_NULL_FIELD)
(308,proplevel)
(309,5)
(310,argv)
(311,1)
(312,NULL)
(313,svr)
(314,prop_override_str(P_OUTPUT_FILE, bsd_optarg)
(315,prop_get_str(P_LOG_FILE)
(316,NULL)
(317,)
(318,atexit(prop_fini)
(319,0)
(320,argv)
(321,exe)
(322,pfd)
(323,break;)
(324,(CS *)
(325,)
(326,P_VERBOSITY)
(327,rc)
(328,http_init()
(329,VB_SHOP)
(330,)
(331,"rmap.")
(332,pfd[0])
(333,\'-\')
(334,action)
(335,svr)
(336,prop_unset(P_DOWNLOAD_ONLY, 0)
(337,0)
(338,logfile)
(339,P_UPLOAD_ONLY)
(340,util_get_rwd()
(341,"localhost")
(342,util_pathcmp(action, "msbuild")
(343,break;)
(344,strchr(svr, \':\')
(345,if (!putil_getenv("MALLOC_DEBUG")
(346,ca)
(347,tee)
(348,putil_basename(pbase)
(349,*dargv)
(350,break;)
(351,1)
(352,argv)
(353,putil_putenv("UMEM_DEBUG=default,verbose")
(354,bsd_optarg)
(355,*argv)
(356,break;)
(357,!putil_getenv("UMEM_DEBUG")
(358,ca)
(359,CS *)
(360,P_PROJECT_NAME)
(361,void)
(362,if ((ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED)
(363,no_server)
(364,prop_get_str(P_WFLAG)
(365,exe)
(366,case \'p\':)
(367,prop_override_str(P_MAKE_DEPENDS, bsd_optarg)
(368,argc)
(369,strchr(ptr, \'-\')
(370,)
(371,lbuf)
(372,sizeof(buf)
(373,cd_to)
(374,(pjname = putil_basename(pbase)
(375,argv)
(376,!(pager = getenv(pager + 1)
(377,argv++)
(378,)
(379,1)
(380,case \'X\':)
(381,P_PROJECT_NAME)
(382,2)
(383,"%s\\n%s")
(384,P_ROADMAPFILE)
(385,case \'Q\':)
(386,putil_free(cmdline)
(387,prop_override_true(P_AUDIT_ONLY)
(388,buf)
(389,cmdline)
(390,argv)
(391,argc)
(392,ca)
(393,NULL)
(394,)
(395,ElapsedMinimum)
(396,action)
(397,ca)
(398,)
(399,sizeof(*dargv)
(400,\'\\0\')
(401,rwd = util_get_rwd()
(402,putil_die("can\'t get a session at %s",\n\\n\\t\\t\\t  prop_get_str(P_SERVER)
(403,*pjname)
(404,P_LOG_TIME_STAMP)
(405,argv)
(406,logfile)
(407,ca)
(408,isdigit((int)
(409,make_clean)
(410,P_WFLAG)
(411,if (!argv || !*argv)
(412,proplevel >= 0)
(413,tee)
(414,break;)
(415,NULL)
(416,if (!(exe = putil_getexecpath()
(417,prop_get_str(P_ROADMAPFILE)
(418,argv)
(419,ca)
(420,short_opts)
(421,proplevel)
(422,1)
(423,)
(424,!(exe = putil_getexecpath()
(425,prop_unset(P_DOWNLOAD_ONLY, 0)
(426,action)
(427,pfd)
(428,prop_get_str(P_PROGNAME)
(429,)
(430,pipe(pfd)
(431,util_pathcmp(action, "sh")
(432,bsd_optarg)
(433,ca)
(434,ROADMAP_DEFAULT_NAME)
(435,)
(436,"-s")
(437,case \'l\':)
(438,if (strpbrk(action, "/\\\\=+-")
(439,!(pager = getenv("PAGER")
(440,)
(441,cwd)
(442,pfd)
(443,0)
(444,)
(445,)
(446,pfd[0])
(447,ca_set_prog(ca, prop_get_str(P_PROGNAME)
(448,)
(449,**argv)
(450,make_clean)
(451,_usage(1)
(452,prop_override_true(P_GIT)
(453,pid > 0)
(454,break;)
(455,bsd_optarg)
(456,break;)
(457,code_fini()
(458,P_EXECUTE_ONLY)
(459,"pipe")
(460,P_EXECUTE_ONLY)
(461,buf)
(462,P_OUTPUT_FILE)
(463,)
(464,"/\\\\=+-")
(465,cmdline = util_requote_argv(argv)
(466,1)
(467,0)
(468,!util_pathcmp(action, "vcbuild")
(469,streq(action, "run")
(470,*argv && **argv == \'-\')
(471,if (!putil_getenv("UMEM_DEBUG")
(472,1)
(473,)
(474,argv)
(475,pjname)
(476,prop_has_value(P_MAKE_FILE)
(477,pager)
(478,rmap)
(479,)
(480,bsd_optarg && *bsd_optarg == \'w\')
(481,)
(482,case \'E\':)
(483,logfile = NULL)
(484,no_server)
(485,exe)
(486,bsd_optarg)
(487,putil_syserr(2, "pipe")
(488,NULL)
(489,"shop")
(490,P_PCCODE)
(491,!strcmp(bsd_optarg, "D")
(492,P_DOC_PAGER)
(493,dargv)
(494,dargv[2])
(495,1)
(496,void)
(497,rc = shop(ca, argv[0], gflag)
(498,!bsd_optarg)
(499,P_WFLAG)
(500,break;)
(501,bsd_optarg)
(502,rc)
(503,argv)
(504,action)
(505,)
(506,)
(507,buf)
(508,getpid()
(509,)
(510,)
(511,action)
(512,make_clean)
(513,bsd_optarg)
(514,break;)
(515,prop_override_str(P_LOG_FILE, bsd_optarg)
(516,shop_init()
(517,buf)
(518,short_opts)
(519,svr)
(520,pfd[1] != STDOUT_FILENO)
(521,break;)
(522,&cd_to)
(523,vb_init()
(524,)
(525,putil_free(rwd)
(526,P_ROADMAPFILE)
(527,void)
(528,putil_getenv("MALLOC_DEBUG")
(529,2)
(530,putil_realpath(bsd_optarg, 1)
(531,sizeof(buf)
(532,putil_free(rmap)
(533,P_IDENTITY_HASH)
(534,P_SERVER)
(535,argv)
(536,break;)
(537,dash)
(538,break;)
(539,make_clean = 0)
(540,)
(541,printf("UMEM_DEBUG=%s\\n", putil_getenv("UMEM_DEBUG")
(542,dash[1])
(543,if (!(pager = getenv(pager + 1)
(544,rmap)
(545,prop_get_str(P_BASE_DIR)
(546,prop_override_str(P_LOG_FILE, bsd_optarg)
(547,)
(548,break;)
(549,close(pfd[1])
(550,case \'D\':)
(551,"fork")
(552,)
(553,P_GIT)
(554,(pid = fork()
(555,argc)
(556,NULL)
(557,ptr)
(558,*bsd_optarg)
(559,)
(560,rwd)
(561,P_ROADMAPFILE)
(562,cd_to)
(563,dargv)
(564,P_DOWNLOAD_ONLY)
(565,cflag)
(566,P_GIT)
(567,old)
(568,dargv[4] = util_requote_argv(argv)
(569,prop_unset(P_SERVER, 1)
(570,STDIN_FILENO)
(571,proplevel)
(572,ca_set_cmdid(ca, getpid()
(573,prop_override_true(P_SYNCHRONOUS_TRANSFERS)
(574,argv++)
(575,action)
(576,unlink(logfile)
(577,)
(578,if (bsd_optarg && *bsd_optarg == \'w\')
(579,prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME)
(580,svr)
(581,0)
(582,\'w\')
(583,)
(584,strcmp(*argv, "-C")
(585,P_MAKE_DEPENDS)
(586,case \'q\':)
(587,dash)
(588,0)
(589,!bsd_optarg)
(590,ca)
(591,_make_clean(argc, argv)
(592,putil_getenv("MALLOC_DEBUG")
(593,action)
(594,if (util_is_tmp(cwd)
(595,dargv[3] = "-c")
(596,!argv)
(597,case \'M\':)
(598,P_SERVER)
(599,"localhost:%s")
(600,"@")
(601,!putil_getenv("MALLOC_DEBUG")
(602,)
(603,"dtrace")
(604,prop_is_true(P_LOG_FILE_TEMP)
(605,int argc)
(606,1024)
(607,unsigned long)
(608,break;)
(609,"less")
(610,stderr)
(611,redo_script)
(612,getpid()
(613,prop_override_true(P_ABSOLUTE_PATHS)
(614,"util_get_cwd()
(615,rmap)
(616,prop_override_str(P_LOG_FILE, buf)
(617,P_REUSE_ROADMAP)
(618,action = "help")
(619,P_MAKE_FILE)
(620,0)
(621,"%s:8080")
(622,dargv)
(623,break;)
(624,)
(625,prop_get_str(P_DOC_PAGER)
(626,1)
(627,gflag)
(628,putil_is_absolute(rmap)
(629,prop_get_str(P_SERVER)
(630,cwd)
(631,argv)
(632,rmap = putil_realpath(rmap, 1)
(633,*bsd_optarg)
(634,tee_into(prop_get_str(P_LOG_FILE)
(635,)
(636,P_GIT)
(637,prop_unset(P_PRINT_ELAPSED, 1)
(638,rmap)
(639,str)
(640,putil_realpath(rmap, 1)
(641,)
(642,break;)
(643,prop_put_ulong(P_STRICT, 1)
(644,)
(645,util_is_tmp(cwd)
(646,)
(647,prop_override_true(P_EXECUTE_ONLY)
(648,action)
(649,break;)
(650,pfd)
(651,)
(652,0)
(653,pbase)
(654,STDIN_FILENO)
(655,cd_to)
(656,)
(657,rc)
(658,pfd[1])
(659,ptr)
(660,P_LOG_FILE)
(661,)
(662,P_STRICT_DOWNLOAD)
(663,prop_has_value(P_MAKE_FILE)
(664,prop_override_ulong(P_LOG_TIME_STAMP, 1)
(665,"LD_PRELOAD=%s\\n")
(666,prop_has_value(P_SERVER)
(667,old = prop_get_str(P_WFLAG)
(668,case \'v\':)
(669,argv)
(670,P_SERVER)
(671,0)
(672,0)
(673,prop_put_ulong(P_AGGREGATED_SUBCMD, 0)
(674,if (isdigit((int)
(675,break;)
(676,case \'H\':)
(677,pager = prop_get_str(P_DOC_PAGER)
(678,"WARN")
(679,case \'d\':)
(680,rc)
(681,!strcmp(*argv, "-C")
(682,P_MEMBERS_ONLY)
(683,case \'C\':)
(684,pfd[0] != STDIN_FILENO)
(685,break;)
(686,git_fini()
(687,)
(688,str)
(689,putil_getenv("DEBUGBREAK")
(690,)
(691,buf)
(692,break;)
(693,dup2(pfd[0], STDIN_FILENO)
(694,streq(action, "man")
(695,CS const *argv)
(696,_print_elapsed_time)
(697,pbase)
(698,3)
(699,break;)
(700,atexit(_print_elapsed_time)
(701,if (*pager == \'$\')
(702,vb_addstr(bsd_optarg)
(703,c == -1)
(704,rmap)
(705,shop(ca, NULL, gflag)
(706,prop_unset(P_SERVER, 1)
(707,P_LOG_FILE_TEMP)
(708,if ((old = prop_get_str(P_WFLAG)
(709,1)
(710,pfd)
(711,!bsd_optarg || !strcmp(bsd_optarg, "D")
(712,prop_unset(P_MAKE_ONESHELL, 0)
(713,prop_get_ulong(P_PCMDID)
(714,make_fini()
(715,0)
(716,cwd = util_get_cwd()
(717,)
(718,P_AGGREGATED_SUBCMD)
(719,"-G")
(720,"illegal tmp working directory: %s")
(721,getpid()
(722,dargv)
(723,return rc;)
(724,svr)
(725,bsd_optarg)
(726,)
(727,bsd_optarg[0] == \'+\')
(728,P_DOC_PAGER)
(729,case \'x\':)
(730,vb_addstr("-")
(731,!prop_is_true(P_REUSE_ROADMAP)
(732,"DEBUGBREAK")
(733,1)
(734,4)
(735,dargv[1])
(736,gflag)
(737,if ((cwd = util_get_cwd()
(738,QuietMode)
(739,case \'o\':)
(740,bsd_optarg)
(741,1)
(742,ptr)
(743,)
(744,)
(745,pfd[1])
(746,pid)
(747,no_server)
(748,pfd)
(749,if (prop_is_true(P_GIT)
(750,rmap = prop_get_str(P_ROADMAPFILE)
(751,P_LOG_TIME_STAMP)
(752,"MALLOC_DEBUG")
(753,argv += bsd_optind)
(754,putil_free(cd_to)
(755,case \'a\':)
(756,shop_fini()
(757,lbuf = putil_realpath(bsd_optarg, 1)
(758,!util_pathcmp(action, "msbuild")
(759,argv[0])
(760,bsd_optarg)
(761,P_SERVER_LOG_LEVEL)
(762,0)
(763,NULL)
(764,prop_get_str(P_ROADMAPFILE)
(765,ca)
(766,case \'w\':)
(767,dargv = putil_malloc(sizeof(*dargv)
(768,1)
(769,*dash)
(770,P_MONITOR_PLATFORM)
(771,!strcmp(bsd_optarg, "@")
(772,action = "run")
(773,putil_putenv("LD_PRELOAD=watchmalloc.so.1")
(774,vb_addbit(VB_WHY)
(775,*bsd_optarg == \':\')
(776,0)
(777,action)
(778,argv[0])
(779,1)
(780,)
(781,logprop)
(782,putil_syserr(0, pager)
(783,if (chdir(cd_to)
(784,)
(785,case \'c\':)
(786,1)
(787,cmdline)
(788,\'-\')
(789,)
(790,break;)
(791,prop_override_str(P_LOG_FILE, lbuf)
(792,putil_free(logfile)
(793,case \'m\':)
(794,P_PCMDID)
(795,prop_override_str(P_PROJECT_NAME, bsd_optarg)
(796,bsd_getopt_reset()
(797,0)
(798,prop_override_str(P_MONITOR_PLATFORM, bsd_optarg)
(799,STDOUT_FILENO)
(800,prop_override_true(P_MEMBERS_ONLY)
(801,prop_get_str(P_DOC_PAGER)
(802,cwd = NULL)
(803,P_ABSOLUTE_PATHS)
(804,pager ||\n\\n\\t(streq(action, "man")
(805,if (prop_has_value(P_MAKE_FILE)
(806,1)
(807,argv = dargv)
(808,case \'t\':)
(809,dargv)
(810,gflag)
(811,if (make_clean)
(812,6)
(813,\':\')
(814,cmdline)
(815,atexit(vb_fini)
(816,pfd)
(817,prop_put_ulong(P_PCMDID, getpid()
(818,proplevel)
(819,break;)
(820,P_LEAVE_ROADMAP)
(821,bsd_optarg)
(822,prop_override_str(P_SERVER, buf)
(823,(dash = strchr(ptr, \'-\')
(824,cd_to)
(825,logprop = prop_get_str(P_LOG_FILE)
(826,\'+\')
(827,rc)
(828,case \'W\':)
(829,proplevel = 0)
(830,)
(831,1)
(832,http_fini()
(833,pid)
(834,putil_free(str)
(835,cwd)
(836,pager = getenv("PAGER")
(837,ca_set_host(ca, "localhost")
(838,)
(839,pfd)
(840,make_init(exe)
(841,if (bsd_optarg && *bsd_optarg == \'+\')
(842,-1)
(843,time(NULL)
(844,)
(845,P_MAKE_DEPENDS)
(846,prop_override_str(P_ROADMAPFILE, ROADMAP_DEFAULT_NAME)
(847,pager)
(848,VB_WHY)
(849,bsd_optind)
(850,)
(851,if (!strchr(svr, \':\')
(852,rmap)
(853,P_LOG_FILE)
(854,putil_syserr(2, "fork")
(855,argc)
(856,StartTime)
(857,dash)
(858,4)
(859,1)
(860,no_server = 0)
(861,prop_is_true(P_EXECUTE_ONLY)
(862,no_server = 1)
(863,)
(864,putil_die("illegal tmp working directory: %s", cwd)
(865,pager = prop_get_str(P_DOC_PAGER)
(866,"D")
(867,P_DOWNLOAD_ONLY)
(868,cmdline)
(869,exit(rc)
(870,gflag = 0)
(871,if ((dash = strchr(ptr, \'-\')
(872,0)
(873,unlink(prop_get_str(P_LOG_FILE)
(874,cflag = 1)
(875,if (pfd[0] != STDIN_FILENO)
(876,bsd_optarg[0])
(877,)
(878,pipe(pfd)
(879,no_server)
(880,0)
(881,prop_get_str(P_LOG_FILE)
(882,0)
(883,P_SERVER)
(884,P_UPLOAD_ONLY)
(885,P_SERVER)
(886,dscript)
(887,pfd[1])
(888,util_is_tmp(cwd)
(889,if (prop_is_true(P_LOG_FILE_TEMP)
(890,strcmp(bsd_optarg, "@")
(891,0)
(892,svr)
(893,pager)
(894,argv++)
(895,"UMEM_DEBUG")
(896,rc)
(897,strstr(action, "make")
(898,argc -= bsd_optind)
(899,gflag)
(900,)
(901,pfd[0])
(902,strchr(*argv, \'=\')
(903,if (streq(action, "run")
(904,proplevel = -1)
(905,)
(906,pbase)
(907,break;)
(908,1)
(909,P_DOWNLOAD_ONLY)
(910,!util_pathcmp(action, "sh")
(911,ElapsedMinimum = prop_get_long(P_PRINT_ELAPSED)
(912,2)
(913,if (dscript)
(914,"LD_PRELOAD")
(915,)
(916,if (tee)
(917,pager)
(918,P_STRICT_UPLOAD)
(919,prop_override_str(P_WFLAG, str)
(920,P_PRINT_ELAPSED)
(921,argv)
(922,putil_getenv("UMEM_DEBUG")
(923,P_UNCOMPRESSED_TRANSFERS)
(924,putil_putenv("MALLOC_DEBUG=WATCH")
(925,lbuf)
(926,!util_pathcmp(action, "vcbuild")
(927,"unable to determine path to argv[0]\\n")
(928,dargv[5] = NULL)
(929,)
(930,str)
(931,prop_has_value(P_PROJECT_NAME)
(932,dup2(pfd[1], STDOUT_FILENO)
(933,)
(934,sizeof(buf)
(935,prop_is_true(P_GIT)
(936,(unsigned long)
(937,putil_free(rmap)
(938,)
(939,shop(ca, argv[0], gflag)
(940,)
(941,prop_put_ulong(P_STRICT_UPLOAD, 1)
(942,while (strchr(*argv, \'=\')
(943,case \'1\':)
(944,P_BASE_DIR)
(945,prop_override_str(P_MAKE_FILE, bsd_optarg)
(946,argc)
(947,ca_set_line(ca, cmdline)
(948,break;)
(949,do_action(action, argc, argv)
(950,dargv[0] = "dtrace")
(951,dargv[2] = dscript)
(952,"man")
(953,vb_fini)
(954,break;)
(955,!bsd_optarg || !strcmp(bsd_optarg, "@")
(956,prop_fini)
(957,streq(action, "man")
(958,P_MAKE_ONESHELL)
(959,cd_to)
(960,rc)
(961,P_LOG_FILE_TEMP)
(962,*pager)
(963,)
(964,&logfile)
(965,rc = shop(ca, NULL, gflag)
(966,P_LOG_FILE)
(967,ISDIGIT(dash[1])
(968,1)
(969,putil_syserr(2, prop_get_str(P_ROADMAPFILE)
(970,)
(971,case \'h\':)
(972,action)
(973,action)
(974,if ((rc = http_restart()
(975,"LD_PRELOAD=/lib/libumem.so")
(976,)
(977,"run")
(978,)
(979,cflag)
(980,prop_override_ulong(P_LOG_TIME_STAMP, 1)
(981,putil_getenv("LD_PRELOAD")
(982,!util_pathcmp(action, "sh")
(983,)
(984,1)
(985,prop_override_true(P_LEAVE_ROADMAP)
(986,redo_script = NULL)
(987,logfile)
(988,1)
(989,if (logfile)
(990,vb_addbit(VB_EXEC)
(991,dargv[5])
(992,lbuf)
(993,gflag = 1)
(994,break;)
(995,bsd_optarg)
(996,action)
(997,P_LOG_FILE)
(998,1)
(999,mon_get_roadmap()
(1000,1)
(1001,)
(1002,0)
(1003,if ((action = argv[0])
(1004,buf)
(1005,argc--)
(1006,)
(1007,prop_put_long(P_STRICT_ERROR, 1)
(1008,case \'V\':)
(1009,exit(0)
(1010,c = bsd_getopt(argc, argv, short_opts, long_opts, NULL)
(1011,argv)
(1012,break;)
(1013,!QuietMode)
(1014,tee)
(1015,asprintf(&str, "%s\\n%s", old, bsd_optarg)
(1016,tee)
(1017,logfile)
(1018,break;)
(1019,getenv("PAGER")
(1020,P_MAKE_DEPENDS)
(1021,bsd_optarg && *bsd_optarg == \'+\')
(1022,bsd_optarg)
(1023,logfile)
(1024,_usage(1)
(1025,pid = fork()
(1026,"roadmap")
(1027,strcmp(bsd_optarg, "D")
(1028,putil_getenv("LD_PRELOAD")
(1029,)
(1030,!util_pathcmp(action, "ant")
(1031,old)
(1032,P_ROADMAPFILE)
(1033,P_ROADMAPFILE)
(1034,case \'r\':)
(1035,vb_addbit(VB_WHY)
(1036,proplevel)
(1037,if ((pid = fork()
(1038,prop_get_str(P_SERVER)
(1039,VB_EXEC)
(1040,exe)
(1041,strstr(action, "make")
(1042,chdir(cd_to)
(1043,dash)
(1044,)
(1045,P_OUTPUT_FILE)
(1046,"LD_PRELOAD=watchmalloc.so.1")
(1047,break;)
(1048,0)
(1049,break;)
(1050,bsd_optarg)
(1051,prop_override_str(P_AGGREGATION_STYLE, bsd_optarg)
(1052,close(pfd[1])
(1053,rmap)
(1054,)
(1055,stderr)
(1056,exe)
(1057,c)
(1058,)
(1059,bsd_optarg++)
(1060,make_clean = 1)
(1061,pager)
(1062,)
(1063,prop_override_true(P_REUSE_ROADMAP)
(1064,action)
(1065,P_MAKE_FILE)
(1066,cd_to)
(1067,0)
(1068,)
(1069,"+ cd %s\\n")
(1070,dscript = NULL)
(1071,)
(1072,\'+\')
(1073,ca_new()
(1074,bsd_optarg)
(1075,2)
(1076,prop_override_str(P_OUTPUT_FILE, DEVNULL)
(1077,bsd_optarg)
(1078,)
(1079,P_ROADMAPFILE)
(1080,1)
(1081,putil_getenv("UMEM_DEBUG")
(1082,dargv)
(1083,*svr)
(1084,2)
(1085,)
(1086,!argv[0])
(1087,\'=\')
(1088,0)
(1089,P_STRICT_ERROR)
(1090,bsd_optarg)
(1091,NULL)
(1092,DEVNULL)
(1093,dscript)
(1094,"vcbuild")
(1095,argv)
(1096,logprop)
(1097,prop_put_str(P_PRINT_ELAPSED, "-1")
(1098,close(pfd[0])
(1099,case \'L\':)
(1100,!prop_has_value(P_MAKE_DEPENDS)
(1101,if (pager ||\n\\n\\t(streq(action, "man")
(1102,VB_WHY)
(1103,*argv)
(1104,)
(1105,break;)
(1106,2)
(1107,"MALLOC_DEBUG=WATCH")
(1108,sizeof(*dargv)
(1109,prop_has_value(P_SERVER)
(1110,)
(1111,case \'O\':)
(1112,case \'u\':)
(1113,)
(1114,"-")
(1115,buf)
(1116,*bsd_optarg == \'w\')
(1117,P_STRICT)
(1118,)
(1119,1)
(1120,rc = 0)
(1121,ptr)
(1122,close(pfd[0])
(1123,P_PRINT_ELAPSED)
(1124,pjname = putil_basename(pbase)
(1125,rc = do_action(action, argc, argv)
(1126,ROADMAP_DEFAULT_NAME)
(1127,prop_put_ulong(P_DOWNLOAD_ONLY, 2)
(1128,)
(1129,APPLICATION_NAME)
(1130,prop_has_value(P_MAKE_DEPENDS)
(1131,)
(1132,rc)
(1133,strcmp(*argv, "-G")
(1134,util_get_cwd()
(1135,logfile)
(1136,)
(1137,1)
(1138,rmap = tempnam(NULL, "rmap.")
(1139,if (!QuietMode)
(1140,prop_is_true(P_REUSE_ROADMAP)
(1141,dargv)
(1142,tee = 1)
(1143,redo_script)
(1144,case \'P\':)
(1145,)
(1146,P_DEPTH)
(1147,bsd_optarg)
(1148,*argv)
(1149,)
(1150,*dash = \'\\0\')
(1151,_print_version(bsd_optarg && bsd_optarg[0] == \'+\')
(1152,for (bsd_getopt_reset()
(1153,util_pathcmp(action, "ant")
(1154,"PAGER")
(1155,if (!(pager = getenv("PAGER")
(1156,"sh")
(1157,P_MAKE_ONESHELL)
(1158,pager)
(1159,snprintf(buf, 1024, "%s.%lu.log",\n\\n\\t\\t\\t       prop_get_str(P_APP)
(1160,)
(1161,"msbuild")
(1162,break;)
(1163,)
(1164,)
(1165,)
(1166,*argv++)
(1167,*pager == \'$\')
(1168,prop_override_ulong(P_UNCOMPRESSED_TRANSFERS, 1)
(1169,if (pbase && (pjname = putil_basename(pbase)
(1170,exe = putil_getexecpath()
(1171,prop_override_str(P_SERVER, bsd_optarg)
(1172,)
(1173,argv[4])
(1174,prop_put_str(P_PROJECT_NAME, ptr)
(1175,exe)
(1176,dargv[0])
(1177,)
(1178,)
(1179,2)
(1180,P_SERVER)
(1181,P_APP)
(1182,printf("LD_PRELOAD=%s\\n", putil_getenv("LD_PRELOAD")
(1183,1)
(1184,run_cmd(exe, (CS *)
(1185,P_SERVER)
(1186,if (!putil_is_absolute(rmap)
(1187,prop_put_str(P_WFLAG, bsd_optarg)
(1188,ptr)
(1189,)
(1190,)
(1191,putil_is_absolute(bsd_optarg)
(1192,"UMEM_DEBUG=default,verbose")
(1193,case \'A\':)
(1194,NULL)
(1195,bsd_optarg)
(1196,CSV_NULL_FIELD)
(1197,pfd[1])
(1198,"Usage: shop [-G] -C index | cmd...")
(1199,putil_die("Usage: shop [-G] -C index | cmd...")
(1200,)
(1201,pager)
(1202,short_opts =\n\\n\\t    "+1acdhl:mo:p:qrs:tuv::wxAC:DEF:GH::I:LM:O:PQRSTUV:W:XY")
(1203,P_ROADMAPFILE)
(1204,c)
(1205,NULL)
(1206,putil_strdup(pjname)
(1207,prop_override_true(P_LEAVE_ROADMAP)
(1208,DebugBreak()
(1209,putil_die("unable to determine path to argv[0]\\n")
(1210,)
(1211,rmap)
(1212,bsd_optarg)
(1213,P_AGGREGATION_STYLE)
(1214,*bsd_optarg)
(1215,code_init()
(1216,putil_syserr(2, "util_get_cwd()
(1217,bsd_optarg)
(1218,pfd[0])
(1219,prop_override_ulong(P_UPLOAD_ONLY, 1)
(1220,action)
(1221,if (proplevel >= 0)
(1222,P_PRINT_ELAPSED)
(1223,"ant")
(1224,pager = "less")
(1225,StartTime = time(NULL)
(1226,"help")
(1227,pjname)
(1228,argv)
(1229,)
(1230,putil_free(lbuf)
(1231,rmap)
(1232,pager)
(1233,\':\')
(1234,PROP_EXT)
(1235,ca = ca_new()
(1236,)
(1237,STDOUT_FILENO)
(1238,fork()
(1239,)
(1240,*argv)
(1241,rc = run_cmd(exe, (CS *)
(1242,prop_get_long(P_PRINT_ELAPSED)
(1243,if (!bsd_optarg || !strcmp(bsd_optarg, "@")
(1244,break;)
(1245,printf("MALLOC_DEBUG=%s\\n", putil_getenv("MALLOC_DEBUG")
(1246,0)
(1247,)
(1248,fprintf(stderr, "+ cd %s\\n", cd_to)
(1249,pager)
(1250,prop_override_str(P_SERVER_LOG_LEVEL, "WARN")
(1251,"-1")
(1252,http_restart()
(1253,)
(1254,action)
(1255,logprop)
(1256,bsd_getopt(argc, argv, short_opts, long_opts, NULL)
(1257,)
(1258,util_substitute_params(logprop, &logfile)
(1259,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^