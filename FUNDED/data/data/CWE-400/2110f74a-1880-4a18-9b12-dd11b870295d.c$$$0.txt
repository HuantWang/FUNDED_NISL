-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
69,70
70,71
71,72
71,73
72,73
75,76
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,73,74,79,81
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(10,22,0)
(21,22,0)
(12,25,0)
(23,33,0)
(38,22,0)
(24,31,0)
(24,20,0)
(2,3,0)
(31,33,0)
(25,10,0)
(0,6,0)
(36,31,0)
(24,34,0)
(29,36,0)
(25,31,0)
(31,24,0)
(9,36,0)
(8,31,0)
(16,10,0)
(17,4,0)
(26,10,0)
(8,33,0)
(14,15,0)
(5,8,0)
(4,35,0)
(7,22,0)
(19,8,0)
(35,4,0)
(20,24,0)
(30,35,0)
(25,11,0)
(1,32,0)
(2,15,0)
(13,31,0)
(15,2,0)
(34,24,0)
(32,28,0)
(6,31,0)
(34,4,0)
(6,33,0)
(4,34,0)
(4,35,1)
(19,36,1)
(9,29,1)
(25,12,1)
(1,37,1)
(18,25,1)
(15,14,1)
(25,10,1)
(13,27,1)
(35,30,1)
(36,9,1)
(16,26,1)
(37,27,1)
(6,31,1)
(34,4,1)
(2,15,1)
(8,31,1)
(29,31,1)
(6,0,1)
(30,17,1)
(14,36,1)
(17,13,1)
(25,31,1)
(0,8,1)
(10,16,1)
(18,32,1)
(8,5,1)
(31,24,1)
(5,19,1)
(24,34,1)
(36,31,1)
(12,37,1)
(27,10,1)
(32,1,1)
(19,2,1)
(24,20,1)
(37,6,1)
(34,4,2)
(5,27,2)
(1,37,2)
(36,31,2)
(13,27,2)
(14,36,2)
(2,36,2)
(4,27,2)
(0,27,2)
(35,27,2)
(25,37,2)
(29,27,2)
(24,27,2)
(17,27,2)
(24,20,2)
(25,31,2)
(2,15,2)
(6,27,2)
(36,27,2)
(31,27,2)
(31,24,2)
(6,31,2)
(34,27,2)
(30,27,2)
(8,27,2)
(4,35,2)
(8,31,2)
(15,36,2)
(24,34,2)
(25,10,2)
(9,27,2)
(32,37,2)
(12,37,2)
(19,27,2)
-----------------------------------
(0,data)
(1,"Benign, fixed string")
(2,exit(-1)
(3,)
(4,100*sizeof(char)
(5,"A String")
(6,printLine(data)
(7,data)
(8,strcpy(data, "A String")
(9,NULL)
(10,data = NULL)
(11,)
(12,data)
(13,data)
(14,1)
(15,-1)
(16,NULL)
(17,100)
(18,RET)
(19,data)
(20,char *)
(21,if(STATIC_CONST_TRUE)
(22,)
(23,if (data == NULL)
(24,(char *)
(25,free(data)
(26,data)
(27,STATIC_CONST_TRUE)
(28,)
(29,data)
(30,char)
(31,data = (char *)
(32,printLine("Benign, fixed string")
(33,)
(34,malloc(100*sizeof(char)
(35,sizeof(char)
(36,data == NULL)
(37,STATIC_CONST_FALSE)
(38,if(STATIC_CONST_FALSE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^