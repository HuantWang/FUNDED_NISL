-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
68,71
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
76,77
78,79
78,80
79,80
81,82
81,83
83,84
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
102,104
102,105
103,104
104,105
106,107
108,109
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,72,75,77,80,82,85,86,91,92,93,97,100,101,105,107,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
70,71
70,72
81,82
81,83
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int_calloc_12_bad()
CWE401_Memory_Leak__int_calloc_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(19,10,0)
(14,51,0)
(42,24,0)
(55,18,0)
(45,15,0)
(16,31,0)
(31,1,0)
(32,50,0)
(38,30,0)
(26,30,0)
(18,16,0)
(1,31,0)
(35,24,0)
(30,47,0)
(30,26,0)
(52,29,0)
(21,47,0)
(41,2,0)
(48,26,0)
(46,18,0)
(25,52,0)
(17,11,0)
(8,21,0)
(16,11,0)
(13,20,0)
(50,11,0)
(31,44,0)
(44,31,0)
(2,50,0)
(33,0,0)
(2,17,0)
(43,1,0)
(3,2,0)
(36,16,0)
(15,33,0)
(18,50,0)
(10,57,0)
(10,47,0)
(33,15,0)
(54,20,0)
(2,16,0)
(27,47,0)
(43,5,0)
(5,43,0)
(34,43,0)
(30,38,0)
(9,10,0)
(26,51,0)
(47,39,0)
(24,47,0)
(56,39,0)
(4,24,0)
(47,30,0)
(52,16,0)
(49,5,0)
(22,57,0)
(57,39,0)
(17,2,0)
(24,35,0)
(12,28,0)
(28,20,0)
(51,26,0)
(37,20,0)
(23,28,0)
(24,57,0)
(52,47,0)
(31,16,0)
(1,43,0)
(35,39,0)
(7,21,0)
(30,26,1)
(33,15,1)
(1,43,1)
(5,49,1)
(14,48,1)
(10,9,1)
(19,33,1)
(2,50,1)
(2,16,1)
(12,23,1)
(52,47,1)
(57,22,1)
(34,36,1)
(3,50,1)
(19,21,1)
(28,12,1)
(4,57,1)
(22,10,1)
(15,45,1)
(53,52,1)
(2,41,1)
(31,1,1)
(49,34,1)
(24,42,1)
(46,55,1)
(47,30,1)
(18,16,1)
(24,47,1)
(40,17,1)
(40,35,1)
(31,44,1)
(7,8,1)
(42,4,1)
(10,47,1)
(21,7,1)
(52,25,1)
(35,24,1)
(9,19,1)
(21,47,1)
(58,28,1)
(52,16,1)
(48,27,1)
(53,40,1)
(55,16,1)
(41,3,1)
(8,47,1)
(32,18,1)
(51,14,1)
(45,21,1)
(24,57,1)
(30,38,1)
(26,51,1)
(43,5,1)
(18,46,1)
(17,2,1)
(16,31,1)
(25,40,1)
(27,58,1)
(36,58,1)
(50,32,1)
(57,58,2)
(30,26,2)
(32,58,2)
(43,58,2)
(15,21,2)
(24,47,2)
(8,58,2)
(1,43,2)
(25,40,2)
(35,58,2)
(52,16,2)
(30,38,2)
(33,15,2)
(35,24,2)
(19,58,2)
(17,58,2)
(26,58,2)
(9,58,2)
(43,5,2)
(48,58,2)
(2,16,2)
(21,58,2)
(17,2,2)
(10,58,2)
(55,58,2)
(33,21,2)
(30,58,2)
(24,57,2)
(51,58,2)
(49,58,2)
(36,58,2)
(2,50,2)
(26,51,2)
(16,58,2)
(22,58,2)
(18,58,2)
(47,30,2)
(16,31,2)
(45,21,2)
(47,58,2)
(3,58,2)
(4,58,2)
(42,58,2)
(31,58,2)
(31,1,2)
(50,58,2)
(24,58,2)
(14,58,2)
(46,58,2)
(34,58,2)
(31,44,2)
(10,47,2)
(2,58,2)
(18,16,2)
(41,58,2)
(1,58,2)
(27,58,2)
(7,58,2)
(21,47,2)
(52,40,2)
(5,58,2)
(52,47,2)
-----------------------------------
(0,)
(1,ALLOCA(100*sizeof(int)
(2,data[0])
(3,data)
(4,data)
(5,sizeof(int)
(6, sizeof(int)
(7,NULL)
(8,data)
(9,0)
(10,data[0])
(11,)
(12,NULL)
(13,if(globalReturnsTrueOrFalse()
(14,int)
(15,-1)
(16,data = (int *)
(17,printIntLine(data[0])
(18,data[0])
(19,data)
(20,)
(21,data == NULL)
(22,5)
(23,data)
(24,data[0])
(25,data)
(26,calloc(100, sizeof(int)
(27,data)
(28,data = NULL)
(29,)
(30,(int *)
(31,(int *)
(32,5)
(33,exit(-1)
(34,100)
(35,printIntLine(data[0])
(36,data)
(37,data)
(38,int *)
(39,)
(40,globalReturnsTrueOrFalse()
(41,0)
(42,0)
(43,100*sizeof(int)
(44,int *)
(45,1)
(46,0)
(47,data = (int *)
(48,100)
(49,int)
(50,data[0] = 5)
(51,sizeof(int)
(52,free(data)
(53,RET)
(54,if(globalReturnsTrueOrFalse()
(55,data)
(56,if (data == NULL)
(57,data[0] = 5)
(58,globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^