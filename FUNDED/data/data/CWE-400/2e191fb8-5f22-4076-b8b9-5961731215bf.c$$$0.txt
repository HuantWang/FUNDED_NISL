-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_13_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
55,56
56,57
58,59
59,60
59,61
61,62
61,63
61,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
70,73
71,72
73,74
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
88,89
88,90
88,91
88,92
89,90
90,91
90,92
91,92
94,95
94,96
95,96
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
113,114
115,116
115,117
115,118
115,119
115,120
116,117
118,119
120,121
121,122
121,123
124,125
124,126
125,126
127,128
129,130
131,132
132,133
133,134
133,135
134,135
137,138
137,139
138,139
140,141
141,142
142,143
142,144
143,144
145,146
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,43,45,47,51,53,54,57,60,62,63,65,69,72,74,75,79,81,86,87,92,93,96,100,101,103,106,112,114,117,119,122,123,126,128,130,135,136,139,144,146
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
67,68
67,69
77,78
77,79
90,91
90,92
94,95
94,96
109,110
109,111
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_13_bad(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_13_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_13_bad
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(61,56,0)
(33,45,0)
(21,70,0)
(45,33,0)
(10,17,0)
(46,67,0)
(75,38,0)
(50,32,0)
(54,21,0)
(6,7,0)
(12,22,0)
(45,18,0)
(29,35,0)
(36,56,0)
(39,41,0)
(20,15,0)
(27,70,0)
(16,67,0)
(5,10,0)
(24,37,0)
(73,74,0)
(77,66,0)
(66,74,0)
(40,33,0)
(0,57,0)
(18,45,0)
(1,28,0)
(25,66,0)
(42,21,0)
(44,57,0)
(21,22,0)
(43,35,0)
(76,45,0)
(30,57,0)
(62,71,0)
(3,7,0)
(4,49,0)
(37,10,0)
(22,21,0)
(26,57,0)
(74,57,0)
(51,19,0)
(11,67,0)
(63,49,0)
(21,48,0)
(31,10,0)
(48,66,0)
(21,6,0)
(41,48,0)
(65,28,0)
(56,67,0)
(6,21,0)
(49,57,0)
(64,52,0)
(68,61,0)
(53,57,0)
(52,14,0)
(7,6,0)
(33,35,0)
(32,60,0)
(2,57,0)
(71,48,0)
(57,59,0)
(48,57,0)
(66,48,0)
(45,56,0)
(71,58,0)
(13,19,0)
(69,29,0)
(37,56,0)
(72,41,0)
(47,35,0)
(70,21,0)
(55,15,0)
(8,48,0)
(10,37,0)
(19,57,0)
(9,74,0)
(56,61,0)
(50,6,1)
(41,39,1)
(23,15,1)
(19,51,1)
(55,20,1)
(45,76,1)
(66,77,1)
(3,33,1)
(47,41,1)
(69,6,1)
(69,32,1)
(7,3,1)
(21,48,1)
(68,36,1)
(52,64,1)
(15,55,1)
(47,52,1)
(77,25,1)
(1,56,1)
(24,31,1)
(41,48,1)
(71,48,1)
(63,19,1)
(62,34,1)
(40,29,1)
(45,18,1)
(76,40,1)
(21,22,1)
(34,33,1)
(51,13,1)
(43,47,1)
(29,69,1)
(35,43,1)
(37,24,1)
(72,48,1)
(74,9,1)
(33,35,1)
(49,4,1)
(70,27,1)
(28,65,1)
(54,7,1)
(6,21,1)
(21,42,1)
(27,22,1)
(12,54,1)
(20,10,1)
(21,70,1)
(22,12,1)
(40,35,1)
(42,70,1)
(48,66,1)
(73,49,1)
(56,61,1)
(5,28,1)
(10,37,1)
(13,15,1)
(66,74,1)
(4,63,1)
(61,68,1)
(64,41,1)
(32,50,1)
(71,62,1)
(39,72,1)
(20,28,1)
(31,5,1)
(25,8,1)
(29,35,1)
(37,56,1)
(23,34,1)
(9,73,1)
(65,1,1)
(33,45,1)
(6,7,1)
(45,56,1)
(23,71,1)
(8,74,1)
(10,28,2)
(45,56,2)
(29,35,2)
(72,15,2)
(48,15,2)
(32,6,2)
(47,15,2)
(6,7,2)
(37,56,2)
(6,21,2)
(21,70,2)
(8,15,2)
(49,15,2)
(70,33,2)
(9,15,2)
(45,33,2)
(7,33,2)
(27,33,2)
(50,6,2)
(40,15,2)
(48,66,2)
(45,18,2)
(33,33,2)
(66,15,2)
(10,37,2)
(64,41,2)
(76,15,2)
(35,15,2)
(4,15,2)
(13,15,2)
(25,15,2)
(41,48,2)
(33,15,2)
(69,33,2)
(3,33,2)
(5,28,2)
(54,33,2)
(29,33,2)
(42,33,2)
(33,45,2)
(21,33,2)
(21,48,2)
(73,15,2)
(56,61,2)
(76,33,2)
(71,34,2)
(6,33,2)
(34,15,2)
(71,48,2)
(24,28,2)
(31,28,2)
(74,15,2)
(19,15,2)
(22,33,2)
(33,35,2)
(45,15,2)
(51,15,2)
(37,28,2)
(63,15,2)
(52,41,2)
(66,74,2)
(41,15,2)
(77,15,2)
(39,15,2)
(21,22,2)
(40,33,2)
(43,15,2)
(12,33,2)
(62,34,2)
-----------------------------------
(0,for (i = 0; i < (size_t)
(1,GLOBAL_CONST_FIVE)
(2,if (pFile)
(3,SENTENCE)
(4,NULL)
(5,stdin)
(6,strlen(SENTENCE)
(7,strlen(SENTENCE)
(8,pFile)
(9,"output_bad.txt")
(10,fscanf(stdin, "%d", &count)
(11,if(GLOBAL_CONST_FIVE==5)
(12,char)
(13,i)
(14,)
(15,GLOBAL_CONST_FIVE==5)
(16,count)
(17,)
(18,size_t)
(19,i = 0)
(20,GLOBAL_CONST_FIVE)
(21,fwrite(SENTENCE, sizeof(char)
(22,sizeof(char)
(23,RET)
(24,count)
(25,filename)
(26,pFile)
(27,SENTENCE)
(28,GLOBAL_CONST_FIVE==5)
(29,i++)
(30,if (pFile == NULL)
(31,"%d")
(32,exit(1)
(33,i < (size_t)
(34,pFile)
(35,i = 0)
(36,count)
(37,&count)
(38,)
(39,NULL)
(40,i)
(41,pFile == NULL)
(42,pFile)
(43,0)
(44,filename)
(45,(size_t)
(46,if(GLOBAL_CONST_FIVE==5)
(47,i)
(48,pFile = fopen(filename, "w+")
(49,*pFile = NULL)
(50,1)
(51,0)
(52,exit(1)
(53,i)
(54,SENTENCE)
(55,5)
(56,count = -1)
(57,)
(58,)
(59,)
(60,)
(61,-1)
(62,pFile)
(63,pFile)
(64,1)
(65,5)
(66,fopen(filename, "w+")
(67,)
(68,1)
(69,i)
(70,strlen(SENTENCE)
(71,fclose(pFile)
(72,pFile)
(73,filename)
(74,*filename = "output_bad.txt")
(75,if (strlen(SENTENCE)
(76,count)
(77,"w+")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^