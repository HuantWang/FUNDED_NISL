-----label-----
0
-----code-----
static int ravb_ring_init(struct net_device *ndev, int q)
{
	struct ravb_private *priv = netdev_priv(ndev);
	int num_tx_desc = priv->num_tx_desc;
	struct sk_buff *skb;
	int ring_size;
	int i;

	priv->rx_buf_sz = (ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +
		ETH_HLEN + VLAN_HLEN + sizeof(__sum16);

	/* Allocate RX and TX skb rings */
	priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],
				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);
	priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],
				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);
	if (!priv->rx_skb[q] || !priv->tx_skb[q])
		goto error;

	for (i = 0; i < priv->num_rx_ring[q]; i++) {
		skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1);
		if (!skb)
			goto error;
		ravb_set_buffer_align(skb);
		priv->rx_skb[q][i] = skb;
	}

	if (num_tx_desc > 1) {
		/* Allocate rings for the aligned buffers */
		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +
					    DPTR_ALIGN - 1, GFP_KERNEL);
		if (!priv->tx_align[q])
			goto error;
	}

	/* Allocate all RX descriptors. */
	ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);
	priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,
					      &priv->rx_desc_dma[q],
					      GFP_KERNEL);
	if (!priv->rx_ring[q])
		goto error;

	priv->dirty_rx[q] = 0;

	/* Allocate all TX descriptors. */
	ring_size = sizeof(struct ravb_tx_desc) *
		    (priv->num_tx_ring[q] * num_tx_desc + 1);
	priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,
					      &priv->tx_desc_dma[q],
					      GFP_KERNEL);
	if (!priv->tx_ring[q])
		goto error;

	return 0;

error:
	ravb_ring_free(ndev, q);

	return -ENOMEM;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
49,50
51,52
52,53
52,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
64,66
65,66
66,67
66,68
66,69
67,68
67,69
68,69
68,70
69,70
73,74
75,76
75,77
76,77
79,80
81,82
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
95,96
97,98
97,99
97,100
97,101
98,99
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
109,110
110,111
110,112
111,112
111,113
112,113
115,116
117,118
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
126,127
128,129
128,130
128,131
128,132
129,130
131,132
131,133
132,133
132,134
133,134
136,137
138,139
139,140
140,141
141,142
141,143
142,143
142,144
143,144
146,147
148,149
150,151
150,152
151,152
151,153
152,153
153,154
153,155
154,155
154,156
155,156
158,159
160,161
161,162
161,163
162,163
162,164
163,164
166,167
168,169
170,171
170,172
170,173
170,174
171,172
172,173
172,174
173,174
176,177
176,178
177,178
179,180
179,181
180,181
180,182
181,182
184,185
186,187
187,188
189,190
189,191
189,192
189,193
190,191
191,192
191,193
192,193
194,195
194,196
194,197
195,196
197,198
199,200
199,201
200,201
200,202
201,202
201,203
202,203
205,206
208,209
208,210
209,210
210,211
212,213
214,215
215,216
215,217
216,217
218,219
220,221
221,222
221,223
222,223
222,224
223,224
223,225
224,225
224,226
225,226
228,229
230,231
232,233
234,235
234,236
235,236
235,237
236,237
239,240
239,241
240,241
241,242
241,243
242,243
242,244
243,244
243,245
244,245
247,248
249,250
249,251
249,252
250,251
252,253
252,254
253,254
253,255
254,255
254,256
255,256
257,258
257,259
258,259
258,260
259,260
262,263
264,265
267,268
269,270
269,271
270,271
271,272
271,273
272,273
272,274
273,274
276,277
278,279
280,281
281,282
281,283
282,283
284,285
284,286
285,286
286,287
286,288
287,288
290,291
291,292
291,293
292,293
292,294
293,294
293,295
294,295
297,298
300,301
301,302
301,303
302,303
302,304
303,304
303,305
304,305
307,308
309,310
309,311
309,312
309,313
309,314
310,311
312,313
312,314
313,314
313,315
314,315
318,319
320,321
321,322
321,323
322,323
322,324
323,324
326,327
328,329
330,331
330,332
331,332
332,333
332,334
333,334
333,335
334,335
337,338
339,340
341,342
342,343
342,344
343,344
343,345
344,345
344,346
345,346
348,349
351,352
352,353
352,354
353,354
355,356
355,357
356,357
357,358
357,359
358,359
361,362
362,363
362,364
363,364
363,365
364,365
364,366
365,366
365,367
366,367
369,370
371,372
374,375
375,376
375,377
376,377
376,378
377,378
377,379
378,379
381,382
383,384
383,385
383,386
383,387
383,388
384,385
386,387
386,388
387,388
387,389
388,389
392,393
394,395
395,396
395,397
396,397
396,398
397,398
400,401
402,403
404,405
404,406
405,406
406,407
406,408
407,408
407,409
408,409
411,412
413,414
415,416
417,418
417,419
419,420
420,421
420,422
420,423
421,422
423,424
425,426
427,428
428,429
429,430
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,31,33,37,38,42,44,45,48,50,53,55,60,61,70,71,72,74,77,78,80,82,86,87,93,94,96,99,103,104,106,113,114,116,118,124,125,127,130,134,135,137,144,145,147,149,156,157,159,164,165,167,169,174,175,178,182,183,185,188,193,196,198,203,204,206,207,211,213,217,219,226,227,229,231,233,237,238,245,246,248,251,256,260,261,263,265,266,268,274,275,277,279,283,288,289,295,296,298,299,305,306,308,311,315,316,317,319,324,325,327,329,335,336,338,340,346,347,349,350,354,359,360,367,368,370,372,373,379,380,382,385,389,390,391,393,398,399,401,403,409,410,412,414,416,418,422,424,426,430
-----computeFrom-----
57,58
57,59
62,63
62,64
63,64
63,65
64,65
64,66
67,68
67,69
89,90
89,91
120,121
120,122
151,152
151,153
172,173
172,174
176,177
176,178
191,192
191,193
199,200
199,201
200,201
200,202
221,222
221,223
235,236
235,237
241,242
241,243
252,253
252,254
253,254
253,255
254,255
254,256
281,282
281,283
284,285
284,286
291,292
291,293
301,302
301,303
342,343
342,344
352,353
352,354
355,356
355,357
362,363
362,364
363,364
363,365
375,376
375,377
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static int ravb_ring_init(struct net_device *ndev, int q){	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	struct sk_buff *skb;	int ring_size;	int i;	priv->rx_buf_sz = (ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN + VLAN_HLEN + sizeof(__sum16);	/* Allocate RX and TX skb rings */	priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);	priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);	if (!priv->rx_skb[q] || !priv->tx_skb[q])		goto error;	for (i = 0; i < priv->num_rx_ring[q]; i++) {		skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}	if (num_tx_desc > 1) {		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}	/* Allocate all RX descriptors. */	ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);	priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL);	if (!priv->rx_ring[q])		goto error;	priv->dirty_rx[q] = 0;	/* Allocate all TX descriptors. */	ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1);	priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL);	if (!priv->tx_ring[q])		goto error;	return 0;error:	ravb_ring_free(ndev, q);	return -ENOMEM;}
static int
ravb_ring_init(struct net_device *ndev, int q)
ravb_ring_init
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
int q
int
q
q
{	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	struct sk_buff *skb;	int ring_size;	int i;	priv->rx_buf_sz = (ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN + VLAN_HLEN + sizeof(__sum16);	/* Allocate RX and TX skb rings */	priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);	priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);	if (!priv->rx_skb[q] || !priv->tx_skb[q])		goto error;	for (i = 0; i < priv->num_rx_ring[q]; i++) {		skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}	if (num_tx_desc > 1) {		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}	/* Allocate all RX descriptors. */	ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);	priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL);	if (!priv->rx_ring[q])		goto error;	priv->dirty_rx[q] = 0;	/* Allocate all TX descriptors. */	ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1);	priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL);	if (!priv->tx_ring[q])		goto error;	return 0;error:	ravb_ring_free(ndev, q);	return -ENOMEM;}
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private
ravb_private
*priv = netdev_priv(ndev)
*
priv
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
int num_tx_desc = priv->num_tx_desc;
int num_tx_desc = priv->num_tx_desc;
int
num_tx_desc = priv->num_tx_desc
num_tx_desc
= priv->num_tx_desc
priv->num_tx_desc
priv
priv
num_tx_desc
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
int ring_size;
int ring_size;
int
ring_size
ring_size
int i;
int i;
int
i
i
priv->rx_buf_sz = (ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN + VLAN_HLEN + sizeof(__sum16);
priv->rx_buf_sz = (ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN + VLAN_HLEN + sizeof(__sum16)
priv->rx_buf_sz
priv
priv
rx_buf_sz
(ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN + VLAN_HLEN + sizeof(__sum16)
(ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN + VLAN_HLEN
(ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu) +		ETH_HLEN
(ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu)
ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu
ndev->mtu <= 1492
ndev->mtu
ndev
ndev
mtu
1492
PKT_BUF_SZ
PKT_BUF_SZ
ndev->mtu
ndev
ndev
mtu
ETH_HLEN
ETH_HLEN
VLAN_HLEN
VLAN_HLEN
sizeof(__sum16)
__sum16
__sum16
__sum16

priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL);
priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL)
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
kcalloc(priv->num_rx_ring[q],				  sizeof(*priv->rx_skb[q]), GFP_KERNEL)
kcalloc
kcalloc
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
sizeof(*priv->rx_skb[q])
(*priv->rx_skb[q])
*priv->rx_skb[q]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
GFP_KERNEL
GFP_KERNEL
priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL);
priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL)
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
kcalloc(priv->num_tx_ring[q],				  sizeof(*priv->tx_skb[q]), GFP_KERNEL)
kcalloc
kcalloc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
sizeof(*priv->tx_skb[q])
(*priv->tx_skb[q])
*priv->tx_skb[q]
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
GFP_KERNEL
GFP_KERNEL
if (!priv->rx_skb[q] || !priv->tx_skb[q])		goto error;
!priv->rx_skb[q] || !priv->tx_skb[q]
!priv->rx_skb[q]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
!priv->tx_skb[q]
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
goto error;
error
for (i = 0; i < priv->num_rx_ring[q]; i++) {		skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
{		skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1);		if (!skb)			goto error;		ravb_set_buffer_align(skb);		priv->rx_skb[q][i] = skb;	}
skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1);
skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1)
skb
skb
netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1)
netdev_alloc_skb
netdev_alloc_skb
ndev
ndev
priv->rx_buf_sz + RAVB_ALIGN - 1
priv->rx_buf_sz + RAVB_ALIGN
priv->rx_buf_sz
priv
priv
rx_buf_sz
RAVB_ALIGN
RAVB_ALIGN
1
if (!skb)			goto error;
!skb
skb
skb
goto error;
error
ravb_set_buffer_align(skb);
ravb_set_buffer_align(skb)
ravb_set_buffer_align
ravb_set_buffer_align
skb
skb
priv->rx_skb[q][i] = skb;
priv->rx_skb[q][i] = skb
priv->rx_skb[q][i]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
i
i
skb
skb
if (num_tx_desc > 1) {		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}
num_tx_desc > 1
num_tx_desc
num_tx_desc
1
{		/* Allocate rings for the aligned buffers */		priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);		if (!priv->tx_align[q])			goto error;	}
priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL);
priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL)
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1, GFP_KERNEL)
kmalloc
kmalloc
DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN - 1
DPTR_ALIGN * priv->num_tx_ring[q] +					    DPTR_ALIGN
DPTR_ALIGN * priv->num_tx_ring[q]
DPTR_ALIGN
DPTR_ALIGN
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
DPTR_ALIGN
DPTR_ALIGN
1
GFP_KERNEL
GFP_KERNEL
if (!priv->tx_align[q])			goto error;
!priv->tx_align[q]
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
goto error;
error
ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1);
ring_size = sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1)
ring_size
ring_size
sizeof(struct ravb_ex_rx_desc) * (priv->num_rx_ring[q] + 1)
sizeof(struct ravb_ex_rx_desc)
struct ravb_ex_rx_desc
struct ravb_ex_rx_desc
ravb_ex_rx_desc

(priv->num_rx_ring[q] + 1)
priv->num_rx_ring[q] + 1
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
1
priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL);
priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL)
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->rx_desc_dma[q],					      GFP_KERNEL)
dma_alloc_coherent
dma_alloc_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
&priv->rx_desc_dma[q]
priv->rx_desc_dma[q]
priv->rx_desc_dma
priv
priv
rx_desc_dma
q
q
GFP_KERNEL
GFP_KERNEL
if (!priv->rx_ring[q])		goto error;
!priv->rx_ring[q]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
goto error;
error
priv->dirty_rx[q] = 0;
priv->dirty_rx[q] = 0
priv->dirty_rx[q]
priv->dirty_rx
priv
priv
dirty_rx
q
q
0
ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1);
ring_size = sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1)
ring_size
ring_size
sizeof(struct ravb_tx_desc) *		    (priv->num_tx_ring[q] * num_tx_desc + 1)
sizeof(struct ravb_tx_desc)
struct ravb_tx_desc
struct ravb_tx_desc
ravb_tx_desc

(priv->num_tx_ring[q] * num_tx_desc + 1)
priv->num_tx_ring[q] * num_tx_desc + 1
priv->num_tx_ring[q] * num_tx_desc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
num_tx_desc
num_tx_desc
1
priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL);
priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL)
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
dma_alloc_coherent(ndev->dev.parent, ring_size,					      &priv->tx_desc_dma[q],					      GFP_KERNEL)
dma_alloc_coherent
dma_alloc_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
&priv->tx_desc_dma[q]
priv->tx_desc_dma[q]
priv->tx_desc_dma
priv
priv
tx_desc_dma
q
q
GFP_KERNEL
GFP_KERNEL
if (!priv->tx_ring[q])		goto error;
!priv->tx_ring[q]
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
goto error;
error
return 0;
0
error:	ravb_ring_free(ndev, q);
error
ravb_ring_free(ndev, q);
ravb_ring_free(ndev, q)
ravb_ring_free
ravb_ring_free
ndev
ndev
q
q
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
-----joern-----
(108,25,0)
(133,136,0)
(49,104,0)
(221,263,0)
(67,18,0)
(186,248,0)
(85,36,0)
(18,67,0)
(249,216,0)
(36,146,0)
(213,170,0)
(168,192,0)
(44,37,0)
(174,172,0)
(48,45,0)
(85,216,0)
(127,139,0)
(39,162,0)
(252,233,0)
(207,131,0)
(232,228,0)
(200,66,0)
(237,186,0)
(222,26,0)
(193,216,0)
(161,22,0)
(130,204,0)
(234,216,0)
(37,24,0)
(159,213,0)
(210,242,0)
(94,256,0)
(256,216,0)
(55,0,0)
(170,228,0)
(42,71,0)
(139,172,0)
(263,216,0)
(128,102,0)
(166,13,0)
(107,87,0)
(248,106,0)
(248,104,0)
(57,170,0)
(198,228,0)
(220,72,0)
(179,117,0)
(188,231,0)
(0,180,0)
(36,85,0)
(36,122,0)
(105,241,0)
(163,56,0)
(237,192,0)
(17,216,0)
(246,150,0)
(121,213,0)
(162,146,0)
(12,96,0)
(118,219,0)
(219,192,0)
(219,53,0)
(75,85,0)
(173,212,0)
(26,175,0)
(240,193,0)
(132,160,0)
(78,59,0)
(47,192,0)
(83,56,0)
(200,92,0)
(7,136,0)
(199,216,0)
(116,111,0)
(201,79,0)
(2,133,0)
(143,23,0)
(233,122,0)
(181,256,0)
(165,146,0)
(233,192,0)
(242,215,0)
(66,255,0)
(24,37,0)
(41,106,0)
(241,37,0)
(53,219,0)
(37,241,0)
(25,192,0)
(239,234,0)
(31,215,0)
(215,152,0)
(101,79,0)
(76,200,0)
(131,207,0)
(186,237,0)
(126,216,0)
(160,132,0)
(200,105,0)
(185,214,0)
(165,199,0)
(199,165,0)
(1,233,0)
(133,216,0)
(233,92,0)
(134,78,0)
(106,248,0)
(214,255,0)
(231,4,0)
(79,201,0)
(80,152,0)
(181,146,0)
(175,26,0)
(11,192,0)
(100,216,0)
(4,236,0)
(215,13,0)
(60,63,0)
(222,146,0)
(183,181,0)
(131,224,0)
(120,229,0)
(66,263,0)
(8,36,0)
(70,144,0)
(191,216,0)
(95,192,0)
(245,229,0)
(183,44,0)
(36,241,0)
(24,146,0)
(241,192,0)
(92,193,0)
(71,192,0)
(70,188,0)
(193,92,0)
(63,140,0)
(16,248,0)
(197,152,0)
(235,192,0)
(96,131,0)
(213,121,0)
(202,193,0)
(181,183,0)
(206,0,0)
(185,165,0)
(53,117,0)
(87,148,0)
(53,22,0)
(233,105,0)
(1,200,0)
(150,222,0)
(140,63,0)
(34,199,0)
(123,216,0)
(255,192,0)
(80,204,0)
(229,216,0)
(182,70,0)
(110,157,0)
(67,169,0)
(87,71,0)
(229,120,0)
(255,214,0)
(61,78,0)
(104,172,0)
(92,146,0)
(157,162,0)
(158,121,0)
(233,123,0)
(176,106,0)
(40,120,0)
(82,192,0)
(209,160,0)
(73,229,0)
(99,192,0)
(144,216,0)
(238,234,0)
(30,160,0)
(26,222,0)
(68,105,0)
(204,80,0)
(32,25,0)
(33,126,0)
(59,186,0)
(216,192,0)
(112,37,0)
(148,87,0)
(187,263,0)
(20,80,0)
(153,14,0)
(15,256,0)
(93,144,0)
(171,97,0)
(120,146,0)
(52,87,0)
(139,155,0)
(105,146,0)
(86,180,0)
(90,97,0)
(217,181,0)
(200,122,0)
(156,122,0)
(86,25,0)
(174,261,0)
(135,192,0)
(222,241,0)
(27,231,0)
(259,214,0)
(0,216,0)
(132,146,0)
(86,117,0)
(200,192,0)
(54,126,0)
(170,213,0)
(38,171,0)
(6,131,0)
(122,228,0)
(216,111,0)
(214,261,0)
(233,66,0)
(56,163,0)
(190,23,0)
(63,146,0)
(227,17,0)
(260,157,0)
(62,261,0)
(154,61,0)
(184,139,0)
(261,174,0)
(157,216,0)
(242,13,0)
(121,216,0)
(149,192,0)
(234,239,0)
(109,45,0)
(51,234,0)
(84,174,0)
(249,25,0)
(214,219,0)
(131,96,0)
(239,146,0)
(233,97,0)
(231,132,0)
(141,123,0)
(132,231,0)
(72,67,0)
(211,23,0)
(167,191,0)
(180,146,0)
(111,172,0)
(180,86,0)
(150,216,0)
(163,212,0)
(224,72,0)
(3,121,0)
(250,129,0)
(166,215,0)
(88,191,0)
(65,133,0)
(77,174,0)
(87,155,0)
(126,24,0)
(67,72,0)
(256,181,0)
(136,133,0)
(21,13,0)
(129,146,0)
(24,126,0)
(106,41,0)
(191,63,0)
(247,92,0)
(188,192,0)
(180,0,0)
(104,248,0)
(117,86,0)
(142,20,0)
(236,4,0)
(81,196,0)
(143,56,0)
(111,216,0)
(14,215,0)
(212,173,0)
(233,70,0)
(125,123,0)
(195,96,0)
(263,66,0)
(100,129,0)
(91,24,0)
(96,216,0)
(239,169,0)
(113,204,0)
(212,163,0)
(152,215,0)
(117,53,0)
(59,78,0)
(205,41,0)
(28,216,0)
(20,237,0)
(79,17,0)
(92,194,0)
(136,146,0)
(208,196,0)
(122,166,0)
(186,59,0)
(155,139,0)
(63,191,0)
(46,41,0)
(5,66,0)
(196,146,0)
(162,194,0)
(89,249,0)
(129,11,0)
(152,80,0)
(23,143,0)
(72,224,0)
(196,192,0)
(35,169,0)
(74,100,0)
(200,129,0)
(50,252,0)
(29,18,0)
(148,120,0)
(171,216,0)
(137,59,0)
(140,175,0)
(163,71,0)
(131,146,0)
(45,105,0)
(20,216,0)
(196,172,0)
(136,236,0)
(123,237,0)
(56,143,0)
(233,129,0)
(97,146,0)
(251,166,0)
(248,186,0)
(9,165,0)
(147,171,0)
(97,224,0)
(236,136,0)
(162,157,0)
(151,144,0)
(261,214,0)
(45,216,0)
(200,123,0)
(200,70,0)
(71,163,0)
(105,45,0)
(43,17,0)
(164,20,0)
(115,104,0)
(194,192,0)
(79,146,0)
(63,188,0)
(200,97,0)
(218,85,0)
(79,255,0)
(17,79,0)
(169,67,0)
(103,249,0)
(162,189,0)
(143,146,0)
(114,228,0)
(145,155,0)
(203,114,0)
(165,185,0)
(23,216,0)
(144,70,0)
(97,171,0)
(41,172,0)
(226,214,0)
(225,239,0)
(87,194,0)
(120,148,0)
(4,231,0)
(129,100,0)
(257,199,0)
(169,239,0)
(78,61,0)
(223,11,0)
(175,140,0)
(155,87,0)
(22,161,0)
(122,36,0)
(58,143,0)
(262,132,0)
(231,188,0)
(119,192,0)
(124,192,0)
(177,100,0)
(44,183,0)
(152,172,0)
(64,18,0)
(222,150,0)
(37,44,0)
(213,146,0)
(70,146,0)
(25,249,0)
(22,53,0)
(214,185,0)
(80,20,0)
(243,108,0)
(244,192,0)
(178,150,0)
(66,146,0)
(230,108,0)
(189,162,0)
(69,222,0)
(160,216,0)
(98,180,0)
(19,86,0)
(224,102,0)
(194,87,0)
(87,148,1)
(81,10,1)
(110,260,1)
(50,196,1)
(129,146,1)
(37,24,1)
(44,183,1)
(147,108,1)
(249,89,1)
(131,224,1)
(236,136,1)
(162,39,1)
(256,216,1)
(115,49,1)
(45,109,1)
(181,217,1)
(157,110,1)
(111,116,1)
(88,167,1)
(41,172,1)
(106,176,1)
(233,122,1)
(176,41,1)
(233,123,1)
(206,22,1)
(210,14,1)
(18,64,1)
(73,245,1)
(27,4,1)
(165,9,1)
(22,161,1)
(129,250,1)
(209,70,1)
(174,77,1)
(123,125,1)
(79,101,1)
(43,255,1)
(152,80,1)
(224,72,1)
(167,26,1)
(42,207,1)
(65,2,1)
(86,180,1)
(156,36,1)
(107,155,1)
(40,229,1)
(214,219,1)
(68,45,1)
(108,25,1)
(1,233,1)
(239,146,1)
(231,4,1)
(200,122,1)
(187,219,1)
(74,177,1)
(59,78,1)
(200,129,1)
(169,239,1)
(120,229,1)
(132,262,1)
(72,67,1)
(25,249,1)
(166,251,1)
(81,138,1)
(24,126,1)
(231,132,1)
(131,6,1)
(199,216,1)
(175,140,1)
(132,160,1)
(12,195,1)
(202,71,1)
(263,221,1)
(229,216,1)
(42,108,1)
(203,166,1)
(155,145,1)
(103,32,1)
(148,120,1)
(139,184,1)
(200,76,1)
(120,40,1)
(251,122,1)
(261,62,1)
(24,91,1)
(170,228,1)
(81,254,1)
(231,27,1)
(14,153,1)
(242,210,1)
(182,144,1)
(201,79,1)
(6,96,1)
(127,92,1)
(96,216,1)
(157,216,1)
(136,133,1)
(233,70,1)
(56,83,1)
(37,112,1)
(134,137,1)
(23,216,1)
(87,52,1)
(105,45,1)
(230,170,1)
(180,98,1)
(222,146,1)
(63,191,1)
(57,114,1)
(92,146,1)
(207,131,1)
(109,48,1)
(211,212,1)
(143,58,1)
(250,100,1)
(216,111,1)
(237,186,1)
(123,216,1)
(132,146,1)
(0,55,1)
(17,227,1)
(227,43,1)
(204,113,1)
(162,146,1)
(259,185,1)
(243,230,1)
(38,147,1)
(222,150,1)
(70,182,1)
(41,46,1)
(165,146,1)
(90,171,1)
(9,199,1)
(94,15,1)
(174,172,1)
(162,157,1)
(241,37,1)
(129,100,1)
(67,18,1)
(170,213,1)
(185,165,1)
(196,208,1)
(121,158,1)
(20,142,1)
(75,242,1)
(205,123,1)
(223,129,1)
(60,191,1)
(138,14,1)
(52,148,1)
(208,81,1)
(100,216,1)
(86,19,1)
(189,162,1)
(142,164,1)
(151,241,1)
(262,160,1)
(16,106,1)
(112,44,1)
(80,20,1)
(117,179,1)
(239,225,1)
(63,60,1)
(193,240,1)
(133,65,1)
(92,193,1)
(122,36,1)
(32,216,1)
(245,107,1)
(71,163,1)
(144,93,1)
(199,34,1)
(133,216,1)
(196,172,1)
(260,194,1)
(213,159,1)
(81,253,1)
(78,61,1)
(0,216,1)
(150,216,1)
(85,218,1)
(233,92,1)
(83,143,1)
(57,228,1)
(196,146,1)
(248,106,1)
(215,152,1)
(106,41,1)
(2,132,1)
(101,17,1)
(20,216,1)
(233,97,1)
(61,154,1)
(87,155,1)
(160,216,1)
(126,54,1)
(144,216,1)
(163,56,1)
(66,5,1)
(253,207,1)
(55,206,1)
(104,115,1)
(10,175,1)
(247,193,1)
(120,146,1)
(122,228,1)
(77,84,1)
(81,258,1)
(171,38,1)
(222,69,1)
(7,133,1)
(240,202,1)
(213,121,1)
(239,234,1)
(36,85,1)
(56,143,1)
(89,103,1)
(186,59,1)
(228,198,1)
(175,26,1)
(97,171,1)
(150,246,1)
(177,189,1)
(3,57,1)
(181,256,1)
(14,215,1)
(214,259,1)
(160,30,1)
(183,181,1)
(258,201,1)
(69,150,1)
(221,187,1)
(62,174,1)
(97,90,1)
(166,215,1)
(248,16,1)
(92,247,1)
(214,261,1)
(226,261,1)
(152,172,1)
(136,146,1)
(113,130,1)
(114,228,1)
(143,146,1)
(155,139,1)
(91,126,1)
(246,178,1)
(186,248,1)
(121,216,1)
(198,232,1)
(200,105,1)
(222,241,1)
(194,87,1)
(136,7,1)
(197,31,1)
(242,215,1)
(233,252,1)
(39,157,1)
(233,105,1)
(154,134,1)
(159,121,1)
(53,117,1)
(140,63,1)
(234,51,1)
(31,170,1)
(181,146,1)
(130,20,1)
(158,3,1)
(200,66,1)
(29,169,1)
(179,86,1)
(263,216,1)
(164,197,1)
(217,256,1)
(261,174,1)
(122,156,1)
(184,127,1)
(165,199,1)
(200,123,1)
(108,243,1)
(34,257,1)
(137,248,1)
(233,129,1)
(111,172,1)
(220,67,1)
(117,86,1)
(63,188,1)
(37,44,1)
(87,71,1)
(54,33,1)
(125,141,1)
(131,146,1)
(33,105,1)
(234,216,1)
(58,23,1)
(200,92,1)
(225,234,1)
(66,146,1)
(4,236,1)
(232,175,1)
(141,25,1)
(45,216,1)
(212,173,1)
(118,11,1)
(256,94,1)
(80,204,1)
(238,35,1)
(30,209,1)
(98,0,1)
(190,211,1)
(35,97,1)
(219,53,1)
(131,96,1)
(36,8,1)
(255,214,1)
(79,255,1)
(180,0,1)
(105,68,1)
(76,201,1)
(100,74,1)
(254,189,1)
(23,190,1)
(53,22,1)
(171,216,1)
(93,151,1)
(67,169,1)
(8,85,1)
(104,172,1)
(79,146,1)
(22,118,1)
(163,212,1)
(97,146,1)
(249,216,1)
(64,29,1)
(178,188,1)
(218,75,1)
(86,25,1)
(200,97,1)
(191,88,1)
(191,216,1)
(1,200,1)
(72,220,1)
(36,146,1)
(248,104,1)
(188,231,1)
(17,216,1)
(193,216,1)
(70,144,1)
(145,139,1)
(11,223,1)
(66,263,1)
(105,146,1)
(19,180,1)
(116,28,1)
(79,17,1)
(213,146,1)
(70,146,1)
(63,146,1)
(153,215,1)
(96,12,1)
(229,73,1)
(51,238,1)
(20,237,1)
(233,66,1)
(143,23,1)
(214,185,1)
(49,106,1)
(126,216,1)
(195,224,1)
(139,172,1)
(48,237,1)
(252,50,1)
(162,194,1)
(84,66,1)
(26,222,1)
(257,226,1)
(200,70,1)
(46,205,1)
(212,42,1)
(180,146,1)
(85,216,1)
(114,203,1)
(36,241,1)
(5,263,1)
(15,24,1)
(24,146,1)
(150,216,2)
(123,216,2)
(37,24,2)
(104,172,2)
(145,108,2)
(170,175,2)
(12,108,2)
(122,36,2)
(196,175,2)
(211,108,2)
(152,172,2)
(79,146,2)
(114,14,2)
(190,207,2)
(186,248,2)
(202,207,2)
(87,108,2)
(200,70,2)
(207,131,2)
(139,172,2)
(214,261,2)
(259,189,2)
(232,175,2)
(22,161,2)
(233,105,2)
(67,169,2)
(163,212,2)
(14,170,2)
(229,108,2)
(121,175,2)
(233,189,2)
(245,108,2)
(57,14,2)
(53,22,2)
(42,108,2)
(166,14,2)
(120,146,2)
(166,215,2)
(0,189,2)
(88,26,2)
(72,67,2)
(105,45,2)
(239,108,2)
(143,23,2)
(189,108,2)
(162,207,2)
(160,216,2)
(256,216,2)
(188,231,2)
(155,108,2)
(90,108,2)
(86,189,2)
(85,14,2)
(175,140,2)
(38,108,2)
(200,66,2)
(66,263,2)
(53,117,2)
(231,4,2)
(222,150,2)
(226,189,2)
(156,14,2)
(108,170,2)
(196,207,2)
(73,207,2)
(4,236,2)
(214,185,2)
(213,175,2)
(212,207,2)
(132,146,2)
(87,155,2)
(20,237,2)
(44,183,2)
(214,219,2)
(239,146,2)
(169,108,2)
(63,26,2)
(201,189,2)
(100,216,2)
(1,200,2)
(55,189,2)
(206,189,2)
(143,108,2)
(247,108,2)
(39,108,2)
(180,0,2)
(63,188,2)
(202,108,2)
(194,108,2)
(52,207,2)
(221,189,2)
(143,146,2)
(35,108,2)
(121,216,2)
(224,108,2)
(179,189,2)
(198,175,2)
(39,207,2)
(219,53,2)
(98,189,2)
(248,106,2)
(162,108,2)
(158,175,2)
(165,189,2)
(97,146,2)
(120,229,2)
(261,174,2)
(60,26,2)
(252,207,2)
(208,207,2)
(162,157,2)
(189,207,2)
(136,133,2)
(185,165,2)
(101,189,2)
(97,108,2)
(97,171,2)
(20,216,2)
(181,256,2)
(31,170,2)
(241,37,2)
(8,14,2)
(140,26,2)
(106,41,2)
(191,26,2)
(243,170,2)
(233,175,2)
(233,123,2)
(252,189,2)
(78,61,2)
(231,132,2)
(159,14,2)
(42,207,2)
(233,70,2)
(170,228,2)
(200,129,2)
(80,204,2)
(85,216,2)
(96,108,2)
(145,207,2)
(0,216,2)
(58,207,2)
(216,111,2)
(200,92,2)
(50,14,2)
(219,189,2)
(263,216,2)
(233,92,2)
(17,189,2)
(140,63,2)
(23,207,2)
(71,207,2)
(196,201,2)
(260,207,2)
(254,189,2)
(67,18,2)
(233,201,2)
(165,146,2)
(144,216,2)
(96,216,2)
(18,108,2)
(237,186,2)
(177,189,2)
(40,108,2)
(208,175,2)
(148,120,2)
(163,207,2)
(197,170,2)
(10,175,2)
(84,189,2)
(132,160,2)
(71,163,2)
(157,108,2)
(196,14,2)
(186,59,2)
(234,216,2)
(63,146,2)
(152,80,2)
(157,207,2)
(189,162,2)
(170,213,2)
(174,172,2)
(210,14,2)
(245,207,2)
(131,146,2)
(81,207,2)
(34,189,2)
(122,228,2)
(257,189,2)
(153,170,2)
(260,108,2)
(222,241,2)
(53,189,2)
(187,189,2)
(164,170,2)
(107,108,2)
(23,216,2)
(200,123,2)
(193,108,2)
(81,175,2)
(92,108,2)
(228,175,2)
(79,255,2)
(87,207,2)
(240,207,2)
(71,108,2)
(194,87,2)
(110,108,2)
(196,189,2)
(14,215,2)
(263,189,2)
(117,86,2)
(66,189,2)
(122,14,2)
(224,72,2)
(234,108,2)
(127,108,2)
(148,108,2)
(222,146,2)
(252,175,2)
(3,14,2)
(70,146,2)
(147,108,2)
(170,14,2)
(139,207,2)
(83,108,2)
(193,207,2)
(251,14,2)
(200,105,2)
(196,146,2)
(127,207,2)
(212,108,2)
(208,189,2)
(41,172,2)
(204,170,2)
(92,146,2)
(50,189,2)
(56,108,2)
(75,14,2)
(236,136,2)
(63,191,2)
(255,214,2)
(80,20,2)
(59,78,2)
(199,189,2)
(36,14,2)
(218,14,2)
(130,170,2)
(104,106,2)
(66,146,2)
(133,216,2)
(118,189,2)
(190,108,2)
(87,71,2)
(165,199,2)
(24,126,2)
(199,216,2)
(227,189,2)
(37,44,2)
(180,189,2)
(3,175,2)
(40,207,2)
(58,108,2)
(242,215,2)
(36,85,2)
(56,143,2)
(184,207,2)
(16,106,2)
(233,66,2)
(212,173,2)
(76,201,2)
(87,148,2)
(215,170,2)
(126,216,2)
(155,139,2)
(79,17,2)
(220,108,2)
(129,189,2)
(43,189,2)
(114,228,2)
(242,14,2)
(23,108,2)
(50,201,2)
(79,189,2)
(247,207,2)
(200,201,2)
(252,201,2)
(180,146,2)
(80,170,2)
(129,146,2)
(36,241,2)
(211,207,2)
(131,96,2)
(181,146,2)
(162,194,2)
(108,25,2)
(77,189,2)
(193,216,2)
(208,201,2)
(183,181,2)
(121,14,2)
(70,144,2)
(136,146,2)
(11,189,2)
(142,170,2)
(22,189,2)
(155,207,2)
(105,146,2)
(233,129,2)
(233,97,2)
(49,106,2)
(120,108,2)
(86,25,2)
(169,239,2)
(200,97,2)
(62,189,2)
(5,189,2)
(1,233,2)
(100,189,2)
(185,189,2)
(196,172,2)
(250,189,2)
(249,216,2)
(6,108,2)
(233,14,2)
(159,175,2)
(208,14,2)
(191,216,2)
(131,108,2)
(129,100,2)
(36,146,2)
(207,108,2)
(45,216,2)
(9,189,2)
(233,122,2)
(117,189,2)
(174,189,2)
(52,108,2)
(113,170,2)
(107,207,2)
(17,216,2)
(162,146,2)
(248,104,2)
(184,108,2)
(139,108,2)
(229,216,2)
(111,172,2)
(163,108,2)
(64,108,2)
(81,14,2)
(115,106,2)
(213,121,2)
(67,108,2)
(163,56,2)
(238,108,2)
(26,222,2)
(86,180,2)
(171,216,2)
(92,193,2)
(223,189,2)
(81,189,2)
(200,122,2)
(57,175,2)
(148,207,2)
(131,224,2)
(213,14,2)
(195,108,2)
(255,189,2)
(73,108,2)
(171,108,2)
(110,207,2)
(240,108,2)
(157,216,2)
(83,207,2)
(50,207,2)
(175,26,2)
(253,207,2)
(203,14,2)
(213,146,2)
(261,189,2)
(158,14,2)
(167,26,2)
(24,146,2)
(258,201,2)
(230,170,2)
(225,108,2)
(51,108,2)
(215,152,2)
(229,207,2)
(74,189,2)
(25,249,2)
(143,207,2)
(138,14,2)
(81,201,2)
(56,207,2)
(29,108,2)
(194,207,2)
(152,170,2)
(239,234,2)
(50,175,2)
(233,207,2)
(19,189,2)
(92,207,2)
(72,108,2)
(214,189,2)
(20,170,2)
(120,207,2)
(201,79,2)
(252,14,2)
-----------------------------------
(0,priv->num_tx_ring)
(1,RET)
(2,priv)
(3,priv)
(4,sizeof(*priv->tx_skb[q])
(5,q)
(6,q)
(7,q)
(8,q)
(9,q)
(10,goto error;)
(11,priv->dirty_rx[q] = 0)
(12,tx_align)
(13,)
(14,!skb)
(15,priv)
(16,PKT_BUF_SZ)
(17,priv->tx_ring)
(18,DPTR_ALIGN - 1)
(19,num_tx_desc)
(20,priv->rx_buf_sz)
(21,if (!skb)
(22,sizeof(struct ravb_tx_desc)
(23,priv->num_rx_ring)
(24,priv->num_rx_ring[q])
(25,num_tx_desc = priv->num_tx_desc)
(26,!priv->rx_skb[q])
(27,GFP_KERNEL)
(28,priv)
(29,DPTR_ALIGN)
(30,num_tx_ring)
(31,skb)
(32,num_tx_desc)
(33,priv)
(34,tx_desc_dma)
(35,DPTR_ALIGN)
(36,priv->rx_skb[q])
(37,kcalloc(priv->num_rx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->rx_skb[q])
(38,tx_align)
(39,q)
(40,q)
(41,ndev->mtu)
(42,ring_size)
(43,priv)
(44,sizeof(*priv->rx_skb[q])
(45,priv->rx_skb)
(46,mtu)
(47,if (num_tx_desc > 1)
(48,priv)
(49,ndev)
(50,ENOMEM)
(51,num_tx_ring)
(52,GFP_KERNEL)
(53,sizeof(struct ravb_tx_desc)
(54,num_rx_ring)
(55,num_tx_ring)
(56,priv->num_rx_ring[q] + 1)
(57,i)
(58,q)
(59,ETH_HLEN + VLAN_HLEN + sizeof(__sum16)
(60,q)
(61,sizeof(__sum16)
(62,parent)
(63,priv->tx_skb[q])
(64,1)
(65,tx_skb)
(66,priv->tx_ring[q])
(67,DPTR_ALIGN * priv->num_tx_ring[q] +\n\\n\\t\\t\\t\\t\\t    DPTR_ALIGN - 1)
(68,q)
(69,q)
(70,priv->tx_skb[q])
(71,ring_size = sizeof(struct ravb_ex_rx_desc)
(72,kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +\n\\n\\t\\t\\t\\t\\t    DPTR_ALIGN - 1, GFP_KERNEL)
(73,rx_desc_dma)
(74,dirty_rx)
(75,priv)
(76,0)
(77,dev)
(78,VLAN_HLEN + sizeof(__sum16)
(79,priv->tx_ring[q])
(80,priv->rx_buf_sz + RAVB_ALIGN - 1)
(81,ndev)
(82,if (!priv->rx_skb[q] || !priv->tx_skb[q])
(83,1)
(84,ndev)
(85,priv->rx_skb)
(86,priv->num_tx_ring[q] * num_tx_desc)
(87,dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->rx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(88,tx_skb)
(89,num_tx_desc)
(90,q)
(91,q)
(92,priv->rx_ring[q])
(93,tx_skb)
(94,rx_skb)
(95,if (!priv->tx_ring[q])
(96,priv->tx_align)
(97,priv->tx_align[q])
(98,q)
(99,for (i = 0; i < priv->num_rx_ring[q]; i++)
(100,priv->dirty_rx)
(101,q)
(102,)
(103,priv)
(104,ndev->mtu)
(105,priv->rx_skb[q])
(106,ndev->mtu <= 1492)
(107,ring_size)
(108,num_tx_desc > 1)
(109,rx_skb)
(110,rx_ring)
(111,netdev_priv(ndev)
(112,GFP_KERNEL)
(113,1)
(114,i++)
(115,mtu)
(116,ndev)
(117,priv->num_tx_ring[q] * num_tx_desc + 1)
(118,ring_size)
(119,error:)
(120,priv->rx_desc_dma[q])
(121,priv->num_rx_ring)
(122,priv->rx_skb[q][i])
(123,priv->rx_buf_sz)
(124,priv)
(125,rx_buf_sz)
(126,priv->num_rx_ring)
(127,ndev)
(128,if (!priv->tx_align[q])
(129,priv->dirty_rx[q])
(130,RAVB_ALIGN)
(131,priv->tx_align[q])
(132,priv->num_tx_ring[q])
(133,priv->tx_skb)
(134,VLAN_HLEN)
(135,i)
(136,priv->tx_skb[q])
(137,ETH_HLEN)
(138,goto error;)
(139,ndev->dev)
(140,!priv->tx_skb[q])
(141,priv)
(142,rx_buf_sz)
(143,priv->num_rx_ring[q])
(144,priv->tx_skb)
(145,parent)
(146,int q)
(147,priv)
(148,&priv->rx_desc_dma[q])
(149,num_tx_desc)
(150,priv->rx_skb)
(151,priv)
(152,netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1)
(153,skb)
(154,__sum16)
(155,ndev->dev.parent)
(156,i)
(157,priv->rx_ring)
(158,num_rx_ring)
(159,q)
(160,priv->num_tx_ring)
(161,struct ravb_tx_desc)
(162,priv->rx_ring[q])
(163,sizeof(struct ravb_ex_rx_desc)
(164,priv)
(165,priv->tx_desc_dma[q])
(166,priv->rx_skb[q][i] = skb)
(167,priv)
(168,ring_size)
(169,DPTR_ALIGN * priv->num_tx_ring[q])
(170,i < priv->num_rx_ring[q])
(171,priv->tx_align)
(172,struct net_device *ndev)
(173,struct ravb_ex_rx_desc)
(174,ndev->dev)
(175,!priv->rx_skb[q] || !priv->tx_skb[q])
(176,1492)
(177,priv)
(178,priv)
(179,1)
(180,priv->num_tx_ring[q])
(181,priv->rx_skb[q])
(182,q)
(183,*priv->rx_skb[q])
(184,dev)
(185,&priv->tx_desc_dma[q])
(186,(ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu)
(187,priv)
(188,priv->tx_skb[q] = kcalloc(priv->num_tx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->tx_skb[q])
(189,!priv->rx_ring[q])
(190,num_rx_ring)
(191,priv->tx_skb)
(192,)
(193,priv->rx_ring)
(194,priv->rx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->rx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(195,priv)
(196,ravb_ring_free(ndev, q)
(197,ndev)
(198,0)
(199,priv->tx_desc_dma)
(200,return 0;)
(201,!priv->tx_ring[q])
(202,priv)
(203,i)
(204,RAVB_ALIGN - 1)
(205,ndev)
(206,priv)
(207,!priv->tx_align[q])
(208,q)
(209,priv)
(210,skb)
(211,priv)
(212,sizeof(struct ravb_ex_rx_desc)
(213,priv->num_rx_ring[q])
(214,dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->tx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(215,skb = netdev_alloc_skb(ndev, priv->rx_buf_sz + RAVB_ALIGN - 1)
(216,*priv = netdev_priv(ndev)
(217,q)
(218,rx_skb)
(219,ring_size = sizeof(struct ravb_tx_desc)
(220,GFP_KERNEL)
(221,tx_ring)
(222,priv->rx_skb[q])
(223,0)
(224,priv->tx_align[q] = kmalloc(DPTR_ALIGN * priv->num_tx_ring[q] +\n\\n\\t\\t\\t\\t\\t    DPTR_ALIGN - 1, GFP_KERNEL)
(225,q)
(226,ring_size)
(227,tx_ring)
(228,i = 0)
(229,priv->rx_desc_dma)
(230,num_tx_desc)
(231,kcalloc(priv->num_tx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->tx_skb[q])
(232,i)
(233,return -ENOMEM;)
(234,priv->num_tx_ring)
(235,if (!priv->rx_ring[q])
(236,*priv->tx_skb[q])
(237,priv->rx_buf_sz = (ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu)
(238,priv)
(239,priv->num_tx_ring[q])
(240,rx_ring)
(241,priv->rx_skb[q] = kcalloc(priv->num_rx_ring[q],\n\\n\\t\\t\\t\\t  sizeof(*priv->rx_skb[q])
(242,ravb_set_buffer_align(skb)
(243,1)
(244,skb)
(245,priv)
(246,rx_skb)
(247,q)
(248,ndev->mtu <= 1492 ? PKT_BUF_SZ : ndev->mtu)
(249,priv->num_tx_desc)
(250,q)
(251,skb)
(252,-ENOMEM)
(253,goto error;)
(254,goto error;)
(255,priv->tx_ring[q] = dma_alloc_coherent(ndev->dev.parent, ring_size,\n\\n\\t\\t\\t\\t\\t      &priv->tx_desc_dma[q],\n\\n\\t\\t\\t\\t\\t      GFP_KERNEL)
(256,priv->rx_skb)
(257,priv)
(258,goto error;)
(259,GFP_KERNEL)
(260,priv)
(261,ndev->dev.parent)
(262,q)
(263,priv->tx_ring)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^