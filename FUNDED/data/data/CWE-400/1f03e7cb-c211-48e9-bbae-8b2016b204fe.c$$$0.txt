-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
63,64
63,65
63,66
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,69,73,75,79,81,86,87
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
-----guardedBy-----
41,69
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data);
data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data)
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource
data
data
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(21,36,0)
(27,23,0)
(32,11,0)
(30,27,0)
(21,5,0)
(6,36,0)
(6,24,0)
(17,26,0)
(23,27,0)
(29,19,0)
(10,28,0)
(12,0,0)
(7,8,0)
(36,21,0)
(34,23,0)
(19,8,0)
(28,11,0)
(18,26,0)
(13,31,0)
(26,0,0)
(36,24,0)
(11,28,0)
(16,4,0)
(1,6,0)
(8,19,0)
(22,6,0)
(8,28,0)
(25,36,0)
(5,27,0)
(31,24,0)
(9,0,0)
(2,15,0)
(3,21,0)
(33,16,0)
(5,21,0)
(15,24,0)
(11,26,0)
(15,36,0)
(35,9,0)
(31,36,0)
(28,0,0)
(21,3,0)
(27,5,0)
(27,28,0)
(20,9,0)
(10,26,1)
(23,34,1)
(28,11,1)
(15,2,1)
(7,28,1)
(27,23,1)
(19,29,1)
(16,33,1)
(34,30,1)
(14,16,1)
(29,7,1)
(17,18,1)
(25,8,1)
(11,32,1)
(31,13,1)
(13,15,1)
(15,36,1)
(21,5,1)
(6,36,1)
(27,28,1)
(32,10,1)
(26,17,1)
(6,1,1)
(5,27,1)
(11,26,1)
(36,21,1)
(33,8,1)
(31,36,1)
(2,6,1)
(14,31,1)
(21,3,1)
(1,22,1)
(8,28,1)
(22,36,1)
(8,19,1)
(30,25,1)
(11,26,2)
(30,8,2)
(31,8,2)
(31,36,2)
(15,36,2)
(6,8,2)
(34,8,2)
(15,8,2)
(25,8,2)
(5,8,2)
(36,8,2)
(21,5,2)
(21,8,2)
(33,8,2)
(27,8,2)
(8,19,2)
(27,23,2)
(6,36,2)
(16,8,2)
(36,21,2)
(13,8,2)
(2,8,2)
(23,8,2)
(21,3,2)
(1,8,2)
(8,28,2)
(5,27,2)
(27,28,2)
(28,11,2)
(22,8,2)
-----------------------------------
(0,)
(1,HELLO_STRING)
(2,myString)
(3,char *)
(4,)
(5,malloc(data*sizeof(char)
(6,strcpy(myString, HELLO_STRING)
(7,data)
(8,data > strlen(HELLO_STRING)
(9,)
(10,data)
(11,CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data)
(12,data)
(13,myString)
(14,RET)
(15,printLine(myString)
(16,printLine("Input is less than the length of the source string")
(17,0)
(18,data)
(19,strlen(HELLO_STRING)
(20,myString)
(21,(char *)
(22,myString)
(23,sizeof(char)
(24,)
(25,myString)
(26,data = 0)
(27,data*sizeof(char)
(28,data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource(data)
(29,HELLO_STRING)
(30,data)
(31,free(myString)
(32,data)
(33,"Input is less than the length of the source string")
(34,char)
(35,if (data > strlen(HELLO_STRING)
(36,myString = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^