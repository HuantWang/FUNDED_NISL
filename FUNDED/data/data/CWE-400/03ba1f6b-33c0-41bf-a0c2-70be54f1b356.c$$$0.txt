-----label-----
1
-----code-----
static int prepend_component(const char **p, bool usec, unsigned nesting, CalendarComponent **c) {
        int r, start, stop = -1, repeat = 0;
        CalendarComponent *cc;
        const char *e = *p;

        assert(p);
        assert(c);

        if (nesting > CALENDARSPEC_COMPONENTS_MAX)
                return -ENOBUFS;

        r = parse_component_decimal(&e, usec, &start);
        if (r < 0)
                return r;

        if (e[0] == '.' && e[1] == '.') {
                e += 2;
                r = parse_component_decimal(&e, usec, &stop);
                if (r < 0)
                        return r;

                repeat = usec ? USEC_PER_SEC : 1;
        }

        if (*e == '/') {
                e++;
                r = parse_component_decimal(&e, usec, &repeat);
                if (r < 0)
                        return r;

                if (repeat == 0)
                        return -ERANGE;
        }

        if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))
                return -EINVAL;

        cc = new0(CalendarComponent, 1);
        if (!cc)
                return -ENOMEM;

        cc->start = start;
        cc->stop = stop;
        cc->repeat = repeat;
        cc->next = *c;

        *p = e;
        *c = cc;

        if (*e ==',') {
                *p += 1;
                return prepend_component(p, usec, nesting + 1, c);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
7,9
7,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
22,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
26,39
26,40
26,41
26,42
26,43
26,44
26,45
26,46
26,47
27,28
28,29
28,30
28,31
28,32
28,33
30,31
32,33
34,35
34,36
36,37
37,38
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
86,88
86,89
86,90
87,88
89,90
90,91
92,93
94,95
95,96
97,98
97,99
98,99
98,100
99,100
102,103
103,104
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
109,110
113,114
113,115
114,115
114,116
115,116
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
125,126
126,127
126,128
127,128
129,130
129,131
129,132
129,133
130,131
132,133
133,134
135,136
137,138
138,139
140,141
140,142
141,142
141,143
142,143
145,146
146,147
148,149
149,150
149,151
150,151
152,153
152,154
152,155
153,154
155,156
158,159
158,160
159,160
159,161
160,161
161,162
164,165
164,166
164,167
164,168
165,166
166,167
167,168
169,170
170,171
170,172
171,172
173,174
173,175
173,176
173,177
174,175
176,177
177,178
179,180
181,182
182,183
184,185
184,186
185,186
185,187
186,187
189,190
190,191
192,193
192,194
193,194
193,195
194,195
197,198
198,199
199,200
201,202
201,203
202,203
203,204
203,205
203,206
203,207
203,208
203,209
203,210
203,211
204,205
206,207
207,208
215,216
216,217
217,218
219,220
220,221
220,222
221,222
223,224
223,225
223,226
224,225
226,227
229,230
229,231
230,231
231,232
233,234
234,235
235,236
237,238
238,239
238,240
239,240
239,241
240,241
243,244
245,246
246,247
246,248
247,248
247,249
248,249
251,252
253,254
254,255
254,256
255,256
255,257
256,257
259,260
261,262
262,263
262,264
263,264
263,265
264,265
267,268
268,269
270,271
271,272
271,273
272,273
273,274
275,276
277,278
278,279
278,280
279,280
280,281
282,283
284,285
284,286
285,286
285,287
286,287
287,288
290,291
290,292
291,292
292,293
292,294
293,294
294,295
297,298
298,299
298,300
298,301
298,302
298,303
299,300
301,302
303,304
305,306
305,307
306,307
309,310
311,312
-----nextToken-----
2,4,6,8,9,10,12,14,16,18,21,23,24,25,29,31,33,35,38,40,42,46,48,49,52,54,55,59,63,65,69,71,75,77,81,85,88,91,93,96,100,101,104,110,111,112,116,117,118,123,124,128,131,134,136,139,143,144,147,151,154,156,157,162,163,168,172,175,178,180,183,187,188,191,195,196,200,205,208,209,210,211,212,213,214,218,222,225,227,228,232,236,241,242,244,249,250,252,257,258,260,265,266,269,274,276,281,283,288,289,295,296,300,302,304,307,308,310,312
-----computeFrom-----
73,74
73,75
83,84
83,85
98,99
98,100
106,107
106,108
107,108
107,109
113,114
113,115
121,122
121,123
126,127
126,128
141,142
141,143
149,150
149,151
159,160
159,161
170,171
170,172
185,186
185,187
193,194
193,195
220,221
220,222
238,239
238,240
246,247
246,248
254,255
254,256
262,263
262,264
271,272
271,273
278,279
278,280
285,286
285,287
292,293
292,294
305,306
305,307
-----guardedBy-----
100,104
116,134
143,147
162,178
187,191
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int prepend_component(const char **p, bool usec, unsigned nesting, CalendarComponent **c) {        int r, start, stop = -1, repeat = 0;        CalendarComponent *cc;        const char *e = *p;        assert(p);        assert(c);        if (nesting > CALENDARSPEC_COMPONENTS_MAX)                return -ENOBUFS;        r = parse_component_decimal(&e, usec, &start);        if (r < 0)                return r;        if (e[0] == '.' && e[1] == '.') {                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }        if (*e == '/') {                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }        if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))                return -EINVAL;        cc = new0(CalendarComponent, 1);        if (!cc)                return -ENOMEM;        cc->start = start;        cc->stop = stop;        cc->repeat = repeat;        cc->next = *c;        *p = e;        *c = cc;        if (*e ==',') {                *p += 1;                return prepend_component(p, usec, nesting + 1, c);        }        return 0;}
static int
prepend_component(const char **p, bool usec, unsigned nesting, CalendarComponent **c)
prepend_component
const char **p
const char
**p
*
*
p
bool usec
bool
usec
usec
unsigned nesting
unsigned
nesting
nesting
CalendarComponent **c
CalendarComponent
CalendarComponent
**c
*
*
c
{        int r, start, stop = -1, repeat = 0;        CalendarComponent *cc;        const char *e = *p;        assert(p);        assert(c);        if (nesting > CALENDARSPEC_COMPONENTS_MAX)                return -ENOBUFS;        r = parse_component_decimal(&e, usec, &start);        if (r < 0)                return r;        if (e[0] == '.' && e[1] == '.') {                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }        if (*e == '/') {                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }        if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))                return -EINVAL;        cc = new0(CalendarComponent, 1);        if (!cc)                return -ENOMEM;        cc->start = start;        cc->stop = stop;        cc->repeat = repeat;        cc->next = *c;        *p = e;        *c = cc;        if (*e ==',') {                *p += 1;                return prepend_component(p, usec, nesting + 1, c);        }        return 0;}
int r, start, stop = -1, repeat = 0;
int r, start, stop = -1, repeat = 0;
int
r
r
start
start
stop = -1
stop
= -1
-1
1
repeat = 0
repeat
= 0
0
CalendarComponent *cc;
CalendarComponent *cc;
CalendarComponent
CalendarComponent
*cc
*
cc
const char *e = *p;
const char *e = *p;
const char
*e = *p
*
e
= *p
*p
p
p
assert(p);
assert(p)
assert
assert
p
p
assert(c);
assert(c)
assert
assert
c
c
if (nesting > CALENDARSPEC_COMPONENTS_MAX)                return -ENOBUFS;
nesting > CALENDARSPEC_COMPONENTS_MAX
nesting
nesting
CALENDARSPEC_COMPONENTS_MAX
CALENDARSPEC_COMPONENTS_MAX
return -ENOBUFS;
-ENOBUFS
ENOBUFS
ENOBUFS
r = parse_component_decimal(&e, usec, &start);
r = parse_component_decimal(&e, usec, &start)
r
r
parse_component_decimal(&e, usec, &start)
parse_component_decimal
parse_component_decimal
&e
e
e
usec
usec
&start
start
start
if (r < 0)                return r;
r < 0
r
r
0
return r;
r
r
if (e[0] == '.' && e[1] == '.') {                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }
e[0] == '.' && e[1] == '.'
e[0] == '.'
e[0]
e
e
0
'.'
e[1] == '.'
e[1]
e
e
1
'.'
{                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }
e += 2;
e += 2
e
e
2
r = parse_component_decimal(&e, usec, &stop);
r = parse_component_decimal(&e, usec, &stop)
r
r
parse_component_decimal(&e, usec, &stop)
parse_component_decimal
parse_component_decimal
&e
e
e
usec
usec
&stop
stop
stop
if (r < 0)                        return r;
r < 0
r
r
0
return r;
r
r
repeat = usec ? USEC_PER_SEC : 1;
repeat = usec ? USEC_PER_SEC : 1
repeat
repeat
usec ? USEC_PER_SEC : 1
usec
usec
USEC_PER_SEC
USEC_PER_SEC
1
if (*e == '/') {                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }
*e == '/'
*e
e
e
'/'
{                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }
e++;
e++
e
e
r = parse_component_decimal(&e, usec, &repeat);
r = parse_component_decimal(&e, usec, &repeat)
r
r
parse_component_decimal(&e, usec, &repeat)
parse_component_decimal
parse_component_decimal
&e
e
e
usec
usec
&repeat
repeat
repeat
if (r < 0)                        return r;
r < 0
r
r
0
return r;
r
r
if (repeat == 0)                        return -ERANGE;
repeat == 0
repeat
repeat
0
return -ERANGE;
-ERANGE
ERANGE
ERANGE
if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))                return -EINVAL;
!IN_SET(*e, 0, ' ', ',', '-', '~', ':')
IN_SET(*e, 0, ' ', ',', '-', '~', ':')
IN_SET
IN_SET
*e
e
e
0
' '
','
'-'
'~'
':'
return -EINVAL;
-EINVAL
EINVAL
EINVAL
cc = new0(CalendarComponent, 1);
cc = new0(CalendarComponent, 1)
cc
cc
new0(CalendarComponent, 1)
new0
new0
CalendarComponent
CalendarComponent
1
if (!cc)                return -ENOMEM;
!cc
cc
cc
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
cc->start = start;
cc->start = start
cc->start
cc
cc
start
start
start
cc->stop = stop;
cc->stop = stop
cc->stop
cc
cc
stop
stop
stop
cc->repeat = repeat;
cc->repeat = repeat
cc->repeat
cc
cc
repeat
repeat
repeat
cc->next = *c;
cc->next = *c
cc->next
cc
cc
next
*c
c
c
*p = e;
*p = e
*p
p
p
e
e
*c = cc;
*c = cc
*c
c
c
cc
cc
if (*e ==',') {                *p += 1;                return prepend_component(p, usec, nesting + 1, c);        }
*e ==','
*e
e
e
','
{                *p += 1;                return prepend_component(p, usec, nesting + 1, c);        }
*p += 1;
*p += 1
*p
p
p
1
return prepend_component(p, usec, nesting + 1, c);
prepend_component(p, usec, nesting + 1, c)
prepend_component
prepend_component
p
p
usec
usec
nesting + 1
nesting
nesting
1
c
c
return 0;
0
-----joern-----
(170,100,0)
(150,13,0)
(7,119,0)
(162,21,0)
(96,106,0)
(162,31,0)
(30,53,0)
(40,29,0)
(80,49,0)
(159,150,0)
(18,59,0)
(60,78,0)
(19,49,0)
(156,66,0)
(160,63,0)
(164,21,0)
(45,151,0)
(30,65,0)
(97,144,0)
(11,83,0)
(92,59,0)
(144,186,0)
(115,63,0)
(35,145,0)
(140,93,0)
(171,180,0)
(115,114,0)
(145,72,0)
(78,103,0)
(83,72,0)
(87,72,0)
(20,108,0)
(119,37,0)
(141,97,0)
(29,40,0)
(168,186,0)
(180,72,0)
(183,48,0)
(68,72,0)
(79,38,0)
(57,173,0)
(179,112,0)
(11,151,0)
(125,72,0)
(107,105,0)
(144,92,0)
(38,72,0)
(44,83,0)
(151,186,0)
(131,173,0)
(59,31,0)
(154,119,0)
(89,115,0)
(82,9,0)
(18,83,0)
(70,103,0)
(37,72,0)
(35,162,0)
(148,54,0)
(7,9,0)
(90,114,0)
(177,59,0)
(152,78,0)
(103,72,0)
(126,29,0)
(55,117,0)
(67,13,0)
(81,72,0)
(80,119,0)
(86,1,0)
(75,168,0)
(76,72,0)
(150,143,0)
(30,7,0)
(144,36,0)
(138,43,0)
(64,40,0)
(21,162,0)
(7,43,0)
(114,115,0)
(161,66,0)
(9,37,0)
(93,37,0)
(30,100,0)
(169,72,0)
(67,72,0)
(30,152,0)
(80,15,0)
(114,186,0)
(39,59,0)
(134,36,0)
(9,12,0)
(146,72,0)
(129,38,0)
(132,182,0)
(56,94,0)
(29,83,0)
(108,115,0)
(157,12,0)
(44,173,0)
(58,72,0)
(7,156,0)
(88,2,0)
(161,111,0)
(37,105,0)
(80,9,0)
(114,35,0)
(39,83,0)
(179,59,0)
(152,161,0)
(59,83,0)
(1,27,0)
(65,36,0)
(28,185,0)
(116,18,0)
(167,11,0)
(143,150,0)
(128,173,0)
(182,118,0)
(5,84,0)
(17,35,0)
(48,162,0)
(7,49,0)
(30,175,0)
(181,42,0)
(44,59,0)
(151,180,0)
(41,99,0)
(7,161,0)
(91,92,0)
(98,129,0)
(127,44,0)
(30,94,0)
(18,63,0)
(92,144,0)
(151,11,0)
(64,185,0)
(149,156,0)
(94,180,0)
(106,83,0)
(34,29,0)
(32,168,0)
(185,64,0)
(158,114,0)
(182,168,0)
(101,179,0)
(103,37,0)
(152,72,0)
(73,123,0)
(12,72,0)
(49,79,0)
(74,95,0)
(130,72,0)
(39,22,0)
(120,180,0)
(51,161,0)
(38,129,0)
(123,66,0)
(61,173,0)
(85,49,0)
(172,39,0)
(178,21,0)
(69,145,0)
(168,13,0)
(163,4,0)
(43,143,0)
(166,72,0)
(105,37,0)
(43,37,0)
(109,90,0)
(49,37,0)
(155,42,0)
(77,119,0)
(173,131,0)
(25,105,0)
(30,54,0)
(36,144,0)
(7,78,0)
(104,111,0)
(80,43,0)
(142,63,0)
(90,59,0)
(14,84,0)
(100,115,0)
(180,151,0)
(40,64,0)
(78,13,0)
(117,36,0)
(42,162,0)
(26,72,0)
(10,112,0)
(0,72,0)
(2,151,0)
(143,72,0)
(144,97,0)
(112,179,0)
(133,40,0)
(174,117,0)
(152,49,0)
(111,83,0)
(136,72,0)
(110,120,0)
(50,38,0)
(165,120,0)
(46,83,0)
(90,83,0)
(23,80,0)
(42,145,0)
(84,83,0)
(33,148,0)
(179,83,0)
(156,80,0)
(147,21,0)
(6,9,0)
(139,37,0)
(62,31,0)
(24,108,0)
(35,114,0)
(168,7,0)
(4,175,0)
(21,186,0)
(152,9,0)
(83,106,0)
(119,48,0)
(121,43,0)
(97,38,0)
(152,119,0)
(48,72,0)
(79,72,0)
(173,44,0)
(71,173,0)
(111,59,0)
(22,39,0)
(3,152,0)
(8,79,0)
(95,118,0)
(137,22,0)
(80,78,0)
(7,15,0)
(151,2,0)
(114,90,0)
(30,27,0)
(106,66,0)
(184,95,0)
(47,168,0)
(124,67,0)
(16,182,0)
(84,185,0)
(135,59,0)
(185,84,0)
(153,173,0)
(123,72,0)
(168,66,0)
(176,173,0)
(80,161,0)
(111,72,0)
(52,65,0)
(102,162,0)
(152,43,0)
(113,144,0)
(48,145,0)
(122,145,0)
(99,53,0)
(36,31,0)
(168,182,0)
(179,59,1)
(90,109,1)
(151,11,1)
(35,17,1)
(178,102,1)
(108,115,1)
(173,44,1)
(7,49,1)
(42,155,1)
(21,164,1)
(114,186,1)
(44,127,1)
(184,67,1)
(94,56,1)
(7,43,1)
(80,43,1)
(176,61,1)
(131,173,1)
(83,106,1)
(128,44,1)
(147,178,1)
(78,60,1)
(18,59,1)
(117,36,1)
(22,39,1)
(109,89,1)
(129,98,1)
(150,13,1)
(179,101,1)
(80,119,1)
(120,110,1)
(7,161,1)
(91,134,1)
(117,174,1)
(111,59,1)
(100,115,1)
(80,49,1)
(162,21,1)
(42,145,1)
(10,179,1)
(127,42,1)
(44,59,1)
(180,151,1)
(181,108,1)
(173,153,1)
(7,9,1)
(67,13,1)
(49,19,1)
(53,99,1)
(80,161,1)
(132,16,1)
(182,118,1)
(46,145,1)
(100,170,1)
(65,52,1)
(4,163,1)
(122,69,1)
(114,35,1)
(30,175,1)
(88,45,1)
(90,59,1)
(156,149,1)
(2,88,1)
(152,78,1)
(143,150,1)
(30,53,1)
(98,50,1)
(42,162,1)
(161,66,1)
(174,55,1)
(114,90,1)
(149,22,1)
(103,37,1)
(175,4,1)
(101,64,1)
(12,157,1)
(38,129,1)
(41,93,1)
(111,83,1)
(39,59,1)
(3,22,1)
(156,66,1)
(124,123,1)
(34,185,1)
(141,113,1)
(185,28,1)
(59,83,1)
(168,186,1)
(108,20,1)
(44,83,1)
(119,154,1)
(89,18,1)
(164,178,1)
(59,177,1)
(120,180,1)
(104,161,1)
(80,78,1)
(126,34,1)
(172,103,1)
(19,85,1)
(24,115,1)
(52,117,1)
(140,37,1)
(107,139,1)
(115,114,1)
(55,36,1)
(137,39,1)
(79,8,1)
(151,186,1)
(61,57,1)
(48,162,1)
(106,66,1)
(33,95,1)
(35,162,1)
(163,42,1)
(7,168,1)
(144,186,1)
(43,121,1)
(94,180,1)
(77,79,1)
(92,91,1)
(6,93,1)
(18,83,1)
(148,33,1)
(21,147,1)
(29,126,1)
(90,83,1)
(47,182,1)
(150,159,1)
(112,179,1)
(7,119,1)
(78,13,1)
(14,5,1)
(152,3,1)
(168,66,1)
(152,161,1)
(64,40,1)
(113,92,1)
(185,84,1)
(152,9,1)
(39,172,1)
(40,29,1)
(22,137,1)
(171,95,1)
(92,59,1)
(102,117,1)
(145,122,1)
(152,49,1)
(71,176,1)
(36,144,1)
(48,145,1)
(29,83,1)
(159,43,1)
(101,162,1)
(27,1,1)
(96,46,1)
(5,120,1)
(111,104,1)
(167,171,1)
(95,118,1)
(84,83,1)
(43,37,1)
(8,49,1)
(135,64,1)
(54,148,1)
(144,92,1)
(64,185,1)
(168,182,1)
(97,38,1)
(170,108,1)
(106,96,1)
(103,70,1)
(153,71,1)
(161,51,1)
(86,131,1)
(48,183,1)
(25,107,1)
(23,156,1)
(168,13,1)
(112,10,1)
(93,140,1)
(35,145,1)
(183,119,1)
(152,43,1)
(49,37,1)
(80,9,1)
(11,83,1)
(39,83,1)
(182,132,1)
(74,184,1)
(67,124,1)
(144,97,1)
(165,180,1)
(32,80,1)
(37,105,1)
(151,2,1)
(119,37,1)
(45,11,1)
(99,41,1)
(79,38,1)
(73,83,1)
(69,38,1)
(168,47,1)
(11,167,1)
(57,128,1)
(56,120,1)
(84,14,1)
(110,165,1)
(1,86,1)
(30,94,1)
(127,112,1)
(20,24,1)
(139,131,1)
(9,37,1)
(123,73,1)
(30,54,1)
(93,37,1)
(51,143,1)
(82,6,1)
(21,186,1)
(28,84,1)
(80,23,1)
(123,66,1)
(7,156,1)
(30,152,1)
(138,48,1)
(116,112,1)
(16,75,1)
(133,29,1)
(85,12,1)
(18,116,1)
(30,27,1)
(75,32,1)
(97,141,1)
(95,74,1)
(152,119,1)
(157,9,1)
(134,59,1)
(179,83,1)
(70,78,1)
(7,78,1)
(158,90,1)
(17,158,1)
(40,133,1)
(154,77,1)
(9,82,1)
(177,135,1)
(30,7,1)
(121,138,1)
(65,36,1)
(30,65,1)
(105,25,1)
(60,111,1)
(30,100,1)
(155,181,1)
(35,162,2)
(18,112,2)
(152,161,2)
(19,93,2)
(152,9,2)
(29,185,2)
(61,112,2)
(93,131,2)
(174,64,2)
(30,152,2)
(88,95,2)
(44,59,2)
(64,185,2)
(154,93,2)
(147,178,2)
(149,22,2)
(27,131,2)
(156,22,2)
(22,39,2)
(89,112,2)
(182,22,2)
(111,59,2)
(152,22,2)
(67,13,2)
(185,84,2)
(127,42,2)
(143,93,2)
(132,22,2)
(137,93,2)
(64,120,2)
(55,64,2)
(179,59,2)
(25,131,2)
(155,108,2)
(138,93,2)
(97,38,2)
(152,78,2)
(90,112,2)
(100,115,2)
(35,112,2)
(49,37,2)
(60,93,2)
(148,95,2)
(95,118,2)
(5,120,2)
(16,22,2)
(173,112,2)
(121,93,2)
(181,108,2)
(126,185,2)
(78,93,2)
(180,151,2)
(18,59,2)
(94,120,2)
(183,93,2)
(64,40,2)
(180,95,2)
(7,156,2)
(7,119,2)
(70,93,2)
(80,9,2)
(153,42,2)
(12,93,2)
(173,44,2)
(150,13,2)
(101,64,2)
(110,95,2)
(144,64,2)
(71,42,2)
(82,93,2)
(179,83,2)
(168,66,2)
(79,38,2)
(119,93,2)
(6,93,2)
(123,66,2)
(59,64,2)
(117,36,2)
(9,93,2)
(49,93,2)
(114,112,2)
(99,93,2)
(43,93,2)
(1,131,2)
(71,112,2)
(108,112,2)
(56,120,2)
(106,66,2)
(20,112,2)
(48,162,2)
(104,93,2)
(152,119,2)
(59,83,2)
(30,100,2)
(14,120,2)
(175,42,2)
(65,117,2)
(151,95,2)
(30,53,2)
(30,27,2)
(151,2,2)
(159,93,2)
(39,93,2)
(152,43,2)
(151,186,2)
(185,120,2)
(44,112,2)
(28,120,2)
(21,186,2)
(102,117,2)
(37,105,2)
(30,54,2)
(40,29,2)
(94,180,2)
(37,131,2)
(30,7,2)
(4,42,2)
(168,182,2)
(7,49,2)
(39,59,2)
(42,162,2)
(30,94,2)
(40,185,2)
(133,185,2)
(144,186,2)
(10,117,2)
(85,93,2)
(53,93,2)
(80,22,2)
(114,90,2)
(11,83,2)
(140,131,2)
(48,145,2)
(164,178,2)
(107,131,2)
(131,112,2)
(51,93,2)
(178,117,2)
(162,21,2)
(39,83,2)
(139,131,2)
(103,37,2)
(23,22,2)
(35,145,2)
(156,66,2)
(153,112,2)
(162,117,2)
(36,64,2)
(128,112,2)
(57,42,2)
(75,22,2)
(152,49,2)
(144,97,2)
(176,112,2)
(92,64,2)
(80,161,2)
(80,49,2)
(47,22,2)
(115,114,2)
(143,150,2)
(170,108,2)
(36,144,2)
(80,43,2)
(134,64,2)
(8,93,2)
(42,108,2)
(176,42,2)
(61,42,2)
(78,13,2)
(41,93,2)
(172,93,2)
(18,83,2)
(120,95,2)
(171,95,2)
(151,11,2)
(7,22,2)
(7,78,2)
(2,95,2)
(179,117,2)
(111,83,2)
(119,37,2)
(120,180,2)
(21,117,2)
(114,35,2)
(182,118,2)
(113,64,2)
(45,95,2)
(30,175,2)
(80,119,2)
(86,131,2)
(101,117,2)
(91,64,2)
(165,95,2)
(34,185,2)
(57,112,2)
(43,37,2)
(161,93,2)
(109,112,2)
(3,22,2)
(114,186,2)
(54,95,2)
(100,108,2)
(79,93,2)
(17,112,2)
(7,161,2)
(105,131,2)
(97,64,2)
(173,42,2)
(168,22,2)
(30,65,2)
(116,112,2)
(11,95,2)
(44,42,2)
(84,120,2)
(83,106,2)
(103,93,2)
(108,115,2)
(93,37,2)
(111,93,2)
(29,83,2)
(112,179,2)
(90,83,2)
(7,43,2)
(131,173,2)
(168,13,2)
(33,95,2)
(115,112,2)
(127,112,2)
(128,42,2)
(52,117,2)
(135,64,2)
(77,93,2)
(167,95,2)
(44,83,2)
(163,42,2)
(22,93,2)
(158,112,2)
(38,129,2)
(179,64,2)
(92,59,2)
(32,22,2)
(7,9,2)
(112,64,2)
(112,117,2)
(161,66,2)
(42,145,2)
(131,42,2)
(117,64,2)
(141,64,2)
(9,37,2)
(150,93,2)
(65,36,2)
(24,112,2)
(144,92,2)
(48,93,2)
(10,64,2)
(157,93,2)
(80,78,2)
(84,83,2)
(90,59,2)
(177,64,2)
(168,186,2)
-----------------------------------
(0,if (e[0] == '.' && e[1] == '.')
(1,-EINVAL)
(2,&start)
(3,0)
(4,-ERANGE)
(5,e)
(6,cc)
(7,return prepend_component(p, usec, nesting + 1, c)
(8,stop)
(9,cc->start)
(10,'/')
(11,&e)
(12,cc->start = start)
(13,CalendarComponent **c)
(14,0)
(15,)
(16,nesting)
(17,repeat)
(18,e++)
(19,stop)
(20,0)
(21,usec ? USEC_PER_SEC : 1)
(22,*e ==',')
(23,1)
(24,r)
(25,1)
(26,e)
(27,return -EINVAL;)
(28,'.')
(29,e[1])
(30,RET)
(31,)
(32,p)
(33,ENOBUFS)
(34,e)
(35,&repeat)
(36,r = parse_component_decimal(&e, usec, &stop)
(37,cc = new0(CalendarComponent, 1)
(38,stop = -1)
(39,*e)
(40,e[1] == '.')
(41,ENOMEM)
(42,repeat == 0)
(43,cc->next)
(44,*e)
(45,usec)
(46,e)
(47,c)
(48,cc->repeat = repeat)
(49,cc->stop)
(50,stop)
(51,p)
(52,r)
(53,return -ENOMEM;)
(54,return -ENOBUFS;)
(55,r)
(56,r)
(57,' ')
(58,r)
(59,e += 2)
(60,c)
(61,',')
(62,if (r < 0)
(63,)
(64,e[0] == '.' && e[1] == '.')
(65,return r;)
(66,const char **p)
(67,assert(c)
(68,cc)
(69,repeat)
(70,cc)
(71,'~')
(72,)
(73,p)
(74,CALENDARSPEC_COMPONENTS_MAX)
(75,usec)
(76,if (*e == '/')
(77,cc)
(78,*c)
(79,cc->stop = stop)
(80,*p += 1)
(81,if (!cc)
(82,start)
(83,*e = *p)
(84,e[0])
(85,cc)
(86,EINVAL)
(87,stop)
(88,start)
(89,r)
(90,&e)
(91,e)
(92,&e)
(93,!cc)
(94,return r;)
(95,nesting > CALENDARSPEC_COMPONENTS_MAX)
(96,p)
(97,&stop)
(98,1)
(99,-ENOMEM)
(100,return r;)
(101,e)
(102,repeat)
(103,*c = cc)
(104,e)
(105,new0(CalendarComponent, 1)
(106,*p)
(107,CalendarComponent)
(108,r < 0)
(109,e)
(110,0)
(111,*p = e)
(112,*e == '/')
(113,usec)
(114,parse_component_decimal(&e, usec, &repeat)
(115,r = parse_component_decimal(&e, usec, &repeat)
(116,e)
(117,r < 0)
(118,unsigned nesting)
(119,cc->repeat)
(120,r < 0)
(121,next)
(122,0)
(123,assert(p)
(124,c)
(125,if (*e ==',')
(126,1)
(127,e)
(128,0)
(129,-1)
(130,if (r < 0)
(131,!IN_SET(*e, 0, ' ', ',', '-', '~', ':')
(132,1)
(133,'.')
(134,r)
(135,e)
(136,start)
(137,',')
(138,cc)
(139,cc)
(140,cc)
(141,stop)
(142,if (r < 0)
(143,cc->next = *c)
(144,parse_component_decimal(&e, usec, &stop)
(145,repeat = 0)
(146,if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':')
(147,USEC_PER_SEC)
(148,-ENOBUFS)
(149,p)
(150,*c)
(151,parse_component_decimal(&e, usec, &start)
(152,return 0;)
(153,':')
(154,repeat)
(155,0)
(156,*p)
(157,start)
(158,usec)
(159,c)
(160,if (repeat == 0)
(161,*p)
(162,repeat = usec ? USEC_PER_SEC : 1)
(163,ERANGE)
(164,1)
(165,r)
(166,repeat)
(167,e)
(168,prepend_component(p, usec, nesting + 1, c)
(169,if (nesting > CALENDARSPEC_COMPONENTS_MAX)
(170,r)
(171,r)
(172,e)
(173,IN_SET(*e, 0, ' ', ',', '-', '~', ':')
(174,0)
(175,return -ERANGE;)
(176,'-')
(177,2)
(178,usec)
(179,*e)
(180,r = parse_component_decimal(&e, usec, &start)
(181,repeat)
(182,nesting + 1)
(183,repeat)
(184,nesting)
(185,e[0] == '.')
(186,bool usec)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^