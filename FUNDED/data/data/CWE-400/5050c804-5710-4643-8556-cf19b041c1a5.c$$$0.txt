-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,28,33,36,38,41,43,46,47,51,53,54,58,60,64,65,67
-----computeFrom-----
13,14
13,15
19,20
19,21
31,32
31,33
42,43
42,44
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,14,0)
(24,20,0)
(21,22,0)
(9,3,0)
(23,24,0)
(2,20,0)
(7,14,0)
(17,14,0)
(13,2,0)
(5,8,0)
(2,28,0)
(11,28,0)
(19,23,0)
(1,8,0)
(28,2,0)
(20,24,0)
(19,0,0)
(27,14,0)
(23,0,0)
(12,19,0)
(24,18,0)
(15,17,0)
(10,22,0)
(24,23,0)
(16,23,0)
(20,2,0)
(26,9,0)
(18,24,0)
(4,17,0)
(28,11,1)
(24,18,1)
(16,8,1)
(19,23,1)
(9,26,1)
(11,13,1)
(22,10,1)
(25,22,1)
(21,9,1)
(24,20,1)
(23,24,1)
(12,23,1)
(5,17,1)
(21,19,1)
(4,15,1)
(8,1,1)
(1,5,1)
(19,12,1)
(2,28,1)
(17,4,1)
(10,21,1)
(26,8,1)
(13,16,1)
(20,2,1)
(9,8,2)
(23,8,2)
(2,8,2)
(20,8,2)
(24,20,2)
(2,28,2)
(12,8,2)
(24,18,2)
(16,8,2)
(23,24,2)
(19,8,2)
(20,2,2)
(13,8,2)
(26,8,2)
(19,23,2)
(11,8,2)
(28,8,2)
(24,8,2)
-----------------------------------
(0,)
(1,5)
(2,100*sizeof(wchar_t)
(3,)
(4,NULL)
(5,STATIC_CONST_FIVE)
(6,data)
(7,if(STATIC_CONST_FIVE==5)
(8,STATIC_CONST_FIVE!=5)
(9,printLine("Benign, fixed string")
(10,5)
(11,wchar_t)
(12,data)
(13,100)
(14,)
(15,data)
(16,data)
(17,data = NULL)
(18,wchar_t *)
(19,printWLine(data)
(20,ALLOCA(100*sizeof(wchar_t)
(21,STATIC_CONST_FIVE)
(22,STATIC_CONST_FIVE==5)
(23,data = (wchar_t *)
(24,(wchar_t *)
(25,RET)
(26,"Benign, fixed string")
(27,if(STATIC_CONST_FIVE!=5)
(28,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^