-----label-----
0
-----code-----
static void goodB2G()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,33,36,37,41,43,48,50,54,56,57,61,63,67,69,70,73,76,78,79,82,86,88
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        char * dataCopy = data;        char * data = dataCopy;        /* FIX: Deallocate memory */        free(data);    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
free(data);
free(data)
free
free
data
data
-----joern-----
(1,33,0)
(20,39,0)
(20,33,0)
(34,28,0)
(9,16,0)
(1,25,0)
(1,17,0)
(30,31,0)
(26,39,0)
(13,4,0)
(8,24,0)
(13,25,0)
(8,36,0)
(7,39,0)
(22,4,0)
(31,39,0)
(21,33,0)
(4,13,0)
(37,5,0)
(10,20,0)
(29,13,0)
(33,39,0)
(16,33,0)
(0,38,0)
(18,33,0)
(6,30,0)
(35,28,0)
(11,25,0)
(32,36,0)
(30,5,0)
(19,21,0)
(5,31,0)
(12,5,0)
(17,1,0)
(25,13,0)
(2,31,0)
(3,16,0)
(33,1,0)
(27,30,0)
(36,8,0)
(5,33,0)
(23,21,0)
(25,1,0)
(38,30,0)
(21,39,0)
(38,31,0)
(28,39,0)
(25,28,0)
(14,31,0)
(13,4,1)
(5,33,1)
(8,36,1)
(19,16,1)
(20,33,1)
(6,27,1)
(32,16,1)
(33,1,1)
(5,12,1)
(21,33,1)
(19,8,1)
(18,28,1)
(4,22,1)
(30,5,1)
(25,28,1)
(38,30,1)
(23,19,1)
(36,32,1)
(16,3,1)
(35,34,1)
(16,33,1)
(29,11,1)
(20,10,1)
(1,25,1)
(1,17,1)
(28,35,1)
(9,33,1)
(37,20,1)
(25,13,1)
(11,18,1)
(3,9,1)
(12,37,1)
(21,23,1)
(0,30,1)
(30,6,1)
(15,38,1)
(27,5,1)
(22,29,1)
(38,0,1)
(10,21,1)
(25,28,2)
(13,4,2)
(33,1,2)
(25,13,2)
(21,33,2)
(30,5,2)
(1,25,2)
(38,30,2)
(20,33,2)
(36,16,2)
(8,16,2)
(32,16,2)
(16,33,2)
(8,36,2)
(5,33,2)
(1,17,2)
-----------------------------------
(0,data)
(1,(char *)
(2,dataCopy)
(3,NULL)
(4,sizeof(char)
(5,* dataCopy = data)
(6,dataCopy)
(7,data)
(8,exit(-1)
(9,data)
(10,data)
(11,data)
(12,data)
(13,100*sizeof(char)
(14,data)
(15,RET)
(16,data == NULL)
(17,char *)
(18,data)
(19,data)
(20,printLine(data)
(21,strcpy(data, "A String")
(22,char)
(23,"A String")
(24,)
(25,realloc(data, 100*sizeof(char)
(26,if (data == NULL)
(27,data)
(28,data = NULL)
(29,100)
(30,* data = dataCopy)
(31,)
(32,1)
(33,data = (char *)
(34,data)
(35,NULL)
(36,-1)
(37,dataCopy)
(38,free(data)
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^