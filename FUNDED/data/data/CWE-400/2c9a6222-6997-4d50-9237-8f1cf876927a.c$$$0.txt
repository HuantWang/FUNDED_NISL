-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_10_bad()
{
    if(globalTrue)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_10_bad(){    if(globalTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_10_bad()
CWE401_Memory_Leak__malloc_realloc_char_10_bad
{    if(globalTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(globalTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
globalTrue
globalTrue
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(1,47,0)
(43,3,0)
(8,41,0)
(2,1,0)
(22,42,0)
(13,44,0)
(41,8,0)
(3,46,0)
(31,13,0)
(28,29,0)
(35,3,0)
(9,4,0)
(50,16,0)
(36,38,0)
(13,39,0)
(32,4,0)
(49,45,0)
(37,14,0)
(23,19,0)
(26,38,0)
(21,1,0)
(20,1,0)
(16,9,0)
(10,29,0)
(24,46,0)
(3,43,0)
(38,39,0)
(29,39,0)
(45,46,0)
(46,1,0)
(4,23,0)
(46,3,0)
(42,44,0)
(23,4,0)
(7,45,0)
(9,16,0)
(6,41,0)
(23,39,0)
(39,1,0)
(3,35,0)
(0,39,0)
(8,15,0)
(33,43,0)
(42,39,0)
(43,33,0)
(34,11,0)
(48,40,0)
(4,46,0)
(14,46,0)
(19,23,0)
(45,1,0)
(40,1,0)
(4,9,0)
(33,11,0)
(30,9,0)
(38,44,0)
(39,23,0)
(17,14,0)
(27,5,0)
(40,46,0)
(18,33,0)
(11,33,0)
(31,38,1)
(29,28,1)
(29,39,1)
(40,48,1)
(6,14,1)
(38,36,1)
(41,6,1)
(8,41,1)
(49,8,1)
(46,3,1)
(7,49,1)
(13,39,1)
(48,45,1)
(26,29,1)
(3,35,1)
(45,46,1)
(40,46,1)
(50,30,1)
(36,26,1)
(10,39,1)
(42,39,1)
(43,33,1)
(33,11,1)
(25,12,1)
(13,31,1)
(4,46,1)
(25,42,1)
(17,37,1)
(9,16,1)
(42,22,1)
(32,0,1)
(45,7,1)
(39,23,1)
(11,34,1)
(18,24,1)
(3,43,1)
(38,39,1)
(49,14,1)
(14,46,1)
(28,10,1)
(25,29,1)
(16,50,1)
(14,17,1)
(34,18,1)
(30,32,1)
(23,19,1)
(0,40,1)
(37,46,1)
(22,13,1)
(23,4,1)
(24,12,1)
(4,9,1)
(33,11,2)
(4,12,2)
(9,16,2)
(40,12,2)
(37,12,2)
(23,12,2)
(50,12,2)
(0,12,2)
(10,12,2)
(3,35,2)
(26,29,2)
(23,4,2)
(46,3,2)
(39,12,2)
(42,39,2)
(18,12,2)
(36,29,2)
(23,19,2)
(4,9,2)
(13,39,2)
(38,29,2)
(30,12,2)
(8,14,2)
(28,12,2)
(29,12,2)
(31,29,2)
(22,29,2)
(17,12,2)
(24,12,2)
(14,12,2)
(41,14,2)
(49,12,2)
(13,29,2)
(45,12,2)
(48,12,2)
(46,12,2)
(4,46,2)
(43,33,2)
(29,39,2)
(42,29,2)
(32,12,2)
(9,12,2)
(8,41,2)
(3,43,2)
(6,14,2)
(3,12,2)
(11,12,2)
(45,46,2)
(40,46,2)
(14,46,2)
(34,12,2)
(39,23,2)
(33,12,2)
(38,39,2)
(16,12,2)
(43,12,2)
(7,12,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,(char *)
(4,realloc(data, (130000)
(5,)
(6,1)
(7,"A String")
(8,exit(-1)
(9,(130000)
(10,data)
(11,sizeof(char)
(12,globalTrue)
(13,printLine(data)
(14,data == NULL)
(15,)
(16,sizeof(char)
(17,NULL)
(18,100)
(19,char *)
(20,if (data != NULL)
(21,if (data == NULL)
(22,data)
(23,(char *)
(24,data)
(25,RET)
(26,data)
(27,if(globalTrue)
(28,NULL)
(29,data != NULL)
(30,130000)
(31,data)
(32,data)
(33,100*sizeof(char)
(34,char)
(35,char *)
(36,"New String")
(37,data)
(38,strcpy(data, "New String")
(39,data = (char *)
(40,printLine(data)
(41,-1)
(42,free(data)
(43,malloc(100*sizeof(char)
(44,)
(45,strcpy(data, "A String")
(46,* data = (char *)
(47,)
(48,data)
(49,data)
(50,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^