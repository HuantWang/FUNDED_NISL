-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_17_bad()
{
    int j;
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    for(j = 0; j < 1; j++)
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
15,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
46,48
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,17,21,23,27,30,31,32,37,38,41,42,45,50,53,54,55,59,61,66,68
-----computeFrom-----
19,20
19,21
25,26
25,27
35,36
35,37
39,40
39,41
48,49
48,50
57,58
57,59
-----guardedBy-----
59,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_17_bad(){    int j;    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    for(j = 0; j < 1; j++)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_17_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_17_bad
{    int j;    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    for(j = 0; j < 1; j++)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
int j;
int j;
int
j
j
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
for(j = 0; j < 1; j++)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(18,28,0)
(19,15,0)
(25,1,0)
(26,31,0)
(31,26,0)
(13,30,0)
(17,6,0)
(8,3,0)
(26,28,0)
(9,25,0)
(23,28,0)
(14,1,0)
(20,28,0)
(29,5,0)
(1,15,0)
(32,5,0)
(33,2,0)
(24,25,0)
(5,2,0)
(30,1,0)
(30,12,0)
(22,28,0)
(3,2,0)
(21,31,0)
(1,6,0)
(0,2,0)
(7,26,0)
(16,15,0)
(15,1,0)
(11,22,0)
(10,22,0)
(27,31,0)
(5,2,1)
(29,3,1)
(32,29,1)
(3,8,1)
(14,5,1)
(4,5,1)
(22,11,1)
(31,21,1)
(13,25,1)
(11,10,1)
(3,2,1)
(5,32,1)
(16,19,1)
(8,25,1)
(25,24,1)
(27,7,1)
(24,9,1)
(1,15,1)
(21,27,1)
(8,30,1)
(19,14,1)
(33,0,1)
(30,13,1)
(30,1,1)
(25,1,1)
(26,31,1)
(7,22,1)
(29,2,1)
(2,33,1)
(9,1,1)
(0,26,1)
(15,16,1)
(3,5,2)
(5,2,2)
(25,5,2)
(16,5,2)
(1,5,2)
(30,25,2)
(19,5,2)
(24,5,2)
(29,5,2)
(5,5,2)
(14,5,2)
(15,5,2)
(13,25,2)
(8,5,2)
(9,5,2)
(3,2,2)
(30,1,2)
(32,5,2)
(26,31,2)
(1,15,2)
(25,1,2)
-----------------------------------
(0,j)
(1,data = fopen("BadSink_fopen.txt", "w+")
(2,j = 0)
(3,j++)
(4,RET)
(5,j < 1)
(6,)
(7,data)
(8,j)
(9,data)
(10,data)
(11,NULL)
(12,)
(13,data)
(14,data)
(15,fopen("BadSink_fopen.txt", "w+")
(16,"w+")
(17,if (data != NULL)
(18,data)
(19,"BadSink_fopen.txt")
(20,j)
(21,"w+")
(22,data = NULL)
(23,for(j = 0; j < 1; j++)
(24,NULL)
(25,data != NULL)
(26,data = fopen("BadSource_fopen.txt", "w+")
(27,"BadSource_fopen.txt")
(28,)
(29,j)
(30,fclose(data)
(31,fopen("BadSource_fopen.txt", "w+")
(32,1)
(33,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^