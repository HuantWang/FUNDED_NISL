-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
58,59
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,47,51,53,56,57,59
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,5,0)
(9,5,0)
(25,10,0)
(1,13,0)
(12,0,0)
(17,4,0)
(20,11,0)
(11,19,0)
(24,19,0)
(7,14,0)
(5,12,0)
(13,14,0)
(6,7,0)
(7,0,0)
(13,7,0)
(3,11,0)
(5,10,0)
(22,19,0)
(12,5,0)
(8,21,0)
(18,4,0)
(0,12,0)
(15,0,0)
(0,15,0)
(23,21,0)
(2,19,0)
(0,7,0)
(8,23,1)
(0,12,1)
(18,17,1)
(9,6,1)
(1,7,1)
(11,3,1)
(12,5,1)
(5,10,1)
(3,20,1)
(10,25,1)
(17,13,1)
(23,11,1)
(6,21,1)
(17,21,1)
(7,0,1)
(16,4,1)
(0,15,1)
(4,18,1)
(13,7,1)
(25,9,1)
(13,1,1)
(21,8,1)
(12,5,2)
(5,21,2)
(13,7,2)
(0,12,2)
(10,21,2)
(5,10,2)
(0,15,2)
(13,21,2)
(0,21,2)
(7,0,2)
(12,21,2)
(9,21,2)
(1,21,2)
(6,21,2)
(7,21,2)
(25,21,2)
-----------------------------------
(0,(wchar_t *)
(1,data)
(2,data)
(3,NULL)
(4,5==5)
(5,100*sizeof(wchar_t)
(6,data)
(7,data = (wchar_t *)
(8,5)
(9,100)
(10,sizeof(wchar_t)
(11,data = NULL)
(12,ALLOCA(100*sizeof(wchar_t)
(13,printWLine(data)
(14,)
(15,wchar_t *)
(16,RET)
(17,5)
(18,5)
(19,)
(20,data)
(21,5==5)
(22,if(5==5)
(23,5)
(24,if(5==5)
(25,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^