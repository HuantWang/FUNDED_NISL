-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_17_bad()
{
    int i,j;
    int64_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
88,89
88,90
88,91
88,92
89,90
90,91
90,92
91,92
94,95
94,96
95,96
98,99
99,100
101,102
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,77,78,79,83,86,87,92,93,96,97,100,102
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
74,75
74,76
90,91
90,92
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_17_bad(){    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_17_bad()
CWE401_Memory_Leak__int64_t_malloc_17_bad
{    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(16,5,0)
(18,19,0)
(3,28,0)
(26,34,0)
(7,40,0)
(11,16,0)
(32,19,0)
(47,11,0)
(43,5,0)
(10,12,0)
(11,43,0)
(24,12,0)
(8,40,0)
(27,16,0)
(6,20,0)
(12,23,0)
(45,1,0)
(36,20,0)
(13,1,0)
(35,20,0)
(40,8,0)
(37,0,0)
(22,33,0)
(29,15,0)
(0,15,0)
(46,33,0)
(42,23,0)
(38,23,0)
(40,7,0)
(48,5,0)
(45,14,0)
(28,31,0)
(19,16,0)
(16,40,0)
(25,31,0)
(7,0,0)
(1,45,0)
(17,20,0)
(21,11,0)
(33,20,0)
(15,0,0)
(4,31,0)
(34,31,0)
(0,7,0)
(39,34,0)
(44,20,0)
(41,9,0)
(40,16,0)
(9,23,0)
(2,5,0)
(43,11,0)
(45,1,1)
(10,24,1)
(41,12,1)
(29,37,1)
(27,34,1)
(24,9,1)
(18,16,1)
(1,13,1)
(19,32,1)
(28,31,1)
(24,23,1)
(38,34,1)
(28,3,1)
(25,4,1)
(33,46,1)
(26,28,1)
(7,0,1)
(0,15,1)
(43,11,1)
(48,19,1)
(3,43,1)
(15,29,1)
(39,26,1)
(23,42,1)
(32,18,1)
(4,33,1)
(9,23,1)
(13,19,1)
(30,12,1)
(42,38,1)
(11,47,1)
(31,25,1)
(48,45,1)
(12,10,1)
(40,7,1)
(34,31,1)
(16,40,1)
(12,23,1)
(37,27,1)
(19,16,1)
(9,41,1)
(47,21,1)
(11,16,1)
(40,8,1)
(21,48,1)
(26,31,1)
(46,22,1)
(34,39,1)
(0,34,2)
(16,40,2)
(32,34,2)
(15,34,2)
(1,19,2)
(0,15,2)
(18,34,2)
(12,23,2)
(10,12,2)
(48,34,2)
(12,12,2)
(7,34,2)
(28,34,2)
(43,11,2)
(19,34,2)
(47,34,2)
(9,12,2)
(24,12,2)
(26,34,2)
(28,31,2)
(3,34,2)
(40,8,2)
(11,16,2)
(11,34,2)
(37,34,2)
(27,34,2)
(45,1,2)
(40,7,2)
(34,31,2)
(19,16,2)
(39,34,2)
(13,19,2)
(41,12,2)
(34,34,2)
(29,34,2)
(16,34,2)
(40,34,2)
(21,34,2)
(9,23,2)
(43,34,2)
(7,0,2)
(45,19,2)
-----------------------------------
(0,100*sizeof(int64_t)
(1,-1)
(2,if (data == NULL)
(3,i)
(4,i)
(5,)
(6,for(i = 0; i < 1; i++)
(7,malloc(100*sizeof(int64_t)
(8,int64_t *)
(9,j++)
(10,1)
(11,data[0])
(12,j < 1)
(13,1)
(14,)
(15,sizeof(int64_t)
(16,data = (int64_t *)
(17,i)
(18,data)
(19,data == NULL)
(20,)
(21,data)
(22,data)
(23,j = 0)
(24,j)
(25,0)
(26,i)
(27,data)
(28,i++)
(29,int64_t)
(30,RET)
(31,i = 0)
(32,NULL)
(33,data = NULL)
(34,i < 1)
(35,for(j = 0; j < 1; j++)
(36,data)
(37,100)
(38,j)
(39,1)
(40,(int64_t *)
(41,j)
(42,0)
(43,printLongLongLine(data[0])
(44,j)
(45,exit(-1)
(46,NULL)
(47,0)
(48,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^