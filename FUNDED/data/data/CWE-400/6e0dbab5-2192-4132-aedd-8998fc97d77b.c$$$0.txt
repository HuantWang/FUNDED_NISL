-----label-----
1
-----code-----
static int
peer_chr_add(struct peer *peer,  uint16_t svc_start_handle,
             const struct ble_gatt_chr *gatt_chr)
{
    struct peer_chr *prev;
    struct peer_chr *chr;
    struct peer_svc *svc;

    svc = peer_svc_find(peer, svc_start_handle, NULL);
    if (svc == NULL) {
        /* Can't find service for discovered characteristic; this shouldn't
         * happen.
         */
        assert(0);
        return BLE_HS_EUNKNOWN;
    }

    chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);
    if (chr != NULL) {
        /* Characteristic already discovered. */
        return 0;
    }

    chr = os_memblock_get(&peer_chr_pool);
    if (chr == NULL) {
        /* Out of memory. */
        return BLE_HS_ENOMEM;
    }
    memset(chr, 0, sizeof *chr);

    chr->chr = *gatt_chr;

    if (prev == NULL) {
        SLIST_INSERT_HEAD(&svc->chrs, chr, next);
    } else {
        SLIST_NEXT(prev, next) = chr;
    }

    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
48,52
49,50
51,52
53,54
55,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
76,79
76,80
77,78
79,80
81,82
81,83
82,83
85,86
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
95,96
97,98
98,99
98,100
99,100
101,102
101,103
102,103
104,105
105,106
107,108
107,109
108,109
108,110
109,110
111,112
113,114
114,115
115,116
117,118
118,119
118,120
118,121
118,122
119,120
121,122
124,125
125,126
126,127
128,129
129,130
129,131
130,131
130,132
131,132
134,135
135,136
137,138
137,139
137,140
138,139
138,140
139,140
141,142
143,144
144,145
145,146
145,147
145,148
145,149
146,147
148,149
149,150
149,151
150,151
153,154
155,156
157,158
158,159
159,160
159,161
160,161
160,162
160,163
161,162
163,164
165,166
167,168
169,170
-----nextToken-----
2,4,7,9,10,13,15,18,20,21,26,28,29,33,35,36,40,42,43,47,50,52,54,56,60,62,67,68,71,75,78,80,83,84,87,91,93,96,100,103,106,110,112,116,120,122,123,127,132,133,136,140,142,147,151,152,154,156,162,164,166,168,170
-----computeFrom-----
45,46
45,47
58,59
58,60
73,74
73,75
89,90
89,91
98,99
98,100
108,109
108,110
129,130
129,131
138,139
138,140
159,160
159,161
-----guardedBy-----
-----guardedByNegation-----
140,164
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intpeer_chr_add(struct peer *peer,  uint16_t svc_start_handle,             const struct ble_gatt_chr *gatt_chr){    struct peer_chr *prev;    struct peer_chr *chr;    struct peer_svc *svc;    svc = peer_svc_find(peer, svc_start_handle, NULL);    if (svc == NULL) {        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }    chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);    if (chr != NULL) {        /* Characteristic already discovered. */        return 0;    }    chr = os_memblock_get(&peer_chr_pool);    if (chr == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }    memset(chr, 0, sizeof *chr);    chr->chr = *gatt_chr;    if (prev == NULL) {        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    } else {        SLIST_NEXT(prev, next) = chr;    }    return 0;}
static int
peer_chr_add(struct peer *peer,  uint16_t svc_start_handle,             const struct ble_gatt_chr *gatt_chr)
peer_chr_add
struct peer *peer
struct peer
peer
*peer
*
peer
uint16_t svc_start_handle
uint16_t
uint16_t
svc_start_handle
svc_start_handle
const struct ble_gatt_chr *gatt_chr
const struct ble_gatt_chr
ble_gatt_chr
*gatt_chr
*
gatt_chr
{    struct peer_chr *prev;    struct peer_chr *chr;    struct peer_svc *svc;    svc = peer_svc_find(peer, svc_start_handle, NULL);    if (svc == NULL) {        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }    chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);    if (chr != NULL) {        /* Characteristic already discovered. */        return 0;    }    chr = os_memblock_get(&peer_chr_pool);    if (chr == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }    memset(chr, 0, sizeof *chr);    chr->chr = *gatt_chr;    if (prev == NULL) {        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    } else {        SLIST_NEXT(prev, next) = chr;    }    return 0;}
struct peer_chr *prev;
struct peer_chr *prev;
struct peer_chr
peer_chr
*prev
*
prev
struct peer_chr *chr;
struct peer_chr *chr;
struct peer_chr
peer_chr
*chr
*
chr
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
svc = peer_svc_find(peer, svc_start_handle, NULL);
svc = peer_svc_find(peer, svc_start_handle, NULL)
svc
svc
peer_svc_find(peer, svc_start_handle, NULL)
peer_svc_find
peer_svc_find
peer
peer
svc_start_handle
svc_start_handle
NULL
NULL
if (svc == NULL) {        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }
svc == NULL
svc
svc
NULL
NULL
{        /* Can't find service for discovered characteristic; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }
assert(0);
assert(0)
assert
assert
0
return BLE_HS_EUNKNOWN;
BLE_HS_EUNKNOWN
BLE_HS_EUNKNOWN
chr = peer_chr_find(svc, gatt_chr->def_handle, &prev);
chr = peer_chr_find(svc, gatt_chr->def_handle, &prev)
chr
chr
peer_chr_find(svc, gatt_chr->def_handle, &prev)
peer_chr_find
peer_chr_find
svc
svc
gatt_chr->def_handle
gatt_chr
gatt_chr
def_handle
&prev
prev
prev
if (chr != NULL) {        /* Characteristic already discovered. */        return 0;    }
chr != NULL
chr
chr
NULL
NULL
{        /* Characteristic already discovered. */        return 0;    }
return 0;
0
chr = os_memblock_get(&peer_chr_pool);
chr = os_memblock_get(&peer_chr_pool)
chr
chr
os_memblock_get(&peer_chr_pool)
os_memblock_get
os_memblock_get
&peer_chr_pool
peer_chr_pool
peer_chr_pool
if (chr == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }
chr == NULL
chr
chr
NULL
NULL
{        /* Out of memory. */        return BLE_HS_ENOMEM;    }
return BLE_HS_ENOMEM;
BLE_HS_ENOMEM
BLE_HS_ENOMEM
memset(chr, 0, sizeof *chr);
memset(chr, 0, sizeof *chr)
memset
memset
chr
chr
0
sizeof *chr
*chr
chr
chr
chr->chr = *gatt_chr;
chr->chr = *gatt_chr
chr->chr
chr
chr
chr
*gatt_chr
gatt_chr
gatt_chr
if (prev == NULL) {        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    } else {        SLIST_NEXT(prev, next) = chr;    }
prev == NULL
prev
prev
NULL
NULL
{        SLIST_INSERT_HEAD(&svc->chrs, chr, next);    }
SLIST_INSERT_HEAD(&svc->chrs, chr, next);
SLIST_INSERT_HEAD(&svc->chrs, chr, next)
SLIST_INSERT_HEAD
SLIST_INSERT_HEAD
&svc->chrs
svc->chrs
svc
svc
chrs
chr
chr
next
next
{        SLIST_NEXT(prev, next) = chr;    }
SLIST_NEXT(prev, next) = chr;
SLIST_NEXT(prev, next) = chr
SLIST_NEXT(prev, next)
SLIST_NEXT
SLIST_NEXT
prev
prev
next
next
chr
chr
return 0;
0
-----joern-----
(39,33,0)
(26,13,0)
(13,25,0)
(36,5,0)
(20,64,0)
(71,27,0)
(29,75,0)
(45,80,0)
(22,64,0)
(46,38,0)
(70,6,0)
(56,30,0)
(9,48,0)
(18,81,0)
(57,18,0)
(71,76,0)
(13,30,0)
(69,65,0)
(81,80,0)
(66,9,0)
(66,81,0)
(50,72,0)
(65,29,0)
(39,70,0)
(73,31,0)
(79,70,0)
(55,30,0)
(8,80,0)
(30,55,0)
(33,15,0)
(30,77,0)
(3,4,0)
(32,4,0)
(75,80,0)
(52,66,0)
(75,67,0)
(64,77,0)
(82,38,0)
(76,80,0)
(58,67,0)
(12,80,0)
(40,80,0)
(30,13,0)
(48,42,0)
(51,81,0)
(18,53,0)
(21,82,0)
(67,25,0)
(54,49,0)
(48,9,0)
(34,49,0)
(9,66,0)
(81,18,0)
(5,0,0)
(23,81,0)
(14,71,0)
(35,82,0)
(44,77,0)
(18,16,0)
(11,51,0)
(46,76,0)
(65,72,0)
(72,71,0)
(65,80,0)
(7,18,0)
(29,76,0)
(10,76,0)
(37,48,0)
(39,65,0)
(77,30,0)
(68,15,0)
(43,31,0)
(63,29,0)
(1,33,0)
(28,72,0)
(38,82,0)
(59,68,0)
(17,18,0)
(82,76,0)
(47,55,0)
(73,76,0)
(62,80,0)
(41,48,0)
(48,76,0)
(76,73,0)
(60,66,0)
(78,13,0)
(31,73,0)
(49,76,0)
(30,81,0)
(82,80,0)
(24,46,0)
(38,46,0)
(77,80,0)
(74,51,0)
(39,5,0)
(67,75,0)
(61,29,0)
(2,80,0)
(19,80,0)
(4,32,1)
(48,76,1)
(18,7,1)
(64,77,1)
(35,49,1)
(49,76,1)
(64,22,1)
(66,81,1)
(37,41,1)
(24,21,1)
(13,78,1)
(67,58,1)
(14,72,1)
(57,17,1)
(50,28,1)
(18,16,1)
(67,25,1)
(51,11,1)
(56,44,1)
(43,10,1)
(65,72,1)
(36,49,1)
(7,57,1)
(18,53,1)
(73,31,1)
(31,43,1)
(71,14,1)
(26,56,1)
(54,34,1)
(39,65,1)
(20,77,1)
(82,38,1)
(69,71,1)
(39,70,1)
(13,25,1)
(55,47,1)
(69,48,1)
(79,64,1)
(75,67,1)
(68,59,1)
(39,5,1)
(29,61,1)
(76,73,1)
(51,81,1)
(65,29,1)
(48,37,1)
(70,79,1)
(77,30,1)
(49,54,1)
(1,68,1)
(46,24,1)
(9,66,1)
(46,76,1)
(72,50,1)
(59,51,1)
(10,64,1)
(58,29,1)
(34,76,1)
(71,76,1)
(44,51,1)
(5,36,1)
(66,52,1)
(30,13,1)
(65,69,1)
(30,55,1)
(17,23,1)
(82,76,1)
(39,33,1)
(81,18,1)
(60,4,1)
(11,74,1)
(78,26,1)
(38,46,1)
(32,3,1)
(61,63,1)
(74,81,1)
(3,75,1)
(33,1,1)
(21,35,1)
(48,9,1)
(52,60,1)
(28,4,1)
(30,81,1)
(63,82,1)
(47,13,1)
(22,20,1)
(29,76,1)
(41,9,1)
(51,81,2)
(20,51,2)
(38,46,2)
(9,4,2)
(39,65,2)
(46,76,2)
(52,4,2)
(82,76,2)
(39,5,2)
(82,38,2)
(39,70,2)
(66,81,2)
(33,51,2)
(59,51,2)
(48,76,2)
(39,33,2)
(64,77,2)
(70,64,2)
(77,30,2)
(36,49,2)
(32,49,2)
(54,64,2)
(21,49,2)
(49,64,2)
(78,51,2)
(38,49,2)
(81,18,2)
(71,76,2)
(13,25,2)
(76,64,2)
(10,64,2)
(77,51,2)
(71,4,2)
(43,64,2)
(30,51,2)
(47,51,2)
(65,49,2)
(58,49,2)
(34,64,2)
(56,51,2)
(5,49,2)
(29,49,2)
(48,9,2)
(67,25,2)
(18,53,2)
(29,76,2)
(65,29,2)
(61,49,2)
(3,49,2)
(68,51,2)
(72,4,2)
(48,4,2)
(35,49,2)
(75,49,2)
(50,4,2)
(46,49,2)
(28,4,2)
(9,66,2)
(49,76,2)
(79,64,2)
(13,51,2)
(1,51,2)
(75,67,2)
(82,49,2)
(60,4,2)
(64,51,2)
(76,73,2)
(18,16,2)
(30,55,2)
(30,13,2)
(4,49,2)
(31,64,2)
(65,72,2)
(30,81,2)
(55,51,2)
(67,49,2)
(24,49,2)
(63,49,2)
(44,51,2)
(69,49,2)
(73,31,2)
(14,4,2)
(22,51,2)
(66,4,2)
(73,64,2)
(26,51,2)
(41,4,2)
(37,4,2)
-----------------------------------
(0,)
(1,BLE_HS_EUNKNOWN)
(2,chr)
(3,prev)
(4,prev == NULL)
(5,return BLE_HS_ENOMEM;)
(6,)
(7,NULL)
(8,if (chr != NULL)
(9,&svc->chrs)
(10,chr)
(11,NULL)
(12,svc)
(13,gatt_chr->def_handle)
(14,chr)
(15,)
(16,uint16_t svc_start_handle)
(17,peer)
(18,peer_svc_find(peer, svc_start_handle, NULL)
(19,if (chr == NULL)
(20,chr)
(21,0)
(22,NULL)
(23,svc)
(24,chr)
(25,const struct ble_gatt_chr *gatt_chr)
(26,gatt_chr)
(27,)
(28,prev)
(29,chr->chr)
(30,peer_chr_find(svc, gatt_chr->def_handle, &prev)
(31,&peer_chr_pool)
(32,NULL)
(33,return BLE_HS_EUNKNOWN;)
(34,chr)
(35,chr)
(36,BLE_HS_ENOMEM)
(37,next)
(38,sizeof *chr)
(39,RET)
(40,prev)
(41,chr)
(42,)
(43,peer_chr_pool)
(44,chr)
(45,if (prev == NULL)
(46,*chr)
(47,prev)
(48,SLIST_INSERT_HEAD(&svc->chrs, chr, next)
(49,chr == NULL)
(50,next)
(51,svc == NULL)
(52,chrs)
(53,struct peer *peer)
(54,NULL)
(55,&prev)
(56,svc)
(57,svc_start_handle)
(58,gatt_chr)
(59,0)
(60,svc)
(61,chr)
(62,if (svc == NULL)
(63,chr)
(64,chr != NULL)
(65,return 0;)
(66,svc->chrs)
(67,*gatt_chr)
(68,assert(0)
(69,0)
(70,return 0;)
(71,SLIST_NEXT(prev, next)
(72,SLIST_NEXT(prev, next)
(73,os_memblock_get(&peer_chr_pool)
(74,svc)
(75,chr->chr = *gatt_chr)
(76,chr = os_memblock_get(&peer_chr_pool)
(77,chr = peer_chr_find(svc, gatt_chr->def_handle, &prev)
(78,def_handle)
(79,0)
(80,)
(81,svc = peer_svc_find(peer, svc_start_handle, NULL)
(82,memset(chr, 0, sizeof *chr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^