-----label-----
1
-----code-----
int connection_dequeue(Connection *connection, Message **messagep) {
        const char *input;
        size_t n_input;
        int r;

        if (_c_unlikely_(!connection->authenticated)) {
                do {
                        r = socket_dequeue_line(&connection->socket, &input, &n_input);
                        if (r)
                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);

                        if (!input) {
                                *messagep = NULL;
                                return 0;
                        }

                        r = connection_feed_sasl(connection, input, n_input);
                        if (r)
                                return error_trace(r);
                } while (!connection->authenticated);
        }

        r = socket_dequeue(&connection->socket, messagep);
        if (r) {
                if (r == SOCKET_E_EOF)
                        return CONNECTION_E_EOF;
                else if (r == SOCKET_E_QUOTA)
                        return CONNECTION_E_QUOTA;

                return error_fold(r);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
14,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
19,20
20,21
20,22
22,23
22,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
34,35
36,37
36,38
37,38
37,39
38,39
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
56,57
56,58
57,58
60,61
61,62
63,64
64,65
66,67
66,68
67,68
69,70
70,71
70,72
70,73
71,72
72,73
72,74
73,74
75,76
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
86,87
88,89
88,90
89,90
90,91
90,92
91,92
92,93
94,95
96,97
98,99
99,100
99,101
100,101
102,103
102,104
102,105
102,106
103,104
105,106
107,108
109,110
111,112
111,113
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
125,126
126,127
126,128
127,128
129,130
129,131
129,132
130,131
132,133
133,134
133,135
134,135
137,138
139,140
139,141
140,141
142,143
142,144
143,144
143,145
143,146
144,145
144,146
145,146
147,148
149,150
150,151
152,153
152,154
153,154
153,155
154,155
156,157
158,159
159,160
161,162
162,163
162,164
163,164
165,166
167,168
-----nextToken-----
2,4,7,9,10,13,15,16,17,21,23,24,28,30,33,35,39,43,44,51,54,58,59,62,65,68,74,76,78,81,83,87,93,95,97,101,104,106,108,110,113,117,119,123,124,128,131,135,136,138,141,146,148,151,155,157,160,164,166,168
-----computeFrom-----
49,50
49,51
72,73
72,74
90,91
90,92
99,100
99,101
126,127
126,128
144,145
144,146
153,154
153,155
-----guardedBy-----
-----guardedByNegation-----
146,155
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int connection_dequeue(Connection *connection, Message **messagep) {        const char *input;        size_t n_input;        int r;        if (_c_unlikely_(!connection->authenticated)) {                do {                        r = socket_dequeue_line(&connection->socket, &input, &n_input);                        if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);                        if (!input) {                                *messagep = NULL;                                return 0;                        }                        r = connection_feed_sasl(connection, input, n_input);                        if (r)                                return error_trace(r);                } while (!connection->authenticated);        }        r = socket_dequeue(&connection->socket, messagep);        if (r) {                if (r == SOCKET_E_EOF)                        return CONNECTION_E_EOF;                else if (r == SOCKET_E_QUOTA)                        return CONNECTION_E_QUOTA;                return error_fold(r);        }        return 0;}
int
connection_dequeue(Connection *connection, Message **messagep)
connection_dequeue
Connection *connection
Connection
Connection
*connection
*
connection
Message **messagep
Message
Message
**messagep
*
*
messagep
{        const char *input;        size_t n_input;        int r;        if (_c_unlikely_(!connection->authenticated)) {                do {                        r = socket_dequeue_line(&connection->socket, &input, &n_input);                        if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);                        if (!input) {                                *messagep = NULL;                                return 0;                        }                        r = connection_feed_sasl(connection, input, n_input);                        if (r)                                return error_trace(r);                } while (!connection->authenticated);        }        r = socket_dequeue(&connection->socket, messagep);        if (r) {                if (r == SOCKET_E_EOF)                        return CONNECTION_E_EOF;                else if (r == SOCKET_E_QUOTA)                        return CONNECTION_E_QUOTA;                return error_fold(r);        }        return 0;}
const char *input;
const char *input;
const char
*input
*
input
size_t n_input;
size_t n_input;
size_t
size_t
n_input
n_input
int r;
int r;
int
r
r
if (_c_unlikely_(!connection->authenticated)) {                do {                        r = socket_dequeue_line(&connection->socket, &input, &n_input);                        if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);                        if (!input) {                                *messagep = NULL;                                return 0;                        }                        r = connection_feed_sasl(connection, input, n_input);                        if (r)                                return error_trace(r);                } while (!connection->authenticated);        }
_c_unlikely_(!connection->authenticated)
_c_unlikely_
_c_unlikely_
!connection->authenticated
connection->authenticated
connection
connection
authenticated
{                do {                        r = socket_dequeue_line(&connection->socket, &input, &n_input);                        if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);                        if (!input) {                                *messagep = NULL;                                return 0;                        }                        r = connection_feed_sasl(connection, input, n_input);                        if (r)                                return error_trace(r);                } while (!connection->authenticated);        }
do {                        r = socket_dequeue_line(&connection->socket, &input, &n_input);                        if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);                        if (!input) {                                *messagep = NULL;                                return 0;                        }                        r = connection_feed_sasl(connection, input, n_input);                        if (r)                                return error_trace(r);                } while (!connection->authenticated);
{                        r = socket_dequeue_line(&connection->socket, &input, &n_input);                        if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);                        if (!input) {                                *messagep = NULL;                                return 0;                        }                        r = connection_feed_sasl(connection, input, n_input);                        if (r)                                return error_trace(r);                }
r = socket_dequeue_line(&connection->socket, &input, &n_input);
r = socket_dequeue_line(&connection->socket, &input, &n_input)
r
r
socket_dequeue_line(&connection->socket, &input, &n_input)
socket_dequeue_line
socket_dequeue_line
&connection->socket
connection->socket
connection
connection
socket
&input
input
input
&n_input
n_input
n_input
if (r)                                return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);
r
r
return (r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r);
(r == SOCKET_E_EOF) ? CONNECTION_E_EOF : error_fold(r)
(r == SOCKET_E_EOF)
r == SOCKET_E_EOF
r
r
SOCKET_E_EOF
SOCKET_E_EOF
CONNECTION_E_EOF
CONNECTION_E_EOF
error_fold(r)
error_fold
error_fold
r
r
if (!input) {                                *messagep = NULL;                                return 0;                        }
!input
input
input
{                                *messagep = NULL;                                return 0;                        }
*messagep = NULL;
*messagep = NULL
*messagep
messagep
messagep
NULL
NULL
return 0;
0
r = connection_feed_sasl(connection, input, n_input);
r = connection_feed_sasl(connection, input, n_input)
r
r
connection_feed_sasl(connection, input, n_input)
connection_feed_sasl
connection_feed_sasl
connection
connection
input
input
n_input
n_input
if (r)                                return error_trace(r);
r
r
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
!connection->authenticated
connection->authenticated
connection
connection
authenticated
r = socket_dequeue(&connection->socket, messagep);
r = socket_dequeue(&connection->socket, messagep)
r
r
socket_dequeue(&connection->socket, messagep)
socket_dequeue
socket_dequeue
&connection->socket
connection->socket
connection
connection
socket
messagep
messagep
if (r) {                if (r == SOCKET_E_EOF)                        return CONNECTION_E_EOF;                else if (r == SOCKET_E_QUOTA)                        return CONNECTION_E_QUOTA;                return error_fold(r);        }
r
r
{                if (r == SOCKET_E_EOF)                        return CONNECTION_E_EOF;                else if (r == SOCKET_E_QUOTA)                        return CONNECTION_E_QUOTA;                return error_fold(r);        }
if (r == SOCKET_E_EOF)                        return CONNECTION_E_EOF;                else if (r == SOCKET_E_QUOTA)                        return CONNECTION_E_QUOTA;
r == SOCKET_E_EOF
r
r
SOCKET_E_EOF
SOCKET_E_EOF
return CONNECTION_E_EOF;
CONNECTION_E_EOF
CONNECTION_E_EOF
if (r == SOCKET_E_QUOTA)                        return CONNECTION_E_QUOTA;
r == SOCKET_E_QUOTA
r
r
SOCKET_E_QUOTA
SOCKET_E_QUOTA
return CONNECTION_E_QUOTA;
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(62,41,0)
(6,69,0)
(70,13,0)
(36,41,0)
(31,78,0)
(45,77,0)
(87,7,0)
(17,26,0)
(72,33,0)
(50,59,0)
(11,53,0)
(87,29,0)
(62,75,0)
(14,51,0)
(75,29,0)
(75,62,0)
(38,27,0)
(79,32,0)
(29,75,0)
(47,73,0)
(84,34,0)
(18,43,0)
(40,14,0)
(20,0,0)
(12,34,0)
(83,75,0)
(2,41,0)
(76,0,0)
(65,61,0)
(40,62,0)
(45,4,0)
(35,24,0)
(56,14,0)
(37,51,0)
(80,76,0)
(29,87,0)
(80,54,0)
(86,41,0)
(75,53,0)
(73,4,0)
(26,59,0)
(9,80,0)
(73,26,0)
(27,35,0)
(61,3,0)
(5,33,0)
(74,72,0)
(53,75,0)
(45,79,0)
(23,22,0)
(81,66,0)
(24,35,0)
(55,12,0)
(42,69,0)
(59,26,0)
(3,61,0)
(59,7,0)
(60,16,0)
(69,80,0)
(52,51,0)
(61,7,0)
(57,87,0)
(1,32,0)
(26,41,0)
(68,34,0)
(15,34,0)
(0,76,0)
(27,7,0)
(80,69,0)
(44,61,0)
(71,59,0)
(51,62,0)
(19,62,0)
(78,54,0)
(58,85,0)
(66,69,0)
(48,34,0)
(67,6,0)
(66,79,0)
(78,72,0)
(5,78,0)
(82,27,0)
(51,14,0)
(30,22,0)
(88,83,0)
(28,5,0)
(64,6,0)
(0,7,0)
(22,69,0)
(14,77,0)
(69,34,0)
(45,5,0)
(45,16,0)
(35,27,0)
(75,83,0)
(45,12,0)
(45,43,0)
(63,59,0)
(49,34,0)
(14,40,0)
(10,40,0)
(25,0,0)
(76,80,0)
(8,87,0)
(56,51,1)
(21,26,1)
(75,53,1)
(26,59,1)
(50,71,1)
(67,64,1)
(74,78,1)
(14,56,1)
(30,6,1)
(27,38,1)
(46,62,1)
(45,79,1)
(52,46,1)
(31,85,1)
(63,17,1)
(51,62,1)
(28,72,1)
(14,51,1)
(10,51,1)
(16,60,1)
(14,40,1)
(75,29,1)
(64,39,1)
(37,52,1)
(62,75,1)
(47,21,1)
(78,54,1)
(0,7,1)
(23,30,1)
(61,44,1)
(43,18,1)
(80,76,1)
(61,7,1)
(19,24,1)
(79,66,1)
(71,63,1)
(73,47,1)
(8,19,1)
(53,11,1)
(45,4,1)
(24,35,1)
(72,74,1)
(42,24,1)
(40,62,1)
(42,3,1)
(4,73,1)
(78,31,1)
(80,54,1)
(5,78,1)
(45,77,1)
(51,37,1)
(87,7,1)
(5,28,1)
(57,8,1)
(66,81,1)
(29,87,1)
(0,25,1)
(6,67,1)
(25,20,1)
(75,83,1)
(66,69,1)
(45,5,1)
(83,88,1)
(81,22,1)
(27,7,1)
(6,69,1)
(80,9,1)
(65,21,1)
(40,10,1)
(45,16,1)
(38,82,1)
(19,3,1)
(77,14,1)
(55,39,1)
(20,42,1)
(45,43,1)
(59,7,1)
(44,65,1)
(60,6,1)
(85,58,1)
(12,55,1)
(69,80,1)
(18,22,1)
(3,61,1)
(76,0,1)
(17,85,1)
(73,26,1)
(58,46,1)
(59,50,1)
(22,69,1)
(35,27,1)
(87,57,1)
(88,53,1)
(11,29,1)
(39,69,1)
(9,76,1)
(45,12,1)
(22,23,1)
(77,46,2)
(28,85,2)
(9,24,2)
(62,75,2)
(80,24,2)
(61,7,2)
(40,62,2)
(59,7,2)
(6,39,2)
(75,3,2)
(75,24,2)
(42,3,2)
(19,24,2)
(51,62,2)
(76,24,2)
(63,85,2)
(75,83,2)
(29,87,2)
(45,77,2)
(67,39,2)
(12,39,2)
(51,46,2)
(26,85,2)
(73,21,2)
(87,24,2)
(5,78,2)
(72,85,2)
(21,85,2)
(19,3,2)
(73,26,2)
(0,7,2)
(42,24,2)
(45,5,2)
(66,22,2)
(29,24,2)
(14,46,2)
(14,40,2)
(16,6,2)
(26,59,2)
(87,3,2)
(88,3,2)
(60,6,2)
(46,24,2)
(75,53,2)
(24,35,2)
(69,80,2)
(39,3,2)
(8,24,2)
(45,12,2)
(47,21,2)
(45,16,2)
(53,24,2)
(11,3,2)
(61,21,2)
(50,85,2)
(83,24,2)
(64,39,2)
(25,3,2)
(78,85,2)
(37,46,2)
(85,46,2)
(0,3,2)
(76,3,2)
(23,6,2)
(22,69,2)
(80,54,2)
(6,69,2)
(80,76,2)
(40,51,2)
(83,3,2)
(14,51,2)
(31,85,2)
(88,24,2)
(20,24,2)
(58,46,2)
(66,69,2)
(75,29,2)
(3,61,2)
(45,79,2)
(4,21,2)
(45,4,2)
(87,7,2)
(71,85,2)
(22,6,2)
(17,85,2)
(62,24,2)
(44,21,2)
(39,24,2)
(56,51,2)
(11,24,2)
(8,3,2)
(69,24,2)
(55,39,2)
(74,85,2)
(18,22,2)
(65,21,2)
(69,3,2)
(45,43,2)
(57,3,2)
(81,22,2)
(3,21,2)
(35,27,2)
(20,3,2)
(10,51,2)
(53,3,2)
(30,6,2)
(76,0,2)
(5,85,2)
(46,3,2)
(43,22,2)
(79,22,2)
(78,54,2)
(0,24,2)
(9,3,2)
(25,24,2)
(57,24,2)
(59,85,2)
(29,3,2)
(80,3,2)
(62,3,2)
(52,46,2)
(27,7,2)
-----------------------------------
(0,connection->socket)
(1,if (r == SOCKET_E_EOF)
(2,if (r)
(3,!connection->authenticated)
(4,return error_trace(r)
(5,return 0;)
(6,r == SOCKET_E_EOF)
(7,Connection *connection)
(8,connection)
(9,messagep)
(10,r)
(11,input)
(12,return 0;)
(13,)
(14,(r == SOCKET_E_EOF)
(15,if (_c_unlikely_(!connection->authenticated)
(16,return CONNECTION_E_EOF;)
(17,r)
(18,CONNECTION_E_QUOTA)
(19,r)
(20,connection)
(21,r)
(22,r == SOCKET_E_QUOTA)
(23,SOCKET_E_QUOTA)
(24,_c_unlikely_(!connection->authenticated)
(25,socket)
(26,r = connection_feed_sasl(connection, input, n_input)
(27,connection->authenticated)
(28,0)
(29,&connection->socket)
(30,r)
(31,messagep)
(32,)
(33,)
(34,)
(35,!connection->authenticated)
(36,if (!input)
(37,SOCKET_E_EOF)
(38,authenticated)
(39,r)
(40,error_fold(r)
(41,)
(42,r)
(43,return CONNECTION_E_QUOTA;)
(44,authenticated)
(45,RET)
(46,r)
(47,r)
(48,n_input)
(49,r)
(50,n_input)
(51,r == SOCKET_E_EOF)
(52,r)
(53,&input)
(54,Message **messagep)
(55,0)
(56,CONNECTION_E_EOF)
(57,socket)
(58,input)
(59,connection_feed_sasl(connection, input, n_input)
(60,CONNECTION_E_EOF)
(61,connection->authenticated)
(62,r = socket_dequeue_line(&connection->socket, &input, &n_input)
(63,connection)
(64,r)
(65,connection)
(66,error_fold(r)
(67,SOCKET_E_EOF)
(68,input)
(69,r = socket_dequeue(&connection->socket, messagep)
(70,do)
(71,input)
(72,*messagep = NULL)
(73,error_trace(r)
(74,NULL)
(75,socket_dequeue_line(&connection->socket, &input, &n_input)
(76,&connection->socket)
(77,return (r == SOCKET_E_EOF)
(78,*messagep)
(79,return error_fold(r)
(80,socket_dequeue(&connection->socket, messagep)
(81,r)
(82,connection)
(83,&n_input)
(84,if (r)
(85,!input)
(86,if (r)
(87,connection->socket)
(88,n_input)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^