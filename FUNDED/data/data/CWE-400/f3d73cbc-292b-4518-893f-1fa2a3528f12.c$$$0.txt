-----label-----
0
-----code-----
lost_spi_entry *expire_old_lost_spi_entries(lost_spi_entry *currEntry, 
                                            struct timeval *now)
{
  // Bail if we are at end of list
  if (currEntry == NULL)
    return NULL;

  if (TDIFF(*now, currEntry->first_time) > 
      (int)HCNF.max_retries * (int)HCNF.icmp_timeout)
    {
      log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi);
      lost_spi_entry *tempNext = currEntry->next;
      free(currEntry);
      lost_spi_entry_count--;
      currEntry = tempNext;
      // Recurse to keep looking for more expired SPIs
      currEntry = expire_old_lost_spi_entries(currEntry, now);
    }
  else
    {
      // Recurse if we didn't find an expired SPI
      currEntry->next = expire_old_lost_spi_entries(currEntry->next, now);
    }

  return currEntry;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
19,22
20,21
20,22
21,22
21,23
22,23
24,25
26,27
27,28
29,30
29,31
29,32
30,31
30,32
31,32
31,33
31,34
32,33
34,35
35,36
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
43,45
46,47
46,48
47,48
50,51
50,52
51,52
51,53
54,55
54,56
55,56
58,59
58,60
58,61
58,62
58,63
58,64
59,60
60,61
60,62
60,63
60,64
61,62
63,64
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
74,76
74,77
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
102,104
102,105
103,104
105,106
107,108
109,110
110,111
111,112
111,113
112,113
112,114
113,114
116,117
116,118
116,119
117,118
119,120
119,121
120,121
123,124
125,126
126,127
-----nextToken-----
3,5,6,9,11,12,15,17,18,23,25,28,33,36,39,40,44,45,48,49,52,53,56,57,62,64,65,68,69,73,75,76,80,81,85,87,91,95,97,101,104,106,108,114,115,118,121,122,124,127
-----computeFrom-----
21,22
21,23
30,31
30,32
41,42
41,43
93,94
93,95
99,100
99,101
111,112
111,113
-----guardedBy-----
25,28
36,108
39,106
-----guardedByNegation-----
36,124
39,121
-----lastLexicalUse-----
36,124
39,121
-----jump-----
36,124
39,121
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
lost_spi_entry *expire_old_lost_spi_entries(lost_spi_entry *currEntry,                                             struct timeval *now){  // Bail if we are at end of list  if (currEntry == NULL)    return NULL;  if (TDIFF(*now, currEntry->first_time) >       (int)HCNF.max_retries * (int)HCNF.icmp_timeout)    {      log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi);      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      currEntry = tempNext;      // Recurse to keep looking for more expired SPIs      currEntry = expire_old_lost_spi_entries(currEntry, now);    }  else    {      // Recurse if we didn't find an expired SPI      currEntry->next = expire_old_lost_spi_entries(currEntry->next, now);    }  return currEntry;}
lost_spi_entry
lost_spi_entry
*expire_old_lost_spi_entries(lost_spi_entry *currEntry,                                             struct timeval *now)
*
expire_old_lost_spi_entries
lost_spi_entry *currEntry
lost_spi_entry
lost_spi_entry
*currEntry
*
currEntry
struct timeval *now
struct timeval
timeval
*now
*
now
{  // Bail if we are at end of list  if (currEntry == NULL)    return NULL;  if (TDIFF(*now, currEntry->first_time) >       (int)HCNF.max_retries * (int)HCNF.icmp_timeout)    {      log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi);      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      currEntry = tempNext;      // Recurse to keep looking for more expired SPIs      currEntry = expire_old_lost_spi_entries(currEntry, now);    }  else    {      // Recurse if we didn't find an expired SPI      currEntry->next = expire_old_lost_spi_entries(currEntry->next, now);    }  return currEntry;}
if (currEntry == NULL)    return NULL;
currEntry == NULL
currEntry
currEntry
NULL
NULL
return NULL;
NULL
NULL
if (TDIFF(*now, currEntry->first_time) >       (int)HCNF.max_retries * (int)HCNF.icmp_timeout)    {      log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi);      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      currEntry = tempNext;      // Recurse to keep looking for more expired SPIs      currEntry = expire_old_lost_spi_entries(currEntry, now);    }  else    {      // Recurse if we didn't find an expired SPI      currEntry->next = expire_old_lost_spi_entries(currEntry->next, now);    }
TDIFF(*now, currEntry->first_time) >       (int)HCNF.max_retries * (int)HCNF.icmp_timeout
TDIFF(*now, currEntry->first_time)
TDIFF
TDIFF
*now
now
now
currEntry->first_time
currEntry
currEntry
first_time
(int)HCNF.max_retries * (int)HCNF.icmp_timeout
(int)HCNF.max_retries
int
int

HCNF.max_retries
HCNF
HCNF
max_retries
(int)HCNF.icmp_timeout
int
int

HCNF.icmp_timeout
HCNF
HCNF
icmp_timeout
{      log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi);      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      currEntry = tempNext;      // Recurse to keep looking for more expired SPIs      currEntry = expire_old_lost_spi_entries(currEntry, now);    }
log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi);
log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\n", currEntry->spi)
log_
log_
NORM
NORM
"Removing *EXPIRED* invalid SPI 0x%x\n"
currEntry->spi
currEntry
currEntry
spi
lost_spi_entry *tempNext = currEntry->next;
lost_spi_entry *tempNext = currEntry->next;
lost_spi_entry
lost_spi_entry
*tempNext = currEntry->next
*
tempNext
= currEntry->next
currEntry->next
currEntry
currEntry
next
free(currEntry);
free(currEntry)
free
free
currEntry
currEntry
lost_spi_entry_count--;
lost_spi_entry_count--
lost_spi_entry_count
lost_spi_entry_count
currEntry = tempNext;
currEntry = tempNext
currEntry
currEntry
tempNext
tempNext
currEntry = expire_old_lost_spi_entries(currEntry, now);
currEntry = expire_old_lost_spi_entries(currEntry, now)
currEntry
currEntry
expire_old_lost_spi_entries(currEntry, now)
expire_old_lost_spi_entries
expire_old_lost_spi_entries
currEntry
currEntry
now
now
{      // Recurse if we didn't find an expired SPI      currEntry->next = expire_old_lost_spi_entries(currEntry->next, now);    }
currEntry->next = expire_old_lost_spi_entries(currEntry->next, now);
currEntry->next = expire_old_lost_spi_entries(currEntry->next, now)
currEntry->next
currEntry
currEntry
next
expire_old_lost_spi_entries(currEntry->next, now)
expire_old_lost_spi_entries
expire_old_lost_spi_entries
currEntry->next
currEntry
currEntry
next
now
now
return currEntry;
currEntry
currEntry
-----joern-----
(9,47,0)
(11,62,0)
(31,37,0)
(16,17,0)
(20,23,0)
(1,62,0)
(21,11,0)
(61,27,0)
(17,28,0)
(57,46,0)
(63,45,0)
(49,35,0)
(25,24,0)
(19,14,0)
(63,2,0)
(17,46,0)
(45,26,0)
(5,27,0)
(34,5,0)
(7,0,0)
(52,27,0)
(18,27,0)
(51,17,0)
(52,24,0)
(61,23,0)
(8,57,0)
(36,47,0)
(43,2,0)
(47,24,0)
(64,48,0)
(11,24,0)
(0,24,0)
(4,51,0)
(36,52,0)
(35,12,0)
(44,61,0)
(62,27,0)
(56,49,0)
(55,25,0)
(63,57,0)
(38,36,0)
(41,14,0)
(2,63,0)
(41,39,0)
(37,54,0)
(50,23,0)
(2,24,0)
(13,37,0)
(36,46,0)
(45,63,0)
(14,41,0)
(53,52,0)
(22,49,0)
(3,61,0)
(37,52,0)
(35,49,0)
(41,26,0)
(62,11,0)
(58,28,0)
(29,36,0)
(37,24,0)
(40,14,0)
(17,51,0)
(23,61,0)
(60,54,0)
(23,24,0)
(6,0,0)
(42,2,0)
(59,28,0)
(25,27,0)
(51,32,0)
(65,11,0)
(35,26,0)
(52,36,0)
(57,63,0)
(28,24,0)
(31,48,0)
(26,35,0)
(30,4,0)
(28,17,0)
(47,62,0)
(15,54,0)
(39,41,0)
(26,41,0)
(47,27,0)
(26,45,0)
(10,47,0)
(4,24,0)
(36,24,0)
(33,4,0)
(12,35,0)
(59,58,1)
(41,14,1)
(64,0,1)
(38,53,1)
(37,24,1)
(58,4,1)
(47,10,1)
(20,50,1)
(2,24,1)
(13,52,1)
(31,37,1)
(9,5,1)
(2,43,1)
(53,47,1)
(17,46,1)
(26,35,1)
(33,30,1)
(25,55,1)
(37,13,1)
(57,8,1)
(55,62,1)
(1,61,1)
(5,34,1)
(48,64,1)
(43,42,1)
(36,29,1)
(21,65,1)
(14,19,1)
(6,7,1)
(11,24,1)
(37,52,1)
(61,23,1)
(52,24,1)
(40,35,1)
(13,51,1)
(44,3,1)
(45,63,1)
(41,39,1)
(0,24,1)
(16,28,1)
(10,9,1)
(57,46,1)
(49,22,1)
(35,49,1)
(29,38,1)
(36,47,1)
(26,41,1)
(63,57,1)
(11,21,1)
(23,24,1)
(17,16,1)
(36,46,1)
(63,2,1)
(36,24,1)
(31,48,1)
(52,36,1)
(62,11,1)
(56,63,1)
(17,28,1)
(25,24,1)
(51,17,1)
(42,57,1)
(30,45,1)
(45,26,1)
(28,59,1)
(35,12,1)
(3,45,1)
(34,25,1)
(4,33,1)
(0,6,1)
(4,24,1)
(23,20,1)
(47,24,1)
(8,0,1)
(47,62,1)
(65,1,1)
(28,24,1)
(22,56,1)
(50,44,1)
(19,40,1)
(57,0,2)
(37,0,2)
(41,39,2)
(52,36,2)
(63,2,2)
(14,0,2)
(51,17,2)
(52,45,2)
(11,24,2)
(36,47,2)
(13,0,2)
(36,45,2)
(30,45,2)
(45,63,2)
(2,24,2)
(4,45,2)
(19,0,2)
(63,0,2)
(35,49,2)
(53,45,2)
(37,52,2)
(65,45,2)
(26,35,2)
(33,45,2)
(50,45,2)
(62,45,2)
(26,41,2)
(62,11,2)
(52,24,2)
(35,0,2)
(63,57,2)
(20,45,2)
(51,45,2)
(48,0,2)
(55,45,2)
(22,0,2)
(1,45,2)
(34,45,2)
(17,45,2)
(0,24,2)
(42,0,2)
(4,24,2)
(59,45,2)
(3,45,2)
(23,45,2)
(38,45,2)
(37,24,2)
(47,62,2)
(23,24,2)
(28,24,2)
(11,45,2)
(45,0,2)
(17,28,2)
(36,24,2)
(45,26,2)
(8,0,2)
(5,45,2)
(10,45,2)
(9,45,2)
(25,24,2)
(35,12,2)
(31,48,2)
(40,0,2)
(47,24,2)
(21,45,2)
(47,45,2)
(31,37,2)
(41,0,2)
(26,0,2)
(56,0,2)
(61,45,2)
(25,45,2)
(28,45,2)
(2,0,2)
(16,45,2)
(17,46,2)
(49,0,2)
(61,23,2)
(44,45,2)
(43,0,2)
(29,45,2)
(57,46,2)
(64,0,2)
(58,45,2)
(36,46,2)
(41,14,2)
-----------------------------------
(0,currEntry == NULL)
(1,tempNext)
(2,currEntry->first_time)
(3,NORM)
(4,currEntry->next)
(5,lost_spi_entry_count--)
(6,NULL)
(7,currEntry)
(8,now)
(9,currEntry)
(10,tempNext)
(11,currEntry->next)
(12,int)
(13,currEntry)
(14,HCNF.icmp_timeout)
(15,if (TDIFF(*now, currEntry->first_time)
(16,now)
(17,expire_old_lost_spi_entries(currEntry->next, now)
(18,tempNext)
(19,icmp_timeout)
(20,spi)
(21,next)
(22,max_retries)
(23,currEntry->spi)
(24,lost_spi_entry *currEntry)
(25,free(currEntry)
(26,(int)
(27,)
(28,currEntry->next)
(29,now)
(30,currEntry)
(31,RET)
(32,)
(33,next)
(34,lost_spi_entry_count)
(35,(int)
(36,expire_old_lost_spi_entries(currEntry, now)
(37,return currEntry;)
(38,currEntry)
(39,int)
(40,HCNF)
(41,(int)
(42,currEntry)
(43,first_time)
(44,"Removing *EXPIRED* invalid SPI 0x%x\\n")
(45,TDIFF(*now, currEntry->first_time)
(46,struct timeval *now)
(47,currEntry = tempNext)
(48,return NULL;)
(49,HCNF.max_retries)
(50,currEntry)
(51,currEntry->next = expire_old_lost_spi_entries(currEntry->next, now)
(52,currEntry = expire_old_lost_spi_entries(currEntry, now)
(53,currEntry)
(54,)
(55,currEntry)
(56,HCNF)
(57,*now)
(58,currEntry)
(59,next)
(60,if (currEntry == NULL)
(61,log_(NORM, "Removing *EXPIRED* invalid SPI 0x%x\\n", currEntry->spi)
(62,*tempNext = currEntry->next)
(63,TDIFF(*now, currEntry->first_time)
(64,NULL)
(65,currEntry)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^