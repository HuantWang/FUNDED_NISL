-----label-----
0
-----code-----
static int qrtr_recvmsg(struct socket *sock, struct msghdr *msg,
			size_t size, int flags)
{
	DECLARE_SOCKADDR(struct sockaddr_qrtr *, addr, msg->msg_name);
	struct sock *sk = sock->sk;
	struct sk_buff *skb;
	struct qrtr_cb *cb;
	int copied, rc;

	lock_sock(sk);

	if (sock_flag(sk, SOCK_ZAPPED)) {
		release_sock(sk);
		return -EADDRNOTAVAIL;
	}

	skb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,
				flags & MSG_DONTWAIT, &rc);
	if (!skb) {
		release_sock(sk);
		return rc;
	}

	copied = skb->len;
	if (copied > size) {
		copied = size;
		msg->msg_flags |= MSG_TRUNC;
	}

	rc = skb_copy_datagram_msg(skb, 0, msg, copied);
	if (rc < 0)
		goto out;
	rc = copied;

	if (addr) {
		cb = (struct qrtr_cb *)skb->cb;
		addr->sq_family = AF_QIPCRTR;
		addr->sq_node = cb->src_node;
		addr->sq_port = cb->src_port;
		msg->msg_namelen = sizeof(*addr);
	}

out:
	skb_free_datagram(sk, skb);
	release_sock(sk);

	return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
26,39
26,40
26,41
26,42
26,43
26,44
27,28
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
55,56
55,57
55,58
57,58
59,60
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
68,71
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
80,81
82,83
83,84
84,85
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
90,95
91,92
93,94
95,96
95,97
96,97
98,99
99,100
101,102
101,103
102,103
104,105
106,107
107,108
109,110
109,111
110,111
111,112
113,114
113,115
114,115
115,116
115,117
116,117
118,119
120,121
121,122
123,124
124,125
124,126
125,126
127,128
127,129
128,129
131,132
131,133
132,133
132,134
133,134
135,136
137,138
137,139
138,139
139,140
139,141
140,141
142,143
144,145
145,146
145,147
146,147
146,148
147,148
150,151
152,153
153,154
153,155
154,155
156,157
156,158
156,159
156,160
156,161
157,158
159,160
162,163
164,165
166,167
166,168
167,168
167,169
168,169
171,172
173,174
174,175
174,176
175,176
177,178
179,180
179,181
180,181
182,183
182,184
182,185
182,186
182,187
183,184
184,185
184,186
185,186
187,188
187,189
188,189
188,190
189,190
191,192
193,194
193,195
194,195
197,198
198,199
198,200
199,200
199,201
200,201
203,204
205,206
206,207
206,208
207,208
207,209
208,209
211,212
211,213
212,213
215,216
216,217
216,218
217,218
217,219
218,219
221,222
221,223
222,223
225,226
226,227
226,228
227,228
227,229
228,229
231,232
232,233
233,234
234,235
236,237
236,238
238,239
239,240
239,241
239,242
240,241
242,243
244,245
246,247
247,248
247,249
248,249
250,251
252,253
253,254
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,23,25,31,33,34,38,39,43,45,46,50,52,53,56,58,60,64,66,70,72,74,79,81,85,89,92,94,97,100,103,105,108,112,117,119,122,126,129,130,134,136,141,143,148,149,151,155,158,160,161,163,165,169,170,172,176,178,181,186,190,192,195,196,201,202,204,209,210,213,214,219,220,223,224,229,230,235,237,241,243,245,249,251,254
-----computeFrom-----
87,88
87,89
95,96
95,97
101,102
101,103
124,125
124,126
132,133
132,134
139,140
139,141
145,146
145,147
153,154
153,155
167,168
167,169
174,175
174,176
184,185
184,186
198,199
198,200
206,207
206,208
216,217
216,218
226,227
226,228
-----guardedBy-----
134,141
136,143
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int qrtr_recvmsg(struct socket *sock, struct msghdr *msg,			size_t size, int flags){	DECLARE_SOCKADDR(struct sockaddr_qrtr *, addr, msg->msg_name);	struct sock *sk = sock->sk;	struct sk_buff *skb;	struct qrtr_cb *cb;	int copied, rc;	lock_sock(sk);	if (sock_flag(sk, SOCK_ZAPPED)) {		release_sock(sk);		return -EADDRNOTAVAIL;	}	skb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,				flags & MSG_DONTWAIT, &rc);	if (!skb) {		release_sock(sk);		return rc;	}	copied = skb->len;	if (copied > size) {		copied = size;		msg->msg_flags |= MSG_TRUNC;	}	rc = skb_copy_datagram_msg(skb, 0, msg, copied);	if (rc < 0)		goto out;	rc = copied;	if (addr) {		cb = (struct qrtr_cb *)skb->cb;		addr->sq_family = AF_QIPCRTR;		addr->sq_node = cb->src_node;		addr->sq_port = cb->src_port;		msg->msg_namelen = sizeof(*addr);	}out:	skb_free_datagram(sk, skb);	release_sock(sk);	return rc;}
static int
qrtr_recvmsg(struct socket *sock, struct msghdr *msg,			size_t size, int flags)
qrtr_recvmsg
struct socket *sock
struct socket
socket
*sock
*
sock
struct msghdr *msg
struct msghdr
msghdr
*msg
*
msg
size_t size
size_t
size_t
size
size
int flags
int
flags
flags
{	DECLARE_SOCKADDR(struct sockaddr_qrtr *, addr, msg->msg_name);	struct sock *sk = sock->sk;	struct sk_buff *skb;	struct qrtr_cb *cb;	int copied, rc;	lock_sock(sk);	if (sock_flag(sk, SOCK_ZAPPED)) {		release_sock(sk);		return -EADDRNOTAVAIL;	}	skb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,				flags & MSG_DONTWAIT, &rc);	if (!skb) {		release_sock(sk);		return rc;	}	copied = skb->len;	if (copied > size) {		copied = size;		msg->msg_flags |= MSG_TRUNC;	}	rc = skb_copy_datagram_msg(skb, 0, msg, copied);	if (rc < 0)		goto out;	rc = copied;	if (addr) {		cb = (struct qrtr_cb *)skb->cb;		addr->sq_family = AF_QIPCRTR;		addr->sq_node = cb->src_node;		addr->sq_port = cb->src_port;		msg->msg_namelen = sizeof(*addr);	}out:	skb_free_datagram(sk, skb);	release_sock(sk);	return rc;}
DECLARE_SOCKADDR(struct sockaddr_qrtr *, addr, msg->msg_name);
struct sock *sk = sock->sk;
struct sock *sk = sock->sk;
struct sock
sock
*sk = sock->sk
*
sk
= sock->sk
sock->sk
sock
sock
sk
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
struct qrtr_cb *cb;
struct qrtr_cb *cb;
struct qrtr_cb
qrtr_cb
*cb
*
cb
int copied, rc;
int copied, rc;
int
copied
copied
rc
rc
lock_sock(sk);
lock_sock(sk)
lock_sock
lock_sock
sk
sk
if (sock_flag(sk, SOCK_ZAPPED)) {		release_sock(sk);		return -EADDRNOTAVAIL;	}
sock_flag(sk, SOCK_ZAPPED)
sock_flag
sock_flag
sk
sk
SOCK_ZAPPED
SOCK_ZAPPED
{		release_sock(sk);		return -EADDRNOTAVAIL;	}
release_sock(sk);
release_sock(sk)
release_sock
release_sock
sk
sk
return -EADDRNOTAVAIL;
-EADDRNOTAVAIL
EADDRNOTAVAIL
EADDRNOTAVAIL
skb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,				flags & MSG_DONTWAIT, &rc);
skb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,				flags & MSG_DONTWAIT, &rc)
skb
skb
skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,				flags & MSG_DONTWAIT, &rc)
skb_recv_datagram
skb_recv_datagram
sk
sk
flags & ~MSG_DONTWAIT
flags
flags
~MSG_DONTWAIT
MSG_DONTWAIT
MSG_DONTWAIT
flags & MSG_DONTWAIT
flags
flags
MSG_DONTWAIT
MSG_DONTWAIT
&rc
rc
rc
if (!skb) {		release_sock(sk);		return rc;	}
!skb
skb
skb
{		release_sock(sk);		return rc;	}
release_sock(sk);
release_sock(sk)
release_sock
release_sock
sk
sk
return rc;
rc
rc
copied = skb->len;
copied = skb->len
copied
copied
skb->len
skb
skb
len
if (copied > size) {		copied = size;		msg->msg_flags |= MSG_TRUNC;	}
copied > size
copied
copied
size
size
{		copied = size;		msg->msg_flags |= MSG_TRUNC;	}
copied = size;
copied = size
copied
copied
size
size
msg->msg_flags |= MSG_TRUNC;
msg->msg_flags |= MSG_TRUNC
msg->msg_flags
msg
msg
msg_flags
MSG_TRUNC
MSG_TRUNC
rc = skb_copy_datagram_msg(skb, 0, msg, copied);
rc = skb_copy_datagram_msg(skb, 0, msg, copied)
rc
rc
skb_copy_datagram_msg(skb, 0, msg, copied)
skb_copy_datagram_msg
skb_copy_datagram_msg
skb
skb
0
msg
msg
copied
copied
if (rc < 0)		goto out;
rc < 0
rc
rc
0
goto out;
out
rc = copied;
rc = copied
rc
rc
copied
copied
if (addr) {		cb = (struct qrtr_cb *)skb->cb;		addr->sq_family = AF_QIPCRTR;		addr->sq_node = cb->src_node;		addr->sq_port = cb->src_port;		msg->msg_namelen = sizeof(*addr);	}
addr
addr
{		cb = (struct qrtr_cb *)skb->cb;		addr->sq_family = AF_QIPCRTR;		addr->sq_node = cb->src_node;		addr->sq_port = cb->src_port;		msg->msg_namelen = sizeof(*addr);	}
cb = (struct qrtr_cb *)skb->cb;
cb = (struct qrtr_cb *)skb->cb
cb
cb
(struct qrtr_cb *)skb->cb
struct qrtr_cb *
struct qrtr_cb
qrtr_cb
*
*
skb->cb
skb
skb
cb
addr->sq_family = AF_QIPCRTR;
addr->sq_family = AF_QIPCRTR
addr->sq_family
addr
addr
sq_family
AF_QIPCRTR
AF_QIPCRTR
addr->sq_node = cb->src_node;
addr->sq_node = cb->src_node
addr->sq_node
addr
addr
sq_node
cb->src_node
cb
cb
src_node
addr->sq_port = cb->src_port;
addr->sq_port = cb->src_port
addr->sq_port
addr
addr
sq_port
cb->src_port
cb
cb
src_port
msg->msg_namelen = sizeof(*addr);
msg->msg_namelen = sizeof(*addr)
msg->msg_namelen
msg
msg
msg_namelen
sizeof(*addr)
(*addr)
*addr
addr
addr
out:	skb_free_datagram(sk, skb);
out
skb_free_datagram(sk, skb);
skb_free_datagram(sk, skb)
skb_free_datagram
skb_free_datagram
sk
sk
skb
skb
release_sock(sk);
release_sock(sk)
release_sock
release_sock
sk
sk
return rc;
rc
rc
-----joern-----
(31,2,0)
(14,91,0)
(67,85,0)
(118,119,0)
(69,56,0)
(50,14,0)
(81,82,0)
(102,27,0)
(47,103,0)
(33,19,0)
(57,14,0)
(3,119,0)
(111,117,0)
(0,27,0)
(102,103,0)
(86,80,0)
(27,107,0)
(38,2,0)
(38,110,0)
(19,119,0)
(100,104,0)
(100,14,0)
(44,119,0)
(1,119,0)
(29,106,0)
(113,57,0)
(60,101,0)
(37,108,0)
(78,40,0)
(80,58,0)
(18,0,0)
(73,119,0)
(61,75,0)
(12,70,0)
(99,85,0)
(84,14,0)
(49,47,0)
(18,119,0)
(72,102,0)
(60,103,0)
(91,48,0)
(77,23,0)
(117,14,0)
(82,38,0)
(101,107,0)
(75,53,0)
(59,119,0)
(58,2,0)
(28,17,0)
(104,100,0)
(91,10,0)
(10,91,0)
(71,69,0)
(123,102,0)
(54,31,0)
(51,119,0)
(0,119,0)
(70,12,0)
(120,100,0)
(88,47,0)
(114,4,0)
(116,6,0)
(83,119,0)
(21,17,0)
(62,4,0)
(93,101,0)
(85,99,0)
(48,53,0)
(64,83,0)
(30,108,0)
(85,58,0)
(6,104,0)
(55,27,0)
(52,79,0)
(47,12,0)
(75,91,0)
(102,104,0)
(108,119,0)
(57,108,0)
(20,108,0)
(105,23,0)
(35,30,0)
(109,110,0)
(80,86,0)
(23,40,0)
(124,117,0)
(12,2,0)
(26,27,0)
(30,92,0)
(27,95,0)
(108,30,0)
(15,79,0)
(121,108,0)
(48,91,0)
(9,70,0)
(11,100,0)
(97,121,0)
(57,119,0)
(110,58,0)
(7,48,0)
(29,69,0)
(19,108,0)
(0,104,0)
(32,110,0)
(39,57,0)
(91,14,0)
(45,10,0)
(87,119,0)
(91,75,0)
(22,60,0)
(110,38,0)
(34,60,0)
(46,48,0)
(17,108,0)
(102,14,0)
(5,106,0)
(66,102,0)
(40,102,0)
(94,0,0)
(18,40,0)
(99,2,0)
(122,5,0)
(104,119,0)
(43,119,0)
(6,95,0)
(36,75,0)
(90,30,0)
(74,0,0)
(40,119,0)
(112,85,0)
(16,104,0)
(25,37,0)
(41,102,0)
(96,119,0)
(89,9,0)
(117,80,0)
(58,80,0)
(80,117,0)
(102,40,0)
(65,18,0)
(106,63,0)
(42,82,0)
(70,9,0)
(79,99,0)
(76,84,0)
(24,119,0)
(8,6,0)
(91,108,0)
(68,58,0)
(13,91,0)
(4,31,0)
(83,108,0)
(121,56,0)
(29,18,0)
(14,119,0)
(37,63,0)
(54,4,1)
(40,102,1)
(39,98,1)
(113,39,1)
(84,76,1)
(14,91,1)
(74,23,1)
(121,108,1)
(91,108,1)
(26,55,1)
(82,42,1)
(83,64,1)
(52,31,1)
(91,75,1)
(83,108,1)
(15,52,1)
(21,83,1)
(93,60,1)
(29,69,1)
(64,108,1)
(76,14,1)
(70,9,1)
(124,111,1)
(47,103,1)
(0,27,1)
(75,53,1)
(48,53,1)
(60,22,1)
(13,50,1)
(69,71,1)
(23,77,1)
(84,14,1)
(65,19,1)
(117,124,1)
(42,81,1)
(17,28,1)
(85,58,1)
(39,115,1)
(97,84,1)
(6,95,1)
(37,25,1)
(49,88,1)
(17,108,1)
(57,113,1)
(57,14,1)
(102,14,1)
(102,103,1)
(57,108,1)
(102,41,1)
(89,47,1)
(48,7,1)
(11,16,1)
(111,68,1)
(6,104,1)
(0,104,1)
(27,26,1)
(67,79,1)
(32,82,1)
(0,94,1)
(102,27,1)
(99,85,1)
(110,109,1)
(117,14,1)
(98,0,1)
(29,106,1)
(108,30,1)
(81,99,1)
(106,5,1)
(47,49,1)
(16,84,1)
(19,33,1)
(102,104,1)
(78,6,1)
(114,58,1)
(6,8,1)
(60,103,1)
(45,75,1)
(28,21,1)
(30,92,1)
(41,123,1)
(18,40,1)
(88,38,1)
(23,40,1)
(72,66,1)
(25,17,1)
(18,65,1)
(80,117,1)
(36,48,1)
(29,18,1)
(91,48,1)
(22,34,1)
(100,14,1)
(90,20,1)
(61,36,1)
(120,11,1)
(122,37,1)
(121,97,1)
(79,15,1)
(7,46,1)
(9,89,1)
(12,70,1)
(31,54,1)
(112,67,1)
(115,23,1)
(34,27,1)
(35,90,1)
(116,104,1)
(19,108,1)
(77,105,1)
(85,112,1)
(58,80,1)
(46,13,1)
(104,100,1)
(30,35,1)
(55,6,1)
(38,110,1)
(10,45,1)
(105,40,1)
(100,120,1)
(4,62,1)
(80,86,1)
(5,122,1)
(101,93,1)
(109,32,1)
(71,121,1)
(68,98,1)
(110,58,1)
(37,108,1)
(39,12,1)
(78,101,1)
(75,61,1)
(123,72,1)
(62,114,1)
(18,0,1)
(66,78,1)
(94,74,1)
(91,10,1)
(50,17,1)
(33,57,1)
(8,116,1)
(27,95,1)
(23,40,2)
(17,108,2)
(77,84,2)
(57,14,2)
(117,98,2)
(102,104,2)
(102,84,2)
(69,84,2)
(60,103,2)
(91,17,2)
(47,103,2)
(104,84,2)
(120,84,2)
(18,40,2)
(102,27,2)
(105,84,2)
(68,98,2)
(29,106,2)
(14,91,2)
(65,84,2)
(116,84,2)
(42,98,2)
(5,17,2)
(109,98,2)
(38,110,2)
(55,6,2)
(19,84,2)
(81,98,2)
(93,6,2)
(33,84,2)
(108,30,2)
(85,58,2)
(99,98,2)
(91,75,2)
(106,17,2)
(110,98,2)
(97,84,2)
(66,84,2)
(99,85,2)
(46,17,2)
(27,6,2)
(32,98,2)
(67,98,2)
(83,108,2)
(22,6,2)
(122,17,2)
(6,84,2)
(117,14,2)
(16,84,2)
(38,98,2)
(121,84,2)
(30,92,2)
(26,6,2)
(9,98,2)
(25,17,2)
(71,84,2)
(91,108,2)
(75,17,2)
(112,98,2)
(80,117,2)
(4,98,2)
(52,98,2)
(94,23,2)
(82,98,2)
(23,84,2)
(70,98,2)
(123,84,2)
(85,98,2)
(0,104,2)
(114,98,2)
(89,98,2)
(111,98,2)
(58,80,2)
(36,17,2)
(31,98,2)
(78,84,2)
(80,86,2)
(61,17,2)
(74,23,2)
(12,98,2)
(15,98,2)
(98,23,2)
(58,98,2)
(79,98,2)
(91,48,2)
(102,14,2)
(100,84,2)
(49,98,2)
(84,14,2)
(91,10,2)
(57,108,2)
(88,98,2)
(29,69,2)
(84,17,2)
(14,17,2)
(29,18,2)
(62,98,2)
(124,98,2)
(104,100,2)
(37,17,2)
(41,84,2)
(48,53,2)
(110,58,2)
(60,6,2)
(18,0,2)
(27,95,2)
(6,104,2)
(115,23,2)
(47,98,2)
(113,84,2)
(7,17,2)
(75,53,2)
(54,98,2)
(0,23,2)
(50,17,2)
(19,108,2)
(0,27,2)
(70,9,2)
(45,17,2)
(39,84,2)
(72,84,2)
(18,84,2)
(40,84,2)
(34,6,2)
(76,17,2)
(121,108,2)
(100,14,2)
(37,108,2)
(80,98,2)
(8,84,2)
(101,6,2)
(40,102,2)
(12,70,2)
(11,84,2)
(57,84,2)
(48,17,2)
(10,17,2)
(13,17,2)
(102,103,2)
(6,95,2)
-----------------------------------
(0,rc = copied)
(1,if (addr)
(2,)
(3,if (sock_flag(sk, SOCK_ZAPPED)
(4,addr->sq_family)
(5,-EADDRNOTAVAIL)
(6,copied > size)
(7,~MSG_DONTWAIT)
(8,size)
(9,*addr)
(10,&rc)
(11,skb)
(12,msg->msg_namelen = sizeof(*addr)
(13,sk)
(14,skb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,\n\\n\\t\\t\\t\\tflags & MSG_DONTWAIT, &rc)
(15,sq_node)
(16,copied)
(17,sock_flag(sk, SOCK_ZAPPED)
(18,return rc;)
(19,release_sock(sk)
(20,sk)
(21,sk)
(22,msg_flags)
(23,rc < 0)
(24,if (copied > size)
(25,sk)
(26,size)
(27,copied = size)
(28,SOCK_ZAPPED)
(29,RET)
(30,sock->sk)
(31,addr->sq_family = AF_QIPCRTR)
(32,cb)
(33,sk)
(34,msg)
(35,sk)
(36,flags)
(37,release_sock(sk)
(38,addr->sq_port = cb->src_port)
(39,sk)
(40,rc = skb_copy_datagram_msg(skb, 0, msg, copied)
(41,copied)
(42,sq_port)
(43,sk)
(44,rc)
(45,rc)
(46,flags)
(47,msg->msg_namelen)
(48,flags & ~MSG_DONTWAIT)
(49,msg_namelen)
(50,skb)
(51,if (rc < 0)
(52,addr)
(53,int flags)
(54,AF_QIPCRTR)
(55,copied)
(56,)
(57,skb_free_datagram(sk, skb)
(58,cb = (struct qrtr_cb *)
(59,copied)
(60,msg->msg_flags)
(61,MSG_DONTWAIT)
(62,sq_family)
(63,)
(64,sk)
(65,rc)
(66,skb)
(67,cb)
(68,cb)
(69,return rc;)
(70,sizeof(*addr)
(71,rc)
(72,0)
(73,out:)
(74,rc)
(75,flags & MSG_DONTWAIT)
(76,skb)
(77,0)
(78,rc)
(79,addr->sq_node)
(80,(struct qrtr_cb *)
(81,addr)
(82,addr->sq_port)
(83,lock_sock(sk)
(84,!skb)
(85,cb->src_node)
(86,struct qrtr_cb *)
(87,skb)
(88,msg)
(89,addr)
(90,sock)
(91,skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,\n\\n\\t\\t\\t\\tflags & MSG_DONTWAIT, &rc)
(92,struct socket *sock)
(93,MSG_TRUNC)
(94,copied)
(95,size_t size)
(96,cb)
(97,sk)
(98,addr)
(99,addr->sq_node = cb->src_node)
(100,skb->len)
(101,msg->msg_flags |= MSG_TRUNC)
(102,skb_copy_datagram_msg(skb, 0, msg, copied)
(103,struct msghdr *msg)
(104,copied = skb->len)
(105,rc)
(106,return -EADDRNOTAVAIL;)
(107,)
(108,*sk = sock->sk)
(109,src_port)
(110,cb->src_port)
(111,skb)
(112,src_node)
(113,skb)
(114,addr)
(115,goto out;)
(116,copied)
(117,skb->cb)
(118,if (!skb)
(119,)
(120,len)
(121,release_sock(sk)
(122,EADDRNOTAVAIL)
(123,msg)
(124,cb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^