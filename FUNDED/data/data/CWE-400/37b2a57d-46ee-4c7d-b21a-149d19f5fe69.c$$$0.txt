-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_07_bad()
CWE401_Memory_Leak__int_realloc_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,40,0)
(3,15,0)
(7,24,0)
(18,20,0)
(4,12,0)
(40,24,0)
(36,15,0)
(14,39,0)
(36,7,0)
(26,6,0)
(23,20,0)
(37,33,0)
(30,37,0)
(7,36,0)
(4,5,0)
(0,1,0)
(39,11,0)
(33,24,0)
(33,20,0)
(2,39,0)
(17,9,0)
(11,20,0)
(19,37,0)
(16,1,0)
(24,33,0)
(34,38,0)
(25,6,0)
(32,1,0)
(8,23,0)
(39,23,0)
(29,22,0)
(22,23,0)
(13,7,0)
(21,5,0)
(27,22,0)
(6,1,0)
(7,6,0)
(28,9,0)
(24,7,0)
(22,33,0)
(39,33,0)
(11,39,0)
(10,38,0)
(41,36,0)
(31,33,0)
(5,4,0)
(15,36,0)
(34,10,1)
(7,6,1)
(37,33,1)
(10,9,1)
(3,41,1)
(2,14,1)
(6,26,1)
(24,7,1)
(4,5,1)
(38,34,1)
(10,11,1)
(22,33,1)
(24,40,1)
(33,24,1)
(36,15,1)
(26,25,1)
(9,28,1)
(27,4,1)
(17,6,1)
(13,31,1)
(19,33,1)
(22,29,1)
(7,36,1)
(14,23,1)
(11,39,1)
(41,13,1)
(39,33,1)
(15,3,1)
(27,37,1)
(39,2,1)
(35,38,1)
(37,30,1)
(28,17,1)
(23,8,1)
(31,9,1)
(30,19,1)
(21,37,1)
(8,22,1)
(5,21,1)
(39,23,1)
(29,27,1)
(33,24,2)
(24,9,2)
(30,9,2)
(39,9,2)
(19,9,2)
(22,9,2)
(37,33,2)
(7,36,2)
(14,9,2)
(33,9,2)
(7,9,2)
(4,37,2)
(39,23,2)
(2,9,2)
(15,9,2)
(27,9,2)
(8,9,2)
(11,39,2)
(36,9,2)
(41,9,2)
(23,9,2)
(37,9,2)
(39,33,2)
(5,37,2)
(31,9,2)
(24,7,2)
(11,9,2)
(22,33,2)
(7,6,2)
(3,9,2)
(21,37,2)
(29,9,2)
(36,15,2)
(4,5,2)
(24,40,2)
(13,9,2)
-----------------------------------
(0,if(staticFive==5)
(1,)
(2,0)
(3,int)
(4,exit(-1)
(5,-1)
(6,data = NULL)
(7,realloc(data, 100*sizeof(int)
(8,5)
(9,staticFive==5)
(10,staticFive)
(11,printIntLine(data[0])
(12,)
(13,data)
(14,data)
(15,sizeof(int)
(16,data)
(17,staticFive)
(18,if (data == NULL)
(19,data)
(20,)
(21,1)
(22,data[0])
(23,data[0] = 5)
(24,(int *)
(25,data)
(26,NULL)
(27,data)
(28,5)
(29,0)
(30,NULL)
(31,data)
(32,if(staticFive==5)
(33,data = (int *)
(34,5)
(35,RET)
(36,100*sizeof(int)
(37,data == NULL)
(38,staticFive==5)
(39,data[0])
(40,int *)
(41,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^