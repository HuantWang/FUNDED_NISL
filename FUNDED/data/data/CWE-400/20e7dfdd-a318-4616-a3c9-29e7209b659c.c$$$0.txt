-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
29,33
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
79,80
81,82
-----nextToken-----
2,4,9,11,12,16,18,22,27,28,33,37,39,42,44,48,49,55,56,57,58,64,65,66,67,71,75,76,80,82
-----computeFrom-----
14,15
14,16
31,32
31,33
43,44
43,45
51,52
51,53
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,6,0)
(10,2,0)
(25,31,0)
(4,22,0)
(21,26,0)
(14,7,0)
(5,41,0)
(8,2,0)
(1,9,0)
(17,37,0)
(41,5,0)
(29,31,0)
(30,28,0)
(3,41,0)
(20,17,0)
(11,8,0)
(31,36,0)
(26,7,0)
(9,2,0)
(7,26,0)
(39,1,0)
(0,36,0)
(13,9,0)
(31,9,0)
(13,4,0)
(9,41,0)
(28,6,0)
(23,39,0)
(24,13,0)
(3,26,0)
(40,9,0)
(18,13,0)
(41,3,0)
(22,4,0)
(41,9,0)
(22,2,0)
(26,3,0)
(27,1,0)
(1,39,0)
(36,31,0)
(12,6,0)
(39,10,0)
(34,6,0)
(36,8,0)
(4,13,0)
(32,1,0)
(16,10,0)
(35,28,0)
(13,18,1)
(10,16,1)
(29,25,1)
(36,0,1)
(39,1,1)
(9,41,1)
(33,22,1)
(7,14,1)
(27,32,1)
(26,7,1)
(4,13,1)
(38,28,1)
(11,36,1)
(24,8,1)
(15,33,1)
(23,1,1)
(41,5,1)
(0,31,1)
(30,35,1)
(25,10,1)
(17,20,1)
(22,4,1)
(39,23,1)
(40,38,1)
(18,24,1)
(33,17,1)
(20,38,1)
(32,9,1)
(41,3,1)
(36,31,1)
(28,30,1)
(16,39,1)
(13,9,1)
(8,11,1)
(31,9,1)
(14,21,1)
(1,27,1)
(31,29,1)
(3,26,1)
(1,9,1)
(21,40,1)
(36,38,2)
(8,38,2)
(39,1,2)
(17,38,2)
(3,38,2)
(29,38,2)
(26,38,2)
(21,38,2)
(1,38,2)
(26,7,2)
(25,38,2)
(3,26,2)
(9,41,2)
(16,38,2)
(10,38,2)
(24,38,2)
(13,9,2)
(20,38,2)
(4,38,2)
(31,9,2)
(27,38,2)
(7,38,2)
(22,4,2)
(0,38,2)
(36,31,2)
(11,38,2)
(41,5,2)
(22,38,2)
(41,38,2)
(41,3,2)
(18,38,2)
(13,38,2)
(9,38,2)
(39,38,2)
(31,38,2)
(1,9,2)
(23,38,2)
(32,38,2)
(40,38,2)
(14,38,2)
(4,13,2)
-----------------------------------
(0,intTwo)
(1,data[0])
(2,)
(3,ALLOCA(100*sizeof(twoIntsStruct)
(4,&data[0])
(5,twoIntsStruct *)
(6,)
(7,sizeof(twoIntsStruct)
(8,data[0].intTwo = 0)
(9,data = (twoIntsStruct *)
(10,data[0].intOne = 0)
(11,0)
(12,if(globalReturnsTrue()
(13,data[0])
(14,twoIntsStruct)
(15,RET)
(16,0)
(17,printLine("Benign, fixed string")
(18,0)
(19,if(globalReturnsFalse()
(20,"Benign, fixed string")
(21,100)
(22,printStructLine(&data[0])
(23,intOne)
(24,data)
(25,data)
(26,100*sizeof(twoIntsStruct)
(27,0)
(28,data = NULL)
(29,0)
(30,NULL)
(31,data[0])
(32,data)
(33,globalReturnsTrue()
(34,data)
(35,data)
(36,data[0].intTwo)
(37,)
(38,globalReturnsFalse()
(39,data[0].intOne)
(40,data)
(41,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^