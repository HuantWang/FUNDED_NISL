-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
56,57
59,60
59,61
60,61
62,63
62,64
63,64
63,65
64,65
67,68
69,70
70,71
72,73
73,74
74,75
74,76
75,76
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,32,35,38,40,43,48,50,52,57,58,61,65,66,68,71,76,77
-----computeFrom-----
12,13
12,14
55,56
55,57
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_31_bad(){    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_31_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_31_bad
{    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(20,35,0)
(2,36,0)
(8,11,0)
(32,8,0)
(18,8,0)
(26,14,0)
(3,13,0)
(21,16,0)
(28,11,0)
(11,12,0)
(13,7,0)
(29,32,0)
(25,16,0)
(35,13,0)
(38,22,0)
(8,32,0)
(11,7,0)
(22,35,0)
(10,21,0)
(24,33,0)
(15,35,0)
(17,7,0)
(14,26,0)
(4,34,0)
(22,13,0)
(16,13,0)
(32,7,0)
(12,11,0)
(6,32,0)
(14,22,0)
(23,13,0)
(27,34,0)
(37,27,0)
(31,16,0)
(14,36,0)
(0,12,0)
(36,34,0)
(39,14,0)
(35,11,0)
(19,24,0)
(30,22,0)
(9,34,0)
(1,21,0)
(36,14,0)
(1,22,1)
(20,32,1)
(18,6,1)
(22,30,1)
(5,36,1)
(37,24,1)
(0,28,1)
(34,4,1)
(32,8,1)
(21,10,1)
(24,19,1)
(39,2,1)
(10,1,1)
(14,22,1)
(8,18,1)
(14,39,1)
(35,15,1)
(19,36,1)
(35,11,1)
(29,11,1)
(27,34,1)
(27,37,1)
(38,35,1)
(36,34,1)
(14,26,1)
(12,0,1)
(30,38,1)
(2,27,1)
(2,34,1)
(4,9,1)
(15,20,1)
(22,35,1)
(36,14,1)
(6,29,1)
(8,11,1)
(11,12,1)
(9,21,1)
(35,11,2)
(36,34,2)
(27,36,2)
(36,14,2)
(14,26,2)
(39,36,2)
(11,12,2)
(2,36,2)
(36,36,2)
(14,22,2)
(19,36,2)
(8,11,2)
(22,35,2)
(37,36,2)
(24,36,2)
(14,36,2)
(27,34,2)
(32,8,2)
-----------------------------------
(0,1)
(1,i)
(2,i)
(3,count)
(4,0)
(5,RET)
(6,"%d")
(7,)
(8,&count)
(9,i)
(10,0)
(11,count = -1)
(12,-1)
(13,)
(14,(size_t)
(15,count)
(16,)
(17,count)
(18,count)
(19,"Hello")
(20,countCopy)
(21,i = 0)
(22,count = countCopy)
(23,countCopy)
(24,printLine("Hello")
(25,i)
(26,size_t)
(27,i++)
(28,count)
(29,stdin)
(30,countCopy)
(31,for (i = 0; i < (size_t)
(32,fscanf(stdin, "%d", &count)
(33,)
(34,i = 0)
(35,countCopy = count)
(36,i < (size_t)
(37,i)
(38,count)
(39,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^