-----label-----
0
-----code-----
static void goodB2G1()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Close the file from the source before pointing data to a new file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        data = fopen("GoodSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
28,31
29,30
29,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
57,58
61,62
61,63
62,63
62,64
63,64
65,66
67,68
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,30,31,36,37,42,44,49,51,55,58,59,60,64,66,71,73
-----computeFrom-----
14,15
14,16
20,21
20,22
29,30
29,31
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
42,51
64,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
static void
goodB2G1()
goodB2G1
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
data = fopen("GoodSink_fopen.txt", "w+");
data = fopen("GoodSink_fopen.txt", "w+")
data
data
fopen("GoodSink_fopen.txt", "w+")
fopen
fopen
"GoodSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(9,31,0)
(3,7,0)
(4,23,0)
(5,23,0)
(23,21,0)
(26,36,0)
(31,7,0)
(19,31,0)
(25,22,0)
(10,37,0)
(27,6,0)
(12,34,0)
(23,36,0)
(24,10,0)
(13,33,0)
(8,34,0)
(31,6,0)
(29,6,0)
(0,22,0)
(22,21,0)
(28,21,0)
(11,33,0)
(17,15,0)
(33,23,0)
(34,31,0)
(1,7,0)
(2,36,0)
(18,4,0)
(4,20,0)
(30,9,0)
(16,15,0)
(32,21,0)
(36,23,0)
(9,35,0)
(6,31,0)
(6,27,1)
(2,26,1)
(18,33,1)
(14,9,1)
(23,36,1)
(31,6,1)
(24,15,1)
(29,19,1)
(14,34,1)
(36,2,1)
(4,23,1)
(16,23,1)
(22,25,1)
(34,12,1)
(34,31,1)
(14,10,1)
(5,22,1)
(11,15,1)
(19,33,1)
(12,8,1)
(15,17,1)
(25,0,1)
(27,29,1)
(19,4,1)
(33,23,1)
(17,16,1)
(4,18,1)
(8,31,1)
(9,31,1)
(26,5,1)
(10,24,1)
(9,30,1)
(30,34,1)
(33,13,1)
(13,11,1)
(8,15,2)
(10,15,2)
(30,34,2)
(4,23,2)
(12,15,2)
(18,33,2)
(9,31,2)
(4,33,2)
(23,36,2)
(24,15,2)
(6,15,2)
(33,23,2)
(29,15,2)
(33,15,2)
(27,15,2)
(31,6,2)
(9,34,2)
(34,15,2)
(31,15,2)
(13,15,2)
(34,31,2)
(11,15,2)
(19,15,2)
-----------------------------------
(0,data)
(1,if (data != NULL)
(2,"w+")
(3,if (data != NULL)
(4,fclose(data)
(5,data)
(6,fopen("GoodSink_fopen.txt", "w+")
(7,)
(8,data)
(9,fclose(data)
(10,printLine("Benign, fixed string")
(11,data)
(12,NULL)
(13,NULL)
(14,RET)
(15,5!=5)
(16,5)
(17,5)
(18,data)
(19,data)
(20,)
(21,)
(22,data = NULL)
(23,data = fopen("BadSource_fopen.txt", "w+")
(24,"Benign, fixed string")
(25,NULL)
(26,"BadSource_fopen.txt")
(27,"w+")
(28,if(5!=5)
(29,"GoodSink_fopen.txt")
(30,data)
(31,data = fopen("GoodSink_fopen.txt", "w+")
(32,data)
(33,data != NULL)
(34,data != NULL)
(35,)
(36,fopen("BadSource_fopen.txt", "w+")
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^