-----label-----
1
-----code-----
static int
sn_pci_fixup_slot(struct pci_dev *dev)
{
	extern int bit_pos_to_irq(int);
	unsigned int irq;
	int idx;
	u16 cmd;
	vertex_hdl_t vhdl;
	unsigned long size;
	struct pci_controller *pci_sysdata;
	struct sn_device_sysdata *device_sysdata;
	pciio_intr_line_t lines = 0;
	vertex_hdl_t device_vertex;
	pciio_provider_t *pci_provider;
	pciio_intr_t intr_handle;

	/* Allocate a controller structure */
	pci_sysdata = sn_alloc_pci_sysdata();
	if (!pci_sysdata) {
		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "
			       "allocate memory for pci_sysdata\n");
		return -ENOMEM;
	}

	/* Set the device vertex */
	device_sysdata = kmalloc(sizeof(struct sn_device_sysdata), GFP_KERNEL);
	if (!device_sysdata) {
		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "
			       "allocate memory for device_sysdata\n");
		kfree(pci_sysdata);
		return -ENOMEM;
	}

	device_sysdata->vhdl = devfn_to_vertex(dev->bus->number, dev->devfn);
	pci_sysdata->platform_data = (void *) device_sysdata;
	dev->sysdata = pci_sysdata;
	set_pci_provider(device_sysdata);

	pci_read_config_word(dev, PCI_COMMAND, &cmd);

	/*
	 * Set the resources address correctly.  The assumption here
	 * is that the addresses in the resource structure has been
	 * read from the card and it was set in the card by our
	 * Infrastructure.  NOTE: PIC and TIOCP don't have big-window
	 * upport for PCI I/O space.  So by mapping the I/O space
	 * first we will attempt to use Device(x) registers for I/O
	 * BARs (which can't use big windows like MEM BARs can).
	 */
	vhdl = device_sysdata->vhdl;

	/* Allocate the IORESOURCE_IO space first */
	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {
		unsigned long start, end, addr;

		device_sysdata->pio_map[idx] = NULL;

		if (!(dev->resource[idx].flags & IORESOURCE_IO))
			continue;

		start = dev->resource[idx].start;
		end = dev->resource[idx].end;
		size = end - start;
		if (!size)
			continue;

		addr = (unsigned long)pciio_pio_addr(vhdl, 0,
		PCIIO_SPACE_WIN(idx), 0, size,
				&device_sysdata->pio_map[idx], 0);

		if (!addr) {
			dev->resource[idx].start = 0;
			dev->resource[idx].end = 0;
			printk("sn_pci_fixup(): pio map failure for "
				"%s bar%d\n", dev->slot_name, idx);
		} else {
			addr |= __IA64_UNCACHED_OFFSET;
			dev->resource[idx].start = addr;
			dev->resource[idx].end = addr + size;
			dev->resource[idx].parent = &ioport_resource;
		}

		if (dev->resource[idx].flags & IORESOURCE_IO)
			cmd |= PCI_COMMAND_IO;
	}

	/* Allocate the IORESOURCE_MEM space next */
	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {
		unsigned long start, end, addr;

		if ((dev->resource[idx].flags & IORESOURCE_IO))
			continue;

		start = dev->resource[idx].start;
		end = dev->resource[idx].end;
		size = end - start;
		if (!size)
			continue;

		addr = (unsigned long)pciio_pio_addr(vhdl, 0,
		PCIIO_SPACE_WIN(idx), 0, size,
				&device_sysdata->pio_map[idx], 0);

		if (!addr) {
			dev->resource[idx].start = 0;
			dev->resource[idx].end = 0;
			printk("sn_pci_fixup(): pio map failure for "
				"%s bar%d\n", dev->slot_name, idx);
		} else {
			addr |= __IA64_UNCACHED_OFFSET;
			dev->resource[idx].start = addr;
			dev->resource[idx].end = addr + size;
			dev->resource[idx].parent = &iomem_resource;
		}

		if (dev->resource[idx].flags & IORESOURCE_MEM)
			cmd |= PCI_COMMAND_MEMORY;
	}

        /*
	 * Assign addresses to the ROMs, but don't enable them yet
	 * Also note that we only map display card ROMs due to PIO mapping
	 * space scarcity.
	 */
        if ((dev->class >> 16) == PCI_BASE_CLASS_DISPLAY) {
                unsigned long addr;
                size = dev->resource[PCI_ROM_RESOURCE].end -
                        dev->resource[PCI_ROM_RESOURCE].start;

                if (size) {
                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,
					      PCIIO_SPACE_ROM,
					      0, size, 0, PIOMAP_FIXED);
                        if (!addr) {
                                dev->resource[PCI_ROM_RESOURCE].start = 0;
                                dev->resource[PCI_ROM_RESOURCE].end = 0;
                                printk("sn_pci_fixup(): ROM pio map failure "
				       "for %s\n", dev->slot_name);
                        }
                        addr |= __IA64_UNCACHED_OFFSET;
                        dev->resource[PCI_ROM_RESOURCE].start = addr;
                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;
			dev->resource[idx].parent = &iomem_resource;
                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)
                                cmd |= PCI_COMMAND_MEMORY;
                }
        }

	/*
	 * Update the Command Word on the Card.
	 */
	cmd |= PCI_COMMAND_MASTER; /* If the device doesn't support */
				   /* bit gets dropped .. no harm */
	pci_write_config_word(dev, PCI_COMMAND, cmd);

	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, (unsigned char *)&lines);
	device_vertex = device_sysdata->vhdl;
	pci_provider = device_sysdata->pci_provider;
	device_sysdata->intr_handle = NULL;

	if (!lines)
		return 0;

	irqpdaindr->curr = dev;

	intr_handle = (pci_provider->intr_alloc)(device_vertex, NULL, lines, device_vertex);
	if (intr_handle == NULL) {
		printk(KERN_WARNING "sn_pci_fixup:  pcibr_intr_alloc() failed\n");
		kfree(pci_sysdata);
		kfree(device_sysdata);
		return -ENOMEM;
	}

	device_sysdata->intr_handle = intr_handle;
	irq = intr_handle->pi_irq;
	irqpdaindr->device_dev[irq] = dev;
	(pci_provider->intr_connect)(intr_handle, (intr_func_t)0, (intr_arg_t)0);
	dev->irq = irq;

	register_pcibr_intr(irq, (pcibr_intr_t)intr_handle);

	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {
		int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;
		int i;

		size = dev->resource[idx].end -
			dev->resource[idx].start;
		if (size == 0) continue;

		for (i=0; i<8; i++) {
			if (ibits & (1 << i) ) {
				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);
				device_sysdata->dma_flush_list =
				 sn_dma_flush_init(dev->resource[idx].start,
						   dev->resource[idx].end,
						   idx,
						   i,
						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));
			}
		}
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
12,13
13,14
13,15
15,16
15,17
17,18
17,19
19,20
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
80,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
94,95
96,97
96,98
97,98
98,99
100,101
100,102
101,102
102,103
103,104
104,105
106,107
107,108
107,109
108,109
110,111
110,112
110,113
111,112
113,114
114,115
114,116
115,116
118,119
120,121
120,122
121,122
122,123
124,125
124,126
124,127
125,126
126,127
127,128
127,129
128,129
130,131
132,133
133,134
134,135
136,137
137,138
137,139
138,139
138,140
139,140
142,143
142,144
142,145
143,144
145,146
145,147
146,147
146,148
147,148
151,152
151,153
152,153
155,156
156,157
156,158
157,158
157,159
158,159
161,162
161,163
162,163
162,164
164,165
166,167
168,169
169,170
169,171
170,171
170,172
171,172
174,175
176,177
177,178
177,179
178,179
180,181
182,183
183,184
183,185
183,186
183,187
184,185
186,187
188,189
190,191
191,192
193,194
194,195
194,196
195,196
197,198
197,199
198,199
201,202
201,203
201,204
201,205
202,203
203,204
203,205
204,205
207,208
207,209
208,209
210,211
212,213
213,214
215,216
215,217
215,218
215,219
215,220
215,221
215,222
215,223
215,224
215,225
216,217
217,218
217,219
217,220
217,221
219,220
221,222
223,224
225,226
226,227
226,228
227,228
227,229
228,229
228,230
229,230
232,233
234,235
236,237
236,238
237,238
238,239
239,240
239,241
240,241
240,242
241,242
241,243
242,243
242,244
243,244
246,247
249,250
252,253
253,254
253,255
254,255
256,257
256,258
257,258
257,259
258,259
258,260
259,260
262,263
265,266
266,267
266,268
267,268
269,270
269,271
270,271
270,272
271,272
271,273
272,273
275,276
278,279
279,280
279,281
280,281
282,283
282,284
283,284
285,286
287,288
287,289
288,289
289,290
292,293
293,294
293,295
294,295
296,297
296,298
297,298
297,299
300,301
300,302
300,303
300,304
300,305
300,306
300,307
300,308
301,302
303,304
306,307
306,308
307,308
309,310
312,313
314,315
315,316
315,317
316,317
316,318
317,318
320,321
323,324
323,325
323,326
324,325
325,326
327,328
327,329
327,330
328,329
329,330
329,331
330,331
330,332
331,332
331,333
332,333
332,334
333,334
336,337
340,341
341,342
341,343
342,343
342,344
343,344
343,345
344,345
344,346
345,346
348,349
352,353
353,354
353,355
353,356
353,357
354,355
357,358
357,359
358,359
361,362
363,364
363,365
363,366
363,367
364,365
365,366
365,367
366,367
368,369
370,371
371,372
371,373
372,373
372,374
373,374
373,375
374,375
374,376
375,376
378,379
381,382
383,384
384,385
384,386
385,386
385,387
386,387
386,388
387,388
387,389
388,389
391,392
394,395
394,396
395,396
397,398
399,400
400,401
400,402
401,402
401,403
402,403
402,404
403,404
403,405
404,405
407,408
410,411
411,412
413,414
413,415
414,415
414,416
415,416
415,417
416,417
416,418
417,418
417,419
418,419
421,422
424,425
426,427
427,428
427,429
428,429
430,431
432,433
432,434
432,435
432,436
433,434
434,435
434,436
435,436
438,439
438,440
439,440
441,442
443,444
444,445
446,447
446,448
446,449
446,450
446,451
446,452
446,453
446,454
446,455
447,448
448,449
448,450
448,451
448,452
450,451
452,453
454,455
456,457
456,458
457,458
458,459
458,460
459,460
459,461
460,461
460,462
461,462
461,463
462,463
465,466
468,469
471,472
472,473
472,474
473,474
475,476
475,477
476,477
476,478
477,478
477,479
478,479
481,482
484,485
485,486
485,487
486,487
488,489
488,490
489,490
489,491
490,491
490,492
491,492
494,495
497,498
498,499
498,500
499,500
501,502
501,503
502,503
504,505
506,507
506,508
507,508
508,509
511,512
512,513
512,514
513,514
515,516
515,517
516,517
516,518
519,520
519,521
519,522
519,523
519,524
519,525
519,526
519,527
520,521
522,523
525,526
525,527
526,527
528,529
531,532
533,534
534,535
534,536
535,536
535,537
536,537
539,540
542,543
542,544
542,545
543,544
544,545
546,547
546,548
546,549
547,548
548,549
548,550
549,550
549,551
550,551
550,552
551,552
551,553
552,553
555,556
559,560
560,561
560,562
561,562
561,563
562,563
562,564
563,564
563,565
564,565
567,568
571,572
572,573
572,574
572,575
572,576
573,574
576,577
576,578
577,578
580,581
582,583
582,584
582,585
582,586
583,584
584,585
584,586
585,586
587,588
589,590
590,591
590,592
591,592
591,593
592,593
592,594
593,594
593,595
594,595
597,598
600,601
602,603
603,604
603,605
604,605
604,606
605,606
605,607
606,607
606,608
607,608
610,611
613,614
613,615
614,615
616,617
618,619
619,620
619,621
620,621
620,622
621,622
621,623
622,623
622,624
623,624
626,627
629,630
630,631
632,633
632,634
633,634
633,635
634,635
634,636
635,636
635,637
636,637
636,638
637,638
640,641
643,644
645,646
646,647
646,648
647,648
649,650
651,652
651,653
652,653
653,654
653,655
653,656
654,655
655,656
655,657
657,658
659,660
660,661
660,662
661,662
663,664
663,665
664,665
664,666
665,666
665,667
666,667
666,668
667,668
670,671
673,674
673,675
674,675
674,676
675,676
675,677
676,677
679,680
682,683
682,684
683,684
685,686
685,687
685,688
685,689
685,690
685,691
685,692
686,687
687,688
687,689
688,689
690,691
690,692
691,692
691,693
694,695
694,696
694,697
694,698
694,699
694,700
694,701
694,702
695,696
697,698
700,701
703,704
706,707
708,709
708,710
709,710
710,711
712,713
712,714
712,715
713,714
714,715
714,716
715,716
715,717
716,717
716,718
717,718
717,719
718,719
721,722
725,726
726,727
726,728
727,728
727,729
728,729
728,730
729,730
729,731
730,731
733,734
737,738
738,739
738,740
738,741
739,740
742,743
742,744
743,744
746,747
747,748
747,749
748,749
750,751
752,753
753,754
753,755
754,755
754,756
755,756
755,757
756,757
756,758
757,758
760,761
763,764
765,766
766,767
766,768
767,768
767,769
768,769
768,770
769,770
769,771
770,771
773,774
776,777
776,778
777,778
779,780
781,782
782,783
782,784
783,784
783,785
784,785
784,786
785,786
785,787
786,787
789,790
792,793
793,794
795,796
795,797
796,797
796,798
797,798
797,799
798,799
798,800
799,800
799,801
800,801
803,804
806,807
808,809
809,810
809,811
810,811
812,813
814,815
815,816
815,817
816,817
818,819
820,821
821,822
821,823
821,824
821,825
822,823
824,825
826,827
828,829
830,831
831,832
831,833
831,834
831,835
832,833
834,835
836,837
838,839
838,840
839,840
839,841
841,842
843,844
844,845
846,847
847,848
847,849
848,849
850,851
850,852
851,852
854,855
855,856
855,857
856,857
858,859
858,860
859,860
862,863
863,864
863,865
864,865
864,866
865,866
868,869
870,871
870,872
871,872
872,873
874,875
876,877
877,878
877,879
878,879
878,880
879,880
882,883
884,885
885,886
885,887
886,887
888,889
888,890
888,891
888,892
888,893
889,890
890,891
890,892
891,892
894,895
896,897
898,899
900,901
902,903
902,904
903,904
903,905
904,905
906,907
908,909
908,910
908,911
908,912
909,910
910,911
911,912
911,913
912,913
914,915
916,917
917,918
917,919
918,919
920,921
922,923
923,924
924,925
926,927
927,928
927,929
928,929
928,930
929,930
932,933
934,935
935,936
935,937
936,937
938,939
938,940
939,940
942,943
943,944
943,945
944,945
944,946
945,946
945,947
946,947
949,950
951,952
953,954
954,955
954,956
954,957
954,958
955,956
956,957
956,958
957,958
960,961
962,963
962,964
963,964
963,965
964,965
968,969
968,970
969,970
969,971
970,971
974,975
975,976
975,977
976,977
976,978
977,978
980,981
982,983
983,984
983,985
983,986
984,985
986,987
988,989
988,990
989,990
989,991
990,991
993,994
995,996
995,997
995,998
995,999
996,997
997,998
997,999
998,999
1001,1002
1001,1003
1002,1003
1004,1005
1006,1007
1007,1008
1009,1010
1009,1011
1009,1012
1009,1013
1009,1014
1010,1011
1011,1012
1011,1013
1013,1014
1013,1015
1015,1016
1016,1017
1016,1018
1017,1018
1018,1019
1018,1020
1019,1020
1019,1021
1020,1021
1023,1024
1026,1027
1027,1028
1027,1029
1029,1030
1031,1032
1032,1033
1032,1034
1033,1034
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1037,1039
1038,1039
1038,1040
1039,1040
1042,1043
1045,1046
1045,1047
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1051,1052
1054,1055
1054,1056
1055,1056
1055,1057
1056,1057
1060,1061
1060,1062
1060,1063
1060,1064
1061,1062
1062,1063
1062,1064
1063,1064
1066,1067
1066,1068
1067,1068
1070,1071
1071,1072
1073,1074
1074,1075
1074,1076
1075,1076
1075,1077
1076,1077
1078,1079
1079,1080
1079,1081
1081,1082
1083,1084
1083,1085
1084,1085
1085,1086
1085,1087
1086,1087
1088,1089
1088,1090
1090,1091
1091,1092
1093,1094
1094,1095
1094,1096
1095,1096
1095,1097
1096,1097
1099,1100
1099,1101
1099,1102
1099,1103
1099,1104
1099,1105
1100,1101
1102,1103
1102,1104
1103,1104
1103,1105
1104,1105
1104,1106
1105,1106
1108,1109
1111,1112
1111,1113
1112,1113
1112,1114
1113,1114
1113,1115
1114,1115
1117,1118
1120,1121
1122,1123
1124,1125
1124,1126
1125,1126
1127,1128
1127,1129
1128,1129
1130,1131
1130,1132
1131,1132
1134,1135
-----nextToken-----
2,4,7,9,10,14,16,18,20,23,25,28,30,34,36,40,42,45,47,51,53,54,58,60,61,65,67,69,73,75,79,81,82,86,88,92,95,99,105,109,112,116,117,119,123,129,131,135,140,141,144,148,149,150,153,154,159,160,163,165,167,172,173,175,179,181,185,187,189,192,196,199,200,205,206,209,211,214,218,220,222,224,230,231,233,235,244,245,247,248,250,251,255,260,261,263,264,268,273,274,276,277,281,284,286,290,291,295,298,299,302,304,305,308,310,311,313,318,319,321,322,326,334,335,337,338,339,346,347,349,350,351,355,356,359,360,362,367,369,376,377,379,380,382,389,390,392,393,396,398,405,406,408,409,412,419,420,422,423,425,429,431,436,437,440,442,445,449,451,453,455,463,464,466,467,469,470,474,479,480,482,483,487,492,493,495,496,500,503,505,509,510,514,517,518,521,523,524,527,529,530,532,537,538,540,541,545,553,554,556,557,558,565,566,568,569,570,574,575,578,579,581,586,588,595,596,598,599,601,608,609,611,612,615,617,624,625,627,628,631,638,639,641,642,644,648,650,656,658,662,668,669,671,672,677,678,680,681,684,689,692,693,696,698,699,701,702,704,705,707,711,719,720,722,723,724,731,732,734,735,736,740,741,744,745,749,751,758,759,761,762,764,771,772,774,775,778,780,787,788,790,791,794,801,802,804,805,807,811,813,817,819,823,825,827,829,833,835,837,840,842,845,849,852,853,857,860,861,866,867,869,873,875,880,881,883,887,892,893,895,897,899,901,905,907,913,915,919,921,925,930,931,933,937,940,941,947,948,950,952,958,959,961,965,966,967,971,972,973,978,979,981,985,987,991,992,994,999,1000,1003,1005,1008,1012,1014,1021,1022,1024,1025,1028,1030,1034,1040,1041,1043,1044,1049,1050,1052,1053,1057,1058,1059,1064,1065,1068,1069,1072,1077,1080,1082,1087,1089,1092,1097,1098,1101,1106,1107,1109,1110,1115,1116,1118,1119,1121,1123,1126,1129,1132,1133,1135
-----computeFrom-----
90,91
90,92
107,108
107,109
137,138
137,139
156,157
156,158
169,170
169,171
194,195
194,196
203,204
203,205
207,208
207,209
226,227
226,228
239,240
239,241
253,254
253,255
266,267
266,268
279,280
279,281
282,283
282,284
293,294
293,295
329,330
329,331
341,342
341,343
365,366
365,367
371,372
371,373
384,385
384,386
394,395
394,396
400,401
400,402
414,415
414,416
427,428
427,429
434,435
434,436
438,439
438,440
458,459
458,460
472,473
472,474
485,486
485,487
498,499
498,500
501,502
501,503
512,513
512,514
548,549
548,550
560,561
560,562
584,585
584,586
590,591
590,592
603,604
603,605
613,614
613,615
619,620
619,621
633,634
633,635
646,647
646,648
660,661
660,662
663,664
663,665
687,688
687,689
714,715
714,716
726,727
726,728
747,748
747,749
753,754
753,755
766,767
766,768
776,777
776,778
782,783
782,784
796,797
796,798
809,810
809,811
815,816
815,817
847,848
847,849
855,856
855,857
863,864
863,865
877,878
877,879
885,886
885,887
903,904
903,905
927,928
927,929
935,936
935,937
943,944
943,945
975,976
975,977
997,998
997,999
1001,1002
1001,1003
1032,1033
1032,1034
1035,1036
1035,1037
1055,1056
1055,1057
1062,1063
1062,1064
1066,1067
1066,1068
1075,1076
1075,1077
1079,1080
1079,1081
1094,1095
1094,1096
-----guardedBy-----
1082,1123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;IfStatement;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;ProblemExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ConstructorInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intsn_pci_fixup_slot(struct pci_dev *dev){	extern int bit_pos_to_irq(int);	unsigned int irq;	int idx;	u16 cmd;	vertex_hdl_t vhdl;	unsigned long size;	struct pci_controller *pci_sysdata;	struct sn_device_sysdata *device_sysdata;	pciio_intr_line_t lines = 0;	vertex_hdl_t device_vertex;	pciio_provider_t *pci_provider;	pciio_intr_t intr_handle;	/* Allocate a controller structure */	pci_sysdata = sn_alloc_pci_sysdata();	if (!pci_sysdata) {		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for pci_sysdata\n");		return -ENOMEM;	}	/* Set the device vertex */	device_sysdata = kmalloc(sizeof(struct sn_device_sysdata), GFP_KERNEL);	if (!device_sysdata) {		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for device_sysdata\n");		kfree(pci_sysdata);		return -ENOMEM;	}	device_sysdata->vhdl = devfn_to_vertex(dev->bus->number, dev->devfn);	pci_sysdata->platform_data = (void *) device_sysdata;	dev->sysdata = pci_sysdata;	set_pci_provider(device_sysdata);	pci_read_config_word(dev, PCI_COMMAND, &cmd);	/*	 * Set the resources address correctly.  The assumption here	 * is that the addresses in the resource structure has been	 * read from the card and it was set in the card by our	 * Infrastructure.  NOTE: PIC and TIOCP don't have big-window	 * upport for PCI I/O space.  So by mapping the I/O space	 * first we will attempt to use Device(x) registers for I/O	 * BARs (which can't use big windows like MEM BARs can).	 */	vhdl = device_sysdata->vhdl;	/* Allocate the IORESOURCE_IO space first */	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		unsigned long start, end, addr;		device_sysdata->pio_map[idx] = NULL;		if (!(dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &ioport_resource;		}		if (dev->resource[idx].flags & IORESOURCE_IO)			cmd |= PCI_COMMAND_IO;	}	/* Allocate the IORESOURCE_MEM space next */	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		unsigned long start, end, addr;		if ((dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &iomem_resource;		}		if (dev->resource[idx].flags & IORESOURCE_MEM)			cmd |= PCI_COMMAND_MEMORY;	}        /*	 * Assign addresses to the ROMs, but don't enable them yet	 * Also note that we only map display card ROMs due to PIO mapping	 * space scarcity.	 */        if ((dev->class >> 16) == PCI_BASE_CLASS_DISPLAY) {                unsigned long addr;                size = dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start;                if (size) {                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);                        if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }                        addr |= __IA64_UNCACHED_OFFSET;                        dev->resource[PCI_ROM_RESOURCE].start = addr;                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;			dev->resource[idx].parent = &iomem_resource;                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;                }        }	/*	 * Update the Command Word on the Card.	 */	cmd |= PCI_COMMAND_MASTER; /* If the device doesn't support */				   /* bit gets dropped .. no harm */	pci_write_config_word(dev, PCI_COMMAND, cmd);	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, (unsigned char *)&lines);	device_vertex = device_sysdata->vhdl;	pci_provider = device_sysdata->pci_provider;	device_sysdata->intr_handle = NULL;	if (!lines)		return 0;	irqpdaindr->curr = dev;	intr_handle = (pci_provider->intr_alloc)(device_vertex, NULL, lines, device_vertex);	if (intr_handle == NULL) {		printk(KERN_WARNING "sn_pci_fixup:  pcibr_intr_alloc() failed\n");		kfree(pci_sysdata);		kfree(device_sysdata);		return -ENOMEM;	}	device_sysdata->intr_handle = intr_handle;	irq = intr_handle->pi_irq;	irqpdaindr->device_dev[irq] = dev;	(pci_provider->intr_connect)(intr_handle, (intr_func_t)0, (intr_arg_t)0);	dev->irq = irq;	register_pcibr_intr(irq, (pcibr_intr_t)intr_handle);	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;		int i;		size = dev->resource[idx].end -			dev->resource[idx].start;		if (size == 0) continue;		for (i=0; i<8; i++) {			if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}		}	}	return 0;}
static int
sn_pci_fixup_slot(struct pci_dev *dev)
sn_pci_fixup_slot
struct pci_dev *dev
struct pci_dev
pci_dev
*dev
*
dev
{	extern int bit_pos_to_irq(int);	unsigned int irq;	int idx;	u16 cmd;	vertex_hdl_t vhdl;	unsigned long size;	struct pci_controller *pci_sysdata;	struct sn_device_sysdata *device_sysdata;	pciio_intr_line_t lines = 0;	vertex_hdl_t device_vertex;	pciio_provider_t *pci_provider;	pciio_intr_t intr_handle;	/* Allocate a controller structure */	pci_sysdata = sn_alloc_pci_sysdata();	if (!pci_sysdata) {		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for pci_sysdata\n");		return -ENOMEM;	}	/* Set the device vertex */	device_sysdata = kmalloc(sizeof(struct sn_device_sysdata), GFP_KERNEL);	if (!device_sysdata) {		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for device_sysdata\n");		kfree(pci_sysdata);		return -ENOMEM;	}	device_sysdata->vhdl = devfn_to_vertex(dev->bus->number, dev->devfn);	pci_sysdata->platform_data = (void *) device_sysdata;	dev->sysdata = pci_sysdata;	set_pci_provider(device_sysdata);	pci_read_config_word(dev, PCI_COMMAND, &cmd);	/*	 * Set the resources address correctly.  The assumption here	 * is that the addresses in the resource structure has been	 * read from the card and it was set in the card by our	 * Infrastructure.  NOTE: PIC and TIOCP don't have big-window	 * upport for PCI I/O space.  So by mapping the I/O space	 * first we will attempt to use Device(x) registers for I/O	 * BARs (which can't use big windows like MEM BARs can).	 */	vhdl = device_sysdata->vhdl;	/* Allocate the IORESOURCE_IO space first */	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		unsigned long start, end, addr;		device_sysdata->pio_map[idx] = NULL;		if (!(dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &ioport_resource;		}		if (dev->resource[idx].flags & IORESOURCE_IO)			cmd |= PCI_COMMAND_IO;	}	/* Allocate the IORESOURCE_MEM space next */	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		unsigned long start, end, addr;		if ((dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &iomem_resource;		}		if (dev->resource[idx].flags & IORESOURCE_MEM)			cmd |= PCI_COMMAND_MEMORY;	}        /*	 * Assign addresses to the ROMs, but don't enable them yet	 * Also note that we only map display card ROMs due to PIO mapping	 * space scarcity.	 */        if ((dev->class >> 16) == PCI_BASE_CLASS_DISPLAY) {                unsigned long addr;                size = dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start;                if (size) {                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);                        if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }                        addr |= __IA64_UNCACHED_OFFSET;                        dev->resource[PCI_ROM_RESOURCE].start = addr;                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;			dev->resource[idx].parent = &iomem_resource;                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;                }        }	/*	 * Update the Command Word on the Card.	 */	cmd |= PCI_COMMAND_MASTER; /* If the device doesn't support */				   /* bit gets dropped .. no harm */	pci_write_config_word(dev, PCI_COMMAND, cmd);	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, (unsigned char *)&lines);	device_vertex = device_sysdata->vhdl;	pci_provider = device_sysdata->pci_provider;	device_sysdata->intr_handle = NULL;	if (!lines)		return 0;	irqpdaindr->curr = dev;	intr_handle = (pci_provider->intr_alloc)(device_vertex, NULL, lines, device_vertex);	if (intr_handle == NULL) {		printk(KERN_WARNING "sn_pci_fixup:  pcibr_intr_alloc() failed\n");		kfree(pci_sysdata);		kfree(device_sysdata);		return -ENOMEM;	}	device_sysdata->intr_handle = intr_handle;	irq = intr_handle->pi_irq;	irqpdaindr->device_dev[irq] = dev;	(pci_provider->intr_connect)(intr_handle, (intr_func_t)0, (intr_arg_t)0);	dev->irq = irq;	register_pcibr_intr(irq, (pcibr_intr_t)intr_handle);	for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;		int i;		size = dev->resource[idx].end -			dev->resource[idx].start;		if (size == 0) continue;		for (i=0; i<8; i++) {			if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}		}	}	return 0;}
extern int bit_pos_to_irq(int);
extern int bit_pos_to_irq(int);
extern int
bit_pos_to_irq(int)
bit_pos_to_irq
int
int


unsigned int irq;
unsigned int irq;
unsigned int
irq
irq
int idx;
int idx;
int
idx
idx
u16 cmd;
u16 cmd;
u16
u16
cmd
cmd
vertex_hdl_t vhdl;
vertex_hdl_t vhdl;
vertex_hdl_t
vertex_hdl_t
vhdl
vhdl
unsigned long size;
unsigned long size;
unsigned long
size
size
struct pci_controller *pci_sysdata;
struct pci_controller *pci_sysdata;
struct pci_controller
pci_controller
*pci_sysdata
*
pci_sysdata
struct sn_device_sysdata *device_sysdata;
struct sn_device_sysdata *device_sysdata;
struct sn_device_sysdata
sn_device_sysdata
*device_sysdata
*
device_sysdata
pciio_intr_line_t lines = 0;
pciio_intr_line_t lines = 0;
pciio_intr_line_t
pciio_intr_line_t
lines = 0
lines
= 0
0
vertex_hdl_t device_vertex;
vertex_hdl_t device_vertex;
vertex_hdl_t
vertex_hdl_t
device_vertex
device_vertex
pciio_provider_t *pci_provider;
pciio_provider_t *pci_provider;
pciio_provider_t
pciio_provider_t
*pci_provider
*
pci_provider
pciio_intr_t intr_handle;
pciio_intr_t intr_handle;
pciio_intr_t
pciio_intr_t
intr_handle
intr_handle
pci_sysdata = sn_alloc_pci_sysdata();
pci_sysdata = sn_alloc_pci_sysdata()
pci_sysdata
pci_sysdata
sn_alloc_pci_sysdata()
sn_alloc_pci_sysdata
sn_alloc_pci_sysdata
if (!pci_sysdata) {		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for pci_sysdata\n");		return -ENOMEM;	}
!pci_sysdata
pci_sysdata
pci_sysdata
{		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for pci_sysdata\n");		return -ENOMEM;	}
printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for pci_sysdata\n");
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
device_sysdata = kmalloc(sizeof(struct sn_device_sysdata), GFP_KERNEL);
device_sysdata = kmalloc(sizeof(struct sn_device_sysdata), GFP_KERNEL)
device_sysdata
device_sysdata
kmalloc(sizeof(struct sn_device_sysdata), GFP_KERNEL)
kmalloc
kmalloc
sizeof(struct sn_device_sysdata)
struct sn_device_sysdata
struct sn_device_sysdata
sn_device_sysdata

GFP_KERNEL
GFP_KERNEL
if (!device_sysdata) {		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for device_sysdata\n");		kfree(pci_sysdata);		return -ENOMEM;	}
!device_sysdata
device_sysdata
device_sysdata
{		printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for device_sysdata\n");		kfree(pci_sysdata);		return -ENOMEM;	}
printk(KERN_WARNING "sn_pci_fixup_slot: Unable to "			       "allocate memory for device_sysdata\n");
kfree(pci_sysdata);
kfree(pci_sysdata)
kfree
kfree
pci_sysdata
pci_sysdata
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
device_sysdata->vhdl = devfn_to_vertex(dev->bus->number, dev->devfn);
device_sysdata->vhdl = devfn_to_vertex(dev->bus->number, dev->devfn)
device_sysdata->vhdl
device_sysdata
device_sysdata
vhdl
devfn_to_vertex(dev->bus->number, dev->devfn)
devfn_to_vertex
devfn_to_vertex
dev->bus->number
dev->bus
dev
dev
bus
number
dev->devfn
dev
dev
devfn
pci_sysdata->platform_data = (void *) device_sysdata;
pci_sysdata->platform_data = (void *) device_sysdata
pci_sysdata->platform_data
pci_sysdata
pci_sysdata
platform_data
(void *) device_sysdata
void *
void
*
*
device_sysdata
device_sysdata
dev->sysdata = pci_sysdata;
dev->sysdata = pci_sysdata
dev->sysdata
dev
dev
sysdata
pci_sysdata
pci_sysdata
set_pci_provider(device_sysdata);
set_pci_provider(device_sysdata)
set_pci_provider
set_pci_provider
device_sysdata
device_sysdata
pci_read_config_word(dev, PCI_COMMAND, &cmd);
pci_read_config_word(dev, PCI_COMMAND, &cmd)
pci_read_config_word
pci_read_config_word
dev
dev
PCI_COMMAND
PCI_COMMAND
&cmd
cmd
cmd
vhdl = device_sysdata->vhdl;
vhdl = device_sysdata->vhdl
vhdl
vhdl
device_sysdata->vhdl
device_sysdata
device_sysdata
vhdl
for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		unsigned long start, end, addr;		device_sysdata->pio_map[idx] = NULL;		if (!(dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &ioport_resource;		}		if (dev->resource[idx].flags & IORESOURCE_IO)			cmd |= PCI_COMMAND_IO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PCI_ROM_RESOURCE
idx
idx
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
idx++
idx
idx
{		unsigned long start, end, addr;		device_sysdata->pio_map[idx] = NULL;		if (!(dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &ioport_resource;		}		if (dev->resource[idx].flags & IORESOURCE_IO)			cmd |= PCI_COMMAND_IO;	}
unsigned long start, end, addr;
unsigned long start, end, addr;
unsigned long
start
start
end
end
addr
addr
device_sysdata->pio_map[idx] = NULL;
device_sysdata->pio_map[idx] = NULL
device_sysdata->pio_map[idx]
device_sysdata->pio_map
device_sysdata
device_sysdata
pio_map
idx
idx
NULL
NULL
if (!(dev->resource[idx].flags & IORESOURCE_IO))			continue;
!(dev->resource[idx].flags & IORESOURCE_IO)
(dev->resource[idx].flags & IORESOURCE_IO)
dev->resource[idx].flags & IORESOURCE_IO
dev->resource[idx].flags
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
flags
IORESOURCE_IO
IORESOURCE_IO
continue;
start = dev->resource[idx].start;
start = dev->resource[idx].start
start
start
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
end = dev->resource[idx].end;
end = dev->resource[idx].end
end
end
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
size = end - start;
size = end - start
size
size
end - start
end
end
start
start
if (!size)			continue;
!size
size
size
continue;
addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);
addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0)
addr
addr
(unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0)
unsigned long
unsigned long

pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0)
pciio_pio_addr
pciio_pio_addr
vhdl
vhdl
0
PCIIO_SPACE_WIN(idx)
PCIIO_SPACE_WIN
PCIIO_SPACE_WIN
idx
idx
0
size
size
&device_sysdata->pio_map[idx]
device_sysdata->pio_map[idx]
device_sysdata->pio_map
device_sysdata
device_sysdata
pio_map
idx
idx
0
if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &ioport_resource;		}
!addr
addr
addr
{			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		}
dev->resource[idx].start = 0;
dev->resource[idx].start = 0
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
0
dev->resource[idx].end = 0;
dev->resource[idx].end = 0
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
0
printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);
printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx)
printk
printk
"sn_pci_fixup(): pio map failure for "				"%s bar%d\n"
dev->slot_name
dev
dev
slot_name
idx
idx
{			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &ioport_resource;		}
addr |= __IA64_UNCACHED_OFFSET;
addr |= __IA64_UNCACHED_OFFSET
addr
addr
__IA64_UNCACHED_OFFSET
__IA64_UNCACHED_OFFSET
dev->resource[idx].start = addr;
dev->resource[idx].start = addr
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
addr
addr
dev->resource[idx].end = addr + size;
dev->resource[idx].end = addr + size
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
addr + size
addr
addr
size
size
dev->resource[idx].parent = &ioport_resource;
dev->resource[idx].parent = &ioport_resource
dev->resource[idx].parent
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
parent
&ioport_resource
ioport_resource
ioport_resource
if (dev->resource[idx].flags & IORESOURCE_IO)			cmd |= PCI_COMMAND_IO;
dev->resource[idx].flags & IORESOURCE_IO
dev->resource[idx].flags
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
flags
IORESOURCE_IO
IORESOURCE_IO
cmd |= PCI_COMMAND_IO;
cmd |= PCI_COMMAND_IO
cmd
cmd
PCI_COMMAND_IO
PCI_COMMAND_IO
for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		unsigned long start, end, addr;		if ((dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &iomem_resource;		}		if (dev->resource[idx].flags & IORESOURCE_MEM)			cmd |= PCI_COMMAND_MEMORY;	}
idx = 0;
idx = 0
idx
idx
0
idx < PCI_ROM_RESOURCE
idx
idx
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
idx++
idx
idx
{		unsigned long start, end, addr;		if ((dev->resource[idx].flags & IORESOURCE_IO))			continue;		start = dev->resource[idx].start;		end = dev->resource[idx].end;		size = end - start;		if (!size)			continue;		addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);		if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &iomem_resource;		}		if (dev->resource[idx].flags & IORESOURCE_MEM)			cmd |= PCI_COMMAND_MEMORY;	}
unsigned long start, end, addr;
unsigned long start, end, addr;
unsigned long
start
start
end
end
addr
addr
if ((dev->resource[idx].flags & IORESOURCE_IO))			continue;
(dev->resource[idx].flags & IORESOURCE_IO)
dev->resource[idx].flags & IORESOURCE_IO
dev->resource[idx].flags
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
flags
IORESOURCE_IO
IORESOURCE_IO
continue;
start = dev->resource[idx].start;
start = dev->resource[idx].start
start
start
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
end = dev->resource[idx].end;
end = dev->resource[idx].end
end
end
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
size = end - start;
size = end - start
size
size
end - start
end
end
start
start
if (!size)			continue;
!size
size
size
continue;
addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0);
addr = (unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0)
addr
addr
(unsigned long)pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0)
unsigned long
unsigned long

pciio_pio_addr(vhdl, 0,		PCIIO_SPACE_WIN(idx), 0, size,				&device_sysdata->pio_map[idx], 0)
pciio_pio_addr
pciio_pio_addr
vhdl
vhdl
0
PCIIO_SPACE_WIN(idx)
PCIIO_SPACE_WIN
PCIIO_SPACE_WIN
idx
idx
0
size
size
&device_sysdata->pio_map[idx]
device_sysdata->pio_map[idx]
device_sysdata->pio_map
device_sysdata
device_sysdata
pio_map
idx
idx
0
if (!addr) {			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		} else {			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &iomem_resource;		}
!addr
addr
addr
{			dev->resource[idx].start = 0;			dev->resource[idx].end = 0;			printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);		}
dev->resource[idx].start = 0;
dev->resource[idx].start = 0
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
0
dev->resource[idx].end = 0;
dev->resource[idx].end = 0
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
0
printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx);
printk("sn_pci_fixup(): pio map failure for "				"%s bar%d\n", dev->slot_name, idx)
printk
printk
"sn_pci_fixup(): pio map failure for "				"%s bar%d\n"
dev->slot_name
dev
dev
slot_name
idx
idx
{			addr |= __IA64_UNCACHED_OFFSET;			dev->resource[idx].start = addr;			dev->resource[idx].end = addr + size;			dev->resource[idx].parent = &iomem_resource;		}
addr |= __IA64_UNCACHED_OFFSET;
addr |= __IA64_UNCACHED_OFFSET
addr
addr
__IA64_UNCACHED_OFFSET
__IA64_UNCACHED_OFFSET
dev->resource[idx].start = addr;
dev->resource[idx].start = addr
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
addr
addr
dev->resource[idx].end = addr + size;
dev->resource[idx].end = addr + size
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
addr + size
addr
addr
size
size
dev->resource[idx].parent = &iomem_resource;
dev->resource[idx].parent = &iomem_resource
dev->resource[idx].parent
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
parent
&iomem_resource
iomem_resource
iomem_resource
if (dev->resource[idx].flags & IORESOURCE_MEM)			cmd |= PCI_COMMAND_MEMORY;
dev->resource[idx].flags & IORESOURCE_MEM
dev->resource[idx].flags
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
flags
IORESOURCE_MEM
IORESOURCE_MEM
cmd |= PCI_COMMAND_MEMORY;
cmd |= PCI_COMMAND_MEMORY
cmd
cmd
PCI_COMMAND_MEMORY
PCI_COMMAND_MEMORY
if ((dev->class >> 16) == PCI_BASE_CLASS_DISPLAY) {                unsigned long addr;                size = dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start;                if (size) {                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);                        if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }                        addr |= __IA64_UNCACHED_OFFSET;                        dev->resource[PCI_ROM_RESOURCE].start = addr;                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;			dev->resource[idx].parent = &iomem_resource;                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;                }        }
(dev->class >> 16) == PCI_BASE_CLASS_DISPLAY
{                unsigned long addr;                size = dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start;                if (size) {                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);                        if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }                        addr |= __IA64_UNCACHED_OFFSET;                        dev->resource[PCI_ROM_RESOURCE].start = addr;                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;			dev->resource[idx].parent = &iomem_resource;                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;                }        }
unsigned long addr;
unsigned long addr;
unsigned long
addr
addr
size = dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start;
size = dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start
size
size
dev->resource[PCI_ROM_RESOURCE].end -                        dev->resource[PCI_ROM_RESOURCE].start
dev->resource[PCI_ROM_RESOURCE].end
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
end
dev->resource[PCI_ROM_RESOURCE].start
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
start
if (size) {                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);                        if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }                        addr |= __IA64_UNCACHED_OFFSET;                        dev->resource[PCI_ROM_RESOURCE].start = addr;                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;			dev->resource[idx].parent = &iomem_resource;                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;                }
size
size
{                        addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);                        if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }                        addr |= __IA64_UNCACHED_OFFSET;                        dev->resource[PCI_ROM_RESOURCE].start = addr;                        dev->resource[PCI_ROM_RESOURCE].end = addr + size;			dev->resource[idx].parent = &iomem_resource;                        if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;                }
addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED);
addr = (unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED)
addr
addr
(unsigned long) pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED)
unsigned long
unsigned long

pciio_pio_addr(vhdl, 0,					      PCIIO_SPACE_ROM,					      0, size, 0, PIOMAP_FIXED)
pciio_pio_addr
pciio_pio_addr
vhdl
vhdl
0
PCIIO_SPACE_ROM
PCIIO_SPACE_ROM
0
size
size
0
PIOMAP_FIXED
PIOMAP_FIXED
if (!addr) {                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }
!addr
addr
addr
{                                dev->resource[PCI_ROM_RESOURCE].start = 0;                                dev->resource[PCI_ROM_RESOURCE].end = 0;                                printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);                        }
dev->resource[PCI_ROM_RESOURCE].start = 0;
dev->resource[PCI_ROM_RESOURCE].start = 0
dev->resource[PCI_ROM_RESOURCE].start
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
start
0
dev->resource[PCI_ROM_RESOURCE].end = 0;
dev->resource[PCI_ROM_RESOURCE].end = 0
dev->resource[PCI_ROM_RESOURCE].end
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
end
0
printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name);
printk("sn_pci_fixup(): ROM pio map failure "				       "for %s\n", dev->slot_name)
printk
printk
"sn_pci_fixup(): ROM pio map failure "				       "for %s\n"
dev->slot_name
dev
dev
slot_name
addr |= __IA64_UNCACHED_OFFSET;
addr |= __IA64_UNCACHED_OFFSET
addr
addr
__IA64_UNCACHED_OFFSET
__IA64_UNCACHED_OFFSET
dev->resource[PCI_ROM_RESOURCE].start = addr;
dev->resource[PCI_ROM_RESOURCE].start = addr
dev->resource[PCI_ROM_RESOURCE].start
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
start
addr
addr
dev->resource[PCI_ROM_RESOURCE].end = addr + size;
dev->resource[PCI_ROM_RESOURCE].end = addr + size
dev->resource[PCI_ROM_RESOURCE].end
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
end
addr + size
addr
addr
size
size
dev->resource[idx].parent = &iomem_resource;
dev->resource[idx].parent = &iomem_resource
dev->resource[idx].parent
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
parent
&iomem_resource
iomem_resource
iomem_resource
if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)                                cmd |= PCI_COMMAND_MEMORY;
dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM
dev->resource[PCI_ROM_RESOURCE].flags
dev->resource[PCI_ROM_RESOURCE]
dev->resource
dev
dev
resource
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
flags
IORESOURCE_MEM
IORESOURCE_MEM
cmd |= PCI_COMMAND_MEMORY;
cmd |= PCI_COMMAND_MEMORY
cmd
cmd
PCI_COMMAND_MEMORY
PCI_COMMAND_MEMORY
cmd |= PCI_COMMAND_MASTER;
cmd |= PCI_COMMAND_MASTER
cmd
cmd
PCI_COMMAND_MASTER
PCI_COMMAND_MASTER
pci_write_config_word(dev, PCI_COMMAND, cmd);
pci_write_config_word(dev, PCI_COMMAND, cmd)
pci_write_config_word
pci_write_config_word
dev
dev
PCI_COMMAND
PCI_COMMAND
cmd
cmd
pci_read_config_byte(dev, PCI_INTERRUPT_PIN, (unsigned char *)&lines);
pci_read_config_byte(dev, PCI_INTERRUPT_PIN, (unsigned char *)&lines)
pci_read_config_byte
pci_read_config_byte
dev
dev
PCI_INTERRUPT_PIN
PCI_INTERRUPT_PIN
(unsigned char *)&lines
unsigned char *
unsigned char
*
*
&lines
lines
lines
device_vertex = device_sysdata->vhdl;
device_vertex = device_sysdata->vhdl
device_vertex
device_vertex
device_sysdata->vhdl
device_sysdata
device_sysdata
vhdl
pci_provider = device_sysdata->pci_provider;
pci_provider = device_sysdata->pci_provider
pci_provider
pci_provider
device_sysdata->pci_provider
device_sysdata
device_sysdata
pci_provider
device_sysdata->intr_handle = NULL;
device_sysdata->intr_handle = NULL
device_sysdata->intr_handle
device_sysdata
device_sysdata
intr_handle
NULL
NULL
if (!lines)		return 0;
!lines
lines
lines
return 0;
0
irqpdaindr->curr = dev;
irqpdaindr->curr = dev
irqpdaindr->curr
irqpdaindr
irqpdaindr
curr
dev
dev
intr_handle = (pci_provider->intr_alloc)(device_vertex, NULL, lines, device_vertex);
intr_handle = (pci_provider->intr_alloc)(device_vertex, NULL, lines, device_vertex)
intr_handle
intr_handle
(pci_provider->intr_alloc)(device_vertex, NULL, lines, device_vertex)
(pci_provider->intr_alloc)
pci_provider->intr_alloc
pci_provider
pci_provider
intr_alloc
device_vertex
device_vertex
NULL
NULL
lines
lines
device_vertex
device_vertex
if (intr_handle == NULL) {		printk(KERN_WARNING "sn_pci_fixup:  pcibr_intr_alloc() failed\n");		kfree(pci_sysdata);		kfree(device_sysdata);		return -ENOMEM;	}
intr_handle == NULL
intr_handle
intr_handle
NULL
NULL
{		printk(KERN_WARNING "sn_pci_fixup:  pcibr_intr_alloc() failed\n");		kfree(pci_sysdata);		kfree(device_sysdata);		return -ENOMEM;	}
printk(KERN_WARNING "sn_pci_fixup:  pcibr_intr_alloc() failed\n");
kfree(pci_sysdata);
kfree(pci_sysdata)
kfree
kfree
pci_sysdata
pci_sysdata
kfree(device_sysdata);
kfree(device_sysdata)
kfree
kfree
device_sysdata
device_sysdata
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
device_sysdata->intr_handle = intr_handle;
device_sysdata->intr_handle = intr_handle
device_sysdata->intr_handle
device_sysdata
device_sysdata
intr_handle
intr_handle
intr_handle
irq = intr_handle->pi_irq;
irq = intr_handle->pi_irq
irq
irq
intr_handle->pi_irq
intr_handle
intr_handle
pi_irq
irqpdaindr->device_dev[irq] = dev;
irqpdaindr->device_dev[irq] = dev
irqpdaindr->device_dev[irq]
irqpdaindr->device_dev
irqpdaindr
irqpdaindr
device_dev
irq
irq
dev
dev
(pci_provider->intr_connect)(intr_handle, (intr_func_t)0, (intr_arg_t)0);
(pci_provider->intr_connect)(intr_handle, (intr_func_t)0, (intr_arg_t)0)
(pci_provider->intr_connect)
pci_provider->intr_connect
pci_provider
pci_provider
intr_connect
intr_handle
intr_handle
(intr_func_t)0
intr_func_t
intr_func_t
intr_func_t

0
(intr_arg_t)0
intr_arg_t
intr_arg_t
intr_arg_t

0
dev->irq = irq;
dev->irq = irq
dev->irq
dev
dev
irq
irq
irq
register_pcibr_intr(irq, (pcibr_intr_t)intr_handle);
register_pcibr_intr(irq, (pcibr_intr_t)intr_handle)
register_pcibr_intr
register_pcibr_intr
irq
irq
(pcibr_intr_t)intr_handle
pcibr_intr_t
pcibr_intr_t
pcibr_intr_t

intr_handle
intr_handle
for (idx = 0; idx < PCI_ROM_RESOURCE; idx++) {		int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;		int i;		size = dev->resource[idx].end -			dev->resource[idx].start;		if (size == 0) continue;		for (i=0; i<8; i++) {			if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}		}	}
idx = 0;
idx = 0
idx
idx
0
idx < PCI_ROM_RESOURCE
idx
idx
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
idx++
idx
idx
{		int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;		int i;		size = dev->resource[idx].end -			dev->resource[idx].start;		if (size == 0) continue;		for (i=0; i<8; i++) {			if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}		}	}
int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;
int ibits = ((pcibr_intr_t)intr_handle)->bi_ibits;
int
ibits = ((pcibr_intr_t)intr_handle)->bi_ibits
ibits
= ((pcibr_intr_t)intr_handle)->bi_ibits
((pcibr_intr_t)intr_handle)->bi_ibits
((pcibr_intr_t)intr_handle)
(pcibr_intr_t)intr_handle
pcibr_intr_t
pcibr_intr_t
pcibr_intr_t

intr_handle
intr_handle
bi_ibits
int i;
int i;
int
i
i
size = dev->resource[idx].end -			dev->resource[idx].start;
size = dev->resource[idx].end -			dev->resource[idx].start
size
size
dev->resource[idx].end -			dev->resource[idx].start
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
if (size == 0) continue;
size == 0
size
size
0
continue;
for (i=0; i<8; i++) {			if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}		}
i=0;
i=0
i
i
0
i<8
i
i
8
i++
i
i
{			if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}		}
if (ibits & (1 << i) ) {				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}
ibits & (1 << i)
ibits
ibits
(1 << i)
1 << i
1
i
i
{				extern pcibr_info_t pcibr_info_get(vertex_hdl_t);				device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));			}
extern pcibr_info_t pcibr_info_get(vertex_hdl_t);
extern pcibr_info_t pcibr_info_get(vertex_hdl_t);
extern pcibr_info_t
pcibr_info_t
pcibr_info_get(vertex_hdl_t)
pcibr_info_get
(vertex_hdl_t)
vertex_hdl_t
vertex_hdl_t
device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)));
device_sysdata->dma_flush_list =				 sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)))
device_sysdata->dma_flush_list
device_sysdata
device_sysdata
dma_flush_list
sn_dma_flush_init(dev->resource[idx].start,						   dev->resource[idx].end,						   idx,						   i,						   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)))
sn_dma_flush_init
sn_dma_flush_init
dev->resource[idx].start
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
start
dev->resource[idx].end
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
end
idx
idx
i
i
PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl))
PCIBR_INFO_SLOT_GET_EXT
PCIBR_INFO_SLOT_GET_EXT
pcibr_info_get(device_sysdata->vhdl)
pcibr_info_get
pcibr_info_get
device_sysdata->vhdl
device_sysdata
device_sysdata
vhdl
return 0;
0
-----joern-----
(506,378,0)
(595,42,0)
(91,358,0)
(87,11,0)
(488,301,0)
(19,213,0)
(370,10,0)
(588,202,0)
(488,509,0)
(636,297,0)
(424,558,0)
(660,216,0)
(234,541,0)
(154,11,0)
(367,297,0)
(523,176,0)
(373,286,0)
(146,70,0)
(334,11,0)
(318,523,0)
(260,367,0)
(506,479,0)
(501,224,0)
(421,53,0)
(451,152,0)
(111,517,0)
(399,126,0)
(34,417,0)
(305,496,0)
(197,280,0)
(299,11,0)
(597,11,0)
(256,576,0)
(206,496,0)
(325,107,0)
(123,238,0)
(469,73,0)
(213,53,0)
(230,11,0)
(58,129,0)
(70,623,0)
(273,53,0)
(228,603,0)
(319,95,0)
(523,148,0)
(45,189,0)
(488,401,0)
(316,478,0)
(395,51,0)
(552,213,0)
(92,395,0)
(112,199,0)
(74,297,0)
(367,248,0)
(523,316,0)
(347,126,0)
(640,378,0)
(109,35,0)
(572,399,0)
(47,623,0)
(349,315,0)
(314,562,0)
(268,530,0)
(591,398,0)
(279,463,0)
(114,196,0)
(639,234,0)
(255,524,0)
(195,11,0)
(50,66,0)
(85,517,0)
(149,575,0)
(648,281,0)
(551,53,0)
(311,166,0)
(653,363,0)
(80,248,0)
(138,184,0)
(486,386,0)
(332,184,0)
(561,11,0)
(616,467,0)
(471,272,0)
(476,245,0)
(323,453,0)
(139,440,0)
(506,369,0)
(344,660,0)
(398,477,0)
(95,53,0)
(443,460,0)
(366,460,0)
(487,286,0)
(120,51,0)
(195,284,0)
(619,433,0)
(495,460,0)
(443,11,0)
(401,645,0)
(62,38,0)
(527,375,0)
(37,563,0)
(110,341,0)
(135,254,0)
(409,53,0)
(301,208,0)
(9,89,0)
(452,565,0)
(0,410,0)
(494,143,0)
(597,542,0)
(252,53,0)
(230,245,0)
(95,20,0)
(364,243,0)
(661,9,0)
(14,280,0)
(509,517,0)
(435,260,0)
(660,69,0)
(498,517,0)
(362,11,0)
(182,38,0)
(396,395,0)
(453,17,0)
(597,123,0)
(71,53,0)
(530,281,0)
(335,646,0)
(613,623,0)
(418,502,0)
(163,431,0)
(578,238,0)
(261,211,0)
(234,628,0)
(26,20,0)
(244,146,0)
(433,498,0)
(487,76,0)
(659,203,0)
(617,6,0)
(423,367,0)
(636,290,0)
(71,5,0)
(89,9,0)
(234,111,0)
(489,297,0)
(378,120,0)
(660,135,0)
(222,516,0)
(330,636,0)
(458,141,0)
(328,651,0)
(439,561,0)
(113,51,0)
(488,516,0)
(484,520,0)
(20,95,0)
(382,126,0)
(325,65,0)
(17,453,0)
(341,478,0)
(59,611,0)
(186,624,0)
(602,242,0)
(12,259,0)
(500,226,0)
(411,517,0)
(630,103,0)
(107,325,0)
(310,605,0)
(478,477,0)
(506,363,0)
(202,518,0)
(158,11,0)
(397,483,0)
(284,482,0)
(522,11,0)
(271,158,0)
(466,412,0)
(453,517,0)
(322,368,0)
(506,659,0)
(492,554,0)
(530,268,0)
(400,195,0)
(202,93,0)
(21,478,0)
(570,186,0)
(424,225,0)
(628,69,0)
(603,440,0)
(243,364,0)
(339,575,0)
(38,143,0)
(392,53,0)
(70,404,0)
(531,498,0)
(139,211,0)
(278,573,0)
(19,33,0)
(216,167,0)
(86,11,0)
(85,533,0)
(365,498,0)
(488,369,0)
(624,186,0)
(23,77,0)
(231,243,0)
(510,152,0)
(145,334,0)
(78,551,0)
(300,606,0)
(473,542,0)
(470,571,0)
(516,352,0)
(426,297,0)
(170,252,0)
(359,605,0)
(248,367,0)
(571,53,0)
(185,151,0)
(306,273,0)
(454,158,0)
(98,563,0)
(511,41,0)
(258,108,0)
(333,435,0)
(361,11,0)
(199,336,0)
(607,576,0)
(610,75,0)
(496,206,0)
(623,11,0)
(354,11,0)
(562,647,0)
(371,624,0)
(602,245,0)
(192,392,0)
(194,71,0)
(215,648,0)
(585,126,0)
(381,479,0)
(234,211,0)
(488,541,0)
(239,517,0)
(637,558,0)
(599,545,0)
(187,659,0)
(604,394,0)
(652,11,0)
(419,85,0)
(504,184,0)
(93,202,0)
(406,315,0)
(220,47,0)
(521,271,0)
(177,148,0)
(152,173,0)
(488,483,0)
(481,440,0)
(304,184,0)
(72,126,0)
(582,184,0)
(157,545,0)
(105,6,0)
(238,623,0)
(341,208,0)
(209,370,0)
(127,71,0)
(542,597,0)
(83,196,0)
(548,636,0)
(651,477,0)
(173,232,0)
(599,39,0)
(24,659,0)
(375,443,0)
(176,523,0)
(643,51,0)
(617,53,0)
(556,618,0)
(472,50,0)
(90,195,0)
(427,505,0)
(606,368,0)
(488,272,0)
(226,10,0)
(223,411,0)
(340,491,0)
(645,440,0)
(530,208,0)
(506,272,0)
(206,421,0)
(206,297,0)
(229,161,0)
(219,516,0)
(378,563,0)
(357,487,0)
(274,39,0)
(375,489,0)
(549,11,0)
(277,394,0)
(275,478,0)
(41,564,0)
(172,536,0)
(488,628,0)
(375,171,0)
(393,103,0)
(28,459,0)
(285,546,0)
(654,492,0)
(184,443,0)
(139,520,0)
(234,483,0)
(525,368,0)
(434,359,0)
(116,511,0)
(438,662,0)
(49,137,0)
(263,285,0)
(141,11,0)
(322,120,0)
(309,652,0)
(341,370,0)
(170,341,0)
(119,151,0)
(38,517,0)
(481,409,0)
(93,444,0)
(460,517,0)
(641,97,0)
(661,11,0)
(516,219,0)
(285,440,0)
(81,654,0)
(478,148,0)
(329,594,0)
(203,11,0)
(506,301,0)
(450,93,0)
(524,255,0)
(171,126,0)
(536,76,0)
(506,487,0)
(598,375,0)
(551,219,0)
(420,47,0)
(52,398,0)
(321,481,0)
(492,654,0)
(558,424,0)
(211,139,0)
(411,242,0)
(513,409,0)
(656,11,0)
(433,619,0)
(248,53,0)
(374,316,0)
(390,67,0)
(491,5,0)
(234,50,0)
(287,11,0)
(541,230,0)
(153,392,0)
(171,77,0)
(558,65,0)
(496,208,0)
(489,375,0)
(211,370,0)
(498,433,0)
(271,517,0)
(296,11,0)
(249,157,0)
(614,83,0)
(308,557,0)
(294,575,0)
(83,53,0)
(507,115,0)
(608,386,0)
(520,53,0)
(410,606,0)
(234,492,0)
(55,315,0)
(225,424,0)
(460,247,0)
(232,30,0)
(143,38,0)
(241,524,0)
(530,358,0)
(232,173,0)
(408,132,0)
(141,53,0)
(195,482,0)
(394,53,0)
(620,171,0)
(592,524,0)
(479,135,0)
(312,167,0)
(234,363,0)
(594,166,0)
(519,401,0)
(657,329,0)
(224,146,0)
(563,378,0)
(394,308,0)
(454,287,0)
(264,447,0)
(16,636,0)
(345,287,0)
(16,53,0)
(506,50,0)
(575,53,0)
(117,75,0)
(118,89,0)
(336,273,0)
(408,103,0)
(346,571,0)
(648,425,0)
(412,506,0)
(56,435,0)
(152,254,0)
(488,479,0)
(575,11,0)
(184,425,0)
(65,379,0)
(583,573,0)
(480,408,0)
(460,443,0)
(369,358,0)
(509,652,0)
(315,53,0)
(545,557,0)
(91,370,0)
(636,16,0)
(370,226,0)
(282,213,0)
(268,440,0)
(381,22,0)
(506,483,0)
(375,494,0)
(20,148,0)
(356,11,0)
(18,141,0)
(502,53,0)
(502,645,0)
(142,454,0)
(315,349,0)
(571,470,0)
(488,410,0)
(628,349,0)
(395,92,0)
(41,280,0)
(470,369,0)
(624,297,0)
(498,247,0)
(112,53,0)
(428,421,0)
(517,453,0)
(137,171,0)
(272,65,0)
(482,482,0)
(644,421,0)
(341,463,0)
(298,280,0)
(537,647,0)
(606,51,0)
(201,226,0)
(30,232,0)
(40,245,0)
(464,364,0)
(316,69,0)
(263,53,0)
(379,226,0)
(463,290,0)
(299,517,0)
(638,409,0)
(435,56,0)
(184,582,0)
(218,53,0)
(421,206,0)
(355,276,0)
(546,662,0)
(115,477,0)
(66,67,0)
(295,654,0)
(504,461,0)
(103,53,0)
(386,443,0)
(445,268,0)
(512,199,0)
(251,299,0)
(331,126,0)
(488,487,0)
(73,469,0)
(605,53,0)
(102,440,0)
(380,358,0)
(176,53,0)
(213,19,0)
(388,602,0)
(405,123,0)
(444,129,0)
(379,65,0)
(2,379,0)
(612,115,0)
(214,9,0)
(403,11,0)
(221,571,0)
(285,263,0)
(245,11,0)
(635,252,0)
(584,238,0)
(557,545,0)
(235,425,0)
(232,375,0)
(157,334,0)
(541,53,0)
(648,107,0)
(470,440,0)
(219,440,0)
(580,184,0)
(291,509,0)
(506,624,0)
(536,53,0)
(76,536,0)
(234,560,0)
(359,434,0)
(462,491,0)
(553,517,0)
(468,345,0)
(129,444,0)
(385,322,0)
(567,297,0)
(534,83,0)
(311,245,0)
(488,363,0)
(368,395,0)
(410,459,0)
(506,509,0)
(325,69,0)
(569,98,0)
(313,96,0)
(529,461,0)
(25,529,0)
(106,554,0)
(324,280,0)
(625,11,0)
(417,517,0)
(203,53,0)
(391,57,0)
(645,401,0)
(234,301,0)
(226,41,0)
(70,146,0)
(530,370,0)
(260,435,0)
(173,126,0)
(497,224,0)
(91,208,0)
(162,17,0)
(82,467,0)
(36,126,0)
(238,123,0)
(91,463,0)
(54,518,0)
(6,617,0)
(39,599,0)
(481,50,0)
(181,454,0)
(539,509,0)
(216,660,0)
(183,549,0)
(123,11,0)
(589,325,0)
(218,459,0)
(506,211,0)
(22,381,0)
(442,147,0)
(538,5,0)
(160,661,0)
(549,123,0)
(151,171,0)
(5,491,0)
(131,287,0)
(565,173,0)
(518,53,0)
(196,297,0)
(558,69,0)
(240,477,0)
(208,254,0)
(618,482,0)
(642,158,0)
(167,53,0)
(554,11,0)
(6,91,0)
(199,112,0)
(530,463,0)
(246,203,0)
(469,53,0)
(234,432,0)
(3,429,0)
(293,147,0)
(448,607,0)
(467,440,0)
(558,135,0)
(563,98,0)
(369,470,0)
(316,135,0)
(247,336,0)
(533,8,0)
(234,487,0)
(331,496,0)
(387,11,0)
(4,368,0)
(444,254,0)
(478,533,0)
(341,170,0)
(43,454,0)
(91,424,0)
(515,308,0)
(384,432,0)
(20,558,0)
(561,59,0)
(559,369,0)
(461,529,0)
(188,553,0)
(368,51,0)
(535,359,0)
(234,378,0)
(159,184,0)
(483,245,0)
(485,74,0)
(84,95,0)
(342,186,0)
(557,308,0)
(227,170,0)
(134,469,0)
(386,157,0)
(307,173,0)
(647,243,0)
(506,93,0)
(540,206,0)
(506,628,0)
(576,607,0)
(555,112,0)
(273,336,0)
(143,297,0)
(379,425,0)
(432,549,0)
(180,252,0)
(490,76,0)
(508,234,0)
(550,11,0)
(629,628,0)
(57,225,0)
(243,297,0)
(317,148,0)
(130,255,0)
(68,529,0)
(69,290,0)
(167,216,0)
(262,546,0)
(146,224,0)
(352,431,0)
(234,516,0)
(161,45,0)
(179,126,0)
(649,386,0)
(96,425,0)
(168,75,0)
(243,647,0)
(488,378,0)
(564,303,0)
(292,363,0)
(191,392,0)
(437,536,0)
(573,297,0)
(593,11,0)
(363,247,0)
(545,599,0)
(363,517,0)
(564,41,0)
(77,399,0)
(91,6,0)
(619,478,0)
(59,561,0)
(596,482,0)
(645,502,0)
(577,648,0)
(270,281,0)
(475,408,0)
(63,605,0)
(517,11,0)
(478,619,0)
(425,280,0)
(267,11,0)
(501,115,0)
(349,297,0)
(77,171,0)
(316,276,0)
(122,16,0)
(234,369,0)
(336,247,0)
(424,91,0)
(399,660,0)
(217,386,0)
(233,73,0)
(341,358,0)
(140,11,0)
(155,230,0)
(6,148,0)
(633,41,0)
(234,509,0)
(646,39,0)
(17,162,0)
(316,65,0)
(544,477,0)
(165,483,0)
(349,628,0)
(327,443,0)
(575,149,0)
(219,551,0)
(198,153,0)
(632,375,0)
(153,440,0)
(492,123,0)
(662,546,0)
(646,53,0)
(381,297,0)
(561,623,0)
(639,506,0)
(605,359,0)
(350,417,0)
(459,218,0)
(234,85,0)
(153,272,0)
(505,434,0)
(101,77,0)
(634,22,0)
(13,285,0)
(568,11,0)
(284,284,0)
(89,287,0)
(590,661,0)
(156,597,0)
(67,66,0)
(546,285,0)
(488,211,0)
(88,263,0)
(234,11,0)
(574,112,0)
(133,85,0)
(125,284,0)
(234,410,0)
(108,11,0)
(622,518,0)
(195,618,0)
(375,232,0)
(434,505,0)
(247,11,0)
(190,553,0)
(147,148,0)
(417,350,0)
(478,316,0)
(445,53,0)
(301,196,0)
(558,276,0)
(124,386,0)
(436,219,0)
(135,151,0)
(377,492,0)
(108,553,0)
(367,260,0)
(417,362,0)
(407,107,0)
(343,248,0)
(234,401,0)
(325,276,0)
(31,445,0)
(415,92,0)
(208,152,0)
(234,659,0)
(558,20,0)
(518,202,0)
(441,311,0)
(446,33,0)
(392,153,0)
(245,40,0)
(506,516,0)
(351,141,0)
(164,646,0)
(514,613,0)
(483,362,0)
(404,70,0)
(66,10,0)
(429,395,0)
(586,375,0)
(286,601,0)
(175,479,0)
(352,51,0)
(151,152,0)
(478,341,0)
(111,613,0)
(461,440,0)
(253,623,0)
(337,434,0)
(488,50,0)
(224,75,0)
(9,661,0)
(35,245,0)
(64,111,0)
(115,501,0)
(320,218,0)
(408,440,0)
(454,623,0)
(281,280,0)
(456,176,0)
(322,157,0)
(196,301,0)
(488,93,0)
(200,259,0)
(566,11,0)
(545,157,0)
(494,375,0)
(265,11,0)
(506,242,0)
(170,148,0)
(647,562,0)
(506,33,0)
(479,381,0)
(151,135,0)
(276,132,0)
(7,149,0)
(103,408,0)
(73,440,0)
(255,601,0)
(169,470,0)
(607,53,0)
(372,167,0)
(174,98,0)
(416,488,0)
(639,488,0)
(19,297,0)
(325,73,0)
(506,560,0)
(554,53,0)
(401,276,0)
(204,69,0)
(210,218,0)
(496,463,0)
(496,331,0)
(360,440,0)
(524,53,0)
(528,239,0)
(325,135,0)
(553,108,0)
(22,53,0)
(422,582,0)
(196,83,0)
(100,541,0)
(364,53,0)
(532,8,0)
(269,148,0)
(39,646,0)
(42,126,0)
(650,57,0)
(459,410,0)
(202,297,0)
(376,16,0)
(225,75,0)
(283,517,0)
(542,338,0)
(587,432,0)
(413,557,0)
(624,42,0)
(236,280,0)
(449,375,0)
(488,624,0)
(44,263,0)
(386,92,0)
(61,617,0)
(474,111,0)
(609,617,0)
(639,594,0)
(621,489,0)
(431,352,0)
(447,601,0)
(543,59,0)
(234,624,0)
(308,394,0)
(618,284,0)
(237,268,0)
(623,454,0)
(184,504,0)
(92,386,0)
(520,139,0)
(302,482,0)
(564,184,0)
(33,463,0)
(136,379,0)
(104,143,0)
(272,153,0)
(338,542,0)
(5,71,0)
(491,340,0)
(29,349,0)
(234,479,0)
(33,19,0)
(303,564,0)
(503,334,0)
(383,271,0)
(461,504,0)
(158,271,0)
(576,560,0)
(121,70,0)
(266,364,0)
(600,139,0)
(141,195,0)
(506,401,0)
(9,214,0)
(257,287,0)
(234,272,0)
(5,440,0)
(402,461,0)
(631,645,0)
(661,53,0)
(32,386,0)
(579,280,0)
(362,417,0)
(120,322,0)
(529,517,0)
(488,33,0)
(389,280,0)
(143,42,0)
(107,280,0)
(542,623,0)
(461,42,0)
(234,33,0)
(358,132,0)
(271,247,0)
(289,22,0)
(533,478,0)
(409,481,0)
(193,340,0)
(660,399,0)
(615,75,0)
(611,59,0)
(281,530,0)
(143,494,0)
(186,517,0)
(128,445,0)
(92,415,0)
(425,648,0)
(326,91,0)
(234,93,0)
(493,322,0)
(560,576,0)
(658,541,0)
(639,45,0)
(73,325,0)
(27,501,0)
(560,447,0)
(581,469,0)
(259,200,0)
(432,53,0)
(414,551,0)
(65,10,0)
(488,560,0)
(259,561,0)
(526,331,0)
(144,386,0)
(207,284,0)
(288,176,0)
(561,259,0)
(336,199,0)
(613,11,0)
(268,445,0)
(15,216,0)
(252,170,0)
(353,599,0)
(46,520,0)
(216,297,0)
(506,541,0)
(184,564,0)
(1,607,0)
(348,381,0)
(582,440,0)
(50,481,0)
(465,502,0)
(455,260,0)
(178,225,0)
(212,273,0)
(547,177,0)
(499,19,0)
(98,53,0)
(77,331,0)
(150,208,0)
(457,301,0)
(250,454,0)
(627,618,0)
(79,560,0)
(316,523,0)
(506,410,0)
(76,487,0)
(94,530,0)
(655,126,0)
(564,184,1)
(613,514,1)
(4,255,1)
(433,498,1)
(563,37,1)
(649,396,1)
(291,108,1)
(378,640,1)
(359,535,1)
(439,554,1)
(355,401,1)
(496,305,1)
(322,493,1)
(375,449,1)
(628,629,1)
(506,516,1)
(335,557,1)
(4,429,1)
(608,649,1)
(538,71,1)
(628,349,1)
(658,362,1)
(167,372,1)
(364,53,1)
(639,594,1)
(22,289,1)
(233,469,1)
(445,53,1)
(239,517,1)
(159,633,1)
(572,331,1)
(19,499,1)
(612,27,1)
(250,43,1)
(341,358,1)
(152,510,1)
(268,445,1)
(602,388,1)
(106,492,1)
(562,647,1)
(352,431,1)
(348,22,1)
(646,53,1)
(528,517,1)
(506,401,1)
(343,42,1)
(561,623,1)
(20,95,1)
(542,623,1)
(151,119,1)
(516,219,1)
(616,82,1)
(417,350,1)
(488,211,1)
(547,398,1)
(211,139,1)
(206,421,1)
(506,211,1)
(295,123,1)
(586,598,1)
(190,258,1)
(558,69,1)
(379,226,1)
(99,96,1)
(158,271,1)
(316,69,1)
(371,186,1)
(177,547,1)
(470,440,1)
(228,284,1)
(129,58,1)
(639,488,1)
(457,196,1)
(183,432,1)
(149,7,1)
(240,544,1)
(243,364,1)
(488,624,1)
(115,477,1)
(488,301,1)
(561,59,1)
(488,33,1)
(34,483,1)
(328,501,1)
(554,53,1)
(515,394,1)
(618,284,1)
(518,53,1)
(139,440,1)
(316,65,1)
(9,89,1)
(461,529,1)
(329,657,1)
(46,484,1)
(480,103,1)
(530,358,1)
(32,486,1)
(341,170,1)
(597,542,1)
(443,460,1)
(448,1,1)
(76,536,1)
(607,53,1)
(660,344,1)
(478,477,1)
(520,46,1)
(624,297,1)
(410,459,1)
(495,327,1)
(234,111,1)
(234,628,1)
(606,300,1)
(487,357,1)
(459,218,1)
(488,369,1)
(302,596,1)
(301,457,1)
(533,478,1)
(575,149,1)
(219,436,1)
(237,445,1)
(345,468,1)
(662,546,1)
(446,19,1)
(639,45,1)
(85,133,1)
(513,638,1)
(444,129,1)
(300,410,1)
(239,528,1)
(535,605,1)
(297,426,1)
(40,476,1)
(647,243,1)
(587,384,1)
(58,93,1)
(546,262,1)
(648,281,1)
(325,73,1)
(283,35,1)
(274,646,1)
(326,6,1)
(342,570,1)
(76,490,1)
(59,543,1)
(271,383,1)
(42,595,1)
(336,199,1)
(7,339,1)
(196,83,1)
(209,211,1)
(146,70,1)
(223,602,1)
(91,326,1)
(273,212,1)
(642,661,1)
(293,148,1)
(644,526,1)
(284,284,1)
(408,103,1)
(510,451,1)
(170,227,1)
(234,369,1)
(133,419,1)
(488,410,1)
(13,263,1)
(460,247,1)
(234,487,1)
(202,588,1)
(234,541,1)
(119,185,1)
(549,123,1)
(492,654,1)
(390,50,1)
(651,328,1)
(488,516,1)
(234,624,1)
(337,359,1)
(293,177,1)
(328,533,1)
(246,659,1)
(506,93,1)
(195,284,1)
(557,308,1)
(542,338,1)
(122,376,1)
(161,229,1)
(485,60,1)
(498,531,1)
(263,88,1)
(424,558,1)
(639,234,1)
(92,386,1)
(155,541,1)
(375,489,1)
(112,53,1)
(63,310,1)
(18,351,1)
(279,33,1)
(401,519,1)
(500,201,1)
(506,628,1)
(560,576,1)
(440,360,1)
(211,261,1)
(59,611,1)
(304,504,1)
(451,565,1)
(561,259,1)
(196,297,1)
(341,110,1)
(325,65,1)
(400,618,1)
(660,69,1)
(512,112,1)
(219,440,1)
(325,589,1)
(573,583,1)
(609,61,1)
(637,20,1)
(567,443,1)
(167,53,1)
(91,208,1)
(492,377,1)
(307,137,1)
(292,239,1)
(234,560,1)
(525,4,1)
(648,215,1)
(152,173,1)
(143,104,1)
(160,590,1)
(523,148,1)
(558,135,1)
(428,644,1)
(409,513,1)
(399,660,1)
(491,462,1)
(153,440,1)
(195,90,1)
(346,511,1)
(222,219,1)
(344,216,1)
(225,424,1)
(459,28,1)
(173,232,1)
(509,539,1)
(492,123,1)
(84,319,1)
(47,420,1)
(437,447,1)
(266,464,1)
(139,600,1)
(73,440,1)
(499,213,1)
(416,345,1)
(64,47,1)
(318,176,1)
(645,440,1)
(316,523,1)
(103,53,1)
(139,520,1)
(368,395,1)
(469,53,1)
(634,208,1)
(37,98,1)
(413,308,1)
(268,440,1)
(238,623,1)
(284,482,1)
(210,320,1)
(305,206,1)
(571,221,1)
(105,617,1)
(650,225,1)
(422,138,1)
(313,425,1)
(184,582,1)
(545,557,1)
(38,182,1)
(234,93,1)
(5,538,1)
(555,363,1)
(235,107,1)
(234,432,1)
(206,540,1)
(398,477,1)
(474,64,1)
(549,183,1)
(309,509,1)
(436,551,1)
(234,479,1)
(89,118,1)
(603,228,1)
(255,524,1)
(83,53,1)
(170,252,1)
(582,422,1)
(357,76,1)
(435,333,1)
(576,256,1)
(582,440,1)
(157,545,1)
(488,93,1)
(195,482,1)
(506,363,1)
(483,245,1)
(27,398,1)
(455,367,1)
(426,567,1)
(631,502,1)
(49,171,1)
(306,199,1)
(520,53,1)
(542,473,1)
(529,25,1)
(226,41,1)
(373,487,1)
(372,312,1)
(654,81,1)
(0,459,1)
(288,341,1)
(454,287,1)
(28,218,1)
(276,355,1)
(120,322,1)
(243,231,1)
(269,597,1)
(231,364,1)
(488,401,1)
(204,628,1)
(420,220,1)
(501,115,1)
(234,483,1)
(557,413,1)
(216,167,1)
(639,506,1)
(272,471,1)
(394,53,1)
(383,521,1)
(598,489,1)
(315,53,1)
(462,5,1)
(82,603,1)
(91,370,1)
(95,53,1)
(143,297,1)
(227,252,1)
(613,623,1)
(150,301,1)
(287,257,1)
(39,646,1)
(508,147,1)
(35,109,1)
(621,632,1)
(325,135,1)
(602,245,1)
(506,272,1)
(657,311,1)
(453,323,1)
(111,474,1)
(548,16,1)
(220,623,1)
(441,239,1)
(61,558,1)
(367,297,1)
(374,523,1)
(529,517,1)
(521,642,1)
(6,617,1)
(259,12,1)
(202,297,1)
(226,500,1)
(228,48,1)
(400,626,1)
(605,63,1)
(228,99,1)
(511,41,1)
(481,440,1)
(156,549,1)
(478,148,1)
(450,202,1)
(496,463,1)
(252,180,1)
(70,404,1)
(558,65,1)
(24,345,1)
(143,38,1)
(341,370,1)
(482,482,1)
(477,240,1)
(385,378,1)
(325,276,1)
(394,604,1)
(234,508,1)
(94,268,1)
(215,577,1)
(485,482,1)
(435,260,1)
(21,316,1)
(590,141,1)
(91,358,1)
(151,152,1)
(41,564,1)
(351,195,1)
(194,467,1)
(208,152,1)
(311,245,1)
(427,434,1)
(378,563,1)
(151,171,1)
(479,381,1)
(92,415,1)
(367,248,1)
(659,187,1)
(98,569,1)
(384,561,1)
(71,53,1)
(234,659,1)
(327,575,1)
(408,480,1)
(314,647,1)
(432,587,1)
(573,297,1)
(541,53,1)
(234,301,1)
(25,68,1)
(71,127,1)
(606,368,1)
(539,291,1)
(600,520,1)
(234,33,1)
(386,443,1)
(253,203,1)
(125,207,1)
(96,313,1)
(624,371,1)
(165,247,1)
(299,517,1)
(20,148,1)
(423,248,1)
(308,515,1)
(496,206,1)
(605,53,1)
(501,224,1)
(396,626,1)
(264,560,1)
(48,340,1)
(219,551,1)
(98,53,1)
(458,18,1)
(620,399,1)
(397,165,1)
(44,66,1)
(164,335,1)
(118,160,1)
(647,537,1)
(199,512,1)
(488,378,1)
(464,636,1)
(277,249,1)
(564,303,1)
(460,517,1)
(148,317,1)
(206,297,1)
(406,55,1)
(79,576,1)
(70,623,1)
(470,169,1)
(617,53,1)
(481,409,1)
(661,9,1)
(234,516,1)
(251,230,1)
(135,151,1)
(556,627,1)
(563,98,1)
(519,645,1)
(484,226,1)
(379,425,1)
(472,481,1)
(191,370,1)
(16,122,1)
(261,139,1)
(232,30,1)
(408,440,1)
(127,194,1)
(294,299,1)
(52,651,1)
(370,209,1)
(511,116,1)
(80,343,1)
(180,635,1)
(243,297,1)
(622,54,1)
(142,253,1)
(362,417,1)
(101,23,1)
(341,463,1)
(74,297,1)
(543,439,1)
(244,70,1)
(322,157,1)
(186,342,1)
(545,599,1)
(447,264,1)
(595,624,1)
(489,297,1)
(469,134,1)
(554,106,1)
(363,517,1)
(506,624,1)
(498,247,1)
(494,143,1)
(569,174,1)
(488,487,1)
(116,41,1)
(490,536,1)
(517,453,1)
(260,455,1)
(536,172,1)
(414,78,1)
(340,193,1)
(285,263,1)
(375,443,1)
(16,53,1)
(281,530,1)
(506,487,1)
(651,477,1)
(544,57,1)
(112,574,1)
(465,418,1)
(505,434,1)
(623,454,1)
(425,648,1)
(369,559,1)
(65,379,1)
(551,414,1)
(570,573,1)
(260,367,1)
(128,31,1)
(506,369,1)
(364,266,1)
(52,477,1)
(67,390,1)
(409,53,1)
(181,142,1)
(496,208,1)
(78,120,1)
(617,609,1)
(506,301,1)
(636,548,1)
(349,297,1)
(553,517,1)
(410,0,1)
(54,135,1)
(419,501,1)
(44,408,1)
(395,92,1)
(83,614,1)
(26,95,1)
(558,637,1)
(619,433,1)
(60,137,1)
(594,329,1)
(581,407,1)
(130,286,1)
(19,213,1)
(558,20,1)
(234,492,1)
(6,105,1)
(523,318,1)
(141,458,1)
(213,53,1)
(317,269,1)
(411,223,1)
(234,50,1)
(633,96,1)
(640,563,1)
(278,74,1)
(187,24,1)
(603,440,1)
(333,260,1)
(73,233,1)
(509,517,1)
(452,173,1)
(221,346,1)
(626,157,1)
(341,208,1)
(138,159,1)
(534,152,1)
(259,200,1)
(50,472,1)
(340,491,1)
(12,59,1)
(506,378,1)
(453,17,1)
(177,148,1)
(349,29,1)
(93,202,1)
(524,53,1)
(271,517,1)
(479,175,1)
(100,658,1)
(412,466,1)
(96,425,1)
(104,38,1)
(182,62,1)
(230,155,1)
(285,440,1)
(174,606,1)
(438,546,1)
(203,53,1)
(188,190,1)
(111,517,1)
(463,279,1)
(536,53,1)
(234,363,1)
(488,272,1)
(506,412,1)
(234,509,1)
(216,15,1)
(541,100,1)
(537,243,1)
(506,659,1)
(62,586,1)
(234,410,1)
(339,294,1)
(192,191,1)
(278,297,1)
(91,6,1)
(434,337,1)
(497,147,1)
(35,245,1)
(467,440,1)
(193,491,1)
(319,178,1)
(599,353,1)
(147,148,1)
(137,171,1)
(662,438,1)
(89,287,1)
(216,297,1)
(141,53,1)
(31,270,1)
(184,504,1)
(325,69,1)
(330,69,1)
(185,479,1)
(137,49,1)
(163,516,1)
(169,571,1)
(540,421,1)
(102,573,1)
(488,509,1)
(217,144,1)
(391,650,1)
(482,302,1)
(417,517,1)
(33,446,1)
(205,57,1)
(141,195,1)
(186,517,1)
(618,556,1)
(632,527,1)
(1,429,1)
(275,21,1)
(660,216,1)
(429,395,1)
(405,613,1)
(577,235,1)
(627,505,1)
(22,53,1)
(449,494,1)
(429,3,1)
(203,246,1)
(232,375,1)
(546,285,1)
(481,321,1)
(629,349,1)
(176,456,1)
(434,359,1)
(47,623,1)
(56,435,1)
(311,441,1)
(488,479,1)
(488,628,1)
(316,135,1)
(530,94,1)
(196,114,1)
(77,331,1)
(431,163,1)
(367,423,1)
(5,71,1)
(336,273,1)
(263,53,1)
(471,153,1)
(624,186,1)
(475,276,1)
(565,173,1)
(271,247,1)
(17,283,1)
(506,483,1)
(321,409,1)
(523,176,1)
(596,562,1)
(15,167,1)
(392,53,1)
(248,80,1)
(530,370,1)
(124,217,1)
(418,358,1)
(199,112,1)
(90,400,1)
(421,428,1)
(645,631,1)
(454,250,1)
(234,85,1)
(213,282,1)
(636,297,1)
(571,53,1)
(114,83,1)
(476,287,1)
(468,652,1)
(282,552,1)
(401,645,1)
(560,79,1)
(584,405,1)
(289,634,1)
(38,517,1)
(645,502,1)
(504,461,1)
(332,582,1)
(121,497,1)
(345,287,1)
(578,584,1)
(109,245,1)
(248,53,1)
(379,2,1)
(551,53,1)
(17,162,1)
(375,494,1)
(456,288,1)
(108,553,1)
(488,483,1)
(9,214,1)
(460,366,1)
(461,402,1)
(123,238,1)
(234,272,1)
(652,309,1)
(245,40,1)
(69,204,1)
(583,278,1)
(315,406,1)
(574,555,1)
(506,479,1)
(461,440,1)
(466,411,1)
(153,198,1)
(144,608,1)
(257,131,1)
(375,171,1)
(136,272,1)
(316,276,1)
(68,580,1)
(359,605,1)
(486,124,1)
(320,368,1)
(201,511,1)
(207,662,1)
(552,565,1)
(256,607,1)
(153,392,1)
(478,619,1)
(488,541,1)
(198,392,1)
(308,394,1)
(485,430,1)
(212,306,1)
(134,581,1)
(516,222,1)
(353,39,1)
(74,485,1)
(381,348,1)
(77,101,1)
(310,352,1)
(575,53,1)
(599,39,1)
(498,517,1)
(502,53,1)
(73,469,1)
(95,84,1)
(488,560,1)
(488,50,1)
(421,53,1)
(85,517,1)
(547,205,1)
(400,505,1)
(299,251,1)
(386,32,1)
(184,304,1)
(23,620,1)
(218,210,1)
(646,164,1)
(55,463,1)
(506,410,1)
(218,53,1)
(597,123,1)
(5,440,1)
(524,592,1)
(249,467,1)
(230,245,1)
(323,17,1)
(526,56,1)
(506,541,1)
(502,465,1)
(208,150,1)
(638,65,1)
(518,622,1)
(558,276,1)
(487,76,1)
(19,297,1)
(507,612,1)
(369,470,1)
(580,332,1)
(398,591,1)
(388,47,1)
(81,295,1)
(184,443,1)
(363,653,1)
(417,34,1)
(559,470,1)
(485,562,1)
(491,5,1)
(530,463,1)
(229,35,1)
(45,161,1)
(381,22,1)
(39,274,1)
(392,192,1)
(57,225,1)
(349,315,1)
(588,518,1)
(93,450,1)
(636,16,1)
(331,496,1)
(91,463,1)
(270,340,1)
(224,146,1)
(630,475,1)
(591,52,1)
(506,560,1)
(286,373,1)
(358,380,1)
(464,444,1)
(635,85,1)
(238,578,1)
(470,571,1)
(589,73,1)
(268,237,1)
(234,378,1)
(478,316,1)
(411,517,1)
(393,630,1)
(660,135,1)
(247,336,1)
(531,365,1)
(316,374,1)
(530,208,1)
(147,442,1)
(604,277,1)
(3,395,1)
(488,416,1)
(272,153,1)
(171,77,1)
(370,226,1)
(366,495,1)
(143,42,1)
(514,111,1)
(376,330,1)
(234,211,1)
(493,385,1)
(562,314,1)
(553,188,1)
(195,618,1)
(115,507,1)
(241,130,1)
(33,19,1)
(170,148,1)
(430,56,1)
(467,616,1)
(461,42,1)
(386,157,1)
(614,534,1)
(178,224,1)
(107,325,1)
(527,307,1)
(407,281,1)
(505,427,1)
(473,156,1)
(50,481,1)
(322,368,1)
(258,158,1)
(184,425,1)
(402,529,1)
(146,244,1)
(506,50,1)
(360,102,1)
(648,107,1)
(506,33,1)
(424,91,1)
(445,128,1)
(20,26,1)
(368,525,1)
(661,53,1)
(365,275,1)
(77,399,1)
(29,315,1)
(66,67,1)
(432,53,1)
(273,53,1)
(2,136,1)
(565,452,1)
(70,121,1)
(478,341,1)
(381,297,1)
(301,196,1)
(252,53,1)
(172,437,1)
(6,148,1)
(57,391,1)
(576,607,1)
(82,440,1)
(506,509,1)
(530,268,1)
(285,13,1)
(228,662,1)
(592,241,1)
(176,53,1)
(489,621,1)
(110,170,1)
(262,285,1)
(103,393,1)
(380,369,1)
(234,401,1)
(284,125,1)
(442,293,1)
(377,654,1)
(618,482,1)
(312,572,1)
(88,44,1)
(653,292,1)
(202,518,1)
(483,397,1)
(454,158,1)
(488,363,1)
(43,181,1)
(607,448,1)
(175,381,1)
(506,541,2)
(425,340,2)
(459,626,2)
(375,171,2)
(394,239,2)
(506,363,2)
(196,83,2)
(5,71,2)
(388,47,2)
(186,517,2)
(204,565,2)
(434,359,2)
(451,565,2)
(234,624,2)
(657,239,2)
(542,623,2)
(493,626,2)
(530,208,2)
(341,463,2)
(138,96,2)
(441,239,2)
(538,467,2)
(115,477,2)
(420,345,2)
(256,429,2)
(506,509,2)
(322,157,2)
(582,440,2)
(33,19,2)
(234,50,2)
(575,149,2)
(2,511,2)
(248,573,2)
(329,239,2)
(171,56,2)
(445,340,2)
(424,558,2)
(88,96,2)
(506,410,2)
(234,111,2)
(285,96,2)
(560,429,2)
(516,626,2)
(6,147,2)
(160,239,2)
(349,565,2)
(76,536,2)
(167,56,2)
(521,239,2)
(401,645,2)
(599,239,2)
(537,137,2)
(467,440,2)
(141,53,2)
(554,53,2)
(77,56,2)
(372,56,2)
(152,173,2)
(73,440,2)
(142,345,2)
(325,340,2)
(543,47,2)
(624,297,2)
(157,239,2)
(336,199,2)
(297,239,2)
(523,176,2)
(571,53,2)
(445,53,2)
(96,425,2)
(386,443,2)
(306,239,2)
(171,77,2)
(429,626,2)
(211,511,2)
(599,39,2)
(299,517,2)
(399,56,2)
(371,573,2)
(319,147,2)
(161,35,2)
(151,152,2)
(594,239,2)
(659,345,2)
(396,626,2)
(662,546,2)
(367,248,2)
(209,511,2)
(492,47,2)
(392,53,2)
(218,53,2)
(247,336,2)
(91,147,2)
(234,659,2)
(531,501,2)
(42,573,2)
(383,239,2)
(578,47,2)
(134,340,2)
(82,239,2)
(195,482,2)
(478,316,2)
(580,96,2)
(488,272,2)
(623,345,2)
(341,501,2)
(489,137,2)
(520,511,2)
(603,467,2)
(212,239,2)
(461,42,2)
(650,147,2)
(20,147,2)
(107,340,2)
(624,573,2)
(428,56,2)
(183,47,2)
(504,461,2)
(224,147,2)
(471,511,2)
(41,564,2)
(573,297,2)
(234,401,2)
(92,626,2)
(369,470,2)
(647,243,2)
(506,50,2)
(234,211,2)
(401,511,2)
(661,9,2)
(34,239,2)
(238,47,2)
(275,501,2)
(560,576,2)
(234,483,2)
(322,368,2)
(469,340,2)
(448,429,2)
(277,239,2)
(355,511,2)
(340,467,2)
(335,239,2)
(506,483,2)
(23,56,2)
(466,47,2)
(78,626,2)
(488,541,2)
(79,429,2)
(104,137,2)
(337,626,2)
(595,573,2)
(224,146,2)
(431,626,2)
(386,157,2)
(38,517,2)
(506,487,2)
(144,626,2)
(564,96,2)
(453,17,2)
(398,477,2)
(484,511,2)
(553,517,2)
(16,53,2)
(646,239,2)
(341,208,2)
(234,378,2)
(175,565,2)
(436,626,2)
(435,260,2)
(528,35,2)
(70,147,2)
(149,239,2)
(112,53,2)
(524,53,2)
(225,424,2)
(557,239,2)
(12,47,2)
(370,226,2)
(41,96,2)
(228,467,2)
(234,628,2)
(435,573,2)
(158,271,2)
(660,56,2)
(395,626,2)
(478,341,2)
(286,429,2)
(375,489,2)
(165,239,2)
(360,239,2)
(102,239,2)
(0,626,2)
(207,662,2)
(195,239,2)
(6,617,2)
(375,137,2)
(133,501,2)
(542,47,2)
(234,363,2)
(505,434,2)
(194,467,2)
(525,626,2)
(530,463,2)
(363,239,2)
(547,147,2)
(58,565,2)
(325,276,2)
(234,410,2)
(251,239,2)
(176,53,2)
(230,239,2)
(496,56,2)
(208,152,2)
(340,491,2)
(417,239,2)
(45,35,2)
(523,148,2)
(551,626,2)
(479,381,2)
(65,379,2)
(135,151,2)
(141,239,2)
(644,56,2)
(146,70,2)
(630,511,2)
(284,482,2)
(645,440,2)
(627,505,2)
(221,511,2)
(658,239,2)
(573,239,2)
(325,65,2)
(488,33,2)
(442,147,2)
(612,398,2)
(195,618,2)
(477,57,2)
(202,518,2)
(581,340,2)
(353,239,2)
(628,349,2)
(583,239,2)
(139,520,2)
(216,167,2)
(506,401,2)
(106,47,2)
(184,425,2)
(556,505,2)
(268,340,2)
(478,619,2)
(460,517,2)
(98,53,2)
(545,239,2)
(55,565,2)
(234,85,2)
(143,42,2)
(237,340,2)
(125,662,2)
(573,573,2)
(331,496,2)
(454,345,2)
(122,565,2)
(519,511,2)
(156,47,2)
(73,469,2)
(558,135,2)
(488,378,2)
(374,501,2)
(46,511,2)
(258,239,2)
(174,626,2)
(176,501,2)
(278,573,2)
(89,287,2)
(636,16,2)
(245,40,2)
(377,47,2)
(5,440,2)
(364,137,2)
(52,398,2)
(316,69,2)
(623,454,2)
(640,626,2)
(411,517,2)
(482,482,2)
(98,626,2)
(137,171,2)
(533,501,2)
(73,340,2)
(108,553,2)
(508,47,2)
(491,5,2)
(518,53,2)
(506,628,2)
(332,96,2)
(199,239,2)
(192,511,2)
(225,147,2)
(413,239,2)
(43,345,2)
(116,96,2)
(20,95,2)
(99,96,2)
(639,594,2)
(460,247,2)
(264,429,2)
(341,358,2)
(609,147,2)
(616,239,2)
(586,137,2)
(311,239,2)
(606,368,2)
(259,47,2)
(181,345,2)
(631,511,2)
(449,137,2)
(605,626,2)
(307,137,2)
(95,147,2)
(507,398,2)
(345,239,2)
(455,573,2)
(635,501,2)
(444,565,2)
(506,272,2)
(424,147,2)
(661,53,2)
(408,440,2)
(639,45,2)
(541,53,2)
(216,297,2)
(203,53,2)
(545,557,2)
(488,345,2)
(558,65,2)
(446,565,2)
(516,219,2)
(587,47,2)
(588,565,2)
(270,340,2)
(561,259,2)
(518,565,2)
(488,50,2)
(375,443,2)
(62,137,2)
(248,53,2)
(289,565,2)
(596,562,2)
(327,239,2)
(308,239,2)
(247,239,2)
(348,565,2)
(661,239,2)
(506,479,2)
(410,626,2)
(317,47,2)
(421,56,2)
(535,626,2)
(285,440,2)
(341,170,2)
(498,247,2)
(552,565,2)
(526,56,2)
(56,435,2)
(71,467,2)
(141,195,2)
(213,565,2)
(506,301,2)
(47,623,2)
(639,506,2)
(582,96,2)
(506,33,2)
(499,565,2)
(529,517,2)
(651,477,2)
(458,239,2)
(399,660,2)
(6,148,2)
(282,565,2)
(607,429,2)
(184,443,2)
(549,123,2)
(394,53,2)
(618,505,2)
(33,565,2)
(234,301,2)
(39,239,2)
(316,501,2)
(227,501,2)
(234,516,2)
(488,301,2)
(426,239,2)
(31,340,2)
(397,239,2)
(597,47,2)
(647,137,2)
(563,626,2)
(128,340,2)
(364,53,2)
(591,57,2)
(512,239,2)
(379,511,2)
(184,504,2)
(177,147,2)
(263,53,2)
(137,56,2)
(301,196,2)
(359,626,2)
(604,239,2)
(170,501,2)
(660,216,2)
(562,647,2)
(283,35,2)
(234,369,2)
(488,483,2)
(325,73,2)
(243,137,2)
(184,96,2)
(530,358,2)
(425,648,2)
(16,565,2)
(546,96,2)
(390,511,2)
(559,511,2)
(184,582,2)
(506,560,2)
(143,297,2)
(639,488,2)
(323,35,2)
(136,511,2)
(272,511,2)
(202,565,2)
(488,363,2)
(409,53,2)
(434,626,2)
(576,607,2)
(386,626,2)
(4,626,2)
(92,415,2)
(199,112,2)
(63,626,2)
(402,96,2)
(234,47,2)
(235,340,2)
(206,421,2)
(278,239,2)
(91,370,2)
(234,560,2)
(5,467,2)
(91,463,2)
(488,479,2)
(488,624,2)
(602,47,2)
(151,171,2)
(305,56,2)
(57,147,2)
(621,137,2)
(506,516,2)
(549,47,2)
(191,511,2)
(231,137,2)
(381,22,2)
(318,501,2)
(70,623,2)
(281,530,2)
(511,41,2)
(211,139,2)
(312,56,2)
(591,398,2)
(292,239,2)
(497,147,2)
(373,429,2)
(284,284,2)
(54,565,2)
(422,96,2)
(232,137,2)
(626,239,2)
(558,69,2)
(321,511,2)
(269,47,2)
(302,562,2)
(216,56,2)
(259,200,2)
(291,239,2)
(243,364,2)
(330,565,2)
(59,47,2)
(7,239,2)
(336,273,2)
(173,137,2)
(188,239,2)
(339,239,2)
(618,482,2)
(27,398,2)
(467,467,2)
(654,47,2)
(172,429,2)
(294,239,2)
(1,429,2)
(28,626,2)
(583,573,2)
(408,511,2)
(536,53,2)
(648,340,2)
(108,239,2)
(276,511,2)
(218,626,2)
(359,605,2)
(575,239,2)
(93,565,2)
(18,239,2)
(343,573,2)
(68,96,2)
(527,137,2)
(232,375,2)
(85,501,2)
(366,239,2)
(506,93,2)
(514,47,2)
(613,47,2)
(447,429,2)
(642,239,2)
(349,297,2)
(513,511,2)
(506,378,2)
(437,429,2)
(502,53,2)
(110,501,2)
(367,573,2)
(460,239,2)
(570,573,2)
(614,565,2)
(234,509,2)
(378,626,2)
(124,626,2)
(96,340,2)
(316,65,2)
(325,135,2)
(506,624,2)
(395,92,2)
(461,440,2)
(368,395,2)
(597,542,2)
(433,501,2)
(103,511,2)
(271,517,2)
(274,239,2)
(651,398,2)
(564,184,2)
(39,646,2)
(468,239,2)
(203,345,2)
(461,96,2)
(504,96,2)
(239,35,2)
(454,287,2)
(234,33,2)
(139,440,2)
(478,477,2)
(542,338,2)
(56,573,2)
(24,345,2)
(470,571,2)
(646,53,2)
(633,96,2)
(246,345,2)
(510,565,2)
(157,545,2)
(314,137,2)
(411,47,2)
(167,53,2)
(617,53,2)
(77,399,2)
(357,429,2)
(19,213,2)
(418,511,2)
(59,611,2)
(483,245,2)
(378,563,2)
(453,35,2)
(369,511,2)
(500,511,2)
(261,511,2)
(470,511,2)
(349,315,2)
(429,395,2)
(115,398,2)
(517,35,2)
(600,511,2)
(52,57,2)
(602,245,2)
(432,53,2)
(74,573,2)
(111,517,2)
(363,517,2)
(362,239,2)
(541,239,2)
(558,147,2)
(333,573,2)
(660,69,2)
(478,148,2)
(575,53,2)
(150,565,2)
(483,239,2)
(241,429,2)
(178,147,2)
(530,340,2)
(92,386,2)
(498,501,2)
(153,392,2)
(201,511,2)
(273,239,2)
(19,297,2)
(120,322,2)
(21,501,2)
(208,565,2)
(603,440,2)
(310,626,2)
(470,440,2)
(299,239,2)
(548,565,2)
(341,370,2)
(121,147,2)
(486,626,2)
(147,147,2)
(29,565,2)
(253,345,2)
(462,467,2)
(439,47,2)
(123,47,2)
(288,501,2)
(170,148,2)
(490,429,2)
(308,394,2)
(66,511,2)
(571,511,2)
(482,562,2)
(461,529,2)
(219,626,2)
(379,226,2)
(83,565,2)
(473,47,2)
(85,517,2)
(492,654,2)
(616,467,2)
(57,225,2)
(432,47,2)
(22,53,2)
(155,239,2)
(65,511,2)
(169,511,2)
(634,565,2)
(95,53,2)
(9,239,2)
(103,53,2)
(91,6,2)
(219,440,2)
(622,565,2)
(271,247,2)
(260,573,2)
(293,47,2)
(440,239,2)
(81,47,2)
(268,445,2)
(540,56,2)
(417,517,2)
(536,429,2)
(180,501,2)
(147,148,2)
(328,398,2)
(320,626,2)
(506,211,2)
(13,96,2)
(385,626,2)
(69,565,2)
(239,517,2)
(506,47,2)
(362,417,2)
(463,565,2)
(619,433,2)
(295,47,2)
(342,573,2)
(649,626,2)
(444,129,2)
(153,440,2)
(475,511,2)
(229,35,2)
(255,524,2)
(223,47,2)
(196,565,2)
(407,340,2)
(488,516,2)
(488,487,2)
(260,367,2)
(494,143,2)
(523,501,2)
(498,517,2)
(379,425,2)
(409,511,2)
(196,297,2)
(488,93,2)
(546,285,2)
(279,565,2)
(464,137,2)
(164,239,2)
(561,47,2)
(505,626,2)
(64,47,2)
(457,565,2)
(301,565,2)
(129,565,2)
(83,53,2)
(564,303,2)
(479,565,2)
(252,53,2)
(309,239,2)
(433,498,2)
(509,517,2)
(187,345,2)
(427,626,2)
(597,123,2)
(344,56,2)
(100,239,2)
(443,460,2)
(589,340,2)
(561,59,2)
(26,147,2)
(17,162,2)
(266,137,2)
(565,137,2)
(618,284,2)
(352,626,2)
(322,626,2)
(619,501,2)
(454,158,2)
(442,47,2)
(352,431,2)
(506,659,2)
(423,573,2)
(90,239,2)
(605,53,2)
(76,429,2)
(82,467,2)
(135,565,2)
(620,56,2)
(488,401,2)
(365,501,2)
(139,511,2)
(495,239,2)
(481,440,2)
(501,224,2)
(163,626,2)
(472,511,2)
(488,560,2)
(182,137,2)
(515,239,2)
(91,208,2)
(151,565,2)
(632,137,2)
(326,147,2)
(15,56,2)
(636,565,2)
(529,96,2)
(232,30,2)
(469,53,2)
(412,47,2)
(230,245,2)
(391,147,2)
(417,350,2)
(638,511,2)
(405,47,2)
(467,239,2)
(530,370,2)
(17,35,2)
(544,57,2)
(198,511,2)
(143,137,2)
(660,135,2)
(645,502,2)
(185,565,2)
(488,628,2)
(186,573,2)
(345,287,2)
(234,487,2)
(381,297,2)
(576,429,2)
(316,135,2)
(50,511,2)
(234,432,2)
(520,53,2)
(240,57,2)
(592,429,2)
(206,297,2)
(478,501,2)
(459,218,2)
(487,429,2)
(304,96,2)
(226,511,2)
(70,404,2)
(346,511,2)
(443,239,2)
(9,89,2)
(120,626,2)
(398,398,2)
(49,56,2)
(639,234,2)
(496,206,2)
(572,56,2)
(146,147,2)
(66,67,2)
(101,56,2)
(567,239,2)
(271,239,2)
(148,47,2)
(590,239,2)
(74,297,2)
(368,626,2)
(481,511,2)
(481,409,2)
(3,626,2)
(325,69,2)
(558,20,2)
(311,245,2)
(19,565,2)
(123,238,2)
(456,501,2)
(143,38,2)
(488,509,2)
(487,76,2)
(336,239,2)
(47,345,2)
(226,41,2)
(158,239,2)
(177,148,2)
(380,511,2)
(316,523,2)
(551,53,2)
(281,340,2)
(170,252,2)
(272,153,2)
(119,565,2)
(569,626,2)
(629,565,2)
(195,284,2)
(91,358,2)
(662,96,2)
(398,57,2)
(563,98,2)
(367,297,2)
(370,511,2)
(637,147,2)
(94,340,2)
(494,137,2)
(384,47,2)
(452,137,2)
(25,96,2)
(173,232,2)
(554,47,2)
(210,626,2)
(648,107,2)
(268,440,2)
(648,281,2)
(613,623,2)
(84,147,2)
(488,211,2)
(127,467,2)
(316,276,2)
(67,511,2)
(159,96,2)
(219,551,2)
(273,53,2)
(598,137,2)
(509,239,2)
(491,467,2)
(608,626,2)
(262,96,2)
(202,297,2)
(222,626,2)
(489,297,2)
(255,429,2)
(584,47,2)
(234,272,2)
(48,340,2)
(244,147,2)
(284,662,2)
(375,494,2)
(20,148,2)
(438,96,2)
(147,47,2)
(533,478,2)
(376,565,2)
(233,340,2)
(624,186,2)
(606,626,2)
(607,53,2)
(501,115,2)
(617,147,2)
(636,297,2)
(206,56,2)
(193,467,2)
(22,565,2)
(315,565,2)
(410,459,2)
(450,565,2)
(105,147,2)
(77,331,2)
(534,565,2)
(215,340,2)
(430,56,2)
(93,202,2)
(645,511,2)
(553,239,2)
(190,239,2)
(539,239,2)
(9,214,2)
(577,340,2)
(331,56,2)
(488,369,2)
(114,565,2)
(61,147,2)
(393,511,2)
(416,345,2)
(118,239,2)
(285,263,2)
(517,453,2)
(421,53,2)
(502,511,2)
(50,481,2)
(152,565,2)
(406,565,2)
(89,239,2)
(561,623,2)
(400,239,2)
(217,626,2)
(474,47,2)
(313,340,2)
(107,325,2)
(414,626,2)
(555,239,2)
(37,626,2)
(263,96,2)
(381,565,2)
(506,369,2)
(234,541,2)
(71,53,2)
(501,398,2)
(424,91,2)
(153,511,2)
(530,268,2)
(480,511,2)
(60,137,2)
(557,308,2)
(496,463,2)
(488,410,2)
(496,208,2)
(358,511,2)
(492,123,2)
(485,573,2)
(653,239,2)
(574,239,2)
(32,626,2)
(315,53,2)
(408,103,2)
(300,626,2)
(652,239,2)
(524,429,2)
(205,57,2)
(252,501,2)
(111,47,2)
(234,479,2)
(238,623,2)
(234,93,2)
(234,492,2)
(243,297,2)
(112,239,2)
(213,53,2)
(562,137,2)
(35,245,2)
(565,173,2)
(545,599,2)
(293,147,2)
(80,573,2)
(130,429,2)
(392,511,2)
(250,345,2)
(38,137,2)
(628,565,2)
(351,239,2)
(44,96,2)
(465,511,2)
(220,345,2)
(249,239,2)
(558,276,2)
(419,501,2)
(511,96,2)
-----------------------------------
(0,start)
(1,dev)
(2,size)
(3,addr)
(4,addr)
(5,dev->resource[idx])
(6,dev->resource[idx])
(7,cmd)
(8,)
(9,(unsigned char *)
(10,)
(11,)
(12,0)
(13,idx)
(14,if (dev->resource[idx].flags & IORESOURCE_MEM)
(15,idx)
(16,dev->slot_name)
(17,sizeof(struct sn_device_sysdata)
(18,PCI_COMMAND)
(19,dev->resource[idx])
(20,dev->resource[idx])
(21,idx)
(22,dev->resource)
(23,end)
(24,irqpdaindr)
(25,pio_map)
(26,idx)
(27,ibits)
(28,PCI_ROM_RESOURCE)
(29,idx)
(30,unsigned long)
(31,dev)
(32,PIOMAP_FIXED)
(33,dev->resource[idx].start)
(34,device_sysdata)
(35,!pci_sysdata)
(36,end)
(37,PCI_ROM_RESOURCE)
(38,device_sysdata->pio_map)
(39,dev->resource[PCI_ROM_RESOURCE])
(40,sn_alloc_pci_sysdata()
(41,addr = (unsigned long)
(42,device_sysdata->pio_map[idx] = NULL)
(43,lines)
(44,dev)
(45,return -ENOMEM;)
(46,resource)
(47,intr_handle == NULL)
(48,continue;)
(49,size)
(50,dev->resource[idx].parent)
(51,)
(52,i)
(53,struct pci_dev *dev)
(54,dev)
(55,dev)
(56,!(dev->resource[idx].flags & IORESOURCE_IO)
(57,size == 0)
(58,ioport_resource)
(59,(intr_func_t)
(60,continue;)
(61,dev)
(62,device_sysdata)
(63,resource)
(64,device_sysdata)
(65,dev->resource[idx].end = addr + size)
(66,dev->resource[idx].parent = &iomem_resource)
(67,&iomem_resource)
(68,device_sysdata)
(69,dev->resource[idx].end = 0)
(70,(pcibr_intr_t)
(71,dev->resource)
(72,if (!(dev->resource[idx].flags & IORESOURCE_IO)
(73,dev->resource[idx])
(74,idx++)
(75,)
(76,dev->resource[PCI_ROM_RESOURCE])
(77,end - start)
(78,dev)
(79,start)
(80,resource)
(81,device_dev)
(82,idx)
(83,dev->resource)
(84,resource)
(85,device_sysdata->dma_flush_list)
(86,lines)
(87,size)
(88,resource)
(89,&lines)
(90,PCI_COMMAND_MASTER)
(91,dev->resource[idx].start)
(92,(unsigned long)
(93,dev->resource[idx].parent)
(94,start)
(95,dev->resource)
(96,!size)
(97,)
(98,dev->resource)
(99,continue;)
(100,sysdata)
(101,start)
(102,idx)
(103,dev->slot_name)
(104,idx)
(105,idx)
(106,dev)
(107,end = dev->resource[idx].end)
(108,pci_provider = device_sysdata->pci_provider)
(109,pci_sysdata)
(110,start)
(111,device_sysdata->intr_handle)
(112,dev->bus)
(113,if (dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)
(114,idx)
(115,1 << i)
(116,addr)
(117,i)
(118,lines)
(119,size)
(120,dev->resource[PCI_ROM_RESOURCE].end = addr + size)
(121,intr_handle)
(122,slot_name)
(123,irq = intr_handle->pi_irq)
(124,size)
(125,PCI_COMMAND_MEMORY)
(126,)
(127,resource)
(128,resource)
(129,&ioport_resource)
(130,"sn_pci_fixup()
(131,lines)
(132,)
(133,dma_flush_list)
(134,resource)
(135,dev->resource[idx].end = addr + size)
(136,addr)
(137,!size)
(138,0)
(139,dev->resource[idx])
(140,for (idx = 0; idx < PCI_ROM_RESOURCE; idx++)
(141,pci_write_config_word(dev, PCI_COMMAND, cmd)
(142,device_vertex)
(143,device_sysdata->pio_map[idx])
(144,PCIIO_SPACE_ROM)
(145,if (size)
(146,((pcibr_intr_t)
(147,idx < PCI_ROM_RESOURCE)
(148,idx = 0)
(149,&cmd)
(150,addr)
(151,addr + size)
(152,addr |= __IA64_UNCACHED_OFFSET)
(153,dev->resource[idx])
(154,pci_provider)
(155,pci_sysdata)
(156,irq)
(157,size = dev->resource[PCI_ROM_RESOURCE].end -\n\\n                        dev->resource[PCI_ROM_RESOURCE].start)
(158,device_vertex = device_sysdata->vhdl)
(159,vhdl)
(160,PCI_INTERRUPT_PIN)
(161,-ENOMEM)
(162,struct sn_device_sysdata)
(163,iomem_resource)
(164,resource)
(165,pci_sysdata)
(166,)
(167,dev->resource)
(168,for (i=0; i<8; i++)
(169,idx)
(170,dev->resource[idx])
(171,size = end - start)
(172,resource)
(173,addr = (unsigned long)
(174,dev)
(175,end)
(176,dev->resource)
(177,idx++)
(178,size)
(179,if (!size)
(180,resource)
(181,NULL)
(182,pio_map)
(183,irq)
(184,pciio_pio_addr(vhdl, 0,\n\\n\\t\\tPCIIO_SPACE_WIN(idx)
(185,addr)
(186,device_sysdata->pio_map)
(187,curr)
(188,pci_provider)
(189,)
(190,device_sysdata)
(191,dev)
(192,resource)
(193,IORESOURCE_IO)
(194,dev)
(195,cmd |= PCI_COMMAND_MASTER)
(196,dev->resource[idx])
(197,addr)
(198,idx)
(199,dev->bus->number)
(200,intr_arg_t)
(201,addr)
(202,dev->resource[idx])
(203,irqpdaindr->curr = dev)
(204,0)
(205,continue;)
(206,dev->resource[idx])
(207,cmd)
(208,dev->resource[idx].start = addr)
(209,addr)
(210,resource)
(211,dev->resource[idx].start)
(212,devfn)
(213,dev->resource)
(214,unsigned char *)
(215,start)
(216,dev->resource[idx])
(217,0)
(218,dev->resource)
(219,dev->resource[idx])
(220,intr_handle)
(221,resource)
(222,parent)
(223,device_sysdata)
(224,ibits = ((pcibr_intr_t)
(225,size = dev->resource[idx].end -\n\\n\\t\\t\\tdev->resource[idx].start)
(226,addr |= __IA64_UNCACHED_OFFSET)
(227,idx)
(228,idx)
(229,ENOMEM)
(230,dev->sysdata = pci_sysdata)
(231,idx)
(232,(unsigned long)
(233,idx)
(234,return 0;)
(235,size)
(236,end)
(237,idx)
(238,intr_handle->pi_irq)
(239,!device_sysdata)
(240,0)
(241,dev)
(242,)
(243,dev->resource[idx])
(244,bi_ibits)
(245,pci_sysdata = sn_alloc_pci_sysdata()
(246,dev)
(247,device_sysdata->vhdl = devfn_to_vertex(dev->bus->number, dev->devfn)
(248,dev->resource)
(249,size)
(250,device_vertex)
(251,device_sysdata)
(252,dev->resource)
(253,intr_handle)
(254,)
(255,printk("sn_pci_fixup()
(256,PCI_ROM_RESOURCE)
(257,0)
(258,pci_provider)
(259,(intr_arg_t)
(260,dev->resource[idx].flags)
(261,start)
(262,flags)
(263,dev->resource)
(264,0)
(265,cmd)
(266,resource)
(267,irq)
(268,dev->resource[idx])
(269,idx)
(270,start)
(271,device_sysdata->vhdl)
(272,dev->resource[idx].end)
(273,dev->devfn)
(274,PCI_ROM_RESOURCE)
(275,i)
(276,dev->resource[idx].end = 0)
(277,dev)
(278,idx)
(279,0)
(280,)
(281,start = dev->resource[idx].start)
(282,resource)
(283,device_sysdata)
(284,cmd |= PCI_COMMAND_MEMORY)
(285,dev->resource[idx])
(286,dev->resource[PCI_ROM_RESOURCE].end = 0)
(287,lines = 0)
(288,dev)
(289,resource)
(290,)
(291,device_sysdata)
(292,device_sysdata)
(293,idx)
(294,dev)
(295,irqpdaindr)
(296,intr_handle)
(297,idx = 0)
(298,if (!addr)
(299,set_pci_provider(device_sysdata)
(300,addr)
(301,dev->resource[idx].start)
(302,PCI_COMMAND_IO)
(303,unsigned long)
(304,0)
(305,start)
(306,dev)
(307,addr)
(308,dev->resource[PCI_ROM_RESOURCE])
(309,NULL)
(310,dev)
(311,kfree(pci_sysdata)
(312,dev)
(313,size)
(314,IORESOURCE_IO)
(315,dev->resource)
(316,dev->resource[idx].end)
(317,0)
(318,idx)
(319,dev)
(320,dev)
(321,idx)
(322,addr + size)
(323,GFP_KERNEL)
(324,if (!size)
(325,dev->resource[idx].end)
(326,start)
(327,vhdl)
(328,i)
(329,-ENOMEM)
(330,"sn_pci_fixup()
(331,start = dev->resource[idx].start)
(332,0)
(333,IORESOURCE_IO)
(334,)
(335,dev)
(336,devfn_to_vertex(dev->bus->number, dev->devfn)
(337,flags)
(338,pcibr_intr_t)
(339,PCI_COMMAND)
(340,dev->resource[idx].flags & IORESOURCE_IO)
(341,dev->resource[idx].start)
(342,pio_map)
(343,dev)
(344,end)
(345,!lines)
(346,dev)
(347,if (dev->resource[idx].flags & IORESOURCE_IO)
(348,idx)
(349,dev->resource[idx])
(350,void *)
(351,dev)
(352,dev->resource[idx].parent = &iomem_resource)
(353,start)
(354,device_vertex)
(355,0)
(356,vhdl)
(357,end)
(358,dev->resource[idx].start = 0)
(359,dev->resource[PCI_ROM_RESOURCE])
(360,0)
(361,bit_pos_to_irq)
(362,pci_sysdata->platform_data = (void *)
(363,device_sysdata->vhdl)
(364,dev->resource)
(365,device_sysdata)
(366,vhdl)
(367,dev->resource[idx])
(368,addr |= __IA64_UNCACHED_OFFSET)
(369,dev->resource[idx].start)
(370,dev->resource[idx].start = addr)
(371,idx)
(372,resource)
(373,0)
(374,end)
(375,pciio_pio_addr(vhdl, 0,\n\\n\\t\\tPCIIO_SPACE_WIN(idx)
(376,dev)
(377,irq)
(378,dev->resource[PCI_ROM_RESOURCE].end)
(379,addr + size)
(380,0)
(381,dev->resource[idx])
(382,addr)
(383,vhdl)
(384,dev)
(385,addr)
(386,pciio_pio_addr(vhdl, 0,\n\\n\\t\\t\\t\\t\\t      PCIIO_SPACE_ROM,\n\\n\\t\\t\\t\\t\\t      0, size, 0, PIOMAP_FIXED)
(387,pci_sysdata)
(388,pci_sysdata)
(389,start)
(390,iomem_resource)
(391,0)
(392,dev->resource)
(393,slot_name)
(394,dev->resource)
(395,addr = (unsigned long)
(396,addr)
(397,platform_data)
(398,i<8)
(399,end = dev->resource[idx].end)
(400,cmd)
(401,dev->resource[idx].end)
(402,idx)
(403,if (!lines)
(404,pcibr_intr_t)
(405,irq)
(406,resource)
(407,end)
(408,printk("sn_pci_fixup()
(409,dev->resource)
(410,dev->resource[PCI_ROM_RESOURCE].start)
(411,kfree(device_sysdata)
(412,-ENOMEM)
(413,end)
(414,resource)
(415,unsigned long)
(416,0)
(417,(void *)
(418,dev)
(419,device_sysdata)
(420,NULL)
(421,dev->resource)
(422,idx)
(423,idx)
(424,dev->resource[idx].end -\n\\n\\t\\t\\tdev->resource[idx].start)
(425,size = end - start)
(426,0)
(427,IORESOURCE_MEM)
(428,resource)
(429,!addr)
(430,continue;)
(431,&iomem_resource)
(432,dev->irq)
(433,pcibr_info_get(device_sysdata->vhdl)
(434,dev->resource[PCI_ROM_RESOURCE].flags)
(435,dev->resource[idx].flags & IORESOURCE_IO)
(436,idx)
(437,dev)
(438,IORESOURCE_MEM)
(439,intr_handle)
(440,idx = 0)
(441,pci_sysdata)
(442,PCI_ROM_RESOURCE)
(443,vhdl = device_sysdata->vhdl)
(444,dev->resource[idx].parent = &ioport_resource)
(445,dev->resource)
(446,start)
(447,dev->resource[PCI_ROM_RESOURCE].start = 0)
(448,resource)
(449,0)
(450,parent)
(451,addr)
(452,addr)
(453,kmalloc(sizeof(struct sn_device_sysdata)
(454,(pci_provider->intr_alloc)
(455,flags)
(456,resource)
(457,start)
(458,cmd)
(459,dev->resource[PCI_ROM_RESOURCE])
(460,device_sysdata->vhdl)
(461,device_sysdata->pio_map[idx])
(462,flags)
(463,dev->resource[idx].start = 0)
(464,dev)
(465,resource)
(466,ENOMEM)
(467,idx < PCI_ROM_RESOURCE)
(468,lines)
(469,dev->resource)
(470,dev->resource[idx])
(471,end)
(472,parent)
(473,intr_handle)
(474,intr_handle)
(475,"sn_pci_fixup()
(476,pci_sysdata)
(477,i=0)
(478,sn_dma_flush_init(dev->resource[idx].start,\n\\n\\t\\t\\t\\t\\t\\t   dev->resource[idx].end,\n\\n\\t\\t\\t\\t\\t\\t   idx,\n\\n\\t\\t\\t\\t\\t\\t   i,\n\\n\\t\\t\\t\\t\\t\\t   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)
(479,dev->resource[idx].end)
(480,idx)
(481,dev->resource[idx])
(482,cmd |= PCI_COMMAND_IO)
(483,pci_sysdata->platform_data)
(484,dev)
(485,idx)
(486,0)
(487,dev->resource[PCI_ROM_RESOURCE].end)
(488,return 0;)
(489,PCIIO_SPACE_WIN(idx)
(490,PCI_ROM_RESOURCE)
(491,dev->resource[idx].flags)
(492,irqpdaindr->device_dev[irq])
(493,size)
(494,&device_sysdata->pio_map[idx])
(495,device_sysdata)
(496,dev->resource[idx].start)
(497,ibits)
(498,device_sysdata->vhdl)
(499,idx)
(500,__IA64_UNCACHED_OFFSET)
(501,ibits & (1 << i)
(502,dev->resource)
(503,addr)
(504,&device_sysdata->pio_map[idx])
(505,dev->resource[PCI_ROM_RESOURCE].flags & IORESOURCE_MEM)
(506,return -ENOMEM;)
(507,i)
(508,0)
(509,device_sysdata->intr_handle)
(510,__IA64_UNCACHED_OFFSET)
(511,!addr)
(512,number)
(513,resource)
(514,intr_handle)
(515,PCI_ROM_RESOURCE)
(516,dev->resource[idx].parent)
(517,device_sysdata = kmalloc(sizeof(struct sn_device_sysdata)
(518,dev->resource)
(519,end)
(520,dev->resource)
(521,device_sysdata)
(522,if (!device_sysdata)
(523,dev->resource[idx])
(524,dev->slot_name)
(525,__IA64_UNCACHED_OFFSET)
(526,start)
(527,vhdl)
(528,device_sysdata)
(529,device_sysdata->pio_map)
(530,dev->resource[idx].start)
(531,vhdl)
(532,pcibr_info_get)
(533,device_sysdata->dma_flush_list =\n\\n\\t\\t\\t\\t sn_dma_flush_init(dev->resource[idx].start,\n\\n\\t\\t\\t\\t\\t\\t   dev->resource[idx].end,\n\\n\\t\\t\\t\\t\\t\\t   idx,\n\\n\\t\\t\\t\\t\\t\\t   i,\n\\n\\t\\t\\t\\t\\t\\t   PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)
(534,dev)
(535,PCI_ROM_RESOURCE)
(536,dev->resource)
(537,flags)
(538,idx)
(539,intr_handle)
(540,idx)
(541,dev->sysdata)
(542,(pcibr_intr_t)
(543,0)
(544,i)
(545,dev->resource[PCI_ROM_RESOURCE].end -\n\\n                        dev->resource[PCI_ROM_RESOURCE].start)
(546,dev->resource[idx].flags)
(547,idx)
(548,idx)
(549,dev->irq = irq)
(550,idx)
(551,dev->resource)
(552,dev)
(553,device_sysdata->pci_provider)
(554,irqpdaindr->device_dev[irq] = dev)
(555,dev)
(556,PCI_COMMAND_MEMORY)
(557,dev->resource[PCI_ROM_RESOURCE].end)
(558,dev->resource[idx].end)
(559,start)
(560,dev->resource[PCI_ROM_RESOURCE].start)
(561,(pci_provider->intr_connect)
(562,dev->resource[idx].flags & IORESOURCE_IO)
(563,dev->resource[PCI_ROM_RESOURCE])
(564,(unsigned long)
(565,!addr)
(566,for (idx = 0; idx < PCI_ROM_RESOURCE; idx++)
(567,idx)
(568,if (intr_handle == NULL)
(569,resource)
(570,device_sysdata)
(571,dev->resource)
(572,end)
(573,idx < PCI_ROM_RESOURCE)
(574,bus)
(575,pci_read_config_word(dev, PCI_COMMAND, &cmd)
(576,dev->resource[PCI_ROM_RESOURCE])
(577,end)
(578,pi_irq)
(579,if ((dev->resource[idx].flags & IORESOURCE_IO)
(580,size)
(581,dev)
(582,PCIIO_SPACE_WIN(idx)
(583,PCI_ROM_RESOURCE)
(584,intr_handle)
(585,if (!addr)
(586,size)
(587,irq)
(588,idx)
(589,end)
(590,dev)
(591,8)
(592,slot_name)
(593,device_sysdata)
(594,return -ENOMEM;)
(595,NULL)
(596,cmd)
(597,register_pcibr_intr(irq, (pcibr_intr_t)
(598,0)
(599,dev->resource[PCI_ROM_RESOURCE].start)
(600,idx)
(601,)
(602,kfree(pci_sysdata)
(603,idx++)
(604,resource)
(605,dev->resource)
(606,dev->resource[PCI_ROM_RESOURCE].start = addr)
(607,dev->resource)
(608,0)
(609,resource)
(610,if (size == 0)
(611,intr_func_t)
(612,1)
(613,device_sysdata->intr_handle = intr_handle)
(614,resource)
(615,ibits)
(616,PCI_ROM_RESOURCE)
(617,dev->resource)
(618,cmd |= PCI_COMMAND_MEMORY)
(619,PCIBR_INFO_SLOT_GET_EXT(pcibr_info_get(device_sysdata->vhdl)
(620,size)
(621,idx)
(622,resource)
(623,intr_handle = (pci_provider->intr_alloc)
(624,device_sysdata->pio_map[idx])
(625,for (idx = 0; idx < PCI_ROM_RESOURCE; idx++)
(626,size)
(627,cmd)
(628,dev->resource[idx].end)
(629,end)
(630,dev)
(631,idx)
(632,0)
(633,addr)
(634,dev)
(635,dev)
(636,printk("sn_pci_fixup()
(637,end)
(638,dev)
(639,RET)
(640,end)
(641,if (ibits & (1 << i)
(642,device_vertex)
(643,if (!addr)
(644,dev)
(645,dev->resource[idx])
(646,dev->resource)
(647,dev->resource[idx].flags)
(648,end - start)
(649,vhdl)
(650,size)
(651,i++)
(652,device_sysdata->intr_handle = NULL)
(653,vhdl)
(654,irqpdaindr->device_dev)
(655,start)
(656,if (!pci_sysdata)
(657,ENOMEM)
(658,dev)
(659,irqpdaindr->curr)
(660,dev->resource[idx].end)
(661,pci_read_config_byte(dev, PCI_INTERRUPT_PIN, (unsigned char *)
(662,dev->resource[idx].flags & IORESOURCE_MEM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^