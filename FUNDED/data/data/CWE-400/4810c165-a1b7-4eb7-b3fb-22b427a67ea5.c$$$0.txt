-----label-----
0
-----code-----
static void goodB2GSink()
{
    int count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_good.txt";
        /* FIX: Validate count before using it as the for loop variant to write to a file */
        if (count > 0 && count <= 20)
        {
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
14,17
14,18
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
41,43
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
51,52
51,53
51,54
51,55
52,53
53,54
53,55
54,55
56,57
56,58
56,59
57,58
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
83,84
83,85
84,85
84,86
85,86
88,89
90,91
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
101,104
101,105
101,106
102,103
104,105
106,107
107,108
107,109
110,111
110,112
111,112
113,114
115,116
117,118
118,119
118,120
119,120
122,123
122,124
123,124
125,126
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,13,18,20,22,26,28,29,32,35,37,38,40,45,46,49,50,55,58,60,61,65,67,72,73,78,79,82,86,87,89,92,98,100,103,105,108,109,112,114,116,120,121,124,129,131
-----computeFrom-----
42,43
42,44
43,44
43,45
47,48
47,49
53,54
53,55
63,64
63,65
76,77
76,78
80,81
80,82
95,96
95,97
-----guardedBy-----
49,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2GSink(){    int count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodB2GSink()
goodB2GSink
{    int count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData;
int count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData;
int
count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData
count
= CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData
CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData
CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(53,44,0)
(3,12,0)
(57,12,0)
(12,65,0)
(44,65,0)
(27,40,0)
(33,29,0)
(8,19,0)
(63,44,0)
(57,33,0)
(45,40,0)
(54,12,0)
(4,12,0)
(14,51,0)
(19,29,0)
(22,57,0)
(9,30,0)
(37,44,0)
(48,33,0)
(25,45,0)
(17,3,0)
(60,53,0)
(43,44,0)
(45,55,0)
(67,29,0)
(7,2,0)
(0,52,0)
(5,15,0)
(26,57,0)
(16,52,0)
(62,54,0)
(40,27,0)
(35,42,0)
(28,12,0)
(13,51,0)
(40,30,0)
(38,53,0)
(57,26,0)
(27,53,0)
(51,40,0)
(32,69,0)
(31,65,0)
(3,17,0)
(24,43,0)
(2,51,0)
(61,54,0)
(69,51,0)
(51,69,0)
(47,40,0)
(33,57,0)
(56,11,0)
(51,2,0)
(52,0,0)
(1,36,0)
(6,58,0)
(59,3,0)
(20,56,0)
(64,15,0)
(23,44,0)
(10,27,0)
(49,42,0)
(15,40,0)
(18,27,0)
(34,29,0)
(51,0,0)
(46,43,0)
(39,44,0)
(54,17,0)
(17,54,0)
(50,30,0)
(41,30,0)
(42,44,0)
(0,51,0)
(66,3,0)
(3,59,1)
(15,64,1)
(54,62,1)
(38,43,1)
(57,12,1)
(5,40,1)
(20,15,1)
(27,18,1)
(69,32,1)
(56,20,1)
(48,29,1)
(67,15,1)
(21,33,1)
(19,8,1)
(0,51,1)
(2,7,1)
(3,12,1)
(68,45,1)
(68,21,1)
(67,56,1)
(64,5,1)
(57,26,1)
(27,53,1)
(10,47,1)
(60,38,1)
(46,24,1)
(34,67,1)
(7,14,1)
(61,3,1)
(14,52,1)
(13,69,1)
(45,25,1)
(12,4,1)
(51,13,1)
(47,17,1)
(4,28,1)
(33,57,1)
(17,54,1)
(29,34,1)
(66,53,1)
(0,52,1)
(68,17,1)
(35,49,1)
(48,19,1)
(58,6,1)
(57,22,1)
(15,40,1)
(19,29,1)
(45,40,1)
(53,60,1)
(18,10,1)
(52,16,1)
(22,48,1)
(42,35,1)
(16,33,1)
(24,42,1)
(62,61,1)
(8,0,1)
(33,29,1)
(40,27,1)
(59,66,1)
(8,58,1)
(43,46,1)
(25,21,1)
(49,12,1)
(6,0,1)
(54,12,1)
(32,2,1)
(17,3,1)
(51,69,1)
(51,2,1)
(51,40,1)
(0,51,2)
(69,33,2)
(6,0,2)
(67,17,2)
(16,33,2)
(45,21,2)
(64,17,2)
(3,12,2)
(15,40,2)
(62,3,2)
(33,57,2)
(27,17,2)
(29,17,2)
(57,12,2)
(21,17,2)
(51,40,2)
(32,33,2)
(54,12,2)
(48,17,2)
(17,3,2)
(17,54,2)
(48,33,2)
(8,33,2)
(15,17,2)
(52,33,2)
(40,27,2)
(51,2,2)
(0,33,2)
(45,40,2)
(14,33,2)
(61,3,2)
(20,15,2)
(0,52,2)
(22,17,2)
(40,17,2)
(19,33,2)
(57,33,2)
(33,29,2)
(51,69,2)
(7,33,2)
(57,17,2)
(2,33,2)
(10,17,2)
(33,33,2)
(27,53,2)
(57,26,2)
(33,17,2)
(47,17,2)
(22,33,2)
(5,17,2)
(18,17,2)
(58,0,2)
(13,33,2)
(34,17,2)
(56,15,2)
(25,21,2)
(54,3,2)
(51,33,2)
(19,29,2)
-----------------------------------
(0,strlen(SENTENCE)
(1,if (strlen(SENTENCE)
(2,sizeof(char)
(3,count > 0)
(4,CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData)
(5,pFile)
(6,1)
(7,char)
(8,i)
(9,if (pFile)
(10,filename)
(11,)
(12,count = CWE400_Resource_Exhaustion__connect_socket_fwrite_45_goodB2GData)
(13,pFile)
(14,SENTENCE)
(15,pFile == NULL)
(16,SENTENCE)
(17,count > 0 && count <= 20)
(18,"w+")
(19,i++)
(20,1)
(21,pFile)
(22,count)
(23,pFile)
(24,pFile)
(25,pFile)
(26,size_t)
(27,fopen(filename, "w+")
(28,count)
(29,i = 0)
(30,)
(31,count)
(32,SENTENCE)
(33,i < (size_t)
(34,0)
(35,0)
(36,)
(37,i)
(38,filename)
(39,if (count > 0 && count <= 20)
(40,pFile = fopen(filename, "w+")
(41,if (pFile == NULL)
(42,i = 0)
(43,*pFile = NULL)
(44,)
(45,fclose(pFile)
(46,NULL)
(47,pFile)
(48,i)
(49,i)
(50,for (i = 0; i < (size_t)
(51,fwrite(SENTENCE, sizeof(char)
(52,strlen(SENTENCE)
(53,*filename = "output_good.txt")
(54,count <= 20)
(55,)
(56,exit(1)
(57,(size_t)
(58,exit(1)
(59,0)
(60,"output_good.txt")
(61,count)
(62,20)
(63,filename)
(64,NULL)
(65,)
(66,count)
(67,i)
(68,RET)
(69,strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^