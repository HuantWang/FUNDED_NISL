-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,71,75,76,78
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,14,0)
(25,40,0)
(23,35,0)
(39,42,0)
(17,38,0)
(15,38,0)
(14,40,0)
(7,12,0)
(12,7,0)
(38,15,0)
(23,25,0)
(35,29,0)
(2,8,0)
(24,29,0)
(18,10,0)
(13,35,0)
(21,31,0)
(3,38,0)
(16,7,0)
(11,35,0)
(29,41,0)
(26,41,0)
(22,40,0)
(30,22,0)
(28,27,0)
(9,23,0)
(41,26,0)
(10,30,0)
(0,12,0)
(1,12,0)
(20,10,0)
(32,25,0)
(38,3,0)
(34,14,0)
(29,40,0)
(31,42,0)
(41,29,0)
(37,27,0)
(35,23,0)
(5,3,0)
(36,42,0)
(12,29,0)
(15,41,0)
(4,8,0)
(41,15,0)
(19,31,0)
(33,42,0)
(30,10,0)
(10,29,0)
(22,30,0)
(14,34,1)
(19,21,1)
(3,5,1)
(2,27,1)
(29,41,1)
(2,22,1)
(7,16,1)
(13,11,1)
(41,26,1)
(10,29,1)
(6,8,1)
(0,29,1)
(20,25,1)
(12,1,1)
(7,12,1)
(27,37,1)
(16,12,1)
(41,15,1)
(35,29,1)
(31,19,1)
(18,20,1)
(12,29,1)
(28,31,1)
(32,23,1)
(1,0,1)
(25,32,1)
(9,35,1)
(35,13,1)
(34,7,1)
(4,2,1)
(17,24,1)
(24,27,1)
(15,38,1)
(10,18,1)
(22,30,1)
(38,3,1)
(37,28,1)
(30,10,1)
(23,9,1)
(8,4,1)
(23,35,1)
(5,17,1)
(11,14,1)
(29,41,2)
(38,3,2)
(10,29,2)
(22,27,2)
(13,27,2)
(14,27,2)
(11,27,2)
(12,27,2)
(35,29,2)
(18,27,2)
(15,27,2)
(41,26,2)
(38,27,2)
(10,27,2)
(32,27,2)
(0,27,2)
(5,27,2)
(29,27,2)
(25,27,2)
(35,27,2)
(23,27,2)
(16,27,2)
(3,27,2)
(15,38,2)
(30,27,2)
(23,35,2)
(22,30,2)
(12,29,2)
(34,27,2)
(7,27,2)
(41,27,2)
(7,12,2)
(20,27,2)
(41,15,2)
(17,27,2)
(1,27,2)
(30,10,2)
(24,27,2)
(9,27,2)
-----------------------------------
(0,data)
(1,0)
(2,staticFive)
(3,sizeof(twoIntsStruct)
(4,5)
(5,twoIntsStruct)
(6,RET)
(7,data[0].intOne)
(8,staticFive==5)
(9,intTwo)
(10,data[0])
(11,data)
(12,data[0])
(13,0)
(14,data[0].intOne = 0)
(15,ALLOCA(100*sizeof(twoIntsStruct)
(16,intOne)
(17,100)
(18,0)
(19,NULL)
(20,data)
(21,data)
(22,printStructLine(&data[0])
(23,data[0].intTwo)
(24,data)
(25,data[0].intTwo = 0)
(26,twoIntsStruct *)
(27,staticFive==5)
(28,staticFive)
(29,data = (twoIntsStruct *)
(30,&data[0])
(31,data = NULL)
(32,0)
(33,data)
(34,0)
(35,data[0])
(36,if(staticFive==5)
(37,5)
(38,100*sizeof(twoIntsStruct)
(39,if(staticFive==5)
(40,)
(41,(twoIntsStruct *)
(42,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^