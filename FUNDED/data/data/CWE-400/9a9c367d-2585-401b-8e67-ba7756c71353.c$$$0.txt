-----label-----
1
-----code-----
int CWE400_Resource_Exhaustion__fgets_for_loop_61b_badSource(int count)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return count;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
50,51
51,52
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,43,48,49,52
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int CWE400_Resource_Exhaustion__fgets_for_loop_61b_badSource(int count){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return count;}
int
CWE400_Resource_Exhaustion__fgets_for_loop_61b_badSource(int count)
CWE400_Resource_Exhaustion__fgets_for_loop_61b_badSource
int count
int
count
count
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return count;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return count;
count
count
-----joern-----
(14,9,0)
(24,16,0)
(22,19,0)
(9,6,0)
(17,13,0)
(15,23,0)
(23,3,0)
(10,8,0)
(22,8,0)
(24,19,0)
(0,13,0)
(12,24,0)
(20,17,0)
(8,22,0)
(5,9,0)
(18,17,0)
(2,24,0)
(13,16,0)
(6,9,0)
(21,6,0)
(8,17,0)
(24,22,0)
(9,17,0)
(1,13,0)
(7,22,0)
(4,9,0)
(22,11,0)
(10,7,1)
(22,19,1)
(24,2,1)
(15,6,1)
(9,5,1)
(2,22,1)
(8,10,1)
(4,14,1)
(2,23,1)
(6,9,1)
(23,15,1)
(24,22,1)
(21,9,1)
(7,6,1)
(5,4,1)
(20,18,1)
(17,20,1)
(14,17,1)
(24,19,1)
(8,17,1)
(9,17,1)
(22,8,1)
(6,21,1)
(12,24,1)
(12,24,2)
(9,17,2)
(6,9,2)
(7,6,2)
(22,19,2)
(22,8,2)
(15,6,2)
(22,6,2)
(8,6,2)
(8,17,2)
(23,6,2)
(24,22,2)
(10,6,2)
(24,19,2)
-----------------------------------
(0,inputBuffer)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,count)
(3,)
(4,CHAR_ARRAY_SIZE)
(5,stdin)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,count)
(8,atoi(inputBuffer)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,inputBuffer)
(11,)
(12,RET)
(13,)
(14,inputBuffer)
(15,"fgets()
(16,)
(17,inputBuffer[CHAR_ARRAY_SIZE] = "")
(18,inputBuffer)
(19,int count)
(20,"")
(21,NULL)
(22,count = atoi(inputBuffer)
(23,printLine("fgets()
(24,return count;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^