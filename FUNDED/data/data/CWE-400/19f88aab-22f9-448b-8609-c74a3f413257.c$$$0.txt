-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
60,61
61,62
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
72,73
72,74
73,74
74,75
74,76
76,77
76,78
79,80
79,81
79,82
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
88,91
88,92
88,93
89,90
90,91
90,92
91,92
93,94
93,95
94,95
94,96
96,97
98,99
98,100
99,100
101,102
101,103
102,103
104,105
105,106
105,107
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
122,125
123,124
125,126
127,128
129,130
130,131
130,132
131,132
133,134
135,136
136,137
136,138
137,138
139,140
141,142
142,143
143,144
143,145
144,145
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,58,59,64,65,69,70,75,77,78,82,85,87,92,95,97,100,103,106,107,111,113,118,120,124,126,128,132,134,138,140,145,146
-----computeFrom-----
13,14
13,15
18,19
18,20
35,36
35,37
49,50
49,51
67,68
67,69
80,81
80,82
90,91
90,92
101,102
101,103
109,110
109,111
-----guardedBy-----
40,56
46,58
87,128
82,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_bad(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_bad
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(11,42,0)
(34,68,0)
(68,11,0)
(63,0,0)
(7,11,0)
(5,11,0)
(30,57,0)
(36,11,0)
(65,16,0)
(25,58,0)
(16,4,0)
(68,10,0)
(59,50,0)
(16,26,0)
(37,1,0)
(19,41,0)
(21,15,0)
(9,67,0)
(52,25,0)
(38,14,0)
(53,30,0)
(6,13,0)
(21,18,0)
(70,3,0)
(31,1,0)
(55,38,0)
(4,42,0)
(0,41,0)
(53,50,0)
(32,7,0)
(48,28,0)
(18,21,0)
(72,10,0)
(23,58,0)
(71,26,0)
(16,30,0)
(11,10,0)
(4,16,0)
(66,61,0)
(13,30,0)
(58,60,0)
(13,25,0)
(42,11,0)
(62,18,0)
(42,4,0)
(14,38,0)
(3,47,0)
(35,44,0)
(26,16,0)
(51,28,0)
(50,53,0)
(33,30,0)
(29,42,0)
(56,5,0)
(39,14,0)
(14,25,0)
(24,13,0)
(49,7,0)
(30,13,0)
(5,10,0)
(61,20,0)
(40,41,0)
(7,10,0)
(43,25,0)
(54,14,0)
(42,29,0)
(16,0,0)
(44,17,0)
(8,14,0)
(46,41,0)
(69,61,0)
(45,0,0)
(53,0,0)
(12,13,0)
(27,53,0)
(2,67,0)
(67,11,0)
(22,58,0)
(5,11,1)
(68,11,1)
(24,6,1)
(64,68,1)
(56,7,1)
(6,33,1)
(52,28,1)
(44,35,1)
(9,11,1)
(14,8,1)
(38,55,1)
(55,14,1)
(13,25,1)
(62,67,1)
(53,50,1)
(31,3,1)
(51,0,1)
(4,16,1)
(7,49,1)
(16,0,1)
(48,51,1)
(31,28,1)
(12,24,1)
(1,37,1)
(45,63,1)
(18,62,1)
(32,21,1)
(26,71,1)
(67,11,1)
(28,48,1)
(65,36,1)
(0,45,1)
(49,32,1)
(3,70,1)
(53,30,1)
(64,1,1)
(33,38,1)
(54,39,1)
(43,52,1)
(67,2,1)
(64,44,1)
(11,42,1)
(13,12,1)
(2,9,1)
(70,38,1)
(39,25,1)
(5,56,1)
(16,26,1)
(7,11,1)
(32,67,1)
(38,14,1)
(59,27,1)
(16,30,1)
(53,0,1)
(30,13,1)
(71,65,1)
(31,30,1)
(21,18,1)
(68,34,1)
(27,1,1)
(50,59,1)
(42,29,1)
(35,53,1)
(8,54,1)
(42,4,1)
(25,43,1)
(36,53,1)
(34,5,1)
(37,31,1)
(14,25,1)
(2,53,2)
(38,28,2)
(35,53,2)
(59,1,2)
(36,53,2)
(70,38,2)
(3,38,2)
(7,11,2)
(33,38,2)
(16,26,2)
(53,1,2)
(65,53,2)
(8,28,2)
(14,28,2)
(25,28,2)
(16,30,2)
(68,11,2)
(44,53,2)
(30,13,2)
(42,53,2)
(4,16,2)
(42,4,2)
(4,53,2)
(38,14,2)
(18,67,2)
(50,1,2)
(9,53,2)
(30,38,2)
(27,1,2)
(21,18,2)
(54,28,2)
(43,28,2)
(12,38,2)
(21,67,2)
(42,29,2)
(32,53,2)
(14,25,2)
(52,28,2)
(53,30,2)
(7,53,2)
(67,11,2)
(5,53,2)
(71,53,2)
(62,67,2)
(53,50,2)
(55,28,2)
(67,53,2)
(5,11,2)
(26,53,2)
(68,53,2)
(34,53,2)
(39,28,2)
(13,38,2)
(13,25,2)
(56,53,2)
(53,0,2)
(6,38,2)
(24,38,2)
(16,0,2)
(16,53,2)
(49,53,2)
(11,42,2)
(11,53,2)
-----------------------------------
(0,data = 0)
(1,STATIC_CONST_FIVE==5)
(2,NULL)
(3,printLine("fgets()
(4,malloc(data*sizeof(wchar_t)
(5,printWLine(myString)
(6,inputBuffer)
(7,wcscpy(myString, HELLO_STRING)
(8,stdin)
(9,myString)
(10,)
(11,myString = (wchar_t *)
(12,0)
(13,strtoul(inputBuffer, NULL, 0)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,)
(16,data*sizeof(wchar_t)
(17,)
(18,-1)
(19,if(STATIC_CONST_FIVE==5)
(20,)
(21,exit(-1)
(22,inputBuffer)
(23,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,NULL)
(25,inputBuffer[CHAR_ARRAY_SIZE] = "")
(26,sizeof(wchar_t)
(27,data)
(28,STATIC_CONST_FIVE==5)
(29,wchar_t *)
(30,data = strtoul(inputBuffer, NULL, 0)
(31,STATIC_CONST_FIVE)
(32,myString)
(33,data)
(34,myString)
(35,"Input is less than the length of the source string")
(36,myString)
(37,5)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,inputBuffer)
(40,data)
(41,)
(42,(wchar_t *)
(43,"")
(44,printLine("Input is less than the length of the source string")
(45,0)
(46,if(STATIC_CONST_FIVE==5)
(47,)
(48,5)
(49,HELLO_STRING)
(50,wcslen(HELLO_STRING)
(51,STATIC_CONST_FIVE)
(52,inputBuffer)
(53,data > wcslen(HELLO_STRING)
(54,CHAR_ARRAY_SIZE)
(55,NULL)
(56,myString)
(57,)
(58,)
(59,HELLO_STRING)
(60,)
(61,)
(62,1)
(63,data)
(64,RET)
(65,data)
(66,if (data > wcslen(HELLO_STRING)
(67,myString == NULL)
(68,free(myString)
(69,myString)
(70,"fgets()
(71,wchar_t)
(72,if (myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^