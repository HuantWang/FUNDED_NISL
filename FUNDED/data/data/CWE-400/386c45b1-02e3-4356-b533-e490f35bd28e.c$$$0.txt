-----label-----
1
-----code-----
static void
process_rtp(struct cfg *cf, double ctime, int alarm_tick)
{
    int readyfd, skipfd, ridx;
    struct rtpp_session *sp;
    struct rtp_packet *packet;
    int timeout_detected;

    /* Relay RTP/RTCP */
    skipfd = 0;
    for (readyfd = 1; readyfd < cf->nsessions; readyfd++) {
	sp = cf->sessions[readyfd];

	if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&
	  sp->sidx[0] == readyfd) {
	    switch(sp->ttl_mode) {
	      case TTL_UNIFIED:
		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);
		break;

	      case TTL_INDEPENDENT:
		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);
		break;

	      default:
		/* Shouldn't happen[tm] */
		abort();
		break;
	    }
	    if (timeout_detected != 0) {
		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");
		do_timeout_notification(sp);
		remove_session(cf, sp);
	    } else {
		if (sp->ttl[0] != 0)
		    sp->ttl[0]--;
		if (sp->ttl[1] != 0)
		    sp->ttl[1]--;
	    }
	}

	if (cf->pfds[readyfd].fd == -1) {
	    /* Deleted session, count and move one */
	    skipfd++;
	    continue;
	}

	/* Find index of the call leg within a session */
	for (ridx = 0; ridx < 2; ridx++)
	    if (cf->pfds[readyfd].fd == sp->fds[ridx])
		break;
	/*
	 * Can't happen.
	 */
	assert(ridx != 2);

	/* Compact pfds[] and sessions[] by eliminating removed sessions */
	if (skipfd > 0) {
	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];
	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];
	    sp->sidx[ridx] = readyfd - skipfd;;
	}

	if (sp->complete != 0) {
	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)
		rxmit_packets(cf, sp, ridx, ctime);
	    if (sp->resizers[ridx].output_nsamples > 0) {
		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {
		    send_packet(cf, sp, ridx, packet);
		    rtp_packet_free(packet);
		}
	    }
	}
    }
    /* Trim any deleted sessions at the end */
    cf->nsessions -= skipfd;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
19,24
19,25
19,26
20,21
21,22
21,23
21,24
21,25
23,24
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
46,47
48,49
49,50
49,51
50,51
53,54
53,55
53,56
53,57
54,55
55,56
55,57
56,57
59,60
59,61
60,61
62,63
62,64
63,64
66,67
67,68
69,70
69,71
69,72
69,73
69,74
69,75
69,76
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
76,77
79,80
81,82
81,83
82,83
82,84
83,84
83,85
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
92,93
94,95
94,96
95,96
95,97
96,97
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
108,109
110,111
110,112
111,112
111,113
112,113
112,114
113,114
116,117
116,118
116,119
116,120
116,121
116,122
116,123
116,124
116,125
117,118
118,119
120,121
121,122
121,123
122,123
124,125
125,126
125,127
126,127
126,128
127,128
127,129
128,129
128,130
129,130
134,135
134,136
135,136
135,137
136,137
136,138
137,138
143,144
144,145
146,147
147,148
147,149
148,149
150,151
151,152
151,153
152,153
152,154
153,154
153,155
154,155
154,156
155,156
160,161
160,162
161,162
161,163
162,163
162,164
163,164
170,171
171,172
172,173
175,176
175,177
175,178
176,177
176,178
177,178
180,181
180,182
180,183
181,182
182,183
182,184
182,185
182,186
183,184
185,186
187,188
187,189
188,189
192,193
193,194
193,195
194,195
196,197
198,199
199,200
199,201
199,202
200,201
202,203
204,205
206,207
206,208
207,208
207,209
208,209
208,210
209,210
209,211
210,211
210,212
211,212
216,217
217,218
218,219
218,220
219,220
219,221
220,221
224,225
224,226
225,226
225,227
226,227
226,228
227,228
227,229
228,229
233,234
234,235
235,236
235,237
236,237
236,238
237,238
241,242
241,243
242,243
242,244
243,244
243,245
244,245
244,246
245,246
245,247
246,247
249,250
252,253
254,255
254,256
255,256
256,257
257,258
260,261
260,262
260,263
260,264
261,262
262,263
262,264
263,264
266,267
266,268
267,268
270,271
271,272
273,274
273,275
274,275
274,276
275,276
275,277
276,277
276,278
277,278
277,279
278,279
281,282
284,285
284,286
285,286
285,287
286,287
289,290
292,293
293,294
293,295
294,295
296,297
296,298
297,298
300,301
300,302
301,302
301,303
302,303
305,306
305,307
305,308
305,309
306,307
307,308
307,309
308,309
308,310
309,310
309,311
310,311
313,314
313,315
314,315
316,317
318,319
318,320
319,320
319,321
320,321
323,324
325,326
326,327
326,328
327,328
327,329
328,329
328,330
329,330
332,333
332,334
333,334
335,336
337,338
337,339
338,339
338,340
339,340
342,343
344,345
345,346
345,347
346,347
346,348
347,348
347,349
348,349
351,352
353,354
353,355
354,355
356,357
359,360
359,361
360,361
360,362
361,362
361,363
362,363
366,367
366,368
367,368
367,369
368,369
368,370
369,370
370,371
370,372
371,372
371,373
372,373
372,374
373,374
373,375
374,375
377,378
380,381
383,384
384,385
384,386
384,387
384,388
384,389
385,386
387,388
389,390
391,392
393,394
395,396
395,397
396,397
396,398
397,398
397,399
398,399
398,400
399,400
399,401
400,401
403,404
407,408
408,409
408,410
409,410
409,411
410,411
411,412
411,413
412,413
414,415
414,416
414,417
415,416
417,418
418,419
418,420
419,420
419,421
420,421
423,424
425,426
427,428
429,430
429,431
430,431
431,432
431,433
431,434
431,435
431,436
432,433
434,435
436,437
438,439
440,441
442,443
443,444
443,445
444,445
446,447
448,449
449,450
449,451
450,451
450,452
451,452
454,455
-----nextToken-----
2,4,7,9,10,12,14,16,18,22,24,26,28,32,34,35,39,41,42,45,47,51,52,57,58,61,64,65,68,73,77,78,80,87,88,91,93,97,98,100,105,106,107,109,114,115,119,123,130,131,132,133,138,139,140,141,142,145,149,156,157,158,159,164,165,166,167,168,169,173,174,178,179,184,186,189,190,191,195,197,201,203,205,212,213,214,215,221,222,223,229,230,231,232,238,239,240,247,248,250,251,253,258,259,264,265,268,269,272,279,280,282,283,287,288,290,291,295,298,299,303,304,311,312,315,317,321,322,324,330,331,334,336,340,341,343,349,350,352,355,357,358,363,364,365,375,376,378,379,381,382,386,388,390,392,394,401,402,404,405,406,413,416,421,422,424,426,428,433,435,437,439,441,445,447,452,453,455
-----computeFrom-----
49,50
49,51
55,56
55,57
59,60
59,61
71,72
71,73
82,83
82,84
83,84
83,85
84,85
84,86
85,86
85,87
89,90
89,91
94,95
94,96
101,102
101,103
121,122
121,123
125,126
125,127
126,127
126,128
134,135
134,136
147,148
147,149
151,152
151,153
152,153
152,154
160,161
160,162
176,177
176,178
208,209
208,210
225,226
225,227
242,243
242,244
262,263
262,264
266,267
266,268
274,275
274,276
296,297
296,298
301,302
301,303
307,308
307,309
313,314
313,315
326,327
326,328
332,333
332,334
345,346
345,347
353,354
353,355
360,361
360,362
368,369
368,370
370,371
370,372
396,397
396,398
409,410
409,411
411,412
411,413
449,450
449,451
-----guardedBy-----
105,238
212,221
213,222
229,238
230,239
303,357
363,437
375,388
402,422
401,437
404,439
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static voidprocess_rtp(struct cfg *cf, double ctime, int alarm_tick){    int readyfd, skipfd, ridx;    struct rtpp_session *sp;    struct rtp_packet *packet;    int timeout_detected;    /* Relay RTP/RTCP */    skipfd = 0;    for (readyfd = 1; readyfd < cf->nsessions; readyfd++) {	sp = cf->sessions[readyfd];	if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&	  sp->sidx[0] == readyfd) {	    switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }	    if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }	}	if (cf->pfds[readyfd].fd == -1) {	    /* Deleted session, count and move one */	    skipfd++;	    continue;	}	/* Find index of the call leg within a session */	for (ridx = 0; ridx < 2; ridx++)	    if (cf->pfds[readyfd].fd == sp->fds[ridx])		break;	/*	 * Can't happen.	 */	assert(ridx != 2);	/* Compact pfds[] and sessions[] by eliminating removed sessions */	if (skipfd > 0) {	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];	    sp->sidx[ridx] = readyfd - skipfd;;	}	if (sp->complete != 0) {	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);	    if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }	}    }    /* Trim any deleted sessions at the end */    cf->nsessions -= skipfd;}
static void
process_rtp(struct cfg *cf, double ctime, int alarm_tick)
process_rtp
struct cfg *cf
struct cfg
cfg
*cf
*
cf
double ctime
double
ctime
ctime
int alarm_tick
int
alarm_tick
alarm_tick
{    int readyfd, skipfd, ridx;    struct rtpp_session *sp;    struct rtp_packet *packet;    int timeout_detected;    /* Relay RTP/RTCP */    skipfd = 0;    for (readyfd = 1; readyfd < cf->nsessions; readyfd++) {	sp = cf->sessions[readyfd];	if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&	  sp->sidx[0] == readyfd) {	    switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }	    if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }	}	if (cf->pfds[readyfd].fd == -1) {	    /* Deleted session, count and move one */	    skipfd++;	    continue;	}	/* Find index of the call leg within a session */	for (ridx = 0; ridx < 2; ridx++)	    if (cf->pfds[readyfd].fd == sp->fds[ridx])		break;	/*	 * Can't happen.	 */	assert(ridx != 2);	/* Compact pfds[] and sessions[] by eliminating removed sessions */	if (skipfd > 0) {	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];	    sp->sidx[ridx] = readyfd - skipfd;;	}	if (sp->complete != 0) {	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);	    if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }	}    }    /* Trim any deleted sessions at the end */    cf->nsessions -= skipfd;}
int readyfd, skipfd, ridx;
int readyfd, skipfd, ridx;
int
readyfd
readyfd
skipfd
skipfd
ridx
ridx
struct rtpp_session *sp;
struct rtpp_session *sp;
struct rtpp_session
rtpp_session
*sp
*
sp
struct rtp_packet *packet;
struct rtp_packet *packet;
struct rtp_packet
rtp_packet
*packet
*
packet
int timeout_detected;
int timeout_detected;
int
timeout_detected
timeout_detected
skipfd = 0;
skipfd = 0
skipfd
skipfd
0
for (readyfd = 1; readyfd < cf->nsessions; readyfd++) {	sp = cf->sessions[readyfd];	if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&	  sp->sidx[0] == readyfd) {	    switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }	    if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }	}	if (cf->pfds[readyfd].fd == -1) {	    /* Deleted session, count and move one */	    skipfd++;	    continue;	}	/* Find index of the call leg within a session */	for (ridx = 0; ridx < 2; ridx++)	    if (cf->pfds[readyfd].fd == sp->fds[ridx])		break;	/*	 * Can't happen.	 */	assert(ridx != 2);	/* Compact pfds[] and sessions[] by eliminating removed sessions */	if (skipfd > 0) {	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];	    sp->sidx[ridx] = readyfd - skipfd;;	}	if (sp->complete != 0) {	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);	    if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }	}    }
readyfd = 1;
readyfd = 1
readyfd
readyfd
1
readyfd < cf->nsessions
readyfd
readyfd
cf->nsessions
cf
cf
nsessions
readyfd++
readyfd
readyfd
{	sp = cf->sessions[readyfd];	if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&	  sp->sidx[0] == readyfd) {	    switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }	    if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }	}	if (cf->pfds[readyfd].fd == -1) {	    /* Deleted session, count and move one */	    skipfd++;	    continue;	}	/* Find index of the call leg within a session */	for (ridx = 0; ridx < 2; ridx++)	    if (cf->pfds[readyfd].fd == sp->fds[ridx])		break;	/*	 * Can't happen.	 */	assert(ridx != 2);	/* Compact pfds[] and sessions[] by eliminating removed sessions */	if (skipfd > 0) {	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];	    sp->sidx[ridx] = readyfd - skipfd;;	}	if (sp->complete != 0) {	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);	    if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }	}    }
sp = cf->sessions[readyfd];
sp = cf->sessions[readyfd]
sp
sp
cf->sessions[readyfd]
cf->sessions
cf
cf
sessions
readyfd
readyfd
if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&	  sp->sidx[0] == readyfd) {	    switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }	    if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }	}
alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&	  sp->sidx[0] == readyfd
alarm_tick != 0 && sp != NULL && sp->rtcp != NULL
alarm_tick != 0 && sp != NULL
alarm_tick != 0
alarm_tick
alarm_tick
0
sp != NULL
sp
sp
NULL
NULL
sp->rtcp != NULL
sp->rtcp
sp
sp
rtcp
NULL
NULL
sp->sidx[0] == readyfd
sp->sidx[0]
sp->sidx
sp
sp
sidx
0
readyfd
readyfd
{	    switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }	    if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }	}
switch(sp->ttl_mode) {	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }
sp->ttl_mode
sp
sp
ttl_mode
{	      case TTL_UNIFIED:		timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);		break;	      case TTL_INDEPENDENT:		timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);		break;	      default:		/* Shouldn't happen[tm] */		abort();		break;	    }
case TTL_UNIFIED:
TTL_UNIFIED
TTL_UNIFIED
timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0);
timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0)
timeout_detected
timeout_detected
(sp->ttl[0] == 0 && sp->ttl[1] == 0)
sp->ttl[0] == 0 && sp->ttl[1] == 0
sp->ttl[0] == 0
sp->ttl[0]
sp->ttl
sp
sp
ttl
0
0
sp->ttl[1] == 0
sp->ttl[1]
sp->ttl
sp
sp
ttl
1
0
break;
case TTL_INDEPENDENT:
TTL_INDEPENDENT
TTL_INDEPENDENT
timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0);
timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0)
timeout_detected
timeout_detected
(sp->ttl[0] == 0 || sp->ttl[1] == 0)
sp->ttl[0] == 0 || sp->ttl[1] == 0
sp->ttl[0] == 0
sp->ttl[0]
sp->ttl
sp
sp
ttl
0
0
sp->ttl[1] == 0
sp->ttl[1]
sp->ttl
sp
sp
ttl
1
0
break;
default:
abort();
abort()
abort
abort
break;
if (timeout_detected != 0) {		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    } else {		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }
timeout_detected != 0
timeout_detected
timeout_detected
0
{		rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");		do_timeout_notification(sp);		remove_session(cf, sp);	    }
rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout");
rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout")
rtpp_log_write
rtpp_log_write
RTPP_LOG_INFO
RTPP_LOG_INFO
sp->log
sp
sp
log
"session timeout"
do_timeout_notification(sp);
do_timeout_notification(sp)
do_timeout_notification
do_timeout_notification
sp
sp
remove_session(cf, sp);
remove_session(cf, sp)
remove_session
remove_session
cf
cf
sp
sp
{		if (sp->ttl[0] != 0)		    sp->ttl[0]--;		if (sp->ttl[1] != 0)		    sp->ttl[1]--;	    }
if (sp->ttl[0] != 0)		    sp->ttl[0]--;
sp->ttl[0] != 0
sp->ttl[0]
sp->ttl
sp
sp
ttl
0
0
sp->ttl[0]--;
sp->ttl[0]--
sp->ttl[0]
sp->ttl
sp
sp
ttl
0
if (sp->ttl[1] != 0)		    sp->ttl[1]--;
sp->ttl[1] != 0
sp->ttl[1]
sp->ttl
sp
sp
ttl
1
0
sp->ttl[1]--;
sp->ttl[1]--
sp->ttl[1]
sp->ttl
sp
sp
ttl
1
if (cf->pfds[readyfd].fd == -1) {	    /* Deleted session, count and move one */	    skipfd++;	    continue;	}
cf->pfds[readyfd].fd == -1
cf->pfds[readyfd].fd
cf->pfds[readyfd]
cf->pfds
cf
cf
pfds
readyfd
readyfd
fd
-1
1
{	    /* Deleted session, count and move one */	    skipfd++;	    continue;	}
skipfd++;
skipfd++
skipfd
skipfd
continue;
for (ridx = 0; ridx < 2; ridx++)	    if (cf->pfds[readyfd].fd == sp->fds[ridx])		break;
ridx = 0;
ridx = 0
ridx
ridx
0
ridx < 2
ridx
ridx
2
ridx++
ridx
ridx
if (cf->pfds[readyfd].fd == sp->fds[ridx])		break;
cf->pfds[readyfd].fd == sp->fds[ridx]
cf->pfds[readyfd].fd
cf->pfds[readyfd]
cf->pfds
cf
cf
pfds
readyfd
readyfd
fd
sp->fds[ridx]
sp->fds
sp
sp
fds
ridx
ridx
break;
assert(ridx != 2);
assert(ridx != 2)
assert
assert
ridx != 2
ridx
ridx
2
if (skipfd > 0) {	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];	    sp->sidx[ridx] = readyfd - skipfd;;	}
skipfd > 0
skipfd
skipfd
0
{	    cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];	    cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];	    sp->sidx[ridx] = readyfd - skipfd;;	}
cf->pfds[readyfd - skipfd] = cf->pfds[readyfd];
cf->pfds[readyfd - skipfd] = cf->pfds[readyfd]
cf->pfds[readyfd - skipfd]
cf->pfds
cf
cf
pfds
readyfd - skipfd
readyfd
readyfd
skipfd
skipfd
cf->pfds[readyfd]
cf->pfds
cf
cf
pfds
readyfd
readyfd
cf->sessions[readyfd - skipfd] = cf->sessions[readyfd];
cf->sessions[readyfd - skipfd] = cf->sessions[readyfd]
cf->sessions[readyfd - skipfd]
cf->sessions
cf
cf
sessions
readyfd - skipfd
readyfd
readyfd
skipfd
skipfd
cf->sessions[readyfd]
cf->sessions
cf
cf
sessions
readyfd
readyfd
sp->sidx[ridx] = readyfd - skipfd;
sp->sidx[ridx] = readyfd - skipfd
sp->sidx[ridx]
sp->sidx
sp
sp
sidx
ridx
ridx
readyfd - skipfd
readyfd
readyfd
skipfd
skipfd
;
if (sp->complete != 0) {	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);	    if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }	}
sp->complete != 0
sp->complete
sp
sp
complete
0
{	    if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);	    if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }	}
if ((cf->pfds[readyfd].revents & POLLIN) != 0)		rxmit_packets(cf, sp, ridx, ctime);
(cf->pfds[readyfd].revents & POLLIN) != 0
(cf->pfds[readyfd].revents & POLLIN)
cf->pfds[readyfd].revents & POLLIN
cf->pfds[readyfd].revents
cf->pfds[readyfd]
cf->pfds
cf
cf
pfds
readyfd
readyfd
revents
POLLIN
POLLIN
0
rxmit_packets(cf, sp, ridx, ctime);
rxmit_packets(cf, sp, ridx, ctime)
rxmit_packets
rxmit_packets
cf
cf
sp
sp
ridx
ridx
ctime
ctime
if (sp->resizers[ridx].output_nsamples > 0) {		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }
sp->resizers[ridx].output_nsamples > 0
sp->resizers[ridx].output_nsamples
sp->resizers[ridx]
sp->resizers
sp
sp
resizers
ridx
ridx
output_nsamples
0
{		while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}	    }
while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL) {		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}
(packet = rtp_resizer_get(&sp->resizers[ridx], ctime)) != NULL
(packet = rtp_resizer_get(&sp->resizers[ridx], ctime))
packet = rtp_resizer_get(&sp->resizers[ridx], ctime)
packet
packet
rtp_resizer_get(&sp->resizers[ridx], ctime)
rtp_resizer_get
rtp_resizer_get
&sp->resizers[ridx]
sp->resizers[ridx]
sp->resizers
sp
sp
resizers
ridx
ridx
ctime
ctime
NULL
NULL
{		    send_packet(cf, sp, ridx, packet);		    rtp_packet_free(packet);		}
send_packet(cf, sp, ridx, packet);
send_packet(cf, sp, ridx, packet)
send_packet
send_packet
cf
cf
sp
sp
ridx
ridx
packet
packet
rtp_packet_free(packet);
rtp_packet_free(packet)
rtp_packet_free
rtp_packet_free
packet
packet
cf->nsessions -= skipfd;
cf->nsessions -= skipfd
cf->nsessions
cf
cf
nsessions
skipfd
skipfd
-----joern-----
(146,289,0)
(40,151,0)
(133,183,0)
(170,89,0)
(212,228,0)
(143,23,0)
(143,287,0)
(78,40,0)
(153,246,0)
(196,178,0)
(178,196,0)
(23,228,0)
(220,161,0)
(176,79,0)
(46,289,0)
(122,185,0)
(281,190,0)
(186,112,0)
(203,55,0)
(192,76,0)
(99,139,0)
(211,257,0)
(1,69,0)
(0,149,0)
(107,77,0)
(14,161,0)
(141,154,0)
(111,19,0)
(285,243,0)
(239,283,0)
(240,223,0)
(93,199,0)
(237,183,0)
(177,213,0)
(94,55,0)
(69,288,0)
(89,185,0)
(107,125,0)
(228,19,0)
(16,154,0)
(251,137,0)
(73,253,0)
(114,213,0)
(125,107,0)
(113,247,0)
(126,121,0)
(47,6,0)
(235,239,0)
(269,73,0)
(118,228,0)
(71,161,0)
(8,185,0)
(101,228,0)
(167,228,0)
(18,37,0)
(210,101,0)
(101,100,0)
(83,228,0)
(263,286,0)
(273,142,0)
(183,140,0)
(48,55,0)
(12,228,0)
(206,232,0)
(144,55,0)
(231,6,0)
(116,176,0)
(219,192,0)
(73,69,0)
(268,286,0)
(169,139,0)
(278,196,0)
(103,254,0)
(52,286,0)
(112,19,0)
(100,101,0)
(30,140,0)
(232,36,0)
(239,196,0)
(256,275,0)
(274,229,0)
(26,212,0)
(243,238,0)
(188,283,0)
(49,177,0)
(127,159,0)
(257,196,0)
(217,239,0)
(118,275,0)
(84,89,0)
(259,161,0)
(259,228,0)
(123,40,0)
(104,233,0)
(253,286,0)
(44,269,0)
(259,130,0)
(82,52,0)
(221,12,0)
(159,17,0)
(177,233,0)
(61,26,0)
(209,17,0)
(178,248,0)
(18,246,0)
(229,274,0)
(280,238,0)
(282,76,0)
(246,126,0)
(179,161,0)
(189,55,0)
(287,143,0)
(28,272,0)
(157,3,0)
(147,223,0)
(226,283,0)
(134,259,0)
(106,156,0)
(249,136,0)
(233,161,0)
(241,175,0)
(112,186,0)
(42,228,0)
(125,39,0)
(258,58,0)
(106,121,0)
(39,268,0)
(68,288,0)
(17,159,0)
(280,226,0)
(243,263,0)
(168,187,0)
(191,228,0)
(58,223,0)
(187,269,0)
(68,71,0)
(140,183,0)
(273,143,0)
(264,130,0)
(33,106,0)
(124,200,0)
(281,228,0)
(260,205,0)
(175,236,0)
(268,39,0)
(126,246,0)
(205,260,0)
(263,243,0)
(122,126,0)
(90,14,0)
(200,283,0)
(244,187,0)
(110,178,0)
(178,124,0)
(247,228,0)
(171,254,0)
(56,76,0)
(240,0,0)
(238,243,0)
(64,137,0)
(60,247,0)
(156,0,0)
(191,200,0)
(43,37,0)
(52,233,0)
(197,19,0)
(163,19,0)
(222,79,0)
(50,149,0)
(142,274,0)
(230,63,0)
(239,105,0)
(202,204,0)
(232,161,0)
(255,116,0)
(51,140,0)
(192,228,0)
(246,18,0)
(216,192,0)
(53,263,0)
(124,178,0)
(40,228,0)
(242,83,0)
(10,28,0)
(190,281,0)
(275,149,0)
(15,165,0)
(70,55,0)
(173,176,0)
(214,263,0)
(200,191,0)
(9,179,0)
(71,68,0)
(24,79,0)
(1,161,0)
(277,199,0)
(132,118,0)
(185,89,0)
(92,236,0)
(130,286,0)
(270,228,0)
(31,167,0)
(79,283,0)
(39,125,0)
(187,286,0)
(245,165,0)
(39,161,0)
(143,273,0)
(162,239,0)
(200,124,0)
(234,83,0)
(2,71,0)
(135,224,0)
(208,260,0)
(25,42,0)
(212,26,0)
(275,118,0)
(85,226,0)
(98,229,0)
(22,14,0)
(152,199,0)
(182,13,0)
(117,142,0)
(224,287,0)
(228,259,0)
(205,51,0)
(243,161,0)
(226,280,0)
(149,275,0)
(276,118,0)
(279,161,0)
(155,186,0)
(205,14,0)
(65,272,0)
(28,36,0)
(183,286,0)
(69,1,0)
(277,273,0)
(232,73,0)
(239,286,0)
(63,137,0)
(269,36,0)
(63,161,0)
(166,36,0)
(229,228,0)
(223,58,0)
(167,17,0)
(223,240,0)
(253,73,0)
(185,122,0)
(3,286,0)
(236,228,0)
(80,167,0)
(267,37,0)
(67,238,0)
(108,106,0)
(174,19,0)
(139,36,0)
(59,165,0)
(218,12,0)
(7,58,0)
(199,228,0)
(198,3,0)
(145,278,0)
(96,191,0)
(102,19,0)
(131,12,0)
(23,143,0)
(42,151,0)
(195,175,0)
(289,228,0)
(199,277,0)
(213,114,0)
(142,273,0)
(0,240,0)
(88,212,0)
(75,1,0)
(194,23,0)
(32,204,0)
(11,196,0)
(66,100,0)
(175,151,0)
(239,228,0)
(137,286,0)
(72,36,0)
(284,186,0)
(136,283,0)
(121,55,0)
(186,283,0)
(71,36,0)
(148,283,0)
(51,288,0)
(130,259,0)
(196,278,0)
(17,167,0)
(137,63,0)
(81,55,0)
(79,176,0)
(193,156,0)
(91,268,0)
(261,212,0)
(1,3,0)
(156,55,0)
(150,120,0)
(190,13,0)
(213,177,0)
(224,35,0)
(257,105,0)
(97,165,0)
(34,281,0)
(184,253,0)
(62,274,0)
(252,213,0)
(176,116,0)
(269,205,0)
(265,200,0)
(0,156,0)
(13,190,0)
(247,226,0)
(20,268,0)
(226,247,0)
(172,191,0)
(207,121,0)
(121,126,0)
(29,39,0)
(89,228,0)
(140,161,0)
(5,101,0)
(158,52,0)
(24,228,0)
(21,236,0)
(100,68,0)
(3,1,0)
(180,240,0)
(45,224,0)
(57,125,0)
(37,18,0)
(260,286,0)
(73,232,0)
(120,150,0)
(236,175,0)
(181,24,0)
(77,107,0)
(164,239,0)
(225,253,0)
(128,232,0)
(58,228,0)
(40,286,0)
(250,18,0)
(142,161,0)
(274,142,0)
(233,52,0)
(201,277,0)
(227,165,0)
(37,228,0)
(12,248,0)
(129,130,0)
(95,229,0)
(266,190,0)
(254,283,0)
(273,277,0)
(4,12,0)
(269,100,0)
(149,0,0)
(238,280,0)
(79,24,0)
(271,77,0)
(36,165,0)
(87,281,0)
(119,86,0)
(41,120,0)
(83,120,0)
(138,23,0)
(120,83,0)
(76,192,0)
(54,114,0)
(269,165,0)
(160,71,0)
(215,260,0)
(38,165,0)
(14,36,0)
(126,122,0)
(76,56,0)
(140,51,0)
(233,177,0)
(100,283,0)
(262,122,0)
(12,283,0)
(12,286,0)
(14,205,0)
(287,224,0)
(115,24,0)
(27,165,0)
(69,1,1)
(121,126,1)
(140,30,1)
(205,260,1)
(17,209,1)
(91,20,1)
(222,24,1)
(12,286,1)
(186,283,1)
(112,186,1)
(196,178,1)
(159,17,1)
(233,161,1)
(23,194,1)
(142,161,1)
(193,289,1)
(40,123,1)
(78,42,1)
(39,161,1)
(260,215,1)
(40,228,1)
(289,228,1)
(71,36,1)
(201,199,1)
(223,147,1)
(275,118,1)
(67,243,1)
(213,177,1)
(178,110,1)
(39,268,1)
(247,60,1)
(226,283,1)
(239,283,1)
(223,58,1)
(277,199,1)
(259,130,1)
(164,278,1)
(120,41,1)
(268,91,1)
(127,17,1)
(263,53,1)
(217,164,1)
(46,287,1)
(131,4,1)
(9,26,1)
(101,228,1)
(3,157,1)
(213,252,1)
(289,146,1)
(179,9,1)
(1,3,1)
(260,286,1)
(256,118,1)
(149,50,1)
(23,228,1)
(83,234,1)
(153,18,1)
(54,213,1)
(63,137,1)
(85,247,1)
(80,106,1)
(108,94,1)
(172,11,1)
(211,239,1)
(66,101,1)
(136,249,1)
(5,210,1)
(269,36,1)
(130,264,1)
(12,218,1)
(93,23,1)
(52,286,1)
(139,99,1)
(109,280,1)
(275,256,1)
(26,61,1)
(251,64,1)
(14,161,1)
(84,170,1)
(125,57,1)
(146,46,1)
(140,183,1)
(43,207,1)
(178,248,1)
(130,286,1)
(271,125,1)
(37,228,1)
(129,270,1)
(183,286,1)
(133,205,1)
(14,36,1)
(100,283,1)
(180,223,1)
(189,48,1)
(1,161,1)
(62,229,1)
(262,185,1)
(274,229,1)
(252,177,1)
(187,286,1)
(116,255,1)
(192,228,1)
(205,14,1)
(58,7,1)
(79,283,1)
(138,224,1)
(115,114,1)
(161,279,1)
(94,156,1)
(26,212,1)
(257,211,1)
(249,280,1)
(226,85,1)
(226,247,1)
(212,88,1)
(132,193,1)
(199,228,1)
(247,228,1)
(224,45,1)
(145,196,1)
(188,107,1)
(178,124,1)
(239,196,1)
(266,281,1)
(25,175,1)
(20,287,1)
(191,228,1)
(175,236,1)
(148,188,1)
(71,161,1)
(176,79,1)
(0,240,1)
(229,228,1)
(115,12,1)
(114,213,1)
(232,161,1)
(285,263,1)
(233,104,1)
(58,228,1)
(187,244,1)
(280,226,1)
(24,228,1)
(239,228,1)
(264,129,1)
(76,282,1)
(56,76,1)
(134,130,1)
(4,114,1)
(241,106,1)
(52,82,1)
(106,156,1)
(108,189,1)
(42,228,1)
(123,78,1)
(234,242,1)
(243,263,1)
(255,176,1)
(13,182,1)
(159,127,1)
(228,259,1)
(246,18,1)
(160,2,1)
(11,116,1)
(171,103,1)
(20,150,1)
(220,36,1)
(139,36,1)
(120,83,1)
(137,251,1)
(117,274,1)
(48,289,1)
(118,276,1)
(270,63,1)
(128,206,1)
(274,62,1)
(98,277,1)
(140,161,1)
(282,192,1)
(287,143,1)
(9,65,1)
(216,159,1)
(29,268,1)
(209,167,1)
(122,262,1)
(8,89,1)
(71,160,1)
(144,121,1)
(185,8,1)
(215,208,1)
(243,285,1)
(147,58,1)
(175,195,1)
(126,122,1)
(116,176,1)
(61,212,1)
(42,25,1)
(191,96,1)
(142,274,1)
(277,201,1)
(31,80,1)
(33,108,1)
(18,250,1)
(9,278,1)
(156,0,1)
(41,83,1)
(45,135,1)
(242,13,1)
(24,181,1)
(162,217,1)
(179,161,1)
(250,37,1)
(157,198,1)
(167,228,1)
(96,172,1)
(273,142,1)
(254,283,1)
(243,161,1)
(182,190,1)
(3,286,1)
(263,286,1)
(198,73,1)
(194,138,1)
(108,144,1)
(28,36,1)
(214,254,1)
(90,260,1)
(103,283,1)
(87,159,1)
(219,216,1)
(20,40,1)
(49,233,1)
(110,124,1)
(155,284,1)
(276,132,1)
(167,31,1)
(253,184,1)
(177,233,1)
(236,228,1)
(74,269,1)
(143,273,1)
(73,232,1)
(238,243,1)
(212,228,1)
(229,95,1)
(281,34,1)
(259,161,1)
(238,67,1)
(261,68,1)
(14,22,1)
(17,167,1)
(176,173,1)
(200,191,1)
(92,241,1)
(95,98,1)
(28,10,1)
(137,286,1)
(244,168,1)
(269,44,1)
(1,75,1)
(76,192,1)
(200,265,1)
(79,24,1)
(237,133,1)
(265,191,1)
(230,179,1)
(152,93,1)
(284,254,1)
(183,237,1)
(36,72,1)
(50,275,1)
(77,271,1)
(11,257,1)
(106,33,1)
(82,158,1)
(34,87,1)
(239,286,1)
(278,145,1)
(89,84,1)
(239,235,1)
(13,190,1)
(20,13,1)
(149,275,1)
(177,49,1)
(72,166,1)
(89,228,1)
(158,26,1)
(261,139,1)
(44,187,1)
(107,77,1)
(225,139,1)
(269,205,1)
(113,238,1)
(73,253,1)
(218,221,1)
(125,39,1)
(280,238,1)
(51,140,1)
(207,289,1)
(18,37,1)
(269,100,1)
(2,100,1)
(181,115,1)
(210,51,1)
(269,73,1)
(64,230,1)
(99,169,1)
(233,52,1)
(190,281,1)
(135,228,1)
(278,196,1)
(224,35,1)
(230,161,1)
(68,71,1)
(114,54,1)
(21,92,1)
(186,155,1)
(88,261,1)
(103,136,1)
(287,224,1)
(53,214,1)
(104,52,1)
(232,36,1)
(22,90,1)
(185,89,1)
(100,101,1)
(101,5,1)
(267,43,1)
(281,228,1)
(258,149,1)
(284,109,1)
(192,219,1)
(142,117,1)
(259,134,1)
(184,225,1)
(107,125,1)
(12,228,1)
(235,162,1)
(150,120,1)
(240,223,1)
(39,29,1)
(12,283,1)
(65,28,1)
(143,23,1)
(279,220,1)
(106,121,1)
(30,183,1)
(173,79,1)
(254,171,1)
(37,267,1)
(221,131,1)
(10,107,1)
(232,128,1)
(79,222,1)
(9,116,1)
(240,180,1)
(200,283,1)
(268,286,1)
(236,21,1)
(273,277,1)
(83,228,1)
(126,246,1)
(12,248,1)
(57,39,1)
(63,161,1)
(100,66,1)
(40,286,1)
(169,112,1)
(199,152,1)
(253,286,1)
(206,253,1)
(118,228,1)
(208,69,1)
(168,63,1)
(195,236,1)
(246,153,1)
(124,200,1)
(75,3,1)
(7,258,1)
(87,56,1)
(283,148,1)
(190,266,1)
(0,149,1)
(60,113,1)
(170,246,1)
(122,185,1)
(257,196,1)
(136,283,1)
(95,277,2)
(199,228,2)
(40,106,2)
(239,196,2)
(275,118,2)
(257,196,2)
(140,139,2)
(205,139,2)
(11,278,2)
(191,228,2)
(122,185,2)
(79,24,2)
(120,13,2)
(212,228,2)
(175,236,2)
(17,167,2)
(54,26,2)
(12,286,2)
(14,36,2)
(133,139,2)
(114,213,2)
(135,63,2)
(159,17,2)
(137,63,2)
(90,139,2)
(242,13,2)
(238,243,2)
(241,106,2)
(89,246,2)
(230,63,2)
(94,289,2)
(191,116,2)
(280,238,2)
(136,283,2)
(191,278,2)
(85,254,2)
(2,139,2)
(285,254,2)
(134,63,2)
(237,139,2)
(100,283,2)
(30,139,2)
(49,26,2)
(52,26,2)
(115,26,2)
(246,18,2)
(58,228,2)
(214,254,2)
(56,159,2)
(269,100,2)
(99,107,2)
(88,107,2)
(173,26,2)
(267,289,2)
(96,116,2)
(65,107,2)
(39,161,2)
(289,228,2)
(140,161,2)
(23,224,2)
(276,289,2)
(4,114,2)
(24,228,2)
(233,52,2)
(198,139,2)
(131,114,2)
(139,36,2)
(171,280,2)
(167,228,2)
(33,287,2)
(175,106,2)
(50,289,2)
(120,83,2)
(201,23,2)
(13,106,2)
(0,240,2)
(116,26,2)
(188,107,2)
(183,139,2)
(263,254,2)
(142,274,2)
(68,71,2)
(84,246,2)
(89,228,2)
(181,26,2)
(96,278,2)
(78,106,2)
(79,283,2)
(14,161,2)
(26,107,2)
(136,280,2)
(66,139,2)
(130,286,2)
(266,106,2)
(12,114,2)
(43,289,2)
(196,178,2)
(0,289,2)
(28,107,2)
(190,281,2)
(48,289,2)
(132,289,2)
(226,254,2)
(68,139,2)
(236,106,2)
(112,107,2)
(63,63,2)
(167,106,2)
(3,286,2)
(69,1,2)
(196,116,2)
(281,106,2)
(139,107,2)
(190,106,2)
(269,36,2)
(264,63,2)
(98,277,2)
(128,139,2)
(9,63,2)
(234,13,2)
(218,114,2)
(284,107,2)
(251,63,2)
(164,278,2)
(76,192,2)
(278,116,2)
(126,289,2)
(156,0,2)
(274,229,2)
(217,278,2)
(57,63,2)
(176,79,2)
(143,273,2)
(177,233,2)
(215,139,2)
(206,139,2)
(157,139,2)
(52,286,2)
(232,36,2)
(13,190,2)
(130,63,2)
(253,139,2)
(158,26,2)
(183,286,2)
(225,139,2)
(110,278,2)
(289,287,2)
(73,253,2)
(226,283,2)
(76,159,2)
(67,254,2)
(281,228,2)
(108,287,2)
(71,161,2)
(194,224,2)
(160,139,2)
(23,228,2)
(287,224,2)
(219,159,2)
(243,254,2)
(269,73,2)
(180,149,2)
(82,26,2)
(254,107,2)
(221,114,2)
(247,254,2)
(100,139,2)
(233,26,2)
(145,278,2)
(287,63,2)
(278,196,2)
(176,26,2)
(185,246,2)
(261,107,2)
(71,36,2)
(254,280,2)
(117,277,2)
(118,228,2)
(233,161,2)
(71,139,2)
(18,289,2)
(196,278,2)
(252,26,2)
(26,212,2)
(0,149,2)
(193,289,2)
(53,254,2)
(177,26,2)
(265,116,2)
(11,116,2)
(107,63,2)
(41,13,2)
(101,228,2)
(1,139,2)
(113,254,2)
(12,228,2)
(106,156,2)
(172,278,2)
(10,107,2)
(58,149,2)
(123,106,2)
(116,176,2)
(178,124,2)
(106,121,2)
(222,26,2)
(277,23,2)
(178,278,2)
(80,106,2)
(152,23,2)
(216,159,2)
(79,26,2)
(184,139,2)
(277,199,2)
(39,63,2)
(228,259,2)
(185,89,2)
(229,228,2)
(129,63,2)
(145,116,2)
(75,139,2)
(34,106,2)
(121,289,2)
(25,106,2)
(255,26,2)
(239,286,2)
(212,107,2)
(124,116,2)
(282,159,2)
(256,289,2)
(186,283,2)
(1,3,2)
(254,283,2)
(109,280,2)
(210,139,2)
(199,23,2)
(187,286,2)
(178,116,2)
(246,289,2)
(29,63,2)
(148,107,2)
(18,37,2)
(92,106,2)
(150,13,2)
(224,35,2)
(263,286,2)
(63,161,2)
(207,289,2)
(8,246,2)
(37,289,2)
(182,106,2)
(64,63,2)
(12,283,2)
(275,289,2)
(110,116,2)
(121,126,2)
(257,278,2)
(12,248,2)
(17,106,2)
(211,278,2)
(101,139,2)
(280,254,2)
(205,14,2)
(56,76,2)
(226,247,2)
(142,161,2)
(258,149,2)
(223,58,2)
(243,161,2)
(268,286,2)
(73,232,2)
(235,278,2)
(273,23,2)
(93,23,2)
(269,205,2)
(137,286,2)
(126,122,2)
(200,116,2)
(103,280,2)
(100,101,2)
(274,277,2)
(232,161,2)
(42,228,2)
(223,149,2)
(224,63,2)
(143,224,2)
(46,287,2)
(147,149,2)
(42,106,2)
(228,63,2)
(265,278,2)
(270,63,2)
(239,228,2)
(243,263,2)
(5,139,2)
(171,107,2)
(179,63,2)
(24,26,2)
(104,26,2)
(200,191,2)
(239,283,2)
(178,248,2)
(159,106,2)
(87,106,2)
(172,116,2)
(283,107,2)
(250,289,2)
(126,246,2)
(21,106,2)
(146,287,2)
(213,26,2)
(259,63,2)
(20,63,2)
(208,139,2)
(260,286,2)
(273,142,2)
(247,228,2)
(149,289,2)
(107,77,2)
(40,228,2)
(39,268,2)
(125,63,2)
(150,120,2)
(240,149,2)
(280,226,2)
(273,277,2)
(195,106,2)
(259,161,2)
(249,280,2)
(239,278,2)
(259,130,2)
(179,161,2)
(83,13,2)
(262,246,2)
(106,287,2)
(155,107,2)
(14,139,2)
(77,63,2)
(31,106,2)
(240,223,2)
(60,254,2)
(83,228,2)
(140,183,2)
(205,260,2)
(192,228,2)
(7,149,2)
(124,278,2)
(51,140,2)
(1,161,2)
(143,23,2)
(253,286,2)
(61,107,2)
(144,289,2)
(156,289,2)
(138,224,2)
(232,139,2)
(186,107,2)
(238,254,2)
(103,107,2)
(107,125,2)
(124,200,2)
(192,159,2)
(200,283,2)
(229,277,2)
(91,63,2)
(114,26,2)
(236,228,2)
(118,289,2)
(125,39,2)
(278,278,2)
(28,36,2)
(271,63,2)
(37,228,2)
(73,139,2)
(69,139,2)
(287,143,2)
(209,106,2)
(213,177,2)
(112,186,2)
(142,277,2)
(200,278,2)
(127,106,2)
(63,137,2)
(170,246,2)
(260,139,2)
(189,289,2)
(45,63,2)
(62,277,2)
(22,139,2)
(169,107,2)
(153,289,2)
(122,246,2)
(268,63,2)
(162,278,2)
(149,275,2)
(3,139,2)
(40,286,2)
(51,139,2)
-----------------------------------
(0,sp->ttl[0] == 0 || sp->ttl[1] == 0)
(1,cf->pfds[readyfd])
(2,readyfd)
(3,cf->pfds)
(4,cf)
(5,sidx)
(6,)
(7,ttl)
(8,1)
(9,readyfd)
(10,skipfd)
(11,packet)
(12,rxmit_packets(cf, sp, ridx, ctime)
(13,sp->ttl[1] != 0)
(14,readyfd - skipfd)
(15,timeout_detected)
(16,switch(sp->ttl_mode)
(17,sp->ttl[0])
(18,sp->ttl[0])
(19,)
(20,cf)
(21,log)
(22,skipfd)
(23,sp != NULL)
(24,sp->resizers)
(25,sp)
(26,sp->complete != 0)
(27,sp)
(28,skipfd++)
(29,readyfd)
(30,readyfd)
(31,ttl)
(32,if (sp->ttl[1] != 0)
(33,0)
(34,ttl)
(35,int alarm_tick)
(36,skipfd = 0)
(37,sp->ttl)
(38,readyfd)
(39,cf->pfds[readyfd])
(40,remove_session(cf, sp)
(41,1)
(42,do_timeout_notification(sp)
(43,sp)
(44,skipfd)
(45,0)
(46,sp)
(47,if (sp->resizers[ridx].output_nsamples > 0)
(48,abort()
(49,revents)
(50,0)
(51,cf->sessions[readyfd - skipfd] = cf->sessions[readyfd])
(52,cf->pfds)
(53,pfds)
(54,0)
(55,)
(56,sp->ttl[0]--)
(57,fd)
(58,sp->ttl)
(59,for (readyfd = 1; readyfd < cf->nsessions; readyfd++)
(60,fds)
(61,0)
(62,0)
(63,readyfd < cf->nsessions)
(64,cf)
(65,continue;)
(66,ridx)
(67,fd)
(68,sp->sidx[ridx] = readyfd - skipfd)
(69,cf->pfds[readyfd - skipfd] = cf->pfds[readyfd])
(70,default:)
(71,readyfd - skipfd)
(72,0)
(73,cf->pfds[readyfd - skipfd])
(74,RET)
(75,readyfd)
(76,sp->ttl[0])
(77,-1)
(78,cf)
(79,sp->resizers[ridx])
(80,sp)
(81,case TTL_UNIFIED:)
(82,pfds)
(83,sp->ttl)
(84,ttl)
(85,ridx)
(86,)
(87,sp)
(88,complete)
(89,sp->ttl)
(90,readyfd)
(91,pfds)
(92,sp)
(93,sp)
(94,break;)
(95,sidx)
(96,resizers)
(97,skipfd)
(98,sp)
(99,0)
(100,sp->sidx[ridx])
(101,sp->sidx)
(102,for (ridx = 0; ridx < 2; ridx++)
(103,ridx)
(104,readyfd)
(105,)
(106,timeout_detected != 0)
(107,cf->pfds[readyfd].fd == -1)
(108,timeout_detected)
(109,break;)
(110,ctime)
(111,if (alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&\n\\n\\t  sp->sidx[0] == readyfd)
(112,assert(ridx != 2)
(113,sp)
(114,(cf->pfds[readyfd].revents & POLLIN)
(115,sp)
(116,sp->resizers[ridx].output_nsamples > 0)
(117,readyfd)
(118,sp->ttl)
(119,while ((packet = rtp_resizer_get(&sp->resizers[ridx], ctime)
(120,sp->ttl[1])
(121,timeout_detected = (sp->ttl[0] == 0 && sp->ttl[1] == 0)
(122,sp->ttl[1] == 0)
(123,sp)
(124,&sp->resizers[ridx])
(125,cf->pfds[readyfd].fd)
(126,sp->ttl[0] == 0 && sp->ttl[1] == 0)
(127,0)
(128,skipfd)
(129,cf)
(130,cf->sessions)
(131,sp)
(132,sp)
(133,cf)
(134,readyfd)
(135,alarm_tick)
(136,ridx++)
(137,cf->nsessions)
(138,sp)
(139,skipfd > 0)
(140,cf->sessions[readyfd])
(141,if (timeout_detected != 0)
(142,sp->sidx[0] == readyfd)
(143,sp != NULL && sp->rtcp != NULL &&\n\\n\\t  sp->sidx[0] == readyfd)
(144,break;)
(145,NULL)
(146,ttl_mode)
(147,1)
(148,0)
(149,sp->ttl[0] == 0)
(150,sp->ttl[1]--)
(151,)
(152,rtcp)
(153,0)
(154,)
(155,2)
(156,timeout_detected = (sp->ttl[0] == 0 || sp->ttl[1] == 0)
(157,pfds)
(158,cf)
(159,sp->ttl[0] != 0)
(160,skipfd)
(161,readyfd = 1)
(162,ridx)
(163,if (sp->complete != 0)
(164,cf)
(165,)
(166,skipfd)
(167,sp->ttl)
(168,cf)
(169,skipfd)
(170,sp)
(171,2)
(172,sp)
(173,output_nsamples)
(174,if (cf->pfds[readyfd].fd == -1)
(175,rtpp_log_write(RTPP_LOG_INFO, sp->log, "session timeout")
(176,sp->resizers[ridx].output_nsamples)
(177,cf->pfds[readyfd].revents)
(178,rtp_resizer_get(&sp->resizers[ridx], ctime)
(179,readyfd++)
(180,0)
(181,resizers)
(182,0)
(183,cf->sessions)
(184,pfds)
(185,sp->ttl[1])
(186,ridx != 2)
(187,cf->nsessions)
(188,ridx)
(189,break;)
(190,sp->ttl[1])
(191,sp->resizers)
(192,sp->ttl)
(193,timeout_detected)
(194,NULL)
(195,"session timeout")
(196,packet = rtp_resizer_get(&sp->resizers[ridx], ctime)
(197,if (skipfd > 0)
(198,cf)
(199,sp->rtcp)
(200,sp->resizers[ridx])
(201,NULL)
(202,if (sp->ttl[0] != 0)
(203,case TTL_INDEPENDENT:)
(204,)
(205,cf->sessions[readyfd - skipfd])
(206,readyfd)
(207,timeout_detected)
(208,cf)
(209,0)
(210,sp)
(211,packet)
(212,sp->complete)
(213,cf->pfds[readyfd].revents & POLLIN)
(214,cf)
(215,sessions)
(216,sp)
(217,sp)
(218,ctime)
(219,ttl)
(220,readyfd)
(221,ridx)
(222,ridx)
(223,sp->ttl[1])
(224,alarm_tick != 0)
(225,cf)
(226,sp->fds[ridx])
(227,ridx)
(228,sp = cf->sessions[readyfd])
(229,sp->sidx)
(230,readyfd)
(231,if ((cf->pfds[readyfd].revents & POLLIN)
(232,readyfd - skipfd)
(233,cf->pfds[readyfd])
(234,ttl)
(235,packet)
(236,sp->log)
(237,sessions)
(238,cf->pfds[readyfd].fd)
(239,send_packet(cf, sp, ridx, packet)
(240,sp->ttl[1] == 0)
(241,RTPP_LOG_INFO)
(242,sp)
(243,cf->pfds[readyfd])
(244,nsessions)
(245,packet)
(246,sp->ttl[0] == 0)
(247,sp->fds)
(248,double ctime)
(249,ridx)
(250,0)
(251,nsessions)
(252,POLLIN)
(253,cf->pfds)
(254,ridx < 2)
(255,0)
(256,0)
(257,rtp_packet_free(packet)
(258,sp)
(259,cf->sessions[readyfd])
(260,cf->sessions)
(261,sp)
(262,0)
(263,cf->pfds)
(264,sessions)
(265,ridx)
(266,1)
(267,ttl)
(268,cf->pfds)
(269,cf->nsessions -= skipfd)
(270,sp)
(271,1)
(272,)
(273,sp->rtcp != NULL &&\n\\n\\t  sp->sidx[0] == readyfd)
(274,sp->sidx[0])
(275,sp->ttl[0])
(276,ttl)
(277,sp->rtcp != NULL)
(278,(packet = rtp_resizer_get(&sp->resizers[ridx], ctime)
(279,1)
(280,cf->pfds[readyfd].fd == sp->fds[ridx])
(281,sp->ttl)
(282,0)
(283,ridx = 0)
(284,ridx)
(285,readyfd)
(286,struct cfg *cf)
(287,alarm_tick != 0 && sp != NULL && sp->rtcp != NULL &&\n\\n\\t  sp->sidx[0] == readyfd)
(288,)
(289,sp->ttl_mode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^