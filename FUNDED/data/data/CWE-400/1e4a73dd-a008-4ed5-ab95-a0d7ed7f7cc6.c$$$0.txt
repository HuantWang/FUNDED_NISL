-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
91,94
92,93
92,94
93,94
96,97
97,98
98,99
98,100
99,100
102,103
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,100,101,106,108
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(9,40,0)
(30,31,0)
(5,44,0)
(34,8,0)
(11,16,0)
(41,24,0)
(7,40,0)
(32,44,0)
(25,35,0)
(37,49,0)
(5,15,0)
(11,58,0)
(27,16,0)
(42,0,0)
(51,47,0)
(54,53,0)
(8,34,0)
(17,44,0)
(35,31,0)
(15,16,0)
(46,14,0)
(16,15,0)
(1,15,0)
(15,5,0)
(43,29,0)
(23,11,0)
(13,52,0)
(26,8,0)
(28,14,0)
(15,1,0)
(56,47,0)
(50,6,0)
(2,47,0)
(53,16,0)
(14,28,0)
(39,52,0)
(58,11,0)
(20,6,0)
(44,17,0)
(52,16,0)
(22,53,0)
(29,20,0)
(16,6,0)
(29,53,0)
(37,10,0)
(57,17,0)
(46,6,0)
(12,8,0)
(36,48,0)
(31,47,0)
(17,57,0)
(35,16,0)
(10,37,0)
(58,14,0)
(35,4,0)
(38,34,0)
(34,0,0)
(19,20,0)
(55,36,0)
(3,24,0)
(14,58,0)
(44,5,0)
(21,31,0)
(53,29,0)
(8,16,0)
(14,46,0)
(45,11,0)
(18,10,0)
(0,6,0)
(11,23,1)
(5,44,1)
(29,53,1)
(53,22,1)
(17,32,1)
(11,16,1)
(27,40,1)
(3,46,1)
(9,7,1)
(40,9,1)
(55,24,1)
(14,28,1)
(31,21,1)
(29,43,1)
(13,39,1)
(24,41,1)
(0,42,1)
(46,14,1)
(38,8,1)
(21,30,1)
(52,13,1)
(17,57,1)
(32,27,1)
(16,15,1)
(15,1,1)
(33,35,1)
(53,16,1)
(37,10,1)
(33,36,1)
(34,8,1)
(35,25,1)
(43,53,1)
(36,55,1)
(3,40,1)
(12,52,1)
(34,38,1)
(54,0,1)
(41,3,1)
(52,16,1)
(23,45,1)
(26,12,1)
(39,16,1)
(44,17,1)
(42,34,1)
(14,58,1)
(19,29,1)
(18,52,1)
(8,16,1)
(35,31,1)
(10,18,1)
(25,24,1)
(45,20,1)
(35,16,1)
(7,31,1)
(15,5,1)
(12,37,1)
(8,26,1)
(58,11,1)
(20,19,1)
(22,54,1)
(35,31,2)
(53,40,2)
(20,40,2)
(55,24,2)
(16,40,2)
(44,17,2)
(14,28,2)
(10,52,2)
(58,40,2)
(29,53,2)
(35,24,2)
(14,40,2)
(17,57,2)
(16,15,2)
(54,40,2)
(22,40,2)
(35,16,2)
(34,8,2)
(15,5,2)
(0,40,2)
(14,58,2)
(13,40,2)
(26,40,2)
(43,40,2)
(44,40,2)
(27,40,2)
(5,44,2)
(42,40,2)
(17,40,2)
(38,40,2)
(36,24,2)
(34,40,2)
(11,40,2)
(52,16,2)
(37,10,2)
(32,40,2)
(11,16,2)
(37,52,2)
(8,16,2)
(46,14,2)
(53,16,2)
(46,40,2)
(8,40,2)
(15,40,2)
(29,40,2)
(39,40,2)
(18,52,2)
(45,40,2)
(19,40,2)
(15,1,2)
(23,40,2)
(52,40,2)
(5,40,2)
(25,24,2)
(58,11,2)
(12,40,2)
-----------------------------------
(0,data[0].intOne = 0)
(1,struct _twoIntsStruct *)
(2,if(STATIC_CONST_FIVE!=5)
(3,STATIC_CONST_FIVE)
(4,)
(5,malloc(100*sizeof(struct _twoIntsStruct)
(6,)
(7,STATIC_CONST_FIVE)
(8,data[0])
(9,5)
(10,-1)
(11,data[0])
(12,data)
(13,NULL)
(14,(twoIntsStruct *)
(15,(struct _twoIntsStruct *)
(16,data = (struct _twoIntsStruct *)
(17,sizeof(struct _twoIntsStruct)
(18,1)
(19,0)
(20,data[0].intTwo = 0)
(21,NULL)
(22,0)
(23,0)
(24,STATIC_CONST_FIVE!=5)
(25,data)
(26,0)
(27,data)
(28,twoIntsStruct *)
(29,data[0].intTwo)
(30,data)
(31,data = NULL)
(32,100)
(33,RET)
(34,data[0].intOne)
(35,free(data)
(36,printLine("Benign, fixed string")
(37,exit(-1)
(38,intOne)
(39,data)
(40,STATIC_CONST_FIVE==5)
(41,5)
(42,0)
(43,intTwo)
(44,100*sizeof(struct _twoIntsStruct)
(45,data)
(46,printStructLine((twoIntsStruct *)
(47,)
(48,)
(49,)
(50,if (data == NULL)
(51,if(STATIC_CONST_FIVE==5)
(52,data == NULL)
(53,data[0])
(54,data)
(55,"Benign, fixed string")
(56,data)
(57,struct _twoIntsStruct)
(58,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^