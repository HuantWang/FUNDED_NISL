-----label-----
1
-----code-----
static tempfile_t *
tempfile_get(void)
{
  if (!tempfile_current) {
    tempfile_current = tempfile_new();
    return tempfile_current;
  }

  /* get file size */
  size_t size = tempfile_size(tempfile_current);

  /* if the file size reaches TEMPFILE_MAX_SIZE, return new temporary file */
  if (size > TEMPFILE_MAX_SIZE) {
    tempfile_current = tempfile_new();
    return tempfile_current;
  }

  /* increment reference counter */
  tempfile_ref(tempfile_current);

  return tempfile_current;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
12,13
12,14
13,14
14,15
16,17
16,18
17,18
18,19
18,20
19,20
21,22
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
45,47
46,47
47,48
47,49
48,49
50,51
51,52
53,54
54,55
56,57
57,58
57,59
58,59
60,61
61,62
63,64
64,65
-----nextToken-----
3,5,6,8,10,15,20,23,26,30,32,36,38,42,44,49,52,55,59,62,65
-----computeFrom-----
18,19
18,20
40,41
40,42
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static tempfile_t *tempfile_get(void){  if (!tempfile_current) {    tempfile_current = tempfile_new();    return tempfile_current;  }  /* get file size */  size_t size = tempfile_size(tempfile_current);  /* if the file size reaches TEMPFILE_MAX_SIZE, return new temporary file */  if (size > TEMPFILE_MAX_SIZE) {    tempfile_current = tempfile_new();    return tempfile_current;  }  /* increment reference counter */  tempfile_ref(tempfile_current);  return tempfile_current;}
static tempfile_t
tempfile_t
*tempfile_get(void)
*
tempfile_get
void
void


{  if (!tempfile_current) {    tempfile_current = tempfile_new();    return tempfile_current;  }  /* get file size */  size_t size = tempfile_size(tempfile_current);  /* if the file size reaches TEMPFILE_MAX_SIZE, return new temporary file */  if (size > TEMPFILE_MAX_SIZE) {    tempfile_current = tempfile_new();    return tempfile_current;  }  /* increment reference counter */  tempfile_ref(tempfile_current);  return tempfile_current;}
if (!tempfile_current) {    tempfile_current = tempfile_new();    return tempfile_current;  }
!tempfile_current
tempfile_current
tempfile_current
{    tempfile_current = tempfile_new();    return tempfile_current;  }
tempfile_current = tempfile_new();
tempfile_current = tempfile_new()
tempfile_current
tempfile_current
tempfile_new()
tempfile_new
tempfile_new
return tempfile_current;
tempfile_current
tempfile_current
size_t size = tempfile_size(tempfile_current);
size_t size = tempfile_size(tempfile_current);
size_t
size_t
size = tempfile_size(tempfile_current)
size
= tempfile_size(tempfile_current)
tempfile_size(tempfile_current)
tempfile_size
tempfile_size
tempfile_current
tempfile_current
if (size > TEMPFILE_MAX_SIZE) {    tempfile_current = tempfile_new();    return tempfile_current;  }
size > TEMPFILE_MAX_SIZE
size
size
TEMPFILE_MAX_SIZE
TEMPFILE_MAX_SIZE
{    tempfile_current = tempfile_new();    return tempfile_current;  }
tempfile_current = tempfile_new();
tempfile_current = tempfile_new()
tempfile_current
tempfile_current
tempfile_new()
tempfile_new
tempfile_new
return tempfile_current;
tempfile_current
tempfile_current
tempfile_ref(tempfile_current);
tempfile_ref(tempfile_current);
tempfile_ref
tempfile_ref
(tempfile_current)
tempfile_current
tempfile_current
return tempfile_current;
tempfile_current
tempfile_current
-----joern-----
(26,25,0)
(2,19,0)
(22,5,0)
(26,28,0)
(11,16,0)
(27,5,0)
(4,23,0)
(7,21,0)
(10,22,0)
(19,9,0)
(6,15,0)
(15,19,0)
(1,23,0)
(24,19,0)
(3,23,0)
(28,25,0)
(5,22,0)
(28,20,0)
(17,28,0)
(29,23,0)
(21,22,0)
(14,15,0)
(18,23,0)
(0,21,0)
(8,18,0)
(15,9,0)
(6,18,0)
(6,26,0)
(22,23,0)
(20,28,0)
(13,26,0)
(12,4,0)
(19,2,0)
(2,24,1)
(12,21,1)
(0,22,1)
(10,16,1)
(15,19,1)
(18,8,1)
(24,21,1)
(6,18,1)
(13,28,1)
(5,27,1)
(14,19,1)
(21,22,1)
(8,4,1)
(7,0,1)
(22,5,1)
(4,12,1)
(26,28,1)
(20,17,1)
(26,13,1)
(16,11,1)
(15,14,1)
(28,20,1)
(19,2,1)
(21,7,1)
(6,15,1)
(17,16,1)
(27,10,1)
(6,26,1)
(7,16,2)
(20,16,2)
(14,21,2)
(19,21,2)
(27,16,2)
(10,16,2)
(19,2,2)
(24,21,2)
(21,22,2)
(6,18,2)
(26,16,2)
(28,16,2)
(6,15,2)
(28,20,2)
(18,21,2)
(6,26,2)
(8,21,2)
(22,5,2)
(15,21,2)
(26,28,2)
(22,16,2)
(15,19,2)
(21,16,2)
(12,21,2)
(17,16,2)
(5,16,2)
(4,21,2)
(13,16,2)
(2,21,2)
(0,16,2)
-----------------------------------
(0,size)
(1,size)
(2,tempfile_new()
(3,if (!tempfile_current)
(4,tempfile_ref(tempfile_current)
(5,tempfile_size(tempfile_current)
(6,RET)
(7,TEMPFILE_MAX_SIZE)
(8,tempfile_current)
(9,)
(10,size)
(11,tempfile_current)
(12,tempfile_current)
(13,tempfile_current)
(14,tempfile_current)
(15,return tempfile_current;)
(16,!tempfile_current)
(17,tempfile_current)
(18,return tempfile_current;)
(19,tempfile_current = tempfile_new()
(20,tempfile_new()
(21,size > TEMPFILE_MAX_SIZE)
(22,size = tempfile_size(tempfile_current)
(23,)
(24,tempfile_current)
(25,)
(26,return tempfile_current;)
(27,tempfile_current)
(28,tempfile_current = tempfile_new()
(29,if (size > TEMPFILE_MAX_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^