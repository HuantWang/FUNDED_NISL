-----label-----
0
-----code-----
static void goodG2B()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
59,61
59,62
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
70,72
71,72
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
91,93
92,93
95,96
95,97
95,98
96,97
97,98
99,100
101,102
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,48,49,50,54,57,58,63,67,69,72,74,78,79,84,85,86,90,93,94,98,100,102
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
61,62
61,63
73,74
73,75
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B(){    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(33,22,0)
(25,8,0)
(26,29,0)
(23,19,0)
(33,31,0)
(7,5,0)
(8,34,0)
(4,33,0)
(3,24,0)
(32,5,0)
(28,3,0)
(2,28,0)
(22,33,0)
(35,27,0)
(37,28,0)
(18,39,0)
(20,19,0)
(18,6,0)
(28,38,0)
(30,31,0)
(6,3,0)
(2,11,0)
(31,33,0)
(33,4,0)
(6,18,0)
(24,3,0)
(34,4,0)
(3,6,0)
(36,34,0)
(17,2,0)
(4,34,0)
(15,18,0)
(21,38,0)
(11,38,0)
(3,28,0)
(12,29,0)
(29,19,0)
(16,2,0)
(13,19,0)
(34,8,0)
(35,5,0)
(11,2,0)
(1,39,0)
(10,27,0)
(5,31,0)
(39,18,0)
(5,35,0)
(31,27,0)
(36,30,1)
(2,28,1)
(29,26,1)
(1,15,1)
(14,11,1)
(15,37,1)
(9,29,1)
(30,9,1)
(0,14,1)
(25,36,1)
(16,17,1)
(10,31,1)
(31,33,1)
(11,2,1)
(37,9,1)
(35,5,1)
(3,24,1)
(39,1,1)
(8,25,1)
(6,18,1)
(14,35,1)
(33,4,1)
(2,16,1)
(21,28,1)
(17,21,1)
(5,31,1)
(28,3,1)
(18,39,1)
(26,12,1)
(5,7,1)
(3,6,1)
(32,10,1)
(4,34,1)
(34,8,1)
(33,22,1)
(7,32,1)
(34,9,2)
(17,9,2)
(2,9,2)
(5,31,2)
(18,9,2)
(8,9,2)
(31,33,2)
(18,39,2)
(21,9,2)
(2,28,2)
(31,9,2)
(3,24,2)
(32,9,2)
(30,9,2)
(11,2,2)
(25,9,2)
(28,3,2)
(28,9,2)
(6,9,2)
(34,8,2)
(36,9,2)
(35,5,2)
(7,9,2)
(1,9,2)
(33,22,2)
(15,9,2)
(33,4,2)
(3,9,2)
(11,9,2)
(5,9,2)
(16,9,2)
(10,9,2)
(35,9,2)
(33,9,2)
(39,9,2)
(37,9,2)
(6,18,2)
(3,6,2)
(4,9,2)
(4,34,2)
-----------------------------------
(0,RET)
(1,int64_t)
(2,data[0])
(3,(int64_t *)
(4,ALLOCA(100*sizeof(int64_t)
(5,data[0])
(6,ALLOCA(100*sizeof(int64_t)
(7,0)
(8,sizeof(int64_t)
(9,globalReturnsTrueOrFalse()
(10,L)
(11,printLongLongLine(data[0])
(12,data)
(13,if(globalReturnsTrueOrFalse()
(14,globalReturnsTrueOrFalse()
(15,100)
(16,0)
(17,data)
(18,100*sizeof(int64_t)
(19,)
(20,data)
(21,L)
(22,int64_t *)
(23,if(globalReturnsTrueOrFalse()
(24,int64_t *)
(25,int64_t)
(26,NULL)
(27,)
(28,data = (int64_t *)
(29,data = NULL)
(30,data)
(31,data = (int64_t *)
(32,data)
(33,(int64_t *)
(34,100*sizeof(int64_t)
(35,printLongLongLine(data[0])
(36,100)
(37,data)
(38,)
(39,sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^