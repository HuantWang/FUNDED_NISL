-----label-----
0
-----code-----
static void *backupPathTh(void *bpavp)
{
    int bpfd;
    BackupPathArgs *bpa = (BackupPathArgs *) bpavp;

    /* perform the actual backup */
    bpfd = backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir);
    close(bpfd);

    /* then mark ourself done */
    pthread_mutex_lock(&bpa->ni->blocks[bpa->ti]);
    bpa->ni->brunning[bpa->ti] = 0;
    pthread_mutex_unlock(&bpa->ni->blocks[bpa->ti]);
    sem_post(&bpa->ni->bsem);

    /* and close stuff */
    close(bpa->source);
    close(bpa->destDir);
    free(bpa->name);

    free(bpa);

    return NULL;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
27,28
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
37,40
37,41
37,42
38,39
40,41
40,42
41,42
44,45
44,46
45,46
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
81,83
82,83
82,84
83,84
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
104,105
104,106
105,106
108,109
109,110
109,111
110,111
112,113
113,114
113,115
114,115
114,116
115,116
119,120
120,121
120,122
121,122
123,124
123,125
124,125
127,128
128,129
128,130
129,130
131,132
131,133
132,133
135,136
136,137
136,138
137,138
139,140
139,141
140,141
143,144
144,145
144,146
145,146
147,148
149,150
150,151
-----nextToken-----
2,4,5,7,9,10,14,16,20,22,23,28,30,32,36,39,42,43,46,47,50,51,54,55,59,61,65,71,72,73,76,77,84,85,86,89,90,91,95,101,102,103,106,107,111,116,117,118,122,125,126,130,133,134,138,141,142,146,148,151
-----computeFrom-----
34,35
34,36
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static void *backupPathTh(void *bpavp){    int bpfd;    BackupPathArgs *bpa = (BackupPathArgs *) bpavp;    /* perform the actual backup */    bpfd = backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir);    close(bpfd);    /* then mark ourself done */    pthread_mutex_lock(&bpa->ni->blocks[bpa->ti]);    bpa->ni->brunning[bpa->ti] = 0;    pthread_mutex_unlock(&bpa->ni->blocks[bpa->ti]);    sem_post(&bpa->ni->bsem);    /* and close stuff */    close(bpa->source);    close(bpa->destDir);    free(bpa->name);    free(bpa);    return NULL;}
static void
*backupPathTh(void *bpavp)
*
backupPathTh
void *bpavp
void
*bpavp
*
bpavp
{    int bpfd;    BackupPathArgs *bpa = (BackupPathArgs *) bpavp;    /* perform the actual backup */    bpfd = backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir);    close(bpfd);    /* then mark ourself done */    pthread_mutex_lock(&bpa->ni->blocks[bpa->ti]);    bpa->ni->brunning[bpa->ti] = 0;    pthread_mutex_unlock(&bpa->ni->blocks[bpa->ti]);    sem_post(&bpa->ni->bsem);    /* and close stuff */    close(bpa->source);    close(bpa->destDir);    free(bpa->name);    free(bpa);    return NULL;}
int bpfd;
int bpfd;
int
bpfd
bpfd
BackupPathArgs *bpa = (BackupPathArgs *) bpavp;
BackupPathArgs *bpa = (BackupPathArgs *) bpavp;
BackupPathArgs
BackupPathArgs
*bpa = (BackupPathArgs *) bpavp
*
bpa
= (BackupPathArgs *) bpavp
(BackupPathArgs *) bpavp
BackupPathArgs *
BackupPathArgs
BackupPathArgs
*
*
bpavp
bpavp
bpfd = backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir);
bpfd = backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir)
bpfd
bpfd
backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir)
backupPath
backupPath
bpa->ni
bpa
bpa
ni
bpa->name
bpa
bpa
name
bpa->source
bpa
bpa
source
bpa->destDir
bpa
bpa
destDir
close(bpfd);
close(bpfd)
close
close
bpfd
bpfd
pthread_mutex_lock(&bpa->ni->blocks[bpa->ti]);
pthread_mutex_lock(&bpa->ni->blocks[bpa->ti])
pthread_mutex_lock
pthread_mutex_lock
&bpa->ni->blocks[bpa->ti]
bpa->ni->blocks[bpa->ti]
bpa->ni->blocks
bpa->ni
bpa
bpa
ni
blocks
bpa->ti
bpa
bpa
ti
bpa->ni->brunning[bpa->ti] = 0;
bpa->ni->brunning[bpa->ti] = 0
bpa->ni->brunning[bpa->ti]
bpa->ni->brunning
bpa->ni
bpa
bpa
ni
brunning
bpa->ti
bpa
bpa
ti
0
pthread_mutex_unlock(&bpa->ni->blocks[bpa->ti]);
pthread_mutex_unlock(&bpa->ni->blocks[bpa->ti])
pthread_mutex_unlock
pthread_mutex_unlock
&bpa->ni->blocks[bpa->ti]
bpa->ni->blocks[bpa->ti]
bpa->ni->blocks
bpa->ni
bpa
bpa
ni
blocks
bpa->ti
bpa
bpa
ti
sem_post(&bpa->ni->bsem);
sem_post(&bpa->ni->bsem)
sem_post
sem_post
&bpa->ni->bsem
bpa->ni->bsem
bpa->ni
bpa
bpa
ni
bsem
close(bpa->source);
close(bpa->source)
close
close
bpa->source
bpa
bpa
source
close(bpa->destDir);
close(bpa->destDir)
close
close
bpa->destDir
bpa
bpa
destDir
free(bpa->name);
free(bpa->name)
free
free
bpa->name
bpa
bpa
name
free(bpa);
free(bpa)
free
free
bpa
bpa
return NULL;
NULL
NULL
-----joern-----
(15,44,0)
(46,44,0)
(1,43,0)
(23,11,0)
(30,62,0)
(11,62,0)
(75,67,0)
(24,73,0)
(5,62,0)
(28,62,0)
(21,62,0)
(53,60,0)
(50,52,0)
(17,22,0)
(63,28,0)
(19,0,0)
(28,10,0)
(37,70,0)
(72,46,0)
(58,72,0)
(55,30,0)
(5,69,0)
(60,62,0)
(64,44,0)
(11,57,0)
(76,9,0)
(68,40,0)
(76,30,0)
(14,28,0)
(70,44,0)
(9,62,0)
(9,76,0)
(69,53,0)
(64,40,0)
(76,71,0)
(67,62,0)
(78,34,0)
(59,45,0)
(35,77,0)
(52,62,0)
(0,10,0)
(53,69,0)
(4,70,0)
(61,21,0)
(62,11,0)
(67,44,0)
(22,62,0)
(73,44,0)
(66,3,0)
(72,62,0)
(62,44,0)
(40,62,0)
(36,44,0)
(66,34,0)
(35,22,0)
(76,12,0)
(52,27,0)
(69,5,0)
(31,44,0)
(69,45,0)
(76,21,0)
(34,66,0)
(79,5,0)
(32,71,0)
(10,0,0)
(45,44,0)
(7,51,0)
(70,69,0)
(81,72,0)
(27,44,0)
(27,52,0)
(65,12,0)
(77,35,0)
(30,76,0)
(42,51,0)
(74,9,0)
(3,8,0)
(0,51,0)
(21,76,0)
(8,44,0)
(43,12,0)
(49,22,0)
(34,62,0)
(33,62,0)
(22,35,0)
(57,11,0)
(73,24,0)
(12,44,0)
(66,29,0)
(6,40,0)
(51,0,0)
(26,33,0)
(8,3,0)
(33,29,0)
(43,44,0)
(10,24,0)
(40,64,0)
(71,76,0)
(2,29,0)
(38,34,0)
(31,77,0)
(60,53,0)
(80,62,0)
(16,9,0)
(11,13,0)
(18,33,0)
(56,60,0)
(29,66,0)
(54,71,0)
(47,60,0)
(41,30,0)
(48,53,0)
(24,10,0)
(25,5,0)
(82,21,0)
(20,52,0)
(51,62,0)
(77,31,0)
(10,28,0)
(12,76,0)
(39,35,0)
(46,72,0)
(3,66,0)
(29,33,0)
(71,62,0)
(54,32,1)
(62,11,1)
(7,42,1)
(19,51,1)
(79,25,1)
(28,14,1)
(72,81,1)
(0,19,1)
(9,74,1)
(40,62,1)
(1,12,1)
(21,82,1)
(47,56,1)
(14,63,1)
(66,29,1)
(0,51,1)
(56,8,1)
(53,60,1)
(43,12,1)
(11,23,1)
(32,21,1)
(16,65,1)
(30,62,1)
(10,0,1)
(20,46,1)
(45,59,1)
(22,62,1)
(53,48,1)
(72,62,1)
(65,62,1)
(69,53,1)
(49,17,1)
(75,64,1)
(5,79,1)
(60,47,1)
(41,9,1)
(40,6,1)
(21,62,1)
(76,30,1)
(9,62,1)
(29,33,1)
(42,45,1)
(2,33,1)
(67,75,1)
(43,1,1)
(71,62,1)
(60,62,1)
(70,37,1)
(64,40,1)
(82,61,1)
(74,16,1)
(18,43,1)
(5,62,1)
(12,76,1)
(11,13,1)
(11,57,1)
(6,68,1)
(48,60,1)
(73,24,1)
(35,22,1)
(34,62,1)
(63,0,1)
(46,72,1)
(71,54,1)
(76,9,1)
(31,77,1)
(34,78,1)
(58,31,1)
(50,20,1)
(28,62,1)
(70,69,1)
(51,62,1)
(66,34,1)
(33,26,1)
(24,10,1)
(59,69,1)
(26,18,1)
(52,62,1)
(76,21,1)
(51,7,1)
(10,28,1)
(27,52,1)
(35,39,1)
(69,5,1)
(81,58,1)
(3,66,1)
(4,70,1)
(52,50,1)
(30,55,1)
(37,67,1)
(25,53,1)
(38,29,1)
(78,38,1)
(33,62,1)
(22,49,1)
(23,80,1)
(39,22,1)
(68,27,1)
(8,3,1)
(55,41,1)
(17,73,1)
(29,2,1)
(77,35,1)
(67,62,1)
(76,71,1)
(61,30,1)
(69,5,2)
(76,9,2)
(66,34,2)
(24,10,2)
(52,62,2)
(30,62,2)
(22,62,2)
(76,21,2)
(11,13,2)
(53,60,2)
(28,62,2)
(72,62,2)
(46,72,2)
(64,40,2)
(12,76,2)
(33,62,2)
(10,28,2)
(73,24,2)
(66,29,2)
(27,52,2)
(62,11,2)
(77,35,2)
(3,66,2)
(60,62,2)
(69,53,2)
(9,62,2)
(21,62,2)
(40,62,2)
(8,3,2)
(70,69,2)
(4,70,2)
(76,71,2)
(11,57,2)
(31,77,2)
(35,22,2)
(67,62,2)
(71,62,2)
(43,12,2)
(0,51,2)
(5,62,2)
(51,62,2)
(76,30,2)
(10,0,2)
(34,62,2)
(29,33,2)
-----------------------------------
(0,bpa->ni->blocks)
(1,bpfd)
(2,blocks)
(3,&bpa->ni->blocks[bpa->ti])
(4,RET)
(5,bpa->ti)
(6,name)
(7,ni)
(8,pthread_mutex_lock(&bpa->ni->blocks[bpa->ti])
(9,bpa->ni)
(10,bpa->ni->blocks[bpa->ti])
(11,(BackupPathArgs *)
(12,bpfd = backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir)
(13,void *bpavp)
(14,ti)
(15,bpa)
(16,bpa)
(17,bpa)
(18,bpa)
(19,blocks)
(20,bpa)
(21,bpa->source)
(22,bpa->ni)
(23,bpavp)
(24,&bpa->ni->blocks[bpa->ti])
(25,bpa)
(26,ni)
(27,close(bpa->destDir)
(28,bpa->ti)
(29,bpa->ni->blocks)
(30,bpa->name)
(31,sem_post(&bpa->ni->bsem)
(32,bpa)
(33,bpa->ni)
(34,bpa->ti)
(35,bpa->ni->bsem)
(36,bpfd)
(37,NULL)
(38,bpa)
(39,bsem)
(40,bpa->name)
(41,bpa)
(42,bpa)
(43,close(bpfd)
(44,)
(45,bpa->ni->brunning[bpa->ti] = 0)
(46,close(bpa->source)
(47,ni)
(48,brunning)
(49,ni)
(50,destDir)
(51,bpa->ni)
(52,bpa->destDir)
(53,bpa->ni->brunning)
(54,destDir)
(55,name)
(56,bpa)
(57,BackupPathArgs *)
(58,bpa)
(59,0)
(60,bpa->ni)
(61,bpa)
(62,*bpa = (BackupPathArgs *)
(63,bpa)
(64,free(bpa->name)
(65,bpfd)
(66,bpa->ni->blocks[bpa->ti])
(67,free(bpa)
(68,bpa)
(69,bpa->ni->brunning[bpa->ti])
(70,return NULL;)
(71,bpa->destDir)
(72,bpa->source)
(73,pthread_mutex_unlock(&bpa->ni->blocks[bpa->ti])
(74,ni)
(75,bpa)
(76,backupPath(bpa->ni, bpa->name, bpa->source, bpa->destDir)
(77,&bpa->ni->bsem)
(78,ti)
(79,ti)
(80,bpa)
(81,source)
(82,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^