-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
70,71
71,72
71,73
72,73
76,77
76,78
78,79
78,80
78,81
78,82
78,83
78,84
79,80
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,68,69,73,74,75,77,80,81,82,83,87,88,89
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int_calloc_15_bad()
CWE401_Memory_Leak__int_calloc_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(43,26,0)
(46,29,0)
(47,1,0)
(3,49,0)
(31,44,0)
(12,8,0)
(15,26,0)
(35,26,0)
(38,8,0)
(31,41,0)
(4,16,0)
(13,39,0)
(48,41,0)
(17,14,0)
(44,26,0)
(49,41,0)
(31,20,0)
(9,17,0)
(0,18,0)
(7,18,0)
(41,1,0)
(41,26,0)
(5,29,0)
(39,41,0)
(37,44,0)
(24,18,0)
(28,35,0)
(14,36,0)
(10,31,0)
(33,31,0)
(19,26,0)
(8,16,0)
(32,46,0)
(30,16,0)
(20,26,0)
(23,18,0)
(42,39,0)
(14,17,0)
(29,46,0)
(1,47,0)
(11,16,0)
(27,26,0)
(1,29,0)
(39,44,0)
(22,23,0)
(20,31,0)
(40,49,0)
(29,1,0)
(21,18,0)
(45,26,0)
(1,41,0)
(28,2,1)
(5,48,1)
(32,5,1)
(40,3,1)
(34,43,1)
(14,17,1)
(33,44,1)
(24,23,1)
(49,41,1)
(31,10,1)
(2,8,1)
(27,20,1)
(17,9,1)
(34,27,1)
(35,28,1)
(3,41,1)
(1,29,1)
(1,47,1)
(25,0,1)
(0,34,1)
(22,34,1)
(39,41,1)
(44,37,1)
(13,14,1)
(37,39,1)
(42,13,1)
(20,31,1)
(38,12,1)
(8,38,1)
(43,35,1)
(31,41,1)
(10,33,1)
(25,24,1)
(48,2,1)
(49,40,1)
(31,44,1)
(41,1,1)
(39,42,1)
(13,49,1)
(9,49,1)
(29,46,1)
(23,22,1)
(46,32,1)
(28,2,2)
(44,2,2)
(29,46,2)
(29,2,2)
(13,2,2)
(33,2,2)
(14,17,2)
(49,41,2)
(1,47,2)
(14,49,2)
(0,34,2)
(22,34,2)
(41,1,2)
(9,49,2)
(31,44,2)
(23,34,2)
(49,2,2)
(35,2,2)
(5,2,2)
(20,2,2)
(39,2,2)
(37,2,2)
(20,31,2)
(17,49,2)
(31,41,2)
(40,2,2)
(27,2,2)
(32,2,2)
(41,2,2)
(3,2,2)
(31,2,2)
(10,2,2)
(43,2,2)
(24,34,2)
(1,29,2)
(42,2,2)
(1,2,2)
(46,2,2)
(48,2,2)
(39,41,2)
-----------------------------------
(0,break;)
(1,(int *)
(2,6)
(3,data)
(4,data)
(5,100)
(6, sizeof(int)
(7,default:)
(8,data = NULL)
(9,1)
(10,0)
(11,switch(7)
(12,data)
(13,data)
(14,exit(-1)
(15,case 6:)
(16,)
(17,-1)
(18,)
(19,default:)
(20,printIntLine(data[0])
(21,case 7:)
(22,"Benign, fixed string")
(23,printLine("Benign, fixed string")
(24,break;)
(25,RET)
(26,)
(27,break;)
(28,"Benign, fixed string")
(29,calloc(100, sizeof(int)
(30,switch(6)
(31,data[0])
(32,int)
(33,data)
(34,7)
(35,printLine("Benign, fixed string")
(36,)
(37,5)
(38,NULL)
(39,data[0])
(40,NULL)
(41,data = (int *)
(42,0)
(43,break;)
(44,data[0] = 5)
(45,if (data == NULL)
(46,sizeof(int)
(47,int *)
(48,data)
(49,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^