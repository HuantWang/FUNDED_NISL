-----label-----
0
-----code-----
static void goodB2G1()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Close the file from the source before pointing data to a new file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        data = fopen("GoodSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
57,58
61,62
61,63
62,63
62,64
63,64
65,66
67,68
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,31,36,37,42,44,49,51,55,58,59,60,64,66,71,73
-----computeFrom-----
14,15
14,16
20,21
20,22
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
42,51
64,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
static void
goodB2G1()
goodB2G1
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
data = fopen("GoodSink_fopen.txt", "w+");
data = fopen("GoodSink_fopen.txt", "w+")
data
data
fopen("GoodSink_fopen.txt", "w+")
fopen
fopen
"GoodSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(3,13,0)
(32,9,0)
(2,21,0)
(19,1,0)
(4,1,0)
(1,20,0)
(29,9,0)
(22,0,0)
(6,21,0)
(24,31,0)
(10,16,0)
(15,20,0)
(27,32,0)
(19,12,0)
(35,19,0)
(0,31,0)
(24,17,0)
(11,1,0)
(31,16,0)
(31,9,0)
(28,0,0)
(33,31,0)
(20,1,0)
(26,20,0)
(16,31,0)
(25,16,0)
(13,30,0)
(8,4,0)
(14,4,0)
(18,9,0)
(1,21,0)
(23,32,0)
(34,24,0)
(3,7,1)
(10,33,1)
(11,0,1)
(5,19,1)
(34,0,1)
(25,10,1)
(11,24,1)
(14,8,1)
(31,16,1)
(35,4,1)
(24,34,1)
(19,1,1)
(0,22,1)
(7,31,1)
(8,1,1)
(33,32,1)
(24,31,1)
(20,15,1)
(32,27,1)
(0,31,1)
(19,35,1)
(27,23,1)
(13,3,1)
(4,1,1)
(26,11,1)
(28,7,1)
(5,13,1)
(22,28,1)
(15,26,1)
(1,20,1)
(16,25,1)
(5,4,1)
(4,14,1)
(19,4,2)
(26,7,2)
(13,7,2)
(4,7,2)
(15,7,2)
(14,7,2)
(0,7,2)
(1,7,2)
(4,1,2)
(19,1,2)
(1,20,2)
(31,16,2)
(24,31,2)
(20,7,2)
(28,7,2)
(24,0,2)
(34,0,2)
(0,31,2)
(3,7,2)
(11,7,2)
(35,4,2)
(22,7,2)
(8,7,2)
-----------------------------------
(0,data != NULL)
(1,data = fopen("GoodSink_fopen.txt", "w+")
(2,if (data != NULL)
(3,"Benign, fixed string")
(4,data != NULL)
(5,RET)
(6,if (data != NULL)
(7,staticReturnsFalse()
(8,data)
(9,)
(10,"BadSource_fopen.txt")
(11,data)
(12,)
(13,printLine("Benign, fixed string")
(14,NULL)
(15,"w+")
(16,fopen("BadSource_fopen.txt", "w+")
(17,)
(18,if(staticReturnsFalse()
(19,fclose(data)
(20,fopen("GoodSink_fopen.txt", "w+")
(21,)
(22,NULL)
(23,data)
(24,fclose(data)
(25,"w+")
(26,"GoodSink_fopen.txt")
(27,NULL)
(28,data)
(29,data)
(30,)
(31,data = fopen("BadSource_fopen.txt", "w+")
(32,data = NULL)
(33,data)
(34,data)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^