-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,43,45,49,50
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticFive==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(13,8,0)
(8,20,0)
(3,11,0)
(1,24,0)
(5,20,0)
(22,23,0)
(6,12,0)
(11,0,0)
(2,5,0)
(9,23,0)
(8,12,0)
(21,15,0)
(19,10,0)
(7,24,0)
(20,24,0)
(4,24,0)
(8,10,0)
(20,5,0)
(12,16,0)
(14,12,0)
(26,19,0)
(17,15,0)
(25,20,0)
(20,5,1)
(2,25,1)
(17,11,1)
(8,13,1)
(8,20,1)
(3,23,1)
(21,17,1)
(17,12,1)
(12,14,1)
(22,20,1)
(14,6,1)
(8,12,1)
(23,9,1)
(26,8,1)
(13,15,1)
(18,15,1)
(9,22,1)
(6,23,1)
(5,2,1)
(15,21,1)
(11,3,1)
(18,19,1)
(19,26,1)
(8,15,2)
(8,12,2)
(6,23,2)
(20,5,2)
(3,23,2)
(12,23,2)
(13,15,2)
(8,20,2)
(14,23,2)
(11,23,2)
(26,15,2)
(19,15,2)
-----------------------------------
(0,)
(1,if(staticFive!=5)
(2,1)
(3,"Benign, fixed string")
(4,count)
(5,-1)
(6,count)
(7,if(staticFive==5)
(8,SLEEP(count)
(9,5)
(10,)
(11,printLine("Benign, fixed string")
(12,count = 20)
(13,count)
(14,20)
(15,staticFive==5)
(16,)
(17,staticFive)
(18,RET)
(19,printLine("Sleep time possibly too long")
(20,count = -1)
(21,5)
(22,staticFive)
(23,staticFive!=5)
(24,)
(25,count)
(26,"Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^