-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
62,74
62,75
62,76
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
92,93
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
128,129
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
141,142
142,143
143,144
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
152,153
154,155
156,157
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
175,176
175,177
176,177
176,178
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
187,192
188,189
190,191
192,193
194,195
194,196
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
217,218
220,221
221,222
221,223
222,223
224,225
224,226
225,226
227,228
230,231
230,232
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
243,244
243,245
244,245
244,246
245,246
247,248
249,250
250,251
251,252
251,253
252,253
254,255
256,257
257,258
257,259
258,259
258,260
259,260
262,263
264,265
264,266
265,266
266,267
266,268
268,269
268,270
270,271
271,272
271,273
272,273
275,276
275,277
275,278
276,277
276,278
277,278
277,279
278,279
281,282
281,283
282,283
285,286
285,287
286,287
287,288
287,289
288,289
290,291
292,293
293,294
293,295
294,295
297,298
298,299
299,300
299,301
300,301
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,38,40,43,47,49,52,55,57,60,66,69,71,73,75,79,81,83,87,90,91,95,100,101,103,109,110,111,113,118,119,122,124,129,131,135,137,140,144,146,148,153,155,157,159,161,165,168,170,172,174,178,180,182,186,189,191,193,196,197,198,203,205,208,209,211,216,218,219,223,226,228,229,233,235,240,242,246,248,253,255,260,261,263,267,269,273,274,279,280,283,284,289,291,295,296,301,302
-----computeFrom-----
18,19
18,20
64,65
64,66
77,78
77,79
97,98
97,99
105,106
105,107
115,116
115,117
126,127
126,128
150,151
150,152
163,164
163,165
176,177
176,178
184,185
184,186
194,195
194,196
200,201
200,202
201,202
201,203
206,207
206,208
213,214
213,215
221,222
221,223
231,232
231,233
244,245
244,246
257,258
257,259
276,277
276,278
277,278
277,279
281,282
281,283
-----guardedBy-----
233,242
246,255
283,291
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G()
goodB2G
{    int count;    CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType
CWE400_Resource_Exhaustion__listen_socket_sleep_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(132,62,0)
(34,122,0)
(2,135,0)
(127,122,0)
(24,158,0)
(140,24,0)
(161,23,0)
(112,58,0)
(40,181,0)
(136,183,0)
(4,135,0)
(51,107,0)
(89,154,0)
(72,88,0)
(123,122,0)
(26,94,0)
(75,178,0)
(68,158,0)
(177,156,0)
(154,123,0)
(25,158,0)
(60,130,0)
(182,68,0)
(135,8,0)
(41,57,0)
(68,39,0)
(11,68,0)
(131,80,0)
(12,114,0)
(124,34,0)
(149,94,0)
(118,126,0)
(124,121,0)
(35,88,0)
(59,158,0)
(126,33,0)
(20,8,0)
(10,62,0)
(175,80,0)
(146,12,0)
(111,163,0)
(105,166,0)
(117,13,0)
(19,83,0)
(10,170,0)
(120,92,0)
(48,98,0)
(164,181,0)
(8,135,0)
(14,72,0)
(87,109,0)
(159,173,0)
(108,122,0)
(38,54,0)
(172,181,0)
(163,122,0)
(51,103,0)
(7,166,0)
(99,56,0)
(66,72,0)
(8,30,0)
(143,114,0)
(150,130,0)
(77,105,0)
(58,94,0)
(80,131,0)
(162,157,0)
(173,114,0)
(3,181,0)
(157,94,0)
(65,94,0)
(22,7,0)
(8,20,0)
(90,122,0)
(135,4,0)
(103,122,0)
(10,69,0)
(24,39,0)
(45,58,0)
(134,177,0)
(82,94,0)
(136,50,0)
(69,10,0)
(177,34,0)
(106,40,0)
(100,5,0)
(15,183,0)
(97,109,0)
(49,4,0)
(166,122,0)
(70,128,0)
(152,131,0)
(76,12,0)
(0,136,0)
(74,154,0)
(54,88,0)
(119,34,0)
(184,122,0)
(141,17,0)
(130,94,0)
(179,25,0)
(67,122,0)
(1,94,0)
(88,181,0)
(124,130,0)
(114,12,0)
(181,114,0)
(88,122,0)
(23,130,0)
(46,135,0)
(61,177,0)
(59,56,0)
(178,122,0)
(43,123,0)
(31,105,0)
(17,51,0)
(156,177,0)
(154,88,0)
(23,34,0)
(37,54,0)
(147,114,0)
(145,157,0)
(91,20,0)
(85,21,0)
(128,103,0)
(168,94,0)
(104,94,0)
(142,41,0)
(133,94,0)
(114,122,0)
(73,148,0)
(115,148,0)
(170,10,0)
(166,7,0)
(155,12,0)
(101,59,0)
(63,24,0)
(29,180,0)
(102,13,0)
(183,136,0)
(39,24,0)
(126,157,0)
(57,107,0)
(131,163,0)
(12,34,0)
(98,34,0)
(165,80,0)
(57,41,0)
(95,122,0)
(96,57,0)
(181,88,0)
(169,64,0)
(109,67,0)
(158,13,0)
(126,114,0)
(32,40,0)
(72,37,0)
(143,157,0)
(16,98,0)
(71,124,0)
(135,46,0)
(93,178,0)
(139,122,0)
(137,110,0)
(6,98,0)
(27,67,0)
(30,8,0)
(62,10,0)
(9,23,0)
(86,120,0)
(79,103,0)
(44,94,0)
(158,25,0)
(78,173,0)
(50,136,0)
(84,107,0)
(54,37,0)
(181,40,0)
(116,94,0)
(55,99,0)
(125,94,0)
(103,128,0)
(171,46,0)
(36,138,0)
(144,51,0)
(148,34,0)
(81,25,0)
(94,107,0)
(113,107,0)
(129,156,0)
(42,143,0)
(167,17,0)
(153,143,0)
(47,170,0)
(18,158,0)
(37,72,0)
(53,62,0)
(13,107,0)
(34,98,0)
(135,34,0)
(176,50,0)
(39,68,0)
(174,54,0)
(52,69,0)
(136,122,0)
(51,57,0)
(120,86,1)
(12,76,1)
(154,88,1)
(161,169,1)
(75,93,1)
(119,178,1)
(23,9,1)
(24,158,1)
(74,89,1)
(181,164,1)
(69,10,1)
(53,157,1)
(103,128,1)
(129,177,1)
(68,11,1)
(53,28,1)
(173,114,1)
(131,152,1)
(159,78,1)
(71,23,1)
(36,148,1)
(175,165,1)
(123,43,1)
(135,34,1)
(58,45,1)
(46,171,1)
(126,114,1)
(124,34,1)
(161,85,1)
(161,137,1)
(62,132,1)
(22,105,1)
(136,50,1)
(39,68,1)
(177,34,1)
(12,34,1)
(87,97,1)
(124,130,1)
(156,177,1)
(98,48,1)
(135,8,1)
(97,136,1)
(20,91,1)
(167,141,1)
(100,160,1)
(70,79,1)
(66,14,1)
(146,155,1)
(67,27,1)
(179,81,1)
(81,18,1)
(43,154,1)
(51,103,1)
(40,106,1)
(49,135,1)
(105,77,1)
(38,72,1)
(172,3,1)
(45,112,1)
(59,101,1)
(19,69,1)
(85,173,1)
(140,63,1)
(142,96,1)
(141,160,1)
(79,123,1)
(160,143,1)
(136,183,1)
(57,41,1)
(91,2,1)
(143,153,1)
(131,80,1)
(183,15,1)
(68,158,1)
(170,47,1)
(135,46,1)
(153,42,1)
(161,19,1)
(80,175,1)
(126,157,1)
(39,24,1)
(169,37,1)
(109,87,1)
(132,53,1)
(118,143,1)
(37,54,1)
(165,67,1)
(106,32,1)
(23,130,1)
(89,37,1)
(27,109,1)
(34,98,1)
(86,39,1)
(60,150,1)
(61,134,1)
(9,161,1)
(166,7,1)
(124,71,1)
(78,114,1)
(99,55,1)
(24,140,1)
(14,88,1)
(88,181,1)
(130,60,1)
(182,158,1)
(144,17,1)
(51,144,1)
(18,51,1)
(143,114,1)
(10,62,1)
(50,176,1)
(147,156,1)
(4,49,1)
(6,16,1)
(77,31,1)
(8,20,1)
(48,6,1)
(173,159,1)
(155,147,1)
(115,73,1)
(72,88,1)
(161,29,1)
(151,99,1)
(7,22,1)
(101,39,1)
(15,148,1)
(151,120,1)
(17,167,1)
(32,172,1)
(31,163,1)
(177,61,1)
(126,118,1)
(154,74,1)
(42,23,1)
(76,146,1)
(2,166,1)
(8,30,1)
(152,80,1)
(47,62,1)
(157,145,1)
(161,28,1)
(25,179,1)
(145,162,1)
(55,59,1)
(41,142,1)
(128,70,1)
(171,8,1)
(54,174,1)
(51,57,1)
(162,130,1)
(134,4,1)
(174,38,1)
(42,124,1)
(163,111,1)
(181,114,1)
(114,12,1)
(69,52,1)
(112,57,1)
(63,68,1)
(148,34,1)
(10,170,1)
(158,25,1)
(37,72,1)
(181,40,1)
(28,103,1)
(72,66,1)
(178,75,1)
(156,129,1)
(164,40,1)
(141,100,1)
(161,36,1)
(160,126,1)
(59,158,1)
(148,115,1)
(4,135,1)
(93,69,1)
(29,156,1)
(143,157,1)
(11,182,1)
(23,34,1)
(176,0,1)
(54,88,1)
(137,4,1)
(0,183,1)
(3,35,1)
(150,58,1)
(111,131,1)
(35,173,1)
(73,34,1)
(52,10,1)
(16,119,1)
(74,37,2)
(72,173,2)
(111,148,2)
(59,39,2)
(175,148,2)
(135,148,2)
(10,170,2)
(101,39,2)
(79,37,2)
(31,148,2)
(154,37,2)
(181,173,2)
(37,72,2)
(63,68,2)
(43,37,2)
(173,114,2)
(106,173,2)
(61,4,2)
(109,148,2)
(72,88,2)
(40,173,2)
(119,69,2)
(105,148,2)
(136,50,2)
(140,68,2)
(10,62,2)
(39,24,2)
(8,30,2)
(124,34,2)
(57,41,2)
(39,68,2)
(23,130,2)
(147,156,2)
(124,130,2)
(78,156,2)
(136,148,2)
(115,69,2)
(165,148,2)
(51,57,2)
(54,72,2)
(114,12,2)
(16,69,2)
(14,173,2)
(114,156,2)
(98,69,2)
(123,37,2)
(166,148,2)
(124,23,2)
(120,39,2)
(46,148,2)
(8,20,2)
(172,173,2)
(152,148,2)
(146,156,2)
(68,158,2)
(7,148,2)
(27,148,2)
(132,28,2)
(128,37,2)
(69,10,2)
(76,156,2)
(22,148,2)
(181,114,2)
(20,148,2)
(174,72,2)
(181,40,2)
(12,34,2)
(4,148,2)
(156,177,2)
(51,103,2)
(24,158,2)
(37,54,2)
(19,69,2)
(88,173,2)
(10,28,2)
(103,37,2)
(37,173,2)
(38,72,2)
(135,46,2)
(66,173,2)
(88,181,2)
(0,148,2)
(59,158,2)
(166,7,2)
(34,69,2)
(73,69,2)
(67,148,2)
(12,156,2)
(129,4,2)
(28,37,2)
(164,173,2)
(89,37,2)
(177,34,2)
(55,39,2)
(154,88,2)
(23,34,2)
(135,34,2)
(155,156,2)
(77,148,2)
(4,135,2)
(91,148,2)
(131,80,2)
(159,156,2)
(135,8,2)
(53,28,2)
(35,173,2)
(15,148,2)
(97,148,2)
(48,69,2)
(163,148,2)
(36,148,2)
(178,69,2)
(93,69,2)
(126,114,2)
(52,28,2)
(47,28,2)
(85,173,2)
(148,34,2)
(156,4,2)
(24,68,2)
(80,148,2)
(99,39,2)
(118,143,2)
(176,148,2)
(34,98,2)
(171,148,2)
(69,28,2)
(2,148,2)
(50,148,2)
(148,69,2)
(6,69,2)
(49,148,2)
(100,160,2)
(29,156,2)
(70,37,2)
(169,37,2)
(62,28,2)
(173,156,2)
(32,173,2)
(177,4,2)
(54,88,2)
(126,143,2)
(137,4,2)
(87,148,2)
(143,157,2)
(183,148,2)
(86,39,2)
(136,183,2)
(75,69,2)
(3,173,2)
(170,28,2)
(126,157,2)
(134,4,2)
(143,114,2)
(131,148,2)
(8,148,2)
(71,23,2)
(103,128,2)
(158,25,2)
-----------------------------------
(0,0)
(1,acceptSocket)
(2,listenSocket)
(3,acceptSocket)
(4,bind(listenSocket, (struct sockaddr*)
(5,)
(6,SOCK_STREAM)
(7,htons(TCP_PORT)
(8,(struct sockaddr*)
(9,INVALID_SOCKET)
(10,WSAStartup(MAKEWORD(2,2)
(11,0)
(12,accept(listenSocket, NULL, NULL)
(13,)
(14,recvResult)
(15,service)
(16,AF_INET)
(17,myUnion.unionFirst)
(18,count)
(19,break;)
(20,&service)
(21,)
(22,TCP_PORT)
(23,listenSocket != INVALID_SOCKET)
(24,count <= 2000)
(25,myUnion.unionSecond)
(26,if (listenSocket != INVALID_SOCKET)
(27,AF_INET)
(28,0)
(29,break;)
(30,struct sockaddr*)
(31,service)
(32,CHAR_ARRAY_SIZE)
(33,)
(34,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(35,recvResult)
(36,break;)
(37,recvResult == SOCKET_ERROR || recvResult == 0)
(38,recvResult)
(39,count > 0 && count <= 2000)
(40,CHAR_ARRAY_SIZE - 1)
(41,-1)
(42,acceptSocket)
(43,\'\\0\')
(44,if (acceptSocket != INVALID_SOCKET)
(45,0)
(46,sizeof(service)
(47,wsaData)
(48,IPPROTO_TCP)
(49,SOCKET_ERROR)
(50,sizeof(service)
(51,myUnion.unionFirst = count)
(52,NO_ERROR)
(53,2)
(54,recvResult == 0)
(55,"Sleep time OK")
(56,)
(57,count = -1)
(58,wsaDataInit = 0)
(59,SLEEP(count)
(60,INVALID_SOCKET)
(61,LISTEN_BACKLOG)
(62,MAKEWORD(2,2)
(63,count)
(64,)
(65,recvResult)
(66,SOCKET_ERROR)
(67,service.sin_family = AF_INET)
(68,count > 0)
(69,WSAStartup(MAKEWORD(2,2)
(70,inputBuffer)
(71,listenSocket)
(72,recvResult == SOCKET_ERROR)
(73,listenSocket)
(74,recvResult)
(75,1)
(76,NULL)
(77,sin_port)
(78,acceptSocket)
(79,count)
(80,service.sin_addr)
(81,myUnion)
(82,wsaDataInit)
(83,)
(84,myUnion)
(85,break;)
(86,"Sleep time too long")
(87,sin_family)
(88,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(89,inputBuffer)
(90,if (bind(listenSocket, (struct sockaddr*)
(91,service)
(92,)
(93,wsaDataInit)
(94,)
(95,if (WSAStartup(MAKEWORD(2,2)
(96,count)
(97,service)
(98,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(99,printLine("Sleep time OK")
(100,WSACleanup()
(101,count)
(102,count)
(103,count = atoi(inputBuffer)
(104,do)
(105,service.sin_port)
(106,1)
(107,)
(108,if (recvResult == SOCKET_ERROR || recvResult == 0)
(109,service.sin_family)
(110,)
(111,INADDR_ANY)
(112,wsaDataInit)
(113,count)
(114,acceptSocket = accept(listenSocket, NULL, NULL)
(115,INVALID_SOCKET)
(116,service)
(117,if (count > 0 && count <= 2000)
(118,acceptSocket)
(119,listenSocket)
(120,printLine("Sleep time too long")
(121,)
(122,)
(123,inputBuffer[recvResult] = \'\\0\')
(124,CLOSE_SOCKET(listenSocket)
(125,wsaData)
(126,CLOSE_SOCKET(acceptSocket)
(127,if (acceptSocket == SOCKET_ERROR)
(128,atoi(inputBuffer)
(129,SOCKET_ERROR)
(130,listenSocket = INVALID_SOCKET)
(131,service.sin_addr.s_addr)
(132,2)
(133,listenSocket)
(134,listenSocket)
(135,bind(listenSocket, (struct sockaddr*)
(136,memset(&service, 0, sizeof(service)
(137,break;)
(138,)
(139,if (listenSocket == INVALID_SOCKET)
(140,2000)
(141,myUnion)
(142,1)
(143,acceptSocket != INVALID_SOCKET)
(144,count)
(145,INVALID_SOCKET)
(146,NULL)
(147,acceptSocket)
(148,listenSocket == INVALID_SOCKET)
(149,if (wsaDataInit)
(150,listenSocket)
(151,RET)
(152,s_addr)
(153,INVALID_SOCKET)
(154,inputBuffer[recvResult])
(155,listenSocket)
(156,listen(listenSocket, LISTEN_BACKLOG)
(157,acceptSocket = INVALID_SOCKET)
(158,count = myUnion.unionSecond)
(159,SOCKET_ERROR)
(160,wsaDataInit)
(161,listenSocket)
(162,acceptSocket)
(163,service.sin_addr.s_addr = INADDR_ANY)
(164,0)
(165,service)
(166,service.sin_port = htons(TCP_PORT)
(167,unionFirst)
(168,inputBuffer)
(169,break;)
(170,&wsaData)
(171,service)
(172,inputBuffer)
(173,acceptSocket == SOCKET_ERROR)
(174,0)
(175,sin_addr)
(176,service)
(177,listen(listenSocket, LISTEN_BACKLOG)
(178,wsaDataInit = 1)
(179,unionSecond)
(180,)
(181,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(182,count)
(183,&service)
(184,if (listen(listenSocket, LISTEN_BACKLOG)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^