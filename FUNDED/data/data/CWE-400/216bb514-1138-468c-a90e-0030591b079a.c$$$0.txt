-----label-----
0
-----code-----
static void goodG2B()
{
    twoIntsStruct * data;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
41,43
42,43
42,44
43,44
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
59,60
61,62
62,63
62,64
63,64
66,67
66,68
66,69
67,68
68,69
68,70
69,70
71,72
71,73
71,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
81,84
84,85
85,86
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,44,45,46,47,53,54,55,56,60,64,65,70,72,73,76,80,82,83,86,87
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    twoIntsStruct * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    twoIntsStruct * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(35,4,0)
(39,14,0)
(11,41,0)
(2,21,0)
(34,38,0)
(42,2,0)
(18,4,0)
(24,30,0)
(22,13,0)
(31,2,0)
(13,27,0)
(14,29,0)
(36,13,0)
(32,14,0)
(30,5,0)
(20,37,0)
(15,41,0)
(40,27,0)
(33,39,0)
(17,36,0)
(28,39,0)
(21,34,0)
(29,20,0)
(14,32,0)
(13,36,0)
(5,30,0)
(7,20,0)
(2,39,0)
(4,38,0)
(29,14,0)
(14,39,0)
(12,36,0)
(20,29,0)
(9,8,0)
(10,5,0)
(25,38,0)
(21,2,0)
(27,38,0)
(30,39,0)
(8,28,0)
(26,28,0)
(5,25,0)
(36,39,0)
(8,41,0)
(39,38,0)
(41,38,0)
(0,28,0)
(28,41,0)
(3,25,0)
(16,37,0)
(37,20,0)
(23,30,0)
(34,21,0)
(1,38,0)
(6,8,0)
(40,13,1)
(20,37,1)
(21,2,1)
(39,14,1)
(36,12,1)
(2,39,1)
(34,21,1)
(30,24,1)
(29,20,1)
(6,28,1)
(2,31,1)
(36,39,1)
(3,5,1)
(27,40,1)
(13,36,1)
(26,34,1)
(37,16,1)
(14,32,1)
(5,30,1)
(19,8,1)
(42,27,1)
(8,9,1)
(5,10,1)
(28,39,1)
(23,39,1)
(4,18,1)
(18,35,1)
(17,25,1)
(28,0,1)
(30,39,1)
(12,17,1)
(13,22,1)
(22,36,1)
(24,23,1)
(33,4,1)
(25,3,1)
(10,30,1)
(9,6,1)
(14,29,1)
(7,33,1)
(31,42,1)
(8,28,1)
(16,7,1)
(0,26,1)
(5,30,2)
(2,39,2)
(29,20,2)
(28,39,2)
(39,14,2)
(13,36,2)
(36,39,2)
(30,39,2)
(8,28,2)
(21,2,2)
(20,37,2)
(34,21,2)
(14,32,2)
(14,29,2)
-----------------------------------
(0,data)
(1,data)
(2,data[0])
(3,0)
(4,data = NULL)
(5,data[0].intOne)
(6,data)
(7,100)
(8,* data = dataCopy)
(9,dataCopy)
(10,intOne)
(11,data)
(12,0)
(13,data[0].intTwo)
(14,(twoIntsStruct *)
(15,dataCopy)
(16,twoIntsStruct)
(17,data)
(18,NULL)
(19,RET)
(20,100*sizeof(twoIntsStruct)
(21,&data[0])
(22,intTwo)
(23,data)
(24,0)
(25,data[0].intOne = 0)
(26,dataCopy)
(27,data[0].intTwo = 0)
(28,* dataCopy = data)
(29,ALLOCA(100*sizeof(twoIntsStruct)
(30,data[0])
(31,0)
(32,twoIntsStruct *)
(33,data)
(34,printStructLine(&data[0])
(35,data)
(36,data[0])
(37,sizeof(twoIntsStruct)
(38,)
(39,data = (twoIntsStruct *)
(40,0)
(41,)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^