-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad()
{
    twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
86,87
87,88
87,89
88,89
92,93
92,94
94,95
94,96
94,97
94,98
94,99
94,100
95,96
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,84,85,89,90,91,93,96,97,98,99,103,104,105
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad(){    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad
{    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(56,7,0)
(47,10,0)
(13,10,0)
(53,5,0)
(25,19,0)
(16,34,0)
(54,56,0)
(11,15,0)
(23,5,0)
(28,12,0)
(21,15,0)
(15,7,0)
(32,22,0)
(44,10,0)
(14,44,0)
(22,26,0)
(34,10,0)
(12,10,0)
(43,58,0)
(1,41,0)
(31,5,0)
(13,56,0)
(2,58,0)
(59,26,0)
(34,16,0)
(45,10,0)
(37,55,0)
(26,22,0)
(18,19,0)
(6,10,0)
(24,47,0)
(29,16,0)
(55,13,0)
(4,19,0)
(46,26,0)
(8,4,0)
(33,1,0)
(26,13,0)
(48,19,0)
(9,12,0)
(7,15,0)
(39,13,0)
(1,33,0)
(15,11,0)
(52,10,0)
(3,10,0)
(50,55,0)
(49,0,0)
(55,28,0)
(0,13,0)
(16,29,0)
(28,55,0)
(56,54,0)
(38,33,0)
(51,19,0)
(20,29,0)
(17,28,0)
(40,29,0)
(57,10,0)
(58,5,0)
(36,11,0)
(29,13,0)
(7,56,0)
(30,0,0)
(56,13,0)
(22,44,0)
(42,58,1)
(27,3,1)
(17,55,1)
(43,2,1)
(58,43,1)
(55,13,1)
(48,27,1)
(37,50,1)
(11,36,1)
(14,22,1)
(34,16,1)
(24,42,1)
(9,28,1)
(44,14,1)
(50,44,1)
(35,48,1)
(0,49,1)
(59,0,1)
(15,11,1)
(28,55,1)
(38,0,1)
(36,21,1)
(7,15,1)
(12,9,1)
(22,32,1)
(46,59,1)
(26,46,1)
(55,37,1)
(47,24,1)
(0,13,1)
(27,57,1)
(56,54,1)
(39,42,1)
(49,30,1)
(16,29,1)
(26,13,1)
(35,18,1)
(32,26,1)
(30,13,1)
(40,12,1)
(59,1,1)
(22,26,1)
(29,13,1)
(33,38,1)
(57,34,1)
(18,4,1)
(8,27,1)
(4,8,1)
(56,7,1)
(29,20,1)
(1,33,1)
(21,39,1)
(20,40,1)
(3,47,1)
(28,17,1)
(13,56,1)
(34,42,2)
(30,42,2)
(49,42,2)
(38,0,2)
(55,13,2)
(47,42,2)
(32,42,2)
(0,42,2)
(9,42,2)
(33,0,2)
(16,29,2)
(57,42,2)
(56,54,2)
(56,42,2)
(18,27,2)
(15,42,2)
(59,42,2)
(12,42,2)
(1,0,2)
(28,42,2)
(13,42,2)
(50,42,2)
(28,55,2)
(21,42,2)
(36,42,2)
(3,42,2)
(16,42,2)
(20,42,2)
(55,42,2)
(56,7,2)
(26,42,2)
(39,42,2)
(7,42,2)
(15,11,2)
(46,42,2)
(29,42,2)
(8,27,2)
(13,56,2)
(26,13,2)
(44,42,2)
(48,27,2)
(4,27,2)
(1,33,2)
(17,42,2)
(34,16,2)
(22,26,2)
(11,42,2)
(0,13,2)
(7,15,2)
(40,42,2)
(24,42,2)
(22,42,2)
(29,13,2)
(37,42,2)
(14,42,2)
-----------------------------------
(0,data == NULL)
(1,exit(-1)
(2,data)
(3,break;)
(4,printLine("Benign, fixed string")
(5,)
(6,if (data == NULL)
(7,malloc(100*sizeof(twoIntsStruct)
(8,"Benign, fixed string")
(9,0)
(10,)
(11,sizeof(twoIntsStruct)
(12,data[0].intTwo = 0)
(13,data = (twoIntsStruct *)
(14,0)
(15,100*sizeof(twoIntsStruct)
(16,&data[0])
(17,intTwo)
(18,break;)
(19,)
(20,0)
(21,100)
(22,data[0].intOne)
(23,data)
(24,"Benign, fixed string")
(25,default:)
(26,data[0])
(27,7)
(28,data[0].intTwo)
(29,data[0])
(30,data)
(31,switch(7)
(32,intOne)
(33,-1)
(34,printStructLine(&data[0])
(35,RET)
(36,twoIntsStruct)
(37,0)
(38,1)
(39,data)
(40,data)
(41,)
(42,6)
(43,NULL)
(44,data[0].intOne = 0)
(45,default:)
(46,0)
(47,printLine("Benign, fixed string")
(48,break;)
(49,NULL)
(50,data)
(51,case 7:)
(52,case 6:)
(53,switch(6)
(54,twoIntsStruct *)
(55,data[0])
(56,(twoIntsStruct *)
(57,break;)
(58,data = NULL)
(59,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^