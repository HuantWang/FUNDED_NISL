-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticFive==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,44,46,48,53,54,57,61,62,64,67,72,73
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(21,17,0)
(0,7,0)
(12,38,0)
(1,8,0)
(17,34,0)
(26,36,0)
(7,41,0)
(31,40,0)
(29,10,0)
(9,41,0)
(7,3,0)
(15,29,0)
(24,28,0)
(38,20,0)
(39,28,0)
(18,22,0)
(27,28,0)
(6,40,0)
(30,14,0)
(40,30,0)
(25,30,0)
(3,7,0)
(33,30,0)
(36,28,0)
(4,8,0)
(5,26,0)
(3,23,0)
(32,36,0)
(23,3,0)
(36,26,0)
(19,29,0)
(2,37,0)
(3,29,0)
(16,41,0)
(37,41,0)
(35,22,0)
(11,3,0)
(3,36,0)
(9,16,1)
(4,1,1)
(36,26,1)
(16,40,1)
(7,41,1)
(7,3,1)
(38,12,1)
(15,8,1)
(0,41,1)
(29,19,1)
(31,22,1)
(17,21,1)
(37,41,1)
(1,36,1)
(3,23,1)
(41,9,1)
(2,17,1)
(0,37,1)
(8,4,1)
(18,35,1)
(22,18,1)
(6,31,1)
(19,15,1)
(26,5,1)
(3,29,1)
(35,29,1)
(12,8,1)
(40,6,1)
(11,0,1)
(3,11,1)
(37,2,1)
(21,7,1)
(35,38,1)
(5,32,1)
(13,7,1)
(13,22,1)
(3,36,1)
(37,41,2)
(12,8,2)
(41,22,2)
(2,7,2)
(3,7,2)
(3,23,2)
(19,8,2)
(3,36,2)
(11,22,2)
(37,7,2)
(40,22,2)
(21,7,2)
(7,22,2)
(7,7,2)
(0,22,2)
(7,41,2)
(36,26,2)
(15,8,2)
(7,3,2)
(3,22,2)
(9,22,2)
(38,8,2)
(31,22,2)
(6,22,2)
(3,29,2)
(29,8,2)
(16,22,2)
(17,7,2)
(0,7,2)
(11,7,2)
-----------------------------------
(0,i)
(1,staticFive)
(2,i)
(3,(size_t)
(4,5)
(5,1)
(6,0)
(7,i < (size_t)
(8,staticFive!=5)
(9,0)
(10,)
(11,count)
(12,"Benign, fixed string")
(13,RET)
(14,)
(15,count)
(16,i)
(17,printLine("Hello")
(18,5)
(19,20)
(20,)
(21,"Hello")
(22,staticFive==5)
(23,size_t)
(24,if(staticFive==5)
(25,for (i = 0; i < (size_t)
(26,-1)
(27,if(staticFive!=5)
(28,)
(29,count = 20)
(30,)
(31,i)
(32,count)
(33,i)
(34,)
(35,staticFive)
(36,count = -1)
(37,i++)
(38,printLine("Benign, fixed string")
(39,count)
(40,i = 0)
(41,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^