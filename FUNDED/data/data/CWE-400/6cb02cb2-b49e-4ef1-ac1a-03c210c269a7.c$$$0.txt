-----label-----
1
-----code-----
int rdma_resolve_ip(struct rdma_addr_client *client,
		    struct sockaddr *src_addr, struct sockaddr *dst_addr,
		    struct rdma_dev_addr *addr, int timeout_ms,
		    void (*callback)(int status, struct sockaddr *src_addr,
				     struct rdma_dev_addr *addr, void *context),
		    void *context)
{
	struct sockaddr *src_in, *dst_in;
	struct addr_req *req;
	int ret = 0;

	req = kzalloc(sizeof *req, GFP_KERNEL);
	if (!req)
		return -ENOMEM;

	src_in = (struct sockaddr *) &req->src_addr;
	dst_in = (struct sockaddr *) &req->dst_addr;

	if (src_addr) {
		if (src_addr->sa_family != dst_addr->sa_family) {
			ret = -EINVAL;
			goto err;
		}

		memcpy(src_in, src_addr, rdma_addr_size(src_addr));
	} else {
		src_in->sa_family = dst_addr->sa_family;
	}

	memcpy(dst_in, dst_addr, rdma_addr_size(dst_addr));
	req->addr = addr;
	req->callback = callback;
	req->context = context;
	req->client = client;
	atomic_inc(&client->refcount);

	req->status = addr_resolve(src_in, dst_in, addr);
	switch (req->status) {
	case 0:
		req->timeout = jiffies;
		queue_req(req);
		break;
	case -ENODATA:
		req->timeout = msecs_to_jiffies(timeout_ms) + jiffies;
		queue_req(req);
		break;
	default:
		ret = req->status;
		atomic_dec(&client->refcount);
		goto err;
	}
	return ret;
err:
	kfree(req);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
31,32
33,34
33,35
35,36
35,37
35,38
35,39
35,40
36,37
36,38
39,40
39,41
41,42
43,44
43,45
44,45
46,47
46,48
49,50
49,51
50,51
52,53
52,54
55,56
55,57
57,58
57,59
60,61
60,62
62,63
62,64
65,66
65,67
65,68
65,69
65,70
65,71
65,72
65,73
65,74
65,75
65,76
65,77
65,78
65,79
65,80
65,81
65,82
65,83
65,84
66,67
67,68
67,69
67,70
68,69
70,71
70,72
73,74
73,75
76,77
77,78
77,79
78,79
80,81
80,82
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
92,93
94,95
94,96
94,97
95,96
97,98
98,99
99,100
101,102
103,104
103,105
104,105
105,106
107,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
137,139
138,139
141,142
141,143
141,144
142,143
144,145
144,146
145,146
145,147
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
155,156
155,157
156,157
157,158
157,159
158,159
160,161
161,162
163,164
165,166
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
173,175
174,175
176,177
178,179
179,180
180,181
180,182
181,182
181,183
182,183
185,186
185,187
186,187
189,190
190,191
190,192
190,193
190,194
191,192
193,194
195,196
197,198
197,199
198,199
200,201
202,203
203,204
203,205
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
216,217
218,219
219,220
219,221
220,221
220,222
221,222
224,225
226,227
227,228
227,229
228,229
228,230
229,230
232,233
234,235
235,236
235,237
236,237
238,239
239,240
239,241
240,241
243,244
244,245
244,246
245,246
245,247
246,247
249,250
249,251
249,252
249,253
250,251
252,253
254,255
256,257
258,259
258,260
259,260
259,261
260,261
263,264
263,265
263,266
263,267
263,268
263,269
263,270
263,271
263,272
263,273
263,274
263,275
264,265
266,267
267,268
267,269
268,269
268,270
269,270
272,273
274,275
275,276
275,277
276,277
278,279
281,282
282,283
283,284
285,286
286,287
286,288
287,288
287,289
288,289
291,292
291,293
292,293
292,294
293,294
295,296
297,298
299,300
300,301
300,302
301,302
303,304
307,308
308,309
308,310
309,310
311,312
311,313
312,313
315,316
316,317
316,318
317,318
319,320
320,321
320,322
321,322
324,325
326,327
327,328
329,330
329,331
331,332
332,333
332,334
333,334
335,336
337,338
338,339
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,30,32,34,37,38,40,42,45,47,48,51,53,54,56,58,59,61,63,64,69,71,72,74,75,79,81,82,85,87,89,93,96,100,102,106,110,114,118,120,124,125,129,133,135,139,140,143,149,150,153,154,159,162,164,168,170,172,175,177,183,184,187,188,192,194,196,199,201,206,207,209,214,215,217,222,223,225,230,231,233,237,241,242,247,248,251,253,255,257,261,262,265,270,271,273,277,279,280,284,289,290,294,296,298,302,304,305,306,310,313,314,318,322,323,325,328,330,334,336,339
-----computeFrom-----
91,92
91,93
112,113
112,114
127,128
127,129
146,147
146,148
157,158
157,159
180,181
180,182
203,204
203,205
211,212
211,213
219,220
219,221
227,228
227,229
244,245
244,246
267,268
267,269
286,287
286,288
291,292
291,293
308,309
308,310
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int rdma_resolve_ip(struct rdma_addr_client *client,		    struct sockaddr *src_addr, struct sockaddr *dst_addr,		    struct rdma_dev_addr *addr, int timeout_ms,		    void (*callback)(int status, struct sockaddr *src_addr,				     struct rdma_dev_addr *addr, void *context),		    void *context){	struct sockaddr *src_in, *dst_in;	struct addr_req *req;	int ret = 0;	req = kzalloc(sizeof *req, GFP_KERNEL);	if (!req)		return -ENOMEM;	src_in = (struct sockaddr *) &req->src_addr;	dst_in = (struct sockaddr *) &req->dst_addr;	if (src_addr) {		if (src_addr->sa_family != dst_addr->sa_family) {			ret = -EINVAL;			goto err;		}		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	} else {		src_in->sa_family = dst_addr->sa_family;	}	memcpy(dst_in, dst_addr, rdma_addr_size(dst_addr));	req->addr = addr;	req->callback = callback;	req->context = context;	req->client = client;	atomic_inc(&client->refcount);	req->status = addr_resolve(src_in, dst_in, addr);	switch (req->status) {	case 0:		req->timeout = jiffies;		queue_req(req);		break;	case -ENODATA:		req->timeout = msecs_to_jiffies(timeout_ms) + jiffies;		queue_req(req);		break;	default:		ret = req->status;		atomic_dec(&client->refcount);		goto err;	}	return ret;err:	kfree(req);	return ret;}
int
rdma_resolve_ip(struct rdma_addr_client *client,		    struct sockaddr *src_addr, struct sockaddr *dst_addr,		    struct rdma_dev_addr *addr, int timeout_ms,		    void (*callback)(int status, struct sockaddr *src_addr,				     struct rdma_dev_addr *addr, void *context),		    void *context)
rdma_resolve_ip
struct rdma_addr_client *client
struct rdma_addr_client
rdma_addr_client
*client
*
client
struct sockaddr *src_addr
struct sockaddr
sockaddr
*src_addr
*
src_addr
struct sockaddr *dst_addr
struct sockaddr
sockaddr
*dst_addr
*
dst_addr
struct rdma_dev_addr *addr
struct rdma_dev_addr
rdma_dev_addr
*addr
*
addr
int timeout_ms
int
timeout_ms
timeout_ms
void (*callback)(int status, struct sockaddr *src_addr,				     struct rdma_dev_addr *addr, void *context)
void
(*callback)(int status, struct sockaddr *src_addr,				     struct rdma_dev_addr *addr, void *context)
*callback
*
callback
int status
int
status
status
struct sockaddr *src_addr
struct sockaddr
sockaddr
*src_addr
*
src_addr
struct rdma_dev_addr *addr
struct rdma_dev_addr
rdma_dev_addr
*addr
*
addr
void *context
void
*context
*
context
void *context
void
*context
*
context
{	struct sockaddr *src_in, *dst_in;	struct addr_req *req;	int ret = 0;	req = kzalloc(sizeof *req, GFP_KERNEL);	if (!req)		return -ENOMEM;	src_in = (struct sockaddr *) &req->src_addr;	dst_in = (struct sockaddr *) &req->dst_addr;	if (src_addr) {		if (src_addr->sa_family != dst_addr->sa_family) {			ret = -EINVAL;			goto err;		}		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	} else {		src_in->sa_family = dst_addr->sa_family;	}	memcpy(dst_in, dst_addr, rdma_addr_size(dst_addr));	req->addr = addr;	req->callback = callback;	req->context = context;	req->client = client;	atomic_inc(&client->refcount);	req->status = addr_resolve(src_in, dst_in, addr);	switch (req->status) {	case 0:		req->timeout = jiffies;		queue_req(req);		break;	case -ENODATA:		req->timeout = msecs_to_jiffies(timeout_ms) + jiffies;		queue_req(req);		break;	default:		ret = req->status;		atomic_dec(&client->refcount);		goto err;	}	return ret;err:	kfree(req);	return ret;}
struct sockaddr *src_in, *dst_in;
struct sockaddr *src_in, *dst_in;
struct sockaddr
sockaddr
*src_in
*
src_in
*dst_in
*
dst_in
struct addr_req *req;
struct addr_req *req;
struct addr_req
addr_req
*req
*
req
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
req = kzalloc(sizeof *req, GFP_KERNEL);
req = kzalloc(sizeof *req, GFP_KERNEL)
req
req
kzalloc(sizeof *req, GFP_KERNEL)
kzalloc
kzalloc
sizeof *req
*req
req
req
GFP_KERNEL
GFP_KERNEL
if (!req)		return -ENOMEM;
!req
req
req
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
src_in = (struct sockaddr *) &req->src_addr;
src_in = (struct sockaddr *) &req->src_addr
src_in
src_in
(struct sockaddr *) &req->src_addr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&req->src_addr
req->src_addr
req
req
src_addr
dst_in = (struct sockaddr *) &req->dst_addr;
dst_in = (struct sockaddr *) &req->dst_addr
dst_in
dst_in
(struct sockaddr *) &req->dst_addr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&req->dst_addr
req->dst_addr
req
req
dst_addr
if (src_addr) {		if (src_addr->sa_family != dst_addr->sa_family) {			ret = -EINVAL;			goto err;		}		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	} else {		src_in->sa_family = dst_addr->sa_family;	}
src_addr
src_addr
{		if (src_addr->sa_family != dst_addr->sa_family) {			ret = -EINVAL;			goto err;		}		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	}
if (src_addr->sa_family != dst_addr->sa_family) {			ret = -EINVAL;			goto err;		}
src_addr->sa_family != dst_addr->sa_family
src_addr->sa_family
src_addr
src_addr
sa_family
dst_addr->sa_family
dst_addr
dst_addr
sa_family
{			ret = -EINVAL;			goto err;		}
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto err;
err
memcpy(src_in, src_addr, rdma_addr_size(src_addr));
memcpy(src_in, src_addr, rdma_addr_size(src_addr))
memcpy
memcpy
src_in
src_in
src_addr
src_addr
rdma_addr_size(src_addr)
rdma_addr_size
rdma_addr_size
src_addr
src_addr
{		src_in->sa_family = dst_addr->sa_family;	}
src_in->sa_family = dst_addr->sa_family;
src_in->sa_family = dst_addr->sa_family
src_in->sa_family
src_in
src_in
sa_family
dst_addr->sa_family
dst_addr
dst_addr
sa_family
memcpy(dst_in, dst_addr, rdma_addr_size(dst_addr));
memcpy(dst_in, dst_addr, rdma_addr_size(dst_addr))
memcpy
memcpy
dst_in
dst_in
dst_addr
dst_addr
rdma_addr_size(dst_addr)
rdma_addr_size
rdma_addr_size
dst_addr
dst_addr
req->addr = addr;
req->addr = addr
req->addr
req
req
addr
addr
addr
req->callback = callback;
req->callback = callback
req->callback
req
req
callback
callback
callback
req->context = context;
req->context = context
req->context
req
req
context
context
context
req->client = client;
req->client = client
req->client
req
req
client
client
client
atomic_inc(&client->refcount);
atomic_inc(&client->refcount)
atomic_inc
atomic_inc
&client->refcount
client->refcount
client
client
refcount
req->status = addr_resolve(src_in, dst_in, addr);
req->status = addr_resolve(src_in, dst_in, addr)
req->status
req
req
status
addr_resolve(src_in, dst_in, addr)
addr_resolve
addr_resolve
src_in
src_in
dst_in
dst_in
addr
addr
switch (req->status) {	case 0:		req->timeout = jiffies;		queue_req(req);		break;	case -ENODATA:		req->timeout = msecs_to_jiffies(timeout_ms) + jiffies;		queue_req(req);		break;	default:		ret = req->status;		atomic_dec(&client->refcount);		goto err;	}
req->status
req
req
status
{	case 0:		req->timeout = jiffies;		queue_req(req);		break;	case -ENODATA:		req->timeout = msecs_to_jiffies(timeout_ms) + jiffies;		queue_req(req);		break;	default:		ret = req->status;		atomic_dec(&client->refcount);		goto err;	}
case 0:
0
req->timeout = jiffies;
req->timeout = jiffies
req->timeout
req
req
timeout
jiffies
jiffies
queue_req(req);
queue_req(req)
queue_req
queue_req
req
req
break;
case -ENODATA:
-ENODATA
ENODATA
ENODATA
req->timeout = msecs_to_jiffies(timeout_ms) + jiffies;
req->timeout = msecs_to_jiffies(timeout_ms) + jiffies
req->timeout
req
req
timeout
msecs_to_jiffies(timeout_ms) + jiffies
msecs_to_jiffies(timeout_ms)
msecs_to_jiffies
msecs_to_jiffies
timeout_ms
timeout_ms
jiffies
jiffies
queue_req(req);
queue_req(req)
queue_req
queue_req
req
req
break;
default:
ret = req->status;
ret = req->status
ret
ret
req->status
req
req
status
atomic_dec(&client->refcount);
atomic_dec(&client->refcount)
atomic_dec
atomic_dec
&client->refcount
client->refcount
client
client
refcount
goto err;
err
return ret;
ret
ret
err:	kfree(req);
err
kfree(req);
kfree(req)
kfree
kfree
req
req
return ret;
ret
ret
-----joern-----
(141,144,0)
(70,126,0)
(63,3,0)
(148,100,0)
(39,92,0)
(32,128,0)
(44,22,0)
(107,35,0)
(125,92,0)
(58,102,0)
(124,18,0)
(150,144,0)
(137,28,0)
(44,13,0)
(14,61,0)
(52,46,0)
(16,110,0)
(12,35,0)
(123,4,0)
(151,104,0)
(103,39,0)
(69,24,0)
(55,92,0)
(49,92,0)
(48,76,0)
(2,92,0)
(57,92,0)
(115,63,0)
(25,92,0)
(58,72,0)
(44,119,0)
(4,76,0)
(3,122,0)
(35,51,0)
(42,18,0)
(104,17,0)
(149,92,0)
(54,144,0)
(111,141,0)
(21,120,0)
(65,70,0)
(87,19,0)
(82,13,0)
(133,97,0)
(106,58,0)
(9,39,0)
(72,58,0)
(76,122,0)
(120,33,0)
(114,18,0)
(43,4,0)
(90,27,0)
(152,60,0)
(115,92,0)
(118,154,0)
(72,41,0)
(64,42,0)
(19,142,0)
(112,60,0)
(136,71,0)
(129,142,0)
(139,42,0)
(3,63,0)
(79,127,0)
(110,39,0)
(63,115,0)
(89,9,0)
(128,57,0)
(42,64,0)
(145,68,0)
(13,100,0)
(95,40,0)
(100,13,0)
(108,31,0)
(93,18,0)
(144,39,0)
(88,119,0)
(126,70,0)
(155,145,0)
(62,10,0)
(101,52,0)
(86,100,0)
(77,129,0)
(127,75,0)
(66,61,0)
(30,125,0)
(124,33,0)
(57,98,0)
(137,81,0)
(129,133,0)
(36,39,0)
(88,39,0)
(38,40,0)
(103,75,0)
(33,120,0)
(7,18,0)
(129,19,0)
(85,92,0)
(91,44,0)
(17,104,0)
(9,86,0)
(40,39,0)
(10,52,0)
(154,92,0)
(24,140,0)
(10,39,0)
(67,114,0)
(84,28,0)
(56,18,0)
(51,92,0)
(0,128,0)
(71,102,0)
(96,17,0)
(23,39,0)
(15,58,0)
(6,88,0)
(157,97,0)
(8,133,0)
(28,141,0)
(29,81,0)
(75,127,0)
(97,133,0)
(125,13,0)
(133,92,0)
(156,3,0)
(4,39,0)
(116,51,0)
(128,39,0)
(28,68,0)
(113,132,0)
(70,39,0)
(117,18,0)
(37,57,0)
(74,96,0)
(34,64,0)
(96,102,0)
(36,18,0)
(28,92,0)
(125,71,0)
(83,139,0)
(86,9,0)
(78,135,0)
(44,133,0)
(35,39,0)
(71,125,0)
(61,72,0)
(99,18,0)
(129,132,0)
(109,44,0)
(125,102,0)
(144,141,0)
(52,92,0)
(119,44,0)
(39,103,0)
(134,44,0)
(53,92,0)
(100,86,0)
(20,110,0)
(94,92,0)
(13,92,0)
(121,139,0)
(1,129,0)
(24,64,0)
(147,96,0)
(80,9,0)
(120,122,0)
(61,133,0)
(47,94,0)
(11,120,0)
(26,88,0)
(33,124,0)
(153,104,0)
(17,96,0)
(94,39,0)
(51,22,0)
(97,157,0)
(143,29,0)
(100,148,0)
(154,60,0)
(144,119,0)
(119,92,0)
(104,142,0)
(135,39,0)
(5,36,0)
(141,18,0)
(146,125,0)
(137,154,0)
(110,114,0)
(138,18,0)
(97,126,0)
(68,27,0)
(19,129,0)
(68,145,0)
(50,70,0)
(59,68,0)
(64,24,0)
(73,3,0)
(31,18,0)
(76,92,0)
(131,10,0)
(130,92,0)
(45,103,0)
(75,103,0)
(126,97,0)
(60,92,0)
(104,142,1)
(151,105,1)
(125,71,1)
(123,52,1)
(73,156,1)
(71,136,1)
(144,39,1)
(96,102,1)
(129,19,1)
(114,67,1)
(70,50,1)
(90,68,1)
(57,37,1)
(17,96,1)
(103,45,1)
(19,87,1)
(75,127,1)
(14,105,1)
(100,148,1)
(143,135,1)
(61,133,1)
(97,157,1)
(147,74,1)
(0,51,1)
(67,110,1)
(64,24,1)
(77,17,1)
(131,62,1)
(133,97,1)
(36,5,1)
(44,13,1)
(104,153,1)
(128,39,1)
(141,144,1)
(19,142,1)
(72,58,1)
(35,39,1)
(30,146,1)
(97,126,1)
(88,39,1)
(31,108,1)
(129,142,1)
(28,68,1)
(44,133,1)
(117,124,1)
(125,102,1)
(103,75,1)
(100,86,1)
(105,13,1)
(135,78,1)
(110,39,1)
(54,150,1)
(107,12,1)
(99,36,1)
(51,22,1)
(154,60,1)
(124,33,1)
(24,69,1)
(6,26,1)
(82,133,1)
(29,143,1)
(15,106,1)
(40,39,1)
(150,111,1)
(47,117,1)
(38,95,1)
(64,34,1)
(109,91,1)
(51,116,1)
(127,79,1)
(33,120,1)
(154,118,1)
(144,54,1)
(145,155,1)
(76,122,1)
(10,131,1)
(58,102,1)
(111,40,1)
(32,0,1)
(70,39,1)
(9,39,1)
(20,40,1)
(115,63,1)
(156,76,1)
(87,1,1)
(118,138,1)
(86,9,1)
(37,128,1)
(11,21,1)
(8,135,1)
(101,10,1)
(58,15,1)
(146,129,1)
(35,107,1)
(94,47,1)
(40,38,1)
(5,114,1)
(94,39,1)
(52,101,1)
(137,28,1)
(120,122,1)
(146,72,1)
(28,84,1)
(95,119,1)
(66,14,1)
(9,80,1)
(24,140,1)
(62,57,1)
(52,46,1)
(136,30,1)
(134,109,1)
(44,22,1)
(47,90,1)
(89,82,1)
(121,83,1)
(79,23,1)
(21,141,1)
(28,141,1)
(119,44,1)
(152,112,1)
(153,151,1)
(61,66,1)
(1,77,1)
(81,29,1)
(10,39,1)
(45,75,1)
(91,88,1)
(126,70,1)
(50,65,1)
(116,35,1)
(65,8,1)
(23,60,1)
(84,94,1)
(43,123,1)
(36,39,1)
(135,39,1)
(69,139,1)
(34,24,1)
(96,147,1)
(128,32,1)
(139,121,1)
(42,64,1)
(125,13,1)
(76,48,1)
(12,125,1)
(138,31,1)
(3,73,1)
(13,100,1)
(26,115,1)
(120,11,1)
(60,152,1)
(59,17,1)
(108,42,1)
(3,122,1)
(17,104,1)
(48,4,1)
(16,20,1)
(4,39,1)
(68,145,1)
(74,104,1)
(118,99,1)
(110,16,1)
(80,89,1)
(88,6,1)
(4,43,1)
(144,119,1)
(129,133,1)
(106,61,1)
(71,102,1)
(137,81,1)
(44,134,1)
(137,154,1)
(63,3,1)
(78,39,1)
(39,103,1)
(155,59,1)
(57,98,1)
(109,17,2)
(100,86,2)
(44,13,2)
(119,44,2)
(6,105,2)
(63,17,2)
(9,135,2)
(40,39,2)
(20,40,2)
(137,154,2)
(0,105,2)
(151,105,2)
(124,33,2)
(95,17,2)
(4,105,2)
(66,105,2)
(154,60,2)
(30,105,2)
(131,17,2)
(17,104,2)
(126,135,2)
(106,105,2)
(40,105,2)
(97,157,2)
(88,105,2)
(64,24,2)
(52,46,2)
(10,105,2)
(129,19,2)
(58,102,2)
(100,135,2)
(62,17,2)
(133,135,2)
(133,97,2)
(10,17,2)
(72,105,2)
(104,142,2)
(123,105,2)
(54,40,2)
(129,142,2)
(96,105,2)
(28,17,2)
(94,17,2)
(17,96,2)
(119,17,2)
(116,17,2)
(61,105,2)
(111,40,2)
(136,105,2)
(62,105,2)
(3,122,2)
(134,105,2)
(61,133,2)
(75,127,2)
(65,135,2)
(15,105,2)
(33,120,2)
(125,13,2)
(3,17,2)
(35,39,2)
(52,105,2)
(134,17,2)
(48,105,2)
(43,105,2)
(144,40,2)
(28,68,2)
(154,40,2)
(70,135,2)
(8,135,2)
(77,17,2)
(71,105,2)
(137,28,2)
(57,98,2)
(105,135,2)
(104,105,2)
(21,40,2)
(147,105,2)
(63,3,2)
(76,105,2)
(100,148,2)
(144,39,2)
(4,17,2)
(90,17,2)
(136,17,2)
(129,17,2)
(48,17,2)
(17,105,2)
(68,145,2)
(40,17,2)
(3,105,2)
(86,9,2)
(84,17,2)
(153,105,2)
(124,40,2)
(120,122,2)
(5,40,2)
(37,17,2)
(137,81,2)
(88,17,2)
(123,17,2)
(73,105,2)
(36,40,2)
(19,17,2)
(110,40,2)
(28,141,2)
(146,17,2)
(84,40,2)
(35,17,2)
(89,135,2)
(125,71,2)
(146,105,2)
(36,39,2)
(88,39,2)
(68,17,2)
(119,105,2)
(39,103,2)
(74,105,2)
(38,105,2)
(44,17,2)
(115,63,2)
(96,102,2)
(38,17,2)
(57,17,2)
(91,17,2)
(12,17,2)
(57,105,2)
(82,135,2)
(115,105,2)
(9,39,2)
(141,144,2)
(0,17,2)
(37,105,2)
(6,17,2)
(44,105,2)
(99,40,2)
(76,122,2)
(129,133,2)
(125,17,2)
(26,17,2)
(16,40,2)
(58,105,2)
(81,135,2)
(128,39,2)
(42,64,2)
(29,135,2)
(156,17,2)
(103,75,2)
(63,105,2)
(19,142,2)
(125,105,2)
(35,105,2)
(156,105,2)
(1,17,2)
(70,39,2)
(59,17,2)
(50,135,2)
(28,40,2)
(115,17,2)
(13,135,2)
(125,102,2)
(32,17,2)
(47,40,2)
(72,58,2)
(44,133,2)
(120,40,2)
(97,135,2)
(67,40,2)
(13,100,2)
(30,17,2)
(141,40,2)
(47,17,2)
(26,105,2)
(107,17,2)
(71,102,2)
(86,135,2)
(101,17,2)
(150,40,2)
(44,22,2)
(126,70,2)
(143,135,2)
(94,40,2)
(33,40,2)
(73,17,2)
(155,17,2)
(131,105,2)
(94,39,2)
(71,17,2)
(117,40,2)
(145,17,2)
(51,22,2)
(87,17,2)
(43,17,2)
(76,17,2)
(51,17,2)
(116,105,2)
(10,39,2)
(118,40,2)
(144,119,2)
(12,105,2)
(95,105,2)
(109,105,2)
(14,105,2)
(24,140,2)
(52,17,2)
(114,40,2)
(11,40,2)
(110,39,2)
(91,105,2)
(128,17,2)
(97,126,2)
(51,105,2)
(101,105,2)
(135,39,2)
(4,39,2)
(80,135,2)
(32,105,2)
(107,105,2)
(128,105,2)
-----------------------------------
(0,req)
(1,src_addr)
(2,src_in)
(3,client->refcount)
(4,req->client)
(5,req)
(6,status)
(7,ENODATA:)
(8,src_in)
(9,req->dst_addr)
(10,req->context)
(11,refcount)
(12,req)
(13,dst_in = (struct sockaddr *)
(14,src_in)
(15,sa_family)
(16,timeout)
(17,src_addr->sa_family != dst_addr->sa_family)
(18,)
(19,rdma_addr_size(src_addr)
(20,req)
(21,client)
(22,struct rdma_dev_addr *addr)
(23,req)
(24,msecs_to_jiffies(timeout_ms)
(25,if (src_addr)
(26,req)
(27,)
(28,return ret;)
(29,-ENOMEM)
(30,dst_addr)
(31,queue_req(req)
(32,callback)
(33,&client->refcount)
(34,jiffies)
(35,req->addr)
(36,queue_req(req)
(37,callback)
(38,status)
(39,req = kzalloc(sizeof *req, GFP_KERNEL)
(40,req->status)
(41,)
(42,req->timeout = msecs_to_jiffies(timeout_ms)
(43,client)
(44,addr_resolve(src_in, dst_in, addr)
(45,GFP_KERNEL)
(46,void *context)
(47,req)
(48,client)
(49,req)
(50,src_addr)
(51,req->addr = addr)
(52,req->context = context)
(53,switch (req->status)
(54,status)
(55,dst_in)
(56,default:)
(57,req->callback = callback)
(58,dst_addr->sa_family)
(59,ret)
(60,ret = 0)
(61,src_in->sa_family)
(62,req)
(63,&client->refcount)
(64,msecs_to_jiffies(timeout_ms)
(65,req)
(66,sa_family)
(67,jiffies)
(68,ret = -EINVAL)
(69,timeout_ms)
(70,req->src_addr)
(71,rdma_addr_size(dst_addr)
(72,src_in->sa_family = dst_addr->sa_family)
(73,refcount)
(74,dst_addr)
(75,sizeof *req)
(76,req->client = client)
(77,src_in)
(78,req)
(79,req)
(80,dst_addr)
(81,return -ENOMEM;)
(82,dst_in)
(83,req)
(84,ret)
(85,err:)
(86,&req->dst_addr)
(87,src_addr)
(88,req->status)
(89,req)
(90,goto err;)
(91,src_in)
(92,)
(93,case 0:)
(94,kfree(req)
(95,req)
(96,dst_addr->sa_family)
(97,(struct sockaddr *)
(98,void (*callback)
(99,break;)
(100,(struct sockaddr *)
(101,context)
(102,struct sockaddr *dst_addr)
(103,kzalloc(sizeof *req, GFP_KERNEL)
(104,src_addr->sa_family)
(105,src_addr)
(106,dst_addr)
(107,addr)
(108,req)
(109,dst_in)
(110,req->timeout)
(111,ret)
(112,ret)
(113,if (src_addr->sa_family != dst_addr->sa_family)
(114,req->timeout = jiffies)
(115,atomic_inc(&client->refcount)
(116,addr)
(117,goto err;)
(118,ret)
(119,req->status = addr_resolve(src_in, dst_in, addr)
(120,client->refcount)
(121,timeout)
(122,struct rdma_addr_client *client)
(123,req)
(124,atomic_dec(&client->refcount)
(125,memcpy(dst_in, dst_addr, rdma_addr_size(dst_addr)
(126,&req->src_addr)
(127,*req)
(128,req->callback)
(129,memcpy(src_in, src_addr, rdma_addr_size(src_addr)
(130,if (!req)
(131,context)
(132,)
(133,src_in = (struct sockaddr *)
(134,addr)
(135,!req)
(136,dst_addr)
(137,RET)
(138,break;)
(139,req->timeout)
(140,int timeout_ms)
(141,ret = req->status)
(142,struct sockaddr *src_addr)
(143,ENOMEM)
(144,req->status)
(145,-EINVAL)
(146,dst_in)
(147,sa_family)
(148,struct sockaddr *)
(149,ret)
(150,req)
(151,src_addr)
(152,0)
(153,sa_family)
(154,return ret;)
(155,EINVAL)
(156,client)
(157,struct sockaddr *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^