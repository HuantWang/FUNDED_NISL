-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,31,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
29,30
29,31
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,42,0)
(2,46,0)
(38,17,0)
(36,29,0)
(3,28,0)
(15,21,0)
(52,10,0)
(23,36,0)
(21,2,0)
(39,8,0)
(11,46,0)
(11,2,0)
(18,37,0)
(33,4,0)
(35,27,0)
(4,2,0)
(16,46,0)
(9,40,0)
(24,46,0)
(27,19,0)
(16,2,0)
(34,43,0)
(45,12,0)
(2,47,0)
(1,42,0)
(26,8,0)
(49,36,0)
(25,43,0)
(41,40,0)
(31,21,0)
(6,38,0)
(0,28,0)
(47,25,0)
(19,27,0)
(20,26,0)
(44,11,0)
(19,5,0)
(43,12,0)
(12,7,0)
(53,12,0)
(50,10,0)
(51,16,0)
(4,46,0)
(26,40,0)
(37,43,0)
(43,37,0)
(22,28,0)
(47,2,0)
(14,2,0)
(40,28,0)
(8,26,0)
(26,12,0)
(13,47,0)
(25,47,0)
(43,40,0)
(48,4,0)
(43,25,0)
(47,13,0)
(15,31,1)
(11,44,1)
(39,20,1)
(40,41,1)
(25,43,1)
(26,12,1)
(14,26,1)
(32,42,1)
(21,15,1)
(42,1,1)
(21,2,1)
(8,39,1)
(19,27,1)
(43,40,1)
(30,10,1)
(35,21,1)
(45,10,1)
(34,14,1)
(18,34,1)
(30,12,1)
(32,16,1)
(10,50,1)
(12,53,1)
(11,2,1)
(2,47,1)
(1,30,1)
(16,2,1)
(51,11,1)
(26,8,1)
(32,38,1)
(26,40,1)
(33,21,1)
(4,48,1)
(52,40,1)
(4,2,1)
(50,52,1)
(27,35,1)
(47,13,1)
(53,45,1)
(48,33,1)
(44,4,1)
(43,12,1)
(6,26,1)
(20,42,1)
(41,9,1)
(16,51,1)
(37,18,1)
(47,25,1)
(38,6,1)
(33,19,1)
(43,37,1)
(31,2,1)
(44,26,2)
(14,26,2)
(21,26,2)
(19,21,2)
(16,26,2)
(33,26,2)
(26,40,2)
(39,42,2)
(27,21,2)
(26,8,2)
(11,26,2)
(47,13,2)
(2,26,2)
(4,26,2)
(43,37,2)
(53,10,2)
(47,26,2)
(11,2,2)
(38,26,2)
(43,40,2)
(43,12,2)
(20,42,2)
(25,26,2)
(31,26,2)
(18,26,2)
(6,26,2)
(43,26,2)
(2,47,2)
(21,2,2)
(16,2,2)
(8,42,2)
(37,26,2)
(48,26,2)
(4,2,2)
(35,21,2)
(26,42,2)
(47,25,2)
(34,26,2)
(25,43,2)
(26,12,2)
(19,27,2)
(12,10,2)
(15,26,2)
(45,10,2)
(51,26,2)
-----------------------------------
(0,data)
(1,5)
(2,myString = (char *)
(3,if(GLOBAL_CONST_FIVE==5)
(4,strcpy(myString, HELLO_STRING)
(5,)
(6,"Input is less than the length of the source string")
(7,)
(8,strlen(HELLO_STRING)
(9,data)
(10,GLOBAL_CONST_FIVE==5)
(11,printLine(myString)
(12,data = 20)
(13,char *)
(14,myString)
(15,NULL)
(16,free(myString)
(17,)
(18,char)
(19,exit(-1)
(20,data)
(21,myString == NULL)
(22,if(GLOBAL_CONST_FIVE==5)
(23,myString)
(24,if (myString == NULL)
(25,malloc(data*sizeof(char)
(26,data > strlen(HELLO_STRING)
(27,-1)
(28,)
(29,)
(30,GLOBAL_CONST_FIVE)
(31,myString)
(32,RET)
(33,myString)
(34,data)
(35,1)
(36,)
(37,sizeof(char)
(38,printLine("Input is less than the length of the source string")
(39,HELLO_STRING)
(40,data = 0)
(41,0)
(42,GLOBAL_CONST_FIVE==5)
(43,data*sizeof(char)
(44,myString)
(45,data)
(46,)
(47,(char *)
(48,HELLO_STRING)
(49,if (data > strlen(HELLO_STRING)
(50,5)
(51,myString)
(52,GLOBAL_CONST_FIVE)
(53,20)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^