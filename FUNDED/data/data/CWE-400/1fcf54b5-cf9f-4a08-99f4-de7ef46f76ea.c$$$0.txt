-----label-----
0
-----code-----
static void goodB2G1Sink(size_t data)
{
    if(goodB2G1Static)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
11,14
12,13
14,15
15,16
16,17
16,18
17,18
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
39,40
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,7,9,13,18,19,24,26,27,32,35,37,40,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
29,30
29,31
30,31
30,32
38,39
38,40
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
37,82
40,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1Sink(size_t data){    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1Sink(size_t data)
goodB2G1Sink
size_t data
size_t
size_t
data
data
{    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
goodB2G1Static
goodB2G1Static
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(29,35,0)
(16,22,0)
(30,43,0)
(42,40,0)
(0,22,0)
(44,34,0)
(3,2,0)
(37,35,0)
(6,34,0)
(37,41,0)
(34,6,0)
(14,40,0)
(36,30,0)
(23,16,0)
(2,42,0)
(39,6,0)
(4,31,0)
(10,42,0)
(1,44,0)
(19,24,0)
(22,42,0)
(34,44,0)
(11,6,0)
(24,42,0)
(5,44,0)
(17,23,0)
(21,17,0)
(6,8,0)
(7,5,0)
(46,14,0)
(14,42,0)
(27,42,0)
(12,24,0)
(42,22,0)
(26,9,0)
(28,23,0)
(25,27,0)
(44,8,0)
(22,16,0)
(2,40,0)
(38,13,0)
(22,0,0)
(16,23,0)
(35,37,0)
(23,17,0)
(45,40,0)
(31,18,0)
(44,5,0)
(47,14,0)
(33,30,0)
(9,20,0)
(23,8,0)
(27,40,0)
(6,39,1)
(6,8,1)
(47,46,1)
(3,27,1)
(37,35,1)
(31,4,1)
(46,37,1)
(44,5,1)
(11,44,1)
(29,24,1)
(22,16,1)
(34,44,1)
(12,19,1)
(42,22,1)
(24,12,1)
(24,42,1)
(17,21,1)
(26,34,1)
(5,7,1)
(9,26,1)
(46,24,1)
(23,8,1)
(16,23,1)
(2,3,1)
(25,14,1)
(2,42,1)
(4,32,1)
(23,17,1)
(35,29,1)
(44,8,1)
(14,47,1)
(19,42,1)
(15,2,1)
(14,42,1)
(15,31,1)
(1,32,1)
(15,9,1)
(27,42,1)
(34,6,1)
(10,34,1)
(39,11,1)
(28,10,1)
(21,28,1)
(27,25,1)
(7,1,1)
(22,0,1)
(11,44,2)
(34,6,2)
(3,34,2)
(35,24,2)
(16,34,2)
(12,34,2)
(2,34,2)
(9,34,2)
(31,32,2)
(44,8,2)
(42,34,2)
(10,34,2)
(34,32,2)
(16,23,2)
(23,17,2)
(42,22,2)
(14,34,2)
(47,34,2)
(1,32,2)
(22,0,2)
(37,24,2)
(34,44,2)
(17,34,2)
(2,42,2)
(7,32,2)
(26,34,2)
(23,34,2)
(25,34,2)
(21,34,2)
(39,44,2)
(22,16,2)
(46,34,2)
(14,42,2)
(27,42,2)
(19,34,2)
(6,8,2)
(4,32,2)
(6,44,2)
(24,42,2)
(23,8,2)
(5,32,2)
(44,32,2)
(44,5,2)
(29,24,2)
(37,35,2)
(22,34,2)
(28,34,2)
(24,34,2)
(27,34,2)
-----------------------------------
(0,wchar_t *)
(1,data)
(2,free(myString)
(3,myString)
(4,"Benign, fixed string")
(5,wcslen(HELLO_STRING)
(6,data < 100)
(7,HELLO_STRING)
(8,size_t data)
(9,printLine("Input is less than the length of the source string or too large")
(10,myString)
(11,data)
(12,NULL)
(13,)
(14,wcscpy(myString, HELLO_STRING)
(15,RET)
(16,malloc(data*sizeof(wchar_t)
(17,sizeof(wchar_t)
(18,)
(19,myString)
(20,)
(21,wchar_t)
(22,(wchar_t *)
(23,data*sizeof(wchar_t)
(24,myString == NULL)
(25,myString)
(26,"Input is less than the length of the source string or too large")
(27,printWLine(myString)
(28,data)
(29,1)
(30,)
(31,printLine("Benign, fixed string")
(32,goodB2G1Static)
(33,myString)
(34,data > wcslen(HELLO_STRING)
(35,-1)
(36,if (data > wcslen(HELLO_STRING)
(37,exit(-1)
(38,if(goodB2G1Static)
(39,100)
(40,)
(41,)
(42,myString = (wchar_t *)
(43,)
(44,data > wcslen(HELLO_STRING)
(45,if (myString == NULL)
(46,myString)
(47,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^