-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_02_bad()
{
    int64_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
72,73
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,60,61,65,68,69,71,73
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_02_bad(){    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_02_bad()
CWE401_Memory_Leak__int64_t_malloc_02_bad
{    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,18,0)
(31,21,0)
(20,4,0)
(28,8,0)
(18,8,0)
(10,2,0)
(21,31,0)
(1,7,0)
(7,18,0)
(26,14,0)
(15,31,0)
(9,4,0)
(3,18,0)
(8,24,0)
(18,4,0)
(29,25,0)
(0,13,0)
(21,22,0)
(12,14,0)
(30,2,0)
(32,25,0)
(8,18,0)
(24,8,0)
(28,10,0)
(13,27,0)
(17,10,0)
(25,14,0)
(5,14,0)
(27,13,0)
(2,10,0)
(11,13,0)
(16,7,0)
(8,28,0)
(10,28,0)
(27,4,0)
(9,7,1)
(19,23,1)
(18,8,1)
(28,10,1)
(31,15,1)
(17,3,1)
(21,31,1)
(15,7,1)
(32,29,1)
(7,18,1)
(13,0,1)
(10,2,1)
(0,11,1)
(13,18,1)
(30,17,1)
(23,25,1)
(8,28,1)
(19,27,1)
(3,23,1)
(6,19,1)
(11,9,1)
(25,32,1)
(16,1,1)
(8,24,1)
(9,21,1)
(1,18,1)
(2,30,1)
(27,13,1)
(7,16,1)
(21,31,2)
(13,18,2)
(17,23,2)
(11,23,2)
(9,23,2)
(7,18,2)
(8,28,2)
(15,7,2)
(8,24,2)
(13,23,2)
(0,23,2)
(1,23,2)
(3,23,2)
(16,23,2)
(21,7,2)
(10,23,2)
(7,23,2)
(18,23,2)
(31,7,2)
(18,8,2)
(28,23,2)
(30,23,2)
(28,10,2)
(27,23,2)
(10,2,2)
(8,23,2)
(27,13,2)
(2,23,2)
-----------------------------------
(0,0)
(1,data)
(2,sizeof(int64_t)
(3,data)
(4,)
(5,if(1)
(6,RET)
(7,data == NULL)
(8,(int64_t *)
(9,L)
(10,100*sizeof(int64_t)
(11,data)
(12,data)
(13,data[0])
(14,)
(15,1)
(16,NULL)
(17,100)
(18,data = (int64_t *)
(19,1)
(20,if (data == NULL)
(21,exit(-1)
(22,)
(23,1)
(24,int64_t *)
(25,data = NULL)
(26,if(1)
(27,printLongLongLine(data[0])
(28,malloc(100*sizeof(int64_t)
(29,data)
(30,int64_t)
(31,-1)
(32,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^