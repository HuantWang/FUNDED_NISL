-----label-----
1
-----code-----
static int packet_rcv_fanout(struct sk_buff *skb, struct net_device *dev,
			     struct packet_type *pt, struct net_device *orig_dev)
{
	struct packet_fanout *f = pt->af_packet_priv;
	unsigned int num = f->num_members;
	struct packet_sock *po;
	unsigned int idx;

	if (!net_eq(dev_net(dev), read_pnet(&f->net)) ||
	    !num) {
		kfree_skb(skb);
		return 0;
	}

	if (fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)) {
		skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET);
		if (!skb)
			return 0;
	}
	switch (f->type) {
	case PACKET_FANOUT_HASH:
	default:
		idx = fanout_demux_hash(f, skb, num);
		break;
	case PACKET_FANOUT_LB:
		idx = fanout_demux_lb(f, skb, num);
		break;
	case PACKET_FANOUT_CPU:
		idx = fanout_demux_cpu(f, skb, num);
		break;
	case PACKET_FANOUT_RND:
		idx = fanout_demux_rnd(f, skb, num);
		break;
	case PACKET_FANOUT_QM:
		idx = fanout_demux_qm(f, skb, num);
		break;
	case PACKET_FANOUT_ROLLOVER:
		idx = fanout_demux_rollover(f, skb, 0, false, num);
		break;
	}

	if (fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER))
		idx = fanout_demux_rollover(f, skb, idx, true, num);

	po = pkt_sk(f->arr[idx]);
	return po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
29,38
29,39
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
64,66
65,66
65,67
66,67
67,68
67,69
67,70
68,69
70,71
70,72
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
84,85
86,87
86,88
87,88
88,89
88,90
89,90
91,92
93,94
95,96
95,97
96,97
96,98
96,99
97,98
99,100
101,102
103,104
103,105
104,105
105,106
105,107
106,107
108,109
108,110
108,111
109,110
111,112
113,114
115,116
115,117
116,117
117,118
119,120
121,122
121,123
122,123
122,124
123,124
126,127
126,128
126,129
126,130
126,131
126,132
126,133
126,134
126,135
126,136
126,137
126,138
126,139
126,140
126,141
126,142
126,143
126,144
126,145
127,128
128,129
131,132
132,133
132,134
133,134
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
145,146
146,147
148,149
149,150
149,151
150,151
152,153
152,154
152,155
152,156
153,154
155,156
157,158
159,160
162,163
163,164
165,166
166,167
166,168
167,168
169,170
169,171
169,172
169,173
170,171
172,173
174,175
176,177
179,180
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
187,188
189,190
191,192
193,194
196,197
197,198
199,200
200,201
200,202
201,202
203,204
203,205
203,206
203,207
204,205
206,207
208,209
210,211
213,214
214,215
216,217
217,218
217,219
218,219
220,221
220,222
220,223
220,224
220,225
220,226
221,222
223,224
225,226
229,230
232,233
232,234
233,234
233,235
233,236
234,235
236,237
238,239
240,241
241,242
241,243
242,243
244,245
244,246
244,247
244,248
244,249
244,250
245,246
247,248
249,250
251,252
254,255
256,257
257,258
257,259
258,259
260,261
260,262
261,262
263,264
263,265
264,265
264,266
265,266
268,269
270,271
271,272
271,273
271,274
271,275
271,276
272,273
272,274
273,274
273,275
274,275
278,279
280,281
282,283
283,284
283,285
284,285
287,288
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,33,35,36,40,41,44,46,50,51,55,57,58,61,63,69,72,74,77,81,82,85,90,92,94,98,100,102,107,110,112,114,118,120,124,125,129,130,134,137,139,141,143,144,147,151,154,156,158,160,161,164,168,171,173,175,177,178,181,185,188,190,192,194,195,198,202,205,207,209,211,212,215,219,222,224,226,227,228,230,231,235,237,239,243,246,248,250,252,253,255,259,262,266,267,269,275,276,277,279,281,285,286,288
-----computeFrom-----
65,66
65,67
105,106
105,107
132,133
132,134
149,150
149,151
166,167
166,168
183,184
183,185
200,201
200,202
217,218
217,219
241,242
241,243
257,258
257,259
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static int packet_rcv_fanout(struct sk_buff *skb, struct net_device *dev,			     struct packet_type *pt, struct net_device *orig_dev){	struct packet_fanout *f = pt->af_packet_priv;	unsigned int num = f->num_members;	struct packet_sock *po;	unsigned int idx;	if (!net_eq(dev_net(dev), read_pnet(&f->net)) ||	    !num) {		kfree_skb(skb);		return 0;	}	if (fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)) {		skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET);		if (!skb)			return 0;	}	switch (f->type) {	case PACKET_FANOUT_HASH:	default:		idx = fanout_demux_hash(f, skb, num);		break;	case PACKET_FANOUT_LB:		idx = fanout_demux_lb(f, skb, num);		break;	case PACKET_FANOUT_CPU:		idx = fanout_demux_cpu(f, skb, num);		break;	case PACKET_FANOUT_RND:		idx = fanout_demux_rnd(f, skb, num);		break;	case PACKET_FANOUT_QM:		idx = fanout_demux_qm(f, skb, num);		break;	case PACKET_FANOUT_ROLLOVER:		idx = fanout_demux_rollover(f, skb, 0, false, num);		break;	}	if (fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER))		idx = fanout_demux_rollover(f, skb, idx, true, num);	po = pkt_sk(f->arr[idx]);	return po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev);}
static int
packet_rcv_fanout(struct sk_buff *skb, struct net_device *dev,			     struct packet_type *pt, struct net_device *orig_dev)
packet_rcv_fanout
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
struct net_device *dev
struct net_device
net_device
*dev
*
dev
struct packet_type *pt
struct packet_type
packet_type
*pt
*
pt
struct net_device *orig_dev
struct net_device
net_device
*orig_dev
*
orig_dev
{	struct packet_fanout *f = pt->af_packet_priv;	unsigned int num = f->num_members;	struct packet_sock *po;	unsigned int idx;	if (!net_eq(dev_net(dev), read_pnet(&f->net)) ||	    !num) {		kfree_skb(skb);		return 0;	}	if (fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)) {		skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET);		if (!skb)			return 0;	}	switch (f->type) {	case PACKET_FANOUT_HASH:	default:		idx = fanout_demux_hash(f, skb, num);		break;	case PACKET_FANOUT_LB:		idx = fanout_demux_lb(f, skb, num);		break;	case PACKET_FANOUT_CPU:		idx = fanout_demux_cpu(f, skb, num);		break;	case PACKET_FANOUT_RND:		idx = fanout_demux_rnd(f, skb, num);		break;	case PACKET_FANOUT_QM:		idx = fanout_demux_qm(f, skb, num);		break;	case PACKET_FANOUT_ROLLOVER:		idx = fanout_demux_rollover(f, skb, 0, false, num);		break;	}	if (fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER))		idx = fanout_demux_rollover(f, skb, idx, true, num);	po = pkt_sk(f->arr[idx]);	return po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev);}
struct packet_fanout *f = pt->af_packet_priv;
struct packet_fanout *f = pt->af_packet_priv;
struct packet_fanout
packet_fanout
*f = pt->af_packet_priv
*
f
= pt->af_packet_priv
pt->af_packet_priv
pt
pt
af_packet_priv
unsigned int num = f->num_members;
unsigned int num = f->num_members;
unsigned int
num = f->num_members
num
= f->num_members
f->num_members
f
f
num_members
struct packet_sock *po;
struct packet_sock *po;
struct packet_sock
packet_sock
*po
*
po
unsigned int idx;
unsigned int idx;
unsigned int
idx
idx
if (!net_eq(dev_net(dev), read_pnet(&f->net)) ||	    !num) {		kfree_skb(skb);		return 0;	}
!net_eq(dev_net(dev), read_pnet(&f->net)) ||	    !num
!net_eq(dev_net(dev), read_pnet(&f->net))
net_eq(dev_net(dev), read_pnet(&f->net))
net_eq
net_eq
dev_net(dev)
dev_net
dev_net
dev
dev
read_pnet(&f->net)
read_pnet
read_pnet
&f->net
f->net
f
f
net
!num
num
num
{		kfree_skb(skb);		return 0;	}
kfree_skb(skb);
kfree_skb(skb)
kfree_skb
kfree_skb
skb
skb
return 0;
0
if (fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)) {		skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET);		if (!skb)			return 0;	}
fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)
fanout_has_flag
fanout_has_flag
f
f
PACKET_FANOUT_FLAG_DEFRAG
PACKET_FANOUT_FLAG_DEFRAG
{		skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET);		if (!skb)			return 0;	}
skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET);
skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET)
skb
skb
ip_check_defrag(skb, IP_DEFRAG_AF_PACKET)
ip_check_defrag
ip_check_defrag
skb
skb
IP_DEFRAG_AF_PACKET
IP_DEFRAG_AF_PACKET
if (!skb)			return 0;
!skb
skb
skb
return 0;
0
switch (f->type) {	case PACKET_FANOUT_HASH:	default:		idx = fanout_demux_hash(f, skb, num);		break;	case PACKET_FANOUT_LB:		idx = fanout_demux_lb(f, skb, num);		break;	case PACKET_FANOUT_CPU:		idx = fanout_demux_cpu(f, skb, num);		break;	case PACKET_FANOUT_RND:		idx = fanout_demux_rnd(f, skb, num);		break;	case PACKET_FANOUT_QM:		idx = fanout_demux_qm(f, skb, num);		break;	case PACKET_FANOUT_ROLLOVER:		idx = fanout_demux_rollover(f, skb, 0, false, num);		break;	}
f->type
f
f
type
{	case PACKET_FANOUT_HASH:	default:		idx = fanout_demux_hash(f, skb, num);		break;	case PACKET_FANOUT_LB:		idx = fanout_demux_lb(f, skb, num);		break;	case PACKET_FANOUT_CPU:		idx = fanout_demux_cpu(f, skb, num);		break;	case PACKET_FANOUT_RND:		idx = fanout_demux_rnd(f, skb, num);		break;	case PACKET_FANOUT_QM:		idx = fanout_demux_qm(f, skb, num);		break;	case PACKET_FANOUT_ROLLOVER:		idx = fanout_demux_rollover(f, skb, 0, false, num);		break;	}
case PACKET_FANOUT_HASH:
PACKET_FANOUT_HASH
PACKET_FANOUT_HASH
default:
idx = fanout_demux_hash(f, skb, num);
idx = fanout_demux_hash(f, skb, num)
idx
idx
fanout_demux_hash(f, skb, num)
fanout_demux_hash
fanout_demux_hash
f
f
skb
skb
num
num
break;
case PACKET_FANOUT_LB:
PACKET_FANOUT_LB
PACKET_FANOUT_LB
idx = fanout_demux_lb(f, skb, num);
idx = fanout_demux_lb(f, skb, num)
idx
idx
fanout_demux_lb(f, skb, num)
fanout_demux_lb
fanout_demux_lb
f
f
skb
skb
num
num
break;
case PACKET_FANOUT_CPU:
PACKET_FANOUT_CPU
PACKET_FANOUT_CPU
idx = fanout_demux_cpu(f, skb, num);
idx = fanout_demux_cpu(f, skb, num)
idx
idx
fanout_demux_cpu(f, skb, num)
fanout_demux_cpu
fanout_demux_cpu
f
f
skb
skb
num
num
break;
case PACKET_FANOUT_RND:
PACKET_FANOUT_RND
PACKET_FANOUT_RND
idx = fanout_demux_rnd(f, skb, num);
idx = fanout_demux_rnd(f, skb, num)
idx
idx
fanout_demux_rnd(f, skb, num)
fanout_demux_rnd
fanout_demux_rnd
f
f
skb
skb
num
num
break;
case PACKET_FANOUT_QM:
PACKET_FANOUT_QM
PACKET_FANOUT_QM
idx = fanout_demux_qm(f, skb, num);
idx = fanout_demux_qm(f, skb, num)
idx
idx
fanout_demux_qm(f, skb, num)
fanout_demux_qm
fanout_demux_qm
f
f
skb
skb
num
num
break;
case PACKET_FANOUT_ROLLOVER:
PACKET_FANOUT_ROLLOVER
PACKET_FANOUT_ROLLOVER
idx = fanout_demux_rollover(f, skb, 0, false, num);
idx = fanout_demux_rollover(f, skb, 0, false, num)
idx
idx
fanout_demux_rollover(f, skb, 0, false, num)
fanout_demux_rollover
fanout_demux_rollover
f
f
skb
skb
0
false
num
num
break;
if (fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER))		idx = fanout_demux_rollover(f, skb, idx, true, num);
fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER)
fanout_has_flag
fanout_has_flag
f
f
PACKET_FANOUT_FLAG_ROLLOVER
PACKET_FANOUT_FLAG_ROLLOVER
idx = fanout_demux_rollover(f, skb, idx, true, num);
idx = fanout_demux_rollover(f, skb, idx, true, num)
idx
idx
fanout_demux_rollover(f, skb, idx, true, num)
fanout_demux_rollover
fanout_demux_rollover
f
f
skb
skb
idx
idx
true
num
num
po = pkt_sk(f->arr[idx]);
po = pkt_sk(f->arr[idx])
po
po
pkt_sk(f->arr[idx])
pkt_sk
pkt_sk
f->arr[idx]
f->arr
f
f
arr
idx
idx
return po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev);
po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev)
po->prot_hook.func
po->prot_hook
po
po
prot_hook
func
skb
skb
dev
dev
&po->prot_hook
po->prot_hook
po
po
prot_hook
orig_dev
orig_dev
-----joern-----
(105,99,0)
(70,74,0)
(131,43,0)
(6,33,0)
(7,96,0)
(65,122,0)
(93,29,0)
(42,52,0)
(3,29,0)
(107,2,0)
(90,136,0)
(108,98,0)
(72,38,0)
(106,9,0)
(45,79,0)
(11,130,0)
(135,42,0)
(8,52,0)
(104,88,0)
(76,38,0)
(6,15,0)
(4,99,0)
(86,99,0)
(74,101,0)
(79,45,0)
(9,12,0)
(5,75,0)
(5,52,0)
(52,38,0)
(47,122,0)
(92,99,0)
(117,75,0)
(43,38,0)
(29,127,0)
(130,15,0)
(112,9,0)
(7,29,0)
(73,130,0)
(5,29,0)
(95,99,0)
(3,75,0)
(5,4,0)
(49,130,0)
(88,79,0)
(109,46,0)
(68,2,0)
(34,59,0)
(100,64,0)
(32,55,0)
(69,128,0)
(61,64,0)
(80,3,0)
(44,110,0)
(53,3,0)
(114,86,0)
(3,46,0)
(85,2,0)
(93,75,0)
(20,99,0)
(88,75,0)
(31,65,0)
(46,99,0)
(130,29,0)
(9,86,0)
(86,2,0)
(19,99,0)
(130,52,0)
(94,18,0)
(93,62,0)
(98,41,0)
(102,89,0)
(0,8,0)
(136,29,0)
(45,77,0)
(9,62,0)
(120,99,0)
(77,45,0)
(29,64,0)
(9,46,0)
(118,6,0)
(15,99,0)
(101,74,0)
(10,117,0)
(9,96,0)
(64,96,0)
(116,5,0)
(59,52,0)
(33,99,0)
(93,52,0)
(130,75,0)
(82,32,0)
(6,46,0)
(6,118,0)
(9,4,0)
(6,59,0)
(3,52,0)
(119,101,0)
(89,118,0)
(33,7,0)
(3,96,0)
(134,9,0)
(111,2,0)
(6,12,0)
(56,15,0)
(103,2,0)
(47,89,0)
(75,117,0)
(2,86,0)
(121,38,0)
(6,86,0)
(5,96,0)
(25,62,0)
(77,32,0)
(26,38,0)
(52,69,0)
(63,65,0)
(93,96,0)
(54,3,0)
(125,93,0)
(131,71,0)
(115,99,0)
(24,47,0)
(21,6,0)
(69,52,0)
(65,43,0)
(126,99,0)
(79,88,0)
(89,38,0)
(13,5,0)
(50,8,0)
(2,29,0)
(9,33,0)
(122,65,0)
(7,33,0)
(122,47,0)
(74,70,0)
(7,52,0)
(60,99,0)
(9,52,0)
(84,71,0)
(51,38,0)
(137,99,0)
(23,47,0)
(27,117,0)
(133,127,0)
(130,96,0)
(62,99,0)
(6,4,0)
(98,96,0)
(14,99,0)
(37,99,0)
(65,83,0)
(110,52,0)
(22,38,0)
(78,7,0)
(7,75,0)
(28,9,0)
(70,77,0)
(65,96,0)
(39,93,0)
(17,29,0)
(35,4,0)
(29,96,0)
(48,101,0)
(12,9,0)
(6,62,0)
(81,65,0)
(75,38,0)
(123,75,0)
(1,5,0)
(16,110,0)
(131,18,0)
(2,75,0)
(118,89,0)
(65,55,0)
(62,93,0)
(57,93,0)
(66,42,0)
(113,52,0)
(32,77,0)
(77,70,0)
(15,130,0)
(97,38,0)
(87,59,0)
(46,3,0)
(124,7,0)
(129,12,0)
(58,99,0)
(9,29,0)
(117,52,0)
(65,29,0)
(2,96,0)
(59,6,0)
(136,96,0)
(30,69,0)
(40,69,0)
(91,7,0)
(101,52,0)
(9,15,0)
(64,29,0)
(4,5,0)
(36,9,0)
(9,75,0)
(67,33,0)
(2,52,0)
(132,38,0)
(71,41,0)
(34,87,1)
(3,96,1)
(100,17,1)
(82,75,1)
(123,52,1)
(85,107,1)
(110,44,1)
(14,46,1)
(117,27,1)
(16,95,1)
(105,4,1)
(15,130,1)
(84,98,1)
(12,9,1)
(6,4,1)
(88,75,1)
(43,65,1)
(130,52,1)
(29,64,1)
(31,89,1)
(13,35,1)
(93,29,1)
(79,45,1)
(16,115,1)
(28,36,1)
(130,75,1)
(79,88,1)
(16,14,1)
(6,12,1)
(9,134,1)
(21,59,1)
(9,33,1)
(6,59,1)
(75,117,1)
(69,40,1)
(93,57,1)
(2,29,1)
(136,90,1)
(40,30,1)
(93,52,1)
(65,55,1)
(65,29,1)
(131,43,1)
(86,2,1)
(62,93,1)
(63,31,1)
(27,10,1)
(122,47,1)
(93,96,1)
(98,96,1)
(94,136,1)
(118,6,1)
(30,113,1)
(98,108,1)
(131,18,1)
(45,77,1)
(67,8,1)
(2,52,1)
(65,83,1)
(136,96,1)
(57,39,1)
(111,114,1)
(36,106,1)
(5,52,1)
(5,116,1)
(2,75,1)
(6,86,1)
(9,96,1)
(68,103,1)
(3,52,1)
(6,33,1)
(101,119,1)
(61,100,1)
(65,81,1)
(6,46,1)
(9,52,1)
(104,45,1)
(52,69,1)
(42,52,1)
(88,104,1)
(117,52,1)
(130,11,1)
(16,137,1)
(81,122,1)
(64,61,1)
(7,29,1)
(2,68,1)
(107,111,1)
(125,25,1)
(6,62,1)
(70,74,1)
(124,78,1)
(93,75,1)
(66,79,1)
(23,63,1)
(77,70,1)
(109,8,1)
(65,96,1)
(59,34,1)
(80,54,1)
(108,79,1)
(3,80,1)
(64,96,1)
(54,53,1)
(95,33,1)
(46,3,1)
(78,91,1)
(6,21,1)
(9,29,1)
(5,75,1)
(48,32,1)
(7,124,1)
(25,8,1)
(9,4,1)
(0,50,1)
(115,86,1)
(17,42,1)
(9,15,1)
(18,94,1)
(7,52,1)
(39,125,1)
(35,8,1)
(2,96,1)
(47,24,1)
(16,19,1)
(106,129,1)
(131,71,1)
(56,8,1)
(114,8,1)
(9,62,1)
(112,28,1)
(32,82,1)
(3,29,1)
(119,48,1)
(89,118,1)
(7,96,1)
(8,52,1)
(9,46,1)
(8,0,1)
(16,105,1)
(91,67,1)
(77,32,1)
(10,123,1)
(137,15,1)
(101,52,1)
(65,122,1)
(116,1,1)
(5,29,1)
(47,89,1)
(44,16,1)
(11,49,1)
(135,66,1)
(3,75,1)
(9,75,1)
(74,101,1)
(90,29,1)
(130,96,1)
(9,86,1)
(102,110,1)
(130,29,1)
(5,96,1)
(32,55,1)
(50,136,1)
(1,13,1)
(134,112,1)
(24,23,1)
(73,56,1)
(19,62,1)
(50,42,1)
(71,84,1)
(42,135,1)
(29,96,1)
(129,110,1)
(69,128,1)
(59,52,1)
(103,85,1)
(33,7,1)
(4,5,1)
(7,75,1)
(102,12,1)
(53,109,1)
(49,73,1)
(6,15,1)
(110,52,1)
(87,102,1)
(136,29,1)
(112,110,2)
(2,29,2)
(111,8,2)
(50,136,2)
(12,9,2)
(3,75,2)
(88,75,2)
(115,8,2)
(75,117,2)
(54,8,2)
(4,5,2)
(122,136,2)
(102,136,2)
(95,8,2)
(66,79,2)
(125,8,2)
(0,136,2)
(47,89,2)
(65,55,2)
(21,136,2)
(70,74,2)
(32,55,2)
(87,136,2)
(33,8,2)
(109,8,2)
(6,59,2)
(31,42,2)
(108,79,2)
(15,130,2)
(23,42,2)
(21,42,2)
(14,8,2)
(62,93,2)
(2,52,2)
(31,136,2)
(62,8,2)
(5,75,2)
(85,8,2)
(93,29,2)
(47,136,2)
(45,77,2)
(110,42,2)
(8,42,2)
(104,45,2)
(33,7,2)
(110,136,2)
(79,45,2)
(89,136,2)
(134,110,2)
(46,3,2)
(5,96,2)
(6,62,2)
(87,42,2)
(81,42,2)
(7,8,2)
(65,29,2)
(118,42,2)
(9,96,2)
(103,8,2)
(98,96,2)
(3,52,2)
(9,29,2)
(46,8,2)
(39,8,2)
(42,79,2)
(110,52,2)
(65,122,2)
(23,136,2)
(0,42,2)
(3,96,2)
(9,75,2)
(79,88,2)
(63,136,2)
(118,136,2)
(61,42,2)
(105,8,2)
(7,75,2)
(137,8,2)
(43,136,2)
(116,8,2)
(130,29,2)
(93,8,2)
(9,110,2)
(9,46,2)
(6,46,2)
(34,136,2)
(43,42,2)
(100,42,2)
(6,4,2)
(2,8,2)
(49,8,2)
(9,52,2)
(25,8,2)
(131,43,2)
(16,136,2)
(44,42,2)
(136,96,2)
(84,79,2)
(6,136,2)
(11,8,2)
(5,29,2)
(130,75,2)
(124,8,2)
(6,12,2)
(6,33,2)
(93,96,2)
(89,42,2)
(89,118,2)
(65,42,2)
(2,75,2)
(59,52,2)
(130,8,2)
(9,15,2)
(64,42,2)
(44,136,2)
(101,52,2)
(93,52,2)
(93,75,2)
(7,96,2)
(77,32,2)
(36,110,2)
(114,8,2)
(78,8,2)
(74,101,2)
(53,8,2)
(17,42,2)
(29,96,2)
(6,86,2)
(122,42,2)
(29,42,2)
(59,136,2)
(8,52,2)
(131,18,2)
(24,42,2)
(29,64,2)
(9,33,2)
(9,4,2)
(24,136,2)
(52,69,2)
(57,8,2)
(86,8,2)
(64,96,2)
(6,15,2)
(69,128,2)
(13,8,2)
(9,86,2)
(50,42,2)
(80,8,2)
(34,42,2)
(3,29,2)
(5,52,2)
(90,42,2)
(12,110,2)
(77,70,2)
(67,8,2)
(130,96,2)
(91,8,2)
(102,42,2)
(1,8,2)
(9,62,2)
(2,96,2)
(106,110,2)
(135,79,2)
(86,2,2)
(4,8,2)
(16,42,2)
(19,8,2)
(65,83,2)
(7,29,2)
(73,8,2)
(136,29,2)
(98,79,2)
(63,42,2)
(68,8,2)
(122,47,2)
(8,136,2)
(18,136,2)
(65,136,2)
(136,42,2)
(94,136,2)
(117,52,2)
(88,45,2)
(71,79,2)
(28,110,2)
(129,110,2)
(56,8,2)
(47,42,2)
(59,42,2)
(81,136,2)
(65,96,2)
(15,8,2)
(118,6,2)
(5,8,2)
(6,42,2)
(42,52,2)
(3,8,2)
(35,8,2)
(131,71,2)
(7,52,2)
(130,52,2)
(107,8,2)
-----------------------------------
(0,type)
(1,skb)
(2,fanout_demux_rollover(f, skb, 0, false, num)
(3,fanout_demux_lb(f, skb, num)
(4,idx = fanout_demux_qm(f, skb, num)
(5,fanout_demux_qm(f, skb, num)
(6,f->arr[idx])
(7,fanout_demux_hash(f, skb, num)
(8,f->type)
(9,fanout_demux_rollover(f, skb, idx, true, num)
(10,f)
(11,num)
(12,idx = fanout_demux_rollover(f, skb, idx, true, num)
(13,f)
(14,break;)
(15,idx = fanout_demux_rnd(f, skb, num)
(16,f)
(17,skb)
(18,return 0;)
(19,break;)
(20,case PACKET_FANOUT_ROLLOVER:)
(21,idx)
(22,if (fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)
(23,po)
(24,prot_hook)
(25,idx)
(26,if (fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER)
(27,num_members)
(28,idx)
(29,skb = ip_check_defrag(skb, IP_DEFRAG_AF_PACKET)
(30,pt)
(31,skb)
(32,dev_net(dev)
(33,idx = fanout_demux_hash(f, skb, num)
(34,arr)
(35,idx)
(36,skb)
(37,case PACKET_FANOUT_CPU:)
(38,)
(39,skb)
(40,af_packet_priv)
(41,)
(42,fanout_has_flag(f, PACKET_FANOUT_FLAG_DEFRAG)
(43,return po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev)
(44,PACKET_FANOUT_FLAG_ROLLOVER)
(45,!net_eq(dev_net(dev)
(46,idx = fanout_demux_lb(f, skb, num)
(47,po->prot_hook)
(48,f)
(49,skb)
(50,f)
(51,if (!net_eq(dev_net(dev)
(52,*f = pt->af_packet_priv)
(53,f)
(54,skb)
(55,struct net_device *dev)
(56,idx)
(57,num)
(58,case PACKET_FANOUT_HASH:)
(59,f->arr)
(60,case PACKET_FANOUT_RND:)
(61,IP_DEFRAG_AF_PACKET)
(62,idx = fanout_demux_cpu(f, skb, num)
(63,dev)
(64,ip_check_defrag(skb, IP_DEFRAG_AF_PACKET)
(65,po->prot_hook.func(skb, dev, &po->prot_hook, orig_dev)
(66,f)
(67,idx)
(68,num)
(69,pt->af_packet_priv)
(70,read_pnet(&f->net)
(71,return 0;)
(72,switch (f->type)
(73,f)
(74,&f->net)
(75,num = f->num_members)
(76,f)
(77,net_eq(dev_net(dev)
(78,skb)
(79,!net_eq(dev_net(dev)
(80,num)
(81,orig_dev)
(82,dev)
(83,struct net_device *orig_dev)
(84,0)
(85,0)
(86,idx = fanout_demux_rollover(f, skb, 0, false, num)
(87,f)
(88,!num)
(89,po = pkt_sk(f->arr[idx])
(90,skb)
(91,f)
(92,case PACKET_FANOUT_QM:)
(93,fanout_demux_cpu(f, skb, num)
(94,0)
(95,break;)
(96,struct sk_buff *skb)
(97,idx)
(98,kfree_skb(skb)
(99,)
(100,skb)
(101,f->net)
(102,po)
(103,false)
(104,num)
(105,break;)
(106,f)
(107,skb)
(108,skb)
(109,idx)
(110,fanout_has_flag(f, PACKET_FANOUT_FLAG_ROLLOVER)
(111,f)
(112,true)
(113,f)
(114,idx)
(115,break;)
(116,num)
(117,f->num_members)
(118,pkt_sk(f->arr[idx])
(119,net)
(120,default:)
(121,po)
(122,&po->prot_hook)
(123,num)
(124,num)
(125,f)
(126,case PACKET_FANOUT_LB:)
(127,)
(128,struct packet_type *pt)
(129,idx)
(130,fanout_demux_rnd(f, skb, num)
(131,RET)
(132,num)
(133,if (!skb)
(134,num)
(135,PACKET_FANOUT_FLAG_DEFRAG)
(136,!skb)
(137,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^