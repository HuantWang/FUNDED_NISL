-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_18_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%zu", &data);
    goto sink;
sink:
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
33,34
33,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,18,20,24,26,27,30,32,34,38,40,41,45,48,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
43,44
43,45
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
50,91
45,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_18_bad(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    goto sink;sink:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_18_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_18_bad
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);    goto sink;sink:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%zu", &data);
source
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
goto sink;
sink
sink:    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
sink
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(13,28,0)
(22,3,0)
(41,11,0)
(42,28,0)
(0,49,0)
(29,31,0)
(34,40,0)
(32,2,0)
(46,25,0)
(36,42,0)
(12,38,0)
(20,40,0)
(46,37,0)
(15,16,0)
(35,40,0)
(11,41,0)
(14,31,0)
(9,40,0)
(20,43,0)
(15,49,0)
(21,31,0)
(27,40,0)
(24,25,0)
(16,15,0)
(43,20,0)
(15,18,0)
(11,18,0)
(5,43,0)
(30,38,0)
(39,47,0)
(38,31,0)
(25,46,0)
(47,31,0)
(44,20,0)
(3,7,0)
(11,29,0)
(28,42,0)
(10,4,0)
(33,16,0)
(19,21,0)
(48,49,0)
(6,40,0)
(18,15,0)
(26,20,0)
(8,15,0)
(28,49,0)
(45,29,0)
(1,2,0)
(23,4,0)
(47,29,0)
(4,29,0)
(2,40,0)
(29,11,0)
(38,29,0)
(49,40,0)
(43,49,0)
(18,11,0)
(21,29,0)
(17,21,1)
(28,49,1)
(11,41,1)
(12,30,1)
(20,43,1)
(18,15,1)
(19,47,1)
(21,19,1)
(27,20,1)
(30,4,1)
(15,16,1)
(11,18,1)
(26,35,1)
(24,4,1)
(13,27,1)
(43,49,1)
(17,3,1)
(48,0,1)
(22,28,1)
(5,44,1)
(16,33,1)
(35,49,1)
(4,23,1)
(21,29,1)
(44,26,1)
(23,10,1)
(42,36,1)
(29,11,1)
(28,42,1)
(4,29,1)
(47,29,1)
(10,29,1)
(43,5,1)
(25,24,1)
(47,39,1)
(3,22,1)
(49,48,1)
(38,12,1)
(38,29,1)
(33,8,1)
(45,28,1)
(8,45,1)
(46,25,1)
(39,38,1)
(30,46,1)
(36,13,1)
(15,49,1)
(18,15,2)
(11,18,2)
(29,11,2)
(11,28,2)
(43,49,2)
(22,28,2)
(25,4,2)
(46,4,2)
(47,29,2)
(28,42,2)
(29,28,2)
(20,43,2)
(8,28,2)
(28,49,2)
(38,28,2)
(33,28,2)
(47,28,2)
(3,28,2)
(46,25,2)
(24,4,2)
(15,28,2)
(39,28,2)
(16,28,2)
(38,29,2)
(19,28,2)
(4,28,2)
(11,41,2)
(12,28,2)
(4,29,2)
(15,16,2)
(18,28,2)
(15,49,2)
(21,28,2)
(45,28,2)
(23,28,2)
(21,29,2)
(30,28,2)
(10,28,2)
-----------------------------------
(0,data)
(1,if (data > wcslen(HELLO_STRING)
(2,)
(3,printLine("Input is less than the length of the source string")
(4,myString == NULL)
(5,data)
(6,sink:)
(7,)
(8,data)
(9,source:)
(10,myString)
(11,(wchar_t *)
(12,HELLO_STRING)
(13,data)
(14,if (myString == NULL)
(15,data*sizeof(wchar_t)
(16,sizeof(wchar_t)
(17,RET)
(18,malloc(data*sizeof(wchar_t)
(19,myString)
(20,fscanf(stdin, "%zu", &data)
(21,free(myString)
(22,"Input is less than the length of the source string")
(23,NULL)
(24,1)
(25,-1)
(26,stdin)
(27,goto sink;)
(28,data > wcslen(HELLO_STRING)
(29,myString = (wchar_t *)
(30,myString)
(31,)
(32,myString)
(33,wchar_t)
(34,data)
(35,goto source;)
(36,HELLO_STRING)
(37,)
(38,wcscpy(myString, HELLO_STRING)
(39,myString)
(40,)
(41,wchar_t *)
(42,wcslen(HELLO_STRING)
(43,&data)
(44,"%zu")
(45,myString)
(46,exit(-1)
(47,printWLine(myString)
(48,0)
(49,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^