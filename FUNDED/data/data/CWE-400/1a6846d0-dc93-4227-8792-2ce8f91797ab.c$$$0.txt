-----label-----
0
-----code-----
static void goodG2B2()
{
    int * data;
    data = NULL;
    if(staticTrue)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
42,43
42,44
43,44
47,48
48,49
48,50
49,50
51,52
51,53
52,53
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,44,45,46,50,53,54,57,59
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int * data;    data = NULL;    if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int * data;    data = NULL;    if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticTrue
staticTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,17,0)
(26,17,0)
(22,1,0)
(19,26,0)
(27,15,0)
(9,26,0)
(0,1,0)
(28,22,0)
(19,1,0)
(1,14,0)
(20,16,0)
(2,5,0)
(10,19,0)
(14,4,0)
(25,15,0)
(6,19,0)
(1,17,0)
(14,23,0)
(15,25,0)
(8,19,0)
(12,5,0)
(21,22,0)
(7,5,0)
(22,26,0)
(14,1,0)
(25,4,0)
(19,8,0)
(16,5,0)
(4,25,0)
(4,14,0)
(18,25,0)
(11,16,0)
(23,14,0)
(19,10,1)
(9,22,1)
(22,1,1)
(3,13,1)
(6,26,1)
(25,15,1)
(10,6,1)
(13,8,1)
(16,20,1)
(0,24,1)
(14,4,1)
(26,9,1)
(24,16,1)
(21,1,1)
(13,24,1)
(19,1,1)
(15,27,1)
(19,26,1)
(22,28,1)
(20,11,1)
(8,19,1)
(1,14,1)
(4,25,1)
(28,21,1)
(14,23,1)
(18,0,1)
(27,18,1)
(9,24,2)
(1,14,2)
(27,24,2)
(14,4,2)
(15,24,2)
(4,24,2)
(22,24,2)
(28,24,2)
(1,24,2)
(18,24,2)
(26,24,2)
(19,26,2)
(19,24,2)
(4,25,2)
(8,19,2)
(14,23,2)
(19,1,2)
(10,24,2)
(8,24,2)
(22,1,2)
(25,15,2)
(14,24,2)
(0,24,2)
(25,24,2)
(6,24,2)
(21,24,2)
-----------------------------------
(0,data)
(1,data = (int *)
(2,data)
(3,RET)
(4,ALLOCA(100*sizeof(int)
(5,)
(6,data)
(7,if(staticTrue)
(8,printIntLine(data[0])
(9,5)
(10,0)
(11,data)
(12,if(staticTrue)
(13,staticTrue)
(14,(int *)
(15,sizeof(int)
(16,data = NULL)
(17,)
(18,100)
(19,data[0])
(20,NULL)
(21,data)
(22,data[0])
(23,int *)
(24,staticTrue)
(25,100*sizeof(int)
(26,data[0] = 5)
(27,int)
(28,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^