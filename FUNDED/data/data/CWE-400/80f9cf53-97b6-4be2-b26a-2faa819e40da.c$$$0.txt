-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(1)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
29,31
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
-----nextToken-----
2,4,8,10,14,16,18,23,26,28,33,35,39,40
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_02_bad()
CWE400_Resource_Exhaustion__rand_sleep_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
1
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
1
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(14,0,0)
(0,11,0)
(8,15,0)
(18,16,0)
(7,13,0)
(4,16,0)
(13,11,0)
(13,8,0)
(17,8,0)
(8,6,0)
(6,8,0)
(1,9,0)
(16,9,0)
(16,18,0)
(12,9,0)
(10,9,0)
(5,18,0)
(13,16,0)
(13,7,1)
(8,6,1)
(6,17,1)
(7,19,1)
(19,2,1)
(18,5,1)
(3,0,1)
(13,16,1)
(13,8,1)
(19,8,1)
(5,4,1)
(16,18,1)
(2,16,1)
(3,19,1)
(0,14,1)
(17,2,1)
(14,13,1)
(0,19,2)
(14,19,2)
(13,8,2)
(8,2,2)
(13,16,2)
(6,2,2)
(7,19,2)
(13,19,2)
(16,18,2)
(17,2,2)
(8,6,2)
-----------------------------------
(0,printLine("Sleep time possibly too long")
(1,if(1)
(2,1)
(3,RET)
(4,count)
(5,1)
(6,RAND32()
(7,count)
(8,count = RAND32()
(9,)
(10,if(1)
(11,)
(12,count)
(13,SLEEP(count)
(14,"Sleep time possibly too long")
(15,)
(16,count = -1)
(17,count)
(18,-1)
(19,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^