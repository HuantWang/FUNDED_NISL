-----label-----
0
-----code-----
static void goodB2G()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    goodB2GSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,32,36,37,41,43,48,50,56,57,58,59,65,66,67,68,72,76,77,81,83
-----computeFrom-----
14,15
14,16
20,21
20,22
39,40
39,41
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    goodB2GSink(data);}
static void
goodB2G()
goodB2G
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    goodB2GSink(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
goodB2GSink(data);
goodB2GSink(data)
goodB2GSink
goodB2GSink
data
data
-----joern-----
(33,0,0)
(17,26,0)
(36,22,0)
(37,38,0)
(40,20,0)
(10,41,0)
(9,20,0)
(30,27,0)
(3,15,0)
(38,3,0)
(6,13,0)
(39,18,0)
(21,19,0)
(39,19,0)
(23,39,0)
(15,3,0)
(34,32,0)
(24,38,0)
(4,41,0)
(5,43,0)
(29,42,0)
(43,20,0)
(0,33,0)
(1,37,0)
(22,42,0)
(2,42,0)
(18,42,0)
(8,43,0)
(14,19,0)
(16,18,0)
(13,27,0)
(41,20,0)
(19,39,0)
(28,40,0)
(32,42,0)
(38,37,0)
(0,41,0)
(11,25,0)
(41,0,0)
(40,13,0)
(27,42,0)
(25,17,0)
(13,40,0)
(22,20,0)
(31,40,0)
(3,20,0)
(20,3,0)
(20,42,0)
(17,25,0)
(33,42,0)
(19,20,0)
(35,32,0)
(3,38,0)
(40,20,1)
(13,40,1)
(3,38,1)
(37,1,1)
(23,19,1)
(22,20,1)
(17,25,1)
(0,41,1)
(14,21,1)
(9,32,1)
(20,3,1)
(36,33,1)
(4,18,1)
(12,22,1)
(31,43,1)
(11,43,1)
(39,19,1)
(28,31,1)
(27,30,1)
(18,16,1)
(21,27,1)
(25,11,1)
(5,20,1)
(19,20,1)
(6,40,1)
(43,8,1)
(22,36,1)
(8,5,1)
(19,14,1)
(39,23,1)
(38,37,1)
(13,6,1)
(10,4,1)
(24,9,1)
(33,0,1)
(41,20,1)
(32,34,1)
(30,13,1)
(16,39,1)
(34,35,1)
(3,15,1)
(31,17,1)
(41,10,1)
(43,20,1)
(40,28,1)
(1,24,1)
(22,20,2)
(20,3,2)
(25,43,2)
(3,15,2)
(17,25,2)
(40,20,2)
(3,38,2)
(41,20,2)
(17,43,2)
(39,19,2)
(43,20,2)
(38,37,2)
(0,41,2)
(13,40,2)
(11,43,2)
(33,0,2)
(19,20,2)
-----------------------------------
(0,&data[0])
(1,twoIntsStruct)
(2,data)
(3,(twoIntsStruct *)
(4,data)
(5,data)
(6,intOne)
(7, sizeof(twoIntsStruct)
(8,NULL)
(9,data)
(10,0)
(11,1)
(12,RET)
(13,data[0].intOne)
(14,0)
(15,twoIntsStruct *)
(16,0)
(17,exit(-1)
(18,data[0].intTwo = 0)
(19,data[0])
(20,data = (twoIntsStruct *)
(21,data)
(22,goodB2GSink(data)
(23,intTwo)
(24,100)
(25,-1)
(26,)
(27,data[0].intOne = 0)
(28,0)
(29,if (data == NULL)
(30,0)
(31,data)
(32,data = NULL)
(33,printStructLine(&data[0])
(34,NULL)
(35,data)
(36,data)
(37,sizeof(twoIntsStruct)
(38,calloc(100, sizeof(twoIntsStruct)
(39,data[0].intTwo)
(40,data[0])
(41,data[0])
(42,)
(43,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^