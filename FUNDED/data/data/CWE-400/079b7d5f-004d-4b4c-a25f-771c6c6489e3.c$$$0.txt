-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink(size_t * dataPtr)
{
    size_t data = *dataPtr;
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
40,41
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,7,9,10,15,17,21,25,27,28,33,36,38,41,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
30,31
30,32
31,32
31,33
39,40
39,41
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
38,83
41,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink(size_t * dataPtr){    size_t data = *dataPtr;    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink(size_t * dataPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink
size_t * dataPtr
size_t
size_t
* dataPtr
*
dataPtr
{    size_t data = *dataPtr;    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = *dataPtr;
size_t data = *dataPtr;
size_t
size_t
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(13,3,0)
(17,14,0)
(27,42,0)
(45,33,0)
(1,8,0)
(23,27,0)
(8,17,0)
(37,34,0)
(5,39,0)
(28,12,0)
(39,3,0)
(36,39,0)
(0,8,0)
(38,12,0)
(10,14,0)
(32,19,0)
(11,14,0)
(26,40,0)
(42,27,0)
(8,42,0)
(41,22,0)
(25,10,0)
(14,17,0)
(2,16,0)
(39,40,0)
(9,19,0)
(19,42,0)
(46,18,0)
(20,40,0)
(41,9,0)
(19,18,0)
(34,37,0)
(42,7,0)
(18,19,0)
(43,7,0)
(9,41,0)
(3,40,0)
(41,3,0)
(24,42,0)
(33,40,0)
(22,41,0)
(3,41,0)
(14,10,0)
(4,20,0)
(27,29,0)
(17,8,0)
(20,3,0)
(44,13,0)
(34,21,0)
(35,2,0)
(19,9,0)
(14,42,0)
(6,3,0)
(15,13,0)
(31,37,0)
(33,3,0)
(12,7,0)
(18,46,1)
(41,9,1)
(36,13,1)
(8,42,1)
(27,29,1)
(10,25,1)
(45,39,1)
(33,3,1)
(1,14,1)
(19,42,1)
(33,45,1)
(13,15,1)
(19,18,1)
(15,44,1)
(32,6,1)
(44,3,1)
(14,10,1)
(41,22,1)
(20,3,1)
(6,17,1)
(39,3,1)
(36,34,1)
(0,1,1)
(30,2,1)
(9,19,1)
(17,14,1)
(37,31,1)
(5,36,1)
(2,35,1)
(17,8,1)
(35,17,1)
(27,23,1)
(31,13,1)
(30,20,1)
(20,4,1)
(14,42,1)
(11,42,1)
(42,27,1)
(13,3,1)
(3,41,1)
(8,0,1)
(25,11,1)
(34,37,1)
(46,32,1)
(23,24,1)
(4,33,1)
(39,5,1)
(3,41,2)
(45,17,2)
(8,42,2)
(19,42,2)
(13,3,2)
(34,37,2)
(6,17,2)
(35,17,2)
(14,42,2)
(19,18,2)
(42,27,2)
(8,14,2)
(0,14,2)
(41,22,2)
(46,17,2)
(2,17,2)
(39,3,2)
(17,8,2)
(4,17,2)
(1,14,2)
(9,17,2)
(44,17,2)
(39,17,2)
(41,17,2)
(3,17,2)
(31,13,2)
(20,17,2)
(5,17,2)
(15,17,2)
(14,10,2)
(33,3,2)
(13,17,2)
(9,19,2)
(34,13,2)
(20,3,2)
(36,17,2)
(27,29,2)
(32,17,2)
(41,9,2)
(37,13,2)
(17,14,2)
(33,17,2)
(19,17,2)
(18,17,2)
-----------------------------------
(0,100)
(1,data)
(2,printLine("Input is less than the length of the source string or too large")
(3,myString = (char *)
(4,myString)
(5,HELLO_STRING)
(6,myString)
(7,)
(8,data < 100)
(9,malloc(data*sizeof(char)
(10,strlen(HELLO_STRING)
(11,data)
(12,)
(13,myString == NULL)
(14,data > strlen(HELLO_STRING)
(15,NULL)
(16,)
(17,data > strlen(HELLO_STRING)
(18,sizeof(char)
(19,data*sizeof(char)
(20,free(myString)
(21,)
(22,char *)
(23,dataPtr)
(24,data)
(25,HELLO_STRING)
(26,if (myString == NULL)
(27,*dataPtr)
(28,if (data > strlen(HELLO_STRING)
(29,size_t * dataPtr)
(30,RET)
(31,1)
(32,data)
(33,printLine(myString)
(34,exit(-1)
(35,"Input is less than the length of the source string or too large")
(36,myString)
(37,-1)
(38,myString)
(39,strcpy(myString, HELLO_STRING)
(40,)
(41,(char *)
(42,data = *dataPtr)
(43,data)
(44,myString)
(45,myString)
(46,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^