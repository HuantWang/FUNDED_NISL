-----label-----
0
-----code-----
static int64_t * goodB2GSource(int64_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)realloc(data, 100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
65,66
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,30,34,35,39,41,46,48,53,54,55,59,62,63,66
-----computeFrom-----
15,16
15,17
29,30
29,31
37,38
37,39
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * goodB2GSource(int64_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)realloc(data, 100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
static int64_t
int64_t
* goodB2GSource(int64_t * data)
*
goodB2GSource
int64_t * data
int64_t
int64_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)realloc(data, 100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(7,21,0)
(1,14,0)
(11,14,0)
(5,2,0)
(0,5,0)
(26,5,0)
(12,2,0)
(21,4,0)
(20,2,0)
(8,18,0)
(18,8,0)
(8,15,0)
(14,13,0)
(2,5,0)
(9,19,0)
(14,4,0)
(3,19,0)
(13,4,0)
(2,12,0)
(16,12,0)
(2,4,0)
(17,26,0)
(14,11,0)
(6,13,0)
(25,23,0)
(5,26,0)
(12,16,0)
(24,21,0)
(21,23,0)
(19,4,0)
(13,23,0)
(13,12,0)
(10,14,0)
(22,18,0)
(11,23,0)
(19,13,0)
(27,23,0)
(21,13,0)
(12,13,0)
(19,13,1)
(5,26,1)
(13,12,1)
(7,21,1)
(22,19,1)
(14,1,1)
(19,4,1)
(17,0,1)
(19,3,1)
(2,4,1)
(26,17,1)
(20,6,1)
(27,8,1)
(3,9,1)
(13,4,1)
(21,24,1)
(11,14,1)
(14,4,1)
(24,11,1)
(9,13,1)
(12,2,1)
(10,27,1)
(8,18,1)
(27,19,1)
(2,5,1)
(1,10,1)
(18,22,1)
(21,13,1)
(12,16,1)
(14,13,1)
(21,4,1)
(0,20,1)
(12,16,2)
(12,2,2)
(5,26,2)
(21,13,2)
(8,18,2)
(14,4,2)
(8,19,2)
(13,12,2)
(22,19,2)
(7,21,2)
(18,19,2)
(13,4,2)
(2,4,2)
(2,5,2)
(19,4,2)
(11,14,2)
(19,13,2)
(14,13,2)
(21,4,2)
-----------------------------------
(0,100)
(1,0)
(2,realloc(data, 100*sizeof(int64_t)
(3,NULL)
(4,int64_t * data)
(5,100*sizeof(int64_t)
(6,data)
(7,RET)
(8,exit(-1)
(9,data)
(10,data)
(11,printLongLongLine(data[0])
(12,(int64_t *)
(13,data = (int64_t *)
(14,data[0])
(15,)
(16,int64_t *)
(17,int64_t)
(18,-1)
(19,data == NULL)
(20,data)
(21,return data;)
(22,1)
(23,)
(24,data)
(25,if (data == NULL)
(26,sizeof(int64_t)
(27,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^