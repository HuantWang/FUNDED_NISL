-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    goto sink;
sink:
    /* FIX: Validate count before using it as a parameter in the sleep function */
    if (count > 0 && count <= 2000)
    {
        SLEEP(count);
        printLine("Sleep time OK");
    }
    else
    {
        printLine("Sleep time too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
33,34
33,35
35,36
35,37
35,38
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
57,58
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,27,30,32,34,39,40,43,44,49,51,55,56,61,62
-----computeFrom-----
12,13
12,14
36,37
36,38
37,38
37,39
41,42
41,43
-----guardedBy-----
43,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    goto source;source:    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    goto sink;sink:    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    goto source;source:    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    goto sink;sink:    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);
source
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
goto sink;
sink
sink:    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }
sink
if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{        SLEEP(count);        printLine("Sleep time OK");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{        printLine("Sleep time too long");    }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(15,4,0)
(21,23,0)
(30,27,0)
(9,19,0)
(11,2,0)
(26,22,0)
(8,2,0)
(2,8,0)
(20,22,0)
(28,19,0)
(14,4,0)
(28,23,0)
(27,23,0)
(5,11,0)
(4,22,0)
(31,22,0)
(8,23,0)
(12,8,0)
(17,22,0)
(16,11,0)
(29,4,0)
(1,7,0)
(10,8,0)
(24,1,0)
(23,27,0)
(25,15,0)
(6,22,0)
(3,22,0)
(23,22,0)
(18,28,0)
(4,15,0)
(0,9,0)
(15,23,0)
(11,23,0)
(2,11,0)
(11,16,1)
(2,11,1)
(14,29,1)
(24,2,1)
(9,0,1)
(25,14,1)
(13,1,1)
(8,23,1)
(28,18,1)
(8,12,1)
(13,9,1)
(23,27,1)
(15,25,1)
(4,15,1)
(29,17,1)
(28,23,1)
(12,10,1)
(2,8,1)
(20,4,1)
(5,8,1)
(10,20,1)
(27,30,1)
(15,23,1)
(17,23,1)
(16,5,1)
(30,21,1)
(1,24,1)
(11,23,1)
(18,2,1)
(0,28,1)
(18,2,2)
(5,8,2)
(28,23,2)
(2,11,2)
(1,2,2)
(15,23,2)
(9,2,2)
(11,8,2)
(11,23,2)
(2,8,2)
(8,23,2)
(28,2,2)
(4,15,2)
(16,8,2)
(0,2,2)
(24,2,2)
(23,27,2)
-----------------------------------
(0,"Sleep time OK")
(1,printLine("Sleep time too long")
(2,count > 0 && count <= 2000)
(3,sink:)
(4,fscanf(stdin, "%d", &count)
(5,count)
(6,count)
(7,)
(8,count > 0)
(9,printLine("Sleep time OK")
(10,count)
(11,count <= 2000)
(12,0)
(13,RET)
(14,"%d")
(15,&count)
(16,2000)
(17,goto source;)
(18,count)
(19,)
(20,goto sink;)
(21,count)
(22,)
(23,count = -1)
(24,"Sleep time too long")
(25,count)
(26,source:)
(27,-1)
(28,SLEEP(count)
(29,stdin)
(30,1)
(31,if (count > 0 && count <= 2000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^