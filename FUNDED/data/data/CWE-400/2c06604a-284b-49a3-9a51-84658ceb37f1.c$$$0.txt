-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(1)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
40,41
40,42
40,43
41,42
41,43
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,31,36,38,39,44,47,49,52,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
13,14
13,15
41,42
41,43
42,43
42,44
50,51
50,52
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
49,94
52,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(1)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
1
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(38,33,0)
(18,27,0)
(22,9,0)
(51,19,0)
(17,36,0)
(47,8,0)
(14,8,0)
(49,44,0)
(48,33,0)
(24,30,0)
(21,0,0)
(44,33,0)
(6,17,0)
(46,19,0)
(53,39,0)
(31,29,0)
(33,48,0)
(32,47,0)
(4,31,0)
(39,26,0)
(9,22,0)
(7,19,0)
(41,0,0)
(13,44,0)
(15,47,0)
(16,1,0)
(43,11,0)
(55,11,0)
(0,30,0)
(0,21,0)
(35,49,0)
(21,47,0)
(0,8,0)
(8,19,0)
(2,22,0)
(23,39,0)
(55,8,0)
(34,27,0)
(39,44,0)
(9,54,0)
(11,55,0)
(13,26,0)
(44,26,0)
(28,14,0)
(42,13,0)
(10,26,0)
(20,17,0)
(38,55,0)
(25,8,0)
(33,44,0)
(27,12,0)
(47,21,0)
(14,17,0)
(33,38,0)
(30,0,0)
(1,44,0)
(55,38,0)
(52,55,0)
(50,44,0)
(5,49,0)
(1,26,0)
(40,8,0)
(17,14,0)
(32,0,1)
(35,44,1)
(0,8,1)
(40,25,1)
(50,21,1)
(11,43,1)
(45,13,1)
(55,8,1)
(49,5,1)
(1,44,1)
(49,44,1)
(21,0,1)
(39,23,1)
(15,32,1)
(9,22,1)
(33,48,1)
(45,37,1)
(2,49,1)
(52,50,1)
(0,30,1)
(13,42,1)
(53,49,1)
(37,3,1)
(31,4,1)
(6,20,1)
(55,11,1)
(37,17,1)
(22,2,1)
(16,39,1)
(14,28,1)
(1,16,1)
(3,8,1)
(21,47,1)
(28,6,1)
(44,33,1)
(4,21,1)
(47,15,1)
(39,44,1)
(47,8,1)
(42,1,1)
(8,40,1)
(38,55,1)
(24,41,1)
(17,14,1)
(41,37,1)
(14,8,1)
(20,3,1)
(23,53,1)
(45,31,1)
(53,9,1)
(5,35,1)
(43,52,1)
(13,44,1)
(33,38,1)
(30,24,1)
(32,0,2)
(4,21,2)
(13,21,2)
(52,21,2)
(28,3,2)
(21,37,2)
(31,21,2)
(49,44,2)
(53,21,2)
(24,37,2)
(35,21,2)
(50,21,2)
(42,21,2)
(49,21,2)
(13,44,2)
(44,33,2)
(9,49,2)
(23,21,2)
(38,55,2)
(20,3,2)
(43,21,2)
(5,21,2)
(39,44,2)
(0,8,2)
(6,3,2)
(1,21,2)
(39,21,2)
(55,8,2)
(38,21,2)
(0,30,2)
(21,0,2)
(2,49,2)
(14,3,2)
(55,21,2)
(55,11,2)
(33,21,2)
(44,21,2)
(47,0,2)
(9,22,2)
(16,21,2)
(41,37,2)
(17,3,2)
(17,14,2)
(30,37,2)
(33,48,2)
(22,49,2)
(11,21,2)
(15,0,2)
(47,8,2)
(14,8,2)
(1,44,2)
(33,38,2)
(0,37,2)
(21,47,2)
-----------------------------------
(0,data > strlen(HELLO_STRING)
(1,printLine(myString)
(2,1)
(3,1)
(4,"Input is less than the length of the source string or too large")
(5,NULL)
(6,"%zu")
(7,data)
(8,data = 0)
(9,exit(-1)
(10,if (myString == NULL)
(11,sizeof(char)
(12,)
(13,free(myString)
(14,&data)
(15,100)
(16,myString)
(17,fscanf(stdin, "%zu", &data)
(18,myString)
(19,)
(20,stdin)
(21,data > strlen(HELLO_STRING)
(22,-1)
(23,HELLO_STRING)
(24,HELLO_STRING)
(25,data)
(26,)
(27,)
(28,data)
(29,)
(30,strlen(HELLO_STRING)
(31,printLine("Input is less than the length of the source string or too large")
(32,data)
(33,(char *)
(34,if (data > strlen(HELLO_STRING)
(35,myString)
(36,)
(37,1)
(38,malloc(data*sizeof(char)
(39,strcpy(myString, HELLO_STRING)
(40,0)
(41,data)
(42,myString)
(43,char)
(44,myString = (char *)
(45,RET)
(46,if(1)
(47,data < 100)
(48,char *)
(49,myString == NULL)
(50,myString)
(51,if(1)
(52,data)
(53,myString)
(54,)
(55,data*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^