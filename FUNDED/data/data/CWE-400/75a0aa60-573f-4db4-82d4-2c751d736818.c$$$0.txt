-----label-----
1
-----code-----
void __synccall(void (*func)(void *), void *ctx)
{
	sigset_t oldmask;
	int cs, i, r;
	struct sigaction sa = { .sa_flags = SA_RESTART, .sa_handler = handler }
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
29,33
31,32
33,34
35,36
-----nextToken-----
2,4,6,9,10,12,14,15,17,19,20,25,27,30,32,34,36
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ProblemStatement;
-----ast_node-----
void __synccall(void (*func)(void *), void *ctx){	sigset_t oldmask;	int cs, i, r;	struct sigaction sa = { .sa_flags = SA_RESTART, .sa_handler = handler }
void
__synccall(void (*func)(void *), void *ctx)
__synccall
void (*func)(void *)
void
(*func)(void *)
*func
*
func
void *
void
*
*

void *ctx
void
*ctx
*
ctx
{	sigset_t oldmask;	int cs, i, r;	struct sigaction sa = { .sa_flags = SA_RESTART, .sa_handler = handler }
sigset_t oldmask;
sigset_t oldmask;
sigset_t
sigset_t
oldmask
oldmask
int cs, i, r;
int cs, i, r;
int
cs
cs
i
i
r
r
struct sigaction sa = { .sa_flags = SA_RESTART, .sa_handler = handler
-----joern-----
(27,36,0)
(23,21,0)
(29,2,0)
(22,2,0)
(13,19,0)
(18,17,0)
(5,2,0)
(37,12,0)
(17,18,0)
(26,11,1)
(24,6,1)
(17,18,1)
(19,13,1)
(21,23,1)
(29,2,1)
(36,27,1)
(34,24,1)
(22,2,1)
(6,29,1)
(29,2,2)
(34,29,2)
(18,29,2)
(22,2,2)
(14,28,2)
(28,28,2)
(24,29,2)
(17,18,2)
(7,29,2)
(6,29,2)
(17,29,2)
-----------------------------------
(0,__tl_unlock()
(1,sem_wait(&caller_sem)
(2,self = __pthread_self()
(3,pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs)
(4,caller_sem)
(5,self)
(6,target_tid)
(7,td->tid)
(8,&oldmask)
(9,sa)
(10,if (r)
(11,sa)
(12,context = ctx)
(13,1)
(14,i)
(15,target_tid = 0)
(16,sem_post(&target_sem)
(17,r = -__syscall(SYS_tkill, td->tid, SIGSYNCCALL)
(18,-__syscall(SYS_tkill, td->tid, SIGSYNCCALL)
(19,-1)
(20,td)
(21,sa.sa_handler = SIG_IGN)
(22,self->next)
(23,SIG_IGN)
(24,td)
(25,__block_all_sigs(0)
(26,sa_handler)
(27,i)
(28,i<count)
(29,td!=self)
(30,0)
(31,for (i=0; i<count; i++)
(32,0)
(33,goto single_threaded;)
(34,tid)
(35,cs)
(36,i++)
(37,context)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^