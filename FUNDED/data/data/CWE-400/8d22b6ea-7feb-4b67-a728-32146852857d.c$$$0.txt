-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink(int * countPtr)
{
    int count = *countPtr;
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
29,32
29,33
30,31
31,32
31,33
32,33
35,36
35,37
36,37
38,39
38,40
39,40
39,41
40,41
43,44
45,46
46,47
48,49
49,50
50,51
50,52
51,52
-----nextToken-----
2,4,6,8,9,13,15,19,24,26,28,33,34,37,41,42,44,47,52,53
-----computeFrom-----
31,32
31,33
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink(int * countPtr){    int count = *countPtr;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink(int * countPtr)
CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(10,20,0)
(15,22,0)
(22,25,0)
(2,1,0)
(3,25,0)
(17,20,0)
(5,13,0)
(4,15,0)
(25,22,0)
(24,0,0)
(14,10,0)
(11,0,0)
(23,6,0)
(18,6,0)
(12,20,0)
(15,21,0)
(21,20,0)
(0,1,0)
(15,4,0)
(26,15,0)
(22,1,0)
(13,7,0)
(19,21,0)
(25,8,0)
(21,15,0)
(16,22,0)
(6,0,0)
(17,6,1)
(13,5,1)
(15,22,1)
(20,12,1)
(23,22,1)
(18,23,1)
(26,19,1)
(3,16,1)
(10,20,1)
(15,4,1)
(9,21,1)
(21,20,1)
(22,25,1)
(15,26,1)
(10,14,1)
(14,13,1)
(6,18,1)
(25,8,1)
(5,21,1)
(25,3,1)
(21,15,1)
(19,20,1)
(12,17,1)
(19,10,1)
(19,21,2)
(10,20,2)
(5,21,2)
(22,25,2)
(26,21,2)
(21,21,2)
(15,4,2)
(10,21,2)
(14,21,2)
(25,8,2)
(21,15,2)
(15,21,2)
(21,20,2)
(13,21,2)
(15,22,2)
-----------------------------------
(0,)
(1,)
(2,count)
(3,countPtr)
(4,size_t)
(5,"Hello")
(6,i = 0)
(7,)
(8,int * countPtr)
(9,RET)
(10,i++)
(11,for (i = 0; i < (size_t)
(12,0)
(13,printLine("Hello")
(14,i)
(15,(size_t)
(16,count)
(17,i)
(18,0)
(19,i)
(20,i = 0)
(21,i < (size_t)
(22,count = *countPtr)
(23,i)
(24,i)
(25,*countPtr)
(26,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^