-----label-----
1
-----code-----
void handle_get(int client, char *buf)
{
	char *path = buf + 5;
	char *space = strchr(path, ' ');
	if(space) {
		*space = '\0';
	}
	if(path[0] == '\0') {
		path = "index.html";
	}

	int fd = openat(rootfd, path, O_RDONLY);
	if(fd == -1) {
		/* send err */
		const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";
		write(client, err_resp, strlen(err_resp));
	} else {
		char data[1024];
		ssize_t len;

		const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";
		write(client, resp, strlen(resp));
		write_content_type(client, path);
		write(client, "\r\n", 2);

		while((len = read(fd, data, 1024)) > 0) {
			if(write(client, data, len) == -1) {
				break;
			}
		}
	}
	close(fd);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
14,15
14,16
14,17
14,18
14,19
14,20
14,21
15,16
16,17
16,18
18,19
18,20
18,21
21,22
22,23
22,24
23,24
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
39,41
40,41
42,43
43,44
44,45
44,46
45,46
46,47
49,50
49,51
50,51
50,52
51,52
51,53
52,53
56,57
57,58
58,59
58,60
59,60
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
77,78
77,79
77,80
78,79
78,80
79,80
81,82
83,84
83,85
84,85
85,86
85,87
87,88
87,89
87,90
90,91
92,93
93,94
93,95
93,96
93,97
94,95
96,97
98,99
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
105,110
105,111
105,112
106,107
107,108
107,109
109,110
109,111
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
122,123
122,124
122,125
125,126
127,128
128,129
128,130
128,131
128,132
129,130
131,132
133,134
135,136
135,137
136,137
138,139
140,141
141,142
141,143
141,144
142,143
144,145
146,147
148,149
149,150
149,151
149,152
149,153
150,151
152,153
156,157
156,158
157,158
157,159
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
163,164
165,166
167,168
171,172
172,173
172,174
173,174
173,175
174,175
174,176
174,177
174,178
175,176
177,178
179,180
181,182
183,184
185,186
187,188
188,189
188,190
189,190
191,192
-----nextToken-----
2,4,6,8,10,12,13,17,19,20,24,25,28,30,31,35,37,38,41,47,48,53,54,55,60,61,64,66,70,72,74,76,80,82,86,88,89,91,95,97,99,102,104,108,110,112,116,118,121,123,124,126,130,132,134,137,139,143,145,147,151,153,154,155,161,164,166,168,169,170,176,178,180,182,184,186,190,192
-----computeFrom-----
22,23
22,24
44,45
44,46
50,51
50,52
58,59
58,60
78,79
78,80
157,158
157,159
159,160
159,161
173,174
173,175
-----guardedBy-----
53,60
-----guardedByNegation-----
80,166
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void handle_get(int client, char *buf){	char *path = buf + 5;	char *space = strchr(path, ' ');	if(space) {		*space = '\0';	}	if(path[0] == '\0') {		path = "index.html";	}	int fd = openat(rootfd, path, O_RDONLY);	if(fd == -1) {		/* send err */		const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";		write(client, err_resp, strlen(err_resp));	} else {		char data[1024];		ssize_t len;		const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";		write(client, resp, strlen(resp));		write_content_type(client, path);		write(client, "\r\n", 2);		while((len = read(fd, data, 1024)) > 0) {			if(write(client, data, len) == -1) {				break;			}		}	}	close(fd);}
void
handle_get(int client, char *buf)
handle_get
int client
int
client
client
char *buf
char
*buf
*
buf
{	char *path = buf + 5;	char *space = strchr(path, ' ');	if(space) {		*space = '\0';	}	if(path[0] == '\0') {		path = "index.html";	}	int fd = openat(rootfd, path, O_RDONLY);	if(fd == -1) {		/* send err */		const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";		write(client, err_resp, strlen(err_resp));	} else {		char data[1024];		ssize_t len;		const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";		write(client, resp, strlen(resp));		write_content_type(client, path);		write(client, "\r\n", 2);		while((len = read(fd, data, 1024)) > 0) {			if(write(client, data, len) == -1) {				break;			}		}	}	close(fd);}
char *path = buf + 5;
char *path = buf + 5;
char
*path = buf + 5
*
path
= buf + 5
buf + 5
buf
buf
5
char *space = strchr(path, ' ');
char *space = strchr(path, ' ');
char
*space = strchr(path, ' ')
*
space
= strchr(path, ' ')
strchr(path, ' ')
strchr
strchr
path
path
' '
if(space) {		*space = '\0';	}
space
space
{		*space = '\0';	}
*space = '\0';
*space = '\0'
*space
space
space
'\0'
if(path[0] == '\0') {		path = "index.html";	}
path[0] == '\0'
path[0]
path
path
0
'\0'
{		path = "index.html";	}
path = "index.html";
path = "index.html"
path
path
"index.html"
int fd = openat(rootfd, path, O_RDONLY);
int fd = openat(rootfd, path, O_RDONLY);
int
fd = openat(rootfd, path, O_RDONLY)
fd
= openat(rootfd, path, O_RDONLY)
openat(rootfd, path, O_RDONLY)
openat
openat
rootfd
rootfd
path
path
O_RDONLY
O_RDONLY
if(fd == -1) {		/* send err */		const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";		write(client, err_resp, strlen(err_resp));	} else {		char data[1024];		ssize_t len;		const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";		write(client, resp, strlen(resp));		write_content_type(client, path);		write(client, "\r\n", 2);		while((len = read(fd, data, 1024)) > 0) {			if(write(client, data, len) == -1) {				break;			}		}	}
fd == -1
fd
fd
-1
1
{		/* send err */		const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";		write(client, err_resp, strlen(err_resp));	}
const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";
const char *err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!";
const char
*err_resp = "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!"
*
err_resp
= "HTTP/1.1 404 Not Found\r\n\r\nGo Fish!"
"HTTP/1.1 404 Not Found\r\n\r\nGo Fish!"
write(client, err_resp, strlen(err_resp));
write(client, err_resp, strlen(err_resp))
write
write
client
client
err_resp
err_resp
strlen(err_resp)
strlen
strlen
err_resp
err_resp
{		char data[1024];		ssize_t len;		const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";		write(client, resp, strlen(resp));		write_content_type(client, path);		write(client, "\r\n", 2);		while((len = read(fd, data, 1024)) > 0) {			if(write(client, data, len) == -1) {				break;			}		}	}
char data[1024];
char data[1024];
char
data[1024]
data
[1024]
1024
ssize_t len;
ssize_t len;
ssize_t
ssize_t
len
len
const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";
const char *resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n";
const char
*resp = "HTTP/1.1 200 OK\r\nServer: chttp\r\n"
*
resp
= "HTTP/1.1 200 OK\r\nServer: chttp\r\n"
"HTTP/1.1 200 OK\r\nServer: chttp\r\n"
write(client, resp, strlen(resp));
write(client, resp, strlen(resp))
write
write
client
client
resp
resp
strlen(resp)
strlen
strlen
resp
resp
write_content_type(client, path);
write_content_type(client, path)
write_content_type
write_content_type
client
client
path
path
write(client, "\r\n", 2);
write(client, "\r\n", 2)
write
write
client
client
"\r\n"
2
while((len = read(fd, data, 1024)) > 0) {			if(write(client, data, len) == -1) {				break;			}		}
(len = read(fd, data, 1024)) > 0
(len = read(fd, data, 1024))
len = read(fd, data, 1024)
len
len
read(fd, data, 1024)
read
read
fd
fd
data
data
1024
0
{			if(write(client, data, len) == -1) {				break;			}		}
if(write(client, data, len) == -1) {				break;			}
write(client, data, len) == -1
write(client, data, len)
write
write
client
client
data
data
len
len
-1
1
{				break;			}
break;
close(fd);
close(fd)
close
close
fd
fd
-----joern-----
(23,77,0)
(33,64,0)
(52,94,0)
(66,63,0)
(46,94,0)
(79,72,0)
(16,27,0)
(12,43,0)
(39,13,0)
(30,67,0)
(88,84,0)
(65,6,0)
(7,29,0)
(49,89,0)
(71,28,0)
(52,55,0)
(83,24,0)
(58,79,0)
(15,23,0)
(11,83,0)
(91,55,0)
(0,15,0)
(33,84,0)
(60,32,0)
(68,24,0)
(29,6,0)
(78,55,0)
(76,78,0)
(28,71,0)
(30,37,0)
(93,39,0)
(33,6,0)
(24,77,0)
(81,86,0)
(21,77,0)
(44,28,0)
(5,13,0)
(36,30,0)
(90,33,0)
(13,39,0)
(82,67,0)
(83,84,0)
(1,66,0)
(37,30,0)
(18,37,0)
(15,79,0)
(59,84,0)
(17,13,0)
(13,24,0)
(38,29,0)
(45,49,0)
(80,77,0)
(85,23,0)
(64,47,0)
(22,78,0)
(37,67,0)
(4,29,0)
(53,49,0)
(42,77,0)
(48,83,0)
(63,29,0)
(49,24,0)
(10,65,0)
(30,41,0)
(27,23,0)
(67,41,0)
(8,33,0)
(80,55,0)
(14,60,0)
(56,52,0)
(20,67,0)
(27,24,0)
(92,60,0)
(94,52,0)
(51,30,0)
(87,84,0)
(83,60,0)
(47,84,0)
(35,43,0)
(2,77,0)
(31,47,0)
(23,27,0)
(78,71,0)
(24,49,0)
(29,63,0)
(71,78,0)
(26,77,0)
(9,64,0)
(55,43,0)
(70,80,0)
(69,65,0)
(62,78,0)
(95,65,0)
(43,55,0)
(3,77,0)
(83,6,0)
(75,25,0)
(50,71,0)
(29,71,0)
(30,6,0)
(43,24,0)
(65,84,0)
(73,77,0)
(57,41,0)
(61,43,0)
(64,33,0)
(34,27,0)
(19,47,0)
(40,84,0)
(63,66,0)
(55,77,0)
(33,47,0)
(43,60,0)
(29,6,1)
(22,62,1)
(27,24,1)
(15,23,1)
(23,27,1)
(61,12,1)
(13,17,1)
(20,82,1)
(50,65,1)
(11,48,1)
(14,92,1)
(82,52,1)
(62,50,1)
(44,71,1)
(92,39,1)
(33,6,1)
(30,37,1)
(12,35,1)
(48,33,1)
(93,13,1)
(64,47,1)
(95,10,1)
(39,13,1)
(70,28,1)
(18,51,1)
(37,67,1)
(1,29,1)
(79,58,1)
(90,47,1)
(43,24,1)
(33,47,1)
(52,55,1)
(34,16,1)
(58,15,1)
(55,43,1)
(27,34,1)
(33,64,1)
(24,49,1)
(45,53,1)
(81,63,1)
(9,8,1)
(63,29,1)
(65,6,1)
(65,69,1)
(85,24,1)
(37,18,1)
(54,23,1)
(63,66,1)
(35,91,1)
(39,93,1)
(51,36,1)
(60,14,1)
(76,22,1)
(36,67,1)
(94,46,1)
(49,45,1)
(30,67,1)
(10,83,1)
(74,80,1)
(15,0,1)
(52,94,1)
(7,28,1)
(47,19,1)
(43,60,1)
(50,63,1)
(83,60,1)
(29,4,1)
(5,79,1)
(28,71,1)
(13,24,1)
(66,1,1)
(46,56,1)
(67,20,1)
(78,76,1)
(4,38,1)
(70,81,1)
(56,55,1)
(31,52,1)
(8,90,1)
(16,85,1)
(83,6,1)
(69,95,1)
(91,39,1)
(5,54,1)
(30,6,1)
(0,54,1)
(43,61,1)
(28,44,1)
(80,55,1)
(17,5,1)
(64,9,1)
(29,71,1)
(83,11,1)
(80,70,1)
(49,89,1)
(38,7,1)
(53,68,1)
(70,30,1)
(71,78,1)
(91,60,1)
(78,55,1)
(83,24,1)
(19,31,1)
(29,6,2)
(52,94,2)
(23,27,2)
(67,52,2)
(28,71,2)
(65,6,2)
(30,37,2)
(29,28,2)
(78,63,2)
(28,52,2)
(62,63,2)
(0,54,2)
(33,52,2)
(55,43,2)
(27,24,2)
(15,54,2)
(43,24,2)
(82,52,2)
(36,52,2)
(63,28,2)
(4,28,2)
(24,49,2)
(33,64,2)
(22,63,2)
(30,6,2)
(30,67,2)
(14,39,2)
(44,52,2)
(60,39,2)
(83,60,2)
(43,60,2)
(11,52,2)
(20,52,2)
(29,71,2)
(62,52,2)
(79,54,2)
(48,52,2)
(92,39,2)
(49,89,2)
(38,28,2)
(10,52,2)
(83,6,2)
(50,52,2)
(83,52,2)
(76,52,2)
(58,54,2)
(9,52,2)
(63,66,2)
(64,52,2)
(83,24,2)
(28,63,2)
(18,52,2)
(37,52,2)
(33,6,2)
(44,63,2)
(7,28,2)
(19,52,2)
(90,52,2)
(50,63,2)
(81,63,2)
(31,52,2)
(1,28,2)
(33,47,2)
(76,63,2)
(71,63,2)
(47,52,2)
(8,52,2)
(78,52,2)
(66,28,2)
(13,24,2)
(78,55,2)
(71,78,2)
(30,52,2)
(52,55,2)
(80,55,2)
(22,52,2)
(65,52,2)
(15,23,2)
(39,13,2)
(69,52,2)
(71,52,2)
(51,52,2)
(95,52,2)
(37,67,2)
(63,29,2)
(64,47,2)
-----------------------------------
(0,space)
(1,1)
(2,if(path[0] == \'\\0\')
(3,space)
(4,len)
(5,path)
(6,int client)
(7,client)
(8,resp)
(9,resp)
(10,client)
(11,path)
(12,path)
(13,path[0])
(14,"index.html")
(15,*space)
(16,path)
(17,0)
(18,err_resp)
(19,"HTTP/1.1 200 OK\\r\\nServer: chttp\\r\\n")
(20,"HTTP/1.1 404 Not Found\\r\\n\\r\\nGo Fish!")
(21,path)
(22,data)
(23,*space = strchr(path, \' \')
(24,*path = buf + 5)
(25,)
(26,if(space)
(27,strchr(path, \' \')
(28,(len = read(fd, data, 1024)
(29,write(client, data, len)
(30,write(client, err_resp, strlen(err_resp)
(31,resp)
(32,)
(33,write(client, resp, strlen(resp)
(34,\' \')
(35,rootfd)
(36,client)
(37,strlen(err_resp)
(38,data)
(39,path[0] == \'\\0\')
(40,len)
(41,)
(42,fd)
(43,openat(rootfd, path, O_RDONLY)
(44,0)
(45,5)
(46,1)
(47,*resp = "HTTP/1.1 200 OK\\r\\nServer: chttp\\r\\n")
(48,client)
(49,buf + 5)
(50,len)
(51,err_resp)
(52,fd == -1)
(53,buf)
(54,space)
(55,fd = openat(rootfd, path, O_RDONLY)
(56,fd)
(57,err_resp)
(58,\'\\0\')
(59,resp)
(60,path = "index.html")
(61,O_RDONLY)
(62,fd)
(63,write(client, data, len)
(64,strlen(resp)
(65,write(client, "\\r\\n", 2)
(66,-1)
(67,*err_resp = "HTTP/1.1 404 Not Found\\r\\n\\r\\nGo Fish!")
(68,path)
(69,2)
(70,fd)
(71,len = read(fd, data, 1024)
(72,)
(73,if(fd == -1)
(74,RET)
(75,if(write(client, data, len)
(76,1024)
(77,)
(78,read(fd, data, 1024)
(79,*space = \'\\0\')
(80,close(fd)
(81,break;)
(82,err_resp)
(83,write_content_type(client, path)
(84,)
(85,space)
(86,)
(87,data)
(88,while((len = read(fd, data, 1024)
(89,char *buf)
(90,client)
(91,fd)
(92,path)
(93,\'\\0\')
(94,-1)
(95,"\\r\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^