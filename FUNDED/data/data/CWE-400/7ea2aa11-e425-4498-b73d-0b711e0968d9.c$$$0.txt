-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticReturnsTrue())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,25,28,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
23,24
23,25
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(44,34,0)
(35,2,0)
(10,32,0)
(24,41,0)
(44,39,0)
(44,37,0)
(12,47,0)
(31,11,0)
(38,28,0)
(34,21,0)
(36,47,0)
(13,12,0)
(18,26,0)
(11,47,0)
(40,19,0)
(27,46,0)
(34,44,0)
(30,46,0)
(7,47,0)
(42,36,0)
(23,39,0)
(49,39,0)
(26,49,0)
(21,33,0)
(9,12,0)
(21,34,0)
(44,10,0)
(15,11,0)
(7,28,0)
(20,49,0)
(49,26,0)
(39,19,0)
(25,19,0)
(10,16,0)
(21,47,0)
(2,35,0)
(41,5,0)
(35,45,0)
(12,28,0)
(29,7,0)
(36,28,0)
(37,44,0)
(1,37,0)
(47,28,0)
(8,10,0)
(43,39,0)
(3,47,0)
(47,21,0)
(46,6,0)
(0,44,0)
(33,21,0)
(4,2,0)
(49,10,0)
(48,19,0)
(16,10,0)
(22,41,1)
(34,44,1)
(37,1,1)
(7,29,1)
(9,13,1)
(44,39,1)
(21,34,1)
(10,16,1)
(14,17,1)
(26,18,1)
(21,33,1)
(36,42,1)
(20,14,1)
(13,35,1)
(39,23,1)
(47,21,1)
(2,4,1)
(13,11,1)
(16,8,1)
(44,37,1)
(14,10,1)
(11,47,1)
(12,9,1)
(44,10,1)
(35,2,1)
(18,20,1)
(17,39,1)
(36,47,1)
(49,39,1)
(22,36,1)
(8,17,1)
(7,47,1)
(23,43,1)
(15,47,1)
(49,10,1)
(29,12,1)
(41,24,1)
(42,7,1)
(11,31,1)
(0,3,1)
(4,11,1)
(22,14,1)
(24,49,1)
(3,49,1)
(12,47,1)
(1,0,1)
(49,26,1)
(31,15,1)
(7,47,2)
(36,47,2)
(18,14,2)
(44,39,2)
(35,11,2)
(3,49,2)
(24,49,2)
(12,49,2)
(41,49,2)
(21,33,2)
(34,49,2)
(9,49,2)
(1,49,2)
(11,47,2)
(11,49,2)
(49,39,2)
(29,49,2)
(21,49,2)
(34,44,2)
(44,10,2)
(8,17,2)
(47,49,2)
(2,11,2)
(26,14,2)
(49,14,2)
(7,49,2)
(49,26,2)
(0,49,2)
(16,17,2)
(21,34,2)
(31,49,2)
(36,49,2)
(10,16,2)
(12,47,2)
(10,17,2)
(13,49,2)
(37,49,2)
(35,2,2)
(44,37,2)
(47,21,2)
(20,14,2)
(4,11,2)
(49,10,2)
(42,49,2)
(44,49,2)
(15,49,2)
-----------------------------------
(0,data)
(1,char)
(2,-1)
(3,myString)
(4,1)
(5,)
(6,)
(7,printLine(myString)
(8,data)
(9,HELLO_STRING)
(10,data = rand()
(11,myString == NULL)
(12,strcpy(myString, HELLO_STRING)
(13,myString)
(14,staticReturnsTrue()
(15,myString)
(16,rand()
(17,staticReturnsTrue()
(18,HELLO_STRING)
(19,)
(20,data)
(21,(char *)
(22,RET)
(23,0)
(24,"Input is less than the length of the source string")
(25,data)
(26,strlen(HELLO_STRING)
(27,myString)
(28,)
(29,myString)
(30,if (data > strlen(HELLO_STRING)
(31,NULL)
(32,)
(33,char *)
(34,malloc(data*sizeof(char)
(35,exit(-1)
(36,free(myString)
(37,sizeof(char)
(38,if (myString == NULL)
(39,data = 0)
(40,if(staticReturnsTrue()
(41,printLine("Input is less than the length of the source string")
(42,myString)
(43,data)
(44,data*sizeof(char)
(45,)
(46,)
(47,myString = (char *)
(48,if(staticReturnsTrue()
(49,data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^