-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_09_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,69,71
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_09_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_09_bad()
CWE401_Memory_Leak__int_calloc_09_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,30,0)
(35,33,0)
(25,16,0)
(20,4,0)
(20,16,0)
(36,32,0)
(2,11,0)
(24,33,0)
(25,31,0)
(21,26,0)
(15,28,0)
(15,25,0)
(19,31,0)
(33,24,0)
(25,15,0)
(30,16,0)
(18,26,0)
(17,28,0)
(16,28,0)
(16,20,0)
(2,10,0)
(23,22,0)
(0,32,0)
(14,16,0)
(32,16,0)
(12,11,0)
(29,22,0)
(20,33,0)
(34,24,0)
(31,28,0)
(26,22,0)
(30,31,0)
(33,20,0)
(11,2,0)
(6,22,0)
(27,30,0)
(4,20,0)
(9,25,0)
(7,25,0)
(25,7,1)
(32,36,1)
(8,26,1)
(16,20,1)
(20,33,1)
(20,4,1)
(11,12,1)
(33,24,1)
(21,18,1)
(35,14,1)
(13,3,1)
(2,11,1)
(1,32,1)
(25,31,1)
(24,34,1)
(19,30,1)
(27,1,1)
(31,19,1)
(34,35,1)
(32,16,1)
(0,16,1)
(9,31,1)
(1,2,1)
(14,8,1)
(15,25,1)
(30,16,1)
(3,8,1)
(26,21,1)
(12,32,1)
(3,15,1)
(36,0,1)
(25,16,1)
(30,27,1)
(7,9,1)
(16,8,2)
(2,32,2)
(30,16,2)
(11,32,2)
(20,8,2)
(33,24,2)
(0,8,2)
(16,20,2)
(25,8,2)
(25,31,2)
(24,8,2)
(31,8,2)
(1,8,2)
(9,8,2)
(20,4,2)
(20,33,2)
(15,8,2)
(33,8,2)
(35,8,2)
(2,11,2)
(25,16,2)
(12,32,2)
(19,8,2)
(32,16,2)
(34,8,2)
(14,8,2)
(30,8,2)
(27,8,2)
(7,8,2)
(36,8,2)
(15,25,2)
(32,8,2)
-----------------------------------
(0,data)
(1,data)
(2,exit(-1)
(3,GLOBAL_CONST_TRUE)
(4,int *)
(5, sizeof(int)
(6,if(GLOBAL_CONST_TRUE)
(7,0)
(8,GLOBAL_CONST_TRUE)
(9,data)
(10,)
(11,-1)
(12,1)
(13,RET)
(14,data)
(15,printIntLine(data[0])
(16,data = (int *)
(17,if (data == NULL)
(18,data)
(19,5)
(20,(int *)
(21,NULL)
(22,)
(23,data)
(24,sizeof(int)
(25,data[0])
(26,data = NULL)
(27,0)
(28,)
(29,if(GLOBAL_CONST_TRUE)
(30,data[0])
(31,data[0] = 5)
(32,data == NULL)
(33,calloc(100, sizeof(int)
(34,int)
(35,100)
(36,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^