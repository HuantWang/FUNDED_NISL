-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,48,49,50,51,57,58,59,60,64,68,70,74,75,78,80
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,30,0)
(10,31,0)
(38,7,0)
(30,36,0)
(20,27,0)
(6,30,0)
(3,7,0)
(22,17,0)
(2,4,0)
(25,38,0)
(4,13,0)
(31,29,0)
(16,31,0)
(27,17,0)
(23,24,0)
(5,9,0)
(18,2,0)
(33,16,0)
(34,18,0)
(35,29,0)
(9,3,0)
(2,18,0)
(30,6,0)
(11,18,0)
(29,7,0)
(40,24,0)
(31,16,0)
(17,38,0)
(32,23,0)
(14,23,0)
(12,24,0)
(27,3,0)
(4,3,0)
(13,4,0)
(19,34,0)
(30,28,0)
(1,3,0)
(15,27,0)
(9,28,0)
(21,24,0)
(3,4,0)
(39,9,0)
(16,3,0)
(37,16,0)
(6,7,0)
(18,34,0)
(34,19,0)
(28,9,0)
(4,2,0)
(36,30,0)
(17,27,0)
(11,1,1)
(34,11,1)
(0,6,1)
(6,30,1)
(33,3,1)
(16,3,1)
(34,19,1)
(35,31,1)
(22,27,1)
(39,5,1)
(25,17,1)
(17,27,1)
(32,14,1)
(27,15,1)
(0,26,1)
(38,25,1)
(28,9,1)
(31,10,1)
(8,0,1)
(27,3,1)
(4,2,1)
(23,32,1)
(3,4,1)
(9,3,1)
(30,28,1)
(16,37,1)
(26,23,1)
(4,13,1)
(18,34,1)
(2,18,1)
(10,16,1)
(20,29,1)
(31,16,1)
(30,36,1)
(17,22,1)
(15,20,1)
(29,35,1)
(1,26,1)
(9,39,1)
(37,33,1)
(5,38,1)
(17,26,2)
(6,30,2)
(9,26,2)
(3,4,2)
(30,36,2)
(4,26,2)
(25,26,2)
(6,26,2)
(33,26,2)
(30,28,2)
(34,19,2)
(4,13,2)
(28,9,2)
(9,3,2)
(22,26,2)
(3,26,2)
(17,27,2)
(20,26,2)
(30,26,2)
(31,26,2)
(11,26,2)
(27,3,2)
(5,26,2)
(29,26,2)
(27,26,2)
(35,26,2)
(15,26,2)
(34,26,2)
(39,26,2)
(18,26,2)
(16,26,2)
(16,3,2)
(28,26,2)
(1,26,2)
(4,2,2)
(38,26,2)
(37,26,2)
(18,34,2)
(10,26,2)
(2,26,2)
(2,18,2)
(31,16,2)
-----------------------------------
(0,GLOBAL_CONST_TRUE)
(1,data)
(2,ALLOCA(100*sizeof(struct _twoIntsStruct)
(3,data = (struct _twoIntsStruct *)
(4,(struct _twoIntsStruct *)
(5,data)
(6,printStructLine((twoIntsStruct *)
(7,)
(8,RET)
(9,data[0])
(10,intOne)
(11,100)
(12,data)
(13,struct _twoIntsStruct *)
(14,data)
(15,0)
(16,data[0])
(17,data[0].intTwo)
(18,100*sizeof(struct _twoIntsStruct)
(19,struct _twoIntsStruct)
(20,data)
(21,if(GLOBAL_CONST_TRUE)
(22,intTwo)
(23,data = NULL)
(24,)
(25,0)
(26,GLOBAL_CONST_TRUE)
(27,data[0])
(28,&data[0])
(29,data[0].intOne = 0)
(30,(twoIntsStruct *)
(31,data[0].intOne)
(32,NULL)
(33,data)
(34,sizeof(struct _twoIntsStruct)
(35,0)
(36,twoIntsStruct *)
(37,0)
(38,data[0].intTwo = 0)
(39,0)
(40,if(GLOBAL_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^