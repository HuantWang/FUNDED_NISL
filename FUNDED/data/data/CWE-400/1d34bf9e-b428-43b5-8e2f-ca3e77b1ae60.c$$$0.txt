-----label-----
0
-----code-----
static void goodB2G1()
{
    int64_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
66,67
66,68
67,68
69,70
69,71
70,71
73,74
73,75
73,76
74,75
76,77
77,78
78,79
78,80
79,80
82,83
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,62,63,64,68,71,72,75,80,81,86,88
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int64_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int64_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,7,0)
(21,20,0)
(31,14,0)
(27,7,0)
(39,5,0)
(20,21,0)
(2,3,0)
(11,35,0)
(18,16,0)
(36,21,0)
(28,5,0)
(6,10,0)
(32,39,0)
(33,13,0)
(24,7,0)
(5,16,0)
(3,2,0)
(0,20,0)
(35,7,0)
(11,5,0)
(39,9,0)
(19,14,0)
(17,15,0)
(8,15,0)
(35,11,0)
(2,38,0)
(16,5,0)
(0,16,0)
(20,0,0)
(14,5,0)
(16,18,0)
(30,3,0)
(23,11,0)
(4,15,0)
(12,6,0)
(37,11,0)
(16,0,0)
(22,13,0)
(25,0,0)
(34,20,0)
(39,13,0)
(13,15,0)
(0,13,0)
(37,23,1)
(19,31,1)
(14,19,1)
(27,14,1)
(2,3,1)
(27,2,1)
(23,27,1)
(39,13,1)
(30,14,1)
(26,35,1)
(34,25,1)
(32,26,1)
(13,22,1)
(5,16,1)
(36,34,1)
(31,5,1)
(16,18,1)
(39,5,1)
(25,28,1)
(20,21,1)
(29,13,1)
(28,29,1)
(21,36,1)
(0,13,1)
(1,6,1)
(11,37,1)
(26,29,1)
(3,30,1)
(16,0,1)
(35,11,1)
(14,5,1)
(12,26,1)
(22,33,1)
(1,39,1)
(6,12,1)
(39,32,1)
(0,20,1)
(11,5,1)
(30,14,2)
(5,29,2)
(23,29,2)
(35,29,2)
(20,29,2)
(27,29,2)
(11,29,2)
(31,29,2)
(16,0,2)
(14,29,2)
(37,29,2)
(3,14,2)
(6,26,2)
(28,29,2)
(12,26,2)
(2,3,2)
(19,29,2)
(39,5,2)
(16,29,2)
(20,21,2)
(39,13,2)
(16,18,2)
(21,29,2)
(0,13,2)
(0,20,2)
(35,11,2)
(5,16,2)
(2,14,2)
(39,26,2)
(32,26,2)
(36,29,2)
(0,29,2)
(25,29,2)
(11,5,2)
(34,29,2)
(14,5,2)
-----------------------------------
(0,realloc(data, 100*sizeof(int64_t)
(1,RET)
(2,exit(-1)
(3,-1)
(4,data)
(5,data = (int64_t *)
(6,printLine("Benign, fixed string")
(7,)
(8,if(staticTrue)
(9,)
(10,)
(11,data[0])
(12,"Benign, fixed string")
(13,data = NULL)
(14,data == NULL)
(15,)
(16,(int64_t *)
(17,if(staticFalse)
(18,int64_t *)
(19,NULL)
(20,100*sizeof(int64_t)
(21,sizeof(int64_t)
(22,NULL)
(23,data)
(24,if (data == NULL)
(25,data)
(26,staticFalse)
(27,L)
(28,data)
(29,staticTrue)
(30,1)
(31,data)
(32,data)
(33,data)
(34,100)
(35,printLongLongLine(data[0])
(36,int64_t)
(37,0)
(38,)
(39,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^