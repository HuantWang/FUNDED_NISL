-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_04_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
72,73
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
83,84
83,85
84,85
84,86
85,86
88,89
90,91
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,69,71,73,78,79,82,86,87,89,92,97,98
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
76,77
76,78
80,81
80,82
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_04_bad(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_04_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_04_bad
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(17,30,0)
(30,48,0)
(21,18,0)
(33,32,0)
(5,30,0)
(0,9,0)
(43,27,0)
(23,47,0)
(49,0,0)
(8,18,0)
(15,41,0)
(10,51,0)
(36,23,0)
(42,41,0)
(6,30,0)
(33,21,0)
(33,43,0)
(19,21,0)
(41,23,0)
(51,16,0)
(29,4,0)
(24,48,0)
(1,4,0)
(31,33,0)
(11,4,0)
(48,51,0)
(9,0,0)
(44,43,0)
(12,40,0)
(30,5,0)
(32,33,0)
(35,22,0)
(39,30,0)
(34,18,0)
(50,9,0)
(9,48,0)
(38,48,0)
(28,8,0)
(22,7,0)
(20,18,0)
(27,43,0)
(33,0,0)
(43,4,0)
(14,23,0)
(40,37,0)
(0,26,0)
(3,51,0)
(21,33,0)
(2,5,0)
(13,27,0)
(30,17,1)
(43,27,1)
(6,39,1)
(12,21,1)
(25,22,1)
(13,44,1)
(31,19,1)
(21,18,1)
(0,9,1)
(9,50,1)
(8,18,1)
(28,40,1)
(46,25,1)
(27,13,1)
(50,49,1)
(18,20,1)
(35,5,1)
(24,45,1)
(41,42,1)
(30,48,1)
(49,5,1)
(25,0,1)
(8,28,1)
(45,43,1)
(2,30,1)
(15,25,1)
(19,18,1)
(42,15,1)
(17,6,1)
(48,38,1)
(40,12,1)
(33,32,1)
(34,41,1)
(38,24,1)
(25,45,1)
(19,8,1)
(33,0,1)
(20,34,1)
(39,48,1)
(33,31,1)
(22,35,1)
(5,2,1)
(46,21,1)
(33,43,1)
(5,30,1)
(9,48,1)
(21,33,1)
(43,27,2)
(17,45,2)
(9,5,2)
(33,43,2)
(39,45,2)
(19,21,2)
(0,9,2)
(8,18,2)
(5,30,2)
(20,25,2)
(30,45,2)
(15,25,2)
(42,25,2)
(5,45,2)
(35,5,2)
(21,18,2)
(0,5,2)
(2,45,2)
(33,21,2)
(31,25,2)
(34,25,2)
(33,25,2)
(12,21,2)
(33,32,2)
(48,45,2)
(8,21,2)
(22,5,2)
(49,5,2)
(19,25,2)
(30,48,2)
(50,5,2)
(33,0,2)
(21,25,2)
(18,25,2)
(24,45,2)
(9,48,2)
(6,45,2)
(21,33,2)
(21,21,2)
(31,21,2)
(28,21,2)
(38,45,2)
(41,25,2)
(40,21,2)
-----------------------------------
(0,count = atoi(inputBuffer)
(1,if(STATIC_CONST_TRUE)
(2,NULL)
(3,inputBuffer)
(4,)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,CHAR_ARRAY_SIZE)
(7,)
(8,i++)
(9,atoi(inputBuffer)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,count)
(12,"Hello")
(13,1)
(14,for (i = 0; i < (size_t)
(15,i)
(16,)
(17,stdin)
(18,i = 0)
(19,i)
(20,0)
(21,i < (size_t)
(22,printLine("fgets()
(23,)
(24,inputBuffer)
(25,STATIC_CONST_TRUE)
(26,)
(27,-1)
(28,i)
(29,if(STATIC_CONST_TRUE)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,count)
(32,size_t)
(33,(size_t)
(34,i)
(35,"fgets()
(36,i)
(37,)
(38,"")
(39,inputBuffer)
(40,printLine("Hello")
(41,i = 0)
(42,0)
(43,count = -1)
(44,count)
(45,STATIC_CONST_TRUE)
(46,RET)
(47,)
(48,inputBuffer[CHAR_ARRAY_SIZE] = "")
(49,count)
(50,inputBuffer)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^