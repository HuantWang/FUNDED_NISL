-----label-----
1
-----code-----
static void
winimg_hibernate(imglist *img)
{
  size_t size = img->pixelwidth * img->pixelheight * 4;

  if (!img->hdc)
    return;

  temp_strage_t *strage = strage_create();
  if (!strage)
    return;

  if (!strage_write(strage, img->pixels, size)) {
    strage_destroy(strage);
    return;
  }

  // delete allocated DIB section.
  DeleteDC(img->hdc);
  DeleteObject(img->hbmp);
  img->pixels = NULL;
  img->hdc = NULL;
  img->hbmp = NULL;

  img->strage = strage;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
30,31
30,32
31,32
32,33
32,34
33,34
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
46,47
48,49
48,50
49,50
50,51
53,54
53,55
54,55
55,56
55,57
55,58
55,59
56,57
58,59
60,61
60,62
61,62
64,65
66,67
66,68
67,68
68,69
68,70
69,70
71,72
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
-----nextToken-----
2,4,7,9,10,15,17,23,24,27,28,29,34,35,36,40,42,43,47,51,52,57,59,62,63,65,70,72,73,77,80,81,85,88,89,94,95,97,102,103,105,110,111,113,118,119,121
-----computeFrom-----
19,20
19,21
20,21
20,22
91,92
91,93
99,100
99,101
107,108
107,109
115,116
115,117
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static voidwinimg_hibernate(imglist *img){  size_t size = img->pixelwidth * img->pixelheight * 4;  if (!img->hdc)    return;  temp_strage_t *strage = strage_create();  if (!strage)    return;  if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }  // delete allocated DIB section.  DeleteDC(img->hdc);  DeleteObject(img->hbmp);  img->pixels = NULL;  img->hdc = NULL;  img->hbmp = NULL;  img->strage = strage;}
static void
winimg_hibernate(imglist *img)
winimg_hibernate
imglist *img
imglist
imglist
*img
*
img
{  size_t size = img->pixelwidth * img->pixelheight * 4;  if (!img->hdc)    return;  temp_strage_t *strage = strage_create();  if (!strage)    return;  if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }  // delete allocated DIB section.  DeleteDC(img->hdc);  DeleteObject(img->hbmp);  img->pixels = NULL;  img->hdc = NULL;  img->hbmp = NULL;  img->strage = strage;}
size_t size = img->pixelwidth * img->pixelheight * 4;
size_t size = img->pixelwidth * img->pixelheight * 4;
size_t
size_t
size = img->pixelwidth * img->pixelheight * 4
size
= img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight
img->pixelwidth
img
img
pixelwidth
img->pixelheight
img
img
pixelheight
4
if (!img->hdc)    return;
!img->hdc
img->hdc
img
img
hdc
return;
temp_strage_t *strage = strage_create();
temp_strage_t *strage = strage_create();
temp_strage_t
temp_strage_t
*strage = strage_create()
*
strage
= strage_create()
strage_create()
strage_create
strage_create
if (!strage)    return;
!strage
strage
strage
return;
if (!strage_write(strage, img->pixels, size)) {    strage_destroy(strage);    return;  }
!strage_write(strage, img->pixels, size)
strage_write(strage, img->pixels, size)
strage_write
strage_write
strage
strage
img->pixels
img
img
pixels
size
size
{    strage_destroy(strage);    return;  }
strage_destroy(strage);
strage_destroy(strage)
strage_destroy
strage_destroy
strage
strage
return;
DeleteDC(img->hdc);
DeleteDC(img->hdc)
DeleteDC
DeleteDC
img->hdc
img
img
hdc
DeleteObject(img->hbmp);
DeleteObject(img->hbmp)
DeleteObject
DeleteObject
img->hbmp
img
img
hbmp
img->pixels = NULL;
img->pixels = NULL
img->pixels
img
img
pixels
NULL
NULL
img->hdc = NULL;
img->hdc = NULL
img->hdc
img
img
hdc
NULL
NULL
img->hbmp = NULL;
img->hbmp = NULL
img->hbmp
img
img
hbmp
NULL
NULL
img->strage = strage;
img->strage = strage
img->strage
img
img
strage
strage
strage
-----joern-----
(45,44,0)
(34,66,0)
(39,64,0)
(14,7,0)
(5,47,0)
(19,7,0)
(16,64,0)
(60,6,0)
(35,20,0)
(55,66,0)
(13,2,0)
(18,22,0)
(51,13,0)
(22,53,0)
(11,64,0)
(3,46,0)
(29,6,0)
(26,7,0)
(62,37,0)
(59,16,0)
(12,19,0)
(23,64,0)
(67,2,0)
(60,64,0)
(10,26,0)
(48,7,0)
(58,39,0)
(17,13,0)
(22,64,0)
(4,5,0)
(21,47,0)
(63,7,0)
(24,11,0)
(46,64,0)
(43,9,0)
(53,7,0)
(66,55,0)
(45,31,0)
(55,7,0)
(28,66,0)
(16,26,0)
(46,1,0)
(65,2,0)
(27,33,0)
(30,47,0)
(66,64,0)
(43,7,0)
(0,7,0)
(45,41,0)
(13,51,0)
(6,2,0)
(37,7,0)
(47,64,0)
(20,32,0)
(47,5,0)
(42,23,0)
(57,11,0)
(54,7,0)
(2,67,0)
(20,2,0)
(49,11,0)
(36,16,0)
(40,53,0)
(6,7,0)
(33,2,0)
(11,57,0)
(37,1,0)
(2,7,0)
(13,39,0)
(8,9,0)
(50,39,0)
(68,46,0)
(13,37,0)
(56,60,0)
(44,32,0)
(1,5,0)
(38,9,0)
(1,37,0)
(25,13,0)
(39,13,0)
(5,1,0)
(9,64,0)
(52,22,0)
(61,23,0)
(15,60,0)
(9,43,0)
(23,19,0)
(1,46,0)
(26,10,1)
(5,4,1)
(1,46,1)
(37,1,1)
(27,2,1)
(13,17,1)
(36,59,1)
(20,2,1)
(65,57,1)
(5,47,1)
(22,64,1)
(4,47,1)
(20,35,1)
(8,38,1)
(59,43,1)
(34,51,1)
(28,34,1)
(15,56,1)
(42,61,1)
(1,5,1)
(30,21,1)
(53,40,1)
(38,55,1)
(25,33,1)
(22,18,1)
(13,37,1)
(61,26,1)
(2,67,1)
(66,64,1)
(21,46,1)
(44,20,1)
(46,68,1)
(45,31,1)
(39,50,1)
(45,44,1)
(47,30,1)
(51,13,1)
(49,37,1)
(46,64,1)
(10,16,1)
(19,12,1)
(11,24,1)
(58,25,1)
(23,64,1)
(6,2,1)
(11,64,1)
(45,41,1)
(9,8,1)
(47,64,1)
(41,57,1)
(67,65,1)
(29,60,1)
(18,52,1)
(43,9,1)
(66,28,1)
(9,64,1)
(33,27,1)
(50,58,1)
(24,49,1)
(60,15,1)
(23,42,1)
(35,51,1)
(55,66,1)
(68,3,1)
(6,29,1)
(33,2,1)
(31,33,1)
(16,36,1)
(52,19,1)
(3,62,1)
(13,2,1)
(16,64,1)
(40,22,1)
(45,6,1)
(56,53,1)
(57,11,1)
(17,39,1)
(12,23,1)
(60,64,1)
(39,64,1)
(13,39,1)
(43,51,2)
(23,64,2)
(41,57,2)
(60,51,2)
(2,57,2)
(51,33,2)
(29,51,2)
(65,57,2)
(25,33,2)
(17,33,2)
(61,51,2)
(67,57,2)
(59,51,2)
(45,44,2)
(26,51,2)
(10,51,2)
(46,64,2)
(33,2,2)
(1,5,2)
(39,64,2)
(34,51,2)
(44,51,2)
(27,57,2)
(43,9,2)
(56,51,2)
(20,51,2)
(28,51,2)
(6,2,2)
(58,33,2)
(51,13,2)
(55,51,2)
(50,33,2)
(47,64,2)
(16,51,2)
(13,39,2)
(66,64,2)
(55,66,2)
(9,51,2)
(66,51,2)
(18,51,2)
(23,51,2)
(53,51,2)
(40,51,2)
(22,64,2)
(12,51,2)
(13,33,2)
(9,64,2)
(8,51,2)
(13,2,2)
(42,51,2)
(57,11,2)
(11,64,2)
(13,37,2)
(60,64,2)
(20,2,2)
(45,41,2)
(19,51,2)
(36,51,2)
(16,64,2)
(52,51,2)
(5,47,2)
(2,67,2)
(33,57,2)
(38,51,2)
(45,31,2)
(1,46,2)
(35,51,2)
(22,51,2)
(39,33,2)
(6,51,2)
(31,33,2)
(15,51,2)
(37,1,2)
-----------------------------------
(0,strage)
(1,img->pixelwidth * img->pixelheight * 4)
(2,*strage = strage_create()
(3,img)
(4,4)
(5,img->pixelheight * 4)
(6,img->strage = strage)
(7,)
(8,hbmp)
(9,img->hbmp)
(10,NULL)
(11,img->hdc)
(12,NULL)
(13,strage_write(strage, img->pixels, size)
(14,if (!img->hdc)
(15,strage)
(16,img->pixels)
(17,size)
(18,hbmp)
(19,img->hdc = NULL)
(20,strage_destroy(strage)
(21,img)
(22,img->hbmp)
(23,img->hdc)
(24,hdc)
(25,strage)
(26,img->pixels = NULL)
(27,strage)
(28,hdc)
(29,strage)
(30,pixelheight)
(31,return;)
(32,)
(33,!strage)
(34,img)
(35,strage)
(36,pixels)
(37,size = img->pixelwidth * img->pixelheight * 4)
(38,img)
(39,img->pixels)
(40,NULL)
(41,return;)
(42,hdc)
(43,DeleteObject(img->hbmp)
(44,return;)
(45,RET)
(46,img->pixelwidth)
(47,img->pixelheight)
(48,if (!strage_write(strage, img->pixels, size)
(49,img)
(50,pixels)
(51,!strage_write(strage, img->pixels, size)
(52,img)
(53,img->hbmp = NULL)
(54,size)
(55,DeleteDC(img->hdc)
(56,img)
(57,!img->hdc)
(58,img)
(59,img)
(60,img->strage)
(61,img)
(62,size)
(63,if (!strage)
(64,imglist *img)
(65,strage)
(66,img->hdc)
(67,strage_create()
(68,pixelwidth)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^