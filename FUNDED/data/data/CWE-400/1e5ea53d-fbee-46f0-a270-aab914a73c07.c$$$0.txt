-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink(size_t data)
{
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
41,42
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,14,16,17,21,24,26,31,34,36,39,42,45,46,50,52,57,59,63,65,67,71,73,77,79,84,85
-----computeFrom-----
19,20
19,21
29,30
29,31
40,41
40,42
48,49
48,50
-----guardedBy-----
26,67
21,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink(size_t data){    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(14,26,0)
(18,36,0)
(16,4,0)
(1,27,0)
(1,4,0)
(26,4,0)
(11,4,0)
(23,13,0)
(20,1,0)
(4,27,0)
(7,9,0)
(5,13,0)
(2,35,0)
(12,7,0)
(9,7,0)
(17,26,0)
(21,18,0)
(8,10,0)
(3,27,0)
(7,4,0)
(6,5,0)
(10,27,0)
(10,4,0)
(4,7,0)
(16,27,0)
(37,32,0)
(30,16,0)
(34,0,0)
(0,15,0)
(32,24,0)
(25,34,0)
(19,32,0)
(9,5,0)
(13,5,0)
(29,18,0)
(31,37,0)
(5,9,0)
(5,24,0)
(33,2,0)
(28,16,0)
(0,34,0)
(7,12,0)
(32,37,0)
(5,24,1)
(25,26,1)
(6,11,1)
(13,23,1)
(31,19,1)
(9,5,1)
(7,12,1)
(4,7,1)
(22,2,1)
(8,16,1)
(0,34,1)
(26,4,1)
(5,13,1)
(2,33,1)
(28,30,1)
(20,10,1)
(10,8,1)
(1,4,1)
(23,6,1)
(32,24,1)
(7,9,1)
(30,26,1)
(11,32,1)
(16,28,1)
(14,4,1)
(17,14,1)
(30,0,1)
(32,37,1)
(34,25,1)
(22,1,1)
(1,20,1)
(16,4,1)
(26,17,1)
(10,4,1)
(33,32,1)
(37,31,1)
(13,32,2)
(28,32,2)
(7,32,2)
(5,24,2)
(4,7,2)
(0,34,2)
(2,32,2)
(1,32,2)
(17,32,2)
(34,26,2)
(6,32,2)
(30,32,2)
(25,26,2)
(32,37,2)
(7,9,2)
(8,32,2)
(5,32,2)
(5,13,2)
(32,24,2)
(20,32,2)
(7,12,2)
(14,32,2)
(16,32,2)
(11,32,2)
(0,26,2)
(16,4,2)
(4,32,2)
(9,5,2)
(10,4,2)
(1,4,2)
(26,4,2)
(26,32,2)
(33,32,2)
(23,32,2)
(9,32,2)
(10,32,2)
-----------------------------------
(0,exit(-1)
(1,free(myString)
(2,printLine("Input is less than the length of the source string")
(3,if (myString == NULL)
(4,myString = (char *)
(5,data*sizeof(char)
(6,data)
(7,(char *)
(8,myString)
(9,malloc(data*sizeof(char)
(10,printLine(myString)
(11,myString)
(12,char *)
(13,sizeof(char)
(14,myString)
(15,)
(16,strcpy(myString, HELLO_STRING)
(17,NULL)
(18,)
(19,data)
(20,myString)
(21,myString)
(22,RET)
(23,char)
(24,size_t data)
(25,1)
(26,myString == NULL)
(27,)
(28,HELLO_STRING)
(29,if (data > strlen(HELLO_STRING)
(30,myString)
(31,HELLO_STRING)
(32,data > strlen(HELLO_STRING)
(33,"Input is less than the length of the source string")
(34,-1)
(35,)
(36,)
(37,strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^