-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67b_goodB2GSink(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType myStruct)
{
    size_t data = myStruct.structFirst;
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
40,41
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
56,58
57,58
59,60
60,61
60,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,7,9,14,16,20,21,25,27,28,33,36,38,41,42,47,50,52,55,58,61,62,66,68,73,75,79,81,83,87,89,93,95,100,101
-----computeFrom-----
30,31
30,32
31,32
31,33
39,40
39,41
45,46
45,47
56,57
56,58
64,65
64,66
-----guardedBy-----
38,83
41,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67b_goodB2GSink(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType myStruct){    size_t data = myStruct.structFirst;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67b_goodB2GSink(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType myStruct)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67b_goodB2GSink
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType myStruct
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType
myStruct
myStruct
{    size_t data = myStruct.structFirst;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = myStruct.structFirst;
size_t data = myStruct.structFirst;
size_t
size_t
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(39,3,0)
(40,10,0)
(3,15,0)
(38,2,0)
(10,2,0)
(0,27,0)
(47,39,0)
(13,0,0)
(46,29,0)
(3,39,0)
(16,12,0)
(18,25,0)
(7,23,0)
(7,12,0)
(34,28,0)
(27,39,0)
(37,3,0)
(1,10,0)
(20,27,0)
(12,2,0)
(47,26,0)
(36,11,0)
(32,12,0)
(44,32,0)
(30,2,0)
(4,38,0)
(14,27,0)
(12,7,0)
(25,12,0)
(43,42,0)
(9,11,0)
(38,12,0)
(7,20,0)
(28,8,0)
(45,42,0)
(10,12,0)
(21,47,0)
(19,9,0)
(6,46,0)
(22,3,0)
(42,45,0)
(20,7,0)
(23,7,0)
(27,0,0)
(33,29,0)
(45,5,0)
(27,20,0)
(26,11,0)
(24,39,0)
(11,39,0)
(26,47,0)
(11,26,0)
(11,9,0)
(31,25,0)
(32,2,0)
(35,46,0)
(41,47,0)
(39,29,0)
(38,12,1)
(3,22,1)
(31,18,1)
(42,43,1)
(17,38,1)
(17,28,1)
(4,32,1)
(47,39,1)
(7,20,1)
(43,25,1)
(20,27,1)
(11,39,1)
(39,3,1)
(25,31,1)
(21,41,1)
(41,11,1)
(9,19,1)
(19,36,1)
(34,26,1)
(26,47,1)
(14,16,1)
(40,1,1)
(18,12,1)
(28,34,1)
(25,12,1)
(45,42,1)
(47,21,1)
(32,12,1)
(44,10,1)
(13,14,1)
(22,37,1)
(27,0,1)
(16,26,1)
(37,24,1)
(10,40,1)
(10,12,1)
(1,45,1)
(1,25,1)
(38,4,1)
(3,15,1)
(27,39,1)
(36,39,1)
(12,7,1)
(11,9,1)
(32,44,1)
(0,13,1)
(26,11,1)
(7,23,1)
(16,26,2)
(11,9,2)
(10,26,2)
(18,26,2)
(42,25,2)
(28,26,2)
(7,26,2)
(26,47,2)
(26,11,2)
(44,26,2)
(31,26,2)
(21,11,2)
(47,11,2)
(41,11,2)
(40,26,2)
(7,20,2)
(39,3,2)
(47,39,2)
(32,26,2)
(25,26,2)
(20,26,2)
(38,26,2)
(4,26,2)
(14,26,2)
(12,26,2)
(34,26,2)
(27,39,2)
(27,26,2)
(0,26,2)
(25,12,2)
(1,26,2)
(38,12,2)
(45,25,2)
(45,42,2)
(27,0,2)
(11,39,2)
(13,26,2)
(7,23,2)
(32,12,2)
(20,27,2)
(12,7,2)
(43,25,2)
(10,12,2)
(3,15,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,myString)
(2,)
(3,myStruct.structFirst)
(4,myString)
(5,)
(6,myString)
(7,(wchar_t *)
(8,)
(9,wcslen(HELLO_STRING)
(10,wcscpy(myString, HELLO_STRING)
(11,data > wcslen(HELLO_STRING)
(12,myString = (wchar_t *)
(13,wchar_t)
(14,data)
(15,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_67_structType myStruct)
(16,myString)
(17,RET)
(18,myString)
(19,HELLO_STRING)
(20,malloc(data*sizeof(wchar_t)
(21,100)
(22,structFirst)
(23,wchar_t *)
(24,data)
(25,myString == NULL)
(26,data > wcslen(HELLO_STRING)
(27,data*sizeof(wchar_t)
(28,printLine("Input is less than the length of the source string or too large")
(29,)
(30,if (myString == NULL)
(31,NULL)
(32,printWLine(myString)
(33,data)
(34,"Input is less than the length of the source string or too large")
(35,if (data > wcslen(HELLO_STRING)
(36,data)
(37,myStruct)
(38,free(myString)
(39,data = myStruct.structFirst)
(40,HELLO_STRING)
(41,data)
(42,-1)
(43,1)
(44,myString)
(45,exit(-1)
(46,)
(47,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^