-----label-----
0
-----code-----
void
Tk_PhotoBlank(
    Tk_PhotoHandle handle)	/* Handle for the image to be blanked. */
{
    PhotoMaster *masterPtr = (PhotoMaster *) handle;
    PhotoInstance *instancePtr;

    masterPtr->ditherX = masterPtr->ditherY = 0;
    masterPtr->flags = 0;

    /*
     * The image has valid data nowhere.
     */

    if (masterPtr->validRegion != NULL) {
	TkDestroyRegion(masterPtr->validRegion);
    }
    masterPtr->validRegion = TkCreateRegion();

    /*
     * Clear out the 32-bit pixel storage array. Clear out the dithering error
     * arrays for each instance.
     */

    memset(masterPtr->pix32, 0,
	    ((size_t) masterPtr->width * masterPtr->height * 4));
    for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;
	    instancePtr = instancePtr->nextPtr) {
	if (instancePtr->error) {
	    memset(instancePtr->error, 0,
		    ((size_t) masterPtr->width * masterPtr->height
		    * 3 * sizeof(schar)));
	}
    }

    /*
     * Tell the core image code that this image has changed.
     */

    Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,
	    masterPtr->height, masterPtr->width, masterPtr->height);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
46,47
47,48
47,49
48,49
48,50
49,50
53,54
53,55
54,55
54,56
55,56
55,57
56,57
59,60
61,62
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
71,72
71,73
72,73
72,74
73,74
76,77
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
100,101
100,102
101,102
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
128,130
129,130
132,133
133,134
134,135
134,136
134,137
134,138
135,136
137,138
137,139
138,139
142,143
143,144
143,145
144,145
144,146
145,146
145,147
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
155,156
155,157
156,157
160,161
161,162
161,163
162,163
165,166
166,167
166,168
166,169
166,170
166,171
166,172
166,173
166,174
167,168
169,170
169,171
170,171
175,176
175,177
176,177
179,180
179,181
180,181
183,184
183,185
184,185
187,188
187,189
188,189
-----nextToken-----
2,4,7,9,14,16,17,22,24,26,30,32,33,38,39,43,44,45,50,51,52,57,58,60,65,68,69,74,75,78,82,85,86,87,94,95,98,99,102,103,104,109,112,113,116,118,121,124,125,130,131,136,139,140,141,149,150,153,154,157,158,159,163,164,168,171,172,173,174,177,178,181,182,185,186,189,190
-----computeFrom-----
35,36
35,37
40,41
40,42
47,48
47,49
54,55
54,56
71,72
71,73
89,90
89,91
90,91
90,92
107,108
107,109
114,115
114,116
119,120
119,121
143,144
143,145
144,145
144,146
145,146
145,147
-----guardedBy-----
57,68
58,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
voidTk_PhotoBlank(    Tk_PhotoHandle handle)	/* Handle for the image to be blanked. */{    PhotoMaster *masterPtr = (PhotoMaster *) handle;    PhotoInstance *instancePtr;    masterPtr->ditherX = masterPtr->ditherY = 0;    masterPtr->flags = 0;    /*     * The image has valid data nowhere.     */    if (masterPtr->validRegion != NULL) {	TkDestroyRegion(masterPtr->validRegion);    }    masterPtr->validRegion = TkCreateRegion();    /*     * Clear out the 32-bit pixel storage array. Clear out the dithering error     * arrays for each instance.     */    memset(masterPtr->pix32, 0,	    ((size_t) masterPtr->width * masterPtr->height * 4));    for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;	    instancePtr = instancePtr->nextPtr) {	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }    /*     * Tell the core image code that this image has changed.     */    Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height);}
void
Tk_PhotoBlank(    Tk_PhotoHandle handle)
Tk_PhotoBlank
Tk_PhotoHandle handle
Tk_PhotoHandle
Tk_PhotoHandle
handle
handle
{    PhotoMaster *masterPtr = (PhotoMaster *) handle;    PhotoInstance *instancePtr;    masterPtr->ditherX = masterPtr->ditherY = 0;    masterPtr->flags = 0;    /*     * The image has valid data nowhere.     */    if (masterPtr->validRegion != NULL) {	TkDestroyRegion(masterPtr->validRegion);    }    masterPtr->validRegion = TkCreateRegion();    /*     * Clear out the 32-bit pixel storage array. Clear out the dithering error     * arrays for each instance.     */    memset(masterPtr->pix32, 0,	    ((size_t) masterPtr->width * masterPtr->height * 4));    for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;	    instancePtr = instancePtr->nextPtr) {	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }    /*     * Tell the core image code that this image has changed.     */    Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height);}
PhotoMaster *masterPtr = (PhotoMaster *) handle;
PhotoMaster *masterPtr = (PhotoMaster *) handle;
PhotoMaster
PhotoMaster
*masterPtr = (PhotoMaster *) handle
*
masterPtr
= (PhotoMaster *) handle
(PhotoMaster *) handle
PhotoMaster *
PhotoMaster
PhotoMaster
*
*
handle
handle
PhotoInstance *instancePtr;
PhotoInstance *instancePtr;
PhotoInstance
PhotoInstance
*instancePtr
*
instancePtr
masterPtr->ditherX = masterPtr->ditherY = 0;
masterPtr->ditherX = masterPtr->ditherY = 0
masterPtr->ditherX
masterPtr
masterPtr
ditherX
masterPtr->ditherY = 0
masterPtr->ditherY
masterPtr
masterPtr
ditherY
0
masterPtr->flags = 0;
masterPtr->flags = 0
masterPtr->flags
masterPtr
masterPtr
flags
0
if (masterPtr->validRegion != NULL) {	TkDestroyRegion(masterPtr->validRegion);    }
masterPtr->validRegion != NULL
masterPtr->validRegion
masterPtr
masterPtr
validRegion
NULL
NULL
{	TkDestroyRegion(masterPtr->validRegion);    }
TkDestroyRegion(masterPtr->validRegion);
TkDestroyRegion(masterPtr->validRegion)
TkDestroyRegion
TkDestroyRegion
masterPtr->validRegion
masterPtr
masterPtr
validRegion
masterPtr->validRegion = TkCreateRegion();
masterPtr->validRegion = TkCreateRegion()
masterPtr->validRegion
masterPtr
masterPtr
validRegion
TkCreateRegion()
TkCreateRegion
TkCreateRegion
memset(masterPtr->pix32, 0,	    ((size_t) masterPtr->width * masterPtr->height * 4));
memset(masterPtr->pix32, 0,	    ((size_t) masterPtr->width * masterPtr->height * 4))
memset
memset
masterPtr->pix32
masterPtr
masterPtr
pix32
0
((size_t) masterPtr->width * masterPtr->height * 4)
(size_t) masterPtr->width * masterPtr->height * 4
(size_t) masterPtr->width * masterPtr->height
(size_t) masterPtr->width
size_t
size_t
size_t

masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
4
for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;	    instancePtr = instancePtr->nextPtr) {	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }
instancePtr = masterPtr->instancePtr;
instancePtr = masterPtr->instancePtr
instancePtr
instancePtr
masterPtr->instancePtr
masterPtr
masterPtr
instancePtr
instancePtr != NULL
instancePtr
instancePtr
NULL
NULL
instancePtr = instancePtr->nextPtr
instancePtr
instancePtr
instancePtr->nextPtr
instancePtr
instancePtr
nextPtr
{	if (instancePtr->error) {	    memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}    }
if (instancePtr->error) {	    memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}
instancePtr->error
instancePtr
instancePtr
error
{	    memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));	}
memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)));
memset(instancePtr->error, 0,		    ((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)))
memset
memset
instancePtr->error
instancePtr
instancePtr
error
0
((size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar))
(size_t) masterPtr->width * masterPtr->height		    * 3 * sizeof(schar)
(size_t) masterPtr->width * masterPtr->height		    * 3
(size_t) masterPtr->width * masterPtr->height
(size_t) masterPtr->width
size_t
size_t
size_t

masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
3
sizeof(schar)
schar
schar
schar

Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height);
Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,	    masterPtr->height, masterPtr->width, masterPtr->height)
Tk_ImageChanged
Tk_ImageChanged
masterPtr->tkMaster
masterPtr
masterPtr
tkMaster
0
0
masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
masterPtr->width
masterPtr
masterPtr
width
masterPtr->height
masterPtr
masterPtr
height
-----joern-----
(80,43,0)
(28,56,0)
(81,29,0)
(43,80,0)
(17,42,0)
(36,39,0)
(13,8,0)
(10,17,0)
(92,27,0)
(96,16,0)
(4,106,0)
(62,65,0)
(106,17,0)
(103,59,0)
(108,23,0)
(49,10,0)
(42,17,0)
(15,32,0)
(56,28,0)
(54,104,0)
(31,110,0)
(40,9,0)
(87,29,0)
(20,107,0)
(5,104,0)
(29,81,0)
(3,61,0)
(110,41,0)
(104,39,0)
(79,110,0)
(80,41,0)
(22,106,0)
(44,80,0)
(73,42,0)
(34,81,0)
(14,105,0)
(36,61,0)
(82,48,0)
(52,60,0)
(41,16,0)
(69,62,0)
(60,52,0)
(92,41,0)
(106,41,0)
(89,52,0)
(55,17,0)
(23,108,0)
(48,39,0)
(55,41,0)
(32,75,0)
(38,80,0)
(29,60,0)
(6,41,0)
(108,56,0)
(18,61,0)
(62,41,0)
(57,17,0)
(3,39,0)
(48,61,0)
(11,108,0)
(27,56,0)
(97,95,0)
(51,16,0)
(110,97,0)
(33,26,0)
(2,3,0)
(17,57,0)
(39,85,0)
(17,55,0)
(25,60,0)
(9,41,0)
(107,16,0)
(104,61,0)
(70,32,0)
(26,87,0)
(6,95,0)
(108,11,0)
(60,29,0)
(67,17,0)
(88,11,0)
(32,70,0)
(91,28,0)
(10,41,0)
(97,16,0)
(58,95,0)
(64,27,0)
(85,39,0)
(86,85,0)
(52,89,0)
(3,25,0)
(84,48,0)
(12,16,0)
(21,6,0)
(57,41,0)
(71,81,0)
(90,43,0)
(30,36,0)
(7,55,0)
(68,10,0)
(14,16,0)
(112,20,0)
(102,59,0)
(11,41,0)
(20,41,0)
(109,85,0)
(9,14,0)
(101,9,0)
(29,87,0)
(52,8,0)
(32,41,0)
(66,99,0)
(47,39,0)
(93,36,0)
(25,72,0)
(37,25,0)
(98,92,0)
(1,6,0)
(8,52,0)
(111,107,0)
(0,42,0)
(19,92,0)
(17,10,0)
(41,32,0)
(83,57,0)
(74,87,0)
(105,14,0)
(100,3,0)
(56,27,0)
(56,108,0)
(95,97,0)
(76,11,0)
(25,3,0)
(45,62,0)
(46,41,0)
(28,16,0)
(42,41,0)
(94,57,0)
(87,26,0)
(17,106,0)
(17,16,0)
(65,77,0)
(60,25,0)
(61,36,0)
(59,41,0)
(59,28,0)
(81,41,0)
(27,92,0)
(28,59,0)
(24,20,0)
(8,41,0)
(50,17,0)
(65,62,0)
(78,55,0)
(53,8,0)
(85,41,0)
(35,16,0)
(48,39,1)
(106,41,1)
(11,41,1)
(65,62,1)
(44,38,1)
(63,17,1)
(57,83,1)
(18,104,1)
(8,53,1)
(79,31,1)
(17,55,1)
(62,69,1)
(55,78,1)
(47,28,1)
(108,23,1)
(3,39,1)
(64,92,1)
(39,85,1)
(85,41,1)
(5,48,1)
(78,7,1)
(98,108,1)
(18,25,1)
(87,26,1)
(42,73,1)
(13,37,1)
(105,9,1)
(19,98,1)
(2,104,1)
(106,4,1)
(62,41,1)
(43,90,1)
(86,47,1)
(56,108,1)
(59,102,1)
(17,10,1)
(9,101,1)
(52,89,1)
(6,41,1)
(80,41,1)
(48,82,1)
(101,40,1)
(9,41,1)
(31,41,1)
(103,14,1)
(4,22,1)
(104,54,1)
(3,100,1)
(94,10,1)
(60,52,1)
(17,42,1)
(42,41,1)
(60,29,1)
(26,33,1)
(22,57,1)
(84,61,1)
(104,39,1)
(33,74,1)
(6,21,1)
(76,88,1)
(30,93,1)
(17,106,1)
(32,15,1)
(45,43,1)
(61,36,1)
(32,70,1)
(104,61,1)
(56,27,1)
(40,65,1)
(54,5,1)
(82,84,1)
(48,61,1)
(11,76,1)
(111,20,1)
(34,52,1)
(112,97,1)
(73,0,1)
(15,46,1)
(55,41,1)
(69,45,1)
(17,57,1)
(25,3,1)
(21,1,1)
(41,32,1)
(29,81,1)
(110,79,1)
(90,80,1)
(25,60,1)
(7,48,1)
(52,8,1)
(107,111,1)
(20,41,1)
(27,92,1)
(85,109,1)
(109,86,1)
(57,41,1)
(8,41,1)
(92,41,1)
(29,87,1)
(110,41,1)
(3,61,1)
(0,106,1)
(43,80,1)
(97,95,1)
(37,3,1)
(81,41,1)
(50,67,1)
(81,71,1)
(53,13,1)
(59,41,1)
(40,43,1)
(49,50,1)
(93,18,1)
(84,39,1)
(10,68,1)
(24,112,1)
(95,58,1)
(83,94,1)
(88,91,1)
(67,55,1)
(32,75,1)
(36,61,1)
(92,19,1)
(58,6,1)
(28,59,1)
(28,56,1)
(91,59,1)
(74,81,1)
(80,44,1)
(36,39,1)
(14,105,1)
(38,107,1)
(10,41,1)
(108,11,1)
(27,64,1)
(100,2,1)
(71,34,1)
(1,110,1)
(102,103,1)
(20,24,1)
(68,49,1)
(36,30,1)
(28,56,2)
(32,75,2)
(65,43,2)
(52,8,2)
(26,104,2)
(17,57,2)
(29,104,2)
(36,39,2)
(6,41,2)
(3,61,2)
(60,52,2)
(34,104,2)
(97,95,2)
(11,41,2)
(61,48,2)
(48,61,2)
(92,41,2)
(59,41,2)
(74,104,2)
(20,41,2)
(48,48,2)
(108,11,2)
(52,89,2)
(5,48,2)
(55,41,2)
(65,62,2)
(106,41,2)
(62,43,2)
(52,104,2)
(45,43,2)
(54,48,2)
(43,80,2)
(62,41,2)
(57,41,2)
(42,41,2)
(14,105,2)
(3,104,2)
(85,41,2)
(25,104,2)
(108,23,2)
(87,104,2)
(28,59,2)
(41,32,2)
(13,104,2)
(25,60,2)
(8,41,2)
(25,3,2)
(93,48,2)
(81,104,2)
(110,41,2)
(29,87,2)
(17,106,2)
(3,39,2)
(104,39,2)
(10,41,2)
(30,48,2)
(84,48,2)
(48,39,2)
(33,104,2)
(17,55,2)
(60,29,2)
(82,48,2)
(29,81,2)
(36,61,2)
(56,108,2)
(87,26,2)
(32,70,2)
(17,42,2)
(80,41,2)
(100,104,2)
(36,48,2)
(56,27,2)
(39,85,2)
(37,104,2)
(17,10,2)
(9,41,2)
(18,48,2)
(60,104,2)
(27,92,2)
(81,41,2)
(71,104,2)
(104,48,2)
(8,104,2)
(61,36,2)
(2,104,2)
(69,43,2)
(104,61,2)
(53,104,2)
-----------------------------------
(0,masterPtr)
(1,masterPtr)
(2,instancePtr)
(3,instancePtr->error)
(4,width)
(5,instancePtr)
(6,masterPtr->ditherY)
(7,masterPtr)
(8,masterPtr->width)
(9,masterPtr->validRegion)
(10,masterPtr->width)
(11,masterPtr->width)
(12,if (masterPtr->validRegion != NULL)
(13,masterPtr)
(14,masterPtr->validRegion = TkCreateRegion()
(15,handle)
(16,)
(17,Tk_ImageChanged(masterPtr->tkMaster, 0, 0, masterPtr->width,\n\\n\\t    masterPtr->height, masterPtr->width, masterPtr->height)
(18,instancePtr)
(19,height)
(20,masterPtr->flags)
(21,ditherY)
(22,masterPtr)
(23,size_t)
(24,flags)
(25,memset(instancePtr->error, 0,\n\\n\\t\\t    ((size_t)
(26,sizeof(schar)
(27,masterPtr->height * 4)
(28,memset(masterPtr->pix32, 0,\n\\n\\t    ((size_t)
(29,masterPtr->height\n\\n\\t\\t    * 3 * sizeof(schar)
(30,nextPtr)
(31,masterPtr)
(32,(PhotoMaster *)
(33,schar)
(34,masterPtr)
(35,for (instancePtr = masterPtr->instancePtr; instancePtr != NULL;\n\\n\\t    instancePtr = instancePtr->nextPtr)
(36,instancePtr->nextPtr)
(37,0)
(38,masterPtr)
(39,instancePtr = masterPtr->instancePtr)
(40,masterPtr)
(41,*masterPtr = (PhotoMaster *)
(42,masterPtr->height)
(43,masterPtr->validRegion != NULL)
(44,validRegion)
(45,masterPtr)
(46,masterPtr)
(47,instancePtr)
(48,instancePtr != NULL)
(49,masterPtr)
(50,0)
(51,instancePtr)
(52,(size_t)
(53,width)
(54,error)
(55,masterPtr->tkMaster)
(56,(size_t)
(57,masterPtr->height)
(58,0)
(59,masterPtr->pix32)
(60,(size_t)
(61,instancePtr = instancePtr->nextPtr)
(62,masterPtr->validRegion)
(63,RET)
(64,4)
(65,TkDestroyRegion(masterPtr->validRegion)
(66,if (instancePtr->error)
(67,0)
(68,width)
(69,validRegion)
(70,PhotoMaster *)
(71,height)
(72,)
(73,height)
(74,3)
(75,Tk_PhotoHandle handle)
(76,width)
(77,)
(78,tkMaster)
(79,ditherX)
(80,masterPtr->validRegion)
(81,masterPtr->height)
(82,NULL)
(83,height)
(84,instancePtr)
(85,masterPtr->instancePtr)
(86,masterPtr)
(87,3 * sizeof(schar)
(88,masterPtr)
(89,size_t)
(90,NULL)
(91,0)
(92,masterPtr->height)
(93,instancePtr)
(94,masterPtr)
(95,masterPtr->ditherY = 0)
(96,masterPtr)
(97,masterPtr->ditherX = masterPtr->ditherY = 0)
(98,masterPtr)
(99,)
(100,error)
(101,validRegion)
(102,pix32)
(103,masterPtr)
(104,instancePtr->error)
(105,TkCreateRegion()
(106,masterPtr->width)
(107,masterPtr->flags = 0)
(108,(size_t)
(109,instancePtr)
(110,masterPtr->ditherX)
(111,0)
(112,masterPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^