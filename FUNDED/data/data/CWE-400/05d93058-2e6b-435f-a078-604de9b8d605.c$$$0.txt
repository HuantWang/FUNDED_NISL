-----label-----
1
-----code-----
static void
write_rc_datablock (FILE *e, rc_uint_type length, const bfd_byte *data, int has_next,
		    int hasblock, int show_comment)
{
  int plen;

  if (hasblock)
    fprintf (e, "BEGIN\n");

  if (show_comment == -1)
	  {
      if (test_rc_datablock_text(length, data))
	{
	  rc_uint_type i, c;
	  for (i = 0; i < length;)
	    {
	      indent (e, 2);
	      fprintf (e, "\"");

	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)
		;
	      if (i < length && data[i] == '\n')
		++i, ++c;
	      ascii_print (e, (const char *) &data[i - c], c);
	    fprintf (e, "\"");
	      if (i < length)
		fprintf (e, "\n");
	    }

	  if (i == 0)
	      {
	      indent (e, 2);
	      fprintf (e, "\"\"");
	      }
	  if (has_next)
	    fprintf (e, ",");
	  fprintf (e, "\n");
	  if (hasblock)
	    fprintf (e, "END\n");
	  return;
	  }
      if (test_rc_datablock_unicode (length, data))
	{
	  rc_uint_type i, c;
	  for (i = 0; i < length;)
	    {
	      const unichar *u;

	      u = (const unichar *) &data[i];
	      indent (e, 2);
	  fprintf (e, "L\"");

	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)
		;
	      if (i < length && u[c] == '\n')
		i += 2, ++c;
	      unicode_print (e, u, c);
	  fprintf (e, "\"");
	      if (i < length)
		fprintf (e, "\n");
	    }

	  if (i == 0)
	  {
	      indent (e, 2);
	      fprintf (e, "L\"\"");
	    }
	  if (has_next)
	    fprintf (e, ",");
	  fprintf (e, "\n");
	  if (hasblock)
	    fprintf (e, "END\n");
	  return;
	}

      show_comment = 0;
    }

  if (length != 0)
	      {
      rc_uint_type i, max_row;
      int first = 1;

      max_row = (show_comment ? 4 : 8);
      indent (e, 2);
      for (i = 0; i + 3 < length;)
		  {
	  rc_uint_type k;
	  rc_uint_type comment_start;

	  comment_start = i;

	  if (! first)
	    indent (e, 2);

	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)
		      {
	      if (k == 0)
		plen  = fprintf (e, "0x%lxL",
				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));
			else
		plen = fprintf (e, " 0x%lxL",
				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;
	      if (has_next || (i + 4) < length)
			  {
		  if (plen>0 && plen < 11)
		    indent (e, 11 - plen);
		  fprintf (e, ",");
			  }
		      }
	  if (show_comment)
	    {
	      fprintf (e, "\t/* ");
	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);
	      fprintf (e, ".  */");
		  }
		fprintf (e, "\n");
		first = 0;
	      }

      if (i + 1 < length)
	      {
		if (! first)
	    indent (e, 2);
	  plen = fprintf (e, "0x%x",
	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));
	  if (has_next || i + 2 < length)
		  {
	      if (plen > 0 && plen < 11)
		indent (e, 11 - plen);
	      fprintf (e, ",");
		      }
	  if (show_comment)
	    {
	      fprintf (e, "\t/* ");
	      ascii_print (e, (const char *) &data[i], 2);
	      fprintf (e, ".  */");
		  }
		fprintf (e, "\n");
		i += 2;
		first = 0;
	      }

      if (i < length)
	      {
		if (! first)
	    indent (e, 2);
	  fprintf (e, "\"");
	  ascii_print (e, (const char *) &data[i], 1);
	  fprintf (e, "\"");
	  if (has_next)
		  fprintf (e, ",");
		fprintf (e, "\n");
		first = 0;
	      }
    }
  if (hasblock)
    fprintf (e, "END\n");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
24,25
26,27
26,28
28,29
30,31
30,32
32,33
34,35
34,36
34,37
34,38
34,39
35,36
36,37
36,38
38,39
40,41
40,42
41,42
43,44
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
56,59
57,58
57,59
58,59
58,60
58,61
59,60
61,62
63,64
65,66
65,67
65,68
65,69
65,70
65,71
65,72
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
74,76
74,77
75,76
76,77
76,78
77,78
80,81
80,82
81,82
83,84
85,86
85,87
85,88
85,89
85,90
85,91
85,92
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
94,97
95,96
97,98
100,101
100,102
100,103
100,104
101,102
102,103
102,104
103,104
106,107
106,108
107,108
107,109
108,109
108,110
109,110
111,112
113,114
113,115
114,115
117,118
117,119
118,119
118,120
119,120
121,122
124,125
124,126
125,126
126,127
128,129
129,130
132,133
132,134
133,134
133,135
134,135
134,136
135,136
137,138
139,140
139,141
140,141
140,142
141,142
143,144
146,147
147,148
147,149
148,149
149,150
151,152
152,153
154,155
155,156
155,157
155,158
155,159
156,157
158,159
160,161
160,162
161,162
161,163
163,164
165,166
166,167
166,168
167,168
169,170
169,171
170,171
172,173
174,175
176,177
177,178
177,179
177,180
178,179
180,181
183,184
183,185
184,185
184,186
185,186
187,188
189,190
190,191
190,192
190,193
191,192
193,194
196,197
196,198
197,198
197,199
198,199
201,202
201,203
202,203
203,204
203,205
203,206
204,205
206,207
209,210
210,211
210,212
210,213
211,212
213,214
216,217
216,218
217,218
219,220
220,221
220,222
220,223
221,222
223,224
226,227
227,228
227,229
227,230
228,229
230,231
233,234
233,235
234,235
236,237
237,238
237,239
237,240
238,239
240,241
244,245
244,246
245,246
245,247
245,248
246,247
248,249
250,251
252,253
252,254
252,255
252,256
252,257
252,258
252,259
253,254
254,255
254,256
254,257
255,256
257,258
259,260
261,262
261,263
261,264
262,263
263,264
263,265
264,265
267,268
267,269
268,269
270,271
272,273
272,274
272,275
272,276
272,277
272,278
272,279
272,280
272,281
273,274
274,275
274,276
275,276
277,278
277,279
280,281
281,282
281,283
282,283
284,285
284,286
285,286
285,287
286,287
288,289
290,291
291,292
291,293
292,293
294,295
296,297
297,298
297,299
297,300
298,299
300,301
303,304
304,305
304,306
304,307
305,306
307,308
310,311
310,312
310,313
310,314
311,312
312,313
312,314
313,314
316,317
316,318
317,318
317,319
318,319
318,320
319,320
321,322
323,324
323,325
324,325
327,328
327,329
328,329
328,330
329,330
331,332
334,335
334,336
335,336
336,337
338,339
338,340
339,340
343,344
343,345
344,345
344,346
345,346
345,347
346,347
348,349
350,351
350,352
351,352
351,353
352,353
354,355
357,358
358,359
358,360
359,360
359,361
360,361
363,364
364,365
366,367
367,368
367,369
367,370
367,371
368,369
370,371
372,373
374,375
376,377
377,378
377,379
377,380
378,379
380,381
383,384
383,385
384,385
384,386
385,386
387,388
389,390
390,391
390,392
390,393
391,392
393,394
396,397
396,398
397,398
397,399
398,399
401,402
401,403
402,403
403,404
403,405
403,406
404,405
406,407
409,410
410,411
410,412
410,413
411,412
413,414
416,417
416,418
417,418
419,420
420,421
420,422
420,423
421,422
423,424
426,427
427,428
427,429
427,430
428,429
430,431
433,434
433,435
434,435
436,437
437,438
437,439
437,440
438,439
440,441
444,445
445,446
445,447
446,447
449,450
449,451
450,451
450,452
451,452
454,455
454,456
454,457
454,458
454,459
454,460
454,461
455,456
456,457
456,458
456,459
457,458
459,460
461,462
463,464
464,465
464,466
466,467
466,468
468,469
470,471
471,472
471,473
472,473
474,475
475,476
475,477
475,478
476,477
480,481
481,482
481,483
481,484
482,483
484,485
487,488
487,489
487,490
488,489
489,490
489,491
490,491
493,494
493,495
494,495
494,496
495,496
498,499
500,501
500,502
500,503
500,504
500,505
500,506
500,507
500,508
501,502
502,503
502,504
503,504
505,506
507,508
508,509
508,510
509,510
511,512
513,514
514,515
514,516
515,516
517,518
519,520
519,521
520,521
521,522
523,524
524,525
524,526
524,527
525,526
527,528
530,531
530,532
530,533
530,534
531,532
532,533
532,534
533,534
536,537
536,538
537,538
537,539
538,539
540,541
542,543
542,544
543,544
543,545
544,545
547,548
549,550
549,551
550,551
551,552
553,554
553,555
554,555
557,558
557,559
558,559
558,560
558,561
559,560
559,561
560,561
563,564
564,565
564,566
565,566
567,568
567,569
567,570
567,571
568,569
570,571
573,574
573,575
574,575
574,576
577,578
577,579
577,580
577,581
578,579
580,581
581,582
583,584
583,585
584,585
586,587
588,589
588,590
589,590
591,592
593,594
594,595
594,596
595,596
597,598
597,599
598,599
598,600
598,601
598,602
599,600
601,602
604,605
604,606
605,606
605,607
608,609
608,610
608,611
608,612
609,610
611,612
612,613
614,615
614,616
615,616
617,618
619,620
619,621
620,621
622,623
625,626
625,627
626,627
626,628
627,628
629,630
629,631
630,631
631,632
631,633
632,633
635,636
637,638
637,639
638,639
638,640
639,640
639,641
640,641
640,642
641,642
644,645
644,646
645,646
648,649
649,650
649,651
649,652
650,651
652,653
654,655
654,656
656,657
658,659
659,660
659,661
659,662
660,661
662,663
665,666
665,667
666,667
668,669
668,670
668,671
669,670
670,671
670,672
670,673
671,672
673,674
676,677
677,678
677,679
677,680
677,681
678,679
680,681
682,683
682,684
683,684
683,685
685,686
687,688
688,689
688,690
689,690
691,692
693,694
693,695
694,695
696,697
698,699
699,700
699,701
699,702
700,701
702,703
705,706
706,707
706,708
706,709
707,708
709,710
712,713
713,714
713,715
714,715
717,718
717,719
718,719
718,720
719,720
719,721
720,721
723,724
725,726
725,727
725,728
725,729
725,730
725,731
725,732
726,727
726,728
727,728
728,729
730,731
731,732
731,733
731,734
732,733
734,735
737,738
738,739
738,740
739,740
741,742
741,743
741,744
741,745
742,743
744,745
747,748
747,749
748,749
748,750
751,752
751,753
751,754
751,755
752,753
754,755
755,756
757,758
757,759
758,759
760,761
762,763
762,764
763,764
765,766
767,768
767,769
768,769
768,770
769,770
771,772
771,773
772,773
772,774
773,774
776,777
778,779
778,780
779,780
779,781
780,781
780,782
781,782
781,783
782,783
785,786
785,787
786,787
789,790
790,791
790,792
790,793
791,792
793,794
795,796
795,797
797,798
799,800
800,801
800,802
800,803
801,802
803,804
806,807
806,808
807,808
809,810
809,811
809,812
810,811
811,812
811,813
811,814
812,813
814,815
817,818
818,819
818,820
818,821
818,822
819,820
821,822
823,824
823,825
824,825
824,826
826,827
828,829
829,830
829,831
830,831
832,833
835,836
836,837
836,838
836,839
837,838
839,840
842,843
843,844
843,845
843,846
844,845
846,847
849,850
850,851
850,852
851,852
854,855
855,856
855,857
856,857
859,860
859,861
860,861
860,862
861,862
863,864
865,866
865,867
865,868
865,869
865,870
865,871
865,872
866,867
866,868
867,868
868,869
870,871
871,872
871,873
871,874
872,873
874,875
877,878
878,879
878,880
878,881
879,880
881,882
884,885
885,886
885,887
885,888
885,889
886,887
888,889
890,891
890,892
891,892
891,893
893,894
895,896
896,897
896,898
897,898
899,900
902,903
903,904
903,905
903,906
904,905
906,907
909,910
909,911
910,911
912,913
913,914
913,915
913,916
914,915
916,917
919,920
920,921
920,922
920,923
921,922
923,924
926,927
927,928
927,929
928,929
931,932
931,933
932,933
934,935
935,936
935,937
935,938
936,937
938,939
-----nextToken-----
2,4,7,9,10,13,15,18,20,21,23,25,27,29,31,33,37,39,42,46,48,49,53,55,60,62,64,69,71,73,78,79,82,84,89,91,92,96,98,99,104,105,110,112,115,116,120,122,123,127,130,131,136,138,142,144,145,150,153,157,159,162,164,168,171,173,175,179,181,182,186,188,192,194,195,199,200,205,207,208,212,214,215,218,222,224,225,229,231,232,235,239,241,242,243,247,249,251,256,258,260,265,266,269,271,276,278,279,283,287,289,293,295,299,301,302,306,308,309,314,315,320,322,325,326,330,332,333,337,340,341,342,347,349,353,355,356,361,362,365,369,371,373,375,379,381,382,386,388,392,394,395,399,400,405,407,408,412,414,415,418,422,424,425,429,431,432,435,439,441,442,443,447,448,452,453,458,460,462,465,467,469,473,477,478,479,483,485,486,491,492,496,497,499,504,506,510,512,516,518,522,526,528,529,534,535,539,541,545,546,548,552,555,556,561,562,566,569,571,572,575,576,579,582,585,587,590,592,596,600,602,603,606,607,610,613,616,618,621,623,624,628,633,634,636,642,643,646,647,651,653,655,657,661,663,664,667,672,674,675,679,681,684,686,690,692,695,697,701,703,704,708,710,711,715,716,721,722,724,729,733,735,736,740,743,745,746,749,750,753,756,759,761,764,766,770,774,775,777,783,784,787,788,792,794,796,798,802,804,805,808,813,815,816,820,822,825,827,831,833,834,838,840,841,845,847,848,852,853,857,858,862,864,869,873,875,876,880,882,883,887,889,892,894,898,900,901,905,907,908,911,915,917,918,922,924,925,929,930,933,937,939,940
-----computeFrom-----
51,52
51,53
76,77
76,78
80,81
80,82
102,103
102,104
106,107
106,108
107,108
107,109
108,109
108,110
113,114
113,115
117,118
117,119
133,134
133,135
134,135
134,136
139,140
139,141
169,170
169,171
184,185
184,186
197,198
197,199
263,264
263,265
267,268
267,269
281,282
281,283
312,313
312,314
316,317
316,318
317,318
317,319
318,319
318,320
323,324
323,325
327,328
327,329
338,339
338,340
344,345
344,346
345,346
345,347
350,351
350,352
359,360
359,361
384,385
384,386
397,398
397,399
445,446
445,447
450,451
450,452
471,472
471,473
489,490
489,491
493,494
493,495
494,495
494,496
514,515
514,516
532,533
532,534
536,537
536,538
537,538
537,539
542,543
542,544
543,544
543,545
553,554
553,555
559,560
559,561
564,565
564,566
583,584
583,585
588,589
588,590
594,595
594,596
597,598
597,599
614,615
614,616
619,620
619,621
626,627
626,628
629,630
629,631
631,632
631,633
639,640
639,641
640,641
640,642
644,645
644,646
654,655
654,656
693,694
693,695
713,714
713,715
718,719
718,720
719,720
719,721
738,739
738,740
757,758
757,759
762,763
762,764
768,769
768,770
771,772
771,773
772,773
772,774
780,781
780,782
781,782
781,783
785,786
785,787
795,796
795,797
850,851
850,852
855,856
855,857
860,861
860,862
927,928
927,929
-----guardedBy-----
53,447
144,150
355,365
347,361
452,864
646,657
724,777
721,852
787,798
862,900
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;NullStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static voidwrite_rc_datablock (FILE *e, rc_uint_type length, const bfd_byte *data, int has_next,		    int hasblock, int show_comment){  int plen;  if (hasblock)    fprintf (e, "BEGIN\n");  if (show_comment == -1)	  {      if (test_rc_datablock_text(length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	  }      if (test_rc_datablock_unicode (length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	}      show_comment = 0;    }  if (length != 0)	      {      rc_uint_type i, max_row;      int first = 1;      max_row = (show_comment ? 4 : 8);      indent (e, 2);      for (i = 0; i + 3 < length;)		  {	  rc_uint_type k;	  rc_uint_type comment_start;	  comment_start = i;	  if (! first)	    indent (e, 2);	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		first = 0;	      }      if (i + 1 < length)	      {		if (! first)	    indent (e, 2);	  plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));	  if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		i += 2;		first = 0;	      }      if (i < length)	      {		if (! first)	    indent (e, 2);	  fprintf (e, "\"");	  ascii_print (e, (const char *) &data[i], 1);	  fprintf (e, "\"");	  if (has_next)		  fprintf (e, ",");		fprintf (e, "\n");		first = 0;	      }    }  if (hasblock)    fprintf (e, "END\n");}
static void
write_rc_datablock (FILE *e, rc_uint_type length, const bfd_byte *data, int has_next,		    int hasblock, int show_comment)
write_rc_datablock
FILE *e
FILE
FILE
*e
*
e
rc_uint_type length
rc_uint_type
rc_uint_type
length
length
const bfd_byte *data
const bfd_byte
bfd_byte
*data
*
data
int has_next
int
has_next
has_next
int hasblock
int
hasblock
hasblock
int show_comment
int
show_comment
show_comment
{  int plen;  if (hasblock)    fprintf (e, "BEGIN\n");  if (show_comment == -1)	  {      if (test_rc_datablock_text(length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	  }      if (test_rc_datablock_unicode (length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	}      show_comment = 0;    }  if (length != 0)	      {      rc_uint_type i, max_row;      int first = 1;      max_row = (show_comment ? 4 : 8);      indent (e, 2);      for (i = 0; i + 3 < length;)		  {	  rc_uint_type k;	  rc_uint_type comment_start;	  comment_start = i;	  if (! first)	    indent (e, 2);	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		first = 0;	      }      if (i + 1 < length)	      {		if (! first)	    indent (e, 2);	  plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));	  if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		i += 2;		first = 0;	      }      if (i < length)	      {		if (! first)	    indent (e, 2);	  fprintf (e, "\"");	  ascii_print (e, (const char *) &data[i], 1);	  fprintf (e, "\"");	  if (has_next)		  fprintf (e, ",");		fprintf (e, "\n");		first = 0;	      }    }  if (hasblock)    fprintf (e, "END\n");}
int plen;
int plen;
int
plen
plen
if (hasblock)    fprintf (e, "BEGIN\n");
hasblock
hasblock
fprintf (e, "BEGIN\n");
fprintf (e, "BEGIN\n")
fprintf
fprintf
e
e
"BEGIN\n"
if (show_comment == -1)	  {      if (test_rc_datablock_text(length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	  }      if (test_rc_datablock_unicode (length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	}      show_comment = 0;    }
show_comment == -1
show_comment
show_comment
-1
1
{      if (test_rc_datablock_text(length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	  }      if (test_rc_datablock_unicode (length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	}      show_comment = 0;    }
if (test_rc_datablock_text(length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	  }
test_rc_datablock_text(length, data)
test_rc_datablock_text
test_rc_datablock_text
length
length
data
data
{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	  }
rc_uint_type i, c;
rc_uint_type i, c;
rc_uint_type
rc_uint_type
i
i
c
c
for (i = 0; i < length;)	    {	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }
i = 0;
i = 0
i
i
0
i < length
i
i
length
length
{	      indent (e, 2);	      fprintf (e, "\"");	      for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;	      if (i < length && data[i] == '\n')		++i, ++c;	      ascii_print (e, (const char *) &data[i - c], c);	    fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
fprintf (e, "\"");
fprintf (e, "\"")
fprintf
fprintf
e
e
"\""
for (c = 0; i < length && c < 160 && data[i] != '\n'; c++, i++)		;
c = 0;
c = 0
c
c
0
i < length && c < 160 && data[i] != '\n'
i < length && c < 160
i < length
i
i
length
length
c < 160
c
c
160
data[i] != '\n'
data[i]
data
data
i
i
'\n'
c++, i++
c++
c
c
i++
i
i
;
if (i < length && data[i] == '\n')		++i, ++c;
i < length && data[i] == '\n'
i < length
i
i
length
length
data[i] == '\n'
data[i]
data
data
i
i
'\n'
++i, ++c;
++i, ++c
++i
i
i
++c
c
c
ascii_print (e, (const char *) &data[i - c], c);
ascii_print (e, (const char *) &data[i - c], c)
ascii_print
ascii_print
e
e
(const char *) &data[i - c]
const char *
const char
*
*
&data[i - c]
data[i - c]
data
data
i - c
i
i
c
c
c
c
fprintf (e, "\"");
fprintf (e, "\"")
fprintf
fprintf
e
e
"\""
if (i < length)		fprintf (e, "\n");
i < length
i
i
length
length
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
if (i == 0)	      {	      indent (e, 2);	      fprintf (e, "\"\"");	      }
i == 0
i
i
0
{	      indent (e, 2);	      fprintf (e, "\"\"");	      }
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
fprintf (e, "\"\"");
fprintf (e, "\"\"")
fprintf
fprintf
e
e
"\"\""
if (has_next)	    fprintf (e, ",");
has_next
has_next
fprintf (e, ",");
fprintf (e, ",")
fprintf
fprintf
e
e
","
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
if (hasblock)	    fprintf (e, "END\n");
hasblock
hasblock
fprintf (e, "END\n");
fprintf (e, "END\n")
fprintf
fprintf
e
e
"END\n"
return;
if (test_rc_datablock_unicode (length, data))	{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	}
test_rc_datablock_unicode (length, data)
test_rc_datablock_unicode
test_rc_datablock_unicode
length
length
data
data
{	  rc_uint_type i, c;	  for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }	  if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }	  if (has_next)	    fprintf (e, ",");	  fprintf (e, "\n");	  if (hasblock)	    fprintf (e, "END\n");	  return;	}
rc_uint_type i, c;
rc_uint_type i, c;
rc_uint_type
rc_uint_type
i
i
c
c
for (i = 0; i < length;)	    {	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }
i = 0;
i = 0
i
i
0
i < length
i
i
length
length
{	      const unichar *u;	      u = (const unichar *) &data[i];	      indent (e, 2);	  fprintf (e, "L\"");	      for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;	      if (i < length && u[c] == '\n')		i += 2, ++c;	      unicode_print (e, u, c);	  fprintf (e, "\"");	      if (i < length)		fprintf (e, "\n");	    }
const unichar *u;
const unichar *u;
const unichar
unichar
*u
*
u
u = (const unichar *) &data[i];
u = (const unichar *) &data[i]
u
u
(const unichar *) &data[i]
const unichar *
const unichar
unichar
*
*
&data[i]
data[i]
data
data
i
i
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
fprintf (e, "L\"");
fprintf (e, "L\"")
fprintf
fprintf
e
e
"L\""
for (c = 0; i < length && c < 160 && u[c] != '\n'; c++, i += 2)		;
c = 0;
c = 0
c
c
0
i < length && c < 160 && u[c] != '\n'
i < length && c < 160
i < length
i
i
length
length
c < 160
c
c
160
u[c] != '\n'
u[c]
u
u
c
c
'\n'
c++, i += 2
c++
c
c
i += 2
i
i
2
;
if (i < length && u[c] == '\n')		i += 2, ++c;
i < length && u[c] == '\n'
i < length
i
i
length
length
u[c] == '\n'
u[c]
u
u
c
c
'\n'
i += 2, ++c;
i += 2, ++c
i += 2
i
i
2
++c
c
c
unicode_print (e, u, c);
unicode_print (e, u, c)
unicode_print
unicode_print
e
e
u
u
c
c
fprintf (e, "\"");
fprintf (e, "\"")
fprintf
fprintf
e
e
"\""
if (i < length)		fprintf (e, "\n");
i < length
i
i
length
length
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
if (i == 0)	  {	      indent (e, 2);	      fprintf (e, "L\"\"");	    }
i == 0
i
i
0
{	      indent (e, 2);	      fprintf (e, "L\"\"");	    }
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
fprintf (e, "L\"\"");
fprintf (e, "L\"\"")
fprintf
fprintf
e
e
"L\"\""
if (has_next)	    fprintf (e, ",");
has_next
has_next
fprintf (e, ",");
fprintf (e, ",")
fprintf
fprintf
e
e
","
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
if (hasblock)	    fprintf (e, "END\n");
hasblock
hasblock
fprintf (e, "END\n");
fprintf (e, "END\n")
fprintf
fprintf
e
e
"END\n"
return;
show_comment = 0;
show_comment = 0
show_comment
show_comment
0
if (length != 0)	      {      rc_uint_type i, max_row;      int first = 1;      max_row = (show_comment ? 4 : 8);      indent (e, 2);      for (i = 0; i + 3 < length;)		  {	  rc_uint_type k;	  rc_uint_type comment_start;	  comment_start = i;	  if (! first)	    indent (e, 2);	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		first = 0;	      }      if (i + 1 < length)	      {		if (! first)	    indent (e, 2);	  plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));	  if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		i += 2;		first = 0;	      }      if (i < length)	      {		if (! first)	    indent (e, 2);	  fprintf (e, "\"");	  ascii_print (e, (const char *) &data[i], 1);	  fprintf (e, "\"");	  if (has_next)		  fprintf (e, ",");		fprintf (e, "\n");		first = 0;	      }    }
length != 0
length
length
0
{      rc_uint_type i, max_row;      int first = 1;      max_row = (show_comment ? 4 : 8);      indent (e, 2);      for (i = 0; i + 3 < length;)		  {	  rc_uint_type k;	  rc_uint_type comment_start;	  comment_start = i;	  if (! first)	    indent (e, 2);	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		first = 0;	      }      if (i + 1 < length)	      {		if (! first)	    indent (e, 2);	  plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));	  if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		i += 2;		first = 0;	      }      if (i < length)	      {		if (! first)	    indent (e, 2);	  fprintf (e, "\"");	  ascii_print (e, (const char *) &data[i], 1);	  fprintf (e, "\"");	  if (has_next)		  fprintf (e, ",");		fprintf (e, "\n");		first = 0;	      }    }
rc_uint_type i, max_row;
rc_uint_type i, max_row;
rc_uint_type
rc_uint_type
i
i
max_row
max_row
int first = 1;
int first = 1;
int
first = 1
first
= 1
1
max_row = (show_comment ? 4 : 8);
max_row = (show_comment ? 4 : 8)
max_row
max_row
(show_comment ? 4 : 8)
show_comment ? 4 : 8
show_comment
show_comment
4
8
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
for (i = 0; i + 3 < length;)		  {	  rc_uint_type k;	  rc_uint_type comment_start;	  comment_start = i;	  if (! first)	    indent (e, 2);	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		first = 0;	      }
i = 0;
i = 0
i
i
0
i + 3 < length
i + 3
i
i
3
length
length
{	  rc_uint_type k;	  rc_uint_type comment_start;	  comment_start = i;	  if (! first)	    indent (e, 2);	  for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		first = 0;	      }
rc_uint_type k;
rc_uint_type k;
rc_uint_type
rc_uint_type
k
k
rc_uint_type comment_start;
rc_uint_type comment_start;
rc_uint_type
rc_uint_type
comment_start
comment_start
comment_start = i;
comment_start = i
comment_start
comment_start
i
i
if (! first)	    indent (e, 2);
! first
first
first
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
for (k = 0; k < max_row && i + 3 < length; k++, i += 4)		      {	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }
k = 0;
k = 0
k
k
0
k < max_row && i + 3 < length
k < max_row
k
k
max_row
max_row
i + 3 < length
i + 3
i
i
3
length
length
k++, i += 4
k++
k
k
i += 4
i
i
4
{	      if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;	      if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }		      }
if (k == 0)		plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));			else		plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;
k == 0
k
k
0
plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i));
plen  = fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i))
plen
plen
fprintf (e, "0x%lxL",				 (unsigned long) windres_get_32 (&wrtarget, data + i, length - i))
fprintf
fprintf
e
e
"0x%lxL"
(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)
unsigned long
unsigned long

windres_get_32 (&wrtarget, data + i, length - i)
windres_get_32
windres_get_32
&wrtarget
wrtarget
wrtarget
data + i
data
data
i
i
length - i
length
length
i
i
plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1;
plen = fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1
plen
plen
fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)) - 1
fprintf (e, " 0x%lxL",				(unsigned long) windres_get_32 (&wrtarget, data + i, length - i))
fprintf
fprintf
e
e
" 0x%lxL"
(unsigned long) windres_get_32 (&wrtarget, data + i, length - i)
unsigned long
unsigned long

windres_get_32 (&wrtarget, data + i, length - i)
windres_get_32
windres_get_32
&wrtarget
wrtarget
wrtarget
data + i
data
data
i
i
length - i
length
length
i
i
1
if (has_next || (i + 4) < length)			  {		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }
has_next || (i + 4) < length
has_next
has_next
(i + 4) < length
(i + 4)
i + 4
i
i
4
length
length
{		  if (plen>0 && plen < 11)		    indent (e, 11 - plen);		  fprintf (e, ",");			  }
if (plen>0 && plen < 11)		    indent (e, 11 - plen);
plen>0 && plen < 11
plen>0
plen
plen
0
plen < 11
plen
plen
11
indent (e, 11 - plen);
indent (e, 11 - plen)
indent
indent
e
e
11 - plen
11
plen
plen
fprintf (e, ",");
fprintf (e, ",")
fprintf
fprintf
e
e
","
if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }
show_comment
show_comment
{	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[comment_start], i - comment_start);	      fprintf (e, ".  */");		  }
fprintf (e, "\t/* ");
fprintf (e, "\t/* ")
fprintf
fprintf
e
e
"\t/* "
ascii_print (e, (const char *) &data[comment_start], i - comment_start);
ascii_print (e, (const char *) &data[comment_start], i - comment_start)
ascii_print
ascii_print
e
e
(const char *) &data[comment_start]
const char *
const char
*
*
&data[comment_start]
data[comment_start]
data
data
comment_start
comment_start
i - comment_start
i
i
comment_start
comment_start
fprintf (e, ".  */");
fprintf (e, ".  */")
fprintf
fprintf
e
e
".  */"
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
first = 0;
first = 0
first
first
0
if (i + 1 < length)	      {		if (! first)	    indent (e, 2);	  plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));	  if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		i += 2;		first = 0;	      }
i + 1 < length
i + 1
i
i
1
length
length
{		if (! first)	    indent (e, 2);	  plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));	  if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }	  if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }		fprintf (e, "\n");		i += 2;		first = 0;	      }
if (! first)	    indent (e, 2);
! first
first
first
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i));
plen = fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i))
plen
plen
fprintf (e, "0x%x",	  		  (int) windres_get_16 (&wrtarget, data + i, length - i))
fprintf
fprintf
e
e
"0x%x"
(int) windres_get_16 (&wrtarget, data + i, length - i)
int
int

windres_get_16 (&wrtarget, data + i, length - i)
windres_get_16
windres_get_16
&wrtarget
wrtarget
wrtarget
data + i
data
data
i
i
length - i
length
length
i
i
if (has_next || i + 2 < length)		  {	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }
has_next || i + 2 < length
has_next
has_next
i + 2 < length
i + 2
i
i
2
length
length
{	      if (plen > 0 && plen < 11)		indent (e, 11 - plen);	      fprintf (e, ",");		      }
if (plen > 0 && plen < 11)		indent (e, 11 - plen);
plen > 0 && plen < 11
plen > 0
plen
plen
0
plen < 11
plen
plen
11
indent (e, 11 - plen);
indent (e, 11 - plen)
indent
indent
e
e
11 - plen
11
plen
plen
fprintf (e, ",");
fprintf (e, ",")
fprintf
fprintf
e
e
","
if (show_comment)	    {	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }
show_comment
show_comment
{	      fprintf (e, "\t/* ");	      ascii_print (e, (const char *) &data[i], 2);	      fprintf (e, ".  */");		  }
fprintf (e, "\t/* ");
fprintf (e, "\t/* ")
fprintf
fprintf
e
e
"\t/* "
ascii_print (e, (const char *) &data[i], 2);
ascii_print (e, (const char *) &data[i], 2)
ascii_print
ascii_print
e
e
(const char *) &data[i]
const char *
const char
*
*
&data[i]
data[i]
data
data
i
i
2
fprintf (e, ".  */");
fprintf (e, ".  */")
fprintf
fprintf
e
e
".  */"
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
i += 2;
i += 2
i
i
2
first = 0;
first = 0
first
first
0
if (i < length)	      {		if (! first)	    indent (e, 2);	  fprintf (e, "\"");	  ascii_print (e, (const char *) &data[i], 1);	  fprintf (e, "\"");	  if (has_next)		  fprintf (e, ",");		fprintf (e, "\n");		first = 0;	      }
i < length
i
i
length
length
{		if (! first)	    indent (e, 2);	  fprintf (e, "\"");	  ascii_print (e, (const char *) &data[i], 1);	  fprintf (e, "\"");	  if (has_next)		  fprintf (e, ",");		fprintf (e, "\n");		first = 0;	      }
if (! first)	    indent (e, 2);
! first
first
first
indent (e, 2);
indent (e, 2)
indent
indent
e
e
2
fprintf (e, "\"");
fprintf (e, "\"")
fprintf
fprintf
e
e
"\""
ascii_print (e, (const char *) &data[i], 1);
ascii_print (e, (const char *) &data[i], 1)
ascii_print
ascii_print
e
e
(const char *) &data[i]
const char *
const char
*
*
&data[i]
data[i]
data
data
i
i
1
fprintf (e, "\"");
fprintf (e, "\"")
fprintf
fprintf
e
e
"\""
if (has_next)		  fprintf (e, ",");
has_next
has_next
fprintf (e, ",");
fprintf (e, ",")
fprintf
fprintf
e
e
","
fprintf (e, "\n");
fprintf (e, "\n")
fprintf
fprintf
e
e
"\n"
first = 0;
first = 0
first
first
0
if (hasblock)    fprintf (e, "END\n");
hasblock
hasblock
fprintf (e, "END\n");
fprintf (e, "END\n")
fprintf
fprintf
e
e
"END\n"
-----joern-----
(181,420,0)
(348,226,0)
(144,113,0)
(14,113,0)
(74,36,0)
(483,426,0)
(335,164,0)
(90,14,0)
(425,365,0)
(270,464,0)
(59,372,0)
(102,492,0)
(254,492,0)
(275,365,0)
(440,439,0)
(370,273,0)
(258,138,0)
(175,298,0)
(268,365,0)
(388,245,0)
(67,384,0)
(373,139,0)
(332,204,0)
(495,125,0)
(293,453,0)
(32,436,0)
(312,431,0)
(461,125,0)
(48,10,0)
(438,365,0)
(467,365,0)
(493,205,0)
(171,49,0)
(407,466,0)
(245,388,0)
(256,398,0)
(399,36,0)
(333,398,0)
(261,218,0)
(488,367,0)
(417,69,0)
(484,407,0)
(45,252,0)
(211,123,0)
(201,354,0)
(417,459,0)
(231,320,0)
(54,262,0)
(171,390,0)
(29,311,0)
(448,467,0)
(430,287,0)
(63,383,0)
(182,94,0)
(49,171,0)
(252,24,0)
(391,390,0)
(53,409,0)
(148,390,0)
(316,259,0)
(257,311,0)
(255,412,0)
(11,338,0)
(27,295,0)
(235,40,0)
(327,397,0)
(310,464,0)
(325,413,0)
(455,377,0)
(400,7,0)
(454,22,0)
(339,234,0)
(310,390,0)
(482,7,0)
(252,464,0)
(491,438,0)
(206,260,0)
(93,71,0)
(299,492,0)
(221,127,0)
(273,113,0)
(197,186,0)
(273,370,0)
(412,255,0)
(161,492,0)
(399,365,0)
(81,71,0)
(121,371,0)
(369,10,0)
(228,467,0)
(437,161,0)
(436,345,0)
(308,124,0)
(426,311,0)
(505,453,0)
(305,236,0)
(21,230,0)
(187,4,0)
(262,390,0)
(443,273,0)
(98,445,0)
(148,464,0)
(286,413,0)
(412,18,0)
(499,427,0)
(498,69,0)
(131,417,0)
(106,438,0)
(439,84,0)
(238,474,0)
(426,390,0)
(323,318,0)
(466,407,0)
(198,248,0)
(64,159,0)
(371,300,0)
(186,197,0)
(459,69,0)
(291,125,0)
(295,30,0)
(116,40,0)
(210,492,0)
(227,196,0)
(179,464,0)
(298,365,0)
(108,29,0)
(270,440,0)
(124,308,0)
(460,409,0)
(144,25,0)
(318,2,0)
(306,390,0)
(469,365,0)
(292,388,0)
(415,466,0)
(139,25,0)
(458,315,0)
(230,365,0)
(396,259,0)
(112,425,0)
(148,18,0)
(191,388,0)
(366,193,0)
(241,365,0)
(177,409,0)
(215,412,0)
(300,18,0)
(227,84,0)
(417,401,0)
(196,421,0)
(383,226,0)
(234,383,0)
(496,374,0)
(137,274,0)
(352,469,0)
(172,135,0)
(283,396,0)
(187,2,0)
(441,418,0)
(241,4,0)
(367,18,0)
(419,124,0)
(375,229,0)
(136,372,0)
(302,387,0)
(134,204,0)
(503,362,0)
(255,310,0)
(229,375,0)
(356,151,0)
(214,362,0)
(490,106,0)
(464,18,0)
(413,365,0)
(105,409,0)
(315,492,0)
(445,464,0)
(133,440,0)
(262,69,0)
(353,426,0)
(298,36,0)
(262,401,0)
(58,127,0)
(395,497,0)
(179,311,0)
(252,367,0)
(95,502,0)
(12,52,0)
(141,268,0)
(127,401,0)
(28,329,0)
(120,18,0)
(377,365,0)
(75,365,0)
(386,148,0)
(313,150,0)
(192,68,0)
(1,300,0)
(154,94,0)
(460,365,0)
(388,492,0)
(497,320,0)
(473,365,0)
(202,241,0)
(143,66,0)
(61,3,0)
(168,499,0)
(183,398,0)
(338,484,0)
(153,365,0)
(218,18,0)
(372,59,0)
(475,241,0)
(333,387,0)
(459,276,0)
(396,234,0)
(451,193,0)
(204,390,0)
(499,179,0)
(404,252,0)
(66,464,0)
(434,227,0)
(177,18,0)
(387,259,0)
(196,227,0)
(5,179,0)
(486,218,0)
(497,365,0)
(193,366,0)
(256,387,0)
(358,369,0)
(127,390,0)
(435,170,0)
(398,409,0)
(499,168,0)
(414,411,0)
(65,10,0)
(421,196,0)
(26,460,0)
(468,194,0)
(225,469,0)
(68,36,0)
(49,18,0)
(294,130,0)
(248,365,0)
(363,391,0)
(103,75,0)
(22,365,0)
(120,418,0)
(422,372,0)
(310,18,0)
(367,287,0)
(257,170,0)
(279,167,0)
(362,432,0)
(306,401,0)
(27,502,0)
(31,497,0)
(246,331,0)
(264,106,0)
(77,398,0)
(354,365,0)
(432,216,0)
(383,260,0)
(88,240,0)
(118,445,0)
(60,93,0)
(281,247,0)
(332,245,0)
(193,492,0)
(465,25,0)
(166,156,0)
(252,311,0)
(102,392,0)
(502,177,0)
(480,10,0)
(127,69,0)
(420,125,0)
(218,436,0)
(370,369,0)
(308,59,0)
(77,387,0)
(37,210,0)
(101,441,0)
(271,49,0)
(265,86,0)
(76,397,0)
(459,401,0)
(161,390,0)
(388,311,0)
(224,411,0)
(15,397,0)
(487,159,0)
(51,194,0)
(504,300,0)
(379,473,0)
(40,365,0)
(382,7,0)
(380,313,0)
(280,392,0)
(124,492,0)
(196,390,0)
(463,168,0)
(132,390,0)
(338,164,0)
(213,257,0)
(324,66,0)
(367,464,0)
(263,398,0)
(408,421,0)
(307,318,0)
(146,333,0)
(506,36,0)
(250,91,0)
(494,397,0)
(394,279,0)
(418,441,0)
(92,338,0)
(457,355,0)
(445,18,0)
(364,318,0)
(72,370,0)
(306,69,0)
(320,418,0)
(85,506,0)
(90,69,0)
(40,39,0)
(300,464,0)
(326,259,0)
(268,345,0)
(179,499,0)
(412,311,0)
(20,204,0)
(19,399,0)
(479,421,0)
(204,492,0)
(181,342,0)
(94,2,0)
(423,102,0)
(245,332,0)
(66,403,0)
(374,365,0)
(506,365,0)
(436,365,0)
(500,90,0)
(172,470,0)
(428,329,0)
(417,150,0)
(218,464,0)
(300,371,0)
(256,274,0)
(277,170,0)
(348,240,0)
(319,75,0)
(150,417,0)
(203,310,0)
(427,499,0)
(393,256,0)
(177,464,0)
(241,197,0)
(242,259,0)
(33,65,0)
(56,310,0)
(464,167,0)
(366,59,0)
(237,299,0)
(375,365,0)
(128,22,0)
(49,464,0)
(440,270,0)
(178,354,0)
(119,189,0)
(82,399,0)
(234,226,0)
(110,187,0)
(65,365,0)
(3,453,0)
(87,365,0)
(335,365,0)
(459,459,0)
(481,18,0)
(55,298,0)
(113,273,0)
(318,4,0)
(421,18,0)
(436,295,0)
(289,464,0)
(347,275,0)
(69,459,0)
(120,464,0)
(381,427,0)
(7,369,0)
(310,255,0)
(499,148,0)
(97,397,0)
(42,460,0)
(70,315,0)
(66,18,0)
(205,365,0)
(295,436,0)
(135,172,0)
(120,390,0)
(466,311,0)
(69,69,0)
(4,241,0)
(151,453,0)
(355,365,0)
(69,401,0)
(376,259,0)
(22,164,0)
(93,396,0)
(465,276,0)
(148,499,0)
(113,14,0)
(180,497,0)
(416,377,0)
(44,68,0)
(115,365,0)
(445,390,0)
(406,52,0)
(94,153,0)
(7,365,0)
(391,311,0)
(169,502,0)
(413,10,0)
(60,371,0)
(199,144,0)
(253,195,0)
(411,414,0)
(93,60,0)
(156,365,0)
(216,432,0)
(43,236,0)
(24,229,0)
(456,245,0)
(320,497,0)
(217,25,0)
(295,27,0)
(165,414,0)
(502,311,0)
(62,459,0)
(172,298,0)
(446,25,0)
(162,348,0)
(252,18,0)
(83,36,0)
(197,255,0)
(230,39,0)
(179,18,0)
(17,4,0)
(424,383,0)
(257,470,0)
(34,216,0)
(336,270,0)
(91,365,0)
(303,29,0)
(466,464,0)
(68,365,0)
(313,380,0)
(209,474,0)
(314,151,0)
(79,230,0)
(212,268,0)
(440,390,0)
(149,138,0)
(48,365,0)
(174,335,0)
(157,391,0)
(432,362,0)
(244,335,0)
(284,10,0)
(80,10,0)
(153,94,0)
(208,138,0)
(318,323,0)
(185,355,0)
(421,464,0)
(87,239,0)
(464,464,0)
(395,287,0)
(466,18,0)
(298,474,0)
(377,453,0)
(86,365,0)
(309,125,0)
(124,390,0)
(371,390,0)
(99,139,0)
(189,255,0)
(243,248,0)
(389,375,0)
(155,49,0)
(334,177,0)
(411,168,0)
(106,395,0)
(338,365,0)
(272,69,0)
(296,466,0)
(223,439,0)
(444,374,0)
(385,125,0)
(229,24,0)
(470,172,0)
(410,2,0)
(285,120,0)
(216,395,0)
(484,338,0)
(170,492,0)
(472,91,0)
(323,187,0)
(193,311,0)
(374,125,0)
(439,440,0)
(370,25,0)
(35,179,0)
(109,431,0)
(7,25,0)
(445,367,0)
(234,396,0)
(362,395,0)
(6,409,0)
(41,262,0)
(139,369,0)
(210,152,0)
(369,313,0)
(442,115,0)
(140,10,0)
(90,390,0)
(46,132,0)
(425,397,0)
(378,270,0)
(304,48,0)
(344,484,0)
(73,259,0)
(320,231,0)
(200,216,0)
(471,464,0)
(130,365,0)
(23,205,0)
(90,459,0)
(372,474,0)
(126,401,0)
(351,171,0)
(418,120,0)
(96,506,0)
(52,459,0)
(288,409,0)
(113,144,0)
(262,459,0)
(204,332,0)
(30,295,0)
(160,193,0)
(29,464,0)
(75,331,0)
(90,401,0)
(168,411,0)
(249,395,0)
(407,484,0)
(217,433,0)
(337,234,0)
(450,409,0)
(402,306,0)
(478,425,0)
(368,234,0)
(346,148,0)
(412,464,0)
(418,29,0)
(270,18,0)
(111,401,0)
(16,492,0)
(9,139,0)
(47,367,0)
(176,187,0)
(7,10,0)
(429,3,0)
(94,4,0)
(220,86,0)
(278,274,0)
(384,71,0)
(436,218,0)
(484,344,0)
(476,412,0)
(123,365,0)
(2,414,0)
(122,299,0)
(449,124,0)
(150,313,0)
(485,120,0)
(350,280,0)
(502,27,0)
(342,397,0)
(69,433,0)
(403,66,0)
(470,257,0)
(469,345,0)
(50,130,0)
(236,365,0)
(298,172,0)
(145,115,0)
(361,156,0)
(301,138,0)
(29,18,0)
(114,260,0)
(52,69,0)
(187,323,0)
(438,106,0)
(321,384,0)
(170,257,0)
(168,463,0)
(100,90,0)
(313,369,0)
(147,403,0)
(330,65,0)
(247,474,0)
(299,390,0)
(91,287,0)
(229,13,0)
(328,36,0)
(197,241,0)
(59,366,0)
(219,196,0)
(360,77,0)
(13,229,0)
(251,25,0)
(447,366,0)
(417,311,0)
(266,217,0)
(297,71,0)
(8,87,0)
(3,365,0)
(418,320,0)
(497,395,0)
(99,207,0)
(489,125,0)
(329,453,0)
(306,207,0)
(317,93,0)
(431,365,0)
(371,60,0)
(282,138,0)
(349,417,0)
(52,401,0)
(322,370,0)
(306,459,0)
(107,177,0)
(354,259,0)
(207,99,0)
(159,365,0)
(255,197,0)
(269,93,0)
(247,152,0)
(255,189,0)
(248,195,0)
(232,87,0)
(151,365,0)
(218,177,0)
(117,132,0)
(158,387,0)
(414,2,0)
(403,390,0)
(38,287,0)
(29,418,0)
(375,453,0)
(233,473,0)
(501,375,0)
(163,465,0)
(24,252,0)
(280,474,0)
(452,18,0)
(267,144,0)
(411,365,0)
(222,99,0)
(359,259,0)
(129,306,0)
(59,308,0)
(477,397,0)
(290,123,0)
(170,474,0)
(207,306,0)
(139,99,0)
(240,348,0)
(127,459,0)
(104,459,0)
(340,287,0)
(142,411,0)
(14,90,0)
(123,239,0)
(173,48,0)
(341,153,0)
(462,275,0)
(279,71,0)
(274,287,0)
(89,161,0)
(210,492,1)
(218,177,1)
(115,365,1)
(142,410,1)
(302,158,1)
(348,240,1)
(103,438,1)
(394,248,1)
(234,339,1)
(421,464,1)
(357,425,1)
(106,395,1)
(458,70,1)
(91,472,1)
(236,305,1)
(332,245,1)
(183,460,1)
(225,436,1)
(182,341,1)
(173,65,1)
(102,423,1)
(199,90,1)
(21,315,1)
(177,334,1)
(28,428,1)
(249,77,1)
(449,474,1)
(112,188,1)
(215,476,1)
(49,18,1)
(185,457,1)
(4,241,1)
(255,412,1)
(473,365,1)
(137,278,1)
(214,503,1)
(26,42,1)
(204,134,1)
(248,365,1)
(428,377,1)
(50,188,1)
(407,466,1)
(223,4,1)
(336,223,1)
(506,85,1)
(363,157,1)
(321,60,1)
(435,277,1)
(262,401,1)
(168,499,1)
(106,490,1)
(250,335,1)
(35,427,1)
(233,77,1)
(484,344,1)
(148,386,1)
(445,367,1)
(184,123,1)
(69,69,1)
(119,475,1)
(69,401,1)
(192,44,1)
(123,365,1)
(372,474,1)
(474,209,1)
(499,427,1)
(342,357,1)
(244,174,1)
(170,474,1)
(124,419,1)
(297,81,1)
(281,308,1)
(343,445,1)
(459,401,1)
(171,390,1)
(90,500,1)
(153,94,1)
(460,365,1)
(217,266,1)
(131,349,1)
(295,27,1)
(96,399,1)
(90,69,1)
(333,146,1)
(460,26,1)
(303,108,1)
(256,398,1)
(93,396,1)
(229,13,1)
(323,187,1)
(473,379,1)
(459,69,1)
(374,365,1)
(466,464,1)
(318,2,1)
(403,147,1)
(139,369,1)
(93,71,1)
(272,498,1)
(420,190,1)
(269,464,1)
(417,69,1)
(332,204,1)
(498,217,1)
(262,54,1)
(247,474,1)
(235,116,1)
(465,163,1)
(132,390,1)
(196,390,1)
(118,274,1)
(375,365,1)
(90,459,1)
(234,383,1)
(412,215,1)
(379,233,1)
(417,401,1)
(479,408,1)
(24,252,1)
(375,501,1)
(426,390,1)
(189,119,1)
(188,315,1)
(252,18,1)
(161,89,1)
(443,370,1)
(40,365,1)
(384,71,1)
(475,202,1)
(250,0,1)
(283,387,1)
(81,467,1)
(154,182,1)
(99,222,1)
(330,33,1)
(65,330,1)
(367,47,1)
(47,488,1)
(249,473,1)
(466,311,1)
(221,401,1)
(48,365,1)
(452,354,1)
(415,296,1)
(200,34,1)
(481,452,1)
(410,384,1)
(130,294,1)
(3,365,1)
(223,2,1)
(241,197,1)
(310,18,1)
(0,75,1)
(19,299,1)
(352,225,1)
(216,395,1)
(77,398,1)
(156,365,1)
(262,390,1)
(62,104,1)
(403,66,1)
(416,78,1)
(75,319,1)
(20,308,1)
(52,69,1)
(132,117,1)
(187,110,1)
(262,459,1)
(69,272,1)
(14,90,1)
(341,323,1)
(224,142,1)
(424,63,1)
(368,283,1)
(434,395,1)
(306,390,1)
(93,317,1)
(256,393,1)
(209,238,1)
(148,18,1)
(101,31,1)
(317,269,1)
(255,310,1)
(212,141,1)
(100,25,1)
(374,444,1)
(459,62,1)
(64,487,1)
(198,323,1)
(205,365,1)
(366,193,1)
(418,29,1)
(161,492,1)
(437,68,1)
(459,459,1)
(43,57,1)
(354,201,1)
(358,127,1)
(256,387,1)
(229,24,1)
(304,173,1)
(438,106,1)
(446,251,1)
(400,207,1)
(251,48,1)
(198,153,1)
(313,150,1)
(27,502,1)
(177,464,1)
(34,362,1)
(388,311,1)
(285,29,1)
(492,16,1)
(16,254,1)
(377,455,1)
(175,172,1)
(159,365,1)
(161,390,1)
(146,177,1)
(366,447,1)
(339,368,1)
(502,311,1)
(419,449,1)
(95,32,1)
(179,5,1)
(136,124,1)
(202,17,1)
(338,365,1)
(448,228,1)
(234,337,1)
(411,365,1)
(241,365,1)
(48,304,1)
(204,492,1)
(299,390,1)
(467,448,1)
(230,365,1)
(33,369,1)
(168,463,1)
(421,479,1)
(457,357,1)
(370,25,1)
(65,365,1)
(490,264,1)
(420,205,1)
(440,133,1)
(188,40,1)
(298,172,1)
(240,88,1)
(120,485,1)
(92,22,1)
(320,418,1)
(262,69,1)
(308,124,1)
(429,256,1)
(414,411,1)
(52,401,1)
(307,439,1)
(171,351,1)
(113,273,1)
(118,403,1)
(436,218,1)
(438,365,1)
(181,343,1)
(247,281,1)
(402,129,1)
(496,184,1)
(127,69,1)
(12,406,1)
(388,292,1)
(350,102,1)
(343,329,1)
(116,230,1)
(120,464,1)
(122,161,1)
(56,412,1)
(81,333,1)
(382,482,1)
(413,325,1)
(176,318,1)
(299,237,1)
(383,226,1)
(486,295,1)
(25,446,1)
(115,442,1)
(52,459,1)
(204,390,1)
(63,426,1)
(71,297,1)
(449,210,1)
(89,437,1)
(487,256,1)
(22,128,1)
(351,49,1)
(187,2,1)
(94,4,1)
(483,353,1)
(49,155,1)
(497,365,1)
(436,365,1)
(60,93,1)
(442,145,1)
(191,204,1)
(506,365,1)
(139,25,1)
(338,11,1)
(315,492,1)
(394,439,1)
(401,126,1)
(162,57,1)
(166,361,1)
(7,369,1)
(315,458,1)
(91,365,1)
(160,372,1)
(445,98,1)
(294,50,1)
(29,303,1)
(252,367,1)
(46,348,1)
(399,82,1)
(269,71,1)
(482,400,1)
(141,405,1)
(300,18,1)
(203,56,1)
(218,464,1)
(172,135,1)
(219,421,1)
(232,52,1)
(275,347,1)
(177,18,1)
(426,483,1)
(335,244,1)
(387,302,1)
(361,184,1)
(155,271,1)
(122,492,1)
(117,46,1)
(55,280,1)
(318,4,1)
(464,471,1)
(22,365,1)
(75,365,1)
(465,25,1)
(439,440,1)
(404,45,1)
(60,371,1)
(174,338,1)
(213,55,1)
(308,59,1)
(170,435,1)
(383,424,1)
(393,445,1)
(87,365,1)
(109,312,1)
(333,387,1)
(102,492,1)
(440,270,1)
(384,67,1)
(29,311,1)
(193,492,1)
(0,227,1)
(227,196,1)
(66,464,1)
(370,369,1)
(313,380,1)
(72,144,1)
(300,464,1)
(134,20,1)
(66,18,1)
(162,236,1)
(170,492,1)
(289,279,1)
(23,493,1)
(362,395,1)
(371,121,1)
(412,18,1)
(67,321,1)
(348,226,1)
(126,111,1)
(41,413,1)
(299,492,1)
(193,311,1)
(496,156,1)
(426,311,1)
(436,295,1)
(298,474,1)
(306,402,1)
(66,324,1)
(355,185,1)
(429,159,1)
(227,84,1)
(400,465,1)
(310,464,1)
(333,398,1)
(412,311,1)
(323,318,1)
(305,43,1)
(335,365,1)
(237,122,1)
(386,346,1)
(391,311,1)
(248,243,1)
(456,388,1)
(32,268,1)
(148,464,1)
(59,372,1)
(470,257,1)
(266,14,1)
(414,165,1)
(7,25,1)
(373,306,1)
(264,491,1)
(431,365,1)
(197,186,1)
(314,375,1)
(439,84,1)
(147,66,1)
(120,18,1)
(418,120,1)
(354,365,1)
(112,130,1)
(447,193,1)
(59,366,1)
(120,390,1)
(77,387,1)
(367,464,1)
(485,285,1)
(245,388,1)
(432,216,1)
(100,69,1)
(484,407,1)
(228,333,1)
(391,390,1)
(207,99,1)
(196,219,1)
(151,365,1)
(445,18,1)
(40,235,1)
(144,267,1)
(159,64,1)
(338,484,1)
(37,247,1)
(2,414,1)
(367,18,1)
(205,23,1)
(181,420,1)
(417,459,1)
(268,212,1)
(87,8,1)
(342,355,1)
(11,484,1)
(417,311,1)
(431,109,1)
(90,390,1)
(388,492,1)
(58,221,1)
(319,103,1)
(180,249,1)
(130,365,1)
(499,148,1)
(412,464,1)
(68,365,1)
(178,396,1)
(122,431,1)
(144,25,1)
(378,336,1)
(399,365,1)
(343,132,1)
(3,61,1)
(111,426,1)
(403,390,1)
(267,199,1)
(124,492,1)
(256,274,1)
(98,118,1)
(218,18,1)
(275,365,1)
(151,356,1)
(270,378,1)
(257,170,1)
(181,115,1)
(7,365,1)
(469,352,1)
(221,86,1)
(418,441,1)
(79,21,1)
(45,389,1)
(466,18,1)
(14,113,1)
(222,139,1)
(286,7,1)
(408,434,1)
(372,422,1)
(88,162,1)
(201,178,1)
(274,137,1)
(300,1,1)
(143,171,1)
(7,382,1)
(320,231,1)
(377,365,1)
(255,189,1)
(370,322,1)
(324,143,1)
(145,343,1)
(197,255,1)
(353,391,1)
(416,275,1)
(179,464,1)
(417,131,1)
(220,262,1)
(190,374,1)
(369,313,1)
(124,390,1)
(312,161,1)
(31,180,1)
(17,384,1)
(184,52,1)
(462,78,1)
(207,306,1)
(157,348,1)
(261,486,1)
(158,132,1)
(187,4,1)
(499,179,1)
(94,2,1)
(271,18,1)
(85,96,1)
(94,154,1)
(334,107,1)
(245,456,1)
(82,19,1)
(42,405,1)
(356,314,1)
(86,265,1)
(127,459,1)
(471,289,1)
(129,14,1)
(236,365,1)
(104,207,1)
(329,28,1)
(121,300,1)
(469,365,1)
(8,232,1)
(107,171,1)
(257,311,1)
(163,459,1)
(273,443,1)
(171,49,1)
(501,229,1)
(52,12,1)
(391,363,1)
(61,429,1)
(396,234,1)
(422,136,1)
(347,462,1)
(375,229,1)
(90,401,1)
(193,451,1)
(413,365,1)
(110,176,1)
(306,401,1)
(280,350,1)
(349,358,1)
(500,100,1)
(68,192,1)
(467,365,1)
(491,432,1)
(127,401,1)
(127,390,1)
(405,60,1)
(254,391,1)
(306,69,1)
(278,367,1)
(265,220,1)
(211,290,1)
(296,92,1)
(451,160,1)
(395,497,1)
(271,398,1)
(279,71,1)
(113,144,1)
(493,190,1)
(364,307,1)
(221,262,1)
(440,390,1)
(181,342,1)
(123,211,1)
(439,223,1)
(277,213,1)
(444,496,1)
(310,390,1)
(99,139,1)
(148,390,1)
(29,464,1)
(29,18,1)
(497,320,1)
(179,311,1)
(139,9,1)
(103,432,1)
(268,365,1)
(466,415,1)
(108,441,1)
(362,214,1)
(427,381,1)
(298,175,1)
(54,41,1)
(454,0,1)
(70,299,1)
(252,404,1)
(270,464,1)
(243,198,1)
(77,360,1)
(355,365,1)
(78,151,1)
(55,332,1)
(196,421,1)
(464,464,1)
(172,470,1)
(502,177,1)
(230,79,1)
(9,373,1)
(360,403,1)
(371,390,1)
(279,394,1)
(5,35,1)
(504,93,1)
(252,464,1)
(86,365,1)
(406,127,1)
(488,91,1)
(44,298,1)
(46,383,1)
(389,3,1)
(478,112,1)
(165,411,1)
(318,364,1)
(502,169,1)
(425,478,1)
(472,250,1)
(42,469,1)
(398,263,1)
(234,226,1)
(292,191,1)
(263,183,1)
(464,18,1)
(18,481,1)
(273,370,1)
(49,464,1)
(445,464,1)
(371,300,1)
(133,270,1)
(346,179,1)
(270,18,1)
(252,311,1)
(150,417,1)
(306,459,1)
(445,390,1)
(432,362,1)
(217,25,1)
(218,261,1)
(503,227,1)
(69,459,1)
(455,416,1)
(179,18,1)
(169,95,1)
(153,365,1)
(441,101,1)
(156,166,1)
(381,224,1)
(216,200,1)
(295,30,1)
(280,474,1)
(423,332,1)
(325,286,1)
(337,368,1)
(1,504,1)
(411,168,1)
(322,72,1)
(128,454,1)
(227,434,1)
(421,18,1)
(476,189,1)
(127,58,1)
(425,365,1)
(238,506,1)
(210,37,1)
(310,203,1)
(290,87,1)
(298,365,1)
(196,434,2)
(370,369,2)
(0,403,2)
(281,308,2)
(61,445,2)
(44,299,2)
(295,405,2)
(464,464,2)
(90,14,2)
(478,391,2)
(77,387,2)
(371,93,2)
(421,464,2)
(308,59,2)
(497,365,2)
(436,295,2)
(4,241,2)
(176,318,2)
(144,90,2)
(65,127,2)
(161,299,2)
(417,459,2)
(275,365,2)
(506,365,2)
(362,395,2)
(100,127,2)
(56,384,2)
(203,384,2)
(460,365,2)
(366,193,2)
(49,132,2)
(7,365,2)
(9,306,2)
(204,299,2)
(454,0,2)
(502,177,2)
(115,343,2)
(94,323,2)
(427,384,2)
(148,18,2)
(367,18,2)
(160,372,2)
(412,18,2)
(473,365,2)
(302,132,2)
(37,308,2)
(127,401,2)
(426,311,2)
(179,464,2)
(241,384,2)
(372,474,2)
(378,223,2)
(137,403,2)
(458,391,2)
(130,365,2)
(248,365,2)
(332,245,2)
(320,231,2)
(243,439,2)
(25,127,2)
(426,391,2)
(466,311,2)
(132,348,2)
(29,311,2)
(127,459,2)
(115,365,2)
(271,171,2)
(398,171,2)
(197,255,2)
(94,4,2)
(123,365,2)
(123,52,2)
(319,227,2)
(117,426,2)
(81,171,2)
(425,365,2)
(26,171,2)
(289,60,2)
(229,24,2)
(241,197,2)
(34,362,2)
(198,439,2)
(252,367,2)
(264,432,2)
(99,139,2)
(151,445,2)
(338,0,2)
(3,365,2)
(7,369,2)
(467,333,2)
(271,132,2)
(166,184,2)
(391,390,2)
(317,60,2)
(329,445,2)
(213,299,2)
(255,412,2)
(343,426,2)
(403,390,2)
(396,132,2)
(181,420,2)
(150,417,2)
(60,93,2)
(501,445,2)
(355,365,2)
(270,223,2)
(252,311,2)
(102,332,2)
(71,171,2)
(423,332,2)
(224,384,2)
(440,390,2)
(99,306,2)
(357,391,2)
(52,426,2)
(408,434,2)
(124,492,2)
(394,60,2)
(134,299,2)
(232,52,2)
(209,299,2)
(438,106,2)
(93,396,2)
(177,464,2)
(482,127,2)
(11,0,2)
(270,464,2)
(207,127,2)
(411,365,2)
(372,124,2)
(369,313,2)
(127,127,2)
(361,184,2)
(159,256,2)
(469,365,2)
(445,367,2)
(5,384,2)
(498,14,2)
(374,426,2)
(179,311,2)
(77,398,2)
(124,308,2)
(230,315,2)
(45,445,2)
(377,445,2)
(308,124,2)
(504,93,2)
(85,299,2)
(262,69,2)
(169,405,2)
(448,333,2)
(445,464,2)
(244,0,2)
(277,299,2)
(481,132,2)
(388,492,2)
(476,384,2)
(252,445,2)
(336,223,2)
(410,384,2)
(354,365,2)
(256,445,2)
(193,492,2)
(431,365,2)
(52,459,2)
(387,132,2)
(496,426,2)
(353,391,2)
(190,426,2)
(252,18,2)
(196,390,2)
(308,299,2)
(202,384,2)
(207,99,2)
(375,229,2)
(299,390,2)
(292,204,2)
(449,299,2)
(303,403,2)
(66,18,2)
(310,18,2)
(358,127,2)
(469,405,2)
(407,0,2)
(415,0,2)
(432,362,2)
(122,391,2)
(269,171,2)
(14,113,2)
(139,306,2)
(493,190,2)
(168,384,2)
(419,308,2)
(107,171,2)
(221,127,2)
(49,18,2)
(110,318,2)
(219,434,2)
(279,71,2)
(355,357,2)
(165,384,2)
(177,171,2)
(98,132,2)
(306,390,2)
(179,384,2)
(295,30,2)
(257,299,2)
(313,150,2)
(268,405,2)
(55,299,2)
(346,384,2)
(347,78,2)
(236,365,2)
(93,71,2)
(411,384,2)
(299,391,2)
(58,127,2)
(338,484,2)
(155,171,2)
(352,405,2)
(249,403,2)
(33,127,2)
(304,127,2)
(199,90,2)
(308,308,2)
(268,365,2)
(466,18,2)
(19,299,2)
(436,405,2)
(28,445,2)
(197,186,2)
(136,124,2)
(90,390,2)
(170,299,2)
(69,401,2)
(483,391,2)
(170,474,2)
(338,365,2)
(151,365,2)
(173,127,2)
(132,390,2)
(127,390,2)
(368,132,2)
(69,14,2)
(49,171,2)
(269,60,2)
(459,459,2)
(314,445,2)
(275,78,2)
(418,29,2)
(446,127,2)
(475,384,2)
(47,403,2)
(418,403,2)
(374,365,2)
(381,384,2)
(332,204,2)
(263,171,2)
(255,310,2)
(310,384,2)
(436,365,2)
(22,0,2)
(153,365,2)
(322,144,2)
(313,380,2)
(321,60,2)
(7,127,2)
(172,299,2)
(413,127,2)
(438,432,2)
(117,348,2)
(411,168,2)
(499,427,2)
(273,144,2)
(217,14,2)
(500,127,2)
(473,77,2)
(402,127,2)
(238,299,2)
(414,384,2)
(63,426,2)
(367,464,2)
(227,196,2)
(139,369,2)
(465,25,2)
(29,464,2)
(93,60,2)
(68,299,2)
(60,60,2)
(441,403,2)
(189,384,2)
(159,365,2)
(91,365,2)
(35,384,2)
(52,69,2)
(349,127,2)
(379,77,2)
(436,218,2)
(306,69,2)
(323,439,2)
(320,418,2)
(181,342,2)
(286,127,2)
(429,445,2)
(204,492,2)
(180,403,2)
(298,474,2)
(171,49,2)
(261,405,2)
(272,14,2)
(290,52,2)
(172,135,2)
(325,127,2)
(452,132,2)
(245,204,2)
(86,365,2)
(93,171,2)
(108,403,2)
(168,463,2)
(471,60,2)
(354,132,2)
(113,90,2)
(432,216,2)
(158,132,2)
(27,405,2)
(384,71,2)
(395,403,2)
(366,372,2)
(383,426,2)
(218,18,2)
(102,492,2)
(144,25,2)
(500,14,2)
(171,390,2)
(320,403,2)
(29,18,2)
(24,252,2)
(91,403,2)
(283,132,2)
(119,384,2)
(86,262,2)
(439,60,2)
(204,390,2)
(466,0,2)
(237,391,2)
(499,148,2)
(438,365,2)
(12,426,2)
(48,365,2)
(440,270,2)
(371,300,2)
(156,365,2)
(87,365,2)
(21,315,2)
(148,464,2)
(395,497,2)
(405,171,2)
(251,127,2)
(370,25,2)
(234,383,2)
(218,177,2)
(2,384,2)
(129,127,2)
(252,464,2)
(445,18,2)
(14,90,2)
(128,0,2)
(225,405,2)
(306,459,2)
(161,492,2)
(172,470,2)
(351,132,2)
(335,0,2)
(467,365,2)
(124,299,2)
(142,384,2)
(364,439,2)
(382,127,2)
(124,390,2)
(417,311,2)
(403,132,2)
(451,372,2)
(298,172,2)
(445,390,2)
(403,66,2)
(78,445,2)
(221,426,2)
(66,132,2)
(383,226,2)
(157,348,2)
(457,357,2)
(492,391,2)
(396,234,2)
(178,132,2)
(371,390,2)
(247,474,2)
(351,171,2)
(419,299,2)
(148,384,2)
(389,445,2)
(8,52,2)
(270,18,2)
(485,403,2)
(312,161,2)
(491,432,2)
(254,391,2)
(153,94,2)
(191,204,2)
(62,207,2)
(373,306,2)
(227,84,2)
(280,474,2)
(215,384,2)
(87,52,2)
(130,188,2)
(90,69,2)
(363,348,2)
(257,311,2)
(60,371,2)
(118,132,2)
(391,348,2)
(299,492,2)
(425,391,2)
(447,372,2)
(250,403,2)
(317,171,2)
(298,299,2)
(3,445,2)
(285,403,2)
(412,311,2)
(334,171,2)
(247,308,2)
(60,171,2)
(127,426,2)
(106,432,2)
(31,403,2)
(486,405,2)
(163,207,2)
(449,308,2)
(323,187,2)
(92,0,2)
(400,127,2)
(375,445,2)
(428,445,2)
(174,0,2)
(147,132,2)
(455,445,2)
(502,311,2)
(421,434,2)
(1,93,2)
(333,171,2)
(131,127,2)
(14,14,2)
(307,439,2)
(262,459,2)
(75,227,2)
(216,395,2)
(58,426,2)
(113,144,2)
(22,365,2)
(245,388,2)
(120,390,2)
(59,366,2)
(318,4,2)
(418,441,2)
(506,299,2)
(470,257,2)
(210,308,2)
(296,0,2)
(46,426,2)
(487,256,2)
(465,207,2)
(399,365,2)
(439,440,2)
(503,227,2)
(41,127,2)
(150,127,2)
(220,262,2)
(46,348,2)
(431,161,2)
(139,25,2)
(230,365,2)
(214,227,2)
(443,144,2)
(335,365,2)
(418,120,2)
(255,189,2)
(330,127,2)
(499,384,2)
(234,132,2)
(234,226,2)
(94,2,2)
(265,262,2)
(143,132,2)
(391,311,2)
(484,407,2)
(120,18,2)
(266,14,2)
(155,132,2)
(499,179,2)
(412,464,2)
(279,60,2)
(40,315,2)
(472,403,2)
(75,365,2)
(223,60,2)
(393,445,2)
(69,69,2)
(416,445,2)
(42,171,2)
(103,227,2)
(412,384,2)
(464,18,2)
(474,299,2)
(16,391,2)
(109,161,2)
(386,384,2)
(235,315,2)
(460,171,2)
(68,365,2)
(256,387,2)
(200,362,2)
(196,421,2)
(404,445,2)
(27,502,2)
(343,348,2)
(421,18,2)
(161,390,2)
(300,93,2)
(14,127,2)
(218,464,2)
(207,306,2)
(182,323,2)
(120,403,2)
(24,445,2)
(216,362,2)
(434,403,2)
(257,170,2)
(228,333,2)
(210,492,2)
(183,171,2)
(50,188,2)
(133,223,2)
(116,315,2)
(424,426,2)
(414,411,2)
(201,132,2)
(417,69,2)
(177,18,2)
(168,499,2)
(148,390,2)
(388,311,2)
(407,466,2)
(233,77,2)
(294,188,2)
(154,323,2)
(300,18,2)
(278,403,2)
(280,332,2)
(65,365,2)
(101,403,2)
(497,320,2)
(229,13,2)
(40,365,2)
(310,464,2)
(32,405,2)
(77,403,2)
(341,323,2)
(170,492,2)
(306,127,2)
(193,372,2)
(313,127,2)
(256,274,2)
(179,18,2)
(197,384,2)
(445,132,2)
(248,439,2)
(188,391,2)
(406,426,2)
(273,370,2)
(375,365,2)
(67,60,2)
(297,171,2)
(299,299,2)
(420,426,2)
(333,387,2)
(141,405,2)
(459,207,2)
(23,190,2)
(490,432,2)
(377,365,2)
(205,190,2)
(426,390,2)
(121,93,2)
(227,403,2)
(49,464,2)
(90,401,2)
(497,403,2)
(90,459,2)
(205,365,2)
(64,256,2)
(192,299,2)
(127,69,2)
(18,132,2)
(323,318,2)
(274,403,2)
(442,343,2)
(369,127,2)
(70,391,2)
(175,299,2)
(298,365,2)
(464,60,2)
(488,403,2)
(332,299,2)
(111,426,2)
(318,439,2)
(96,299,2)
(356,445,2)
(370,144,2)
(120,464,2)
(79,315,2)
(2,414,2)
(440,223,2)
(212,405,2)
(310,390,2)
(262,127,2)
(337,368,2)
(262,390,2)
(484,0,2)
(360,403,2)
(459,401,2)
(69,459,2)
(72,144,2)
(437,299,2)
(435,299,2)
(342,391,2)
(146,171,2)
(333,398,2)
(444,426,2)
(171,171,2)
(193,311,2)
(82,299,2)
(229,445,2)
(171,132,2)
(439,84,2)
(187,2,2)
(388,204,2)
(4,384,2)
(132,426,2)
(502,405,2)
(211,52,2)
(59,124,2)
(362,227,2)
(348,226,2)
(185,357,2)
(222,306,2)
(267,90,2)
(295,27,2)
(187,318,2)
(59,372,2)
(100,14,2)
(350,332,2)
(466,464,2)
(90,127,2)
(479,434,2)
(122,299,2)
(484,344,2)
(153,323,2)
(306,401,2)
(459,69,2)
(300,464,2)
(470,299,2)
(89,299,2)
(52,401,2)
(113,273,2)
(315,391,2)
(462,78,2)
(48,127,2)
(29,403,2)
(456,204,2)
(256,398,2)
(126,426,2)
(399,299,2)
(401,426,2)
(66,464,2)
(237,299,2)
(17,384,2)
(156,184,2)
(367,403,2)
(413,365,2)
(104,207,2)
(145,343,2)
(432,227,2)
(318,2,2)
(187,4,2)
(236,57,2)
(262,401,2)
(384,60,2)
(339,368,2)
(43,57,2)
(324,132,2)
(305,57,2)
(417,127,2)
(315,492,2)
(348,240,2)
(422,124,2)
(217,25,2)
(106,395,2)
(112,391,2)
(184,426,2)
(54,127,2)
(255,384,2)
(417,401,2)
(20,299,2)
(7,25,2)
(218,405,2)
(241,365,2)
(95,405,2)
-----------------------------------
(0,show_comment)
(1,3)
(2,plen = fprintf (e, " 0x%lxL",\n\\n\\t\\t\\t\\t(unsigned long)
(3,fprintf (e, "\\"")
(4,plen  = fprintf (e, "0x%lxL",\n\\n\\t\\t\\t\\t (unsigned long)
(5,i)
(6,if (show_comment)
(7,unicode_print (e, u, c)
(8,2)
(9,c)
(10,)
(11,2)
(12,0)
(13,const char *)
(14,i < length && c < 160 && u[c] != \'\\n\')
(15,if (i == 0)
(16,0)
(17,plen)
(18,i = 0)
(19,e)
(20,i)
(21,e)
(22,fprintf (e, "\\t/* ")
(23,"END\\n")
(24,&data[i])
(25,c = 0)
(26,"\\n")
(27,&data[comment_start])
(28,0)
(29,data + i)
(30,const char *)
(31,"0x%x")
(32,e)
(33,e)
(34,plen)
(35,data)
(36,)
(37,i)
(38,if (! first)
(39,)
(40,fprintf (e, "\\"\\"")
(41,i)
(42,e)
(43,e)
(44,e)
(45,data)
(46,length)
(47,2)
(48,fprintf (e, "L\\"")
(49,i + 3)
(50,e)
(51,if (k == 0)
(52,i == 0)
(53,k)
(54,length)
(55,e)
(56,length)
(57,hasblock)
(58,length)
(59,c < 160 && data[i] != \'\\n\')
(60,k < max_row && i + 3 < length)
(61,"\\"")
(62,2)
(63,show_comment)
(64,2)
(65,indent (e, 2)
(66,i + 1)
(67,0)
(68,fprintf (e, "\\"")
(69,i += 2)
(70,i)
(71,k = 0)
(72,u)
(73,if (i + 1 < length)
(74,if (i < length && data[i] == \'\\n\')
(75,fprintf (e, ",")
(76,c)
(77,! first)
(78,has_next)
(79,2)
(80,u)
(81,k)
(82,2)
(83,for (c = 0; i < length && c < 160 && data[i] != \'\\n\'; c++, i++)
(84,int has_next)
(85,"\\"")
(86,fprintf (e, "\\n")
(87,indent (e, 2)
(88,1)
(89,length)
(90,i < length)
(91,fprintf (e, "\\n")
(92,e)
(93,k < max_row)
(94,11 - plen)
(95,data)
(96,e)
(97,if (hasblock)
(98,length)
(99,u[c] == \'\\n\')
(100,i)
(101,wrtarget)
(102,++i)
(103,e)
(104,i)
(105,comment_start)
(106,11 - plen)
(107,comment_start)
(108,data)
(109,"\\n")
(110,11)
(111,i)
(112,e)
(113,c < 160 && u[c] != \'\\n\')
(114,if (test_rc_datablock_unicode (length, data)
(115,fprintf (e, "END\\n")
(116,e)
(117,0)
(118,i)
(119,wrtarget)
(120,length - i)
(121,length)
(122,i)
(123,fprintf (e, "L\\"\\"")
(124,i < length)
(125,)
(126,0)
(127,i < length)
(128,"\\t/* ")
(129,i)
(130,fprintf (e, ",")
(131,i)
(132,length != 0)
(133,length)
(134,length)
(135,const char *)
(136,c)
(137,0)
(138,)
(139,u[c])
(140,if (i < length)
(141,e)
(142,e)
(143,i)
(144,c < 160)
(145,e)
(146,first)
(147,length)
(148,length - i)
(149,plen)
(150,&data[i])
(151,fprintf (e, "\\"")
(152,)
(153,indent (e, 11 - plen)
(154,plen)
(155,3)
(156,fprintf (e, ",")
(157,length)
(158,first)
(159,indent (e, 2)
(160,data)
(161,i < length)
(162,show_comment)
(163,c)
(164,)
(165,1)
(166,",")
(167,)
(168,(unsigned long)
(169,comment_start)
(170,i - c)
(171,i + 3 < length)
(172,(const char *)
(173,e)
(174,e)
(175,c)
(176,plen)
(177,comment_start = i)
(178,e)
(179,data + i)
(180,e)
(181,RET)
(182,11)
(183,first)
(184,has_next)
(185,"END\\n")
(186,unsigned long)
(187,plen < 11)
(188,has_next)
(189,&wrtarget)
(190,hasblock)
(191,data)
(192,"\\"")
(193,data[i])
(194,)
(195,)
(196,i + 2 < length)
(197,(unsigned long)
(198,e)
(199,c)
(200,11)
(201,2)
(202,e)
(203,i)
(204,i < length)
(205,fprintf (e, "END\\n")
(206,if (test_rc_datablock_text(length, data)
(207,i < length && u[c] == \'\\n\')
(208,if (hasblock)
(209,0)
(210,i++)
(211,"L\\"\\"")
(212,"\\t/* ")
(213,data)
(214,0)
(215,i)
(216,plen < 11)
(217,c++)
(218,i - comment_start)
(219,length)
(220,e)
(221,i)
(222,\'\\n\')
(223,has_next)
(224," 0x%lxL")
(225,e)
(226,int show_comment)
(227,has_next || i + 2 < length)
(228,e)
(229,(const char *)
(230,indent (e, 2)
(231,int)
(232,e)
(233,e)
(234,show_comment ? 4 : 8)
(235,"\\"\\"")
(236,fprintf (e, "BEGIN\\n")
(237,length)
(238,c)
(239,)
(240,-1)
(241,fprintf (e, "0x%lxL",\n\\n\\t\\t\\t\\t (unsigned long)
(242,for (i = 0; i + 3 < length;)
(243,",")
(244,".  */")
(245,data[i] == \'\\n\')
(246,if (plen > 0 && plen < 11)
(247,c++)
(248,fprintf (e, ",")
(249,plen)
(250,e)
(251,c)
(252,data[i])
(253,if (plen>0 && plen < 11)
(254,i)
(255,windres_get_32 (&wrtarget, data + i, length - i)
(256,! first)
(257,data[i - c])
(258,if (show_comment == -1)
(259,)
(260,)
(261,comment_start)
(262,i < length)
(263,0)
(264,11)
(265,"\\n")
(266,c)
(267,160)
(268,fprintf (e, "\\t/* ")
(269,k)
(270,i + 4)
(271,i)
(272,2)
(273,u[c] != \'\\n\')
(274,first = 0)
(275,fprintf (e, ",")
(276,)
(277,i)
(278,first)
(279,k++)
(280,++c)
(281,c)
(282,if (hasblock)
(283,max_row)
(284,if (i < length && u[c] == \'\\n\')
(285,length)
(286,e)
(287,)
(288,for (k = 0; k < max_row && i + 3 < length; k++, i += 4)
(289,i)
(290,e)
(291,i)
(292,i)
(293,if (has_next)
(294,",")
(295,(const char *)
(296,data)
(297,0)
(298,ascii_print (e, (const char *)
(299,i < length)
(300,i + 3)
(301,if (length != 0)
(302,1)
(303,i)
(304,"L\\"")
(305,"BEGIN\\n")
(306,i < length)
(307,plen)
(308,i < length && c < 160 && data[i] != \'\\n\')
(309,for (i = 0; i < length;)
(310,length - i)
(311,const bfd_byte *data)
(312,e)
(313,(const unichar *)
(314,e)
(315,i == 0)
(316,if (i < length)
(317,max_row)
(318,plen>0)
(319,",")
(320,(int)
(321,k)
(322,c)
(323,plen>0 && plen < 11)
(324,1)
(325,"\\"")
(326,first)
(327,i)
(328,if (i < length)
(329,first = 0)
(330,2)
(331,)
(332,i < length && data[i] == \'\\n\')
(333,! first)
(334,i)
(335,fprintf (e, ".  */")
(336,i)
(337,8)
(338,ascii_print (e, (const char *)
(339,4)
(340,if (show_comment)
(341,e)
(342,return;)
(343,hasblock)
(344,const char *)
(345,)
(346,length)
(347,",")
(348,show_comment == -1)
(349,data)
(350,c)
(351,length)
(352,".  */")
(353,length)
(354,indent (e, 2)
(355,fprintf (e, "END\\n")
(356,"\\"")
(357,hasblock)
(358,u)
(359,i)
(360,first)
(361,e)
(362,plen > 0)
(363,data)
(364,0)
(365,FILE *e)
(366,data[i] != \'\\n\')
(367,i += 2)
(368,show_comment)
(369,u = (const unichar *)
(370,u[c])
(371,i + 3 < length)
(372,c < 160)
(373,u)
(374,fprintf (e, "\\n")
(375,ascii_print (e, (const char *)
(376,max_row)
(377,fprintf (e, "\\n")
(378,4)
(379,2)
(380,const unichar *)
(381,wrtarget)
(382,c)
(383,show_comment = 0)
(384,k == 0)
(385,c)
(386,i)
(387,first = 1)
(388,data[i])
(389,e)
(390,rc_uint_type length)
(391,test_rc_datablock_text(length, data)
(392,)
(393,first)
(394,k)
(395,plen = fprintf (e, "0x%x",\n\\n\\t  \\t\\t  (int)
(396,max_row = (show_comment ? 4 : 8)
(397,)
(398,first = 0)
(399,indent (e, 2)
(400,e)
(401,i = 0)
(402,length)
(403,i + 1 < length)
(404,i)
(405,show_comment)
(406,i)
(407,&data[i])
(408,i)
(409,)
(410,plen)
(411,fprintf (e, " 0x%lxL",\n\\n\\t\\t\\t\\t(unsigned long)
(412,data + i)
(413,fprintf (e, "\\"")
(414,fprintf (e, " 0x%lxL",\n\\n\\t\\t\\t\\t(unsigned long)
(415,i)
(416,e)
(417,data[i])
(418,windres_get_16 (&wrtarget, data + i, length - i)
(419,length)
(420,return;)
(421,i + 2)
(422,160)
(423,i)
(424,0)
(425,fprintf (e, "\\n")
(426,test_rc_datablock_unicode (length, data)
(427,&wrtarget)
(428,first)
(429,e)
(430,if (has_next || i + 2 < length)
(431,fprintf (e, "\\n")
(432,plen > 0 && plen < 11)
(433,)
(434,has_next)
(435,c)
(436,ascii_print (e, (const char *)
(437,i)
(438,indent (e, 11 - plen)
(439,has_next || (i + 4)
(440,(i + 4)
(441,&wrtarget)
(442,"END\\n")
(443,\'\\n\')
(444,"\\n")
(445,i < length)
(446,0)
(447,\'\\n\')
(448,2)
(449,i)
(450,if (! first)
(451,i)
(452,i)
(453,)
(454,e)
(455,"\\n")
(456,\'\\n\')
(457,e)
(458,0)
(459,i += 2)
(460,fprintf (e, "\\n")
(461,if (i == 0)
(462,e)
(463,unsigned long)
(464,i += 4)
(465,++c)
(466,data[i])
(467,indent (e, 2)
(468,if (has_next || (i + 4)
(469,fprintf (e, ".  */")
(470,&data[i - c])
(471,4)
(472,"\\n")
(473,indent (e, 2)
(474,c = 0)
(475,"0x%lxL")
(476,data)
(477,for (i = 0; i < length;)
(478,"\\n")
(479,2)
(480,for (c = 0; i < length && c < 160 && u[c] != \'\\n\'; c++, i += 2)
(481,0)
(482,u)
(483,data)
(484,(const char *)
(485,i)
(486,i)
(487,e)
(488,i)
(489,if (hasblock)
(490,plen)
(491,e)
(492,i = 0)
(493,e)
(494,if (has_next)
(495,if (has_next)
(496,e)
(497,fprintf (e, "0x%x",\n\\n\\t  \\t\\t  (int)
(498,i)
(499,windres_get_32 (&wrtarget, data + i, length - i)
(500,length)
(501,1)
(502,data[comment_start])
(503,plen)
(504,i)
(505,if (! first)
(506,fprintf (e, "\\"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^