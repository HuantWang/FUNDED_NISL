-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
42,44
43,44
44,45
44,46
46,47
46,48
49,50
49,51
49,52
50,51
50,52
51,52
53,54
53,55
54,55
56,57
58,59
58,60
58,61
58,62
58,63
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
113,114
113,115
114,115
119,120
120,121
120,122
121,122
-----nextToken-----
2,4,9,11,15,16,18,21,25,28,29,30,34,35,36,38,41,45,47,48,52,55,57,62,65,67,70,73,76,77,81,83,88,90,94,96,98,102,104,108,110,115,116,117,118,122,123,124
-----computeFrom-----
13,14
13,15
23,24
23,25
50,51
50,52
60,61
60,62
71,72
71,73
79,80
79,81
-----guardedBy-----
57,98
52,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,16,0)
(45,43,0)
(29,19,0)
(51,9,0)
(19,57,0)
(8,61,0)
(7,18,0)
(25,60,0)
(46,30,0)
(18,33,0)
(39,9,0)
(42,6,0)
(41,60,0)
(54,30,0)
(0,16,0)
(28,16,0)
(9,30,0)
(23,53,0)
(3,43,0)
(33,18,0)
(57,22,0)
(18,60,0)
(20,60,0)
(13,27,0)
(40,55,0)
(26,54,0)
(9,34,0)
(49,39,0)
(10,22,0)
(36,56,0)
(23,56,0)
(15,60,0)
(38,44,0)
(50,34,0)
(34,9,0)
(34,50,0)
(3,18,0)
(56,23,0)
(35,34,0)
(57,18,0)
(2,5,0)
(21,20,0)
(43,3,0)
(54,9,0)
(47,6,0)
(32,22,0)
(3,22,0)
(35,3,0)
(4,60,0)
(39,30,0)
(44,16,0)
(61,9,0)
(22,6,0)
(59,44,0)
(61,30,0)
(55,9,0)
(31,57,0)
(52,3,0)
(27,16,0)
(34,35,0)
(14,55,0)
(48,61,0)
(3,35,0)
(57,19,0)
(5,11,0)
(12,6,0)
(1,16,0)
(2,57,1)
(45,52,1)
(39,9,1)
(57,22,1)
(3,18,1)
(57,18,1)
(51,57,1)
(35,3,1)
(33,7,1)
(37,22,1)
(9,34,1)
(58,4,1)
(61,8,1)
(56,36,1)
(54,9,1)
(36,55,1)
(41,20,1)
(52,51,1)
(55,9,1)
(7,37,1)
(1,27,1)
(48,55,1)
(20,21,1)
(58,41,1)
(14,40,1)
(32,10,1)
(26,61,1)
(5,2,1)
(40,9,1)
(57,19,1)
(0,39,1)
(17,1,1)
(8,48,1)
(61,9,1)
(23,56,1)
(29,31,1)
(27,13,1)
(54,26,1)
(0,5,1)
(22,32,1)
(4,18,1)
(17,0,1)
(34,50,1)
(31,58,1)
(48,23,1)
(21,37,1)
(19,29,1)
(49,54,1)
(55,14,1)
(13,58,1)
(18,33,1)
(39,49,1)
(34,35,1)
(3,43,1)
(43,45,1)
(3,22,1)
(56,55,2)
(14,57,2)
(3,22,2)
(21,37,2)
(23,56,2)
(31,58,2)
(41,37,2)
(54,9,2)
(55,57,2)
(23,55,2)
(3,18,2)
(18,33,2)
(57,19,2)
(18,37,2)
(9,57,2)
(7,37,2)
(35,3,2)
(9,34,2)
(34,50,2)
(34,57,2)
(27,58,2)
(13,58,2)
(3,57,2)
(20,37,2)
(49,57,2)
(33,37,2)
(2,57,2)
(29,58,2)
(39,9,2)
(39,57,2)
(40,57,2)
(19,58,2)
(48,57,2)
(34,35,2)
(5,57,2)
(57,18,2)
(57,58,2)
(43,57,2)
(3,43,2)
(26,57,2)
(54,57,2)
(51,57,2)
(36,55,2)
(57,22,2)
(4,37,2)
(0,58,2)
(61,9,2)
(45,57,2)
(52,57,2)
(61,57,2)
(1,58,2)
(8,57,2)
(55,9,2)
(35,57,2)
-----------------------------------
(0,break;)
(1,break;)
(2,"Input is less than the length of the source string")
(3,data*sizeof(char)
(4,break;)
(5,printLine("Input is less than the length of the source string")
(6,)
(7,data)
(8,HELLO_STRING)
(9,myString = (char *)
(10,data)
(11,)
(12,switch(6)
(13,"Benign, fixed string")
(14,NULL)
(15,case 6:)
(16,)
(17,RET)
(18,data = rand()
(19,strlen(HELLO_STRING)
(20,printLine("Benign, fixed string")
(21,"Benign, fixed string")
(22,data = 0)
(23,exit(-1)
(24,case 7:)
(25,default:)
(26,myString)
(27,printLine("Benign, fixed string")
(28,default:)
(29,HELLO_STRING)
(30,)
(31,data)
(32,0)
(33,rand()
(34,(char *)
(35,malloc(data*sizeof(char)
(36,1)
(37,6)
(38,if (data > strlen(HELLO_STRING)
(39,free(myString)
(40,myString)
(41,break;)
(42,data)
(43,sizeof(char)
(44,)
(45,char)
(46,if (myString == NULL)
(47,switch(7)
(48,myString)
(49,myString)
(50,char *)
(51,myString)
(52,data)
(53,)
(54,printLine(myString)
(55,myString == NULL)
(56,-1)
(57,data > strlen(HELLO_STRING)
(58,7)
(59,myString)
(60,)
(61,strcpy(myString, HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^