-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink(size_t data)
{
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink(size_t data){    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(22,18,0)
(40,12,0)
(36,20,0)
(34,17,0)
(19,5,0)
(14,0,0)
(20,38,0)
(3,38,0)
(39,6,0)
(38,18,0)
(18,38,0)
(33,35,0)
(30,26,0)
(13,15,0)
(20,36,0)
(12,28,0)
(11,14,0)
(16,6,0)
(21,30,0)
(5,21,0)
(7,21,0)
(30,8,0)
(36,0,0)
(25,12,0)
(15,28,0)
(29,28,0)
(35,27,0)
(14,26,0)
(6,39,0)
(9,21,0)
(17,37,0)
(26,30,0)
(32,36,0)
(38,20,0)
(14,24,0)
(23,24,0)
(21,28,0)
(38,0,0)
(24,14,0)
(1,9,0)
(15,21,0)
(39,41,0)
(26,14,0)
(10,17,0)
(30,21,0)
(4,9,0)
(12,21,0)
(8,30,0)
(5,28,0)
(2,36,0)
(18,22,1)
(1,4,1)
(13,12,1)
(5,19,1)
(39,6,1)
(5,21,1)
(14,24,1)
(36,32,1)
(31,35,1)
(20,36,1)
(25,39,1)
(9,1,1)
(20,38,1)
(32,2,1)
(21,30,1)
(16,9,1)
(4,21,1)
(33,20,1)
(15,13,1)
(7,20,1)
(35,33,1)
(12,40,1)
(19,15,1)
(2,38,1)
(11,7,1)
(15,21,1)
(23,11,1)
(38,18,1)
(24,23,1)
(30,8,1)
(25,9,1)
(36,0,1)
(26,14,1)
(12,21,1)
(38,0,1)
(31,5,1)
(30,26,1)
(14,0,1)
(40,25,1)
(22,3,1)
(6,16,1)
(9,21,1)
(36,38,2)
(12,20,2)
(36,0,2)
(11,20,2)
(14,20,2)
(13,20,2)
(24,20,2)
(5,20,2)
(39,9,2)
(21,30,2)
(4,20,2)
(15,21,2)
(38,0,2)
(23,20,2)
(30,26,2)
(32,38,2)
(6,9,2)
(1,20,2)
(14,24,2)
(2,38,2)
(25,20,2)
(30,20,2)
(5,21,2)
(21,20,2)
(30,8,2)
(35,20,2)
(26,20,2)
(20,38,2)
(38,18,2)
(12,21,2)
(16,9,2)
(7,20,2)
(9,21,2)
(9,20,2)
(33,20,2)
(40,20,2)
(20,36,2)
(39,6,2)
(19,20,2)
(26,14,2)
(15,20,2)
(14,0,2)
-----------------------------------
(0,size_t data)
(1,NULL)
(2,data)
(3,data)
(4,myString)
(5,free(myString)
(6,-1)
(7,myString)
(8,char *)
(9,myString == NULL)
(10,myString)
(11,data)
(12,strcpy(myString, HELLO_STRING)
(13,myString)
(14,data*sizeof(char)
(15,printLine(myString)
(16,1)
(17,)
(18,strlen(HELLO_STRING)
(19,myString)
(20,data > strlen(HELLO_STRING)
(21,myString = (char *)
(22,HELLO_STRING)
(23,char)
(24,sizeof(char)
(25,myString)
(26,malloc(data*sizeof(char)
(27,)
(28,)
(29,if (myString == NULL)
(30,(char *)
(31,RET)
(32,100)
(33,"Input is less than the length of the source string or too large")
(34,if (data > strlen(HELLO_STRING)
(35,printLine("Input is less than the length of the source string or too large")
(36,data < 100)
(37,)
(38,data > strlen(HELLO_STRING)
(39,exit(-1)
(40,HELLO_STRING)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^