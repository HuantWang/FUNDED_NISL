-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
41,43
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
51,52
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
58,59
58,60
59,60
61,62
61,63
62,63
62,64
63,64
66,67
68,69
69,70
71,72
72,73
73,74
73,75
74,75
-----nextToken-----
2,4,8,10,14,16,19,24,27,30,36,38,40,45,46,49,50,56,57,60,64,65,67,70,75,76
-----computeFrom-----
12,13
12,14
22,23
22,24
42,43
42,44
43,44
43,45
47,48
47,49
54,55
54,56
58,59
58,60
-----guardedBy-----
49,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(11,7,0)
(27,32,0)
(23,30,0)
(19,30,0)
(32,18,0)
(34,9,0)
(42,0,0)
(24,2,0)
(7,13,0)
(7,2,0)
(22,3,0)
(13,7,0)
(43,7,0)
(1,11,0)
(32,27,0)
(15,9,0)
(11,36,0)
(0,30,0)
(41,32,0)
(5,11,0)
(9,7,0)
(9,15,0)
(9,32,0)
(9,23,0)
(36,11,0)
(33,36,0)
(12,2,0)
(31,40,0)
(40,14,0)
(3,17,0)
(38,13,0)
(11,32,0)
(33,32,0)
(37,40,0)
(25,14,0)
(4,30,0)
(23,9,0)
(10,29,0)
(35,33,0)
(36,33,0)
(16,23,0)
(33,7,0)
(28,33,0)
(8,14,0)
(6,2,0)
(14,39,0)
(33,32,1)
(3,22,1)
(7,13,1)
(38,43,1)
(19,4,1)
(0,42,1)
(23,30,1)
(27,41,1)
(36,11,1)
(16,30,1)
(11,7,1)
(23,9,1)
(34,16,1)
(21,36,1)
(11,1,1)
(9,34,1)
(1,5,1)
(32,27,1)
(33,35,1)
(37,20,1)
(5,40,1)
(26,7,1)
(28,11,1)
(30,19,1)
(33,7,1)
(42,3,1)
(0,30,1)
(21,23,1)
(22,23,1)
(31,37,1)
(9,7,1)
(41,26,1)
(13,38,1)
(16,0,1)
(4,36,1)
(36,33,1)
(20,26,1)
(9,32,1)
(21,20,1)
(40,31,1)
(9,15,1)
(35,28,1)
(20,32,1)
(11,32,1)
(9,32,2)
(11,32,2)
(3,23,2)
(23,9,2)
(1,20,2)
(9,15,2)
(33,7,2)
(32,27,2)
(19,36,2)
(34,23,2)
(5,20,2)
(33,11,2)
(33,32,2)
(28,11,2)
(37,20,2)
(23,23,2)
(40,20,2)
(36,11,2)
(0,30,2)
(16,36,2)
(23,30,2)
(11,20,2)
(23,36,2)
(9,23,2)
(42,23,2)
(32,26,2)
(16,23,2)
(0,23,2)
(27,26,2)
(31,20,2)
(35,11,2)
(7,13,2)
(36,20,2)
(22,23,2)
(30,36,2)
(4,36,2)
(36,33,2)
(11,7,2)
(9,36,2)
(9,7,2)
(41,26,2)
(34,36,2)
-----------------------------------
(0,i++)
(1,0)
(2,)
(3,printLine("Hello")
(4,i)
(5,count)
(6,if(STATIC_CONST_TRUE)
(7,count = -1)
(8,i)
(9,(size_t)
(10,for (i = 0; i < (size_t)
(11,count > 0)
(12,count)
(13,-1)
(14,)
(15,size_t)
(16,i)
(17,)
(18,)
(19,0)
(20,STATIC_CONST_TRUE)
(21,RET)
(22,"Hello")
(23,i < (size_t)
(24,if(STATIC_CONST_TRUE)
(25,if (count > 0 && count <= 20)
(26,STATIC_CONST_TRUE)
(27,RAND32()
(28,count)
(29,)
(30,i = 0)
(31,0)
(32,count = RAND32()
(33,count <= 20)
(34,count)
(35,20)
(36,count > 0 && count <= 20)
(37,i)
(38,1)
(39,)
(40,i = 0)
(41,count)
(42,i)
(43,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^