-----label-----
1
-----code-----
struct socket *
sonewconn(struct socket *head, int connstatus)
{
	struct socket *so;
	struct socket *sp;
	struct pru_attach_info ai;

	if (head->so_qlen > 3 * head->so_qlimit / 2)
		return (NULL);
	so = soalloc(1);
	if (so == NULL)
		return (NULL);
	if ((head->so_options & SO_ACCEPTFILTER) != 0)
		connstatus = 0;
	so->so_head = head;
	so->so_type = head->so_type;
	so->so_options = head->so_options &~ SO_ACCEPTCONN;
	so->so_linger = head->so_linger;
	so->so_state = head->so_state | SS_NOFDREF;
	so->so_proto = head->so_proto;
	so->so_cred = crhold(head->so_cred);
	ai.sb_rlimit = NULL;
	ai.p_ucred = NULL;
	ai.fd_rdir = NULL;		/* jail code cruft XXX JH */
	if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||
	    /* Directly call function since we're already at protocol level. */
	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {
		sodealloc(so);
		return (NULL);
	}
	so->so_rcv.ssb_lowat = head->so_rcv.ssb_lowat;
	so->so_snd.ssb_lowat = head->so_snd.ssb_lowat;
	so->so_rcv.ssb_timeo = head->so_rcv.ssb_timeo;
	so->so_snd.ssb_timeo = head->so_snd.ssb_timeo;
	so->so_rcv.ssb_flags |= head->so_rcv.ssb_flags & SSB_AUTOSIZE;
	so->so_snd.ssb_flags |= head->so_snd.ssb_flags & SSB_AUTOSIZE;
	if (connstatus) {
		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);
		so->so_state |= SS_COMP;
		head->so_qlen++;
	} else {
		if (head->so_incqlen > head->so_qlimit) {
			sp = TAILQ_FIRST(&head->so_incomp);
			TAILQ_REMOVE(&head->so_incomp, sp, so_list);
			head->so_incqlen--;
			sp->so_state &= ~SS_INCOMP;
			sp->so_head = NULL;
			soaborta(sp);
		}
		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);
		so->so_state |= SS_INCOMP;
		head->so_incqlen++;
	}
	if (connstatus) {
		sorwakeup(head);
		wakeup((caddr_t)&head->so_timeo);
		so->so_state |= connstatus;
	}
	return (so);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
38,39
38,40
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
45,47
47,48
47,49
48,49
52,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
77,78
77,79
78,79
78,80
79,80
82,83
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
115,117
116,117
119,120
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
155,156
156,157
156,158
157,158
157,159
158,159
161,162
161,163
162,163
164,165
164,166
165,166
168,169
169,170
169,171
170,171
170,172
171,172
174,175
176,177
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
186,188
187,188
190,191
192,193
192,194
193,194
193,195
194,195
194,196
194,197
194,198
194,199
195,196
197,198
199,200
199,201
200,201
200,202
201,202
205,206
205,207
206,207
206,208
207,208
211,212
213,214
213,215
213,216
213,217
214,215
215,216
216,217
216,218
217,218
217,219
218,219
218,220
219,220
224,225
227,228
228,229
230,231
230,232
231,232
232,233
232,234
233,234
235,236
237,238
238,239
239,240
241,242
242,243
242,244
243,244
243,245
244,245
244,246
245,246
249,250
249,251
250,251
250,252
251,252
255,256
256,257
256,258
257,258
257,259
258,259
258,260
259,260
263,264
263,265
264,265
264,266
265,266
269,270
270,271
270,272
271,272
271,273
272,273
272,274
273,274
277,278
277,279
278,279
278,280
279,280
283,284
284,285
284,286
285,286
285,287
286,287
286,288
287,288
291,292
291,293
292,293
292,294
293,294
297,298
298,299
298,300
299,300
299,301
300,301
300,302
301,302
305,306
305,307
306,307
306,308
307,308
307,309
308,309
312,313
314,315
315,316
315,317
316,317
316,318
317,318
317,319
318,319
322,323
322,324
323,324
323,325
324,325
324,326
325,326
329,330
331,332
331,333
331,334
332,333
334,335
334,336
334,337
335,336
336,337
336,338
336,339
336,340
337,338
339,340
340,341
340,342
341,342
344,345
346,347
348,349
349,350
349,351
350,351
350,352
351,352
354,355
356,357
357,358
358,359
358,360
359,360
362,363
362,364
362,365
362,366
363,364
363,365
364,365
364,366
365,366
365,367
366,367
369,370
369,371
370,371
373,374
373,375
373,376
373,377
373,378
373,379
374,375
375,376
375,377
376,377
378,379
378,380
379,380
381,382
382,383
382,384
383,384
386,387
387,388
387,389
387,390
387,391
388,389
390,391
391,392
391,393
392,393
395,396
397,398
399,400
400,401
401,402
401,403
402,403
405,406
406,407
406,408
407,408
407,409
408,409
411,412
412,413
414,415
415,416
415,417
416,417
416,418
417,418
420,421
422,423
423,424
423,425
424,425
426,427
428,429
429,430
429,431
429,432
429,433
430,431
432,433
433,434
433,435
434,435
437,438
439,440
441,442
442,443
442,444
443,444
443,445
444,445
447,448
449,450
450,451
451,452
451,453
452,453
455,456
455,457
456,457
458,459
458,460
458,461
459,460
460,461
460,462
461,462
463,464
465,466
466,467
466,468
467,468
469,470
469,471
470,471
471,472
473,474
473,475
474,475
477,478
478,479
478,480
479,480
479,481
480,481
483,484
485,486
486,487
487,488
-----nextToken-----
3,5,6,9,11,12,14,16,21,23,24,28,30,31,35,37,42,43,46,49,50,51,55,59,62,63,67,69,73,80,81,83,84,88,89,94,95,97,102,103,106,107,112,113,117,118,121,126,127,130,131,136,137,141,142,144,149,150,153,154,159,160,163,166,167,172,173,175,180,181,183,188,189,191,196,198,202,203,204,208,209,210,212,220,221,222,223,225,226,229,234,236,240,246,247,248,252,253,254,260,261,262,266,267,268,274,275,276,280,281,282,288,289,290,294,295,296,302,303,304,309,310,311,313,319,320,321,326,327,328,330,333,338,342,343,345,347,352,353,355,360,361,367,368,371,372,377,380,384,385,389,393,394,396,398,403,404,409,410,413,418,419,421,425,427,431,435,436,438,440,445,446,448,453,454,457,462,464,468,472,475,476,481,482,484,488
-----computeFrom-----
39,40
39,41
44,45
44,46
45,46
45,47
57,58
57,59
65,66
65,67
75,76
75,77
77,78
77,79
86,87
86,88
91,92
91,93
99,100
99,101
109,110
109,111
114,115
114,116
123,124
123,125
133,134
133,135
138,139
138,140
146,147
146,148
156,157
156,158
169,170
169,171
177,178
177,179
185,186
185,187
193,194
193,195
242,243
242,244
256,257
256,258
270,271
270,272
284,285
284,286
298,299
298,300
305,306
305,307
315,316
315,317
322,323
322,324
349,350
349,351
364,365
364,366
375,376
375,377
406,407
406,408
415,416
415,417
442,443
442,444
469,470
469,471
478,479
478,480
-----guardedBy-----
69,73
212,240
225,236
371,403
368,404
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
struct socket *sonewconn(struct socket *head, int connstatus){	struct socket *so;	struct socket *sp;	struct pru_attach_info ai;	if (head->so_qlen > 3 * head->so_qlimit / 2)		return (NULL);	so = soalloc(1);	if (so == NULL)		return (NULL);	if ((head->so_options & SO_ACCEPTFILTER) != 0)		connstatus = 0;	so->so_head = head;	so->so_type = head->so_type;	so->so_options = head->so_options &~ SO_ACCEPTCONN;	so->so_linger = head->so_linger;	so->so_state = head->so_state | SS_NOFDREF;	so->so_proto = head->so_proto;	so->so_cred = crhold(head->so_cred);	ai.sb_rlimit = NULL;	ai.p_ucred = NULL;	ai.fd_rdir = NULL;		/* jail code cruft XXX JH */	if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {		sodealloc(so);		return (NULL);	}	so->so_rcv.ssb_lowat = head->so_rcv.ssb_lowat;	so->so_snd.ssb_lowat = head->so_snd.ssb_lowat;	so->so_rcv.ssb_timeo = head->so_rcv.ssb_timeo;	so->so_snd.ssb_timeo = head->so_snd.ssb_timeo;	so->so_rcv.ssb_flags |= head->so_rcv.ssb_flags & SSB_AUTOSIZE;	so->so_snd.ssb_flags |= head->so_snd.ssb_flags & SSB_AUTOSIZE;	if (connstatus) {		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	} else {		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}	if (connstatus) {		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}	return (so);}
struct socket
socket
*sonewconn(struct socket *head, int connstatus)
*
sonewconn
struct socket *head
struct socket
socket
*head
*
head
int connstatus
int
connstatus
connstatus
{	struct socket *so;	struct socket *sp;	struct pru_attach_info ai;	if (head->so_qlen > 3 * head->so_qlimit / 2)		return (NULL);	so = soalloc(1);	if (so == NULL)		return (NULL);	if ((head->so_options & SO_ACCEPTFILTER) != 0)		connstatus = 0;	so->so_head = head;	so->so_type = head->so_type;	so->so_options = head->so_options &~ SO_ACCEPTCONN;	so->so_linger = head->so_linger;	so->so_state = head->so_state | SS_NOFDREF;	so->so_proto = head->so_proto;	so->so_cred = crhold(head->so_cred);	ai.sb_rlimit = NULL;	ai.p_ucred = NULL;	ai.fd_rdir = NULL;		/* jail code cruft XXX JH */	if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {		sodealloc(so);		return (NULL);	}	so->so_rcv.ssb_lowat = head->so_rcv.ssb_lowat;	so->so_snd.ssb_lowat = head->so_snd.ssb_lowat;	so->so_rcv.ssb_timeo = head->so_rcv.ssb_timeo;	so->so_snd.ssb_timeo = head->so_snd.ssb_timeo;	so->so_rcv.ssb_flags |= head->so_rcv.ssb_flags & SSB_AUTOSIZE;	so->so_snd.ssb_flags |= head->so_snd.ssb_flags & SSB_AUTOSIZE;	if (connstatus) {		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	} else {		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}	if (connstatus) {		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}	return (so);}
struct socket *so;
struct socket *so;
struct socket
socket
*so
*
so
struct socket *sp;
struct socket *sp;
struct socket
socket
*sp
*
sp
struct pru_attach_info ai;
struct pru_attach_info ai;
struct pru_attach_info
pru_attach_info
ai
ai
if (head->so_qlen > 3 * head->so_qlimit / 2)		return (NULL);
head->so_qlen > 3 * head->so_qlimit / 2
head->so_qlen
head
head
so_qlen
3 * head->so_qlimit / 2
3 * head->so_qlimit
3
head->so_qlimit
head
head
so_qlimit
2
return (NULL);
(NULL)
NULL
NULL
so = soalloc(1);
so = soalloc(1)
so
so
soalloc(1)
soalloc
soalloc
1
if (so == NULL)		return (NULL);
so == NULL
so
so
NULL
NULL
return (NULL);
(NULL)
NULL
NULL
if ((head->so_options & SO_ACCEPTFILTER) != 0)		connstatus = 0;
(head->so_options & SO_ACCEPTFILTER) != 0
(head->so_options & SO_ACCEPTFILTER)
head->so_options & SO_ACCEPTFILTER
head->so_options
head
head
so_options
SO_ACCEPTFILTER
SO_ACCEPTFILTER
0
connstatus = 0;
connstatus = 0
connstatus
connstatus
0
so->so_head = head;
so->so_head = head
so->so_head
so
so
so_head
head
head
so->so_type = head->so_type;
so->so_type = head->so_type
so->so_type
so
so
so_type
head->so_type
head
head
so_type
so->so_options = head->so_options &~ SO_ACCEPTCONN;
so->so_options = head->so_options &~ SO_ACCEPTCONN
so->so_options
so
so
so_options
head->so_options &~ SO_ACCEPTCONN
head->so_options
head
head
so_options
~ SO_ACCEPTCONN
SO_ACCEPTCONN
SO_ACCEPTCONN
so->so_linger = head->so_linger;
so->so_linger = head->so_linger
so->so_linger
so
so
so_linger
head->so_linger
head
head
so_linger
so->so_state = head->so_state | SS_NOFDREF;
so->so_state = head->so_state | SS_NOFDREF
so->so_state
so
so
so_state
head->so_state | SS_NOFDREF
head->so_state
head
head
so_state
SS_NOFDREF
SS_NOFDREF
so->so_proto = head->so_proto;
so->so_proto = head->so_proto
so->so_proto
so
so
so_proto
head->so_proto
head
head
so_proto
so->so_cred = crhold(head->so_cred);
so->so_cred = crhold(head->so_cred)
so->so_cred
so
so
so_cred
crhold(head->so_cred)
crhold
crhold
head->so_cred
head
head
so_cred
ai.sb_rlimit = NULL;
ai.sb_rlimit = NULL
ai.sb_rlimit
ai
ai
sb_rlimit
NULL
NULL
ai.p_ucred = NULL;
ai.p_ucred = NULL
ai.p_ucred
ai
ai
p_ucred
NULL
NULL
ai.fd_rdir = NULL;
ai.fd_rdir = NULL
ai.fd_rdir
ai
ai
fd_rdir
NULL
NULL
if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {		sodealloc(so);		return (NULL);	}
soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)
soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
soreserve
soreserve
so
so
head->so_snd.ssb_hiwat
head->so_snd
head
head
so_snd
ssb_hiwat
head->so_rcv.ssb_hiwat
head->so_rcv
head
head
so_rcv
ssb_hiwat
NULL
NULL
(*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)
(*so->so_proto->pr_usrreqs->pru_attach)
*so->so_proto->pr_usrreqs->pru_attach
so->so_proto->pr_usrreqs->pru_attach
so->so_proto->pr_usrreqs
so->so_proto
so
so
so_proto
pr_usrreqs
pru_attach
so
so
0
&ai
ai
ai
{		sodealloc(so);		return (NULL);	}
sodealloc(so);
sodealloc(so)
sodealloc
sodealloc
so
so
return (NULL);
(NULL)
NULL
NULL
so->so_rcv.ssb_lowat = head->so_rcv.ssb_lowat;
so->so_rcv.ssb_lowat = head->so_rcv.ssb_lowat
so->so_rcv.ssb_lowat
so->so_rcv
so
so
so_rcv
ssb_lowat
head->so_rcv.ssb_lowat
head->so_rcv
head
head
so_rcv
ssb_lowat
so->so_snd.ssb_lowat = head->so_snd.ssb_lowat;
so->so_snd.ssb_lowat = head->so_snd.ssb_lowat
so->so_snd.ssb_lowat
so->so_snd
so
so
so_snd
ssb_lowat
head->so_snd.ssb_lowat
head->so_snd
head
head
so_snd
ssb_lowat
so->so_rcv.ssb_timeo = head->so_rcv.ssb_timeo;
so->so_rcv.ssb_timeo = head->so_rcv.ssb_timeo
so->so_rcv.ssb_timeo
so->so_rcv
so
so
so_rcv
ssb_timeo
head->so_rcv.ssb_timeo
head->so_rcv
head
head
so_rcv
ssb_timeo
so->so_snd.ssb_timeo = head->so_snd.ssb_timeo;
so->so_snd.ssb_timeo = head->so_snd.ssb_timeo
so->so_snd.ssb_timeo
so->so_snd
so
so
so_snd
ssb_timeo
head->so_snd.ssb_timeo
head->so_snd
head
head
so_snd
ssb_timeo
so->so_rcv.ssb_flags |= head->so_rcv.ssb_flags & SSB_AUTOSIZE;
so->so_rcv.ssb_flags |= head->so_rcv.ssb_flags & SSB_AUTOSIZE
so->so_rcv.ssb_flags
so->so_rcv
so
so
so_rcv
ssb_flags
head->so_rcv.ssb_flags & SSB_AUTOSIZE
head->so_rcv.ssb_flags
head->so_rcv
head
head
so_rcv
ssb_flags
SSB_AUTOSIZE
SSB_AUTOSIZE
so->so_snd.ssb_flags |= head->so_snd.ssb_flags & SSB_AUTOSIZE;
so->so_snd.ssb_flags |= head->so_snd.ssb_flags & SSB_AUTOSIZE
so->so_snd.ssb_flags
so->so_snd
so
so
so_snd
ssb_flags
head->so_snd.ssb_flags & SSB_AUTOSIZE
head->so_snd.ssb_flags
head->so_snd
head
head
so_snd
ssb_flags
SSB_AUTOSIZE
SSB_AUTOSIZE
if (connstatus) {		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	} else {		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}
connstatus
connstatus
{		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	}
TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);
TAILQ_INSERT_TAIL(&head->so_comp, so, so_list)
TAILQ_INSERT_TAIL
TAILQ_INSERT_TAIL
&head->so_comp
head->so_comp
head
head
so_comp
so
so
so_list
so_list
so->so_state |= SS_COMP;
so->so_state |= SS_COMP
so->so_state
so
so
so_state
SS_COMP
SS_COMP
head->so_qlen++;
head->so_qlen++
head->so_qlen
head
head
so_qlen
{		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}
if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}
head->so_incqlen > head->so_qlimit
head->so_incqlen
head
head
so_incqlen
head->so_qlimit
head
head
so_qlimit
{			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}
sp = TAILQ_FIRST(&head->so_incomp);
sp = TAILQ_FIRST(&head->so_incomp)
sp
sp
TAILQ_FIRST(&head->so_incomp)
TAILQ_FIRST
TAILQ_FIRST
&head->so_incomp
head->so_incomp
head
head
so_incomp
TAILQ_REMOVE(&head->so_incomp, sp, so_list);
TAILQ_REMOVE(&head->so_incomp, sp, so_list)
TAILQ_REMOVE
TAILQ_REMOVE
&head->so_incomp
head->so_incomp
head
head
so_incomp
sp
sp
so_list
so_list
head->so_incqlen--;
head->so_incqlen--
head->so_incqlen
head
head
so_incqlen
sp->so_state &= ~SS_INCOMP;
sp->so_state &= ~SS_INCOMP
sp->so_state
sp
sp
so_state
~SS_INCOMP
SS_INCOMP
SS_INCOMP
sp->so_head = NULL;
sp->so_head = NULL
sp->so_head
sp
sp
so_head
NULL
NULL
soaborta(sp);
soaborta(sp)
soaborta
soaborta
sp
sp
TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);
TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list)
TAILQ_INSERT_TAIL
TAILQ_INSERT_TAIL
&head->so_incomp
head->so_incomp
head
head
so_incomp
so
so
so_list
so_list
so->so_state |= SS_INCOMP;
so->so_state |= SS_INCOMP
so->so_state
so
so
so_state
SS_INCOMP
SS_INCOMP
head->so_incqlen++;
head->so_incqlen++
head->so_incqlen
head
head
so_incqlen
if (connstatus) {		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}
connstatus
connstatus
{		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}
sorwakeup(head);
sorwakeup(head)
sorwakeup
sorwakeup
head
head
wakeup((caddr_t)&head->so_timeo);
wakeup((caddr_t)&head->so_timeo)
wakeup
wakeup
(caddr_t)&head->so_timeo
(caddr_t)
caddr_t
caddr_t
head->so_timeo
head
head
so_timeo
so->so_state |= connstatus;
so->so_state |= connstatus
so->so_state
so
so
so_state
connstatus
connstatus
return (so);
(so)
so
so
-----joern-----
(117,219,0)
(286,194,0)
(152,248,0)
(81,220,0)
(277,48,0)
(5,125,0)
(195,13,0)
(4,182,0)
(131,65,0)
(168,224,0)
(176,65,0)
(224,38,0)
(264,248,0)
(172,67,0)
(20,220,0)
(294,272,0)
(287,128,0)
(249,288,0)
(190,193,0)
(98,274,0)
(131,154,0)
(47,211,0)
(187,73,0)
(93,220,0)
(72,279,0)
(138,218,0)
(147,248,0)
(39,152,0)
(235,81,0)
(184,73,0)
(151,52,0)
(187,134,0)
(225,187,0)
(26,81,0)
(74,142,0)
(39,246,0)
(87,59,0)
(131,130,0)
(212,274,0)
(70,53,0)
(138,134,0)
(124,236,0)
(133,73,0)
(226,52,0)
(92,27,0)
(52,78,0)
(136,281,0)
(138,224,0)
(244,80,0)
(138,104,0)
(207,104,0)
(178,223,0)
(297,9,0)
(108,220,0)
(285,258,0)
(238,13,0)
(15,196,0)
(261,182,0)
(206,83,0)
(172,184,0)
(13,230,0)
(129,220,0)
(91,101,0)
(252,198,0)
(145,176,0)
(177,196,0)
(259,36,0)
(96,171,0)
(97,151,0)
(59,220,0)
(207,248,0)
(10,108,0)
(138,278,0)
(9,73,0)
(223,220,0)
(115,9,0)
(258,52,0)
(172,7,0)
(60,150,0)
(119,280,0)
(128,248,0)
(131,66,0)
(1,248,0)
(103,229,0)
(22,206,0)
(224,73,0)
(176,211,0)
(286,218,0)
(60,52,0)
(207,74,0)
(181,190,0)
(53,70,0)
(211,73,0)
(222,93,0)
(131,39,0)
(203,74,0)
(176,224,0)
(13,238,0)
(138,272,0)
(52,102,0)
(81,26,0)
(138,211,0)
(246,39,0)
(266,48,0)
(9,159,0)
(231,198,0)
(209,253,0)
(153,15,0)
(281,228,0)
(138,266,0)
(11,125,0)
(57,109,0)
(265,248,0)
(138,65,0)
(131,68,0)
(30,93,0)
(138,84,0)
(247,28,0)
(93,222,0)
(5,102,0)
(88,86,0)
(218,264,0)
(2,108,0)
(179,217,0)
(172,272,0)
(76,176,0)
(57,220,0)
(131,74,0)
(176,184,0)
(201,73,0)
(176,253,0)
(267,78,0)
(175,198,0)
(271,248,0)
(269,151,0)
(188,177,0)
(41,217,0)
(27,220,0)
(17,248,0)
(15,120,0)
(250,105,0)
(142,245,0)
(240,218,0)
(121,15,0)
(244,220,0)
(234,173,0)
(98,159,0)
(116,57,0)
(102,52,0)
(8,178,0)
(131,84,0)
(209,73,0)
(260,264,0)
(239,268,0)
(21,244,0)
(140,73,0)
(33,288,0)
(86,9,0)
(200,289,0)
(48,266,0)
(236,73,0)
(135,101,0)
(231,289,0)
(12,194,0)
(286,211,0)
(65,61,0)
(262,271,0)
(230,207,0)
(207,67,0)
(83,129,0)
(145,268,0)
(173,234,0)
(291,258,0)
(245,142,0)
(146,190,0)
(71,138,0)
(207,84,0)
(164,20,0)
(26,278,0)
(63,276,0)
(172,65,0)
(159,98,0)
(133,67,0)
(125,220,0)
(3,106,0)
(16,267,0)
(176,104,0)
(202,74,0)
(293,135,0)
(229,138,0)
(215,165,0)
(232,217,0)
(176,68,0)
(286,74,0)
(134,187,0)
(9,86,0)
(19,65,0)
(213,28,0)
(44,70,0)
(192,248,0)
(100,133,0)
(184,91,0)
(208,248,0)
(131,258,0)
(144,7,0)
(185,105,0)
(246,73,0)
(0,104,0)
(290,130,0)
(84,73,0)
(43,184,0)
(172,134,0)
(238,220,0)
(28,220,0)
(211,80,0)
(145,128,0)
(261,38,0)
(217,232,0)
(105,220,0)
(172,258,0)
(156,248,0)
(139,222,0)
(67,254,0)
(51,60,0)
(176,84,0)
(131,36,0)
(254,178,0)
(172,224,0)
(251,236,0)
(139,290,0)
(73,118,0)
(6,208,0)
(69,246,0)
(125,5,0)
(256,140,0)
(99,75,0)
(201,272,0)
(138,74,0)
(131,67,0)
(170,220,0)
(198,73,0)
(172,218,0)
(154,172,0)
(49,170,0)
(70,220,0)
(255,68,0)
(243,280,0)
(148,204,0)
(280,220,0)
(109,204,0)
(229,73,0)
(66,236,0)
(236,66,0)
(152,247,0)
(27,173,0)
(289,220,0)
(60,78,0)
(85,188,0)
(37,266,0)
(20,130,0)
(279,150,0)
(131,184,0)
(94,140,0)
(273,129,0)
(18,154,0)
(65,73,0)
(210,65,0)
(7,271,0)
(281,220,0)
(74,73,0)
(9,165,0)
(245,220,0)
(138,39,0)
(131,134,0)
(86,280,0)
(101,135,0)
(95,106,0)
(193,219,0)
(205,105,0)
(41,220,0)
(118,73,0)
(205,194,0)
(159,9,0)
(176,7,0)
(138,184,0)
(140,131,0)
(23,28,0)
(28,247,0)
(126,27,0)
(66,207,0)
(172,74,0)
(176,218,0)
(114,238,0)
(289,231,0)
(254,248,0)
(207,184,0)
(266,286,0)
(25,98,0)
(45,48,0)
(138,68,0)
(284,224,0)
(98,73,0)
(150,279,0)
(165,9,0)
(105,205,0)
(84,265,0)
(172,196,0)
(127,248,0)
(219,220,0)
(270,279,0)
(54,73,0)
(265,109,0)
(131,272,0)
(154,73,0)
(14,230,0)
(83,206,0)
(40,118,0)
(38,248,0)
(286,7,0)
(174,205,0)
(189,201,0)
(90,281,0)
(48,73,0)
(132,93,0)
(286,134,0)
(258,267,0)
(53,206,0)
(207,224,0)
(106,95,0)
(208,220,0)
(176,74,0)
(137,223,0)
(173,27,0)
(183,238,0)
(104,73,0)
(138,7,0)
(172,68,0)
(68,77,0)
(55,77,0)
(233,125,0)
(56,70,0)
(82,52,0)
(275,139,0)
(131,7,0)
(141,184,0)
(29,245,0)
(64,154,0)
(279,220,0)
(163,170,0)
(228,78,0)
(171,73,0)
(110,84,0)
(272,95,0)
(102,5,0)
(131,211,0)
(59,165,0)
(138,66,0)
(298,81,0)
(111,223,0)
(165,59,0)
(42,98,0)
(206,53,0)
(186,171,0)
(31,226,0)
(131,224,0)
(113,41,0)
(32,248,0)
(157,134,0)
(95,248,0)
(194,286,0)
(151,276,0)
(288,220,0)
(188,220,0)
(237,248,0)
(131,259,0)
(230,13,0)
(193,190,0)
(50,66,0)
(178,254,0)
(61,170,0)
(286,66,0)
(77,248,0)
(286,84,0)
(232,248,0)
(219,193,0)
(101,91,0)
(120,15,0)
(226,78,0)
(207,272,0)
(214,53,0)
(143,131,0)
(169,135,0)
(295,219,0)
(73,248,0)
(207,211,0)
(131,266,0)
(79,247,0)
(199,187,0)
(131,229,0)
(207,134,0)
(227,259,0)
(216,244,0)
(167,229,0)
(172,266,0)
(172,39,0)
(276,151,0)
(286,68,0)
(67,133,0)
(89,84,0)
(286,248,0)
(104,208,0)
(257,68,0)
(46,41,0)
(207,7,0)
(190,220,0)
(221,172,0)
(170,61,0)
(80,244,0)
(276,78,0)
(160,182,0)
(158,245,0)
(34,289,0)
(286,104,0)
(172,66,0)
(134,232,0)
(286,65,0)
(286,39,0)
(222,139,0)
(207,39,0)
(292,211,0)
(288,120,0)
(172,104,0)
(241,261,0)
(207,65,0)
(207,230,0)
(155,201,0)
(283,60,0)
(161,57,0)
(182,261,0)
(198,278,0)
(35,133,0)
(61,248,0)
(150,60,0)
(228,281,0)
(194,205,0)
(197,209,0)
(145,75,0)
(177,188,0)
(286,224,0)
(128,73,0)
(290,139,0)
(129,83,0)
(223,178,0)
(286,272,0)
(172,84,0)
(109,57,0)
(120,288,0)
(166,218,0)
(123,173,0)
(286,184,0)
(207,218,0)
(131,104,0)
(162,246,0)
(204,109,0)
(24,234,0)
(80,248,0)
(15,73,0)
(135,220,0)
(131,218,0)
(107,39,0)
(217,41,0)
(172,211,0)
(122,129,0)
(108,106,0)
(139,275,0)
(112,196,0)
(106,108,0)
(91,248,0)
(282,104,0)
(207,68,0)
(142,248,0)
(138,67,0)
(180,59,0)
(242,248,0)
(274,98,0)
(198,231,0)
(149,259,0)
(296,188,0)
(182,220,0)
(109,265,0)
(247,152,0)
(272,201,0)
(58,67,0)
(280,86,0)
(62,7,0)
(286,67,0)
(38,261,0)
(106,108,1)
(37,48,1)
(131,36,1)
(131,224,1)
(34,191,1)
(128,287,1)
(245,29,1)
(41,220,1)
(243,119,1)
(286,67,1)
(189,254,1)
(108,220,1)
(172,258,1)
(259,36,1)
(90,60,1)
(188,220,1)
(223,111,1)
(88,280,1)
(172,266,1)
(117,190,1)
(35,100,1)
(118,40,1)
(29,158,1)
(239,171,1)
(178,8,1)
(269,97,1)
(101,135,1)
(49,163,1)
(285,291,1)
(109,204,1)
(221,154,1)
(60,150,1)
(96,186,1)
(148,57,1)
(207,211,1)
(85,172,1)
(207,68,1)
(23,213,1)
(131,272,1)
(53,70,1)
(286,104,1)
(172,184,1)
(258,52,1)
(138,7,1)
(58,133,1)
(31,267,1)
(217,179,1)
(70,220,1)
(198,73,1)
(158,74,1)
(43,141,1)
(172,134,1)
(176,224,1)
(226,31,1)
(75,99,1)
(279,72,1)
(89,110,1)
(144,91,1)
(76,209,1)
(27,220,1)
(9,86,1)
(131,7,1)
(84,73,1)
(140,73,1)
(263,26,1)
(293,169,1)
(138,71,1)
(244,216,1)
(81,220,1)
(161,116,1)
(159,9,1)
(51,150,1)
(172,272,1)
(209,197,1)
(123,27,1)
(257,255,1)
(38,261,1)
(3,108,1)
(283,51,1)
(10,2,1)
(286,65,1)
(14,13,1)
(138,74,1)
(66,50,1)
(9,297,1)
(138,134,1)
(261,241,1)
(142,245,1)
(111,137,1)
(230,14,1)
(194,205,1)
(200,34,1)
(268,239,1)
(131,229,1)
(2,272,1)
(235,298,1)
(91,101,1)
(207,67,1)
(172,67,1)
(25,9,1)
(236,73,1)
(155,189,1)
(45,277,1)
(263,177,1)
(165,59,1)
(18,15,1)
(206,53,1)
(288,249,1)
(102,5,1)
(266,37,1)
(171,73,1)
(70,44,1)
(21,211,1)
(199,225,1)
(202,38,1)
(211,73,1)
(195,238,1)
(296,85,1)
(80,244,1)
(172,7,1)
(201,155,1)
(173,27,1)
(286,74,1)
(6,104,1)
(98,73,1)
(150,279,1)
(229,73,1)
(115,264,1)
(173,123,1)
(106,3,1)
(198,252,1)
(286,68,1)
(208,220,1)
(292,47,1)
(286,194,1)
(261,182,1)
(295,117,1)
(84,89,1)
(13,195,1)
(100,232,1)
(176,84,1)
(120,288,1)
(65,73,1)
(132,20,1)
(131,184,1)
(172,221,1)
(128,73,1)
(136,90,1)
(131,258,1)
(114,183,1)
(219,220,1)
(109,57,1)
(61,170,1)
(139,222,1)
(298,138,1)
(203,202,1)
(186,73,1)
(40,54,1)
(172,39,1)
(255,271,1)
(214,70,1)
(185,250,1)
(131,259,1)
(282,259,1)
(287,131,1)
(279,220,1)
(180,86,1)
(151,52,1)
(286,184,1)
(172,74,1)
(176,7,1)
(198,231,1)
(20,164,1)
(176,65,1)
(79,28,1)
(233,11,1)
(131,68,1)
(28,220,1)
(65,19,1)
(131,104,1)
(124,251,1)
(125,233,1)
(39,107,1)
(218,166,1)
(272,294,1)
(234,173,1)
(20,220,1)
(56,22,1)
(250,266,1)
(286,211,1)
(145,268,1)
(72,270,1)
(172,84,1)
(176,218,1)
(174,105,1)
(241,182,1)
(157,187,1)
(176,76,1)
(97,228,1)
(131,67,1)
(286,134,1)
(119,115,1)
(247,79,1)
(60,283,1)
(46,134,1)
(7,62,1)
(42,25,1)
(138,68,1)
(287,263,1)
(138,211,1)
(230,13,1)
(187,199,1)
(138,65,1)
(67,133,1)
(8,223,1)
(247,28,1)
(133,35,1)
(131,143,1)
(270,52,1)
(48,45,1)
(138,184,1)
(62,144,1)
(134,157,1)
(246,69,1)
(254,178,1)
(256,94,1)
(205,105,1)
(135,293,1)
(105,220,1)
(205,174,1)
(182,220,1)
(54,83,1)
(207,84,1)
(286,272,1)
(178,223,1)
(131,134,1)
(74,73,1)
(207,218,1)
(133,73,1)
(169,184,1)
(207,272,1)
(145,176,1)
(162,95,1)
(163,65,1)
(86,280,1)
(0,282,1)
(245,220,1)
(212,42,1)
(104,0,1)
(140,256,1)
(244,220,1)
(131,65,1)
(59,87,1)
(262,7,1)
(131,39,1)
(131,84,1)
(13,238,1)
(286,39,1)
(129,273,1)
(194,12,1)
(26,81,1)
(98,274,1)
(252,175,1)
(160,224,1)
(170,49,1)
(190,220,1)
(170,220,1)
(288,220,1)
(15,153,1)
(47,208,1)
(176,211,1)
(210,265,1)
(172,66,1)
(264,260,1)
(149,227,1)
(207,230,1)
(201,73,1)
(104,73,1)
(224,73,1)
(154,64,1)
(204,148,1)
(63,151,1)
(224,284,1)
(9,165,1)
(143,140,1)
(108,10,1)
(44,56,1)
(19,210,1)
(22,129,1)
(176,184,1)
(131,218,1)
(24,173,1)
(276,63,1)
(57,220,1)
(131,266,1)
(271,262,1)
(153,121,1)
(274,212,1)
(281,220,1)
(99,83,1)
(197,159,1)
(138,218,1)
(139,275,1)
(131,74,1)
(207,65,1)
(272,201,1)
(138,272,1)
(86,88,1)
(217,41,1)
(93,220,1)
(289,200,1)
(168,61,1)
(15,73,1)
(193,219,1)
(184,43,1)
(260,218,1)
(289,220,1)
(267,16,1)
(145,75,1)
(172,218,1)
(286,218,1)
(113,46,1)
(52,102,1)
(39,246,1)
(137,67,1)
(92,171,1)
(145,128,1)
(188,296,1)
(28,23,1)
(286,66,1)
(16,258,1)
(12,205,1)
(176,104,1)
(64,18,1)
(207,134,1)
(138,104,1)
(30,132,1)
(179,41,1)
(208,6,1)
(184,73,1)
(207,224,1)
(15,120,1)
(182,4,1)
(265,109,1)
(223,220,1)
(297,165,1)
(207,7,1)
(238,220,1)
(154,73,1)
(176,74,1)
(82,193,1)
(281,136,1)
(27,126,1)
(280,243,1)
(59,220,1)
(231,289,1)
(273,122,1)
(5,125,1)
(121,120,1)
(286,84,1)
(172,224,1)
(190,181,1)
(131,154,1)
(152,247,1)
(240,77,1)
(251,152,1)
(138,84,1)
(126,92,1)
(187,73,1)
(227,234,1)
(209,73,1)
(60,52,1)
(164,263,1)
(215,59,1)
(291,276,1)
(50,236,1)
(284,168,1)
(138,39,1)
(183,66,1)
(177,188,1)
(167,198,1)
(159,98,1)
(53,214,1)
(228,281,1)
(236,124,1)
(172,65,1)
(71,229,1)
(41,113,1)
(181,146,1)
(11,82,1)
(55,68,1)
(225,159,1)
(73,118,1)
(68,257,1)
(4,160,1)
(277,207,1)
(95,106,1)
(238,114,1)
(87,180,1)
(9,73,1)
(191,286,1)
(172,68,1)
(103,167,1)
(67,58,1)
(83,129,1)
(219,295,1)
(176,68,1)
(234,24,1)
(33,193,1)
(138,224,1)
(249,33,1)
(282,234,1)
(266,48,1)
(171,96,1)
(129,220,1)
(229,103,1)
(48,73,1)
(110,80,1)
(193,190,1)
(246,73,1)
(207,184,1)
(116,84,1)
(57,161,1)
(290,139,1)
(207,104,1)
(138,66,1)
(69,162,1)
(66,236,1)
(107,246,1)
(280,220,1)
(216,21,1)
(222,93,1)
(258,285,1)
(276,151,1)
(134,187,1)
(166,240,1)
(226,52,1)
(74,203,1)
(207,39,1)
(135,220,1)
(286,7,1)
(172,104,1)
(131,211,1)
(131,66,1)
(125,220,1)
(259,149,1)
(138,266,1)
(141,142,1)
(165,215,1)
(77,55,1)
(138,67,1)
(207,74,1)
(105,185,1)
(232,217,1)
(213,39,1)
(211,292,1)
(172,211,1)
(175,231,1)
(33,226,1)
(93,30,1)
(286,224,1)
(151,269,1)
(81,235,1)
(94,290,1)
(294,201,1)
(83,206,1)
(146,191,1)
(298,191,2)
(280,171,2)
(209,73,2)
(295,191,2)
(91,171,2)
(155,159,2)
(15,191,2)
(259,234,2)
(201,73,2)
(169,171,2)
(257,171,2)
(154,191,2)
(176,84,2)
(234,173,2)
(176,104,2)
(99,83,2)
(286,272,2)
(138,67,2)
(138,39,2)
(207,68,2)
(76,159,2)
(125,220,2)
(203,171,2)
(195,159,2)
(131,184,2)
(234,171,2)
(228,281,2)
(62,171,2)
(131,263,2)
(207,39,2)
(230,159,2)
(131,258,2)
(109,204,2)
(54,83,2)
(29,171,2)
(9,86,2)
(80,171,2)
(226,52,2)
(38,171,2)
(148,171,2)
(151,52,2)
(276,193,2)
(13,238,2)
(138,272,2)
(102,5,2)
(33,191,2)
(157,159,2)
(177,188,2)
(59,171,2)
(205,159,2)
(98,73,2)
(208,171,2)
(291,193,2)
(61,170,2)
(256,263,2)
(150,279,2)
(45,159,2)
(229,73,2)
(259,36,2)
(286,194,2)
(41,220,2)
(114,159,2)
(20,263,2)
(206,53,2)
(176,224,2)
(231,191,2)
(172,272,2)
(95,159,2)
(131,68,2)
(142,245,2)
(158,171,2)
(222,93,2)
(131,74,2)
(226,193,2)
(176,68,2)
(86,171,2)
(108,159,2)
(207,7,2)
(143,263,2)
(38,261,2)
(162,159,2)
(172,184,2)
(292,171,2)
(53,70,2)
(140,73,2)
(153,191,2)
(137,159,2)
(124,159,2)
(245,220,2)
(296,191,2)
(219,191,2)
(205,105,2)
(221,191,2)
(232,217,2)
(82,193,2)
(138,65,2)
(283,193,2)
(193,190,2)
(246,159,2)
(261,171,2)
(134,187,2)
(286,211,2)
(172,218,2)
(209,159,2)
(172,191,2)
(227,234,2)
(60,150,2)
(57,220,2)
(139,263,2)
(84,73,2)
(115,171,2)
(230,13,2)
(286,67,2)
(70,220,2)
(286,104,2)
(79,159,2)
(286,68,2)
(281,220,2)
(207,218,2)
(7,171,2)
(128,159,2)
(138,104,2)
(104,73,2)
(26,191,2)
(105,220,2)
(286,218,2)
(202,171,2)
(55,171,2)
(190,191,2)
(161,171,2)
(9,165,2)
(23,159,2)
(211,171,2)
(102,193,2)
(233,193,2)
(154,73,2)
(207,65,2)
(189,159,2)
(138,68,2)
(175,191,2)
(19,171,2)
(81,220,2)
(238,220,2)
(37,159,2)
(222,263,2)
(247,28,2)
(159,98,2)
(91,101,2)
(139,222,2)
(31,193,2)
(15,73,2)
(264,171,2)
(120,288,2)
(172,104,2)
(265,171,2)
(20,220,2)
(131,84,2)
(286,39,2)
(172,74,2)
(59,220,2)
(106,159,2)
(40,83,2)
(95,106,2)
(138,191,2)
(167,191,2)
(27,220,2)
(272,201,2)
(286,66,2)
(47,171,2)
(293,171,2)
(110,171,2)
(90,193,2)
(271,171,2)
(277,159,2)
(65,73,2)
(274,9,2)
(254,159,2)
(187,159,2)
(132,263,2)
(131,67,2)
(89,171,2)
(207,84,2)
(131,229,2)
(236,73,2)
(92,171,2)
(289,191,2)
(279,220,2)
(208,220,2)
(120,191,2)
(5,125,2)
(2,159,2)
(218,171,2)
(131,266,2)
(172,68,2)
(67,133,2)
(190,220,2)
(93,263,2)
(98,274,2)
(134,159,2)
(73,118,2)
(238,159,2)
(145,75,2)
(172,65,2)
(265,109,2)
(176,7,2)
(123,171,2)
(65,171,2)
(282,171,2)
(276,151,2)
(39,246,2)
(25,9,2)
(194,205,2)
(49,171,2)
(286,84,2)
(179,159,2)
(131,66,2)
(4,171,2)
(8,159,2)
(266,159,2)
(66,236,2)
(69,159,2)
(207,230,2)
(18,191,2)
(131,211,2)
(171,83,2)
(74,73,2)
(207,74,2)
(83,206,2)
(207,184,2)
(286,184,2)
(6,171,2)
(269,193,2)
(187,73,2)
(144,171,2)
(245,171,2)
(188,191,2)
(13,159,2)
(252,191,2)
(176,65,2)
(185,159,2)
(173,27,2)
(39,159,2)
(149,234,2)
(184,73,2)
(139,275,2)
(24,171,2)
(106,108,2)
(138,134,2)
(250,159,2)
(176,184,2)
(150,193,2)
(141,171,2)
(207,211,2)
(131,104,2)
(16,193,2)
(96,83,2)
(87,171,2)
(181,191,2)
(176,74,2)
(224,171,2)
(244,171,2)
(232,159,2)
(251,159,2)
(97,193,2)
(63,193,2)
(172,66,2)
(84,171,2)
(171,73,2)
(244,220,2)
(255,171,2)
(294,159,2)
(88,171,2)
(286,159,2)
(193,219,2)
(80,244,2)
(131,36,2)
(279,193,2)
(138,7,2)
(199,159,2)
(178,159,2)
(11,193,2)
(172,258,2)
(77,171,2)
(50,159,2)
(215,171,2)
(34,191,2)
(241,171,2)
(138,266,2)
(103,191,2)
(105,159,2)
(266,48,2)
(188,220,2)
(75,83,2)
(207,134,2)
(28,220,2)
(129,220,2)
(131,272,2)
(125,193,2)
(128,73,2)
(272,159,2)
(101,171,2)
(10,159,2)
(236,159,2)
(140,263,2)
(3,159,2)
(182,220,2)
(200,191,2)
(9,73,2)
(113,159,2)
(159,171,2)
(246,73,2)
(261,182,2)
(207,67,2)
(204,171,2)
(284,171,2)
(172,39,2)
(235,191,2)
(12,159,2)
(117,191,2)
(42,9,2)
(0,171,2)
(176,218,2)
(138,224,2)
(177,191,2)
(14,159,2)
(41,159,2)
(160,171,2)
(131,259,2)
(207,224,2)
(165,171,2)
(101,135,2)
(164,263,2)
(35,159,2)
(52,193,2)
(94,263,2)
(223,159,2)
(168,171,2)
(172,266,2)
(216,171,2)
(58,159,2)
(133,73,2)
(138,184,2)
(228,193,2)
(191,159,2)
(48,73,2)
(219,220,2)
(166,171,2)
(81,191,2)
(100,159,2)
(286,224,2)
(98,9,2)
(286,65,2)
(131,134,2)
(21,171,2)
(262,171,2)
(183,159,2)
(146,191,2)
(231,289,2)
(61,171,2)
(131,218,2)
(93,220,2)
(193,191,2)
(142,171,2)
(83,129,2)
(184,171,2)
(194,159,2)
(60,193,2)
(28,159,2)
(66,159,2)
(198,231,2)
(51,193,2)
(71,191,2)
(243,171,2)
(145,268,2)
(85,191,2)
(213,159,2)
(263,159,2)
(239,171,2)
(289,220,2)
(285,193,2)
(270,193,2)
(74,171,2)
(131,7,2)
(57,171,2)
(176,211,2)
(138,211,2)
(5,193,2)
(281,193,2)
(288,191,2)
(152,247,2)
(159,9,2)
(178,223,2)
(68,171,2)
(225,159,2)
(286,74,2)
(133,159,2)
(180,171,2)
(207,272,2)
(172,211,2)
(207,159,2)
(267,193,2)
(290,263,2)
(119,171,2)
(211,73,2)
(9,171,2)
(135,220,2)
(73,83,2)
(172,134,2)
(135,171,2)
(182,171,2)
(198,73,2)
(27,171,2)
(86,280,2)
(247,159,2)
(173,171,2)
(46,159,2)
(172,67,2)
(26,81,2)
(210,171,2)
(268,171,2)
(109,57,2)
(170,171,2)
(176,159,2)
(163,171,2)
(60,52,2)
(286,134,2)
(280,220,2)
(131,39,2)
(201,159,2)
(131,224,2)
(229,191,2)
(131,65,2)
(172,7,2)
(217,41,2)
(170,220,2)
(67,159,2)
(138,218,2)
(108,220,2)
(72,193,2)
(223,220,2)
(165,59,2)
(249,191,2)
(172,84,2)
(198,191,2)
(30,263,2)
(151,193,2)
(288,220,2)
(290,139,2)
(286,7,2)
(52,102,2)
(224,73,2)
(43,171,2)
(197,159,2)
(131,154,2)
(287,159,2)
(240,171,2)
(172,224,2)
(15,120,2)
(64,191,2)
(138,74,2)
(145,176,2)
(116,171,2)
(174,159,2)
(138,66,2)
(104,171,2)
(126,171,2)
(152,159,2)
(186,83,2)
(254,178,2)
(297,171,2)
(111,159,2)
(207,104,2)
(109,171,2)
(212,9,2)
(107,159,2)
(48,159,2)
(121,191,2)
(258,193,2)
(217,159,2)
(136,193,2)
(258,52,2)
(138,84,2)
(145,128,2)
(260,171,2)
(118,83,2)
-----------------------------------
(0,so_head)
(1,if (so == NULL)
(2,head)
(3,ssb_timeo)
(4,so_state)
(5,&head->so_incomp)
(6,head)
(7,ai.sb_rlimit)
(8,ssb_lowat)
(9,soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
(10,so_rcv)
(11,head)
(12,SSB_AUTOSIZE)
(13,head->so_rcv.ssb_flags)
(14,SSB_AUTOSIZE)
(15,TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list)
(16,NULL)
(17,if (connstatus)
(18,so)
(19,so_linger)
(20,sorwakeup(head)
(21,head)
(22,3)
(23,so_snd)
(24,0)
(25,so)
(26,head->so_qlen++)
(27,head->so_options)
(28,head->so_snd)
(29,so_proto)
(30,so_timeo)
(31,sp)
(32,sp)
(33,head)
(34,head)
(35,so_snd)
(36,int connstatus)
(37,ssb_flags)
(38,so->so_state = head->so_state | SS_NOFDREF)
(39,so->so_snd.ssb_timeo)
(40,1)
(41,head->so_rcv)
(42,0)
(43,so_cred)
(44,so_qlimit)
(45,so_snd)
(46,head)
(47,so)
(48,so->so_snd)
(49,so_linger)
(50,ssb_flags)
(51,sp)
(52,sp = TAILQ_FIRST(&head->so_incomp)
(53,head->so_qlimit / 2)
(54,so)
(55,NULL)
(56,head)
(57,head->so_options)
(58,ssb_lowat)
(59,head->so_rcv)
(60,TAILQ_REMOVE(&head->so_incomp, sp, so_list)
(61,so->so_linger = head->so_linger)
(62,sb_rlimit)
(63,~SS_INCOMP)
(64,so_state)
(65,so->so_linger)
(66,so->so_rcv.ssb_flags)
(67,so->so_snd.ssb_lowat)
(68,ai.p_ucred)
(69,so_snd)
(70,head->so_qlimit)
(71,SS_COMP)
(72,so_incomp)
(73,so = soalloc(1)
(74,so->so_proto)
(75,return (NULL)
(76,NULL)
(77,ai.p_ucred = NULL)
(78,)
(79,ssb_timeo)
(80,so->so_type = head->so_type)
(81,head->so_qlen)
(82,sp)
(83,head->so_qlen > 3 * head->so_qlimit / 2)
(84,so->so_options)
(85,head)
(86,head->so_snd.ssb_hiwat)
(87,so_rcv)
(88,ssb_hiwat)
(89,so_options)
(90,head)
(91,so->so_cred = crhold(head->so_cred)
(92,head)
(93,head->so_timeo)
(94,so)
(95,so->so_rcv.ssb_timeo = head->so_rcv.ssb_timeo)
(96,NULL)
(97,sp)
(98,(*so->so_proto->pr_usrreqs->pru_attach)
(99,NULL)
(100,so)
(101,crhold(head->so_cred)
(102,TAILQ_FIRST(&head->so_incomp)
(103,so_state)
(104,so->so_head)
(105,head->so_snd)
(106,head->so_rcv.ssb_timeo)
(107,ssb_timeo)
(108,head->so_rcv)
(109,head->so_options &~ SO_ACCEPTCONN)
(110,so)
(111,so_snd)
(112,if (head->so_incqlen > head->so_qlimit)
(113,so_rcv)
(114,so_rcv)
(115,so)
(116,head)
(117,head)
(118,soalloc(1)
(119,head)
(120,&head->so_incomp)
(121,so)
(122,head)
(123,SO_ACCEPTFILTER)
(124,so_rcv)
(125,head->so_incomp)
(126,so_options)
(127,if (connstatus)
(128,return (so)
(129,head->so_qlen)
(130,)
(131,so->so_state |= connstatus)
(132,head)
(133,so->so_snd)
(134,so->so_rcv.ssb_lowat)
(135,head->so_cred)
(136,so_incqlen)
(137,head)
(138,so->so_state |= SS_COMP)
(139,(caddr_t)
(140,so->so_state)
(141,so)
(142,so->so_proto = head->so_proto)
(143,connstatus)
(144,ai)
(145,RET)
(146,head)
(147,if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
(148,SO_ACCEPTCONN)
(149,0)
(150,&head->so_incomp)
(151,sp->so_state)
(152,so->so_snd.ssb_timeo = head->so_snd.ssb_timeo)
(153,so_list)
(154,so->so_state)
(155,so_rcv)
(156,ai)
(157,ssb_lowat)
(158,head)
(159,soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
(160,head)
(161,so_options)
(162,so)
(163,head)
(164,head)
(165,head->so_rcv.ssb_hiwat)
(166,fd_rdir)
(167,so)
(168,so)
(169,head)
(170,head->so_linger)
(171,so == NULL)
(172,so->so_state |= SS_INCOMP)
(173,head->so_options & SO_ACCEPTFILTER)
(174,ssb_flags)
(175,so)
(176,return (NULL)
(177,head->so_incqlen++)
(178,head->so_snd.ssb_lowat)
(179,ssb_lowat)
(180,head)
(181,so_incqlen)
(182,head->so_state)
(183,head)
(184,so->so_cred)
(185,so_snd)
(186,so)
(187,so->so_rcv)
(188,head->so_incqlen)
(189,so)
(190,head->so_incqlen)
(191,connstatus)
(192,if ((head->so_options & SO_ACCEPTFILTER)
(193,head->so_incqlen > head->so_qlimit)
(194,head->so_snd.ssb_flags & SSB_AUTOSIZE)
(195,ssb_flags)
(196,)
(197,so)
(198,TAILQ_INSERT_TAIL(&head->so_comp, so, so_list)
(199,so_rcv)
(200,so_comp)
(201,so->so_rcv)
(202,so)
(203,so_proto)
(204,~ SO_ACCEPTCONN)
(205,head->so_snd.ssb_flags)
(206,3 * head->so_qlimit / 2)
(207,so->so_rcv.ssb_flags |= head->so_rcv.ssb_flags & SSB_AUTOSIZE)
(208,so->so_head = head)
(209,sodealloc(so)
(210,so)
(211,so->so_type)
(212,ai)
(213,head)
(214,2)
(215,ssb_hiwat)
(216,so_type)
(217,head->so_rcv.ssb_lowat)
(218,ai.fd_rdir)
(219,head->so_qlimit)
(220,struct socket *head)
(221,SS_INCOMP)
(222,&head->so_timeo)
(223,head->so_snd)
(224,so->so_state)
(225,so)
(226,soaborta(sp)
(227,connstatus)
(228,head->so_incqlen--)
(229,so->so_state)
(230,head->so_rcv.ssb_flags & SSB_AUTOSIZE)
(231,&head->so_comp)
(232,so->so_rcv.ssb_lowat = head->so_rcv.ssb_lowat)
(233,so_incomp)
(234,(head->so_options & SO_ACCEPTFILTER)
(235,so_qlen)
(236,so->so_rcv)
(237,if (head->so_qlen > 3 * head->so_qlimit / 2)
(238,head->so_rcv)
(239,NULL)
(240,ai)
(241,SS_NOFDREF)
(242,so)
(243,so_snd)
(244,head->so_type)
(245,head->so_proto)
(246,so->so_snd)
(247,head->so_snd.ssb_timeo)
(248,)
(249,so_incomp)
(250,head)
(251,so)
(252,so_list)
(253,)
(254,so->so_snd.ssb_lowat = head->so_snd.ssb_lowat)
(255,ai)
(256,so_state)
(257,p_ucred)
(258,sp->so_head)
(259,connstatus = 0)
(260,NULL)
(261,head->so_state | SS_NOFDREF)
(262,NULL)
(263,connstatus)
(264,ai.fd_rdir = NULL)
(265,so->so_options = head->so_options &~ SO_ACCEPTCONN)
(266,so->so_snd.ssb_flags)
(267,sp->so_head = NULL)
(268,return (NULL)
(269,so_state)
(270,head)
(271,ai.sb_rlimit = NULL)
(272,so->so_rcv.ssb_timeo)
(273,so_qlen)
(274,&ai)
(275,caddr_t)
(276,sp->so_state &= ~SS_INCOMP)
(277,so)
(278,)
(279,head->so_incomp)
(280,head->so_snd)
(281,head->so_incqlen)
(282,so)
(283,so_list)
(284,so_state)
(285,so_head)
(286,so->so_snd.ssb_flags |= head->so_snd.ssb_flags & SSB_AUTOSIZE)
(287,so)
(288,head->so_incomp)
(289,head->so_comp)
(290,wakeup((caddr_t)
(291,sp)
(292,so_type)
(293,so_cred)
(294,ssb_timeo)
(295,so_qlimit)
(296,so_incqlen)
(297,NULL)
(298,head)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^