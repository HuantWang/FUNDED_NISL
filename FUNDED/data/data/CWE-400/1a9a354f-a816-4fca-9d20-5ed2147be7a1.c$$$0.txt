-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticReturnsTrue())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,20,25,26,30,35,37,38,42,45,47,52,55,57,60,63,66,67,71,73,78,80,84,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
50,51
50,52
61,62
61,63
69,70
69,71
-----guardedBy-----
47,88
42,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(33,11,0)
(41,2,0)
(26,9,0)
(10,30,0)
(39,0,0)
(18,5,0)
(32,4,0)
(19,13,0)
(24,17,0)
(4,0,0)
(46,31,0)
(22,5,0)
(12,17,0)
(14,17,0)
(31,34,0)
(2,41,0)
(7,4,0)
(48,2,0)
(43,36,0)
(4,5,0)
(48,23,0)
(47,21,0)
(29,23,0)
(1,0,0)
(33,9,0)
(20,19,0)
(44,18,0)
(38,34,0)
(21,17,0)
(27,23,0)
(23,48,0)
(35,36,0)
(36,5,0)
(37,31,0)
(3,21,0)
(23,34,0)
(9,33,0)
(18,0,0)
(2,5,0)
(40,39,0)
(5,2,0)
(42,10,0)
(31,21,0)
(2,48,0)
(31,46,0)
(34,49,0)
(45,34,0)
(6,10,0)
(15,29,0)
(39,5,0)
(28,46,0)
(23,29,0)
(5,0,0)
(23,21,0)
(29,15,1)
(32,7,1)
(4,5,1)
(38,25,1)
(44,4,1)
(23,29,1)
(4,32,1)
(25,21,1)
(34,45,1)
(19,20,1)
(36,5,1)
(31,34,1)
(18,44,1)
(9,26,1)
(48,23,1)
(16,25,1)
(35,43,1)
(31,21,1)
(39,5,1)
(46,28,1)
(43,5,1)
(22,31,1)
(20,31,1)
(18,5,1)
(37,16,1)
(23,34,1)
(7,33,1)
(45,38,1)
(27,22,1)
(33,9,1)
(40,18,1)
(8,19,1)
(31,46,1)
(8,16,1)
(2,48,1)
(26,36,1)
(16,34,1)
(15,27,1)
(2,41,1)
(39,40,1)
(23,21,1)
(47,3,1)
(21,47,1)
(8,39,1)
(5,2,1)
(28,37,1)
(7,36,1)
(36,35,1)
(5,2,2)
(33,9,2)
(33,36,2)
(20,31,2)
(44,31,2)
(31,46,2)
(2,48,2)
(48,23,2)
(23,29,2)
(28,16,2)
(26,36,2)
(43,31,2)
(19,31,2)
(32,31,2)
(9,36,2)
(35,31,2)
(15,31,2)
(4,5,2)
(7,31,2)
(38,25,2)
(36,31,2)
(37,16,2)
(5,31,2)
(31,16,2)
(4,31,2)
(34,25,2)
(40,31,2)
(31,34,2)
(39,5,2)
(46,16,2)
(36,5,2)
(31,21,2)
(39,31,2)
(18,31,2)
(23,21,2)
(18,5,2)
(29,31,2)
(45,25,2)
(23,34,2)
(23,31,2)
(2,31,2)
(22,31,2)
(27,31,2)
(48,31,2)
(2,41,2)
-----------------------------------
(0,)
(1,if (myString == NULL)
(2,(char *)
(3,data)
(4,strcpy(myString, HELLO_STRING)
(5,myString = (char *)
(6,if (data > strlen(HELLO_STRING)
(7,myString)
(8,RET)
(9,-1)
(10,)
(11,)
(12,if(staticReturnsTrue()
(13,)
(14,if(staticReturnsTrue()
(15,char)
(16,staticReturnsTrue()
(17,)
(18,printLine(myString)
(19,printLine("Input is less than the length of the source string")
(20,"Input is less than the length of the source string")
(21,data = 0)
(22,myString)
(23,data*sizeof(char)
(24,data)
(25,staticReturnsTrue()
(26,1)
(27,data)
(28,HELLO_STRING)
(29,sizeof(char)
(30,)
(31,data > strlen(HELLO_STRING)
(32,HELLO_STRING)
(33,exit(-1)
(34,data = 20)
(35,NULL)
(36,myString == NULL)
(37,data)
(38,data)
(39,free(myString)
(40,myString)
(41,char *)
(42,myString)
(43,myString)
(44,myString)
(45,20)
(46,strlen(HELLO_STRING)
(47,0)
(48,malloc(data*sizeof(char)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^