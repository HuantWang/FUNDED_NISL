-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad()
{
    while(1)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
66,69
67,68
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,50,54,56,60,63,65,68,70,73,76,77,81,83,88,90,91,95,97,101,103,104
-----computeFrom-----
25,26
25,27
32,33
32,34
58,59
58,60
71,72
71,73
79,80
79,81
-----guardedBy-----
81,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad(){    while(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad
{    while(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }}
while(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }
1
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(42,7,0)
(6,30,0)
(26,32,0)
(22,21,0)
(30,19,0)
(30,6,0)
(29,8,0)
(13,8,0)
(25,20,0)
(7,4,0)
(27,21,0)
(37,3,0)
(23,6,0)
(2,34,0)
(7,42,0)
(30,36,0)
(3,31,0)
(23,34,0)
(16,8,0)
(44,32,0)
(21,7,0)
(41,14,0)
(6,8,0)
(14,0,0)
(2,6,0)
(15,22,0)
(19,30,0)
(43,22,0)
(18,8,0)
(4,44,0)
(9,5,0)
(21,8,0)
(19,31,0)
(24,18,0)
(14,41,0)
(44,4,0)
(39,12,0)
(28,19,0)
(36,30,0)
(17,44,0)
(4,7,0)
(7,21,0)
(10,23,0)
(5,6,0)
(18,21,0)
(8,20,0)
(32,44,0)
(45,5,0)
(19,21,0)
(35,2,0)
(11,41,0)
(31,3,0)
(1,31,0)
(31,19,0)
(40,6,0)
(44,32,1)
(3,37,1)
(17,27,1)
(9,6,1)
(18,21,1)
(25,23,1)
(25,5,1)
(27,33,1)
(37,1,1)
(28,40,1)
(26,17,1)
(5,6,1)
(15,43,1)
(5,45,1)
(30,19,1)
(7,42,1)
(32,26,1)
(18,24,1)
(1,28,1)
(19,21,1)
(24,22,1)
(19,31,1)
(22,15,1)
(31,3,1)
(24,14,1)
(40,18,1)
(23,10,1)
(41,11,1)
(4,44,1)
(2,35,1)
(38,33,1)
(2,6,1)
(11,22,1)
(6,30,1)
(10,2,1)
(23,6,1)
(22,21,1)
(38,25,1)
(30,36,1)
(43,21,1)
(7,4,1)
(35,5,1)
(45,9,1)
(21,7,1)
(14,41,1)
(4,44,2)
(5,6,2)
(5,33,2)
(37,33,2)
(24,33,2)
(44,32,2)
(21,7,2)
(14,41,2)
(7,42,2)
(31,33,2)
(17,33,2)
(45,33,2)
(43,33,2)
(15,33,2)
(19,31,2)
(28,33,2)
(19,33,2)
(40,33,2)
(7,4,2)
(25,33,2)
(30,33,2)
(27,33,2)
(1,33,2)
(30,36,2)
(31,3,2)
(3,33,2)
(32,33,2)
(22,33,2)
(6,30,2)
(4,33,2)
(23,5,2)
(23,6,2)
(41,22,2)
(6,33,2)
(2,5,2)
(7,33,2)
(11,22,2)
(22,21,2)
(35,5,2)
(19,21,2)
(26,33,2)
(14,22,2)
(9,33,2)
(2,6,2)
(10,5,2)
(21,33,2)
(18,21,2)
(30,19,2)
(18,33,2)
(44,33,2)
-----------------------------------
(0,)
(1,130000)
(2,printWLine(data)
(3,sizeof(wchar_t)
(4,malloc(100*sizeof(wchar_t)
(5,data != NULL)
(6,data = (wchar_t *)
(7,(wchar_t *)
(8,)
(9,data)
(10,data)
(11,1)
(12,)
(13,if (data == NULL)
(14,exit(-1)
(15,NULL)
(16,if (data != NULL)
(17,100)
(18,printWLine(data)
(19,realloc(data, (130000)
(20,)
(21,* data = (wchar_t *)
(22,data == NULL)
(23,free(data)
(24,data)
(25,break;)
(26,wchar_t)
(27,data)
(28,data)
(29,data)
(30,(wchar_t *)
(31,(130000)
(32,sizeof(wchar_t)
(33,1)
(34,)
(35,data)
(36,wchar_t *)
(37,wchar_t)
(38,RET)
(39,while(1)
(40,data)
(41,-1)
(42,wchar_t *)
(43,data)
(44,100*sizeof(wchar_t)
(45,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^