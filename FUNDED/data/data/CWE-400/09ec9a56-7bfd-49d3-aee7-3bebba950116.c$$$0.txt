-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(globalFive==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(globalFive==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(33,43,0)
(52,1,0)
(34,33,0)
(48,16,0)
(10,30,0)
(36,11,0)
(49,33,0)
(47,13,0)
(13,47,0)
(15,28,0)
(6,24,0)
(5,8,0)
(7,2,0)
(44,43,0)
(43,13,0)
(47,52,0)
(43,53,0)
(7,32,0)
(0,15,0)
(26,30,0)
(52,2,0)
(3,43,0)
(16,53,0)
(13,14,0)
(7,15,0)
(21,19,0)
(20,25,0)
(30,39,0)
(35,32,0)
(9,25,0)
(40,53,0)
(13,43,0)
(52,47,0)
(51,7,0)
(37,52,0)
(42,2,0)
(8,45,0)
(41,2,0)
(4,25,0)
(44,53,0)
(45,46,0)
(16,43,0)
(40,43,0)
(23,53,0)
(29,40,0)
(31,44,0)
(18,24,0)
(50,16,0)
(27,1,0)
(38,19,0)
(1,52,0)
(22,15,0)
(14,13,0)
(52,15,0)
(45,8,0)
(2,25,0)
(15,22,0)
(32,7,0)
(11,17,0)
(49,34,1)
(12,11,1)
(37,3,1)
(13,47,1)
(7,15,1)
(35,51,1)
(16,48,1)
(27,37,1)
(50,33,1)
(34,43,1)
(29,44,1)
(48,50,1)
(11,36,1)
(40,43,1)
(12,40,1)
(52,1,1)
(52,2,1)
(2,42,1)
(18,19,1)
(1,27,1)
(36,7,1)
(51,24,1)
(7,2,1)
(15,22,1)
(31,16,1)
(44,31,1)
(16,43,1)
(22,0,1)
(0,19,1)
(7,32,1)
(42,41,1)
(33,49,1)
(33,43,1)
(32,35,1)
(50,45,1)
(8,5,1)
(6,18,1)
(38,2,1)
(12,24,1)
(19,21,1)
(21,38,1)
(5,33,1)
(52,15,1)
(43,13,1)
(3,7,1)
(47,52,1)
(18,15,1)
(44,43,1)
(40,29,1)
(13,14,1)
(24,6,1)
(45,8,1)
(33,43,2)
(52,7,2)
(43,13,2)
(52,1,2)
(5,33,2)
(8,33,2)
(52,15,2)
(13,14,2)
(13,7,2)
(34,7,2)
(11,7,2)
(49,7,2)
(40,43,2)
(40,7,2)
(31,7,2)
(16,7,2)
(44,7,2)
(48,7,2)
(43,7,2)
(51,24,2)
(45,33,2)
(16,43,2)
(52,2,2)
(36,7,2)
(50,7,2)
(13,47,2)
(22,19,2)
(27,7,2)
(35,24,2)
(1,7,2)
(29,7,2)
(15,22,2)
(47,7,2)
(32,24,2)
(44,43,2)
(15,19,2)
(45,8,2)
(47,52,2)
(7,24,2)
(33,7,2)
(7,32,2)
(3,7,2)
(37,7,2)
(0,19,2)
(7,15,2)
(7,2,2)
-----------------------------------
(0,data)
(1,sizeof(char)
(2,data = 0)
(3,myString)
(4,data)
(5,1)
(6,5)
(7,data > strlen(HELLO_STRING)
(8,-1)
(9,if(globalFive==5)
(10,if (data > strlen(HELLO_STRING)
(11,printLine("Input is less than the length of the source string")
(12,RET)
(13,(char *)
(14,char *)
(15,data = rand()
(16,strcpy(myString, HELLO_STRING)
(17,)
(18,globalFive)
(19,globalFive==5)
(20,if(globalFive==5)
(21,5)
(22,rand()
(23,if (myString == NULL)
(24,globalFive==5)
(25,)
(26,myString)
(27,char)
(28,)
(29,myString)
(30,)
(31,myString)
(32,strlen(HELLO_STRING)
(33,myString == NULL)
(34,myString)
(35,HELLO_STRING)
(36,"Input is less than the length of the source string")
(37,data)
(38,globalFive)
(39,)
(40,free(myString)
(41,data)
(42,0)
(43,myString = (char *)
(44,printLine(myString)
(45,exit(-1)
(46,)
(47,malloc(data*sizeof(char)
(48,HELLO_STRING)
(49,NULL)
(50,myString)
(51,data)
(52,data*sizeof(char)
(53,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^