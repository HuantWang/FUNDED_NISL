-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(3,20,0)
(45,30,0)
(10,21,0)
(4,0,0)
(26,43,0)
(11,4,0)
(24,0,0)
(43,3,0)
(38,6,0)
(15,22,0)
(43,4,0)
(7,35,0)
(2,27,0)
(29,9,0)
(21,10,0)
(2,6,0)
(52,53,0)
(35,7,0)
(9,20,0)
(2,20,0)
(46,3,0)
(40,42,0)
(25,22,0)
(45,20,0)
(3,43,0)
(30,37,0)
(41,10,0)
(21,35,0)
(35,20,0)
(36,10,0)
(49,20,0)
(48,6,0)
(1,50,0)
(8,2,0)
(35,21,0)
(24,12,0)
(14,45,0)
(18,50,0)
(13,0,0)
(39,5,0)
(30,45,0)
(12,53,0)
(19,41,0)
(31,3,0)
(37,0,0)
(47,42,0)
(28,39,0)
(5,33,0)
(32,53,0)
(51,45,0)
(5,39,0)
(12,24,0)
(34,37,0)
(16,50,0)
(20,0,0)
(20,35,0)
(53,20,0)
(10,41,0)
(6,50,0)
(44,30,0)
(53,12,0)
(23,9,0)
(19,36,1)
(5,39,1)
(40,24,1)
(2,6,1)
(48,38,1)
(22,15,1)
(8,42,1)
(23,20,1)
(3,20,1)
(45,20,1)
(30,45,1)
(26,3,1)
(11,43,1)
(17,2,1)
(43,26,1)
(35,7,1)
(39,28,1)
(52,37,1)
(2,8,1)
(46,9,1)
(4,11,1)
(51,4,1)
(42,47,1)
(34,30,1)
(29,23,1)
(2,20,1)
(20,35,1)
(37,34,1)
(36,49,1)
(25,6,1)
(9,20,1)
(45,14,1)
(44,45,1)
(17,42,1)
(49,22,1)
(53,20,1)
(9,29,1)
(46,5,1)
(21,10,1)
(24,12,1)
(40,22,1)
(14,51,1)
(47,40,1)
(3,31,1)
(35,21,1)
(30,44,1)
(6,48,1)
(43,3,1)
(31,46,1)
(32,52,1)
(12,53,1)
(41,19,1)
(10,41,1)
(15,25,1)
(53,32,1)
(28,9,1)
(19,22,2)
(34,22,2)
(3,22,2)
(53,20,2)
(45,20,2)
(35,21,2)
(28,9,2)
(5,39,2)
(45,22,2)
(36,22,2)
(3,20,2)
(44,22,2)
(49,22,2)
(2,42,2)
(10,22,2)
(2,20,2)
(12,22,2)
(21,10,2)
(24,12,2)
(53,22,2)
(35,7,2)
(24,22,2)
(4,22,2)
(35,22,2)
(2,6,2)
(30,22,2)
(43,22,2)
(37,22,2)
(21,22,2)
(11,22,2)
(31,22,2)
(41,22,2)
(52,22,2)
(20,35,2)
(12,53,2)
(10,41,2)
(30,45,2)
(8,42,2)
(23,22,2)
(14,22,2)
(29,22,2)
(5,9,2)
(9,22,2)
(51,22,2)
(20,22,2)
(43,3,2)
(9,20,2)
(32,22,2)
(46,22,2)
(26,22,2)
(39,9,2)
-----------------------------------
(0,)
(1,if(GLOBAL_CONST_FIVE==5)
(2,free(data)
(3,data[0])
(4,data[0].intOne = 0)
(5,exit(-1)
(6,data = NULL)
(7,twoIntsStruct *)
(8,data)
(9,data == NULL)
(10,100*sizeof(twoIntsStruct)
(11,0)
(12,&data[0])
(13,if (data == NULL)
(14,0)
(15,5)
(16,data)
(17,RET)
(18,if(GLOBAL_CONST_FIVE==5)
(19,twoIntsStruct)
(20,data = (twoIntsStruct *)
(21,malloc(100*sizeof(twoIntsStruct)
(22,GLOBAL_CONST_FIVE==5)
(23,data)
(24,printStructLine(&data[0])
(25,GLOBAL_CONST_FIVE)
(26,intOne)
(27,)
(28,1)
(29,NULL)
(30,data[0].intTwo)
(31,0)
(32,0)
(33,)
(34,0)
(35,(twoIntsStruct *)
(36,100)
(37,data[0].intTwo = 0)
(38,data)
(39,-1)
(40,GLOBAL_CONST_FIVE)
(41,sizeof(twoIntsStruct)
(42,GLOBAL_CONST_FIVE==5)
(43,data[0].intOne)
(44,intTwo)
(45,data[0])
(46,data)
(47,5)
(48,NULL)
(49,data)
(50,)
(51,data)
(52,data)
(53,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^