-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    for(k = 0; k < 1; k++)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
53,54
55,56
55,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
97,98
98,99
98,100
99,100
102,103
102,104
102,105
102,106
103,104
104,105
104,106
105,106
108,109
108,110
109,110
112,113
113,114
115,116
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,56,60,61,65,67,72,74,80,81,82,83,89,90,91,92,96,100,101,106,107,110,111,114,119,121
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
55,56
55,57
63,64
63,65
76,77
76,78
85,86
85,87
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int i,k;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    int i,k;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }}
int i,k;
int i,k;
int
i
i
k
k
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(63,21,0)
(20,40,0)
(59,36,0)
(36,59,0)
(21,64,0)
(26,2,0)
(6,45,0)
(13,62,0)
(64,58,0)
(45,12,0)
(62,46,0)
(7,9,0)
(39,23,0)
(1,9,0)
(33,14,0)
(51,12,0)
(21,48,0)
(43,41,0)
(64,45,0)
(16,0,0)
(12,48,0)
(9,29,0)
(15,50,0)
(31,44,0)
(45,64,0)
(30,51,0)
(46,64,0)
(36,41,0)
(39,40,0)
(10,50,0)
(59,64,0)
(65,59,0)
(12,64,0)
(61,14,0)
(42,59,0)
(9,64,0)
(5,18,0)
(51,30,0)
(3,4,0)
(52,44,0)
(66,44,0)
(54,58,0)
(55,33,0)
(2,14,0)
(21,28,0)
(29,9,0)
(27,64,0)
(53,4,0)
(35,30,0)
(25,50,0)
(12,51,0)
(57,18,0)
(38,29,0)
(41,58,0)
(24,50,0)
(18,64,0)
(62,13,0)
(13,58,0)
(17,52,0)
(0,58,0)
(11,46,0)
(47,51,0)
(45,6,0)
(22,14,0)
(48,50,0)
(4,44,0)
(56,12,0)
(32,36,0)
(29,0,0)
(8,48,0)
(34,2,0)
(12,45,0)
(60,46,0)
(46,62,0)
(37,50,0)
(19,48,0)
(40,39,0)
(49,2,1)
(30,35,1)
(52,44,1)
(21,63,1)
(13,62,1)
(16,29,1)
(36,32,1)
(26,34,1)
(47,56,1)
(42,65,1)
(46,64,1)
(53,52,1)
(12,64,1)
(21,64,1)
(53,44,1)
(62,46,1)
(31,48,1)
(64,45,1)
(52,17,1)
(9,64,1)
(9,1,1)
(14,61,1)
(21,48,1)
(20,18,1)
(61,22,1)
(66,31,1)
(18,64,1)
(0,16,1)
(5,64,1)
(48,8,1)
(45,12,1)
(29,38,1)
(3,53,1)
(11,0,1)
(65,39,1)
(7,41,1)
(63,2,1)
(44,66,1)
(36,59,1)
(32,59,1)
(51,30,1)
(60,11,1)
(34,33,1)
(27,4,1)
(4,3,1)
(29,9,1)
(56,27,1)
(12,51,1)
(17,13,1)
(59,64,1)
(2,14,1)
(65,18,1)
(2,26,1)
(39,40,1)
(38,9,1)
(12,48,1)
(43,36,1)
(8,19,1)
(40,20,1)
(33,55,1)
(55,21,1)
(35,47,1)
(18,57,1)
(1,7,1)
(57,5,1)
(34,14,1)
(46,60,1)
(59,42,1)
(45,6,1)
(33,14,1)
(4,44,1)
(22,4,1)
(41,43,1)
(53,4,2)
(4,44,2)
(34,2,2)
(30,4,2)
(45,4,2)
(12,51,2)
(33,2,2)
(43,4,2)
(12,48,2)
(36,4,2)
(46,4,2)
(21,64,2)
(12,4,2)
(63,2,2)
(21,2,2)
(56,4,2)
(2,2,2)
(32,4,2)
(17,4,2)
(26,2,2)
(7,4,2)
(1,4,2)
(52,44,2)
(64,4,2)
(13,62,2)
(57,4,2)
(47,4,2)
(42,4,2)
(45,12,2)
(62,4,2)
(62,46,2)
(39,18,2)
(27,4,2)
(9,64,2)
(40,18,2)
(11,4,2)
(12,64,2)
(3,4,2)
(16,4,2)
(59,4,2)
(65,4,2)
(41,4,2)
(13,4,2)
(55,2,2)
(21,48,2)
(46,64,2)
(18,4,2)
(33,14,2)
(52,4,2)
(20,18,2)
(29,4,2)
(18,64,2)
(29,9,2)
(9,4,2)
(35,4,2)
(0,4,2)
(38,4,2)
(4,4,2)
(45,6,2)
(5,4,2)
(59,64,2)
(64,45,2)
(51,30,2)
(39,40,2)
(51,4,2)
(60,4,2)
(2,14,2)
(36,59,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,0)
(2,k < 1)
(3,1)
(4,i < 1)
(5,data)
(6,twoIntsStruct *)
(7,data)
(8,NULL)
(9,data[0])
(10,i)
(11,data)
(12,realloc(data, 100*sizeof(twoIntsStruct)
(13,printStructLine(&data[0])
(14,k = 0)
(15,for(k = 0; k < 1; k++)
(16,0)
(17,i)
(18,data == NULL)
(19,data)
(20,1)
(21,free(data)
(22,k)
(23,)
(24,k)
(25,for(i = 0; i < 1; i++)
(26,1)
(27,data)
(28,)
(29,data[0].intTwo)
(30,sizeof(twoIntsStruct)
(31,i)
(32,intOne)
(33,k++)
(34,k)
(35,twoIntsStruct)
(36,data[0].intOne)
(37,data)
(38,intTwo)
(39,exit(-1)
(40,-1)
(41,data[0].intOne = 0)
(42,0)
(43,0)
(44,i = 0)
(45,(twoIntsStruct *)
(46,data[0])
(47,100)
(48,data = NULL)
(49,RET)
(50,)
(51,100*sizeof(twoIntsStruct)
(52,i++)
(53,i)
(54,if (data == NULL)
(55,k)
(56,data)
(57,NULL)
(58,)
(59,data[0])
(60,0)
(61,0)
(62,&data[0])
(63,data)
(64,data = (twoIntsStruct *)
(65,data)
(66,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^