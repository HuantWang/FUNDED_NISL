-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalReturnsTrue())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
57,59
58,59
61,62
63,64
64,65
66,67
67,68
68,69
68,70
69,70
-----nextToken-----
2,4,8,10,14,16,20,25,26,31,32,36,42,44,46,51,52,55,59,60,62,65,70,71
-----computeFrom-----
12,13
12,14
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(28,8,0)
(23,9,0)
(10,13,0)
(21,12,0)
(10,9,0)
(29,36,0)
(32,34,0)
(24,11,0)
(0,13,0)
(8,6,0)
(16,34,0)
(11,4,0)
(30,29,0)
(13,10,0)
(5,11,0)
(3,7,0)
(15,30,0)
(35,6,0)
(12,18,0)
(20,9,0)
(37,29,0)
(29,11,0)
(27,9,0)
(7,33,0)
(29,10,0)
(1,8,0)
(30,34,0)
(14,10,0)
(26,6,0)
(25,34,0)
(36,29,0)
(19,25,0)
(6,31,0)
(29,30,0)
(8,28,1)
(22,10,1)
(13,0,1)
(25,34,1)
(19,12,1)
(29,11,1)
(3,22,1)
(30,34,1)
(17,2,1)
(5,22,1)
(25,19,1)
(29,36,1)
(15,34,1)
(24,5,1)
(7,3,1)
(2,7,1)
(16,8,1)
(34,32,1)
(0,14,1)
(32,16,1)
(15,25,1)
(10,13,1)
(1,2,1)
(17,30,1)
(12,21,1)
(37,15,1)
(29,37,1)
(29,10,1)
(28,1,1)
(21,30,1)
(30,29,1)
(11,24,1)
(2,11,1)
(7,22,2)
(25,30,2)
(19,30,2)
(30,30,2)
(25,34,2)
(15,30,2)
(32,2,2)
(24,22,2)
(15,2,2)
(29,2,2)
(29,36,2)
(8,2,2)
(28,2,2)
(37,2,2)
(34,2,2)
(16,2,2)
(3,22,2)
(29,30,2)
(12,30,2)
(11,22,2)
(29,11,2)
(5,22,2)
(37,30,2)
(29,10,2)
(30,29,2)
(30,2,2)
(21,30,2)
(30,34,2)
(1,2,2)
(10,13,2)
-----------------------------------
(0,1)
(1,i)
(2,globalReturnsTrue()
(3,"Benign, fixed string")
(4,)
(5,count)
(6,)
(7,printLine("Benign, fixed string")
(8,i = 0)
(9,)
(10,count = -1)
(11,count = 20)
(12,printLine("Hello")
(13,-1)
(14,count)
(15,i)
(16,i)
(17,RET)
(18,)
(19,i)
(20,count)
(21,"Hello")
(22,globalReturnsFalse()
(23,if(globalReturnsFalse()
(24,20)
(25,i++)
(26,for (i = 0; i < (size_t)
(27,if(globalReturnsTrue()
(28,0)
(29,(size_t)
(30,i < (size_t)
(31,)
(32,0)
(33,)
(34,i = 0)
(35,i)
(36,size_t)
(37,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^