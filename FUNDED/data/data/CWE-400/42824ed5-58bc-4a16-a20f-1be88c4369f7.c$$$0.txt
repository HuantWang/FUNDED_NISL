-----label-----
0
-----code-----
static void good1()
{
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
19,20
20,21
20,22
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
66,67
67,68
67,69
68,69
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
81,82
83,84
83,85
83,86
84,85
86,87
88,89
88,90
89,90
91,92
92,93
92,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
101,104
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
115,116
116,117
116,118
117,118
119,120
119,121
120,121
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,9,10,15,16,21,23,24,28,30,33,35,38,39,43,45,50,52,55,57,58,63,64,65,69,72,73,77,80,82,85,87,90,93,94,98,100,105,107,112,113,114,118,121,122,126,128
-----computeFrom-----
7,8
7,9
34,35
34,36
41,42
41,43
60,61
60,62
75,76
75,77
88,89
88,90
96,97
96,98
103,104
103,105
109,110
109,111
-----guardedBy-----
98,107
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(60,3,0)
(11,23,0)
(48,66,0)
(9,4,0)
(1,66,0)
(18,63,0)
(48,44,0)
(23,11,0)
(55,44,0)
(54,13,0)
(56,16,0)
(38,33,0)
(57,44,0)
(47,50,0)
(7,3,0)
(31,29,0)
(38,60,0)
(12,19,0)
(30,42,0)
(41,43,0)
(42,40,0)
(13,9,0)
(8,44,0)
(21,56,0)
(30,29,0)
(29,30,0)
(40,6,0)
(44,52,0)
(66,48,0)
(43,40,0)
(5,25,0)
(10,63,0)
(43,44,0)
(17,11,0)
(26,8,0)
(25,33,0)
(56,21,0)
(2,15,0)
(40,42,0)
(16,44,0)
(14,44,0)
(14,16,0)
(3,33,0)
(15,16,0)
(66,16,0)
(53,25,0)
(60,38,0)
(14,25,0)
(42,30,0)
(34,3,0)
(60,8,0)
(9,13,0)
(51,64,0)
(28,32,0)
(46,16,0)
(7,25,0)
(36,44,0)
(16,56,0)
(60,25,0)
(24,30,0)
(62,50,0)
(58,66,0)
(45,7,0)
(40,43,0)
(39,44,0)
(22,60,0)
(0,15,0)
(15,8,0)
(67,9,0)
(63,16,0)
(4,56,0)
(37,28,0)
(6,40,0)
(4,9,0)
(65,64,0)
(50,43,0)
(35,7,0)
(25,43,0)
(56,4,0)
(49,42,0)
(59,60,0)
(23,61,0)
(42,16,0)
(66,8,0)
(27,14,0)
(60,25,1)
(16,56,1)
(49,41,1)
(41,48,1)
(27,50,1)
(25,53,1)
(66,16,1)
(25,43,1)
(43,40,1)
(42,16,1)
(66,8,1)
(13,54,1)
(20,14,1)
(47,62,1)
(8,26,1)
(38,60,1)
(15,0,1)
(23,11,1)
(42,30,1)
(34,7,1)
(15,16,1)
(67,46,1)
(18,10,1)
(50,43,1)
(20,28,1)
(54,67,1)
(5,50,1)
(31,24,1)
(59,3,1)
(37,64,1)
(62,43,1)
(60,3,1)
(0,2,1)
(40,42,1)
(2,63,1)
(28,37,1)
(40,6,1)
(10,16,1)
(56,4,1)
(11,17,1)
(22,59,1)
(50,47,1)
(14,16,1)
(29,31,1)
(53,5,1)
(24,49,1)
(30,29,1)
(17,63,1)
(45,25,1)
(4,9,1)
(56,21,1)
(26,15,1)
(48,66,1)
(60,22,1)
(66,1,1)
(60,8,1)
(64,65,1)
(14,25,1)
(2,23,1)
(1,58,1)
(7,25,1)
(58,8,1)
(14,27,1)
(46,64,1)
(63,16,1)
(9,13,1)
(35,45,1)
(3,34,1)
(65,51,1)
(7,35,1)
(63,18,1)
(27,38,1)
(23,63,2)
(59,50,2)
(14,16,2)
(27,64,2)
(29,64,2)
(66,16,2)
(15,16,2)
(0,64,2)
(2,64,2)
(18,64,2)
(56,64,2)
(17,63,2)
(23,11,2)
(53,50,2)
(28,64,2)
(43,64,2)
(63,16,2)
(38,60,2)
(42,30,2)
(31,64,2)
(40,6,2)
(60,25,2)
(58,64,2)
(8,64,2)
(47,64,2)
(34,50,2)
(41,64,2)
(4,64,2)
(13,64,2)
(35,50,2)
(24,64,2)
(66,8,2)
(9,64,2)
(63,64,2)
(46,64,2)
(56,21,2)
(25,43,2)
(50,43,2)
(42,64,2)
(4,9,2)
(60,8,2)
(40,42,2)
(14,25,2)
(26,64,2)
(9,13,2)
(48,64,2)
(60,3,2)
(40,64,2)
(37,64,2)
(56,4,2)
(7,50,2)
(60,50,2)
(45,50,2)
(5,50,2)
(42,16,2)
(30,64,2)
(62,64,2)
(11,63,2)
(22,50,2)
(3,50,2)
(50,64,2)
(10,64,2)
(54,64,2)
(16,56,2)
(14,64,2)
(15,64,2)
(25,50,2)
(49,64,2)
(16,64,2)
(1,64,2)
(43,40,2)
(38,50,2)
(66,64,2)
(48,66,2)
(7,25,2)
(30,29,2)
(67,64,2)
-----------------------------------
(0,0)
(1,0)
(2,data)
(3,data[0] = 10)
(4,malloc(100*sizeof(int)
(5,data)
(6,int *)
(7,data[0])
(8,data[0] = 5)
(9,100*sizeof(int)
(10,data)
(11,-1)
(12,if(staticFive!=5)
(13,sizeof(int)
(14,free(data)
(15,data[0])
(16,* data = (int *)
(17,1)
(18,NULL)
(19,)
(20,RET)
(21,int *)
(22,0)
(23,exit(-1)
(24,130000)
(25,data = tmpData)
(26,5)
(27,data)
(28,printLine("Benign, fixed string")
(29,sizeof(int)
(30,(130000)
(31,int)
(32,)
(33,)
(34,10)
(35,0)
(36,if (data == NULL)
(37,"Benign, fixed string")
(38,printIntLine(data[0])
(39,data)
(40,(int *)
(41,tmpData)
(42,realloc(data, (130000)
(43,tmpData = (int *)
(44,)
(45,data)
(46,data)
(47,NULL)
(48,printIntLine(data[0])
(49,data)
(50,tmpData != NULL)
(51,staticFive)
(52,)
(53,tmpData)
(54,int)
(55,tmpData)
(56,(int *)
(57,if (tmpData != NULL)
(58,data)
(59,data)
(60,data[0])
(61,)
(62,tmpData)
(63,data == NULL)
(64,staticFive!=5)
(65,5)
(66,data[0])
(67,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^