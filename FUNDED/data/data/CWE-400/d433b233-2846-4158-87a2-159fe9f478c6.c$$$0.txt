-----label-----
0
-----code-----
static int tcp_wait_for_events(tcp_context_t *tcp)
{
	/* Wait for events. */
	fdset_t *set = &tcp->set;
	int nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000);

	/* Mark the time of last poll call. */
	time_now(&tcp->last_poll_time);
	bool is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec);
	if (!is_throttled) {
		/* Configuration limit, infer maximal pool size. */
		rcu_read_lock();
		unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);
		rcu_read_unlock();
		/* Subtract master sockets check limits. */
		is_throttled = (set->n - tcp->client_threshold) >= max_per_set;
	}

	/* Process events. */
	unsigned i = 0;
	while (nfds > 0 && i < set->n) {
		bool should_close = false;
		int fd = set->pfd[i].fd;
		if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)) {
			should_close = (i >= tcp->client_threshold);
			--nfds;
		} else if (set->pfd[i].revents & (POLLIN)) {
			/* Master sockets */
			if (i < tcp->client_threshold) {
				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {
					time_now(&tcp->throttle_end);
					tcp->throttle_end.tv_sec += tcp_throttle();
				}
			/* Client sockets */
			} else {
				if (tcp_event_serve(tcp, i) != KNOT_EOK) {
					should_close = true;
				}
			}
			--nfds;
		}

		/* Evaluate */
		if (should_close) {
			fdset_remove(set, i);
			close(fd);
		} else {
			++i;
		}
	}

	return nfds;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
21,23
22,23
25,26
26,27
26,28
28,29
28,30
30,31
31,32
31,33
31,34
31,35
32,33
34,35
34,36
35,36
38,39
38,40
39,40
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
51,52
51,53
52,53
55,56
56,57
56,58
58,59
58,60
60,61
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
69,70
69,71
70,71
70,72
71,72
75,76
75,77
76,77
77,78
79,80
79,81
79,82
79,83
80,81
81,82
82,83
84,85
85,86
85,87
87,88
87,89
89,90
90,91
90,92
90,93
91,92
93,94
93,95
94,95
94,96
95,96
96,97
99,100
99,101
100,101
102,103
103,104
106,107
107,108
108,109
110,111
111,112
111,113
112,113
114,115
114,116
115,116
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
125,126
127,128
128,129
128,130
130,131
130,132
132,133
134,135
134,136
135,136
135,137
136,137
136,138
137,138
140,141
140,142
141,142
143,144
143,145
144,145
147,148
147,149
147,150
147,151
148,149
149,150
149,151
151,152
151,153
153,154
155,156
156,157
156,158
158,159
158,160
160,161
161,162
161,163
162,163
162,164
163,164
163,165
164,165
167,168
170,171
170,172
170,173
171,172
171,173
172,173
172,174
173,174
173,175
174,175
174,176
175,176
178,179
181,182
182,183
182,184
183,184
183,185
184,185
186,187
188,189
190,191
190,192
191,192
192,193
192,194
193,194
195,196
196,197
196,198
197,198
199,200
199,201
200,201
203,204
204,205
205,206
207,208
207,209
208,209
208,210
209,210
209,211
210,211
210,212
211,212
211,213
212,213
215,216
218,219
219,220
221,222
221,223
222,223
222,224
222,225
223,224
223,225
224,225
226,227
226,228
227,228
230,231
231,232
231,233
232,233
232,234
233,234
234,235
236,237
236,238
237,238
237,239
237,240
238,239
240,241
242,243
244,245
246,247
246,248
247,248
248,249
248,250
249,250
251,252
252,253
252,254
253,254
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
264,265
265,266
267,268
268,269
268,270
269,270
269,271
270,271
270,272
270,273
271,272
273,274
275,276
277,278
279,280
280,281
281,282
281,283
282,283
285,286
286,287
287,288
289,290
289,291
289,292
290,291
292,293
292,294
293,294
294,295
294,296
294,297
295,296
297,298
299,300
301,302
302,303
302,304
303,304
305,306
307,308
308,309
309,310
310,311
312,313
313,314
-----nextToken-----
2,4,7,9,10,15,17,18,23,24,27,29,33,36,37,40,41,44,45,49,53,54,57,59,66,67,68,72,73,74,78,83,86,88,92,97,98,101,104,105,109,113,119,120,123,124,126,129,131,133,138,139,142,145,146,150,152,154,157,159,165,166,168,169,176,177,179,180,185,187,189,194,198,201,202,206,213,214,216,217,220,225,228,229,235,239,241,243,245,250,254,255,261,262,263,266,272,274,276,278,283,284,288,291,296,298,300,304,306,311,314
-----computeFrom-----
42,43
42,44
62,63
62,64
93,94
93,95
111,112
111,113
114,115
114,116
116,117
116,118
135,136
135,137
136,137
136,138
140,141
140,142
171,172
171,173
182,183
182,184
183,184
183,185
192,193
192,194
196,197
196,198
208,209
208,210
223,224
223,225
232,233
232,234
236,237
236,238
257,258
257,259
269,270
269,271
281,282
281,283
-----guardedBy-----
179,198
216,276
228,261
225,243
241,261
-----guardedByNegation-----
176,213
180,217
179,276
177,214
228,274
225,276
-----lastLexicalUse-----
179,276
228,274
225,276
-----jump-----
179,276
228,274
225,276
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tcp_wait_for_events(tcp_context_t *tcp){	/* Wait for events. */	fdset_t *set = &tcp->set;	int nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000);	/* Mark the time of last poll call. */	time_now(&tcp->last_poll_time);	bool is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec);	if (!is_throttled) {		/* Configuration limit, infer maximal pool size. */		rcu_read_lock();		unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);		rcu_read_unlock();		/* Subtract master sockets check limits. */		is_throttled = (set->n - tcp->client_threshold) >= max_per_set;	}	/* Process events. */	unsigned i = 0;	while (nfds > 0 && i < set->n) {		bool should_close = false;		int fd = set->pfd[i].fd;		if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)) {			should_close = (i >= tcp->client_threshold);			--nfds;		} else if (set->pfd[i].revents & (POLLIN)) {			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}		/* Evaluate */		if (should_close) {			fdset_remove(set, i);			close(fd);		} else {			++i;		}	}	return nfds;}
static int
tcp_wait_for_events(tcp_context_t *tcp)
tcp_wait_for_events
tcp_context_t *tcp
tcp_context_t
tcp_context_t
*tcp
*
tcp
{	/* Wait for events. */	fdset_t *set = &tcp->set;	int nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000);	/* Mark the time of last poll call. */	time_now(&tcp->last_poll_time);	bool is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec);	if (!is_throttled) {		/* Configuration limit, infer maximal pool size. */		rcu_read_lock();		unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);		rcu_read_unlock();		/* Subtract master sockets check limits. */		is_throttled = (set->n - tcp->client_threshold) >= max_per_set;	}	/* Process events. */	unsigned i = 0;	while (nfds > 0 && i < set->n) {		bool should_close = false;		int fd = set->pfd[i].fd;		if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)) {			should_close = (i >= tcp->client_threshold);			--nfds;		} else if (set->pfd[i].revents & (POLLIN)) {			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}		/* Evaluate */		if (should_close) {			fdset_remove(set, i);			close(fd);		} else {			++i;		}	}	return nfds;}
fdset_t *set = &tcp->set;
fdset_t *set = &tcp->set;
fdset_t
fdset_t
*set = &tcp->set
*
set
= &tcp->set
&tcp->set
tcp->set
tcp
tcp
set
int nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000);
int nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000);
int
nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000)
nfds
= poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000)
poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000)
poll
poll
set->pfd
set
set
pfd
set->n
set
set
n
TCP_SWEEP_INTERVAL * 1000
TCP_SWEEP_INTERVAL
TCP_SWEEP_INTERVAL
1000
time_now(&tcp->last_poll_time);
time_now(&tcp->last_poll_time)
time_now
time_now
&tcp->last_poll_time
tcp->last_poll_time
tcp
tcp
last_poll_time
bool is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec);
bool is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec);
bool
is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec)
is_throttled
= (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec)
(tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec)
tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec
tcp->last_poll_time.tv_sec
tcp->last_poll_time
tcp
tcp
last_poll_time
tv_sec
tcp->throttle_end.tv_sec
tcp->throttle_end
tcp
tcp
throttle_end
tv_sec
if (!is_throttled) {		/* Configuration limit, infer maximal pool size. */		rcu_read_lock();		unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);		rcu_read_unlock();		/* Subtract master sockets check limits. */		is_throttled = (set->n - tcp->client_threshold) >= max_per_set;	}
!is_throttled
is_throttled
is_throttled
{		/* Configuration limit, infer maximal pool size. */		rcu_read_lock();		unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);		rcu_read_unlock();		/* Subtract master sockets check limits. */		is_throttled = (set->n - tcp->client_threshold) >= max_per_set;	}
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);
unsigned max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1);
unsigned
max_per_set = MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1)
max_per_set
= MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1)
MAX(conf()->max_tcp_clients / conf_tcp_threads(conf()), 1)
MAX
MAX
conf()->max_tcp_clients / conf_tcp_threads(conf())
conf()->max_tcp_clients
conf()
conf
conf
max_tcp_clients
conf_tcp_threads(conf())
conf_tcp_threads
conf_tcp_threads
conf()
conf
conf
1
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
is_throttled = (set->n - tcp->client_threshold) >= max_per_set;
is_throttled = (set->n - tcp->client_threshold) >= max_per_set
is_throttled
is_throttled
(set->n - tcp->client_threshold) >= max_per_set
(set->n - tcp->client_threshold)
set->n - tcp->client_threshold
set->n
set
set
n
tcp->client_threshold
tcp
tcp
client_threshold
max_per_set
max_per_set
unsigned i = 0;
unsigned i = 0;
unsigned
i = 0
i
= 0
0
while (nfds > 0 && i < set->n) {		bool should_close = false;		int fd = set->pfd[i].fd;		if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)) {			should_close = (i >= tcp->client_threshold);			--nfds;		} else if (set->pfd[i].revents & (POLLIN)) {			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}		/* Evaluate */		if (should_close) {			fdset_remove(set, i);			close(fd);		} else {			++i;		}	}
nfds > 0 && i < set->n
nfds > 0
nfds
nfds
0
i < set->n
i
i
set->n
set
set
n
{		bool should_close = false;		int fd = set->pfd[i].fd;		if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)) {			should_close = (i >= tcp->client_threshold);			--nfds;		} else if (set->pfd[i].revents & (POLLIN)) {			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}		/* Evaluate */		if (should_close) {			fdset_remove(set, i);			close(fd);		} else {			++i;		}	}
bool should_close = false;
bool should_close = false;
bool
should_close = false
should_close
= false
false
int fd = set->pfd[i].fd;
int fd = set->pfd[i].fd;
int
fd = set->pfd[i].fd
fd
= set->pfd[i].fd
set->pfd[i].fd
set->pfd[i]
set->pfd
set
set
pfd
i
i
fd
if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)) {			should_close = (i >= tcp->client_threshold);			--nfds;		} else if (set->pfd[i].revents & (POLLIN)) {			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}
set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)
set->pfd[i].revents
set->pfd[i]
set->pfd
set
set
pfd
i
i
revents
(POLLERR|POLLHUP|POLLNVAL)
POLLERR|POLLHUP|POLLNVAL
POLLERR|POLLHUP
POLLERR
POLLERR
POLLHUP
POLLHUP
POLLNVAL
POLLNVAL
{			should_close = (i >= tcp->client_threshold);			--nfds;		}
should_close = (i >= tcp->client_threshold);
should_close = (i >= tcp->client_threshold)
should_close
should_close
(i >= tcp->client_threshold)
i >= tcp->client_threshold
i
i
tcp->client_threshold
tcp
tcp
client_threshold
--nfds;
--nfds
nfds
nfds
if (set->pfd[i].revents & (POLLIN)) {			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}
set->pfd[i].revents & (POLLIN)
set->pfd[i].revents
set->pfd[i]
set->pfd
set
set
pfd
i
i
revents
(POLLIN)
POLLIN
POLLIN
{			/* Master sockets */			if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}			--nfds;		}
if (i < tcp->client_threshold) {				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			} else {				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}
i < tcp->client_threshold
i
i
tcp->client_threshold
tcp
tcp
client_threshold
{				if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}			/* Client sockets */			}
if (!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY) {					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}
!is_throttled && tcp_event_accept(tcp, i) == KNOT_EBUSY
!is_throttled
is_throttled
is_throttled
tcp_event_accept(tcp, i) == KNOT_EBUSY
tcp_event_accept(tcp, i)
tcp_event_accept
tcp_event_accept
tcp
tcp
i
i
KNOT_EBUSY
KNOT_EBUSY
{					time_now(&tcp->throttle_end);					tcp->throttle_end.tv_sec += tcp_throttle();				}
time_now(&tcp->throttle_end);
time_now(&tcp->throttle_end)
time_now
time_now
&tcp->throttle_end
tcp->throttle_end
tcp
tcp
throttle_end
tcp->throttle_end.tv_sec += tcp_throttle();
tcp->throttle_end.tv_sec += tcp_throttle()
tcp->throttle_end.tv_sec
tcp->throttle_end
tcp
tcp
throttle_end
tv_sec
tcp_throttle()
tcp_throttle
tcp_throttle
{				if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}			}
if (tcp_event_serve(tcp, i) != KNOT_EOK) {					should_close = true;				}
tcp_event_serve(tcp, i) != KNOT_EOK
tcp_event_serve(tcp, i)
tcp_event_serve
tcp_event_serve
tcp
tcp
i
i
KNOT_EOK
KNOT_EOK
{					should_close = true;				}
should_close = true;
should_close = true
should_close
should_close
true
--nfds;
--nfds
nfds
nfds
if (should_close) {			fdset_remove(set, i);			close(fd);		} else {			++i;		}
should_close
should_close
{			fdset_remove(set, i);			close(fd);		}
fdset_remove(set, i);
fdset_remove(set, i)
fdset_remove
fdset_remove
set
set
i
i
close(fd);
close(fd)
close
close
fd
fd
{			++i;		}
++i;
++i
i
i
return nfds;
nfds
nfds
-----joern-----
(53,149,0)
(83,43,0)
(67,13,0)
(162,75,0)
(119,47,0)
(120,62,0)
(110,149,0)
(125,0,0)
(132,53,0)
(108,73,0)
(171,87,0)
(107,170,0)
(25,75,0)
(89,75,0)
(5,47,0)
(27,50,0)
(169,148,0)
(177,109,0)
(109,177,0)
(90,50,0)
(69,155,0)
(28,91,0)
(166,184,0)
(143,89,0)
(128,103,0)
(3,139,0)
(74,1,0)
(49,88,0)
(10,139,0)
(38,116,0)
(145,127,0)
(98,64,0)
(52,145,0)
(117,80,0)
(54,37,0)
(112,49,0)
(181,163,0)
(114,183,0)
(91,21,0)
(89,51,0)
(13,73,0)
(157,67,0)
(21,73,0)
(164,67,0)
(148,169,0)
(153,96,0)
(84,87,0)
(155,69,0)
(7,109,0)
(93,97,0)
(95,24,0)
(14,51,0)
(18,180,0)
(130,47,0)
(132,73,0)
(158,184,0)
(23,70,0)
(138,104,0)
(46,94,0)
(6,5,0)
(16,13,0)
(79,56,0)
(36,17,0)
(101,97,0)
(20,89,0)
(136,73,0)
(150,178,0)
(128,100,0)
(183,49,0)
(113,121,0)
(156,50,0)
(23,39,0)
(2,109,0)
(135,140,0)
(25,155,0)
(155,25,0)
(59,133,0)
(78,84,0)
(121,27,0)
(70,186,0)
(148,73,0)
(145,87,0)
(9,51,0)
(169,80,0)
(16,12,0)
(149,96,0)
(94,87,0)
(186,60,0)
(87,177,0)
(178,124,0)
(146,163,0)
(167,13,0)
(99,88,0)
(0,21,0)
(40,4,0)
(68,57,0)
(17,57,0)
(123,106,0)
(111,62,0)
(141,73,0)
(43,83,0)
(76,73,0)
(176,39,0)
(100,13,0)
(182,100,0)
(133,13,0)
(129,186,0)
(4,75,0)
(165,184,0)
(116,60,0)
(184,166,0)
(116,87,0)
(11,139,0)
(0,73,0)
(137,71,0)
(121,5,0)
(42,1,0)
(53,37,0)
(127,145,0)
(183,13,0)
(149,53,0)
(47,5,0)
(68,123,0)
(43,71,0)
(30,25,0)
(106,27,0)
(44,170,0)
(33,13,0)
(91,157,0)
(65,84,0)
(96,75,0)
(31,100,0)
(57,68,0)
(172,159,0)
(118,106,0)
(48,138,0)
(58,80,0)
(120,170,0)
(81,0,0)
(69,152,0)
(62,120,0)
(41,16,0)
(51,13,0)
(183,180,0)
(97,127,0)
(168,96,0)
(105,62,0)
(71,43,0)
(26,139,0)
(67,84,0)
(172,21,0)
(88,139,0)
(87,73,0)
(66,27,0)
(31,87,0)
(27,121,0)
(67,157,0)
(161,162,0)
(55,116,0)
(127,97,0)
(47,130,0)
(166,13,0)
(71,56,0)
(15,6,0)
(109,75,0)
(123,50,0)
(35,60,0)
(184,75,0)
(154,21,0)
(96,149,0)
(131,68,0)
(85,9,0)
(115,31,0)
(133,87,0)
(122,162,0)
(151,94,0)
(106,127,0)
(134,63,0)
(21,120,0)
(170,120,0)
(53,132,0)
(163,139,0)
(179,39,0)
(39,23,0)
(173,180,0)
(157,91,0)
(51,9,0)
(142,132,0)
(80,169,0)
(60,116,0)
(6,15,0)
(140,29,0)
(57,17,0)
(19,123,0)
(126,86,0)
(45,145,0)
(97,75,0)
(120,21,0)
(1,75,0)
(127,106,0)
(34,23,0)
(63,1,0)
(140,21,0)
(1,13,0)
(4,17,0)
(60,13,0)
(70,23,0)
(68,132,0)
(43,152,0)
(170,87,0)
(106,123,0)
(9,29,0)
(100,31,0)
(8,159,0)
(175,133,0)
(133,124,0)
(5,121,0)
(37,162,0)
(92,4,0)
(49,183,0)
(60,186,0)
(177,87,0)
(186,70,0)
(84,67,0)
(103,128,0)
(88,49,0)
(187,166,0)
(32,128,0)
(1,63,0)
(174,91,0)
(144,31,0)
(22,50,0)
(100,128,0)
(56,71,0)
(5,6,0)
(178,88,0)
(185,73,0)
(72,103,0)
(56,75,0)
(147,73,0)
(37,53,0)
(80,75,0)
(4,13,0)
(160,25,0)
(180,87,0)
(180,183,0)
(120,94,0)
(51,89,0)
(86,132,0)
(94,120,0)
(82,138,0)
(77,172,0)
(162,37,0)
(61,56,0)
(17,4,0)
(66,22,1)
(70,23,1)
(107,154,1)
(122,142,1)
(169,80,1)
(91,28,1)
(63,1,1)
(178,88,1)
(57,68,1)
(155,25,1)
(40,92,1)
(58,117,1)
(135,9,1)
(117,21,1)
(180,173,1)
(150,133,1)
(138,48,1)
(166,184,1)
(130,66,1)
(170,44,1)
(0,125,1)
(80,75,1)
(160,30,1)
(1,75,1)
(128,32,1)
(101,93,1)
(109,75,1)
(77,57,1)
(41,102,1)
(89,75,1)
(31,115,1)
(47,119,1)
(53,37,1)
(60,13,1)
(37,162,1)
(88,49,1)
(156,27,1)
(177,109,1)
(67,13,1)
(43,71,1)
(17,36,1)
(120,170,1)
(106,27,1)
(151,46,1)
(16,13,1)
(103,128,1)
(84,87,1)
(17,4,1)
(1,13,1)
(71,56,1)
(68,132,1)
(167,33,1)
(56,75,1)
(140,21,1)
(102,103,1)
(127,145,1)
(149,96,1)
(184,75,1)
(14,85,1)
(128,100,1)
(154,87,1)
(92,68,1)
(86,132,1)
(32,100,1)
(69,155,1)
(22,86,1)
(102,172,1)
(94,87,1)
(77,63,1)
(51,89,1)
(183,114,1)
(126,132,1)
(63,134,1)
(114,180,1)
(115,144,1)
(47,130,1)
(176,179,1)
(4,13,1)
(91,21,1)
(148,169,1)
(35,116,1)
(59,102,1)
(105,94,1)
(68,131,1)
(25,75,1)
(183,13,1)
(68,123,1)
(60,116,1)
(21,120,1)
(0,21,1)
(168,153,1)
(144,70,1)
(55,88,1)
(103,72,1)
(116,38,1)
(173,18,1)
(112,183,1)
(106,118,1)
(125,157,1)
(4,75,1)
(5,6,1)
(97,75,1)
(179,34,1)
(97,101,1)
(46,170,1)
(123,106,1)
(65,164,1)
(184,158,1)
(44,107,1)
(77,138,1)
(53,149,1)
(166,13,1)
(175,59,1)
(133,175,1)
(145,87,1)
(39,176,1)
(89,143,1)
(5,47,1)
(116,87,1)
(43,83,1)
(165,187,1)
(37,54,1)
(110,96,1)
(52,45,1)
(134,1,1)
(9,51,1)
(133,13,1)
(181,157,1)
(162,75,1)
(23,39,1)
(13,167,1)
(172,21,1)
(77,43,1)
(164,91,1)
(31,87,1)
(174,178,1)
(161,122,1)
(163,146,1)
(33,123,1)
(83,71,1)
(84,78,1)
(67,84,1)
(111,105,1)
(36,4,1)
(157,91,1)
(82,63,1)
(54,162,1)
(86,126,1)
(74,42,1)
(133,87,1)
(121,113,1)
(120,94,1)
(94,151,1)
(146,181,1)
(81,0,1)
(28,174,1)
(2,171,1)
(143,20,1)
(45,19,1)
(15,47,1)
(162,161,1)
(60,35,1)
(80,58,1)
(6,15,1)
(70,186,1)
(16,41,1)
(57,17,1)
(48,82,1)
(85,70,1)
(4,40,1)
(51,13,1)
(149,110,1)
(132,53,1)
(49,183,1)
(18,99,1)
(174,13,1)
(49,112,1)
(102,140,1)
(38,55,1)
(174,16,1)
(131,166,1)
(7,2,1)
(71,137,1)
(109,7,1)
(113,5,1)
(186,129,1)
(100,13,1)
(79,61,1)
(25,160,1)
(157,67,1)
(127,97,1)
(96,75,1)
(87,177,1)
(142,148,1)
(62,111,1)
(145,52,1)
(172,77,1)
(42,166,1)
(96,168,1)
(100,31,1)
(121,5,1)
(93,145,1)
(158,165,1)
(61,69,1)
(140,135,1)
(137,56,1)
(186,60,1)
(187,103,1)
(180,87,1)
(34,186,1)
(27,121,1)
(118,127,1)
(1,74,1)
(19,156,1)
(120,62,1)
(33,86,1)
(78,65,1)
(56,79,1)
(183,180,1)
(99,163,1)
(119,130,1)
(20,14,1)
(153,37,1)
(170,87,1)
(106,127,1)
(178,150,1)
(182,31,1)
(100,182,1)
(30,57,1)
(129,60,1)
(72,128,1)
(166,103,2)
(32,70,2)
(109,75,2)
(42,166,2)
(170,87,2)
(71,57,2)
(183,157,2)
(83,57,2)
(155,57,2)
(16,102,2)
(67,13,2)
(22,86,2)
(143,70,2)
(14,70,2)
(59,102,2)
(49,157,2)
(87,177,2)
(174,157,2)
(164,91,2)
(140,21,2)
(131,166,2)
(178,102,2)
(72,70,2)
(57,68,2)
(133,13,2)
(166,184,2)
(100,70,2)
(60,116,2)
(85,70,2)
(158,103,2)
(49,183,2)
(145,86,2)
(172,103,2)
(9,70,2)
(120,94,2)
(127,86,2)
(27,121,2)
(18,157,2)
(173,157,2)
(40,68,2)
(169,80,2)
(119,86,2)
(88,49,2)
(81,0,2)
(82,63,2)
(37,162,2)
(150,102,2)
(77,103,2)
(5,6,2)
(160,57,2)
(9,51,2)
(1,166,2)
(183,180,2)
(176,157,2)
(68,123,2)
(53,149,2)
(53,37,2)
(66,86,2)
(16,13,2)
(92,68,2)
(23,157,2)
(84,87,2)
(47,130,2)
(137,57,2)
(162,75,2)
(134,166,2)
(165,103,2)
(80,75,2)
(43,57,2)
(61,57,2)
(23,39,2)
(31,87,2)
(4,13,2)
(67,84,2)
(114,157,2)
(113,86,2)
(184,103,2)
(43,71,2)
(65,91,2)
(4,75,2)
(25,57,2)
(130,86,2)
(102,157,2)
(177,109,2)
(57,17,2)
(99,157,2)
(112,157,2)
(91,157,2)
(106,127,2)
(1,75,2)
(116,87,2)
(94,87,2)
(63,1,2)
(155,25,2)
(5,47,2)
(45,86,2)
(70,157,2)
(78,91,2)
(31,70,2)
(68,166,2)
(47,86,2)
(157,91,2)
(41,102,2)
(183,13,2)
(55,157,2)
(127,97,2)
(68,132,2)
(34,157,2)
(70,186,2)
(52,86,2)
(149,96,2)
(67,91,2)
(56,57,2)
(182,70,2)
(123,106,2)
(163,157,2)
(120,170,2)
(133,87,2)
(133,102,2)
(60,13,2)
(187,103,2)
(166,13,2)
(27,86,2)
(116,157,2)
(60,157,2)
(69,155,2)
(25,75,2)
(157,157,2)
(63,166,2)
(51,70,2)
(144,70,2)
(180,87,2)
(179,157,2)
(15,86,2)
(184,75,2)
(1,13,2)
(69,57,2)
(123,86,2)
(128,70,2)
(56,75,2)
(145,87,2)
(175,102,2)
(43,83,2)
(70,23,2)
(157,67,2)
(19,86,2)
(91,21,2)
(132,53,2)
(103,70,2)
(48,63,2)
(181,157,2)
(156,86,2)
(97,75,2)
(71,56,2)
(35,157,2)
(148,169,2)
(135,70,2)
(128,100,2)
(186,60,2)
(146,157,2)
(5,86,2)
(178,88,2)
(103,128,2)
(51,89,2)
(20,70,2)
(6,15,2)
(186,157,2)
(57,166,2)
(100,13,2)
(106,86,2)
(121,5,2)
(39,157,2)
(51,13,2)
(6,86,2)
(17,68,2)
(84,91,2)
(180,157,2)
(101,86,2)
(172,21,2)
(97,86,2)
(28,157,2)
(74,166,2)
(4,68,2)
(0,21,2)
(93,86,2)
(88,157,2)
(86,132,2)
(96,75,2)
(120,62,2)
(121,86,2)
(140,70,2)
(129,157,2)
(106,27,2)
(30,57,2)
(138,63,2)
(115,70,2)
(89,70,2)
(100,31,2)
(127,145,2)
(38,157,2)
(118,86,2)
(17,4,2)
(21,120,2)
(89,75,2)
(79,57,2)
(36,68,2)
-----------------------------------
(0,return nfds;)
(1,tcp_event_serve(tcp, i)
(2,tcp)
(3,fd)
(4,tcp_event_accept(tcp, i)
(5,conf()
(6,conf_tcp_threads(conf()
(7,set)
(8,if (i < tcp->client_threshold)
(9,should_close = (i >= tcp->client_threshold)
(10,if (should_close)
(11,should_close)
(12,)
(13,i = 0)
(14,i)
(15,conf()
(16,++i)
(17,tcp_event_accept(tcp, i)
(18,set)
(19,is_throttled)
(20,tcp)
(21,nfds = poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000)
(22,rcu_read_lock()
(23,POLLERR|POLLHUP|POLLNVAL)
(24,)
(25,tcp->throttle_end)
(26,if (set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)
(27,max_per_set = MAX(conf()
(28,0)
(29,)
(30,tcp)
(31,set->pfd)
(32,revents)
(33,i)
(34,POLLERR)
(35,i)
(36,KNOT_EBUSY)
(37,tcp->last_poll_time.tv_sec)
(38,pfd)
(39,POLLHUP|POLLNVAL)
(40,i)
(41,i)
(42,tcp)
(43,tcp->throttle_end.tv_sec += tcp_throttle()
(44,pfd)
(45,set)
(46,set)
(47,conf()
(48,true)
(49,set->pfd[i].fd)
(50,)
(51,i >= tcp->client_threshold)
(52,n)
(53,tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec)
(54,tv_sec)
(55,set)
(56,tcp->throttle_end)
(57,!is_throttled && tcp_event_accept(tcp, i)
(58,last_poll_time)
(59,set)
(60,set->pfd[i])
(61,tcp)
(62,TCP_SWEEP_INTERVAL * 1000)
(63,tcp_event_serve(tcp, i)
(64,)
(65,set)
(66,max_per_set)
(67,i < set->n)
(68,!is_throttled)
(69,time_now(&tcp->throttle_end)
(70,set->pfd[i].revents & (POLLERR|POLLHUP|POLLNVAL)
(71,tcp->throttle_end.tv_sec)
(72,POLLIN)
(73,)
(74,i)
(75,tcp_context_t *tcp)
(76,nfds)
(77,nfds)
(78,n)
(79,throttle_end)
(80,tcp->last_poll_time)
(81,RET)
(82,should_close)
(83,tcp_throttle()
(84,set->n)
(85,should_close)
(86,!is_throttled)
(87,*set = &tcp->set)
(88,fd = set->pfd[i].fd)
(89,tcp->client_threshold)
(90,max_per_set)
(91,nfds > 0)
(92,tcp)
(93,tcp)
(94,set->n)
(95,if (!is_throttled && tcp_event_accept(tcp, i)
(96,tcp->throttle_end)
(97,tcp->client_threshold)
(98,if (tcp_event_serve(tcp, i)
(99,fd)
(100,set->pfd[i])
(101,client_threshold)
(102,should_close)
(103,set->pfd[i].revents & (POLLIN)
(104,)
(105,TCP_SWEEP_INTERVAL)
(106,(set->n - tcp->client_threshold)
(107,set)
(108,if (!is_throttled)
(109,tcp->set)
(110,tv_sec)
(111,1000)
(112,fd)
(113,1)
(114,i)
(115,pfd)
(116,set->pfd)
(117,tcp)
(118,max_per_set)
(119,max_tcp_clients)
(120,poll(set->pfd, set->n, TCP_SWEEP_INTERVAL * 1000)
(121,MAX(conf()
(122,tcp)
(123,is_throttled = (set->n - tcp->client_threshold)
(124,)
(125,nfds)
(126,is_throttled)
(127,set->n - tcp->client_threshold)
(128,set->pfd[i].revents)
(129,revents)
(130,conf()
(131,is_throttled)
(132,is_throttled = (tcp->last_poll_time.tv_sec < tcp->throttle_end.tv_sec)
(133,fdset_remove(set, i)
(134,KNOT_EOK)
(135,nfds)
(136,is_throttled)
(137,tv_sec)
(138,should_close = true)
(139,)
(140,--nfds)
(141,set)
(142,is_throttled)
(143,client_threshold)
(144,set)
(145,set->n)
(146,false)
(147,while (nfds > 0 && i < set->n)
(148,time_now(&tcp->last_poll_time)
(149,tcp->throttle_end.tv_sec)
(150,fd)
(151,n)
(152,)
(153,tcp)
(154,nfds)
(155,&tcp->throttle_end)
(156,rcu_read_unlock()
(157,nfds > 0 && i < set->n)
(158,client_threshold)
(159,)
(160,throttle_end)
(161,last_poll_time)
(162,tcp->last_poll_time)
(163,should_close = false)
(164,i)
(165,tcp)
(166,i < tcp->client_threshold)
(167,0)
(168,throttle_end)
(169,&tcp->last_poll_time)
(170,set->pfd)
(171,set)
(172,--nfds)
(173,pfd)
(174,nfds)
(175,i)
(176,POLLNVAL)
(177,&tcp->set)
(178,close(fd)
(179,POLLHUP)
(180,set->pfd)
(181,should_close)
(182,i)
(183,set->pfd[i])
(184,tcp->client_threshold)
(185,i)
(186,set->pfd[i].revents)
(187,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^