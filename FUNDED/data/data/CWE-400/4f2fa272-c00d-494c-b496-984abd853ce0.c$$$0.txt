-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_fwrite_08_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
60,62
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
61,71
61,72
61,73
61,74
61,75
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
91,92
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
124,125
124,126
125,126
125,127
126,127
126,128
126,129
126,130
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
140,141
141,142
142,143
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
151,152
153,154
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
186,191
187,188
189,190
191,192
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
200,202
201,202
203,204
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
213,215
214,215
216,217
219,220
220,221
220,222
221,222
223,224
223,225
224,225
226,227
229,230
229,231
230,231
230,232
231,232
233,234
235,236
236,237
237,238
237,239
238,239
240,241
242,243
242,244
243,244
243,245
244,245
246,247
248,249
249,250
250,251
250,252
251,252
253,254
255,256
255,257
256,257
257,258
259,260
260,261
260,262
260,263
260,264
260,265
260,266
260,267
261,262
262,263
262,264
263,264
265,266
265,267
267,268
269,270
270,271
270,272
271,272
273,274
273,275
273,276
276,277
277,278
279,280
280,281
280,282
282,283
282,284
282,285
285,286
287,288
288,289
288,290
289,290
291,292
291,293
291,294
292,293
294,295
297,298
297,299
298,299
298,300
299,300
301,302
303,304
304,305
305,306
305,307
306,307
309,310
309,311
309,312
309,313
310,311
311,312
311,313
312,313
315,316
315,317
316,317
318,319
318,320
319,320
319,321
320,321
323,324
325,326
326,327
328,329
329,330
329,331
330,331
330,332
331,332
331,333
332,333
334,335
336,337
336,338
336,339
336,340
336,341
337,338
339,340
341,342
342,343
342,344
345,346
345,347
346,347
348,349
350,351
352,353
353,354
354,355
354,356
355,356
358,359
358,360
359,360
361,362
362,363
363,364
363,365
364,365
366,367
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,46,48,51,54,56,59,65,68,70,72,74,78,80,82,86,89,90,94,99,100,102,108,109,110,112,117,118,121,123,128,130,134,136,139,143,145,147,152,154,156,158,160,164,167,169,171,173,177,179,181,185,188,190,192,195,196,197,202,204,207,208,210,215,217,218,222,225,227,228,232,234,239,241,245,247,252,254,258,264,266,268,272,274,275,278,281,283,284,286,290,293,295,296,300,302,307,308,313,314,317,321,322,324,327,333,335,338,340,343,344,347,349,351,356,357,360,365,367
-----computeFrom-----
12,13
12,14
63,64
63,65
76,77
76,78
96,97
96,98
104,105
104,106
114,115
114,116
125,126
125,127
149,150
149,151
162,163
162,164
175,176
175,177
183,184
183,185
193,194
193,195
199,200
199,201
200,201
200,202
205,206
205,207
212,213
212,214
220,221
220,222
230,231
230,232
243,244
243,245
288,289
288,290
298,299
298,300
311,312
311,313
315,316
315,317
330,331
330,332
-----guardedBy-----
232,241
245,254
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_fwrite_08_bad(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__listen_socket_fwrite_08_bad()
CWE400_Resource_Exhaustion__listen_socket_fwrite_08_bad
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(128,141,0)
(67,48,0)
(35,64,0)
(93,42,0)
(71,149,0)
(4,8,0)
(1,188,0)
(195,127,0)
(171,158,0)
(69,127,0)
(22,197,0)
(92,17,0)
(160,164,0)
(121,65,0)
(84,197,0)
(204,51,0)
(145,84,0)
(81,188,0)
(112,197,0)
(168,123,0)
(3,111,0)
(92,164,0)
(47,24,0)
(26,158,0)
(15,213,0)
(123,179,0)
(79,133,0)
(19,205,0)
(25,76,0)
(31,42,0)
(139,7,0)
(74,76,0)
(20,7,0)
(186,59,0)
(133,48,0)
(156,127,0)
(48,164,0)
(192,139,0)
(208,162,0)
(141,129,0)
(44,32,0)
(75,181,0)
(209,84,0)
(142,213,0)
(61,64,0)
(96,206,0)
(71,200,0)
(177,75,0)
(2,76,0)
(35,32,0)
(115,71,0)
(201,114,0)
(64,90,0)
(23,19,0)
(90,217,0)
(127,80,0)
(110,123,0)
(76,159,0)
(189,67,0)
(39,47,0)
(94,127,0)
(152,35,0)
(66,44,0)
(214,76,0)
(155,190,0)
(63,8,0)
(49,57,0)
(138,31,0)
(133,187,0)
(55,31,0)
(146,125,0)
(102,116,0)
(193,186,0)
(56,164,0)
(109,24,0)
(59,42,0)
(194,133,0)
(158,76,0)
(78,76,0)
(47,48,0)
(19,7,0)
(165,24,0)
(59,51,0)
(216,134,0)
(143,184,0)
(64,173,0)
(102,188,0)
(144,142,0)
(137,197,0)
(6,179,0)
(182,164,0)
(90,164,0)
(62,76,0)
(151,127,0)
(184,8,0)
(148,134,0)
(180,116,0)
(5,76,0)
(175,93,0)
(215,59,0)
(6,72,0)
(101,179,0)
(36,12,0)
(212,164,0)
(129,164,0)
(186,193,0)
(108,127,0)
(18,59,0)
(53,186,0)
(99,9,0)
(118,188,0)
(169,141,0)
(154,48,0)
(147,209,0)
(187,133,0)
(217,90,0)
(181,75,0)
(11,65,0)
(64,184,0)
(65,179,0)
(183,111,0)
(19,84,0)
(65,38,0)
(59,186,0)
(14,177,0)
(54,8,0)
(27,31,0)
(82,198,0)
(41,160,0)
(42,164,0)
(107,127,0)
(113,117,0)
(125,127,0)
(142,42,0)
(16,108,0)
(88,26,0)
(30,125,0)
(28,67,0)
(200,71,0)
(64,35,0)
(131,26,0)
(114,134,0)
(70,164,0)
(178,108,0)
(91,18,0)
(136,32,0)
(67,187,0)
(202,139,0)
(42,31,0)
(135,143,0)
(29,193,0)
(150,97,0)
(198,42,0)
(140,89,0)
(50,203,0)
(173,64,0)
(153,174,0)
(124,42,0)
(103,198,0)
(58,164,0)
(38,127,0)
(7,76,0)
(139,84,0)
(188,118,0)
(13,105,0)
(197,42,0)
(179,65,0)
(0,17,0)
(188,81,0)
(114,89,0)
(172,184,0)
(184,143,0)
(34,160,0)
(86,217,0)
(111,57,0)
(134,114,0)
(43,149,0)
(97,76,0)
(83,97,0)
(57,164,0)
(21,7,0)
(33,76,0)
(116,102,0)
(188,179,0)
(197,84,0)
(17,92,0)
(120,81,0)
(141,48,0)
(77,177,0)
(117,75,0)
(170,118,0)
(104,38,0)
(47,84,0)
(93,167,0)
(84,164,0)
(87,76,0)
(213,142,0)
(24,47,0)
(48,47,0)
(149,71,0)
(37,47,0)
(188,102,0)
(163,209,0)
(211,85,0)
(93,158,0)
(207,38,0)
(59,18,0)
(157,32,0)
(119,9,0)
(73,164,0)
(161,47,0)
(68,126,0)
(26,42,0)
(45,96,0)
(196,90,0)
(100,98,0)
(95,129,0)
(122,6,0)
(52,142,0)
(40,76,0)
(75,117,0)
(9,92,0)
(75,177,0)
(210,76,0)
(187,67,0)
(51,59,0)
(203,46,0)
(130,181,0)
(166,200,0)
(185,158,0)
(179,127,0)
(89,164,0)
(186,53,0)
(191,188,0)
(71,164,0)
(122,132,1)
(199,90,1)
(52,51,1)
(160,34,1)
(129,95,1)
(186,193,1)
(157,203,1)
(131,208,1)
(198,103,1)
(114,134,1)
(91,186,1)
(30,146,1)
(82,42,1)
(110,179,1)
(148,216,1)
(145,213,1)
(77,7,1)
(100,187,1)
(131,199,1)
(123,168,1)
(177,14,1)
(168,110,1)
(83,106,1)
(140,114,1)
(22,145,1)
(135,172,1)
(209,84,1)
(19,7,1)
(31,55,1)
(113,177,1)
(65,11,1)
(97,150,1)
(117,113,1)
(67,189,1)
(139,7,1)
(131,36,1)
(59,42,1)
(124,160,1)
(44,32,1)
(134,148,1)
(93,42,1)
(141,48,1)
(93,175,1)
(1,116,1)
(45,102,1)
(106,184,1)
(188,81,1)
(38,104,1)
(102,116,1)
(209,163,1)
(48,47,1)
(133,48,1)
(213,15,1)
(55,27,1)
(86,196,1)
(196,129,1)
(11,121,1)
(216,57,1)
(178,125,1)
(26,88,1)
(104,207,1)
(175,26,1)
(6,179,1)
(18,91,1)
(64,90,1)
(131,155,1)
(10,19,1)
(176,60,1)
(59,186,1)
(142,42,1)
(188,191,1)
(95,141,1)
(101,38,1)
(138,124,1)
(131,153,1)
(47,24,1)
(19,23,1)
(47,84,1)
(131,211,1)
(93,158,1)
(81,120,1)
(163,147,1)
(60,10,1)
(125,30,1)
(158,171,1)
(61,152,1)
(154,209,1)
(181,75,1)
(208,181,1)
(102,188,1)
(15,142,1)
(43,198,1)
(60,68,1)
(90,217,1)
(183,3,1)
(133,79,1)
(180,35,1)
(137,112,1)
(120,1,1)
(35,64,1)
(119,89,1)
(88,131,1)
(157,123,1)
(143,135,1)
(131,100,1)
(51,59,1)
(75,117,1)
(75,177,1)
(202,192,1)
(92,17,1)
(193,29,1)
(170,81,1)
(109,165,1)
(35,32,1)
(66,102,1)
(32,136,1)
(130,75,1)
(165,39,1)
(123,179,1)
(215,92,1)
(213,142,1)
(153,198,1)
(111,183,1)
(217,86,1)
(34,41,1)
(139,84,1)
(188,179,1)
(198,42,1)
(10,139,1)
(197,137,1)
(192,93,1)
(203,50,1)
(0,9,1)
(179,65,1)
(141,169,1)
(20,158,1)
(64,173,1)
(152,44,1)
(112,22,1)
(77,199,1)
(67,48,1)
(84,197,1)
(39,161,1)
(71,200,1)
(181,130,1)
(103,82,1)
(99,119,1)
(152,32,1)
(65,38,1)
(155,213,1)
(136,157,1)
(28,133,1)
(26,158,1)
(128,187,1)
(139,202,1)
(50,123,1)
(9,99,1)
(79,194,1)
(49,111,1)
(186,53,1)
(41,181,1)
(51,204,1)
(108,16,1)
(188,118,1)
(57,49,1)
(149,43,1)
(116,180,1)
(150,83,1)
(16,178,1)
(142,144,1)
(187,67,1)
(171,185,1)
(176,132,1)
(194,48,1)
(7,21,1)
(166,115,1)
(14,77,1)
(200,166,1)
(115,149,1)
(121,101,1)
(23,139,1)
(176,6,1)
(29,215,1)
(66,96,1)
(42,31,1)
(64,61,1)
(3,71,1)
(19,84,1)
(161,154,1)
(169,128,1)
(191,118,1)
(184,143,1)
(6,122,1)
(96,45,1)
(64,184,1)
(201,134,1)
(44,66,1)
(24,109,1)
(114,201,1)
(118,170,1)
(36,51,1)
(37,24,1)
(146,60,1)
(89,140,1)
(60,106,1)
(204,59,1)
(59,18,1)
(197,42,1)
(71,149,1)
(185,97,1)
(27,138,1)
(17,0,1)
(187,133,1)
(47,37,1)
(207,108,1)
(68,10,1)
(189,28,1)
(211,209,1)
(132,35,1)
(144,52,1)
(21,20,1)
(147,84,1)
(26,42,1)
(192,26,1)
(35,32,2)
(95,187,2)
(35,35,2)
(64,60,2)
(32,60,2)
(61,60,2)
(188,35,2)
(10,106,2)
(75,199,2)
(7,106,2)
(59,42,2)
(131,106,2)
(209,213,2)
(29,198,2)
(142,51,2)
(0,198,2)
(102,188,2)
(52,51,2)
(199,187,2)
(43,198,2)
(91,198,2)
(120,35,2)
(44,35,2)
(64,173,2)
(57,198,2)
(26,106,2)
(39,209,2)
(26,42,2)
(134,198,2)
(116,35,2)
(75,106,2)
(183,198,2)
(102,35,2)
(90,187,2)
(175,26,2)
(14,106,2)
(48,47,2)
(38,60,2)
(136,60,2)
(71,198,2)
(68,10,2)
(71,200,2)
(104,60,2)
(109,209,2)
(21,106,2)
(90,217,2)
(45,102,2)
(24,209,2)
(169,187,2)
(123,179,2)
(198,181,2)
(118,35,2)
(203,123,2)
(75,117,2)
(65,60,2)
(55,181,2)
(34,181,2)
(178,60,2)
(204,198,2)
(152,60,2)
(150,106,2)
(42,181,2)
(41,181,2)
(196,187,2)
(163,213,2)
(19,139,2)
(16,60,2)
(149,198,2)
(64,184,2)
(141,48,2)
(157,60,2)
(125,60,2)
(139,84,2)
(51,198,2)
(177,199,2)
(188,118,2)
(201,198,2)
(181,199,2)
(77,106,2)
(148,198,2)
(47,24,2)
(158,106,2)
(22,213,2)
(77,199,2)
(93,42,2)
(197,213,2)
(59,186,2)
(113,199,2)
(108,60,2)
(6,179,2)
(115,198,2)
(165,209,2)
(179,65,2)
(202,106,2)
(92,198,2)
(171,106,2)
(59,198,2)
(48,209,2)
(137,213,2)
(216,198,2)
(59,18,2)
(117,199,2)
(67,133,2)
(132,60,2)
(117,106,2)
(114,134,2)
(14,199,2)
(47,84,2)
(211,209,2)
(192,106,2)
(92,17,2)
(186,193,2)
(113,106,2)
(9,198,2)
(121,60,2)
(187,133,2)
(93,26,2)
(198,42,2)
(100,187,2)
(187,67,2)
(35,60,2)
(15,51,2)
(17,198,2)
(139,106,2)
(209,84,2)
(138,181,2)
(61,35,2)
(179,60,2)
(152,35,2)
(139,7,2)
(119,198,2)
(133,48,2)
(141,187,2)
(3,198,2)
(130,199,2)
(140,198,2)
(42,31,2)
(186,198,2)
(129,187,2)
(99,198,2)
(147,213,2)
(191,35,2)
(207,60,2)
(18,198,2)
(189,133,2)
(186,53,2)
(188,81,2)
(193,198,2)
(123,60,2)
(128,187,2)
(64,90,2)
(215,198,2)
(144,51,2)
(181,75,2)
(97,106,2)
(103,181,2)
(37,209,2)
(30,60,2)
(27,181,2)
(36,51,2)
(213,142,2)
(82,181,2)
(145,213,2)
(31,181,2)
(185,106,2)
(160,181,2)
(130,106,2)
(102,116,2)
(154,209,2)
(188,179,2)
(153,198,2)
(101,60,2)
(35,64,2)
(200,198,2)
(47,209,2)
(208,181,2)
(155,213,2)
(194,209,2)
(187,209,2)
(166,198,2)
(86,187,2)
(161,209,2)
(23,139,2)
(170,35,2)
(142,42,2)
(28,133,2)
(93,158,2)
(51,59,2)
(124,181,2)
(110,60,2)
(84,197,2)
(213,51,2)
(67,48,2)
(197,42,2)
(181,106,2)
(122,132,2)
(168,60,2)
(83,106,2)
(177,106,2)
(66,35,2)
(64,35,2)
(88,106,2)
(112,213,2)
(133,209,2)
(11,60,2)
(217,187,2)
(146,60,2)
(79,209,2)
(111,198,2)
(44,32,2)
(81,35,2)
(89,198,2)
(75,177,2)
(71,149,2)
(26,158,2)
(84,213,2)
(96,102,2)
(1,35,2)
(20,106,2)
(19,84,2)
(49,198,2)
(50,123,2)
(114,198,2)
(65,38,2)
(184,143,2)
(180,35,2)
(6,132,2)
(19,7,2)
-----------------------------------
(0,TCP_PORT)
(1,SENTENCE)
(2,wsaData)
(3,service)
(4,if(staticReturnsTrue()
(5,recvResult)
(6,fclose(pFile)
(7,acceptSocket = INVALID_SOCKET)
(8,)
(9,service.sin_port)
(10,wsaDataInit)
(11,"w+")
(12,)
(13,if (strlen(SENTENCE)
(14,2)
(15,SOCKET_ERROR)
(16,NULL)
(17,htons(TCP_PORT)
(18,sizeof(service)
(19,CLOSE_SOCKET(acceptSocket)
(20,acceptSocket)
(21,INVALID_SOCKET)
(22,listenSocket)
(23,acceptSocket)
(24,CHAR_ARRAY_SIZE - 1)
(25,acceptSocket)
(26,listenSocket != INVALID_SOCKET)
(27,SOCK_STREAM)
(28,recvResult)
(29,service)
(30,0)
(31,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(32,i = 0)
(33,if (listenSocket != INVALID_SOCKET)
(34,1)
(35,i < (size_t)
(36,break;)
(37,0)
(38,*filename = "output_bad.txt")
(39,inputBuffer)
(40,do)
(41,wsaDataInit)
(42,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(43,service)
(44,i++)
(45,1)
(46,)
(47,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(48,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(49,AF_INET)
(50,1)
(51,bind(listenSocket, (struct sockaddr*)
(52,listenSocket)
(53,struct sockaddr*)
(54,count)
(55,IPPROTO_TCP)
(56,if (listen(listenSocket, LISTEN_BACKLOG)
(57,service.sin_family = AF_INET)
(58,if (WSAStartup(MAKEWORD(2,2)
(59,bind(listenSocket, (struct sockaddr*)
(60,staticReturnsTrue()
(61,count)
(62,if (acceptSocket != INVALID_SOCKET)
(63,if(staticReturnsTrue()
(64,(size_t)
(65,fopen(filename, "w+")
(66,i)
(67,recvResult == 0)
(68,WSACleanup()
(69,if (pFile)
(70,if (listenSocket == INVALID_SOCKET)
(71,memset(&service, 0, sizeof(service)
(72,)
(73,if (bind(listenSocket, (struct sockaddr*)
(74,service)
(75,WSAStartup(MAKEWORD(2,2)
(76,)
(77,2)
(78,listenSocket)
(79,SOCKET_ERROR)
(80,)
(81,sizeof(char)
(82,listenSocket)
(83,wsaDataInit)
(84,acceptSocket = accept(listenSocket, NULL, NULL)
(85,)
(86,inputBuffer)
(87,wsaDataInit)
(88,INVALID_SOCKET)
(89,service.sin_addr.s_addr = INADDR_ANY)
(90,count = atoi(inputBuffer)
(91,service)
(92,service.sin_port = htons(TCP_PORT)
(93,CLOSE_SOCKET(listenSocket)
(94,pFile)
(95,\'\\0\')
(96,exit(1)
(97,wsaDataInit = 0)
(98,)
(99,sin_port)
(100,break;)
(101,pFile)
(102,strlen(SENTENCE)
(103,INVALID_SOCKET)
(104,"output_bad.txt")
(105,)
(106,staticReturnsTrue()
(107,filename)
(108,*pFile = NULL)
(109,1)
(110,pFile)
(111,service.sin_family)
(112,NULL)
(113,wsaData)
(114,service.sin_addr.s_addr)
(115,0)
(116,strlen(SENTENCE)
(117,&wsaData)
(118,strlen(SENTENCE)
(119,service)
(120,char)
(121,filename)
(122,pFile)
(123,pFile == NULL)
(124,listenSocket)
(125,i = 0)
(126,)
(127,)
(128,inputBuffer)
(129,inputBuffer[recvResult] = \'\\0\')
(130,NO_ERROR)
(131,listenSocket)
(132,pFile)
(133,recvResult == SOCKET_ERROR)
(134,service.sin_addr)
(135,1)
(136,0)
(137,NULL)
(138,AF_INET)
(139,acceptSocket != INVALID_SOCKET)
(140,INADDR_ANY)
(141,inputBuffer[recvResult])
(142,listen(listenSocket, LISTEN_BACKLOG)
(143,-1)
(144,LISTEN_BACKLOG)
(145,acceptSocket)
(146,i)
(147,acceptSocket)
(148,sin_addr)
(149,&service)
(150,0)
(151,if (pFile == NULL)
(152,i)
(153,break;)
(154,recvResult)
(155,break;)
(156,i)
(157,i)
(158,listenSocket = INVALID_SOCKET)
(159,)
(160,wsaDataInit = 1)
(161,acceptSocket)
(162,)
(163,SOCKET_ERROR)
(164,)
(165,CHAR_ARRAY_SIZE)
(166,service)
(167,)
(168,NULL)
(169,recvResult)
(170,SENTENCE)
(171,INVALID_SOCKET)
(172,count)
(173,size_t)
(174,)
(175,listenSocket)
(176,RET)
(177,MAKEWORD(2,2)
(178,pFile)
(179,pFile = fopen(filename, "w+")
(180,SENTENCE)
(181,WSAStartup(MAKEWORD(2,2)
(182,if (acceptSocket == SOCKET_ERROR)
(183,sin_family)
(184,count = -1)
(185,listenSocket)
(186,(struct sockaddr*)
(187,recvResult == SOCKET_ERROR || recvResult == 0)
(188,fwrite(SENTENCE, sizeof(char)
(189,0)
(190,)
(191,pFile)
(192,acceptSocket)
(193,&service)
(194,recvResult)
(195,for (i = 0; i < (size_t)
(196,count)
(197,accept(listenSocket, NULL, NULL)
(198,listenSocket == INVALID_SOCKET)
(199,0)
(200,sizeof(service)
(201,s_addr)
(202,INVALID_SOCKET)
(203,exit(1)
(204,SOCKET_ERROR)
(205,)
(206,)
(207,filename)
(208,break;)
(209,acceptSocket == SOCKET_ERROR)
(210,inputBuffer)
(211,break;)
(212,if (recvResult == SOCKET_ERROR || recvResult == 0)
(213,listen(listenSocket, LISTEN_BACKLOG)
(214,if (wsaDataInit)
(215,listenSocket)
(216,service)
(217,atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^