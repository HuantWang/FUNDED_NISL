-----label-----
0
-----code-----
static void goodB2G()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    else
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
89,92
89,93
89,94
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
104,105
105,106
105,107
106,107
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
131,132
132,133
132,134
133,134
133,135
134,135
134,136
135,136
140,141
141,142
141,143
142,143
144,145
144,146
145,146
145,147
146,147
148,149
150,151
151,152
151,153
152,153
155,156
155,157
155,158
156,157
157,158
159,160
160,161
161,162
161,163
162,163
164,165
166,167
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,93,97,99,102,103,107,108,112,114,119,121,127,128,129,130,136,137,138,139,143,147,149,153,154,158,163,165,170,172
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
91,92
91,93
110,111
110,112
123,124
123,125
132,133
132,134
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory */        free(data);    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(54,85,0)
(88,12,0)
(88,58,0)
(17,46,0)
(7,83,0)
(70,35,0)
(42,10,0)
(29,46,0)
(55,85,0)
(75,54,0)
(48,33,0)
(56,32,0)
(70,30,0)
(41,15,0)
(45,3,0)
(7,23,0)
(85,55,0)
(10,8,0)
(11,23,0)
(32,23,0)
(37,23,0)
(49,84,0)
(43,92,0)
(27,35,0)
(60,15,0)
(31,3,0)
(67,44,0)
(0,35,0)
(59,49,0)
(78,77,0)
(33,34,0)
(83,28,0)
(76,73,0)
(12,88,0)
(24,91,0)
(10,85,0)
(68,10,0)
(83,7,0)
(35,3,0)
(90,35,0)
(72,57,0)
(28,83,0)
(18,44,0)
(82,0,0)
(34,33,0)
(57,74,0)
(47,27,0)
(63,54,0)
(8,10,0)
(16,78,0)
(30,31,0)
(54,25,0)
(22,84,0)
(52,91,0)
(24,40,0)
(4,30,0)
(91,6,0)
(48,3,0)
(25,83,0)
(69,70,0)
(14,44,0)
(84,55,0)
(8,32,0)
(73,26,0)
(27,21,0)
(39,77,0)
(78,11,0)
(17,92,0)
(6,35,0)
(91,24,0)
(25,54,0)
(50,6,0)
(77,78,0)
(65,85,0)
(19,15,0)
(55,84,0)
(44,35,0)
(81,15,0)
(64,17,0)
(51,8,0)
(84,49,0)
(71,60,0)
(92,3,0)
(83,25,0)
(57,72,0)
(79,0,0)
(33,48,0)
(62,46,0)
(53,77,0)
(77,85,0)
(35,6,0)
(9,12,0)
(85,23,0)
(61,85,0)
(86,65,0)
(27,85,0)
(1,11,0)
(14,33,0)
(40,24,0)
(46,17,0)
(55,13,0)
(13,55,0)
(73,35,0)
(36,70,0)
(89,65,0)
(44,14,0)
(73,85,0)
(6,91,0)
(46,35,0)
(30,70,0)
(80,60,0)
(33,14,0)
(49,59,0)
(6,50,0)
(87,31,0)
(20,72,0)
(33,14,1)
(24,40,1)
(17,64,1)
(8,10,1)
(51,10,1)
(90,5,1)
(38,73,1)
(16,77,1)
(84,49,1)
(27,35,1)
(0,79,1)
(78,16,1)
(63,75,1)
(77,53,1)
(87,30,1)
(29,62,1)
(92,43,1)
(55,13,1)
(46,35,1)
(0,35,1)
(79,82,1)
(57,72,1)
(44,67,1)
(9,0,1)
(86,89,1)
(73,35,1)
(27,85,1)
(68,65,1)
(14,44,1)
(49,22,1)
(71,80,1)
(82,35,1)
(52,90,1)
(65,85,1)
(36,0,1)
(49,59,1)
(7,83,1)
(11,1,1)
(54,63,1)
(8,51,1)
(5,60,1)
(66,7,1)
(30,70,1)
(70,35,1)
(47,66,1)
(64,46,1)
(55,84,1)
(65,86,1)
(75,11,1)
(1,78,1)
(6,91,1)
(76,66,1)
(83,28,1)
(10,85,1)
(61,5,1)
(4,70,1)
(77,85,1)
(33,34,1)
(67,18,1)
(73,85,1)
(66,48,1)
(18,92,1)
(25,54,1)
(73,76,1)
(48,33,1)
(78,77,1)
(85,55,1)
(24,52,1)
(27,47,1)
(32,56,1)
(12,9,1)
(83,25,1)
(89,85,1)
(54,85,1)
(10,42,1)
(39,32,1)
(22,61,1)
(88,12,1)
(36,88,1)
(91,24,1)
(42,68,1)
(20,65,1)
(70,69,1)
(6,50,1)
(56,8,1)
(62,31,1)
(69,36,1)
(31,87,1)
(46,29,1)
(38,27,1)
(68,57,1)
(53,39,1)
(35,6,1)
(43,17,1)
(60,71,1)
(30,4,1)
(17,46,1)
(72,20,1)
(44,35,1)
(89,5,2)
(46,5,2)
(77,5,2)
(12,0,2)
(55,84,2)
(35,5,2)
(88,0,2)
(48,5,2)
(32,5,2)
(56,5,2)
(64,5,2)
(73,35,2)
(33,14,2)
(49,59,2)
(4,5,2)
(8,5,2)
(43,5,2)
(73,66,2)
(46,35,2)
(63,5,2)
(16,5,2)
(73,85,2)
(39,5,2)
(6,50,2)
(27,35,2)
(44,35,2)
(20,65,2)
(77,85,2)
(22,5,2)
(65,5,2)
(18,5,2)
(61,5,2)
(44,5,2)
(87,5,2)
(10,85,2)
(67,5,2)
(24,5,2)
(49,5,2)
(85,5,2)
(47,66,2)
(70,35,2)
(17,5,2)
(69,5,2)
(7,5,2)
(7,83,2)
(14,44,2)
(83,5,2)
(84,49,2)
(17,46,2)
(30,5,2)
(86,5,2)
(27,66,2)
(27,85,2)
(54,5,2)
(31,5,2)
(55,13,2)
(85,55,2)
(33,5,2)
(6,5,2)
(52,5,2)
(0,5,2)
(92,5,2)
(70,5,2)
(33,34,2)
(76,66,2)
(75,5,2)
(82,5,2)
(1,5,2)
(29,5,2)
(9,0,2)
(48,33,2)
(79,5,2)
(14,5,2)
(11,5,2)
(90,5,2)
(51,5,2)
(83,28,2)
(68,5,2)
(6,91,2)
(91,5,2)
(57,65,2)
(0,35,2)
(10,5,2)
(72,65,2)
(42,5,2)
(84,5,2)
(8,10,2)
(36,5,2)
(25,54,2)
(53,5,2)
(35,6,2)
(78,77,2)
(78,5,2)
(55,5,2)
(62,5,2)
(88,12,2)
(25,5,2)
(30,70,2)
(91,24,2)
(57,72,2)
(65,85,2)
(83,25,2)
(24,40,2)
(54,85,2)
-----------------------------------
(0,data == NULL)
(1,0)
(2, sizeof(struct _twoIntsStruct)
(3,)
(4,intOne)
(5,globalReturnsTrueOrFalse()
(6,(struct _twoIntsStruct *)
(7,printStructLine((twoIntsStruct *)
(8,data[0].intOne)
(9,1)
(10,data[0])
(11,data[0].intTwo = 0)
(12,-1)
(13,struct _twoIntsStruct *)
(14,&data[0])
(15,)
(16,intTwo)
(17,data[0].intTwo)
(18,data)
(19,if(globalReturnsTrueOrFalse()
(20,1)
(21,)
(22,100)
(23,)
(24,sizeof(struct _twoIntsStruct)
(25,&data[0])
(26,)
(27,free(data)
(28,twoIntsStruct *)
(29,0)
(30,data[0].intOne)
(31,data[0].intOne = 0)
(32,data[0].intOne = 0)
(33,(twoIntsStruct *)
(34,twoIntsStruct *)
(35,data = (struct _twoIntsStruct *)
(36,data)
(37,if (data == NULL)
(38,RET)
(39,data)
(40,struct _twoIntsStruct)
(41,if(globalReturnsTrueOrFalse()
(42,0)
(43,0)
(44,data[0])
(45,if (data == NULL)
(46,data[0])
(47,data)
(48,printStructLine((twoIntsStruct *)
(49,sizeof(struct _twoIntsStruct)
(50,struct _twoIntsStruct *)
(51,intOne)
(52,100)
(53,0)
(54,data[0])
(55,(struct _twoIntsStruct *)
(56,0)
(57,exit(-1)
(58,)
(59,struct _twoIntsStruct)
(60,data = NULL)
(61,data)
(62,data)
(63,0)
(64,intTwo)
(65,data == NULL)
(66,globalReturnsTrueOrFalse()
(67,0)
(68,data)
(69,0)
(70,data[0])
(71,NULL)
(72,-1)
(73,free(data)
(74,)
(75,data)
(76,data)
(77,data[0])
(78,data[0].intTwo)
(79,NULL)
(80,data)
(81,data)
(82,data)
(83,(twoIntsStruct *)
(84,calloc(100, sizeof(struct _twoIntsStruct)
(85,data = (struct _twoIntsStruct *)
(86,NULL)
(87,0)
(88,exit(-1)
(89,data)
(90,data)
(91,calloc(100, sizeof(struct _twoIntsStruct)
(92,data[0].intTwo = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^