-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
40,41
40,42
40,43
41,42
43,44
46,47
47,48
47,49
48,49
50,51
53,54
53,55
55,56
55,57
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,45,49,51,52,54,56,57
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        break;    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        break;    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(19,6,0)
(21,24,0)
(24,21,0)
(2,21,0)
(14,18,0)
(21,2,0)
(3,7,0)
(13,1,0)
(11,7,0)
(20,3,0)
(21,22,0)
(7,22,0)
(7,3,0)
(1,2,0)
(17,18,0)
(22,21,0)
(2,9,0)
(12,16,0)
(8,2,0)
(23,6,0)
(5,9,0)
(1,9,0)
(22,7,0)
(15,18,0)
(6,18,0)
(0,5,1)
(2,21,1)
(12,0,1)
(1,2,1)
(21,24,1)
(0,4,1)
(5,1,1)
(10,0,1)
(10,12,1)
(19,23,1)
(8,4,1)
(11,8,1)
(3,20,1)
(22,7,1)
(13,2,1)
(6,19,1)
(7,3,1)
(1,13,1)
(4,6,1)
(21,22,1)
(20,11,1)
(21,4,2)
(21,22,2)
(1,4,2)
(3,4,2)
(1,2,2)
(5,4,2)
(12,0,2)
(2,4,2)
(21,24,2)
(8,4,2)
(22,7,2)
(7,4,2)
(11,4,2)
(22,4,2)
(2,21,2)
(13,4,2)
(20,4,2)
(7,3,2)
-----------------------------------
(0,1)
(1,printWLine(data)
(2,data = (wchar_t *)
(3,sizeof(wchar_t)
(4,1)
(5,break;)
(6,data = NULL)
(7,100*sizeof(wchar_t)
(8,data)
(9,)
(10,RET)
(11,100)
(12,break;)
(13,data)
(14,while(1)
(15,data)
(16,)
(17,while(1)
(18,)
(19,NULL)
(20,wchar_t)
(21,(wchar_t *)
(22,ALLOCA(100*sizeof(wchar_t)
(23,data)
(24,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^