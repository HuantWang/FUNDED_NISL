-----label-----
0
-----code-----
static void leave_queue(struct queue_ent *qe)
{
	struct call_queue *q;
	struct queue_ent *current, *prev = NULL;
	struct penalty_rule *pr_iter;
	int pos = 0;

	if (!(q = qe->parent)) {
		return;
	}
	queue_t_ref(q, "Copy queue pointer from queue entry");
	ao2_lock(q);

	prev = NULL;
	for (current = q->head; current; current = current->next) {
		if (current == qe) {
			char posstr[20];
			q->count--;
			if (!q->count) {
				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);
			}

			/* Take us out of the queue */
			/*** DOCUMENTATION
			<managerEventInstance>
				<synopsis>Raised when a channel leaves a Queue.</synopsis>
				<syntax>
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />
					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />
				</syntax>
				<see-also>
					<ref type="managerEvent">Join</ref>
				</see-also>
			</managerEventInstance>
			***/
			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",
				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",
				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));
			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));
			/* Take us out of the queue */
			if (prev) {
				prev->next = current->next;
			} else {
				q->head = current->next;
			}
			/* Free penalty rules */
			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {
				ast_free(pr_iter);
			}
			snprintf(posstr, sizeof(posstr), "%d", qe->pos);
			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);
		} else {
			/* Renumber the people after us in the queue based on a new count */
			current->pos = ++pos;
			prev = current;
		}
	}
	ao2_unlock(q);

	/*If the queue is a realtime queue, check to see if it's still defined in real time*/
	if (q->realtime) {
		struct ast_variable *var;
		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {
			q->dead = 1;
		} else {
			ast_variables_destroy(var);
		}
	}

	if (q->dead) {
		/* It's dead and nobody is in it, so kill it */
		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");
	}
	/* unref the explicit ref earlier in the function */
	queue_t_unref(q, "Expire copied reference");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
20,23
21,22
23,24
23,25
26,27
26,28
26,29
29,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
42,43
42,44
44,45
46,47
46,48
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
56,57
58,59
59,60
59,61
59,62
60,61
62,63
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
75,76
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
88,89
88,90
89,90
91,92
91,93
92,93
95,96
96,97
96,98
96,99
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
102,107
102,108
102,109
102,110
102,111
103,104
104,105
104,106
106,107
106,108
108,109
110,111
111,112
112,113
112,114
113,114
116,117
116,118
117,118
118,119
118,120
119,120
122,123
123,124
124,125
124,126
124,127
124,128
125,126
127,128
130,131
130,132
131,132
134,135
135,136
135,137
135,138
135,139
135,140
135,141
135,142
135,143
135,144
135,145
136,137
138,139
138,140
139,140
142,143
146,147
146,148
147,148
149,150
149,151
150,151
153,154
153,155
154,155
157,158
157,159
158,159
161,162
161,163
162,163
165,166
165,167
166,167
168,169
168,170
169,170
172,173
173,174
173,175
173,176
173,177
173,178
174,175
178,179
178,180
179,180
182,183
182,184
183,184
185,186
185,187
186,187
189,190
189,191
189,192
190,191
192,193
193,194
194,195
194,196
195,196
195,197
196,197
199,200
199,201
200,201
203,204
204,205
205,206
205,207
206,207
206,208
207,208
210,211
210,212
211,212
214,215
214,216
215,216
216,217
216,218
217,218
219,220
219,221
219,222
220,221
222,223
223,224
223,225
224,225
227,228
229,230
230,231
231,232
231,233
232,233
234,235
236,237
237,238
237,239
237,240
237,241
237,242
238,239
240,241
242,243
243,244
244,245
247,248
247,249
248,249
251,252
252,253
252,254
252,255
252,256
253,254
255,256
255,257
256,257
260,261
262,263
262,264
263,264
264,265
264,266
265,266
265,267
266,267
269,270
270,271
272,273
273,274
273,275
274,275
276,277
278,279
279,280
279,281
280,281
282,283
284,285
284,286
285,286
285,287
286,287
289,290
289,291
290,291
291,292
291,293
292,293
294,295
294,296
297,298
297,299
297,300
298,299
299,300
300,301
300,302
301,302
303,304
303,305
303,306
303,307
303,308
304,305
308,309
308,310
309,310
312,313
314,315
315,316
316,317
316,318
317,318
317,319
318,319
322,323
323,324
324,325
324,326
325,326
327,328
329,330
329,331
330,331
330,332
331,332
334,335
335,336
336,337
336,338
336,339
336,340
337,338
339,340
341,342
344,345
345,346
345,347
345,348
346,347
348,349
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,27,28,31,35,37,38,41,43,45,51,54,55,57,61,63,64,68,70,74,76,81,84,85,87,90,93,94,99,101,105,107,109,114,115,120,121,126,128,129,132,133,137,140,141,143,144,145,148,151,152,155,156,159,160,163,164,167,170,171,175,176,177,180,181,184,187,188,191,197,198,201,202,208,209,212,213,218,221,225,226,228,233,235,239,241,245,246,249,250,254,257,258,259,261,267,268,271,275,277,281,283,287,288,293,295,296,302,305,306,307,310,311,313,319,320,321,326,328,332,333,338,340,342,343,347,349,350
-----computeFrom-----
49,50
49,51
72,73
72,74
79,80
79,81
88,89
88,90
97,98
97,99
194,195
194,196
205,206
205,207
216,217
216,218
264,265
264,266
273,274
273,275
300,301
300,302
316,317
316,318
-----guardedBy-----
99,212
101,257
-----guardedByNegation-----
99,277
-----lastLexicalUse-----
99,277
-----jump-----
99,277
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void leave_queue(struct queue_ent *qe){	struct call_queue *q;	struct queue_ent *current, *prev = NULL;	struct penalty_rule *pr_iter;	int pos = 0;	if (!(q = qe->parent)) {		return;	}	queue_t_ref(q, "Copy queue pointer from queue entry");	ao2_lock(q);	prev = NULL;	for (current = q->head; current; current = current->next) {		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}	ao2_unlock(q);	/*If the queue is a realtime queue, check to see if it's still defined in real time*/	if (q->realtime) {		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}	if (q->dead) {		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}	/* unref the explicit ref earlier in the function */	queue_t_unref(q, "Expire copied reference");}
static void
leave_queue(struct queue_ent *qe)
leave_queue
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
{	struct call_queue *q;	struct queue_ent *current, *prev = NULL;	struct penalty_rule *pr_iter;	int pos = 0;	if (!(q = qe->parent)) {		return;	}	queue_t_ref(q, "Copy queue pointer from queue entry");	ao2_lock(q);	prev = NULL;	for (current = q->head; current; current = current->next) {		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}	ao2_unlock(q);	/*If the queue is a realtime queue, check to see if it's still defined in real time*/	if (q->realtime) {		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}	if (q->dead) {		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}	/* unref the explicit ref earlier in the function */	queue_t_unref(q, "Expire copied reference");}
struct call_queue *q;
struct call_queue *q;
struct call_queue
call_queue
*q
*
q
struct queue_ent *current, *prev = NULL;
struct queue_ent *current, *prev = NULL;
struct queue_ent
queue_ent
*current
*
current
*prev = NULL
*
prev
= NULL
NULL
NULL
struct penalty_rule *pr_iter;
struct penalty_rule *pr_iter;
struct penalty_rule
penalty_rule
*pr_iter
*
pr_iter
int pos = 0;
int pos = 0;
int
pos = 0
pos
= 0
0
if (!(q = qe->parent)) {		return;	}
!(q = qe->parent)
(q = qe->parent)
q = qe->parent
q
q
qe->parent
qe
qe
parent
{		return;	}
return;
queue_t_ref(q, "Copy queue pointer from queue entry");
queue_t_ref(q, "Copy queue pointer from queue entry")
queue_t_ref
queue_t_ref
q
q
"Copy queue pointer from queue entry"
ao2_lock(q);
ao2_lock(q)
ao2_lock
ao2_lock
q
q
prev = NULL;
prev = NULL
prev
prev
NULL
NULL
for (current = q->head; current; current = current->next) {		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}
current = q->head;
current = q->head
current
current
q->head
q
q
head
current
current
current = current->next
current
current
current->next
current
current
next
{		if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}	}
if (current == qe) {			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		} else {			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}
current == qe
current
current
qe
qe
{			char posstr[20];			q->count--;			if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}			/* Take us out of the queue */			/*** DOCUMENTATION			<managerEventInstance>				<synopsis>Raised when a channel leaves a Queue.</synopsis>				<syntax>					<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Count'])" />					<xi:include xpointer="xpointer(/docs/managerEvent[@name='Join']/managerEventInstance/syntax/parameter[@name='Position'])" />				</syntax>				<see-also>					<ref type="managerEvent">Join</ref>				</see-also>			</managerEventInstance>			***/			ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));			ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));			/* Take us out of the queue */			if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}			/* Free penalty rules */			while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}			snprintf(posstr, sizeof(posstr), "%d", qe->pos);			pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);		}
char posstr[20];
char posstr[20];
char
posstr[20]
posstr
[20]
20
q->count--;
q->count--
q->count
q
q
count
if (!q->count) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}
!q->count
q->count
q
q
count
{				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);			}
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name);
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
"Queue:%s"
q->name
q
q
name
ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan));
ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n",				ast_channel_name(qe->chan), q->name,  q->count, qe->pos, ast_channel_uniqueid(qe->chan))
ast_manager_event
ast_manager_event
qe->chan
qe
qe
chan
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"Leave"
"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nPosition: %d\r\nUniqueid: %s\r\n"
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
q->name
q
q
name
q->count
q
q
count
qe->pos
qe
qe
pos
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan));
ast_debug(1, "Queue '%s' Leave, Channel '%s'\n", q->name, ast_channel_name(qe->chan))
ast_debug
ast_debug
1
"Queue '%s' Leave, Channel '%s'\n"
q->name
q
q
name
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
if (prev) {				prev->next = current->next;			} else {				q->head = current->next;			}
prev
prev
{				prev->next = current->next;			}
prev->next = current->next;
prev->next = current->next
prev->next
prev
prev
next
current->next
current
current
next
{				q->head = current->next;			}
q->head = current->next;
q->head = current->next
q->head
q
q
head
current->next
current
current
next
while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))) {				ast_free(pr_iter);			}
(pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list))
pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
pr_iter
pr_iter
AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
AST_LIST_REMOVE_HEAD
AST_LIST_REMOVE_HEAD
&qe->qe_rules
qe->qe_rules
qe
qe
qe_rules
list
list
{				ast_free(pr_iter);			}
ast_free(pr_iter);
ast_free(pr_iter)
ast_free
ast_free
pr_iter
pr_iter
snprintf(posstr, sizeof(posstr), "%d", qe->pos);
snprintf(posstr, sizeof(posstr), "%d", qe->pos)
snprintf
snprintf
posstr
posstr
sizeof(posstr)
(posstr)
posstr
posstr
"%d"
qe->pos
qe
qe
pos
pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr);
pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
qe->chan
qe
qe
chan
"QUEUEPOSITION"
posstr
posstr
{			/* Renumber the people after us in the queue based on a new count */			current->pos = ++pos;			prev = current;		}
current->pos = ++pos;
current->pos = ++pos
current->pos
current
current
pos
++pos
pos
pos
prev = current;
prev = current
prev
prev
current
current
ao2_unlock(q);
ao2_unlock(q)
ao2_unlock
ao2_unlock
q
q
if (q->realtime) {		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}
q->realtime
q
q
realtime
{		struct ast_variable *var;		if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}	}
struct ast_variable *var;
struct ast_variable *var;
struct ast_variable
ast_variable
*var
*
var
if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))) {			q->dead = 1;		} else {			ast_variables_destroy(var);		}
!(var = ast_load_realtime("queues", "name", q->name, SENTINEL))
(var = ast_load_realtime("queues", "name", q->name, SENTINEL))
var = ast_load_realtime("queues", "name", q->name, SENTINEL)
var
var
ast_load_realtime("queues", "name", q->name, SENTINEL)
ast_load_realtime
ast_load_realtime
"queues"
"name"
q->name
q
q
name
SENTINEL
SENTINEL
{			q->dead = 1;		}
q->dead = 1;
q->dead = 1
q->dead
q
q
dead
1
{			ast_variables_destroy(var);		}
ast_variables_destroy(var);
ast_variables_destroy(var)
ast_variables_destroy
ast_variables_destroy
var
var
if (q->dead) {		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}
q->dead
q
q
dead
{		/* It's dead and nobody is in it, so kill it */		queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");	}
queues_t_unlink(queues, q, "Queue is now dead; remove it from the container");
queues_t_unlink(queues, q, "Queue is now dead; remove it from the container")
queues_t_unlink
queues_t_unlink
queues
queues
q
q
"Queue is now dead; remove it from the container"
queue_t_unref(q, "Expire copied reference");
queue_t_unref(q, "Expire copied reference")
queue_t_unref
queue_t_unref
q
q
"Expire copied reference"
-----joern-----
(166,123,0)
(106,186,0)
(102,25,0)
(118,77,0)
(192,112,0)
(88,143,0)
(157,151,0)
(124,187,0)
(8,157,0)
(92,58,0)
(129,48,0)
(61,59,0)
(122,47,0)
(186,55,0)
(151,186,0)
(157,23,0)
(46,77,0)
(115,131,0)
(32,3,0)
(40,186,0)
(85,84,0)
(162,184,0)
(175,116,0)
(151,157,0)
(131,123,0)
(111,123,0)
(116,3,0)
(84,85,0)
(64,86,0)
(100,72,0)
(182,10,0)
(187,123,0)
(78,47,0)
(149,2,0)
(38,7,0)
(165,121,0)
(187,58,0)
(170,13,0)
(159,103,0)
(121,123,0)
(141,35,0)
(67,3,0)
(108,12,0)
(140,123,0)
(180,65,0)
(50,47,0)
(93,100,0)
(191,112,0)
(41,58,0)
(147,7,0)
(166,89,0)
(103,123,0)
(184,123,0)
(11,188,0)
(189,7,0)
(155,79,0)
(168,64,0)
(84,79,0)
(19,119,0)
(188,156,0)
(108,85,0)
(177,169,0)
(100,87,0)
(127,166,0)
(90,151,0)
(133,65,0)
(170,35,0)
(45,74,0)
(106,116,0)
(8,143,0)
(34,66,0)
(21,95,0)
(154,190,0)
(71,51,0)
(125,58,0)
(27,190,0)
(101,96,0)
(62,46,0)
(80,35,0)
(190,7,0)
(153,169,0)
(79,84,0)
(135,35,0)
(20,116,0)
(17,48,0)
(154,139,0)
(66,34,0)
(51,1,0)
(82,87,0)
(25,35,0)
(181,186,0)
(42,154,0)
(47,35,0)
(36,72,0)
(53,46,0)
(14,85,0)
(36,116,0)
(175,59,0)
(50,72,0)
(2,58,0)
(0,87,0)
(65,72,0)
(132,102,0)
(75,175,0)
(65,123,0)
(46,123,0)
(43,25,0)
(37,166,0)
(83,64,0)
(134,51,0)
(130,76,0)
(87,35,0)
(87,100,0)
(13,170,0)
(64,123,0)
(155,72,0)
(22,89,0)
(101,106,0)
(181,61,0)
(119,123,0)
(188,17,0)
(70,151,0)
(126,188,0)
(179,13,0)
(1,188,0)
(52,50,0)
(77,46,0)
(148,155,0)
(89,114,0)
(61,137,0)
(74,94,0)
(163,152,0)
(156,188,0)
(25,66,0)
(188,126,0)
(68,48,0)
(98,143,0)
(161,106,0)
(151,116,0)
(24,74,0)
(160,188,0)
(56,84,0)
(113,10,0)
(86,64,0)
(26,156,0)
(178,8,0)
(146,13,0)
(138,58,0)
(143,58,0)
(188,35,0)
(8,175,0)
(171,155,0)
(81,126,0)
(109,190,0)
(137,61,0)
(167,106,0)
(4,21,0)
(131,188,0)
(172,11,0)
(104,181,0)
(17,188,0)
(73,76,0)
(190,27,0)
(18,156,0)
(103,7,0)
(156,123,0)
(99,58,0)
(169,58,0)
(188,11,0)
(106,101,0)
(74,123,0)
(3,123,0)
(145,121,0)
(13,123,0)
(77,60,0)
(164,58,0)
(48,17,0)
(31,188,0)
(181,116,0)
(55,116,0)
(34,72,0)
(25,102,0)
(126,72,0)
(3,116,0)
(11,72,0)
(2,123,0)
(9,74,0)
(15,92,0)
(193,184,0)
(112,123,0)
(185,77,0)
(144,11,0)
(57,55,0)
(51,72,0)
(69,36,0)
(128,35,0)
(33,188,0)
(5,78,0)
(36,186,0)
(1,51,0)
(112,58,0)
(188,131,0)
(110,36,0)
(174,25,0)
(6,102,0)
(47,78,0)
(7,103,0)
(188,1,0)
(47,50,0)
(107,131,0)
(136,8,0)
(66,25,0)
(55,186,0)
(39,175,0)
(123,65,0)
(117,108,0)
(123,140,0)
(30,55,0)
(175,186,0)
(16,100,0)
(63,58,0)
(44,119,0)
(173,58,0)
(150,126,0)
(97,58,0)
(10,123,0)
(29,34,0)
(176,137,0)
(91,50,0)
(105,103,0)
(54,34,0)
(7,190,0)
(79,155,0)
(142,92,0)
(119,101,0)
(120,181,0)
(158,47,0)
(102,123,0)
(48,72,0)
(10,58,0)
(49,58,0)
(137,169,0)
(151,186,1)
(39,75,1)
(177,92,1)
(18,26,1)
(129,11,1)
(148,171,1)
(3,32,1)
(175,39,1)
(118,185,1)
(98,187,1)
(116,3,1)
(69,183,1)
(57,30,1)
(175,186,1)
(48,68,1)
(162,2,1)
(46,53,1)
(143,88,1)
(40,175,1)
(13,179,1)
(31,33,1)
(4,21,1)
(75,61,1)
(102,123,1)
(25,66,1)
(83,168,1)
(42,27,1)
(108,117,1)
(34,29,1)
(106,116,1)
(113,140,1)
(36,72,1)
(55,116,1)
(10,182,1)
(184,123,1)
(27,190,1)
(84,56,1)
(64,123,1)
(34,72,1)
(101,106,1)
(81,86,1)
(11,72,1)
(150,81,1)
(131,107,1)
(166,37,1)
(55,186,1)
(145,184,1)
(82,0,1)
(14,157,1)
(123,65,1)
(91,52,1)
(146,36,1)
(149,183,1)
(156,123,1)
(37,127,1)
(85,84,1)
(30,40,1)
(188,126,1)
(124,10,1)
(65,72,1)
(6,174,1)
(52,122,1)
(38,103,1)
(137,169,1)
(93,47,1)
(134,31,1)
(181,104,1)
(188,17,1)
(154,42,1)
(187,124,1)
(56,79,1)
(25,102,1)
(36,186,1)
(46,123,1)
(190,7,1)
(184,193,1)
(188,131,1)
(45,9,1)
(137,176,1)
(181,186,1)
(182,113,1)
(167,119,1)
(103,123,1)
(158,85,1)
(65,133,1)
(127,27,1)
(156,18,1)
(108,85,1)
(188,1,1)
(14,108,1)
(117,85,1)
(2,149,1)
(100,16,1)
(43,188,1)
(74,24,1)
(7,103,1)
(110,69,1)
(66,34,1)
(92,15,1)
(33,160,1)
(53,62,1)
(145,154,1)
(71,134,1)
(51,72,1)
(36,116,1)
(51,71,1)
(133,180,1)
(90,70,1)
(186,55,1)
(70,8,1)
(106,161,1)
(22,166,1)
(47,78,1)
(121,165,1)
(172,131,1)
(136,178,1)
(119,19,1)
(28,25,1)
(19,44,1)
(154,190,1)
(5,158,1)
(144,172,1)
(44,28,1)
(140,123,1)
(185,86,1)
(131,123,1)
(14,101,1)
(109,184,1)
(120,36,1)
(191,74,1)
(8,143,1)
(8,136,1)
(9,121,1)
(64,83,1)
(29,54,1)
(168,170,1)
(126,72,1)
(0,100,1)
(159,189,1)
(145,89,1)
(161,167,1)
(1,51,1)
(54,102,1)
(119,123,1)
(153,177,1)
(112,123,1)
(147,109,1)
(48,72,1)
(86,64,1)
(61,137,1)
(107,115,1)
(67,20,1)
(20,143,1)
(88,98,1)
(50,72,1)
(8,175,1)
(160,126,1)
(157,151,1)
(191,121,1)
(188,156,1)
(151,90,1)
(100,72,1)
(183,116,1)
(170,13,1)
(47,50,1)
(16,93,1)
(84,79,1)
(169,153,1)
(62,118,1)
(3,123,1)
(183,186,1)
(36,110,1)
(68,129,1)
(187,123,1)
(106,186,1)
(166,123,1)
(32,67,1)
(11,144,1)
(151,116,1)
(13,123,1)
(155,148,1)
(24,45,1)
(121,123,1)
(89,22,1)
(181,116,1)
(87,100,1)
(176,181,1)
(105,159,1)
(132,6,1)
(165,145,1)
(10,123,1)
(174,43,1)
(77,46,1)
(26,1,1)
(103,105,1)
(189,147,1)
(171,14,1)
(4,112,1)
(50,91,1)
(104,120,1)
(102,132,1)
(192,191,1)
(21,140,1)
(15,142,1)
(178,28,1)
(74,123,1)
(126,150,1)
(188,11,1)
(17,48,1)
(87,82,1)
(122,78,1)
(155,72,1)
(81,77,1)
(115,156,1)
(180,111,1)
(112,192,1)
(2,123,1)
(79,155,1)
(55,57,1)
(40,87,1)
(7,38,1)
(179,146,1)
(111,169,1)
(78,5,1)
(175,116,1)
(193,162,1)
(186,183,2)
(146,36,2)
(178,28,2)
(46,86,2)
(156,36,2)
(122,36,2)
(102,123,2)
(172,36,2)
(90,28,2)
(36,116,2)
(184,123,2)
(174,36,2)
(112,140,2)
(62,86,2)
(190,184,2)
(1,51,2)
(151,186,2)
(140,123,2)
(132,36,2)
(45,121,2)
(124,140,2)
(16,36,2)
(105,184,2)
(47,78,2)
(71,36,2)
(155,36,2)
(53,86,2)
(112,123,2)
(145,140,2)
(47,50,2)
(151,116,2)
(6,36,2)
(11,72,2)
(155,85,2)
(188,126,2)
(88,140,2)
(26,36,2)
(157,28,2)
(159,184,2)
(185,86,2)
(179,36,2)
(131,36,2)
(48,72,2)
(27,184,2)
(103,184,2)
(77,46,2)
(131,123,2)
(121,123,2)
(64,36,2)
(170,13,2)
(171,85,2)
(8,143,2)
(79,155,2)
(13,36,2)
(107,36,2)
(84,79,2)
(21,140,2)
(161,28,2)
(188,1,2)
(10,123,2)
(40,183,2)
(182,140,2)
(68,36,2)
(87,36,2)
(36,72,2)
(17,48,2)
(34,36,2)
(29,36,2)
(186,55,2)
(167,28,2)
(27,190,2)
(148,36,2)
(101,28,2)
(162,140,2)
(20,140,2)
(165,140,2)
(89,27,2)
(170,36,2)
(190,7,2)
(193,140,2)
(166,27,2)
(51,72,2)
(106,116,2)
(157,151,2)
(154,27,2)
(1,36,2)
(47,36,2)
(176,36,2)
(85,36,2)
(61,36,2)
(43,36,2)
(106,28,2)
(175,186,2)
(8,175,2)
(55,186,2)
(123,65,2)
(175,116,2)
(51,36,2)
(98,140,2)
(115,36,2)
(192,140,2)
(150,36,2)
(86,64,2)
(181,186,2)
(119,123,2)
(175,36,2)
(79,36,2)
(184,140,2)
(25,36,2)
(10,140,2)
(188,17,2)
(188,36,2)
(8,28,2)
(31,36,2)
(101,106,2)
(66,36,2)
(189,184,2)
(143,140,2)
(191,140,2)
(151,28,2)
(81,36,2)
(156,123,2)
(120,36,2)
(137,36,2)
(64,123,2)
(0,36,2)
(39,36,2)
(33,36,2)
(183,140,2)
(30,183,2)
(5,36,2)
(127,27,2)
(93,36,2)
(110,183,2)
(11,36,2)
(17,36,2)
(148,85,2)
(113,140,2)
(155,72,2)
(108,85,2)
(102,36,2)
(4,21,2)
(91,36,2)
(187,140,2)
(188,11,2)
(77,86,2)
(70,28,2)
(75,36,2)
(183,183,2)
(149,140,2)
(32,140,2)
(66,34,2)
(55,116,2)
(103,123,2)
(7,184,2)
(50,72,2)
(126,72,2)
(86,36,2)
(168,36,2)
(28,36,2)
(48,36,2)
(129,36,2)
(36,183,2)
(67,140,2)
(158,36,2)
(85,84,2)
(116,140,2)
(147,184,2)
(46,123,2)
(166,123,2)
(38,184,2)
(2,140,2)
(187,123,2)
(52,36,2)
(84,36,2)
(126,36,2)
(119,28,2)
(36,186,2)
(37,27,2)
(74,121,2)
(3,123,2)
(78,36,2)
(84,85,2)
(109,184,2)
(117,85,2)
(69,183,2)
(14,85,2)
(56,36,2)
(61,137,2)
(19,28,2)
(83,36,2)
(55,183,2)
(50,36,2)
(137,169,2)
(79,85,2)
(87,100,2)
(134,36,2)
(74,123,2)
(57,183,2)
(34,72,2)
(188,131,2)
(116,3,2)
(104,36,2)
(7,103,2)
(144,36,2)
(85,85,2)
(56,85,2)
(154,190,2)
(42,27,2)
(100,72,2)
(18,36,2)
(106,186,2)
(14,36,2)
(22,27,2)
(100,36,2)
(136,28,2)
(118,86,2)
(160,36,2)
(3,140,2)
(65,72,2)
(9,121,2)
(121,140,2)
(188,156,2)
(44,28,2)
(54,36,2)
(24,121,2)
(2,123,2)
(171,36,2)
(181,116,2)
(13,123,2)
(25,102,2)
(181,36,2)
(25,66,2)
(82,36,2)
-----------------------------------
(0,"QUEUEPOSITION")
(1,ast_channel_name(qe->chan)
(2,ao2_unlock(q)
(3,q->head)
(4,RET)
(5,posstr)
(6,q)
(7,ast_load_realtime("queues", "name", q->name, SENTINEL)
(8,prev->next)
(9,queues)
(10,queue_t_ref(q, "Copy queue pointer from queue entry")
(11,qe->pos)
(12,)
(13,q->count)
(14,pr_iter)
(15,NULL)
(16,chan)
(17,ast_channel_uniqueid(qe->chan)
(18,name)
(19,head)
(20,current)
(21,return;)
(22,1)
(23,)
(24,"Queue is now dead; remove it from the container")
(25,ast_debug(1, "Queue \'%s\' Leave, Channel \'%s\'\\n", q->name, ast_channel_name(qe->chan)
(26,q)
(27,!(var = ast_load_realtime("queues", "name", q->name, SENTINEL)
(28,prev)
(29,chan)
(30,current)
(31,"Channel: %s\\r\\nQueue: %s\\r\\nCount: %d\\r\\nPosition: %d\\r\\nUniqueid: %s\\r\\n")
(32,head)
(33,"Leave")
(34,qe->chan)
(35,)
(36,current == qe)
(37,dead)
(38,SENTINEL)
(39,current)
(40,current)
(41,if (!(q = qe->parent)
(42,var)
(43,1)
(44,q)
(45,q)
(46,q->name)
(47,snprintf(posstr, sizeof(posstr)
(48,qe->chan)
(49,q)
(50,qe->pos)
(51,qe->chan)
(52,qe)
(53,name)
(54,qe)
(55,current->next)
(56,list)
(57,next)
(58,)
(59,)
(60,)
(61,current->pos = ++pos)
(62,q)
(63,pos)
(64,q->count)
(65,qe->parent)
(66,ast_channel_name(qe->chan)
(67,q)
(68,chan)
(69,current)
(70,current)
(71,chan)
(72,struct queue_ent *qe)
(73,if (!(var = ast_load_realtime("queues", "name", q->name, SENTINEL)
(74,queues_t_unlink(queues, q, "Queue is now dead; remove it from the container")
(75,prev)
(76,)
(77,ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s", q->name)
(78,sizeof(posstr)
(79,&qe->qe_rules)
(80,posstr)
(81,qe)
(82,posstr)
(83,count)
(84,AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
(85,pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
(86,!q->count)
(87,pbx_builtin_setvar_helper(qe->chan, "QUEUEPOSITION", posstr)
(88,NULL)
(89,q->dead = 1)
(90,next)
(91,pos)
(92,*prev = NULL)
(93,qe)
(94,)
(95,)
(96,)
(97,prev)
(98,prev)
(99,for (current = q->head; current; current = current->next)
(100,qe->chan)
(101,q->head = current->next)
(102,q->name)
(103,q->name)
(104,pos)
(105,name)
(106,current->next)
(107,count)
(108,ast_free(pr_iter)
(109,var)
(110,qe)
(111,q)
(112,queue_t_unref(q, "Expire copied reference")
(113,q)
(114,)
(115,q)
(116,current = q->head)
(117,pr_iter)
(118,"Queue:%s")
(119,q->head)
(120,current)
(121,q->dead)
(122,"%d")
(123,q = qe->parent)
(124,q)
(125,pr_iter)
(126,qe->chan)
(127,q)
(128,if (!q->count)
(129,qe)
(130,var)
(131,q->count)
(132,name)
(133,parent)
(134,qe)
(135,while ((pr_iter = AST_LIST_REMOVE_HEAD(&qe->qe_rules, list)
(136,next)
(137,++pos)
(138,if (q->dead)
(139,)
(140,!(q = qe->parent)
(141,if (prev)
(142,prev)
(143,prev = NULL)
(144,pos)
(145,q)
(146,q)
(147,"queues")
(148,qe_rules)
(149,q)
(150,chan)
(151,current->next)
(152,)
(153,0)
(154,ast_variables_destroy(var)
(155,qe->qe_rules)
(156,q->name)
(157,prev->next = current->next)
(158,posstr)
(159,q)
(160,EVENT_FLAG_CALL)
(161,next)
(162,q)
(163,if (current == qe)
(164,if (q->realtime)
(165,dead)
(166,q->dead)
(167,current)
(168,q)
(169,pos = 0)
(170,q->count--)
(171,qe)
(172,qe)
(173,current)
(174,"Queue \'%s\' Leave, Channel \'%s\'\\n")
(175,prev = current)
(176,pos)
(177,pos)
(178,prev)
(179,count)
(180,qe)
(181,current->pos)
(182,"Copy queue pointer from queue entry")
(183,current)
(184,q->realtime)
(185,AST_DEVICE_NOT_INUSE)
(186,current = current->next)
(187,ao2_lock(q)
(188,ast_manager_event(qe->chan, EVENT_FLAG_CALL, "Leave",\n\\n\\t\\t\\t\\t"Channel: %s\\r\\nQueue: %s\\r\\nCount: %d\\r\\nPosition: %d\\r\\nUniqueid: %s\\r\\n",\n\\n\\t\\t\\t\\tast_channel_name(qe->chan)
(189,"name")
(190,var = ast_load_realtime("queues", "name", q->name, SENTINEL)
(191,q)
(192,"Expire copied reference")
(193,realtime)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^