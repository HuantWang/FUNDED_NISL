-----label-----
0
-----code-----
int
pcap_read(pcap_t *p, int cnt, pcap_handler callback, u_char *user)
{
	register int cc, n, caplen, origlen;
	register u_char *bp, *ep, *pk;
	register struct bpf_insn *fcode;
#ifdef HAVE_SYS_BUFMOD_H
	register struct sb_hdr *sbp;
#ifdef LBL_ALIGN
	struct sb_hdr sbhdr;
#endif
#endif
	int flags;
	struct strbuf data;
	struct pcap_pkthdr pkthdr;

	flags = 0;
	cc = p->cc;
	if (cc == 0) {
		data.buf = (char *)p->buffer + p->offset;
		data.maxlen = p->bufsize;
		data.len = 0;
		do {
			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {
				/* Don't choke when we get ptraced */
				if (errno == EINTR) {
					cc = 0;
					continue;
				}
				strlcpy(p->errbuf, pcap_strerror(errno),
				    sizeof(p->errbuf));
				return (-1);
			}
			cc = data.len;
		} while (cc == 0);
		bp = p->buffer + p->offset;
	} else
		bp = p->bp;

	/* Loop through packets */
	fcode = p->fcode.bf_insns;
	ep = bp + cc;
	n = 0;
#ifdef HAVE_SYS_BUFMOD_H
	while (bp < ep) {
#ifdef LBL_ALIGN
		if ((long)bp & 3) {
			sbp = &sbhdr;
			memcpy(sbp, bp, sizeof(*sbp));
		} else
#endif
			sbp = (struct sb_hdr *)bp;
		p->md.stat.ps_drop += sbp->sbh_drops;
		pk = bp + sizeof(*sbp);
		bp += sbp->sbh_totlen;
		origlen = sbp->sbh_origlen;
		caplen = sbp->sbh_msglen;
#else
		origlen = cc;
		caplen = min(p->snapshot, cc);
		pk = bp;
		bp += caplen;
#endif
		++p->md.stat.ps_recv;
		if (bpf_filter(fcode, pk, origlen, caplen)) {
#ifdef HAVE_SYS_BUFMOD_H
			pkthdr.ts.tv_sec = sbp->sbh_timestamp.tv_sec;
			pkthdr.ts.tv_usec = sbp->sbh_timestamp.tv_usec;
#else
			(void)gettimeofday(&pkthdr.ts, NULL);
#endif
			pkthdr.len = origlen;
			pkthdr.caplen = caplen;
			/* Insure caplen does not exceed snapshot */
			if (pkthdr.caplen > p->snapshot)
				pkthdr.caplen = p->snapshot;
			(*callback)(user, &pkthdr, pk);
			if (++n >= cnt && cnt >= 0) {
				p->cc = ep - bp;
				p->bp = bp;
				return (n);
			}
		}
#ifdef HAVE_SYS_BUFMOD_H
	}
#endif
	p->cc = 0;
	return (n);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
23,24
23,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
26,39
26,40
26,41
26,42
26,43
26,44
26,45
26,46
27,28
28,29
28,30
28,31
28,32
28,33
30,31
32,33
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
42,44
45,46
45,47
48,49
48,50
51,52
52,53
52,54
53,54
55,56
55,57
58,59
59,60
59,61
61,62
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
84,86
85,86
88,89
88,90
88,91
89,90
89,91
90,91
93,94
93,95
93,96
93,97
93,98
94,95
95,96
95,97
96,97
96,98
97,98
100,101
100,102
101,102
101,103
102,103
102,104
104,105
106,107
106,108
107,108
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
124,125
125,126
125,127
126,127
126,128
127,128
131,132
131,133
132,133
132,134
133,134
133,135
134,135
134,136
135,136
135,137
135,138
135,139
135,140
136,137
138,139
138,140
139,140
142,143
143,144
145,146
146,147
148,149
149,150
152,153
152,154
152,155
153,154
153,155
154,155
154,156
155,156
157,158
159,160
159,161
160,161
161,162
161,163
162,163
166,167
167,168
167,169
167,170
167,171
168,169
170,171
170,172
171,172
174,175
174,176
175,176
177,178
179,180
180,181
181,182
181,183
182,183
185,186
186,187
187,188
189,190
190,191
190,192
191,192
193,194
193,195
194,195
197,198
197,199
198,199
201,202
202,203
202,204
203,204
205,206
205,207
206,207
206,208
207,208
210,211
210,212
211,212
214,215
215,216
215,217
216,217
218,219
218,220
219,220
222,223
223,224
223,225
224,225
226,227
226,228
227,228
227,229
228,229
232,233
233,234
233,235
234,235
236,237
236,238
237,238
239,240
241,242
242,243
242,244
243,244
246,247
247,248
247,249
248,249
250,251
252,253
253,254
253,255
254,255
256,257
256,258
256,259
257,258
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
269,270
271,272
272,273
272,274
273,274
275,276
277,278
278,279
279,280
279,281
280,281
280,282
281,282
281,283
282,283
287,288
287,289
288,289
288,290
288,291
288,292
288,293
289,290
291,292
293,294
295,296
297,298
299,300
299,301
299,302
299,303
299,304
299,305
300,301
301,302
301,303
302,303
302,304
305,306
305,307
305,308
306,307
308,309
309,310
309,311
310,311
313,314
315,316
316,317
316,318
317,318
317,319
318,319
321,322
323,324
324,325
324,326
325,326
325,327
326,327
329,330
331,332
331,333
332,333
332,334
333,334
333,335
334,335
337,338
337,339
338,339
341,342
342,343
342,344
343,344
343,345
344,345
347,348
347,349
348,349
351,352
352,353
352,354
352,355
352,356
353,354
354,355
355,356
357,358
359,360
360,361
362,363
364,365
364,366
365,366
365,367
366,367
366,368
367,368
368,369
370,371
372,373
372,374
373,374
376,377
376,378
376,379
377,378
378,379
378,380
379,380
379,381
380,381
383,384
383,385
384,385
386,387
388,389
389,390
389,391
390,391
390,392
391,392
394,395
396,397
397,398
398,399
400,401
401,402
401,403
402,403
402,404
403,404
407,408
408,409
409,410
-----nextToken-----
2,4,7,9,10,12,14,17,19,22,24,25,29,31,33,35,37,41,43,44,46,47,49,50,54,56,57,60,62,66,68,72,74,78,79,83,86,87,91,92,98,99,103,105,108,109,112,113,118,119,122,123,128,129,130,137,140,141,144,147,150,151,156,158,163,164,165,169,172,173,176,178,183,184,188,192,195,196,199,200,204,208,209,212,213,217,220,221,225,229,230,231,235,238,240,244,245,249,251,255,258,261,262,264,268,270,274,276,283,284,285,286,290,292,294,296,298,303,304,307,311,312,314,319,320,322,327,328,330,335,336,339,340,345,346,349,350,356,358,361,363,369,371,374,375,381,382,385,387,392,393,395,399,404,405,406,410
-----computeFrom-----
76,77
76,78
81,82
81,83
89,90
89,91
95,96
95,97
100,101
100,102
115,116
115,117
125,126
125,127
134,135
134,136
154,155
154,156
161,162
161,163
190,191
190,192
197,198
197,199
202,203
202,204
205,206
205,207
215,216
215,217
223,224
223,225
233,234
233,235
236,237
236,238
242,243
242,244
247,248
247,249
253,254
253,255
266,267
266,268
272,273
272,274
316,317
316,318
324,325
324,326
332,333
332,334
342,343
342,344
365,366
365,367
366,367
366,368
372,373
372,374
378,379
378,380
383,384
383,385
389,390
389,391
401,402
401,403
-----guardedBy-----
91,199
140,183
339,349
335,345
336,346
340,350
369,399
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DoStatement;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
intpcap_read(pcap_t *p, int cnt, pcap_handler callback, u_char *user){	register int cc, n, caplen, origlen;	register u_char *bp, *ep, *pk;	register struct bpf_insn *fcode;#ifdef HAVE_SYS_BUFMOD_H	register struct sb_hdr *sbp;#ifdef LBL_ALIGN	struct sb_hdr sbhdr;#endif#endif	int flags;	struct strbuf data;	struct pcap_pkthdr pkthdr;	flags = 0;	cc = p->cc;	if (cc == 0) {		data.buf = (char *)p->buffer + p->offset;		data.maxlen = p->bufsize;		data.len = 0;		do {			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}			cc = data.len;		} while (cc == 0);		bp = p->buffer + p->offset;	} else		bp = p->bp;	/* Loop through packets */	fcode = p->fcode.bf_insns;	ep = bp + cc;	n = 0;#ifdef HAVE_SYS_BUFMOD_H	while (bp < ep) {#ifdef LBL_ALIGN		if ((long)bp & 3) {			sbp = &sbhdr;			memcpy(sbp, bp, sizeof(*sbp));		} else#endif			sbp = (struct sb_hdr *)bp;		p->md.stat.ps_drop += sbp->sbh_drops;		pk = bp + sizeof(*sbp);		bp += sbp->sbh_totlen;		origlen = sbp->sbh_origlen;		caplen = sbp->sbh_msglen;#else		origlen = cc;		caplen = min(p->snapshot, cc);		pk = bp;		bp += caplen;#endif		++p->md.stat.ps_recv;		if (bpf_filter(fcode, pk, origlen, caplen)) {#ifdef HAVE_SYS_BUFMOD_H			pkthdr.ts.tv_sec = sbp->sbh_timestamp.tv_sec;			pkthdr.ts.tv_usec = sbp->sbh_timestamp.tv_usec;#else			(void)gettimeofday(&pkthdr.ts, NULL);#endif			pkthdr.len = origlen;			pkthdr.caplen = caplen;			/* Insure caplen does not exceed snapshot */			if (pkthdr.caplen > p->snapshot)				pkthdr.caplen = p->snapshot;			(*callback)(user, &pkthdr, pk);			if (++n >= cnt && cnt >= 0) {				p->cc = ep - bp;				p->bp = bp;				return (n);			}		}#ifdef HAVE_SYS_BUFMOD_H	}#endif	p->cc = 0;	return (n);}
int
pcap_read(pcap_t *p, int cnt, pcap_handler callback, u_char *user)
pcap_read
pcap_t *p
pcap_t
pcap_t
*p
*
p
int cnt
int
cnt
cnt
pcap_handler callback
pcap_handler
pcap_handler
callback
callback
u_char *user
u_char
u_char
*user
*
user
{	register int cc, n, caplen, origlen;	register u_char *bp, *ep, *pk;	register struct bpf_insn *fcode;#ifdef HAVE_SYS_BUFMOD_H	register struct sb_hdr *sbp;#ifdef LBL_ALIGN	struct sb_hdr sbhdr;#endif#endif	int flags;	struct strbuf data;	struct pcap_pkthdr pkthdr;	flags = 0;	cc = p->cc;	if (cc == 0) {		data.buf = (char *)p->buffer + p->offset;		data.maxlen = p->bufsize;		data.len = 0;		do {			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}			cc = data.len;		} while (cc == 0);		bp = p->buffer + p->offset;	} else		bp = p->bp;	/* Loop through packets */	fcode = p->fcode.bf_insns;	ep = bp + cc;	n = 0;#ifdef HAVE_SYS_BUFMOD_H	while (bp < ep) {#ifdef LBL_ALIGN		if ((long)bp & 3) {			sbp = &sbhdr;			memcpy(sbp, bp, sizeof(*sbp));		} else#endif			sbp = (struct sb_hdr *)bp;		p->md.stat.ps_drop += sbp->sbh_drops;		pk = bp + sizeof(*sbp);		bp += sbp->sbh_totlen;		origlen = sbp->sbh_origlen;		caplen = sbp->sbh_msglen;#else		origlen = cc;		caplen = min(p->snapshot, cc);		pk = bp;		bp += caplen;#endif		++p->md.stat.ps_recv;		if (bpf_filter(fcode, pk, origlen, caplen)) {#ifdef HAVE_SYS_BUFMOD_H			pkthdr.ts.tv_sec = sbp->sbh_timestamp.tv_sec;			pkthdr.ts.tv_usec = sbp->sbh_timestamp.tv_usec;#else			(void)gettimeofday(&pkthdr.ts, NULL);#endif			pkthdr.len = origlen;			pkthdr.caplen = caplen;			/* Insure caplen does not exceed snapshot */			if (pkthdr.caplen > p->snapshot)				pkthdr.caplen = p->snapshot;			(*callback)(user, &pkthdr, pk);			if (++n >= cnt && cnt >= 0) {				p->cc = ep - bp;				p->bp = bp;				return (n);			}		}#ifdef HAVE_SYS_BUFMOD_H	}#endif	p->cc = 0;	return (n);}
register int cc, n, caplen, origlen;
register int cc, n, caplen, origlen;
register int
cc
cc
n
n
caplen
caplen
origlen
origlen
register u_char *bp, *ep, *pk;
register u_char *bp, *ep, *pk;
register u_char
u_char
*bp
*
bp
*ep
*
ep
*pk
*
pk
register struct bpf_insn *fcode;
register struct bpf_insn *fcode;
register struct bpf_insn
bpf_insn
*fcode
*
fcode
int flags;
int flags;
int
flags
flags
struct strbuf data;
struct strbuf data;
struct strbuf
strbuf
data
data
struct pcap_pkthdr pkthdr;
struct pcap_pkthdr pkthdr;
struct pcap_pkthdr
pcap_pkthdr
pkthdr
pkthdr
flags = 0;
flags = 0
flags
flags
0
cc = p->cc;
cc = p->cc
cc
cc
p->cc
p
p
cc
if (cc == 0) {		data.buf = (char *)p->buffer + p->offset;		data.maxlen = p->bufsize;		data.len = 0;		do {			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}			cc = data.len;		} while (cc == 0);		bp = p->buffer + p->offset;	} else		bp = p->bp;
cc == 0
cc
cc
0
{		data.buf = (char *)p->buffer + p->offset;		data.maxlen = p->bufsize;		data.len = 0;		do {			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}			cc = data.len;		} while (cc == 0);		bp = p->buffer + p->offset;	}
data.buf = (char *)p->buffer + p->offset;
data.buf = (char *)p->buffer + p->offset
data.buf
data
data
buf
(char *)p->buffer + p->offset
(char *)p->buffer
char *
char
*
*
p->buffer
p
p
buffer
p->offset
p
p
offset
data.maxlen = p->bufsize;
data.maxlen = p->bufsize
data.maxlen
data
data
maxlen
p->bufsize
p
p
bufsize
data.len = 0;
data.len = 0
data.len
data
data
len
0
do {			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}			cc = data.len;		} while (cc == 0);
{			if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}			cc = data.len;		}
if (getmsg(p->fd, &ctl, &data, &flags) < 0) {				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}
getmsg(p->fd, &ctl, &data, &flags) < 0
getmsg(p->fd, &ctl, &data, &flags)
getmsg
getmsg
p->fd
p
p
fd
&ctl
ctl
ctl
&data
data
data
&flags
flags
flags
0
{				/* Don't choke when we get ptraced */				if (errno == EINTR) {					cc = 0;					continue;				}				strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));				return (-1);			}
if (errno == EINTR) {					cc = 0;					continue;				}
errno == EINTR
errno
errno
EINTR
EINTR
{					cc = 0;					continue;				}
cc = 0;
cc = 0
cc
cc
0
continue;
strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf));
strlcpy(p->errbuf, pcap_strerror(errno),				    sizeof(p->errbuf))
strlcpy
strlcpy
p->errbuf
p
p
errbuf
pcap_strerror(errno)
pcap_strerror
pcap_strerror
errno
errno
sizeof(p->errbuf)
(p->errbuf)
p->errbuf
p
p
errbuf
return (-1);
(-1)
-1
1
cc = data.len;
cc = data.len
cc
cc
data.len
data
data
len
cc == 0
cc
cc
0
bp = p->buffer + p->offset;
bp = p->buffer + p->offset
bp
bp
p->buffer + p->offset
p->buffer
p
p
buffer
p->offset
p
p
offset
bp = p->bp;
bp = p->bp
bp
bp
p->bp
p
p
bp
fcode = p->fcode.bf_insns;
fcode = p->fcode.bf_insns
fcode
fcode
p->fcode.bf_insns
p->fcode
p
p
fcode
bf_insns
ep = bp + cc;
ep = bp + cc
ep
ep
bp + cc
bp
bp
cc
cc
n = 0;
n = 0
n
n
0
origlen = cc;
origlen = cc
origlen
origlen
cc
cc
caplen = min(p->snapshot, cc);
caplen = min(p->snapshot, cc)
caplen
caplen
min(p->snapshot, cc)
min
min
p->snapshot
p
p
snapshot
cc
cc
pk = bp;
pk = bp
pk
pk
bp
bp
bp += caplen;
bp += caplen
bp
bp
caplen
caplen
++p->md.stat.ps_recv;
++p->md.stat.ps_recv
p->md.stat.ps_recv
p->md.stat
p->md
p
p
md
stat
ps_recv
if (bpf_filter(fcode, pk, origlen, caplen)) {#ifdef HAVE_SYS_BUFMOD_H			pkthdr.ts.tv_sec = sbp->sbh_timestamp.tv_sec;			pkthdr.ts.tv_usec = sbp->sbh_timestamp.tv_usec;#else			(void)gettimeofday(&pkthdr.ts, NULL);#endif			pkthdr.len = origlen;			pkthdr.caplen = caplen;			/* Insure caplen does not exceed snapshot */			if (pkthdr.caplen > p->snapshot)				pkthdr.caplen = p->snapshot;			(*callback)(user, &pkthdr, pk);			if (++n >= cnt && cnt >= 0) {				p->cc = ep - bp;				p->bp = bp;				return (n);			}		}
bpf_filter(fcode, pk, origlen, caplen)
bpf_filter
bpf_filter
fcode
fcode
pk
pk
origlen
origlen
caplen
caplen
{#ifdef HAVE_SYS_BUFMOD_H			pkthdr.ts.tv_sec = sbp->sbh_timestamp.tv_sec;			pkthdr.ts.tv_usec = sbp->sbh_timestamp.tv_usec;#else			(void)gettimeofday(&pkthdr.ts, NULL);#endif			pkthdr.len = origlen;			pkthdr.caplen = caplen;			/* Insure caplen does not exceed snapshot */			if (pkthdr.caplen > p->snapshot)				pkthdr.caplen = p->snapshot;			(*callback)(user, &pkthdr, pk);			if (++n >= cnt && cnt >= 0) {				p->cc = ep - bp;				p->bp = bp;				return (n);			}		}
(void)gettimeofday(&pkthdr.ts, NULL);
(void)gettimeofday(&pkthdr.ts, NULL)
void
void

gettimeofday(&pkthdr.ts, NULL)
gettimeofday
gettimeofday
&pkthdr.ts
pkthdr.ts
pkthdr
pkthdr
ts
NULL
NULL
pkthdr.len = origlen;
pkthdr.len = origlen
pkthdr.len
pkthdr
pkthdr
len
origlen
origlen
pkthdr.caplen = caplen;
pkthdr.caplen = caplen
pkthdr.caplen
pkthdr
pkthdr
caplen
caplen
caplen
if (pkthdr.caplen > p->snapshot)				pkthdr.caplen = p->snapshot;
pkthdr.caplen > p->snapshot
pkthdr.caplen
pkthdr
pkthdr
caplen
p->snapshot
p
p
snapshot
pkthdr.caplen = p->snapshot;
pkthdr.caplen = p->snapshot
pkthdr.caplen
pkthdr
pkthdr
caplen
p->snapshot
p
p
snapshot
(*callback)(user, &pkthdr, pk);
(*callback)(user, &pkthdr, pk)
(*callback)
*callback
callback
callback
user
user
&pkthdr
pkthdr
pkthdr
pk
pk
if (++n >= cnt && cnt >= 0) {				p->cc = ep - bp;				p->bp = bp;				return (n);			}
++n >= cnt && cnt >= 0
++n >= cnt
++n
n
n
cnt
cnt
cnt >= 0
cnt
cnt
0
{				p->cc = ep - bp;				p->bp = bp;				return (n);			}
p->cc = ep - bp;
p->cc = ep - bp
p->cc
p
p
cc
ep - bp
ep
ep
bp
bp
p->bp = bp;
p->bp = bp
p->bp
p
p
bp
bp
bp
return (n);
(n)
n
n
p->cc = 0;
p->cc = 0
p->cc
p
p
cc
0
return (n);
(n)
n
n
-----joern-----
(178,165,0)
(40,115,0)
(25,206,0)
(78,182,0)
(129,68,0)
(235,114,0)
(53,59,0)
(5,38,0)
(94,258,0)
(263,9,0)
(177,41,0)
(135,284,0)
(223,167,0)
(22,89,0)
(226,160,0)
(12,38,0)
(63,206,0)
(182,77,0)
(179,220,0)
(288,68,0)
(95,265,0)
(89,162,0)
(103,206,0)
(89,22,0)
(144,204,0)
(142,44,0)
(3,148,0)
(285,38,0)
(157,148,0)
(269,1,0)
(283,265,0)
(6,59,0)
(48,288,0)
(52,231,0)
(226,277,0)
(5,191,0)
(162,89,0)
(89,213,0)
(145,243,0)
(225,34,0)
(131,122,0)
(229,232,0)
(45,285,0)
(273,203,0)
(76,14,0)
(266,253,0)
(129,166,0)
(95,248,0)
(88,54,0)
(285,285,0)
(213,89,0)
(284,253,0)
(122,277,0)
(5,117,0)
(140,265,0)
(99,165,0)
(46,276,0)
(1,52,0)
(218,201,0)
(114,117,0)
(237,276,0)
(124,117,0)
(221,278,0)
(201,284,0)
(118,12,0)
(203,68,0)
(27,156,0)
(125,285,0)
(266,172,0)
(270,114,0)
(19,206,0)
(253,74,0)
(98,265,0)
(214,206,0)
(0,52,0)
(116,75,0)
(137,68,0)
(48,167,0)
(23,68,0)
(15,98,0)
(150,13,0)
(125,277,0)
(255,253,0)
(57,213,0)
(20,254,0)
(173,115,0)
(82,144,0)
(61,68,0)
(0,277,0)
(258,94,0)
(116,267,0)
(108,172,0)
(7,41,0)
(139,285,0)
(8,265,0)
(143,122,0)
(32,179,0)
(195,123,0)
(59,68,0)
(185,8,0)
(191,5,0)
(0,24,0)
(272,128,0)
(148,38,0)
(269,38,0)
(121,136,0)
(146,118,0)
(152,230,0)
(169,160,0)
(33,94,0)
(148,8,0)
(275,15,0)
(11,68,0)
(72,151,0)
(80,74,0)
(116,179,0)
(279,212,0)
(167,48,0)
(5,75,0)
(278,260,0)
(81,265,0)
(182,68,0)
(13,68,0)
(155,61,0)
(285,253,0)
(102,157,0)
(265,283,0)
(241,139,0)
(47,283,0)
(153,38,0)
(139,253,0)
(3,269,0)
(247,274,0)
(23,224,0)
(151,277,0)
(207,136,0)
(196,274,0)
(109,266,0)
(156,105,0)
(75,260,0)
(166,273,0)
(144,52,0)
(278,212,0)
(204,81,0)
(88,269,0)
(186,225,0)
(5,121,0)
(2,288,0)
(122,5,0)
(231,52,0)
(266,123,0)
(98,277,0)
(64,95,0)
(266,212,0)
(120,278,0)
(94,68,0)
(197,191,0)
(102,53,0)
(70,206,0)
(138,89,0)
(186,116,0)
(151,265,0)
(84,97,0)
(24,0,0)
(133,197,0)
(181,13,0)
(100,226,0)
(10,61,0)
(3,167,0)
(69,31,0)
(144,265,0)
(123,206,0)
(18,227,0)
(31,154,0)
(108,224,0)
(115,231,0)
(28,206,0)
(286,154,0)
(266,243,0)
(234,151,0)
(128,68,0)
(164,162,0)
(5,156,0)
(96,181,0)
(248,95,0)
(192,137,0)
(71,23,0)
(117,114,0)
(12,118,0)
(41,45,0)
(217,48,0)
(284,52,0)
(44,212,0)
(250,45,0)
(130,206,0)
(160,184,0)
(198,171,0)
(101,129,0)
(252,179,0)
(184,160,0)
(151,234,0)
(230,68,0)
(116,18,0)
(147,262,0)
(31,69,0)
(208,18,0)
(212,171,0)
(209,59,0)
(108,285,0)
(74,68,0)
(90,267,0)
(224,108,0)
(132,144,0)
(161,88,0)
(42,232,0)
(117,91,0)
(81,204,0)
(91,15,0)
(16,105,0)
(277,0,0)
(105,262,0)
(194,31,0)
(183,38,0)
(244,75,0)
(60,199,0)
(110,172,0)
(220,258,0)
(67,203,0)
(144,285,0)
(228,260,0)
(0,285,0)
(139,52,0)
(162,165,0)
(104,11,0)
(51,262,0)
(273,166,0)
(136,121,0)
(284,135,0)
(233,138,0)
(1,234,0)
(141,226,0)
(86,13,0)
(9,77,0)
(14,88,0)
(137,97,0)
(49,286,0)
(184,262,0)
(212,278,0)
(111,288,0)
(276,123,0)
(5,18,0)
(125,265,0)
(0,253,0)
(1,253,0)
(176,102,0)
(240,156,0)
(232,157,0)
(83,206,0)
(288,48,0)
(281,230,0)
(216,3,0)
(245,286,0)
(251,98,0)
(31,119,0)
(215,121,0)
(231,115,0)
(66,128,0)
(113,206,0)
(89,112,0)
(5,9,0)
(154,286,0)
(268,74,0)
(249,206,0)
(175,125,0)
(17,108,0)
(59,53,0)
(284,285,0)
(85,203,0)
(50,148,0)
(172,206,0)
(172,266,0)
(224,34,0)
(271,93,0)
(188,11,0)
(204,144,0)
(79,136,0)
(41,68,0)
(97,206,0)
(5,122,0)
(58,95,0)
(43,273,0)
(170,127,0)
(258,181,0)
(160,226,0)
(55,182,0)
(66,118,0)
(13,181,0)
(69,274,0)
(264,123,0)
(8,277,0)
(159,206,0)
(259,277,0)
(22,68,0)
(158,44,0)
(282,22,0)
(189,0,0)
(274,206,0)
(205,285,0)
(91,262,0)
(144,253,0)
(239,43,0)
(92,66,0)
(61,227,0)
(257,108,0)
(199,274,0)
(139,172,0)
(123,276,0)
(105,248,0)
(112,89,0)
(44,243,0)
(285,125,0)
(35,264,0)
(122,265,0)
(248,38,0)
(128,66,0)
(256,116,0)
(15,91,0)
(200,23,0)
(30,206,0)
(65,98,0)
(266,52,0)
(52,254,0)
(231,230,0)
(1,285,0)
(39,18,0)
(265,168,0)
(225,274,0)
(36,243,0)
(222,88,0)
(242,191,0)
(53,102,0)
(273,267,0)
(167,206,0)
(154,31,0)
(144,168,0)
(203,273,0)
(261,69,0)
(149,264,0)
(211,129,0)
(166,129,0)
(106,125,0)
(8,148,0)
(258,220,0)
(45,34,0)
(11,197,0)
(5,179,0)
(286,119,0)
(193,256,0)
(165,206,0)
(107,3,0)
(280,9,0)
(26,206,0)
(102,77,0)
(21,157,0)
(121,184,0)
(181,96,0)
(243,127,0)
(95,277,0)
(4,139,0)
(260,254,0)
(98,15,0)
(115,68,0)
(210,102,0)
(197,11,0)
(190,137,0)
(246,3,0)
(187,225,0)
(276,68,0)
(62,81,0)
(273,43,0)
(287,1,0)
(219,206,0)
(1,269,0)
(181,258,0)
(134,94,0)
(285,52,0)
(234,1,0)
(236,248,0)
(3,248,0)
(88,14,0)
(56,112,0)
(227,61,0)
(284,201,0)
(29,128,0)
(199,206,0)
(226,265,0)
(77,182,0)
(126,284,0)
(74,253,0)
(202,52,0)
(174,75,0)
(88,262,0)
(238,3,0)
(227,254,0)
(118,66,0)
(180,8,0)
(157,262,0)
(220,254,0)
(73,22,0)
(89,138,0)
(191,197,0)
(5,232,0)
(163,93,0)
(87,269,0)
(37,266,0)
(230,231,0)
(186,199,0)
(167,48,1)
(125,277,1)
(286,49,1)
(0,24,1)
(161,77,1)
(245,31,1)
(237,46,1)
(141,100,1)
(17,23,1)
(115,68,1)
(117,124,1)
(18,39,1)
(268,80,1)
(221,279,1)
(234,151,1)
(0,253,1)
(5,121,1)
(285,52,1)
(60,97,1)
(94,134,1)
(182,68,1)
(22,282,1)
(5,156,1)
(129,68,1)
(5,179,1)
(65,117,1)
(87,5,1)
(29,272,1)
(230,281,1)
(80,255,1)
(271,163,1)
(69,274,1)
(78,55,1)
(284,253,1)
(74,268,1)
(69,261,1)
(260,228,1)
(121,215,1)
(86,179,1)
(99,178,1)
(242,197,1)
(95,265,1)
(59,68,1)
(123,276,1)
(116,256,1)
(100,121,1)
(7,224,1)
(8,277,1)
(270,3,1)
(232,229,1)
(222,14,1)
(122,143,1)
(72,287,1)
(116,75,1)
(264,149,1)
(77,182,1)
(52,231,1)
(117,114,1)
(46,195,1)
(81,265,1)
(278,260,1)
(118,146,1)
(5,122,1)
(104,188,1)
(10,18,1)
(184,160,1)
(180,185,1)
(42,105,1)
(89,162,1)
(136,207,1)
(282,73,1)
(258,94,1)
(126,139,1)
(209,6,1)
(137,190,1)
(218,284,1)
(202,44,1)
(190,192,1)
(154,31,1)
(98,277,1)
(179,32,1)
(201,284,1)
(210,157,1)
(163,112,1)
(88,14,1)
(266,212,1)
(285,253,1)
(208,220,1)
(43,239,1)
(162,165,1)
(129,101,1)
(265,283,1)
(21,232,1)
(274,247,1)
(8,265,1)
(23,71,1)
(40,173,1)
(269,1,1)
(5,117,1)
(3,148,1)
(191,197,1)
(93,271,1)
(128,68,1)
(89,138,1)
(193,273,1)
(56,89,1)
(170,243,1)
(192,139,1)
(273,43,1)
(6,102,1)
(4,241,1)
(233,22,1)
(57,138,1)
(53,102,1)
(0,285,1)
(133,11,1)
(207,79,1)
(266,253,1)
(11,104,1)
(225,274,1)
(256,193,1)
(36,93,1)
(97,84,1)
(5,232,1)
(58,236,1)
(151,277,1)
(148,8,1)
(107,238,1)
(71,200,1)
(27,240,1)
(5,9,1)
(62,82,1)
(285,285,1)
(181,13,1)
(139,285,1)
(158,170,1)
(108,285,1)
(216,12,1)
(197,133,1)
(49,245,1)
(13,68,1)
(144,52,1)
(186,225,1)
(155,10,1)
(189,259,1)
(139,52,1)
(185,50,1)
(194,69,1)
(248,95,1)
(186,199,1)
(226,277,1)
(50,248,1)
(88,269,1)
(64,58,1)
(203,85,1)
(91,15,1)
(284,135,1)
(13,150,1)
(158,212,1)
(266,52,1)
(246,107,1)
(73,260,1)
(277,0,1)
(258,181,1)
(111,2,1)
(95,277,1)
(229,42,1)
(252,264,1)
(205,269,1)
(12,118,1)
(35,123,1)
(5,18,1)
(132,265,1)
(41,177,1)
(283,47,1)
(55,9,1)
(115,40,1)
(280,263,1)
(191,242,1)
(112,56,1)
(146,66,1)
(89,22,1)
(278,120,1)
(276,68,1)
(188,144,1)
(197,11,1)
(261,88,1)
(186,116,1)
(251,65,1)
(88,54,1)
(44,212,1)
(199,274,1)
(225,187,1)
(102,77,1)
(224,108,1)
(67,93,1)
(226,265,1)
(81,62,1)
(139,253,1)
(44,142,1)
(110,167,1)
(196,172,1)
(276,237,1)
(284,285,1)
(3,269,1)
(32,252,1)
(152,115,1)
(243,145,1)
(31,194,1)
(118,66,1)
(88,222,1)
(144,285,1)
(172,266,1)
(66,128,1)
(203,68,1)
(112,89,1)
(169,226,1)
(157,148,1)
(230,68,1)
(44,243,1)
(288,111,1)
(250,41,1)
(23,68,1)
(220,258,1)
(74,68,1)
(266,243,1)
(240,184,1)
(39,208,1)
(286,119,1)
(275,98,1)
(33,181,1)
(15,275,1)
(120,221,1)
(241,154,1)
(160,169,1)
(223,253,1)
(273,166,1)
(227,61,1)
(59,209,1)
(82,132,1)
(182,78,1)
(187,45,1)
(154,286,1)
(264,123,1)
(11,68,1)
(175,106,1)
(156,27,1)
(131,191,1)
(137,68,1)
(287,87,1)
(61,155,1)
(3,246,1)
(239,203,1)
(272,148,1)
(16,156,1)
(284,52,1)
(157,21,1)
(174,227,1)
(144,204,1)
(266,123,1)
(105,16,1)
(108,257,1)
(5,191,1)
(199,60,1)
(47,140,1)
(231,115,1)
(66,92,1)
(288,68,1)
(94,68,1)
(5,75,1)
(253,74,1)
(149,35,1)
(281,152,1)
(75,244,1)
(45,250,1)
(195,165,1)
(116,18,1)
(114,235,1)
(241,3,1)
(76,161,1)
(124,114,1)
(1,52,1)
(143,131,1)
(61,68,1)
(151,265,1)
(213,57,1)
(125,265,1)
(201,218,1)
(161,53,1)
(15,98,1)
(204,81,1)
(284,126,1)
(166,129,1)
(37,109,1)
(144,265,1)
(144,253,1)
(31,69,1)
(151,72,1)
(108,172,1)
(236,285,1)
(181,96,1)
(279,112,1)
(45,285,1)
(247,196,1)
(1,285,1)
(102,176,1)
(73,44,1)
(211,43,1)
(98,265,1)
(31,119,1)
(200,154,1)
(244,174,1)
(1,234,1)
(231,230,1)
(9,280,1)
(2,223,1)
(212,278,1)
(255,264,1)
(150,86,1)
(109,110,1)
(263,53,1)
(273,203,1)
(0,189,1)
(176,210,1)
(14,76,1)
(215,136,1)
(116,179,1)
(95,64,1)
(162,164,1)
(98,251,1)
(177,7,1)
(257,17,1)
(139,172,1)
(121,136,1)
(79,91,1)
(226,141,1)
(22,68,1)
(89,213,1)
(8,180,1)
(125,175,1)
(48,217,1)
(138,233,1)
(223,52,1)
(0,52,1)
(238,216,1)
(53,59,1)
(266,37,1)
(122,277,1)
(102,157,1)
(285,125,1)
(3,167,1)
(145,36,1)
(140,201,1)
(48,288,1)
(122,265,1)
(3,248,1)
(85,67,1)
(188,277,1)
(101,211,1)
(235,270,1)
(128,29,1)
(134,33,1)
(259,201,1)
(241,274,1)
(92,128,1)
(164,213,1)
(105,248,1)
(173,202,1)
(142,158,1)
(217,288,1)
(228,75,1)
(1,253,1)
(165,99,1)
(160,226,1)
(84,137,1)
(139,4,1)
(41,68,1)
(106,205,1)
(201,139,2)
(66,128,2)
(3,248,2)
(109,264,2)
(152,44,2)
(281,44,2)
(172,44,2)
(80,264,2)
(246,139,2)
(271,112,2)
(187,154,2)
(125,277,2)
(276,68,2)
(205,139,2)
(174,264,2)
(266,44,2)
(232,3,2)
(163,112,2)
(215,3,2)
(86,264,2)
(172,266,2)
(108,172,2)
(231,115,2)
(204,201,2)
(225,154,2)
(277,201,2)
(258,94,2)
(81,265,2)
(41,68,2)
(284,285,2)
(139,3,2)
(226,3,2)
(5,232,2)
(106,139,2)
(48,264,2)
(139,285,2)
(75,264,2)
(95,277,2)
(1,253,2)
(118,139,2)
(164,44,2)
(18,264,2)
(8,277,2)
(69,274,2)
(124,3,2)
(233,44,2)
(144,204,2)
(144,253,2)
(122,277,2)
(3,269,2)
(181,13,2)
(158,93,2)
(14,3,2)
(91,15,2)
(4,44,2)
(221,112,2)
(167,48,2)
(45,154,2)
(155,264,2)
(102,77,2)
(121,136,2)
(5,117,2)
(191,197,2)
(118,66,2)
(139,52,2)
(49,31,2)
(191,139,2)
(279,112,2)
(2,44,2)
(244,264,2)
(199,139,2)
(222,3,2)
(181,96,2)
(182,68,2)
(265,283,2)
(60,139,2)
(98,277,2)
(196,44,2)
(6,3,2)
(89,213,2)
(141,3,2)
(234,139,2)
(199,274,2)
(202,44,2)
(79,3,2)
(241,154,2)
(81,201,2)
(209,3,2)
(186,116,2)
(5,191,2)
(285,285,2)
(22,264,2)
(285,253,2)
(5,122,2)
(64,139,2)
(23,68,2)
(1,139,2)
(74,264,2)
(266,123,2)
(67,93,2)
(217,44,2)
(29,139,2)
(1,52,2)
(144,285,2)
(69,3,2)
(148,8,2)
(77,182,2)
(255,264,2)
(220,264,2)
(133,139,2)
(115,44,2)
(44,212,2)
(128,139,2)
(273,166,2)
(56,264,2)
(12,118,2)
(112,264,2)
(186,199,2)
(144,201,2)
(192,139,2)
(282,264,2)
(181,264,2)
(258,181,2)
(197,139,2)
(89,264,2)
(140,201,2)
(89,138,2)
(269,139,2)
(213,44,2)
(111,264,2)
(189,201,2)
(230,68,2)
(139,44,2)
(211,93,2)
(3,167,2)
(146,139,2)
(261,3,2)
(197,11,2)
(110,44,2)
(283,201,2)
(100,3,2)
(223,44,2)
(110,264,2)
(229,3,2)
(154,3,2)
(285,52,2)
(107,139,2)
(11,139,2)
(253,74,2)
(208,264,2)
(286,31,2)
(97,139,2)
(251,3,2)
(151,139,2)
(71,154,2)
(176,3,2)
(122,265,2)
(7,154,2)
(263,53,2)
(150,264,2)
(94,264,2)
(85,93,2)
(282,44,2)
(125,265,2)
(186,225,2)
(88,3,2)
(0,285,2)
(185,139,2)
(266,264,2)
(162,44,2)
(177,154,2)
(3,139,2)
(101,93,2)
(284,253,2)
(131,139,2)
(0,253,2)
(5,156,2)
(240,3,2)
(139,172,2)
(265,201,2)
(154,31,2)
(58,139,2)
(9,53,2)
(5,75,2)
(74,68,2)
(8,265,2)
(45,285,2)
(266,243,2)
(3,148,2)
(230,44,2)
(273,43,2)
(121,3,2)
(194,3,2)
(227,61,2)
(224,154,2)
(17,154,2)
(47,201,2)
(238,139,2)
(105,248,2)
(248,139,2)
(242,139,2)
(169,3,2)
(95,265,2)
(154,286,2)
(284,139,2)
(136,3,2)
(108,154,2)
(4,154,2)
(59,3,2)
(52,231,2)
(5,179,2)
(288,264,2)
(253,264,2)
(241,3,2)
(76,3,2)
(44,112,2)
(39,264,2)
(157,3,2)
(13,264,2)
(42,3,2)
(203,93,2)
(111,44,2)
(116,93,2)
(180,139,2)
(172,264,2)
(82,201,2)
(193,93,2)
(258,264,2)
(142,93,2)
(52,44,2)
(105,3,2)
(233,264,2)
(280,53,2)
(247,44,2)
(31,69,2)
(139,264,2)
(284,135,2)
(94,68,2)
(61,68,2)
(184,160,2)
(252,264,2)
(88,269,2)
(184,3,2)
(59,68,2)
(166,93,2)
(225,274,2)
(218,139,2)
(213,264,2)
(224,108,2)
(87,139,2)
(243,93,2)
(2,264,2)
(278,260,2)
(93,112,2)
(115,68,2)
(274,264,2)
(116,179,2)
(161,3,2)
(257,154,2)
(151,277,2)
(266,52,2)
(89,162,2)
(95,139,2)
(203,68,2)
(207,3,2)
(277,0,2)
(256,93,2)
(288,68,2)
(164,264,2)
(245,31,2)
(116,18,2)
(48,288,2)
(266,253,2)
(0,201,2)
(247,264,2)
(23,154,2)
(212,278,2)
(182,53,2)
(248,95,2)
(278,112,2)
(109,44,2)
(270,3,2)
(157,148,2)
(78,53,2)
(73,264,2)
(22,44,2)
(98,3,2)
(5,18,2)
(162,165,2)
(123,276,2)
(53,59,2)
(204,81,2)
(170,93,2)
(259,201,2)
(21,3,2)
(1,234,2)
(84,139,2)
(43,93,2)
(137,68,2)
(41,154,2)
(200,154,2)
(22,68,2)
(288,44,2)
(5,121,2)
(216,139,2)
(264,123,2)
(53,102,2)
(112,44,2)
(227,264,2)
(44,93,2)
(167,44,2)
(228,264,2)
(142,112,2)
(48,44,2)
(162,264,2)
(231,230,2)
(138,44,2)
(65,3,2)
(212,112,2)
(13,68,2)
(15,3,2)
(260,264,2)
(112,89,2)
(273,93,2)
(15,98,2)
(31,119,2)
(285,125,2)
(37,44,2)
(160,226,2)
(108,285,2)
(210,3,2)
(32,264,2)
(62,201,2)
(166,129,2)
(167,264,2)
(37,264,2)
(151,265,2)
(287,139,2)
(158,112,2)
(56,44,2)
(122,139,2)
(16,3,2)
(91,3,2)
(132,201,2)
(27,3,2)
(134,264,2)
(179,264,2)
(139,253,2)
(0,52,2)
(139,154,2)
(0,24,2)
(173,44,2)
(284,52,2)
(231,44,2)
(5,139,2)
(234,151,2)
(98,265,2)
(31,3,2)
(236,139,2)
(117,114,2)
(12,139,2)
(89,44,2)
(143,139,2)
(89,22,2)
(235,3,2)
(53,3,2)
(138,264,2)
(102,3,2)
(128,68,2)
(148,139,2)
(61,264,2)
(125,139,2)
(144,265,2)
(77,53,2)
(117,3,2)
(104,139,2)
(72,139,2)
(226,277,2)
(285,139,2)
(160,3,2)
(33,264,2)
(266,212,2)
(188,139,2)
(201,284,2)
(57,44,2)
(114,3,2)
(40,44,2)
(92,139,2)
(272,139,2)
(44,243,2)
(1,285,2)
(36,93,2)
(241,264,2)
(102,157,2)
(196,264,2)
(269,1,2)
(268,264,2)
(220,258,2)
(57,264,2)
(4,264,2)
(55,53,2)
(273,203,2)
(129,68,2)
(217,264,2)
(8,139,2)
(137,139,2)
(144,52,2)
(10,264,2)
(190,139,2)
(223,264,2)
(116,75,2)
(50,139,2)
(250,154,2)
(88,14,2)
(286,119,2)
(120,112,2)
(88,54,2)
(11,68,2)
(274,44,2)
(73,44,2)
(4,3,2)
(226,265,2)
(5,9,2)
(156,3,2)
(241,44,2)
(275,3,2)
(129,93,2)
(66,139,2)
(239,93,2)
(126,139,2)
(145,93,2)
(175,139,2)
-----------------------------------
(0,(struct sb_hdr *)
(1,bp + sizeof(*sbp)
(2,p)
(3,bpf_filter(fcode, pk, origlen, caplen)
(4,ep)
(5,p->md.stat.ps_drop += sbp->sbh_drops)
(6,p)
(7,p)
(8,sbp->sbh_msglen)
(9,pkthdr.caplen)
(10,p)
(11,p->md)
(12,++p->md.stat.ps_recv)
(13,p->buffer)
(14,&pkthdr)
(15,sbp->sbh_timestamp.tv_sec)
(16,origlen)
(17,ep)
(18,data.maxlen)
(19,bp)
(20,do)
(21,caplen)
(22,p->fd)
(23,p->cc)
(24,struct sb_hdr *)
(25,n)
(26,pkthdr)
(27,len)
(28,pk)
(29,md)
(30,cc)
(31,++n >= cnt)
(32,buf)
(33,p)
(34,)
(35,cc)
(36,cc)
(37,cc)
(38,)
(39,maxlen)
(40,buffer)
(41,p->bp)
(42,pkthdr)
(43,pcap_strerror(errno)
(44,cc == 0)
(45,p->bp = bp)
(46,p)
(47,sbhdr)
(48,p->fcode.bf_insns)
(49,0)
(50,caplen)
(51,if (++n >= cnt && cnt >= 0)
(52,bp = p->buffer + p->offset)
(53,pkthdr.caplen > p->snapshot)
(54,u_char *user)
(55,p)
(56,0)
(57,data)
(58,sbp)
(59,p->snapshot)
(60,n)
(61,p->bufsize)
(62,sbp)
(63,ep)
(64,sbh_origlen)
(65,sbp)
(66,p->md.stat)
(67,p)
(68,pcap_t *p)
(69,++n)
(70,sbhdr)
(71,cc)
(72,sbp)
(73,p)
(74,p->bp)
(75,data.len)
(76,pkthdr)
(77,pkthdr.caplen = p->snapshot)
(78,snapshot)
(79,pkthdr)
(80,p)
(81,*sbp)
(82,bp)
(83,fcode)
(84,0)
(85,errbuf)
(86,p)
(87,pk)
(88,(*callback)
(89,getmsg(p->fd, &ctl, &data, &flags)
(90,if (errno == EINTR)
(91,pkthdr.ts.tv_sec = sbp->sbh_timestamp.tv_sec)
(92,stat)
(93,errno == EINTR)
(94,p->offset)
(95,sbp->sbh_origlen)
(96,char *)
(97,p->cc = 0)
(98,sbp->sbh_timestamp)
(99,0)
(100,sbp)
(101,errbuf)
(102,pkthdr.caplen)
(103,caplen)
(104,md)
(105,pkthdr.len = origlen)
(106,sbp)
(107,origlen)
(108,ep - bp)
(109,bp)
(110,ep)
(111,fcode)
(112,getmsg(p->fd, &ctl, &data, &flags)
(113,while (bp < ep)
(114,pkthdr.ts)
(115,p->buffer)
(116,return (-1)
(117,pkthdr.ts.tv_sec)
(118,p->md.stat.ps_recv)
(119,int cnt)
(120,len)
(121,pkthdr.ts.tv_usec)
(122,sbp->sbh_drops)
(123,cc = p->cc)
(124,tv_sec)
(125,sbp->sbh_totlen)
(126,bp)
(127,)
(128,p->md)
(129,p->errbuf)
(130,flags)
(131,sbp)
(132,sbp)
(133,stat)
(134,offset)
(135,long)
(136,pkthdr.ts)
(137,p->cc)
(138,&ctl)
(139,bp < ep)
(140,sbp)
(141,sbh_timestamp)
(142,0)
(143,sbh_drops)
(144,memcpy(sbp, bp, sizeof(*sbp)
(145,0)
(146,ps_recv)
(147,if (pkthdr.caplen > p->snapshot)
(148,caplen = sbp->sbh_msglen)
(149,0)
(150,buffer)
(151,*sbp)
(152,p)
(153,if ((long)
(154,++n >= cnt && cnt >= 0)
(155,bufsize)
(156,pkthdr.len)
(157,pkthdr.caplen = caplen)
(158,cc)
(159,origlen)
(160,sbp->sbh_timestamp.tv_usec)
(161,user)
(162,&flags)
(163,errno)
(164,flags)
(165,flags = 0)
(166,sizeof(p->errbuf)
(167,fcode = p->fcode.bf_insns)
(168,)
(169,tv_usec)
(170,continue;)
(171,)
(172,ep = bp + cc)
(173,p)
(174,data)
(175,sbh_totlen)
(176,caplen)
(177,bp)
(178,flags)
(179,data.buf)
(180,sbh_msglen)
(181,(char *)
(182,p->snapshot)
(183,if (bpf_filter(fcode, pk, origlen, caplen)
(184,pkthdr.ts.tv_usec = sbp->sbh_timestamp.tv_usec)
(185,sbp)
(186,RET)
(187,n)
(188,p)
(189,bp)
(190,cc)
(191,p->md.stat.ps_drop)
(192,p)
(193,1)
(194,cnt)
(195,cc)
(196,n)
(197,p->md.stat)
(198,if (getmsg(p->fd, &ctl, &data, &flags)
(199,return (n)
(200,p)
(201,(long)
(202,bp)
(203,p->errbuf)
(204,sizeof(*sbp)
(205,bp)
(206,)
(207,ts)
(208,data)
(209,snapshot)
(210,pkthdr)
(211,p)
(212,cc = data.len)
(213,&data)
(214,sbp)
(215,tv_usec)
(216,fcode)
(217,bf_insns)
(218,3)
(219,if (cc == 0)
(220,data.buf = (char *)
(221,data)
(222,pk)
(223,fcode)
(224,p->cc = ep - bp)
(225,return (n)
(226,sbp->sbh_timestamp)
(227,data.maxlen = p->bufsize)
(228,0)
(229,caplen)
(230,p->offset)
(231,p->buffer + p->offset)
(232,pkthdr.caplen)
(233,ctl)
(234,sizeof(*sbp)
(235,ts)
(236,origlen)
(237,cc)
(238,pk)
(239,errno)
(240,pkthdr)
(241,bp)
(242,ps_drop)
(243,cc = 0)
(244,len)
(245,cnt)
(246,caplen)
(247,0)
(248,origlen = sbp->sbh_origlen)
(249,data)
(250,bp)
(251,sbh_timestamp)
(252,data)
(253,bp = p->bp)
(254,)
(255,bp)
(256,-1)
(257,bp)
(258,(char *)
(259,sbp)
(260,data.len = 0)
(261,n)
(262,)
(263,pkthdr)
(264,cc == 0)
(265,sbp = &sbhdr)
(266,bp + cc)
(267,)
(268,bp)
(269,pk = bp + sizeof(*sbp)
(270,pkthdr)
(271,EINTR)
(272,p)
(273,strlcpy(p->errbuf, pcap_strerror(errno)
(274,n = 0)
(275,tv_sec)
(276,p->cc)
(277,sbp = (struct sb_hdr *)
(278,data.len)
(279,cc)
(280,caplen)
(281,offset)
(282,fd)
(283,&sbhdr)
(284,(long)
(285,bp += sbp->sbh_totlen)
(286,cnt >= 0)
(287,bp)
(288,p->fcode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^