-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,69,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_03_bad()
CWE401_Memory_Leak__char_malloc_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,25,0)
(31,6,0)
(30,31,0)
(20,8,0)
(22,35,0)
(11,8,0)
(16,27,0)
(13,6,0)
(2,30,0)
(4,31,0)
(25,7,0)
(33,4,0)
(6,31,0)
(18,35,0)
(25,19,0)
(5,31,0)
(6,13,0)
(21,25,0)
(19,25,0)
(9,32,0)
(3,34,0)
(31,32,0)
(28,19,0)
(24,10,0)
(35,18,0)
(18,23,0)
(15,10,0)
(12,4,0)
(0,34,0)
(4,32,0)
(6,7,0)
(7,6,0)
(14,27,0)
(1,27,0)
(5,32,0)
(29,5,0)
(26,30,0)
(8,27,0)
(17,31,0)
(17,10,1)
(29,4,1)
(4,33,1)
(12,18,1)
(2,31,1)
(10,24,1)
(30,26,1)
(6,7,1)
(28,21,1)
(6,13,1)
(36,34,1)
(26,2,1)
(0,5,1)
(15,8,1)
(31,6,1)
(12,30,1)
(24,15,1)
(8,20,1)
(5,29,1)
(34,3,1)
(30,31,1)
(18,35,1)
(35,22,1)
(21,17,1)
(7,25,1)
(5,31,1)
(22,30,1)
(20,11,1)
(25,19,1)
(33,12,1)
(0,10,1)
(19,28,1)
(4,31,1)
(3,0,1)
(21,10,2)
(29,10,2)
(30,10,2)
(22,30,2)
(4,31,2)
(6,7,2)
(28,10,2)
(12,10,2)
(18,35,2)
(7,25,2)
(31,10,2)
(26,10,2)
(17,10,2)
(2,10,2)
(19,10,2)
(25,10,2)
(5,10,2)
(4,10,2)
(7,10,2)
(6,13,2)
(6,10,2)
(30,31,2)
(33,10,2)
(25,19,2)
(35,30,2)
(5,31,2)
(18,30,2)
(31,6,2)
-----------------------------------
(0,5)
(1,data)
(2,data)
(3,5)
(4,strcpy(data, "A String")
(5,printLine(data)
(6,(char *)
(7,malloc(100*sizeof(char)
(8,data = NULL)
(9,if (data == NULL)
(10,5==5)
(11,data)
(12,data)
(13,char *)
(14,if(5==5)
(15,5)
(16,if(5==5)
(17,data)
(18,exit(-1)
(19,sizeof(char)
(20,NULL)
(21,100)
(22,1)
(23,)
(24,5)
(25,100*sizeof(char)
(26,NULL)
(27,)
(28,char)
(29,data)
(30,data == NULL)
(31,data = (char *)
(32,)
(33,"A String")
(34,5==5)
(35,-1)
(36,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^