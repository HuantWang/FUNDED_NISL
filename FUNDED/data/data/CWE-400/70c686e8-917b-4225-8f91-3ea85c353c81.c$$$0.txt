-----label-----
1
-----code-----
int tcp_accept(int fd)
{
	/* Accept incoming connection. */
	int incoming = accept(fd, 0, 0);

	/* Evaluate connection. */
	if (incoming < 0) {
		int en = errno;
		if (en != EINTR && en != EAGAIN) {
			log_error("cannot accept connection (%d)", errno);
			if (en == EMFILE || en == ENFILE ||
			    en == ENOBUFS || en == ENOMEM) {
				int throttle = tcp_throttle();
				log_error("throttling TCP connection pool for "
				          "%d seconds, too many allocated "
				          "resources", throttle);
				sleep(throttle);
			}

		}
	} else {
		dbg_net("tcp: accepted connection fd=%d\n", incoming);
		/* Set recv() timeout. */
#ifdef SO_RCVTIMEO
		struct timeval tv;
		rcu_read_lock();
		tv.tv_sec = conf()->max_conn_idle;
		rcu_read_unlock();
		tv.tv_usec = 0;
		if (setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {
			log_warning("cannot set up TCP connection watchdog "
			            "timer, fd %d", incoming);
		}
#endif
	}

	return incoming;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
10,11
11,12
11,13
13,14
13,15
15,16
16,17
16,18
16,19
16,20
17,18
19,20
23,24
23,25
23,26
24,25
24,26
25,26
28,29
28,30
29,30
30,31
30,32
32,33
32,34
34,35
35,36
37,38
37,39
38,39
38,40
39,40
39,41
40,41
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
51,52
51,53
51,54
52,53
55,56
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
74,75
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
83,84
83,85
85,86
85,87
87,88
88,89
89,90
91,92
92,93
92,94
92,95
93,94
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
106,109
107,108
110,111
112,113
113,114
-----nextToken-----
2,4,6,8,12,14,18,20,21,22,26,27,31,33,36,41,43,46,48,53,54,56,63,65,68,70,73,75,78,80,84,86,90,94,95,97,101,103,108,109,111,114
-----computeFrom-----
24,25
24,26
38,39
38,40
39,40
39,41
44,45
44,46
58,59
58,60
59,60
59,61
60,61
60,62
61,62
61,63
66,67
66,68
71,72
71,73
76,77
76,78
-----guardedBy-----
46,78
-----guardedByNegation-----
26,111
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int tcp_accept(int fd){	/* Accept incoming connection. */	int incoming = accept(fd, 0, 0);	/* Evaluate connection. */	if (incoming < 0) {		int en = errno;		if (en != EINTR && en != EAGAIN) {			log_error("cannot accept connection (%d)", errno);			if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}		}	} else {		dbg_net("tcp: accepted connection fd=%d\n", incoming);		/* Set recv() timeout. */#ifdef SO_RCVTIMEO		struct timeval tv;		rcu_read_lock();		tv.tv_sec = conf()->max_conn_idle;		rcu_read_unlock();		tv.tv_usec = 0;		if (setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {			log_warning("cannot set up TCP connection watchdog "			            "timer, fd %d", incoming);		}#endif	}	return incoming;}
int
tcp_accept(int fd)
tcp_accept
int fd
int
fd
fd
{	/* Accept incoming connection. */	int incoming = accept(fd, 0, 0);	/* Evaluate connection. */	if (incoming < 0) {		int en = errno;		if (en != EINTR && en != EAGAIN) {			log_error("cannot accept connection (%d)", errno);			if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}		}	} else {		dbg_net("tcp: accepted connection fd=%d\n", incoming);		/* Set recv() timeout. */#ifdef SO_RCVTIMEO		struct timeval tv;		rcu_read_lock();		tv.tv_sec = conf()->max_conn_idle;		rcu_read_unlock();		tv.tv_usec = 0;		if (setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {			log_warning("cannot set up TCP connection watchdog "			            "timer, fd %d", incoming);		}#endif	}	return incoming;}
int incoming = accept(fd, 0, 0);
int incoming = accept(fd, 0, 0);
int
incoming = accept(fd, 0, 0)
incoming
= accept(fd, 0, 0)
accept(fd, 0, 0)
accept
accept
fd
fd
0
0
if (incoming < 0) {		int en = errno;		if (en != EINTR && en != EAGAIN) {			log_error("cannot accept connection (%d)", errno);			if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}		}	} else {		dbg_net("tcp: accepted connection fd=%d\n", incoming);		/* Set recv() timeout. */#ifdef SO_RCVTIMEO		struct timeval tv;		rcu_read_lock();		tv.tv_sec = conf()->max_conn_idle;		rcu_read_unlock();		tv.tv_usec = 0;		if (setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {			log_warning("cannot set up TCP connection watchdog "			            "timer, fd %d", incoming);		}#endif	}
incoming < 0
incoming
incoming
0
{		int en = errno;		if (en != EINTR && en != EAGAIN) {			log_error("cannot accept connection (%d)", errno);			if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}		}	}
int en = errno;
int en = errno;
int
en = errno
en
= errno
errno
errno
if (en != EINTR && en != EAGAIN) {			log_error("cannot accept connection (%d)", errno);			if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}		}
en != EINTR && en != EAGAIN
en != EINTR
en
en
EINTR
EINTR
en != EAGAIN
en
en
EAGAIN
EAGAIN
{			log_error("cannot accept connection (%d)", errno);			if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}		}
log_error("cannot accept connection (%d)", errno);
log_error("cannot accept connection (%d)", errno)
log_error
log_error
"cannot accept connection (%d)"
errno
errno
if (en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM) {				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}
en == EMFILE || en == ENFILE ||			    en == ENOBUFS || en == ENOMEM
en == EMFILE || en == ENFILE ||			    en == ENOBUFS
en == EMFILE || en == ENFILE
en == EMFILE
en
en
EMFILE
EMFILE
en == ENFILE
en
en
ENFILE
ENFILE
en == ENOBUFS
en
en
ENOBUFS
ENOBUFS
en == ENOMEM
en
en
ENOMEM
ENOMEM
{				int throttle = tcp_throttle();				log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);				sleep(throttle);			}
int throttle = tcp_throttle();
int throttle = tcp_throttle();
int
throttle = tcp_throttle()
throttle
= tcp_throttle()
tcp_throttle()
tcp_throttle
tcp_throttle
log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle);
log_error("throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources", throttle)
log_error
log_error
"throttling TCP connection pool for "				          "%d seconds, too many allocated "				          "resources"
throttle
throttle
sleep(throttle);
sleep(throttle)
sleep
sleep
throttle
throttle
{		dbg_net("tcp: accepted connection fd=%d\n", incoming);		/* Set recv() timeout. */#ifdef SO_RCVTIMEO		struct timeval tv;		rcu_read_lock();		tv.tv_sec = conf()->max_conn_idle;		rcu_read_unlock();		tv.tv_usec = 0;		if (setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {			log_warning("cannot set up TCP connection watchdog "			            "timer, fd %d", incoming);		}#endif	}
dbg_net("tcp: accepted connection fd=%d\n", incoming);
dbg_net("tcp: accepted connection fd=%d\n", incoming)
dbg_net
dbg_net
"tcp: accepted connection fd=%d\n"
incoming
incoming
return incoming;
incoming
incoming
-----joern-----
(36,53,0)
(4,12,0)
(92,7,0)
(3,26,0)
(1,81,0)
(72,0,0)
(2,79,0)
(59,25,0)
(83,47,0)
(24,50,0)
(85,13,0)
(66,72,0)
(43,47,0)
(61,90,0)
(60,71,0)
(7,36,0)
(75,33,0)
(88,27,0)
(6,45,0)
(31,37,0)
(21,24,0)
(8,37,0)
(9,1,0)
(22,60,0)
(12,36,0)
(38,24,0)
(68,87,0)
(56,92,0)
(11,87,0)
(91,45,0)
(33,81,0)
(1,35,0)
(27,7,0)
(78,80,0)
(87,18,0)
(28,44,0)
(40,44,0)
(72,66,0)
(33,35,0)
(13,26,0)
(81,28,0)
(70,90,0)
(77,26,0)
(63,65,0)
(89,63,0)
(84,53,0)
(13,36,0)
(51,90,0)
(81,33,0)
(80,35,0)
(47,78,0)
(14,80,0)
(47,35,0)
(15,71,0)
(44,35,0)
(58,72,0)
(39,13,0)
(28,54,0)
(86,26,0)
(23,53,0)
(81,1,0)
(23,36,0)
(49,7,0)
(0,72,0)
(34,36,0)
(62,1,0)
(45,66,0)
(7,92,0)
(7,25,0)
(79,54,0)
(19,33,0)
(78,47,0)
(52,53,0)
(44,28,0)
(60,37,0)
(80,78,0)
(71,48,0)
(54,28,0)
(16,79,0)
(55,69,0)
(20,7,0)
(57,12,0)
(30,80,0)
(82,35,0)
(64,50,0)
(8,71,0)
(73,69,0)
(41,26,0)
(36,90,0)
(87,36,0)
(54,79,0)
(46,8,0)
(65,26,0)
(90,36,0)
(5,60,0)
(17,63,0)
(35,69,0)
(90,32,0)
(7,27,0)
(25,7,0)
(71,37,0)
(66,26,0)
(48,71,0)
(76,7,0)
(28,81,0)
(10,23,0)
(67,65,0)
(74,44,0)
(79,35,0)
(29,35,0)
(42,23,0)
(12,36,1)
(42,78,1)
(87,36,1)
(5,22,1)
(89,86,1)
(48,15,1)
(81,1,1)
(4,36,1)
(20,65,1)
(68,25,1)
(44,40,1)
(75,19,1)
(51,61,1)
(46,60,1)
(15,54,1)
(10,23,1)
(88,92,1)
(90,32,1)
(91,6,1)
(78,80,1)
(47,83,1)
(71,48,1)
(80,35,1)
(28,44,1)
(30,14,1)
(60,71,1)
(72,0,1)
(23,36,1)
(28,81,1)
(7,92,1)
(79,35,1)
(1,9,1)
(86,66,1)
(80,30,1)
(14,47,1)
(72,58,1)
(27,88,1)
(42,8,1)
(43,35,1)
(87,11,1)
(25,7,1)
(67,63,1)
(38,78,1)
(8,46,1)
(36,90,1)
(61,70,1)
(74,79,1)
(7,36,1)
(78,47,1)
(42,54,1)
(92,56,1)
(33,35,1)
(63,17,1)
(79,2,1)
(45,91,1)
(59,7,1)
(82,29,1)
(12,57,1)
(6,77,1)
(19,1,1)
(23,42,1)
(85,39,1)
(49,76,1)
(77,13,1)
(42,87,1)
(24,21,1)
(60,5,1)
(22,71,1)
(0,45,1)
(1,35,1)
(17,89,1)
(9,62,1)
(33,75,1)
(16,24,1)
(65,67,1)
(40,74,1)
(54,79,1)
(42,25,1)
(56,49,1)
(62,44,1)
(21,38,1)
(70,34,1)
(2,16,1)
(7,27,1)
(54,28,1)
(11,68,1)
(25,59,1)
(44,35,1)
(76,20,1)
(57,4,1)
(29,12,1)
(13,36,1)
(35,82,1)
(90,51,1)
(39,12,1)
(8,71,1)
(66,72,1)
(83,43,1)
(58,0,1)
(81,33,1)
(13,85,1)
(47,35,1)
(19,1,2)
(68,25,2)
(77,12,2)
(72,0,2)
(7,36,2)
(27,12,2)
(47,12,2)
(1,35,2)
(72,12,2)
(81,1,2)
(54,79,2)
(30,47,2)
(11,25,2)
(60,71,2)
(49,12,2)
(82,12,2)
(28,81,2)
(12,36,2)
(33,1,2)
(63,12,2)
(83,12,2)
(62,44,2)
(10,23,2)
(16,78,2)
(5,54,2)
(8,71,2)
(24,78,2)
(54,78,2)
(44,79,2)
(87,36,2)
(22,54,2)
(29,12,2)
(79,78,2)
(85,12,2)
(45,12,2)
(23,36,2)
(80,47,2)
(76,12,2)
(74,79,2)
(71,48,2)
(67,12,2)
(13,12,2)
(8,54,2)
(43,12,2)
(92,12,2)
(48,54,2)
(47,35,2)
(7,27,2)
(88,12,2)
(78,80,2)
(58,12,2)
(87,25,2)
(7,92,2)
(1,44,2)
(60,54,2)
(35,12,2)
(9,44,2)
(6,12,2)
(91,12,2)
(46,54,2)
(38,78,2)
(65,12,2)
(28,79,2)
(75,1,2)
(2,78,2)
(39,12,2)
(13,36,2)
(36,90,2)
(25,12,2)
(66,12,2)
(25,7,2)
(80,35,2)
(21,78,2)
(79,35,2)
(71,54,2)
(20,12,2)
(81,44,2)
(78,12,2)
(66,72,2)
(40,79,2)
(56,12,2)
(44,35,2)
(54,28,2)
(0,12,2)
(59,12,2)
(28,44,2)
(78,47,2)
(89,12,2)
(15,54,2)
(86,12,2)
(7,12,2)
(14,47,2)
(17,12,2)
(90,32,2)
(81,33,2)
(33,35,2)
-----------------------------------
(0,conf()
(1,en == ENOBUFS)
(2,EMFILE)
(3,if (setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)
(4,incoming)
(5,throttle)
(6,tv)
(7,setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)
(8,sleep(throttle)
(9,ENOBUFS)
(10,RET)
(11,incoming)
(12,incoming < 0)
(13,dbg_net("tcp: accepted connection fd=%d\\n", incoming)
(14,en)
(15,throttle)
(16,en)
(17,tv_usec)
(18,)
(19,en)
(20,incoming)
(21,errno)
(22,"throttling TCP connection pool for "\n\\n\\t\\t\\t\\t          "%d seconds, too many allocated "\n\\n\\t\\t\\t\\t          "resources")
(23,return incoming;)
(24,log_error("cannot accept connection (%d)
(25,setsockopt(incoming, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)
(26,)
(27,sizeof(tv)
(28,en == ENFILE ||\n\\n\\t\\t\\t    en == ENOBUFS || en == ENOMEM)
(29,en)
(30,EAGAIN)
(31,throttle)
(32,int fd)
(33,en == ENOMEM)
(34,incoming)
(35,en = errno)
(36,incoming = accept(fd, 0, 0)
(37,)
(38,"cannot accept connection (%d)
(39,"tcp: accepted connection fd=%d\\n")
(40,ENFILE)
(41,tv)
(42,incoming)
(43,en)
(44,en == ENFILE)
(45,tv.tv_sec)
(46,throttle)
(47,en != EINTR)
(48,tcp_throttle()
(49,SO_RCVTIMEO)
(50,)
(51,0)
(52,if (incoming < 0)
(53,)
(54,en == EMFILE || en == ENFILE ||\n\\n\\t\\t\\t    en == ENOBUFS || en == ENOMEM)
(55,en)
(56,tv)
(57,0)
(58,max_conn_idle)
(59,0)
(60,log_error("throttling TCP connection pool for "\n\\n\\t\\t\\t\\t          "%d seconds, too many allocated "\n\\n\\t\\t\\t\\t          "resources", throttle)
(61,0)
(62,en)
(63,tv.tv_usec)
(64,if (en == EMFILE || en == ENFILE ||\n\\n\\t\\t\\t    en == ENOBUFS || en == ENOMEM)
(65,tv.tv_usec = 0)
(66,tv.tv_sec = conf()
(67,0)
(68,"cannot set up TCP connection watchdog "\n\\n\\t\\t\\t            "timer, fd %d")
(69,)
(70,fd)
(71,throttle = tcp_throttle()
(72,conf()
(73,if (en != EINTR && en != EAGAIN)
(74,en)
(75,ENOMEM)
(76,SOL_SOCKET)
(77,rcu_read_lock()
(78,en != EINTR && en != EAGAIN)
(79,en == EMFILE)
(80,en != EAGAIN)
(81,en == ENOBUFS || en == ENOMEM)
(82,errno)
(83,EINTR)
(84,incoming)
(85,incoming)
(86,rcu_read_unlock()
(87,log_warning("cannot set up TCP connection watchdog "\n\\n\\t\\t\\t            "timer, fd %d", incoming)
(88,tv)
(89,tv)
(90,accept(fd, 0, 0)
(91,tv_sec)
(92,&tv)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^