-----label-----
0
-----code-----
static void __iax2_poke_noanswer(const void *data)
{
	struct iax2_peer *peer = (struct iax2_peer *)data;
	int callno;

	if (peer->lastms > -1) {
		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);
		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);
		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name); /* Activate notification */
	}
	if ((callno = peer->callno) > 0) {
		ast_mutex_lock(&iaxsl[callno]);
		iax2_destroy(callno);
		ast_mutex_unlock(&iaxsl[callno]);
	}
	peer->callno = 0;
	peer->lastms = -1;
	/* Try again quickly */
	peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));
	if (peer->pokeexpire == -1)
		peer_unref(peer);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
30,31
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
40,43
41,42
42,43
42,44
42,45
42,46
42,47
43,44
45,46
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
60,61
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
74,75
76,77
79,80
79,81
80,81
83,84
83,85
84,85
84,86
85,86
86,87
86,88
87,88
89,90
89,91
90,91
94,95
94,96
94,97
95,96
96,97
96,98
97,98
99,100
100,101
100,102
100,103
103,104
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
129,130
130,131
130,132
131,132
131,133
132,133
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
143,145
143,146
143,147
143,148
144,145
146,147
148,149
148,150
149,150
152,153
154,155
154,156
155,156
157,158
159,160
159,161
160,161
160,162
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,29,31,36,37,39,44,46,47,50,51,54,55,59,61,62,63,66,67,70,71,75,77,78,81,82,88,91,92,93,98,101,102,105,109,111,115,119,121,126,127,128,133,134,136,141,142,145,147,150,151,153,156,158,163,164,166,170,172
-----computeFrom-----
33,34
33,35
84,85
84,86
86,87
86,88
123,124
123,125
130,131
130,132
138,139
138,140
160,161
160,162
-----guardedBy-----
37,71
36,81
92,121
163,172
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void __iax2_poke_noanswer(const void *data){	struct iax2_peer *peer = (struct iax2_peer *)data;	int callno;	if (peer->lastms > -1) {		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name); /* Activate notification */	}	if ((callno = peer->callno) > 0) {		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}	peer->callno = 0;	peer->lastms = -1;	/* Try again quickly */	peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));	if (peer->pokeexpire == -1)		peer_unref(peer);}
static void
__iax2_poke_noanswer(const void *data)
__iax2_poke_noanswer
const void *data
const void
*data
*
data
{	struct iax2_peer *peer = (struct iax2_peer *)data;	int callno;	if (peer->lastms > -1) {		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name); /* Activate notification */	}	if ((callno = peer->callno) > 0) {		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}	peer->callno = 0;	peer->lastms = -1;	/* Try again quickly */	peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));	if (peer->pokeexpire == -1)		peer_unref(peer);}
struct iax2_peer *peer = (struct iax2_peer *)data;
struct iax2_peer *peer = (struct iax2_peer *)data;
struct iax2_peer
iax2_peer
*peer = (struct iax2_peer *)data
*
peer
= (struct iax2_peer *)data
(struct iax2_peer *)data
struct iax2_peer *
struct iax2_peer
iax2_peer
*
*
data
data
int callno;
int callno;
int
callno
callno
if (peer->lastms > -1) {		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name); /* Activate notification */	}
peer->lastms > -1
peer->lastms
peer
peer
lastms
-1
1
{		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name); /* Activate notification */	}
ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);
ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Peer '%s' is now UNREACHABLE! Time: %d\n"
peer->name
peer
peer
name
peer->lastms
peer
peer
lastms
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms)
manager_event
manager_event
EVENT_FLAG_SYSTEM
EVENT_FLAG_SYSTEM
"PeerStatus"
"ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n"
peer->name
peer
peer
name
peer->lastms
peer
peer
lastms
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name);
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_UNAVAILABLE
AST_DEVICE_UNAVAILABLE
"IAX2/%s"
peer->name
peer
peer
name
if ((callno = peer->callno) > 0) {		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}
(callno = peer->callno) > 0
(callno = peer->callno)
callno = peer->callno
callno
callno
peer->callno
peer
peer
callno
0
{		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}
ast_mutex_lock(&iaxsl[callno]);
ast_mutex_lock(&iaxsl[callno]);
ast_mutex_lock
ast_mutex_lock
(&iaxsl[callno])
&iaxsl[callno]
&
iaxsl
[callno]
callno
callno
iax2_destroy(callno);
iax2_destroy(callno)
iax2_destroy
iax2_destroy
callno
callno
ast_mutex_unlock(&iaxsl[callno]);
ast_mutex_unlock(&iaxsl[callno])
ast_mutex_unlock
ast_mutex_unlock
&iaxsl[callno]
iaxsl[callno]
iaxsl
iaxsl
callno
callno
peer->callno = 0;
peer->callno = 0
peer->callno
peer
peer
callno
0
peer->lastms = -1;
peer->lastms = -1
peer->lastms
peer
peer
lastms
-1
1
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer))
peer->pokeexpire
peer
peer
pokeexpire
iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer))
iax2_sched_add
iax2_sched_add
sched
sched
peer->pokefreqnotok
peer
peer
pokefreqnotok
iax2_poke_peer_s
iax2_poke_peer_s
peer_ref(peer)
peer_ref
peer_ref
peer
peer
if (peer->pokeexpire == -1)		peer_unref(peer);
peer->pokeexpire == -1
peer->pokeexpire
peer
peer
pokeexpire
-1
1
peer_unref(peer);
peer_unref(peer)
peer_unref
peer_unref
peer
peer
-----joern-----
(92,43,0)
(25,80,0)
(54,61,0)
(18,90,0)
(47,56,0)
(23,55,0)
(86,61,0)
(28,9,0)
(12,2,0)
(33,55,0)
(92,5,0)
(47,13,0)
(7,85,0)
(34,90,0)
(43,55,0)
(80,43,0)
(47,64,0)
(75,18,0)
(11,55,0)
(41,24,0)
(46,40,0)
(74,77,0)
(4,92,0)
(28,72,0)
(10,48,0)
(5,28,0)
(91,62,0)
(56,47,0)
(70,61,0)
(24,61,0)
(44,16,0)
(30,15,0)
(61,70,0)
(50,5,0)
(76,55,0)
(23,90,0)
(6,12,0)
(18,5,0)
(39,70,0)
(34,5,0)
(43,80,0)
(8,61,0)
(48,15,0)
(37,5,0)
(31,26,0)
(22,85,0)
(57,31,0)
(66,30,0)
(70,5,0)
(2,93,0)
(71,47,0)
(88,5,0)
(68,16,0)
(78,13,0)
(2,12,0)
(24,5,0)
(12,23,0)
(40,76,0)
(77,42,0)
(40,5,0)
(95,18,0)
(77,10,0)
(50,42,0)
(31,5,0)
(79,90,0)
(69,24,0)
(52,92,0)
(61,24,0)
(93,2,0)
(38,12,0)
(81,31,0)
(14,93,0)
(32,42,0)
(17,47,0)
(51,26,0)
(63,42,0)
(0,68,0)
(16,5,0)
(85,66,0)
(60,42,0)
(12,5,0)
(82,77,0)
(85,42,0)
(94,50,0)
(19,55,0)
(90,18,0)
(49,16,0)
(83,70,0)
(56,5,0)
(61,64,0)
(36,56,0)
(42,50,0)
(45,37,0)
(60,15,0)
(5,55,0)
(87,76,0)
(90,23,0)
(73,63,0)
(89,34,0)
(53,68,0)
(59,62,0)
(28,5,0)
(30,66,0)
(27,55,0)
(9,28,0)
(26,51,0)
(10,77,0)
(13,47,0)
(66,85,0)
(48,10,0)
(90,34,0)
(26,31,0)
(1,40,0)
(21,51,0)
(3,55,0)
(58,28,0)
(20,56,0)
(65,50,0)
(68,64,0)
(62,5,0)
(42,63,0)
(67,60,0)
(35,90,0)
(29,13,0)
(13,5,0)
(62,23,0)
(16,68,0)
(37,5,1)
(2,12,1)
(61,24,1)
(26,51,1)
(17,71,1)
(90,34,1)
(13,29,1)
(57,5,1)
(66,85,1)
(63,73,1)
(26,31,1)
(75,95,1)
(4,76,1)
(63,42,1)
(5,28,1)
(56,36,1)
(79,18,1)
(23,90,1)
(32,68,1)
(87,40,1)
(60,42,1)
(41,69,1)
(12,5,1)
(47,13,1)
(1,48,1)
(16,49,1)
(18,75,1)
(18,5,1)
(2,93,1)
(62,5,1)
(32,26,1)
(52,4,1)
(1,63,1)
(82,60,1)
(84,2,1)
(95,35,1)
(30,66,1)
(76,87,1)
(60,67,1)
(58,88,1)
(94,65,1)
(24,41,1)
(10,77,1)
(40,5,1)
(12,6,1)
(43,80,1)
(70,5,1)
(12,23,1)
(67,30,1)
(70,83,1)
(77,74,1)
(48,10,1)
(42,50,1)
(78,56,1)
(37,45,1)
(6,38,1)
(51,21,1)
(62,91,1)
(31,81,1)
(45,2,1)
(14,12,1)
(0,53,1)
(38,23,1)
(47,56,1)
(80,25,1)
(31,5,1)
(65,32,1)
(7,22,1)
(74,82,1)
(54,86,1)
(77,42,1)
(85,7,1)
(71,26,1)
(16,5,1)
(53,61,1)
(13,5,1)
(90,18,1)
(73,42,1)
(61,70,1)
(24,5,1)
(86,47,1)
(49,44,1)
(92,52,1)
(85,42,1)
(50,94,1)
(28,72,1)
(20,17,1)
(36,20,1)
(34,5,1)
(69,8,1)
(81,57,1)
(84,37,1)
(29,78,1)
(34,89,1)
(44,0,1)
(25,92,1)
(92,5,1)
(50,5,1)
(28,58,1)
(28,9,1)
(83,39,1)
(91,59,1)
(93,14,1)
(21,31,1)
(35,62,1)
(46,1,1)
(89,79,1)
(59,43,1)
(22,63,1)
(68,16,1)
(39,24,1)
(40,46,1)
(8,54,1)
(56,5,1)
(62,5,2)
(67,63,2)
(66,85,2)
(85,42,2)
(61,24,2)
(24,5,2)
(18,5,2)
(49,26,2)
(26,51,2)
(23,90,2)
(61,70,2)
(2,12,2)
(12,23,2)
(48,10,2)
(77,63,2)
(90,34,2)
(47,26,2)
(12,5,2)
(70,26,2)
(26,31,2)
(37,5,2)
(78,26,2)
(71,26,2)
(40,5,2)
(41,26,2)
(30,63,2)
(44,26,2)
(70,5,2)
(63,42,2)
(2,93,2)
(48,63,2)
(13,26,2)
(22,63,2)
(10,63,2)
(39,26,2)
(54,26,2)
(13,5,2)
(45,2,2)
(82,63,2)
(31,5,2)
(43,80,2)
(61,26,2)
(7,63,2)
(68,26,2)
(66,63,2)
(5,28,2)
(77,42,2)
(8,26,2)
(68,16,2)
(47,13,2)
(50,5,2)
(16,26,2)
(90,18,2)
(28,9,2)
(0,26,2)
(17,26,2)
(86,26,2)
(20,26,2)
(85,63,2)
(28,72,2)
(83,26,2)
(56,5,2)
(29,26,2)
(34,5,2)
(74,63,2)
(92,5,2)
(60,42,2)
(16,5,2)
(30,66,2)
(37,2,2)
(42,50,2)
(47,56,2)
(60,63,2)
(56,26,2)
(36,26,2)
(24,26,2)
(53,26,2)
(69,26,2)
(10,77,2)
-----------------------------------
(0,"IAX2/%s")
(1,peer)
(2,peer->pokeexpire == -1)
(3,if (peer->pokeexpire == -1)
(4,peer)
(5,*peer = (struct iax2_peer *)
(6,pokeexpire)
(7,callno)
(8,"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Unreachable\\r\\nTime: %d\\r\\n")
(9,struct iax2_peer *)
(10,&iaxsl[callno])
(11,peer)
(12,peer->pokeexpire)
(13,peer->lastms)
(14,1)
(15,)
(16,peer->name)
(17,"Peer \'%s\' is now UNREACHABLE! Time: %d\\n")
(18,peer->pokefreqnotok)
(19,callno)
(20,peer)
(21,1)
(22,iaxsl)
(23,peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer)
(24,peer->name)
(25,1)
(26,peer->lastms > -1)
(27,if (peer->lastms > -1)
(28,(struct iax2_peer *)
(29,lastms)
(30,ast_mutex_lock(&iaxsl[callno])
(31,peer->lastms)
(32,callno)
(33,if ((callno = peer->callno)
(34,peer_ref(peer)
(35,sched)
(36,name)
(37,peer_unref(peer)
(38,peer)
(39,peer)
(40,peer->callno)
(41,name)
(42,callno = peer->callno)
(43,peer->lastms = -1)
(44,peer)
(45,peer)
(46,callno)
(47,ast_log(LOG_NOTICE, "Peer \'%s\' is now UNREACHABLE! Time: %d\\n", peer->name, peer->lastms)
(48,ast_mutex_unlock(&iaxsl[callno])
(49,name)
(50,peer->callno)
(51,-1)
(52,lastms)
(53,AST_DEVICE_UNAVAILABLE)
(54,"PeerStatus")
(55,)
(56,peer->name)
(57,peer)
(58,data)
(59,peer)
(60,iax2_destroy(callno)
(61,manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Unreachable\\r\\nTime: %d\\r\\n", peer->name, peer->lastms)
(62,peer->pokeexpire)
(63,(callno = peer->callno)
(64,)
(65,peer)
(66,&iaxsl[callno])
(67,callno)
(68,ast_devstate_changed(AST_DEVICE_UNAVAILABLE, "IAX2/%s", peer->name)
(69,peer)
(70,peer->lastms)
(71,LOG_NOTICE)
(72,const void *data)
(73,0)
(74,callno)
(75,pokefreqnotok)
(76,peer->callno = 0)
(77,iaxsl[callno])
(78,peer)
(79,iax2_poke_peer_s)
(80,-1)
(81,lastms)
(82,iaxsl)
(83,lastms)
(84,RET)
(85,iaxsl[callno])
(86,EVENT_FLAG_SYSTEM)
(87,0)
(88,peer)
(89,peer)
(90,iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer)
(91,pokeexpire)
(92,peer->lastms)
(93,-1)
(94,callno)
(95,peer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^