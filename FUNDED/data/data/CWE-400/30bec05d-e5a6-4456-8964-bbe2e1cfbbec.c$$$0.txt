-----label-----
0
-----code-----
static void goodB2G()
{
    char * data;
    CWE401_Memory_Leak__char_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,71,72,74,78,80,81,85,86,90,92
-----computeFrom-----
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    char * data;    CWE401_Memory_Leak__char_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    char * data;    CWE401_Memory_Leak__char_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_calloc_34_unionType myUnion;
CWE401_Memory_Leak__char_calloc_34_unionType myUnion;
CWE401_Memory_Leak__char_calloc_34_unionType
CWE401_Memory_Leak__char_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* FIX: Deallocate memory */        free(data);    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
free(data);
free(data)
free
free
data
data
-----joern-----
(40,13,0)
(26,25,0)
(16,29,0)
(18,19,0)
(10,34,0)
(40,29,0)
(19,18,0)
(3,14,0)
(28,19,0)
(12,29,0)
(42,29,0)
(19,11,0)
(2,22,0)
(41,26,0)
(8,40,0)
(35,36,0)
(0,29,0)
(21,16,0)
(11,13,0)
(20,11,0)
(34,13,0)
(31,36,0)
(22,25,0)
(23,29,0)
(6,22,0)
(36,29,0)
(14,3,0)
(37,24,0)
(13,11,0)
(1,42,0)
(3,33,0)
(38,32,0)
(42,13,0)
(30,34,0)
(9,40,0)
(13,29,0)
(15,25,0)
(4,13,0)
(32,42,0)
(25,22,0)
(24,29,0)
(16,13,0)
(11,20,0)
(25,24,0)
(39,18,0)
(5,14,0)
(7,32,0)
(11,19,0)
(26,24,0)
(40,8,1)
(2,15,1)
(11,19,1)
(9,3,1)
(1,32,1)
(16,13,1)
(18,39,1)
(22,6,1)
(11,20,1)
(26,41,1)
(32,7,1)
(9,34,1)
(36,31,1)
(14,5,1)
(4,36,1)
(6,2,1)
(10,13,1)
(41,25,1)
(28,4,1)
(21,40,1)
(42,13,1)
(16,21,1)
(19,18,1)
(13,11,1)
(3,14,1)
(8,9,1)
(40,13,1)
(30,10,1)
(5,34,1)
(25,22,1)
(34,13,1)
(15,42,1)
(34,30,1)
(17,26,1)
(31,35,1)
(39,28,1)
(26,25,1)
(7,38,1)
(38,16,1)
(42,1,1)
(42,13,2)
(19,18,2)
(11,20,2)
(34,13,2)
(16,13,2)
(13,11,2)
(25,22,2)
(40,13,2)
(5,34,2)
(3,14,2)
(3,34,2)
(26,25,2)
(11,19,2)
(14,34,2)
-----------------------------------
(0,myUnion)
(1,data)
(2,myUnion)
(3,exit(-1)
(4,data)
(5,1)
(6,unionSecond)
(7,unionFirst)
(8,"A String")
(9,data)
(10,data)
(11,(char *)
(12,if (data == NULL)
(13,data = (char *)
(14,-1)
(15,data)
(16,printLine(data)
(17,RET)
(18,sizeof(char)
(19,calloc(100, sizeof(char)
(20,char *)
(21,data)
(22,myUnion.unionSecond)
(23,data)
(24,)
(25,* data = myUnion.unionSecond)
(26,free(data)
(27, sizeof(char)
(28,100)
(29,)
(30,NULL)
(31,NULL)
(32,myUnion.unionFirst)
(33,)
(34,data == NULL)
(35,data)
(36,data = NULL)
(37,data)
(38,myUnion)
(39,char)
(40,strcpy(data, "A String")
(41,data)
(42,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^