-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_54e_goodB2GSink(size_t data)
{
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
19,21
20,21
20,22
21,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
46,47
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
67,68
69,70
71,72
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,7,9,14,16,17,22,25,27,30,31,36,39,41,44,47,50,51,55,57,62,64,68,70,72,76,78,82,84,89,90
-----computeFrom-----
19,20
19,21
20,21
20,22
28,29
28,30
34,35
34,36
45,46
45,47
53,54
53,55
-----guardedBy-----
27,72
30,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_54e_goodB2GSink(size_t data){    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_54e_goodB2GSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_54e_goodB2GSink
size_t data
size_t
size_t
data
data
{    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(3,37,0)
(30,25,0)
(0,11,0)
(9,14,0)
(27,35,0)
(37,3,0)
(10,9,0)
(17,15,0)
(0,26,0)
(28,13,0)
(11,0,0)
(13,25,0)
(22,12,0)
(16,8,0)
(38,9,0)
(7,8,0)
(31,35,0)
(32,3,0)
(40,32,0)
(31,25,0)
(15,17,0)
(7,0,0)
(21,27,0)
(39,35,0)
(34,3,0)
(23,31,0)
(40,2,0)
(12,1,0)
(15,29,0)
(24,37,0)
(4,8,0)
(6,0,0)
(3,32,0)
(19,31,0)
(20,13,0)
(0,7,0)
(27,25,0)
(32,40,0)
(25,35,0)
(25,40,0)
(41,25,0)
(3,26,0)
(18,11,0)
(41,35,0)
(8,26,0)
(40,25,0)
(36,41,0)
(2,40,0)
(33,17,0)
(8,7,0)
(28,20,1)
(5,41,1)
(8,26,1)
(0,11,1)
(7,8,1)
(27,25,1)
(13,28,1)
(17,33,1)
(5,12,1)
(18,6,1)
(7,0,1)
(19,23,1)
(25,40,1)
(30,7,1)
(32,3,1)
(0,26,1)
(27,21,1)
(21,31,1)
(41,36,1)
(16,0,1)
(40,2,1)
(12,22,1)
(11,18,1)
(31,19,1)
(37,24,1)
(3,37,1)
(40,32,1)
(23,15,1)
(36,27,1)
(41,25,1)
(13,25,1)
(23,13,1)
(15,17,1)
(20,25,1)
(22,7,1)
(4,16,1)
(24,34,1)
(8,4,1)
(33,13,1)
(3,26,1)
(31,25,1)
(34,30,1)
(0,26,2)
(34,7,2)
(32,7,2)
(3,7,2)
(16,0,2)
(12,7,2)
(17,13,2)
(24,7,2)
(13,25,2)
(40,32,2)
(7,8,2)
(8,26,2)
(41,7,2)
(15,17,2)
(37,7,2)
(41,25,2)
(32,3,2)
(31,25,2)
(7,0,2)
(15,13,2)
(31,7,2)
(3,37,2)
(33,13,2)
(23,7,2)
(28,7,2)
(19,7,2)
(25,40,2)
(27,25,2)
(27,7,2)
(21,7,2)
(22,7,2)
(8,0,2)
(36,7,2)
(13,7,2)
(0,11,2)
(40,7,2)
(40,2,2)
(3,26,2)
(4,0,2)
(20,7,2)
(30,7,2)
(25,7,2)
-----------------------------------
(0,data > wcslen(HELLO_STRING)
(1,)
(2,wchar_t *)
(3,data*sizeof(wchar_t)
(4,100)
(5,RET)
(6,data)
(7,data > wcslen(HELLO_STRING)
(8,data < 100)
(9,)
(10,if (data > wcslen(HELLO_STRING)
(11,wcslen(HELLO_STRING)
(12,printLine("Input is less than the length of the source string or too large")
(13,myString == NULL)
(14,)
(15,exit(-1)
(16,data)
(17,-1)
(18,HELLO_STRING)
(19,HELLO_STRING)
(20,myString)
(21,myString)
(22,"Input is less than the length of the source string or too large")
(23,myString)
(24,wchar_t)
(25,myString = (wchar_t *)
(26,size_t data)
(27,printWLine(myString)
(28,NULL)
(29,)
(30,myString)
(31,wcscpy(myString, HELLO_STRING)
(32,malloc(data*sizeof(wchar_t)
(33,1)
(34,data)
(35,)
(36,myString)
(37,sizeof(wchar_t)
(38,myString)
(39,if (myString == NULL)
(40,(wchar_t *)
(41,free(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^