-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
66,67
66,68
68,69
68,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,62,64,65,67,69,70
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_16_bad(){    char * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__char_malloc_16_bad()
CWE401_Memory_Leak__char_malloc_16_bad
{    char * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(31,22,0)
(29,35,0)
(28,21,0)
(2,27,0)
(20,11,0)
(13,32,0)
(3,29,0)
(33,15,0)
(0,34,0)
(22,27,0)
(24,14,0)
(7,14,0)
(21,11,0)
(33,10,0)
(21,35,0)
(8,10,0)
(26,6,0)
(11,21,0)
(11,20,0)
(5,35,0)
(22,12,0)
(12,11,0)
(9,29,0)
(30,14,0)
(25,21,0)
(34,14,0)
(4,35,0)
(10,33,0)
(29,21,0)
(23,34,0)
(17,28,0)
(27,22,0)
(11,12,0)
(28,35,0)
(1,6,0)
(12,22,0)
(6,21,0)
(6,21,1)
(27,2,1)
(17,29,1)
(1,26,1)
(3,9,1)
(9,33,1)
(19,13,1)
(18,16,1)
(6,1,1)
(12,22,1)
(11,20,1)
(13,18,1)
(11,12,1)
(22,27,1)
(25,16,1)
(26,21,1)
(2,31,1)
(8,6,1)
(33,10,1)
(28,17,1)
(4,28,1)
(18,4,1)
(29,21,1)
(34,23,1)
(9,6,1)
(19,18,1)
(28,21,1)
(23,0,1)
(10,8,1)
(29,3,1)
(16,34,1)
(21,11,1)
(31,25,1)
(11,16,2)
(29,21,2)
(8,6,2)
(31,16,2)
(33,10,2)
(25,16,2)
(26,16,2)
(29,16,2)
(11,12,2)
(22,16,2)
(28,21,2)
(3,16,2)
(21,11,2)
(9,16,2)
(1,16,2)
(21,16,2)
(22,27,2)
(10,6,2)
(4,16,2)
(6,16,2)
(12,16,2)
(2,16,2)
(28,16,2)
(12,22,2)
(6,21,2)
(27,16,2)
(13,18,2)
(11,20,2)
(33,6,2)
(17,16,2)
-----------------------------------
(0,data)
(1,NULL)
(2,char)
(3,"A String")
(4,break;)
(5,if (data == NULL)
(6,data == NULL)
(7,while(1)
(8,1)
(9,data)
(10,-1)
(11,(char *)
(12,malloc(100*sizeof(char)
(13,break;)
(14,)
(15,)
(16,1)
(17,data)
(18,1)
(19,RET)
(20,char *)
(21,data = (char *)
(22,100*sizeof(char)
(23,NULL)
(24,data)
(25,data)
(26,data)
(27,sizeof(char)
(28,printLine(data)
(29,strcpy(data, "A String")
(30,while(1)
(31,100)
(32,)
(33,exit(-1)
(34,data = NULL)
(35,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^