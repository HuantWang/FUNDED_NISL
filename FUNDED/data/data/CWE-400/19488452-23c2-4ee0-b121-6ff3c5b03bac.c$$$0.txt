-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_07_bad()
{
    if(staticFive==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
71,74
72,73
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
89,92
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,51,52,53,57,60,61,65,68,70,73,75,78,81,82,86,88,94,95,96,100,103,104,108,110
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
48,49
48,50
63,64
63,65
76,77
76,78
84,85
84,86
91,92
91,93
-----guardedBy-----
86,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_07_bad(){    if(staticFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_07_bad()
CWE401_Memory_Leak__malloc_realloc_int_07_bad
{    if(staticFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(staticFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(39,50,0)
(34,40,0)
(55,39,0)
(38,35,0)
(51,8,0)
(16,49,0)
(26,2,0)
(3,24,0)
(58,20,0)
(54,56,0)
(30,16,0)
(48,56,0)
(32,59,0)
(2,40,0)
(4,33,0)
(14,45,0)
(37,33,0)
(10,16,0)
(46,8,0)
(28,39,0)
(42,34,0)
(44,46,0)
(22,8,0)
(24,3,0)
(11,48,0)
(53,6,0)
(5,31,0)
(21,16,0)
(36,41,0)
(56,16,0)
(51,24,0)
(34,27,0)
(30,35,0)
(6,50,0)
(48,43,0)
(11,37,0)
(0,40,0)
(39,45,0)
(8,51,0)
(40,24,0)
(39,55,0)
(40,16,0)
(18,6,0)
(59,56,0)
(48,11,0)
(6,56,0)
(19,2,0)
(35,50,0)
(17,35,0)
(24,51,0)
(56,48,0)
(12,60,0)
(55,27,0)
(24,40,0)
(15,51,0)
(31,36,0)
(25,39,0)
(2,45,0)
(39,40,0)
(35,30,0)
(43,48,0)
(50,16,0)
(20,40,0)
(36,31,0)
(45,27,0)
(35,56,0)
(29,50,0)
(9,20,0)
(1,60,0)
(37,11,0)
(8,46,0)
(52,37,0)
(51,56,0)
(57,59,0)
(13,16,0)
(33,37,0)
(47,23,0)
(17,50,1)
(6,56,1)
(52,54,1)
(29,6,1)
(54,60,1)
(48,43,1)
(45,14,1)
(39,45,1)
(5,59,1)
(18,36,1)
(25,28,1)
(44,22,1)
(2,19,1)
(34,40,1)
(32,57,1)
(51,56,1)
(48,11,1)
(46,44,1)
(30,35,1)
(56,48,1)
(39,50,1)
(20,40,1)
(57,56,1)
(22,15,1)
(38,17,1)
(50,29,1)
(35,50,1)
(9,58,1)
(0,30,1)
(4,52,1)
(7,34,1)
(35,38,1)
(55,39,1)
(15,0,1)
(28,45,1)
(51,8,1)
(59,32,1)
(53,18,1)
(37,33,1)
(2,40,1)
(7,20,1)
(59,56,1)
(35,56,1)
(7,60,1)
(18,59,1)
(20,9,1)
(1,12,1)
(40,24,1)
(11,37,1)
(60,1,1)
(14,2,1)
(24,3,1)
(58,40,1)
(26,20,1)
(39,25,1)
(31,5,1)
(33,4,1)
(19,26,1)
(8,46,1)
(42,55,1)
(6,53,1)
(24,51,1)
(39,40,1)
(36,31,1)
(34,42,1)
(53,60,2)
(34,40,2)
(35,60,2)
(9,60,2)
(50,60,2)
(40,24,2)
(51,56,2)
(5,59,2)
(35,50,2)
(15,60,2)
(37,33,2)
(51,8,2)
(45,20,2)
(33,60,2)
(26,20,2)
(14,20,2)
(17,60,2)
(39,20,2)
(39,50,2)
(52,60,2)
(39,45,2)
(35,56,2)
(36,59,2)
(55,20,2)
(42,20,2)
(22,60,2)
(6,60,2)
(48,60,2)
(24,51,2)
(46,60,2)
(31,59,2)
(40,60,2)
(39,40,2)
(18,60,2)
(2,40,2)
(20,40,2)
(11,37,2)
(38,60,2)
(57,60,2)
(32,60,2)
(51,60,2)
(37,60,2)
(6,56,2)
(24,60,2)
(48,43,2)
(19,20,2)
(30,35,2)
(11,60,2)
(28,20,2)
(59,60,2)
(56,60,2)
(29,60,2)
(44,60,2)
(0,60,2)
(54,60,2)
(48,11,2)
(36,31,2)
(2,20,2)
(58,60,2)
(4,60,2)
(8,46,2)
(30,60,2)
(55,39,2)
(56,48,2)
(20,60,2)
(8,60,2)
(24,3,2)
(25,20,2)
(59,56,2)
(34,20,2)
-----------------------------------
(0,data)
(1,5)
(2,data[0])
(3,int *)
(4,int)
(5,1)
(6,data[0])
(7,RET)
(8,(130000)
(9,NULL)
(10,if (data != NULL)
(11,malloc(100*sizeof(int)
(12,staticFive)
(13,data)
(14,10)
(15,data)
(16,)
(17,data)
(18,data)
(19,0)
(20,data != NULL)
(21,if (data == NULL)
(22,130000)
(23,)
(24,(int *)
(25,0)
(26,data)
(27,)
(28,data)
(29,5)
(30,printIntLine(data[0])
(31,-1)
(32,NULL)
(33,sizeof(int)
(34,free(data)
(35,data[0])
(36,exit(-1)
(37,100*sizeof(int)
(38,0)
(39,data[0])
(40,data = (int *)
(41,)
(42,data)
(43,int *)
(44,int)
(45,data[0] = 10)
(46,sizeof(int)
(47,if(staticFive==5)
(48,(int *)
(49,)
(50,data[0] = 5)
(51,realloc(data, (130000)
(52,100)
(53,0)
(54,data)
(55,printIntLine(data[0])
(56,* data = (int *)
(57,data)
(58,data)
(59,data == NULL)
(60,staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^