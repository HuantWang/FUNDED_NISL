-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badSink(size_t data)
{
    if(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,7,9,13,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badSink(size_t data){    if(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badSink(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badSink
size_t data
size_t
size_t
data
data
{    if(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
if(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(14,16,0)
(35,16,0)
(30,10,0)
(20,32,0)
(0,11,0)
(13,16,0)
(36,37,0)
(3,36,0)
(10,12,0)
(33,9,0)
(16,2,0)
(29,14,0)
(27,31,0)
(26,2,0)
(27,5,0)
(34,7,0)
(18,11,0)
(16,11,0)
(22,36,0)
(38,14,0)
(18,16,0)
(19,18,0)
(32,20,0)
(5,27,0)
(2,5,0)
(40,7,0)
(9,16,0)
(2,26,0)
(27,39,0)
(2,16,0)
(24,9,0)
(14,11,0)
(5,2,0)
(13,11,0)
(4,31,0)
(31,27,0)
(6,27,0)
(23,20,0)
(28,21,0)
(15,13,0)
(7,40,0)
(32,1,0)
(40,39,0)
(25,40,0)
(13,16,1)
(18,16,1)
(8,10,1)
(27,31,1)
(10,30,1)
(24,16,1)
(32,20,1)
(35,40,1)
(9,33,1)
(40,39,1)
(7,34,1)
(20,23,1)
(19,14,1)
(8,17,1)
(5,27,1)
(8,13,1)
(14,29,1)
(30,40,1)
(4,6,1)
(23,9,1)
(6,35,1)
(9,16,1)
(38,9,1)
(38,32,1)
(14,16,1)
(16,2,1)
(15,18,1)
(18,19,1)
(31,4,1)
(2,5,1)
(27,39,1)
(40,7,1)
(25,17,1)
(29,38,1)
(34,25,1)
(33,24,1)
(13,15,1)
(2,26,1)
(9,40,2)
(15,40,2)
(40,39,2)
(34,17,2)
(9,16,2)
(19,40,2)
(32,20,2)
(16,40,2)
(18,16,2)
(35,40,2)
(27,39,2)
(30,40,2)
(38,40,2)
(29,40,2)
(27,40,2)
(14,16,2)
(6,40,2)
(40,7,2)
(23,9,2)
(27,31,2)
(32,9,2)
(31,40,2)
(7,17,2)
(13,16,2)
(13,40,2)
(4,40,2)
(2,26,2)
(25,17,2)
(18,40,2)
(14,40,2)
(16,2,2)
(24,40,2)
(33,40,2)
(20,9,2)
(5,40,2)
(2,40,2)
(2,5,2)
(40,17,2)
(5,27,2)
(10,40,2)
-----------------------------------
(0,if (myString == NULL)
(1,)
(2,(wchar_t *)
(3,if (data > wcslen(HELLO_STRING)
(4,wchar_t)
(5,malloc(data*sizeof(wchar_t)
(6,data)
(7,wcslen(HELLO_STRING)
(8,RET)
(9,myString == NULL)
(10,printLine("Input is less than the length of the source string")
(11,)
(12,)
(13,free(myString)
(14,wcscpy(myString, HELLO_STRING)
(15,myString)
(16,myString = (wchar_t *)
(17,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal)
(18,printWLine(myString)
(19,myString)
(20,-1)
(21,)
(22,myString)
(23,1)
(24,myString)
(25,data)
(26,wchar_t *)
(27,data*sizeof(wchar_t)
(28,if(CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_22_badGlobal)
(29,HELLO_STRING)
(30,"Input is less than the length of the source string")
(31,sizeof(wchar_t)
(32,exit(-1)
(33,NULL)
(34,HELLO_STRING)
(35,myString)
(36,)
(37,)
(38,myString)
(39,size_t data)
(40,data > wcslen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^