-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
50,53
50,54
51,52
53,54
55,56
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
67,68
68,69
68,70
69,70
70,71
70,72
72,73
72,74
75,76
75,77
75,78
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
89,90
89,91
89,92
89,93
89,94
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
97,98
99,100
99,101
100,101
102,103
102,104
103,104
105,106
106,107
106,108
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
123,126
124,125
126,127
128,129
130,131
131,132
131,133
132,133
134,135
136,137
137,138
137,139
138,139
140,141
142,143
143,144
144,145
144,146
145,146
-----nextToken-----
2,4,9,11,15,16,19,24,26,29,31,36,38,40,42,44,49,52,54,56,57,62,63,66,71,73,74,79,82,84,87,88,93,96,98,101,104,107,108,112,114,119,121,125,127,129,133,135,139,141,146,147
-----computeFrom-----
13,14
13,15
33,34
33,35
47,48
47,49
76,77
76,78
77,78
77,79
85,86
85,87
91,92
91,93
102,103
102,104
110,111
110,112
-----guardedBy-----
38,54
44,56
84,129
87,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(30,0,0)
(2,17,0)
(9,4,0)
(64,63,0)
(38,16,0)
(33,68,0)
(46,28,0)
(44,11,0)
(39,21,0)
(18,3,0)
(58,65,0)
(28,56,0)
(12,56,0)
(45,63,0)
(37,56,0)
(53,5,0)
(60,11,0)
(63,42,0)
(36,31,0)
(52,2,0)
(30,46,0)
(63,0,0)
(59,27,0)
(22,42,0)
(6,5,0)
(0,63,0)
(66,2,0)
(4,71,0)
(30,56,0)
(25,28,0)
(72,17,0)
(49,27,0)
(2,42,0)
(65,27,0)
(15,39,0)
(16,34,0)
(49,34,0)
(24,69,0)
(70,5,0)
(34,49,0)
(10,39,0)
(62,42,0)
(46,30,0)
(34,16,0)
(32,2,0)
(41,31,0)
(35,0,0)
(49,19,0)
(28,0,0)
(16,56,0)
(17,2,0)
(23,43,0)
(28,46,0)
(43,30,0)
(16,69,0)
(0,61,0)
(19,49,0)
(54,63,0)
(20,30,0)
(6,27,0)
(7,31,0)
(11,27,0)
(26,48,0)
(30,43,0)
(70,27,0)
(29,65,0)
(48,1,0)
(13,18,0)
(69,16,0)
(65,5,0)
(47,18,0)
(51,6,0)
(27,49,0)
(42,39,0)
(33,8,0)
(56,31,0)
(8,33,0)
(14,8,0)
(16,0,0)
(57,70,0)
(27,5,0)
(40,28,0)
(2,42,1)
(50,56,1)
(11,44,1)
(60,27,1)
(65,27,1)
(67,6,1)
(16,56,1)
(55,4,1)
(12,37,1)
(30,43,1)
(6,51,1)
(49,34,1)
(46,28,1)
(54,64,1)
(2,32,1)
(56,12,1)
(28,40,1)
(55,0,1)
(59,46,1)
(67,48,1)
(44,60,1)
(38,59,1)
(25,30,1)
(40,25,1)
(64,45,1)
(65,29,1)
(16,69,1)
(30,0,1)
(34,16,1)
(49,19,1)
(14,11,1)
(28,56,1)
(43,23,1)
(8,14,1)
(29,58,1)
(63,42,1)
(72,2,1)
(17,72,1)
(33,8,1)
(63,54,1)
(35,17,1)
(0,63,1)
(46,30,1)
(58,33,1)
(32,52,1)
(70,27,1)
(67,55,1)
(17,2,1)
(30,56,1)
(28,0,1)
(16,0,1)
(9,17,1)
(58,11,1)
(42,62,1)
(23,20,1)
(45,35,1)
(69,24,1)
(62,22,1)
(22,50,1)
(20,55,1)
(66,42,1)
(51,70,1)
(57,65,1)
(11,27,1)
(48,26,1)
(27,49,1)
(70,57,1)
(24,38,1)
(55,50,1)
(52,66,1)
(4,9,1)
(6,27,1)
(26,46,1)
(65,27,2)
(24,46,2)
(44,46,2)
(6,27,2)
(59,46,2)
(2,50,2)
(60,46,2)
(16,69,2)
(16,0,2)
(64,17,2)
(4,17,2)
(27,46,2)
(20,55,2)
(0,63,2)
(65,46,2)
(49,19,2)
(70,46,2)
(54,17,2)
(46,28,2)
(22,50,2)
(30,55,2)
(17,50,2)
(63,42,2)
(30,0,2)
(30,56,2)
(70,27,2)
(11,46,2)
(52,50,2)
(33,11,2)
(32,50,2)
(48,46,2)
(17,2,2)
(42,50,2)
(49,34,2)
(28,30,2)
(63,17,2)
(38,46,2)
(69,46,2)
(34,46,2)
(30,43,2)
(33,8,2)
(11,27,2)
(62,50,2)
(0,17,2)
(49,46,2)
(35,17,2)
(57,46,2)
(25,30,2)
(29,46,2)
(43,55,2)
(2,42,2)
(28,0,2)
(34,16,2)
(28,56,2)
(27,49,2)
(51,46,2)
(46,55,2)
(16,56,2)
(58,46,2)
(8,11,2)
(45,17,2)
(16,46,2)
(14,11,2)
(72,50,2)
(6,46,2)
(46,30,2)
(66,50,2)
(23,55,2)
(40,30,2)
(26,46,2)
(9,17,2)
-----------------------------------
(0,data = strtoul(inputBuffer, NULL, 0)
(1,)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,)
(4,printLine("fgets()
(5,)
(6,free(myString)
(7,data)
(8,-1)
(9,"fgets()
(10,inputBuffer)
(11,myString == NULL)
(12,0)
(13,if (data > strlen(HELLO_STRING)
(14,1)
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,data*sizeof(char)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,)
(19,char *)
(20,data)
(21,)
(22,inputBuffer)
(23,HELLO_STRING)
(24,char)
(25,data)
(26,"Input is less than the length of the source string or too large")
(27,myString = (char *)
(28,data < 100)
(29,HELLO_STRING)
(30,data > strlen(HELLO_STRING)
(31,)
(32,stdin)
(33,exit(-1)
(34,malloc(data*sizeof(char)
(35,data)
(36,if(GLOBAL_CONST_TRUE)
(37,data)
(38,data)
(39,)
(40,100)
(41,if(GLOBAL_CONST_TRUE)
(42,inputBuffer[CHAR_ARRAY_SIZE] = "")
(43,strlen(HELLO_STRING)
(44,NULL)
(45,inputBuffer)
(46,data > strlen(HELLO_STRING)
(47,myString)
(48,printLine("Input is less than the length of the source string or too large")
(49,(char *)
(50,GLOBAL_CONST_TRUE)
(51,myString)
(52,CHAR_ARRAY_SIZE)
(53,if (myString == NULL)
(54,0)
(55,GLOBAL_CONST_TRUE)
(56,data = 0)
(57,myString)
(58,myString)
(59,myString)
(60,myString)
(61,)
(62,"")
(63,strtoul(inputBuffer, NULL, 0)
(64,NULL)
(65,strcpy(myString, HELLO_STRING)
(66,inputBuffer)
(67,RET)
(68,)
(69,sizeof(char)
(70,printLine(myString)
(71,)
(72,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^