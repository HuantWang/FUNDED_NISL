-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_31_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Set count to a random value */
    count = RAND32();
    {
        int countCopy = count;
        int count = countCopy;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
57,58
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
73,74
75,76
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
115,116
117,118
117,119
117,120
117,121
117,122
118,119
120,121
122,123
123,124
123,125
126,127
126,128
127,128
129,130
131,132
133,134
134,135
135,136
135,137
136,137
139,140
139,141
140,141
142,143
143,144
144,145
144,146
145,146
147,148
-----nextToken-----
2,4,8,10,14,16,20,23,27,29,32,35,37,40,45,47,49,53,55,56,59,62,64,65,67,71,74,76,77,81,83,88,89,94,95,98,102,103,105,108,114,116,119,121,124,125,128,130,132,137,138,141,146,148
-----computeFrom-----
12,13
12,14
18,19
18,20
69,70
69,71
79,80
79,81
92,93
92,94
96,97
96,98
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_31_bad(){    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_31_bad()
CWE400_Resource_Exhaustion__rand_fwrite_31_bad
{    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    {        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
{        int countCopy = count;        int count = countCopy;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int countCopy = count;
int countCopy = count;
int
countCopy = count
countCopy
= count
count
count
int count = countCopy;
int count = countCopy;
int
count = countCopy
count
= countCopy
countCopy
countCopy
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(0,73,0)
(25,46,0)
(44,14,0)
(47,53,0)
(65,23,0)
(63,16,0)
(5,39,0)
(41,43,0)
(16,55,0)
(3,23,0)
(1,22,0)
(57,53,0)
(23,22,0)
(12,73,0)
(15,50,0)
(22,34,0)
(11,74,0)
(42,34,0)
(55,30,0)
(31,49,0)
(20,7,0)
(61,40,0)
(2,32,0)
(49,53,0)
(23,34,0)
(17,36,0)
(33,22,0)
(64,16,0)
(34,60,0)
(71,49,0)
(48,28,0)
(8,41,0)
(38,39,0)
(29,53,0)
(72,28,0)
(73,0,0)
(30,55,0)
(32,54,0)
(39,49,0)
(74,60,0)
(9,16,0)
(45,35,0)
(13,7,0)
(66,46,0)
(36,5,0)
(56,36,0)
(18,34,0)
(22,73,0)
(24,35,0)
(21,66,0)
(62,53,0)
(70,53,0)
(59,53,0)
(40,10,0)
(69,51,0)
(16,9,0)
(51,74,0)
(58,39,0)
(68,7,0)
(52,9,0)
(16,14,0)
(53,34,0)
(66,21,0)
(46,7,0)
(39,5,0)
(74,51,0)
(27,60,0)
(37,13,0)
(67,66,0)
(4,30,0)
(55,16,0)
(26,5,0)
(46,66,0)
(35,53,0)
(73,60,0)
(14,16,0)
(66,23,0)
(5,53,0)
(16,5,0)
(28,53,0)
(32,5,0)
(6,19,1)
(56,17,1)
(45,23,1)
(2,19,1)
(16,14,1)
(44,64,1)
(58,26,1)
(66,21,1)
(26,49,1)
(23,65,1)
(9,52,1)
(31,28,1)
(35,24,1)
(14,44,1)
(22,73,1)
(5,39,1)
(64,30,1)
(37,41,1)
(24,45,1)
(22,1,1)
(16,63,1)
(13,37,1)
(20,68,1)
(19,46,1)
(13,7,1)
(51,69,1)
(46,66,1)
(55,16,1)
(72,48,1)
(48,35,1)
(28,72,1)
(32,2,1)
(67,25,1)
(68,40,1)
(30,4,1)
(36,56,1)
(61,36,1)
(68,36,1)
(73,0,1)
(46,7,1)
(49,71,1)
(66,67,1)
(71,31,1)
(25,13,1)
(52,14,1)
(3,22,1)
(55,30,1)
(38,58,1)
(37,55,1)
(16,9,1)
(6,32,1)
(8,55,1)
(39,38,1)
(1,33,1)
(40,61,1)
(63,9,1)
(32,5,1)
(0,12,1)
(36,5,1)
(74,51,1)
(25,7,1)
(69,11,1)
(33,73,1)
(12,74,1)
(16,5,1)
(65,3,1)
(4,46,1)
(23,22,1)
(39,49,1)
(17,5,1)
(41,8,1)
(7,20,1)
(66,23,1)
(16,9,2)
(30,46,2)
(67,46,2)
(39,49,2)
(64,46,2)
(2,19,2)
(74,51,2)
(13,7,2)
(5,39,2)
(44,46,2)
(16,14,2)
(9,46,2)
(32,5,2)
(23,22,2)
(37,46,2)
(63,46,2)
(4,46,2)
(46,46,2)
(66,46,2)
(46,7,2)
(55,46,2)
(41,55,2)
(73,0,2)
(52,46,2)
(16,5,2)
(16,46,2)
(55,30,2)
(61,36,2)
(40,36,2)
(8,55,2)
(25,46,2)
(66,23,2)
(22,73,2)
(36,5,2)
(32,19,2)
(66,21,2)
(13,46,2)
(55,16,2)
(14,46,2)
(46,66,2)
-----------------------------------
(0,RAND32()
(1,count)
(2,pFile)
(3,count)
(4,SENTENCE)
(5,pFile = fopen(filename, "w+")
(6,RET)
(7,i = 0)
(8,1)
(9,strlen(SENTENCE)
(10,)
(11,count)
(12,count)
(13,i++)
(14,sizeof(char)
(15,if (strlen(SENTENCE)
(16,fwrite(SENTENCE, sizeof(char)
(17,pFile)
(18,countCopy)
(19,pFile)
(20,0)
(21,size_t)
(22,countCopy = count)
(23,count = countCopy)
(24,0)
(25,i)
(26,pFile)
(27,count)
(28,*pFile = NULL)
(29,pFile)
(30,strlen(SENTENCE)
(31,filename)
(32,fclose(pFile)
(33,countCopy)
(34,)
(35,i = 0)
(36,pFile == NULL)
(37,i)
(38,"w+")
(39,fopen(filename, "w+")
(40,exit(1)
(41,exit(1)
(42,count)
(43,)
(44,char)
(45,i)
(46,i < (size_t)
(47,i)
(48,pFile)
(49,*filename = "output_bad.txt")
(50,)
(51,-1)
(52,SENTENCE)
(53,)
(54,)
(55,strlen(SENTENCE)
(56,NULL)
(57,for (i = 0; i < (size_t)
(58,filename)
(59,if (pFile)
(60,)
(61,1)
(62,if (pFile == NULL)
(63,pFile)
(64,SENTENCE)
(65,countCopy)
(66,(size_t)
(67,count)
(68,i)
(69,1)
(70,filename)
(71,"output_bad.txt")
(72,NULL)
(73,count = RAND32()
(74,count = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^