-----label-----
0
-----code-----
static void good2()
{
    if(5==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            char * tmpData;
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            tmpData = (char *)realloc(data, (130000)*sizeof(char));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
72,73
74,75
74,76
74,77
75,76
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
106,107
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,48,50,51,55,57,58,62,64,68,71,73,76,78,81,84,85,89,91,96,98,102,104,105,109,111,115,117
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
66,67
66,68
79,80
79,81
87,88
87,89
94,95
94,96
-----guardedBy-----
89,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
static void
good2()
good2
{    if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
5==5
5
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
char * tmpData;
char * tmpData;
char
* tmpData
*
tmpData
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
tmpData = (char *)realloc(data, (130000)*sizeof(char));
tmpData = (char *)realloc(data, (130000)*sizeof(char))
tmpData
tmpData
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(43,10,0)
(54,45,0)
(14,28,0)
(30,0,0)
(28,12,0)
(32,36,0)
(31,42,0)
(6,36,0)
(37,28,0)
(7,37,0)
(42,36,0)
(47,14,0)
(25,21,0)
(39,49,0)
(37,36,0)
(49,50,0)
(46,44,0)
(49,39,0)
(33,38,0)
(18,56,0)
(21,25,0)
(28,37,0)
(18,10,0)
(36,52,0)
(50,49,0)
(12,28,0)
(48,45,0)
(45,36,0)
(1,15,0)
(11,51,0)
(21,49,0)
(25,22,0)
(28,14,0)
(21,37,0)
(19,33,0)
(3,0,0)
(41,1,0)
(10,18,0)
(1,38,0)
(0,50,0)
(4,20,0)
(15,50,0)
(13,7,0)
(2,15,0)
(42,37,0)
(9,36,0)
(55,21,0)
(8,36,0)
(50,36,0)
(53,33,0)
(17,50,0)
(22,25,0)
(51,37,0)
(40,37,0)
(5,51,0)
(34,47,0)
(16,22,0)
(49,21,0)
(27,25,0)
(26,15,0)
(33,15,0)
(14,47,0)
(15,38,0)
(45,37,0)
(29,44,0)
(7,36,0)
(7,15,0)
(35,47,0)
(24,35,0)
(47,35,0)
(28,14,1)
(48,18,1)
(54,48,1)
(46,29,1)
(45,54,1)
(25,22,1)
(49,21,1)
(19,15,1)
(42,31,1)
(16,27,1)
(35,24,1)
(7,15,1)
(1,15,1)
(11,37,1)
(13,1,1)
(53,19,1)
(5,11,1)
(1,41,1)
(48,51,1)
(7,37,1)
(15,50,1)
(51,37,1)
(10,43,1)
(23,7,1)
(21,37,1)
(0,50,1)
(33,53,1)
(18,10,1)
(43,51,1)
(55,17,1)
(41,33,1)
(30,50,1)
(47,35,1)
(0,3,1)
(28,12,1)
(3,30,1)
(27,55,1)
(17,42,1)
(42,37,1)
(34,40,1)
(37,28,1)
(24,34,1)
(33,15,1)
(23,44,1)
(2,0,1)
(26,2,1)
(31,45,1)
(49,39,1)
(21,25,1)
(22,16,1)
(15,26,1)
(50,49,1)
(13,0,1)
(40,44,1)
(7,13,1)
(45,37,1)
(44,46,1)
(51,5,1)
(14,47,1)
(45,37,2)
(24,44,2)
(1,0,2)
(37,44,2)
(11,44,2)
(10,51,2)
(0,44,2)
(26,0,2)
(33,0,2)
(5,44,2)
(51,44,2)
(31,44,2)
(55,44,2)
(28,44,2)
(45,44,2)
(22,44,2)
(49,39,2)
(18,51,2)
(51,37,2)
(40,44,2)
(41,0,2)
(0,50,2)
(15,0,2)
(3,44,2)
(7,37,2)
(53,0,2)
(25,22,2)
(47,35,2)
(18,10,2)
(54,44,2)
(13,44,2)
(35,44,2)
(49,21,2)
(16,44,2)
(1,15,2)
(7,15,2)
(42,44,2)
(21,37,2)
(14,47,2)
(15,50,2)
(7,44,2)
(28,14,2)
(21,44,2)
(33,15,2)
(43,51,2)
(49,44,2)
(14,44,2)
(47,44,2)
(34,44,2)
(21,25,2)
(17,44,2)
(2,0,2)
(48,44,2)
(42,37,2)
(19,0,2)
(50,49,2)
(50,44,2)
(28,12,2)
(25,44,2)
(37,28,2)
(30,44,2)
(27,44,2)
-----------------------------------
(0,tmpData != NULL)
(1,printLine(data)
(2,data)
(3,NULL)
(4,if(5==5)
(5,NULL)
(6,data)
(7,free(data)
(8,if (tmpData != NULL)
(9,tmpData)
(10,-1)
(11,data)
(12,char *)
(13,data)
(14,malloc(100*sizeof(char)
(15,data = tmpData)
(16,char)
(17,tmpData)
(18,exit(-1)
(19,data)
(20,)
(21,realloc(data, (130000)
(22,sizeof(char)
(23,RET)
(24,char)
(25,(130000)
(26,tmpData)
(27,130000)
(28,(char *)
(29,5)
(30,tmpData)
(31,data)
(32,if (data == NULL)
(33,strcpy(data, "New String")
(34,100)
(35,sizeof(char)
(36,)
(37,* data = (char *)
(38,)
(39,char *)
(40,data)
(41,data)
(42,printLine(data)
(43,1)
(44,5==5)
(45,strcpy(data, "A String")
(46,5)
(47,100*sizeof(char)
(48,data)
(49,(char *)
(50,tmpData = (char *)
(51,data == NULL)
(52,)
(53,"New String")
(54,"A String")
(55,data)
(56,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^