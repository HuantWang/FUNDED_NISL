-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
29,33
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
78,80
81,82
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,28,33,37,39,42,44,48,49,55,56,57,58,64,65,66,67,71,75,76,79,80,82
-----computeFrom-----
14,15
14,16
20,21
20,22
31,32
31,33
43,44
43,45
51,52
51,53
60,61
60,62
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,25,0)
(43,42,0)
(38,9,0)
(14,13,0)
(25,17,0)
(2,44,0)
(28,6,0)
(44,6,0)
(3,39,0)
(33,39,0)
(8,45,0)
(9,38,0)
(37,1,0)
(0,13,0)
(40,35,0)
(23,8,0)
(42,32,0)
(35,31,0)
(19,5,0)
(45,5,0)
(18,4,0)
(13,45,0)
(11,17,0)
(36,19,0)
(12,1,0)
(25,4,0)
(16,9,0)
(1,16,0)
(1,12,0)
(41,12,0)
(36,8,0)
(15,6,0)
(9,16,0)
(9,45,0)
(20,27,0)
(4,25,0)
(30,45,0)
(16,1,0)
(4,45,0)
(19,36,0)
(13,35,0)
(17,5,0)
(10,31,0)
(29,44,0)
(22,4,0)
(45,9,0)
(35,13,0)
(31,5,0)
(34,27,0)
(8,36,0)
(24,8,0)
(26,6,0)
(42,43,1)
(16,1,1)
(3,44,1)
(39,33,1)
(45,9,1)
(8,45,1)
(31,10,1)
(22,18,1)
(4,45,1)
(23,17,1)
(4,22,1)
(24,23,1)
(40,13,1)
(11,25,1)
(30,39,1)
(34,20,1)
(25,4,1)
(7,27,1)
(17,11,1)
(9,38,1)
(8,24,1)
(33,3,1)
(13,45,1)
(20,19,1)
(19,36,1)
(21,4,1)
(20,42,1)
(25,21,1)
(14,45,1)
(10,35,1)
(0,14,1)
(35,13,1)
(43,39,1)
(12,41,1)
(36,8,1)
(44,29,1)
(1,12,1)
(27,34,1)
(13,0,1)
(41,37,1)
(9,16,1)
(35,40,1)
(29,2,1)
(37,30,1)
(18,31,1)
(8,45,2)
(17,39,2)
(40,39,2)
(13,45,2)
(0,39,2)
(35,13,2)
(30,39,2)
(41,39,2)
(18,39,2)
(13,39,2)
(9,16,2)
(31,39,2)
(16,1,2)
(25,39,2)
(35,39,2)
(4,39,2)
(45,39,2)
(22,39,2)
(11,39,2)
(14,39,2)
(25,4,2)
(16,39,2)
(19,36,2)
(43,39,2)
(10,39,2)
(1,12,2)
(9,38,2)
(4,45,2)
(45,9,2)
(12,39,2)
(1,39,2)
(8,39,2)
(19,39,2)
(21,39,2)
(36,39,2)
(23,39,2)
(36,8,2)
(9,39,2)
(37,39,2)
(24,39,2)
(42,39,2)
-----------------------------------
(0,0)
(1,100*sizeof(twoIntsStruct)
(2,data)
(3,5)
(4,data[0])
(5,)
(6,)
(7,RET)
(8,data[0])
(9,(twoIntsStruct *)
(10,0)
(11,0)
(12,sizeof(twoIntsStruct)
(13,data[0])
(14,data)
(15,if(5==5)
(16,ALLOCA(100*sizeof(twoIntsStruct)
(17,data[0].intTwo = 0)
(18,data)
(19,printStructLine(&data[0])
(20,5)
(21,intTwo)
(22,0)
(23,data)
(24,0)
(25,data[0].intTwo)
(26,data)
(27,5==5)
(28,if(5!=5)
(29,NULL)
(30,data)
(31,data[0].intOne = 0)
(32,)
(33,5)
(34,5)
(35,data[0].intOne)
(36,&data[0])
(37,100)
(38,twoIntsStruct *)
(39,5!=5)
(40,intOne)
(41,twoIntsStruct)
(42,printLine("Benign, fixed string")
(43,"Benign, fixed string")
(44,data = NULL)
(45,data = (twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^