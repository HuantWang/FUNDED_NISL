-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,8,10,11,15,17,20,25,26,31,34,36,39,41,44,45,49,51,52,56,58,61,63
-----computeFrom-----
13,14
13,15
29,30
29,31
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,8,0)
(0,14,0)
(16,5,0)
(12,8,0)
(8,9,0)
(7,21,0)
(22,18,0)
(5,24,0)
(11,24,0)
(1,11,0)
(17,14,0)
(4,14,0)
(18,3,0)
(9,8,0)
(5,11,0)
(20,9,0)
(18,22,0)
(11,18,0)
(3,18,0)
(2,7,0)
(23,17,0)
(8,22,0)
(19,14,0)
(18,11,0)
(13,17,0)
(18,3,1)
(20,12,1)
(1,15,1)
(16,11,1)
(23,13,1)
(2,15,1)
(22,8,1)
(7,2,1)
(6,10,1)
(5,16,1)
(9,20,1)
(10,5,1)
(10,7,1)
(18,22,1)
(12,1,1)
(17,23,1)
(5,11,1)
(11,18,1)
(8,9,1)
(15,17,1)
(11,18,2)
(18,22,2)
(1,15,2)
(5,11,2)
(8,15,2)
(5,15,2)
(18,3,2)
(18,15,2)
(9,15,2)
(22,15,2)
(8,9,2)
(22,8,2)
(7,15,2)
(16,15,2)
(20,15,2)
(12,15,2)
(2,15,2)
(11,15,2)
-----------------------------------
(0,data)
(1,data)
(2,"Benign, fixed string")
(3,wchar_t *)
(4,if(GLOBAL_CONST_TRUE)
(5,printWLine(data)
(6,RET)
(7,printLine("Benign, fixed string")
(8,100*sizeof(wchar_t)
(9,sizeof(wchar_t)
(10,GLOBAL_CONST_TRUE)
(11,data = (wchar_t *)
(12,100)
(13,data)
(14,)
(15,GLOBAL_CONST_FALSE)
(16,data)
(17,data = NULL)
(18,(wchar_t *)
(19,if(GLOBAL_CONST_FALSE)
(20,wchar_t)
(21,)
(22,ALLOCA(100*sizeof(wchar_t)
(23,NULL)
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^