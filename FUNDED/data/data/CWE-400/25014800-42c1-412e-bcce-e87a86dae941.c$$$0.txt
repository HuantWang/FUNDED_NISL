-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
62,74
62,75
62,76
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
92,93
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
128,129
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
141,142
142,143
143,144
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
152,153
154,155
156,157
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
175,176
175,177
176,177
176,178
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
187,192
188,189
190,191
192,193
194,195
194,196
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
217,218
220,221
221,222
221,223
222,223
224,225
224,226
225,226
227,228
230,231
230,232
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
243,244
243,245
244,245
244,246
245,246
247,248
249,250
250,251
251,252
251,253
252,253
254,255
256,257
256,258
257,258
257,259
258,259
261,262
262,263
262,264
262,265
262,266
263,264
264,265
264,266
265,266
267,268
267,269
269,270
271,272
272,273
272,274
273,274
275,276
275,277
275,278
278,279
279,280
281,282
282,283
282,284
284,285
284,286
284,287
287,288
289,290
289,291
290,291
290,292
291,292
291,293
292,293
295,296
295,297
296,297
299,300
299,301
299,302
299,303
300,301
301,302
301,303
302,303
304,305
304,306
304,307
305,306
307,308
310,311
310,312
311,312
311,313
312,313
314,315
316,317
317,318
318,319
318,320
319,320
322,323
322,324
322,325
322,326
323,324
324,325
324,326
325,326
328,329
328,330
329,330
331,332
331,333
332,333
332,334
333,334
336,337
338,339
339,340
341,342
342,343
342,344
343,344
343,345
344,345
344,346
345,346
347,348
349,350
349,351
349,352
349,353
349,354
350,351
352,353
354,355
355,356
355,357
358,359
358,360
359,360
361,362
363,364
365,366
366,367
366,368
367,368
370,371
370,372
371,372
373,374
374,375
375,376
375,377
376,377
378,379
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,34,38,40,43,47,49,52,55,57,60,66,69,71,73,75,79,81,83,87,90,91,95,100,101,103,109,110,111,113,118,119,122,124,129,131,135,137,140,144,146,148,153,155,157,159,161,165,168,170,172,174,178,180,182,186,189,191,193,196,197,198,203,205,208,209,211,216,218,219,223,226,228,229,233,235,240,242,246,248,253,255,259,260,266,268,270,274,276,277,280,283,285,286,288,293,294,297,298,303,306,308,309,313,315,320,321,326,327,330,334,335,337,340,346,348,351,353,356,357,360,362,364,368,369,372,377,379
-----computeFrom-----
12,13
12,14
18,19
18,20
64,65
64,66
77,78
77,79
97,98
97,99
105,106
105,107
115,116
115,117
126,127
126,128
150,151
150,152
163,164
163,165
176,177
176,178
184,185
184,186
194,195
194,196
200,201
200,202
201,202
201,203
206,207
206,208
213,214
213,215
221,222
221,223
231,232
231,233
244,245
244,246
257,258
257,259
290,291
290,292
291,292
291,293
295,296
295,297
301,302
301,303
311,312
311,313
324,325
324,326
328,329
328,330
343,344
343,345
-----guardedBy-----
233,242
246,255
297,337
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(STATIC_CONST_FIVE==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(77,45,0)
(40,80,0)
(182,203,0)
(120,173,0)
(183,53,0)
(147,207,0)
(131,21,0)
(197,89,0)
(192,41,0)
(25,18,0)
(158,220,0)
(24,26,0)
(99,15,0)
(95,66,0)
(175,180,0)
(168,35,0)
(137,69,0)
(71,146,0)
(198,69,0)
(91,69,0)
(170,203,0)
(89,137,0)
(204,146,0)
(163,130,0)
(13,168,0)
(28,95,0)
(143,42,0)
(207,194,0)
(114,122,0)
(29,200,0)
(93,137,0)
(46,26,0)
(223,93,0)
(206,151,0)
(123,141,0)
(103,123,0)
(60,143,0)
(205,225,0)
(207,213,0)
(196,86,0)
(189,220,0)
(151,95,0)
(94,168,0)
(143,158,0)
(49,164,0)
(27,53,0)
(166,129,0)
(121,123,0)
(226,211,0)
(82,58,0)
(146,69,0)
(63,21,0)
(135,168,0)
(172,13,0)
(54,168,0)
(199,71,0)
(161,168,0)
(202,23,0)
(26,46,0)
(128,188,0)
(4,81,0)
(145,13,0)
(43,45,0)
(136,84,0)
(31,213,0)
(167,103,0)
(195,129,0)
(17,155,0)
(213,207,0)
(90,200,0)
(80,158,0)
(14,115,0)
(9,168,0)
(86,90,0)
(67,69,0)
(2,194,0)
(12,152,0)
(7,151,0)
(93,203,0)
(98,228,0)
(47,103,0)
(111,106,0)
(218,211,0)
(110,221,0)
(88,137,0)
(116,168,0)
(188,78,0)
(139,173,0)
(113,132,0)
(151,7,0)
(159,80,0)
(214,69,0)
(95,69,0)
(188,20,0)
(207,147,0)
(84,200,0)
(80,15,0)
(6,149,0)
(203,93,0)
(46,106,0)
(213,200,0)
(162,66,0)
(36,221,0)
(213,185,0)
(184,125,0)
(144,69,0)
(117,220,0)
(150,114,0)
(132,205,0)
(229,21,0)
(180,114,0)
(103,167,0)
(211,226,0)
(210,20,0)
(213,31,0)
(74,168,0)
(19,26,0)
(58,114,0)
(158,80,0)
(153,45,0)
(191,198,0)
(16,65,0)
(104,103,0)
(188,158,0)
(103,47,0)
(154,58,0)
(130,129,0)
(205,132,0)
(151,123,0)
(228,144,0)
(7,173,0)
(81,171,0)
(173,7,0)
(126,185,0)
(194,207,0)
(78,181,0)
(57,29,0)
(30,114,0)
(48,81,0)
(144,228,0)
(105,221,0)
(188,65,0)
(44,168,0)
(3,188,0)
(176,69,0)
(226,89,0)
(134,158,0)
(68,96,0)
(129,96,0)
(22,198,0)
(73,107,0)
(181,78,0)
(227,180,0)
(10,151,0)
(59,93,0)
(179,13,0)
(1,101,0)
(46,164,0)
(39,43,0)
(108,31,0)
(88,155,0)
(90,86,0)
(106,46,0)
(85,195,0)
(217,29,0)
(105,112,0)
(200,69,0)
(156,168,0)
(215,64,0)
(83,211,0)
(141,123,0)
(53,71,0)
(5,107,0)
(52,96,0)
(208,130,0)
(107,200,0)
(93,129,0)
(224,168,0)
(140,195,0)
(219,96,0)
(133,29,0)
(187,161,0)
(179,200,0)
(37,114,0)
(129,69,0)
(15,114,0)
(200,29,0)
(160,225,0)
(11,158,0)
(97,88,0)
(155,69,0)
(185,213,0)
(56,137,0)
(201,84,0)
(75,90,0)
(103,95,0)
(51,69,0)
(137,93,0)
(71,53,0)
(211,137,0)
(76,179,0)
(70,69,0)
(124,89,0)
(212,34,0)
(119,141,0)
(78,188,0)
(20,188,0)
(193,125,0)
(55,105,0)
(173,123,0)
(195,221,0)
(127,93,0)
(65,188,0)
(125,144,0)
(38,134,0)
(216,220,0)
(164,46,0)
(222,0,0)
(8,88,0)
(173,95,0)
(84,13,0)
(33,171,0)
(186,114,0)
(190,213,0)
(209,205,0)
(123,21,0)
(149,92,0)
(167,45,0)
(105,129,0)
(221,168,0)
(178,168,0)
(50,181,0)
(225,205,0)
(62,134,0)
(89,226,0)
(96,200,0)
(72,90,0)
(138,101,0)
(66,95,0)
(87,200,0)
(174,41,0)
(118,169,0)
(177,61,0)
(109,167,0)
(148,161,0)
(96,129,0)
(171,69,0)
(79,15,0)
(179,100,0)
(32,168,0)
(205,69,0)
(43,39,1)
(86,90,1)
(226,89,1)
(125,193,1)
(13,172,1)
(124,197,1)
(205,132,1)
(205,225,1)
(89,124,1)
(84,13,1)
(159,11,1)
(115,14,1)
(181,50,1)
(188,20,1)
(209,225,1)
(146,204,1)
(96,219,1)
(97,8,1)
(15,99,1)
(201,142,1)
(165,167,1)
(207,147,1)
(62,158,1)
(41,192,1)
(185,213,1)
(5,73,1)
(118,107,1)
(139,120,1)
(185,126,1)
(167,103,1)
(213,31,1)
(188,3,1)
(157,165,1)
(196,90,1)
(26,24,1)
(80,15,1)
(58,82,1)
(201,222,1)
(39,78,1)
(157,7,1)
(72,185,1)
(173,123,1)
(211,83,1)
(145,161,1)
(24,19,1)
(167,45,1)
(76,84,1)
(143,60,1)
(140,85,1)
(57,87,1)
(11,7,1)
(141,119,1)
(71,53,1)
(93,127,1)
(226,211,1)
(171,33,1)
(163,129,1)
(192,174,1)
(95,66,1)
(142,95,1)
(213,207,1)
(202,226,1)
(86,196,1)
(136,201,1)
(52,68,1)
(103,104,1)
(90,200,1)
(188,65,1)
(59,56,1)
(33,81,1)
(110,36,1)
(132,113,1)
(81,4,1)
(170,223,1)
(134,38,1)
(14,78,1)
(211,137,1)
(223,59,1)
(82,154,1)
(217,57,1)
(7,173,1)
(201,202,1)
(77,134,1)
(3,20,1)
(109,43,1)
(56,130,1)
(84,200,1)
(99,79,1)
(79,180,1)
(45,153,1)
(203,182,1)
(6,134,1)
(87,198,1)
(218,137,1)
(31,108,1)
(38,62,1)
(184,146,1)
(222,106,1)
(102,195,1)
(103,123,1)
(8,226,1)
(4,48,1)
(29,133,1)
(19,142,1)
(177,102,1)
(108,207,1)
(65,16,1)
(46,164,1)
(49,26,1)
(107,200,1)
(20,210,1)
(144,228,1)
(12,86,1)
(17,88,1)
(195,129,1)
(120,15,1)
(201,25,1)
(2,190,1)
(60,165,1)
(154,41,1)
(85,84,1)
(179,76,1)
(201,118,1)
(68,166,1)
(204,71,1)
(201,12,1)
(173,95,1)
(55,195,1)
(83,218,1)
(77,149,1)
(88,137,1)
(174,177,1)
(27,183,1)
(187,101,1)
(157,41,1)
(182,170,1)
(89,137,1)
(105,55,1)
(53,27,1)
(109,45,1)
(126,213,1)
(221,110,1)
(137,93,1)
(103,47,1)
(111,46,1)
(188,158,1)
(191,106,1)
(40,159,1)
(22,191,1)
(194,2,1)
(78,188,1)
(148,187,1)
(201,212,1)
(228,98,1)
(199,53,1)
(130,208,1)
(127,203,1)
(143,158,1)
(162,28,1)
(39,115,1)
(105,129,1)
(151,95,1)
(212,130,1)
(172,145,1)
(153,77,1)
(179,13,1)
(103,95,1)
(50,167,1)
(104,109,1)
(198,22,1)
(106,111,1)
(180,175,1)
(138,1,1)
(197,211,1)
(151,123,1)
(175,227,1)
(195,221,1)
(93,129,1)
(195,140,1)
(219,52,1)
(210,65,1)
(7,151,1)
(25,185,1)
(10,206,1)
(93,203,1)
(179,200,1)
(80,40,1)
(161,148,1)
(43,45,1)
(157,143,1)
(133,217,1)
(78,181,1)
(48,205,1)
(173,139,1)
(73,200,1)
(71,199,1)
(88,97,1)
(227,58,1)
(158,80,1)
(151,10,1)
(105,221,1)
(123,141,1)
(119,121,1)
(207,194,1)
(75,72,1)
(102,105,1)
(155,17,1)
(149,6,1)
(98,125,1)
(16,128,1)
(46,26,1)
(166,86,1)
(190,144,1)
(183,171,1)
(85,179,1)
(107,5,1)
(1,123,1)
(84,136,1)
(101,138,1)
(134,158,1)
(225,160,1)
(66,162,1)
(206,173,1)
(193,184,1)
(130,129,1)
(164,49,1)
(129,96,1)
(128,181,1)
(19,221,1)
(90,75,1)
(213,200,1)
(200,29,1)
(208,163,1)
(36,13,1)
(96,200,1)
(106,46,1)
(174,101,1)
(28,155,1)
(113,209,1)
(174,102,1)
(160,107,1)
(226,89,2)
(227,41,2)
(207,107,2)
(72,185,2)
(104,7,2)
(83,130,2)
(217,106,2)
(58,41,2)
(39,167,2)
(24,101,2)
(203,130,2)
(56,130,2)
(2,107,2)
(10,173,2)
(26,142,2)
(208,86,2)
(31,107,2)
(93,203,2)
(84,13,2)
(127,130,2)
(159,7,2)
(65,167,2)
(57,106,2)
(84,200,2)
(143,165,2)
(188,167,2)
(219,86,2)
(87,106,2)
(173,95,2)
(115,78,2)
(207,147,2)
(62,7,2)
(194,107,2)
(113,107,2)
(49,101,2)
(103,123,2)
(77,7,2)
(46,142,2)
(46,26,2)
(167,167,2)
(163,86,2)
(20,167,2)
(7,173,2)
(89,137,2)
(46,101,2)
(111,101,2)
(205,132,2)
(173,123,2)
(185,107,2)
(110,101,2)
(107,106,2)
(187,101,2)
(151,123,2)
(155,226,2)
(19,101,2)
(185,213,2)
(223,130,2)
(225,107,2)
(213,200,2)
(79,41,2)
(90,185,2)
(6,134,2)
(164,142,2)
(3,167,2)
(179,13,2)
(205,225,2)
(202,226,2)
(71,107,2)
(106,142,2)
(7,41,2)
(199,107,2)
(73,106,2)
(172,101,2)
(190,107,2)
(78,188,2)
(109,7,2)
(148,101,2)
(182,130,2)
(134,158,2)
(158,80,2)
(207,194,2)
(167,45,2)
(46,164,2)
(88,226,2)
(222,106,2)
(19,142,2)
(71,53,2)
(45,7,2)
(38,7,2)
(120,41,2)
(48,107,2)
(136,101,2)
(226,211,2)
(228,107,2)
(124,211,2)
(22,106,2)
(86,185,2)
(161,101,2)
(16,167,2)
(82,41,2)
(180,41,2)
(143,158,2)
(125,107,2)
(96,200,2)
(145,101,2)
(188,65,2)
(5,106,2)
(164,101,2)
(162,226,2)
(201,101,2)
(128,167,2)
(27,107,2)
(50,167,2)
(75,185,2)
(221,101,2)
(165,7,2)
(140,101,2)
(171,107,2)
(123,141,2)
(151,95,2)
(177,102,2)
(134,7,2)
(106,46,2)
(126,107,2)
(130,129,2)
(80,7,2)
(40,7,2)
(196,185,2)
(195,129,2)
(4,107,2)
(55,195,2)
(149,134,2)
(93,129,2)
(84,101,2)
(13,101,2)
(29,106,2)
(144,107,2)
(11,7,2)
(99,41,2)
(211,137,2)
(173,41,2)
(179,200,2)
(80,15,2)
(76,84,2)
(205,107,2)
(25,185,2)
(109,167,2)
(86,90,2)
(151,173,2)
(167,103,2)
(158,7,2)
(133,106,2)
(24,142,2)
(33,107,2)
(153,7,2)
(105,221,2)
(184,107,2)
(78,181,2)
(144,228,2)
(103,47,2)
(200,29,2)
(85,101,2)
(98,107,2)
(90,200,2)
(129,96,2)
(213,107,2)
(106,101,2)
(193,107,2)
(59,130,2)
(36,101,2)
(12,86,2)
(103,95,2)
(8,226,2)
(160,107,2)
(81,107,2)
(96,86,2)
(170,130,2)
(93,130,2)
(139,41,2)
(111,142,2)
(107,200,2)
(146,107,2)
(154,41,2)
(195,101,2)
(53,107,2)
(179,84,2)
(204,107,2)
(7,151,2)
(218,130,2)
(103,7,2)
(213,31,2)
(60,165,2)
(129,86,2)
(167,7,2)
(14,78,2)
(209,107,2)
(68,86,2)
(43,45,2)
(212,130,2)
(43,167,2)
(137,93,2)
(166,86,2)
(52,86,2)
(103,167,2)
(105,129,2)
(200,106,2)
(198,106,2)
(89,211,2)
(188,20,2)
(78,167,2)
(66,226,2)
(210,167,2)
(181,167,2)
(132,107,2)
(95,66,2)
(142,226,2)
(88,137,2)
(211,130,2)
(197,211,2)
(28,226,2)
(26,101,2)
(102,101,2)
(118,107,2)
(15,41,2)
(191,106,2)
(105,195,2)
(206,173,2)
(49,142,2)
(213,207,2)
(226,130,2)
(104,167,2)
(17,226,2)
(130,86,2)
(175,41,2)
(97,226,2)
(183,107,2)
(95,226,2)
(195,221,2)
(108,107,2)
(137,130,2)
(188,158,2)
-----------------------------------
(0,)
(1,STATIC_CONST_FIVE)
(2,service)
(3,pFile)
(4,sin_family)
(5,INVALID_SOCKET)
(6,1)
(7,count > 0 && count <= 20)
(8,inputBuffer)
(9,if (wsaDataInit)
(10,20)
(11,pFile)
(12,break;)
(13,listenSocket = INVALID_SOCKET)
(14,1)
(15,*filename = "output_good.txt")
(16,char)
(17,\'\\0\')
(18,)
(19,2)
(20,strlen(SENTENCE)
(21,)
(22,1)
(23,)
(24,2)
(25,break;)
(26,MAKEWORD(2,2)
(27,sin_addr)
(28,count)
(29,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(30,pFile)
(31,sizeof(service)
(32,recvResult)
(33,AF_INET)
(34,)
(35,)
(36,acceptSocket)
(37,i)
(38,NULL)
(39,i)
(40,"w+")
(41,STATIC_CONST_FIVE==5)
(42,)
(43,i++)
(44,do)
(45,i = 0)
(46,WSAStartup(MAKEWORD(2,2)
(47,size_t)
(48,service)
(49,wsaData)
(50,SENTENCE)
(51,if (bind(listenSocket, (struct sockaddr*)
(52,NULL)
(53,service.sin_addr)
(54,inputBuffer)
(55,acceptSocket)
(56,recvResult)
(57,AF_INET)
(58,i = 0)
(59,acceptSocket)
(60,pFile)
(61,)
(62,pFile)
(63,count)
(64,)
(65,sizeof(char)
(66,atoi(inputBuffer)
(67,if (acceptSocket == SOCKET_ERROR)
(68,listenSocket)
(69,)
(70,if (recvResult == SOCKET_ERROR || recvResult == 0)
(71,service.sin_addr.s_addr)
(72,listenSocket)
(73,listenSocket)
(74,wsaData)
(75,LISTEN_BACKLOG)
(76,listenSocket)
(77,i)
(78,strlen(SENTENCE)
(79,filename)
(80,fopen(filename, "w+")
(81,service.sin_family)
(82,0)
(83,SOCKET_ERROR)
(84,listenSocket != INVALID_SOCKET)
(85,acceptSocket)
(86,listen(listenSocket, LISTEN_BACKLOG)
(87,listenSocket)
(88,inputBuffer[recvResult])
(89,recvResult == 0)
(90,listen(listenSocket, LISTEN_BACKLOG)
(91,if (WSAStartup(MAKEWORD(2,2)
(92,)
(93,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(94,acceptSocket)
(95,count = atoi(inputBuffer)
(96,accept(listenSocket, NULL, NULL)
(97,recvResult)
(98,TCP_PORT)
(99,"output_good.txt")
(100,)
(101,STATIC_CONST_FIVE==5)
(102,wsaDataInit)
(103,(size_t)
(104,count)
(105,CLOSE_SOCKET(acceptSocket)
(106,WSAStartup(MAKEWORD(2,2)
(107,listenSocket == INVALID_SOCKET)
(108,service)
(109,i)
(110,INVALID_SOCKET)
(111,NO_ERROR)
(112,)
(113,service)
(114,)
(115,exit(1)
(116,if (acceptSocket != INVALID_SOCKET)
(117,if (pFile)
(118,break;)
(119,1)
(120,count)
(121,count)
(122,)
(123,count = -1)
(124,0)
(125,service.sin_port)
(126,SOCKET_ERROR)
(127,0)
(128,SENTENCE)
(129,acceptSocket = accept(listenSocket, NULL, NULL)
(130,acceptSocket == SOCKET_ERROR)
(131,if(STATIC_CONST_FIVE==5)
(132,sizeof(service)
(133,IPPROTO_TCP)
(134,pFile == NULL)
(135,wsaDataInit)
(136,INVALID_SOCKET)
(137,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(138,5)
(139,0)
(140,INVALID_SOCKET)
(141,-1)
(142,0)
(143,fclose(pFile)
(144,service.sin_port = htons(TCP_PORT)
(145,listenSocket)
(146,service.sin_addr.s_addr = INADDR_ANY)
(147,struct sockaddr*)
(148,0)
(149,exit(1)
(150,filename)
(151,count <= 20)
(152,)
(153,0)
(154,i)
(155,inputBuffer[recvResult] = \'\\0\')
(156,listenSocket)
(157,RET)
(158,pFile = fopen(filename, "w+")
(159,filename)
(160,service)
(161,wsaDataInit = 0)
(162,inputBuffer)
(163,acceptSocket)
(164,&wsaData)
(165,pFile)
(166,acceptSocket)
(167,i < (size_t)
(168,)
(169,)
(170,CHAR_ARRAY_SIZE)
(171,service.sin_family = AF_INET)
(172,INVALID_SOCKET)
(173,count > 0)
(174,STATIC_CONST_FIVE)
(175,NULL)
(176,if (listenSocket == INVALID_SOCKET)
(177,WSACleanup()
(178,service)
(179,CLOSE_SOCKET(listenSocket)
(180,*pFile = NULL)
(181,strlen(SENTENCE)
(182,1)
(183,service)
(184,service)
(185,bind(listenSocket, (struct sockaddr*)
(186,if (count > 0 && count <= 20)
(187,wsaDataInit)
(188,fwrite(SENTENCE, sizeof(char)
(189,for (i = 0; i < (size_t)
(190,listenSocket)
(191,wsaDataInit)
(192,5)
(193,sin_port)
(194,&service)
(195,acceptSocket != INVALID_SOCKET)
(196,SOCKET_ERROR)
(197,recvResult)
(198,wsaDataInit = 1)
(199,s_addr)
(200,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(201,listenSocket)
(202,break;)
(203,CHAR_ARRAY_SIZE - 1)
(204,INADDR_ANY)
(205,memset(&service, 0, sizeof(service)
(206,count)
(207,(struct sockaddr*)
(208,SOCKET_ERROR)
(209,0)
(210,SENTENCE)
(211,recvResult == SOCKET_ERROR)
(212,break;)
(213,bind(listenSocket, (struct sockaddr*)
(214,if (listen(listenSocket, LISTEN_BACKLOG)
(215,if (strlen(SENTENCE)
(216,if (pFile == NULL)
(217,SOCK_STREAM)
(218,recvResult)
(219,NULL)
(220,)
(221,acceptSocket = INVALID_SOCKET)
(222,break;)
(223,inputBuffer)
(224,if (listenSocket != INVALID_SOCKET)
(225,&service)
(226,recvResult == SOCKET_ERROR || recvResult == 0)
(227,pFile)
(228,htons(TCP_PORT)
(229,if(STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^