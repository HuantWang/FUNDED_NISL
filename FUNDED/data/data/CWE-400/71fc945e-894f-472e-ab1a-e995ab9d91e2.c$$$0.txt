-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_12_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
100,101
100,102
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
125,126
126,127
126,128
127,128
129,130
130,131
130,132
131,132
134,135
134,136
134,137
135,136
136,137
138,139
140,141
141,142
142,143
142,144
143,144
145,146
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,90,94,96,99,101,105,106,112,113,114,115,121,122,123,124,128,132,133,137,139,144,146
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
88,89
88,90
100,101
100,102
108,109
108,110
117,118
117,119
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_12_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_12_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_12_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(1,4,0)
(61,28,0)
(24,77,0)
(5,11,0)
(71,49,0)
(26,5,0)
(74,33,0)
(32,75,0)
(66,60,0)
(37,29,0)
(33,51,0)
(25,57,0)
(77,57,0)
(54,18,0)
(63,55,0)
(49,9,0)
(56,79,0)
(43,29,0)
(31,75,0)
(48,46,0)
(70,52,0)
(0,60,0)
(10,21,0)
(76,36,0)
(15,13,0)
(49,72,0)
(44,69,0)
(30,17,0)
(75,9,0)
(46,48,0)
(56,11,0)
(4,45,0)
(11,5,0)
(36,76,0)
(69,64,0)
(77,34,0)
(69,44,0)
(75,43,0)
(8,18,0)
(45,9,0)
(47,36,0)
(78,34,0)
(40,34,0)
(79,34,0)
(79,7,0)
(62,55,0)
(40,59,0)
(52,46,0)
(64,69,0)
(46,52,0)
(73,44,0)
(4,66,0)
(35,43,0)
(53,14,0)
(9,60,0)
(6,72,0)
(68,66,0)
(13,15,0)
(48,60,0)
(72,36,0)
(9,49,0)
(28,21,0)
(36,72,0)
(52,9,0)
(79,56,0)
(27,11,0)
(72,49,0)
(39,45,0)
(21,33,0)
(67,40,0)
(41,77,0)
(2,9,0)
(57,17,0)
(12,44,0)
(72,55,0)
(11,56,0)
(43,75,0)
(3,13,0)
(17,51,0)
(49,71,0)
(22,45,0)
(45,4,0)
(20,52,0)
(44,34,0)
(28,34,0)
(21,28,0)
(7,79,0)
(19,18,0)
(34,51,0)
(15,58,0)
(40,9,0)
(34,79,0)
(14,9,0)
(23,28,0)
(55,18,0)
(50,14,0)
(38,76,0)
(29,60,0)
(57,77,0)
(64,51,0)
(6,2,1)
(17,30,1)
(55,62,1)
(77,34,1)
(75,9,1)
(47,6,1)
(31,14,1)
(40,67,1)
(4,45,1)
(42,55,1)
(14,50,1)
(77,24,1)
(79,7,1)
(72,36,1)
(2,42,1)
(48,46,1)
(41,33,1)
(67,16,1)
(50,53,1)
(27,78,1)
(53,9,1)
(56,11,1)
(44,34,1)
(26,27,1)
(24,41,1)
(12,73,1)
(52,70,1)
(28,34,1)
(72,55,1)
(21,28,1)
(30,57,1)
(38,47,1)
(65,16,1)
(74,21,1)
(34,79,1)
(62,63,1)
(79,56,1)
(57,77,1)
(49,72,1)
(29,37,1)
(10,28,1)
(45,22,1)
(33,74,1)
(25,77,1)
(5,26,1)
(13,3,1)
(16,64,1)
(16,48,1)
(20,66,1)
(45,9,1)
(46,52,1)
(43,35,1)
(40,34,1)
(70,20,1)
(61,23,1)
(31,15,1)
(4,1,1)
(9,49,1)
(68,4,1)
(39,29,1)
(40,9,1)
(3,14,1)
(11,5,1)
(22,39,1)
(57,25,1)
(69,44,1)
(52,9,1)
(49,71,1)
(66,68,1)
(37,43,1)
(36,76,1)
(14,9,1)
(78,42,1)
(1,45,1)
(43,75,1)
(23,34,1)
(35,75,1)
(28,61,1)
(75,32,1)
(32,31,1)
(64,69,1)
(73,17,1)
(21,10,1)
(65,40,1)
(76,38,1)
(44,12,1)
(15,13,1)
(36,76,2)
(77,34,2)
(52,42,2)
(40,16,2)
(27,42,2)
(30,42,2)
(72,42,2)
(22,42,2)
(57,77,2)
(34,42,2)
(69,44,2)
(45,9,2)
(77,42,2)
(53,42,2)
(44,34,2)
(79,56,2)
(64,69,2)
(43,75,2)
(6,42,2)
(49,71,2)
(35,42,2)
(73,42,2)
(31,42,2)
(41,42,2)
(21,28,2)
(61,42,2)
(28,42,2)
(49,72,2)
(48,42,2)
(11,5,2)
(14,42,2)
(56,42,2)
(40,9,2)
(14,9,2)
(66,42,2)
(29,42,2)
(20,42,2)
(40,34,2)
(75,9,2)
(9,49,2)
(21,42,2)
(67,16,2)
(72,36,2)
(4,42,2)
(37,42,2)
(13,14,2)
(12,42,2)
(43,42,2)
(76,42,2)
(23,42,2)
(49,42,2)
(26,42,2)
(33,42,2)
(69,42,2)
(28,34,2)
(79,42,2)
(75,42,2)
(68,42,2)
(25,42,2)
(56,11,2)
(78,42,2)
(46,52,2)
(1,42,2)
(15,14,2)
(48,46,2)
(74,42,2)
(9,42,2)
(11,42,2)
(64,42,2)
(17,42,2)
(45,42,2)
(36,42,2)
(44,42,2)
(52,9,2)
(4,45,2)
(32,42,2)
(5,42,2)
(34,79,2)
(57,42,2)
(15,13,2)
(24,42,2)
(79,7,2)
(46,42,2)
(72,55,2)
(50,42,2)
(38,42,2)
(70,42,2)
(3,14,2)
(2,42,2)
(39,42,2)
(10,42,2)
(47,42,2)
-----------------------------------
(0,if (data == NULL)
(1,intTwo)
(2,data)
(3,1)
(4,data[0].intTwo)
(5,sizeof(twoIntsStruct)
(6,data)
(7,twoIntsStruct *)
(8,if(globalReturnsTrueOrFalse()
(9,data = (twoIntsStruct *)
(10,intOne)
(11,100*sizeof(twoIntsStruct)
(12,0)
(13,-1)
(14,data == NULL)
(15,exit(-1)
(16,globalReturnsTrueOrFalse()
(17,data[0].intTwo = 0)
(18,)
(19,data)
(20,data)
(21,data[0].intOne)
(22,0)
(23,data)
(24,0)
(25,intTwo)
(26,twoIntsStruct)
(27,100)
(28,data[0])
(29,data[0].intOne = 0)
(30,0)
(31,data)
(32,0)
(33,data[0].intOne = 0)
(34,data = (twoIntsStruct *)
(35,intOne)
(36,100*sizeof(twoIntsStruct)
(37,0)
(38,twoIntsStruct)
(39,data)
(40,free(data)
(41,data)
(42,globalReturnsTrueOrFalse()
(43,data[0].intOne)
(44,data[0])
(45,data[0])
(46,&data[0])
(47,100)
(48,printStructLine(&data[0])
(49,(twoIntsStruct *)
(50,NULL)
(51,)
(52,data[0])
(53,data)
(54,if(globalReturnsTrueOrFalse()
(55,data = NULL)
(56,ALLOCA(100*sizeof(twoIntsStruct)
(57,data[0].intTwo)
(58,)
(59,)
(60,)
(61,0)
(62,NULL)
(63,data)
(64,printStructLine(&data[0])
(65,RET)
(66,data[0].intTwo = 0)
(67,data)
(68,0)
(69,&data[0])
(70,0)
(71,twoIntsStruct *)
(72,realloc(data, 100*sizeof(twoIntsStruct)
(73,data)
(74,0)
(75,data[0])
(76,sizeof(twoIntsStruct)
(77,data[0])
(78,data)
(79,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^