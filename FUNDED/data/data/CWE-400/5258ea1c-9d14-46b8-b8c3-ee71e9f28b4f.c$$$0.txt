-----label-----
0
-----code-----
static void goodB2G1()
{
    int64_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
70,73
72,73
73,74
74,75
74,76
75,76
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,60,61,65,68,69,71,76,77,82,84
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(34,17,0)
(23,22,0)
(26,7,0)
(17,36,0)
(9,22,0)
(7,24,0)
(27,12,0)
(11,37,0)
(36,29,0)
(34,19,0)
(35,32,0)
(3,17,0)
(14,34,0)
(30,24,0)
(30,36,0)
(15,22,0)
(29,36,0)
(19,13,0)
(36,17,0)
(0,5,0)
(35,17,0)
(24,30,0)
(19,34,0)
(32,22,0)
(36,30,0)
(5,11,0)
(25,35,0)
(31,27,0)
(24,7,0)
(33,13,0)
(4,34,0)
(10,13,0)
(6,32,0)
(35,38,0)
(8,24,0)
(11,5,0)
(1,20,0)
(20,17,0)
(16,32,0)
(18,20,0)
(17,13,0)
(24,7,1)
(0,20,1)
(5,0,1)
(8,3,1)
(1,18,1)
(35,17,1)
(35,32,1)
(4,33,1)
(19,34,1)
(20,17,1)
(32,6,1)
(25,2,1)
(34,14,1)
(20,1,1)
(14,4,1)
(35,25,1)
(36,30,1)
(31,2,1)
(26,8,1)
(18,17,1)
(34,17,1)
(2,19,1)
(17,36,1)
(36,29,1)
(6,16,1)
(7,26,1)
(27,31,1)
(11,5,1)
(2,21,1)
(33,11,1)
(30,24,1)
(28,27,1)
(3,21,1)
(28,35,1)
(33,20,1)
(21,32,1)
(24,21,2)
(35,32,2)
(36,21,2)
(14,21,2)
(1,21,2)
(8,21,2)
(4,21,2)
(19,21,2)
(35,2,2)
(5,20,2)
(30,21,2)
(26,21,2)
(36,29,2)
(27,2,2)
(17,36,2)
(3,21,2)
(19,34,2)
(34,17,2)
(34,21,2)
(11,20,2)
(0,20,2)
(11,5,2)
(31,2,2)
(25,2,2)
(20,21,2)
(18,21,2)
(20,17,2)
(33,21,2)
(7,21,2)
(36,30,2)
(17,21,2)
(35,17,2)
(24,7,2)
(30,24,2)
-----------------------------------
(0,1)
(1,NULL)
(2,0)
(3,data)
(4,data)
(5,-1)
(6,NULL)
(7,sizeof(int64_t)
(8,100)
(9,if(1)
(10,if (data == NULL)
(11,exit(-1)
(12,)
(13,)
(14,0)
(15,data)
(16,data)
(17,data = (int64_t *)
(18,data)
(19,printLongLongLine(data[0])
(20,data == NULL)
(21,1)
(22,)
(23,if(0)
(24,100*sizeof(int64_t)
(25,data)
(26,int64_t)
(27,printLine("Benign, fixed string")
(28,RET)
(29,int64_t *)
(30,malloc(100*sizeof(int64_t)
(31,"Benign, fixed string")
(32,data = NULL)
(33,L)
(34,data[0])
(35,free(data)
(36,(int64_t *)
(37,)
(38,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^