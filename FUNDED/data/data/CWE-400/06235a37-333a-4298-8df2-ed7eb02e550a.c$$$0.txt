-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_18_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    goto source;
source:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    goto sink;
sink:
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
50,52
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
78,79
81,82
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
119,121
119,122
119,123
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
131,132
133,134
134,135
135,136
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
152,153
152,154
153,154
157,158
157,159
158,159
158,160
159,160
159,161
160,161
162,163
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
178,179
179,180
179,181
180,181
182,183
182,184
183,184
185,186
188,189
188,190
189,190
189,191
190,191
192,193
194,195
195,196
196,197
196,198
197,198
199,200
201,202
203,204
203,205
205,206
205,207
205,208
205,209
205,210
205,211
205,212
206,207
207,208
207,209
208,209
210,211
210,212
212,213
214,215
215,216
215,217
216,217
218,219
218,220
218,221
221,222
222,223
224,225
225,226
225,227
227,228
227,229
227,230
230,231
232,233
233,234
233,235
234,235
236,237
236,238
236,239
237,238
239,240
242,243
242,244
243,244
243,245
244,245
246,247
248,249
249,250
250,251
250,252
251,252
254,255
254,256
254,257
254,258
255,256
256,257
256,258
257,258
260,261
260,262
261,262
263,264
263,265
264,265
264,266
265,266
268,269
270,271
271,272
273,274
274,275
274,276
275,276
275,277
276,277
276,278
277,278
279,280
281,282
281,283
281,284
281,285
281,286
282,283
284,285
286,287
287,288
287,289
290,291
290,292
291,292
293,294
295,296
297,298
298,299
299,300
299,301
300,301
303,304
303,305
304,305
306,307
307,308
308,309
308,310
309,310
311,312
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,30,32,36,38,41,44,46,49,55,58,60,62,64,68,70,72,76,79,80,84,89,90,92,98,99,100,103,105,110,111,114,116,121,123,127,129,132,136,138,140,144,147,149,151,154,155,156,161,163,166,167,169,174,176,177,181,184,186,187,191,193,198,200,202,204,209,211,213,217,219,220,223,226,228,229,231,235,238,240,241,245,247,252,253,258,259,262,266,267,269,272,278,280,283,285,288,289,292,294,296,301,302,305,310,312
-----computeFrom-----
12,13
12,14
53,54
53,55
66,67
66,68
86,87
86,88
94,95
94,96
107,108
107,109
118,119
118,120
142,143
142,144
152,153
152,154
158,159
158,160
159,160
159,161
164,165
164,166
171,172
171,173
179,180
179,181
189,190
189,191
233,234
233,235
243,244
243,245
256,257
256,258
260,261
260,262
275,276
275,277
-----guardedBy-----
191,200
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_18_bad(){    int count;    /* Initialize count */    count = -1;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    goto sink;sink:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_18_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_18_bad
{    int count;    /* Initialize count */    count = -1;    goto source;source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    goto sink;sink:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
goto source;
source
source:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
source
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
goto sink;
sink
sink:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
sink
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(3,1,0)
(41,143,0)
(48,94,0)
(184,13,0)
(38,74,0)
(113,183,0)
(73,64,0)
(49,47,0)
(32,65,0)
(151,85,0)
(5,145,0)
(179,18,0)
(100,94,0)
(40,158,0)
(150,179,0)
(6,47,0)
(79,152,0)
(13,173,0)
(29,70,0)
(125,147,0)
(17,80,0)
(30,142,0)
(65,61,0)
(96,75,0)
(122,80,0)
(172,183,0)
(164,183,0)
(83,33,0)
(149,183,0)
(99,64,0)
(27,68,0)
(174,164,0)
(146,77,0)
(134,48,0)
(170,42,0)
(133,72,0)
(165,70,0)
(112,0,0)
(128,145,0)
(45,94,0)
(176,104,0)
(18,67,0)
(79,102,0)
(10,15,0)
(120,124,0)
(53,35,0)
(49,25,0)
(92,104,0)
(0,158,0)
(121,94,0)
(19,177,0)
(132,158,0)
(160,164,0)
(52,91,0)
(145,25,0)
(58,101,0)
(71,164,0)
(25,94,0)
(57,90,0)
(135,45,0)
(130,142,0)
(61,65,0)
(67,0,0)
(145,5,0)
(106,164,0)
(7,25,0)
(107,62,0)
(56,128,0)
(31,101,0)
(39,121,0)
(15,127,0)
(118,87,0)
(103,82,0)
(168,158,0)
(85,158,0)
(78,7,0)
(28,164,0)
(103,64,0)
(109,45,0)
(155,34,0)
(147,124,0)
(171,7,0)
(21,0,0)
(178,104,0)
(143,164,0)
(55,94,0)
(84,67,0)
(8,30,0)
(89,109,0)
(142,145,0)
(47,49,0)
(175,152,0)
(117,145,0)
(163,23,0)
(45,49,0)
(13,18,0)
(79,94,0)
(36,182,0)
(144,5,0)
(142,30,0)
(95,94,0)
(72,29,0)
(68,124,0)
(1,104,0)
(109,91,0)
(114,164,0)
(179,167,0)
(52,45,0)
(64,99,0)
(51,19,0)
(97,48,0)
(29,75,0)
(81,99,0)
(158,183,0)
(82,103,0)
(111,79,0)
(46,19,0)
(104,164,0)
(87,158,0)
(119,184,0)
(131,124,0)
(148,135,0)
(75,29,0)
(70,29,0)
(180,18,0)
(13,61,0)
(92,26,0)
(50,134,0)
(154,92,0)
(103,100,0)
(170,94,0)
(80,121,0)
(138,77,0)
(66,85,0)
(115,90,0)
(88,13,0)
(169,87,0)
(54,49,0)
(103,68,0)
(101,18,0)
(110,158,0)
(136,102,0)
(91,52,0)
(14,100,0)
(25,7,0)
(142,130,0)
(20,183,0)
(152,79,0)
(9,177,0)
(13,184,0)
(43,94,0)
(18,158,0)
(177,19,0)
(185,94,0)
(90,25,0)
(166,47,0)
(92,25,0)
(48,134,0)
(76,45,0)
(42,170,0)
(102,79,0)
(1,25,0)
(61,13,0)
(162,97,0)
(22,158,0)
(63,173,0)
(116,13,0)
(161,135,0)
(145,128,0)
(91,109,0)
(173,13,0)
(98,164,0)
(137,4,0)
(44,109,0)
(126,103,0)
(105,159,0)
(33,100,0)
(141,49,0)
(108,97,0)
(69,52,0)
(93,67,0)
(129,7,0)
(67,18,0)
(145,142,0)
(68,103,0)
(49,45,0)
(86,143,0)
(37,158,0)
(24,163,0)
(2,1,0)
(77,94,0)
(11,25,0)
(64,183,0)
(156,164,0)
(140,52,0)
(139,49,0)
(4,94,0)
(29,72,0)
(157,183,0)
(60,164,0)
(135,4,0)
(153,42,0)
(100,33,0)
(177,170,0)
(59,72,0)
(27,147,1)
(113,64,1)
(118,149,1)
(52,45,1)
(49,25,1)
(92,154,1)
(66,87,1)
(3,2,1)
(100,33,1)
(129,171,1)
(41,113,1)
(133,16,1)
(142,130,1)
(5,145,1)
(85,151,1)
(8,117,1)
(150,181,1)
(125,15,1)
(1,104,1)
(19,51,1)
(163,24,1)
(46,121,1)
(101,31,1)
(92,25,1)
(42,153,1)
(2,36,1)
(64,99,1)
(13,18,1)
(17,122,1)
(145,25,1)
(147,125,1)
(63,184,1)
(109,45,1)
(175,111,1)
(29,75,1)
(86,41,1)
(11,77,1)
(103,100,1)
(70,165,1)
(169,118,1)
(181,68,1)
(103,64,1)
(31,58,1)
(32,68,1)
(39,80,1)
(101,18,1)
(80,17,1)
(68,103,1)
(162,108,1)
(117,48,1)
(59,133,1)
(2,107,1)
(135,45,1)
(151,66,1)
(149,155,1)
(144,145,1)
(54,139,1)
(1,3,1)
(79,102,1)
(77,146,1)
(30,8,1)
(176,143,1)
(179,18,1)
(97,162,1)
(13,184,1)
(76,5,1)
(123,179,1)
(44,45,1)
(70,29,1)
(112,21,1)
(84,93,1)
(78,11,1)
(45,49,1)
(36,91,1)
(134,50,1)
(107,90,1)
(65,32,1)
(153,177,1)
(126,27,1)
(145,128,1)
(103,126,1)
(4,137,1)
(16,100,1)
(104,178,1)
(177,19,1)
(69,140,1)
(0,112,1)
(146,138,1)
(170,42,1)
(12,92,1)
(38,5,1)
(143,86,1)
(124,131,1)
(2,38,1)
(115,57,1)
(152,175,1)
(7,129,1)
(61,65,1)
(51,46,1)
(5,144,1)
(25,7,1)
(111,102,1)
(179,150,1)
(133,104,1)
(173,63,1)
(88,173,1)
(140,109,1)
(75,96,1)
(161,91,1)
(52,69,1)
(92,104,1)
(89,44,1)
(108,170,1)
(155,12,1)
(56,142,1)
(49,47,1)
(121,39,1)
(13,173,1)
(12,1,1)
(27,124,1)
(79,152,1)
(96,72,1)
(154,1,1)
(49,141,1)
(91,109,1)
(142,30,1)
(93,180,1)
(116,65,1)
(136,90,1)
(90,115,1)
(50,97,1)
(48,134,1)
(105,70,1)
(14,4,1)
(171,78,1)
(72,59,1)
(99,81,1)
(90,25,1)
(1,25,1)
(125,61,1)
(24,101,1)
(109,89,1)
(135,148,1)
(120,163,1)
(15,10,1)
(61,13,1)
(119,116,1)
(177,9,1)
(68,124,1)
(141,47,1)
(131,120,1)
(128,56,1)
(47,166,1)
(165,29,1)
(13,88,1)
(102,136,1)
(67,84,1)
(148,161,1)
(145,142,1)
(6,54,1)
(147,124,1)
(57,25,1)
(10,61,1)
(149,12,1)
(180,0,1)
(166,6,1)
(2,16,1)
(2,105,1)
(29,72,1)
(122,79,1)
(83,14,1)
(123,181,1)
(87,169,1)
(178,176,1)
(67,0,1)
(21,85,1)
(138,70,1)
(184,119,1)
(33,83,1)
(58,18,1)
(120,101,1)
(18,67,1)
(91,52,1)
(139,76,1)
(81,73,1)
(137,135,1)
(9,19,1)
(103,82,1)
(89,5,2)
(11,70,2)
(7,70,2)
(153,90,2)
(147,124,2)
(145,25,2)
(25,70,2)
(67,0,2)
(27,68,2)
(92,104,2)
(141,5,2)
(65,68,2)
(13,184,2)
(155,12,2)
(179,18,2)
(32,68,2)
(30,90,2)
(162,90,2)
(57,70,2)
(109,45,2)
(170,90,2)
(24,101,2)
(61,65,2)
(166,5,2)
(173,68,2)
(48,134,2)
(144,90,2)
(36,91,2)
(133,16,2)
(83,91,2)
(92,25,2)
(29,72,2)
(79,152,2)
(184,68,2)
(148,91,2)
(101,18,2)
(134,90,2)
(91,109,2)
(91,5,2)
(29,16,2)
(103,68,2)
(42,90,2)
(96,16,2)
(145,128,2)
(116,68,2)
(109,5,2)
(52,45,2)
(88,68,2)
(115,70,2)
(72,16,2)
(111,90,2)
(147,68,2)
(105,70,2)
(136,90,2)
(152,90,2)
(177,90,2)
(75,16,2)
(70,16,2)
(4,91,2)
(38,5,2)
(13,68,2)
(64,99,2)
(177,19,2)
(142,90,2)
(68,103,2)
(8,90,2)
(129,70,2)
(97,90,2)
(170,42,2)
(122,90,2)
(46,90,2)
(107,90,2)
(161,91,2)
(142,30,2)
(13,18,2)
(145,142,2)
(39,90,2)
(68,124,2)
(175,90,2)
(68,68,2)
(1,25,2)
(61,68,2)
(10,61,2)
(19,90,2)
(90,25,2)
(154,1,2)
(126,68,2)
(125,68,2)
(100,91,2)
(56,90,2)
(17,90,2)
(171,70,2)
(135,91,2)
(121,90,2)
(138,70,2)
(48,90,2)
(102,90,2)
(90,70,2)
(49,25,2)
(47,5,2)
(25,7,2)
(79,90,2)
(139,5,2)
(5,145,2)
(5,90,2)
(13,173,2)
(103,82,2)
(137,91,2)
(77,70,2)
(100,33,2)
(61,13,2)
(16,91,2)
(119,68,2)
(49,5,2)
(49,47,2)
(52,109,2)
(54,5,2)
(163,101,2)
(50,90,2)
(142,130,2)
(179,181,2)
(76,5,2)
(103,64,2)
(45,5,2)
(45,49,2)
(145,90,2)
(117,90,2)
(146,70,2)
(1,104,2)
(29,75,2)
(18,67,2)
(92,1,2)
(80,90,2)
(51,90,2)
(79,102,2)
(140,109,2)
(69,109,2)
(165,16,2)
(91,52,2)
(15,61,2)
(44,5,2)
(14,91,2)
(128,90,2)
(70,29,2)
(63,68,2)
(33,91,2)
(103,100,2)
(108,90,2)
(6,5,2)
(9,90,2)
(78,70,2)
(59,16,2)
(135,45,2)
(150,181,2)
-----------------------------------
(0,*filename = "output_bad.txt")
(1,connectSocket != INVALID_SOCKET)
(2,connectSocket)
(3,INVALID_SOCKET)
(4,inputBuffer[recvResult] = \'\\0\')
(5,connect(connectSocket, (struct sockaddr*)
(6,CHAR_ARRAY_SIZE)
(7,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(8,service)
(9,s_addr)
(10,1)
(11,connectSocket)
(12,wsaDataInit)
(13,fwrite(SENTENCE, sizeof(char)
(14,count)
(15,exit(1)
(16,0)
(17,sin_family)
(18,pFile = fopen(filename, "w+")
(19,service.sin_addr)
(20,count)
(21,filename)
(22,if (pFile)
(23,)
(24,1)
(25,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(26,)
(27,i)
(28,inputBuffer)
(29,WSAStartup(MAKEWORD(2,2)
(30,&service)
(31,NULL)
(32,SENTENCE)
(33,atoi(inputBuffer)
(34,)
(35,)
(36,break;)
(37,if (pFile == NULL)
(38,break;)
(39,AF_INET)
(40,pFile)
(41,wsaDataInit)
(42,inet_addr(IP_ADDRESS)
(43,if (connect(connectSocket, (struct sockaddr*)
(44,recvResult)
(45,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(46,service)
(47,CHAR_ARRAY_SIZE - 1)
(48,service.sin_port = htons(TCP_PORT)
(49,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(50,TCP_PORT)
(51,sin_addr)
(52,recvResult == 0)
(53,if (strlen(SENTENCE)
(54,inputBuffer)
(55,if (recvResult == SOCKET_ERROR || recvResult == 0)
(56,service)
(57,connectSocket)
(58,pFile)
(59,2)
(60,service)
(61,strlen(SENTENCE)
(62,)
(63,SENTENCE)
(64,count = -1)
(65,strlen(SENTENCE)
(66,pFile)
(67,fopen(filename, "w+")
(68,i < (size_t)
(69,0)
(70,WSAStartup(MAKEWORD(2,2)
(71,if (connectSocket != INVALID_SOCKET)
(72,MAKEWORD(2,2)
(73,count)
(74,)
(75,&wsaData)
(76,recvResult)
(77,wsaDataInit = 1)
(78,AF_INET)
(79,memset(&service, 0, sizeof(service)
(80,service.sin_family)
(81,1)
(82,size_t)
(83,inputBuffer)
(84,"w+")
(85,*pFile = NULL)
(86,0)
(87,i = 0)
(88,pFile)
(89,SOCKET_ERROR)
(90,connectSocket == INVALID_SOCKET)
(91,recvResult == SOCKET_ERROR || recvResult == 0)
(92,CLOSE_SOCKET(connectSocket)
(93,filename)
(94,)
(95,if (WSAStartup(MAKEWORD(2,2)
(96,wsaData)
(97,service.sin_port)
(98,wsaData)
(99,-1)
(100,count = atoi(inputBuffer)
(101,pFile == NULL)
(102,&service)
(103,(size_t)
(104,connectSocket = INVALID_SOCKET)
(105,break;)
(106,recvResult)
(107,break;)
(108,service)
(109,recvResult == SOCKET_ERROR)
(110,i)
(111,0)
(112,"output_bad.txt")
(113,goto source;)
(114,connectSocket)
(115,INVALID_SOCKET)
(116,SENTENCE)
(117,connectSocket)
(118,i)
(119,char)
(120,i)
(121,service.sin_family = AF_INET)
(122,service)
(123,RET)
(124,i = 0)
(125,i)
(126,count)
(127,)
(128,sizeof(service)
(129,IPPROTO_TCP)
(130,struct sockaddr*)
(131,0)
(132,for (i = 0; i < (size_t)
(133,2)
(134,htons(TCP_PORT)
(135,inputBuffer[recvResult])
(136,service)
(137,\'\\0\')
(138,wsaDataInit)
(139,connectSocket)
(140,recvResult)
(141,0)
(142,(struct sockaddr*)
(143,wsaDataInit = 0)
(144,SOCKET_ERROR)
(145,connect(connectSocket, (struct sockaddr*)
(146,1)
(147,i++)
(148,recvResult)
(149,goto sink;)
(150,pFile)
(151,NULL)
(152,sizeof(service)
(153,IP_ADDRESS)
(154,connectSocket)
(155,WSACleanup()
(156,do)
(157,source:)
(158,)
(159,)
(160,if (wsaDataInit)
(161,inputBuffer)
(162,sin_port)
(163,exit(1)
(164,)
(165,NO_ERROR)
(166,1)
(167,)
(168,filename)
(169,0)
(170,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(171,SOCK_STREAM)
(172,sink:)
(173,strlen(SENTENCE)
(174,wsaDataInit)
(175,service)
(176,connectSocket)
(177,service.sin_addr.s_addr)
(178,INVALID_SOCKET)
(179,fclose(pFile)
(180,pFile)
(181,pFile)
(182,)
(183,)
(184,sizeof(char)
(185,if (connectSocket == INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^