-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
30,33
31,32
31,33
32,33
35,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
71,72
73,74
73,75
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,40,45,47,48,53,56,58,61,62,67,70,72,75,78,81,82,86,88,93,95,99,101,103,107,109,113,115,120,121
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
50,51
50,52
51,52
51,53
59,60
59,61
65,66
65,67
76,77
76,78
84,85
84,86
-----guardedBy-----
58,103
61,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(43,54,0)
(18,36,0)
(55,3,0)
(54,31,0)
(31,54,0)
(33,43,0)
(48,36,0)
(19,34,0)
(2,45,0)
(60,45,0)
(44,59,0)
(26,30,0)
(36,48,0)
(21,28,0)
(43,17,0)
(48,60,0)
(59,17,0)
(54,46,0)
(42,14,0)
(28,43,0)
(24,22,0)
(36,18,0)
(18,60,0)
(29,48,0)
(13,45,0)
(39,1,0)
(16,25,0)
(54,43,0)
(18,10,0)
(51,3,0)
(46,25,0)
(38,27,0)
(6,10,0)
(20,18,0)
(5,28,0)
(50,43,0)
(15,49,0)
(47,38,0)
(25,38,0)
(51,0,0)
(38,4,0)
(25,46,0)
(25,60,0)
(18,38,0)
(58,33,0)
(9,8,0)
(7,48,0)
(53,17,0)
(33,17,0)
(46,54,0)
(14,17,0)
(23,49,0)
(59,43,0)
(30,11,0)
(37,60,0)
(10,18,0)
(52,9,0)
(41,22,0)
(56,60,0)
(40,45,0)
(3,51,0)
(48,38,0)
(1,25,0)
(14,43,0)
(32,34,0)
(25,1,0)
(12,14,0)
(34,35,0)
(4,38,0)
(50,36,1)
(38,4,1)
(57,33,1)
(37,56,1)
(18,10,1)
(30,26,1)
(57,9,1)
(59,43,1)
(44,14,1)
(7,29,1)
(51,3,1)
(10,6,1)
(6,20,1)
(48,38,1)
(23,22,1)
(25,38,1)
(54,31,1)
(42,51,1)
(1,39,1)
(29,18,1)
(25,1,1)
(28,43,1)
(33,58,1)
(21,5,1)
(18,60,1)
(47,22,1)
(54,46,1)
(42,28,1)
(14,43,1)
(28,21,1)
(43,54,1)
(24,60,1)
(25,60,1)
(20,49,1)
(18,38,1)
(36,48,1)
(5,43,1)
(49,15,1)
(16,50,1)
(55,28,1)
(3,55,1)
(36,18,1)
(4,47,1)
(48,7,1)
(41,24,1)
(59,44,1)
(22,41,1)
(52,36,1)
(58,59,1)
(23,38,1)
(14,12,1)
(9,52,1)
(60,37,1)
(39,16,1)
(48,60,1)
(12,42,1)
(26,49,1)
(33,43,1)
(57,30,1)
(46,25,1)
(15,23,1)
(43,54,2)
(5,36,2)
(18,60,2)
(55,28,2)
(10,49,2)
(21,36,2)
(59,36,2)
(25,60,2)
(43,36,2)
(54,36,2)
(6,49,2)
(14,36,2)
(38,4,2)
(59,43,2)
(7,18,2)
(46,25,2)
(36,48,2)
(51,3,2)
(46,36,2)
(48,38,2)
(58,36,2)
(4,22,2)
(54,46,2)
(25,36,2)
(36,18,2)
(48,60,2)
(14,43,2)
(25,38,2)
(50,36,2)
(20,49,2)
(33,43,2)
(18,10,2)
(18,38,2)
(1,36,2)
(44,36,2)
(54,31,2)
(39,36,2)
(29,18,2)
(47,22,2)
(36,49,2)
(25,1,2)
(28,36,2)
(18,49,2)
(28,43,2)
(38,22,2)
(12,36,2)
(3,28,2)
(26,49,2)
(52,36,2)
(16,36,2)
(42,36,2)
(9,36,2)
(48,18,2)
(30,49,2)
(33,36,2)
(51,28,2)
-----------------------------------
(0,)
(1,sizeof(wchar_t)
(2,if(STATIC_CONST_FIVE!=5)
(3,-1)
(4,rand()
(5,myString)
(6,HELLO_STRING)
(7,100)
(8,)
(9,printLine("Input is less than the length of the source string or too large")
(10,wcslen(HELLO_STRING)
(11,)
(12,HELLO_STRING)
(13,data)
(14,wcscpy(myString, HELLO_STRING)
(15,5)
(16,data)
(17,)
(18,data > wcslen(HELLO_STRING)
(19,if (data > wcslen(HELLO_STRING)
(20,data)
(21,NULL)
(22,STATIC_CONST_FIVE==5)
(23,STATIC_CONST_FIVE)
(24,STATIC_CONST_FIVE)
(25,data*sizeof(wchar_t)
(26,"Benign, fixed string")
(27,)
(28,myString == NULL)
(29,data)
(30,printLine("Benign, fixed string")
(31,wchar_t *)
(32,myString)
(33,free(myString)
(34,)
(35,)
(36,data > wcslen(HELLO_STRING)
(37,0)
(38,data = rand()
(39,wchar_t)
(40,if(STATIC_CONST_FIVE==5)
(41,5)
(42,myString)
(43,myString = (wchar_t *)
(44,myString)
(45,)
(46,malloc(data*sizeof(wchar_t)
(47,data)
(48,data < 100)
(49,STATIC_CONST_FIVE!=5)
(50,myString)
(51,exit(-1)
(52,"Input is less than the length of the source string or too large")
(53,if (myString == NULL)
(54,(wchar_t *)
(55,1)
(56,data)
(57,RET)
(58,myString)
(59,printWLine(myString)
(60,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^