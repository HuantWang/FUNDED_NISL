-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
98,99
100,101
102,103
102,104
103,104
104,105
104,106
106,107
106,108
106,109
109,110
110,111
111,112
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,85,87,88,92,94,99,101,105,107,108,112,113
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_32_bad()
CWE401_Memory_Leak__wchar_t_malloc_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(45,20,0)
(36,27,0)
(5,19,0)
(9,39,0)
(8,3,0)
(39,9,0)
(43,46,0)
(23,47,0)
(8,19,0)
(32,2,0)
(11,39,0)
(25,21,0)
(15,48,0)
(17,48,0)
(29,16,0)
(0,27,0)
(2,32,0)
(34,10,0)
(21,46,0)
(20,49,0)
(47,0,0)
(31,8,0)
(2,14,0)
(49,20,0)
(38,14,0)
(40,14,0)
(0,14,0)
(16,0,0)
(46,10,0)
(44,2,0)
(1,14,0)
(18,13,0)
(38,0,0)
(13,10,0)
(37,10,0)
(30,32,0)
(39,33,0)
(48,10,0)
(4,50,0)
(3,48,0)
(16,14,0)
(33,39,0)
(27,0,0)
(7,33,0)
(19,10,0)
(41,0,0)
(6,3,0)
(27,36,0)
(9,27,0)
(50,38,0)
(50,46,0)
(24,47,0)
(42,38,0)
(3,8,0)
(49,22,0)
(26,15,0)
(28,10,0)
(35,13,0)
(27,9,0)
(46,21,0)
(32,46,0)
(14,10,0)
(48,15,0)
(47,0,1)
(8,3,1)
(24,23,1)
(39,33,1)
(9,39,1)
(2,32,1)
(16,0,1)
(12,8,1)
(47,24,1)
(38,0,1)
(38,42,1)
(44,13,1)
(41,2,1)
(25,43,1)
(48,15,1)
(20,45,1)
(17,46,1)
(32,30,1)
(35,18,1)
(32,46,1)
(6,31,1)
(30,44,1)
(50,46,1)
(42,50,1)
(16,29,1)
(45,47,1)
(27,9,1)
(50,4,1)
(49,20,1)
(46,21,1)
(33,7,1)
(7,11,1)
(27,36,1)
(15,26,1)
(0,27,1)
(29,47,1)
(31,38,1)
(29,49,1)
(4,16,1)
(13,35,1)
(3,6,1)
(18,48,1)
(26,17,1)
(21,25,1)
(23,0,1)
(3,48,1)
(11,41,1)
(46,21,2)
(27,36,2)
(49,47,2)
(2,32,2)
(20,47,2)
(16,0,2)
(8,3,2)
(32,46,2)
(38,0,2)
(47,0,2)
(0,27,2)
(45,47,2)
(3,48,2)
(49,20,2)
(27,9,2)
(9,39,2)
(39,33,2)
(50,46,2)
(48,15,2)
-----------------------------------
(0,data = (wchar_t *)
(1,if (data == NULL)
(2,* data = *dataPtr1)
(3,*dataPtr2)
(4,dataPtr1)
(5,data)
(6,dataPtr2)
(7,wchar_t)
(8,* data = *dataPtr2)
(9,malloc(100*sizeof(wchar_t)
(10,)
(11,100)
(12,RET)
(13,data = NULL)
(14,)
(15,&data)
(16,printWLine(data)
(17,dataPtr2)
(18,data)
(19,)
(20,-1)
(21,&data)
(22,)
(23,data)
(24,NULL)
(25,data)
(26,data)
(27,(wchar_t *)
(28,dataPtr2)
(29,data)
(30,dataPtr1)
(31,data)
(32,*dataPtr1)
(33,sizeof(wchar_t)
(34,data)
(35,NULL)
(36,wchar_t *)
(37,dataPtr1)
(38,*dataPtr1 = data)
(39,100*sizeof(wchar_t)
(40,data)
(41,data)
(42,data)
(43,dataPtr1)
(44,data)
(45,1)
(46,* *dataPtr1 = &data)
(47,data == NULL)
(48,* *dataPtr2 = &data)
(49,exit(-1)
(50,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^