-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
70,71
72,73
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,71,76,78
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(32,36,0)
(17,28,0)
(0,25,0)
(36,20,0)
(28,17,0)
(30,38,0)
(37,36,0)
(39,20,0)
(33,18,0)
(28,39,0)
(10,39,0)
(28,36,0)
(17,20,0)
(36,33,0)
(11,24,0)
(4,28,0)
(38,18,0)
(5,37,0)
(33,36,0)
(18,38,0)
(13,25,0)
(29,18,0)
(9,22,0)
(31,22,0)
(12,24,0)
(37,22,0)
(37,1,0)
(35,39,0)
(18,33,0)
(16,19,0)
(7,19,0)
(14,33,0)
(33,14,0)
(27,28,0)
(35,36,0)
(11,15,0)
(3,19,0)
(8,20,0)
(25,36,0)
(23,35,0)
(24,11,0)
(22,19,0)
(21,35,0)
(37,22,1)
(35,36,1)
(27,39,1)
(30,29,1)
(22,31,1)
(10,35,1)
(24,12,1)
(38,30,1)
(29,32,1)
(28,4,1)
(39,10,1)
(37,36,1)
(35,21,1)
(21,23,1)
(31,9,1)
(0,36,1)
(25,36,1)
(11,24,1)
(33,14,1)
(23,25,1)
(2,17,1)
(12,25,1)
(25,13,1)
(6,2,1)
(33,18,1)
(23,11,1)
(18,38,1)
(2,34,1)
(28,36,1)
(17,28,1)
(5,2,1)
(36,33,1)
(4,27,1)
(34,22,1)
(28,39,1)
(6,37,1)
(32,34,1)
(37,5,1)
(13,0,1)
(11,24,2)
(33,34,2)
(28,39,2)
(4,34,2)
(33,14,2)
(37,36,2)
(28,36,2)
(28,34,2)
(29,34,2)
(37,2,2)
(36,33,2)
(17,28,2)
(30,34,2)
(25,34,2)
(17,34,2)
(24,25,2)
(23,34,2)
(32,34,2)
(36,34,2)
(33,18,2)
(35,36,2)
(5,2,2)
(27,34,2)
(35,34,2)
(18,34,2)
(25,36,2)
(0,34,2)
(11,25,2)
(13,34,2)
(38,34,2)
(12,25,2)
(18,38,2)
(37,22,2)
(39,34,2)
(10,34,2)
(21,34,2)
-----------------------------------
(0,data)
(1,)
(2,staticReturnsTrue()
(3,if(staticReturnsTrue()
(4,0)
(5,data)
(6,RET)
(7,data)
(8,if (data == NULL)
(9,data)
(10,5)
(11,exit(-1)
(12,1)
(13,NULL)
(14,int *)
(15,)
(16,if(staticReturnsTrue()
(17,printIntLine(data[0])
(18,calloc(100, sizeof(int)
(19,)
(20,)
(21,0)
(22,data = NULL)
(23,data)
(24,-1)
(25,data == NULL)
(26, sizeof(int)
(27,data)
(28,data[0])
(29,100)
(30,int)
(31,NULL)
(32,data)
(33,(int *)
(34,staticReturnsTrue()
(35,data[0])
(36,data = (int *)
(37,free(data)
(38,sizeof(int)
(39,data[0] = 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^