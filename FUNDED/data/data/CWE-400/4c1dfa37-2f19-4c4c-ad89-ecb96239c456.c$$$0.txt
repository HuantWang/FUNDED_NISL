-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    for(k = 0; k < 1; k++)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
38,44
38,45
38,46
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
68,69
69,70
69,71
71,72
71,73
73,74
74,75
76,77
76,78
77,78
77,79
77,80
77,81
77,82
77,83
77,84
77,85
77,86
77,87
77,88
77,89
77,90
77,91
78,79
79,80
79,81
80,81
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
104,105
107,108
108,109
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
135,137
136,137
138,139
140,141
140,142
141,142
141,143
142,143
142,144
142,145
142,146
143,144
145,146
147,148
147,149
148,149
148,150
149,150
151,152
153,154
154,155
156,157
157,158
158,159
160,161
162,163
164,165
164,166
165,166
165,167
166,167
166,168
166,169
167,168
169,170
171,172
173,174
175,176
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
182,183
184,185
186,187
188,189
190,191
190,192
191,192
191,193
192,193
194,195
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
202,206
202,207
203,204
205,206
207,208
209,210
209,211
210,211
214,215
214,216
215,216
215,217
216,217
216,218
217,218
219,220
221,222
221,223
222,223
225,226
227,228
228,229
228,230
229,230
229,231
230,231
232,233
235,236
236,237
236,238
237,238
239,240
239,241
239,242
239,243
240,241
242,243
244,245
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
256,257
256,258
257,258
259,260
261,262
261,263
262,263
262,264
263,264
265,266
267,268
268,269
269,270
269,271
270,271
272,273
274,275
274,276
274,277
274,278
275,276
276,277
276,278
277,278
280,281
280,282
281,282
284,285
285,286
287,288
288,289
288,290
289,290
290,291
290,292
292,293
292,294
295,296
295,297
295,298
296,297
296,298
297,298
297,299
298,299
300,301
300,302
301,302
303,304
305,306
305,307
306,307
309,310
309,311
309,312
309,313
309,314
310,311
311,312
311,313
312,313
314,315
314,316
315,316
315,317
317,318
319,320
319,321
320,321
322,323
322,324
323,324
325,326
326,327
326,328
329,330
329,331
330,331
330,332
331,332
333,334
335,336
336,337
337,338
337,339
338,339
340,341
342,343
343,344
343,345
343,346
344,345
346,347
348,349
350,351
351,352
351,353
352,353
354,355
356,357
357,358
357,359
358,359
360,361
362,363
363,364
364,365
364,366
365,366
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,47,49,53,55,58,62,64,67,70,72,75,81,84,86,88,90,94,96,98,102,105,106,110,115,116,118,124,125,126,128,133,134,137,139,144,146,150,152,155,159,161,163,168,170,172,174,176,180,183,185,187,189,193,195,197,201,204,206,208,211,212,213,218,220,223,224,226,231,233,234,238,241,243,245,246,247,251,253,258,260,264,266,271,273,278,279,282,283,286,291,293,294,299,302,304,307,308,313,316,318,321,324,327,328,332,334,339,341,345,347,349,353,355,359,361,366,367
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
79,80
79,81
92,93
92,94
112,113
112,114
120,121
120,122
130,131
130,132
141,142
141,143
165,166
165,167
178,179
178,180
191,192
191,193
199,200
199,201
209,210
209,211
215,216
215,217
216,217
216,218
221,222
221,223
228,229
228,230
236,237
236,238
249,250
249,251
262,263
262,264
276,277
276,278
280,281
280,282
296,297
296,298
297,298
297,299
305,306
305,307
311,312
311,313
322,323
322,324
330,331
330,332
-----guardedBy-----
251,260
264,273
304,349
307,324
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int i,k;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(k = 0; k < 1; k++)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G()
goodB2G
{    int i,k;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(k = 0; k < 1; k++)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
int i,k;
int i,k;
int
i
i
k
k
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
for(k = 0; k < 1; k++)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(20,121,0)
(85,171,0)
(116,96,0)
(212,121,0)
(187,176,0)
(99,166,0)
(64,202,0)
(213,161,0)
(45,72,0)
(58,103,0)
(29,151,0)
(24,51,0)
(190,215,0)
(152,216,0)
(70,209,0)
(131,191,0)
(188,205,0)
(166,122,0)
(2,161,0)
(17,108,0)
(154,79,0)
(79,122,0)
(11,52,0)
(102,182,0)
(63,211,0)
(210,191,0)
(164,153,0)
(196,69,0)
(166,98,0)
(184,114,0)
(88,124,0)
(45,122,0)
(94,215,0)
(25,114,0)
(186,158,0)
(33,10,0)
(21,52,0)
(185,52,0)
(68,26,0)
(65,209,0)
(143,208,0)
(50,7,0)
(107,115,0)
(1,33,0)
(192,134,0)
(84,104,0)
(197,7,0)
(174,119,0)
(139,186,0)
(198,153,0)
(72,45,0)
(43,126,0)
(9,96,0)
(118,103,0)
(95,209,0)
(80,9,0)
(120,52,0)
(97,213,0)
(124,134,0)
(22,94,0)
(39,72,0)
(101,75,0)
(10,209,0)
(211,63,0)
(209,147,0)
(112,97,0)
(215,94,0)
(13,43,0)
(158,186,0)
(189,48,0)
(54,121,0)
(124,41,0)
(200,97,0)
(111,145,0)
(170,22,0)
(96,52,0)
(4,119,0)
(58,7,0)
(44,60,0)
(59,55,0)
(36,122,0)
(67,10,0)
(97,112,0)
(56,183,0)
(23,209,0)
(140,134,0)
(203,122,0)
(181,204,0)
(49,94,0)
(123,192,0)
(94,145,0)
(18,52,0)
(163,146,0)
(151,12,0)
(168,161,0)
(108,179,0)
(46,153,0)
(141,94,0)
(153,164,0)
(166,10,0)
(150,209,0)
(158,9,0)
(63,36,0)
(207,58,0)
(155,179,0)
(83,79,0)
(69,41,0)
(71,186,0)
(215,66,0)
(119,41,0)
(115,122,0)
(129,191,0)
(109,44,0)
(60,52,0)
(108,208,0)
(32,112,0)
(53,184,0)
(97,7,0)
(127,204,0)
(48,36,0)
(33,122,0)
(9,158,0)
(142,118,0)
(60,26,0)
(213,52,0)
(192,41,0)
(162,52,0)
(73,63,0)
(128,161,0)
(208,108,0)
(193,52,0)
(149,115,0)
(113,209,0)
(110,117,0)
(81,104,0)
(19,212,0)
(5,164,0)
(76,11,0)
(36,93,0)
(172,162,0)
(122,52,0)
(124,74,0)
(138,209,0)
(126,16,0)
(195,44,0)
(179,52,0)
(77,209,0)
(36,48,0)
(117,164,0)
(89,216,0)
(41,52,0)
(26,60,0)
(14,127,0)
(126,43,0)
(41,216,0)
(38,182,0)
(116,162,0)
(55,121,0)
(215,190,0)
(130,8,0)
(169,167,0)
(132,119,0)
(183,199,0)
(201,86,0)
(216,122,0)
(58,213,0)
(199,183,0)
(63,73,0)
(206,208,0)
(119,104,0)
(87,96,0)
(8,61,0)
(194,33,0)
(34,36,0)
(104,119,0)
(173,209,0)
(176,114,0)
(97,190,0)
(165,69,0)
(161,213,0)
(105,116,0)
(164,5,0)
(92,209,0)
(137,192,0)
(118,142,0)
(134,209,0)
(51,209,0)
(204,52,0)
(106,52,0)
(133,55,0)
(186,96,0)
(82,8,0)
(171,145,0)
(96,119,0)
(30,51,0)
(93,36,0)
(118,213,0)
(78,156,0)
(103,58,0)
(122,115,0)
(180,114,0)
(31,45,0)
(141,145,0)
(171,94,0)
(100,116,0)
(136,41,0)
(144,191,0)
(62,213,0)
(90,209,0)
(22,145,0)
(57,45,0)
(183,52,0)
(177,176,0)
(119,96,0)
(160,118,0)
(148,10,0)
(164,117,0)
(175,211,0)
(0,142,0)
(216,41,0)
(183,156,0)
(15,9,0)
(7,191,0)
(42,11,0)
(66,215,0)
(6,58,0)
(214,216,0)
(47,199,0)
(36,63,0)
(156,183,0)
(125,115,0)
(3,134,0)
(118,7,0)
(40,93,0)
(217,141,0)
(91,157,0)
(135,191,0)
(190,97,0)
(103,118,0)
(182,94,0)
(159,127,0)
(27,141,0)
(35,5,0)
(184,53,1)
(186,96,1)
(189,36,1)
(137,33,1)
(110,164,1)
(71,9,1)
(62,162,1)
(24,176,1)
(48,36,1)
(176,187,1)
(217,27,1)
(141,217,1)
(212,121,1)
(15,80,1)
(204,181,1)
(208,206,1)
(119,4,1)
(199,47,1)
(20,54,1)
(27,126,1)
(124,41,1)
(206,143,1)
(132,87,1)
(183,199,1)
(155,108,1)
(133,212,1)
(192,134,1)
(100,105,1)
(194,101,1)
(67,148,1)
(127,159,1)
(151,29,1)
(166,10,1)
(164,153,1)
(169,72,1)
(53,37,1)
(80,96,1)
(200,49,1)
(26,68,1)
(104,81,1)
(78,79,1)
(160,55,1)
(57,31,1)
(84,174,1)
(53,188,1)
(87,69,1)
(7,197,1)
(2,128,1)
(63,211,1)
(136,72,1)
(114,25,1)
(212,19,1)
(197,50,1)
(216,214,1)
(159,14,1)
(38,102,1)
(103,58,1)
(25,180,1)
(119,104,1)
(35,153,1)
(176,114,1)
(213,161,1)
(117,164,1)
(29,103,1)
(186,139,1)
(158,186,1)
(40,63,1)
(182,94,1)
(42,76,1)
(33,122,1)
(195,109,1)
(97,7,1)
(58,6,1)
(72,45,1)
(194,178,1)
(55,59,1)
(164,5,1)
(124,134,1)
(166,122,1)
(108,17,1)
(19,151,1)
(180,7,1)
(43,13,1)
(91,79,1)
(31,48,1)
(117,110,1)
(3,10,1)
(170,141,1)
(89,152,1)
(102,94,1)
(156,78,1)
(9,15,1)
(41,216,1)
(152,136,1)
(118,7,1)
(194,201,1)
(203,11,1)
(118,213,1)
(171,85,1)
(45,122,1)
(140,3,1)
(97,112,1)
(194,163,1)
(81,84,1)
(192,123,1)
(36,63,1)
(196,165,1)
(55,121,1)
(88,192,1)
(28,55,1)
(48,189,1)
(105,158,1)
(46,134,1)
(59,133,1)
(121,20,1)
(107,203,1)
(112,32,1)
(175,34,1)
(211,175,1)
(93,40,1)
(58,213,1)
(17,208,1)
(172,116,1)
(79,83,1)
(103,118,1)
(141,94,1)
(122,115,1)
(39,45,1)
(154,122,1)
(128,168,1)
(101,158,1)
(187,177,1)
(118,142,1)
(174,132,1)
(139,71,1)
(60,26,1)
(109,179,1)
(69,196,1)
(194,64,1)
(143,204,1)
(6,207,1)
(158,9,1)
(83,154,1)
(22,94,1)
(148,51,1)
(214,89,1)
(183,156,1)
(133,121,1)
(51,30,1)
(63,73,1)
(115,125,1)
(134,140,1)
(166,99,1)
(194,169,1)
(162,172,1)
(5,35,1)
(184,114,1)
(194,91,1)
(1,194,1)
(85,22,1)
(64,117,1)
(19,171,1)
(96,119,1)
(216,122,1)
(181,127,1)
(22,170,1)
(142,0,1)
(190,97,1)
(4,104,1)
(37,192,1)
(119,41,1)
(161,2,1)
(36,122,1)
(177,114,1)
(79,122,1)
(192,41,1)
(165,41,1)
(58,7,1)
(97,213,1)
(125,149,1)
(10,67,1)
(99,33,1)
(124,88,1)
(30,24,1)
(45,57,1)
(11,42,1)
(47,56,1)
(179,155,1)
(76,117,1)
(13,182,1)
(44,195,1)
(32,200,1)
(33,10,1)
(37,124,1)
(34,60,1)
(27,182,1)
(188,37,1)
(201,48,1)
(182,38,1)
(72,39,1)
(153,198,1)
(149,107,1)
(207,118,1)
(215,66,1)
(46,178,1)
(68,44,1)
(168,62,1)
(54,176,1)
(123,137,1)
(177,184,1)
(116,96,1)
(56,156,1)
(94,215,1)
(36,93,1)
(116,100,1)
(33,1,1)
(108,208,1)
(9,96,1)
(178,213,1)
(198,46,1)
(69,41,1)
(126,43,1)
(49,103,1)
(0,160,1)
(215,190,1)
(137,166,1)
(14,183,1)
(163,69,1)
(171,94,1)
(33,176,2)
(174,69,2)
(89,72,2)
(166,33,2)
(36,122,2)
(215,103,2)
(102,103,2)
(152,72,2)
(124,41,2)
(109,79,2)
(38,103,2)
(103,55,2)
(172,158,2)
(116,158,2)
(19,55,2)
(105,158,2)
(29,103,2)
(56,79,2)
(99,33,2)
(156,79,2)
(142,55,2)
(22,103,2)
(0,55,2)
(203,117,2)
(42,117,2)
(119,104,2)
(4,69,2)
(78,79,2)
(53,176,2)
(216,122,2)
(115,117,2)
(63,211,2)
(58,213,2)
(140,176,2)
(122,117,2)
(37,176,2)
(136,72,2)
(11,117,2)
(6,118,2)
(51,176,2)
(139,9,2)
(141,94,2)
(44,79,2)
(85,103,2)
(198,178,2)
(164,176,2)
(22,94,2)
(186,96,2)
(26,79,2)
(160,55,2)
(32,103,2)
(183,199,2)
(128,158,2)
(58,7,2)
(187,176,2)
(127,79,2)
(43,182,2)
(159,79,2)
(71,9,2)
(200,103,2)
(45,48,2)
(118,142,2)
(49,103,2)
(216,72,2)
(124,134,2)
(31,48,2)
(195,79,2)
(199,79,2)
(154,117,2)
(186,9,2)
(132,69,2)
(176,176,2)
(5,178,2)
(137,176,2)
(84,69,2)
(215,190,2)
(153,178,2)
(123,176,2)
(117,176,2)
(184,176,2)
(101,158,2)
(97,112,2)
(94,215,2)
(143,79,2)
(176,114,2)
(181,79,2)
(107,117,2)
(24,176,2)
(36,93,2)
(100,158,2)
(122,115,2)
(166,122,2)
(201,48,2)
(196,72,2)
(79,122,2)
(151,103,2)
(79,117,2)
(87,69,2)
(97,103,2)
(33,10,2)
(48,36,2)
(158,69,2)
(213,158,2)
(126,182,2)
(189,79,2)
(63,79,2)
(190,103,2)
(215,66,2)
(110,178,2)
(60,79,2)
(153,176,2)
(171,94,2)
(96,69,2)
(198,176,2)
(182,94,2)
(124,192,2)
(40,79,2)
(96,119,2)
(175,79,2)
(117,178,2)
(36,63,2)
(155,79,2)
(97,7,2)
(55,55,2)
(9,96,2)
(133,55,2)
(204,79,2)
(34,79,2)
(208,79,2)
(64,117,2)
(1,176,2)
(118,55,2)
(103,58,2)
(108,79,2)
(80,69,2)
(134,176,2)
(118,7,2)
(59,55,2)
(171,103,2)
(116,96,2)
(183,156,2)
(163,69,2)
(68,79,2)
(179,79,2)
(60,26,2)
(63,73,2)
(192,41,2)
(27,103,2)
(164,178,2)
(119,41,2)
(62,158,2)
(55,121,2)
(47,79,2)
(158,186,2)
(119,69,2)
(206,79,2)
(217,103,2)
(69,41,2)
(41,72,2)
(39,48,2)
(162,158,2)
(183,79,2)
(91,79,2)
(168,158,2)
(112,103,2)
(169,72,2)
(103,118,2)
(30,176,2)
(192,176,2)
(190,97,2)
(194,176,2)
(76,117,2)
(69,72,2)
(161,158,2)
(158,9,2)
(2,158,2)
(81,69,2)
(46,178,2)
(110,176,2)
(72,45,2)
(10,176,2)
(97,213,2)
(35,178,2)
(213,161,2)
(14,79,2)
(48,79,2)
(93,79,2)
(207,118,2)
(214,72,2)
(192,134,2)
(108,208,2)
(149,117,2)
(164,5,2)
(188,37,2)
(41,216,2)
(148,176,2)
(88,192,2)
(17,79,2)
(212,55,2)
(165,72,2)
(164,153,2)
(72,48,2)
(104,69,2)
(166,10,2)
(67,176,2)
(13,182,2)
(184,114,2)
(212,121,2)
(36,79,2)
(35,176,2)
(3,176,2)
(126,43,2)
(58,118,2)
(141,103,2)
(46,176,2)
(94,103,2)
(117,164,2)
(182,103,2)
(170,103,2)
(15,69,2)
(125,117,2)
(177,176,2)
(9,69,2)
(57,48,2)
(178,158,2)
(33,122,2)
(45,122,2)
(5,176,2)
(83,117,2)
(118,213,2)
(211,79,2)
-----------------------------------
(0,HELLO_STRING)
(1,INVALID_SOCKET)
(2,0)
(3,acceptSocket)
(4,0)
(5,&wsaData)
(6,100)
(7,data = 0)
(8,)
(9,recvResult == SOCKET_ERROR)
(10,listenSocket = INVALID_SOCKET)
(11,wsaDataInit = 1)
(12,)
(13,1)
(14,service)
(15,SOCKET_ERROR)
(16,)
(17,s_addr)
(18,if (listenSocket == INVALID_SOCKET)
(19,k)
(20,0)
(21,if (acceptSocket == SOCKET_ERROR)
(22,printWLine(myString)
(23,acceptSocket)
(24,wsaDataInit)
(25,0)
(26,htons(TCP_PORT)
(27,myString)
(28,RET)
(29,"Input is less than the length of the source string or too large")
(30,0)
(31,listenSocket)
(32,wchar_t)
(33,listenSocket != INVALID_SOCKET)
(34,listenSocket)
(35,wsaData)
(36,bind(listenSocket, (struct sockaddr*)
(37,wsaDataInit)
(38,NULL)
(39,SOCKET_ERROR)
(40,service)
(41,acceptSocket = accept(listenSocket, NULL, NULL)
(42,1)
(43,-1)
(44,service.sin_port)
(45,listen(listenSocket, LISTEN_BACKLOG)
(46,2)
(47,service)
(48,bind(listenSocket, (struct sockaddr*)
(49,myString)
(50,data)
(51,wsaDataInit = 0)
(52,)
(53,i)
(54,k)
(55,k < 1)
(56,0)
(57,LISTEN_BACKLOG)
(58,data < 100)
(59,1)
(60,service.sin_port = htons(TCP_PORT)
(61,)
(62,data)
(63,(struct sockaddr*)
(64,break;)
(65,if (wsaDataInit)
(66,wchar_t *)
(67,INVALID_SOCKET)
(68,TCP_PORT)
(69,acceptSocket == SOCKET_ERROR)
(70,listenSocket)
(71,recvResult)
(72,listen(listenSocket, LISTEN_BACKLOG)
(73,struct sockaddr*)
(74,)
(75,)
(76,wsaDataInit)
(77,service)
(78,service)
(79,listenSocket == INVALID_SOCKET)
(80,recvResult)
(81,1)
(82,if (data > wcslen(HELLO_STRING)
(83,INVALID_SOCKET)
(84,CHAR_ARRAY_SIZE)
(85,myString)
(86,)
(87,recvResult)
(88,acceptSocket)
(89,NULL)
(90,if (listenSocket != INVALID_SOCKET)
(91,break;)
(92,wsaData)
(93,sizeof(service)
(94,myString = (wchar_t *)
(95,recvResult)
(96,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(97,data*sizeof(wchar_t)
(98,)
(99,listenSocket)
(100,recvResult)
(101,break;)
(102,myString)
(103,data > wcslen(HELLO_STRING)
(104,CHAR_ARRAY_SIZE - 1)
(105,inputBuffer)
(106,if (listen(listenSocket, LISTEN_BACKLOG)
(107,AF_INET)
(108,service.sin_addr.s_addr)
(109,service)
(110,NO_ERROR)
(111,if (myString == NULL)
(112,sizeof(wchar_t)
(113,do)
(114,i = 0)
(115,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(116,inputBuffer[recvResult])
(117,WSAStartup(MAKEWORD(2,2)
(118,data > wcslen(HELLO_STRING)
(119,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(120,if (bind(listenSocket, (struct sockaddr*)
(121,k = 0)
(122,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(123,INVALID_SOCKET)
(124,CLOSE_SOCKET(acceptSocket)
(125,IPPROTO_TCP)
(126,exit(-1)
(127,service.sin_family)
(128,NULL)
(129,i)
(130,myString)
(131,for(i = 0; i < 1; i++)
(132,acceptSocket)
(133,k)
(134,acceptSocket = INVALID_SOCKET)
(135,data)
(136,acceptSocket)
(137,acceptSocket)
(138,wsaDataInit)
(139,0)
(140,INVALID_SOCKET)
(141,wcscpy(myString, HELLO_STRING)
(142,wcslen(HELLO_STRING)
(143,service)
(144,k)
(145,)
(146,)
(147,)
(148,listenSocket)
(149,SOCK_STREAM)
(150,inputBuffer)
(151,printLine("Input is less than the length of the source string or too large")
(152,listenSocket)
(153,MAKEWORD(2,2)
(154,listenSocket)
(155,INADDR_ANY)
(156,&service)
(157,)
(158,recvResult == SOCKET_ERROR || recvResult == 0)
(159,sin_family)
(160,data)
(161,strtoul(inputBuffer, NULL, 0)
(162,inputBuffer[recvResult] = \'\\0\')
(163,break;)
(164,WSAStartup(MAKEWORD(2,2)
(165,acceptSocket)
(166,CLOSE_SOCKET(listenSocket)
(167,)
(168,inputBuffer)
(169,break;)
(170,myString)
(171,free(myString)
(172,\'\\0\')
(173,if (acceptSocket != INVALID_SOCKET)
(174,inputBuffer)
(175,service)
(176,i < 1)
(177,i)
(178,0)
(179,service.sin_addr.s_addr = INADDR_ANY)
(180,i)
(181,AF_INET)
(182,myString == NULL)
(183,memset(&service, 0, sizeof(service)
(184,i++)
(185,if (WSAStartup(MAKEWORD(2,2)
(186,recvResult == 0)
(187,1)
(188,WSACleanup()
(189,SOCKET_ERROR)
(190,malloc(data*sizeof(wchar_t)
(191,)
(192,acceptSocket != INVALID_SOCKET)
(193,if (recvResult == SOCKET_ERROR || recvResult == 0)
(194,listenSocket)
(195,sin_port)
(196,SOCKET_ERROR)
(197,0)
(198,2)
(199,sizeof(service)
(200,data)
(201,break;)
(202,)
(203,listenSocket)
(204,service.sin_family = AF_INET)
(205,)
(206,sin_addr)
(207,data)
(208,service.sin_addr)
(209,)
(210,for(k = 0; k < 1; k++)
(211,&service)
(212,k++)
(213,data = strtoul(inputBuffer, NULL, 0)
(214,NULL)
(215,(wchar_t *)
(216,accept(listenSocket, NULL, NULL)
(217,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^