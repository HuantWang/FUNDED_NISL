-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_42_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
42,47
43,44
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,36,39,41,46,49,51,54,57,60,61,65,67,72,74,78,80,82,86,88,92,94,99,100
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
44,45
44,46
55,56
55,57
63,64
63,65
-----guardedBy-----
41,82
36,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_42_bad(){    size_t data;    /* Initialize data */    data = 0;    data = badSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_42_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_42_bad
{    size_t data;    /* Initialize data */    data = 0;    data = badSource(data);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(41,16,0)
(17,28,0)
(32,6,0)
(12,14,0)
(18,28,0)
(10,24,0)
(33,17,0)
(22,28,0)
(31,33,0)
(26,24,0)
(25,11,0)
(2,30,0)
(6,44,0)
(14,39,0)
(29,5,0)
(17,33,0)
(42,43,0)
(28,22,0)
(38,5,0)
(15,17,0)
(7,24,0)
(22,23,0)
(13,2,0)
(11,5,0)
(9,12,0)
(39,14,0)
(11,24,0)
(8,7,0)
(3,23,0)
(14,28,0)
(4,23,0)
(43,5,0)
(1,43,0)
(39,38,0)
(5,24,0)
(36,38,0)
(20,26,0)
(19,41,0)
(35,2,0)
(5,38,0)
(0,7,0)
(14,12,0)
(44,34,0)
(38,39,0)
(26,5,0)
(7,5,0)
(28,30,0)
(37,22,0)
(23,30,0)
(38,36,0)
(44,6,0)
(21,14,0)
(27,30,0)
(14,28,1)
(17,33,1)
(40,41,1)
(3,4,1)
(15,28,1)
(19,17,1)
(17,28,1)
(26,5,1)
(43,42,1)
(9,21,1)
(23,3,1)
(8,43,1)
(21,29,1)
(40,26,1)
(29,17,1)
(1,5,1)
(22,23,1)
(26,20,1)
(22,37,1)
(12,9,1)
(11,5,1)
(38,39,1)
(20,11,1)
(44,6,1)
(33,31,1)
(7,5,1)
(25,7,1)
(32,43,1)
(41,19,1)
(8,44,1)
(6,32,1)
(39,14,1)
(42,1,1)
(43,5,1)
(38,36,1)
(28,22,1)
(0,8,1)
(31,15,1)
(37,18,1)
(14,12,1)
(7,0,1)
(11,25,1)
(18,23,1)
(5,38,1)
(38,17,2)
(14,12,2)
(43,17,2)
(7,5,2)
(1,17,2)
(17,33,2)
(5,17,2)
(39,14,2)
(28,22,2)
(14,28,2)
(43,5,2)
(26,5,2)
(44,43,2)
(9,17,2)
(8,17,2)
(21,17,2)
(7,17,2)
(17,28,2)
(32,43,2)
(20,17,2)
(41,17,2)
(29,17,2)
(42,17,2)
(26,17,2)
(6,43,2)
(38,39,2)
(22,23,2)
(11,17,2)
(11,5,2)
(12,17,2)
(44,6,2)
(38,36,2)
(39,17,2)
(14,17,2)
(0,17,2)
(19,17,2)
(25,17,2)
(5,38,2)
-----------------------------------
(0,HELLO_STRING)
(1,myString)
(2,)
(3,0)
(4,data)
(5,myString = (wchar_t *)
(6,-1)
(7,wcscpy(myString, HELLO_STRING)
(8,myString)
(9,wchar_t)
(10,if (myString == NULL)
(11,printWLine(myString)
(12,sizeof(wchar_t)
(13,myString)
(14,data*sizeof(wchar_t)
(15,data)
(16,)
(17,data > wcslen(HELLO_STRING)
(18,data)
(19,"Input is less than the length of the source string")
(20,myString)
(21,data)
(22,badSource(data)
(23,data = 0)
(24,)
(25,myString)
(26,free(myString)
(27,data)
(28,data = badSource(data)
(29,myString)
(30,)
(31,HELLO_STRING)
(32,1)
(33,wcslen(HELLO_STRING)
(34,)
(35,if (data > wcslen(HELLO_STRING)
(36,wchar_t *)
(37,data)
(38,(wchar_t *)
(39,malloc(data*sizeof(wchar_t)
(40,RET)
(41,printLine("Input is less than the length of the source string")
(42,NULL)
(43,myString == NULL)
(44,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^