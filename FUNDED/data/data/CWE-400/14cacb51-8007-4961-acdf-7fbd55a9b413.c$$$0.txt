-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_bad()
{
    struct _twoIntsStruct * data;
    CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    myUnion.unionFirst = data;
    {
        struct _twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
98,100
99,100
100,101
100,102
101,102
103,104
103,105
103,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,94,95,97,102,104,105,109,110,111
-----computeFrom-----
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_bad(){    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_bad
{    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct
_twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(43,17,0)
(54,44,0)
(24,34,0)
(14,3,0)
(3,34,0)
(56,51,0)
(39,46,0)
(41,23,0)
(6,4,0)
(21,24,0)
(20,46,0)
(56,34,0)
(55,3,0)
(44,53,0)
(38,6,0)
(24,12,0)
(31,30,0)
(9,51,0)
(34,43,0)
(0,20,0)
(30,47,0)
(43,16,0)
(12,24,0)
(6,38,0)
(54,34,0)
(43,34,0)
(23,41,0)
(40,38,0)
(16,43,0)
(10,45,0)
(28,34,0)
(46,51,0)
(32,24,0)
(47,45,0)
(45,51,0)
(13,44,0)
(17,41,0)
(5,29,0)
(29,15,0)
(25,19,0)
(27,53,0)
(18,17,0)
(15,51,0)
(20,28,0)
(33,47,0)
(41,17,0)
(19,56,0)
(29,12,0)
(52,28,0)
(1,54,0)
(42,34,0)
(34,51,0)
(29,5,0)
(22,9,0)
(26,19,0)
(11,54,0)
(37,30,0)
(44,54,0)
(2,28,0)
(17,43,0)
(53,51,0)
(47,30,0)
(35,51,0)
(28,20,0)
(15,29,0)
(12,29,0)
(7,9,0)
(50,56,0)
(36,51,0)
(48,51,0)
(30,37,1)
(50,19,1)
(0,28,1)
(20,0,1)
(52,3,1)
(44,13,1)
(47,30,1)
(37,31,1)
(43,17,1)
(56,50,1)
(3,55,1)
(15,29,1)
(38,40,1)
(11,1,1)
(3,34,1)
(24,21,1)
(29,12,1)
(33,56,1)
(46,39,1)
(13,54,1)
(1,46,1)
(34,43,1)
(39,20,1)
(44,54,1)
(41,18,1)
(43,16,1)
(28,2,1)
(32,53,1)
(21,32,1)
(40,3,1)
(9,22,1)
(6,38,1)
(25,15,1)
(26,25,1)
(17,41,1)
(31,33,1)
(19,26,1)
(42,9,1)
(24,34,1)
(2,52,1)
(29,5,1)
(28,34,1)
(41,23,1)
(14,34,1)
(18,42,1)
(27,44,1)
(8,47,1)
(54,11,1)
(20,28,1)
(52,6,1)
(12,24,1)
(55,14,1)
(22,7,1)
(56,34,1)
(53,27,1)
(54,34,1)
(29,5,2)
(44,54,2)
(24,34,2)
(38,3,2)
(54,34,2)
(20,28,2)
(29,12,2)
(15,29,2)
(12,24,2)
(6,38,2)
(43,16,2)
(41,23,2)
(28,34,2)
(6,3,2)
(56,34,2)
(17,41,2)
(3,34,2)
(43,17,2)
(40,3,2)
(47,30,2)
(34,43,2)
-----------------------------------
(0,intOne)
(1,data)
(2,0)
(3,data == NULL)
(4,)
(5,twoIntsStruct *)
(6,exit(-1)
(7,data)
(8,RET)
(9,data = NULL)
(10,data)
(11,0)
(12,&data[0])
(13,intTwo)
(14,data)
(15,printStructLine((twoIntsStruct *)
(16,struct _twoIntsStruct *)
(17,calloc(100, sizeof(struct _twoIntsStruct)
(18,100)
(19,myUnion.unionFirst)
(20,data[0].intOne)
(21,0)
(22,NULL)
(23,struct _twoIntsStruct)
(24,data[0])
(25,myUnion)
(26,unionFirst)
(27,0)
(28,data[0])
(29,(twoIntsStruct *)
(30,myUnion.unionSecond)
(31,myUnion)
(32,data)
(33,data)
(34,data = (struct _twoIntsStruct *)
(35,data)
(36,if (data == NULL)
(37,unionSecond)
(38,-1)
(39,0)
(40,1)
(41,sizeof(struct _twoIntsStruct)
(42,data)
(43,(struct _twoIntsStruct *)
(44,data[0].intTwo)
(45,)
(46,data[0].intOne = 0)
(47,* data = myUnion.unionSecond)
(48,myUnion)
(49, sizeof(struct _twoIntsStruct)
(50,data)
(51,)
(52,data)
(53,data[0].intTwo = 0)
(54,data[0])
(55,NULL)
(56,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^