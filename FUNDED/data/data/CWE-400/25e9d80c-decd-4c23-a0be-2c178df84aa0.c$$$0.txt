-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_66b_badSink(int countArray[])
{
    /* copy count out of countArray */
    int count = countArray[2];
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
97,102
98,99
100,101
102,103
103,104
103,105
106,107
106,108
107,108
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
119,121
120,121
122,123
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,6,8,9,13,15,19,20,25,27,29,33,35,36,39,42,44,45,47,51,54,56,57,61,63,68,69,74,75,78,82,83,85,88,94,96,99,101,104,105,108,110,112,117,118,121,126,128
-----computeFrom-----
49,50
49,51
59,60
59,61
72,73
72,74
76,77
76,78
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_66b_badSink(int countArray[]){    /* copy count out of countArray */    int count = countArray[2];    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_66b_badSink(int countArray[])
CWE400_Resource_Exhaustion__fgets_fwrite_66b_badSink
int countArray[]
int
countArray[]
countArray
[]
{    /* copy count out of countArray */    int count = countArray[2];    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = countArray[2];
int count = countArray[2];
int
count = countArray[2]
count
= countArray[2]
countArray[2]
countArray
countArray
2
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(42,44,0)
(4,23,0)
(41,15,0)
(53,44,0)
(6,46,0)
(51,17,0)
(22,7,0)
(49,62,0)
(25,61,0)
(54,44,0)
(44,3,0)
(34,22,0)
(61,18,0)
(46,28,0)
(31,45,0)
(43,44,0)
(57,7,0)
(61,25,0)
(18,61,0)
(5,42,0)
(59,18,0)
(12,28,0)
(20,0,0)
(37,61,0)
(8,3,0)
(23,0,0)
(45,58,0)
(61,0,0)
(19,17,0)
(0,44,0)
(27,3,0)
(26,8,0)
(25,36,0)
(15,29,0)
(35,28,0)
(26,38,0)
(30,58,0)
(60,23,0)
(2,44,0)
(14,36,0)
(28,46,0)
(56,16,0)
(10,58,0)
(50,7,0)
(61,33,0)
(11,22,0)
(21,40,0)
(62,24,0)
(1,42,0)
(17,44,0)
(63,61,0)
(64,44,0)
(33,61,0)
(36,25,0)
(62,0,0)
(28,8,0)
(0,22,0)
(32,44,0)
(48,8,0)
(8,26,0)
(47,21,0)
(9,26,0)
(7,44,0)
(28,12,0)
(46,58,0)
(13,26,0)
(39,33,0)
(22,0,0)
(58,30,1)
(21,47,1)
(46,58,1)
(28,12,1)
(23,4,1)
(61,0,1)
(47,25,1)
(8,26,1)
(57,50,1)
(4,60,1)
(45,31,1)
(23,0,1)
(34,20,1)
(49,55,1)
(52,62,1)
(26,38,1)
(31,21,1)
(62,0,1)
(31,25,1)
(62,49,1)
(46,28,1)
(5,8,1)
(37,18,1)
(26,13,1)
(11,34,1)
(51,19,1)
(6,45,1)
(59,33,1)
(18,59,1)
(1,5,1)
(42,1,1)
(25,61,1)
(15,41,1)
(33,39,1)
(30,10,1)
(28,8,1)
(35,6,1)
(19,42,1)
(0,22,1)
(22,11,1)
(55,46,1)
(61,37,1)
(17,51,1)
(9,48,1)
(50,17,1)
(45,58,1)
(14,46,1)
(22,7,1)
(60,0,1)
(7,57,1)
(10,15,1)
(63,36,1)
(10,23,1)
(25,36,1)
(61,18,1)
(36,14,1)
(61,33,1)
(41,23,1)
(20,7,1)
(13,9,1)
(6,58,1)
(52,55,1)
(28,35,1)
(39,63,1)
(45,46,2)
(25,61,2)
(49,55,2)
(31,46,2)
(59,46,2)
(36,46,2)
(25,46,2)
(35,46,2)
(63,46,2)
(22,7,2)
(46,58,2)
(8,26,2)
(62,55,2)
(23,0,2)
(37,46,2)
(21,25,2)
(28,12,2)
(26,38,2)
(14,46,2)
(28,8,2)
(61,18,2)
(62,0,2)
(25,36,2)
(61,46,2)
(41,23,2)
(15,23,2)
(28,46,2)
(45,58,2)
(39,46,2)
(6,46,2)
(46,28,2)
(18,46,2)
(33,46,2)
(0,22,2)
(47,25,2)
(61,33,2)
(46,46,2)
(61,0,2)
-----------------------------------
(0,pFile = fopen(filename, "w+")
(1,0)
(2,pFile)
(3,)
(4,NULL)
(5,i)
(6,i)
(7,*filename = "output_bad.txt")
(8,count = countArray[2])
(9,countArray)
(10,i)
(11,"w+")
(12,size_t)
(13,2)
(14,SENTENCE)
(15,exit(1)
(16,)
(17,*pFile = NULL)
(18,strlen(SENTENCE)
(19,pFile)
(20,pFile)
(21,exit(1)
(22,fopen(filename, "w+")
(23,pFile == NULL)
(24,)
(25,strlen(SENTENCE)
(26,countArray[2])
(27,count)
(28,(size_t)
(29,)
(30,0)
(31,i)
(32,i)
(33,sizeof(char)
(34,filename)
(35,count)
(36,strlen(SENTENCE)
(37,pFile)
(38,int countArray[])
(39,char)
(40,)
(41,1)
(42,i = 0)
(43,if (pFile == NULL)
(44,)
(45,i++)
(46,i < (size_t)
(47,1)
(48,count)
(49,pFile)
(50,filename)
(51,NULL)
(52,RET)
(53,for (i = 0; i < (size_t)
(54,filename)
(55,pFile)
(56,if (strlen(SENTENCE)
(57,"output_bad.txt")
(58,i = 0)
(59,SENTENCE)
(60,pFile)
(61,fwrite(SENTENCE, sizeof(char)
(62,fclose(pFile)
(63,SENTENCE)
(64,if (pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^