-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_34_bad()
{
    int count;
    CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
71,74
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,33,38,40,42,44,46,51,54,56,61,62,67,68,70,74,76,80,81,85,87,91,92
-----computeFrom-----
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
-----guardedBy-----
40,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_34_bad(){    int count;    CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_34_bad()
CWE400_Resource_Exhaustion__fgets_sleep_34_bad
{    int count;    CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType
CWE400_Resource_Exhaustion__fgets_sleep_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(32,16,0)
(17,28,0)
(20,35,0)
(25,41,0)
(16,41,0)
(3,22,0)
(11,19,0)
(14,2,0)
(10,30,0)
(39,14,0)
(6,34,0)
(9,19,0)
(38,30,0)
(21,2,0)
(36,30,0)
(12,2,0)
(5,14,0)
(15,30,0)
(2,18,0)
(41,25,0)
(30,14,0)
(1,41,0)
(17,5,0)
(19,18,0)
(30,10,0)
(13,18,0)
(27,14,0)
(37,18,0)
(4,7,0)
(24,22,0)
(16,18,0)
(5,17,0)
(0,11,0)
(40,35,0)
(22,9,0)
(9,22,0)
(8,19,0)
(42,17,0)
(33,5,0)
(34,23,0)
(31,9,0)
(7,19,0)
(16,17,0)
(41,18,0)
(7,9,0)
(29,25,0)
(35,16,0)
(43,10,0)
(6,10,1)
(35,20,1)
(3,24,1)
(9,22,1)
(7,4,1)
(40,17,1)
(16,17,1)
(30,15,1)
(39,41,1)
(30,14,1)
(25,29,1)
(10,30,1)
(38,14,1)
(36,38,1)
(40,34,1)
(32,35,1)
(5,14,1)
(16,41,1)
(27,39,1)
(5,33,1)
(15,36,1)
(42,10,1)
(20,40,1)
(41,25,1)
(26,11,1)
(0,7,1)
(22,3,1)
(10,43,1)
(4,9,1)
(16,32,1)
(29,1,1)
(24,31,1)
(33,42,1)
(11,0,1)
(31,16,1)
(43,30,1)
(17,5,1)
(34,6,1)
(7,9,1)
(14,27,1)
(34,10,2)
(41,25,2)
(10,30,2)
(5,10,2)
(5,14,2)
(16,41,2)
(9,22,2)
(16,17,2)
(42,10,2)
(17,10,2)
(6,10,2)
(33,10,2)
(30,14,2)
(7,9,2)
(17,5,2)
-----------------------------------
(0,"Sleep time possibly too long")
(1,count)
(2,)
(3,unionSecond)
(4,count)
(5,atoi(inputBuffer)
(6,"fgets()
(7,SLEEP(count)
(8,count)
(9,count = myUnion.unionSecond)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,printLine("Sleep time possibly too long")
(12,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,myUnion)
(14,inputBuffer[CHAR_ARRAY_SIZE] = "")
(15,stdin)
(16,myUnion.unionFirst = count)
(17,count = atoi(inputBuffer)
(18,)
(19,)
(20,unionFirst)
(21,inputBuffer)
(22,myUnion.unionSecond)
(23,)
(24,myUnion)
(25,-1)
(26,RET)
(27,"")
(28,)
(29,1)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,count)
(32,count)
(33,inputBuffer)
(34,printLine("fgets()
(35,myUnion.unionFirst)
(36,CHAR_ARRAY_SIZE)
(37,count)
(38,inputBuffer)
(39,inputBuffer)
(40,myUnion)
(41,count = -1)
(42,count)
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^