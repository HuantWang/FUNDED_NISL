-----label-----
1
-----code-----
static struct peer_svc *
peer_svc_add(struct peer *peer, const struct ble_gatt_svc *gatt_svc)
{
    struct peer_svc *prev;
    struct peer_svc *svc;

    svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);
    if (svc != NULL) {
        /* Service already discovered. */
        return svc;
    }

    svc = os_memblock_get(&peer_svc_pool);
    if (svc == NULL) {
        /* Out of memory. */
        return NULL;
    }
    memset(svc, 0, sizeof *svc);

    svc->svc = *gatt_svc;
    SLIST_INIT(&svc->chrs);

    if (prev == NULL) {
        SLIST_INSERT_HEAD(&peer->svcs, svc, next);
    } else {
        SLIST_INSERT_AFTER(prev, svc, next);
    }

    return svc;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
19,22
19,23
19,24
19,25
19,26
19,27
19,28
19,29
19,30
20,21
21,22
21,23
22,23
24,25
24,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
38,39
38,40
38,41
38,42
39,40
41,42
43,44
43,45
44,45
47,48
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
88,89
89,90
91,92
92,93
92,94
93,94
93,95
94,95
97,98
98,99
100,101
101,102
101,103
102,103
104,105
105,106
105,107
106,107
109,110
109,111
109,112
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
117,120
117,121
118,119
120,121
121,122
121,123
122,123
125,126
127,128
129,130
130,131
131,132
131,133
131,134
131,135
132,133
134,135
136,137
138,139
140,141
141,142
-----nextToken-----
3,5,6,9,11,12,15,17,18,23,25,26,30,32,33,37,40,42,45,46,49,53,55,59,63,66,69,73,75,79,83,85,86,90,95,96,99,103,107,108,112,114,119,123,124,126,128,133,135,137,139,142
-----computeFrom-----
35,36
35,37
51,52
51,53
61,62
61,63
71,72
71,73
92,93
92,94
110,111
110,112
-----guardedBy-----
53,59
75,79
-----guardedByNegation-----
112,135
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct peer_svc *peer_svc_add(struct peer *peer, const struct ble_gatt_svc *gatt_svc){    struct peer_svc *prev;    struct peer_svc *svc;    svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);    if (svc != NULL) {        /* Service already discovered. */        return svc;    }    svc = os_memblock_get(&peer_svc_pool);    if (svc == NULL) {        /* Out of memory. */        return NULL;    }    memset(svc, 0, sizeof *svc);    svc->svc = *gatt_svc;    SLIST_INIT(&svc->chrs);    if (prev == NULL) {        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    } else {        SLIST_INSERT_AFTER(prev, svc, next);    }    return svc;}
static struct peer_svc
peer_svc
*peer_svc_add(struct peer *peer, const struct ble_gatt_svc *gatt_svc)
*
peer_svc_add
struct peer *peer
struct peer
peer
*peer
*
peer
const struct ble_gatt_svc *gatt_svc
const struct ble_gatt_svc
ble_gatt_svc
*gatt_svc
*
gatt_svc
{    struct peer_svc *prev;    struct peer_svc *svc;    svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);    if (svc != NULL) {        /* Service already discovered. */        return svc;    }    svc = os_memblock_get(&peer_svc_pool);    if (svc == NULL) {        /* Out of memory. */        return NULL;    }    memset(svc, 0, sizeof *svc);    svc->svc = *gatt_svc;    SLIST_INIT(&svc->chrs);    if (prev == NULL) {        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    } else {        SLIST_INSERT_AFTER(prev, svc, next);    }    return svc;}
struct peer_svc *prev;
struct peer_svc *prev;
struct peer_svc
peer_svc
*prev
*
prev
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
svc = peer_svc_find(peer, gatt_svc->start_handle, &prev);
svc = peer_svc_find(peer, gatt_svc->start_handle, &prev)
svc
svc
peer_svc_find(peer, gatt_svc->start_handle, &prev)
peer_svc_find
peer_svc_find
peer
peer
gatt_svc->start_handle
gatt_svc
gatt_svc
start_handle
&prev
prev
prev
if (svc != NULL) {        /* Service already discovered. */        return svc;    }
svc != NULL
svc
svc
NULL
NULL
{        /* Service already discovered. */        return svc;    }
return svc;
svc
svc
svc = os_memblock_get(&peer_svc_pool);
svc = os_memblock_get(&peer_svc_pool)
svc
svc
os_memblock_get(&peer_svc_pool)
os_memblock_get
os_memblock_get
&peer_svc_pool
peer_svc_pool
peer_svc_pool
if (svc == NULL) {        /* Out of memory. */        return NULL;    }
svc == NULL
svc
svc
NULL
NULL
{        /* Out of memory. */        return NULL;    }
return NULL;
NULL
NULL
memset(svc, 0, sizeof *svc);
memset(svc, 0, sizeof *svc)
memset
memset
svc
svc
0
sizeof *svc
*svc
svc
svc
svc->svc = *gatt_svc;
svc->svc = *gatt_svc
svc->svc
svc
svc
svc
*gatt_svc
gatt_svc
gatt_svc
SLIST_INIT(&svc->chrs);
SLIST_INIT(&svc->chrs)
SLIST_INIT
SLIST_INIT
&svc->chrs
svc->chrs
svc
svc
chrs
if (prev == NULL) {        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    } else {        SLIST_INSERT_AFTER(prev, svc, next);    }
prev == NULL
prev
prev
NULL
NULL
{        SLIST_INSERT_HEAD(&peer->svcs, svc, next);    }
SLIST_INSERT_HEAD(&peer->svcs, svc, next);
SLIST_INSERT_HEAD(&peer->svcs, svc, next)
SLIST_INSERT_HEAD
SLIST_INSERT_HEAD
&peer->svcs
peer->svcs
peer
peer
svcs
svc
svc
next
next
{        SLIST_INSERT_AFTER(prev, svc, next);    }
SLIST_INSERT_AFTER(prev, svc, next);
SLIST_INSERT_AFTER(prev, svc, next)
SLIST_INSERT_AFTER
SLIST_INSERT_AFTER
prev
prev
svc
svc
next
next
return svc;
svc
svc
-----joern-----
(35,0,0)
(59,66,0)
(67,32,0)
(41,48,0)
(8,50,0)
(57,0,0)
(29,17,0)
(24,62,0)
(64,49,0)
(54,1,0)
(55,11,0)
(16,32,0)
(69,64,0)
(65,31,0)
(50,21,0)
(32,50,0)
(61,44,0)
(58,30,0)
(15,8,0)
(32,67,0)
(66,1,0)
(50,45,0)
(2,50,0)
(38,17,0)
(28,65,0)
(6,64,0)
(2,55,0)
(47,2,0)
(25,62,0)
(52,60,0)
(0,50,0)
(54,17,0)
(17,38,0)
(35,43,0)
(13,12,0)
(41,12,0)
(8,67,0)
(2,5,0)
(38,45,0)
(51,45,0)
(36,50,0)
(48,45,0)
(12,39,0)
(21,50,0)
(31,45,0)
(17,54,0)
(43,35,0)
(62,38,0)
(3,56,0)
(66,31,0)
(18,50,0)
(65,50,0)
(0,35,0)
(42,56,0)
(33,11,0)
(17,30,0)
(12,38,0)
(31,66,0)
(21,44,0)
(17,34,0)
(20,2,0)
(68,54,0)
(10,0,0)
(40,32,0)
(55,2,0)
(48,50,0)
(37,38,0)
(60,26,0)
(43,45,0)
(64,50,0)
(44,21,0)
(19,45,0)
(4,36,0)
(53,48,0)
(32,45,0)
(22,65,0)
(27,36,0)
(30,17,0)
(23,11,0)
(46,45,0)
(7,45,0)
(11,34,0)
(11,55,0)
(14,54,0)
(41,60,0)
(63,45,0)
(67,8,0)
(9,64,0)
(44,61,1)
(30,58,1)
(56,3,1)
(53,2,1)
(64,9,1)
(62,25,1)
(65,50,1)
(55,11,1)
(43,35,1)
(12,38,1)
(8,50,1)
(17,34,1)
(32,50,1)
(0,10,1)
(41,48,1)
(57,31,1)
(18,62,1)
(60,52,1)
(67,8,1)
(33,56,1)
(11,23,1)
(23,33,1)
(47,55,1)
(62,38,1)
(17,30,1)
(16,36,1)
(66,59,1)
(6,56,1)
(61,18,1)
(20,47,1)
(65,28,1)
(2,55,1)
(64,50,1)
(25,24,1)
(52,36,1)
(21,44,1)
(12,13,1)
(29,37,1)
(2,50,1)
(48,50,1)
(28,22,1)
(9,69,1)
(4,50,1)
(31,66,1)
(13,62,1)
(22,32,1)
(15,40,1)
(48,53,1)
(24,38,1)
(68,14,1)
(3,42,1)
(69,6,1)
(8,15,1)
(35,0,1)
(54,1,1)
(10,57,1)
(36,50,1)
(58,54,1)
(40,16,1)
(11,34,1)
(54,68,1)
(42,43,1)
(27,4,1)
(0,50,1)
(66,1,1)
(32,67,1)
(41,60,1)
(38,17,1)
(41,12,1)
(14,29,1)
(2,20,1)
(53,64,1)
(36,27,1)
(50,21,1)
(59,65,1)
(17,54,1)
(52,36,2)
(2,56,2)
(15,36,2)
(35,0,2)
(66,1,2)
(44,62,2)
(66,36,2)
(57,36,2)
(8,36,2)
(17,30,2)
(69,56,2)
(21,62,2)
(60,36,2)
(11,34,2)
(3,36,2)
(59,36,2)
(0,36,2)
(65,50,2)
(31,66,2)
(18,62,2)
(11,56,2)
(36,50,2)
(48,50,2)
(23,56,2)
(36,62,2)
(67,8,2)
(64,50,2)
(17,34,2)
(65,36,2)
(6,56,2)
(64,56,2)
(13,62,2)
(55,56,2)
(41,60,2)
(20,56,2)
(42,36,2)
(48,36,2)
(4,62,2)
(32,50,2)
(50,21,2)
(50,62,2)
(67,36,2)
(22,36,2)
(8,50,2)
(35,36,2)
(53,36,2)
(61,62,2)
(33,56,2)
(21,44,2)
(2,50,2)
(40,36,2)
(41,48,2)
(0,50,2)
(10,36,2)
(47,56,2)
(12,38,2)
(56,36,2)
(31,36,2)
(41,12,2)
(17,54,2)
(16,36,2)
(28,36,2)
(38,17,2)
(12,62,2)
(27,62,2)
(62,38,2)
(55,11,2)
(32,67,2)
(9,56,2)
(43,36,2)
(43,35,2)
(32,36,2)
(54,1,2)
(2,55,2)
-----------------------------------
(0,svc->chrs)
(1,const struct ble_gatt_svc *gatt_svc)
(2,SLIST_INSERT_HEAD(&peer->svcs, svc, next)
(3,NULL)
(4,svc)
(5,)
(6,prev)
(7,if (svc != NULL)
(8,*svc)
(9,next)
(10,chrs)
(11,peer->svcs)
(12,return svc;)
(13,svc)
(14,gatt_svc)
(15,svc)
(16,svc)
(17,peer_svc_find(peer, gatt_svc->start_handle, &prev)
(18,svc)
(19,if (prev == NULL)
(20,next)
(21,os_memblock_get(&peer_svc_pool)
(22,svc)
(23,svcs)
(24,svc)
(25,NULL)
(26,)
(27,NULL)
(28,svc)
(29,peer)
(30,&prev)
(31,svc->svc = *gatt_svc)
(32,memset(svc, 0, sizeof *svc)
(33,peer)
(34,struct peer *peer)
(35,&svc->chrs)
(36,svc == NULL)
(37,svc)
(38,svc = peer_svc_find(peer, gatt_svc->start_handle, &prev)
(39,)
(40,0)
(41,RET)
(42,prev)
(43,SLIST_INIT(&svc->chrs)
(44,&peer_svc_pool)
(45,)
(46,if (svc == NULL)
(47,svc)
(48,return svc;)
(49,)
(50,svc = os_memblock_get(&peer_svc_pool)
(51,prev)
(52,NULL)
(53,svc)
(54,gatt_svc->start_handle)
(55,&peer->svcs)
(56,prev == NULL)
(57,svc)
(58,prev)
(59,gatt_svc)
(60,return NULL;)
(61,peer_svc_pool)
(62,svc != NULL)
(63,svc)
(64,SLIST_INSERT_AFTER(prev, svc, next)
(65,svc->svc)
(66,*gatt_svc)
(67,sizeof *svc)
(68,start_handle)
(69,svc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^