-----label-----
0
-----code-----
static int send_noncontig_pkt(MPIDI_VC_t *vc, MPID_Request *sreq, void **vhdr_p, int *complete)
{
    int mpi_errno = MPI_SUCCESS;
    MPID_nem_ptl_sendbuf_t *sb;
    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
    int ret;
    MPIDI_msg_sz_t last;
    MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;
    MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);

    MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);

    *complete = 0;
    MPID_nem_ptl_init_req(sreq);

    if (!vc_ptl->id_initialized) {
        mpi_errno = MPID_nem_ptl_init_id(vc);
        if (mpi_errno) MPIU_ERR_POP(mpi_errno);
    }

    if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {
        /* send header and first chunk of data */
        FREE_POP(&sb);
        sb->buf.hp.hdr = **hdr_p;

        MPIU_Assert(sreq->dev.segment_first == 0);

        last = sreq->dev.segment_size;
        if (last > PTL_MAX_EAGER)
            last = PTL_MAX_EAGER;
        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);
        ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,
                                    MPIDI_Process.my_pg_rank, 1);
        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",
                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,
                                                vc_ptl->ptc, sb));
        *vhdr_p = NULL;

        if (last == sreq->dev.segment_size) {
            *complete = 1;
            goto fn_exit;
        }
        
        /* send additional data chunks */
        sreq->dev.segment_first = last;

        while (!FREE_EMPTY()) {
            FREE_POP(&sb);
            
            last = sreq->dev.segment_size;
            if (last > sreq->dev.segment_first+BUFLEN)
                last = sreq->dev.segment_first+BUFLEN;

            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);
            sreq->dev.segment_first = last;
            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,
                                        MPIDI_Process.my_pg_rank, 1);
            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",
                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,
                                                    vc_ptl->ptc, sb));

            if (last == sreq->dev.segment_size) {
                *complete = 1;
                goto fn_exit;
            }
        }
    }

 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
19,22
23,24
23,25
25,26
25,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
28,36
28,37
28,38
28,39
28,40
28,41
28,42
28,43
29,30
30,31
30,32
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
72,76
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
84,85
86,87
87,88
87,89
88,89
90,91
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
102,103
105,106
106,107
106,108
107,108
109,110
111,112
111,113
112,113
113,114
113,115
114,115
117,118
117,119
118,119
119,120
119,121
120,121
122,123
122,124
123,124
125,126
127,128
127,129
128,129
130,131
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
139,140
141,142
143,144
144,145
145,146
147,148
147,149
147,150
147,151
147,152
147,153
147,154
147,155
147,156
147,157
147,158
147,159
147,160
148,149
149,150
149,151
150,151
152,153
153,154
155,156
156,157
156,158
157,158
157,159
158,159
158,160
159,160
159,161
160,161
165,166
166,167
167,168
169,170
170,171
170,172
171,172
173,174
173,175
174,175
174,176
175,176
175,177
176,177
181,182
182,183
182,184
183,184
185,186
185,187
186,187
186,188
187,188
191,192
191,193
192,193
192,194
193,194
195,196
197,198
198,199
198,200
199,200
201,202
203,204
204,205
204,206
204,207
204,208
204,209
204,210
205,206
207,208
207,209
208,209
208,210
209,210
214,215
216,217
216,218
217,218
217,219
218,219
218,220
219,220
224,225
225,226
225,227
226,227
226,228
227,228
227,229
228,229
230,231
234,235
235,236
235,237
236,237
238,239
238,240
238,241
238,242
238,243
238,244
238,245
238,246
238,247
238,248
238,249
238,250
239,240
241,242
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
249,251
250,251
254,255
254,256
255,256
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
265,266
267,268
269,270
269,271
270,271
273,274
273,275
274,275
279,280
281,282
281,283
282,283
286,287
287,288
287,289
287,290
287,291
287,292
287,293
287,294
288,289
290,291
292,293
294,295
298,299
298,300
299,300
301,302
303,304
304,305
304,306
304,307
304,308
305,306
307,308
309,310
311,312
312,313
312,314
312,315
312,316
312,317
312,318
312,319
313,314
316,317
316,318
317,318
318,319
319,320
319,321
320,321
320,322
321,322
321,323
322,323
327,328
329,330
329,331
330,331
330,332
331,332
331,333
332,333
337,338
337,339
338,339
338,340
339,340
339,341
340,341
345,346
345,347
346,347
349,350
351,352
352,353
352,354
353,354
354,355
356,357
358,359
358,360
359,360
359,361
360,361
362,363
362,364
363,364
363,365
364,365
368,369
368,370
369,370
370,371
370,372
371,372
372,373
375,376
377,378
378,379
378,380
379,380
379,381
380,381
380,382
381,382
385,386
387,388
387,389
388,389
389,390
390,391
392,393
392,394
392,395
392,396
392,397
392,398
392,399
392,400
392,401
393,394
394,395
394,396
395,396
397,398
398,399
400,401
401,402
401,403
402,403
404,405
404,406
405,406
405,407
406,407
410,411
410,412
411,412
411,413
412,413
414,415
414,416
415,416
415,417
416,417
416,418
417,418
421,422
423,424
424,425
424,426
425,426
427,428
427,429
428,429
428,430
429,430
429,431
430,431
434,435
436,437
437,438
437,439
437,440
437,441
437,442
437,443
438,439
440,441
440,442
441,442
441,443
442,443
446,447
446,448
447,448
447,449
448,449
452,453
454,455
454,456
455,456
455,457
456,457
460,461
461,462
461,463
462,463
462,464
463,464
463,465
464,465
466,467
470,471
471,472
471,473
472,473
472,474
473,474
473,475
474,475
478,479
480,481
481,482
481,483
482,483
484,485
484,486
484,487
484,488
484,489
484,490
484,491
484,492
484,493
484,494
484,495
484,496
485,486
487,488
489,490
489,491
490,491
490,492
491,492
494,495
494,496
495,496
495,497
496,497
500,501
500,502
501,502
503,504
503,505
504,505
504,506
505,506
509,510
511,512
511,513
512,513
515,516
515,517
516,517
521,522
523,524
523,525
524,525
528,529
529,530
529,531
529,532
529,533
529,534
529,535
529,536
530,531
532,533
534,535
536,537
540,541
540,542
541,542
543,544
545,546
546,547
546,548
546,549
546,550
547,548
549,550
551,552
553,554
554,555
554,556
554,557
554,558
554,559
554,560
554,561
555,556
558,559
558,560
559,560
561,562
561,563
562,563
562,564
563,564
567,568
567,569
568,569
568,570
569,570
569,571
570,571
575,576
575,577
576,577
576,578
577,578
577,579
578,579
583,584
583,585
584,585
587,588
589,590
589,591
590,591
590,592
591,592
593,594
593,595
594,595
594,596
595,596
599,600
599,601
600,601
601,602
601,603
602,603
603,604
606,607
608,609
608,610
610,611
611,612
611,613
612,613
614,615
616,617
617,618
619,620
619,621
621,622
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,22,24,26,27,31,33,36,40,42,43,47,49,50,54,56,59,61,65,67,71,73,74,75,80,82,83,85,89,92,96,98,103,104,108,110,115,116,121,124,126,129,133,135,140,142,146,151,154,161,162,163,164,168,172,177,178,179,180,184,188,189,190,194,196,200,202,206,210,211,212,213,215,220,221,222,223,229,231,232,233,237,240,242,246,247,251,252,253,261,262,263,264,266,268,271,272,275,276,277,278,280,283,284,285,289,291,293,295,296,297,300,302,306,308,310,314,315,323,324,325,326,328,333,334,335,336,341,342,343,344,347,348,350,355,357,361,365,366,367,373,374,376,382,383,384,386,391,396,399,403,407,408,409,413,418,419,420,422,426,431,432,433,435,439,443,444,445,449,450,451,453,457,458,459,465,467,468,469,475,476,477,479,483,486,488,492,493,497,498,499,502,506,507,508,510,513,514,517,518,519,520,522,525,526,527,531,533,535,537,538,539,542,544,548,550,552,556,557,560,564,565,566,571,572,573,574,579,580,581,582,585,586,588,592,596,597,598,604,605,607,609,613,615,618,620,622
-----computeFrom-----
100,101
100,102
119,120
119,121
137,138
137,139
156,157
156,158
173,174
173,175
182,183
182,184
192,193
192,194
198,199
198,200
235,236
235,237
254,255
254,256
316,317
316,318
352,353
352,354
359,360
359,361
370,371
370,372
378,379
378,380
401,402
401,403
411,412
411,413
414,415
414,416
424,425
424,426
427,428
427,429
471,472
471,473
481,482
481,483
500,501
500,502
558,559
558,560
590,591
590,592
601,602
601,603
-----guardedBy-----
146,391
194,200
196,202
413,426
419,432
422,435
418,431
420,433
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;WhileStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ExpressionList;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int send_noncontig_pkt(MPIDI_VC_t *vc, MPID_Request *sreq, void **vhdr_p, int *complete){    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_sendbuf_t *sb;    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);    int ret;    MPIDI_msg_sz_t last;    MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;    MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);    MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);    *complete = 0;    MPID_nem_ptl_init_req(sreq);    if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }    if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
send_noncontig_pkt(MPIDI_VC_t *vc, MPID_Request *sreq, void **vhdr_p, int *complete)
send_noncontig_pkt
MPIDI_VC_t *vc
MPIDI_VC_t
MPIDI_VC_t
*vc
*
vc
MPID_Request *sreq
MPID_Request
MPID_Request
*sreq
*
sreq
void **vhdr_p
void
**vhdr_p
*
*
vhdr_p
int *complete
int
*complete
*
complete
{    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_sendbuf_t *sb;    MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);    int ret;    MPIDI_msg_sz_t last;    MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;    MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);    MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);    *complete = 0;    MPID_nem_ptl_init_req(sreq);    if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }    if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
MPID_nem_ptl_sendbuf_t *sb;
MPID_nem_ptl_sendbuf_t *sb;
MPID_nem_ptl_sendbuf_t
MPID_nem_ptl_sendbuf_t
*sb
*
sb
MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
MPID_nem_ptl_vc_area *const vc_ptl = VC_PTL(vc);
MPID_nem_ptl_vc_area
MPID_nem_ptl_vc_area
*const vc_ptl = VC_PTL(vc)
*const
vc_ptl
= VC_PTL(vc)
VC_PTL(vc)
VC_PTL
VC_PTL
vc
vc
int ret;
int ret;
int
ret
ret
MPIDI_msg_sz_t last;
MPIDI_msg_sz_t last;
MPIDI_msg_sz_t
MPIDI_msg_sz_t
last
last
MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;
MPIDI_CH3_Pkt_t **hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p;
MPIDI_CH3_Pkt_t
MPIDI_CH3_Pkt_t
**hdr_p = (MPIDI_CH3_Pkt_t **)vhdr_p
*
*
hdr_p
= (MPIDI_CH3_Pkt_t **)vhdr_p
(MPIDI_CH3_Pkt_t **)vhdr_p
MPIDI_CH3_Pkt_t **
MPIDI_CH3_Pkt_t
MPIDI_CH3_Pkt_t
**
*
*
vhdr_p
vhdr_p
MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_SEND_NONCONTIG_PKT)
MPID_STATE_SEND_NONCONTIG_PKT
MPID_STATE_SEND_NONCONTIG_PKT
MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_SEND_NONCONTIG_PKT
MPID_STATE_SEND_NONCONTIG_PKT
*complete = 0;
*complete = 0
*complete
complete
complete
0
MPID_nem_ptl_init_req(sreq);
MPID_nem_ptl_init_req(sreq)
MPID_nem_ptl_init_req
MPID_nem_ptl_init_req
sreq
sreq
if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }
!vc_ptl->id_initialized
vc_ptl->id_initialized
vc_ptl
vc_ptl
id_initialized
{        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }
mpi_errno = MPID_nem_ptl_init_id(vc);
mpi_errno = MPID_nem_ptl_init_id(vc)
mpi_errno
mpi_errno
MPID_nem_ptl_init_id(vc)
MPID_nem_ptl_init_id
MPID_nem_ptl_init_id
vc
vc
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
if (MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    }
MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()
MPIDI_CH3I_Sendq_empty(send_queue)
MPIDI_CH3I_Sendq_empty
MPIDI_CH3I_Sendq_empty
send_queue
send_queue
!FREE_EMPTY()
FREE_EMPTY()
FREE_EMPTY
FREE_EMPTY
{        /* send header and first chunk of data */        FREE_POP(&sb);        sb->buf.hp.hdr = **hdr_p;        MPIU_Assert(sreq->dev.segment_first == 0);        last = sreq->dev.segment_size;        if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;        MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);        ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));        *vhdr_p = NULL;        if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }                /* send additional data chunks */        sreq->dev.segment_first = last;        while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }    }
FREE_POP(&sb);
FREE_POP(&sb)
FREE_POP
FREE_POP
&sb
sb
sb
sb->buf.hp.hdr = **hdr_p;
sb->buf.hp.hdr = **hdr_p
sb->buf.hp.hdr
sb->buf.hp
sb->buf
sb
sb
buf
hp
hdr
**hdr_p
*hdr_p
hdr_p
hdr_p
MPIU_Assert(sreq->dev.segment_first == 0);
MPIU_Assert(sreq->dev.segment_first == 0)
MPIU_Assert
MPIU_Assert
sreq->dev.segment_first == 0
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
0
last = sreq->dev.segment_size;
last = sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
if (last > PTL_MAX_EAGER)            last = PTL_MAX_EAGER;
last > PTL_MAX_EAGER
last
last
PTL_MAX_EAGER
PTL_MAX_EAGER
last = PTL_MAX_EAGER;
last = PTL_MAX_EAGER
last
last
PTL_MAX_EAGER
PTL_MAX_EAGER
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0]);
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)->overflow[0])
MPI_nem_ptl_pack_byte
MPI_nem_ptl_pack_byte
sreq->dev.segment_ptr
sreq->dev
sreq
sreq
dev
segment_ptr
0
last
last
sb->buf.hp.payload
sb->buf.hp
sb->buf
sb
sb
buf
hp
payload
&REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow
REQ_PTL(sreq)
REQ_PTL
REQ_PTL
sreq
sreq
overflow
0
ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1);
ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1)
ret
ret
MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, sizeof(sb->buf.hp.hdr) + last, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                    MPIDI_Process.my_pg_rank, 1)
MPID_nem_ptl_rptl_put
MPID_nem_ptl_rptl_put
MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
(ptl_size_t)sb->buf.p
ptl_size_t
ptl_size_t
ptl_size_t

sb->buf.p
sb->buf
sb
sb
buf
p
sizeof(sb->buf.hp.hdr) + last
sizeof(sb->buf.hp.hdr)
(sb->buf.hp.hdr)
sb->buf.hp.hdr
sb->buf.hp
sb->buf
sb
sb
buf
hp
hdr
last
last
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
vc_ptl->id
vc_ptl
vc_ptl
id
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
0
0
sb
sb
MPIDI_Process.my_pg_rank
MPIDI_Process
MPIDI_Process
my_pg_rank
1
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlput"
"**ptlput %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb));
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb))
MPIU_DBG_MSG_FMT
MPIU_DBG_MSG_FMT
CH3_CHANNEL
CH3_CHANNEL
VERBOSE
VERBOSE
(MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb)
MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                sizeof(sb->buf.hp.hdr) + last, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                vc_ptl->ptc, sb
MPIU_DBG_FDEST
MPIU_DBG_FDEST
"MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p"
sizeof(sb->buf.hp.hdr) + last
sizeof(sb->buf.hp.hdr)
(sb->buf.hp.hdr)
sb->buf.hp.hdr
sb->buf.hp
sb->buf
sb
sb
buf
hp
hdr
last
last
vc_ptl->id.phys.nid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
nid
vc_ptl->id.phys.pid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
pid
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
sb
sb
*vhdr_p = NULL;
*vhdr_p = NULL
*vhdr_p
vhdr_p
vhdr_p
NULL
NULL
if (last == sreq->dev.segment_size) {            *complete = 1;            goto fn_exit;        }
last == sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
{            *complete = 1;            goto fn_exit;        }
*complete = 1;
*complete = 1
*complete
complete
complete
1
goto fn_exit;
fn_exit
sreq->dev.segment_first = last;
sreq->dev.segment_first = last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
while (!FREE_EMPTY()) {            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }
!FREE_EMPTY()
FREE_EMPTY()
FREE_EMPTY
FREE_EMPTY
{            FREE_POP(&sb);                        last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            sreq->dev.segment_first = last;            ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);            MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));            MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));            if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }        }
FREE_POP(&sb);
FREE_POP(&sb)
FREE_POP
FREE_POP
&sb
sb
sb
last = sreq->dev.segment_size;
last = sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
if (last > sreq->dev.segment_first+BUFLEN)                last = sreq->dev.segment_first+BUFLEN;
last > sreq->dev.segment_first+BUFLEN
last
last
sreq->dev.segment_first+BUFLEN
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
BUFLEN
BUFLEN
last = sreq->dev.segment_first+BUFLEN;
last = sreq->dev.segment_first+BUFLEN
last
last
sreq->dev.segment_first+BUFLEN
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
BUFLEN
BUFLEN
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0])
MPI_nem_ptl_pack_byte
MPI_nem_ptl_pack_byte
sreq->dev.segment_ptr
sreq->dev
sreq
sreq
dev
segment_ptr
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
sb->buf.p
sb->buf
sb
sb
buf
p
&REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow
REQ_PTL(sreq)
REQ_PTL
REQ_PTL
sreq
sreq
overflow
0
sreq->dev.segment_first = last;
sreq->dev.segment_first = last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1);
ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1)
ret
ret
MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, last - sreq->dev.segment_first, PTL_NO_ACK_REQ, vc_ptl->id, vc_ptl->ptc, 0, 0, sb,                                        MPIDI_Process.my_pg_rank, 1)
MPID_nem_ptl_rptl_put
MPID_nem_ptl_rptl_put
MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
(ptl_size_t)sb->buf.p
ptl_size_t
ptl_size_t
ptl_size_t

sb->buf.p
sb->buf
sb
sb
buf
p
last - sreq->dev.segment_first
last
last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
vc_ptl->id
vc_ptl
vc_ptl
id
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
0
0
sb
sb
MPIDI_Process.my_pg_rank
MPIDI_Process
MPIDI_Process
my_pg_rank
1
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlput"
"**ptlput %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb));
MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb))
MPIU_DBG_MSG_FMT
MPIU_DBG_MSG_FMT
CH3_CHANNEL
CH3_CHANNEL
VERBOSE
VERBOSE
(MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb)
MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p",                                                    last - sreq->dev.segment_first, vc_ptl->id.phys.nid, vc_ptl->id.phys.pid,                                                    vc_ptl->ptc, sb
MPIU_DBG_FDEST
MPIU_DBG_FDEST
"MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x) pt=%#x) sb=%p"
last - sreq->dev.segment_first
last
last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
vc_ptl->id.phys.nid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
nid
vc_ptl->id.phys.pid
vc_ptl->id.phys
vc_ptl->id
vc_ptl
vc_ptl
id
phys
pid
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
sb
sb
if (last == sreq->dev.segment_size) {                *complete = 1;                goto fn_exit;            }
last == sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
{                *complete = 1;                goto fn_exit;            }
*complete = 1;
*complete = 1
*complete
complete
complete
1
goto fn_exit;
fn_exit
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT);
MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_SEND_NONCONTIG_PKT
MPID_STATE_SEND_NONCONTIG_PKT
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(146,340,0)
(273,72,0)
(321,170,0)
(213,196,0)
(275,246,0)
(378,138,0)
(3,1,0)
(169,290,0)
(359,12,0)
(106,21,0)
(201,363,0)
(344,146,0)
(26,234,0)
(85,231,0)
(127,121,0)
(115,310,0)
(345,266,0)
(328,288,0)
(299,55,0)
(347,146,0)
(244,138,0)
(308,241,0)
(340,310,0)
(14,243,0)
(155,121,0)
(283,54,0)
(32,210,0)
(11,79,0)
(130,60,0)
(76,174,0)
(121,8,0)
(342,363,0)
(161,15,0)
(156,314,0)
(258,34,0)
(243,87,0)
(92,265,0)
(261,28,0)
(307,55,0)
(66,231,0)
(72,283,0)
(365,225,0)
(118,240,0)
(234,1,0)
(54,283,0)
(173,200,0)
(336,209,0)
(348,224,0)
(280,209,0)
(327,194,0)
(316,210,0)
(238,231,0)
(277,1,0)
(170,321,0)
(74,257,0)
(171,363,0)
(38,220,0)
(159,378,0)
(279,253,0)
(121,172,0)
(81,55,0)
(191,231,0)
(120,240,0)
(208,101,0)
(119,273,0)
(5,170,0)
(295,95,0)
(354,160,0)
(360,197,0)
(259,143,0)
(303,351,0)
(57,231,0)
(189,90,0)
(54,340,0)
(132,55,0)
(200,46,0)
(225,365,0)
(209,58,0)
(112,319,0)
(228,148,0)
(273,119,0)
(223,144,0)
(317,1,0)
(75,319,0)
(208,356,0)
(115,189,0)
(134,53,0)
(146,101,0)
(166,148,0)
(241,308,0)
(366,157,0)
(265,145,0)
(250,310,0)
(68,226,0)
(65,339,0)
(126,325,0)
(200,138,0)
(249,43,0)
(79,113,0)
(287,15,0)
(193,119,0)
(214,241,0)
(368,213,0)
(164,292,0)
(181,217,0)
(364,256,0)
(139,365,0)
(318,74,0)
(129,138,0)
(147,363,0)
(58,369,0)
(309,83,0)
(114,82,0)
(123,310,0)
(110,359,0)
(71,54,0)
(22,353,0)
(301,121,0)
(33,39,0)
(219,160,0)
(101,257,0)
(154,296,0)
(229,145,0)
(103,286,0)
(16,209,0)
(332,340,0)
(69,129,0)
(343,239,0)
(137,235,0)
(65,221,0)
(220,25,0)
(224,107,0)
(220,208,0)
(237,208,0)
(126,231,0)
(298,159,0)
(185,310,0)
(195,321,0)
(143,130,0)
(377,54,0)
(352,348,0)
(350,180,0)
(80,313,0)
(4,370,0)
(294,363,0)
(141,172,0)
(187,156,0)
(208,340,0)
(290,294,0)
(63,231,0)
(174,309,0)
(324,231,0)
(93,13,0)
(247,193,0)
(231,324,0)
(358,344,0)
(338,66,0)
(370,4,0)
(100,83,0)
(320,60,0)
(143,363,0)
(244,106,0)
(55,286,0)
(348,352,0)
(24,376,0)
(202,322,0)
(179,1,0)
(284,196,0)
(264,349,0)
(294,374,0)
(257,286,0)
(59,259,0)
(233,290,0)
(209,8,0)
(4,138,0)
(221,39,0)
(162,348,0)
(266,259,0)
(196,286,0)
(13,93,0)
(12,359,0)
(373,296,0)
(323,233,0)
(278,133,0)
(5,354,0)
(146,344,0)
(129,34,0)
(288,328,0)
(90,189,0)
(199,313,0)
(275,166,0)
(339,289,0)
(67,345,0)
(254,143,0)
(245,1,0)
(304,244,0)
(305,1,0)
(57,72,0)
(125,182,0)
(372,211,0)
(47,87,0)
(263,209,0)
(55,277,0)
(207,101,0)
(145,1,0)
(186,351,0)
(156,353,0)
(133,254,0)
(344,138,0)
(306,161,0)
(281,370,0)
(197,343,0)
(177,277,0)
(18,115,0)
(360,374,0)
(46,200,0)
(105,160,0)
(104,71,0)
(31,254,0)
(35,283,0)
(111,185,0)
(50,339,0)
(210,246,0)
(251,4,0)
(190,194,0)
(312,225,0)
(334,378,0)
(224,348,0)
(70,93,0)
(226,231,0)
(285,121,0)
(176,209,0)
(254,133,0)
(193,138,0)
(313,233,0)
(86,282,0)
(48,21,0)
(128,211,0)
(21,159,0)
(340,363,0)
(160,354,0)
(21,286,0)
(5,294,0)
(374,360,0)
(202,370,0)
(119,193,0)
(232,302,0)
(8,363,0)
(113,79,0)
(233,313,0)
(268,50,0)
(43,249,0)
(106,101,0)
(140,360,0)
(189,363,0)
(194,364,0)
(371,235,0)
(36,352,0)
(66,286,0)
(51,292,0)
(259,266,0)
(117,209,0)
(208,220,0)
(126,330,0)
(221,65,0)
(7,84,0)
(364,194,0)
(146,74,0)
(283,72,0)
(333,344,0)
(256,289,0)
(58,209,0)
(163,53,0)
(89,143,0)
(8,209,0)
(271,55,0)
(222,106,0)
(42,273,0)
(255,12,0)
(62,231,0)
(121,79,0)
(236,129,0)
(375,55,0)
(282,171,0)
(260,212,0)
(235,138,0)
(375,66,0)
(108,345,0)
(367,196,0)
(205,352,0)
(256,364,0)
(19,221,0)
(342,217,0)
(20,224,0)
(166,275,0)
(175,119,0)
(276,15,0)
(322,202,0)
(55,66,0)
(87,243,0)
(0,375,0)
(374,294,0)
(322,21,0)
(253,209,0)
(133,138,0)
(149,356,0)
(151,82,0)
(64,373,0)
(186,167,0)
(11,277,0)
(362,1,0)
(144,79,0)
(231,126,0)
(230,193,0)
(6,280,0)
(88,356,0)
(15,287,0)
(53,50,0)
(217,292,0)
(29,286,0)
(240,332,0)
(331,231,0)
(329,361,0)
(248,25,0)
(315,1,0)
(215,343,0)
(41,256,0)
(91,200,0)
(291,1,0)
(296,373,0)
(216,28,0)
(153,84,0)
(21,13,0)
(235,90,0)
(142,87,0)
(84,363,0)
(343,197,0)
(96,5,0)
(252,164,0)
(231,302,0)
(78,1,0)
(266,345,0)
(351,98,0)
(297,361,0)
(346,72,0)
(197,1,0)
(21,322,0)
(121,363,0)
(90,235,0)
(257,157,0)
(353,156,0)
(211,225,0)
(330,126,0)
(34,101,0)
(242,1,0)
(95,167,0)
(7,355,0)
(124,354,0)
(28,157,0)
(121,277,0)
(102,365,0)
(157,28,0)
(44,121,0)
(157,257,0)
(106,340,0)
(136,202,0)
(83,100,0)
(246,107,0)
(99,266,0)
(326,93,0)
(332,240,0)
(30,277,0)
(270,182,0)
(107,128,0)
(15,294,0)
(185,243,0)
(165,164,0)
(321,310,0)
(40,376,0)
(28,138,0)
(116,226,0)
(109,11,0)
(9,1,0)
(74,146,0)
(74,72,0)
(21,257,0)
(172,121,0)
(376,213,0)
(302,231,0)
(23,186,0)
(95,349,0)
(325,126,0)
(287,115,0)
(356,208,0)
(54,101,0)
(292,217,0)
(192,1,0)
(49,324,0)
(143,254,0)
(231,66,0)
(217,342,0)
(340,189,0)
(34,340,0)
(143,259,0)
(21,106,0)
(356,138,0)
(2,330,0)
(269,241,0)
(354,5,0)
(60,359,0)
(148,166,0)
(204,280,0)
(231,57,0)
(203,11,0)
(46,101,0)
(289,40,0)
(378,159,0)
(45,71,0)
(11,1,0)
(61,46,0)
(265,167,0)
(288,286,0)
(227,90,0)
(171,282,0)
(311,13,0)
(150,296,0)
(343,355,0)
(341,328,0)
(178,257,0)
(209,115,0)
(158,218,0)
(34,129,0)
(188,275,0)
(94,32,0)
(60,130,0)
(349,212,0)
(183,192,0)
(292,164,0)
(359,60,0)
(101,72,0)
(365,363,0)
(370,202,0)
(240,138,0)
(57,257,0)
(83,309,0)
(55,375,0)
(168,148,0)
(82,161,0)
(243,185,0)
(291,138,0)
(274,189,0)
(272,209,0)
(152,65,0)
(54,71,0)
(290,233,0)
(12,138,0)
(77,79,0)
(300,98,0)
(353,1,0)
(239,343,0)
(267,364,0)
(74,40,0)
(17,133,0)
(209,280,0)
(373,58,0)
(209,182,0)
(172,8,0)
(135,363,0)
(231,226,0)
(143,310,0)
(113,314,0)
(161,82,0)
(56,143,0)
(369,58,0)
(21,72,0)
(196,213,0)
(198,57,0)
(79,180,0)
(73,253,0)
(97,378,0)
(273,257,0)
(164,138,0)
(34,57,0)
(37,166,0)
(115,287,0)
(293,244,0)
(184,197,0)
(361,330,0)
(209,253,0)
(206,324,0)
(52,39,0)
(131,8,0)
(27,340,0)
(335,7,0)
(115,209,0)
(143,189,0)
(330,361,0)
(106,244,0)
(185,189,0)
(122,291,0)
(379,32,0)
(101,286,0)
(319,189,0)
(10,113,0)
(71,138,0)
(87,138,0)
(39,221,0)
(13,21,0)
(337,332,0)
(130,143,0)
(15,161,0)
(321,189,0)
(182,209,0)
(309,174,0)
(159,21,0)
(25,257,0)
(58,373,0)
(25,220,0)
(55,79,0)
(321,128,0)
(218,1,0)
(57,34,0)
(357,302,0)
(170,5,0)
(19,39,1)
(335,365,1)
(208,356,1)
(308,241,1)
(144,79,1)
(249,273,1)
(266,99,1)
(185,189,1)
(92,234,1)
(0,307,1)
(249,340,1)
(203,192,1)
(234,26,1)
(310,250,1)
(86,309,1)
(151,114,1)
(188,166,1)
(129,236,1)
(185,310,1)
(244,293,1)
(154,150,1)
(127,285,1)
(74,257,1)
(8,209,1)
(59,266,1)
(271,299,1)
(192,183,1)
(74,146,1)
(181,292,1)
(187,22,1)
(96,354,1)
(143,189,1)
(231,126,1)
(360,140,1)
(273,119,1)
(243,14,1)
(172,141,1)
(24,368,1)
(137,371,1)
(99,345,1)
(83,100,1)
(340,27,1)
(155,301,1)
(149,88,1)
(332,337,1)
(146,344,1)
(2,361,1)
(85,57,1)
(11,79,1)
(293,304,1)
(351,303,1)
(133,17,1)
(36,321,1)
(183,43,1)
(321,170,1)
(256,364,1)
(270,125,1)
(45,104,1)
(131,143,1)
(55,375,1)
(91,173,1)
(321,310,1)
(79,113,1)
(21,13,1)
(360,197,1)
(291,138,1)
(115,189,1)
(35,54,1)
(205,36,1)
(300,351,1)
(352,205,1)
(126,325,1)
(231,57,1)
(110,12,1)
(140,290,1)
(60,359,1)
(236,69,1)
(42,196,1)
(230,247,1)
(294,374,1)
(15,294,1)
(121,277,1)
(250,123,1)
(146,347,1)
(126,330,1)
(102,121,1)
(324,49,1)
(161,82,1)
(129,138,1)
(6,336,1)
(183,300,1)
(157,28,1)
(372,312,1)
(370,281,1)
(82,151,1)
(100,174,1)
(26,218,1)
(93,70,1)
(88,248,1)
(261,178,1)
(143,259,1)
(106,244,1)
(57,257,1)
(274,342,1)
(377,71,1)
(232,357,1)
(74,72,1)
(94,379,1)
(311,93,1)
(95,295,1)
(113,314,1)
(16,253,1)
(159,378,1)
(219,372,1)
(295,273,1)
(264,95,1)
(55,79,1)
(209,280,1)
(134,163,1)
(231,226,1)
(367,284,1)
(343,355,1)
(224,348,1)
(71,45,1)
(259,266,1)
(142,47,1)
(144,223,1)
(172,8,1)
(162,352,1)
(244,138,1)
(10,77,1)
(4,251,1)
(353,156,1)
(296,154,1)
(133,138,1)
(34,129,1)
(227,235,1)
(202,136,1)
(354,160,1)
(186,23,1)
(106,222,1)
(143,254,1)
(62,226,1)
(51,164,1)
(275,188,1)
(174,76,1)
(65,221,1)
(41,364,1)
(233,313,1)
(235,138,1)
(321,195,1)
(238,338,1)
(54,340,1)
(346,25,1)
(143,310,1)
(206,191,1)
(75,189,1)
(370,4,1)
(108,67,1)
(111,84,1)
(87,138,1)
(217,292,1)
(307,81,1)
(38,208,1)
(152,221,1)
(319,112,1)
(67,89,1)
(200,138,1)
(208,340,1)
(39,33,1)
(191,331,1)
(224,20,1)
(176,182,1)
(5,294,1)
(195,170,1)
(58,373,1)
(340,189,1)
(229,265,1)
(72,283,1)
(101,72,1)
(21,72,1)
(209,16,1)
(177,30,1)
(273,72,1)
(66,231,1)
(44,155,1)
(170,5,1)
(280,204,1)
(122,145,1)
(240,138,1)
(375,66,1)
(55,277,1)
(156,187,1)
(22,277,1)
(356,138,1)
(90,235,1)
(223,262,1)
(243,87,1)
(14,87,1)
(259,59,1)
(34,340,1)
(334,25,1)
(287,15,1)
(231,302,1)
(348,352,1)
(277,177,1)
(123,319,1)
(214,269,1)
(183,260,1)
(197,343,1)
(15,276,1)
(186,167,1)
(124,160,1)
(156,314,1)
(247,42,1)
(313,80,1)
(334,72,1)
(136,370,1)
(101,257,1)
(148,228,1)
(240,120,1)
(323,313,1)
(13,93,1)
(251,13,1)
(357,85,1)
(330,361,1)
(13,311,1)
(7,355,1)
(183,78,1)
(146,101,1)
(209,182,1)
(57,34,1)
(263,131,1)
(217,181,1)
(47,111,1)
(76,144,1)
(221,39,1)
(34,101,1)
(291,122,1)
(207,46,1)
(145,229,1)
(23,185,1)
(309,83,1)
(46,61,1)
(68,116,1)
(292,164,1)
(375,0,1)
(173,21,1)
(221,19,1)
(80,199,1)
(347,344,1)
(254,133,1)
(327,190,1)
(32,94,1)
(340,310,1)
(90,227,1)
(182,270,1)
(284,55,1)
(318,24,1)
(345,108,1)
(378,138,1)
(306,82,1)
(326,48,1)
(254,31,1)
(260,349,1)
(283,35,1)
(194,327,1)
(373,296,1)
(268,53,1)
(69,198,1)
(106,340,1)
(166,148,1)
(58,369,1)
(61,200,1)
(282,86,1)
(253,73,1)
(159,298,1)
(119,193,1)
(28,138,1)
(46,200,1)
(189,90,1)
(341,43,1)
(163,65,1)
(12,138,1)
(198,126,1)
(233,323,1)
(241,214,1)
(349,264,1)
(196,213,1)
(106,101,1)
(371,274,1)
(97,334,1)
(248,257,1)
(101,207,1)
(15,161,1)
(322,202,1)
(226,68,1)
(89,56,1)
(255,259,1)
(258,129,1)
(153,7,1)
(361,329,1)
(18,287,1)
(49,206,1)
(5,96,1)
(231,324,1)
(279,117,1)
(281,4,1)
(158,197,1)
(12,255,1)
(37,148,1)
(202,370,1)
(292,51,1)
(25,220,1)
(343,239,1)
(321,189,1)
(7,335,1)
(366,28,1)
(331,62,1)
(265,167,1)
(116,302,1)
(115,310,1)
(365,316,1)
(104,346,1)
(25,257,1)
(273,257,1)
(73,279,1)
(303,186,1)
(208,101,1)
(84,153,1)
(290,169,1)
(328,341,1)
(76,308,1)
(34,258,1)
(54,101,1)
(77,308,1)
(115,287,1)
(309,174,1)
(139,102,1)
(299,132,1)
(48,106,1)
(27,332,1)
(231,63,1)
(193,138,1)
(297,238,1)
(265,92,1)
(209,58,1)
(266,345,1)
(368,367,1)
(63,324,1)
(168,224,1)
(208,237,1)
(209,115,1)
(359,12,1)
(190,74,1)
(121,79,1)
(166,37,1)
(312,139,1)
(218,158,1)
(365,225,1)
(95,167,1)
(200,91,1)
(143,130,1)
(344,333,1)
(132,66,1)
(228,168,1)
(330,2,1)
(262,79,1)
(54,377,1)
(257,157,1)
(5,354,1)
(337,240,1)
(114,58,1)
(278,310,1)
(71,138,1)
(319,189,1)
(21,159,1)
(342,217,1)
(343,215,1)
(290,233,1)
(220,38,1)
(178,288,1)
(354,124,1)
(171,282,1)
(21,106,1)
(209,253,1)
(160,105,1)
(348,162,1)
(320,359,1)
(285,44,1)
(252,165,1)
(60,320,1)
(54,71,1)
(298,378,1)
(146,340,1)
(338,101,1)
(65,152,1)
(379,275,1)
(115,18,1)
(269,291,1)
(21,257,1)
(169,233,1)
(359,110,1)
(216,261,1)
(70,326,1)
(31,133,1)
(28,216,1)
(118,185,1)
(43,249,1)
(53,134,1)
(199,171,1)
(165,294,1)
(113,10,1)
(332,240,1)
(316,32,1)
(105,219,1)
(141,127,1)
(304,159,1)
(184,353,1)
(109,11,1)
(56,254,1)
(333,358,1)
(161,306,1)
(220,208,1)
(374,360,1)
(21,322,1)
(87,142,1)
(222,244,1)
(183,309,1)
(364,194,1)
(121,172,1)
(117,272,1)
(164,252,1)
(157,366,1)
(193,230,1)
(112,75,1)
(336,115,1)
(275,166,1)
(373,64,1)
(11,277,1)
(125,280,1)
(204,6,1)
(4,138,1)
(175,193,1)
(64,296,1)
(11,203,1)
(237,356,1)
(358,318,1)
(185,243,1)
(301,8,1)
(150,263,1)
(235,137,1)
(215,184,1)
(130,60,1)
(52,256,1)
(256,41,1)
(120,118,1)
(17,278,1)
(378,97,1)
(81,271,1)
(278,319,1)
(364,267,1)
(276,161,1)
(76,262,1)
(267,194,1)
(196,268,1)
(329,297,1)
(272,176,1)
(288,328,1)
(302,232,1)
(356,149,1)
(344,138,1)
(55,66,1)
(164,138,1)
(20,348,1)
(57,72,1)
(119,175,1)
(121,8,1)
(283,54,1)
(33,52,1)
(27,185,2)
(14,309,2)
(57,257,2)
(57,43,2)
(74,146,2)
(374,309,2)
(287,309,2)
(36,309,2)
(42,43,2)
(288,328,2)
(301,309,2)
(299,43,2)
(185,310,2)
(209,253,2)
(10,308,2)
(298,43,2)
(60,359,2)
(108,309,2)
(186,167,2)
(197,343,2)
(294,374,2)
(114,309,2)
(143,189,2)
(332,240,2)
(87,138,2)
(198,43,2)
(235,309,2)
(276,309,2)
(125,309,2)
(66,231,2)
(18,309,2)
(307,43,2)
(65,221,2)
(44,309,2)
(20,309,2)
(375,66,2)
(360,197,2)
(342,309,2)
(115,309,2)
(54,71,2)
(188,309,2)
(143,309,2)
(326,43,2)
(33,43,2)
(256,43,2)
(191,43,2)
(206,43,2)
(141,309,2)
(162,309,2)
(240,185,2)
(365,309,2)
(343,355,2)
(23,185,2)
(370,4,2)
(365,225,2)
(129,43,2)
(332,185,2)
(11,79,2)
(43,185,2)
(97,43,2)
(209,115,2)
(302,43,2)
(379,309,2)
(319,309,2)
(115,287,2)
(57,34,2)
(157,43,2)
(375,43,2)
(91,43,2)
(105,309,2)
(99,309,2)
(337,185,2)
(43,249,2)
(164,309,2)
(189,309,2)
(106,244,2)
(268,43,2)
(273,72,2)
(61,43,2)
(83,174,2)
(366,43,2)
(63,43,2)
(378,138,2)
(284,43,2)
(287,15,2)
(249,185,2)
(58,373,2)
(24,43,2)
(126,325,2)
(354,309,2)
(330,43,2)
(146,101,2)
(112,309,2)
(178,43,2)
(143,310,2)
(258,43,2)
(46,200,2)
(373,296,2)
(153,309,2)
(185,243,2)
(296,309,2)
(196,43,2)
(148,309,2)
(74,257,2)
(154,309,2)
(54,101,2)
(0,43,2)
(140,309,2)
(101,43,2)
(271,43,2)
(216,43,2)
(304,43,2)
(81,43,2)
(113,314,2)
(261,43,2)
(17,309,2)
(338,43,2)
(52,43,2)
(161,309,2)
(163,43,2)
(321,309,2)
(209,58,2)
(224,309,2)
(120,185,2)
(156,314,2)
(13,43,2)
(278,309,2)
(309,174,2)
(48,43,2)
(21,322,2)
(316,309,2)
(209,280,2)
(104,25,2)
(227,309,2)
(166,309,2)
(186,185,2)
(185,189,2)
(209,182,2)
(280,309,2)
(346,25,2)
(136,43,2)
(202,43,2)
(53,43,2)
(21,159,2)
(288,43,2)
(348,352,2)
(231,324,2)
(209,309,2)
(159,43,2)
(155,309,2)
(84,309,2)
(95,167,2)
(68,43,2)
(41,43,2)
(146,43,2)
(15,161,2)
(300,185,2)
(257,157,2)
(251,43,2)
(344,43,2)
(354,160,2)
(7,309,2)
(266,309,2)
(195,309,2)
(349,273,2)
(377,25,2)
(101,72,2)
(130,309,2)
(228,309,2)
(74,72,2)
(371,309,2)
(56,309,2)
(275,309,2)
(12,309,2)
(243,87,2)
(13,93,2)
(71,138,2)
(270,309,2)
(173,43,2)
(25,43,2)
(342,217,2)
(257,43,2)
(25,220,2)
(7,355,2)
(259,309,2)
(131,309,2)
(303,185,2)
(8,209,2)
(38,43,2)
(74,43,2)
(28,43,2)
(309,83,2)
(159,378,2)
(77,308,2)
(150,309,2)
(47,309,2)
(341,43,2)
(308,241,2)
(126,330,2)
(224,348,2)
(43,273,2)
(115,310,2)
(231,226,2)
(87,309,2)
(119,43,2)
(86,309,2)
(344,138,2)
(164,138,2)
(31,309,2)
(166,148,2)
(244,43,2)
(267,43,2)
(356,43,2)
(236,43,2)
(273,119,2)
(254,133,2)
(157,28,2)
(320,309,2)
(217,292,2)
(193,43,2)
(15,309,2)
(95,273,2)
(37,309,2)
(34,340,2)
(240,138,2)
(330,361,2)
(116,43,2)
(143,130,2)
(219,309,2)
(221,39,2)
(169,309,2)
(243,309,2)
(106,101,2)
(273,257,2)
(340,189,2)
(250,319,2)
(247,43,2)
(70,43,2)
(34,101,2)
(119,193,2)
(88,43,2)
(230,43,2)
(275,166,2)
(360,309,2)
(293,43,2)
(151,309,2)
(67,309,2)
(312,309,2)
(172,8,2)
(72,283,2)
(121,8,2)
(34,43,2)
(2,43,2)
(12,138,2)
(321,189,2)
(45,25,2)
(256,364,2)
(121,309,2)
(333,43,2)
(4,43,2)
(290,309,2)
(133,138,2)
(58,309,2)
(71,25,2)
(182,309,2)
(139,309,2)
(220,208,2)
(318,43,2)
(282,309,2)
(124,309,2)
(322,43,2)
(231,57,2)
(6,309,2)
(238,43,2)
(374,360,2)
(364,43,2)
(94,309,2)
(59,309,2)
(281,43,2)
(85,43,2)
(295,273,2)
(222,43,2)
(190,43,2)
(328,43,2)
(126,43,2)
(294,309,2)
(79,308,2)
(291,138,2)
(28,138,2)
(55,66,2)
(170,309,2)
(32,309,2)
(62,43,2)
(248,43,2)
(249,273,2)
(60,309,2)
(11,277,2)
(196,213,2)
(283,54,2)
(208,340,2)
(347,43,2)
(123,319,2)
(25,257,2)
(233,313,2)
(65,43,2)
(335,309,2)
(319,189,2)
(137,309,2)
(133,309,2)
(321,310,2)
(220,43,2)
(149,43,2)
(55,375,2)
(142,309,2)
(109,11,2)
(231,43,2)
(55,43,2)
(121,277,2)
(66,43,2)
(130,60,2)
(168,309,2)
(259,266,2)
(64,309,2)
(57,72,2)
(233,309,2)
(100,174,2)
(327,43,2)
(368,43,2)
(292,164,2)
(358,43,2)
(4,138,2)
(352,309,2)
(359,12,2)
(279,309,2)
(79,113,2)
(336,309,2)
(226,43,2)
(221,43,2)
(331,43,2)
(170,5,2)
(90,309,2)
(217,309,2)
(93,43,2)
(356,138,2)
(34,129,2)
(89,309,2)
(345,309,2)
(208,356,2)
(231,302,2)
(115,189,2)
(208,43,2)
(146,344,2)
(101,257,2)
(205,309,2)
(72,25,2)
(46,43,2)
(106,43,2)
(5,309,2)
(121,172,2)
(90,235,2)
(16,309,2)
(15,294,2)
(51,309,2)
(313,309,2)
(200,43,2)
(96,309,2)
(146,340,2)
(323,309,2)
(204,309,2)
(292,309,2)
(263,309,2)
(199,309,2)
(235,138,2)
(102,309,2)
(181,309,2)
(69,43,2)
(8,309,2)
(82,309,2)
(253,309,2)
(175,43,2)
(21,257,2)
(255,309,2)
(5,294,2)
(260,273,2)
(283,25,2)
(252,309,2)
(185,309,2)
(364,194,2)
(35,25,2)
(285,309,2)
(144,79,2)
(202,370,2)
(310,319,2)
(49,43,2)
(21,43,2)
(176,309,2)
(351,185,2)
(208,101,2)
(274,309,2)
(273,43,2)
(343,239,2)
(134,43,2)
(244,138,2)
(21,106,2)
(39,43,2)
(329,43,2)
(373,309,2)
(361,43,2)
(118,185,2)
(311,43,2)
(297,43,2)
(357,43,2)
(266,345,2)
(306,309,2)
(117,309,2)
(322,202,2)
(340,185,2)
(165,309,2)
(152,43,2)
(237,43,2)
(378,43,2)
(200,138,2)
(58,369,2)
(144,262,2)
(161,82,2)
(262,308,2)
(232,43,2)
(75,309,2)
(160,309,2)
(143,254,2)
(19,43,2)
(132,43,2)
(171,309,2)
(127,309,2)
(193,138,2)
(129,138,2)
(54,340,2)
(54,25,2)
(189,90,2)
(171,282,2)
(359,309,2)
(207,43,2)
(83,100,2)
(172,309,2)
(370,43,2)
(55,79,2)
(21,72,2)
(21,13,2)
(113,308,2)
(106,340,2)
(110,309,2)
(194,43,2)
(80,309,2)
(348,309,2)
(321,170,2)
(340,310,2)
(367,43,2)
(272,309,2)
(353,156,2)
(55,277,2)
(265,167,2)
(254,309,2)
(372,309,2)
(290,233,2)
(143,259,2)
(73,309,2)
(324,43,2)
(264,273,2)
(111,309,2)
(5,354,2)
(334,43,2)
(121,79,2)
(231,126,2)
(223,262,2)
-----------------------------------
(0,ret)
(1,)
(2,p)
(3,if (!vc_ptl->id_initialized)
(4,REQ_PTL(sreq)
(5,sb->buf.hp.hdr)
(6,vc_ptl)
(7,*vhdr_p)
(8,ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)
(9,sb)
(10,vc)
(11,return mpi_errno;)
(12,REQ_PTL(sreq)
(13,sb->buf.p)
(14,segment_size)
(15,sb->buf.hp.hdr)
(16,1)
(17,dev)
(18,last)
(19,phys)
(20,nid)
(21,MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)
(22,vc_ptl)
(23,complete)
(24,"MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x)
(25,last > sreq->dev.segment_first+BUFLEN)
(26,MPID_STATE_SEND_NONCONTIG_PKT)
(27,last)
(28,sreq->dev)
(29,if (last == sreq->dev.segment_size)
(30,mpi_errno)
(31,segment_ptr)
(32,vc_ptl->ptc)
(33,id)
(34,sreq->dev.segment_first)
(35,BUFLEN)
(36,vc_ptl)
(37,phys)
(38,BUFLEN)
(39,vc_ptl->id)
(40,)
(41,nid)
(42,last)
(43,!FREE_EMPTY()
(44,MPI_ERR_OTHER)
(45,dev)
(46,sreq->dev.segment_first)
(47,sreq)
(48,last)
(49,my_pg_rank)
(50,)
(51,segment_first)
(52,vc_ptl)
(53,vc_ptl->ptc)
(54,sreq->dev.segment_first)
(55,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret)
(56,0)
(57,last - sreq->dev.segment_first)
(58,(ptl_size_t)
(59,payload)
(60,REQ_PTL(sreq)
(61,segment_first)
(62,0)
(63,1)
(64,p)
(65,vc_ptl->id.phys.pid)
(66,ret = MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)
(67,sb)
(68,ptc)
(69,sreq)
(70,buf)
(71,sreq->dev)
(72,last = sreq->dev.segment_first+BUFLEN)
(73,my_pg_rank)
(74,last - sreq->dev.segment_first)
(75,last)
(76,send_queue)
(77,mpi_errno)
(78,goto fn_exit;)
(79,mpi_errno = MPID_nem_ptl_init_id(vc)
(80,buf)
(81,"**ptlput")
(82,sb->buf)
(83,!FREE_EMPTY()
(84,*vhdr_p = NULL)
(85,PTL_NO_ACK_REQ)
(86,sb)
(87,sreq->dev)
(88,sreq)
(89,last)
(90,sreq->dev.segment_size)
(91,dev)
(92,complete)
(93,sb->buf)
(94,ptc)
(95,*complete)
(96,hdr)
(97,dev)
(98,)
(99,hp)
(100,FREE_EMPTY()
(101,sreq->dev.segment_first = last)
(102,CH3_CHANNEL)
(103,if (last > sreq->dev.segment_first+BUFLEN)
(104,sreq)
(105,buf)
(106,sreq->dev.segment_first)
(107,)
(108,buf)
(109,RET)
(110,overflow)
(111,last)
(112,PTL_MAX_EAGER)
(113,MPID_nem_ptl_init_id(vc)
(114,sb)
(115,sizeof(sb->buf.hp.hdr)
(116,vc_ptl)
(117,sb)
(118,sreq)
(119,sreq->dev.segment_size)
(120,dev)
(121,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret)
(122,sreq)
(123,last)
(124,hp)
(125,vc_ptl)
(126,(ptl_size_t)
(127,"**ptlput %s")
(128,)
(129,sreq->dev)
(130,&REQ_PTL(sreq)
(131,ret)
(132,ret)
(133,sreq->dev)
(134,ptc)
(135,while (!FREE_EMPTY()
(136,0)
(137,dev)
(138,MPID_Request *sreq)
(139,VERBOSE)
(140,hdr_p)
(141,ret)
(142,dev)
(143,MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, 0, last, sb->buf.hp.payload, &REQ_PTL(sreq)
(144,MPIU_ERR_POP(mpi_errno)
(145,*complete = 0)
(146,sreq->dev.segment_first)
(147,if (last == sreq->dev.segment_size)
(148,vc_ptl->id)
(149,dev)
(150,sb)
(151,buf)
(152,pid)
(153,NULL)
(154,buf)
(155,mpi_errno)
(156,VC_PTL(vc)
(157,sreq->dev.segment_size)
(158,MPID_STATE_SEND_NONCONTIG_PKT)
(159,sreq->dev.segment_ptr)
(160,sb->buf)
(161,sb->buf.hp)
(162,phys)
(163,vc_ptl)
(164,sreq->dev)
(165,sreq)
(166,vc_ptl->id.phys)
(167,int *complete)
(168,vc_ptl)
(169,hdr)
(170,sizeof(sb->buf.hp.hdr)
(171,FREE_POP(&sb)
(172,MPID_nem_ptl_strerror(ret)
(173,sreq)
(174,MPIDI_CH3I_Sendq_empty(send_queue)
(175,segment_size)
(176,0)
(177,MPI_SUCCESS)
(178,last)
(179,ret)
(180,)
(181,0)
(182,vc_ptl->ptc)
(183,MPID_STATE_SEND_NONCONTIG_PKT)
(184,hdr_p)
(185,last == sreq->dev.segment_size)
(186,*complete)
(187,vc)
(188,pid)
(189,last = sreq->dev.segment_size)
(190,vc_ptl)
(191,sb)
(192,MPIDI_FUNC_EXIT(MPID_STATE_SEND_NONCONTIG_PKT)
(193,sreq->dev)
(194,vc_ptl->id)
(195,last)
(196,MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x)
(197,**hdr_p = (MPIDI_CH3_Pkt_t **)
(198,last)
(199,sb)
(200,sreq->dev)
(201,if (last > PTL_MAX_EAGER)
(202,REQ_PTL(sreq)
(203,mpi_errno)
(204,id)
(205,id)
(206,MPIDI_Process)
(207,last)
(208,sreq->dev.segment_first)
(209,MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)
(210,)
(211,)
(212,)
(213,)
(214,id_initialized)
(215,vhdr_p)
(216,dev)
(217,sreq->dev.segment_first == 0)
(218,MPIDI_STATE_DECL(MPID_STATE_SEND_NONCONTIG_PKT)
(219,sb)
(220,sreq->dev.segment_first+BUFLEN)
(221,vc_ptl->id.phys)
(222,segment_first)
(223,mpi_errno)
(224,vc_ptl->id.phys.nid)
(225,)
(226,vc_ptl->ptc)
(227,segment_size)
(228,id)
(229,0)
(230,dev)
(231,MPID_nem_ptl_rptl_put(MPIDI_nem_ptl_global_md, (ptl_size_t)
(232,id)
(233,sb->buf.hp)
(234,MPIDI_FUNC_ENTER(MPID_STATE_SEND_NONCONTIG_PKT)
(235,sreq->dev)
(236,dev)
(237,segment_first)
(238,MPIDI_nem_ptl_global_md)
(239,MPIDI_CH3_Pkt_t **)
(240,sreq->dev)
(241,vc_ptl->id_initialized)
(242,fn_fail:)
(243,sreq->dev.segment_size)
(244,sreq->dev)
(245,hdr_p)
(246,)
(247,sreq)
(248,last)
(249,FREE_EMPTY()
(250,PTL_MAX_EAGER)
(251,sreq)
(252,dev)
(253,MPIDI_Process.my_pg_rank)
(254,sreq->dev.segment_ptr)
(255,sreq)
(256,vc_ptl->id.phys.nid)
(257,last = sreq->dev.segment_size)
(258,segment_first)
(259,sb->buf.hp.payload)
(260,goto fn_exit;)
(261,sreq)
(262,mpi_errno)
(263,MPIDI_nem_ptl_global_md)
(264,1)
(265,*complete)
(266,sb->buf.hp)
(267,phys)
(268,sb)
(269,vc_ptl)
(270,ptc)
(271,MPI_ERR_OTHER)
(272,0)
(273,last == sreq->dev.segment_size)
(274,last)
(275,vc_ptl->id.phys.pid)
(276,hdr)
(277,mpi_errno = MPI_SUCCESS)
(278,sreq)
(279,MPIDI_Process)
(280,vc_ptl->id)
(281,overflow)
(282,&sb)
(283,sreq->dev.segment_first+BUFLEN)
(284,CH3_CHANNEL)
(285,"**ptlput")
(286,)
(287,sizeof(sb->buf.hp.hdr)
(288,FREE_POP(&sb)
(289,)
(290,sb->buf.hp.hdr)
(291,MPID_nem_ptl_init_req(sreq)
(292,sreq->dev.segment_first)
(293,dev)
(294,sb->buf.hp.hdr = **hdr_p)
(295,complete)
(296,sb->buf)
(297,sb)
(298,segment_ptr)
(299,mpi_errno)
(300,goto fn_exit;)
(301,ret)
(302,vc_ptl->id)
(303,1)
(304,sreq)
(305,fn_exit:)
(306,hp)
(307,"**ptlput %s")
(308,!vc_ptl->id_initialized)
(309,MPIDI_CH3I_Sendq_empty(send_queue)
(310,last = PTL_MAX_EAGER)
(311,p)
(312,MPIU_DBG_FDEST)
(313,sb->buf)
(314,MPIDI_VC_t *vc)
(315,last)
(316,sb)
(317,if (MPIDI_CH3I_Sendq_empty(send_queue)
(318,last)
(319,last > PTL_MAX_EAGER)
(320,0)
(321,sizeof(sb->buf.hp.hdr)
(322,&REQ_PTL(sreq)
(323,hp)
(324,MPIDI_Process.my_pg_rank)
(325,ptl_size_t)
(326,sb)
(327,id)
(328,&sb)
(329,buf)
(330,sb->buf.p)
(331,0)
(332,sreq->dev.segment_first)
(333,dev)
(334,sreq)
(335,vhdr_p)
(336,PTL_NO_ACK_REQ)
(337,segment_first)
(338,ret)
(339,)
(340,sreq->dev.segment_first = last)
(341,sb)
(342,MPIU_Assert(sreq->dev.segment_first == 0)
(343,(MPIDI_CH3_Pkt_t **)
(344,sreq->dev)
(345,sb->buf)
(346,last)
(347,segment_first)
(348,vc_ptl->id.phys)
(349,*complete = 1)
(350,if (mpi_errno)
(351,*complete = 1)
(352,vc_ptl->id)
(353,vc_ptl = VC_PTL(vc)
(354,sb->buf.hp)
(355,void **vhdr_p)
(356,sreq->dev)
(357,vc_ptl)
(358,sreq)
(359,REQ_PTL(sreq)
(360,*hdr_p)
(361,sb->buf)
(362,mpi_errno)
(363,)
(364,vc_ptl->id.phys)
(365,MPIU_DBG_MSG_FMT(CH3_CHANNEL, VERBOSE, (MPIU_DBG_FDEST, "MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x)
(366,segment_size)
(367,VERBOSE)
(368,MPIU_DBG_FDEST)
(369,ptl_size_t)
(370,REQ_PTL(sreq)
(371,sreq)
(372,"MPID_nem_ptl_rptl_put(size=%lu id=(%#x,%#x)
(373,sb->buf.p)
(374,**hdr_p)
(375,MPID_nem_ptl_strerror(ret)
(376,)
(377,segment_first)
(378,sreq->dev)
(379,vc_ptl)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^