-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_16_bad()
{
    int64_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
70,71
70,72
72,73
72,74
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,58,59,60,64,67,68,69,71,73,74
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_16_bad(){    int64_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int64_t_calloc_16_bad()
CWE401_Memory_Leak__int64_t_calloc_16_bad
{    int64_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(6,25,0)
(35,26,0)
(15,19,0)
(23,18,0)
(29,17,0)
(10,35,0)
(29,25,0)
(31,22,0)
(27,18,0)
(17,18,0)
(20,27,0)
(21,26,0)
(17,33,0)
(8,31,0)
(33,17,0)
(16,29,0)
(19,15,0)
(22,25,0)
(19,32,0)
(30,29,0)
(18,17,0)
(2,25,0)
(31,29,0)
(17,29,0)
(3,16,0)
(4,15,0)
(12,25,0)
(13,16,0)
(28,34,0)
(1,26,0)
(14,26,0)
(0,35,0)
(11,31,0)
(22,31,0)
(18,27,0)
(11,8,1)
(9,24,1)
(6,19,1)
(12,22,1)
(35,0,1)
(8,6,1)
(22,31,1)
(5,35,1)
(3,13,1)
(20,23,1)
(0,10,1)
(23,30,1)
(29,17,1)
(31,29,1)
(4,16,1)
(30,5,1)
(17,18,1)
(9,28,1)
(15,4,1)
(16,3,1)
(18,27,1)
(31,11,1)
(16,29,1)
(24,5,1)
(17,33,1)
(13,29,1)
(6,16,1)
(19,15,1)
(24,12,1)
(27,20,1)
(28,24,1)
(22,5,2)
(16,29,2)
(20,5,2)
(12,5,2)
(13,5,2)
(30,5,2)
(27,5,2)
(29,17,2)
(15,16,2)
(17,5,2)
(11,5,2)
(19,16,2)
(17,33,2)
(4,16,2)
(31,5,2)
(3,5,2)
(31,29,2)
(16,5,2)
(8,5,2)
(29,5,2)
(18,5,2)
(23,5,2)
(18,27,2)
(19,15,2)
(28,24,2)
(22,31,2)
(17,18,2)
(6,5,2)
-----------------------------------
(0,NULL)
(1,while(1)
(2,if (data == NULL)
(3,NULL)
(4,1)
(5,1)
(6,L)
(7, sizeof(int64_t)
(8,data)
(9,RET)
(10,data)
(11,0)
(12,break;)
(13,data)
(14,data)
(15,-1)
(16,data == NULL)
(17,(int64_t *)
(18,calloc(100, sizeof(int64_t)
(19,exit(-1)
(20,int64_t)
(21,while(1)
(22,printLongLongLine(data[0])
(23,100)
(24,1)
(25,)
(26,)
(27,sizeof(int64_t)
(28,break;)
(29,data = (int64_t *)
(30,data)
(31,data[0])
(32,)
(33,int64_t *)
(34,)
(35,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^