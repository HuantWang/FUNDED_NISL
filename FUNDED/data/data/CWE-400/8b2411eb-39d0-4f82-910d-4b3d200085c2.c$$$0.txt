-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
82,83
84,85
84,86
84,87
85,86
87,88
89,90
89,91
90,91
92,93
93,94
93,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
102,105
103,104
104,105
104,106
105,106
105,107
106,107
110,111
111,112
111,113
112,113
114,115
114,116
115,116
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,31,35,37,40,42,45,46,50,52,57,59,64,65,66,70,73,74,78,81,83,86,88,91,94,95,99,101,107,108,109,113,116,117,121,123
-----computeFrom-----
13,14
13,15
17,18
17,19
41,42
41,43
48,49
48,50
61,62
61,63
76,77
76,78
89,90
89,91
97,98
97,99
104,105
104,106
-----guardedBy-----
99,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_17_bad()
CWE401_Memory_Leak__malloc_realloc_int_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(25,47,0)
(2,34,0)
(63,16,0)
(5,38,0)
(55,15,0)
(16,42,0)
(20,1,0)
(42,32,0)
(17,10,0)
(11,52,0)
(19,31,0)
(61,34,0)
(32,42,0)
(11,16,0)
(0,1,0)
(12,48,0)
(55,20,0)
(50,52,0)
(61,57,0)
(30,16,0)
(34,66,0)
(45,44,0)
(58,39,0)
(36,39,0)
(48,16,0)
(20,55,0)
(53,34,0)
(60,24,0)
(21,22,0)
(1,34,0)
(32,10,0)
(44,43,0)
(18,47,0)
(26,24,0)
(37,52,0)
(4,34,0)
(40,54,0)
(54,40,0)
(57,22,0)
(57,61,0)
(6,48,0)
(57,1,0)
(42,51,0)
(22,15,0)
(54,11,0)
(16,34,0)
(8,30,0)
(42,16,0)
(49,20,0)
(59,57,0)
(52,11,0)
(29,13,0)
(14,57,0)
(44,45,0)
(28,4,0)
(57,16,0)
(33,56,0)
(56,10,0)
(31,4,0)
(46,11,0)
(13,9,0)
(62,9,0)
(38,9,0)
(47,4,0)
(10,32,0)
(10,56,0)
(11,54,0)
(51,42,0)
(4,54,0)
(35,20,0)
(41,34,0)
(47,22,0)
(31,15,0)
(20,4,0)
(54,4,0)
(39,4,0)
(7,9,0)
(52,37,0)
(23,37,0)
(3,30,0)
(64,45,0)
(20,22,0)
(27,38,0)
(30,1,0)
(58,36,1)
(0,30,1)
(16,42,1)
(28,61,1)
(64,48,1)
(57,16,1)
(45,64,1)
(39,4,1)
(47,25,1)
(11,16,1)
(42,51,1)
(27,13,1)
(31,4,1)
(48,12,1)
(56,33,1)
(29,31,1)
(11,52,1)
(13,29,1)
(30,3,1)
(48,16,1)
(8,48,1)
(27,9,1)
(35,49,1)
(50,46,1)
(9,7,1)
(20,4,1)
(44,45,1)
(23,50,1)
(55,20,1)
(13,9,1)
(12,6,1)
(22,21,1)
(57,59,1)
(25,18,1)
(42,32,1)
(31,19,1)
(39,58,1)
(32,10,1)
(8,44,1)
(61,57,1)
(47,4,1)
(30,16,1)
(7,62,1)
(6,16,1)
(57,22,1)
(14,1,1)
(10,56,1)
(1,0,1)
(29,39,1)
(38,9,1)
(36,4,1)
(63,38,1)
(57,1,1)
(49,22,1)
(54,40,1)
(37,23,1)
(19,55,1)
(59,14,1)
(21,47,1)
(54,11,1)
(20,35,1)
(52,37,1)
(46,28,1)
(18,39,1)
(38,5,1)
(20,22,1)
(17,63,1)
(4,54,1)
(5,27,1)
(20,1,1)
(65,38,1)
(33,17,1)
(3,8,1)
(42,51,2)
(25,39,2)
(47,39,2)
(11,52,2)
(5,38,2)
(57,22,2)
(54,40,2)
(20,22,2)
(4,38,2)
(20,39,2)
(57,38,2)
(12,38,2)
(42,38,2)
(50,38,2)
(35,39,2)
(54,38,2)
(57,16,2)
(42,32,2)
(30,38,2)
(4,54,2)
(17,38,2)
(0,38,2)
(54,11,2)
(64,48,2)
(55,20,2)
(61,57,2)
(13,9,2)
(61,38,2)
(10,56,2)
(56,38,2)
(44,45,2)
(31,39,2)
(22,39,2)
(20,1,2)
(36,38,2)
(39,38,2)
(29,38,2)
(46,38,2)
(27,38,2)
(45,48,2)
(6,38,2)
(47,4,2)
(21,39,2)
(30,16,2)
(11,38,2)
(20,4,2)
(32,38,2)
(48,38,2)
(52,38,2)
(57,1,2)
(11,16,2)
(10,38,2)
(52,37,2)
(23,38,2)
(38,38,2)
(59,38,2)
(13,38,2)
(58,38,2)
(37,38,2)
(19,39,2)
(28,38,2)
(16,42,2)
(49,39,2)
(63,38,2)
(44,48,2)
(32,10,2)
(1,38,2)
(48,16,2)
(31,4,2)
(3,38,2)
(33,38,2)
(38,9,2)
(14,38,2)
(18,39,2)
(39,4,2)
(55,39,2)
(16,38,2)
(8,38,2)
-----------------------------------
(0,5)
(1,data[0] = 5)
(2,if (data != NULL)
(3,0)
(4,data = (int *)
(5,1)
(6,data)
(7,0)
(8,data)
(9,j = 0)
(10,100*sizeof(int)
(11,realloc(data, (130000)
(12,NULL)
(13,j++)
(14,data)
(15,)
(16,* data = (int *)
(17,100)
(18,data)
(19,data)
(20,data[0])
(21,10)
(22,data[0] = 10)
(23,int)
(24,)
(25,0)
(26,for(j = 0; j < 1; j++)
(27,j)
(28,data)
(29,j)
(30,data[0])
(31,free(data)
(32,malloc(100*sizeof(int)
(33,int)
(34,)
(35,0)
(36,data)
(37,sizeof(int)
(38,j < 1)
(39,data != NULL)
(40,int *)
(41,data)
(42,(int *)
(43,)
(44,exit(-1)
(45,-1)
(46,data)
(47,data[0])
(48,data == NULL)
(49,data)
(50,130000)
(51,int *)
(52,(130000)
(53,if (data == NULL)
(54,(int *)
(55,printIntLine(data[0])
(56,sizeof(int)
(57,data[0])
(58,NULL)
(59,0)
(60,j)
(61,printIntLine(data[0])
(62,j)
(63,data)
(64,1)
(65,RET)
(66,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^