-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,102,104
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(22,54,0)
(38,26,0)
(29,24,0)
(34,6,0)
(36,49,0)
(11,24,0)
(29,31,0)
(41,48,0)
(11,30,0)
(6,43,0)
(28,18,0)
(20,43,0)
(1,54,0)
(39,35,0)
(3,7,0)
(49,17,0)
(49,53,0)
(45,6,0)
(7,24,0)
(8,43,0)
(50,30,0)
(32,29,0)
(0,11,0)
(2,46,0)
(18,28,0)
(54,6,0)
(42,24,0)
(26,24,0)
(37,6,0)
(37,21,0)
(51,7,0)
(39,27,0)
(56,11,0)
(9,35,0)
(30,46,0)
(31,29,0)
(5,25,0)
(37,24,0)
(17,49,0)
(54,26,0)
(55,40,0)
(54,1,0)
(44,1,0)
(18,1,0)
(10,48,0)
(35,39,0)
(4,15,0)
(36,48,0)
(13,43,0)
(23,40,0)
(33,25,0)
(24,26,0)
(53,49,0)
(31,10,0)
(12,10,0)
(1,18,0)
(49,36,0)
(26,38,0)
(52,29,0)
(19,37,0)
(25,24,0)
(14,15,0)
(53,7,0)
(7,53,0)
(46,48,0)
(47,31,0)
(26,54,0)
(30,11,0)
(24,48,0)
(11,24,1)
(34,45,1)
(37,6,1)
(15,4,1)
(50,11,1)
(52,25,1)
(30,50,1)
(14,6,1)
(36,49,1)
(49,53,1)
(22,42,1)
(31,47,1)
(7,51,1)
(12,31,1)
(2,30,1)
(26,38,1)
(33,24,1)
(3,46,1)
(37,19,1)
(25,24,1)
(18,44,1)
(35,9,1)
(51,3,1)
(30,11,1)
(29,24,1)
(0,56,1)
(49,17,1)
(23,15,1)
(7,24,1)
(10,12,1)
(44,22,1)
(1,18,1)
(4,14,1)
(54,1,1)
(47,29,1)
(54,6,1)
(23,36,1)
(18,28,1)
(39,35,1)
(6,34,1)
(24,26,1)
(37,24,1)
(52,39,1)
(25,5,1)
(16,40,1)
(29,32,1)
(53,7,1)
(16,37,1)
(31,29,1)
(19,40,1)
(9,25,1)
(26,54,1)
(11,0,1)
(46,2,1)
(5,33,1)
(55,23,1)
(56,10,1)
(40,55,1)
(32,52,1)
(42,15,1)
(11,15,2)
(35,25,2)
(9,25,2)
(29,24,2)
(49,15,2)
(26,38,2)
(19,40,2)
(24,26,2)
(1,15,2)
(18,28,2)
(10,15,2)
(0,15,2)
(26,15,2)
(24,15,2)
(39,35,2)
(47,15,2)
(31,15,2)
(33,15,2)
(37,24,2)
(46,15,2)
(7,15,2)
(5,15,2)
(18,15,2)
(32,15,2)
(37,40,2)
(30,11,2)
(49,53,2)
(29,15,2)
(51,15,2)
(25,15,2)
(53,7,2)
(54,1,2)
(1,18,2)
(22,15,2)
(42,15,2)
(26,54,2)
(11,24,2)
(44,15,2)
(39,25,2)
(54,15,2)
(30,15,2)
(25,24,2)
(56,15,2)
(3,15,2)
(36,15,2)
(37,6,2)
(49,17,2)
(54,6,2)
(7,24,2)
(53,15,2)
(12,15,2)
(2,15,2)
(50,15,2)
(52,15,2)
(36,49,2)
(31,29,2)
-----------------------------------
(0,0)
(1,100*sizeof(struct _twoIntsStruct)
(2,0)
(3,data)
(4,5)
(5,NULL)
(6,data = NULL)
(7,data[0])
(8,if(GLOBAL_CONST_FIVE==5)
(9,1)
(10,data[0].intOne = 0)
(11,data[0])
(12,0)
(13,data)
(14,GLOBAL_CONST_FIVE)
(15,GLOBAL_CONST_FIVE==5)
(16,RET)
(17,twoIntsStruct *)
(18,sizeof(struct _twoIntsStruct)
(19,data)
(20,if(GLOBAL_CONST_FIVE==5)
(21,)
(22,data)
(23,GLOBAL_CONST_FIVE)
(24,data = (struct _twoIntsStruct *)
(25,data == NULL)
(26,(struct _twoIntsStruct *)
(27,)
(28,struct _twoIntsStruct)
(29,data[0])
(30,data[0].intTwo)
(31,data[0].intOne)
(32,0)
(33,data)
(34,NULL)
(35,-1)
(36,printStructLine((twoIntsStruct *)
(37,free(data)
(38,struct _twoIntsStruct *)
(39,exit(-1)
(40,GLOBAL_CONST_FIVE==5)
(41,if (data == NULL)
(42,data)
(43,)
(44,100)
(45,data)
(46,data[0].intTwo = 0)
(47,intOne)
(48,)
(49,(twoIntsStruct *)
(50,intTwo)
(51,0)
(52,data)
(53,&data[0])
(54,realloc(data, 100*sizeof(struct _twoIntsStruct)
(55,5)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^