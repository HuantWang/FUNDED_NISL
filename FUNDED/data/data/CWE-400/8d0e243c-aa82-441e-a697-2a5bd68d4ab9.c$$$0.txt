-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink(size_t dataArray[])
{
    /* copy data out of dataArray */
    size_t data = dataArray[2];
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink(size_t dataArray[]){    /* copy data out of dataArray */    size_t data = dataArray[2];    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_badSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    size_t data = dataArray[2];    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(15,36,0)
(26,8,0)
(5,36,0)
(4,18,0)
(36,5,0)
(41,33,0)
(13,33,0)
(2,13,0)
(16,42,0)
(34,19,0)
(22,8,0)
(24,18,0)
(13,39,0)
(43,13,0)
(35,33,0)
(17,25,0)
(29,35,0)
(3,39,0)
(6,15,0)
(42,39,0)
(17,21,0)
(32,14,0)
(14,26,0)
(42,33,0)
(36,8,0)
(21,17,0)
(38,28,0)
(18,0,0)
(27,28,0)
(8,18,0)
(19,39,0)
(40,36,0)
(1,21,0)
(5,3,0)
(23,30,0)
(39,33,0)
(3,11,0)
(26,14,0)
(12,20,0)
(36,15,0)
(39,3,0)
(9,26,0)
(18,8,0)
(31,39,0)
(10,19,0)
(11,3,0)
(7,12,0)
(8,30,0)
(28,30,0)
(3,5,0)
(35,39,0)
(3,11,1)
(42,39,1)
(35,39,1)
(39,3,1)
(4,24,1)
(42,16,1)
(19,39,1)
(26,14,1)
(21,1,1)
(7,26,1)
(26,8,1)
(2,43,1)
(12,7,1)
(35,29,1)
(3,5,1)
(37,12,1)
(32,9,1)
(37,35,1)
(5,36,1)
(17,21,1)
(40,31,1)
(9,8,1)
(16,13,1)
(36,8,1)
(43,17,1)
(18,0,1)
(13,2,1)
(36,15,1)
(43,19,1)
(19,10,1)
(6,40,1)
(34,39,1)
(31,26,1)
(29,42,1)
(15,6,1)
(13,39,1)
(10,34,1)
(1,19,1)
(24,22,1)
(18,4,1)
(8,18,1)
(14,32,1)
(2,26,2)
(15,26,2)
(42,39,2)
(36,26,2)
(7,26,2)
(40,26,2)
(13,26,2)
(3,5,2)
(5,26,2)
(17,21,2)
(34,26,2)
(16,26,2)
(1,19,2)
(36,15,2)
(36,8,2)
(42,26,2)
(5,36,2)
(6,26,2)
(3,26,2)
(39,3,2)
(35,26,2)
(35,39,2)
(8,18,2)
(31,26,2)
(29,26,2)
(13,39,2)
(26,8,2)
(26,14,2)
(18,0,2)
(12,26,2)
(17,19,2)
(10,26,2)
(19,39,2)
(39,26,2)
(19,26,2)
(3,11,2)
(43,26,2)
(21,19,2)
-----------------------------------
(0,size_t dataArray[])
(1,1)
(2,HELLO_STRING)
(3,(wchar_t *)
(4,2)
(5,malloc(data*sizeof(wchar_t)
(6,wchar_t)
(7,"Input is less than the length of the source string")
(8,data = dataArray[2])
(9,data)
(10,NULL)
(11,wchar_t *)
(12,printLine("Input is less than the length of the source string")
(13,wcscpy(myString, HELLO_STRING)
(14,wcslen(HELLO_STRING)
(15,sizeof(wchar_t)
(16,myString)
(17,exit(-1)
(18,dataArray[2])
(19,myString == NULL)
(20,)
(21,-1)
(22,data)
(23,data)
(24,dataArray)
(25,)
(26,data > wcslen(HELLO_STRING)
(27,if (data > wcslen(HELLO_STRING)
(28,)
(29,myString)
(30,)
(31,myString)
(32,HELLO_STRING)
(33,)
(34,myString)
(35,free(myString)
(36,data*sizeof(wchar_t)
(37,RET)
(38,myString)
(39,myString = (wchar_t *)
(40,data)
(41,if (myString == NULL)
(42,printWLine(myString)
(43,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^