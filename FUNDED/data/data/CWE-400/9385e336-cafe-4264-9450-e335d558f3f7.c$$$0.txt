-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_05_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,93,95
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_05_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_05_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_05_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,46,0)
(9,21,0)
(14,42,0)
(42,37,0)
(37,42,0)
(17,42,0)
(25,16,0)
(21,30,0)
(37,33,0)
(43,12,0)
(33,16,0)
(34,49,0)
(49,34,0)
(34,40,0)
(1,32,0)
(12,10,0)
(13,3,0)
(46,34,0)
(41,9,0)
(44,25,0)
(27,32,0)
(31,10,0)
(45,9,0)
(48,41,0)
(5,3,0)
(35,16,0)
(40,34,0)
(11,10,0)
(30,21,0)
(38,2,0)
(22,2,0)
(38,9,0)
(42,9,0)
(24,39,0)
(43,32,0)
(1,29,0)
(0,43,0)
(21,9,0)
(47,10,0)
(26,38,0)
(41,46,0)
(3,9,0)
(6,38,0)
(2,38,0)
(36,12,0)
(19,12,0)
(2,25,0)
(9,16,0)
(29,1,0)
(46,41,0)
(43,21,0)
(8,37,0)
(21,43,0)
(49,16,0)
(24,15,0)
(18,41,0)
(28,15,0)
(20,33,0)
(32,1,0)
(32,43,0)
(15,24,0)
(22,38,1)
(12,19,1)
(3,9,1)
(42,17,1)
(38,6,1)
(37,42,1)
(41,9,1)
(48,25,1)
(6,26,1)
(43,32,1)
(44,2,1)
(41,18,1)
(21,30,1)
(20,37,1)
(7,49,1)
(13,5,1)
(2,38,1)
(4,7,1)
(43,12,1)
(23,12,1)
(0,45,1)
(1,27,1)
(18,48,1)
(14,3,1)
(3,13,1)
(45,23,1)
(32,1,1)
(49,34,1)
(38,9,1)
(2,22,1)
(24,15,1)
(34,46,1)
(42,9,1)
(26,33,1)
(25,44,1)
(7,23,1)
(17,14,1)
(15,28,1)
(33,20,1)
(1,29,1)
(5,9,1)
(14,24,1)
(19,36,1)
(9,21,1)
(46,41,1)
(28,3,1)
(8,42,1)
(21,43,1)
(27,0,1)
(34,40,1)
(37,8,1)
(46,41,2)
(26,23,2)
(43,32,2)
(32,1,2)
(41,23,2)
(2,38,2)
(41,9,2)
(28,3,2)
(22,23,2)
(42,23,2)
(9,21,2)
(0,23,2)
(24,3,2)
(8,23,2)
(1,23,2)
(37,23,2)
(3,23,2)
(38,23,2)
(27,23,2)
(48,23,2)
(15,3,2)
(2,23,2)
(9,23,2)
(25,23,2)
(43,23,2)
(38,9,2)
(45,23,2)
(20,23,2)
(49,23,2)
(21,23,2)
(34,23,2)
(44,23,2)
(21,43,2)
(14,23,2)
(43,12,2)
(18,23,2)
(32,23,2)
(34,46,2)
(46,23,2)
(17,23,2)
(34,40,2)
(1,29,2)
(3,9,2)
(42,9,2)
(6,23,2)
(33,23,2)
(24,15,2)
(13,23,2)
(21,30,2)
(37,42,2)
(49,34,2)
(5,23,2)
-----------------------------------
(0,data)
(1,sizeof(struct _twoIntsStruct)
(2,data[0].intTwo)
(3,data == NULL)
(4,RET)
(5,data)
(6,0)
(7,staticTrue)
(8,intOne)
(9,data = (struct _twoIntsStruct *)
(10,)
(11,data)
(12,data = NULL)
(13,NULL)
(14,data)
(15,-1)
(16,)
(17,0)
(18,0)
(19,NULL)
(20,0)
(21,(struct _twoIntsStruct *)
(22,intTwo)
(23,staticTrue)
(24,exit(-1)
(25,data[0].intTwo = 0)
(26,data)
(27,100)
(28,1)
(29,struct _twoIntsStruct)
(30,struct _twoIntsStruct *)
(31,if(staticTrue)
(32,100*sizeof(struct _twoIntsStruct)
(33,data[0].intOne = 0)
(34,(twoIntsStruct *)
(35,if (data == NULL)
(36,data)
(37,data[0].intOne)
(38,data[0])
(39,)
(40,twoIntsStruct *)
(41,data[0])
(42,data[0])
(43,realloc(data, 100*sizeof(struct _twoIntsStruct)
(44,0)
(45,data)
(46,&data[0])
(47,if(staticTrue)
(48,data)
(49,printStructLine((twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^