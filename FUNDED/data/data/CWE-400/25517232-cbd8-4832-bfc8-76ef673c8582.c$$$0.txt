-----label-----
0
-----code-----
static int device_notifier(struct notifier_block *nb,
				  unsigned long action, void *data)
{
	struct device *dev = data;
	struct pci_dev *pdev = to_pci_dev(dev);
	struct dmar_domain *domain;

	if (iommu_no_mapping(dev))
		return 0;

	domain = find_domain(pdev);
	if (!domain)
		return 0;

	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {
		domain_remove_one_dev_info(domain, pdev);

		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&
		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&
		    list_empty(&domain->devices))
			domain_exit(domain);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
84,85
84,86
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
93,95
94,95
94,96
95,96
95,97
96,97
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
107,108
107,109
108,109
108,110
109,110
112,113
114,115
114,116
115,116
117,118
118,119
118,120
119,120
122,123
123,124
123,125
124,125
126,127
128,129
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,24,26,27,30,34,36,37,41,43,47,49,50,54,56,58,62,65,67,71,73,78,80,83,88,90,92,101,102,104,110,111,113,116,120,121,125,127,129
-----computeFrom-----
60,61
60,62
75,76
75,77
76,77
76,78
94,95
94,96
95,96
95,97
98,99
98,100
107,108
107,109
-----guardedBy-----
120,127
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int device_notifier(struct notifier_block *nb,				  unsigned long action, void *data){	struct device *dev = data;	struct pci_dev *pdev = to_pci_dev(dev);	struct dmar_domain *domain;	if (iommu_no_mapping(dev))		return 0;	domain = find_domain(pdev);	if (!domain)		return 0;	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}	return 0;}
static int
device_notifier(struct notifier_block *nb,				  unsigned long action, void *data)
device_notifier
struct notifier_block *nb
struct notifier_block
notifier_block
*nb
*
nb
unsigned long action
unsigned long
action
action
void *data
void
*data
*
data
{	struct device *dev = data;	struct pci_dev *pdev = to_pci_dev(dev);	struct dmar_domain *domain;	if (iommu_no_mapping(dev))		return 0;	domain = find_domain(pdev);	if (!domain)		return 0;	if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}	return 0;}
struct device *dev = data;
struct device *dev = data;
struct device
device
*dev = data
*
dev
= data
data
data
struct pci_dev *pdev = to_pci_dev(dev);
struct pci_dev *pdev = to_pci_dev(dev);
struct pci_dev
pci_dev
*pdev = to_pci_dev(dev)
*
pdev
= to_pci_dev(dev)
to_pci_dev(dev)
to_pci_dev
to_pci_dev
dev
dev
struct dmar_domain *domain;
struct dmar_domain *domain;
struct dmar_domain
dmar_domain
*domain
*
domain
if (iommu_no_mapping(dev))		return 0;
iommu_no_mapping(dev)
iommu_no_mapping
iommu_no_mapping
dev
dev
return 0;
0
domain = find_domain(pdev);
domain = find_domain(pdev)
domain
domain
find_domain(pdev)
find_domain
find_domain
pdev
pdev
if (!domain)		return 0;
!domain
domain
domain
return 0;
0
if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through) {		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}
action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through
action == BUS_NOTIFY_UNBOUND_DRIVER
action
action
BUS_NOTIFY_UNBOUND_DRIVER
BUS_NOTIFY_UNBOUND_DRIVER
!iommu_pass_through
iommu_pass_through
iommu_pass_through
{		domain_remove_one_dev_info(domain, pdev);		if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);	}
domain_remove_one_dev_info(domain, pdev);
domain_remove_one_dev_info(domain, pdev)
domain_remove_one_dev_info
domain_remove_one_dev_info
domain
domain
pdev
pdev
if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices))			domain_exit(domain);
!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&		    list_empty(&domain->devices)
!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&		    !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE
domain->flags
domain
domain
flags
DOMAIN_FLAG_VIRTUAL_MACHINE
DOMAIN_FLAG_VIRTUAL_MACHINE
!(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
domain->flags & DOMAIN_FLAG_STATIC_IDENTITY
domain->flags
domain
domain
flags
DOMAIN_FLAG_STATIC_IDENTITY
DOMAIN_FLAG_STATIC_IDENTITY
list_empty(&domain->devices)
list_empty
list_empty
&domain->devices
domain->devices
domain
domain
devices
domain_exit(domain);
domain_exit(domain)
domain_exit
domain_exit
domain
domain
return 0;
0
-----joern-----
(10,0,0)
(31,0,0)
(35,8,0)
(59,39,0)
(8,25,0)
(45,7,0)
(20,59,0)
(6,42,0)
(36,42,0)
(48,61,0)
(11,50,0)
(15,8,0)
(61,48,0)
(34,38,0)
(38,39,0)
(39,0,0)
(51,39,0)
(12,59,0)
(47,29,0)
(52,56,0)
(54,40,0)
(54,5,0)
(56,8,0)
(19,0,0)
(46,54,0)
(55,14,0)
(3,39,0)
(58,51,0)
(13,0,0)
(37,7,0)
(48,50,0)
(57,0,0)
(27,42,0)
(29,16,0)
(15,13,0)
(21,13,0)
(23,13,0)
(4,31,0)
(61,26,0)
(7,51,0)
(11,6,0)
(39,21,0)
(51,7,0)
(26,59,0)
(22,33,0)
(53,17,0)
(6,11,0)
(59,26,0)
(62,21,0)
(50,11,0)
(29,39,0)
(24,18,0)
(22,31,0)
(21,39,0)
(1,0,0)
(14,40,0)
(44,16,0)
(22,18,0)
(30,8,0)
(2,0,0)
(17,39,0)
(13,15,0)
(32,29,0)
(8,0,0)
(50,45,0)
(43,0,0)
(29,13,0)
(60,33,0)
(26,61,0)
(50,48,0)
(9,15,0)
(42,39,0)
(28,54,0)
(7,45,0)
(49,51,0)
(45,50,0)
(41,26,0)
(42,6,0)
(40,54,0)
(40,14,0)
(7,37,1)
(21,13,1)
(56,8,1)
(21,62,1)
(29,39,1)
(33,60,1)
(38,34,1)
(60,38,1)
(15,9,1)
(59,39,1)
(17,39,1)
(59,20,1)
(12,29,1)
(7,51,1)
(49,58,1)
(40,14,1)
(53,48,1)
(6,42,1)
(50,45,1)
(22,18,1)
(38,39,1)
(37,51,1)
(48,50,1)
(26,41,1)
(51,39,1)
(3,56,1)
(62,3,1)
(58,61,1)
(11,6,1)
(45,7,1)
(54,5,1)
(4,48,1)
(55,54,1)
(46,38,1)
(13,15,1)
(20,12,1)
(9,23,1)
(4,17,1)
(27,45,1)
(52,13,1)
(4,40,1)
(28,46,1)
(23,8,1)
(26,59,1)
(15,8,1)
(32,40,1)
(22,33,1)
(24,56,1)
(22,31,1)
(39,21,1)
(29,47,1)
(36,27,1)
(40,54,1)
(29,13,1)
(8,30,1)
(61,26,1)
(14,55,1)
(56,52,1)
(30,35,1)
(17,53,1)
(18,24,1)
(8,25,1)
(42,36,1)
(31,4,1)
(47,32,1)
(34,39,1)
(54,28,1)
(42,39,1)
(48,61,1)
(41,59,1)
(50,11,1)
(51,49,1)
(45,7,2)
(41,40,2)
(59,39,2)
(18,56,2)
(58,61,2)
(34,56,2)
(6,42,2)
(56,8,2)
(29,39,2)
(7,51,2)
(39,56,2)
(11,45,2)
(39,21,2)
(21,56,2)
(6,45,2)
(38,56,2)
(8,25,2)
(42,45,2)
(46,38,2)
(50,11,2)
(61,26,2)
(59,40,2)
(51,39,2)
(26,40,2)
(20,40,2)
(60,38,2)
(28,38,2)
(54,38,2)
(15,8,2)
(4,38,2)
(26,59,2)
(33,38,2)
(24,56,2)
(13,15,2)
(22,31,2)
(48,50,2)
(11,6,2)
(36,45,2)
(50,45,2)
(48,61,2)
(47,40,2)
(3,56,2)
(40,38,2)
(54,5,2)
(37,61,2)
(21,13,2)
(22,33,2)
(42,39,2)
(27,45,2)
(61,40,2)
(62,56,2)
(45,61,2)
(31,38,2)
(40,14,2)
(17,39,2)
(55,54,2)
(49,61,2)
(50,61,2)
(32,40,2)
(29,40,2)
(7,61,2)
(53,48,2)
(17,48,2)
(51,61,2)
(14,54,2)
(48,40,2)
(29,13,2)
(38,39,2)
(40,54,2)
(22,18,2)
(12,40,2)
-----------------------------------
(0,)
(1,dev)
(2,domain)
(3,domain)
(4,0)
(5,unsigned long action)
(6,&domain->devices)
(7,domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(8,*dev = data)
(9,dev)
(10,if (iommu_no_mapping(dev)
(11,list_empty(&domain->devices)
(12,domain)
(13,*pdev = to_pci_dev(dev)
(14,!iommu_pass_through)
(15,to_pci_dev(dev)
(16,)
(17,domain_exit(domain)
(18,return 0;)
(19,pdev)
(20,flags)
(21,find_domain(pdev)
(22,RET)
(23,pdev)
(24,0)
(25,void *data)
(26,domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(27,domain)
(28,BUS_NOTIFY_UNBOUND_DRIVER)
(29,domain_remove_one_dev_info(domain, pdev)
(30,data)
(31,return 0;)
(32,domain)
(33,return 0;)
(34,domain)
(35,dev)
(36,devices)
(37,DOMAIN_FLAG_STATIC_IDENTITY)
(38,!domain)
(39,domain = find_domain(pdev)
(40,action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
(41,DOMAIN_FLAG_VIRTUAL_MACHINE)
(42,domain->devices)
(43,if (action == BUS_NOTIFY_UNBOUND_DRIVER && !iommu_pass_through)
(44,if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(45,!(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(46,action)
(47,pdev)
(48,!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(49,flags)
(50,!(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY)
(51,domain->flags)
(52,dev)
(53,domain)
(54,action == BUS_NOTIFY_UNBOUND_DRIVER)
(55,iommu_pass_through)
(56,iommu_no_mapping(dev)
(57,if (!domain)
(58,domain)
(59,domain->flags)
(60,0)
(61,!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
(62,pdev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^