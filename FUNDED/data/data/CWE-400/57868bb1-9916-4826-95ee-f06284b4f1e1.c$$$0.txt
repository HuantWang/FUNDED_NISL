-----label-----
1
-----code-----
static void badSink(int count)
{
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
20,21
21,22
21,23
22,23
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
33,34
35,36
36,37
38,39
39,40
40,41
40,42
41,42
-----nextToken-----
2,4,6,8,14,16,18,23,24,27,31,32,34,37,42,43
-----computeFrom-----
21,22
21,23
25,26
25,27
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(int count){    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
static void
badSink(int count)
badSink
int count
int
count
count
{    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(12,15,0)
(21,7,0)
(0,9,0)
(10,9,0)
(14,15,0)
(3,0,0)
(7,2,0)
(4,11,0)
(15,8,0)
(1,18,0)
(17,7,0)
(0,15,0)
(18,9,0)
(19,11,0)
(5,6,0)
(13,9,0)
(15,12,0)
(15,0,0)
(6,16,0)
(11,7,0)
(3,18,1)
(3,9,1)
(13,10,1)
(15,14,1)
(1,6,1)
(4,19,1)
(11,4,1)
(9,13,1)
(15,12,1)
(5,0,1)
(14,3,1)
(18,1,1)
(0,9,1)
(0,15,1)
(18,9,1)
(20,0,1)
(15,8,1)
(10,11,1)
(6,5,1)
(5,0,2)
(0,0,2)
(15,8,2)
(15,0,2)
(18,9,2)
(0,9,2)
(3,0,2)
(6,0,2)
(15,12,2)
(0,15,2)
(18,0,2)
(1,0,2)
(14,0,2)
-----------------------------------
(0,i < (size_t)
(1,i)
(2,)
(3,i)
(4,0)
(5,"Hello")
(6,printLine("Hello")
(7,)
(8,int count)
(9,i = 0)
(10,i)
(11,i = 0)
(12,size_t)
(13,0)
(14,count)
(15,(size_t)
(16,)
(17,i)
(18,i++)
(19,i)
(20,RET)
(21,for (i = 0; i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^