-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(5==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
50,52
51,52
51,53
52,53
55,56
57,58
58,59
60,61
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,16,19,20,25,26,29,30,36,38,40,45,46,49,53,54,56,59,64,65
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
28,29
28,30
43,44
43,45
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        /* FIX: Use a relatively small number */        count = 20;    }
5==5
5
5
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
5==5
5
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(32,12,0)
(13,15,0)
(8,35,0)
(14,6,0)
(9,29,0)
(25,6,0)
(12,20,0)
(0,11,0)
(4,6,0)
(19,29,0)
(17,16,0)
(18,14,0)
(6,21,0)
(1,23,0)
(22,19,0)
(33,29,0)
(38,26,0)
(36,11,0)
(15,26,0)
(24,14,0)
(3,7,0)
(5,9,0)
(28,16,0)
(10,11,0)
(23,37,0)
(26,15,0)
(8,26,0)
(35,8,0)
(9,8,0)
(31,12,0)
(27,29,0)
(34,7,0)
(2,8,0)
(8,9,0)
(26,11,0)
(8,12,0)
(8,26,1)
(8,2,1)
(29,33,1)
(5,29,1)
(17,12,1)
(2,5,1)
(18,24,1)
(15,13,1)
(8,35,1)
(5,19,1)
(30,16,1)
(33,27,1)
(7,3,1)
(13,38,1)
(1,9,1)
(24,16,1)
(14,18,1)
(30,9,1)
(19,29,1)
(31,7,1)
(27,14,1)
(9,8,1)
(32,31,1)
(28,17,1)
(12,32,1)
(22,23,1)
(26,15,1)
(19,22,1)
(23,1,1)
(8,12,1)
(17,7,1)
(16,28,1)
(3,34,1)
(34,26,1)
(9,29,1)
(2,9,2)
(29,16,2)
(8,26,2)
(8,35,2)
(22,9,2)
(9,9,2)
(19,9,2)
(33,16,2)
(2,16,2)
(5,9,2)
(8,9,2)
(27,16,2)
(18,16,2)
(12,7,2)
(24,16,2)
(32,7,2)
(8,16,2)
(9,8,2)
(9,16,2)
(14,16,2)
(9,29,2)
(5,16,2)
(8,12,2)
(23,9,2)
(31,7,2)
(1,9,2)
(26,15,2)
(19,29,2)
-----------------------------------
(0,if(5==5)
(1,"Hello")
(2,count)
(3,5)
(4,for (i = 0; i < (size_t)
(5,i)
(6,)
(7,5==5)
(8,(size_t)
(9,i < (size_t)
(10,if(5==5)
(11,)
(12,count = 20)
(13,1)
(14,i = 0)
(15,-1)
(16,5==5)
(17,5)
(18,0)
(19,i++)
(20,)
(21,)
(22,i)
(23,printLine("Hello")
(24,i)
(25,i)
(26,count = -1)
(27,i)
(28,5)
(29,i = 0)
(30,RET)
(31,count)
(32,20)
(33,0)
(34,5)
(35,size_t)
(36,count)
(37,)
(38,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^