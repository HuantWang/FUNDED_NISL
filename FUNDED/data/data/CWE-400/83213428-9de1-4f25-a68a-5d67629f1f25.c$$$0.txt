-----label-----
0
-----code-----
lost_spi_entry *delete_spi_entry(lost_spi_entry *currEntry, __u32 spi)
{
  // Bail if we are at end of list
  if (currEntry == NULL)
    return NULL;

  if (currEntry->spi == spi)
    {
      lost_spi_entry *tempNext = currEntry->next;
      free(currEntry);
      lost_spi_entry_count--;
      return tempNext;
    }

  // recurse if we didn't find the entry we're looking for
  currEntry->next = delete_spi_entry(currEntry->next, spi);

  // return the pointer from where we were called
  return currEntry;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
18,21
18,22
19,20
19,21
20,21
20,22
21,22
23,24
25,26
26,27
28,29
28,30
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
57,58
59,60
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
68,70
68,71
69,70
71,72
71,73
72,73
75,76
77,78
78,79
-----nextToken-----
3,5,6,9,11,12,15,17,22,24,27,32,33,35,40,42,43,47,48,52,54,58,61,66,67,70,73,74,76,79
-----computeFrom-----
20,21
20,22
29,30
29,31
63,64
63,65
-----guardedBy-----
24,27
32,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
lost_spi_entry *delete_spi_entry(lost_spi_entry *currEntry, __u32 spi){  // Bail if we are at end of list  if (currEntry == NULL)    return NULL;  if (currEntry->spi == spi)    {      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      return tempNext;    }  // recurse if we didn't find the entry we're looking for  currEntry->next = delete_spi_entry(currEntry->next, spi);  // return the pointer from where we were called  return currEntry;}
lost_spi_entry
lost_spi_entry
*delete_spi_entry(lost_spi_entry *currEntry, __u32 spi)
*
delete_spi_entry
lost_spi_entry *currEntry
lost_spi_entry
lost_spi_entry
*currEntry
*
currEntry
__u32 spi
__u32
__u32
spi
spi
{  // Bail if we are at end of list  if (currEntry == NULL)    return NULL;  if (currEntry->spi == spi)    {      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      return tempNext;    }  // recurse if we didn't find the entry we're looking for  currEntry->next = delete_spi_entry(currEntry->next, spi);  // return the pointer from where we were called  return currEntry;}
if (currEntry == NULL)    return NULL;
currEntry == NULL
currEntry
currEntry
NULL
NULL
return NULL;
NULL
NULL
if (currEntry->spi == spi)    {      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      return tempNext;    }
currEntry->spi == spi
currEntry->spi
currEntry
currEntry
spi
spi
spi
{      lost_spi_entry *tempNext = currEntry->next;      free(currEntry);      lost_spi_entry_count--;      return tempNext;    }
lost_spi_entry *tempNext = currEntry->next;
lost_spi_entry *tempNext = currEntry->next;
lost_spi_entry
lost_spi_entry
*tempNext = currEntry->next
*
tempNext
= currEntry->next
currEntry->next
currEntry
currEntry
next
free(currEntry);
free(currEntry)
free
free
currEntry
currEntry
lost_spi_entry_count--;
lost_spi_entry_count--
lost_spi_entry_count
lost_spi_entry_count
return tempNext;
tempNext
tempNext
currEntry->next = delete_spi_entry(currEntry->next, spi);
currEntry->next = delete_spi_entry(currEntry->next, spi)
currEntry->next
currEntry
currEntry
next
delete_spi_entry(currEntry->next, spi)
delete_spi_entry
delete_spi_entry
currEntry->next
currEntry
currEntry
next
spi
spi
return currEntry;
currEntry
currEntry
-----joern-----
(19,37,0)
(36,5,0)
(30,39,0)
(20,1,0)
(20,26,0)
(38,26,0)
(5,3,0)
(8,21,0)
(34,24,0)
(26,14,0)
(2,14,0)
(22,1,0)
(34,6,0)
(5,16,0)
(29,25,0)
(25,21,0)
(10,23,0)
(1,3,0)
(31,14,0)
(16,19,0)
(25,14,0)
(19,16,0)
(13,6,0)
(20,18,0)
(37,3,0)
(1,39,0)
(19,24,0)
(21,3,0)
(0,19,0)
(35,31,0)
(6,3,0)
(16,39,0)
(12,18,0)
(17,6,0)
(23,3,0)
(4,2,0)
(26,25,0)
(9,23,0)
(2,3,0)
(37,19,0)
(11,21,0)
(28,39,0)
(33,37,0)
(27,14,0)
(6,34,0)
(15,34,0)
(32,5,0)
(7,37,0)
(21,25,0)
(2,3,1)
(37,3,1)
(33,7,1)
(2,4,1)
(22,16,1)
(32,36,1)
(12,23,1)
(15,6,1)
(20,1,1)
(23,3,1)
(19,37,1)
(10,9,1)
(8,29,1)
(29,34,1)
(5,3,1)
(26,38,1)
(21,11,1)
(1,3,1)
(23,10,1)
(19,0,1)
(31,35,1)
(4,25,1)
(35,2,1)
(37,33,1)
(20,18,1)
(16,19,1)
(6,17,1)
(11,8,1)
(17,13,1)
(26,25,1)
(1,22,1)
(0,37,1)
(34,24,1)
(7,5,1)
(36,34,1)
(20,26,1)
(19,24,1)
(13,23,1)
(6,3,1)
(5,32,1)
(21,3,1)
(34,15,1)
(34,6,1)
(25,21,1)
(38,31,1)
(18,12,1)
(38,34,2)
(13,23,2)
(21,34,2)
(6,23,2)
(26,34,2)
(1,34,2)
(25,34,2)
(16,34,2)
(20,26,2)
(19,34,2)
(33,34,2)
(34,6,2)
(18,23,2)
(7,34,2)
(26,25,2)
(2,3,2)
(23,3,2)
(36,34,2)
(8,34,2)
(17,23,2)
(25,21,2)
(16,19,2)
(19,37,2)
(5,34,2)
(0,34,2)
(12,23,2)
(11,34,2)
(1,3,2)
(31,34,2)
(37,34,2)
(32,34,2)
(20,18,2)
(35,34,2)
(21,3,2)
(4,34,2)
(19,24,2)
(15,23,2)
(34,23,2)
(34,24,2)
(5,3,2)
(37,3,2)
(6,3,2)
(22,34,2)
(20,1,2)
(2,34,2)
(29,34,2)
-----------------------------------
(0,spi)
(1,return currEntry;)
(2,free(currEntry)
(3,lost_spi_entry *currEntry)
(4,currEntry)
(5,currEntry->next)
(6,currEntry->spi)
(7,currEntry)
(8,currEntry)
(9,currEntry)
(10,NULL)
(11,next)
(12,NULL)
(13,currEntry)
(14,)
(15,spi)
(16,currEntry->next = delete_spi_entry(currEntry->next, spi)
(17,spi)
(18,return NULL;)
(19,delete_spi_entry(currEntry->next, spi)
(20,RET)
(21,currEntry->next)
(22,currEntry)
(23,currEntry == NULL)
(24,__u32 spi)
(25,*tempNext = currEntry->next)
(26,return tempNext;)
(27,tempNext)
(28,if (currEntry == NULL)
(29,tempNext)
(30,if (currEntry->spi == spi)
(31,lost_spi_entry_count--)
(32,next)
(33,next)
(34,currEntry->spi == spi)
(35,lost_spi_entry_count)
(36,currEntry)
(37,currEntry->next)
(38,tempNext)
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^