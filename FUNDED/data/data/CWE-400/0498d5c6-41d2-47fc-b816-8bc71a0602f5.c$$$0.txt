-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(5==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
66,67
67,68
67,69
67,70
67,71
68,69
69,70
69,71
70,71
72,73
72,74
74,75
76,77
77,78
77,79
78,79
80,81
80,82
80,83
83,84
84,85
86,87
87,88
87,89
89,90
89,91
89,92
92,93
94,95
94,96
95,96
95,97
96,97
96,98
97,98
100,101
100,102
101,102
104,105
104,106
104,107
104,108
105,106
106,107
106,108
107,108
109,110
109,111
109,112
110,111
112,113
115,116
115,117
116,117
116,118
117,118
119,120
121,122
122,123
123,124
123,125
124,125
127,128
127,129
127,130
127,131
128,129
129,130
129,131
130,131
133,134
133,135
134,135
136,137
136,138
137,138
137,139
138,139
141,142
143,144
144,145
146,147
147,148
147,149
148,149
148,150
149,150
149,151
150,151
152,153
154,155
154,156
154,157
154,158
154,159
155,156
157,158
159,160
160,161
160,162
163,164
163,165
164,165
166,167
168,169
170,171
171,172
171,173
172,173
175,176
175,177
176,177
178,179
179,180
180,181
180,182
181,182
183,184
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,64,65,71,73,75,79,81,82,85,88,90,91,93,98,99,102,103,108,111,113,114,118,120,125,126,131,132,135,139,140,142,145,151,153,156,158,161,162,165,167,169,173,174,177,182,184
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
48,49
48,50
63,64
63,65
95,96
95,97
96,97
96,98
100,101
100,102
106,107
106,108
116,117
116,118
129,130
129,131
133,134
133,135
148,149
148,150
-----guardedBy-----
39,55
102,142
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(5==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
5==5
5
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(13,54,0)
(90,5,0)
(52,8,0)
(65,68,0)
(46,64,0)
(42,18,0)
(93,59,0)
(51,0,0)
(27,61,0)
(88,9,0)
(31,18,0)
(41,2,0)
(100,64,0)
(59,54,0)
(69,63,0)
(0,31,0)
(26,8,0)
(37,66,0)
(0,83,0)
(17,66,0)
(60,66,0)
(79,67,0)
(40,49,0)
(14,94,0)
(97,13,0)
(61,63,0)
(50,54,0)
(9,85,0)
(50,12,0)
(87,21,0)
(55,0,0)
(54,13,0)
(68,0,0)
(44,76,0)
(66,17,0)
(63,78,0)
(21,63,0)
(41,54,0)
(10,50,0)
(74,94,0)
(2,41,0)
(11,61,0)
(99,25,0)
(30,29,0)
(14,31,0)
(89,85,0)
(47,49,0)
(19,23,0)
(43,14,0)
(29,25,0)
(45,66,0)
(22,80,0)
(50,9,0)
(73,7,0)
(39,54,0)
(20,14,0)
(76,44,0)
(96,25,0)
(99,41,0)
(71,94,0)
(12,59,0)
(66,64,0)
(76,0,0)
(59,12,0)
(94,63,0)
(34,41,0)
(16,33,0)
(13,64,0)
(6,18,0)
(1,44,0)
(35,59,0)
(24,18,0)
(59,9,0)
(83,0,0)
(72,9,0)
(22,31,0)
(0,76,0)
(95,88,0)
(33,15,0)
(0,68,0)
(98,17,0)
(77,22,0)
(62,99,0)
(70,85,0)
(64,7,0)
(92,28,0)
(41,99,0)
(81,85,0)
(82,7,0)
(28,31,0)
(48,63,0)
(53,63,0)
(56,50,0)
(41,9,0)
(38,21,0)
(31,14,0)
(3,25,0)
(32,83,0)
(57,63,0)
(58,28,0)
(86,31,0)
(54,91,0)
(5,84,0)
(9,88,0)
(12,50,0)
(7,36,0)
(14,94,1)
(3,28,1)
(99,41,1)
(45,64,1)
(62,29,1)
(19,76,1)
(44,1,1)
(92,58,1)
(40,8,1)
(41,34,1)
(0,68,1)
(38,49,1)
(11,21,1)
(35,93,1)
(1,99,1)
(20,43,1)
(66,64,1)
(83,32,1)
(27,11,1)
(13,97,1)
(4,75,1)
(46,100,1)
(52,9,1)
(50,54,1)
(54,13,1)
(96,3,1)
(58,31,1)
(32,68,1)
(51,44,1)
(28,31,1)
(3,5,1)
(40,54,1)
(41,9,1)
(9,88,1)
(39,17,1)
(0,83,1)
(99,25,1)
(77,75,1)
(59,35,1)
(29,25,1)
(61,27,1)
(50,56,1)
(76,0,1)
(56,10,1)
(87,38,1)
(43,86,1)
(0,55,1)
(41,2,1)
(66,60,1)
(100,8,1)
(12,59,1)
(30,23,1)
(33,16,1)
(95,72,1)
(94,71,1)
(98,66,1)
(76,44,1)
(12,50,1)
(17,98,1)
(93,50,1)
(28,92,1)
(22,31,1)
(5,90,1)
(26,52,1)
(10,94,1)
(8,26,1)
(16,17,1)
(49,47,1)
(50,9,1)
(4,12,1)
(34,62,1)
(30,76,1)
(90,28,1)
(68,65,1)
(40,33,1)
(23,19,1)
(59,54,1)
(60,37,1)
(75,99,1)
(17,66,1)
(97,39,1)
(59,9,1)
(31,14,1)
(86,12,1)
(25,96,1)
(13,64,1)
(41,54,1)
(0,31,1)
(22,77,1)
(55,83,1)
(64,46,1)
(47,40,1)
(71,74,1)
(62,25,1)
(21,87,1)
(74,61,1)
(88,95,1)
(29,30,1)
(14,20,1)
(4,22,1)
(37,45,1)
(4,49,1)
(65,51,1)
(43,12,2)
(77,75,2)
(11,49,2)
(76,99,2)
(17,8,2)
(13,64,2)
(31,12,2)
(12,49,2)
(34,12,2)
(93,50,2)
(20,12,2)
(16,17,2)
(38,49,2)
(71,49,2)
(27,49,2)
(9,88,2)
(33,17,2)
(19,76,2)
(66,8,2)
(96,12,2)
(39,17,2)
(23,76,2)
(0,31,2)
(68,99,2)
(21,49,2)
(76,44,2)
(50,54,2)
(54,13,2)
(10,49,2)
(87,49,2)
(14,12,2)
(46,8,2)
(99,25,2)
(97,17,2)
(62,12,2)
(12,50,2)
(28,31,2)
(54,17,2)
(41,12,2)
(25,12,2)
(51,99,2)
(50,49,2)
(74,49,2)
(35,50,2)
(76,0,2)
(17,66,2)
(0,68,2)
(66,64,2)
(28,12,2)
(0,99,2)
(100,8,2)
(44,99,2)
(58,12,2)
(99,12,2)
(90,28,2)
(0,83,2)
(34,99,2)
(60,8,2)
(12,59,2)
(50,9,2)
(59,54,2)
(55,99,2)
(5,28,2)
(30,99,2)
(59,50,2)
(3,12,2)
(92,12,2)
(86,12,2)
(41,2,2)
(62,99,2)
(75,12,2)
(56,49,2)
(29,25,2)
(13,17,2)
(14,94,2)
(37,8,2)
(1,99,2)
(98,8,2)
(59,9,2)
(41,9,2)
(31,14,2)
(94,49,2)
(29,99,2)
(45,8,2)
(99,99,2)
(22,75,2)
(99,41,2)
(41,99,2)
(83,99,2)
(61,49,2)
(22,31,2)
(64,8,2)
(65,99,2)
(41,54,2)
(32,99,2)
-----------------------------------
(0,fwrite(SENTENCE, sizeof(char)
(1,SENTENCE)
(2,size_t)
(3,i)
(4,RET)
(5,exit(1)
(6,if (pFile == NULL)
(7,)
(8,5==5)
(9,count = -1)
(10,count)
(11,pFile)
(12,count > 0 && count <= 20)
(13,atoi(inputBuffer)
(14,fopen(filename, "w+")
(15,)
(16,"fgets()
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,)
(19,1)
(20,"w+")
(21,i = 0)
(22,fclose(pFile)
(23,exit(1)
(24,if (pFile)
(25,i = 0)
(26,5)
(27,NULL)
(28,pFile == NULL)
(29,i++)
(30,i)
(31,pFile = fopen(filename, "w+")
(32,SENTENCE)
(33,printLine("fgets()
(34,count)
(35,20)
(36,)
(37,CHAR_ARRAY_SIZE)
(38,i)
(39,count)
(40,5)
(41,(size_t)
(42,for (i = 0; i < (size_t)
(43,filename)
(44,strlen(SENTENCE)
(45,inputBuffer)
(46,"")
(47,5)
(48,i)
(49,5==5)
(50,count > 0)
(51,SENTENCE)
(52,5)
(53,pFile)
(54,count = atoi(inputBuffer)
(55,pFile)
(56,0)
(57,if (count > 0 && count <= 20)
(58,pFile)
(59,count <= 20)
(60,stdin)
(61,*pFile = NULL)
(62,i)
(63,)
(64,inputBuffer[CHAR_ARRAY_SIZE] = "")
(65,char)
(66,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(67,)
(68,sizeof(char)
(69,filename)
(70,count)
(71,"output_good.txt")
(72,count)
(73,inputBuffer)
(74,filename)
(75,pFile)
(76,strlen(SENTENCE)
(77,pFile)
(78,)
(79,if (strlen(SENTENCE)
(80,)
(81,if(5==5)
(82,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(83,strlen(SENTENCE)
(84,)
(85,)
(86,pFile)
(87,0)
(88,-1)
(89,if(5==5)
(90,1)
(91,)
(92,NULL)
(93,count)
(94,*filename = "output_good.txt")
(95,1)
(96,0)
(97,inputBuffer)
(98,NULL)
(99,i < (size_t)
(100,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^