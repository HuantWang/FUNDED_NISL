-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
28,31
29,30
31,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,9,11,15,16,19,24,27,30,35,36,41,43,44,49,52,54,57,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117
-----computeFrom-----
13,14
13,15
22,23
22,24
46,47
46,48
47,48
47,49
55,56
55,57
61,62
61,63
72,73
72,74
80,81
80,82
-----guardedBy-----
54,99
57,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(5,29,0)
(22,52,0)
(10,14,0)
(15,0,0)
(1,0,0)
(40,11,0)
(31,6,0)
(51,13,0)
(54,38,0)
(2,6,0)
(0,30,0)
(27,6,0)
(8,26,0)
(0,34,0)
(11,40,0)
(13,9,0)
(1,51,0)
(40,35,0)
(23,46,0)
(32,13,0)
(34,6,0)
(56,4,0)
(32,29,0)
(49,18,0)
(52,40,0)
(0,13,0)
(7,38,0)
(39,10,0)
(32,35,0)
(45,52,0)
(0,1,0)
(41,30,0)
(45,38,0)
(50,54,0)
(37,26,0)
(36,54,0)
(20,51,0)
(13,17,0)
(28,49,0)
(48,22,0)
(22,38,0)
(18,19,0)
(51,1,0)
(30,0,0)
(9,13,0)
(55,56,0)
(29,32,0)
(35,40,0)
(21,23,0)
(35,32,0)
(44,52,0)
(51,34,0)
(18,49,0)
(26,52,0)
(54,52,0)
(33,56,0)
(12,32,0)
(42,34,0)
(32,34,0)
(24,34,0)
(52,38,0)
(53,51,0)
(43,45,0)
(16,13,0)
(40,52,0)
(25,13,1)
(1,51,1)
(39,25,1)
(21,1,1)
(45,52,1)
(12,44,1)
(5,12,1)
(26,37,1)
(0,30,1)
(44,1,1)
(40,35,1)
(54,36,1)
(29,5,1)
(51,20,1)
(0,34,1)
(41,15,1)
(26,52,1)
(53,0,1)
(20,53,1)
(10,39,1)
(51,13,1)
(9,16,1)
(36,50,1)
(54,52,1)
(37,8,1)
(25,47,1)
(3,23,1)
(45,43,1)
(23,21,1)
(47,34,1)
(35,32,1)
(50,26,1)
(3,10,1)
(50,18,1)
(16,47,1)
(49,28,1)
(8,52,1)
(52,40,1)
(43,54,1)
(32,13,1)
(0,13,1)
(1,0,1)
(28,26,1)
(40,11,1)
(42,24,1)
(32,29,1)
(30,41,1)
(18,49,1)
(51,34,1)
(48,45,1)
(22,52,1)
(13,9,1)
(34,42,1)
(15,25,1)
(32,34,1)
(3,22,1)
(22,48,1)
(40,11,2)
(16,47,2)
(40,35,2)
(10,25,2)
(0,13,2)
(26,1,2)
(39,25,2)
(12,1,2)
(41,25,2)
(32,34,2)
(26,52,2)
(51,13,2)
(51,0,2)
(51,34,2)
(15,25,2)
(36,1,2)
(5,1,2)
(53,0,2)
(13,9,2)
(23,1,2)
(32,1,2)
(20,0,2)
(32,29,2)
(45,52,2)
(22,1,2)
(1,0,2)
(1,51,2)
(9,47,2)
(37,1,2)
(43,1,2)
(48,1,2)
(54,52,2)
(18,26,2)
(18,49,2)
(13,47,2)
(28,26,2)
(44,1,2)
(52,40,2)
(29,1,2)
(8,1,2)
(49,26,2)
(1,25,2)
(50,1,2)
(0,30,2)
(32,13,2)
(21,1,2)
(54,1,2)
(0,25,2)
(52,1,2)
(0,34,2)
(35,1,2)
(30,25,2)
(45,1,2)
(35,32,2)
(40,1,2)
(22,52,2)
-----------------------------------
(0,data > wcslen(HELLO_STRING)
(1,data > wcslen(HELLO_STRING)
(2,if(GLOBAL_CONST_FALSE)
(3,RET)
(4,)
(5,wchar_t)
(6,)
(7,if (myString == NULL)
(8,myString)
(9,rand()
(10,printLine("Benign, fixed string")
(11,wchar_t *)
(12,data)
(13,data = rand()
(14,)
(15,data)
(16,data)
(17,)
(18,exit(-1)
(19,)
(20,100)
(21,"Input is less than the length of the source string or too large")
(22,free(myString)
(23,printLine("Input is less than the length of the source string or too large")
(24,data)
(25,GLOBAL_CONST_FALSE)
(26,myString == NULL)
(27,data)
(28,1)
(29,sizeof(wchar_t)
(30,wcslen(HELLO_STRING)
(31,if(GLOBAL_CONST_TRUE)
(32,data*sizeof(wchar_t)
(33,if (data > wcslen(HELLO_STRING)
(34,data = 0)
(35,malloc(data*sizeof(wchar_t)
(36,HELLO_STRING)
(37,NULL)
(38,)
(39,"Benign, fixed string")
(40,(wchar_t *)
(41,HELLO_STRING)
(42,0)
(43,myString)
(44,myString)
(45,printWLine(myString)
(46,)
(47,GLOBAL_CONST_TRUE)
(48,myString)
(49,-1)
(50,myString)
(51,data < 100)
(52,myString = (wchar_t *)
(53,data)
(54,wcscpy(myString, HELLO_STRING)
(55,myString)
(56,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^