-----label-----
0
-----code-----
static void good1()
{
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
8,9
9,10
10,11
10,12
11,12
14,15
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
72,73
72,74
73,74
75,76
75,77
76,77
76,78
78,79
80,81
80,82
80,83
81,82
83,84
85,86
85,87
86,87
88,89
89,90
89,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
112,113
113,114
113,115
114,115
116,117
116,118
117,118
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,7,12,13,18,20,21,25,27,30,32,35,36,40,42,47,49,52,54,55,60,61,62,66,69,70,74,77,79,82,84,87,90,91,95,97,102,104,109,110,111,115,118,119,123,125
-----computeFrom-----
31,32
31,33
38,39
38,40
57,58
57,59
72,73
72,74
85,86
85,87
93,94
93,95
100,101
100,102
106,107
106,108
-----guardedBy-----
95,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(51,65,0)
(4,59,0)
(37,38,0)
(32,47,0)
(43,30,0)
(24,10,0)
(65,30,0)
(3,27,0)
(47,64,0)
(43,51,0)
(64,6,0)
(45,28,0)
(50,7,0)
(63,42,0)
(49,56,0)
(44,51,0)
(28,35,0)
(7,56,0)
(59,41,0)
(46,16,0)
(48,27,0)
(48,28,0)
(6,64,0)
(51,53,0)
(58,48,0)
(36,58,0)
(51,59,0)
(12,10,0)
(29,27,0)
(11,26,0)
(1,60,0)
(10,29,0)
(13,58,0)
(22,62,0)
(26,59,0)
(23,41,0)
(9,61,0)
(21,27,0)
(39,41,0)
(28,48,0)
(10,53,0)
(38,34,0)
(42,48,0)
(47,48,0)
(0,48,0)
(35,7,0)
(19,53,0)
(57,17,0)
(62,27,0)
(20,64,0)
(23,55,0)
(55,23,0)
(40,42,0)
(41,23,0)
(15,59,0)
(64,47,0)
(7,35,0)
(35,28,0)
(51,43,0)
(60,9,0)
(17,41,0)
(62,59,0)
(54,6,0)
(42,53,0)
(47,23,0)
(5,26,0)
(62,48,0)
(9,60,0)
(59,30,0)
(23,47,0)
(8,27,0)
(56,7,0)
(10,48,0)
(29,10,0)
(25,17,0)
(33,27,0)
(26,65,0)
(27,31,0)
(28,45,0)
(53,27,0)
(41,27,0)
(14,51,0)
(52,65,0)
(23,55,1)
(28,35,1)
(7,56,1)
(13,36,1)
(57,41,1)
(51,44,1)
(59,41,1)
(38,37,1)
(36,48,1)
(22,17,1)
(32,39,1)
(62,59,1)
(63,9,1)
(26,11,1)
(41,23,1)
(47,64,1)
(60,1,1)
(6,54,1)
(65,52,1)
(26,59,1)
(59,15,1)
(42,48,1)
(44,14,1)
(23,47,1)
(54,20,1)
(51,65,1)
(28,45,1)
(5,59,1)
(29,10,1)
(24,12,1)
(48,28,1)
(62,22,1)
(63,58,1)
(11,5,1)
(25,57,1)
(56,49,1)
(4,17,1)
(14,65,1)
(51,53,1)
(9,60,1)
(42,40,1)
(64,6,1)
(35,7,1)
(50,0,1)
(53,19,1)
(47,48,1)
(12,53,1)
(1,58,1)
(22,43,1)
(17,25,1)
(10,48,1)
(19,42,1)
(62,48,1)
(10,24,1)
(17,41,1)
(40,63,1)
(10,53,1)
(37,18,1)
(58,13,1)
(43,51,1)
(15,4,1)
(20,32,1)
(0,18,1)
(51,59,1)
(39,29,1)
(2,62,1)
(2,38,1)
(49,50,1)
(52,26,1)
(58,48,1)
(11,17,2)
(42,48,2)
(37,18,2)
(26,59,2)
(17,18,2)
(10,48,2)
(5,17,2)
(12,18,2)
(24,18,2)
(64,18,2)
(10,53,2)
(63,18,2)
(41,23,2)
(59,17,2)
(29,10,2)
(44,17,2)
(47,64,2)
(29,18,2)
(62,59,2)
(17,41,2)
(51,59,2)
(28,45,2)
(10,18,2)
(0,18,2)
(6,18,2)
(52,17,2)
(35,18,2)
(14,17,2)
(64,6,2)
(39,18,2)
(35,7,2)
(28,35,2)
(13,18,2)
(53,18,2)
(48,18,2)
(51,53,2)
(23,47,2)
(20,18,2)
(62,48,2)
(42,18,2)
(41,18,2)
(32,18,2)
(60,58,2)
(36,18,2)
(23,55,2)
(40,18,2)
(47,18,2)
(7,18,2)
(38,18,2)
(19,18,2)
(43,17,2)
(47,48,2)
(50,18,2)
(58,48,2)
(54,18,2)
(51,17,2)
(48,28,2)
(57,18,2)
(9,60,2)
(49,18,2)
(65,17,2)
(25,18,2)
(62,18,2)
(59,41,2)
(7,56,2)
(22,18,2)
(56,18,2)
(51,65,2)
(15,17,2)
(9,58,2)
(28,18,2)
(23,18,2)
(43,51,2)
(1,58,2)
(26,17,2)
(4,17,2)
(58,18,2)
-----------------------------------
(0,data)
(1,1)
(2,RET)
(3,data)
(4,data)
(5,data)
(6,sizeof(int)
(7,100*sizeof(int)
(8,tmpData)
(9,exit(-1)
(10,data[0])
(11,0)
(12,data)
(13,NULL)
(14,data)
(15,tmpData)
(16,)
(17,tmpData != NULL)
(18,0)
(19,5)
(20,130000)
(21,if (tmpData != NULL)
(22,data)
(23,(int *)
(24,0)
(25,NULL)
(26,data[0])
(27,)
(28,(int *)
(29,printIntLine(data[0])
(30,)
(31,)
(32,data)
(33,if (data == NULL)
(34,)
(35,malloc(100*sizeof(int)
(36,data)
(37,"Benign, fixed string")
(38,printLine("Benign, fixed string")
(39,tmpData)
(40,0)
(41,tmpData = (int *)
(42,data[0])
(43,printIntLine(data[0])
(44,0)
(45,int *)
(46,if(0)
(47,realloc(data, (130000)
(48,* data = (int *)
(49,int)
(50,100)
(51,data[0])
(52,10)
(53,data[0] = 5)
(54,int)
(55,int *)
(56,sizeof(int)
(57,tmpData)
(58,data == NULL)
(59,data = tmpData)
(60,-1)
(61,)
(62,free(data)
(63,data)
(64,(130000)
(65,data[0] = 10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^